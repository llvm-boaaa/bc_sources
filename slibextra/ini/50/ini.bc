; ModuleID = 'ini.c'
source_filename = "ini.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct.ini_parse_string_ctx = type { i8*, i64 }

@.str = private unnamed_addr constant [3 x i8] c";#\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"=:\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c";\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @ini_parse_stream(i8* (i8*, i32, i8*)* %reader, i8* %stream, i32 (i8*, i8*, i8*, i8*)* %handler, i8* %user) #0 {
entry:
  %reader.addr = alloca i8* (i8*, i32, i8*)*, align 8
  %stream.addr = alloca i8*, align 8
  %handler.addr = alloca i32 (i8*, i8*, i8*, i8*)*, align 8
  %user.addr = alloca i8*, align 8
  %line = alloca [200 x i8], align 16
  %max_line = alloca i32, align 4
  %section = alloca [50 x i8], align 16
  %prev_name = alloca [50 x i8], align 16
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  %name = alloca i8*, align 8
  %value = alloca i8*, align 8
  %lineno = alloca i32, align 4
  %error = alloca i32, align 4
  store i8* (i8*, i32, i8*)* %reader, i8* (i8*, i32, i8*)** %reader.addr, align 8
  store i8* %stream, i8** %stream.addr, align 8
  store i32 (i8*, i8*, i8*, i8*)* %handler, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i32 200, i32* %max_line, align 4
  %0 = bitcast [50 x i8]* %section to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 50, i32 16, i1 false)
  %1 = bitcast [50 x i8]* %prev_name to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 50, i32 16, i1 false)
  store i32 0, i32* %lineno, align 4
  store i32 0, i32* %error, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end95, %entry
  %2 = load i8* (i8*, i32, i8*)*, i8* (i8*, i32, i8*)** %reader.addr, align 8
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %line, i32 0, i32 0
  %3 = load i32, i32* %max_line, align 4
  %4 = load i8*, i8** %stream.addr, align 8
  %call = call i8* %2(i8* %arraydecay, i32 %3, i8* %4)
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %lineno, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %lineno, align 4
  %arraydecay1 = getelementptr inbounds [200 x i8], [200 x i8]* %line, i32 0, i32 0
  store i8* %arraydecay1, i8** %start, align 8
  %6 = load i32, i32* %lineno, align 4
  %cmp2 = icmp eq i32 %6, 1
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %7 = load i8*, i8** %start, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  %cmp3 = icmp eq i32 %conv, 239
  br i1 %cmp3, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %9 = load i8*, i8** %start, align 8
  %arrayidx6 = getelementptr inbounds i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %10 to i32
  %cmp8 = icmp eq i32 %conv7, 187
  br i1 %cmp8, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true5
  %11 = load i8*, i8** %start, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 2
  %12 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv12, 191
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true10
  %13 = load i8*, i8** %start, align 8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 3
  store i8* %add.ptr, i8** %start, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true10, %land.lhs.true5, %land.lhs.true, %while.body
  %14 = load i8*, i8** %start, align 8
  %call15 = call i8* @rstrip(i8* %14)
  %call16 = call i8* @lskip(i8* %call15)
  store i8* %call16, i8** %start, align 8
  %15 = load i8*, i8** %start, align 8
  %16 = load i8, i8* %15, align 1
  %conv17 = sext i8 %16 to i32
  %call18 = call i8* @strchr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i32 %conv17)
  %tobool = icmp ne i8* %call18, null
  br i1 %tobool, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.end
  br label %if.end95

if.else:                                          ; preds = %if.end
  %arraydecay20 = getelementptr inbounds [50 x i8], [50 x i8]* %prev_name, i32 0, i32 0
  %17 = load i8, i8* %arraydecay20, align 16
  %conv21 = sext i8 %17 to i32
  %tobool22 = icmp ne i32 %conv21, 0
  br i1 %tobool22, label %land.lhs.true23, label %if.else39

land.lhs.true23:                                  ; preds = %if.else
  %18 = load i8*, i8** %start, align 8
  %19 = load i8, i8* %18, align 1
  %conv24 = sext i8 %19 to i32
  %tobool25 = icmp ne i32 %conv24, 0
  br i1 %tobool25, label %land.lhs.true26, label %if.else39

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %20 = load i8*, i8** %start, align 8
  %arraydecay27 = getelementptr inbounds [200 x i8], [200 x i8]* %line, i32 0, i32 0
  %cmp28 = icmp ugt i8* %20, %arraydecay27
  br i1 %cmp28, label %if.then30, label %if.else39

if.then30:                                        ; preds = %land.lhs.true26
  %21 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  %22 = load i8*, i8** %user.addr, align 8
  %arraydecay31 = getelementptr inbounds [50 x i8], [50 x i8]* %section, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [50 x i8], [50 x i8]* %prev_name, i32 0, i32 0
  %23 = load i8*, i8** %start, align 8
  %call33 = call i32 %21(i8* %22, i8* %arraydecay31, i8* %arraydecay32, i8* %23)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.end38, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %if.then30
  %24 = load i32, i32* %error, align 4
  %tobool36 = icmp ne i32 %24, 0
  br i1 %tobool36, label %if.end38, label %if.then37

if.then37:                                        ; preds = %land.lhs.true35
  %25 = load i32, i32* %lineno, align 4
  store i32 %25, i32* %error, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %land.lhs.true35, %if.then30
  br label %if.end94

if.else39:                                        ; preds = %land.lhs.true26, %land.lhs.true23, %if.else
  %26 = load i8*, i8** %start, align 8
  %27 = load i8, i8* %26, align 1
  %conv40 = sext i8 %27 to i32
  %cmp41 = icmp eq i32 %conv40, 91
  br i1 %cmp41, label %if.then43, label %if.else59

if.then43:                                        ; preds = %if.else39
  %28 = load i8*, i8** %start, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %28, i64 1
  %call45 = call i8* @find_chars_or_comment(i8* %add.ptr44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  store i8* %call45, i8** %end, align 8
  %29 = load i8*, i8** %end, align 8
  %30 = load i8, i8* %29, align 1
  %conv46 = sext i8 %30 to i32
  %cmp47 = icmp eq i32 %conv46, 93
  br i1 %cmp47, label %if.then49, label %if.else54

if.then49:                                        ; preds = %if.then43
  %31 = load i8*, i8** %end, align 8
  store i8 0, i8* %31, align 1
  %arraydecay50 = getelementptr inbounds [50 x i8], [50 x i8]* %section, i32 0, i32 0
  %32 = load i8*, i8** %start, align 8
  %add.ptr51 = getelementptr inbounds i8, i8* %32, i64 1
  %call52 = call i8* @strncpy0(i8* %arraydecay50, i8* %add.ptr51, i64 50)
  %arraydecay53 = getelementptr inbounds [50 x i8], [50 x i8]* %prev_name, i32 0, i32 0
  store i8 0, i8* %arraydecay53, align 16
  br label %if.end58

if.else54:                                        ; preds = %if.then43
  %33 = load i32, i32* %error, align 4
  %tobool55 = icmp ne i32 %33, 0
  br i1 %tobool55, label %if.end57, label %if.then56

if.then56:                                        ; preds = %if.else54
  %34 = load i32, i32* %lineno, align 4
  store i32 %34, i32* %error, align 4
  br label %if.end57

if.end57:                                         ; preds = %if.then56, %if.else54
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then49
  br label %if.end93

if.else59:                                        ; preds = %if.else39
  %35 = load i8*, i8** %start, align 8
  %36 = load i8, i8* %35, align 1
  %tobool60 = icmp ne i8 %36, 0
  br i1 %tobool60, label %if.then61, label %if.end92

if.then61:                                        ; preds = %if.else59
  %37 = load i8*, i8** %start, align 8
  %call62 = call i8* @find_chars_or_comment(i8* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0))
  store i8* %call62, i8** %end, align 8
  %38 = load i8*, i8** %end, align 8
  %39 = load i8, i8* %38, align 1
  %conv63 = sext i8 %39 to i32
  %cmp64 = icmp eq i32 %conv63, 61
  br i1 %cmp64, label %if.then69, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then61
  %40 = load i8*, i8** %end, align 8
  %41 = load i8, i8* %40, align 1
  %conv66 = sext i8 %41 to i32
  %cmp67 = icmp eq i32 %conv66, 58
  br i1 %cmp67, label %if.then69, label %if.else87

if.then69:                                        ; preds = %lor.lhs.false, %if.then61
  %42 = load i8*, i8** %end, align 8
  store i8 0, i8* %42, align 1
  %43 = load i8*, i8** %start, align 8
  %call70 = call i8* @rstrip(i8* %43)
  store i8* %call70, i8** %name, align 8
  %44 = load i8*, i8** %end, align 8
  %add.ptr71 = getelementptr inbounds i8, i8* %44, i64 1
  store i8* %add.ptr71, i8** %value, align 8
  %45 = load i8*, i8** %value, align 8
  %call72 = call i8* @find_chars_or_comment(i8* %45, i8* null)
  store i8* %call72, i8** %end, align 8
  %46 = load i8*, i8** %end, align 8
  %47 = load i8, i8* %46, align 1
  %tobool73 = icmp ne i8 %47, 0
  br i1 %tobool73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.then69
  %48 = load i8*, i8** %end, align 8
  store i8 0, i8* %48, align 1
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.then69
  %49 = load i8*, i8** %value, align 8
  %call76 = call i8* @lskip(i8* %49)
  store i8* %call76, i8** %value, align 8
  %50 = load i8*, i8** %value, align 8
  %call77 = call i8* @rstrip(i8* %50)
  %arraydecay78 = getelementptr inbounds [50 x i8], [50 x i8]* %prev_name, i32 0, i32 0
  %51 = load i8*, i8** %name, align 8
  %call79 = call i8* @strncpy0(i8* %arraydecay78, i8* %51, i64 50)
  %52 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  %53 = load i8*, i8** %user.addr, align 8
  %arraydecay80 = getelementptr inbounds [50 x i8], [50 x i8]* %section, i32 0, i32 0
  %54 = load i8*, i8** %name, align 8
  %55 = load i8*, i8** %value, align 8
  %call81 = call i32 %52(i8* %53, i8* %arraydecay80, i8* %54, i8* %55)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.end86, label %land.lhs.true83

land.lhs.true83:                                  ; preds = %if.end75
  %56 = load i32, i32* %error, align 4
  %tobool84 = icmp ne i32 %56, 0
  br i1 %tobool84, label %if.end86, label %if.then85

if.then85:                                        ; preds = %land.lhs.true83
  %57 = load i32, i32* %lineno, align 4
  store i32 %57, i32* %error, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then85, %land.lhs.true83, %if.end75
  br label %if.end91

if.else87:                                        ; preds = %lor.lhs.false
  %58 = load i32, i32* %error, align 4
  %tobool88 = icmp ne i32 %58, 0
  br i1 %tobool88, label %if.end90, label %if.then89

if.then89:                                        ; preds = %if.else87
  %59 = load i32, i32* %lineno, align 4
  store i32 %59, i32* %error, align 4
  br label %if.end90

if.end90:                                         ; preds = %if.then89, %if.else87
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end86
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.else59
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.end58
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.end38
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.then19
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %60 = load i32, i32* %error, align 4
  ret i32 %60
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @lskip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i8*, i8** %s.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv1 = zext i8 %3 to i32
  %call = call i32 @isspace(i32 %conv1) #4
  %tobool2 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %tobool2, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i8*, i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %6 = load i8*, i8** %s.addr, align 8
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @rstrip(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i8*, i8** %s.addr, align 8
  %call = call i64 @strlen(i8* %1)
  %add.ptr = getelementptr inbounds i8, i8* %0, i64 %call
  store i8* %add.ptr, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 8
  %3 = load i8*, i8** %s.addr, align 8
  %cmp = icmp ugt i8* %2, %3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %4 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  %5 = load i8, i8* %incdec.ptr, align 1
  %conv = zext i8 %5 to i32
  %call1 = call i32 @isspace(i32 %conv) #4
  %tobool = icmp ne i32 %call1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load i8*, i8** %p, align 8
  store i8 0, i8* %7, align 1
  br label %while.cond

while.end:                                        ; preds = %land.end
  %8 = load i8*, i8** %s.addr, align 8
  ret i8* %8
}

declare i8* @strchr(i8*, i32) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @find_chars_or_comment(i8* %s, i8* %chars) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %chars.addr = alloca i8*, align 8
  %was_space = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  store i8* %chars, i8** %chars.addr, align 8
  store i32 0, i32* %was_space, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %land.end9

land.lhs.true:                                    ; preds = %while.cond
  %2 = load i8*, i8** %chars.addr, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %lor.lhs.false, label %land.rhs

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load i8*, i8** %chars.addr, align 8
  %4 = load i8*, i8** %s.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  %call = call i8* @strchr(i8* %3, i32 %conv2)
  %tobool3 = icmp ne i8* %call, null
  br i1 %tobool3, label %land.end9, label %land.rhs

land.rhs:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %6 = load i32, i32* %was_space, align 4
  %tobool4 = icmp ne i32 %6, 0
  br i1 %tobool4, label %land.rhs5, label %land.end

land.rhs5:                                        ; preds = %land.rhs
  %7 = load i8*, i8** %s.addr, align 8
  %8 = load i8, i8* %7, align 1
  %conv6 = sext i8 %8 to i32
  %call7 = call i8* @strchr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i32 0, i32 0), i32 %conv6)
  %tobool8 = icmp ne i8* %call7, null
  br label %land.end

land.end:                                         ; preds = %land.rhs5, %land.rhs
  %9 = phi i1 [ false, %land.rhs ], [ %tobool8, %land.rhs5 ]
  %lnot = xor i1 %9, true
  br label %land.end9

land.end9:                                        ; preds = %land.end, %lor.lhs.false, %while.cond
  %10 = phi i1 [ false, %lor.lhs.false ], [ false, %while.cond ], [ %lnot, %land.end ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end9
  %11 = load i8*, i8** %s.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv10 = zext i8 %12 to i32
  %call11 = call i32 @isspace(i32 %conv10) #4
  store i32 %call11, i32* %was_space, align 4
  %13 = load i8*, i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end9
  %14 = load i8*, i8** %s.addr, align 8
  ret i8* %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @strncpy0(i8* %dest, i8* %src, i64 %size) #0 {
entry:
  %dest.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %dest, i8** %dest.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %size.addr, align 8
  %sub = sub i64 %1, 1
  %cmp = icmp ult i64 %0, %sub
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i8*, i8** %src.addr, align 8
  %3 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %tobool, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %6 = load i8*, i8** %src.addr, align 8
  %7 = load i64, i64* %i, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i8, i8* %arrayidx1, align 1
  %9 = load i8*, i8** %dest.addr, align 8
  %10 = load i64, i64* %i, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %9, i64 %10
  store i8 %8, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i64, i64* %i, align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %12 = load i8*, i8** %dest.addr, align 8
  %13 = load i64, i64* %i, align 8
  %arrayidx3 = getelementptr inbounds i8, i8* %12, i64 %13
  store i8 0, i8* %arrayidx3, align 1
  %14 = load i8*, i8** %dest.addr, align 8
  ret i8* %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @ini_parse_file(%struct.__sFILE* %file, i32 (i8*, i8*, i8*, i8*)* %handler, i8* %user) #0 {
entry:
  %file.addr = alloca %struct.__sFILE*, align 8
  %handler.addr = alloca i32 (i8*, i8*, i8*, i8*)*, align 8
  %user.addr = alloca i8*, align 8
  store %struct.__sFILE* %file, %struct.__sFILE** %file.addr, align 8
  store i32 (i8*, i8*, i8*, i8*)* %handler, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  %0 = load %struct.__sFILE*, %struct.__sFILE** %file.addr, align 8
  %1 = bitcast %struct.__sFILE* %0 to i8*
  %2 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  %3 = load i8*, i8** %user.addr, align 8
  %call = call i32 @ini_parse_stream(i8* (i8*, i32, i8*)* bitcast (i8* (i8*, i32, %struct.__sFILE*)* @fgets to i8* (i8*, i32, i8*)*), i8* %1, i32 (i8*, i8*, i8*, i8*)* %2, i8* %3)
  ret i32 %call
}

declare i8* @fgets(i8*, i32, %struct.__sFILE*) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @ini_parse(i8* %filename, i32 (i8*, i8*, i8*, i8*)* %handler, i8* %user) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca i8*, align 8
  %handler.addr = alloca i32 (i8*, i8*, i8*, i8*)*, align 8
  %user.addr = alloca i8*, align 8
  %file = alloca %struct.__sFILE*, align 8
  %error = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8
  store i32 (i8*, i8*, i8*, i8*)* %handler, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  %0 = load i8*, i8** %filename.addr, align 8
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %file, align 8
  %1 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8
  %tobool = icmp ne %struct.__sFILE* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8
  %3 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  %4 = load i8*, i8** %user.addr, align 8
  %call1 = call i32 @ini_parse_file(%struct.__sFILE* %2, i32 (i8*, i8*, i8*, i8*)* %3, i8* %4)
  store i32 %call1, i32* %error, align 4
  %5 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8
  %call2 = call i32 @fclose(%struct.__sFILE* %5)
  %6 = load i32, i32* %error, align 4
  store i32 %6, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #2

declare i32 @fclose(%struct.__sFILE*) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @ini_parse_string(i8* %string, i32 (i8*, i8*, i8*, i8*)* %handler, i8* %user) #0 {
entry:
  %string.addr = alloca i8*, align 8
  %handler.addr = alloca i32 (i8*, i8*, i8*, i8*)*, align 8
  %user.addr = alloca i8*, align 8
  %ctx = alloca %struct.ini_parse_string_ctx, align 8
  store i8* %string, i8** %string.addr, align 8
  store i32 (i8*, i8*, i8*, i8*)* %handler, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  %0 = load i8*, i8** %string.addr, align 8
  %ptr = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %ctx, i32 0, i32 0
  store i8* %0, i8** %ptr, align 8
  %1 = load i8*, i8** %string.addr, align 8
  %call = call i64 @strlen(i8* %1)
  %num_left = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %ctx, i32 0, i32 1
  store i64 %call, i64* %num_left, align 8
  %2 = bitcast %struct.ini_parse_string_ctx* %ctx to i8*
  %3 = load i32 (i8*, i8*, i8*, i8*)*, i32 (i8*, i8*, i8*, i8*)** %handler.addr, align 8
  %4 = load i8*, i8** %user.addr, align 8
  %call1 = call i32 @ini_parse_stream(i8* (i8*, i32, i8*)* @ini_reader_string, i8* %2, i32 (i8*, i8*, i8*, i8*)* %3, i8* %4)
  ret i32 %call1
}

declare i64 @strlen(i8*) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @ini_reader_string(i8* %str, i32 %num, i8* %stream) #0 {
entry:
  %retval = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %num.addr = alloca i32, align 4
  %stream.addr = alloca i8*, align 8
  %ctx = alloca %struct.ini_parse_string_ctx*, align 8
  %ctx_ptr = alloca i8*, align 8
  %ctx_num_left = alloca i64, align 8
  %strp = alloca i8*, align 8
  %c = alloca i8, align 1
  store i8* %str, i8** %str.addr, align 8
  store i32 %num, i32* %num.addr, align 4
  store i8* %stream, i8** %stream.addr, align 8
  %0 = load i8*, i8** %stream.addr, align 8
  %1 = bitcast i8* %0 to %struct.ini_parse_string_ctx*
  store %struct.ini_parse_string_ctx* %1, %struct.ini_parse_string_ctx** %ctx, align 8
  %2 = load %struct.ini_parse_string_ctx*, %struct.ini_parse_string_ctx** %ctx, align 8
  %ptr = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %2, i32 0, i32 0
  %3 = load i8*, i8** %ptr, align 8
  store i8* %3, i8** %ctx_ptr, align 8
  %4 = load %struct.ini_parse_string_ctx*, %struct.ini_parse_string_ctx** %ctx, align 8
  %num_left = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %4, i32 0, i32 1
  %5 = load i64, i64* %num_left, align 8
  store i64 %5, i64* %ctx_num_left, align 8
  %6 = load i8*, i8** %str.addr, align 8
  store i8* %6, i8** %strp, align 8
  %7 = load i64, i64* %ctx_num_left, align 8
  %cmp = icmp eq i64 %7, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load i32, i32* %num.addr, align 4
  %cmp1 = icmp slt i32 %8, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %while.cond

while.cond:                                       ; preds = %if.end8, %if.end
  %9 = load i32, i32* %num.addr, align 4
  %cmp2 = icmp sgt i32 %9, 1
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %10 = load i64, i64* %ctx_num_left, align 8
  %cmp3 = icmp ne i64 %10, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %11 = phi i1 [ false, %while.cond ], [ %cmp3, %land.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = load i8*, i8** %ctx_ptr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %ctx_ptr, align 8
  %13 = load i8, i8* %12, align 1
  store i8 %13, i8* %c, align 1
  %14 = load i64, i64* %ctx_num_left, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ctx_num_left, align 8
  %15 = load i8, i8* %c, align 1
  %16 = load i8*, i8** %strp, align 8
  %incdec.ptr4 = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr4, i8** %strp, align 8
  store i8 %15, i8* %16, align 1
  %17 = load i8, i8* %c, align 1
  %conv = sext i8 %17 to i32
  %cmp5 = icmp eq i32 %conv, 10
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  br label %while.end

if.end8:                                          ; preds = %while.body
  %18 = load i32, i32* %num.addr, align 4
  %dec9 = add nsw i32 %18, -1
  store i32 %dec9, i32* %num.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then7, %land.end
  %19 = load i8*, i8** %strp, align 8
  store i8 0, i8* %19, align 1
  %20 = load i8*, i8** %ctx_ptr, align 8
  %21 = load %struct.ini_parse_string_ctx*, %struct.ini_parse_string_ctx** %ctx, align 8
  %ptr10 = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %21, i32 0, i32 0
  store i8* %20, i8** %ptr10, align 8
  %22 = load i64, i64* %ctx_num_left, align 8
  %23 = load %struct.ini_parse_string_ctx*, %struct.ini_parse_string_ctx** %ctx, align 8
  %num_left11 = getelementptr inbounds %struct.ini_parse_string_ctx, %struct.ini_parse_string_ctx* %23, i32 0, i32 1
  store i64 %22, i64* %num_left11, align 8
  %24 = load i8*, i8** %str.addr, align 8
  store i8* %24, i8** %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %if.then
  %25 = load i8*, i8** %retval, align 8
  ret i8* %25
}

; Function Attrs: nounwind readonly
declare i32 @isspace(i32) #3

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 5.0.2 (https://github.com/llvm-mirror/clang.git 26cac19a0d622afc91cd52a002921074bccc6a27) (https://github.com/llvm-mirror/llvm.git da4a2839d80ac52958be0129b871beedfe90136e)"}
