; ModuleID = 'miniz.c'
source_filename = "miniz.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%struct.anon = type { i32, i8* }
%struct.mz_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.mz_internal_state*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.mz_internal_state = type opaque
%struct.tdefl_compressor = type { i32 (i8*, i32, i8*)*, i8*, i32, [2 x i32], i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64*, i64*, i32, i8*, i64, i64, [33025 x i8], [3 x [288 x i16]], [3 x [288 x i16]], [3 x [288 x i8]], [65536 x i8], [32768 x i16], [32768 x i16], [85196 x i8] }
%struct.inflate_state = type { %struct.tinfl_decompressor_tag, i32, i32, i32, i32, i32, [32768 x i8], i32 }
%struct.tinfl_decompressor_tag = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i64, i64, [3 x %struct.tinfl_huff_table], [4 x i8], [457 x i8] }
%struct.tinfl_huff_table = type { [288 x i8], [1024 x i16], [576 x i16] }
%struct.tdefl_output_buffer = type { i64, i64, i8*, i32 }
%struct.mz_zip_archive = type { i64, i64, i32, i32, i32, i32, i64, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i8* (i8*, i8*, i64, i64)*, i8*, i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)*, i32 (i8*)*, i8*, %struct.mz_zip_internal_state_tag* }
%struct.mz_zip_internal_state_tag = type { %struct.mz_zip_array, %struct.mz_zip_array, %struct.mz_zip_array, i32, i32, i32, %struct.__sFILE*, i64, i8*, i64, i64 }
%struct.mz_zip_array = type { i8*, i64, i64, i32 }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct.mz_zip_archive_file_stat = type { i32, i64, i16, i16, i16, i16, i64, i32, i64, i64, i16, i32, i64, i32, i32, i32, i32, [512 x i8], [512 x i8] }
%struct.mz_zip_reader_extract_iter_state = type { %struct.mz_zip_archive*, i32, i32, i32, i64, i64, i64, i64, i64, i64, %struct.mz_zip_archive_file_stat, i8*, i8*, i64, %struct.tinfl_decompressor_tag }
%struct.utimbuf = type { i64, i64 }
%struct.mz_zip_writer_add_state = type { %struct.mz_zip_archive*, i64, i64 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.stat = type { i32, i16, i16, i64, i32, i32, i32, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64, i32, i32, i32, i32, [2 x i64] }
%struct.timespec = type { i64, i64 }
%struct.tdefl_sym_freq = type { i16, i16 }

@mz_crc32.s_crc_table = internal constant [256 x i32] [i32 0, i32 1996959894, i32 -301047508, i32 -1727442502, i32 124634137, i32 1886057615, i32 -379345611, i32 -1637575261, i32 249268274, i32 2044508324, i32 -522852066, i32 -1747789432, i32 162941995, i32 2125561021, i32 -407360249, i32 -1866523247, i32 498536548, i32 1789927666, i32 -205950648, i32 -2067906082, i32 450548861, i32 1843258603, i32 -187386543, i32 -2083289657, i32 325883990, i32 1684777152, i32 -43845254, i32 -1973040660, i32 335633487, i32 1661365465, i32 -99664541, i32 -1928851979, i32 997073096, i32 1281953886, i32 -715111964, i32 -1570279054, i32 1006888145, i32 1258607687, i32 -770865667, i32 -1526024853, i32 901097722, i32 1119000684, i32 -608450090, i32 -1396901568, i32 853044451, i32 1172266101, i32 -589951537, i32 -1412350631, i32 651767980, i32 1373503546, i32 -925412992, i32 -1076862698, i32 565507253, i32 1454621731, i32 -809855591, i32 -1195530993, i32 671266974, i32 1594198024, i32 -972236366, i32 -1324619484, i32 795835527, i32 1483230225, i32 -1050600021, i32 -1234817731, i32 1994146192, i32 31158534, i32 -1731059524, i32 -271249366, i32 1907459465, i32 112637215, i32 -1614814043, i32 -390540237, i32 2013776290, i32 251722036, i32 -1777751922, i32 -519137256, i32 2137656763, i32 141376813, i32 -1855689577, i32 -429695999, i32 1802195444, i32 476864866, i32 -2056965928, i32 -228458418, i32 1812370925, i32 453092731, i32 -2113342271, i32 -183516073, i32 1706088902, i32 314042704, i32 -1950435094, i32 -54949764, i32 1658658271, i32 366619977, i32 -1932296973, i32 -69972891, i32 1303535960, i32 984961486, i32 -1547960204, i32 -725929758, i32 1256170817, i32 1037604311, i32 -1529756563, i32 -740887301, i32 1131014506, i32 879679996, i32 -1385723834, i32 -631195440, i32 1141124467, i32 855842277, i32 -1442165665, i32 -586318647, i32 1342533948, i32 654459306, i32 -1106571248, i32 -921952122, i32 1466479909, i32 544179635, i32 -1184443383, i32 -832445281, i32 1591671054, i32 702138776, i32 -1328506846, i32 -942167884, i32 1504918807, i32 783551873, i32 -1212326853, i32 -1061524307, i32 -306674912, i32 -1698712650, i32 62317068, i32 1957810842, i32 -355121351, i32 -1647151185, i32 81470997, i32 1943803523, i32 -480048366, i32 -1805370492, i32 225274430, i32 2053790376, i32 -468791541, i32 -1828061283, i32 167816743, i32 2097651377, i32 -267414716, i32 -2029476910, i32 503444072, i32 1762050814, i32 -144550051, i32 -2140837941, i32 426522225, i32 1852507879, i32 -19653770, i32 -1982649376, i32 282753626, i32 1742555852, i32 -105259153, i32 -1900089351, i32 397917763, i32 1622183637, i32 -690576408, i32 -1580100738, i32 953729732, i32 1340076626, i32 -776247311, i32 -1497606297, i32 1068828381, i32 1219638859, i32 -670225446, i32 -1358292148, i32 906185462, i32 1090812512, i32 -547295293, i32 -1469587627, i32 829329135, i32 1181335161, i32 -882789492, i32 -1134132454, i32 628085408, i32 1382605366, i32 -871598187, i32 -1156888829, i32 570562233, i32 1426400815, i32 -977650754, i32 -1296233688, i32 733239954, i32 1555261956, i32 -1026031705, i32 -1244606671, i32 752459403, i32 1541320221, i32 -1687895376, i32 -328994266, i32 1969922972, i32 40735498, i32 -1677130071, i32 -351390145, i32 1913087877, i32 83908371, i32 -1782625662, i32 -491226604, i32 2075208622, i32 213261112, i32 -1831694693, i32 -438977011, i32 2094854071, i32 198958881, i32 -2032938284, i32 -237706686, i32 1759359992, i32 534414190, i32 -2118248755, i32 -155638181, i32 1873836001, i32 414664567, i32 -2012718362, i32 -15766928, i32 1711684554, i32 285281116, i32 -1889165569, i32 -127750551, i32 1634467795, i32 376229701, i32 -1609899400, i32 -686959890, i32 1308918612, i32 956543938, i32 -1486412191, i32 -799009033, i32 1231636301, i32 1047427035, i32 -1362007478, i32 -640263460, i32 1088359270, i32 936918000, i32 -1447252397, i32 -558129467, i32 1202900863, i32 817233897, i32 -1111625188, i32 -893730166, i32 1404277552, i32 615818150, i32 -1160759803, i32 -841546093, i32 1423857449, i32 601450431, i32 -1285129682, i32 -1000256840, i32 1567103746, i32 711928724, i32 -1274298825, i32 -1022587231, i32 1510334235, i32 755167117], align 16
@.str = private unnamed_addr constant [7 x i8] c"10.1.0\00", align 1
@mz_error.s_error_descs = internal global [10 x %struct.anon] [%struct.anon { i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0) }, %struct.anon { i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0) }, %struct.anon { i32 2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0) }, %struct.anon { i32 -1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0) }, %struct.anon { i32 -2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0) }, %struct.anon { i32 -3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0) }, %struct.anon { i32 -4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0) }, %struct.anon { i32 -5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0) }, %struct.anon { i32 -6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0) }, %struct.anon { i32 -10000, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i32 0, i32 0) }], align 16
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"stream end\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"need dictionary\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"file error\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"stream error\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"data error\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"buf error\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"version error\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"parameter error\00", align 1
@__func__.tdefl_compress_buffer = private unnamed_addr constant [22 x i8] c"tdefl_compress_buffer\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"miniz.c\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"d->m_pPut_buf_func\00", align 1
@s_tdefl_num_probes = internal constant [11 x i32] [i32 0, i32 1, i32 6, i32 32, i32 16, i32 32, i32 128, i32 256, i32 512, i32 768, i32 1500], align 16
@tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes = internal constant [11 x i32] [i32 0, i32 1, i32 6, i32 32, i32 16, i32 32, i32 128, i32 256, i32 512, i32 768, i32 1500], align 16
@tdefl_write_image_to_png_file_in_memory_ex.chans = internal constant [5 x i8] c"\00\00\04\02\06", align 1
@tdefl_write_image_to_png_file_in_memory_ex.pnghdr = private unnamed_addr constant [41 x i8] c"\89PNG\0D\0A\1A\0A\00\00\00\0DIHDR\00\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\00\00\00\00\00IDAT", align 16
@.str.13 = private unnamed_addr constant [17 x i8] c"\00\00\00\00\00\00\00\00IEND\AEB`\82\00", align 1
@tinfl_decompress.s_length_base = internal constant [31 x i32] [i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 13, i32 15, i32 17, i32 19, i32 23, i32 27, i32 31, i32 35, i32 43, i32 51, i32 59, i32 67, i32 83, i32 99, i32 115, i32 131, i32 163, i32 195, i32 227, i32 258, i32 0, i32 0], align 16
@tinfl_decompress.s_length_extra = internal constant [31 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0], align 16
@tinfl_decompress.s_dist_base = internal constant [32 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 9, i32 13, i32 17, i32 25, i32 33, i32 49, i32 65, i32 97, i32 129, i32 193, i32 257, i32 385, i32 513, i32 769, i32 1025, i32 1537, i32 2049, i32 3073, i32 4097, i32 6145, i32 8193, i32 12289, i32 16385, i32 24577, i32 0, i32 0], align 16
@tinfl_decompress.s_dist_extra = internal constant [32 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 0, i32 0], align 16
@tinfl_decompress.s_length_dezigzag = internal constant [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16
@tinfl_decompress.s_min_table_sizes = internal constant [3 x i32] [i32 257, i32 1, i32 4], align 4
@.str.14 = private unnamed_addr constant [4 x i8] c"\05\05\04\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"\02\03\07\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"\03\03\0B\00", align 1
@__func__.tinfl_decompress = private unnamed_addr constant [17 x i8] c"tinfl_decompress\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"!num_bits\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"w+b\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"r+b\00", align 1
@__func__.mz_zip_writer_add_mem_ex_v2 = private unnamed_addr constant [28 x i8] c"mz_zip_writer_add_mem_ex_v2\00", align 1
@.str.22 = private unnamed_addr constant [66 x i8] c"(local_dir_header_ofs & (pZip->m_file_offset_alignment - 1)) == 0\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"bit_flags & MZ_ZIP_LDH_BIT_FLAG_HAS_LOCATOR\00", align 1
@__func__.mz_zip_writer_add_read_buf_callback = private unnamed_addr constant [36 x i8] c"mz_zip_writer_add_read_buf_callback\00", align 1
@.str.24 = private unnamed_addr constant [66 x i8] c"(cur_archive_file_ofs & (pZip->m_file_offset_alignment - 1)) == 0\00", align 1
@__func__.mz_zip_writer_add_from_zip_reader = private unnamed_addr constant [34 x i8] c"mz_zip_writer_add_from_zip_reader\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"no error\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"undefined error\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c"too many files\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"file too large\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"unsupported method\00", align 1
@.str.30 = private unnamed_addr constant [23 x i8] c"unsupported encryption\00", align 1
@.str.31 = private unnamed_addr constant [20 x i8] c"unsupported feature\00", align 1
@.str.32 = private unnamed_addr constant [33 x i8] c"failed finding central directory\00", align 1
@.str.33 = private unnamed_addr constant [18 x i8] c"not a ZIP archive\00", align 1
@.str.34 = private unnamed_addr constant [39 x i8] c"invalid header or archive is corrupted\00", align 1
@.str.35 = private unnamed_addr constant [30 x i8] c"unsupported multidisk archive\00", align 1
@.str.36 = private unnamed_addr constant [45 x i8] c"decompression failed or archive is corrupted\00", align 1
@.str.37 = private unnamed_addr constant [19 x i8] c"compression failed\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"unexpected decompressed size\00", align 1
@.str.39 = private unnamed_addr constant [20 x i8] c"CRC-32 check failed\00", align 1
@.str.40 = private unnamed_addr constant [35 x i8] c"unsupported central directory size\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"allocation failed\00", align 1
@.str.42 = private unnamed_addr constant [17 x i8] c"file open failed\00", align 1
@.str.43 = private unnamed_addr constant [19 x i8] c"file create failed\00", align 1
@.str.44 = private unnamed_addr constant [18 x i8] c"file write failed\00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c"file read failed\00", align 1
@.str.46 = private unnamed_addr constant [18 x i8] c"file close failed\00", align 1
@.str.47 = private unnamed_addr constant [17 x i8] c"file seek failed\00", align 1
@.str.48 = private unnamed_addr constant [17 x i8] c"file stat failed\00", align 1
@.str.49 = private unnamed_addr constant [18 x i8] c"invalid parameter\00", align 1
@.str.50 = private unnamed_addr constant [17 x i8] c"invalid filename\00", align 1
@.str.51 = private unnamed_addr constant [17 x i8] c"buffer too small\00", align 1
@.str.52 = private unnamed_addr constant [15 x i8] c"internal error\00", align 1
@.str.53 = private unnamed_addr constant [15 x i8] c"file not found\00", align 1
@.str.54 = private unnamed_addr constant [21 x i8] c"archive is too large\00", align 1
@.str.55 = private unnamed_addr constant [18 x i8] c"validation failed\00", align 1
@.str.56 = private unnamed_addr constant [24 x i8] c"write calledback failed\00", align 1
@.str.57 = private unnamed_addr constant [14 x i8] c"unknown error\00", align 1
@__func__.tdefl_compress_fast = private unnamed_addr constant [20 x i8] c"tdefl_compress_fast\00", align 1
@.str.58 = private unnamed_addr constant [106 x i8] c"(cur_match_len >= TDEFL_MIN_MATCH_LEN) && (cur_match_dist >= 1) && (cur_match_dist <= TDEFL_LZ_DICT_SIZE)\00", align 1
@s_tdefl_small_dist_sym = internal constant [512 x i8] calign 16
@s_tdefl_large_dist_sym = internal constant [128 x i8] c"\00\00\12\13\14\14\15\15\16\16\16\16\17\17\17\17\18\18\18\18\18\18\18\18\19\19\19\19\19\19\19\19\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D", align 16
@s_tdefl_len_sym = internal constant [256 x i16] [i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 265, i16 266, i16 266, i16 267, i16 267, i16 268, i16 268, i16 269, i16 269, i16 269, i16 269, i16 270, i16 270, i16 270, i16 270, i16 271, i16 271, i16 271, i16 271, i16 272, i16 272, i16 272, i16 272, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 285], align 16
@.str.59 = private unnamed_addr constant [32 x i8] c"lookahead_size >= cur_match_len\00", align 1
@__func__.tdefl_compress_normal = private unnamed_addr constant [22 x i8] c"tdefl_compress_normal\00", align 1
@.str.60 = private unnamed_addr constant [35 x i8] c"d->m_lookahead_size >= len_to_move\00", align 1
@__func__.tdefl_find_match = private unnamed_addr constant [17 x i8] c"tdefl_find_match\00", align 1
@.str.61 = private unnamed_addr constant [37 x i8] c"max_match_len <= TDEFL_MAX_MATCH_LEN\00", align 1
@__func__.tdefl_record_match = private unnamed_addr constant [19 x i8] c"tdefl_record_match\00", align 1
@.str.62 = private unnamed_addr constant [94 x i8] c"(match_len >= TDEFL_MIN_MATCH_LEN) && (match_dist >= 1) && (match_dist <= TDEFL_LZ_DICT_SIZE)\00", align 1
@__func__.tdefl_flush_block = private unnamed_addr constant [18 x i8] c"tdefl_flush_block\00", align 1
@.str.63 = private unnamed_addr constant [29 x i8] c"!d->m_output_flush_remaining\00", align 1
@.str.64 = private unnamed_addr constant [27 x i8] c"bits <= ((1U << len) - 1U)\00", align 1
@.str.65 = private unnamed_addr constant [40 x i8] c"d->m_pOutput_buf < d->m_pOutput_buf_end\00", align 1
@__func__.tdefl_start_static_block = private unnamed_addr constant [25 x i8] c"tdefl_start_static_block\00", align 1
@__func__.tdefl_start_dynamic_block = private unnamed_addr constant [26 x i8] c"tdefl_start_dynamic_block\00", align 1
@s_tdefl_packed_code_size_syms_swizzle = internal global [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16
@.str.66 = private unnamed_addr constant [32 x i8] c"code < TDEFL_MAX_HUFF_SYMBOLS_2\00", align 1
@__func__.tdefl_compress_lz_codes = private unnamed_addr constant [24 x i8] c"tdefl_compress_lz_codes\00", align 1
@.str.67 = private unnamed_addr constant [52 x i8] c"d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]\00", align 1
@mz_bitmasks = internal constant [17 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535], align 16
@s_tdefl_len_extra = internal constant [256 x i8] calign 16
@s_tdefl_small_dist_extra = internal constant [512 x i8] c"\00\00\00\00\01\01\01\01\02\02\02\02\02\02\02\02\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07", align 16
@s_tdefl_large_dist_extra = internal constant [128 x i8] c"\00\00\08\08\09\09\09\09\0A\0A\0A\0A\0A\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D", align 16
@.str.68 = private unnamed_addr constant [29 x i8] c"d->m_huff_code_sizes[1][sym]\00", align 1
@.str.69 = private unnamed_addr constant [29 x i8] c"d->m_huff_code_sizes[0][lit]\00", align 1
@__func__.mz_zip_array_ensure_capacity = private unnamed_addr constant [29 x i8] c"mz_zip_array_ensure_capacity\00", align 1
@.str.70 = private unnamed_addr constant [23 x i8] c"pArray->m_element_size\00", align 1

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_adler32(i64 %adler, i8* %ptr, i64 %buf_len) #0 {
entry:
  %retval = alloca i64, align 8
  %adler.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %block_len = alloca i64, align 8
  store i64 %adler, i64* %adler.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  %0 = load i64, i64* %adler.addr, align 8
  %and = and i64 %0, 65535
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %s1, align 4
  %1 = load i64, i64* %adler.addr, align 8
  %shr = lshr i64 %1, 16
  %conv1 = trunc i64 %shr to i32
  store i32 %conv1, i32* %s2, align 4
  %2 = load i64, i64* %buf_len.addr, align 8
  %rem = urem i64 %2, 5552
  store i64 %rem, i64* %block_len, align 8
  %3 = load i8*, i8** %ptr.addr, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 1, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %for.end46, %if.end
  %4 = load i64, i64* %buf_len.addr, align 8
  %tobool2 = icmp ne i64 %4, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %5 = load i32, i32* %i, align 4
  %add = add i32 %5, 7
  %conv3 = zext i32 %add to i64
  %6 = load i64, i64* %block_len, align 8
  %cmp = icmp ult i64 %conv3, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx, align 1
  %conv5 = zext i8 %8 to i32
  %9 = load i32, i32* %s1, align 4
  %add6 = add i32 %9, %conv5
  store i32 %add6, i32* %s1, align 4
  %10 = load i32, i32* %s1, align 4
  %11 = load i32, i32* %s2, align 4
  %add7 = add i32 %11, %10
  store i32 %add7, i32* %s2, align 4
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr inbounds i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %13 to i32
  %14 = load i32, i32* %s1, align 4
  %add10 = add i32 %14, %conv9
  store i32 %add10, i32* %s1, align 4
  %15 = load i32, i32* %s1, align 4
  %16 = load i32, i32* %s2, align 4
  %add11 = add i32 %16, %15
  store i32 %add11, i32* %s2, align 4
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %17, i64 2
  %18 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %18 to i32
  %19 = load i32, i32* %s1, align 4
  %add14 = add i32 %19, %conv13
  store i32 %add14, i32* %s1, align 4
  %20 = load i32, i32* %s1, align 4
  %21 = load i32, i32* %s2, align 4
  %add15 = add i32 %21, %20
  store i32 %add15, i32* %s2, align 4
  %22 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %22, i64 3
  %23 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %23 to i32
  %24 = load i32, i32* %s1, align 4
  %add18 = add i32 %24, %conv17
  store i32 %add18, i32* %s1, align 4
  %25 = load i32, i32* %s1, align 4
  %26 = load i32, i32* %s2, align 4
  %add19 = add i32 %26, %25
  store i32 %add19, i32* %s2, align 4
  %27 = load i8*, i8** %ptr.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %27, i64 4
  %28 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %28 to i32
  %29 = load i32, i32* %s1, align 4
  %add22 = add i32 %29, %conv21
  store i32 %add22, i32* %s1, align 4
  %30 = load i32, i32* %s1, align 4
  %31 = load i32, i32* %s2, align 4
  %add23 = add i32 %31, %30
  store i32 %add23, i32* %s2, align 4
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %32, i64 5
  %33 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %33 to i32
  %34 = load i32, i32* %s1, align 4
  %add26 = add i32 %34, %conv25
  store i32 %add26, i32* %s1, align 4
  %35 = load i32, i32* %s1, align 4
  %36 = load i32, i32* %s2, align 4
  %add27 = add i32 %36, %35
  store i32 %add27, i32* %s2, align 4
  %37 = load i8*, i8** %ptr.addr, align 8
  %arrayidx28 = getelementptr inbounds i8, i8* %37, i64 6
  %38 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %38 to i32
  %39 = load i32, i32* %s1, align 4
  %add30 = add i32 %39, %conv29
  store i32 %add30, i32* %s1, align 4
  %40 = load i32, i32* %s1, align 4
  %41 = load i32, i32* %s2, align 4
  %add31 = add i32 %41, %40
  store i32 %add31, i32* %s2, align 4
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %42, i64 7
  %43 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %43 to i32
  %44 = load i32, i32* %s1, align 4
  %add34 = add i32 %44, %conv33
  store i32 %add34, i32* %s1, align 4
  %45 = load i32, i32* %s1, align 4
  %46 = load i32, i32* %s2, align 4
  %add35 = add i32 %46, %45
  store i32 %add35, i32* %s2, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %47 = load i32, i32* %i, align 4
  %add36 = add i32 %47, 8
  store i32 %add36, i32* %i, align 4
  %48 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %48, i64 8
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc45, %for.end
  %49 = load i32, i32* %i, align 4
  %conv38 = zext i32 %49 to i64
  %50 = load i64, i64* %block_len, align 8
  %cmp39 = icmp ult i64 %conv38, %50
  br i1 %cmp39, label %for.body41, label %for.end46

for.body41:                                       ; preds = %for.cond37
  %51 = load i8*, i8** %ptr.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 8
  %52 = load i8, i8* %51, align 1
  %conv42 = zext i8 %52 to i32
  %53 = load i32, i32* %s1, align 4
  %add43 = add i32 %53, %conv42
  store i32 %add43, i32* %s1, align 4
  %54 = load i32, i32* %s1, align 4
  %55 = load i32, i32* %s2, align 4
  %add44 = add i32 %55, %54
  store i32 %add44, i32* %s2, align 4
  br label %for.inc45

for.inc45:                                        ; preds = %for.body41
  %56 = load i32, i32* %i, align 4
  %inc = add i32 %56, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond37

for.end46:                                        ; preds = %for.cond37
  %57 = load i32, i32* %s1, align 4
  %rem47 = urem i32 %57, 65521
  store i32 %rem47, i32* %s1, align 4
  %58 = load i32, i32* %s2, align 4
  %rem48 = urem i32 %58, 65521
  store i32 %rem48, i32* %s2, align 4
  %59 = load i64, i64* %block_len, align 8
  %60 = load i64, i64* %buf_len.addr, align 8
  %sub = sub i64 %60, %59
  store i64 %sub, i64* %buf_len.addr, align 8
  store i64 5552, i64* %block_len, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %61 = load i32, i32* %s2, align 4
  %shl = shl i32 %61, 16
  %62 = load i32, i32* %s1, align 4
  %add49 = add i32 %shl, %62
  %conv50 = zext i32 %add49 to i64
  store i64 %conv50, i64* %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %if.then
  %63 = load i64, i64* %retval, align 8
  ret i64 %63
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_crc32(i64 %crc, i8* %ptr, i64 %buf_len) #0 {
entry:
  %crc.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %mz_crc32 = alloca i32, align 4
  %pByte_buf = alloca i8*, align 8
  store i64 %crc, i64* %crc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  %0 = load i64, i64* %crc.addr, align 8
  %conv = trunc i64 %0 to i32
  %xor = xor i32 %conv, -1
  store i32 %xor, i32* %mz_crc32, align 4
  %1 = load i8*, i8** %ptr.addr, align 8
  store i8* %1, i8** %pByte_buf, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64, i64* %buf_len.addr, align 8
  %cmp = icmp uge i64 %2, 4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %mz_crc32, align 4
  %shr = lshr i32 %3, 8
  %4 = load i32, i32* %mz_crc32, align 4
  %5 = load i8*, i8** %pByte_buf, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %6 to i32
  %xor3 = xor i32 %4, %conv2
  %and = and i32 %xor3, 255
  %idxprom = zext i32 %and to i64
  %arrayidx4 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom
  %7 = load i32, i32* %arrayidx4, align 4
  %xor5 = xor i32 %shr, %7
  store i32 %xor5, i32* %mz_crc32, align 4
  %8 = load i32, i32* %mz_crc32, align 4
  %shr6 = lshr i32 %8, 8
  %9 = load i32, i32* %mz_crc32, align 4
  %10 = load i8*, i8** %pByte_buf, align 8
  %arrayidx7 = getelementptr inbounds i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %11 to i32
  %xor9 = xor i32 %9, %conv8
  %and10 = and i32 %xor9, 255
  %idxprom11 = zext i32 %and10 to i64
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom11
  %12 = load i32, i32* %arrayidx12, align 4
  %xor13 = xor i32 %shr6, %12
  store i32 %xor13, i32* %mz_crc32, align 4
  %13 = load i32, i32* %mz_crc32, align 4
  %shr14 = lshr i32 %13, 8
  %14 = load i32, i32* %mz_crc32, align 4
  %15 = load i8*, i8** %pByte_buf, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %15, i64 2
  %16 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %16 to i32
  %xor17 = xor i32 %14, %conv16
  %and18 = and i32 %xor17, 255
  %idxprom19 = zext i32 %and18 to i64
  %arrayidx20 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom19
  %17 = load i32, i32* %arrayidx20, align 4
  %xor21 = xor i32 %shr14, %17
  store i32 %xor21, i32* %mz_crc32, align 4
  %18 = load i32, i32* %mz_crc32, align 4
  %shr22 = lshr i32 %18, 8
  %19 = load i32, i32* %mz_crc32, align 4
  %20 = load i8*, i8** %pByte_buf, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %20, i64 3
  %21 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %21 to i32
  %xor25 = xor i32 %19, %conv24
  %and26 = and i32 %xor25, 255
  %idxprom27 = zext i32 %and26 to i64
  %arrayidx28 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom27
  %22 = load i32, i32* %arrayidx28, align 4
  %xor29 = xor i32 %shr22, %22
  store i32 %xor29, i32* %mz_crc32, align 4
  %23 = load i8*, i8** %pByte_buf, align 8
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 4
  store i8* %add.ptr, i8** %pByte_buf, align 8
  %24 = load i64, i64* %buf_len.addr, align 8
  %sub = sub i64 %24, 4
  store i64 %sub, i64* %buf_len.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond30

while.cond30:                                     ; preds = %while.body31, %while.end
  %25 = load i64, i64* %buf_len.addr, align 8
  %tobool = icmp ne i64 %25, 0
  br i1 %tobool, label %while.body31, label %while.end40

while.body31:                                     ; preds = %while.cond30
  %26 = load i32, i32* %mz_crc32, align 4
  %shr32 = lshr i32 %26, 8
  %27 = load i32, i32* %mz_crc32, align 4
  %28 = load i8*, i8** %pByte_buf, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %28, i64 0
  %29 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %29 to i32
  %xor35 = xor i32 %27, %conv34
  %and36 = and i32 %xor35, 255
  %idxprom37 = zext i32 %and36 to i64
  %arrayidx38 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom37
  %30 = load i32, i32* %arrayidx38, align 4
  %xor39 = xor i32 %shr32, %30
  store i32 %xor39, i32* %mz_crc32, align 4
  %31 = load i8*, i8** %pByte_buf, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %pByte_buf, align 8
  %32 = load i64, i64* %buf_len.addr, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %buf_len.addr, align 8
  br label %while.cond30

while.end40:                                      ; preds = %while.cond30
  %33 = load i32, i32* %mz_crc32, align 4
  %neg = xor i32 %33, -1
  %conv41 = zext i32 %neg to i64
  ret i64 %conv41
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mz_free(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  call void @free(i8* %0)
  ret void
}

declare void @free(i8*) #1

; Function Attrs: noinline nounwind ssp uwtable
define i8* @miniz_def_alloc_func(i8* %opaque, i64 %items, i64 %size) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %items.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i8* %opaque, i8** %opaque.addr, align 8
  store i64 %items, i64* %items.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8*, i8** %opaque.addr, align 8
  %1 = load i64, i64* %items.addr, align 8
  %2 = load i64, i64* %size.addr, align 8
  %3 = load i64, i64* %items.addr, align 8
  %4 = load i64, i64* %size.addr, align 8
  %mul = mul i64 %3, %4
  %call = call i8* @malloc(i64 %mul) #8
  ret i8* %call
}

; Function Attrs: allocsize(0)
declare i8* @malloc(i64) #2

; Function Attrs: noinline nounwind ssp uwtable
define void @miniz_def_free_func(i8* %opaque, i8* %address) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %address.addr = alloca i8*, align 8
  store i8* %opaque, i8** %opaque.addr, align 8
  store i8* %address, i8** %address.addr, align 8
  %0 = load i8*, i8** %opaque.addr, align 8
  %1 = load i8*, i8** %address.addr, align 8
  %2 = load i8*, i8** %address.addr, align 8
  call void @free(i8* %2)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @miniz_def_realloc_func(i8* %opaque, i8* %address, i64 %items, i64 %size) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %address.addr = alloca i8*, align 8
  %items.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i8* %opaque, i8** %opaque.addr, align 8
  store i8* %address, i8** %address.addr, align 8
  store i64 %items, i64* %items.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i8*, i8** %opaque.addr, align 8
  %1 = load i8*, i8** %address.addr, align 8
  %2 = load i64, i64* %items.addr, align 8
  %3 = load i64, i64* %size.addr, align 8
  %4 = load i8*, i8** %address.addr, align 8
  %5 = load i64, i64* %items.addr, align 8
  %6 = load i64, i64* %size.addr, align 8
  %mul = mul i64 %5, %6
  %call = call i8* @realloc(i8* %4, i64 %mul) #9
  ret i8* %call
}

; Function Attrs: allocsize(1)
declare i8* @realloc(i8*, i64) #3

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mz_version() #0 {
entry:
  ret i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0)
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_deflateInit(%struct.mz_stream_s* %pStream, i32 %level) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %level.addr = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %1 = load i32, i32* %level.addr, align 4
  %call = call i32 @mz_deflateInit2(%struct.mz_stream_s* %0, i32 %1, i32 8, i32 15, i32 9, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_deflateInit2(%struct.mz_stream_s* %pStream, i32 %level, i32 %method, i32 %window_bits, i32 %mem_level, i32 %strategy) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %level.addr = alloca i32, align 4
  %method.addr = alloca i32, align 4
  %window_bits.addr = alloca i32, align 4
  %mem_level.addr = alloca i32, align 4
  %strategy.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %comp_flags = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  store i32 %method, i32* %method.addr, align 4
  store i32 %window_bits, i32* %window_bits.addr, align 4
  store i32 %mem_level, i32* %mem_level.addr, align 4
  store i32 %strategy, i32* %strategy.addr, align 4
  %0 = load i32, i32* %level.addr, align 4
  %1 = load i32, i32* %window_bits.addr, align 4
  %2 = load i32, i32* %strategy.addr, align 4
  %call = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %0, i32 %1, i32 %2)
  %or = or i32 8192, %call
  store i32 %or, i32* %comp_flags, align 4
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %method.addr, align 4
  %cmp = icmp ne i32 %4, 8
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load i32, i32* %mem_level.addr, align 4
  %cmp1 = icmp slt i32 %5, 1
  br i1 %cmp1, label %if.then7, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %6 = load i32, i32* %mem_level.addr, align 4
  %cmp3 = icmp sgt i32 %6, 9
  br i1 %cmp3, label %if.then7, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %7 = load i32, i32* %window_bits.addr, align 4
  %cmp5 = icmp ne i32 %7, 15
  br i1 %cmp5, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %8 = load i32, i32* %window_bits.addr, align 4
  %sub = sub nsw i32 0, %8
  %cmp6 = icmp ne i32 %sub, 15
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %land.lhs.true, %lor.lhs.false2, %lor.lhs.false, %if.end
  store i32 -10000, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %land.lhs.true, %lor.lhs.false4
  %9 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %data_type = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %9, i32 0, i32 11
  store i32 0, i32* %data_type, align 8
  %10 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %10, i32 0, i32 12
  store i64 1, i64* %adler, align 8
  %11 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %msg = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %11, i32 0, i32 6
  store i8* null, i8** %msg, align 8
  %12 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %reserved = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %12, i32 0, i32 13
  store i64 0, i64* %reserved, align 8
  %13 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %13, i32 0, i32 2
  store i64 0, i64* %total_in, align 8
  %14 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %14, i32 0, i32 5
  store i64 0, i64* %total_out, align 8
  %15 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %15, i32 0, i32 8
  %16 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc, align 8
  %tobool9 = icmp ne i8* (i8*, i64, i64)* %16, null
  br i1 %tobool9, label %if.end12, label %if.then10

if.then10:                                        ; preds = %if.end8
  %17 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc11 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %17, i32 0, i32 8
  store i8* (i8*, i64, i64)* @miniz_def_alloc_func, i8* (i8*, i64, i64)** %zalloc11, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %18 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %18, i32 0, i32 9
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8
  %tobool13 = icmp ne void (i8*, i8*)* %19, null
  br i1 %tobool13, label %if.end16, label %if.then14

if.then14:                                        ; preds = %if.end12
  %20 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zfree15 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %20, i32 0, i32 9
  store void (i8*, i8*)* @miniz_def_free_func, void (i8*, i8*)** %zfree15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end12
  %21 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc17 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %21, i32 0, i32 8
  %22 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc17, align 8
  %23 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %opaque = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %23, i32 0, i32 10
  %24 = load i8*, i8** %opaque, align 8
  %call18 = call i8* %22(i8* %24, i64 1, i64 319352)
  %25 = bitcast i8* %call18 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %25, %struct.tdefl_compressor** %pComp, align 8
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %tobool19 = icmp ne %struct.tdefl_compressor* %26, null
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.end16
  store i32 -4, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end16
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %28 = bitcast %struct.tdefl_compressor* %27 to %struct.mz_internal_state*
  %29 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %29, i32 0, i32 7
  store %struct.mz_internal_state* %28, %struct.mz_internal_state** %state, align 8
  %30 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %31 = load i32, i32* %comp_flags, align 4
  %call22 = call i32 @tdefl_init(%struct.tdefl_compressor* %30, i32 (i8*, i32, i8*)* null, i8* null, i32 %31)
  %cmp23 = icmp ne i32 %call22, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end21
  %32 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %call25 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %32)
  store i32 -10000, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %if.end21
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end26, %if.then24, %if.then20, %if.then7, %if.then
  %33 = load i32, i32* %retval, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tdefl_create_comp_flags_from_zip_params(i32 %level, i32 %window_bits, i32 %strategy) #0 {
entry:
  %level.addr = alloca i32, align 4
  %window_bits.addr = alloca i32, align 4
  %strategy.addr = alloca i32, align 4
  %comp_flags = alloca i32, align 4
  store i32 %level, i32* %level.addr, align 4
  store i32 %window_bits, i32* %window_bits.addr, align 4
  store i32 %strategy, i32* %strategy.addr, align 4
  %0 = load i32, i32* %level.addr, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %cond.true, label %cond.false3

cond.true:                                        ; preds = %entry
  %1 = load i32, i32* %level.addr, align 4
  %cmp1 = icmp slt i32 10, %1
  br i1 %cmp1, label %cond.true2, label %cond.false

cond.true2:                                       ; preds = %cond.true
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %2 = load i32, i32* %level.addr, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true2
  %cond = phi i32 [ 10, %cond.true2 ], [ %2, %cond.false ]
  br label %cond.end4

cond.false3:                                      ; preds = %entry
  br label %cond.end4

cond.end4:                                        ; preds = %cond.false3, %cond.end
  %cond5 = phi i32 [ %cond, %cond.end ], [ 6, %cond.false3 ]
  %idxprom = sext i32 %cond5 to i64
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* @s_tdefl_num_probes, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load i32, i32* %level.addr, align 4
  %cmp6 = icmp sle i32 %4, 3
  %cond7 = select i1 %cmp6, i32 16384, i32 0
  %or = or i32 %3, %cond7
  store i32 %or, i32* %comp_flags, align 4
  %5 = load i32, i32* %window_bits.addr, align 4
  %cmp8 = icmp sgt i32 %5, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end4
  %6 = load i32, i32* %comp_flags, align 4
  %or9 = or i32 %6, 4096
  store i32 %or9, i32* %comp_flags, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end4
  %7 = load i32, i32* %level.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.else, label %if.then10

if.then10:                                        ; preds = %if.end
  %8 = load i32, i32* %comp_flags, align 4
  %or11 = or i32 %8, 524288
  store i32 %or11, i32* %comp_flags, align 4
  br label %if.end30

if.else:                                          ; preds = %if.end
  %9 = load i32, i32* %strategy.addr, align 4
  %cmp12 = icmp eq i32 %9, 1
  br i1 %cmp12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %10 = load i32, i32* %comp_flags, align 4
  %or14 = or i32 %10, 131072
  store i32 %or14, i32* %comp_flags, align 4
  br label %if.end29

if.else15:                                        ; preds = %if.else
  %11 = load i32, i32* %strategy.addr, align 4
  %cmp16 = icmp eq i32 %11, 2
  br i1 %cmp16, label %if.then17, label %if.else18

if.then17:                                        ; preds = %if.else15
  %12 = load i32, i32* %comp_flags, align 4
  %and = and i32 %12, -4096
  store i32 %and, i32* %comp_flags, align 4
  br label %if.end28

if.else18:                                        ; preds = %if.else15
  %13 = load i32, i32* %strategy.addr, align 4
  %cmp19 = icmp eq i32 %13, 4
  br i1 %cmp19, label %if.then20, label %if.else22

if.then20:                                        ; preds = %if.else18
  %14 = load i32, i32* %comp_flags, align 4
  %or21 = or i32 %14, 262144
  store i32 %or21, i32* %comp_flags, align 4
  br label %if.end27

if.else22:                                        ; preds = %if.else18
  %15 = load i32, i32* %strategy.addr, align 4
  %cmp23 = icmp eq i32 %15, 3
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.else22
  %16 = load i32, i32* %comp_flags, align 4
  %or25 = or i32 %16, 65536
  store i32 %or25, i32* %comp_flags, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.else22
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then20
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then17
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then13
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then10
  %17 = load i32, i32* %comp_flags, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tdefl_init(%struct.tdefl_compressor* %d, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  %1 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %1, i32 0, i32 0
  store i32 (i8*, i32, i8*)* %0, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8
  %2 = load i8*, i8** %pPut_buf_user.addr, align 8
  %3 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_user = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %3, i32 0, i32 1
  store i8* %2, i8** %m_pPut_buf_user, align 8
  %4 = load i32, i32* %flags.addr, align 4
  %5 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %5, i32 0, i32 2
  store i32 %4, i32* %m_flags, align 8
  %6 = load i32, i32* %flags.addr, align 4
  %and = and i32 %6, 4095
  %add = add nsw i32 %and, 2
  %div = sdiv i32 %add, 3
  %add1 = add nsw i32 1, %div
  %7 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_max_probes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %7, i32 0, i32 3
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %m_max_probes, i64 0, i64 0
  store i32 %add1, i32* %arrayidx, align 4
  %8 = load i32, i32* %flags.addr, align 4
  %and2 = and i32 %8, 16384
  %cmp = icmp ne i32 %and2, 0
  %conv = zext i1 %cmp to i32
  %9 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_greedy_parsing = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %9, i32 0, i32 4
  store i32 %conv, i32* %m_greedy_parsing, align 4
  %10 = load i32, i32* %flags.addr, align 4
  %and3 = and i32 %10, 4095
  %shr = ashr i32 %and3, 2
  %add4 = add nsw i32 %shr, 2
  %div5 = sdiv i32 %add4, 3
  %add6 = add nsw i32 1, %div5
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_max_probes7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %11, i32 0, i32 3
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %m_max_probes7, i64 0, i64 1
  store i32 %add6, i32* %arrayidx8, align 4
  %12 = load i32, i32* %flags.addr, align 4
  %and9 = and i32 %12, 32768
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %13, i32 0, i32 41
  %14 = bitcast [32768 x i16]* %m_hash to i8*
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash10 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 41
  %16 = bitcast [32768 x i16]* %m_hash10 to i8*
  %17 = call i64 @llvm.objectsize.i64.p0i8(i8* %16, i1 false)
  %call = call i8* @__memset_chk(i8* %14, i32 0, i64 65536, i64 %17) #10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 16
  store i32 0, i32* %m_bits_in, align 4
  %19 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %19, i32 0, i32 15
  store i32 0, i32* %m_lz_code_buf_dict_pos, align 8
  %20 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %20, i32 0, i32 14
  store i32 0, i32* %m_total_lz_bytes, align 4
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 8
  store i32 0, i32* %m_dict_size, align 4
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 7
  store i32 0, i32* %m_lookahead_size, align 8
  %23 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %23, i32 0, i32 6
  store i32 0, i32* %m_lookahead_pos, align 4
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_wants_to_finish = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 25
  store i32 0, i32* %m_wants_to_finish, align 8
  %25 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %25, i32 0, i32 17
  store i32 0, i32* %m_bit_buffer, align 8
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_block_index = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %26, i32 0, i32 24
  store i32 0, i32* %m_block_index, align 4
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 23
  store i32 0, i32* %m_finished, align 8
  %28 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %28, i32 0, i32 22
  store i32 0, i32* %m_output_flush_remaining, align 4
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 21
  store i32 0, i32* %m_output_flush_ofs, align 8
  %30 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %30, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 1
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 9
  store i8* %add.ptr, i8** %m_pLZ_code_buf, align 8
  %32 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf11 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %32, i32 0, i32 39
  %arraydecay12 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf11, i32 0, i32 0
  %33 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %33, i32 0, i32 10
  store i8* %arraydecay12, i8** %m_pLZ_flags, align 8
  %34 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %34, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left, align 8
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %35, i32 0, i32 42
  %arraydecay13 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf, i32 0, i32 0
  %36 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %36, i32 0, i32 11
  store i8* %arraydecay13, i8** %m_pOutput_buf, align 8
  %37 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf14 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %37, i32 0, i32 42
  %arraydecay15 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf14, i32 0, i32 0
  %38 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %38, i32 0, i32 12
  store i8* %arraydecay15, i8** %m_pOutput_buf_end, align 8
  %39 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %39, i32 0, i32 26
  store i32 0, i32* %m_prev_return_status, align 4
  %40 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_lit = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %40, i32 0, i32 20
  store i32 0, i32* %m_saved_lit, align 4
  %41 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %41, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len, align 8
  %42 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_dist = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %42, i32 0, i32 18
  store i32 0, i32* %m_saved_match_dist, align 4
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %43, i32 0, i32 5
  store i32 1, i32* %m_adler32, align 8
  %44 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %44, i32 0, i32 27
  store i8* null, i8** %m_pIn_buf, align 8
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 28
  store i8* null, i8** %m_pOut_buf, align 8
  %46 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %46, i32 0, i32 29
  store i64* null, i64** %m_pIn_buf_size, align 8
  %47 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %47, i32 0, i32 30
  store i64* null, i64** %m_pOut_buf_size, align 8
  %48 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %48, i32 0, i32 31
  store i32 0, i32* %m_flush, align 8
  %49 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %49, i32 0, i32 32
  store i8* null, i8** %m_pSrc, align 8
  %50 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %50, i32 0, i32 33
  store i64 0, i64* %m_src_buf_left, align 8
  %51 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %51, i32 0, i32 34
  store i64 0, i64* %m_out_buf_ofs, align 8
  %52 = load i32, i32* %flags.addr, align 4
  %and16 = and i32 %52, 32768
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.end21, label %if.then18

if.then18:                                        ; preds = %if.end
  %53 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %53, i32 0, i32 35
  %54 = bitcast [33025 x i8]* %m_dict to i8*
  %55 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict19 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %55, i32 0, i32 35
  %56 = bitcast [33025 x i8]* %m_dict19 to i8*
  %57 = call i64 @llvm.objectsize.i64.p0i8(i8* %56, i1 false)
  %call20 = call i8* @__memset_chk(i8* %54, i32 0, i64 33025, i64 %57) #10
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.end
  %58 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %58, i32 0, i32 36
  %arrayidx22 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %arrayidx23 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx22, i64 0, i64 0
  %59 = bitcast i16* %arrayidx23 to i8*
  %60 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count24 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %60, i32 0, i32 36
  %arrayidx25 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count24, i64 0, i64 0
  %arrayidx26 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx25, i64 0, i64 0
  %61 = bitcast i16* %arrayidx26 to i8*
  %62 = call i64 @llvm.objectsize.i64.p0i8(i8* %61, i1 false)
  %call27 = call i8* @__memset_chk(i8* %59, i32 0, i64 576, i64 %62) #10
  %63 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count28 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %63, i32 0, i32 36
  %arrayidx29 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count28, i64 0, i64 1
  %arrayidx30 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx29, i64 0, i64 0
  %64 = bitcast i16* %arrayidx30 to i8*
  %65 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count31 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %65, i32 0, i32 36
  %arrayidx32 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count31, i64 0, i64 1
  %arrayidx33 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx32, i64 0, i64 0
  %66 = bitcast i16* %arrayidx33 to i8*
  %67 = call i64 @llvm.objectsize.i64.p0i8(i8* %66, i1 false)
  %call34 = call i8* @__memset_chk(i8* %64, i32 0, i64 64, i64 %67) #10
  ret i32 0
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_deflateEnd(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 9
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %opaque = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 10
  %6 = load i8*, i8** %opaque, align 8
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state3 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state3, align 8
  %9 = bitcast %struct.mz_internal_state* %8 to i8*
  call void %4(i8* %6, i8* %9)
  %10 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state4 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %10, i32 0, i32 7
  store %struct.mz_internal_state* null, %struct.mz_internal_state** %state4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end5, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_deflateReset(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 8
  %4 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 9
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8
  %tobool5 = icmp ne void (i8*, i8*)* %6, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 5
  store i64 0, i64* %total_out, align 8
  %8 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %8, i32 0, i32 2
  store i64 0, i64* %total_in, align 8
  %9 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state6 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %9, i32 0, i32 7
  %10 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state6, align 8
  %11 = bitcast %struct.mz_internal_state* %10 to %struct.tdefl_compressor*
  %12 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state7 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %12, i32 0, i32 7
  %13 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state7, align 8
  %14 = bitcast %struct.mz_internal_state* %13 to %struct.tdefl_compressor*
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 2
  %15 = load i32, i32* %m_flags, align 8
  %call = call i32 @tdefl_init(%struct.tdefl_compressor* %11, i32 (i8*, i32, i8*)* null, i8* null, i32 %15)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_deflate(%struct.mz_stream_s* %pStream, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %flush.addr = alloca i32, align 4
  %in_bytes = alloca i64, align 8
  %out_bytes = alloca i64, align 8
  %orig_total_in = alloca i64, align 8
  %orig_total_out = alloca i64, align 8
  %mz_status = alloca i32, align 4
  %defl_status = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  store i32 0, i32* %mz_status, align 4
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %flush.addr, align 4
  %cmp = icmp slt i32 %3, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false2
  %4 = load i32, i32* %flush.addr, align 4
  %cmp4 = icmp sgt i32 %4, 4
  br i1 %cmp4, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 3
  %6 = load i8*, i8** %next_out, align 8
  %tobool6 = icmp ne i8* %6, null
  br i1 %tobool6, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false5
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 4
  %8 = load i32, i32* %avail_out, align 8
  %tobool7 = icmp ne i32 %8, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end
  store i32 -5, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.end
  %9 = load i32, i32* %flush.addr, align 4
  %cmp10 = icmp eq i32 %9, 1
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end9
  store i32 2, i32* %flush.addr, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end9
  %10 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state13 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %10, i32 0, i32 7
  %11 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state13, align 8
  %12 = bitcast %struct.mz_internal_state* %11 to %struct.tdefl_compressor*
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %12, i32 0, i32 26
  %13 = load i32, i32* %m_prev_return_status, align 4
  %cmp14 = icmp eq i32 %13, 1
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end12
  %14 = load i32, i32* %flush.addr, align 4
  %cmp16 = icmp eq i32 %14, 4
  %cond = select i1 %cmp16, i32 1, i32 -5
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end12
  %15 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %15, i32 0, i32 2
  %16 = load i64, i64* %total_in, align 8
  store i64 %16, i64* %orig_total_in, align 8
  %17 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %17, i32 0, i32 5
  %18 = load i64, i64* %total_out, align 8
  store i64 %18, i64* %orig_total_out, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end73, %if.end17
  %19 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %19, i32 0, i32 1
  %20 = load i32, i32* %avail_in, align 8
  %conv = zext i32 %20 to i64
  store i64 %conv, i64* %in_bytes, align 8
  %21 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out18 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %21, i32 0, i32 4
  %22 = load i32, i32* %avail_out18, align 8
  %conv19 = zext i32 %22 to i64
  store i64 %conv19, i64* %out_bytes, align 8
  %23 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state20 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %23, i32 0, i32 7
  %24 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state20, align 8
  %25 = bitcast %struct.mz_internal_state* %24 to %struct.tdefl_compressor*
  %26 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %26, i32 0, i32 0
  %27 = load i8*, i8** %next_in, align 8
  %28 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out21 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %28, i32 0, i32 3
  %29 = load i8*, i8** %next_out21, align 8
  %30 = load i32, i32* %flush.addr, align 4
  %call = call i32 @tdefl_compress(%struct.tdefl_compressor* %25, i8* %27, i64* %in_bytes, i8* %29, i64* %out_bytes, i32 %30)
  store i32 %call, i32* %defl_status, align 4
  %31 = load i64, i64* %in_bytes, align 8
  %conv22 = trunc i64 %31 to i32
  %32 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_in23 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %32, i32 0, i32 0
  %33 = load i8*, i8** %next_in23, align 8
  %idx.ext = zext i32 %conv22 to i64
  %add.ptr = getelementptr inbounds i8, i8* %33, i64 %idx.ext
  store i8* %add.ptr, i8** %next_in23, align 8
  %34 = load i64, i64* %in_bytes, align 8
  %conv24 = trunc i64 %34 to i32
  %35 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in25 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %35, i32 0, i32 1
  %36 = load i32, i32* %avail_in25, align 8
  %sub = sub i32 %36, %conv24
  store i32 %sub, i32* %avail_in25, align 8
  %37 = load i64, i64* %in_bytes, align 8
  %conv26 = trunc i64 %37 to i32
  %conv27 = zext i32 %conv26 to i64
  %38 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in28 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %38, i32 0, i32 2
  %39 = load i64, i64* %total_in28, align 8
  %add = add i64 %39, %conv27
  store i64 %add, i64* %total_in28, align 8
  %40 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state29 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %40, i32 0, i32 7
  %41 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state29, align 8
  %42 = bitcast %struct.mz_internal_state* %41 to %struct.tdefl_compressor*
  %call30 = call i32 @tdefl_get_adler32(%struct.tdefl_compressor* %42)
  %conv31 = zext i32 %call30 to i64
  %43 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %43, i32 0, i32 12
  store i64 %conv31, i64* %adler, align 8
  %44 = load i64, i64* %out_bytes, align 8
  %conv32 = trunc i64 %44 to i32
  %45 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out33 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %45, i32 0, i32 3
  %46 = load i8*, i8** %next_out33, align 8
  %idx.ext34 = zext i32 %conv32 to i64
  %add.ptr35 = getelementptr inbounds i8, i8* %46, i64 %idx.ext34
  store i8* %add.ptr35, i8** %next_out33, align 8
  %47 = load i64, i64* %out_bytes, align 8
  %conv36 = trunc i64 %47 to i32
  %48 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out37 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %48, i32 0, i32 4
  %49 = load i32, i32* %avail_out37, align 8
  %sub38 = sub i32 %49, %conv36
  store i32 %sub38, i32* %avail_out37, align 8
  %50 = load i64, i64* %out_bytes, align 8
  %conv39 = trunc i64 %50 to i32
  %conv40 = zext i32 %conv39 to i64
  %51 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out41 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %51, i32 0, i32 5
  %52 = load i64, i64* %total_out41, align 8
  %add42 = add i64 %52, %conv40
  store i64 %add42, i64* %total_out41, align 8
  %53 = load i32, i32* %defl_status, align 4
  %cmp43 = icmp slt i32 %53, 0
  br i1 %cmp43, label %if.then45, label %if.else

if.then45:                                        ; preds = %for.cond
  store i32 -2, i32* %mz_status, align 4
  br label %for.end

if.else:                                          ; preds = %for.cond
  %54 = load i32, i32* %defl_status, align 4
  %cmp46 = icmp eq i32 %54, 1
  br i1 %cmp46, label %if.then48, label %if.else49

if.then48:                                        ; preds = %if.else
  store i32 1, i32* %mz_status, align 4
  br label %for.end

if.else49:                                        ; preds = %if.else
  %55 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out50 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %55, i32 0, i32 4
  %56 = load i32, i32* %avail_out50, align 8
  %tobool51 = icmp ne i32 %56, 0
  br i1 %tobool51, label %if.else53, label %if.then52

if.then52:                                        ; preds = %if.else49
  br label %for.end

if.else53:                                        ; preds = %if.else49
  %57 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in54 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %57, i32 0, i32 1
  %58 = load i32, i32* %avail_in54, align 8
  %tobool55 = icmp ne i32 %58, 0
  br i1 %tobool55, label %if.end70, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else53
  %59 = load i32, i32* %flush.addr, align 4
  %cmp56 = icmp ne i32 %59, 4
  br i1 %cmp56, label %if.then58, label %if.end70

if.then58:                                        ; preds = %land.lhs.true
  %60 = load i32, i32* %flush.addr, align 4
  %tobool59 = icmp ne i32 %60, 0
  br i1 %tobool59, label %if.then68, label %lor.lhs.false60

lor.lhs.false60:                                  ; preds = %if.then58
  %61 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in61 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %61, i32 0, i32 2
  %62 = load i64, i64* %total_in61, align 8
  %63 = load i64, i64* %orig_total_in, align 8
  %cmp62 = icmp ne i64 %62, %63
  br i1 %cmp62, label %if.then68, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %lor.lhs.false60
  %64 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out65 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %64, i32 0, i32 5
  %65 = load i64, i64* %total_out65, align 8
  %66 = load i64, i64* %orig_total_out, align 8
  %cmp66 = icmp ne i64 %65, %66
  br i1 %cmp66, label %if.then68, label %if.end69

if.then68:                                        ; preds = %lor.lhs.false64, %lor.lhs.false60, %if.then58
  br label %for.end

if.end69:                                         ; preds = %lor.lhs.false64
  store i32 -5, i32* %retval, align 4
  br label %return

if.end70:                                         ; preds = %land.lhs.true, %if.else53
  br label %if.end71

if.end71:                                         ; preds = %if.end70
  br label %if.end72

if.end72:                                         ; preds = %if.end71
  br label %if.end73

if.end73:                                         ; preds = %if.end72
  br label %for.cond

for.end:                                          ; preds = %if.then68, %if.then52, %if.then48, %if.then45
  %67 = load i32, i32* %mz_status, align 4
  store i32 %67, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.end69, %if.then15, %if.then8, %if.then
  %68 = load i32, i32* %retval, align 4
  ret i32 %68
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tdefl_compress(%struct.tdefl_compressor* %d, i8* %pIn_buf, i64* %pIn_buf_size, i8* %pOut_buf, i64* %pOut_buf_size, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pIn_buf.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pOut_buf.addr = alloca i8*, align 8
  %pOut_buf_size.addr = alloca i64*, align 8
  %flush.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8
  store i64* %pOut_buf_size, i64** %pOut_buf_size.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %tobool = icmp ne %struct.tdefl_compressor* %0, null
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %pIn_buf_size.addr, align 8
  %tobool1 = icmp ne i64* %1, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load i64*, i64** %pIn_buf_size.addr, align 8
  store i64 0, i64* %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %3 = load i64*, i64** %pOut_buf_size.addr, align 8
  %tobool3 = icmp ne i64* %3, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = load i64*, i64** %pOut_buf_size.addr, align 8
  store i64 0, i64* %4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  store i32 -2, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %entry
  %5 = load i8*, i8** %pIn_buf.addr, align 8
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 27
  store i8* %5, i8** %m_pIn_buf, align 8
  %7 = load i64*, i64** %pIn_buf_size.addr, align 8
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 29
  store i64* %7, i64** %m_pIn_buf_size, align 8
  %9 = load i8*, i8** %pOut_buf.addr, align 8
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %10, i32 0, i32 28
  store i8* %9, i8** %m_pOut_buf, align 8
  %11 = load i64*, i64** %pOut_buf_size.addr, align 8
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %12, i32 0, i32 30
  store i64* %11, i64** %m_pOut_buf_size, align 8
  %13 = load i8*, i8** %pIn_buf.addr, align 8
  %14 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 32
  store i8* %13, i8** %m_pSrc, align 8
  %15 = load i64*, i64** %pIn_buf_size.addr, align 8
  %tobool7 = icmp ne i64* %15, null
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end6
  %16 = load i64*, i64** %pIn_buf_size.addr, align 8
  %17 = load i64, i64* %16, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %17, %cond.true ], [ 0, %cond.false ]
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 33
  store i64 %cond, i64* %m_src_buf_left, align 8
  %19 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %19, i32 0, i32 34
  store i64 0, i64* %m_out_buf_ofs, align 8
  %20 = load i32, i32* %flush.addr, align 4
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 31
  store i32 %20, i32* %m_flush, align 8
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 0
  %23 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8
  %cmp = icmp ne i32 (i8*, i32, i8*)* %23, null
  %conv = zext i1 %cmp to i32
  %24 = load i8*, i8** %pOut_buf.addr, align 8
  %cmp8 = icmp ne i8* %24, null
  br i1 %cmp8, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %25 = load i64*, i64** %pOut_buf_size.addr, align 8
  %cmp10 = icmp ne i64* %25, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %26 = phi i1 [ true, %cond.end ], [ %cmp10, %lor.rhs ]
  %lor.ext = zext i1 %26 to i32
  %cmp12 = icmp eq i32 %conv, %lor.ext
  br i1 %cmp12, label %if.then32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 26
  %28 = load i32, i32* %m_prev_return_status, align 4
  %cmp14 = icmp ne i32 %28, 0
  br i1 %cmp14, label %if.then32, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_wants_to_finish = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 25
  %30 = load i32, i32* %m_wants_to_finish, align 8
  %tobool17 = icmp ne i32 %30, 0
  br i1 %tobool17, label %land.lhs.true, label %lor.lhs.false20

land.lhs.true:                                    ; preds = %lor.lhs.false16
  %31 = load i32, i32* %flush.addr, align 4
  %cmp18 = icmp ne i32 %31, 4
  br i1 %cmp18, label %if.then32, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %land.lhs.true, %lor.lhs.false16
  %32 = load i64*, i64** %pIn_buf_size.addr, align 8
  %tobool21 = icmp ne i64* %32, null
  br i1 %tobool21, label %land.lhs.true22, label %lor.lhs.false26

land.lhs.true22:                                  ; preds = %lor.lhs.false20
  %33 = load i64*, i64** %pIn_buf_size.addr, align 8
  %34 = load i64, i64* %33, align 8
  %tobool23 = icmp ne i64 %34, 0
  br i1 %tobool23, label %land.lhs.true24, label %lor.lhs.false26

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %35 = load i8*, i8** %pIn_buf.addr, align 8
  %tobool25 = icmp ne i8* %35, null
  br i1 %tobool25, label %lor.lhs.false26, label %if.then32

lor.lhs.false26:                                  ; preds = %land.lhs.true24, %land.lhs.true22, %lor.lhs.false20
  %36 = load i64*, i64** %pOut_buf_size.addr, align 8
  %tobool27 = icmp ne i64* %36, null
  br i1 %tobool27, label %land.lhs.true28, label %if.end40

land.lhs.true28:                                  ; preds = %lor.lhs.false26
  %37 = load i64*, i64** %pOut_buf_size.addr, align 8
  %38 = load i64, i64* %37, align 8
  %tobool29 = icmp ne i64 %38, 0
  br i1 %tobool29, label %land.lhs.true30, label %if.end40

land.lhs.true30:                                  ; preds = %land.lhs.true28
  %39 = load i8*, i8** %pOut_buf.addr, align 8
  %tobool31 = icmp ne i8* %39, null
  br i1 %tobool31, label %if.end40, label %if.then32

if.then32:                                        ; preds = %land.lhs.true30, %land.lhs.true24, %land.lhs.true, %lor.lhs.false, %lor.end
  %40 = load i64*, i64** %pIn_buf_size.addr, align 8
  %tobool33 = icmp ne i64* %40, null
  br i1 %tobool33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then32
  %41 = load i64*, i64** %pIn_buf_size.addr, align 8
  store i64 0, i64* %41, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then32
  %42 = load i64*, i64** %pOut_buf_size.addr, align 8
  %tobool36 = icmp ne i64* %42, null
  br i1 %tobool36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end35
  %43 = load i64*, i64** %pOut_buf_size.addr, align 8
  store i64 0, i64* %43, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.end35
  %44 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status39 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %44, i32 0, i32 26
  store i32 -2, i32* %m_prev_return_status39, align 4
  store i32 -2, i32* %retval, align 4
  br label %return

if.end40:                                         ; preds = %land.lhs.true30, %land.lhs.true28, %lor.lhs.false26
  %45 = load i32, i32* %flush.addr, align 4
  %cmp41 = icmp eq i32 %45, 4
  %conv42 = zext i1 %cmp41 to i32
  %46 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_wants_to_finish43 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %46, i32 0, i32 25
  %47 = load i32, i32* %m_wants_to_finish43, align 8
  %or = or i32 %47, %conv42
  store i32 %or, i32* %m_wants_to_finish43, align 8
  %48 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %48, i32 0, i32 22
  %49 = load i32, i32* %m_output_flush_remaining, align 4
  %tobool44 = icmp ne i32 %49, 0
  br i1 %tobool44, label %if.then47, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.end40
  %50 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %50, i32 0, i32 23
  %51 = load i32, i32* %m_finished, align 8
  %tobool46 = icmp ne i32 %51, 0
  br i1 %tobool46, label %if.then47, label %if.end49

if.then47:                                        ; preds = %lor.lhs.false45, %if.end40
  %52 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call = call i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %52)
  %53 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status48 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %53, i32 0, i32 26
  store i32 %call, i32* %m_prev_return_status48, align 4
  store i32 %call, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %54 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %54, i32 0, i32 2
  %55 = load i32, i32* %m_flags, align 8
  %and = and i32 %55, 4095
  %cmp50 = icmp eq i32 %and, 1
  br i1 %cmp50, label %land.lhs.true52, label %if.else

land.lhs.true52:                                  ; preds = %if.end49
  %56 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags53 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %56, i32 0, i32 2
  %57 = load i32, i32* %m_flags53, align 8
  %and54 = and i32 %57, 16384
  %cmp55 = icmp ne i32 %and54, 0
  br i1 %cmp55, label %land.lhs.true57, label %if.else

land.lhs.true57:                                  ; preds = %land.lhs.true52
  %58 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags58 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %58, i32 0, i32 2
  %59 = load i32, i32* %m_flags58, align 8
  %and59 = and i32 %59, 720896
  %cmp60 = icmp eq i32 %and59, 0
  br i1 %cmp60, label %if.then62, label %if.else

if.then62:                                        ; preds = %land.lhs.true57
  %60 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call63 = call i32 @tdefl_compress_fast(%struct.tdefl_compressor* %60)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end67, label %if.then65

if.then65:                                        ; preds = %if.then62
  %61 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status66 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %61, i32 0, i32 26
  %62 = load i32, i32* %m_prev_return_status66, align 4
  store i32 %62, i32* %retval, align 4
  br label %return

if.end67:                                         ; preds = %if.then62
  br label %if.end73

if.else:                                          ; preds = %land.lhs.true57, %land.lhs.true52, %if.end49
  %63 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call68 = call i32 @tdefl_compress_normal(%struct.tdefl_compressor* %63)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.end72, label %if.then70

if.then70:                                        ; preds = %if.else
  %64 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status71 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %64, i32 0, i32 26
  %65 = load i32, i32* %m_prev_return_status71, align 4
  store i32 %65, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.else
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end67
  %66 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags74 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %66, i32 0, i32 2
  %67 = load i32, i32* %m_flags74, align 8
  %and75 = and i32 %67, 12288
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %land.lhs.true77, label %if.end85

land.lhs.true77:                                  ; preds = %if.end73
  %68 = load i8*, i8** %pIn_buf.addr, align 8
  %tobool78 = icmp ne i8* %68, null
  br i1 %tobool78, label %if.then79, label %if.end85

if.then79:                                        ; preds = %land.lhs.true77
  %69 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %69, i32 0, i32 5
  %70 = load i32, i32* %m_adler32, align 8
  %conv80 = zext i32 %70 to i64
  %71 = load i8*, i8** %pIn_buf.addr, align 8
  %72 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc81 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %72, i32 0, i32 32
  %73 = load i8*, i8** %m_pSrc81, align 8
  %74 = load i8*, i8** %pIn_buf.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %73 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %74 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call82 = call i64 @mz_adler32(i64 %conv80, i8* %71, i64 %sub.ptr.sub)
  %conv83 = trunc i64 %call82 to i32
  %75 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_adler3284 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %75, i32 0, i32 5
  store i32 %conv83, i32* %m_adler3284, align 8
  br label %if.end85

if.end85:                                         ; preds = %if.then79, %land.lhs.true77, %if.end73
  %76 = load i32, i32* %flush.addr, align 4
  %tobool86 = icmp ne i32 %76, 0
  br i1 %tobool86, label %land.lhs.true87, label %if.end113

land.lhs.true87:                                  ; preds = %if.end85
  %77 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %77, i32 0, i32 7
  %78 = load i32, i32* %m_lookahead_size, align 8
  %tobool88 = icmp ne i32 %78, 0
  br i1 %tobool88, label %if.end113, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %land.lhs.true87
  %79 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left90 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %79, i32 0, i32 33
  %80 = load i64, i64* %m_src_buf_left90, align 8
  %tobool91 = icmp ne i64 %80, 0
  br i1 %tobool91, label %if.end113, label %land.lhs.true92

land.lhs.true92:                                  ; preds = %land.lhs.true89
  %81 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining93 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %81, i32 0, i32 22
  %82 = load i32, i32* %m_output_flush_remaining93, align 4
  %tobool94 = icmp ne i32 %82, 0
  br i1 %tobool94, label %if.end113, label %if.then95

if.then95:                                        ; preds = %land.lhs.true92
  %83 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %84 = load i32, i32* %flush.addr, align 4
  %call96 = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %83, i32 %84)
  %cmp97 = icmp slt i32 %call96, 0
  br i1 %cmp97, label %if.then99, label %if.end101

if.then99:                                        ; preds = %if.then95
  %85 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status100 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %85, i32 0, i32 26
  %86 = load i32, i32* %m_prev_return_status100, align 4
  store i32 %86, i32* %retval, align 4
  br label %return

if.end101:                                        ; preds = %if.then95
  %87 = load i32, i32* %flush.addr, align 4
  %cmp102 = icmp eq i32 %87, 4
  %conv103 = zext i1 %cmp102 to i32
  %88 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_finished104 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %88, i32 0, i32 23
  store i32 %conv103, i32* %m_finished104, align 8
  %89 = load i32, i32* %flush.addr, align 4
  %cmp105 = icmp eq i32 %89, 3
  br i1 %cmp105, label %if.then107, label %if.end112

if.then107:                                       ; preds = %if.end101
  %90 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %90, i32 0, i32 41
  %91 = bitcast [32768 x i16]* %m_hash to i8*
  %92 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash108 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %92, i32 0, i32 41
  %93 = bitcast [32768 x i16]* %m_hash108 to i8*
  %94 = call i64 @llvm.objectsize.i64.p0i8(i8* %93, i1 false)
  %call109 = call i8* @__memset_chk(i8* %91, i32 0, i64 65536, i64 %94) #10
  %95 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_next = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %95, i32 0, i32 40
  %96 = bitcast [32768 x i16]* %m_next to i8*
  %97 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_next110 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %97, i32 0, i32 40
  %98 = bitcast [32768 x i16]* %m_next110 to i8*
  %99 = call i64 @llvm.objectsize.i64.p0i8(i8* %98, i1 false)
  %call111 = call i8* @__memset_chk(i8* %96, i32 0, i64 65536, i64 %99) #10
  %100 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %100, i32 0, i32 8
  store i32 0, i32* %m_dict_size, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then107, %if.end101
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %land.lhs.true92, %land.lhs.true89, %land.lhs.true87, %if.end85
  %101 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call114 = call i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %101)
  %102 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status115 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %102, i32 0, i32 26
  store i32 %call114, i32* %m_prev_return_status115, align 4
  store i32 %call114, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end113, %if.then99, %if.then70, %if.then65, %if.then47, %if.end38, %if.end5
  %103 = load i32, i32* %retval, align 4
  ret i32 %103
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tdefl_get_adler32(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 5
  %1 = load i32, i32* %m_adler32, align 8
  ret i32 %1
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_deflateBound(%struct.mz_stream_s* %pStream, i64 %source_len) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %source_len.addr = alloca i64, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %1 = load i64, i64* %source_len.addr, align 8
  %mul = mul i64 %1, 110
  %div = udiv i64 %mul, 100
  %add = add i64 128, %div
  %2 = load i64, i64* %source_len.addr, align 8
  %add1 = add i64 128, %2
  %3 = load i64, i64* %source_len.addr, align 8
  %div2 = udiv i64 %3, 31744
  %add3 = add i64 %div2, 1
  %mul4 = mul i64 %add3, 5
  %add5 = add i64 %add1, %mul4
  %cmp = icmp ugt i64 %add, %add5
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i64, i64* %source_len.addr, align 8
  %mul6 = mul i64 %4, 110
  %div7 = udiv i64 %mul6, 100
  %add8 = add i64 128, %div7
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %source_len.addr, align 8
  %add9 = add i64 128, %5
  %6 = load i64, i64* %source_len.addr, align 8
  %div10 = udiv i64 %6, 31744
  %add11 = add i64 %div10, 1
  %mul12 = mul i64 %add11, 5
  %add13 = add i64 %add9, %mul12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add8, %cond.true ], [ %add13, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_compress2(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len, i32 %level) #0 {
entry:
  %retval = alloca i32, align 4
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  %level.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %stream = alloca %struct.mz_stream_s, align 8
  store i8* %pDest, i8** %pDest.addr, align 8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8
  store i8* %pSource, i8** %pSource.addr, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  %0 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 112, i32 8, i1 false)
  %1 = load i64, i64* %source_len.addr, align 8
  %2 = load i64*, i64** %pDest_len.addr, align 8
  %3 = load i64, i64* %2, align 8
  %or = or i64 %1, %3
  %cmp = icmp ugt i64 %or, 4294967295
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -10000, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %pSource.addr, align 8
  %next_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 0
  store i8* %4, i8** %next_in, align 8
  %5 = load i64, i64* %source_len.addr, align 8
  %conv = trunc i64 %5 to i32
  %avail_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 1
  store i32 %conv, i32* %avail_in, align 8
  %6 = load i8*, i8** %pDest.addr, align 8
  %next_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 3
  store i8* %6, i8** %next_out, align 8
  %7 = load i64*, i64** %pDest_len.addr, align 8
  %8 = load i64, i64* %7, align 8
  %conv1 = trunc i64 %8 to i32
  %avail_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 4
  store i32 %conv1, i32* %avail_out, align 8
  %9 = load i32, i32* %level.addr, align 4
  %call = call i32 @mz_deflateInit(%struct.mz_stream_s* %stream, i32 %9)
  store i32 %call, i32* %status, align 4
  %10 = load i32, i32* %status, align 4
  %cmp2 = icmp ne i32 %10, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %11 = load i32, i32* %status, align 4
  store i32 %11, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @mz_deflate(%struct.mz_stream_s* %stream, i32 4)
  store i32 %call6, i32* %status, align 4
  %12 = load i32, i32* %status, align 4
  %cmp7 = icmp ne i32 %12, 1
  br i1 %cmp7, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.end5
  %call10 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %stream)
  %13 = load i32, i32* %status, align 4
  %cmp11 = icmp eq i32 %13, 0
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then9
  br label %cond.end

cond.false:                                       ; preds = %if.then9
  %14 = load i32, i32* %status, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -5, %cond.true ], [ %14, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end5
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 5
  %15 = load i64, i64* %total_out, align 8
  %16 = load i64*, i64** %pDest_len.addr, align 8
  store i64 %15, i64* %16, align 8
  %call14 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %stream)
  store i32 %call14, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end13, %cond.end, %if.then4, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #4

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_compress(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len) #0 {
entry:
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  store i8* %pDest, i8** %pDest.addr, align 8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8
  store i8* %pSource, i8** %pSource.addr, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  %0 = load i8*, i8** %pDest.addr, align 8
  %1 = load i64*, i64** %pDest_len.addr, align 8
  %2 = load i8*, i8** %pSource.addr, align 8
  %3 = load i64, i64* %source_len.addr, align 8
  %call = call i32 @mz_compress2(i8* %0, i64* %1, i8* %2, i64 %3, i32 -1)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_compressBound(i64 %source_len) #0 {
entry:
  %source_len.addr = alloca i64, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  %0 = load i64, i64* %source_len.addr, align 8
  %call = call i64 @mz_deflateBound(%struct.mz_stream_s* null, i64 %0)
  ret i64 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_inflateInit2(%struct.mz_stream_s* %pStream, i32 %window_bits) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %window_bits.addr = alloca i32, align 4
  %pDecomp = alloca %struct.inflate_state*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %window_bits, i32* %window_bits.addr, align 4
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %window_bits.addr, align 4
  %cmp = icmp ne i32 %1, 15
  br i1 %cmp, label %land.lhs.true, label %if.end3

land.lhs.true:                                    ; preds = %if.end
  %2 = load i32, i32* %window_bits.addr, align 4
  %sub = sub nsw i32 0, %2
  %cmp1 = icmp ne i32 %sub, 15
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %land.lhs.true
  store i32 -10000, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %land.lhs.true, %if.end
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %data_type = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 11
  store i32 0, i32* %data_type, align 8
  %4 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %4, i32 0, i32 12
  store i64 0, i64* %adler, align 8
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %msg = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 6
  store i8* null, i8** %msg, align 8
  %6 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %6, i32 0, i32 2
  store i64 0, i64* %total_in, align 8
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 5
  store i64 0, i64* %total_out, align 8
  %8 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %reserved = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %8, i32 0, i32 13
  store i64 0, i64* %reserved, align 8
  %9 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %9, i32 0, i32 8
  %10 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc, align 8
  %tobool4 = icmp ne i8* (i8*, i64, i64)* %10, null
  br i1 %tobool4, label %if.end7, label %if.then5

if.then5:                                         ; preds = %if.end3
  %11 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc6 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %11, i32 0, i32 8
  store i8* (i8*, i64, i64)* @miniz_def_alloc_func, i8* (i8*, i64, i64)** %zalloc6, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end3
  %12 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %12, i32 0, i32 9
  %13 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8
  %tobool8 = icmp ne void (i8*, i8*)* %13, null
  br i1 %tobool8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end7
  %14 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zfree10 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %14, i32 0, i32 9
  store void (i8*, i8*)* @miniz_def_free_func, void (i8*, i8*)** %zfree10, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end7
  %15 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zalloc12 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %15, i32 0, i32 8
  %16 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc12, align 8
  %17 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %opaque = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %17, i32 0, i32 10
  %18 = load i8*, i8** %opaque, align 8
  %call = call i8* %16(i8* %18, i64 1, i64 43792)
  %19 = bitcast i8* %call to %struct.inflate_state*
  store %struct.inflate_state* %19, %struct.inflate_state** %pDecomp, align 8
  %20 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %tobool13 = icmp ne %struct.inflate_state* %20, null
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end11
  store i32 -4, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.end11
  %21 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %22 = bitcast %struct.inflate_state* %21 to %struct.mz_internal_state*
  %23 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %23, i32 0, i32 7
  store %struct.mz_internal_state* %22, %struct.mz_internal_state** %state, align 8
  br label %do.body

do.body:                                          ; preds = %if.end15
  %24 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_decomp = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %24, i32 0, i32 0
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %m_decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %25 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_dict_ofs = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %25, i32 0, i32 1
  store i32 0, i32* %m_dict_ofs, align 8
  %26 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_dict_avail = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %26, i32 0, i32 2
  store i32 0, i32* %m_dict_avail, align 4
  %27 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_last_status = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %27, i32 0, i32 7
  store i32 1, i32* %m_last_status, align 4
  %28 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_first_call = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %28, i32 0, i32 3
  store i32 1, i32* %m_first_call, align 8
  %29 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_has_flushed = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %29, i32 0, i32 4
  store i32 0, i32* %m_has_flushed, align 4
  %30 = load i32, i32* %window_bits.addr, align 4
  %31 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_window_bits = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %31, i32 0, i32 5
  store i32 %30, i32* %m_window_bits, align 8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then14, %if.then2, %if.then
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_inflateInit(%struct.mz_stream_s* %pStream) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %call = call i32 @mz_inflateInit2(%struct.mz_stream_s* %0, i32 15)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_inflateReset(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %pDecomp = alloca %struct.inflate_state*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %data_type = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 11
  store i32 0, i32* %data_type, align 8
  %2 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %2, i32 0, i32 12
  store i64 0, i64* %adler, align 8
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %msg = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 6
  store i8* null, i8** %msg, align 8
  %4 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %4, i32 0, i32 2
  store i64 0, i64* %total_in, align 8
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 5
  store i64 0, i64* %total_out, align 8
  %6 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %reserved = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %6, i32 0, i32 13
  store i64 0, i64* %reserved, align 8
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8
  %9 = bitcast %struct.mz_internal_state* %8 to %struct.inflate_state*
  store %struct.inflate_state* %9, %struct.inflate_state** %pDecomp, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %10 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_decomp = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %10, i32 0, i32 0
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %m_decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %11 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_dict_ofs = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %11, i32 0, i32 1
  store i32 0, i32* %m_dict_ofs, align 8
  %12 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_dict_avail = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %12, i32 0, i32 2
  store i32 0, i32* %m_dict_avail, align 4
  %13 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_last_status = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %13, i32 0, i32 7
  store i32 1, i32* %m_last_status, align 4
  %14 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_first_call = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i32 0, i32 3
  store i32 1, i32* %m_first_call, align 8
  %15 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8
  %m_has_flushed = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i32 0, i32 4
  store i32 0, i32* %m_has_flushed, align 4
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_inflate(%struct.mz_stream_s* %pStream, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %flush.addr = alloca i32, align 4
  %pState = alloca %struct.inflate_state*, align 8
  %n = alloca i32, align 4
  %first_call = alloca i32, align 4
  %decomp_flags = alloca i32, align 4
  %in_bytes = alloca i64, align 8
  %out_bytes = alloca i64, align 8
  %orig_avail_in = alloca i64, align 8
  %status = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  store i32 8, i32* %decomp_flags, align 4
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %flush.addr, align 4
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 2, i32* %flush.addr, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %4 = load i32, i32* %flush.addr, align 4
  %tobool4 = icmp ne i32 %4, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %if.end3
  %5 = load i32, i32* %flush.addr, align 4
  %cmp5 = icmp ne i32 %5, 2
  br i1 %cmp5, label %land.lhs.true6, label %if.end9

land.lhs.true6:                                   ; preds = %land.lhs.true
  %6 = load i32, i32* %flush.addr, align 4
  %cmp7 = icmp ne i32 %6, 4
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %land.lhs.true6
  store i32 -2, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %land.lhs.true6, %land.lhs.true, %if.end3
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state10 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state10, align 8
  %9 = bitcast %struct.mz_internal_state* %8 to %struct.inflate_state*
  store %struct.inflate_state* %9, %struct.inflate_state** %pState, align 8
  %10 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_window_bits = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %10, i32 0, i32 5
  %11 = load i32, i32* %m_window_bits, align 8
  %cmp11 = icmp sgt i32 %11, 0
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  %12 = load i32, i32* %decomp_flags, align 4
  %or = or i32 %12, 1
  store i32 %or, i32* %decomp_flags, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end9
  %13 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %13, i32 0, i32 1
  %14 = load i32, i32* %avail_in, align 8
  %conv = zext i32 %14 to i64
  store i64 %conv, i64* %orig_avail_in, align 8
  %15 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_first_call = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i32 0, i32 3
  %16 = load i32, i32* %m_first_call, align 8
  store i32 %16, i32* %first_call, align 4
  %17 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_first_call14 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %17, i32 0, i32 3
  store i32 0, i32* %m_first_call14, align 8
  %18 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_last_status = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %18, i32 0, i32 7
  %19 = load i32, i32* %m_last_status, align 4
  %cmp15 = icmp slt i32 %19, 0
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end13
  store i32 -3, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end13
  %20 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_has_flushed = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %20, i32 0, i32 4
  %21 = load i32, i32* %m_has_flushed, align 4
  %tobool19 = icmp ne i32 %21, 0
  br i1 %tobool19, label %land.lhs.true20, label %if.end24

land.lhs.true20:                                  ; preds = %if.end18
  %22 = load i32, i32* %flush.addr, align 4
  %cmp21 = icmp ne i32 %22, 4
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true20
  store i32 -2, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %land.lhs.true20, %if.end18
  %23 = load i32, i32* %flush.addr, align 4
  %cmp25 = icmp eq i32 %23, 4
  %conv26 = zext i1 %cmp25 to i32
  %24 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_has_flushed27 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %24, i32 0, i32 4
  %25 = load i32, i32* %m_has_flushed27, align 4
  %or28 = or i32 %25, %conv26
  store i32 %or28, i32* %m_has_flushed27, align 4
  %26 = load i32, i32* %flush.addr, align 4
  %cmp29 = icmp eq i32 %26, 4
  br i1 %cmp29, label %land.lhs.true31, label %if.end67

land.lhs.true31:                                  ; preds = %if.end24
  %27 = load i32, i32* %first_call, align 4
  %tobool32 = icmp ne i32 %27, 0
  br i1 %tobool32, label %if.then33, label %if.end67

if.then33:                                        ; preds = %land.lhs.true31
  %28 = load i32, i32* %decomp_flags, align 4
  %or34 = or i32 %28, 4
  store i32 %or34, i32* %decomp_flags, align 4
  %29 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in35 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %29, i32 0, i32 1
  %30 = load i32, i32* %avail_in35, align 8
  %conv36 = zext i32 %30 to i64
  store i64 %conv36, i64* %in_bytes, align 8
  %31 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %31, i32 0, i32 4
  %32 = load i32, i32* %avail_out, align 8
  %conv37 = zext i32 %32 to i64
  store i64 %conv37, i64* %out_bytes, align 8
  %33 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_decomp = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %33, i32 0, i32 0
  %34 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %34, i32 0, i32 0
  %35 = load i8*, i8** %next_in, align 8
  %36 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %36, i32 0, i32 3
  %37 = load i8*, i8** %next_out, align 8
  %38 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out38 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %38, i32 0, i32 3
  %39 = load i8*, i8** %next_out38, align 8
  %40 = load i32, i32* %decomp_flags, align 4
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %m_decomp, i8* %35, i64* %in_bytes, i8* %37, i8* %39, i64* %out_bytes, i32 %40)
  store i32 %call, i32* %status, align 4
  %41 = load i32, i32* %status, align 4
  %42 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_last_status39 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %42, i32 0, i32 7
  store i32 %41, i32* %m_last_status39, align 4
  %43 = load i64, i64* %in_bytes, align 8
  %conv40 = trunc i64 %43 to i32
  %44 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_in41 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %44, i32 0, i32 0
  %45 = load i8*, i8** %next_in41, align 8
  %idx.ext = zext i32 %conv40 to i64
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 %idx.ext
  store i8* %add.ptr, i8** %next_in41, align 8
  %46 = load i64, i64* %in_bytes, align 8
  %conv42 = trunc i64 %46 to i32
  %47 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in43 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %47, i32 0, i32 1
  %48 = load i32, i32* %avail_in43, align 8
  %sub = sub i32 %48, %conv42
  store i32 %sub, i32* %avail_in43, align 8
  %49 = load i64, i64* %in_bytes, align 8
  %conv44 = trunc i64 %49 to i32
  %conv45 = zext i32 %conv44 to i64
  %50 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %50, i32 0, i32 2
  %51 = load i64, i64* %total_in, align 8
  %add = add i64 %51, %conv45
  store i64 %add, i64* %total_in, align 8
  %52 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_decomp46 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %52, i32 0, i32 0
  %m_check_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %m_decomp46, i32 0, i32 7
  %53 = load i32, i32* %m_check_adler32, align 4
  %conv47 = zext i32 %53 to i64
  %54 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %54, i32 0, i32 12
  store i64 %conv47, i64* %adler, align 8
  %55 = load i64, i64* %out_bytes, align 8
  %conv48 = trunc i64 %55 to i32
  %56 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out49 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %56, i32 0, i32 3
  %57 = load i8*, i8** %next_out49, align 8
  %idx.ext50 = zext i32 %conv48 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %57, i64 %idx.ext50
  store i8* %add.ptr51, i8** %next_out49, align 8
  %58 = load i64, i64* %out_bytes, align 8
  %conv52 = trunc i64 %58 to i32
  %59 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out53 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %59, i32 0, i32 4
  %60 = load i32, i32* %avail_out53, align 8
  %sub54 = sub i32 %60, %conv52
  store i32 %sub54, i32* %avail_out53, align 8
  %61 = load i64, i64* %out_bytes, align 8
  %conv55 = trunc i64 %61 to i32
  %conv56 = zext i32 %conv55 to i64
  %62 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %62, i32 0, i32 5
  %63 = load i64, i64* %total_out, align 8
  %add57 = add i64 %63, %conv56
  store i64 %add57, i64* %total_out, align 8
  %64 = load i32, i32* %status, align 4
  %cmp58 = icmp slt i32 %64, 0
  br i1 %cmp58, label %if.then60, label %if.else

if.then60:                                        ; preds = %if.then33
  store i32 -3, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.then33
  %65 = load i32, i32* %status, align 4
  %cmp61 = icmp ne i32 %65, 0
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else
  %66 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_last_status64 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %66, i32 0, i32 7
  store i32 -1, i32* %m_last_status64, align 4
  store i32 -5, i32* %retval, align 4
  br label %return

if.end65:                                         ; preds = %if.else
  br label %if.end66

if.end66:                                         ; preds = %if.end65
  store i32 1, i32* %retval, align 4
  br label %return

if.end67:                                         ; preds = %land.lhs.true31, %if.end24
  %67 = load i32, i32* %flush.addr, align 4
  %cmp68 = icmp ne i32 %67, 4
  br i1 %cmp68, label %if.then70, label %if.end72

if.then70:                                        ; preds = %if.end67
  %68 = load i32, i32* %decomp_flags, align 4
  %or71 = or i32 %68, 2
  store i32 %or71, i32* %decomp_flags, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %if.end67
  %69 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %69, i32 0, i32 2
  %70 = load i32, i32* %m_dict_avail, align 4
  %tobool73 = icmp ne i32 %70, 0
  br i1 %tobool73, label %if.then74, label %if.end106

if.then74:                                        ; preds = %if.end72
  %71 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail75 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %71, i32 0, i32 2
  %72 = load i32, i32* %m_dict_avail75, align 4
  %73 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out76 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %73, i32 0, i32 4
  %74 = load i32, i32* %avail_out76, align 8
  %cmp77 = icmp ult i32 %72, %74
  br i1 %cmp77, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then74
  %75 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail79 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %75, i32 0, i32 2
  %76 = load i32, i32* %m_dict_avail79, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then74
  %77 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out80 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %77, i32 0, i32 4
  %78 = load i32, i32* %avail_out80, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %76, %cond.true ], [ %78, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %79 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out81 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %79, i32 0, i32 3
  %80 = load i8*, i8** %next_out81, align 8
  %81 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %81, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32768 x i8], [32768 x i8]* %m_dict, i32 0, i32 0
  %82 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_ofs = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %82, i32 0, i32 1
  %83 = load i32, i32* %m_dict_ofs, align 8
  %idx.ext82 = zext i32 %83 to i64
  %add.ptr83 = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext82
  %84 = load i32, i32* %n, align 4
  %conv84 = zext i32 %84 to i64
  %85 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out85 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %85, i32 0, i32 3
  %86 = load i8*, i8** %next_out85, align 8
  %87 = call i64 @llvm.objectsize.i64.p0i8(i8* %86, i1 false)
  %call86 = call i8* @__memcpy_chk(i8* %80, i8* %add.ptr83, i64 %conv84, i64 %87) #10
  %88 = load i32, i32* %n, align 4
  %89 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out87 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %89, i32 0, i32 3
  %90 = load i8*, i8** %next_out87, align 8
  %idx.ext88 = zext i32 %88 to i64
  %add.ptr89 = getelementptr inbounds i8, i8* %90, i64 %idx.ext88
  store i8* %add.ptr89, i8** %next_out87, align 8
  %91 = load i32, i32* %n, align 4
  %92 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out90 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %92, i32 0, i32 4
  %93 = load i32, i32* %avail_out90, align 8
  %sub91 = sub i32 %93, %91
  store i32 %sub91, i32* %avail_out90, align 8
  %94 = load i32, i32* %n, align 4
  %conv92 = zext i32 %94 to i64
  %95 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out93 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %95, i32 0, i32 5
  %96 = load i64, i64* %total_out93, align 8
  %add94 = add i64 %96, %conv92
  store i64 %add94, i64* %total_out93, align 8
  %97 = load i32, i32* %n, align 4
  %98 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail95 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %98, i32 0, i32 2
  %99 = load i32, i32* %m_dict_avail95, align 4
  %sub96 = sub i32 %99, %97
  store i32 %sub96, i32* %m_dict_avail95, align 4
  %100 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_ofs97 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %100, i32 0, i32 1
  %101 = load i32, i32* %m_dict_ofs97, align 8
  %102 = load i32, i32* %n, align 4
  %add98 = add i32 %101, %102
  %and = and i32 %add98, 32767
  %103 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_ofs99 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %103, i32 0, i32 1
  store i32 %and, i32* %m_dict_ofs99, align 8
  %104 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_last_status100 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %104, i32 0, i32 7
  %105 = load i32, i32* %m_last_status100, align 4
  %cmp101 = icmp eq i32 %105, 0
  br i1 %cmp101, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end
  %106 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail103 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %106, i32 0, i32 2
  %107 = load i32, i32* %m_dict_avail103, align 4
  %tobool104 = icmp ne i32 %107, 0
  %lnot = xor i1 %tobool104, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %108 = phi i1 [ false, %cond.end ], [ %lnot, %land.rhs ]
  %cond105 = select i1 %108, i32 1, i32 0
  store i32 %cond105, i32* %retval, align 4
  br label %return

if.end106:                                        ; preds = %if.end72
  br label %for.cond

for.cond:                                         ; preds = %if.end214, %if.end106
  %109 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in107 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %109, i32 0, i32 1
  %110 = load i32, i32* %avail_in107, align 8
  %conv108 = zext i32 %110 to i64
  store i64 %conv108, i64* %in_bytes, align 8
  %111 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_ofs109 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %111, i32 0, i32 1
  %112 = load i32, i32* %m_dict_ofs109, align 8
  %sub110 = sub i32 32768, %112
  %conv111 = zext i32 %sub110 to i64
  store i64 %conv111, i64* %out_bytes, align 8
  %113 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_decomp112 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %113, i32 0, i32 0
  %114 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_in113 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %114, i32 0, i32 0
  %115 = load i8*, i8** %next_in113, align 8
  %116 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict114 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %116, i32 0, i32 6
  %arraydecay115 = getelementptr inbounds [32768 x i8], [32768 x i8]* %m_dict114, i32 0, i32 0
  %117 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict116 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %117, i32 0, i32 6
  %arraydecay117 = getelementptr inbounds [32768 x i8], [32768 x i8]* %m_dict116, i32 0, i32 0
  %118 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_ofs118 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %118, i32 0, i32 1
  %119 = load i32, i32* %m_dict_ofs118, align 8
  %idx.ext119 = zext i32 %119 to i64
  %add.ptr120 = getelementptr inbounds i8, i8* %arraydecay117, i64 %idx.ext119
  %120 = load i32, i32* %decomp_flags, align 4
  %call121 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %m_decomp112, i8* %115, i64* %in_bytes, i8* %arraydecay115, i8* %add.ptr120, i64* %out_bytes, i32 %120)
  store i32 %call121, i32* %status, align 4
  %121 = load i32, i32* %status, align 4
  %122 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_last_status122 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %122, i32 0, i32 7
  store i32 %121, i32* %m_last_status122, align 4
  %123 = load i64, i64* %in_bytes, align 8
  %conv123 = trunc i64 %123 to i32
  %124 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_in124 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %124, i32 0, i32 0
  %125 = load i8*, i8** %next_in124, align 8
  %idx.ext125 = zext i32 %conv123 to i64
  %add.ptr126 = getelementptr inbounds i8, i8* %125, i64 %idx.ext125
  store i8* %add.ptr126, i8** %next_in124, align 8
  %126 = load i64, i64* %in_bytes, align 8
  %conv127 = trunc i64 %126 to i32
  %127 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in128 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %127, i32 0, i32 1
  %128 = load i32, i32* %avail_in128, align 8
  %sub129 = sub i32 %128, %conv127
  store i32 %sub129, i32* %avail_in128, align 8
  %129 = load i64, i64* %in_bytes, align 8
  %conv130 = trunc i64 %129 to i32
  %conv131 = zext i32 %conv130 to i64
  %130 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_in132 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %130, i32 0, i32 2
  %131 = load i64, i64* %total_in132, align 8
  %add133 = add i64 %131, %conv131
  store i64 %add133, i64* %total_in132, align 8
  %132 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_decomp134 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %132, i32 0, i32 0
  %m_check_adler32135 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %m_decomp134, i32 0, i32 7
  %133 = load i32, i32* %m_check_adler32135, align 4
  %conv136 = zext i32 %133 to i64
  %134 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %adler137 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %134, i32 0, i32 12
  store i64 %conv136, i64* %adler137, align 8
  %135 = load i64, i64* %out_bytes, align 8
  %conv138 = trunc i64 %135 to i32
  %136 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail139 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %136, i32 0, i32 2
  store i32 %conv138, i32* %m_dict_avail139, align 4
  %137 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail140 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %137, i32 0, i32 2
  %138 = load i32, i32* %m_dict_avail140, align 4
  %139 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out141 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %139, i32 0, i32 4
  %140 = load i32, i32* %avail_out141, align 8
  %cmp142 = icmp ult i32 %138, %140
  br i1 %cmp142, label %cond.true144, label %cond.false146

cond.true144:                                     ; preds = %for.cond
  %141 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail145 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %141, i32 0, i32 2
  %142 = load i32, i32* %m_dict_avail145, align 4
  br label %cond.end148

cond.false146:                                    ; preds = %for.cond
  %143 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out147 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %143, i32 0, i32 4
  %144 = load i32, i32* %avail_out147, align 8
  br label %cond.end148

cond.end148:                                      ; preds = %cond.false146, %cond.true144
  %cond149 = phi i32 [ %142, %cond.true144 ], [ %144, %cond.false146 ]
  store i32 %cond149, i32* %n, align 4
  %145 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out150 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %145, i32 0, i32 3
  %146 = load i8*, i8** %next_out150, align 8
  %147 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict151 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %147, i32 0, i32 6
  %arraydecay152 = getelementptr inbounds [32768 x i8], [32768 x i8]* %m_dict151, i32 0, i32 0
  %148 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_ofs153 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %148, i32 0, i32 1
  %149 = load i32, i32* %m_dict_ofs153, align 8
  %idx.ext154 = zext i32 %149 to i64
  %add.ptr155 = getelementptr inbounds i8, i8* %arraydecay152, i64 %idx.ext154
  %150 = load i32, i32* %n, align 4
  %conv156 = zext i32 %150 to i64
  %151 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out157 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %151, i32 0, i32 3
  %152 = load i8*, i8** %next_out157, align 8
  %153 = call i64 @llvm.objectsize.i64.p0i8(i8* %152, i1 false)
  %call158 = call i8* @__memcpy_chk(i8* %146, i8* %add.ptr155, i64 %conv156, i64 %153) #10
  %154 = load i32, i32* %n, align 4
  %155 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %next_out159 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %155, i32 0, i32 3
  %156 = load i8*, i8** %next_out159, align 8
  %idx.ext160 = zext i32 %154 to i64
  %add.ptr161 = getelementptr inbounds i8, i8* %156, i64 %idx.ext160
  store i8* %add.ptr161, i8** %next_out159, align 8
  %157 = load i32, i32* %n, align 4
  %158 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out162 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %158, i32 0, i32 4
  %159 = load i32, i32* %avail_out162, align 8
  %sub163 = sub i32 %159, %157
  store i32 %sub163, i32* %avail_out162, align 8
  %160 = load i32, i32* %n, align 4
  %conv164 = zext i32 %160 to i64
  %161 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %total_out165 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %161, i32 0, i32 5
  %162 = load i64, i64* %total_out165, align 8
  %add166 = add i64 %162, %conv164
  store i64 %add166, i64* %total_out165, align 8
  %163 = load i32, i32* %n, align 4
  %164 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail167 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %164, i32 0, i32 2
  %165 = load i32, i32* %m_dict_avail167, align 4
  %sub168 = sub i32 %165, %163
  store i32 %sub168, i32* %m_dict_avail167, align 4
  %166 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_ofs169 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %166, i32 0, i32 1
  %167 = load i32, i32* %m_dict_ofs169, align 8
  %168 = load i32, i32* %n, align 4
  %add170 = add i32 %167, %168
  %and171 = and i32 %add170, 32767
  %169 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_ofs172 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %169, i32 0, i32 1
  store i32 %and171, i32* %m_dict_ofs172, align 8
  %170 = load i32, i32* %status, align 4
  %cmp173 = icmp slt i32 %170, 0
  br i1 %cmp173, label %if.then175, label %if.else176

if.then175:                                       ; preds = %cond.end148
  store i32 -3, i32* %retval, align 4
  br label %return

if.else176:                                       ; preds = %cond.end148
  %171 = load i32, i32* %status, align 4
  %cmp177 = icmp eq i32 %171, 1
  br i1 %cmp177, label %land.lhs.true179, label %if.else182

land.lhs.true179:                                 ; preds = %if.else176
  %172 = load i64, i64* %orig_avail_in, align 8
  %tobool180 = icmp ne i64 %172, 0
  br i1 %tobool180, label %if.else182, label %if.then181

if.then181:                                       ; preds = %land.lhs.true179
  store i32 -5, i32* %retval, align 4
  br label %return

if.else182:                                       ; preds = %land.lhs.true179, %if.else176
  %173 = load i32, i32* %flush.addr, align 4
  %cmp183 = icmp eq i32 %173, 4
  br i1 %cmp183, label %if.then185, label %if.else198

if.then185:                                       ; preds = %if.else182
  %174 = load i32, i32* %status, align 4
  %cmp186 = icmp eq i32 %174, 0
  br i1 %cmp186, label %if.then188, label %if.else192

if.then188:                                       ; preds = %if.then185
  %175 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail189 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %175, i32 0, i32 2
  %176 = load i32, i32* %m_dict_avail189, align 4
  %tobool190 = icmp ne i32 %176, 0
  %cond191 = select i1 %tobool190, i32 -5, i32 1
  store i32 %cond191, i32* %retval, align 4
  br label %return

if.else192:                                       ; preds = %if.then185
  %177 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out193 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %177, i32 0, i32 4
  %178 = load i32, i32* %avail_out193, align 8
  %tobool194 = icmp ne i32 %178, 0
  br i1 %tobool194, label %if.end196, label %if.then195

if.then195:                                       ; preds = %if.else192
  store i32 -5, i32* %retval, align 4
  br label %return

if.end196:                                        ; preds = %if.else192
  br label %if.end197

if.end197:                                        ; preds = %if.end196
  br label %if.end212

if.else198:                                       ; preds = %if.else182
  %179 = load i32, i32* %status, align 4
  %cmp199 = icmp eq i32 %179, 0
  br i1 %cmp199, label %if.then210, label %lor.lhs.false201

lor.lhs.false201:                                 ; preds = %if.else198
  %180 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_in202 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %180, i32 0, i32 1
  %181 = load i32, i32* %avail_in202, align 8
  %tobool203 = icmp ne i32 %181, 0
  br i1 %tobool203, label %lor.lhs.false204, label %if.then210

lor.lhs.false204:                                 ; preds = %lor.lhs.false201
  %182 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %avail_out205 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %182, i32 0, i32 4
  %183 = load i32, i32* %avail_out205, align 8
  %tobool206 = icmp ne i32 %183, 0
  br i1 %tobool206, label %lor.lhs.false207, label %if.then210

lor.lhs.false207:                                 ; preds = %lor.lhs.false204
  %184 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail208 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %184, i32 0, i32 2
  %185 = load i32, i32* %m_dict_avail208, align 4
  %tobool209 = icmp ne i32 %185, 0
  br i1 %tobool209, label %if.then210, label %if.end211

if.then210:                                       ; preds = %lor.lhs.false207, %lor.lhs.false204, %lor.lhs.false201, %if.else198
  br label %for.end

if.end211:                                        ; preds = %lor.lhs.false207
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.end197
  br label %if.end213

if.end213:                                        ; preds = %if.end212
  br label %if.end214

if.end214:                                        ; preds = %if.end213
  br label %for.cond

for.end:                                          ; preds = %if.then210
  %186 = load i32, i32* %status, align 4
  %cmp215 = icmp eq i32 %186, 0
  br i1 %cmp215, label %land.rhs217, label %land.end221

land.rhs217:                                      ; preds = %for.end
  %187 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8
  %m_dict_avail218 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %187, i32 0, i32 2
  %188 = load i32, i32* %m_dict_avail218, align 4
  %tobool219 = icmp ne i32 %188, 0
  %lnot220 = xor i1 %tobool219, true
  br label %land.end221

land.end221:                                      ; preds = %land.rhs217, %for.end
  %189 = phi i1 [ false, %for.end ], [ %lnot220, %land.rhs217 ]
  %cond222 = select i1 %189, i32 1, i32 0
  store i32 %cond222, i32* %retval, align 4
  br label %return

return:                                           ; preds = %land.end221, %if.then195, %if.then188, %if.then181, %if.then175, %land.end, %if.end66, %if.then63, %if.then60, %if.then23, %if.then17, %if.then8, %if.then
  %190 = load i32, i32* %retval, align 4
  ret i32 %190
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %r, i8* %pIn_buf_next, i64* %pIn_buf_size, i8* %pOut_buf_start, i8* %pOut_buf_next, i64* %pOut_buf_size, i32 %decomp_flags) #0 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.tinfl_decompressor_tag*, align 8
  %pIn_buf_next.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pOut_buf_start.addr = alloca i8*, align 8
  %pOut_buf_next.addr = alloca i8*, align 8
  %pOut_buf_size.addr = alloca i64*, align 8
  %decomp_flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %num_bits = alloca i32, align 4
  %dist = alloca i32, align 4
  %counter = alloca i32, align 4
  %num_extra = alloca i32, align 4
  %bit_buf = alloca i64, align 8
  %pIn_buf_cur = alloca i8*, align 8
  %pIn_buf_end = alloca i8*, align 8
  %pOut_buf_cur = alloca i8*, align 8
  %pOut_buf_end = alloca i8*, align 8
  %out_buf_size_mask = alloca i64, align 8
  %dist_from_out_buf_start = alloca i64, align 8
  %c = alloca i32, align 4
  %c124 = alloca i32, align 4
  %c171 = alloca i32, align 4
  %c265 = alloca i32, align 4
  %n = alloca i64, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  %c465 = alloca i32, align 4
  %s = alloca i32, align 4
  %c546 = alloca i32, align 4
  %tree_next = alloca i32, align 4
  %tree_cur = alloca i32, align 4
  %pTable = alloca %struct.tinfl_huff_table*, align 8
  %i600 = alloca i32, align 4
  %j = alloca i32, align 4
  %used_syms = alloca i32, align 4
  %total = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %next_code = alloca [17 x i32], align 16
  %total_syms = alloca [16 x i32], align 16
  %rev_code = alloca i32, align 4
  %l = alloca i32, align 4
  %cur_code = alloca i32, align 4
  %code_size = alloca i32, align 4
  %k = alloca i16, align 2
  %s779 = alloca i32, align 4
  %temp = alloca i32, align 4
  %code_len = alloca i32, align 4
  %c781 = alloca i32, align 4
  %c949 = alloca i32, align 4
  %pSrc = alloca i8*, align 8
  %temp1085 = alloca i32, align 4
  %code_len1086 = alloca i32, align 4
  %c1087 = alloca i32, align 4
  %sym2 = alloca i32, align 4
  %code_len1241 = alloca i32, align 4
  %extra_bits = alloca i32, align 4
  %c1350 = alloca i32, align 4
  %temp1392 = alloca i32, align 4
  %code_len1393 = alloca i32, align 4
  %c1394 = alloca i32, align 4
  %extra_bits1537 = alloca i32, align 4
  %c1543 = alloca i32, align 4
  %pSrc_end = alloca i8*, align 8
  %c1720 = alloca i32, align 4
  %s1787 = alloca i32, align 4
  %c1795 = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %buf_len = alloca i64, align 8
  %i1907 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %block_len = alloca i64, align 8
  store %struct.tinfl_decompressor_tag* %r, %struct.tinfl_decompressor_tag** %r.addr, align 8
  store i8* %pIn_buf_next, i8** %pIn_buf_next.addr, align 8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8
  store i8* %pOut_buf_start, i8** %pOut_buf_start.addr, align 8
  store i8* %pOut_buf_next, i8** %pOut_buf_next.addr, align 8
  store i64* %pOut_buf_size, i64** %pOut_buf_size.addr, align 8
  store i32 %decomp_flags, i32* %decomp_flags.addr, align 4
  store i32 -1, i32* %status, align 4
  %0 = load i8*, i8** %pIn_buf_next.addr, align 8
  store i8* %0, i8** %pIn_buf_cur, align 8
  %1 = load i8*, i8** %pIn_buf_next.addr, align 8
  %2 = load i64*, i64** %pIn_buf_size.addr, align 8
  %3 = load i64, i64* %2, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %add.ptr, i8** %pIn_buf_end, align 8
  %4 = load i8*, i8** %pOut_buf_next.addr, align 8
  store i8* %4, i8** %pOut_buf_cur, align 8
  %5 = load i8*, i8** %pOut_buf_next.addr, align 8
  %6 = load i64*, i64** %pOut_buf_size.addr, align 8
  %7 = load i64, i64* %6, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 %7
  store i8* %add.ptr1, i8** %pOut_buf_end, align 8
  %8 = load i32, i32* %decomp_flags.addr, align 4
  %and = and i32 %8, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load i8*, i8** %pOut_buf_next.addr, align 8
  %10 = load i8*, i8** %pOut_buf_start.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %11 = load i64*, i64** %pOut_buf_size.addr, align 8
  %12 = load i64, i64* %11, align 8
  %add = add i64 %sub.ptr.sub, %12
  %sub = sub i64 %add, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %sub, %cond.false ]
  store i64 %cond, i64* %out_buf_size_mask, align 8
  %13 = load i64, i64* %out_buf_size_mask, align 8
  %add2 = add i64 %13, 1
  %14 = load i64, i64* %out_buf_size_mask, align 8
  %and3 = and i64 %add2, %14
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %15 = load i8*, i8** %pOut_buf_next.addr, align 8
  %16 = load i8*, i8** %pOut_buf_start.addr, align 8
  %cmp = icmp ult i8* %15, %16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %17 = load i64*, i64** %pOut_buf_size.addr, align 8
  store i64 0, i64* %17, align 8
  %18 = load i64*, i64** %pIn_buf_size.addr, align 8
  store i64 0, i64* %18, align 8
  store i32 -3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %19 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_num_bits = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %19, i32 0, i32 1
  %20 = load i32, i32* %m_num_bits, align 4
  store i32 %20, i32* %num_bits, align 4
  %21 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_bit_buf = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %21, i32 0, i32 12
  %22 = load i64, i64* %m_bit_buf, align 8
  store i64 %22, i64* %bit_buf, align 8
  %23 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_dist = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %23, i32 0, i32 8
  %24 = load i32, i32* %m_dist, align 8
  store i32 %24, i32* %dist, align 4
  %25 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_counter = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %25, i32 0, i32 9
  %26 = load i32, i32* %m_counter, align 4
  store i32 %26, i32* %counter, align 4
  %27 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_num_extra = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %27, i32 0, i32 10
  %28 = load i32, i32* %m_num_extra, align 8
  store i32 %28, i32* %num_extra, align 4
  %29 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_dist_from_out_buf_start = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %29, i32 0, i32 13
  %30 = load i64, i64* %m_dist_from_out_buf_start, align 8
  store i64 %30, i64* %dist_from_out_buf_start, align 8
  %31 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %31, i32 0, i32 0
  %32 = load i32, i32* %m_state, align 8
  switch i32 %32, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb14
    i32 2, label %sw.bb27
    i32 36, label %sw.bb71
    i32 3, label %sw.bb92
    i32 5, label %sw.bb135
    i32 6, label %sw.bb182
    i32 7, label %sw.bb216
    i32 39, label %sw.bb250
    i32 51, label %sw.bb276
    i32 52, label %sw.bb306
    i32 9, label %sw.bb322
    i32 38, label %sw.bb335
    i32 10, label %sw.bb397
    i32 11, label %sw.bb476
    i32 14, label %sw.bb557
    i32 35, label %sw.bb654
    i32 16, label %sw.bb849
    i32 17, label %sw.bb934
    i32 18, label %sw.bb960
    i32 21, label %sw.bb1027
    i32 23, label %sw.bb1156
    i32 24, label %sw.bb1234
    i32 25, label %sw.bb1361
    i32 26, label %sw.bb1463
    i32 27, label %sw.bb1554
    i32 37, label %sw.bb1598
    i32 53, label %sw.bb1629
    i32 32, label %sw.bb1731
    i32 41, label %sw.bb1806
    i32 42, label %sw.bb1841
    i32 34, label %sw.bb1862
  ]

sw.bb:                                            ; preds = %if.end
  %33 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr1 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %33, i32 0, i32 3
  store i32 0, i32* %m_zhdr1, align 4
  %34 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr0 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %34, i32 0, i32 2
  store i32 0, i32* %m_zhdr0, align 8
  store i32 0, i32* %num_extra, align 4
  store i32 0, i32* %counter, align 4
  store i32 0, i32* %dist, align 4
  store i32 0, i32* %num_bits, align 4
  store i64 0, i64* %bit_buf, align 8
  %35 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %35, i32 0, i32 7
  store i32 1, i32* %m_check_adler32, align 4
  %36 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_z_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %36, i32 0, i32 4
  store i32 1, i32* %m_z_adler32, align 8
  %37 = load i32, i32* %decomp_flags.addr, align 4
  %and5 = and i32 %37, 1
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.end75

if.then7:                                         ; preds = %sw.bb
  br label %do.body

do.body:                                          ; preds = %if.then7
  br label %while.cond

while.cond:                                       ; preds = %do.end, %do.body
  %38 = load i8*, i8** %pIn_buf_cur, align 8
  %39 = load i8*, i8** %pIn_buf_end, align 8
  %cmp8 = icmp uge i8* %38, %39
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body9

do.body9:                                         ; preds = %while.body
  %40 = load i32, i32* %decomp_flags.addr, align 4
  %and10 = and i32 %40, 2
  %tobool11 = icmp ne i32 %and10, 0
  %cond12 = select i1 %tobool11, i32 1, i32 -4
  store i32 %cond12, i32* %status, align 4
  %41 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state13 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %41, i32 0, i32 0
  store i32 1, i32* %m_state13, align 8
  br label %common_exit

sw.bb14:                                          ; preds = %if.end
  br label %do.end

do.end:                                           ; preds = %sw.bb14
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr, i8** %pIn_buf_cur, align 8
  %43 = load i8, i8* %42, align 1
  %conv = zext i8 %43 to i32
  %44 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr015 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %44, i32 0, i32 2
  store i32 %conv, i32* %m_zhdr015, align 8
  br label %do.end16

do.end16:                                         ; preds = %while.end
  br label %do.body17

do.body17:                                        ; preds = %do.end16
  br label %while.cond18

while.cond18:                                     ; preds = %do.end28, %do.body17
  %45 = load i8*, i8** %pIn_buf_cur, align 8
  %46 = load i8*, i8** %pIn_buf_end, align 8
  %cmp19 = icmp uge i8* %45, %46
  br i1 %cmp19, label %while.body21, label %while.end29

while.body21:                                     ; preds = %while.cond18
  br label %do.body22

do.body22:                                        ; preds = %while.body21
  %47 = load i32, i32* %decomp_flags.addr, align 4
  %and23 = and i32 %47, 2
  %tobool24 = icmp ne i32 %and23, 0
  %cond25 = select i1 %tobool24, i32 1, i32 -4
  store i32 %cond25, i32* %status, align 4
  %48 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state26 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %48, i32 0, i32 0
  store i32 2, i32* %m_state26, align 8
  br label %common_exit

sw.bb27:                                          ; preds = %if.end
  br label %do.end28

do.end28:                                         ; preds = %sw.bb27
  br label %while.cond18

while.end29:                                      ; preds = %while.cond18
  %49 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr30 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr30, i8** %pIn_buf_cur, align 8
  %50 = load i8, i8* %49, align 1
  %conv31 = zext i8 %50 to i32
  %51 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr132 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %51, i32 0, i32 3
  store i32 %conv31, i32* %m_zhdr132, align 4
  br label %do.end33

do.end33:                                         ; preds = %while.end29
  %52 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr034 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %52, i32 0, i32 2
  %53 = load i32, i32* %m_zhdr034, align 8
  %mul = mul i32 %53, 256
  %54 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr135 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %54, i32 0, i32 3
  %55 = load i32, i32* %m_zhdr135, align 4
  %add36 = add i32 %mul, %55
  %rem = urem i32 %add36, 31
  %cmp37 = icmp ne i32 %rem, 0
  br i1 %cmp37, label %lor.end, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %do.end33
  %56 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr140 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %56, i32 0, i32 3
  %57 = load i32, i32* %m_zhdr140, align 4
  %and41 = and i32 %57, 32
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false39
  %58 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr043 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %58, i32 0, i32 2
  %59 = load i32, i32* %m_zhdr043, align 8
  %and44 = and i32 %59, 15
  %cmp45 = icmp ne i32 %and44, 8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false39, %do.end33
  %60 = phi i1 [ true, %lor.lhs.false39 ], [ true, %do.end33 ], [ %cmp45, %lor.rhs ]
  %lor.ext = zext i1 %60 to i32
  store i32 %lor.ext, i32* %counter, align 4
  %61 = load i32, i32* %decomp_flags.addr, align 4
  %and47 = and i32 %61, 4
  %tobool48 = icmp ne i32 %and47, 0
  br i1 %tobool48, label %if.end65, label %if.then49

if.then49:                                        ; preds = %lor.end
  %62 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr050 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %62, i32 0, i32 2
  %63 = load i32, i32* %m_zhdr050, align 8
  %shr = lshr i32 %63, 4
  %add51 = add i32 8, %shr
  %shl = shl i32 1, %add51
  %cmp52 = icmp ugt i32 %shl, 32768
  br i1 %cmp52, label %lor.end63, label %lor.rhs54

lor.rhs54:                                        ; preds = %if.then49
  %64 = load i64, i64* %out_buf_size_mask, align 8
  %add55 = add i64 %64, 1
  %65 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_zhdr056 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %65, i32 0, i32 2
  %66 = load i32, i32* %m_zhdr056, align 8
  %shr57 = lshr i32 %66, 4
  %add58 = add i32 8, %shr57
  %shl59 = shl i32 1, %add58
  %conv60 = zext i32 %shl59 to i64
  %cmp61 = icmp ult i64 %add55, %conv60
  br label %lor.end63

lor.end63:                                        ; preds = %lor.rhs54, %if.then49
  %67 = phi i1 [ true, %if.then49 ], [ %cmp61, %lor.rhs54 ]
  %lor.ext64 = zext i1 %67 to i32
  %68 = load i32, i32* %counter, align 4
  %or = or i32 %68, %lor.ext64
  store i32 %or, i32* %counter, align 4
  br label %if.end65

if.end65:                                         ; preds = %lor.end63, %lor.end
  %69 = load i32, i32* %counter, align 4
  %tobool66 = icmp ne i32 %69, 0
  br i1 %tobool66, label %if.then67, label %if.end74

if.then67:                                        ; preds = %if.end65
  br label %do.body68

do.body68:                                        ; preds = %if.then67
  br label %for.cond

for.cond:                                         ; preds = %do.end72, %do.body68
  br label %do.body69

do.body69:                                        ; preds = %for.cond
  store i32 -1, i32* %status, align 4
  %70 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state70 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %70, i32 0, i32 0
  store i32 36, i32* %m_state70, align 8
  br label %common_exit

sw.bb71:                                          ; preds = %if.end
  br label %do.end72

do.end72:                                         ; preds = %sw.bb71
  br label %for.cond

do.end73:                                         ; No predecessors!
  br label %if.end74

if.end74:                                         ; preds = %do.end73, %if.end65
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %sw.bb
  br label %do.body76

do.body76:                                        ; preds = %do.cond1709, %if.end75
  br label %do.body77

do.body77:                                        ; preds = %do.body76
  %71 = load i32, i32* %num_bits, align 4
  %cmp78 = icmp ult i32 %71, 3
  br i1 %cmp78, label %if.then80, label %if.end105

if.then80:                                        ; preds = %do.body77
  br label %do.body81

do.body81:                                        ; preds = %do.cond, %if.then80
  br label %do.body82

do.body82:                                        ; preds = %do.body81
  br label %while.cond83

while.cond83:                                     ; preds = %do.end93, %do.body82
  %72 = load i8*, i8** %pIn_buf_cur, align 8
  %73 = load i8*, i8** %pIn_buf_end, align 8
  %cmp84 = icmp uge i8* %72, %73
  br i1 %cmp84, label %while.body86, label %while.end94

while.body86:                                     ; preds = %while.cond83
  br label %do.body87

do.body87:                                        ; preds = %while.body86
  %74 = load i32, i32* %decomp_flags.addr, align 4
  %and88 = and i32 %74, 2
  %tobool89 = icmp ne i32 %and88, 0
  %cond90 = select i1 %tobool89, i32 1, i32 -4
  store i32 %cond90, i32* %status, align 4
  %75 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state91 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %75, i32 0, i32 0
  store i32 3, i32* %m_state91, align 8
  br label %common_exit

sw.bb92:                                          ; preds = %if.end
  br label %do.end93

do.end93:                                         ; preds = %sw.bb92
  br label %while.cond83

while.end94:                                      ; preds = %while.cond83
  %76 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr95 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %incdec.ptr95, i8** %pIn_buf_cur, align 8
  %77 = load i8, i8* %76, align 1
  %conv96 = zext i8 %77 to i32
  store i32 %conv96, i32* %c, align 4
  br label %do.end97

do.end97:                                         ; preds = %while.end94
  %78 = load i32, i32* %c, align 4
  %conv98 = zext i32 %78 to i64
  %79 = load i32, i32* %num_bits, align 4
  %sh_prom = zext i32 %79 to i64
  %shl99 = shl i64 %conv98, %sh_prom
  %80 = load i64, i64* %bit_buf, align 8
  %or100 = or i64 %80, %shl99
  store i64 %or100, i64* %bit_buf, align 8
  %81 = load i32, i32* %num_bits, align 4
  %add101 = add i32 %81, 8
  store i32 %add101, i32* %num_bits, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.end97
  %82 = load i32, i32* %num_bits, align 4
  %cmp102 = icmp ult i32 %82, 3
  br i1 %cmp102, label %do.body81, label %do.end104

do.end104:                                        ; preds = %do.cond
  br label %if.end105

if.end105:                                        ; preds = %do.end104, %do.body77
  %83 = load i64, i64* %bit_buf, align 8
  %and106 = and i64 %83, 7
  %conv107 = trunc i64 %and106 to i32
  %84 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_final = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %84, i32 0, i32 5
  store i32 %conv107, i32* %m_final, align 4
  %85 = load i64, i64* %bit_buf, align 8
  %shr108 = lshr i64 %85, 3
  store i64 %shr108, i64* %bit_buf, align 8
  %86 = load i32, i32* %num_bits, align 4
  %sub109 = sub i32 %86, 3
  store i32 %sub109, i32* %num_bits, align 4
  br label %do.end111

do.end111:                                        ; preds = %if.end105
  %87 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_final112 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %87, i32 0, i32 5
  %88 = load i32, i32* %m_final112, align 4
  %shr113 = lshr i32 %88, 1
  %89 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %89, i32 0, i32 6
  store i32 %shr113, i32* %m_type, align 8
  %90 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type114 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %90, i32 0, i32 6
  %91 = load i32, i32* %m_type114, align 8
  %cmp115 = icmp eq i32 %91, 0
  br i1 %cmp115, label %if.then117, label %if.else388

if.then117:                                       ; preds = %do.end111
  br label %do.body118

do.body118:                                       ; preds = %if.then117
  %92 = load i32, i32* %num_bits, align 4
  %93 = load i32, i32* %num_bits, align 4
  %and119 = and i32 %93, 7
  %cmp120 = icmp ult i32 %92, %and119
  br i1 %cmp120, label %if.then122, label %if.end153

if.then122:                                       ; preds = %do.body118
  br label %do.body123

do.body123:                                       ; preds = %do.cond148, %if.then122
  br label %do.body125

do.body125:                                       ; preds = %do.body123
  br label %while.cond126

while.cond126:                                    ; preds = %do.end137, %do.body125
  %94 = load i8*, i8** %pIn_buf_cur, align 8
  %95 = load i8*, i8** %pIn_buf_end, align 8
  %cmp127 = icmp uge i8* %94, %95
  br i1 %cmp127, label %while.body129, label %while.end138

while.body129:                                    ; preds = %while.cond126
  br label %do.body130

do.body130:                                       ; preds = %while.body129
  %96 = load i32, i32* %decomp_flags.addr, align 4
  %and131 = and i32 %96, 2
  %tobool132 = icmp ne i32 %and131, 0
  %cond133 = select i1 %tobool132, i32 1, i32 -4
  store i32 %cond133, i32* %status, align 4
  %97 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state134 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %97, i32 0, i32 0
  store i32 5, i32* %m_state134, align 8
  br label %common_exit

sw.bb135:                                         ; preds = %if.end
  br label %do.end137

do.end137:                                        ; preds = %sw.bb135
  br label %while.cond126

while.end138:                                     ; preds = %while.cond126
  %98 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr139 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %incdec.ptr139, i8** %pIn_buf_cur, align 8
  %99 = load i8, i8* %98, align 1
  %conv140 = zext i8 %99 to i32
  store i32 %conv140, i32* %c124, align 4
  br label %do.end142

do.end142:                                        ; preds = %while.end138
  %100 = load i32, i32* %c124, align 4
  %conv143 = zext i32 %100 to i64
  %101 = load i32, i32* %num_bits, align 4
  %sh_prom144 = zext i32 %101 to i64
  %shl145 = shl i64 %conv143, %sh_prom144
  %102 = load i64, i64* %bit_buf, align 8
  %or146 = or i64 %102, %shl145
  store i64 %or146, i64* %bit_buf, align 8
  %103 = load i32, i32* %num_bits, align 4
  %add147 = add i32 %103, 8
  store i32 %add147, i32* %num_bits, align 4
  br label %do.cond148

do.cond148:                                       ; preds = %do.end142
  %104 = load i32, i32* %num_bits, align 4
  %105 = load i32, i32* %num_bits, align 4
  %and149 = and i32 %105, 7
  %cmp150 = icmp ult i32 %104, %and149
  br i1 %cmp150, label %do.body123, label %do.end152

do.end152:                                        ; preds = %do.cond148
  br label %if.end153

if.end153:                                        ; preds = %do.end152, %do.body118
  %106 = load i32, i32* %num_bits, align 4
  %and154 = and i32 %106, 7
  %107 = load i64, i64* %bit_buf, align 8
  %sh_prom155 = zext i32 %and154 to i64
  %shr156 = lshr i64 %107, %sh_prom155
  store i64 %shr156, i64* %bit_buf, align 8
  %108 = load i32, i32* %num_bits, align 4
  %and157 = and i32 %108, 7
  %109 = load i32, i32* %num_bits, align 4
  %sub158 = sub i32 %109, %and157
  store i32 %sub158, i32* %num_bits, align 4
  br label %do.end160

do.end160:                                        ; preds = %if.end153
  store i32 0, i32* %counter, align 4
  br label %for.cond161

for.cond161:                                      ; preds = %for.inc, %do.end160
  %110 = load i32, i32* %counter, align 4
  %cmp162 = icmp ult i32 %110, 4
  br i1 %cmp162, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond161
  %111 = load i32, i32* %num_bits, align 4
  %tobool164 = icmp ne i32 %111, 0
  br i1 %tobool164, label %if.then165, label %if.else

if.then165:                                       ; preds = %for.body
  br label %do.body166

do.body166:                                       ; preds = %if.then165
  %112 = load i32, i32* %num_bits, align 4
  %cmp167 = icmp ult i32 %112, 8
  br i1 %cmp167, label %if.then169, label %if.end199

if.then169:                                       ; preds = %do.body166
  br label %do.body170

do.body170:                                       ; preds = %do.cond195, %if.then169
  br label %do.body172

do.body172:                                       ; preds = %do.body170
  br label %while.cond173

while.cond173:                                    ; preds = %do.end184, %do.body172
  %113 = load i8*, i8** %pIn_buf_cur, align 8
  %114 = load i8*, i8** %pIn_buf_end, align 8
  %cmp174 = icmp uge i8* %113, %114
  br i1 %cmp174, label %while.body176, label %while.end185

while.body176:                                    ; preds = %while.cond173
  br label %do.body177

do.body177:                                       ; preds = %while.body176
  %115 = load i32, i32* %decomp_flags.addr, align 4
  %and178 = and i32 %115, 2
  %tobool179 = icmp ne i32 %and178, 0
  %cond180 = select i1 %tobool179, i32 1, i32 -4
  store i32 %cond180, i32* %status, align 4
  %116 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state181 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %116, i32 0, i32 0
  store i32 6, i32* %m_state181, align 8
  br label %common_exit

sw.bb182:                                         ; preds = %if.end
  br label %do.end184

do.end184:                                        ; preds = %sw.bb182
  br label %while.cond173

while.end185:                                     ; preds = %while.cond173
  %117 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr186 = getelementptr inbounds i8, i8* %117, i32 1
  store i8* %incdec.ptr186, i8** %pIn_buf_cur, align 8
  %118 = load i8, i8* %117, align 1
  %conv187 = zext i8 %118 to i32
  store i32 %conv187, i32* %c171, align 4
  br label %do.end189

do.end189:                                        ; preds = %while.end185
  %119 = load i32, i32* %c171, align 4
  %conv190 = zext i32 %119 to i64
  %120 = load i32, i32* %num_bits, align 4
  %sh_prom191 = zext i32 %120 to i64
  %shl192 = shl i64 %conv190, %sh_prom191
  %121 = load i64, i64* %bit_buf, align 8
  %or193 = or i64 %121, %shl192
  store i64 %or193, i64* %bit_buf, align 8
  %122 = load i32, i32* %num_bits, align 4
  %add194 = add i32 %122, 8
  store i32 %add194, i32* %num_bits, align 4
  br label %do.cond195

do.cond195:                                       ; preds = %do.end189
  %123 = load i32, i32* %num_bits, align 4
  %cmp196 = icmp ult i32 %123, 8
  br i1 %cmp196, label %do.body170, label %do.end198

do.end198:                                        ; preds = %do.cond195
  br label %if.end199

if.end199:                                        ; preds = %do.end198, %do.body166
  %124 = load i64, i64* %bit_buf, align 8
  %and200 = and i64 %124, 255
  %conv201 = trunc i64 %and200 to i8
  %125 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %125, i32 0, i32 15
  %126 = load i32, i32* %counter, align 4
  %idxprom = zext i32 %126 to i64
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header, i64 0, i64 %idxprom
  store i8 %conv201, i8* %arrayidx, align 1
  %127 = load i64, i64* %bit_buf, align 8
  %shr202 = lshr i64 %127, 8
  store i64 %shr202, i64* %bit_buf, align 8
  %128 = load i32, i32* %num_bits, align 4
  %sub203 = sub i32 %128, 8
  store i32 %sub203, i32* %num_bits, align 4
  br label %do.end205

do.end205:                                        ; preds = %if.end199
  br label %if.end226

if.else:                                          ; preds = %for.body
  br label %do.body206

do.body206:                                       ; preds = %if.else
  br label %while.cond207

while.cond207:                                    ; preds = %do.end218, %do.body206
  %129 = load i8*, i8** %pIn_buf_cur, align 8
  %130 = load i8*, i8** %pIn_buf_end, align 8
  %cmp208 = icmp uge i8* %129, %130
  br i1 %cmp208, label %while.body210, label %while.end219

while.body210:                                    ; preds = %while.cond207
  br label %do.body211

do.body211:                                       ; preds = %while.body210
  %131 = load i32, i32* %decomp_flags.addr, align 4
  %and212 = and i32 %131, 2
  %tobool213 = icmp ne i32 %and212, 0
  %cond214 = select i1 %tobool213, i32 1, i32 -4
  store i32 %cond214, i32* %status, align 4
  %132 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state215 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %132, i32 0, i32 0
  store i32 7, i32* %m_state215, align 8
  br label %common_exit

sw.bb216:                                         ; preds = %if.end
  br label %do.end218

do.end218:                                        ; preds = %sw.bb216
  br label %while.cond207

while.end219:                                     ; preds = %while.cond207
  %133 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr220 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %incdec.ptr220, i8** %pIn_buf_cur, align 8
  %134 = load i8, i8* %133, align 1
  %135 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header221 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %135, i32 0, i32 15
  %136 = load i32, i32* %counter, align 4
  %idxprom222 = zext i32 %136 to i64
  %arrayidx223 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header221, i64 0, i64 %idxprom222
  store i8 %134, i8* %arrayidx223, align 1
  br label %do.end225

do.end225:                                        ; preds = %while.end219
  br label %if.end226

if.end226:                                        ; preds = %do.end225, %do.end205
  br label %for.inc

for.inc:                                          ; preds = %if.end226
  %137 = load i32, i32* %counter, align 4
  %inc = add i32 %137, 1
  store i32 %inc, i32* %counter, align 4
  br label %for.cond161

for.end:                                          ; preds = %for.cond161
  %138 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header227 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %138, i32 0, i32 15
  %arrayidx228 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header227, i64 0, i64 0
  %139 = load i8, i8* %arrayidx228, align 8
  %conv229 = zext i8 %139 to i32
  %140 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header230 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %140, i32 0, i32 15
  %arrayidx231 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header230, i64 0, i64 1
  %141 = load i8, i8* %arrayidx231, align 1
  %conv232 = zext i8 %141 to i32
  %shl233 = shl i32 %conv232, 8
  %or234 = or i32 %conv229, %shl233
  store i32 %or234, i32* %counter, align 4
  %142 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header235 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %142, i32 0, i32 15
  %arrayidx236 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header235, i64 0, i64 2
  %143 = load i8, i8* %arrayidx236, align 2
  %conv237 = zext i8 %143 to i32
  %144 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_raw_header238 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %144, i32 0, i32 15
  %arrayidx239 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header238, i64 0, i64 3
  %145 = load i8, i8* %arrayidx239, align 1
  %conv240 = zext i8 %145 to i32
  %shl241 = shl i32 %conv240, 8
  %or242 = or i32 %conv237, %shl241
  %xor = xor i32 65535, %or242
  %cmp243 = icmp ne i32 %or234, %xor
  br i1 %cmp243, label %if.then245, label %if.end255

if.then245:                                       ; preds = %for.end
  br label %do.body246

do.body246:                                       ; preds = %if.then245
  br label %for.cond247

for.cond247:                                      ; preds = %do.end252, %do.body246
  br label %do.body248

do.body248:                                       ; preds = %for.cond247
  store i32 -1, i32* %status, align 4
  %146 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state249 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %146, i32 0, i32 0
  store i32 39, i32* %m_state249, align 8
  br label %common_exit

sw.bb250:                                         ; preds = %if.end
  br label %do.end252

do.end252:                                        ; preds = %sw.bb250
  br label %for.cond247

do.end254:                                        ; No predecessors!
  br label %if.end255

if.end255:                                        ; preds = %do.end254, %for.end
  br label %while.cond256

while.cond256:                                    ; preds = %while.end309, %if.end255
  %147 = load i32, i32* %counter, align 4
  %tobool257 = icmp ne i32 %147, 0
  br i1 %tobool257, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond256
  %148 = load i32, i32* %num_bits, align 4
  %tobool258 = icmp ne i32 %148, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond256
  %149 = phi i1 [ false, %while.cond256 ], [ %tobool258, %land.rhs ]
  br i1 %149, label %while.body259, label %while.end312

while.body259:                                    ; preds = %land.end
  br label %do.body260

do.body260:                                       ; preds = %while.body259
  %150 = load i32, i32* %num_bits, align 4
  %cmp261 = icmp ult i32 %150, 8
  br i1 %cmp261, label %if.then263, label %if.end293

if.then263:                                       ; preds = %do.body260
  br label %do.body264

do.body264:                                       ; preds = %do.cond289, %if.then263
  br label %do.body266

do.body266:                                       ; preds = %do.body264
  br label %while.cond267

while.cond267:                                    ; preds = %do.end278, %do.body266
  %151 = load i8*, i8** %pIn_buf_cur, align 8
  %152 = load i8*, i8** %pIn_buf_end, align 8
  %cmp268 = icmp uge i8* %151, %152
  br i1 %cmp268, label %while.body270, label %while.end279

while.body270:                                    ; preds = %while.cond267
  br label %do.body271

do.body271:                                       ; preds = %while.body270
  %153 = load i32, i32* %decomp_flags.addr, align 4
  %and272 = and i32 %153, 2
  %tobool273 = icmp ne i32 %and272, 0
  %cond274 = select i1 %tobool273, i32 1, i32 -4
  store i32 %cond274, i32* %status, align 4
  %154 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state275 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %154, i32 0, i32 0
  store i32 51, i32* %m_state275, align 8
  br label %common_exit

sw.bb276:                                         ; preds = %if.end
  br label %do.end278

do.end278:                                        ; preds = %sw.bb276
  br label %while.cond267

while.end279:                                     ; preds = %while.cond267
  %155 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr280 = getelementptr inbounds i8, i8* %155, i32 1
  store i8* %incdec.ptr280, i8** %pIn_buf_cur, align 8
  %156 = load i8, i8* %155, align 1
  %conv281 = zext i8 %156 to i32
  store i32 %conv281, i32* %c265, align 4
  br label %do.end283

do.end283:                                        ; preds = %while.end279
  %157 = load i32, i32* %c265, align 4
  %conv284 = zext i32 %157 to i64
  %158 = load i32, i32* %num_bits, align 4
  %sh_prom285 = zext i32 %158 to i64
  %shl286 = shl i64 %conv284, %sh_prom285
  %159 = load i64, i64* %bit_buf, align 8
  %or287 = or i64 %159, %shl286
  store i64 %or287, i64* %bit_buf, align 8
  %160 = load i32, i32* %num_bits, align 4
  %add288 = add i32 %160, 8
  store i32 %add288, i32* %num_bits, align 4
  br label %do.cond289

do.cond289:                                       ; preds = %do.end283
  %161 = load i32, i32* %num_bits, align 4
  %cmp290 = icmp ult i32 %161, 8
  br i1 %cmp290, label %do.body264, label %do.end292

do.end292:                                        ; preds = %do.cond289
  br label %if.end293

if.end293:                                        ; preds = %do.end292, %do.body260
  %162 = load i64, i64* %bit_buf, align 8
  %and294 = and i64 %162, 255
  %conv295 = trunc i64 %and294 to i32
  store i32 %conv295, i32* %dist, align 4
  %163 = load i64, i64* %bit_buf, align 8
  %shr296 = lshr i64 %163, 8
  store i64 %shr296, i64* %bit_buf, align 8
  %164 = load i32, i32* %num_bits, align 4
  %sub297 = sub i32 %164, 8
  store i32 %sub297, i32* %num_bits, align 4
  br label %do.end299

do.end299:                                        ; preds = %if.end293
  br label %while.cond300

while.cond300:                                    ; preds = %do.end308, %do.end299
  %165 = load i8*, i8** %pOut_buf_cur, align 8
  %166 = load i8*, i8** %pOut_buf_end, align 8
  %cmp301 = icmp uge i8* %165, %166
  br i1 %cmp301, label %while.body303, label %while.end309

while.body303:                                    ; preds = %while.cond300
  br label %do.body304

do.body304:                                       ; preds = %while.body303
  store i32 2, i32* %status, align 4
  %167 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state305 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %167, i32 0, i32 0
  store i32 52, i32* %m_state305, align 8
  br label %common_exit

sw.bb306:                                         ; preds = %if.end
  br label %do.end308

do.end308:                                        ; preds = %sw.bb306
  br label %while.cond300

while.end309:                                     ; preds = %while.cond300
  %168 = load i32, i32* %dist, align 4
  %conv310 = trunc i32 %168 to i8
  %169 = load i8*, i8** %pOut_buf_cur, align 8
  %incdec.ptr311 = getelementptr inbounds i8, i8* %169, i32 1
  store i8* %incdec.ptr311, i8** %pOut_buf_cur, align 8
  store i8 %conv310, i8* %169, align 1
  %170 = load i32, i32* %counter, align 4
  %dec = add i32 %170, -1
  store i32 %dec, i32* %counter, align 4
  br label %while.cond256

while.end312:                                     ; preds = %land.end
  br label %while.cond313

while.cond313:                                    ; preds = %cond.end381, %while.end312
  %171 = load i32, i32* %counter, align 4
  %tobool314 = icmp ne i32 %171, 0
  br i1 %tobool314, label %while.body315, label %while.end387

while.body315:                                    ; preds = %while.cond313
  br label %while.cond316

while.cond316:                                    ; preds = %do.end324, %while.body315
  %172 = load i8*, i8** %pOut_buf_cur, align 8
  %173 = load i8*, i8** %pOut_buf_end, align 8
  %cmp317 = icmp uge i8* %172, %173
  br i1 %cmp317, label %while.body319, label %while.end325

while.body319:                                    ; preds = %while.cond316
  br label %do.body320

do.body320:                                       ; preds = %while.body319
  store i32 2, i32* %status, align 4
  %174 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state321 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %174, i32 0, i32 0
  store i32 9, i32* %m_state321, align 8
  br label %common_exit

sw.bb322:                                         ; preds = %if.end
  br label %do.end324

do.end324:                                        ; preds = %sw.bb322
  br label %while.cond316

while.end325:                                     ; preds = %while.cond316
  br label %while.cond326

while.cond326:                                    ; preds = %do.end337, %while.end325
  %175 = load i8*, i8** %pIn_buf_cur, align 8
  %176 = load i8*, i8** %pIn_buf_end, align 8
  %cmp327 = icmp uge i8* %175, %176
  br i1 %cmp327, label %while.body329, label %while.end338

while.body329:                                    ; preds = %while.cond326
  br label %do.body330

do.body330:                                       ; preds = %while.body329
  %177 = load i32, i32* %decomp_flags.addr, align 4
  %and331 = and i32 %177, 2
  %tobool332 = icmp ne i32 %and331, 0
  %cond333 = select i1 %tobool332, i32 1, i32 -4
  store i32 %cond333, i32* %status, align 4
  %178 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state334 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %178, i32 0, i32 0
  store i32 38, i32* %m_state334, align 8
  br label %common_exit

sw.bb335:                                         ; preds = %if.end
  br label %do.end337

do.end337:                                        ; preds = %sw.bb335
  br label %while.cond326

while.end338:                                     ; preds = %while.cond326
  %179 = load i8*, i8** %pOut_buf_end, align 8
  %180 = load i8*, i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast339 = ptrtoint i8* %179 to i64
  %sub.ptr.rhs.cast340 = ptrtoint i8* %180 to i64
  %sub.ptr.sub341 = sub i64 %sub.ptr.lhs.cast339, %sub.ptr.rhs.cast340
  %181 = load i8*, i8** %pIn_buf_end, align 8
  %182 = load i8*, i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast342 = ptrtoint i8* %181 to i64
  %sub.ptr.rhs.cast343 = ptrtoint i8* %182 to i64
  %sub.ptr.sub344 = sub i64 %sub.ptr.lhs.cast342, %sub.ptr.rhs.cast343
  %cmp345 = icmp ult i64 %sub.ptr.sub341, %sub.ptr.sub344
  br i1 %cmp345, label %cond.true347, label %cond.false351

cond.true347:                                     ; preds = %while.end338
  %183 = load i8*, i8** %pOut_buf_end, align 8
  %184 = load i8*, i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast348 = ptrtoint i8* %183 to i64
  %sub.ptr.rhs.cast349 = ptrtoint i8* %184 to i64
  %sub.ptr.sub350 = sub i64 %sub.ptr.lhs.cast348, %sub.ptr.rhs.cast349
  br label %cond.end355

cond.false351:                                    ; preds = %while.end338
  %185 = load i8*, i8** %pIn_buf_end, align 8
  %186 = load i8*, i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast352 = ptrtoint i8* %185 to i64
  %sub.ptr.rhs.cast353 = ptrtoint i8* %186 to i64
  %sub.ptr.sub354 = sub i64 %sub.ptr.lhs.cast352, %sub.ptr.rhs.cast353
  br label %cond.end355

cond.end355:                                      ; preds = %cond.false351, %cond.true347
  %cond356 = phi i64 [ %sub.ptr.sub350, %cond.true347 ], [ %sub.ptr.sub354, %cond.false351 ]
  %187 = load i32, i32* %counter, align 4
  %conv357 = zext i32 %187 to i64
  %cmp358 = icmp ult i64 %cond356, %conv357
  br i1 %cmp358, label %cond.true360, label %cond.false379

cond.true360:                                     ; preds = %cond.end355
  %188 = load i8*, i8** %pOut_buf_end, align 8
  %189 = load i8*, i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast361 = ptrtoint i8* %188 to i64
  %sub.ptr.rhs.cast362 = ptrtoint i8* %189 to i64
  %sub.ptr.sub363 = sub i64 %sub.ptr.lhs.cast361, %sub.ptr.rhs.cast362
  %190 = load i8*, i8** %pIn_buf_end, align 8
  %191 = load i8*, i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast364 = ptrtoint i8* %190 to i64
  %sub.ptr.rhs.cast365 = ptrtoint i8* %191 to i64
  %sub.ptr.sub366 = sub i64 %sub.ptr.lhs.cast364, %sub.ptr.rhs.cast365
  %cmp367 = icmp ult i64 %sub.ptr.sub363, %sub.ptr.sub366
  br i1 %cmp367, label %cond.true369, label %cond.false373

cond.true369:                                     ; preds = %cond.true360
  %192 = load i8*, i8** %pOut_buf_end, align 8
  %193 = load i8*, i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast370 = ptrtoint i8* %192 to i64
  %sub.ptr.rhs.cast371 = ptrtoint i8* %193 to i64
  %sub.ptr.sub372 = sub i64 %sub.ptr.lhs.cast370, %sub.ptr.rhs.cast371
  br label %cond.end377

cond.false373:                                    ; preds = %cond.true360
  %194 = load i8*, i8** %pIn_buf_end, align 8
  %195 = load i8*, i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast374 = ptrtoint i8* %194 to i64
  %sub.ptr.rhs.cast375 = ptrtoint i8* %195 to i64
  %sub.ptr.sub376 = sub i64 %sub.ptr.lhs.cast374, %sub.ptr.rhs.cast375
  br label %cond.end377

cond.end377:                                      ; preds = %cond.false373, %cond.true369
  %cond378 = phi i64 [ %sub.ptr.sub372, %cond.true369 ], [ %sub.ptr.sub376, %cond.false373 ]
  br label %cond.end381

cond.false379:                                    ; preds = %cond.end355
  %196 = load i32, i32* %counter, align 4
  %conv380 = zext i32 %196 to i64
  br label %cond.end381

cond.end381:                                      ; preds = %cond.false379, %cond.end377
  %cond382 = phi i64 [ %cond378, %cond.end377 ], [ %conv380, %cond.false379 ]
  store i64 %cond382, i64* %n, align 8
  %197 = load i8*, i8** %pOut_buf_cur, align 8
  %198 = load i8*, i8** %pIn_buf_cur, align 8
  %199 = load i64, i64* %n, align 8
  %200 = load i8*, i8** %pOut_buf_cur, align 8
  %201 = call i64 @llvm.objectsize.i64.p0i8(i8* %200, i1 false)
  %call = call i8* @__memcpy_chk(i8* %197, i8* %198, i64 %199, i64 %201) #10
  %202 = load i64, i64* %n, align 8
  %203 = load i8*, i8** %pIn_buf_cur, align 8
  %add.ptr383 = getelementptr inbounds i8, i8* %203, i64 %202
  store i8* %add.ptr383, i8** %pIn_buf_cur, align 8
  %204 = load i64, i64* %n, align 8
  %205 = load i8*, i8** %pOut_buf_cur, align 8
  %add.ptr384 = getelementptr inbounds i8, i8* %205, i64 %204
  store i8* %add.ptr384, i8** %pOut_buf_cur, align 8
  %206 = load i64, i64* %n, align 8
  %conv385 = trunc i64 %206 to i32
  %207 = load i32, i32* %counter, align 4
  %sub386 = sub i32 %207, %conv385
  store i32 %sub386, i32* %counter, align 4
  br label %while.cond313

while.end387:                                     ; preds = %while.cond313
  br label %if.end1708

if.else388:                                       ; preds = %do.end111
  %208 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type389 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %208, i32 0, i32 6
  %209 = load i32, i32* %m_type389, align 8
  %cmp390 = icmp eq i32 %209, 3
  br i1 %cmp390, label %if.then392, label %if.else402

if.then392:                                       ; preds = %if.else388
  br label %do.body393

do.body393:                                       ; preds = %if.then392
  br label %for.cond394

for.cond394:                                      ; preds = %do.end399, %do.body393
  br label %do.body395

do.body395:                                       ; preds = %for.cond394
  store i32 -1, i32* %status, align 4
  %210 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state396 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %210, i32 0, i32 0
  store i32 10, i32* %m_state396, align 8
  br label %common_exit

sw.bb397:                                         ; preds = %if.end
  br label %do.end399

do.end399:                                        ; preds = %sw.bb397
  br label %for.cond394

do.end401:                                        ; No predecessors!
  br label %if.end1707

if.else402:                                       ; preds = %if.else388
  %211 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type403 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %211, i32 0, i32 6
  %212 = load i32, i32* %m_type403, align 8
  %cmp404 = icmp eq i32 %212, 1
  br i1 %cmp404, label %if.then406, label %if.else452

if.then406:                                       ; preds = %if.else402
  %213 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %213, i32 0, i32 14
  %arrayidx407 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables, i64 0, i64 0
  %m_code_size = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx407, i32 0, i32 0
  %arraydecay = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8
  %214 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %214, i32 0, i32 11
  %arrayidx408 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes, i64 0, i64 0
  store i32 288, i32* %arrayidx408, align 4
  %215 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes409 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %215, i32 0, i32 11
  %arrayidx410 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes409, i64 0, i64 1
  store i32 32, i32* %arrayidx410, align 4
  %216 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables411 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %216, i32 0, i32 14
  %arrayidx412 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables411, i64 0, i64 1
  %m_code_size413 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx412, i32 0, i32 0
  %arraydecay414 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size413, i32 0, i32 0
  %217 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables415 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %217, i32 0, i32 14
  %arrayidx416 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables415, i64 0, i64 1
  %m_code_size417 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx416, i32 0, i32 0
  %arraydecay418 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size417, i32 0, i32 0
  %218 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay418, i1 false)
  %call419 = call i8* @__memset_chk(i8* %arraydecay414, i32 5, i64 32, i64 %218) #10
  store i32 0, i32* %i, align 4
  br label %for.cond420

for.cond420:                                      ; preds = %for.inc425, %if.then406
  %219 = load i32, i32* %i, align 4
  %cmp421 = icmp ule i32 %219, 143
  br i1 %cmp421, label %for.body423, label %for.end427

for.body423:                                      ; preds = %for.cond420
  %220 = load i8*, i8** %p, align 8
  %incdec.ptr424 = getelementptr inbounds i8, i8* %220, i32 1
  store i8* %incdec.ptr424, i8** %p, align 8
  store i8 8, i8* %220, align 1
  br label %for.inc425

for.inc425:                                       ; preds = %for.body423
  %221 = load i32, i32* %i, align 4
  %inc426 = add i32 %221, 1
  store i32 %inc426, i32* %i, align 4
  br label %for.cond420

for.end427:                                       ; preds = %for.cond420
  br label %for.cond428

for.cond428:                                      ; preds = %for.inc433, %for.end427
  %222 = load i32, i32* %i, align 4
  %cmp429 = icmp ule i32 %222, 255
  br i1 %cmp429, label %for.body431, label %for.end435

for.body431:                                      ; preds = %for.cond428
  %223 = load i8*, i8** %p, align 8
  %incdec.ptr432 = getelementptr inbounds i8, i8* %223, i32 1
  store i8* %incdec.ptr432, i8** %p, align 8
  store i8 9, i8* %223, align 1
  br label %for.inc433

for.inc433:                                       ; preds = %for.body431
  %224 = load i32, i32* %i, align 4
  %inc434 = add i32 %224, 1
  store i32 %inc434, i32* %i, align 4
  br label %for.cond428

for.end435:                                       ; preds = %for.cond428
  br label %for.cond436

for.cond436:                                      ; preds = %for.inc441, %for.end435
  %225 = load i32, i32* %i, align 4
  %cmp437 = icmp ule i32 %225, 279
  br i1 %cmp437, label %for.body439, label %for.end443

for.body439:                                      ; preds = %for.cond436
  %226 = load i8*, i8** %p, align 8
  %incdec.ptr440 = getelementptr inbounds i8, i8* %226, i32 1
  store i8* %incdec.ptr440, i8** %p, align 8
  store i8 7, i8* %226, align 1
  br label %for.inc441

for.inc441:                                       ; preds = %for.body439
  %227 = load i32, i32* %i, align 4
  %inc442 = add i32 %227, 1
  store i32 %inc442, i32* %i, align 4
  br label %for.cond436

for.end443:                                       ; preds = %for.cond436
  br label %for.cond444

for.cond444:                                      ; preds = %for.inc449, %for.end443
  %228 = load i32, i32* %i, align 4
  %cmp445 = icmp ule i32 %228, 287
  br i1 %cmp445, label %for.body447, label %for.end451

for.body447:                                      ; preds = %for.cond444
  %229 = load i8*, i8** %p, align 8
  %incdec.ptr448 = getelementptr inbounds i8, i8* %229, i32 1
  store i8* %incdec.ptr448, i8** %p, align 8
  store i8 8, i8* %229, align 1
  br label %for.inc449

for.inc449:                                       ; preds = %for.body447
  %230 = load i32, i32* %i, align 4
  %inc450 = add i32 %230, 1
  store i32 %inc450, i32* %i, align 4
  br label %for.cond444

for.end451:                                       ; preds = %for.cond444
  br label %if.end594

if.else452:                                       ; preds = %if.else402
  store i32 0, i32* %counter, align 4
  br label %for.cond453

for.cond453:                                      ; preds = %for.inc525, %if.else452
  %231 = load i32, i32* %counter, align 4
  %cmp454 = icmp ult i32 %231, 3
  br i1 %cmp454, label %for.body456, label %for.end527

for.body456:                                      ; preds = %for.cond453
  br label %do.body457

do.body457:                                       ; preds = %for.body456
  %232 = load i32, i32* %num_bits, align 4
  %233 = load i32, i32* %counter, align 4
  %idxprom458 = zext i32 %233 to i64
  %arrayidx459 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom458
  %234 = load i8, i8* %arrayidx459, align 1
  %conv460 = sext i8 %234 to i32
  %cmp461 = icmp ult i32 %232, %conv460
  br i1 %cmp461, label %if.then463, label %if.end496

if.then463:                                       ; preds = %do.body457
  br label %do.body464

do.body464:                                       ; preds = %do.cond489, %if.then463
  br label %do.body466

do.body466:                                       ; preds = %do.body464
  br label %while.cond467

while.cond467:                                    ; preds = %do.end478, %do.body466
  %235 = load i8*, i8** %pIn_buf_cur, align 8
  %236 = load i8*, i8** %pIn_buf_end, align 8
  %cmp468 = icmp uge i8* %235, %236
  br i1 %cmp468, label %while.body470, label %while.end479

while.body470:                                    ; preds = %while.cond467
  br label %do.body471

do.body471:                                       ; preds = %while.body470
  %237 = load i32, i32* %decomp_flags.addr, align 4
  %and472 = and i32 %237, 2
  %tobool473 = icmp ne i32 %and472, 0
  %cond474 = select i1 %tobool473, i32 1, i32 -4
  store i32 %cond474, i32* %status, align 4
  %238 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state475 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %238, i32 0, i32 0
  store i32 11, i32* %m_state475, align 8
  br label %common_exit

sw.bb476:                                         ; preds = %if.end
  br label %do.end478

do.end478:                                        ; preds = %sw.bb476
  br label %while.cond467

while.end479:                                     ; preds = %while.cond467
  %239 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr480 = getelementptr inbounds i8, i8* %239, i32 1
  store i8* %incdec.ptr480, i8** %pIn_buf_cur, align 8
  %240 = load i8, i8* %239, align 1
  %conv481 = zext i8 %240 to i32
  store i32 %conv481, i32* %c465, align 4
  br label %do.end483

do.end483:                                        ; preds = %while.end479
  %241 = load i32, i32* %c465, align 4
  %conv484 = zext i32 %241 to i64
  %242 = load i32, i32* %num_bits, align 4
  %sh_prom485 = zext i32 %242 to i64
  %shl486 = shl i64 %conv484, %sh_prom485
  %243 = load i64, i64* %bit_buf, align 8
  %or487 = or i64 %243, %shl486
  store i64 %or487, i64* %bit_buf, align 8
  %244 = load i32, i32* %num_bits, align 4
  %add488 = add i32 %244, 8
  store i32 %add488, i32* %num_bits, align 4
  br label %do.cond489

do.cond489:                                       ; preds = %do.end483
  %245 = load i32, i32* %num_bits, align 4
  %246 = load i32, i32* %counter, align 4
  %idxprom490 = zext i32 %246 to i64
  %arrayidx491 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom490
  %247 = load i8, i8* %arrayidx491, align 1
  %conv492 = sext i8 %247 to i32
  %cmp493 = icmp ult i32 %245, %conv492
  br i1 %cmp493, label %do.body464, label %do.end495

do.end495:                                        ; preds = %do.cond489
  br label %if.end496

if.end496:                                        ; preds = %do.end495, %do.body457
  %248 = load i64, i64* %bit_buf, align 8
  %249 = load i32, i32* %counter, align 4
  %idxprom497 = zext i32 %249 to i64
  %arrayidx498 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom497
  %250 = load i8, i8* %arrayidx498, align 1
  %conv499 = sext i8 %250 to i32
  %shl500 = shl i32 1, %conv499
  %sub501 = sub nsw i32 %shl500, 1
  %conv502 = sext i32 %sub501 to i64
  %and503 = and i64 %248, %conv502
  %conv504 = trunc i64 %and503 to i32
  %251 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes505 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %251, i32 0, i32 11
  %252 = load i32, i32* %counter, align 4
  %idxprom506 = zext i32 %252 to i64
  %arrayidx507 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes505, i64 0, i64 %idxprom506
  store i32 %conv504, i32* %arrayidx507, align 4
  %253 = load i32, i32* %counter, align 4
  %idxprom508 = zext i32 %253 to i64
  %arrayidx509 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom508
  %254 = load i8, i8* %arrayidx509, align 1
  %conv510 = sext i8 %254 to i32
  %255 = load i64, i64* %bit_buf, align 8
  %sh_prom511 = zext i32 %conv510 to i64
  %shr512 = lshr i64 %255, %sh_prom511
  store i64 %shr512, i64* %bit_buf, align 8
  %256 = load i32, i32* %counter, align 4
  %idxprom513 = zext i32 %256 to i64
  %arrayidx514 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom513
  %257 = load i8, i8* %arrayidx514, align 1
  %conv515 = sext i8 %257 to i32
  %258 = load i32, i32* %num_bits, align 4
  %sub516 = sub i32 %258, %conv515
  store i32 %sub516, i32* %num_bits, align 4
  br label %do.end518

do.end518:                                        ; preds = %if.end496
  %259 = load i32, i32* %counter, align 4
  %idxprom519 = zext i32 %259 to i64
  %arrayidx520 = getelementptr inbounds [3 x i32], [3 x i32]* @tinfl_decompress.s_min_table_sizes, i64 0, i64 %idxprom519
  %260 = load i32, i32* %arrayidx520, align 4
  %261 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes521 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %261, i32 0, i32 11
  %262 = load i32, i32* %counter, align 4
  %idxprom522 = zext i32 %262 to i64
  %arrayidx523 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes521, i64 0, i64 %idxprom522
  %263 = load i32, i32* %arrayidx523, align 4
  %add524 = add i32 %263, %260
  store i32 %add524, i32* %arrayidx523, align 4
  br label %for.inc525

for.inc525:                                       ; preds = %do.end518
  %264 = load i32, i32* %counter, align 4
  %inc526 = add i32 %264, 1
  store i32 %inc526, i32* %counter, align 4
  br label %for.cond453

for.end527:                                       ; preds = %for.cond453
  %265 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables528 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %265, i32 0, i32 14
  %arrayidx529 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables528, i64 0, i64 2
  %m_code_size530 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx529, i32 0, i32 0
  %266 = bitcast [288 x i8]* %m_code_size530 to i8*
  %267 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables531 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %267, i32 0, i32 14
  %arrayidx532 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables531, i64 0, i64 2
  %m_code_size533 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx532, i32 0, i32 0
  %268 = bitcast [288 x i8]* %m_code_size533 to i8*
  %269 = call i64 @llvm.objectsize.i64.p0i8(i8* %268, i1 false)
  %call534 = call i8* @__memset_chk(i8* %266, i32 0, i64 288, i64 %269) #10
  store i32 0, i32* %counter, align 4
  br label %for.cond535

for.cond535:                                      ; preds = %for.inc589, %for.end527
  %270 = load i32, i32* %counter, align 4
  %271 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes536 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %271, i32 0, i32 11
  %arrayidx537 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes536, i64 0, i64 2
  %272 = load i32, i32* %arrayidx537, align 4
  %cmp538 = icmp ult i32 %270, %272
  br i1 %cmp538, label %for.body540, label %for.end591

for.body540:                                      ; preds = %for.cond535
  br label %do.body541

do.body541:                                       ; preds = %for.body540
  %273 = load i32, i32* %num_bits, align 4
  %cmp542 = icmp ult i32 %273, 3
  br i1 %cmp542, label %if.then544, label %if.end574

if.then544:                                       ; preds = %do.body541
  br label %do.body545

do.body545:                                       ; preds = %do.cond570, %if.then544
  br label %do.body547

do.body547:                                       ; preds = %do.body545
  br label %while.cond548

while.cond548:                                    ; preds = %do.end559, %do.body547
  %274 = load i8*, i8** %pIn_buf_cur, align 8
  %275 = load i8*, i8** %pIn_buf_end, align 8
  %cmp549 = icmp uge i8* %274, %275
  br i1 %cmp549, label %while.body551, label %while.end560

while.body551:                                    ; preds = %while.cond548
  br label %do.body552

do.body552:                                       ; preds = %while.body551
  %276 = load i32, i32* %decomp_flags.addr, align 4
  %and553 = and i32 %276, 2
  %tobool554 = icmp ne i32 %and553, 0
  %cond555 = select i1 %tobool554, i32 1, i32 -4
  store i32 %cond555, i32* %status, align 4
  %277 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state556 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %277, i32 0, i32 0
  store i32 14, i32* %m_state556, align 8
  br label %common_exit

sw.bb557:                                         ; preds = %if.end
  br label %do.end559

do.end559:                                        ; preds = %sw.bb557
  br label %while.cond548

while.end560:                                     ; preds = %while.cond548
  %278 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr561 = getelementptr inbounds i8, i8* %278, i32 1
  store i8* %incdec.ptr561, i8** %pIn_buf_cur, align 8
  %279 = load i8, i8* %278, align 1
  %conv562 = zext i8 %279 to i32
  store i32 %conv562, i32* %c546, align 4
  br label %do.end564

do.end564:                                        ; preds = %while.end560
  %280 = load i32, i32* %c546, align 4
  %conv565 = zext i32 %280 to i64
  %281 = load i32, i32* %num_bits, align 4
  %sh_prom566 = zext i32 %281 to i64
  %shl567 = shl i64 %conv565, %sh_prom566
  %282 = load i64, i64* %bit_buf, align 8
  %or568 = or i64 %282, %shl567
  store i64 %or568, i64* %bit_buf, align 8
  %283 = load i32, i32* %num_bits, align 4
  %add569 = add i32 %283, 8
  store i32 %add569, i32* %num_bits, align 4
  br label %do.cond570

do.cond570:                                       ; preds = %do.end564
  %284 = load i32, i32* %num_bits, align 4
  %cmp571 = icmp ult i32 %284, 3
  br i1 %cmp571, label %do.body545, label %do.end573

do.end573:                                        ; preds = %do.cond570
  br label %if.end574

if.end574:                                        ; preds = %do.end573, %do.body541
  %285 = load i64, i64* %bit_buf, align 8
  %and575 = and i64 %285, 7
  %conv576 = trunc i64 %and575 to i32
  store i32 %conv576, i32* %s, align 4
  %286 = load i64, i64* %bit_buf, align 8
  %shr577 = lshr i64 %286, 3
  store i64 %shr577, i64* %bit_buf, align 8
  %287 = load i32, i32* %num_bits, align 4
  %sub578 = sub i32 %287, 3
  store i32 %sub578, i32* %num_bits, align 4
  br label %do.end580

do.end580:                                        ; preds = %if.end574
  %288 = load i32, i32* %s, align 4
  %conv581 = trunc i32 %288 to i8
  %289 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables582 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %289, i32 0, i32 14
  %arrayidx583 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables582, i64 0, i64 2
  %m_code_size584 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx583, i32 0, i32 0
  %290 = load i32, i32* %counter, align 4
  %idxprom585 = zext i32 %290 to i64
  %arrayidx586 = getelementptr inbounds [19 x i8], [19 x i8]* @tinfl_decompress.s_length_dezigzag, i64 0, i64 %idxprom585
  %291 = load i8, i8* %arrayidx586, align 1
  %idxprom587 = zext i8 %291 to i64
  %arrayidx588 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size584, i64 0, i64 %idxprom587
  store i8 %conv581, i8* %arrayidx588, align 1
  br label %for.inc589

for.inc589:                                       ; preds = %do.end580
  %292 = load i32, i32* %counter, align 4
  %inc590 = add i32 %292, 1
  store i32 %inc590, i32* %counter, align 4
  br label %for.cond535

for.end591:                                       ; preds = %for.cond535
  %293 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes592 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %293, i32 0, i32 11
  %arrayidx593 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes592, i64 0, i64 2
  store i32 19, i32* %arrayidx593, align 4
  br label %if.end594

if.end594:                                        ; preds = %for.end591, %for.end451
  br label %for.cond595

for.cond595:                                      ; preds = %for.inc1066, %if.end594
  %294 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type596 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %294, i32 0, i32 6
  %295 = load i32, i32* %m_type596, align 8
  %cmp597 = icmp sge i32 %295, 0
  br i1 %cmp597, label %for.body599, label %for.end1069

for.body599:                                      ; preds = %for.cond595
  %296 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables601 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %296, i32 0, i32 14
  %297 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type602 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %297, i32 0, i32 6
  %298 = load i32, i32* %m_type602, align 8
  %idxprom603 = zext i32 %298 to i64
  %arrayidx604 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables601, i64 0, i64 %idxprom603
  store %struct.tinfl_huff_table* %arrayidx604, %struct.tinfl_huff_table** %pTable, align 8
  %299 = bitcast [16 x i32]* %total_syms to i8*
  call void @llvm.memset.p0i8.i64(i8* %299, i8 0, i64 64, i32 16, i1 false)
  %300 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %300, i32 0, i32 1
  %301 = bitcast [1024 x i16]* %m_look_up to i8*
  %302 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up605 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %302, i32 0, i32 1
  %303 = bitcast [1024 x i16]* %m_look_up605 to i8*
  %304 = call i64 @llvm.objectsize.i64.p0i8(i8* %303, i1 false)
  %call606 = call i8* @__memset_chk(i8* %301, i32 0, i64 2048, i64 %304) #10
  %305 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_tree = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %305, i32 0, i32 2
  %306 = bitcast [576 x i16]* %m_tree to i8*
  %307 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_tree607 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %307, i32 0, i32 2
  %308 = bitcast [576 x i16]* %m_tree607 to i8*
  %309 = call i64 @llvm.objectsize.i64.p0i8(i8* %308, i1 false)
  %call608 = call i8* @__memset_chk(i8* %306, i32 0, i64 1152, i64 %309) #10
  store i32 0, i32* %i600, align 4
  br label %for.cond609

for.cond609:                                      ; preds = %for.inc623, %for.body599
  %310 = load i32, i32* %i600, align 4
  %311 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes610 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %311, i32 0, i32 11
  %312 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type611 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %312, i32 0, i32 6
  %313 = load i32, i32* %m_type611, align 8
  %idxprom612 = zext i32 %313 to i64
  %arrayidx613 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes610, i64 0, i64 %idxprom612
  %314 = load i32, i32* %arrayidx613, align 4
  %cmp614 = icmp ult i32 %310, %314
  br i1 %cmp614, label %for.body616, label %for.end625

for.body616:                                      ; preds = %for.cond609
  %315 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_code_size617 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %315, i32 0, i32 0
  %316 = load i32, i32* %i600, align 4
  %idxprom618 = zext i32 %316 to i64
  %arrayidx619 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size617, i64 0, i64 %idxprom618
  %317 = load i8, i8* %arrayidx619, align 1
  %idxprom620 = zext i8 %317 to i64
  %arrayidx621 = getelementptr inbounds [16 x i32], [16 x i32]* %total_syms, i64 0, i64 %idxprom620
  %318 = load i32, i32* %arrayidx621, align 4
  %inc622 = add i32 %318, 1
  store i32 %inc622, i32* %arrayidx621, align 4
  br label %for.inc623

for.inc623:                                       ; preds = %for.body616
  %319 = load i32, i32* %i600, align 4
  %inc624 = add i32 %319, 1
  store i32 %inc624, i32* %i600, align 4
  br label %for.cond609

for.end625:                                       ; preds = %for.cond609
  store i32 0, i32* %used_syms, align 4
  store i32 0, i32* %total, align 4
  %arrayidx626 = getelementptr inbounds [17 x i32], [17 x i32]* %next_code, i64 0, i64 1
  store i32 0, i32* %arrayidx626, align 4
  %arrayidx627 = getelementptr inbounds [17 x i32], [17 x i32]* %next_code, i64 0, i64 0
  store i32 0, i32* %arrayidx627, align 16
  store i32 1, i32* %i600, align 4
  br label %for.cond628

for.cond628:                                      ; preds = %for.inc642, %for.end625
  %320 = load i32, i32* %i600, align 4
  %cmp629 = icmp ule i32 %320, 15
  br i1 %cmp629, label %for.body631, label %for.end644

for.body631:                                      ; preds = %for.cond628
  %321 = load i32, i32* %i600, align 4
  %idxprom632 = zext i32 %321 to i64
  %arrayidx633 = getelementptr inbounds [16 x i32], [16 x i32]* %total_syms, i64 0, i64 %idxprom632
  %322 = load i32, i32* %arrayidx633, align 4
  %323 = load i32, i32* %used_syms, align 4
  %add634 = add i32 %323, %322
  store i32 %add634, i32* %used_syms, align 4
  %324 = load i32, i32* %total, align 4
  %325 = load i32, i32* %i600, align 4
  %idxprom635 = zext i32 %325 to i64
  %arrayidx636 = getelementptr inbounds [16 x i32], [16 x i32]* %total_syms, i64 0, i64 %idxprom635
  %326 = load i32, i32* %arrayidx636, align 4
  %add637 = add i32 %324, %326
  %shl638 = shl i32 %add637, 1
  store i32 %shl638, i32* %total, align 4
  %327 = load i32, i32* %i600, align 4
  %add639 = add i32 %327, 1
  %idxprom640 = zext i32 %add639 to i64
  %arrayidx641 = getelementptr inbounds [17 x i32], [17 x i32]* %next_code, i64 0, i64 %idxprom640
  store i32 %shl638, i32* %arrayidx641, align 4
  br label %for.inc642

for.inc642:                                       ; preds = %for.body631
  %328 = load i32, i32* %i600, align 4
  %inc643 = add i32 %328, 1
  store i32 %inc643, i32* %i600, align 4
  br label %for.cond628

for.end644:                                       ; preds = %for.cond628
  %329 = load i32, i32* %total, align 4
  %cmp645 = icmp ne i32 65536, %329
  br i1 %cmp645, label %land.lhs.true, label %if.end659

land.lhs.true:                                    ; preds = %for.end644
  %330 = load i32, i32* %used_syms, align 4
  %cmp647 = icmp ugt i32 %330, 1
  br i1 %cmp647, label %if.then649, label %if.end659

if.then649:                                       ; preds = %land.lhs.true
  br label %do.body650

do.body650:                                       ; preds = %if.then649
  br label %for.cond651

for.cond651:                                      ; preds = %do.end656, %do.body650
  br label %do.body652

do.body652:                                       ; preds = %for.cond651
  store i32 -1, i32* %status, align 4
  %331 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state653 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %331, i32 0, i32 0
  store i32 35, i32* %m_state653, align 8
  br label %common_exit

sw.bb654:                                         ; preds = %if.end
  br label %do.end656

do.end656:                                        ; preds = %sw.bb654
  br label %for.cond651

do.end658:                                        ; No predecessors!
  br label %if.end659

if.end659:                                        ; preds = %do.end658, %land.lhs.true, %for.end644
  store i32 -1, i32* %tree_next, align 4
  store i32 0, i32* %sym_index, align 4
  br label %for.cond660

for.cond660:                                      ; preds = %for.inc763, %if.end659
  %332 = load i32, i32* %sym_index, align 4
  %333 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes661 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %333, i32 0, i32 11
  %334 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type662 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %334, i32 0, i32 6
  %335 = load i32, i32* %m_type662, align 8
  %idxprom663 = zext i32 %335 to i64
  %arrayidx664 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes661, i64 0, i64 %idxprom663
  %336 = load i32, i32* %arrayidx664, align 4
  %cmp665 = icmp ult i32 %332, %336
  br i1 %cmp665, label %for.body667, label %for.end765

for.body667:                                      ; preds = %for.cond660
  store i32 0, i32* %rev_code, align 4
  %337 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_code_size668 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %337, i32 0, i32 0
  %338 = load i32, i32* %sym_index, align 4
  %idxprom669 = zext i32 %338 to i64
  %arrayidx670 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size668, i64 0, i64 %idxprom669
  %339 = load i8, i8* %arrayidx670, align 1
  %conv671 = zext i8 %339 to i32
  store i32 %conv671, i32* %code_size, align 4
  %340 = load i32, i32* %code_size, align 4
  %tobool672 = icmp ne i32 %340, 0
  br i1 %tobool672, label %if.end674, label %if.then673

if.then673:                                       ; preds = %for.body667
  br label %for.inc763

if.end674:                                        ; preds = %for.body667
  %341 = load i32, i32* %code_size, align 4
  %idxprom675 = zext i32 %341 to i64
  %arrayidx676 = getelementptr inbounds [17 x i32], [17 x i32]* %next_code, i64 0, i64 %idxprom675
  %342 = load i32, i32* %arrayidx676, align 4
  %inc677 = add i32 %342, 1
  store i32 %inc677, i32* %arrayidx676, align 4
  store i32 %342, i32* %cur_code, align 4
  %343 = load i32, i32* %code_size, align 4
  store i32 %343, i32* %l, align 4
  br label %for.cond678

for.cond678:                                      ; preds = %for.inc685, %if.end674
  %344 = load i32, i32* %l, align 4
  %cmp679 = icmp ugt i32 %344, 0
  br i1 %cmp679, label %for.body681, label %for.end688

for.body681:                                      ; preds = %for.cond678
  %345 = load i32, i32* %rev_code, align 4
  %shl682 = shl i32 %345, 1
  %346 = load i32, i32* %cur_code, align 4
  %and683 = and i32 %346, 1
  %or684 = or i32 %shl682, %and683
  store i32 %or684, i32* %rev_code, align 4
  br label %for.inc685

for.inc685:                                       ; preds = %for.body681
  %347 = load i32, i32* %l, align 4
  %dec686 = add i32 %347, -1
  store i32 %dec686, i32* %l, align 4
  %348 = load i32, i32* %cur_code, align 4
  %shr687 = lshr i32 %348, 1
  store i32 %shr687, i32* %cur_code, align 4
  br label %for.cond678

for.end688:                                       ; preds = %for.cond678
  %349 = load i32, i32* %code_size, align 4
  %cmp689 = icmp ule i32 %349, 10
  br i1 %cmp689, label %if.then691, label %if.end705

if.then691:                                       ; preds = %for.end688
  %350 = load i32, i32* %code_size, align 4
  %shl692 = shl i32 %350, 9
  %351 = load i32, i32* %sym_index, align 4
  %or693 = or i32 %shl692, %351
  %conv694 = trunc i32 %or693 to i16
  store i16 %conv694, i16* %k, align 2
  br label %while.cond695

while.cond695:                                    ; preds = %while.body698, %if.then691
  %352 = load i32, i32* %rev_code, align 4
  %cmp696 = icmp ult i32 %352, 1024
  br i1 %cmp696, label %while.body698, label %while.end704

while.body698:                                    ; preds = %while.cond695
  %353 = load i16, i16* %k, align 2
  %354 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up699 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %354, i32 0, i32 1
  %355 = load i32, i32* %rev_code, align 4
  %idxprom700 = zext i32 %355 to i64
  %arrayidx701 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up699, i64 0, i64 %idxprom700
  store i16 %353, i16* %arrayidx701, align 2
  %356 = load i32, i32* %code_size, align 4
  %shl702 = shl i32 1, %356
  %357 = load i32, i32* %rev_code, align 4
  %add703 = add i32 %357, %shl702
  store i32 %add703, i32* %rev_code, align 4
  br label %while.cond695

while.end704:                                     ; preds = %while.cond695
  br label %for.inc763

if.end705:                                        ; preds = %for.end688
  %358 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up706 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %358, i32 0, i32 1
  %359 = load i32, i32* %rev_code, align 4
  %and707 = and i32 %359, 1023
  %idxprom708 = zext i32 %and707 to i64
  %arrayidx709 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up706, i64 0, i64 %idxprom708
  %360 = load i16, i16* %arrayidx709, align 2
  %conv710 = sext i16 %360 to i32
  store i32 %conv710, i32* %tree_cur, align 4
  %cmp711 = icmp eq i32 0, %conv710
  br i1 %cmp711, label %if.then713, label %if.end720

if.then713:                                       ; preds = %if.end705
  %361 = load i32, i32* %tree_next, align 4
  %conv714 = trunc i32 %361 to i16
  %362 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_look_up715 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %362, i32 0, i32 1
  %363 = load i32, i32* %rev_code, align 4
  %and716 = and i32 %363, 1023
  %idxprom717 = zext i32 %and716 to i64
  %arrayidx718 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up715, i64 0, i64 %idxprom717
  store i16 %conv714, i16* %arrayidx718, align 2
  %364 = load i32, i32* %tree_next, align 4
  store i32 %364, i32* %tree_cur, align 4
  %365 = load i32, i32* %tree_next, align 4
  %sub719 = sub nsw i32 %365, 2
  store i32 %sub719, i32* %tree_next, align 4
  br label %if.end720

if.end720:                                        ; preds = %if.then713, %if.end705
  %366 = load i32, i32* %rev_code, align 4
  %shr721 = lshr i32 %366, 9
  store i32 %shr721, i32* %rev_code, align 4
  %367 = load i32, i32* %code_size, align 4
  store i32 %367, i32* %j, align 4
  br label %for.cond722

for.cond722:                                      ; preds = %for.inc751, %if.end720
  %368 = load i32, i32* %j, align 4
  %cmp723 = icmp ugt i32 %368, 11
  br i1 %cmp723, label %for.body725, label %for.end753

for.body725:                                      ; preds = %for.cond722
  %369 = load i32, i32* %rev_code, align 4
  %shr726 = lshr i32 %369, 1
  store i32 %shr726, i32* %rev_code, align 4
  %and727 = and i32 %shr726, 1
  %370 = load i32, i32* %tree_cur, align 4
  %sub728 = sub i32 %370, %and727
  store i32 %sub728, i32* %tree_cur, align 4
  %371 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_tree729 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %371, i32 0, i32 2
  %372 = load i32, i32* %tree_cur, align 4
  %sub730 = sub nsw i32 0, %372
  %sub731 = sub nsw i32 %sub730, 1
  %idxprom732 = sext i32 %sub731 to i64
  %arrayidx733 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree729, i64 0, i64 %idxprom732
  %373 = load i16, i16* %arrayidx733, align 2
  %tobool734 = icmp ne i16 %373, 0
  br i1 %tobool734, label %if.else743, label %if.then735

if.then735:                                       ; preds = %for.body725
  %374 = load i32, i32* %tree_next, align 4
  %conv736 = trunc i32 %374 to i16
  %375 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_tree737 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %375, i32 0, i32 2
  %376 = load i32, i32* %tree_cur, align 4
  %sub738 = sub nsw i32 0, %376
  %sub739 = sub nsw i32 %sub738, 1
  %idxprom740 = sext i32 %sub739 to i64
  %arrayidx741 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree737, i64 0, i64 %idxprom740
  store i16 %conv736, i16* %arrayidx741, align 2
  %377 = load i32, i32* %tree_next, align 4
  store i32 %377, i32* %tree_cur, align 4
  %378 = load i32, i32* %tree_next, align 4
  %sub742 = sub nsw i32 %378, 2
  store i32 %sub742, i32* %tree_next, align 4
  br label %if.end750

if.else743:                                       ; preds = %for.body725
  %379 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_tree744 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %379, i32 0, i32 2
  %380 = load i32, i32* %tree_cur, align 4
  %sub745 = sub nsw i32 0, %380
  %sub746 = sub nsw i32 %sub745, 1
  %idxprom747 = sext i32 %sub746 to i64
  %arrayidx748 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree744, i64 0, i64 %idxprom747
  %381 = load i16, i16* %arrayidx748, align 2
  %conv749 = sext i16 %381 to i32
  store i32 %conv749, i32* %tree_cur, align 4
  br label %if.end750

if.end750:                                        ; preds = %if.else743, %if.then735
  br label %for.inc751

for.inc751:                                       ; preds = %if.end750
  %382 = load i32, i32* %j, align 4
  %dec752 = add i32 %382, -1
  store i32 %dec752, i32* %j, align 4
  br label %for.cond722

for.end753:                                       ; preds = %for.cond722
  %383 = load i32, i32* %rev_code, align 4
  %shr754 = lshr i32 %383, 1
  store i32 %shr754, i32* %rev_code, align 4
  %and755 = and i32 %shr754, 1
  %384 = load i32, i32* %tree_cur, align 4
  %sub756 = sub i32 %384, %and755
  store i32 %sub756, i32* %tree_cur, align 4
  %385 = load i32, i32* %sym_index, align 4
  %conv757 = trunc i32 %385 to i16
  %386 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8
  %m_tree758 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %386, i32 0, i32 2
  %387 = load i32, i32* %tree_cur, align 4
  %sub759 = sub nsw i32 0, %387
  %sub760 = sub nsw i32 %sub759, 1
  %idxprom761 = sext i32 %sub760 to i64
  %arrayidx762 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree758, i64 0, i64 %idxprom761
  store i16 %conv757, i16* %arrayidx762, align 2
  br label %for.inc763

for.inc763:                                       ; preds = %for.end753, %while.end704, %if.then673
  %388 = load i32, i32* %sym_index, align 4
  %inc764 = add i32 %388, 1
  store i32 %inc764, i32* %sym_index, align 4
  br label %for.cond660

for.end765:                                       ; preds = %for.cond660
  %389 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type766 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %389, i32 0, i32 6
  %390 = load i32, i32* %m_type766, align 8
  %cmp767 = icmp eq i32 %390, 2
  br i1 %cmp767, label %if.then769, label %if.end1065

if.then769:                                       ; preds = %for.end765
  store i32 0, i32* %counter, align 4
  br label %for.cond770

for.cond770:                                      ; preds = %cond.end1005, %if.then919, %if.then769
  %391 = load i32, i32* %counter, align 4
  %392 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes771 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %392, i32 0, i32 11
  %arrayidx772 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes771, i64 0, i64 0
  %393 = load i32, i32* %arrayidx772, align 4
  %394 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes773 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %394, i32 0, i32 11
  %arrayidx774 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes773, i64 0, i64 1
  %395 = load i32, i32* %arrayidx774, align 4
  %add775 = add i32 %393, %395
  %cmp776 = icmp ult i32 %391, %add775
  br i1 %cmp776, label %for.body778, label %for.end1014

for.body778:                                      ; preds = %for.cond770
  br label %do.body780

do.body780:                                       ; preds = %for.body778
  %396 = load i32, i32* %num_bits, align 4
  %cmp782 = icmp ult i32 %396, 15
  br i1 %cmp782, label %if.then784, label %if.end881

if.then784:                                       ; preds = %do.body780
  %397 = load i8*, i8** %pIn_buf_end, align 8
  %398 = load i8*, i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast785 = ptrtoint i8* %397 to i64
  %sub.ptr.rhs.cast786 = ptrtoint i8* %398 to i64
  %sub.ptr.sub787 = sub i64 %sub.ptr.lhs.cast785, %sub.ptr.rhs.cast786
  %cmp788 = icmp slt i64 %sub.ptr.sub787, 2
  br i1 %cmp788, label %if.then790, label %if.else866

if.then790:                                       ; preds = %if.then784
  br label %do.body791

do.body791:                                       ; preds = %do.cond862, %if.then790
  %399 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables792 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %399, i32 0, i32 14
  %arrayidx793 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables792, i64 0, i64 2
  %m_look_up794 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx793, i32 0, i32 1
  %400 = load i64, i64* %bit_buf, align 8
  %and795 = and i64 %400, 1023
  %arrayidx796 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up794, i64 0, i64 %and795
  %401 = load i16, i16* %arrayidx796, align 2
  %conv797 = sext i16 %401 to i32
  store i32 %conv797, i32* %temp, align 4
  %402 = load i32, i32* %temp, align 4
  %cmp798 = icmp sge i32 %402, 0
  br i1 %cmp798, label %if.then800, label %if.else808

if.then800:                                       ; preds = %do.body791
  %403 = load i32, i32* %temp, align 4
  %shr801 = ashr i32 %403, 9
  store i32 %shr801, i32* %code_len, align 4
  %404 = load i32, i32* %code_len, align 4
  %tobool802 = icmp ne i32 %404, 0
  br i1 %tobool802, label %land.lhs.true803, label %if.end807

land.lhs.true803:                                 ; preds = %if.then800
  %405 = load i32, i32* %num_bits, align 4
  %406 = load i32, i32* %code_len, align 4
  %cmp804 = icmp uge i32 %405, %406
  br i1 %cmp804, label %if.then806, label %if.end807

if.then806:                                       ; preds = %land.lhs.true803
  br label %do.end865

if.end807:                                        ; preds = %land.lhs.true803, %if.then800
  br label %if.end838

if.else808:                                       ; preds = %do.body791
  %407 = load i32, i32* %num_bits, align 4
  %cmp809 = icmp ugt i32 %407, 10
  br i1 %cmp809, label %if.then811, label %if.end837

if.then811:                                       ; preds = %if.else808
  store i32 10, i32* %code_len, align 4
  br label %do.body812

do.body812:                                       ; preds = %land.end831, %if.then811
  %408 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables813 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %408, i32 0, i32 14
  %arrayidx814 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables813, i64 0, i64 2
  %m_tree815 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx814, i32 0, i32 2
  %409 = load i32, i32* %temp, align 4
  %neg = xor i32 %409, -1
  %conv816 = sext i32 %neg to i64
  %410 = load i64, i64* %bit_buf, align 8
  %411 = load i32, i32* %code_len, align 4
  %inc817 = add i32 %411, 1
  store i32 %inc817, i32* %code_len, align 4
  %sh_prom818 = zext i32 %411 to i64
  %shr819 = lshr i64 %410, %sh_prom818
  %and820 = and i64 %shr819, 1
  %add821 = add i64 %conv816, %and820
  %arrayidx822 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree815, i64 0, i64 %add821
  %412 = load i16, i16* %arrayidx822, align 2
  %conv823 = sext i16 %412 to i32
  store i32 %conv823, i32* %temp, align 4
  br label %do.cond824

do.cond824:                                       ; preds = %do.body812
  %413 = load i32, i32* %temp, align 4
  %cmp825 = icmp slt i32 %413, 0
  br i1 %cmp825, label %land.rhs827, label %land.end831

land.rhs827:                                      ; preds = %do.cond824
  %414 = load i32, i32* %num_bits, align 4
  %415 = load i32, i32* %code_len, align 4
  %add828 = add i32 %415, 1
  %cmp829 = icmp uge i32 %414, %add828
  br label %land.end831

land.end831:                                      ; preds = %land.rhs827, %do.cond824
  %416 = phi i1 [ false, %do.cond824 ], [ %cmp829, %land.rhs827 ]
  br i1 %416, label %do.body812, label %do.end832

do.end832:                                        ; preds = %land.end831
  %417 = load i32, i32* %temp, align 4
  %cmp833 = icmp sge i32 %417, 0
  br i1 %cmp833, label %if.then835, label %if.end836

if.then835:                                       ; preds = %do.end832
  br label %do.end865

if.end836:                                        ; preds = %do.end832
  br label %if.end837

if.end837:                                        ; preds = %if.end836, %if.else808
  br label %if.end838

if.end838:                                        ; preds = %if.end837, %if.end807
  br label %do.body839

do.body839:                                       ; preds = %if.end838
  br label %while.cond840

while.cond840:                                    ; preds = %do.end851, %do.body839
  %418 = load i8*, i8** %pIn_buf_cur, align 8
  %419 = load i8*, i8** %pIn_buf_end, align 8
  %cmp841 = icmp uge i8* %418, %419
  br i1 %cmp841, label %while.body843, label %while.end852

while.body843:                                    ; preds = %while.cond840
  br label %do.body844

do.body844:                                       ; preds = %while.body843
  %420 = load i32, i32* %decomp_flags.addr, align 4
  %and845 = and i32 %420, 2
  %tobool846 = icmp ne i32 %and845, 0
  %cond847 = select i1 %tobool846, i32 1, i32 -4
  store i32 %cond847, i32* %status, align 4
  %421 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state848 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %421, i32 0, i32 0
  store i32 16, i32* %m_state848, align 8
  br label %common_exit

sw.bb849:                                         ; preds = %if.end
  br label %do.end851

do.end851:                                        ; preds = %sw.bb849
  br label %while.cond840

while.end852:                                     ; preds = %while.cond840
  %422 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr853 = getelementptr inbounds i8, i8* %422, i32 1
  store i8* %incdec.ptr853, i8** %pIn_buf_cur, align 8
  %423 = load i8, i8* %422, align 1
  %conv854 = zext i8 %423 to i32
  store i32 %conv854, i32* %c781, align 4
  br label %do.end856

do.end856:                                        ; preds = %while.end852
  %424 = load i32, i32* %c781, align 4
  %conv857 = zext i32 %424 to i64
  %425 = load i32, i32* %num_bits, align 4
  %sh_prom858 = zext i32 %425 to i64
  %shl859 = shl i64 %conv857, %sh_prom858
  %426 = load i64, i64* %bit_buf, align 8
  %or860 = or i64 %426, %shl859
  store i64 %or860, i64* %bit_buf, align 8
  %427 = load i32, i32* %num_bits, align 4
  %add861 = add i32 %427, 8
  store i32 %add861, i32* %num_bits, align 4
  br label %do.cond862

do.cond862:                                       ; preds = %do.end856
  %428 = load i32, i32* %num_bits, align 4
  %cmp863 = icmp ult i32 %428, 15
  br i1 %cmp863, label %do.body791, label %do.end865

do.end865:                                        ; preds = %do.cond862, %if.then835, %if.then806
  br label %if.end880

if.else866:                                       ; preds = %if.then784
  %429 = load i8*, i8** %pIn_buf_cur, align 8
  %arrayidx867 = getelementptr inbounds i8, i8* %429, i64 0
  %430 = load i8, i8* %arrayidx867, align 1
  %conv868 = zext i8 %430 to i64
  %431 = load i32, i32* %num_bits, align 4
  %sh_prom869 = zext i32 %431 to i64
  %shl870 = shl i64 %conv868, %sh_prom869
  %432 = load i8*, i8** %pIn_buf_cur, align 8
  %arrayidx871 = getelementptr inbounds i8, i8* %432, i64 1
  %433 = load i8, i8* %arrayidx871, align 1
  %conv872 = zext i8 %433 to i64
  %434 = load i32, i32* %num_bits, align 4
  %add873 = add i32 %434, 8
  %sh_prom874 = zext i32 %add873 to i64
  %shl875 = shl i64 %conv872, %sh_prom874
  %or876 = or i64 %shl870, %shl875
  %435 = load i64, i64* %bit_buf, align 8
  %or877 = or i64 %435, %or876
  store i64 %or877, i64* %bit_buf, align 8
  %436 = load i8*, i8** %pIn_buf_cur, align 8
  %add.ptr878 = getelementptr inbounds i8, i8* %436, i64 2
  store i8* %add.ptr878, i8** %pIn_buf_cur, align 8
  %437 = load i32, i32* %num_bits, align 4
  %add879 = add i32 %437, 16
  store i32 %add879, i32* %num_bits, align 4
  br label %if.end880

if.end880:                                        ; preds = %if.else866, %do.end865
  br label %if.end881

if.end881:                                        ; preds = %if.end880, %do.body780
  %438 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables882 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %438, i32 0, i32 14
  %arrayidx883 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables882, i64 0, i64 2
  %m_look_up884 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx883, i32 0, i32 1
  %439 = load i64, i64* %bit_buf, align 8
  %and885 = and i64 %439, 1023
  %arrayidx886 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up884, i64 0, i64 %and885
  %440 = load i16, i16* %arrayidx886, align 2
  %conv887 = sext i16 %440 to i32
  store i32 %conv887, i32* %temp, align 4
  %cmp888 = icmp sge i32 %conv887, 0
  br i1 %cmp888, label %if.then890, label %if.else893

if.then890:                                       ; preds = %if.end881
  %441 = load i32, i32* %temp, align 4
  %shr891 = ashr i32 %441, 9
  store i32 %shr891, i32* %code_len, align 4
  %442 = load i32, i32* %temp, align 4
  %and892 = and i32 %442, 511
  store i32 %and892, i32* %temp, align 4
  br label %if.end911

if.else893:                                       ; preds = %if.end881
  store i32 10, i32* %code_len, align 4
  br label %do.body894

do.body894:                                       ; preds = %do.cond907, %if.else893
  %443 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables895 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %443, i32 0, i32 14
  %arrayidx896 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables895, i64 0, i64 2
  %m_tree897 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx896, i32 0, i32 2
  %444 = load i32, i32* %temp, align 4
  %neg898 = xor i32 %444, -1
  %conv899 = sext i32 %neg898 to i64
  %445 = load i64, i64* %bit_buf, align 8
  %446 = load i32, i32* %code_len, align 4
  %inc900 = add i32 %446, 1
  store i32 %inc900, i32* %code_len, align 4
  %sh_prom901 = zext i32 %446 to i64
  %shr902 = lshr i64 %445, %sh_prom901
  %and903 = and i64 %shr902, 1
  %add904 = add i64 %conv899, %and903
  %arrayidx905 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree897, i64 0, i64 %add904
  %447 = load i16, i16* %arrayidx905, align 2
  %conv906 = sext i16 %447 to i32
  store i32 %conv906, i32* %temp, align 4
  br label %do.cond907

do.cond907:                                       ; preds = %do.body894
  %448 = load i32, i32* %temp, align 4
  %cmp908 = icmp slt i32 %448, 0
  br i1 %cmp908, label %do.body894, label %do.end910

do.end910:                                        ; preds = %do.cond907
  br label %if.end911

if.end911:                                        ; preds = %do.end910, %if.then890
  %449 = load i32, i32* %temp, align 4
  store i32 %449, i32* %dist, align 4
  %450 = load i32, i32* %code_len, align 4
  %451 = load i64, i64* %bit_buf, align 8
  %sh_prom912 = zext i32 %450 to i64
  %shr913 = lshr i64 %451, %sh_prom912
  store i64 %shr913, i64* %bit_buf, align 8
  %452 = load i32, i32* %code_len, align 4
  %453 = load i32, i32* %num_bits, align 4
  %sub914 = sub i32 %453, %452
  store i32 %sub914, i32* %num_bits, align 4
  br label %do.end916

do.end916:                                        ; preds = %if.end911
  %454 = load i32, i32* %dist, align 4
  %cmp917 = icmp ult i32 %454, 16
  br i1 %cmp917, label %if.then919, label %if.end924

if.then919:                                       ; preds = %do.end916
  %455 = load i32, i32* %dist, align 4
  %conv920 = trunc i32 %455 to i8
  %456 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %456, i32 0, i32 16
  %457 = load i32, i32* %counter, align 4
  %inc921 = add i32 %457, 1
  store i32 %inc921, i32* %counter, align 4
  %idxprom922 = zext i32 %457 to i64
  %arrayidx923 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes, i64 0, i64 %idxprom922
  store i8 %conv920, i8* %arrayidx923, align 1
  br label %for.cond770

if.end924:                                        ; preds = %do.end916
  %458 = load i32, i32* %dist, align 4
  %cmp925 = icmp eq i32 %458, 16
  br i1 %cmp925, label %land.lhs.true927, label %if.end939

land.lhs.true927:                                 ; preds = %if.end924
  %459 = load i32, i32* %counter, align 4
  %tobool928 = icmp ne i32 %459, 0
  br i1 %tobool928, label %if.end939, label %if.then929

if.then929:                                       ; preds = %land.lhs.true927
  br label %do.body930

do.body930:                                       ; preds = %if.then929
  br label %for.cond931

for.cond931:                                      ; preds = %do.end936, %do.body930
  br label %do.body932

do.body932:                                       ; preds = %for.cond931
  store i32 -1, i32* %status, align 4
  %460 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state933 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %460, i32 0, i32 0
  store i32 17, i32* %m_state933, align 8
  br label %common_exit

sw.bb934:                                         ; preds = %if.end
  br label %do.end936

do.end936:                                        ; preds = %sw.bb934
  br label %for.cond931

do.end938:                                        ; No predecessors!
  br label %if.end939

if.end939:                                        ; preds = %do.end938, %land.lhs.true927, %if.end924
  %461 = load i32, i32* %dist, align 4
  %sub940 = sub i32 %461, 16
  %idxprom941 = zext i32 %sub940 to i64
  %arrayidx942 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.15, i64 0, i64 %idxprom941
  %462 = load i8, i8* %arrayidx942, align 1
  %conv943 = sext i8 %462 to i32
  store i32 %conv943, i32* %num_extra, align 4
  br label %do.body944

do.body944:                                       ; preds = %if.end939
  %463 = load i32, i32* %num_bits, align 4
  %464 = load i32, i32* %num_extra, align 4
  %cmp945 = icmp ult i32 %463, %464
  br i1 %cmp945, label %if.then947, label %if.end977

if.then947:                                       ; preds = %do.body944
  br label %do.body948

do.body948:                                       ; preds = %do.cond973, %if.then947
  br label %do.body950

do.body950:                                       ; preds = %do.body948
  br label %while.cond951

while.cond951:                                    ; preds = %do.end962, %do.body950
  %465 = load i8*, i8** %pIn_buf_cur, align 8
  %466 = load i8*, i8** %pIn_buf_end, align 8
  %cmp952 = icmp uge i8* %465, %466
  br i1 %cmp952, label %while.body954, label %while.end963

while.body954:                                    ; preds = %while.cond951
  br label %do.body955

do.body955:                                       ; preds = %while.body954
  %467 = load i32, i32* %decomp_flags.addr, align 4
  %and956 = and i32 %467, 2
  %tobool957 = icmp ne i32 %and956, 0
  %cond958 = select i1 %tobool957, i32 1, i32 -4
  store i32 %cond958, i32* %status, align 4
  %468 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state959 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %468, i32 0, i32 0
  store i32 18, i32* %m_state959, align 8
  br label %common_exit

sw.bb960:                                         ; preds = %if.end
  br label %do.end962

do.end962:                                        ; preds = %sw.bb960
  br label %while.cond951

while.end963:                                     ; preds = %while.cond951
  %469 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr964 = getelementptr inbounds i8, i8* %469, i32 1
  store i8* %incdec.ptr964, i8** %pIn_buf_cur, align 8
  %470 = load i8, i8* %469, align 1
  %conv965 = zext i8 %470 to i32
  store i32 %conv965, i32* %c949, align 4
  br label %do.end967

do.end967:                                        ; preds = %while.end963
  %471 = load i32, i32* %c949, align 4
  %conv968 = zext i32 %471 to i64
  %472 = load i32, i32* %num_bits, align 4
  %sh_prom969 = zext i32 %472 to i64
  %shl970 = shl i64 %conv968, %sh_prom969
  %473 = load i64, i64* %bit_buf, align 8
  %or971 = or i64 %473, %shl970
  store i64 %or971, i64* %bit_buf, align 8
  %474 = load i32, i32* %num_bits, align 4
  %add972 = add i32 %474, 8
  store i32 %add972, i32* %num_bits, align 4
  br label %do.cond973

do.cond973:                                       ; preds = %do.end967
  %475 = load i32, i32* %num_bits, align 4
  %476 = load i32, i32* %num_extra, align 4
  %cmp974 = icmp ult i32 %475, %476
  br i1 %cmp974, label %do.body948, label %do.end976

do.end976:                                        ; preds = %do.cond973
  br label %if.end977

if.end977:                                        ; preds = %do.end976, %do.body944
  %477 = load i64, i64* %bit_buf, align 8
  %478 = load i32, i32* %num_extra, align 4
  %shl978 = shl i32 1, %478
  %sub979 = sub nsw i32 %shl978, 1
  %conv980 = sext i32 %sub979 to i64
  %and981 = and i64 %477, %conv980
  %conv982 = trunc i64 %and981 to i32
  store i32 %conv982, i32* %s779, align 4
  %479 = load i32, i32* %num_extra, align 4
  %480 = load i64, i64* %bit_buf, align 8
  %sh_prom983 = zext i32 %479 to i64
  %shr984 = lshr i64 %480, %sh_prom983
  store i64 %shr984, i64* %bit_buf, align 8
  %481 = load i32, i32* %num_extra, align 4
  %482 = load i32, i32* %num_bits, align 4
  %sub985 = sub i32 %482, %481
  store i32 %sub985, i32* %num_bits, align 4
  br label %do.end987

do.end987:                                        ; preds = %if.end977
  %483 = load i32, i32* %dist, align 4
  %sub988 = sub i32 %483, 16
  %idxprom989 = zext i32 %sub988 to i64
  %arrayidx990 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.16, i64 0, i64 %idxprom989
  %484 = load i8, i8* %arrayidx990, align 1
  %conv991 = sext i8 %484 to i32
  %485 = load i32, i32* %s779, align 4
  %add992 = add i32 %485, %conv991
  store i32 %add992, i32* %s779, align 4
  %486 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes993 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %486, i32 0, i32 16
  %arraydecay994 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes993, i32 0, i32 0
  %487 = load i32, i32* %counter, align 4
  %idx.ext = zext i32 %487 to i64
  %add.ptr995 = getelementptr inbounds i8, i8* %arraydecay994, i64 %idx.ext
  %488 = load i32, i32* %dist, align 4
  %cmp996 = icmp eq i32 %488, 16
  br i1 %cmp996, label %cond.true998, label %cond.false1004

cond.true998:                                     ; preds = %do.end987
  %489 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes999 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %489, i32 0, i32 16
  %490 = load i32, i32* %counter, align 4
  %sub1000 = sub i32 %490, 1
  %idxprom1001 = zext i32 %sub1000 to i64
  %arrayidx1002 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes999, i64 0, i64 %idxprom1001
  %491 = load i8, i8* %arrayidx1002, align 1
  %conv1003 = zext i8 %491 to i32
  br label %cond.end1005

cond.false1004:                                   ; preds = %do.end987
  br label %cond.end1005

cond.end1005:                                     ; preds = %cond.false1004, %cond.true998
  %cond1006 = phi i32 [ %conv1003, %cond.true998 ], [ 0, %cond.false1004 ]
  %492 = load i32, i32* %s779, align 4
  %conv1007 = zext i32 %492 to i64
  %493 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes1008 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %493, i32 0, i32 16
  %arraydecay1009 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes1008, i32 0, i32 0
  %494 = load i32, i32* %counter, align 4
  %idx.ext1010 = zext i32 %494 to i64
  %add.ptr1011 = getelementptr inbounds i8, i8* %arraydecay1009, i64 %idx.ext1010
  %495 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr1011, i1 false)
  %call1012 = call i8* @__memset_chk(i8* %add.ptr995, i32 %cond1006, i64 %conv1007, i64 %495) #10
  %496 = load i32, i32* %s779, align 4
  %497 = load i32, i32* %counter, align 4
  %add1013 = add i32 %497, %496
  store i32 %add1013, i32* %counter, align 4
  br label %for.cond770

for.end1014:                                      ; preds = %for.cond770
  %498 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1015 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %498, i32 0, i32 11
  %arrayidx1016 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1015, i64 0, i64 0
  %499 = load i32, i32* %arrayidx1016, align 4
  %500 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1017 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %500, i32 0, i32 11
  %arrayidx1018 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1017, i64 0, i64 1
  %501 = load i32, i32* %arrayidx1018, align 4
  %add1019 = add i32 %499, %501
  %502 = load i32, i32* %counter, align 4
  %cmp1020 = icmp ne i32 %add1019, %502
  br i1 %cmp1020, label %if.then1022, label %if.end1032

if.then1022:                                      ; preds = %for.end1014
  br label %do.body1023

do.body1023:                                      ; preds = %if.then1022
  br label %for.cond1024

for.cond1024:                                     ; preds = %do.end1029, %do.body1023
  br label %do.body1025

do.body1025:                                      ; preds = %for.cond1024
  store i32 -1, i32* %status, align 4
  %503 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1026 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %503, i32 0, i32 0
  store i32 21, i32* %m_state1026, align 8
  br label %common_exit

sw.bb1027:                                        ; preds = %if.end
  br label %do.end1029

do.end1029:                                       ; preds = %sw.bb1027
  br label %for.cond1024

do.end1031:                                       ; No predecessors!
  br label %if.end1032

if.end1032:                                       ; preds = %do.end1031, %for.end1014
  %504 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1033 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %504, i32 0, i32 14
  %arrayidx1034 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1033, i64 0, i64 0
  %m_code_size1035 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1034, i32 0, i32 0
  %arraydecay1036 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size1035, i32 0, i32 0
  %505 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes1037 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %505, i32 0, i32 16
  %arraydecay1038 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes1037, i32 0, i32 0
  %506 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1039 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %506, i32 0, i32 11
  %arrayidx1040 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1039, i64 0, i64 0
  %507 = load i32, i32* %arrayidx1040, align 4
  %conv1041 = zext i32 %507 to i64
  %508 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1042 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %508, i32 0, i32 14
  %arrayidx1043 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1042, i64 0, i64 0
  %m_code_size1044 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1043, i32 0, i32 0
  %arraydecay1045 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size1044, i32 0, i32 0
  %509 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay1045, i1 false)
  %call1046 = call i8* @__memcpy_chk(i8* %arraydecay1036, i8* %arraydecay1038, i64 %conv1041, i64 %509) #10
  %510 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1047 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %510, i32 0, i32 14
  %arrayidx1048 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1047, i64 0, i64 1
  %m_code_size1049 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1048, i32 0, i32 0
  %arraydecay1050 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size1049, i32 0, i32 0
  %511 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_len_codes1051 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %511, i32 0, i32 16
  %arraydecay1052 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes1051, i32 0, i32 0
  %512 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1053 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %512, i32 0, i32 11
  %arrayidx1054 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1053, i64 0, i64 0
  %513 = load i32, i32* %arrayidx1054, align 4
  %idx.ext1055 = zext i32 %513 to i64
  %add.ptr1056 = getelementptr inbounds i8, i8* %arraydecay1052, i64 %idx.ext1055
  %514 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_table_sizes1057 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %514, i32 0, i32 11
  %arrayidx1058 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1057, i64 0, i64 1
  %515 = load i32, i32* %arrayidx1058, align 4
  %conv1059 = zext i32 %515 to i64
  %516 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1060 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %516, i32 0, i32 14
  %arrayidx1061 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1060, i64 0, i64 1
  %m_code_size1062 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1061, i32 0, i32 0
  %arraydecay1063 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size1062, i32 0, i32 0
  %517 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay1063, i1 false)
  %call1064 = call i8* @__memcpy_chk(i8* %arraydecay1050, i8* %add.ptr1056, i64 %conv1059, i64 %517) #10
  br label %if.end1065

if.end1065:                                       ; preds = %if.end1032, %for.end765
  br label %for.inc1066

for.inc1066:                                      ; preds = %if.end1065
  %518 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_type1067 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %518, i32 0, i32 6
  %519 = load i32, i32* %m_type1067, align 8
  %dec1068 = add i32 %519, -1
  store i32 %dec1068, i32* %m_type1067, align 8
  br label %for.cond595

for.end1069:                                      ; preds = %for.cond595
  br label %for.cond1070

for.cond1070:                                     ; preds = %if.end1705, %if.end1674, %while.end1639, %for.end1069
  br label %for.cond1071

for.cond1071:                                     ; preds = %if.end1330, %for.cond1070
  %520 = load i8*, i8** %pIn_buf_end, align 8
  %521 = load i8*, i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast1072 = ptrtoint i8* %520 to i64
  %sub.ptr.rhs.cast1073 = ptrtoint i8* %521 to i64
  %sub.ptr.sub1074 = sub i64 %sub.ptr.lhs.cast1072, %sub.ptr.rhs.cast1073
  %cmp1075 = icmp slt i64 %sub.ptr.sub1074, 4
  br i1 %cmp1075, label %if.then1083, label %lor.lhs.false1077

lor.lhs.false1077:                                ; preds = %for.cond1071
  %522 = load i8*, i8** %pOut_buf_end, align 8
  %523 = load i8*, i8** %pOut_buf_cur, align 8
  %sub.ptr.lhs.cast1078 = ptrtoint i8* %522 to i64
  %sub.ptr.rhs.cast1079 = ptrtoint i8* %523 to i64
  %sub.ptr.sub1080 = sub i64 %sub.ptr.lhs.cast1078, %sub.ptr.rhs.cast1079
  %cmp1081 = icmp slt i64 %sub.ptr.sub1080, 2
  br i1 %cmp1081, label %if.then1083, label %if.else1240

if.then1083:                                      ; preds = %lor.lhs.false1077, %for.cond1071
  br label %do.body1084

do.body1084:                                      ; preds = %if.then1083
  %524 = load i32, i32* %num_bits, align 4
  %cmp1088 = icmp ult i32 %524, 15
  br i1 %cmp1088, label %if.then1090, label %if.end1188

if.then1090:                                      ; preds = %do.body1084
  %525 = load i8*, i8** %pIn_buf_end, align 8
  %526 = load i8*, i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast1091 = ptrtoint i8* %525 to i64
  %sub.ptr.rhs.cast1092 = ptrtoint i8* %526 to i64
  %sub.ptr.sub1093 = sub i64 %sub.ptr.lhs.cast1091, %sub.ptr.rhs.cast1092
  %cmp1094 = icmp slt i64 %sub.ptr.sub1093, 2
  br i1 %cmp1094, label %if.then1096, label %if.else1173

if.then1096:                                      ; preds = %if.then1090
  br label %do.body1097

do.body1097:                                      ; preds = %do.cond1169, %if.then1096
  %527 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1098 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %527, i32 0, i32 14
  %arrayidx1099 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1098, i64 0, i64 0
  %m_look_up1100 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1099, i32 0, i32 1
  %528 = load i64, i64* %bit_buf, align 8
  %and1101 = and i64 %528, 1023
  %arrayidx1102 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1100, i64 0, i64 %and1101
  %529 = load i16, i16* %arrayidx1102, align 2
  %conv1103 = sext i16 %529 to i32
  store i32 %conv1103, i32* %temp1085, align 4
  %530 = load i32, i32* %temp1085, align 4
  %cmp1104 = icmp sge i32 %530, 0
  br i1 %cmp1104, label %if.then1106, label %if.else1114

if.then1106:                                      ; preds = %do.body1097
  %531 = load i32, i32* %temp1085, align 4
  %shr1107 = ashr i32 %531, 9
  store i32 %shr1107, i32* %code_len1086, align 4
  %532 = load i32, i32* %code_len1086, align 4
  %tobool1108 = icmp ne i32 %532, 0
  br i1 %tobool1108, label %land.lhs.true1109, label %if.end1113

land.lhs.true1109:                                ; preds = %if.then1106
  %533 = load i32, i32* %num_bits, align 4
  %534 = load i32, i32* %code_len1086, align 4
  %cmp1110 = icmp uge i32 %533, %534
  br i1 %cmp1110, label %if.then1112, label %if.end1113

if.then1112:                                      ; preds = %land.lhs.true1109
  br label %do.end1172

if.end1113:                                       ; preds = %land.lhs.true1109, %if.then1106
  br label %if.end1145

if.else1114:                                      ; preds = %do.body1097
  %535 = load i32, i32* %num_bits, align 4
  %cmp1115 = icmp ugt i32 %535, 10
  br i1 %cmp1115, label %if.then1117, label %if.end1144

if.then1117:                                      ; preds = %if.else1114
  store i32 10, i32* %code_len1086, align 4
  br label %do.body1118

do.body1118:                                      ; preds = %land.end1138, %if.then1117
  %536 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1119 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %536, i32 0, i32 14
  %arrayidx1120 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1119, i64 0, i64 0
  %m_tree1121 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1120, i32 0, i32 2
  %537 = load i32, i32* %temp1085, align 4
  %neg1122 = xor i32 %537, -1
  %conv1123 = sext i32 %neg1122 to i64
  %538 = load i64, i64* %bit_buf, align 8
  %539 = load i32, i32* %code_len1086, align 4
  %inc1124 = add i32 %539, 1
  store i32 %inc1124, i32* %code_len1086, align 4
  %sh_prom1125 = zext i32 %539 to i64
  %shr1126 = lshr i64 %538, %sh_prom1125
  %and1127 = and i64 %shr1126, 1
  %add1128 = add i64 %conv1123, %and1127
  %arrayidx1129 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1121, i64 0, i64 %add1128
  %540 = load i16, i16* %arrayidx1129, align 2
  %conv1130 = sext i16 %540 to i32
  store i32 %conv1130, i32* %temp1085, align 4
  br label %do.cond1131

do.cond1131:                                      ; preds = %do.body1118
  %541 = load i32, i32* %temp1085, align 4
  %cmp1132 = icmp slt i32 %541, 0
  br i1 %cmp1132, label %land.rhs1134, label %land.end1138

land.rhs1134:                                     ; preds = %do.cond1131
  %542 = load i32, i32* %num_bits, align 4
  %543 = load i32, i32* %code_len1086, align 4
  %add1135 = add i32 %543, 1
  %cmp1136 = icmp uge i32 %542, %add1135
  br label %land.end1138

land.end1138:                                     ; preds = %land.rhs1134, %do.cond1131
  %544 = phi i1 [ false, %do.cond1131 ], [ %cmp1136, %land.rhs1134 ]
  br i1 %544, label %do.body1118, label %do.end1139

do.end1139:                                       ; preds = %land.end1138
  %545 = load i32, i32* %temp1085, align 4
  %cmp1140 = icmp sge i32 %545, 0
  br i1 %cmp1140, label %if.then1142, label %if.end1143

if.then1142:                                      ; preds = %do.end1139
  br label %do.end1172

if.end1143:                                       ; preds = %do.end1139
  br label %if.end1144

if.end1144:                                       ; preds = %if.end1143, %if.else1114
  br label %if.end1145

if.end1145:                                       ; preds = %if.end1144, %if.end1113
  br label %do.body1146

do.body1146:                                      ; preds = %if.end1145
  br label %while.cond1147

while.cond1147:                                   ; preds = %do.end1158, %do.body1146
  %546 = load i8*, i8** %pIn_buf_cur, align 8
  %547 = load i8*, i8** %pIn_buf_end, align 8
  %cmp1148 = icmp uge i8* %546, %547
  br i1 %cmp1148, label %while.body1150, label %while.end1159

while.body1150:                                   ; preds = %while.cond1147
  br label %do.body1151

do.body1151:                                      ; preds = %while.body1150
  %548 = load i32, i32* %decomp_flags.addr, align 4
  %and1152 = and i32 %548, 2
  %tobool1153 = icmp ne i32 %and1152, 0
  %cond1154 = select i1 %tobool1153, i32 1, i32 -4
  store i32 %cond1154, i32* %status, align 4
  %549 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1155 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %549, i32 0, i32 0
  store i32 23, i32* %m_state1155, align 8
  br label %common_exit

sw.bb1156:                                        ; preds = %if.end
  br label %do.end1158

do.end1158:                                       ; preds = %sw.bb1156
  br label %while.cond1147

while.end1159:                                    ; preds = %while.cond1147
  %550 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1160 = getelementptr inbounds i8, i8* %550, i32 1
  store i8* %incdec.ptr1160, i8** %pIn_buf_cur, align 8
  %551 = load i8, i8* %550, align 1
  %conv1161 = zext i8 %551 to i32
  store i32 %conv1161, i32* %c1087, align 4
  br label %do.end1163

do.end1163:                                       ; preds = %while.end1159
  %552 = load i32, i32* %c1087, align 4
  %conv1164 = zext i32 %552 to i64
  %553 = load i32, i32* %num_bits, align 4
  %sh_prom1165 = zext i32 %553 to i64
  %shl1166 = shl i64 %conv1164, %sh_prom1165
  %554 = load i64, i64* %bit_buf, align 8
  %or1167 = or i64 %554, %shl1166
  store i64 %or1167, i64* %bit_buf, align 8
  %555 = load i32, i32* %num_bits, align 4
  %add1168 = add i32 %555, 8
  store i32 %add1168, i32* %num_bits, align 4
  br label %do.cond1169

do.cond1169:                                      ; preds = %do.end1163
  %556 = load i32, i32* %num_bits, align 4
  %cmp1170 = icmp ult i32 %556, 15
  br i1 %cmp1170, label %do.body1097, label %do.end1172

do.end1172:                                       ; preds = %do.cond1169, %if.then1142, %if.then1112
  br label %if.end1187

if.else1173:                                      ; preds = %if.then1090
  %557 = load i8*, i8** %pIn_buf_cur, align 8
  %arrayidx1174 = getelementptr inbounds i8, i8* %557, i64 0
  %558 = load i8, i8* %arrayidx1174, align 1
  %conv1175 = zext i8 %558 to i64
  %559 = load i32, i32* %num_bits, align 4
  %sh_prom1176 = zext i32 %559 to i64
  %shl1177 = shl i64 %conv1175, %sh_prom1176
  %560 = load i8*, i8** %pIn_buf_cur, align 8
  %arrayidx1178 = getelementptr inbounds i8, i8* %560, i64 1
  %561 = load i8, i8* %arrayidx1178, align 1
  %conv1179 = zext i8 %561 to i64
  %562 = load i32, i32* %num_bits, align 4
  %add1180 = add i32 %562, 8
  %sh_prom1181 = zext i32 %add1180 to i64
  %shl1182 = shl i64 %conv1179, %sh_prom1181
  %or1183 = or i64 %shl1177, %shl1182
  %563 = load i64, i64* %bit_buf, align 8
  %or1184 = or i64 %563, %or1183
  store i64 %or1184, i64* %bit_buf, align 8
  %564 = load i8*, i8** %pIn_buf_cur, align 8
  %add.ptr1185 = getelementptr inbounds i8, i8* %564, i64 2
  store i8* %add.ptr1185, i8** %pIn_buf_cur, align 8
  %565 = load i32, i32* %num_bits, align 4
  %add1186 = add i32 %565, 16
  store i32 %add1186, i32* %num_bits, align 4
  br label %if.end1187

if.end1187:                                       ; preds = %if.else1173, %do.end1172
  br label %if.end1188

if.end1188:                                       ; preds = %if.end1187, %do.body1084
  %566 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1189 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %566, i32 0, i32 14
  %arrayidx1190 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1189, i64 0, i64 0
  %m_look_up1191 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1190, i32 0, i32 1
  %567 = load i64, i64* %bit_buf, align 8
  %and1192 = and i64 %567, 1023
  %arrayidx1193 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1191, i64 0, i64 %and1192
  %568 = load i16, i16* %arrayidx1193, align 2
  %conv1194 = sext i16 %568 to i32
  store i32 %conv1194, i32* %temp1085, align 4
  %cmp1195 = icmp sge i32 %conv1194, 0
  br i1 %cmp1195, label %if.then1197, label %if.else1200

if.then1197:                                      ; preds = %if.end1188
  %569 = load i32, i32* %temp1085, align 4
  %shr1198 = ashr i32 %569, 9
  store i32 %shr1198, i32* %code_len1086, align 4
  %570 = load i32, i32* %temp1085, align 4
  %and1199 = and i32 %570, 511
  store i32 %and1199, i32* %temp1085, align 4
  br label %if.end1218

if.else1200:                                      ; preds = %if.end1188
  store i32 10, i32* %code_len1086, align 4
  br label %do.body1201

do.body1201:                                      ; preds = %do.cond1214, %if.else1200
  %571 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1202 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %571, i32 0, i32 14
  %arrayidx1203 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1202, i64 0, i64 0
  %m_tree1204 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1203, i32 0, i32 2
  %572 = load i32, i32* %temp1085, align 4
  %neg1205 = xor i32 %572, -1
  %conv1206 = sext i32 %neg1205 to i64
  %573 = load i64, i64* %bit_buf, align 8
  %574 = load i32, i32* %code_len1086, align 4
  %inc1207 = add i32 %574, 1
  store i32 %inc1207, i32* %code_len1086, align 4
  %sh_prom1208 = zext i32 %574 to i64
  %shr1209 = lshr i64 %573, %sh_prom1208
  %and1210 = and i64 %shr1209, 1
  %add1211 = add i64 %conv1206, %and1210
  %arrayidx1212 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1204, i64 0, i64 %add1211
  %575 = load i16, i16* %arrayidx1212, align 2
  %conv1213 = sext i16 %575 to i32
  store i32 %conv1213, i32* %temp1085, align 4
  br label %do.cond1214

do.cond1214:                                      ; preds = %do.body1201
  %576 = load i32, i32* %temp1085, align 4
  %cmp1215 = icmp slt i32 %576, 0
  br i1 %cmp1215, label %do.body1201, label %do.end1217

do.end1217:                                       ; preds = %do.cond1214
  br label %if.end1218

if.end1218:                                       ; preds = %do.end1217, %if.then1197
  %577 = load i32, i32* %temp1085, align 4
  store i32 %577, i32* %counter, align 4
  %578 = load i32, i32* %code_len1086, align 4
  %579 = load i64, i64* %bit_buf, align 8
  %sh_prom1219 = zext i32 %578 to i64
  %shr1220 = lshr i64 %579, %sh_prom1219
  store i64 %shr1220, i64* %bit_buf, align 8
  %580 = load i32, i32* %code_len1086, align 4
  %581 = load i32, i32* %num_bits, align 4
  %sub1221 = sub i32 %581, %580
  store i32 %sub1221, i32* %num_bits, align 4
  br label %do.end1223

do.end1223:                                       ; preds = %if.end1218
  %582 = load i32, i32* %counter, align 4
  %cmp1224 = icmp uge i32 %582, 256
  br i1 %cmp1224, label %if.then1226, label %if.end1227

if.then1226:                                      ; preds = %do.end1223
  br label %for.end1331

if.end1227:                                       ; preds = %do.end1223
  br label %while.cond1228

while.cond1228:                                   ; preds = %do.end1236, %if.end1227
  %583 = load i8*, i8** %pOut_buf_cur, align 8
  %584 = load i8*, i8** %pOut_buf_end, align 8
  %cmp1229 = icmp uge i8* %583, %584
  br i1 %cmp1229, label %while.body1231, label %while.end1237

while.body1231:                                   ; preds = %while.cond1228
  br label %do.body1232

do.body1232:                                      ; preds = %while.body1231
  store i32 2, i32* %status, align 4
  %585 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1233 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %585, i32 0, i32 0
  store i32 24, i32* %m_state1233, align 8
  br label %common_exit

sw.bb1234:                                        ; preds = %if.end
  br label %do.end1236

do.end1236:                                       ; preds = %sw.bb1234
  br label %while.cond1228

while.end1237:                                    ; preds = %while.cond1228
  %586 = load i32, i32* %counter, align 4
  %conv1238 = trunc i32 %586 to i8
  %587 = load i8*, i8** %pOut_buf_cur, align 8
  %incdec.ptr1239 = getelementptr inbounds i8, i8* %587, i32 1
  store i8* %incdec.ptr1239, i8** %pOut_buf_cur, align 8
  store i8 %conv1238, i8* %587, align 1
  br label %if.end1330

if.else1240:                                      ; preds = %lor.lhs.false1077
  %588 = load i32, i32* %num_bits, align 4
  %cmp1242 = icmp ult i32 %588, 30
  br i1 %cmp1242, label %if.then1244, label %if.end1251

if.then1244:                                      ; preds = %if.else1240
  %589 = load i8*, i8** %pIn_buf_cur, align 8
  %590 = bitcast i8* %589 to i32*
  %591 = load i32, i32* %590, align 4
  %conv1245 = zext i32 %591 to i64
  %592 = load i32, i32* %num_bits, align 4
  %sh_prom1246 = zext i32 %592 to i64
  %shl1247 = shl i64 %conv1245, %sh_prom1246
  %593 = load i64, i64* %bit_buf, align 8
  %or1248 = or i64 %593, %shl1247
  store i64 %or1248, i64* %bit_buf, align 8
  %594 = load i8*, i8** %pIn_buf_cur, align 8
  %add.ptr1249 = getelementptr inbounds i8, i8* %594, i64 4
  store i8* %add.ptr1249, i8** %pIn_buf_cur, align 8
  %595 = load i32, i32* %num_bits, align 4
  %add1250 = add i32 %595, 32
  store i32 %add1250, i32* %num_bits, align 4
  br label %if.end1251

if.end1251:                                       ; preds = %if.then1244, %if.else1240
  %596 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1252 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %596, i32 0, i32 14
  %arrayidx1253 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1252, i64 0, i64 0
  %m_look_up1254 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1253, i32 0, i32 1
  %597 = load i64, i64* %bit_buf, align 8
  %and1255 = and i64 %597, 1023
  %arrayidx1256 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1254, i64 0, i64 %and1255
  %598 = load i16, i16* %arrayidx1256, align 2
  %conv1257 = sext i16 %598 to i32
  store i32 %conv1257, i32* %sym2, align 4
  %cmp1258 = icmp sge i32 %conv1257, 0
  br i1 %cmp1258, label %if.then1260, label %if.else1262

if.then1260:                                      ; preds = %if.end1251
  %599 = load i32, i32* %sym2, align 4
  %shr1261 = ashr i32 %599, 9
  store i32 %shr1261, i32* %code_len1241, align 4
  br label %if.end1280

if.else1262:                                      ; preds = %if.end1251
  store i32 10, i32* %code_len1241, align 4
  br label %do.body1263

do.body1263:                                      ; preds = %do.cond1276, %if.else1262
  %600 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1264 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %600, i32 0, i32 14
  %arrayidx1265 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1264, i64 0, i64 0
  %m_tree1266 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1265, i32 0, i32 2
  %601 = load i32, i32* %sym2, align 4
  %neg1267 = xor i32 %601, -1
  %conv1268 = sext i32 %neg1267 to i64
  %602 = load i64, i64* %bit_buf, align 8
  %603 = load i32, i32* %code_len1241, align 4
  %inc1269 = add i32 %603, 1
  store i32 %inc1269, i32* %code_len1241, align 4
  %sh_prom1270 = zext i32 %603 to i64
  %shr1271 = lshr i64 %602, %sh_prom1270
  %and1272 = and i64 %shr1271, 1
  %add1273 = add i64 %conv1268, %and1272
  %arrayidx1274 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1266, i64 0, i64 %add1273
  %604 = load i16, i16* %arrayidx1274, align 2
  %conv1275 = sext i16 %604 to i32
  store i32 %conv1275, i32* %sym2, align 4
  br label %do.cond1276

do.cond1276:                                      ; preds = %do.body1263
  %605 = load i32, i32* %sym2, align 4
  %cmp1277 = icmp slt i32 %605, 0
  br i1 %cmp1277, label %do.body1263, label %do.end1279

do.end1279:                                       ; preds = %do.cond1276
  br label %if.end1280

if.end1280:                                       ; preds = %do.end1279, %if.then1260
  %606 = load i32, i32* %sym2, align 4
  store i32 %606, i32* %counter, align 4
  %607 = load i32, i32* %code_len1241, align 4
  %608 = load i64, i64* %bit_buf, align 8
  %sh_prom1281 = zext i32 %607 to i64
  %shr1282 = lshr i64 %608, %sh_prom1281
  store i64 %shr1282, i64* %bit_buf, align 8
  %609 = load i32, i32* %code_len1241, align 4
  %610 = load i32, i32* %num_bits, align 4
  %sub1283 = sub i32 %610, %609
  store i32 %sub1283, i32* %num_bits, align 4
  %611 = load i32, i32* %counter, align 4
  %and1284 = and i32 %611, 256
  %tobool1285 = icmp ne i32 %and1284, 0
  br i1 %tobool1285, label %if.then1286, label %if.end1287

if.then1286:                                      ; preds = %if.end1280
  br label %for.end1331

if.end1287:                                       ; preds = %if.end1280
  %612 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1288 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %612, i32 0, i32 14
  %arrayidx1289 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1288, i64 0, i64 0
  %m_look_up1290 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1289, i32 0, i32 1
  %613 = load i64, i64* %bit_buf, align 8
  %and1291 = and i64 %613, 1023
  %arrayidx1292 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1290, i64 0, i64 %and1291
  %614 = load i16, i16* %arrayidx1292, align 2
  %conv1293 = sext i16 %614 to i32
  store i32 %conv1293, i32* %sym2, align 4
  %cmp1294 = icmp sge i32 %conv1293, 0
  br i1 %cmp1294, label %if.then1296, label %if.else1298

if.then1296:                                      ; preds = %if.end1287
  %615 = load i32, i32* %sym2, align 4
  %shr1297 = ashr i32 %615, 9
  store i32 %shr1297, i32* %code_len1241, align 4
  br label %if.end1316

if.else1298:                                      ; preds = %if.end1287
  store i32 10, i32* %code_len1241, align 4
  br label %do.body1299

do.body1299:                                      ; preds = %do.cond1312, %if.else1298
  %616 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1300 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %616, i32 0, i32 14
  %arrayidx1301 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1300, i64 0, i64 0
  %m_tree1302 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1301, i32 0, i32 2
  %617 = load i32, i32* %sym2, align 4
  %neg1303 = xor i32 %617, -1
  %conv1304 = sext i32 %neg1303 to i64
  %618 = load i64, i64* %bit_buf, align 8
  %619 = load i32, i32* %code_len1241, align 4
  %inc1305 = add i32 %619, 1
  store i32 %inc1305, i32* %code_len1241, align 4
  %sh_prom1306 = zext i32 %619 to i64
  %shr1307 = lshr i64 %618, %sh_prom1306
  %and1308 = and i64 %shr1307, 1
  %add1309 = add i64 %conv1304, %and1308
  %arrayidx1310 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1302, i64 0, i64 %add1309
  %620 = load i16, i16* %arrayidx1310, align 2
  %conv1311 = sext i16 %620 to i32
  store i32 %conv1311, i32* %sym2, align 4
  br label %do.cond1312

do.cond1312:                                      ; preds = %do.body1299
  %621 = load i32, i32* %sym2, align 4
  %cmp1313 = icmp slt i32 %621, 0
  br i1 %cmp1313, label %do.body1299, label %do.end1315

do.end1315:                                       ; preds = %do.cond1312
  br label %if.end1316

if.end1316:                                       ; preds = %do.end1315, %if.then1296
  %622 = load i32, i32* %code_len1241, align 4
  %623 = load i64, i64* %bit_buf, align 8
  %sh_prom1317 = zext i32 %622 to i64
  %shr1318 = lshr i64 %623, %sh_prom1317
  store i64 %shr1318, i64* %bit_buf, align 8
  %624 = load i32, i32* %code_len1241, align 4
  %625 = load i32, i32* %num_bits, align 4
  %sub1319 = sub i32 %625, %624
  store i32 %sub1319, i32* %num_bits, align 4
  %626 = load i32, i32* %counter, align 4
  %conv1320 = trunc i32 %626 to i8
  %627 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1321 = getelementptr inbounds i8, i8* %627, i64 0
  store i8 %conv1320, i8* %arrayidx1321, align 1
  %628 = load i32, i32* %sym2, align 4
  %and1322 = and i32 %628, 256
  %tobool1323 = icmp ne i32 %and1322, 0
  br i1 %tobool1323, label %if.then1324, label %if.end1326

if.then1324:                                      ; preds = %if.end1316
  %629 = load i8*, i8** %pOut_buf_cur, align 8
  %incdec.ptr1325 = getelementptr inbounds i8, i8* %629, i32 1
  store i8* %incdec.ptr1325, i8** %pOut_buf_cur, align 8
  %630 = load i32, i32* %sym2, align 4
  store i32 %630, i32* %counter, align 4
  br label %for.end1331

if.end1326:                                       ; preds = %if.end1316
  %631 = load i32, i32* %sym2, align 4
  %conv1327 = trunc i32 %631 to i8
  %632 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1328 = getelementptr inbounds i8, i8* %632, i64 1
  store i8 %conv1327, i8* %arrayidx1328, align 1
  %633 = load i8*, i8** %pOut_buf_cur, align 8
  %add.ptr1329 = getelementptr inbounds i8, i8* %633, i64 2
  store i8* %add.ptr1329, i8** %pOut_buf_cur, align 8
  br label %if.end1330

if.end1330:                                       ; preds = %if.end1326, %while.end1237
  br label %for.cond1071

for.end1331:                                      ; preds = %if.then1324, %if.then1286, %if.then1226
  %634 = load i32, i32* %counter, align 4
  %and1332 = and i32 %634, 511
  store i32 %and1332, i32* %counter, align 4
  %cmp1333 = icmp eq i32 %and1332, 256
  br i1 %cmp1333, label %if.then1335, label %if.end1336

if.then1335:                                      ; preds = %for.end1331
  br label %for.end1706

if.end1336:                                       ; preds = %for.end1331
  %635 = load i32, i32* %counter, align 4
  %sub1337 = sub i32 %635, 257
  %idxprom1338 = zext i32 %sub1337 to i64
  %arrayidx1339 = getelementptr inbounds [31 x i32], [31 x i32]* @tinfl_decompress.s_length_extra, i64 0, i64 %idxprom1338
  %636 = load i32, i32* %arrayidx1339, align 4
  store i32 %636, i32* %num_extra, align 4
  %637 = load i32, i32* %counter, align 4
  %sub1340 = sub i32 %637, 257
  %idxprom1341 = zext i32 %sub1340 to i64
  %arrayidx1342 = getelementptr inbounds [31 x i32], [31 x i32]* @tinfl_decompress.s_length_base, i64 0, i64 %idxprom1341
  %638 = load i32, i32* %arrayidx1342, align 4
  store i32 %638, i32* %counter, align 4
  %639 = load i32, i32* %num_extra, align 4
  %tobool1343 = icmp ne i32 %639, 0
  br i1 %tobool1343, label %if.then1344, label %if.end1390

if.then1344:                                      ; preds = %if.end1336
  br label %do.body1345

do.body1345:                                      ; preds = %if.then1344
  %640 = load i32, i32* %num_bits, align 4
  %641 = load i32, i32* %num_extra, align 4
  %cmp1346 = icmp ult i32 %640, %641
  br i1 %cmp1346, label %if.then1348, label %if.end1378

if.then1348:                                      ; preds = %do.body1345
  br label %do.body1349

do.body1349:                                      ; preds = %do.cond1374, %if.then1348
  br label %do.body1351

do.body1351:                                      ; preds = %do.body1349
  br label %while.cond1352

while.cond1352:                                   ; preds = %do.end1363, %do.body1351
  %642 = load i8*, i8** %pIn_buf_cur, align 8
  %643 = load i8*, i8** %pIn_buf_end, align 8
  %cmp1353 = icmp uge i8* %642, %643
  br i1 %cmp1353, label %while.body1355, label %while.end1364

while.body1355:                                   ; preds = %while.cond1352
  br label %do.body1356

do.body1356:                                      ; preds = %while.body1355
  %644 = load i32, i32* %decomp_flags.addr, align 4
  %and1357 = and i32 %644, 2
  %tobool1358 = icmp ne i32 %and1357, 0
  %cond1359 = select i1 %tobool1358, i32 1, i32 -4
  store i32 %cond1359, i32* %status, align 4
  %645 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1360 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %645, i32 0, i32 0
  store i32 25, i32* %m_state1360, align 8
  br label %common_exit

sw.bb1361:                                        ; preds = %if.end
  br label %do.end1363

do.end1363:                                       ; preds = %sw.bb1361
  br label %while.cond1352

while.end1364:                                    ; preds = %while.cond1352
  %646 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1365 = getelementptr inbounds i8, i8* %646, i32 1
  store i8* %incdec.ptr1365, i8** %pIn_buf_cur, align 8
  %647 = load i8, i8* %646, align 1
  %conv1366 = zext i8 %647 to i32
  store i32 %conv1366, i32* %c1350, align 4
  br label %do.end1368

do.end1368:                                       ; preds = %while.end1364
  %648 = load i32, i32* %c1350, align 4
  %conv1369 = zext i32 %648 to i64
  %649 = load i32, i32* %num_bits, align 4
  %sh_prom1370 = zext i32 %649 to i64
  %shl1371 = shl i64 %conv1369, %sh_prom1370
  %650 = load i64, i64* %bit_buf, align 8
  %or1372 = or i64 %650, %shl1371
  store i64 %or1372, i64* %bit_buf, align 8
  %651 = load i32, i32* %num_bits, align 4
  %add1373 = add i32 %651, 8
  store i32 %add1373, i32* %num_bits, align 4
  br label %do.cond1374

do.cond1374:                                      ; preds = %do.end1368
  %652 = load i32, i32* %num_bits, align 4
  %653 = load i32, i32* %num_extra, align 4
  %cmp1375 = icmp ult i32 %652, %653
  br i1 %cmp1375, label %do.body1349, label %do.end1377

do.end1377:                                       ; preds = %do.cond1374
  br label %if.end1378

if.end1378:                                       ; preds = %do.end1377, %do.body1345
  %654 = load i64, i64* %bit_buf, align 8
  %655 = load i32, i32* %num_extra, align 4
  %shl1379 = shl i32 1, %655
  %sub1380 = sub nsw i32 %shl1379, 1
  %conv1381 = sext i32 %sub1380 to i64
  %and1382 = and i64 %654, %conv1381
  %conv1383 = trunc i64 %and1382 to i32
  store i32 %conv1383, i32* %extra_bits, align 4
  %656 = load i32, i32* %num_extra, align 4
  %657 = load i64, i64* %bit_buf, align 8
  %sh_prom1384 = zext i32 %656 to i64
  %shr1385 = lshr i64 %657, %sh_prom1384
  store i64 %shr1385, i64* %bit_buf, align 8
  %658 = load i32, i32* %num_extra, align 4
  %659 = load i32, i32* %num_bits, align 4
  %sub1386 = sub i32 %659, %658
  store i32 %sub1386, i32* %num_bits, align 4
  br label %do.end1388

do.end1388:                                       ; preds = %if.end1378
  %660 = load i32, i32* %extra_bits, align 4
  %661 = load i32, i32* %counter, align 4
  %add1389 = add i32 %661, %660
  store i32 %add1389, i32* %counter, align 4
  br label %if.end1390

if.end1390:                                       ; preds = %do.end1388, %if.end1336
  br label %do.body1391

do.body1391:                                      ; preds = %if.end1390
  %662 = load i32, i32* %num_bits, align 4
  %cmp1395 = icmp ult i32 %662, 15
  br i1 %cmp1395, label %if.then1397, label %if.end1495

if.then1397:                                      ; preds = %do.body1391
  %663 = load i8*, i8** %pIn_buf_end, align 8
  %664 = load i8*, i8** %pIn_buf_cur, align 8
  %sub.ptr.lhs.cast1398 = ptrtoint i8* %663 to i64
  %sub.ptr.rhs.cast1399 = ptrtoint i8* %664 to i64
  %sub.ptr.sub1400 = sub i64 %sub.ptr.lhs.cast1398, %sub.ptr.rhs.cast1399
  %cmp1401 = icmp slt i64 %sub.ptr.sub1400, 2
  br i1 %cmp1401, label %if.then1403, label %if.else1480

if.then1403:                                      ; preds = %if.then1397
  br label %do.body1404

do.body1404:                                      ; preds = %do.cond1476, %if.then1403
  %665 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1405 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %665, i32 0, i32 14
  %arrayidx1406 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1405, i64 0, i64 1
  %m_look_up1407 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1406, i32 0, i32 1
  %666 = load i64, i64* %bit_buf, align 8
  %and1408 = and i64 %666, 1023
  %arrayidx1409 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1407, i64 0, i64 %and1408
  %667 = load i16, i16* %arrayidx1409, align 2
  %conv1410 = sext i16 %667 to i32
  store i32 %conv1410, i32* %temp1392, align 4
  %668 = load i32, i32* %temp1392, align 4
  %cmp1411 = icmp sge i32 %668, 0
  br i1 %cmp1411, label %if.then1413, label %if.else1421

if.then1413:                                      ; preds = %do.body1404
  %669 = load i32, i32* %temp1392, align 4
  %shr1414 = ashr i32 %669, 9
  store i32 %shr1414, i32* %code_len1393, align 4
  %670 = load i32, i32* %code_len1393, align 4
  %tobool1415 = icmp ne i32 %670, 0
  br i1 %tobool1415, label %land.lhs.true1416, label %if.end1420

land.lhs.true1416:                                ; preds = %if.then1413
  %671 = load i32, i32* %num_bits, align 4
  %672 = load i32, i32* %code_len1393, align 4
  %cmp1417 = icmp uge i32 %671, %672
  br i1 %cmp1417, label %if.then1419, label %if.end1420

if.then1419:                                      ; preds = %land.lhs.true1416
  br label %do.end1479

if.end1420:                                       ; preds = %land.lhs.true1416, %if.then1413
  br label %if.end1452

if.else1421:                                      ; preds = %do.body1404
  %673 = load i32, i32* %num_bits, align 4
  %cmp1422 = icmp ugt i32 %673, 10
  br i1 %cmp1422, label %if.then1424, label %if.end1451

if.then1424:                                      ; preds = %if.else1421
  store i32 10, i32* %code_len1393, align 4
  br label %do.body1425

do.body1425:                                      ; preds = %land.end1445, %if.then1424
  %674 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1426 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %674, i32 0, i32 14
  %arrayidx1427 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1426, i64 0, i64 1
  %m_tree1428 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1427, i32 0, i32 2
  %675 = load i32, i32* %temp1392, align 4
  %neg1429 = xor i32 %675, -1
  %conv1430 = sext i32 %neg1429 to i64
  %676 = load i64, i64* %bit_buf, align 8
  %677 = load i32, i32* %code_len1393, align 4
  %inc1431 = add i32 %677, 1
  store i32 %inc1431, i32* %code_len1393, align 4
  %sh_prom1432 = zext i32 %677 to i64
  %shr1433 = lshr i64 %676, %sh_prom1432
  %and1434 = and i64 %shr1433, 1
  %add1435 = add i64 %conv1430, %and1434
  %arrayidx1436 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1428, i64 0, i64 %add1435
  %678 = load i16, i16* %arrayidx1436, align 2
  %conv1437 = sext i16 %678 to i32
  store i32 %conv1437, i32* %temp1392, align 4
  br label %do.cond1438

do.cond1438:                                      ; preds = %do.body1425
  %679 = load i32, i32* %temp1392, align 4
  %cmp1439 = icmp slt i32 %679, 0
  br i1 %cmp1439, label %land.rhs1441, label %land.end1445

land.rhs1441:                                     ; preds = %do.cond1438
  %680 = load i32, i32* %num_bits, align 4
  %681 = load i32, i32* %code_len1393, align 4
  %add1442 = add i32 %681, 1
  %cmp1443 = icmp uge i32 %680, %add1442
  br label %land.end1445

land.end1445:                                     ; preds = %land.rhs1441, %do.cond1438
  %682 = phi i1 [ false, %do.cond1438 ], [ %cmp1443, %land.rhs1441 ]
  br i1 %682, label %do.body1425, label %do.end1446

do.end1446:                                       ; preds = %land.end1445
  %683 = load i32, i32* %temp1392, align 4
  %cmp1447 = icmp sge i32 %683, 0
  br i1 %cmp1447, label %if.then1449, label %if.end1450

if.then1449:                                      ; preds = %do.end1446
  br label %do.end1479

if.end1450:                                       ; preds = %do.end1446
  br label %if.end1451

if.end1451:                                       ; preds = %if.end1450, %if.else1421
  br label %if.end1452

if.end1452:                                       ; preds = %if.end1451, %if.end1420
  br label %do.body1453

do.body1453:                                      ; preds = %if.end1452
  br label %while.cond1454

while.cond1454:                                   ; preds = %do.end1465, %do.body1453
  %684 = load i8*, i8** %pIn_buf_cur, align 8
  %685 = load i8*, i8** %pIn_buf_end, align 8
  %cmp1455 = icmp uge i8* %684, %685
  br i1 %cmp1455, label %while.body1457, label %while.end1466

while.body1457:                                   ; preds = %while.cond1454
  br label %do.body1458

do.body1458:                                      ; preds = %while.body1457
  %686 = load i32, i32* %decomp_flags.addr, align 4
  %and1459 = and i32 %686, 2
  %tobool1460 = icmp ne i32 %and1459, 0
  %cond1461 = select i1 %tobool1460, i32 1, i32 -4
  store i32 %cond1461, i32* %status, align 4
  %687 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1462 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %687, i32 0, i32 0
  store i32 26, i32* %m_state1462, align 8
  br label %common_exit

sw.bb1463:                                        ; preds = %if.end
  br label %do.end1465

do.end1465:                                       ; preds = %sw.bb1463
  br label %while.cond1454

while.end1466:                                    ; preds = %while.cond1454
  %688 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1467 = getelementptr inbounds i8, i8* %688, i32 1
  store i8* %incdec.ptr1467, i8** %pIn_buf_cur, align 8
  %689 = load i8, i8* %688, align 1
  %conv1468 = zext i8 %689 to i32
  store i32 %conv1468, i32* %c1394, align 4
  br label %do.end1470

do.end1470:                                       ; preds = %while.end1466
  %690 = load i32, i32* %c1394, align 4
  %conv1471 = zext i32 %690 to i64
  %691 = load i32, i32* %num_bits, align 4
  %sh_prom1472 = zext i32 %691 to i64
  %shl1473 = shl i64 %conv1471, %sh_prom1472
  %692 = load i64, i64* %bit_buf, align 8
  %or1474 = or i64 %692, %shl1473
  store i64 %or1474, i64* %bit_buf, align 8
  %693 = load i32, i32* %num_bits, align 4
  %add1475 = add i32 %693, 8
  store i32 %add1475, i32* %num_bits, align 4
  br label %do.cond1476

do.cond1476:                                      ; preds = %do.end1470
  %694 = load i32, i32* %num_bits, align 4
  %cmp1477 = icmp ult i32 %694, 15
  br i1 %cmp1477, label %do.body1404, label %do.end1479

do.end1479:                                       ; preds = %do.cond1476, %if.then1449, %if.then1419
  br label %if.end1494

if.else1480:                                      ; preds = %if.then1397
  %695 = load i8*, i8** %pIn_buf_cur, align 8
  %arrayidx1481 = getelementptr inbounds i8, i8* %695, i64 0
  %696 = load i8, i8* %arrayidx1481, align 1
  %conv1482 = zext i8 %696 to i64
  %697 = load i32, i32* %num_bits, align 4
  %sh_prom1483 = zext i32 %697 to i64
  %shl1484 = shl i64 %conv1482, %sh_prom1483
  %698 = load i8*, i8** %pIn_buf_cur, align 8
  %arrayidx1485 = getelementptr inbounds i8, i8* %698, i64 1
  %699 = load i8, i8* %arrayidx1485, align 1
  %conv1486 = zext i8 %699 to i64
  %700 = load i32, i32* %num_bits, align 4
  %add1487 = add i32 %700, 8
  %sh_prom1488 = zext i32 %add1487 to i64
  %shl1489 = shl i64 %conv1486, %sh_prom1488
  %or1490 = or i64 %shl1484, %shl1489
  %701 = load i64, i64* %bit_buf, align 8
  %or1491 = or i64 %701, %or1490
  store i64 %or1491, i64* %bit_buf, align 8
  %702 = load i8*, i8** %pIn_buf_cur, align 8
  %add.ptr1492 = getelementptr inbounds i8, i8* %702, i64 2
  store i8* %add.ptr1492, i8** %pIn_buf_cur, align 8
  %703 = load i32, i32* %num_bits, align 4
  %add1493 = add i32 %703, 16
  store i32 %add1493, i32* %num_bits, align 4
  br label %if.end1494

if.end1494:                                       ; preds = %if.else1480, %do.end1479
  br label %if.end1495

if.end1495:                                       ; preds = %if.end1494, %do.body1391
  %704 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1496 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %704, i32 0, i32 14
  %arrayidx1497 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1496, i64 0, i64 1
  %m_look_up1498 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1497, i32 0, i32 1
  %705 = load i64, i64* %bit_buf, align 8
  %and1499 = and i64 %705, 1023
  %arrayidx1500 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1498, i64 0, i64 %and1499
  %706 = load i16, i16* %arrayidx1500, align 2
  %conv1501 = sext i16 %706 to i32
  store i32 %conv1501, i32* %temp1392, align 4
  %cmp1502 = icmp sge i32 %conv1501, 0
  br i1 %cmp1502, label %if.then1504, label %if.else1507

if.then1504:                                      ; preds = %if.end1495
  %707 = load i32, i32* %temp1392, align 4
  %shr1505 = ashr i32 %707, 9
  store i32 %shr1505, i32* %code_len1393, align 4
  %708 = load i32, i32* %temp1392, align 4
  %and1506 = and i32 %708, 511
  store i32 %and1506, i32* %temp1392, align 4
  br label %if.end1525

if.else1507:                                      ; preds = %if.end1495
  store i32 10, i32* %code_len1393, align 4
  br label %do.body1508

do.body1508:                                      ; preds = %do.cond1521, %if.else1507
  %709 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_tables1509 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %709, i32 0, i32 14
  %arrayidx1510 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1509, i64 0, i64 1
  %m_tree1511 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1510, i32 0, i32 2
  %710 = load i32, i32* %temp1392, align 4
  %neg1512 = xor i32 %710, -1
  %conv1513 = sext i32 %neg1512 to i64
  %711 = load i64, i64* %bit_buf, align 8
  %712 = load i32, i32* %code_len1393, align 4
  %inc1514 = add i32 %712, 1
  store i32 %inc1514, i32* %code_len1393, align 4
  %sh_prom1515 = zext i32 %712 to i64
  %shr1516 = lshr i64 %711, %sh_prom1515
  %and1517 = and i64 %shr1516, 1
  %add1518 = add i64 %conv1513, %and1517
  %arrayidx1519 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1511, i64 0, i64 %add1518
  %713 = load i16, i16* %arrayidx1519, align 2
  %conv1520 = sext i16 %713 to i32
  store i32 %conv1520, i32* %temp1392, align 4
  br label %do.cond1521

do.cond1521:                                      ; preds = %do.body1508
  %714 = load i32, i32* %temp1392, align 4
  %cmp1522 = icmp slt i32 %714, 0
  br i1 %cmp1522, label %do.body1508, label %do.end1524

do.end1524:                                       ; preds = %do.cond1521
  br label %if.end1525

if.end1525:                                       ; preds = %do.end1524, %if.then1504
  %715 = load i32, i32* %temp1392, align 4
  store i32 %715, i32* %dist, align 4
  %716 = load i32, i32* %code_len1393, align 4
  %717 = load i64, i64* %bit_buf, align 8
  %sh_prom1526 = zext i32 %716 to i64
  %shr1527 = lshr i64 %717, %sh_prom1526
  store i64 %shr1527, i64* %bit_buf, align 8
  %718 = load i32, i32* %code_len1393, align 4
  %719 = load i32, i32* %num_bits, align 4
  %sub1528 = sub i32 %719, %718
  store i32 %sub1528, i32* %num_bits, align 4
  br label %do.end1530

do.end1530:                                       ; preds = %if.end1525
  %720 = load i32, i32* %dist, align 4
  %idxprom1531 = zext i32 %720 to i64
  %arrayidx1532 = getelementptr inbounds [32 x i32], [32 x i32]* @tinfl_decompress.s_dist_extra, i64 0, i64 %idxprom1531
  %721 = load i32, i32* %arrayidx1532, align 4
  store i32 %721, i32* %num_extra, align 4
  %722 = load i32, i32* %dist, align 4
  %idxprom1533 = zext i32 %722 to i64
  %arrayidx1534 = getelementptr inbounds [32 x i32], [32 x i32]* @tinfl_decompress.s_dist_base, i64 0, i64 %idxprom1533
  %723 = load i32, i32* %arrayidx1534, align 4
  store i32 %723, i32* %dist, align 4
  %724 = load i32, i32* %num_extra, align 4
  %tobool1535 = icmp ne i32 %724, 0
  br i1 %tobool1535, label %if.then1536, label %if.end1583

if.then1536:                                      ; preds = %do.end1530
  br label %do.body1538

do.body1538:                                      ; preds = %if.then1536
  %725 = load i32, i32* %num_bits, align 4
  %726 = load i32, i32* %num_extra, align 4
  %cmp1539 = icmp ult i32 %725, %726
  br i1 %cmp1539, label %if.then1541, label %if.end1571

if.then1541:                                      ; preds = %do.body1538
  br label %do.body1542

do.body1542:                                      ; preds = %do.cond1567, %if.then1541
  br label %do.body1544

do.body1544:                                      ; preds = %do.body1542
  br label %while.cond1545

while.cond1545:                                   ; preds = %do.end1556, %do.body1544
  %727 = load i8*, i8** %pIn_buf_cur, align 8
  %728 = load i8*, i8** %pIn_buf_end, align 8
  %cmp1546 = icmp uge i8* %727, %728
  br i1 %cmp1546, label %while.body1548, label %while.end1557

while.body1548:                                   ; preds = %while.cond1545
  br label %do.body1549

do.body1549:                                      ; preds = %while.body1548
  %729 = load i32, i32* %decomp_flags.addr, align 4
  %and1550 = and i32 %729, 2
  %tobool1551 = icmp ne i32 %and1550, 0
  %cond1552 = select i1 %tobool1551, i32 1, i32 -4
  store i32 %cond1552, i32* %status, align 4
  %730 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1553 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %730, i32 0, i32 0
  store i32 27, i32* %m_state1553, align 8
  br label %common_exit

sw.bb1554:                                        ; preds = %if.end
  br label %do.end1556

do.end1556:                                       ; preds = %sw.bb1554
  br label %while.cond1545

while.end1557:                                    ; preds = %while.cond1545
  %731 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1558 = getelementptr inbounds i8, i8* %731, i32 1
  store i8* %incdec.ptr1558, i8** %pIn_buf_cur, align 8
  %732 = load i8, i8* %731, align 1
  %conv1559 = zext i8 %732 to i32
  store i32 %conv1559, i32* %c1543, align 4
  br label %do.end1561

do.end1561:                                       ; preds = %while.end1557
  %733 = load i32, i32* %c1543, align 4
  %conv1562 = zext i32 %733 to i64
  %734 = load i32, i32* %num_bits, align 4
  %sh_prom1563 = zext i32 %734 to i64
  %shl1564 = shl i64 %conv1562, %sh_prom1563
  %735 = load i64, i64* %bit_buf, align 8
  %or1565 = or i64 %735, %shl1564
  store i64 %or1565, i64* %bit_buf, align 8
  %736 = load i32, i32* %num_bits, align 4
  %add1566 = add i32 %736, 8
  store i32 %add1566, i32* %num_bits, align 4
  br label %do.cond1567

do.cond1567:                                      ; preds = %do.end1561
  %737 = load i32, i32* %num_bits, align 4
  %738 = load i32, i32* %num_extra, align 4
  %cmp1568 = icmp ult i32 %737, %738
  br i1 %cmp1568, label %do.body1542, label %do.end1570

do.end1570:                                       ; preds = %do.cond1567
  br label %if.end1571

if.end1571:                                       ; preds = %do.end1570, %do.body1538
  %739 = load i64, i64* %bit_buf, align 8
  %740 = load i32, i32* %num_extra, align 4
  %shl1572 = shl i32 1, %740
  %sub1573 = sub nsw i32 %shl1572, 1
  %conv1574 = sext i32 %sub1573 to i64
  %and1575 = and i64 %739, %conv1574
  %conv1576 = trunc i64 %and1575 to i32
  store i32 %conv1576, i32* %extra_bits1537, align 4
  %741 = load i32, i32* %num_extra, align 4
  %742 = load i64, i64* %bit_buf, align 8
  %sh_prom1577 = zext i32 %741 to i64
  %shr1578 = lshr i64 %742, %sh_prom1577
  store i64 %shr1578, i64* %bit_buf, align 8
  %743 = load i32, i32* %num_extra, align 4
  %744 = load i32, i32* %num_bits, align 4
  %sub1579 = sub i32 %744, %743
  store i32 %sub1579, i32* %num_bits, align 4
  br label %do.end1581

do.end1581:                                       ; preds = %if.end1571
  %745 = load i32, i32* %extra_bits1537, align 4
  %746 = load i32, i32* %dist, align 4
  %add1582 = add i32 %746, %745
  store i32 %add1582, i32* %dist, align 4
  br label %if.end1583

if.end1583:                                       ; preds = %do.end1581, %do.end1530
  %747 = load i8*, i8** %pOut_buf_cur, align 8
  %748 = load i8*, i8** %pOut_buf_start.addr, align 8
  %sub.ptr.lhs.cast1584 = ptrtoint i8* %747 to i64
  %sub.ptr.rhs.cast1585 = ptrtoint i8* %748 to i64
  %sub.ptr.sub1586 = sub i64 %sub.ptr.lhs.cast1584, %sub.ptr.rhs.cast1585
  store i64 %sub.ptr.sub1586, i64* %dist_from_out_buf_start, align 8
  %749 = load i32, i32* %dist, align 4
  %conv1587 = zext i32 %749 to i64
  %750 = load i64, i64* %dist_from_out_buf_start, align 8
  %cmp1588 = icmp ugt i64 %conv1587, %750
  br i1 %cmp1588, label %land.lhs.true1590, label %if.end1603

land.lhs.true1590:                                ; preds = %if.end1583
  %751 = load i32, i32* %decomp_flags.addr, align 4
  %and1591 = and i32 %751, 4
  %tobool1592 = icmp ne i32 %and1591, 0
  br i1 %tobool1592, label %if.then1593, label %if.end1603

if.then1593:                                      ; preds = %land.lhs.true1590
  br label %do.body1594

do.body1594:                                      ; preds = %if.then1593
  br label %for.cond1595

for.cond1595:                                     ; preds = %do.end1600, %do.body1594
  br label %do.body1596

do.body1596:                                      ; preds = %for.cond1595
  store i32 -1, i32* %status, align 4
  %752 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1597 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %752, i32 0, i32 0
  store i32 37, i32* %m_state1597, align 8
  br label %common_exit

sw.bb1598:                                        ; preds = %if.end
  br label %do.end1600

do.end1600:                                       ; preds = %sw.bb1598
  br label %for.cond1595

do.end1602:                                       ; No predecessors!
  br label %if.end1603

if.end1603:                                       ; preds = %do.end1602, %land.lhs.true1590, %if.end1583
  %753 = load i8*, i8** %pOut_buf_start.addr, align 8
  %754 = load i64, i64* %dist_from_out_buf_start, align 8
  %755 = load i32, i32* %dist, align 4
  %conv1604 = zext i32 %755 to i64
  %sub1605 = sub i64 %754, %conv1604
  %756 = load i64, i64* %out_buf_size_mask, align 8
  %and1606 = and i64 %sub1605, %756
  %add.ptr1607 = getelementptr inbounds i8, i8* %753, i64 %and1606
  store i8* %add.ptr1607, i8** %pSrc, align 8
  %757 = load i8*, i8** %pOut_buf_cur, align 8
  %758 = load i8*, i8** %pSrc, align 8
  %cmp1608 = icmp ugt i8* %757, %758
  br i1 %cmp1608, label %cond.true1610, label %cond.false1611

cond.true1610:                                    ; preds = %if.end1603
  %759 = load i8*, i8** %pOut_buf_cur, align 8
  br label %cond.end1612

cond.false1611:                                   ; preds = %if.end1603
  %760 = load i8*, i8** %pSrc, align 8
  br label %cond.end1612

cond.end1612:                                     ; preds = %cond.false1611, %cond.true1610
  %cond1613 = phi i8* [ %759, %cond.true1610 ], [ %760, %cond.false1611 ]
  %761 = load i32, i32* %counter, align 4
  %idx.ext1614 = zext i32 %761 to i64
  %add.ptr1615 = getelementptr inbounds i8, i8* %cond1613, i64 %idx.ext1614
  %762 = load i8*, i8** %pOut_buf_end, align 8
  %cmp1616 = icmp ugt i8* %add.ptr1615, %762
  br i1 %cmp1616, label %if.then1618, label %if.else1640

if.then1618:                                      ; preds = %cond.end1612
  br label %while.cond1619

while.cond1619:                                   ; preds = %while.end1632, %if.then1618
  %763 = load i32, i32* %counter, align 4
  %dec1620 = add i32 %763, -1
  store i32 %dec1620, i32* %counter, align 4
  %tobool1621 = icmp ne i32 %763, 0
  br i1 %tobool1621, label %while.body1622, label %while.end1639

while.body1622:                                   ; preds = %while.cond1619
  br label %while.cond1623

while.cond1623:                                   ; preds = %do.end1631, %while.body1622
  %764 = load i8*, i8** %pOut_buf_cur, align 8
  %765 = load i8*, i8** %pOut_buf_end, align 8
  %cmp1624 = icmp uge i8* %764, %765
  br i1 %cmp1624, label %while.body1626, label %while.end1632

while.body1626:                                   ; preds = %while.cond1623
  br label %do.body1627

do.body1627:                                      ; preds = %while.body1626
  store i32 2, i32* %status, align 4
  %766 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1628 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %766, i32 0, i32 0
  store i32 53, i32* %m_state1628, align 8
  br label %common_exit

sw.bb1629:                                        ; preds = %if.end
  br label %do.end1631

do.end1631:                                       ; preds = %sw.bb1629
  br label %while.cond1623

while.end1632:                                    ; preds = %while.cond1623
  %767 = load i8*, i8** %pOut_buf_start.addr, align 8
  %768 = load i64, i64* %dist_from_out_buf_start, align 8
  %inc1633 = add i64 %768, 1
  store i64 %inc1633, i64* %dist_from_out_buf_start, align 8
  %769 = load i32, i32* %dist, align 4
  %conv1634 = zext i32 %769 to i64
  %sub1635 = sub i64 %768, %conv1634
  %770 = load i64, i64* %out_buf_size_mask, align 8
  %and1636 = and i64 %sub1635, %770
  %arrayidx1637 = getelementptr inbounds i8, i8* %767, i64 %and1636
  %771 = load i8, i8* %arrayidx1637, align 1
  %772 = load i8*, i8** %pOut_buf_cur, align 8
  %incdec.ptr1638 = getelementptr inbounds i8, i8* %772, i32 1
  store i8* %incdec.ptr1638, i8** %pOut_buf_cur, align 8
  store i8 %771, i8* %772, align 1
  br label %while.cond1619

while.end1639:                                    ; preds = %while.cond1619
  br label %for.cond1070

if.else1640:                                      ; preds = %cond.end1612
  %773 = load i32, i32* %counter, align 4
  %cmp1641 = icmp uge i32 %773, 9
  br i1 %cmp1641, label %land.lhs.true1643, label %if.end1676

land.lhs.true1643:                                ; preds = %if.else1640
  %774 = load i32, i32* %counter, align 4
  %775 = load i32, i32* %dist, align 4
  %cmp1644 = icmp ule i32 %774, %775
  br i1 %cmp1644, label %if.then1646, label %if.end1676

if.then1646:                                      ; preds = %land.lhs.true1643
  %776 = load i8*, i8** %pSrc, align 8
  %777 = load i32, i32* %counter, align 4
  %and1647 = and i32 %777, -8
  %idx.ext1648 = zext i32 %and1647 to i64
  %add.ptr1649 = getelementptr inbounds i8, i8* %776, i64 %idx.ext1648
  store i8* %add.ptr1649, i8** %pSrc_end, align 8
  br label %do.body1650

do.body1650:                                      ; preds = %do.cond1653, %if.then1646
  %778 = load i8*, i8** %pOut_buf_cur, align 8
  %779 = load i8*, i8** %pSrc, align 8
  %780 = load i8*, i8** %pOut_buf_cur, align 8
  %781 = call i64 @llvm.objectsize.i64.p0i8(i8* %780, i1 false)
  %call1651 = call i8* @__memcpy_chk(i8* %778, i8* %779, i64 8, i64 %781) #10
  %782 = load i8*, i8** %pOut_buf_cur, align 8
  %add.ptr1652 = getelementptr inbounds i8, i8* %782, i64 8
  store i8* %add.ptr1652, i8** %pOut_buf_cur, align 8
  br label %do.cond1653

do.cond1653:                                      ; preds = %do.body1650
  %783 = load i8*, i8** %pSrc, align 8
  %add.ptr1654 = getelementptr inbounds i8, i8* %783, i64 8
  store i8* %add.ptr1654, i8** %pSrc, align 8
  %784 = load i8*, i8** %pSrc_end, align 8
  %cmp1655 = icmp ult i8* %add.ptr1654, %784
  br i1 %cmp1655, label %do.body1650, label %do.end1657

do.end1657:                                       ; preds = %do.cond1653
  %785 = load i32, i32* %counter, align 4
  %and1658 = and i32 %785, 7
  store i32 %and1658, i32* %counter, align 4
  %cmp1659 = icmp ult i32 %and1658, 3
  br i1 %cmp1659, label %if.then1661, label %if.end1675

if.then1661:                                      ; preds = %do.end1657
  %786 = load i32, i32* %counter, align 4
  %tobool1662 = icmp ne i32 %786, 0
  br i1 %tobool1662, label %if.then1663, label %if.end1674

if.then1663:                                      ; preds = %if.then1661
  %787 = load i8*, i8** %pSrc, align 8
  %arrayidx1664 = getelementptr inbounds i8, i8* %787, i64 0
  %788 = load i8, i8* %arrayidx1664, align 1
  %789 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1665 = getelementptr inbounds i8, i8* %789, i64 0
  store i8 %788, i8* %arrayidx1665, align 1
  %790 = load i32, i32* %counter, align 4
  %cmp1666 = icmp ugt i32 %790, 1
  br i1 %cmp1666, label %if.then1668, label %if.end1671

if.then1668:                                      ; preds = %if.then1663
  %791 = load i8*, i8** %pSrc, align 8
  %arrayidx1669 = getelementptr inbounds i8, i8* %791, i64 1
  %792 = load i8, i8* %arrayidx1669, align 1
  %793 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1670 = getelementptr inbounds i8, i8* %793, i64 1
  store i8 %792, i8* %arrayidx1670, align 1
  br label %if.end1671

if.end1671:                                       ; preds = %if.then1668, %if.then1663
  %794 = load i32, i32* %counter, align 4
  %795 = load i8*, i8** %pOut_buf_cur, align 8
  %idx.ext1672 = zext i32 %794 to i64
  %add.ptr1673 = getelementptr inbounds i8, i8* %795, i64 %idx.ext1672
  store i8* %add.ptr1673, i8** %pOut_buf_cur, align 8
  br label %if.end1674

if.end1674:                                       ; preds = %if.end1671, %if.then1661
  br label %for.cond1070

if.end1675:                                       ; preds = %do.end1657
  br label %if.end1676

if.end1676:                                       ; preds = %if.end1675, %land.lhs.true1643, %if.else1640
  br label %if.end1677

if.end1677:                                       ; preds = %if.end1676
  br label %while.cond1678

while.cond1678:                                   ; preds = %while.body1681, %if.end1677
  %796 = load i32, i32* %counter, align 4
  %cmp1679 = icmp ugt i32 %796, 2
  br i1 %cmp1679, label %while.body1681, label %while.end1691

while.body1681:                                   ; preds = %while.cond1678
  %797 = load i8*, i8** %pSrc, align 8
  %arrayidx1682 = getelementptr inbounds i8, i8* %797, i64 0
  %798 = load i8, i8* %arrayidx1682, align 1
  %799 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1683 = getelementptr inbounds i8, i8* %799, i64 0
  store i8 %798, i8* %arrayidx1683, align 1
  %800 = load i8*, i8** %pSrc, align 8
  %arrayidx1684 = getelementptr inbounds i8, i8* %800, i64 1
  %801 = load i8, i8* %arrayidx1684, align 1
  %802 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1685 = getelementptr inbounds i8, i8* %802, i64 1
  store i8 %801, i8* %arrayidx1685, align 1
  %803 = load i8*, i8** %pSrc, align 8
  %arrayidx1686 = getelementptr inbounds i8, i8* %803, i64 2
  %804 = load i8, i8* %arrayidx1686, align 1
  %805 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1687 = getelementptr inbounds i8, i8* %805, i64 2
  store i8 %804, i8* %arrayidx1687, align 1
  %806 = load i8*, i8** %pOut_buf_cur, align 8
  %add.ptr1688 = getelementptr inbounds i8, i8* %806, i64 3
  store i8* %add.ptr1688, i8** %pOut_buf_cur, align 8
  %807 = load i8*, i8** %pSrc, align 8
  %add.ptr1689 = getelementptr inbounds i8, i8* %807, i64 3
  store i8* %add.ptr1689, i8** %pSrc, align 8
  %808 = load i32, i32* %counter, align 4
  %sub1690 = sub i32 %808, 3
  store i32 %sub1690, i32* %counter, align 4
  br label %while.cond1678

while.end1691:                                    ; preds = %while.cond1678
  %809 = load i32, i32* %counter, align 4
  %cmp1692 = icmp ugt i32 %809, 0
  br i1 %cmp1692, label %if.then1694, label %if.end1705

if.then1694:                                      ; preds = %while.end1691
  %810 = load i8*, i8** %pSrc, align 8
  %arrayidx1695 = getelementptr inbounds i8, i8* %810, i64 0
  %811 = load i8, i8* %arrayidx1695, align 1
  %812 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1696 = getelementptr inbounds i8, i8* %812, i64 0
  store i8 %811, i8* %arrayidx1696, align 1
  %813 = load i32, i32* %counter, align 4
  %cmp1697 = icmp ugt i32 %813, 1
  br i1 %cmp1697, label %if.then1699, label %if.end1702

if.then1699:                                      ; preds = %if.then1694
  %814 = load i8*, i8** %pSrc, align 8
  %arrayidx1700 = getelementptr inbounds i8, i8* %814, i64 1
  %815 = load i8, i8* %arrayidx1700, align 1
  %816 = load i8*, i8** %pOut_buf_cur, align 8
  %arrayidx1701 = getelementptr inbounds i8, i8* %816, i64 1
  store i8 %815, i8* %arrayidx1701, align 1
  br label %if.end1702

if.end1702:                                       ; preds = %if.then1699, %if.then1694
  %817 = load i32, i32* %counter, align 4
  %818 = load i8*, i8** %pOut_buf_cur, align 8
  %idx.ext1703 = zext i32 %817 to i64
  %add.ptr1704 = getelementptr inbounds i8, i8* %818, i64 %idx.ext1703
  store i8* %add.ptr1704, i8** %pOut_buf_cur, align 8
  br label %if.end1705

if.end1705:                                       ; preds = %if.end1702, %while.end1691
  br label %for.cond1070

for.end1706:                                      ; preds = %if.then1335
  br label %if.end1707

if.end1707:                                       ; preds = %for.end1706, %do.end401
  br label %if.end1708

if.end1708:                                       ; preds = %if.end1707, %while.end387
  br label %do.cond1709

do.cond1709:                                      ; preds = %if.end1708
  %819 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_final1710 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %819, i32 0, i32 5
  %820 = load i32, i32* %m_final1710, align 4
  %and1711 = and i32 %820, 1
  %tobool1712 = icmp ne i32 %and1711, 0
  %lnot = xor i1 %tobool1712, true
  br i1 %lnot, label %do.body76, label %do.end1713

do.end1713:                                       ; preds = %do.cond1709
  br label %do.body1714

do.body1714:                                      ; preds = %do.end1713
  %821 = load i32, i32* %num_bits, align 4
  %822 = load i32, i32* %num_bits, align 4
  %and1715 = and i32 %822, 7
  %cmp1716 = icmp ult i32 %821, %and1715
  br i1 %cmp1716, label %if.then1718, label %if.end1749

if.then1718:                                      ; preds = %do.body1714
  br label %do.body1719

do.body1719:                                      ; preds = %do.cond1744, %if.then1718
  br label %do.body1721

do.body1721:                                      ; preds = %do.body1719
  br label %while.cond1722

while.cond1722:                                   ; preds = %do.end1733, %do.body1721
  %823 = load i8*, i8** %pIn_buf_cur, align 8
  %824 = load i8*, i8** %pIn_buf_end, align 8
  %cmp1723 = icmp uge i8* %823, %824
  br i1 %cmp1723, label %while.body1725, label %while.end1734

while.body1725:                                   ; preds = %while.cond1722
  br label %do.body1726

do.body1726:                                      ; preds = %while.body1725
  %825 = load i32, i32* %decomp_flags.addr, align 4
  %and1727 = and i32 %825, 2
  %tobool1728 = icmp ne i32 %and1727, 0
  %cond1729 = select i1 %tobool1728, i32 1, i32 -4
  store i32 %cond1729, i32* %status, align 4
  %826 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1730 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %826, i32 0, i32 0
  store i32 32, i32* %m_state1730, align 8
  br label %common_exit

sw.bb1731:                                        ; preds = %if.end
  br label %do.end1733

do.end1733:                                       ; preds = %sw.bb1731
  br label %while.cond1722

while.end1734:                                    ; preds = %while.cond1722
  %827 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1735 = getelementptr inbounds i8, i8* %827, i32 1
  store i8* %incdec.ptr1735, i8** %pIn_buf_cur, align 8
  %828 = load i8, i8* %827, align 1
  %conv1736 = zext i8 %828 to i32
  store i32 %conv1736, i32* %c1720, align 4
  br label %do.end1738

do.end1738:                                       ; preds = %while.end1734
  %829 = load i32, i32* %c1720, align 4
  %conv1739 = zext i32 %829 to i64
  %830 = load i32, i32* %num_bits, align 4
  %sh_prom1740 = zext i32 %830 to i64
  %shl1741 = shl i64 %conv1739, %sh_prom1740
  %831 = load i64, i64* %bit_buf, align 8
  %or1742 = or i64 %831, %shl1741
  store i64 %or1742, i64* %bit_buf, align 8
  %832 = load i32, i32* %num_bits, align 4
  %add1743 = add i32 %832, 8
  store i32 %add1743, i32* %num_bits, align 4
  br label %do.cond1744

do.cond1744:                                      ; preds = %do.end1738
  %833 = load i32, i32* %num_bits, align 4
  %834 = load i32, i32* %num_bits, align 4
  %and1745 = and i32 %834, 7
  %cmp1746 = icmp ult i32 %833, %and1745
  br i1 %cmp1746, label %do.body1719, label %do.end1748

do.end1748:                                       ; preds = %do.cond1744
  br label %if.end1749

if.end1749:                                       ; preds = %do.end1748, %do.body1714
  %835 = load i32, i32* %num_bits, align 4
  %and1750 = and i32 %835, 7
  %836 = load i64, i64* %bit_buf, align 8
  %sh_prom1751 = zext i32 %and1750 to i64
  %shr1752 = lshr i64 %836, %sh_prom1751
  store i64 %shr1752, i64* %bit_buf, align 8
  %837 = load i32, i32* %num_bits, align 4
  %and1753 = and i32 %837, 7
  %838 = load i32, i32* %num_bits, align 4
  %sub1754 = sub i32 %838, %and1753
  store i32 %sub1754, i32* %num_bits, align 4
  br label %do.end1756

do.end1756:                                       ; preds = %if.end1749
  br label %while.cond1757

while.cond1757:                                   ; preds = %while.body1764, %do.end1756
  %839 = load i8*, i8** %pIn_buf_cur, align 8
  %840 = load i8*, i8** %pIn_buf_next.addr, align 8
  %cmp1758 = icmp ugt i8* %839, %840
  br i1 %cmp1758, label %land.rhs1760, label %land.end1763

land.rhs1760:                                     ; preds = %while.cond1757
  %841 = load i32, i32* %num_bits, align 4
  %cmp1761 = icmp uge i32 %841, 8
  br label %land.end1763

land.end1763:                                     ; preds = %land.rhs1760, %while.cond1757
  %842 = phi i1 [ false, %while.cond1757 ], [ %cmp1761, %land.rhs1760 ]
  br i1 %842, label %while.body1764, label %while.end1767

while.body1764:                                   ; preds = %land.end1763
  %843 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1765 = getelementptr inbounds i8, i8* %843, i32 -1
  store i8* %incdec.ptr1765, i8** %pIn_buf_cur, align 8
  %844 = load i32, i32* %num_bits, align 4
  %sub1766 = sub i32 %844, 8
  store i32 %sub1766, i32* %num_bits, align 4
  br label %while.cond1757

while.end1767:                                    ; preds = %land.end1763
  %845 = load i32, i32* %num_bits, align 4
  %sh_prom1768 = zext i32 %845 to i64
  %shl1769 = shl i64 1, %sh_prom1768
  %sub1770 = sub i64 %shl1769, 1
  %846 = load i64, i64* %bit_buf, align 8
  %and1771 = and i64 %846, %sub1770
  store i64 %and1771, i64* %bit_buf, align 8
  %847 = load i32, i32* %num_bits, align 4
  %tobool1772 = icmp ne i32 %847, 0
  %lnot1773 = xor i1 %tobool1772, true
  %lnot1774 = xor i1 %lnot1773, true
  %lnot.ext = zext i1 %lnot1774 to i32
  %conv1775 = sext i32 %lnot.ext to i64
  %tobool1776 = icmp ne i64 %conv1775, 0
  br i1 %tobool1776, label %cond.true1777, label %cond.false1778

cond.true1777:                                    ; preds = %while.end1767
  call void @__assert_rtn(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.tinfl_decompress, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 2783, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end1779

cond.false1778:                                   ; preds = %while.end1767
  br label %cond.end1779

cond.end1779:                                     ; preds = %cond.false1778, %848
  %849 = load i32, i32* %decomp_flags.addr, align 4
  %and1780 = and i32 %849, 1
  %tobool1781 = icmp ne i32 %and1780, 0
  br i1 %tobool1781, label %if.then1782, label %if.end1857

if.then1782:                                      ; preds = %cond.end1779
  store i32 0, i32* %counter, align 4
  br label %for.cond1783

for.cond1783:                                     ; preds = %for.inc1854, %if.then1782
  %850 = load i32, i32* %counter, align 4
  %cmp1784 = icmp ult i32 %850, 4
  br i1 %cmp1784, label %for.body1786, label %for.end1856

for.body1786:                                     ; preds = %for.cond1783
  %851 = load i32, i32* %num_bits, align 4
  %tobool1788 = icmp ne i32 %851, 0
  br i1 %tobool1788, label %if.then1789, label %if.else1830

if.then1789:                                      ; preds = %for.body1786
  br label %do.body1790

do.body1790:                                      ; preds = %if.then1789
  %852 = load i32, i32* %num_bits, align 4
  %cmp1791 = icmp ult i32 %852, 8
  br i1 %cmp1791, label %if.then1793, label %if.end1823

if.then1793:                                      ; preds = %do.body1790
  br label %do.body1794

do.body1794:                                      ; preds = %do.cond1819, %if.then1793
  br label %do.body1796

do.body1796:                                      ; preds = %do.body1794
  br label %while.cond1797

while.cond1797:                                   ; preds = %do.end1808, %do.body1796
  %853 = load i8*, i8** %pIn_buf_cur, align 8
  %854 = load i8*, i8** %pIn_buf_end, align 8
  %cmp1798 = icmp uge i8* %853, %854
  br i1 %cmp1798, label %while.body1800, label %while.end1809

while.body1800:                                   ; preds = %while.cond1797
  br label %do.body1801

do.body1801:                                      ; preds = %while.body1800
  %855 = load i32, i32* %decomp_flags.addr, align 4
  %and1802 = and i32 %855, 2
  %tobool1803 = icmp ne i32 %and1802, 0
  %cond1804 = select i1 %tobool1803, i32 1, i32 -4
  store i32 %cond1804, i32* %status, align 4
  %856 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1805 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %856, i32 0, i32 0
  store i32 41, i32* %m_state1805, align 8
  br label %common_exit

sw.bb1806:                                        ; preds = %if.end
  br label %do.end1808

do.end1808:                                       ; preds = %sw.bb1806
  br label %while.cond1797

while.end1809:                                    ; preds = %while.cond1797
  %857 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1810 = getelementptr inbounds i8, i8* %857, i32 1
  store i8* %incdec.ptr1810, i8** %pIn_buf_cur, align 8
  %858 = load i8, i8* %857, align 1
  %conv1811 = zext i8 %858 to i32
  store i32 %conv1811, i32* %c1795, align 4
  br label %do.end1813

do.end1813:                                       ; preds = %while.end1809
  %859 = load i32, i32* %c1795, align 4
  %conv1814 = zext i32 %859 to i64
  %860 = load i32, i32* %num_bits, align 4
  %sh_prom1815 = zext i32 %860 to i64
  %shl1816 = shl i64 %conv1814, %sh_prom1815
  %861 = load i64, i64* %bit_buf, align 8
  %or1817 = or i64 %861, %shl1816
  store i64 %or1817, i64* %bit_buf, align 8
  %862 = load i32, i32* %num_bits, align 4
  %add1818 = add i32 %862, 8
  store i32 %add1818, i32* %num_bits, align 4
  br label %do.cond1819

do.cond1819:                                      ; preds = %do.end1813
  %863 = load i32, i32* %num_bits, align 4
  %cmp1820 = icmp ult i32 %863, 8
  br i1 %cmp1820, label %do.body1794, label %do.end1822

do.end1822:                                       ; preds = %do.cond1819
  br label %if.end1823

if.end1823:                                       ; preds = %do.end1822, %do.body1790
  %864 = load i64, i64* %bit_buf, align 8
  %and1824 = and i64 %864, 255
  %conv1825 = trunc i64 %and1824 to i32
  store i32 %conv1825, i32* %s1787, align 4
  %865 = load i64, i64* %bit_buf, align 8
  %shr1826 = lshr i64 %865, 8
  store i64 %shr1826, i64* %bit_buf, align 8
  %866 = load i32, i32* %num_bits, align 4
  %sub1827 = sub i32 %866, 8
  store i32 %sub1827, i32* %num_bits, align 4
  br label %do.end1829

do.end1829:                                       ; preds = %if.end1823
  br label %if.end1849

if.else1830:                                      ; preds = %for.body1786
  br label %do.body1831

do.body1831:                                      ; preds = %if.else1830
  br label %while.cond1832

while.cond1832:                                   ; preds = %do.end1843, %do.body1831
  %867 = load i8*, i8** %pIn_buf_cur, align 8
  %868 = load i8*, i8** %pIn_buf_end, align 8
  %cmp1833 = icmp uge i8* %867, %868
  br i1 %cmp1833, label %while.body1835, label %while.end1844

while.body1835:                                   ; preds = %while.cond1832
  br label %do.body1836

do.body1836:                                      ; preds = %while.body1835
  %869 = load i32, i32* %decomp_flags.addr, align 4
  %and1837 = and i32 %869, 2
  %tobool1838 = icmp ne i32 %and1837, 0
  %cond1839 = select i1 %tobool1838, i32 1, i32 -4
  store i32 %cond1839, i32* %status, align 4
  %870 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1840 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %870, i32 0, i32 0
  store i32 42, i32* %m_state1840, align 8
  br label %common_exit

sw.bb1841:                                        ; preds = %if.end
  br label %do.end1843

do.end1843:                                       ; preds = %sw.bb1841
  br label %while.cond1832

while.end1844:                                    ; preds = %while.cond1832
  %871 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1845 = getelementptr inbounds i8, i8* %871, i32 1
  store i8* %incdec.ptr1845, i8** %pIn_buf_cur, align 8
  %872 = load i8, i8* %871, align 1
  %conv1846 = zext i8 %872 to i32
  store i32 %conv1846, i32* %s1787, align 4
  br label %do.end1848

do.end1848:                                       ; preds = %while.end1844
  br label %if.end1849

if.end1849:                                       ; preds = %do.end1848, %do.end1829
  %873 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_z_adler321850 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %873, i32 0, i32 4
  %874 = load i32, i32* %m_z_adler321850, align 8
  %shl1851 = shl i32 %874, 8
  %875 = load i32, i32* %s1787, align 4
  %or1852 = or i32 %shl1851, %875
  %876 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_z_adler321853 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %876, i32 0, i32 4
  store i32 %or1852, i32* %m_z_adler321853, align 8
  br label %for.inc1854

for.inc1854:                                      ; preds = %if.end1849
  %877 = load i32, i32* %counter, align 4
  %inc1855 = add i32 %877, 1
  store i32 %inc1855, i32* %counter, align 4
  br label %for.cond1783

for.end1856:                                      ; preds = %for.cond1783
  br label %if.end1857

if.end1857:                                       ; preds = %for.end1856, %cond.end1779
  br label %do.body1858

do.body1858:                                      ; preds = %if.end1857
  br label %for.cond1859

for.cond1859:                                     ; preds = %do.end1864, %do.body1858
  br label %do.body1860

do.body1860:                                      ; preds = %for.cond1859
  store i32 0, i32* %status, align 4
  %878 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_state1861 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %878, i32 0, i32 0
  store i32 34, i32* %m_state1861, align 8
  br label %common_exit

sw.bb1862:                                        ; preds = %if.end
  br label %do.end1864

do.end1864:                                       ; preds = %sw.bb1862
  br label %for.cond1859

do.end1866:                                       ; No predecessors!
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end1866, %if.end
  br label %common_exit

common_exit:                                      ; preds = %sw.epilog, %do.body1860, %do.body1836, %do.body1801, %do.body1726, %do.body1627, %do.body1596, %do.body1549, %do.body1458, %do.body1356, %do.body1232, %do.body1151, %do.body1025, %do.body955, %do.body932, %do.body844, %do.body652, %do.body552, %do.body471, %do.body395, %do.body330, %do.body320, %do.body304, %do.body271, %do.body248, %do.body211, %do.body177, %do.body130, %do.body87, %do.body69, %do.body22, %do.body9
  %879 = load i32, i32* %status, align 4
  %cmp1867 = icmp ne i32 %879, 1
  br i1 %cmp1867, label %land.lhs.true1869, label %if.end1884

land.lhs.true1869:                                ; preds = %common_exit
  %880 = load i32, i32* %status, align 4
  %cmp1870 = icmp ne i32 %880, -4
  br i1 %cmp1870, label %if.then1872, label %if.end1884

if.then1872:                                      ; preds = %land.lhs.true1869
  br label %while.cond1873

while.cond1873:                                   ; preds = %while.body1880, %if.then1872
  %881 = load i8*, i8** %pIn_buf_cur, align 8
  %882 = load i8*, i8** %pIn_buf_next.addr, align 8
  %cmp1874 = icmp ugt i8* %881, %882
  br i1 %cmp1874, label %land.rhs1876, label %land.end1879

land.rhs1876:                                     ; preds = %while.cond1873
  %883 = load i32, i32* %num_bits, align 4
  %cmp1877 = icmp uge i32 %883, 8
  br label %land.end1879

land.end1879:                                     ; preds = %land.rhs1876, %while.cond1873
  %884 = phi i1 [ false, %while.cond1873 ], [ %cmp1877, %land.rhs1876 ]
  br i1 %884, label %while.body1880, label %while.end1883

while.body1880:                                   ; preds = %land.end1879
  %885 = load i8*, i8** %pIn_buf_cur, align 8
  %incdec.ptr1881 = getelementptr inbounds i8, i8* %885, i32 -1
  store i8* %incdec.ptr1881, i8** %pIn_buf_cur, align 8
  %886 = load i32, i32* %num_bits, align 4
  %sub1882 = sub i32 %886, 8
  store i32 %sub1882, i32* %num_bits, align 4
  br label %while.cond1873

while.end1883:                                    ; preds = %land.end1879
  br label %if.end1884

if.end1884:                                       ; preds = %while.end1883, %land.lhs.true1869, %common_exit
  %887 = load i32, i32* %num_bits, align 4
  %888 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_num_bits1885 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %888, i32 0, i32 1
  store i32 %887, i32* %m_num_bits1885, align 4
  %889 = load i64, i64* %bit_buf, align 8
  %890 = load i32, i32* %num_bits, align 4
  %sh_prom1886 = zext i32 %890 to i64
  %shl1887 = shl i64 1, %sh_prom1886
  %sub1888 = sub i64 %shl1887, 1
  %and1889 = and i64 %889, %sub1888
  %891 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_bit_buf1890 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %891, i32 0, i32 12
  store i64 %and1889, i64* %m_bit_buf1890, align 8
  %892 = load i32, i32* %dist, align 4
  %893 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_dist1891 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %893, i32 0, i32 8
  store i32 %892, i32* %m_dist1891, align 8
  %894 = load i32, i32* %counter, align 4
  %895 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_counter1892 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %895, i32 0, i32 9
  store i32 %894, i32* %m_counter1892, align 4
  %896 = load i32, i32* %num_extra, align 4
  %897 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_num_extra1893 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %897, i32 0, i32 10
  store i32 %896, i32* %m_num_extra1893, align 8
  %898 = load i64, i64* %dist_from_out_buf_start, align 8
  %899 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_dist_from_out_buf_start1894 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %899, i32 0, i32 13
  store i64 %898, i64* %m_dist_from_out_buf_start1894, align 8
  %900 = load i8*, i8** %pIn_buf_cur, align 8
  %901 = load i8*, i8** %pIn_buf_next.addr, align 8
  %sub.ptr.lhs.cast1895 = ptrtoint i8* %900 to i64
  %sub.ptr.rhs.cast1896 = ptrtoint i8* %901 to i64
  %sub.ptr.sub1897 = sub i64 %sub.ptr.lhs.cast1895, %sub.ptr.rhs.cast1896
  %902 = load i64*, i64** %pIn_buf_size.addr, align 8
  store i64 %sub.ptr.sub1897, i64* %902, align 8
  %903 = load i8*, i8** %pOut_buf_cur, align 8
  %904 = load i8*, i8** %pOut_buf_next.addr, align 8
  %sub.ptr.lhs.cast1898 = ptrtoint i8* %903 to i64
  %sub.ptr.rhs.cast1899 = ptrtoint i8* %904 to i64
  %sub.ptr.sub1900 = sub i64 %sub.ptr.lhs.cast1898, %sub.ptr.rhs.cast1899
  %905 = load i64*, i64** %pOut_buf_size.addr, align 8
  store i64 %sub.ptr.sub1900, i64* %905, align 8
  %906 = load i32, i32* %decomp_flags.addr, align 4
  %and1901 = and i32 %906, 9
  %tobool1902 = icmp ne i32 %and1901, 0
  br i1 %tobool1902, label %land.lhs.true1903, label %if.end1989

land.lhs.true1903:                                ; preds = %if.end1884
  %907 = load i32, i32* %status, align 4
  %cmp1904 = icmp sge i32 %907, 0
  br i1 %cmp1904, label %if.then1906, label %if.end1989

if.then1906:                                      ; preds = %land.lhs.true1903
  %908 = load i8*, i8** %pOut_buf_next.addr, align 8
  store i8* %908, i8** %ptr, align 8
  %909 = load i64*, i64** %pOut_buf_size.addr, align 8
  %910 = load i64, i64* %909, align 8
  store i64 %910, i64* %buf_len, align 8
  %911 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler321908 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %911, i32 0, i32 7
  %912 = load i32, i32* %m_check_adler321908, align 4
  %and1909 = and i32 %912, 65535
  store i32 %and1909, i32* %s1, align 4
  %913 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler321910 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %913, i32 0, i32 7
  %914 = load i32, i32* %m_check_adler321910, align 4
  %shr1911 = lshr i32 %914, 16
  store i32 %shr1911, i32* %s2, align 4
  %915 = load i64, i64* %buf_len, align 8
  %rem1912 = urem i64 %915, 5552
  store i64 %rem1912, i64* %block_len, align 8
  br label %while.cond1913

while.cond1913:                                   ; preds = %for.end1969, %if.then1906
  %916 = load i64, i64* %buf_len, align 8
  %tobool1914 = icmp ne i64 %916, 0
  br i1 %tobool1914, label %while.body1915, label %while.end1973

while.body1915:                                   ; preds = %while.cond1913
  store i32 0, i32* %i1907, align 4
  br label %for.cond1916

for.cond1916:                                     ; preds = %for.inc1954, %while.body1915
  %917 = load i32, i32* %i1907, align 4
  %add1917 = add i32 %917, 7
  %conv1918 = zext i32 %add1917 to i64
  %918 = load i64, i64* %block_len, align 8
  %cmp1919 = icmp ult i64 %conv1918, %918
  br i1 %cmp1919, label %for.body1921, label %for.end1957

for.body1921:                                     ; preds = %for.cond1916
  %919 = load i8*, i8** %ptr, align 8
  %arrayidx1922 = getelementptr inbounds i8, i8* %919, i64 0
  %920 = load i8, i8* %arrayidx1922, align 1
  %conv1923 = zext i8 %920 to i32
  %921 = load i32, i32* %s1, align 4
  %add1924 = add i32 %921, %conv1923
  store i32 %add1924, i32* %s1, align 4
  %922 = load i32, i32* %s1, align 4
  %923 = load i32, i32* %s2, align 4
  %add1925 = add i32 %923, %922
  store i32 %add1925, i32* %s2, align 4
  %924 = load i8*, i8** %ptr, align 8
  %arrayidx1926 = getelementptr inbounds i8, i8* %924, i64 1
  %925 = load i8, i8* %arrayidx1926, align 1
  %conv1927 = zext i8 %925 to i32
  %926 = load i32, i32* %s1, align 4
  %add1928 = add i32 %926, %conv1927
  store i32 %add1928, i32* %s1, align 4
  %927 = load i32, i32* %s1, align 4
  %928 = load i32, i32* %s2, align 4
  %add1929 = add i32 %928, %927
  store i32 %add1929, i32* %s2, align 4
  %929 = load i8*, i8** %ptr, align 8
  %arrayidx1930 = getelementptr inbounds i8, i8* %929, i64 2
  %930 = load i8, i8* %arrayidx1930, align 1
  %conv1931 = zext i8 %930 to i32
  %931 = load i32, i32* %s1, align 4
  %add1932 = add i32 %931, %conv1931
  store i32 %add1932, i32* %s1, align 4
  %932 = load i32, i32* %s1, align 4
  %933 = load i32, i32* %s2, align 4
  %add1933 = add i32 %933, %932
  store i32 %add1933, i32* %s2, align 4
  %934 = load i8*, i8** %ptr, align 8
  %arrayidx1934 = getelementptr inbounds i8, i8* %934, i64 3
  %935 = load i8, i8* %arrayidx1934, align 1
  %conv1935 = zext i8 %935 to i32
  %936 = load i32, i32* %s1, align 4
  %add1936 = add i32 %936, %conv1935
  store i32 %add1936, i32* %s1, align 4
  %937 = load i32, i32* %s1, align 4
  %938 = load i32, i32* %s2, align 4
  %add1937 = add i32 %938, %937
  store i32 %add1937, i32* %s2, align 4
  %939 = load i8*, i8** %ptr, align 8
  %arrayidx1938 = getelementptr inbounds i8, i8* %939, i64 4
  %940 = load i8, i8* %arrayidx1938, align 1
  %conv1939 = zext i8 %940 to i32
  %941 = load i32, i32* %s1, align 4
  %add1940 = add i32 %941, %conv1939
  store i32 %add1940, i32* %s1, align 4
  %942 = load i32, i32* %s1, align 4
  %943 = load i32, i32* %s2, align 4
  %add1941 = add i32 %943, %942
  store i32 %add1941, i32* %s2, align 4
  %944 = load i8*, i8** %ptr, align 8
  %arrayidx1942 = getelementptr inbounds i8, i8* %944, i64 5
  %945 = load i8, i8* %arrayidx1942, align 1
  %conv1943 = zext i8 %945 to i32
  %946 = load i32, i32* %s1, align 4
  %add1944 = add i32 %946, %conv1943
  store i32 %add1944, i32* %s1, align 4
  %947 = load i32, i32* %s1, align 4
  %948 = load i32, i32* %s2, align 4
  %add1945 = add i32 %948, %947
  store i32 %add1945, i32* %s2, align 4
  %949 = load i8*, i8** %ptr, align 8
  %arrayidx1946 = getelementptr inbounds i8, i8* %949, i64 6
  %950 = load i8, i8* %arrayidx1946, align 1
  %conv1947 = zext i8 %950 to i32
  %951 = load i32, i32* %s1, align 4
  %add1948 = add i32 %951, %conv1947
  store i32 %add1948, i32* %s1, align 4
  %952 = load i32, i32* %s1, align 4
  %953 = load i32, i32* %s2, align 4
  %add1949 = add i32 %953, %952
  store i32 %add1949, i32* %s2, align 4
  %954 = load i8*, i8** %ptr, align 8
  %arrayidx1950 = getelementptr inbounds i8, i8* %954, i64 7
  %955 = load i8, i8* %arrayidx1950, align 1
  %conv1951 = zext i8 %955 to i32
  %956 = load i32, i32* %s1, align 4
  %add1952 = add i32 %956, %conv1951
  store i32 %add1952, i32* %s1, align 4
  %957 = load i32, i32* %s1, align 4
  %958 = load i32, i32* %s2, align 4
  %add1953 = add i32 %958, %957
  store i32 %add1953, i32* %s2, align 4
  br label %for.inc1954

for.inc1954:                                      ; preds = %for.body1921
  %959 = load i32, i32* %i1907, align 4
  %add1955 = add i32 %959, 8
  store i32 %add1955, i32* %i1907, align 4
  %960 = load i8*, i8** %ptr, align 8
  %add.ptr1956 = getelementptr inbounds i8, i8* %960, i64 8
  store i8* %add.ptr1956, i8** %ptr, align 8
  br label %for.cond1916

for.end1957:                                      ; preds = %for.cond1916
  br label %for.cond1958

for.cond1958:                                     ; preds = %for.inc1967, %for.end1957
  %961 = load i32, i32* %i1907, align 4
  %conv1959 = zext i32 %961 to i64
  %962 = load i64, i64* %block_len, align 8
  %cmp1960 = icmp ult i64 %conv1959, %962
  br i1 %cmp1960, label %for.body1962, label %for.end1969

for.body1962:                                     ; preds = %for.cond1958
  %963 = load i8*, i8** %ptr, align 8
  %incdec.ptr1963 = getelementptr inbounds i8, i8* %963, i32 1
  store i8* %incdec.ptr1963, i8** %ptr, align 8
  %964 = load i8, i8* %963, align 1
  %conv1964 = zext i8 %964 to i32
  %965 = load i32, i32* %s1, align 4
  %add1965 = add i32 %965, %conv1964
  store i32 %add1965, i32* %s1, align 4
  %966 = load i32, i32* %s1, align 4
  %967 = load i32, i32* %s2, align 4
  %add1966 = add i32 %967, %966
  store i32 %add1966, i32* %s2, align 4
  br label %for.inc1967

for.inc1967:                                      ; preds = %for.body1962
  %968 = load i32, i32* %i1907, align 4
  %inc1968 = add i32 %968, 1
  store i32 %inc1968, i32* %i1907, align 4
  br label %for.cond1958

for.end1969:                                      ; preds = %for.cond1958
  %969 = load i32, i32* %s1, align 4
  %rem1970 = urem i32 %969, 65521
  store i32 %rem1970, i32* %s1, align 4
  %970 = load i32, i32* %s2, align 4
  %rem1971 = urem i32 %970, 65521
  store i32 %rem1971, i32* %s2, align 4
  %971 = load i64, i64* %block_len, align 8
  %972 = load i64, i64* %buf_len, align 8
  %sub1972 = sub i64 %972, %971
  store i64 %sub1972, i64* %buf_len, align 8
  store i64 5552, i64* %block_len, align 8
  br label %while.cond1913

while.end1973:                                    ; preds = %while.cond1913
  %973 = load i32, i32* %s2, align 4
  %shl1974 = shl i32 %973, 16
  %974 = load i32, i32* %s1, align 4
  %add1975 = add i32 %shl1974, %974
  %975 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler321976 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %975, i32 0, i32 7
  store i32 %add1975, i32* %m_check_adler321976, align 4
  %976 = load i32, i32* %status, align 4
  %cmp1977 = icmp eq i32 %976, 0
  br i1 %cmp1977, label %land.lhs.true1979, label %if.end1988

land.lhs.true1979:                                ; preds = %while.end1973
  %977 = load i32, i32* %decomp_flags.addr, align 4
  %and1980 = and i32 %977, 1
  %tobool1981 = icmp ne i32 %and1980, 0
  br i1 %tobool1981, label %land.lhs.true1982, label %if.end1988

land.lhs.true1982:                                ; preds = %land.lhs.true1979
  %978 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_check_adler321983 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %978, i32 0, i32 7
  %979 = load i32, i32* %m_check_adler321983, align 4
  %980 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8
  %m_z_adler321984 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %980, i32 0, i32 4
  %981 = load i32, i32* %m_z_adler321984, align 8
  %cmp1985 = icmp ne i32 %979, %981
  br i1 %cmp1985, label %if.then1987, label %if.end1988

if.then1987:                                      ; preds = %land.lhs.true1982
  store i32 -2, i32* %status, align 4
  br label %if.end1988

if.end1988:                                       ; preds = %if.then1987, %land.lhs.true1982, %land.lhs.true1979, %while.end1973
  br label %if.end1989

if.end1989:                                       ; preds = %if.end1988, %land.lhs.true1903, %if.end1884
  %982 = load i32, i32* %status, align 4
  store i32 %982, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end1989, %if.then
  %983 = load i32, i32* %retval, align 4
  ret i32 %983
}

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #5

; Function Attrs: nounwind readnone
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1) #6

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_inflateEnd(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 9
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %opaque = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 10
  %6 = load i8*, i8** %opaque, align 8
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state3 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state3, align 8
  %9 = bitcast %struct.mz_internal_state* %8 to i8*
  call void %4(i8* %6, i8* %9)
  %10 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8
  %state4 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %10, i32 0, i32 7
  store %struct.mz_internal_state* null, %struct.mz_internal_state** %state4, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end5, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_uncompress(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len) #0 {
entry:
  %retval = alloca i32, align 4
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  %stream = alloca %struct.mz_stream_s, align 8
  %status = alloca i32, align 4
  store i8* %pDest, i8** %pDest.addr, align 8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8
  store i8* %pSource, i8** %pSource.addr, align 8
  store i64 %source_len, i64* %source_len.addr, align 8
  %0 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 112, i32 8, i1 false)
  %1 = load i64, i64* %source_len.addr, align 8
  %2 = load i64*, i64** %pDest_len.addr, align 8
  %3 = load i64, i64* %2, align 8
  %or = or i64 %1, %3
  %cmp = icmp ugt i64 %or, 4294967295
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -10000, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %pSource.addr, align 8
  %next_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 0
  store i8* %4, i8** %next_in, align 8
  %5 = load i64, i64* %source_len.addr, align 8
  %conv = trunc i64 %5 to i32
  %avail_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 1
  store i32 %conv, i32* %avail_in, align 8
  %6 = load i8*, i8** %pDest.addr, align 8
  %next_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 3
  store i8* %6, i8** %next_out, align 8
  %7 = load i64*, i64** %pDest_len.addr, align 8
  %8 = load i64, i64* %7, align 8
  %conv1 = trunc i64 %8 to i32
  %avail_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 4
  store i32 %conv1, i32* %avail_out, align 8
  %call = call i32 @mz_inflateInit(%struct.mz_stream_s* %stream)
  store i32 %call, i32* %status, align 4
  %9 = load i32, i32* %status, align 4
  %cmp2 = icmp ne i32 %9, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %10 = load i32, i32* %status, align 4
  store i32 %10, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @mz_inflate(%struct.mz_stream_s* %stream, i32 4)
  store i32 %call6, i32* %status, align 4
  %11 = load i32, i32* %status, align 4
  %cmp7 = icmp ne i32 %11, 1
  br i1 %cmp7, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end5
  %call10 = call i32 @mz_inflateEnd(%struct.mz_stream_s* %stream)
  %12 = load i32, i32* %status, align 4
  %cmp11 = icmp eq i32 %12, -5
  br i1 %cmp11, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then9
  %avail_in13 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 1
  %13 = load i32, i32* %avail_in13, align 8
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then9
  %14 = load i32, i32* %status, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -3, %cond.true ], [ %14, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end5
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 5
  %15 = load i64, i64* %total_out, align 8
  %16 = load i64*, i64** %pDest_len.addr, align 8
  store i64 %15, i64* %16, align 8
  %call15 = call i32 @mz_inflateEnd(%struct.mz_stream_s* %stream)
  store i32 %call15, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end14, %cond.end, %if.then4, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mz_error(i32 %err) #0 {
entry:
  %retval = alloca i8*, align 8
  %err.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %err, i32* %err.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp ult i64 %conv, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds [10 x %struct.anon], [10 x %struct.anon]* @mz_error.s_error_descs, i64 0, i64 %idxprom
  %m_err = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0
  %2 = load i32, i32* %m_err, align 16
  %3 = load i32, i32* %err.addr, align 4
  %cmp2 = icmp eq i32 %2, %3
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %idxprom4 = zext i32 %4 to i64
  %arrayidx5 = getelementptr inbounds [10 x %struct.anon], [10 x %struct.anon]* @mz_error.s_error_descs, i64 0, i64 %idxprom4
  %m_pDesc = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx5, i32 0, i32 1
  %5 = load i8*, i8** %m_pDesc, align 8
  store i8* %5, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %7 = load i8*, i8** %retval, align 8
  ret i8* %7
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %n = alloca i64, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 29
  %1 = load i64*, i64** %m_pIn_buf_size, align 8
  %tobool = icmp ne i64* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %2, i32 0, i32 32
  %3 = load i8*, i8** %m_pSrc, align 8
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 27
  %5 = load i8*, i8** %m_pIn_buf, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size1 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 29
  %7 = load i64*, i64** %m_pIn_buf_size1, align 8
  store i64 %sub.ptr.sub, i64* %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 30
  %9 = load i64*, i64** %m_pOut_buf_size, align 8
  %tobool2 = icmp ne i64* %9, null
  br i1 %tobool2, label %if.then3, label %if.end25

if.then3:                                         ; preds = %if.end
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size4 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %10, i32 0, i32 30
  %11 = load i64*, i64** %m_pOut_buf_size4, align 8
  %12 = load i64, i64* %11, align 8
  %13 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %13, i32 0, i32 34
  %14 = load i64, i64* %m_out_buf_ofs, align 8
  %sub = sub i64 %12, %14
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 22
  %16 = load i32, i32* %m_output_flush_remaining, align 4
  %conv = zext i32 %16 to i64
  %cmp = icmp ult i64 %sub, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  %17 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %17, i32 0, i32 30
  %18 = load i64*, i64** %m_pOut_buf_size6, align 8
  %19 = load i64, i64* %18, align 8
  %20 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %20, i32 0, i32 34
  %21 = load i64, i64* %m_out_buf_ofs7, align 8
  %sub8 = sub i64 %19, %21
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining9 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 22
  %23 = load i32, i32* %m_output_flush_remaining9, align 4
  %conv10 = zext i32 %23 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub8, %cond.true ], [ %conv10, %cond.false ]
  store i64 %cond, i64* %n, align 8
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 28
  %25 = load i8*, i8** %m_pOut_buf, align 8
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs11 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %26, i32 0, i32 34
  %27 = load i64, i64* %m_out_buf_ofs11, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %27
  %28 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %28, i32 0, i32 42
  %arraydecay = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf, i32 0, i32 0
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 21
  %30 = load i32, i32* %m_output_flush_ofs, align 8
  %idx.ext = zext i32 %30 to i64
  %add.ptr12 = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  %31 = load i64, i64* %n, align 8
  %32 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf13 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %32, i32 0, i32 28
  %33 = load i8*, i8** %m_pOut_buf13, align 8
  %34 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs14 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %34, i32 0, i32 34
  %35 = load i64, i64* %m_out_buf_ofs14, align 8
  %add.ptr15 = getelementptr inbounds i8, i8* %33, i64 %35
  %36 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr15, i1 false)
  %call = call i8* @__memcpy_chk(i8* %add.ptr, i8* %add.ptr12, i64 %31, i64 %36) #10
  %37 = load i64, i64* %n, align 8
  %conv16 = trunc i64 %37 to i32
  %38 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs17 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %38, i32 0, i32 21
  %39 = load i32, i32* %m_output_flush_ofs17, align 8
  %add = add i32 %39, %conv16
  store i32 %add, i32* %m_output_flush_ofs17, align 8
  %40 = load i64, i64* %n, align 8
  %conv18 = trunc i64 %40 to i32
  %41 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining19 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %41, i32 0, i32 22
  %42 = load i32, i32* %m_output_flush_remaining19, align 4
  %sub20 = sub i32 %42, %conv18
  store i32 %sub20, i32* %m_output_flush_remaining19, align 4
  %43 = load i64, i64* %n, align 8
  %44 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs21 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %44, i32 0, i32 34
  %45 = load i64, i64* %m_out_buf_ofs21, align 8
  %add22 = add i64 %45, %43
  store i64 %add22, i64* %m_out_buf_ofs21, align 8
  %46 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs23 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %46, i32 0, i32 34
  %47 = load i64, i64* %m_out_buf_ofs23, align 8
  %48 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size24 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %48, i32 0, i32 30
  %49 = load i64*, i64** %m_pOut_buf_size24, align 8
  store i64 %47, i64* %49, align 8
  br label %if.end25

if.end25:                                         ; preds = %cond.end, %if.end
  %50 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %50, i32 0, i32 23
  %51 = load i32, i32* %m_finished, align 8
  %tobool26 = icmp ne i32 %51, 0
  br i1 %tobool26, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end25
  %52 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining27 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %52, i32 0, i32 22
  %53 = load i32, i32* %m_output_flush_remaining27, align 4
  %tobool28 = icmp ne i32 %53, 0
  %lnot = xor i1 %tobool28, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end25
  %54 = phi i1 [ false, %if.end25 ], [ %lnot, %land.rhs ]
  %cond29 = select i1 %54, i32 1, i32 0
  ret i32 %cond29
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @tdefl_compress_fast(%struct.tdefl_compressor* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %lookahead_pos = alloca i32, align 4
  %lookahead_size = alloca i32, align 4
  %dict_size = alloca i32, align 4
  %total_lz_bytes = alloca i32, align 4
  %num_flags_left = alloca i32, align 4
  %pLZ_code_buf = alloca i8*, align 8
  %pLZ_flags = alloca i8*, align 8
  %cur_pos = alloca i32, align 4
  %TDEFL_COMP_FAST_LOOKAHEAD_SIZE = alloca i32, align 4
  %dst_pos = alloca i32, align 4
  %num_bytes_to_process = alloca i32, align 4
  %n = alloca i32, align 4
  %cur_match_dist = alloca i32, align 4
  %cur_match_len = alloca i32, align 4
  %pCur_dict = alloca i8*, align 8
  %first_trigram = alloca i32, align 4
  %hash = alloca i32, align 4
  %probe_pos = alloca i32, align 4
  %p = alloca i16*, align 8
  %q = alloca i16*, align 8
  %probe_len = alloca i32, align 4
  %s0 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %n279 = alloca i32, align 4
  %lit = alloca i8, align 1
  %n340 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 6
  %1 = load i32, i32* %m_lookahead_pos, align 4
  store i32 %1, i32* %lookahead_pos, align 4
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %2, i32 0, i32 7
  %3 = load i32, i32* %m_lookahead_size, align 8
  store i32 %3, i32* %lookahead_size, align 4
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 8
  %5 = load i32, i32* %m_dict_size, align 4
  store i32 %5, i32* %dict_size, align 4
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 14
  %7 = load i32, i32* %m_total_lz_bytes, align 4
  store i32 %7, i32* %total_lz_bytes, align 4
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 13
  %9 = load i32, i32* %m_num_flags_left, align 8
  store i32 %9, i32* %num_flags_left, align 4
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %10, i32 0, i32 9
  %11 = load i8*, i8** %m_pLZ_code_buf, align 8
  store i8* %11, i8** %pLZ_code_buf, align 8
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %12, i32 0, i32 10
  %13 = load i8*, i8** %m_pLZ_flags, align 8
  store i8* %13, i8** %pLZ_flags, align 8
  %14 = load i32, i32* %lookahead_pos, align 4
  %and = and i32 %14, 32767
  store i32 %and, i32* %cur_pos, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end361, %entry
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 33
  %16 = load i64, i64* %m_src_buf_left, align 8
  %tobool = icmp ne i64 %16, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %17 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %17, i32 0, i32 31
  %18 = load i32, i32* %m_flush, align 8
  %tobool1 = icmp ne i32 %18, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %19 = load i32, i32* %lookahead_size, align 4
  %tobool2 = icmp ne i32 %19, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %20 = phi i1 [ false, %lor.rhs ], [ %tobool2, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %while.cond
  %21 = phi i1 [ true, %while.cond ], [ %20, %land.end ]
  br i1 %21, label %while.body, label %while.end362

while.body:                                       ; preds = %lor.end
  store i32 4096, i32* %TDEFL_COMP_FAST_LOOKAHEAD_SIZE, align 4
  %22 = load i32, i32* %lookahead_pos, align 4
  %23 = load i32, i32* %lookahead_size, align 4
  %add = add i32 %22, %23
  %and3 = and i32 %add, 32767
  store i32 %and3, i32* %dst_pos, align 4
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left4 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 33
  %25 = load i64, i64* %m_src_buf_left4, align 8
  %26 = load i32, i32* %lookahead_size, align 4
  %sub = sub i32 4096, %26
  %conv = zext i32 %sub to i64
  %cmp = icmp ult i64 %25, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 33
  %28 = load i64, i64* %m_src_buf_left6, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %29 = load i32, i32* %lookahead_size, align 4
  %sub7 = sub i32 4096, %29
  %conv8 = zext i32 %sub7 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %28, %cond.true ], [ %conv8, %cond.false ]
  %conv9 = trunc i64 %cond to i32
  store i32 %conv9, i32* %num_bytes_to_process, align 4
  %30 = load i32, i32* %num_bytes_to_process, align 4
  %conv10 = zext i32 %30 to i64
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left11 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 33
  %32 = load i64, i64* %m_src_buf_left11, align 8
  %sub12 = sub i64 %32, %conv10
  store i64 %sub12, i64* %m_src_buf_left11, align 8
  %33 = load i32, i32* %num_bytes_to_process, align 4
  %34 = load i32, i32* %lookahead_size, align 4
  %add13 = add i32 %34, %33
  store i32 %add13, i32* %lookahead_size, align 4
  br label %while.cond14

while.cond14:                                     ; preds = %if.end, %cond.end
  %35 = load i32, i32* %num_bytes_to_process, align 4
  %tobool15 = icmp ne i32 %35, 0
  br i1 %tobool15, label %while.body16, label %while.end

while.body16:                                     ; preds = %while.cond14
  %36 = load i32, i32* %dst_pos, align 4
  %sub17 = sub i32 32768, %36
  %37 = load i32, i32* %num_bytes_to_process, align 4
  %cmp18 = icmp ult i32 %sub17, %37
  br i1 %cmp18, label %cond.true20, label %cond.false22

cond.true20:                                      ; preds = %while.body16
  %38 = load i32, i32* %dst_pos, align 4
  %sub21 = sub i32 32768, %38
  br label %cond.end23

cond.false22:                                     ; preds = %while.body16
  %39 = load i32, i32* %num_bytes_to_process, align 4
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi i32 [ %sub21, %cond.true20 ], [ %39, %cond.false22 ]
  store i32 %cond24, i32* %n, align 4
  %40 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %40, i32 0, i32 35
  %arraydecay = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict, i32 0, i32 0
  %41 = load i32, i32* %dst_pos, align 4
  %idx.ext = zext i32 %41 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  %42 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %42, i32 0, i32 32
  %43 = load i8*, i8** %m_pSrc, align 8
  %44 = load i32, i32* %n, align 4
  %conv25 = zext i32 %44 to i64
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict26 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 35
  %arraydecay27 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict26, i32 0, i32 0
  %46 = load i32, i32* %dst_pos, align 4
  %idx.ext28 = zext i32 %46 to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %arraydecay27, i64 %idx.ext28
  %47 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr29, i1 false)
  %call = call i8* @__memcpy_chk(i8* %add.ptr, i8* %43, i64 %conv25, i64 %47) #10
  %48 = load i32, i32* %dst_pos, align 4
  %cmp30 = icmp ult i32 %48, 257
  br i1 %cmp30, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end23
  %49 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %49, i32 0, i32 35
  %arraydecay33 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict32, i32 0, i32 0
  %add.ptr34 = getelementptr inbounds i8, i8* %arraydecay33, i64 32768
  %50 = load i32, i32* %dst_pos, align 4
  %idx.ext35 = zext i32 %50 to i64
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr34, i64 %idx.ext35
  %51 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc37 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %51, i32 0, i32 32
  %52 = load i8*, i8** %m_pSrc37, align 8
  %53 = load i32, i32* %n, align 4
  %54 = load i32, i32* %dst_pos, align 4
  %sub38 = sub i32 257, %54
  %cmp39 = icmp ult i32 %53, %sub38
  br i1 %cmp39, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %if.then
  %55 = load i32, i32* %n, align 4
  br label %cond.end44

cond.false42:                                     ; preds = %if.then
  %56 = load i32, i32* %dst_pos, align 4
  %sub43 = sub i32 257, %56
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false42, %cond.true41
  %cond45 = phi i32 [ %55, %cond.true41 ], [ %sub43, %cond.false42 ]
  %conv46 = zext i32 %cond45 to i64
  %57 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict47 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %57, i32 0, i32 35
  %arraydecay48 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict47, i32 0, i32 0
  %add.ptr49 = getelementptr inbounds i8, i8* %arraydecay48, i64 32768
  %58 = load i32, i32* %dst_pos, align 4
  %idx.ext50 = zext i32 %58 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %add.ptr49, i64 %idx.ext50
  %59 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr51, i1 false)
  %call52 = call i8* @__memcpy_chk(i8* %add.ptr36, i8* %52, i64 %conv46, i64 %59) #10
  br label %if.end

if.end:                                           ; preds = %cond.end44, %cond.end23
  %60 = load i32, i32* %n, align 4
  %61 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc53 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %61, i32 0, i32 32
  %62 = load i8*, i8** %m_pSrc53, align 8
  %idx.ext54 = zext i32 %60 to i64
  %add.ptr55 = getelementptr inbounds i8, i8* %62, i64 %idx.ext54
  store i8* %add.ptr55, i8** %m_pSrc53, align 8
  %63 = load i32, i32* %dst_pos, align 4
  %64 = load i32, i32* %n, align 4
  %add56 = add i32 %63, %64
  %and57 = and i32 %add56, 32767
  store i32 %and57, i32* %dst_pos, align 4
  %65 = load i32, i32* %n, align 4
  %66 = load i32, i32* %num_bytes_to_process, align 4
  %sub58 = sub i32 %66, %65
  store i32 %sub58, i32* %num_bytes_to_process, align 4
  br label %while.cond14

while.end:                                        ; preds = %while.cond14
  %67 = load i32, i32* %lookahead_size, align 4
  %sub59 = sub i32 32768, %67
  %68 = load i32, i32* %dict_size, align 4
  %cmp60 = icmp ult i32 %sub59, %68
  br i1 %cmp60, label %cond.true62, label %cond.false64

cond.true62:                                      ; preds = %while.end
  %69 = load i32, i32* %lookahead_size, align 4
  %sub63 = sub i32 32768, %69
  br label %cond.end65

cond.false64:                                     ; preds = %while.end
  %70 = load i32, i32* %dict_size, align 4
  br label %cond.end65

cond.end65:                                       ; preds = %cond.false64, %cond.true62
  %cond66 = phi i32 [ %sub63, %cond.true62 ], [ %70, %cond.false64 ]
  store i32 %cond66, i32* %dict_size, align 4
  %71 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flush67 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %71, i32 0, i32 31
  %72 = load i32, i32* %m_flush67, align 8
  %tobool68 = icmp ne i32 %72, 0
  br i1 %tobool68, label %if.end72, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end65
  %73 = load i32, i32* %lookahead_size, align 4
  %cmp69 = icmp ult i32 %73, 4096
  br i1 %cmp69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %land.lhs.true
  br label %while.end362

if.end72:                                         ; preds = %land.lhs.true, %cond.end65
  br label %while.cond73

while.cond73:                                     ; preds = %if.end299, %if.end72
  %74 = load i32, i32* %lookahead_size, align 4
  %cmp74 = icmp uge i32 %74, 4
  br i1 %cmp74, label %while.body76, label %while.end300

while.body76:                                     ; preds = %while.cond73
  store i32 1, i32* %cur_match_len, align 4
  %75 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict77 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %75, i32 0, i32 35
  %arraydecay78 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict77, i32 0, i32 0
  %76 = load i32, i32* %cur_pos, align 4
  %idx.ext79 = zext i32 %76 to i64
  %add.ptr80 = getelementptr inbounds i8, i8* %arraydecay78, i64 %idx.ext79
  store i8* %add.ptr80, i8** %pCur_dict, align 8
  %77 = load i8*, i8** %pCur_dict, align 8
  %call81 = call i32 @TDEFL_READ_UNALIGNED_WORD32(i8* %77)
  %and82 = and i32 %call81, 16777215
  store i32 %and82, i32* %first_trigram, align 4
  %78 = load i32, i32* %first_trigram, align 4
  %79 = load i32, i32* %first_trigram, align 4
  %shr = lshr i32 %79, 17
  %xor = xor i32 %78, %shr
  %and83 = and i32 %xor, 4095
  store i32 %and83, i32* %hash, align 4
  %80 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %80, i32 0, i32 41
  %81 = load i32, i32* %hash, align 4
  %idxprom = zext i32 %81 to i64
  %arrayidx = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash, i64 0, i64 %idxprom
  %82 = load i16, i16* %arrayidx, align 2
  %conv84 = zext i16 %82 to i32
  store i32 %conv84, i32* %probe_pos, align 4
  %83 = load i32, i32* %lookahead_pos, align 4
  %conv85 = trunc i32 %83 to i16
  %84 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash86 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %84, i32 0, i32 41
  %85 = load i32, i32* %hash, align 4
  %idxprom87 = zext i32 %85 to i64
  %arrayidx88 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash86, i64 0, i64 %idxprom87
  store i16 %conv85, i16* %arrayidx88, align 2
  %86 = load i32, i32* %lookahead_pos, align 4
  %87 = load i32, i32* %probe_pos, align 4
  %sub89 = sub i32 %86, %87
  %conv90 = trunc i32 %sub89 to i16
  %conv91 = zext i16 %conv90 to i32
  store i32 %conv91, i32* %cur_match_dist, align 4
  %88 = load i32, i32* %dict_size, align 4
  %cmp92 = icmp ule i32 %conv91, %88
  br i1 %cmp92, label %land.lhs.true94, label %if.else234

land.lhs.true94:                                  ; preds = %while.body76
  %89 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict95 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %89, i32 0, i32 35
  %arraydecay96 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict95, i32 0, i32 0
  %90 = load i32, i32* %probe_pos, align 4
  %and97 = and i32 %90, 32767
  store i32 %and97, i32* %probe_pos, align 4
  %idx.ext98 = zext i32 %and97 to i64
  %add.ptr99 = getelementptr inbounds i8, i8* %arraydecay96, i64 %idx.ext98
  %call100 = call i32 @TDEFL_READ_UNALIGNED_WORD32(i8* %add.ptr99)
  %and101 = and i32 %call100, 16777215
  %91 = load i32, i32* %first_trigram, align 4
  %cmp102 = icmp eq i32 %and101, %91
  br i1 %cmp102, label %if.then104, label %if.else234

if.then104:                                       ; preds = %land.lhs.true94
  %92 = load i8*, i8** %pCur_dict, align 8
  %93 = bitcast i8* %92 to i16*
  store i16* %93, i16** %p, align 8
  %94 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict105 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %94, i32 0, i32 35
  %arraydecay106 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict105, i32 0, i32 0
  %95 = load i32, i32* %probe_pos, align 4
  %idx.ext107 = zext i32 %95 to i64
  %add.ptr108 = getelementptr inbounds i8, i8* %arraydecay106, i64 %idx.ext107
  %96 = bitcast i8* %add.ptr108 to i16*
  store i16* %96, i16** %q, align 8
  store i32 32, i32* %probe_len, align 4
  br label %do.body

do.body:                                          ; preds = %land.end146, %if.then104
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %97 = load i16*, i16** %p, align 8
  %incdec.ptr = getelementptr inbounds i16, i16* %97, i32 1
  store i16* %incdec.ptr, i16** %p, align 8
  %call109 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr)
  %conv110 = zext i16 %call109 to i32
  %98 = load i16*, i16** %q, align 8
  %incdec.ptr111 = getelementptr inbounds i16, i16* %98, i32 1
  store i16* %incdec.ptr111, i16** %q, align 8
  %call112 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr111)
  %conv113 = zext i16 %call112 to i32
  %cmp114 = icmp eq i32 %conv110, %conv113
  br i1 %cmp114, label %land.lhs.true116, label %land.end146

land.lhs.true116:                                 ; preds = %do.cond
  %99 = load i16*, i16** %p, align 8
  %incdec.ptr117 = getelementptr inbounds i16, i16* %99, i32 1
  store i16* %incdec.ptr117, i16** %p, align 8
  %call118 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr117)
  %conv119 = zext i16 %call118 to i32
  %100 = load i16*, i16** %q, align 8
  %incdec.ptr120 = getelementptr inbounds i16, i16* %100, i32 1
  store i16* %incdec.ptr120, i16** %q, align 8
  %call121 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr120)
  %conv122 = zext i16 %call121 to i32
  %cmp123 = icmp eq i32 %conv119, %conv122
  br i1 %cmp123, label %land.lhs.true125, label %land.end146

land.lhs.true125:                                 ; preds = %land.lhs.true116
  %101 = load i16*, i16** %p, align 8
  %incdec.ptr126 = getelementptr inbounds i16, i16* %101, i32 1
  store i16* %incdec.ptr126, i16** %p, align 8
  %call127 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr126)
  %conv128 = zext i16 %call127 to i32
  %102 = load i16*, i16** %q, align 8
  %incdec.ptr129 = getelementptr inbounds i16, i16* %102, i32 1
  store i16* %incdec.ptr129, i16** %q, align 8
  %call130 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr129)
  %conv131 = zext i16 %call130 to i32
  %cmp132 = icmp eq i32 %conv128, %conv131
  br i1 %cmp132, label %land.lhs.true134, label %land.end146

land.lhs.true134:                                 ; preds = %land.lhs.true125
  %103 = load i16*, i16** %p, align 8
  %incdec.ptr135 = getelementptr inbounds i16, i16* %103, i32 1
  store i16* %incdec.ptr135, i16** %p, align 8
  %call136 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr135)
  %conv137 = zext i16 %call136 to i32
  %104 = load i16*, i16** %q, align 8
  %incdec.ptr138 = getelementptr inbounds i16, i16* %104, i32 1
  store i16* %incdec.ptr138, i16** %q, align 8
  %call139 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr138)
  %conv140 = zext i16 %call139 to i32
  %cmp141 = icmp eq i32 %conv137, %conv140
  br i1 %cmp141, label %land.rhs143, label %land.end146

land.rhs143:                                      ; preds = %land.lhs.true134
  %105 = load i32, i32* %probe_len, align 4
  %dec = add i32 %105, -1
  store i32 %dec, i32* %probe_len, align 4
  %cmp144 = icmp ugt i32 %dec, 0
  br label %land.end146

land.end146:                                      ; preds = %land.rhs143, %land.lhs.true134, %land.lhs.true125, %land.lhs.true116, %do.cond
  %106 = phi i1 [ false, %land.lhs.true134 ], [ false, %land.lhs.true125 ], [ false, %land.lhs.true116 ], [ false, %do.cond ], [ %cmp144, %land.rhs143 ]
  br i1 %106, label %do.body, label %do.end

do.end:                                           ; preds = %land.end146
  %107 = load i16*, i16** %p, align 8
  %108 = load i8*, i8** %pCur_dict, align 8
  %109 = bitcast i8* %108 to i16*
  %sub.ptr.lhs.cast = ptrtoint i16* %107 to i64
  %sub.ptr.rhs.cast = ptrtoint i16* %109 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 2
  %conv147 = trunc i64 %sub.ptr.div to i32
  %mul = mul i32 %conv147, 2
  %110 = load i16*, i16** %p, align 8
  %111 = bitcast i16* %110 to i8*
  %112 = load i8, i8* %111, align 1
  %conv148 = zext i8 %112 to i32
  %113 = load i16*, i16** %q, align 8
  %114 = bitcast i16* %113 to i8*
  %115 = load i8, i8* %114, align 1
  %conv149 = zext i8 %115 to i32
  %cmp150 = icmp eq i32 %conv148, %conv149
  %conv151 = zext i1 %cmp150 to i32
  %add152 = add i32 %mul, %conv151
  store i32 %add152, i32* %cur_match_len, align 4
  %116 = load i32, i32* %probe_len, align 4
  %tobool153 = icmp ne i32 %116, 0
  br i1 %tobool153, label %if.end157, label %if.then154

if.then154:                                       ; preds = %do.end
  %117 = load i32, i32* %cur_match_dist, align 4
  %tobool155 = icmp ne i32 %117, 0
  %cond156 = select i1 %tobool155, i32 258, i32 0
  store i32 %cond156, i32* %cur_match_len, align 4
  br label %if.end157

if.end157:                                        ; preds = %if.then154, %do.end
  %118 = load i32, i32* %cur_match_len, align 4
  %cmp158 = icmp ult i32 %118, 3
  br i1 %cmp158, label %if.then165, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end157
  %119 = load i32, i32* %cur_match_len, align 4
  %cmp160 = icmp eq i32 %119, 3
  br i1 %cmp160, label %land.lhs.true162, label %if.else

land.lhs.true162:                                 ; preds = %lor.lhs.false
  %120 = load i32, i32* %cur_match_dist, align 4
  %cmp163 = icmp uge i32 %120, 8192
  br i1 %cmp163, label %if.then165, label %if.else

if.then165:                                       ; preds = %land.lhs.true162, %if.end157
  store i32 1, i32* %cur_match_len, align 4
  %121 = load i32, i32* %first_trigram, align 4
  %conv166 = trunc i32 %121 to i8
  %122 = load i8*, i8** %pLZ_code_buf, align 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %122, i32 1
  store i8* %incdec.ptr167, i8** %pLZ_code_buf, align 8
  store i8 %conv166, i8* %122, align 1
  %123 = load i8*, i8** %pLZ_flags, align 8
  %124 = load i8, i8* %123, align 1
  %conv168 = zext i8 %124 to i32
  %shr169 = ashr i32 %conv168, 1
  %conv170 = trunc i32 %shr169 to i8
  %125 = load i8*, i8** %pLZ_flags, align 8
  store i8 %conv170, i8* %125, align 1
  %126 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %126, i32 0, i32 36
  %arrayidx171 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %127 = load i32, i32* %first_trigram, align 4
  %conv172 = trunc i32 %127 to i8
  %idxprom173 = zext i8 %conv172 to i64
  %arrayidx174 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx171, i64 0, i64 %idxprom173
  %128 = load i16, i16* %arrayidx174, align 2
  %inc = add i16 %128, 1
  store i16 %inc, i16* %arrayidx174, align 2
  br label %if.end233

if.else:                                          ; preds = %land.lhs.true162, %lor.lhs.false
  %129 = load i32, i32* %cur_match_len, align 4
  %130 = load i32, i32* %lookahead_size, align 4
  %cmp175 = icmp ult i32 %129, %130
  br i1 %cmp175, label %cond.true177, label %cond.false178

cond.true177:                                     ; preds = %if.else
  %131 = load i32, i32* %cur_match_len, align 4
  br label %cond.end179

cond.false178:                                    ; preds = %if.else
  %132 = load i32, i32* %lookahead_size, align 4
  br label %cond.end179

cond.end179:                                      ; preds = %cond.false178, %cond.true177
  %cond180 = phi i32 [ %131, %cond.true177 ], [ %132, %cond.false178 ]
  store i32 %cond180, i32* %cur_match_len, align 4
  %133 = load i32, i32* %cur_match_len, align 4
  %cmp181 = icmp uge i32 %133, 3
  br i1 %cmp181, label %land.lhs.true183, label %land.end189

land.lhs.true183:                                 ; preds = %cond.end179
  %134 = load i32, i32* %cur_match_dist, align 4
  %cmp184 = icmp uge i32 %134, 1
  br i1 %cmp184, label %land.rhs186, label %land.end189

land.rhs186:                                      ; preds = %land.lhs.true183
  %135 = load i32, i32* %cur_match_dist, align 4
  %cmp187 = icmp ule i32 %135, 32768
  br label %land.end189

land.end189:                                      ; preds = %land.rhs186, %land.lhs.true183, %cond.end179
  %136 = phi i1 [ false, %land.lhs.true183 ], [ false, %cond.end179 ], [ %cmp187, %land.rhs186 ]
  %lnot = xor i1 %136, true
  %lnot.ext = zext i1 %lnot to i32
  %conv190 = sext i32 %lnot.ext to i64
  %tobool191 = icmp ne i64 %conv190, 0
  br i1 %tobool191, label %cond.true192, label %cond.false193

cond.true192:                                     ; preds = %land.end189
  call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.tdefl_compress_fast, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1558, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str.58, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end194

cond.false193:                                    ; preds = %land.end189
  br label %cond.end194

cond.end194:                                      ; preds = %cond.false193, %137
  %138 = load i32, i32* %cur_match_dist, align 4
  %dec195 = add i32 %138, -1
  store i32 %dec195, i32* %cur_match_dist, align 4
  %139 = load i32, i32* %cur_match_len, align 4
  %sub196 = sub i32 %139, 3
  %conv197 = trunc i32 %sub196 to i8
  %140 = load i8*, i8** %pLZ_code_buf, align 8
  %arrayidx198 = getelementptr inbounds i8, i8* %140, i64 0
  store i8 %conv197, i8* %arrayidx198, align 1
  %141 = load i8*, i8** %pLZ_code_buf, align 8
  %arrayidx199 = getelementptr inbounds i8, i8* %141, i64 1
  %142 = bitcast i32* %cur_match_dist to i8*
  %143 = load i8*, i8** %pLZ_code_buf, align 8
  %arrayidx200 = getelementptr inbounds i8, i8* %143, i64 1
  %144 = call i64 @llvm.objectsize.i64.p0i8(i8* %arrayidx200, i1 false)
  %call201 = call i8* @__memcpy_chk(i8* %arrayidx199, i8* %142, i64 4, i64 %144) #10
  %145 = load i8*, i8** %pLZ_code_buf, align 8
  %add.ptr202 = getelementptr inbounds i8, i8* %145, i64 3
  store i8* %add.ptr202, i8** %pLZ_code_buf, align 8
  %146 = load i8*, i8** %pLZ_flags, align 8
  %147 = load i8, i8* %146, align 1
  %conv203 = zext i8 %147 to i32
  %shr204 = ashr i32 %conv203, 1
  %or = or i32 %shr204, 128
  %conv205 = trunc i32 %or to i8
  %148 = load i8*, i8** %pLZ_flags, align 8
  store i8 %conv205, i8* %148, align 1
  %149 = load i32, i32* %cur_match_dist, align 4
  %and206 = and i32 %149, 511
  %idxprom207 = zext i32 %and206 to i64
  %arrayidx208 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_sym, i64 0, i64 %idxprom207
  %150 = load i8, i8* %arrayidx208, align 1
  %conv209 = zext i8 %150 to i32
  store i32 %conv209, i32* %s0, align 4
  %151 = load i32, i32* %cur_match_dist, align 4
  %shr210 = lshr i32 %151, 8
  %idxprom211 = zext i32 %shr210 to i64
  %arrayidx212 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_sym, i64 0, i64 %idxprom211
  %152 = load i8, i8* %arrayidx212, align 1
  %conv213 = zext i8 %152 to i32
  store i32 %conv213, i32* %s1, align 4
  %153 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count214 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %153, i32 0, i32 36
  %arrayidx215 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count214, i64 0, i64 1
  %154 = load i32, i32* %cur_match_dist, align 4
  %cmp216 = icmp ult i32 %154, 512
  br i1 %cmp216, label %cond.true218, label %cond.false219

cond.true218:                                     ; preds = %cond.end194
  %155 = load i32, i32* %s0, align 4
  br label %cond.end220

cond.false219:                                    ; preds = %cond.end194
  %156 = load i32, i32* %s1, align 4
  br label %cond.end220

cond.end220:                                      ; preds = %cond.false219, %cond.true218
  %cond221 = phi i32 [ %155, %cond.true218 ], [ %156, %cond.false219 ]
  %idxprom222 = zext i32 %cond221 to i64
  %arrayidx223 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx215, i64 0, i64 %idxprom222
  %157 = load i16, i16* %arrayidx223, align 2
  %inc224 = add i16 %157, 1
  store i16 %inc224, i16* %arrayidx223, align 2
  %158 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count225 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %158, i32 0, i32 36
  %arrayidx226 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count225, i64 0, i64 0
  %159 = load i32, i32* %cur_match_len, align 4
  %sub227 = sub i32 %159, 3
  %idxprom228 = zext i32 %sub227 to i64
  %arrayidx229 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom228
  %160 = load i16, i16* %arrayidx229, align 2
  %idxprom230 = zext i16 %160 to i64
  %arrayidx231 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx226, i64 0, i64 %idxprom230
  %161 = load i16, i16* %arrayidx231, align 2
  %inc232 = add i16 %161, 1
  store i16 %inc232, i16* %arrayidx231, align 2
  br label %if.end233

if.end233:                                        ; preds = %cond.end220, %if.then165
  br label %if.end246

if.else234:                                       ; preds = %land.lhs.true94, %while.body76
  %162 = load i32, i32* %first_trigram, align 4
  %conv235 = trunc i32 %162 to i8
  %163 = load i8*, i8** %pLZ_code_buf, align 8
  %incdec.ptr236 = getelementptr inbounds i8, i8* %163, i32 1
  store i8* %incdec.ptr236, i8** %pLZ_code_buf, align 8
  store i8 %conv235, i8* %163, align 1
  %164 = load i8*, i8** %pLZ_flags, align 8
  %165 = load i8, i8* %164, align 1
  %conv237 = zext i8 %165 to i32
  %shr238 = ashr i32 %conv237, 1
  %conv239 = trunc i32 %shr238 to i8
  %166 = load i8*, i8** %pLZ_flags, align 8
  store i8 %conv239, i8* %166, align 1
  %167 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count240 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %167, i32 0, i32 36
  %arrayidx241 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count240, i64 0, i64 0
  %168 = load i32, i32* %first_trigram, align 4
  %conv242 = trunc i32 %168 to i8
  %idxprom243 = zext i8 %conv242 to i64
  %arrayidx244 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx241, i64 0, i64 %idxprom243
  %169 = load i16, i16* %arrayidx244, align 2
  %inc245 = add i16 %169, 1
  store i16 %inc245, i16* %arrayidx244, align 2
  br label %if.end246

if.end246:                                        ; preds = %if.else234, %if.end233
  %170 = load i32, i32* %num_flags_left, align 4
  %dec247 = add i32 %170, -1
  store i32 %dec247, i32* %num_flags_left, align 4
  %cmp248 = icmp eq i32 %dec247, 0
  br i1 %cmp248, label %if.then250, label %if.end252

if.then250:                                       ; preds = %if.end246
  store i32 8, i32* %num_flags_left, align 4
  %171 = load i8*, i8** %pLZ_code_buf, align 8
  %incdec.ptr251 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %incdec.ptr251, i8** %pLZ_code_buf, align 8
  store i8* %171, i8** %pLZ_flags, align 8
  br label %if.end252

if.end252:                                        ; preds = %if.then250, %if.end246
  %172 = load i32, i32* %cur_match_len, align 4
  %173 = load i32, i32* %total_lz_bytes, align 4
  %add253 = add i32 %173, %172
  store i32 %add253, i32* %total_lz_bytes, align 4
  %174 = load i32, i32* %cur_match_len, align 4
  %175 = load i32, i32* %lookahead_pos, align 4
  %add254 = add i32 %175, %174
  store i32 %add254, i32* %lookahead_pos, align 4
  %176 = load i32, i32* %dict_size, align 4
  %177 = load i32, i32* %cur_match_len, align 4
  %add255 = add i32 %176, %177
  %cmp256 = icmp ult i32 %add255, 32768
  br i1 %cmp256, label %cond.true258, label %cond.false260

cond.true258:                                     ; preds = %if.end252
  %178 = load i32, i32* %dict_size, align 4
  %179 = load i32, i32* %cur_match_len, align 4
  %add259 = add i32 %178, %179
  br label %cond.end261

cond.false260:                                    ; preds = %if.end252
  br label %cond.end261

cond.end261:                                      ; preds = %cond.false260, %cond.true258
  %cond262 = phi i32 [ %add259, %cond.true258 ], [ 32768, %cond.false260 ]
  store i32 %cond262, i32* %dict_size, align 4
  %180 = load i32, i32* %cur_pos, align 4
  %181 = load i32, i32* %cur_match_len, align 4
  %add263 = add i32 %180, %181
  %and264 = and i32 %add263, 32767
  store i32 %and264, i32* %cur_pos, align 4
  %182 = load i32, i32* %lookahead_size, align 4
  %183 = load i32, i32* %cur_match_len, align 4
  %cmp265 = icmp uge i32 %182, %183
  %lnot267 = xor i1 %cmp265, true
  %lnot.ext268 = zext i1 %lnot267 to i32
  %conv269 = sext i32 %lnot.ext268 to i64
  %tobool270 = icmp ne i64 %conv269, 0
  br i1 %tobool270, label %cond.true271, label %cond.false272

cond.true271:                                     ; preds = %cond.end261
  call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.tdefl_compress_fast, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1595, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.59, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end273

cond.false272:                                    ; preds = %cond.end261
  br label %cond.end273

cond.end273:                                      ; preds = %cond.false272, %184
  %185 = load i32, i32* %cur_match_len, align 4
  %186 = load i32, i32* %lookahead_size, align 4
  %sub274 = sub i32 %186, %185
  store i32 %sub274, i32* %lookahead_size, align 4
  %187 = load i8*, i8** %pLZ_code_buf, align 8
  %188 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %188, i32 0, i32 39
  %arrayidx275 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i64 0, i64 65528
  %cmp276 = icmp ugt i8* %187, %arrayidx275
  br i1 %cmp276, label %if.then278, label %if.end299

if.then278:                                       ; preds = %cond.end273
  %189 = load i32, i32* %lookahead_pos, align 4
  %190 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos280 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %190, i32 0, i32 6
  store i32 %189, i32* %m_lookahead_pos280, align 4
  %191 = load i32, i32* %lookahead_size, align 4
  %192 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size281 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %192, i32 0, i32 7
  store i32 %191, i32* %m_lookahead_size281, align 8
  %193 = load i32, i32* %dict_size, align 4
  %194 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size282 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %194, i32 0, i32 8
  store i32 %193, i32* %m_dict_size282, align 4
  %195 = load i32, i32* %total_lz_bytes, align 4
  %196 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes283 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %196, i32 0, i32 14
  store i32 %195, i32* %m_total_lz_bytes283, align 4
  %197 = load i8*, i8** %pLZ_code_buf, align 8
  %198 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf284 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %198, i32 0, i32 9
  store i8* %197, i8** %m_pLZ_code_buf284, align 8
  %199 = load i8*, i8** %pLZ_flags, align 8
  %200 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags285 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %200, i32 0, i32 10
  store i8* %199, i8** %m_pLZ_flags285, align 8
  %201 = load i32, i32* %num_flags_left, align 4
  %202 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left286 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %202, i32 0, i32 13
  store i32 %201, i32* %m_num_flags_left286, align 8
  %203 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call287 = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %203, i32 0)
  store i32 %call287, i32* %n279, align 4
  %cmp288 = icmp ne i32 %call287, 0
  br i1 %cmp288, label %if.then290, label %if.end294

if.then290:                                       ; preds = %if.then278
  %204 = load i32, i32* %n279, align 4
  %cmp291 = icmp slt i32 %204, 0
  %cond293 = select i1 %cmp291, i32 0, i32 1
  store i32 %cond293, i32* %retval, align 4
  br label %return

if.end294:                                        ; preds = %if.then278
  %205 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes295 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %205, i32 0, i32 14
  %206 = load i32, i32* %m_total_lz_bytes295, align 4
  store i32 %206, i32* %total_lz_bytes, align 4
  %207 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf296 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %207, i32 0, i32 9
  %208 = load i8*, i8** %m_pLZ_code_buf296, align 8
  store i8* %208, i8** %pLZ_code_buf, align 8
  %209 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags297 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %209, i32 0, i32 10
  %210 = load i8*, i8** %m_pLZ_flags297, align 8
  store i8* %210, i8** %pLZ_flags, align 8
  %211 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left298 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %211, i32 0, i32 13
  %212 = load i32, i32* %m_num_flags_left298, align 8
  store i32 %212, i32* %num_flags_left, align 4
  br label %if.end299

if.end299:                                        ; preds = %if.end294, %cond.end273
  br label %while.cond73

while.end300:                                     ; preds = %while.cond73
  br label %while.cond301

while.cond301:                                    ; preds = %if.end360, %while.end300
  %213 = load i32, i32* %lookahead_size, align 4
  %tobool302 = icmp ne i32 %213, 0
  br i1 %tobool302, label %while.body303, label %while.end361

while.body303:                                    ; preds = %while.cond301
  %214 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict304 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %214, i32 0, i32 35
  %215 = load i32, i32* %cur_pos, align 4
  %idxprom305 = zext i32 %215 to i64
  %arrayidx306 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict304, i64 0, i64 %idxprom305
  %216 = load i8, i8* %arrayidx306, align 1
  store i8 %216, i8* %lit, align 1
  %217 = load i32, i32* %total_lz_bytes, align 4
  %inc307 = add i32 %217, 1
  store i32 %inc307, i32* %total_lz_bytes, align 4
  %218 = load i8, i8* %lit, align 1
  %219 = load i8*, i8** %pLZ_code_buf, align 8
  %incdec.ptr308 = getelementptr inbounds i8, i8* %219, i32 1
  store i8* %incdec.ptr308, i8** %pLZ_code_buf, align 8
  store i8 %218, i8* %219, align 1
  %220 = load i8*, i8** %pLZ_flags, align 8
  %221 = load i8, i8* %220, align 1
  %conv309 = zext i8 %221 to i32
  %shr310 = ashr i32 %conv309, 1
  %conv311 = trunc i32 %shr310 to i8
  %222 = load i8*, i8** %pLZ_flags, align 8
  store i8 %conv311, i8* %222, align 1
  %223 = load i32, i32* %num_flags_left, align 4
  %dec312 = add i32 %223, -1
  store i32 %dec312, i32* %num_flags_left, align 4
  %cmp313 = icmp eq i32 %dec312, 0
  br i1 %cmp313, label %if.then315, label %if.end317

if.then315:                                       ; preds = %while.body303
  store i32 8, i32* %num_flags_left, align 4
  %224 = load i8*, i8** %pLZ_code_buf, align 8
  %incdec.ptr316 = getelementptr inbounds i8, i8* %224, i32 1
  store i8* %incdec.ptr316, i8** %pLZ_code_buf, align 8
  store i8* %224, i8** %pLZ_flags, align 8
  br label %if.end317

if.end317:                                        ; preds = %if.then315, %while.body303
  %225 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count318 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %225, i32 0, i32 36
  %arrayidx319 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count318, i64 0, i64 0
  %226 = load i8, i8* %lit, align 1
  %idxprom320 = zext i8 %226 to i64
  %arrayidx321 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx319, i64 0, i64 %idxprom320
  %227 = load i16, i16* %arrayidx321, align 2
  %inc322 = add i16 %227, 1
  store i16 %inc322, i16* %arrayidx321, align 2
  %228 = load i32, i32* %lookahead_pos, align 4
  %inc323 = add i32 %228, 1
  store i32 %inc323, i32* %lookahead_pos, align 4
  %229 = load i32, i32* %dict_size, align 4
  %add324 = add i32 %229, 1
  %cmp325 = icmp ult i32 %add324, 32768
  br i1 %cmp325, label %cond.true327, label %cond.false329

cond.true327:                                     ; preds = %if.end317
  %230 = load i32, i32* %dict_size, align 4
  %add328 = add i32 %230, 1
  br label %cond.end330

cond.false329:                                    ; preds = %if.end317
  br label %cond.end330

cond.end330:                                      ; preds = %cond.false329, %cond.true327
  %cond331 = phi i32 [ %add328, %cond.true327 ], [ 32768, %cond.false329 ]
  store i32 %cond331, i32* %dict_size, align 4
  %231 = load i32, i32* %cur_pos, align 4
  %add332 = add i32 %231, 1
  %and333 = and i32 %add332, 32767
  store i32 %and333, i32* %cur_pos, align 4
  %232 = load i32, i32* %lookahead_size, align 4
  %dec334 = add i32 %232, -1
  store i32 %dec334, i32* %lookahead_size, align 4
  %233 = load i8*, i8** %pLZ_code_buf, align 8
  %234 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf335 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %234, i32 0, i32 39
  %arrayidx336 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf335, i64 0, i64 65528
  %cmp337 = icmp ugt i8* %233, %arrayidx336
  br i1 %cmp337, label %if.then339, label %if.end360

if.then339:                                       ; preds = %cond.end330
  %235 = load i32, i32* %lookahead_pos, align 4
  %236 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos341 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %236, i32 0, i32 6
  store i32 %235, i32* %m_lookahead_pos341, align 4
  %237 = load i32, i32* %lookahead_size, align 4
  %238 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size342 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %238, i32 0, i32 7
  store i32 %237, i32* %m_lookahead_size342, align 8
  %239 = load i32, i32* %dict_size, align 4
  %240 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size343 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %240, i32 0, i32 8
  store i32 %239, i32* %m_dict_size343, align 4
  %241 = load i32, i32* %total_lz_bytes, align 4
  %242 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes344 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %242, i32 0, i32 14
  store i32 %241, i32* %m_total_lz_bytes344, align 4
  %243 = load i8*, i8** %pLZ_code_buf, align 8
  %244 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf345 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %244, i32 0, i32 9
  store i8* %243, i8** %m_pLZ_code_buf345, align 8
  %245 = load i8*, i8** %pLZ_flags, align 8
  %246 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags346 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %246, i32 0, i32 10
  store i8* %245, i8** %m_pLZ_flags346, align 8
  %247 = load i32, i32* %num_flags_left, align 4
  %248 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left347 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %248, i32 0, i32 13
  store i32 %247, i32* %m_num_flags_left347, align 8
  %249 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call348 = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %249, i32 0)
  store i32 %call348, i32* %n340, align 4
  %cmp349 = icmp ne i32 %call348, 0
  br i1 %cmp349, label %if.then351, label %if.end355

if.then351:                                       ; preds = %if.then339
  %250 = load i32, i32* %n340, align 4
  %cmp352 = icmp slt i32 %250, 0
  %cond354 = select i1 %cmp352, i32 0, i32 1
  store i32 %cond354, i32* %retval, align 4
  br label %return

if.end355:                                        ; preds = %if.then339
  %251 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes356 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %251, i32 0, i32 14
  %252 = load i32, i32* %m_total_lz_bytes356, align 4
  store i32 %252, i32* %total_lz_bytes, align 4
  %253 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf357 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %253, i32 0, i32 9
  %254 = load i8*, i8** %m_pLZ_code_buf357, align 8
  store i8* %254, i8** %pLZ_code_buf, align 8
  %255 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags358 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %255, i32 0, i32 10
  %256 = load i8*, i8** %m_pLZ_flags358, align 8
  store i8* %256, i8** %pLZ_flags, align 8
  %257 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left359 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %257, i32 0, i32 13
  %258 = load i32, i32* %m_num_flags_left359, align 8
  store i32 %258, i32* %num_flags_left, align 4
  br label %if.end360

if.end360:                                        ; preds = %if.end355, %cond.end330
  br label %while.cond301

while.end361:                                     ; preds = %while.cond301
  br label %while.cond

while.end362:                                     ; preds = %if.then71, %lor.end
  %259 = load i32, i32* %lookahead_pos, align 4
  %260 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos363 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %260, i32 0, i32 6
  store i32 %259, i32* %m_lookahead_pos363, align 4
  %261 = load i32, i32* %lookahead_size, align 4
  %262 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size364 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %262, i32 0, i32 7
  store i32 %261, i32* %m_lookahead_size364, align 8
  %263 = load i32, i32* %dict_size, align 4
  %264 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size365 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %264, i32 0, i32 8
  store i32 %263, i32* %m_dict_size365, align 4
  %265 = load i32, i32* %total_lz_bytes, align 4
  %266 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes366 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %266, i32 0, i32 14
  store i32 %265, i32* %m_total_lz_bytes366, align 4
  %267 = load i8*, i8** %pLZ_code_buf, align 8
  %268 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf367 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %268, i32 0, i32 9
  store i8* %267, i8** %m_pLZ_code_buf367, align 8
  %269 = load i8*, i8** %pLZ_flags, align 8
  %270 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags368 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %270, i32 0, i32 10
  store i8* %269, i8** %m_pLZ_flags368, align 8
  %271 = load i32, i32* %num_flags_left, align 4
  %272 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left369 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %272, i32 0, i32 13
  store i32 %271, i32* %m_num_flags_left369, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end362, %if.then351, %if.then290
  %273 = load i32, i32* %retval, align 4
  ret i32 %273
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @tdefl_compress_normal(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr.i478 = alloca %struct.tdefl_compressor*, align 8
  %match_len.addr.i479 = alloca i32, align 4
  %match_dist.addr.i480 = alloca i32, align 4
  %s0.i481 = alloca i32, align 4
  %s1.i482 = alloca i32, align 4
  %d.addr.i452 = alloca %struct.tdefl_compressor*, align 8
  %lit.addr.i453 = alloca i8, align 1
  %d.addr.i375 = alloca %struct.tdefl_compressor*, align 8
  %match_len.addr.i376 = alloca i32, align 4
  %match_dist.addr.i377 = alloca i32, align 4
  %s0.i378 = alloca i32, align 4
  %s1.i379 = alloca i32, align 4
  %d.addr.i347 = alloca %struct.tdefl_compressor*, align 8
  %match_len.addr.i = alloca i32, align 4
  %match_dist.addr.i = alloca i32, align 4
  %s0.i = alloca i32, align 4
  %s1.i = alloca i32, align 4
  %d.addr.i338 = alloca %struct.tdefl_compressor*, align 8
  %lit.addr.i = alloca i8, align 1
  %d.addr.i = alloca %struct.tdefl_compressor*, align 8
  %lookahead_pos.addr.i = alloca i32, align 4
  %max_dist.addr.i = alloca i32, align 4
  %max_match_len.addr.i = alloca i32, align 4
  %pMatch_dist.addr.i = alloca i32*, align 8
  %pMatch_len.addr.i = alloca i32*, align 8
  %dist.i = alloca i32, align 4
  %pos.i = alloca i32, align 4
  %match_len.i = alloca i32, align 4
  %probe_pos.i = alloca i32, align 4
  %next_probe_pos.i = alloca i32, align 4
  %probe_len.i = alloca i32, align 4
  %num_probes_left.i = alloca i32, align 4
  %s.i = alloca i16*, align 8
  %p.i = alloca i16*, align 8
  %q.i = alloca i16*, align 8
  %c01.i = alloca i16, align 2
  %s01.i = alloca i16, align 2
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pSrc = alloca i8*, align 8
  %src_buf_left = alloca i64, align 8
  %flush = alloca i32, align 4
  %len_to_move = alloca i32, align 4
  %cur_match_dist = alloca i32, align 4
  %cur_match_len = alloca i32, align 4
  %cur_pos = alloca i32, align 4
  %dst_pos = alloca i32, align 4
  %ins_pos = alloca i32, align 4
  %hash = alloca i32, align 4
  %num_bytes_to_process = alloca i32, align 4
  %pSrc_end = alloca i8*, align 8
  %c = alloca i8, align 1
  %c66 = alloca i8, align 1
  %dst_pos68 = alloca i32, align 4
  %ins_pos91 = alloca i32, align 4
  %hash97 = alloca i32, align 4
  %c166 = alloca i8, align 1
  %n = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 32
  %1 = load i8*, i8** %m_pSrc, align 8
  store i8* %1, i8** %pSrc, align 8
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %2, i32 0, i32 33
  %3 = load i64, i64* %m_src_buf_left, align 8
  store i64 %3, i64* %src_buf_left, align 8
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 31
  %5 = load i32, i32* %m_flush, align 8
  store i32 %5, i32* %flush, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end334, %entry
  %6 = load i64, i64* %src_buf_left, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %7 = load i32, i32* %flush, align 4
  %tobool1 = icmp ne i32 %7, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 7
  %9 = load i32, i32* %m_lookahead_size, align 8
  %tobool2 = icmp ne i32 %9, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %10 = phi i1 [ false, %lor.rhs ], [ %tobool2, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %while.cond
  %11 = phi i1 [ true, %while.cond ], [ %10, %land.end ]
  br i1 %11, label %while.body, label %while.end335

while.body:                                       ; preds = %lor.end
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size3 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %12, i32 0, i32 7
  %13 = load i32, i32* %m_lookahead_size3, align 8
  %14 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 8
  %15 = load i32, i32* %m_dict_size, align 4
  %add = add i32 %13, %15
  %cmp = icmp uge i32 %add, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %16, i32 0, i32 6
  %17 = load i32, i32* %m_lookahead_pos, align 4
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size4 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 7
  %19 = load i32, i32* %m_lookahead_size4, align 8
  %add5 = add i32 %17, %19
  %and = and i32 %add5, 32767
  store i32 %and, i32* %dst_pos, align 4
  %20 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %20, i32 0, i32 6
  %21 = load i32, i32* %m_lookahead_pos6, align 4
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 7
  %23 = load i32, i32* %m_lookahead_size7, align 8
  %add8 = add i32 %21, %23
  %sub = sub i32 %add8, 2
  store i32 %sub, i32* %ins_pos, align 4
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 35
  %25 = load i32, i32* %ins_pos, align 4
  %and9 = and i32 %25, 32767
  %idxprom = zext i32 %and9 to i64
  %arrayidx = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict, i64 0, i64 %idxprom
  %26 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %26 to i32
  %shl = shl i32 %conv, 5
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict10 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 35
  %28 = load i32, i32* %ins_pos, align 4
  %add11 = add i32 %28, 1
  %and12 = and i32 %add11, 32767
  %idxprom13 = zext i32 %and12 to i64
  %arrayidx14 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict10, i64 0, i64 %idxprom13
  %29 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %29 to i32
  %xor = xor i32 %shl, %conv15
  store i32 %xor, i32* %hash, align 4
  %30 = load i64, i64* %src_buf_left, align 8
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size16 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 7
  %32 = load i32, i32* %m_lookahead_size16, align 8
  %sub17 = sub i32 258, %32
  %conv18 = zext i32 %sub17 to i64
  %cmp19 = icmp ult i64 %30, %conv18
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %33 = load i64, i64* %src_buf_left, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %34 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size21 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %34, i32 0, i32 7
  %35 = load i32, i32* %m_lookahead_size21, align 8
  %sub22 = sub i32 258, %35
  %conv23 = zext i32 %sub22 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %33, %cond.true ], [ %conv23, %cond.false ]
  %conv24 = trunc i64 %cond to i32
  store i32 %conv24, i32* %num_bytes_to_process, align 4
  %36 = load i8*, i8** %pSrc, align 8
  %37 = load i32, i32* %num_bytes_to_process, align 4
  %idx.ext = zext i32 %37 to i64
  %add.ptr = getelementptr inbounds i8, i8* %36, i64 %idx.ext
  store i8* %add.ptr, i8** %pSrc_end, align 8
  %38 = load i32, i32* %num_bytes_to_process, align 4
  %conv25 = zext i32 %38 to i64
  %39 = load i64, i64* %src_buf_left, align 8
  %sub26 = sub i64 %39, %conv25
  store i64 %sub26, i64* %src_buf_left, align 8
  %40 = load i32, i32* %num_bytes_to_process, align 4
  %41 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size27 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %41, i32 0, i32 7
  %42 = load i32, i32* %m_lookahead_size27, align 8
  %add28 = add i32 %42, %40
  store i32 %add28, i32* %m_lookahead_size27, align 8
  br label %while.cond29

while.cond29:                                     ; preds = %if.end, %cond.end
  %43 = load i8*, i8** %pSrc, align 8
  %44 = load i8*, i8** %pSrc_end, align 8
  %cmp30 = icmp ne i8* %43, %44
  br i1 %cmp30, label %while.body32, label %while.end

while.body32:                                     ; preds = %while.cond29
  %45 = load i8*, i8** %pSrc, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr, i8** %pSrc, align 8
  %46 = load i8, i8* %45, align 1
  store i8 %46, i8* %c, align 1
  %47 = load i8, i8* %c, align 1
  %48 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict33 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %48, i32 0, i32 35
  %49 = load i32, i32* %dst_pos, align 4
  %idxprom34 = zext i32 %49 to i64
  %arrayidx35 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict33, i64 0, i64 %idxprom34
  store i8 %47, i8* %arrayidx35, align 1
  %50 = load i32, i32* %dst_pos, align 4
  %cmp36 = icmp ult i32 %50, 257
  br i1 %cmp36, label %if.then38, label %if.end

if.then38:                                        ; preds = %while.body32
  %51 = load i8, i8* %c, align 1
  %52 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict39 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %52, i32 0, i32 35
  %53 = load i32, i32* %dst_pos, align 4
  %add40 = add i32 32768, %53
  %idxprom41 = zext i32 %add40 to i64
  %arrayidx42 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict39, i64 0, i64 %idxprom41
  store i8 %51, i8* %arrayidx42, align 1
  br label %if.end

if.end:                                           ; preds = %if.then38, %while.body32
  %54 = load i32, i32* %hash, align 4
  %shl43 = shl i32 %54, 5
  %55 = load i8, i8* %c, align 1
  %conv44 = zext i8 %55 to i32
  %xor45 = xor i32 %shl43, %conv44
  %and46 = and i32 %xor45, 32767
  store i32 %and46, i32* %hash, align 4
  %56 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %56, i32 0, i32 41
  %57 = load i32, i32* %hash, align 4
  %idxprom47 = zext i32 %57 to i64
  %arrayidx48 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash, i64 0, i64 %idxprom47
  %58 = load i16, i16* %arrayidx48, align 2
  %59 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_next = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %59, i32 0, i32 40
  %60 = load i32, i32* %ins_pos, align 4
  %and49 = and i32 %60, 32767
  %idxprom50 = zext i32 %and49 to i64
  %arrayidx51 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next, i64 0, i64 %idxprom50
  store i16 %58, i16* %arrayidx51, align 2
  %61 = load i32, i32* %ins_pos, align 4
  %conv52 = trunc i32 %61 to i16
  %62 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash53 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %62, i32 0, i32 41
  %63 = load i32, i32* %hash, align 4
  %idxprom54 = zext i32 %63 to i64
  %arrayidx55 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash53, i64 0, i64 %idxprom54
  store i16 %conv52, i16* %arrayidx55, align 2
  %64 = load i32, i32* %dst_pos, align 4
  %add56 = add i32 %64, 1
  %and57 = and i32 %add56, 32767
  store i32 %and57, i32* %dst_pos, align 4
  %65 = load i32, i32* %ins_pos, align 4
  %inc = add i32 %65, 1
  store i32 %inc, i32* %ins_pos, align 4
  br label %while.cond29

while.end:                                        ; preds = %while.cond29
  br label %if.end128

if.else:                                          ; preds = %while.body
  br label %while.cond58

while.cond58:                                     ; preds = %if.end126, %if.else
  %66 = load i64, i64* %src_buf_left, align 8
  %tobool59 = icmp ne i64 %66, 0
  br i1 %tobool59, label %land.rhs60, label %land.end64

land.rhs60:                                       ; preds = %while.cond58
  %67 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size61 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %67, i32 0, i32 7
  %68 = load i32, i32* %m_lookahead_size61, align 8
  %cmp62 = icmp ult i32 %68, 258
  br label %land.end64

land.end64:                                       ; preds = %land.rhs60, %while.cond58
  %69 = phi i1 [ false, %while.cond58 ], [ %cmp62, %land.rhs60 ]
  br i1 %69, label %while.body65, label %while.end127

while.body65:                                     ; preds = %land.end64
  %70 = load i8*, i8** %pSrc, align 8
  %incdec.ptr67 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr67, i8** %pSrc, align 8
  %71 = load i8, i8* %70, align 1
  store i8 %71, i8* %c66, align 1
  %72 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos69 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %72, i32 0, i32 6
  %73 = load i32, i32* %m_lookahead_pos69, align 4
  %74 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size70 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %74, i32 0, i32 7
  %75 = load i32, i32* %m_lookahead_size70, align 8
  %add71 = add i32 %73, %75
  %and72 = and i32 %add71, 32767
  store i32 %and72, i32* %dst_pos68, align 4
  %76 = load i64, i64* %src_buf_left, align 8
  %dec = add i64 %76, -1
  store i64 %dec, i64* %src_buf_left, align 8
  %77 = load i8, i8* %c66, align 1
  %78 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict73 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %78, i32 0, i32 35
  %79 = load i32, i32* %dst_pos68, align 4
  %idxprom74 = zext i32 %79 to i64
  %arrayidx75 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict73, i64 0, i64 %idxprom74
  store i8 %77, i8* %arrayidx75, align 1
  %80 = load i32, i32* %dst_pos68, align 4
  %cmp76 = icmp ult i32 %80, 257
  br i1 %cmp76, label %if.then78, label %if.end83

if.then78:                                        ; preds = %while.body65
  %81 = load i8, i8* %c66, align 1
  %82 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict79 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %82, i32 0, i32 35
  %83 = load i32, i32* %dst_pos68, align 4
  %add80 = add i32 32768, %83
  %idxprom81 = zext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict79, i64 0, i64 %idxprom81
  store i8 %81, i8* %arrayidx82, align 1
  br label %if.end83

if.end83:                                         ; preds = %if.then78, %while.body65
  %84 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size84 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %84, i32 0, i32 7
  %85 = load i32, i32* %m_lookahead_size84, align 8
  %inc85 = add i32 %85, 1
  store i32 %inc85, i32* %m_lookahead_size84, align 8
  %86 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size86 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %86, i32 0, i32 8
  %87 = load i32, i32* %m_dict_size86, align 4
  %add87 = add i32 %inc85, %87
  %cmp88 = icmp uge i32 %add87, 3
  br i1 %cmp88, label %if.then90, label %if.end126

if.then90:                                        ; preds = %if.end83
  %88 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos92 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %88, i32 0, i32 6
  %89 = load i32, i32* %m_lookahead_pos92, align 4
  %90 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size93 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %90, i32 0, i32 7
  %91 = load i32, i32* %m_lookahead_size93, align 8
  %sub94 = sub i32 %91, 1
  %add95 = add i32 %89, %sub94
  %sub96 = sub i32 %add95, 2
  store i32 %sub96, i32* %ins_pos91, align 4
  %92 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict98 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %92, i32 0, i32 35
  %93 = load i32, i32* %ins_pos91, align 4
  %and99 = and i32 %93, 32767
  %idxprom100 = zext i32 %and99 to i64
  %arrayidx101 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict98, i64 0, i64 %idxprom100
  %94 = load i8, i8* %arrayidx101, align 1
  %conv102 = zext i8 %94 to i32
  %shl103 = shl i32 %conv102, 10
  %95 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict104 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %95, i32 0, i32 35
  %96 = load i32, i32* %ins_pos91, align 4
  %add105 = add i32 %96, 1
  %and106 = and i32 %add105, 32767
  %idxprom107 = zext i32 %and106 to i64
  %arrayidx108 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict104, i64 0, i64 %idxprom107
  %97 = load i8, i8* %arrayidx108, align 1
  %conv109 = zext i8 %97 to i32
  %shl110 = shl i32 %conv109, 5
  %xor111 = xor i32 %shl103, %shl110
  %98 = load i8, i8* %c66, align 1
  %conv112 = zext i8 %98 to i32
  %xor113 = xor i32 %xor111, %conv112
  %and114 = and i32 %xor113, 32767
  store i32 %and114, i32* %hash97, align 4
  %99 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash115 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %99, i32 0, i32 41
  %100 = load i32, i32* %hash97, align 4
  %idxprom116 = zext i32 %100 to i64
  %arrayidx117 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash115, i64 0, i64 %idxprom116
  %101 = load i16, i16* %arrayidx117, align 2
  %102 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_next118 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %102, i32 0, i32 40
  %103 = load i32, i32* %ins_pos91, align 4
  %and119 = and i32 %103, 32767
  %idxprom120 = zext i32 %and119 to i64
  %arrayidx121 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next118, i64 0, i64 %idxprom120
  store i16 %101, i16* %arrayidx121, align 2
  %104 = load i32, i32* %ins_pos91, align 4
  %conv122 = trunc i32 %104 to i16
  %105 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_hash123 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %105, i32 0, i32 41
  %106 = load i32, i32* %hash97, align 4
  %idxprom124 = zext i32 %106 to i64
  %arrayidx125 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash123, i64 0, i64 %idxprom124
  store i16 %conv122, i16* %arrayidx125, align 2
  br label %if.end126

if.end126:                                        ; preds = %if.then90, %if.end83
  br label %while.cond58

while.end127:                                     ; preds = %land.end64
  br label %if.end128

if.end128:                                        ; preds = %while.end127, %while.end
  %107 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size129 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %107, i32 0, i32 7
  %108 = load i32, i32* %m_lookahead_size129, align 8
  %sub130 = sub i32 32768, %108
  %109 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size131 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %109, i32 0, i32 8
  %110 = load i32, i32* %m_dict_size131, align 4
  %cmp132 = icmp ult i32 %sub130, %110
  br i1 %cmp132, label %cond.true134, label %cond.false137

cond.true134:                                     ; preds = %if.end128
  %111 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size135 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %111, i32 0, i32 7
  %112 = load i32, i32* %m_lookahead_size135, align 8
  %sub136 = sub i32 32768, %112
  br label %cond.end139

cond.false137:                                    ; preds = %if.end128
  %113 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size138 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %113, i32 0, i32 8
  %114 = load i32, i32* %m_dict_size138, align 4
  br label %cond.end139

cond.end139:                                      ; preds = %cond.false137, %cond.true134
  %cond140 = phi i32 [ %sub136, %cond.true134 ], [ %114, %cond.false137 ]
  %115 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size141 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %115, i32 0, i32 8
  store i32 %cond140, i32* %m_dict_size141, align 4
  %116 = load i32, i32* %flush, align 4
  %tobool142 = icmp ne i32 %116, 0
  br i1 %tobool142, label %if.end147, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end139
  %117 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size143 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %117, i32 0, i32 7
  %118 = load i32, i32* %m_lookahead_size143, align 8
  %cmp144 = icmp ult i32 %118, 258
  br i1 %cmp144, label %if.then146, label %if.end147

if.then146:                                       ; preds = %land.lhs.true
  br label %while.end335

if.end147:                                        ; preds = %land.lhs.true, %cond.end139
  store i32 1, i32* %len_to_move, align 4
  store i32 0, i32* %cur_match_dist, align 4
  %119 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %119, i32 0, i32 19
  %120 = load i32, i32* %m_saved_match_len, align 8
  %tobool148 = icmp ne i32 %120, 0
  br i1 %tobool148, label %cond.true149, label %cond.false151

cond.true149:                                     ; preds = %if.end147
  %121 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len150 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %121, i32 0, i32 19
  %122 = load i32, i32* %m_saved_match_len150, align 8
  br label %cond.end152

cond.false151:                                    ; preds = %if.end147
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false151, %cond.true149
  %cond153 = phi i32 [ %122, %cond.true149 ], [ 2, %cond.false151 ]
  store i32 %cond153, i32* %cur_match_len, align 4
  %123 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos154 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %123, i32 0, i32 6
  %124 = load i32, i32* %m_lookahead_pos154, align 4
  %and155 = and i32 %124, 32767
  store i32 %and155, i32* %cur_pos, align 4
  %125 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %125, i32 0, i32 2
  %126 = load i32, i32* %m_flags, align 8
  %and156 = and i32 %126, 589824
  %tobool157 = icmp ne i32 %and156, 0
  br i1 %tobool157, label %if.then158, label %if.else195

if.then158:                                       ; preds = %cond.end152
  %127 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size159 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %127, i32 0, i32 8
  %128 = load i32, i32* %m_dict_size159, align 4
  %tobool160 = icmp ne i32 %128, 0
  br i1 %tobool160, label %land.lhs.true161, label %if.end194

land.lhs.true161:                                 ; preds = %if.then158
  %129 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags162 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %129, i32 0, i32 2
  %130 = load i32, i32* %m_flags162, align 8
  %and163 = and i32 %130, 524288
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %if.end194, label %if.then165

if.then165:                                       ; preds = %land.lhs.true161
  %131 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict167 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %131, i32 0, i32 35
  %132 = load i32, i32* %cur_pos, align 4
  %sub168 = sub i32 %132, 1
  %and169 = and i32 %sub168, 32767
  %idxprom170 = zext i32 %and169 to i64
  %arrayidx171 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict167, i64 0, i64 %idxprom170
  %133 = load i8, i8* %arrayidx171, align 1
  store i8 %133, i8* %c166, align 1
  store i32 0, i32* %cur_match_len, align 4
  br label %while.cond172

while.cond172:                                    ; preds = %if.end186, %if.then165
  %134 = load i32, i32* %cur_match_len, align 4
  %135 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size173 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %135, i32 0, i32 7
  %136 = load i32, i32* %m_lookahead_size173, align 8
  %cmp174 = icmp ult i32 %134, %136
  br i1 %cmp174, label %while.body176, label %while.end188

while.body176:                                    ; preds = %while.cond172
  %137 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict177 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %137, i32 0, i32 35
  %138 = load i32, i32* %cur_pos, align 4
  %139 = load i32, i32* %cur_match_len, align 4
  %add178 = add i32 %138, %139
  %idxprom179 = zext i32 %add178 to i64
  %arrayidx180 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict177, i64 0, i64 %idxprom179
  %140 = load i8, i8* %arrayidx180, align 1
  %conv181 = zext i8 %140 to i32
  %141 = load i8, i8* %c166, align 1
  %conv182 = zext i8 %141 to i32
  %cmp183 = icmp ne i32 %conv181, %conv182
  br i1 %cmp183, label %if.then185, label %if.end186

if.then185:                                       ; preds = %while.body176
  br label %while.end188

if.end186:                                        ; preds = %while.body176
  %142 = load i32, i32* %cur_match_len, align 4
  %inc187 = add i32 %142, 1
  store i32 %inc187, i32* %cur_match_len, align 4
  br label %while.cond172

while.end188:                                     ; preds = %if.then185, %while.cond172
  %143 = load i32, i32* %cur_match_len, align 4
  %cmp189 = icmp ult i32 %143, 3
  br i1 %cmp189, label %if.then191, label %if.else192

if.then191:                                       ; preds = %while.end188
  store i32 0, i32* %cur_match_len, align 4
  br label %if.end193

if.else192:                                       ; preds = %while.end188
  store i32 1, i32* %cur_match_dist, align 4
  br label %if.end193

if.end193:                                        ; preds = %if.else192, %if.then191
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %land.lhs.true161, %if.then158
  br label %if.end199

if.else195:                                       ; preds = %cond.end152
  %144 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %145 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos196 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %145, i32 0, i32 6
  %146 = load i32, i32* %m_lookahead_pos196, align 4
  %147 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size197 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %147, i32 0, i32 8
  %148 = load i32, i32* %m_dict_size197, align 4
  %149 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size198 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %149, i32 0, i32 7
  %150 = load i32, i32* %m_lookahead_size198, align 8
  store %struct.tdefl_compressor* %144, %struct.tdefl_compressor** %d.addr.i, align 8
  store i32 %146, i32* %lookahead_pos.addr.i, align 4
  store i32 %148, i32* %max_dist.addr.i, align 4
  store i32 %150, i32* %max_match_len.addr.i, align 4
  store i32* %cur_match_dist, i32** %pMatch_dist.addr.i, align 8
  store i32* %cur_match_len, i32** %pMatch_len.addr.i, align 8
  %151 = load i32, i32* %lookahead_pos.addr.i, align 4
  %and.i = and i32 %151, 32767
  store i32 %and.i, i32* %pos.i, align 4
  %152 = load i32*, i32** %pMatch_len.addr.i, align 8
  %153 = load i32, i32* %152, align 4
  store i32 %153, i32* %match_len.i, align 4
  %154 = load i32, i32* %pos.i, align 4
  store i32 %154, i32* %probe_pos.i, align 4
  %155 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_max_probes.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %155, i32 0, i32 3
  %156 = load i32, i32* %match_len.i, align 4
  %cmp.i = icmp uge i32 %156, 32
  %conv.i = zext i1 %cmp.i to i32
  %idxprom.i = sext i32 %conv.i to i64
  %arrayidx.i = getelementptr inbounds [2 x i32], [2 x i32]* %m_max_probes.i, i64 0, i64 %idxprom.i
  %157 = load i32, i32* %arrayidx.i, align 4
  store i32 %157, i32* %num_probes_left.i, align 4
  %158 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %158, i32 0, i32 35
  %arraydecay.i = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict.i, i32 0, i32 0
  %159 = load i32, i32* %pos.i, align 4
  %idx.ext.i = zext i32 %159 to i64
  %add.ptr.i = getelementptr inbounds i8, i8* %arraydecay.i, i64 %idx.ext.i
  %160 = bitcast i8* %add.ptr.i to i16*
  store i16* %160, i16** %s.i, align 8
  %161 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict1.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %161, i32 0, i32 35
  %162 = load i32, i32* %pos.i, align 4
  %163 = load i32, i32* %match_len.i, align 4
  %add.i = add i32 %162, %163
  %sub.i = sub i32 %add.i, 1
  %idxprom2.i = zext i32 %sub.i to i64
  %arrayidx3.i = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict1.i, i64 0, i64 %idxprom2.i
  %call.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx3.i) #10
  store i16 %call.i, i16* %c01.i, align 2
  %164 = load i16*, i16** %s.i, align 8
  %call4.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %164) #10
  store i16 %call4.i, i16* %s01.i, align 2
  %165 = load i32, i32* %max_match_len.addr.i, align 4
  %cmp5.i = icmp ule i32 %165, 258
  %lnot.i = xor i1 %cmp5.i, true
  %lnot.ext.i = zext i1 %lnot.i to i32
  %conv7.i = sext i32 %lnot.ext.i to i64
  br i1 %lnot.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %if.else195
  call void @__assert_rtn(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.tdefl_find_match, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1391, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.61, i32 0, i32 0)) #12
  unreachable

cond.false.i:                                     ; preds = %if.else195
  %166 = load i32, i32* %max_match_len.addr.i, align 4
  %167 = load i32, i32* %match_len.i, align 4
  %cmp8.i = icmp ule i32 %166, %167
  br i1 %cmp8.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.false.i
  br label %tdefl_find_match.exit

if.end.i:                                         ; preds = %cond.false.i
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end173.i, %if.then103.i, %if.end.i
  br label %for.cond10.i

for.cond10.i:                                     ; preds = %if.end90.i, %for.cond.i
  %168 = load i32, i32* %num_probes_left.i, align 4
  %dec.i = add i32 %168, -1
  store i32 %dec.i, i32* %num_probes_left.i, align 4
  %cmp11.i = icmp eq i32 %dec.i, 0
  br i1 %cmp11.i, label %if.then13.i, label %if.end14.i

if.then13.i:                                      ; preds = %for.cond10.i
  br label %tdefl_find_match.exit

if.end14.i:                                       ; preds = %for.cond10.i
  %169 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_next.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %169, i32 0, i32 40
  %170 = load i32, i32* %probe_pos.i, align 4
  %idxprom15.i = zext i32 %170 to i64
  %arrayidx16.i = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next.i, i64 0, i64 %idxprom15.i
  %171 = load i16, i16* %arrayidx16.i, align 2
  %conv17.i = zext i16 %171 to i32
  store i32 %conv17.i, i32* %next_probe_pos.i, align 4
  %172 = load i32, i32* %next_probe_pos.i, align 4
  %tobool18.i = icmp ne i32 %172, 0
  br i1 %tobool18.i, label %lor.lhs.false.i, label %if.then24.i

lor.lhs.false.i:                                  ; preds = %if.end14.i
  %173 = load i32, i32* %lookahead_pos.addr.i, align 4
  %174 = load i32, i32* %next_probe_pos.i, align 4
  %sub19.i = sub i32 %173, %174
  %conv20.i = trunc i32 %sub19.i to i16
  %conv21.i = zext i16 %conv20.i to i32
  store i32 %conv21.i, i32* %dist.i, align 4
  %175 = load i32, i32* %max_dist.addr.i, align 4
  %cmp22.i = icmp ugt i32 %conv21.i, %175
  br i1 %cmp22.i, label %if.then24.i, label %if.end25.i

if.then24.i:                                      ; preds = %lor.lhs.false.i, %if.end14.i
  br label %tdefl_find_match.exit

if.end25.i:                                       ; preds = %lor.lhs.false.i
  %176 = load i32, i32* %next_probe_pos.i, align 4
  %and26.i = and i32 %176, 32767
  store i32 %and26.i, i32* %probe_pos.i, align 4
  %177 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict27.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %177, i32 0, i32 35
  %178 = load i32, i32* %probe_pos.i, align 4
  %179 = load i32, i32* %match_len.i, align 4
  %add28.i = add i32 %178, %179
  %sub29.i = sub i32 %add28.i, 1
  %idxprom30.i = zext i32 %sub29.i to i64
  %arrayidx31.i = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict27.i, i64 0, i64 %idxprom30.i
  %call32.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx31.i) #10
  %conv33.i = zext i16 %call32.i to i32
  %180 = load i16, i16* %c01.i, align 2
  %conv34.i = zext i16 %180 to i32
  %cmp35.i = icmp eq i32 %conv33.i, %conv34.i
  br i1 %cmp35.i, label %if.then37.i, label %if.end38.i

if.then37.i:                                      ; preds = %if.end25.i
  br label %for.end.i

if.end38.i:                                       ; preds = %if.end25.i
  %181 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_next39.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %181, i32 0, i32 40
  %182 = load i32, i32* %probe_pos.i, align 4
  %idxprom40.i = zext i32 %182 to i64
  %arrayidx41.i = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next39.i, i64 0, i64 %idxprom40.i
  %183 = load i16, i16* %arrayidx41.i, align 2
  %conv42.i = zext i16 %183 to i32
  store i32 %conv42.i, i32* %next_probe_pos.i, align 4
  %184 = load i32, i32* %next_probe_pos.i, align 4
  %tobool43.i = icmp ne i32 %184, 0
  br i1 %tobool43.i, label %lor.lhs.false44.i, label %if.then50.i

lor.lhs.false44.i:                                ; preds = %if.end38.i
  %185 = load i32, i32* %lookahead_pos.addr.i, align 4
  %186 = load i32, i32* %next_probe_pos.i, align 4
  %sub45.i = sub i32 %185, %186
  %conv46.i = trunc i32 %sub45.i to i16
  %conv47.i = zext i16 %conv46.i to i32
  store i32 %conv47.i, i32* %dist.i, align 4
  %187 = load i32, i32* %max_dist.addr.i, align 4
  %cmp48.i = icmp ugt i32 %conv47.i, %187
  br i1 %cmp48.i, label %if.then50.i, label %if.end51.i

if.then50.i:                                      ; preds = %lor.lhs.false44.i, %if.end38.i
  br label %tdefl_find_match.exit

if.end51.i:                                       ; preds = %lor.lhs.false44.i
  %188 = load i32, i32* %next_probe_pos.i, align 4
  %and52.i = and i32 %188, 32767
  store i32 %and52.i, i32* %probe_pos.i, align 4
  %189 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict53.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %189, i32 0, i32 35
  %190 = load i32, i32* %probe_pos.i, align 4
  %191 = load i32, i32* %match_len.i, align 4
  %add54.i = add i32 %190, %191
  %sub55.i = sub i32 %add54.i, 1
  %idxprom56.i = zext i32 %sub55.i to i64
  %arrayidx57.i = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict53.i, i64 0, i64 %idxprom56.i
  %call58.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx57.i) #10
  %conv59.i = zext i16 %call58.i to i32
  %192 = load i16, i16* %c01.i, align 2
  %conv60.i = zext i16 %192 to i32
  %cmp61.i = icmp eq i32 %conv59.i, %conv60.i
  br i1 %cmp61.i, label %if.then63.i, label %if.end64.i

if.then63.i:                                      ; preds = %if.end51.i
  br label %for.end.i

if.end64.i:                                       ; preds = %if.end51.i
  %193 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_next65.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %193, i32 0, i32 40
  %194 = load i32, i32* %probe_pos.i, align 4
  %idxprom66.i = zext i32 %194 to i64
  %arrayidx67.i = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next65.i, i64 0, i64 %idxprom66.i
  %195 = load i16, i16* %arrayidx67.i, align 2
  %conv68.i = zext i16 %195 to i32
  store i32 %conv68.i, i32* %next_probe_pos.i, align 4
  %196 = load i32, i32* %next_probe_pos.i, align 4
  %tobool69.i = icmp ne i32 %196, 0
  br i1 %tobool69.i, label %lor.lhs.false70.i, label %if.then76.i

lor.lhs.false70.i:                                ; preds = %if.end64.i
  %197 = load i32, i32* %lookahead_pos.addr.i, align 4
  %198 = load i32, i32* %next_probe_pos.i, align 4
  %sub71.i = sub i32 %197, %198
  %conv72.i = trunc i32 %sub71.i to i16
  %conv73.i = zext i16 %conv72.i to i32
  store i32 %conv73.i, i32* %dist.i, align 4
  %199 = load i32, i32* %max_dist.addr.i, align 4
  %cmp74.i = icmp ugt i32 %conv73.i, %199
  br i1 %cmp74.i, label %if.then76.i, label %if.end77.i

if.then76.i:                                      ; preds = %lor.lhs.false70.i, %if.end64.i
  br label %tdefl_find_match.exit

if.end77.i:                                       ; preds = %lor.lhs.false70.i
  %200 = load i32, i32* %next_probe_pos.i, align 4
  %and78.i = and i32 %200, 32767
  store i32 %and78.i, i32* %probe_pos.i, align 4
  %201 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict79.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %201, i32 0, i32 35
  %202 = load i32, i32* %probe_pos.i, align 4
  %203 = load i32, i32* %match_len.i, align 4
  %add80.i = add i32 %202, %203
  %sub81.i = sub i32 %add80.i, 1
  %idxprom82.i = zext i32 %sub81.i to i64
  %arrayidx83.i = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict79.i, i64 0, i64 %idxprom82.i
  %call84.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx83.i) #10
  %conv85.i = zext i16 %call84.i to i32
  %204 = load i16, i16* %c01.i, align 2
  %conv86.i = zext i16 %204 to i32
  %cmp87.i = icmp eq i32 %conv85.i, %conv86.i
  br i1 %cmp87.i, label %if.then89.i, label %if.end90.i

if.then89.i:                                      ; preds = %if.end77.i
  br label %for.end.i

if.end90.i:                                       ; preds = %if.end77.i
  br label %for.cond10.i

for.end.i:                                        ; preds = %if.then89.i, %if.then63.i, %if.then37.i
  %205 = load i32, i32* %dist.i, align 4
  %tobool91.i = icmp ne i32 %205, 0
  br i1 %tobool91.i, label %if.end93.i, label %if.then92.i

if.then92.i:                                      ; preds = %for.end.i
  br label %tdefl_find_match.exit

if.end93.i:                                       ; preds = %for.end.i
  %206 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict94.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %206, i32 0, i32 35
  %arraydecay95.i = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict94.i, i32 0, i32 0
  %207 = load i32, i32* %probe_pos.i, align 4
  %idx.ext96.i = zext i32 %207 to i64
  %add.ptr97.i = getelementptr inbounds i8, i8* %arraydecay95.i, i64 %idx.ext96.i
  %208 = bitcast i8* %add.ptr97.i to i16*
  store i16* %208, i16** %q.i, align 8
  %209 = load i16*, i16** %q.i, align 8
  %call98.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %209) #10
  %conv99.i = zext i16 %call98.i to i32
  %210 = load i16, i16* %s01.i, align 2
  %conv100.i = zext i16 %210 to i32
  %cmp101.i = icmp ne i32 %conv99.i, %conv100.i
  br i1 %cmp101.i, label %if.then103.i, label %if.end104.i

if.then103.i:                                     ; preds = %if.end93.i
  br label %for.cond.i

if.end104.i:                                      ; preds = %if.end93.i
  %211 = load i16*, i16** %s.i, align 8
  store i16* %211, i16** %p.i, align 8
  store i32 32, i32* %probe_len.i, align 4
  br label %do.body.i

do.body.i:                                        ; preds = %land.end.i, %if.end104.i
  %212 = load i16*, i16** %p.i, align 8
  %incdec.ptr.i = getelementptr inbounds i16, i16* %212, i32 1
  store i16* %incdec.ptr.i, i16** %p.i, align 8
  %call105.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr.i) #10
  %conv106.i = zext i16 %call105.i to i32
  %213 = load i16*, i16** %q.i, align 8
  %incdec.ptr107.i = getelementptr inbounds i16, i16* %213, i32 1
  store i16* %incdec.ptr107.i, i16** %q.i, align 8
  %call108.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr107.i) #10
  %conv109.i = zext i16 %call108.i to i32
  %cmp110.i = icmp eq i32 %conv106.i, %conv109.i
  br i1 %cmp110.i, label %land.lhs.true.i, label %land.end.i

land.lhs.true.i:                                  ; preds = %do.body.i
  %214 = load i16*, i16** %p.i, align 8
  %incdec.ptr112.i = getelementptr inbounds i16, i16* %214, i32 1
  store i16* %incdec.ptr112.i, i16** %p.i, align 8
  %call113.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr112.i) #10
  %conv114.i = zext i16 %call113.i to i32
  %215 = load i16*, i16** %q.i, align 8
  %incdec.ptr115.i = getelementptr inbounds i16, i16* %215, i32 1
  store i16* %incdec.ptr115.i, i16** %q.i, align 8
  %call116.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr115.i) #10
  %conv117.i = zext i16 %call116.i to i32
  %cmp118.i = icmp eq i32 %conv114.i, %conv117.i
  br i1 %cmp118.i, label %land.lhs.true120.i, label %land.end.i

land.lhs.true120.i:                               ; preds = %land.lhs.true.i
  %216 = load i16*, i16** %p.i, align 8
  %incdec.ptr121.i = getelementptr inbounds i16, i16* %216, i32 1
  store i16* %incdec.ptr121.i, i16** %p.i, align 8
  %call122.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr121.i) #10
  %conv123.i = zext i16 %call122.i to i32
  %217 = load i16*, i16** %q.i, align 8
  %incdec.ptr124.i = getelementptr inbounds i16, i16* %217, i32 1
  store i16* %incdec.ptr124.i, i16** %q.i, align 8
  %call125.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr124.i) #10
  %conv126.i = zext i16 %call125.i to i32
  %cmp127.i = icmp eq i32 %conv123.i, %conv126.i
  br i1 %cmp127.i, label %land.lhs.true129.i, label %land.end.i

land.lhs.true129.i:                               ; preds = %land.lhs.true120.i
  %218 = load i16*, i16** %p.i, align 8
  %incdec.ptr130.i = getelementptr inbounds i16, i16* %218, i32 1
  store i16* %incdec.ptr130.i, i16** %p.i, align 8
  %call131.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr130.i) #10
  %conv132.i = zext i16 %call131.i to i32
  %219 = load i16*, i16** %q.i, align 8
  %incdec.ptr133.i = getelementptr inbounds i16, i16* %219, i32 1
  store i16* %incdec.ptr133.i, i16** %q.i, align 8
  %call134.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr133.i) #10
  %conv135.i = zext i16 %call134.i to i32
  %cmp136.i = icmp eq i32 %conv132.i, %conv135.i
  br i1 %cmp136.i, label %land.rhs.i, label %land.end.i

land.rhs.i:                                       ; preds = %land.lhs.true129.i
  %220 = load i32, i32* %probe_len.i, align 4
  %dec138.i = add i32 %220, -1
  store i32 %dec138.i, i32* %probe_len.i, align 4
  %cmp139.i = icmp ugt i32 %dec138.i, 0
  br label %land.end.i

land.end.i:                                       ; preds = %land.rhs.i, %land.lhs.true129.i, %land.lhs.true120.i, %land.lhs.true.i, %do.body.i
  %221 = phi i1 [ false, %land.lhs.true129.i ], [ false, %land.lhs.true120.i ], [ false, %land.lhs.true.i ], [ false, %do.body.i ], [ %cmp139.i, %land.rhs.i ]
  br i1 %221, label %do.body.i, label %do.end.i

do.end.i:                                         ; preds = %land.end.i
  %222 = load i32, i32* %probe_len.i, align 4
  %tobool141.i = icmp ne i32 %222, 0
  br i1 %tobool141.i, label %if.else.i, label %if.then142.i

if.then142.i:                                     ; preds = %do.end.i
  %223 = load i32, i32* %dist.i, align 4
  %224 = load i32*, i32** %pMatch_dist.addr.i, align 8
  store i32 %223, i32* %224, align 4
  %225 = load i32, i32* %max_match_len.addr.i, align 4
  %cmp143.i = icmp ult i32 %225, 258
  br i1 %cmp143.i, label %cond.true145.i, label %cond.false146.i

cond.true145.i:                                   ; preds = %if.then142.i
  %226 = load i32, i32* %max_match_len.addr.i, align 4
  br label %cond.end147.i

cond.false146.i:                                  ; preds = %if.then142.i
  br label %cond.end147.i

cond.end147.i:                                    ; preds = %cond.false146.i, %cond.true145.i
  %cond.i = phi i32 [ %226, %cond.true145.i ], [ 258, %cond.false146.i ]
  %227 = load i32*, i32** %pMatch_len.addr.i, align 8
  store i32 %cond.i, i32* %227, align 4
  br label %tdefl_find_match.exit

if.else.i:                                        ; preds = %do.end.i
  %228 = load i16*, i16** %p.i, align 8
  %229 = load i16*, i16** %s.i, align 8
  %sub.ptr.lhs.cast.i = ptrtoint i16* %228 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i16* %229 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = sdiv exact i64 %sub.ptr.sub.i, 2
  %conv148.i = trunc i64 %sub.ptr.div.i to i32
  %mul.i = mul i32 %conv148.i, 2
  %230 = load i16*, i16** %p.i, align 8
  %231 = bitcast i16* %230 to i8*
  %232 = load i8, i8* %231, align 1
  %conv149.i = zext i8 %232 to i32
  %233 = load i16*, i16** %q.i, align 8
  %234 = bitcast i16* %233 to i8*
  %235 = load i8, i8* %234, align 1
  %conv150.i = zext i8 %235 to i32
  %cmp151.i = icmp eq i32 %conv149.i, %conv150.i
  %conv152.i = zext i1 %cmp151.i to i32
  %add153.i = add i32 %mul.i, %conv152.i
  store i32 %add153.i, i32* %probe_len.i, align 4
  %236 = load i32, i32* %match_len.i, align 4
  %cmp154.i = icmp ugt i32 %add153.i, %236
  br i1 %cmp154.i, label %if.then156.i, label %if.end173.i

if.then156.i:                                     ; preds = %if.else.i
  %237 = load i32, i32* %dist.i, align 4
  %238 = load i32*, i32** %pMatch_dist.addr.i, align 8
  store i32 %237, i32* %238, align 4
  %239 = load i32, i32* %max_match_len.addr.i, align 4
  %240 = load i32, i32* %probe_len.i, align 4
  %cmp157.i = icmp ult i32 %239, %240
  br i1 %cmp157.i, label %cond.true159.i, label %cond.false160.i

cond.true159.i:                                   ; preds = %if.then156.i
  %241 = load i32, i32* %max_match_len.addr.i, align 4
  br label %cond.end161.i

cond.false160.i:                                  ; preds = %if.then156.i
  %242 = load i32, i32* %probe_len.i, align 4
  br label %cond.end161.i

cond.end161.i:                                    ; preds = %cond.false160.i, %cond.true159.i
  %cond162.i = phi i32 [ %241, %cond.true159.i ], [ %242, %cond.false160.i ]
  store i32 %cond162.i, i32* %match_len.i, align 4
  %243 = load i32*, i32** %pMatch_len.addr.i, align 8
  store i32 %cond162.i, i32* %243, align 4
  %244 = load i32, i32* %max_match_len.addr.i, align 4
  %cmp163.i = icmp eq i32 %cond162.i, %244
  br i1 %cmp163.i, label %if.then165.i, label %if.end166.i

if.then165.i:                                     ; preds = %cond.end161.i
  br label %tdefl_find_match.exit

if.end166.i:                                      ; preds = %cond.end161.i
  %245 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i, align 8
  %m_dict167.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %245, i32 0, i32 35
  %246 = load i32, i32* %pos.i, align 4
  %247 = load i32, i32* %match_len.i, align 4
  %add168.i = add i32 %246, %247
  %sub169.i = sub i32 %add168.i, 1
  %idxprom170.i = zext i32 %sub169.i to i64
  %arrayidx171.i = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict167.i, i64 0, i64 %idxprom170.i
  %call172.i = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx171.i) #10
  store i16 %call172.i, i16* %c01.i, align 2
  br label %if.end173.i

if.end173.i:                                      ; preds = %if.end166.i, %if.else.i
  br label %for.cond.i

tdefl_find_match.exit:                            ; preds = %if.then.i, %if.then13.i, %if.then24.i, %if.then50.i, %if.then76.i, %if.then92.i, %cond.end147.i, %if.then165.i
  br label %if.end199

if.end199:                                        ; preds = %tdefl_find_match.exit, %if.end194
  %248 = load i32, i32* %cur_match_len, align 4
  %cmp200 = icmp eq i32 %248, 3
  br i1 %cmp200, label %land.lhs.true202, label %lor.lhs.false

land.lhs.true202:                                 ; preds = %if.end199
  %249 = load i32, i32* %cur_match_dist, align 4
  %cmp203 = icmp uge i32 %249, 8192
  br i1 %cmp203, label %if.then214, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true202, %if.end199
  %250 = load i32, i32* %cur_pos, align 4
  %251 = load i32, i32* %cur_match_dist, align 4
  %cmp205 = icmp eq i32 %250, %251
  br i1 %cmp205, label %if.then214, label %lor.lhs.false207

lor.lhs.false207:                                 ; preds = %lor.lhs.false
  %252 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags208 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %252, i32 0, i32 2
  %253 = load i32, i32* %m_flags208, align 8
  %and209 = and i32 %253, 131072
  %tobool210 = icmp ne i32 %and209, 0
  br i1 %tobool210, label %land.lhs.true211, label %if.end215

land.lhs.true211:                                 ; preds = %lor.lhs.false207
  %254 = load i32, i32* %cur_match_len, align 4
  %cmp212 = icmp ule i32 %254, 5
  br i1 %cmp212, label %if.then214, label %if.end215

if.then214:                                       ; preds = %land.lhs.true211, %lor.lhs.false, %land.lhs.true202
  store i32 0, i32* %cur_match_len, align 4
  store i32 0, i32* %cur_match_dist, align 4
  br label %if.end215

if.end215:                                        ; preds = %if.then214, %land.lhs.true211, %lor.lhs.false207
  %255 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len216 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %255, i32 0, i32 19
  %256 = load i32, i32* %m_saved_match_len216, align 8
  %tobool217 = icmp ne i32 %256, 0
  br i1 %tobool217, label %if.then218, label %if.else243

if.then218:                                       ; preds = %if.end215
  %257 = load i32, i32* %cur_match_len, align 4
  %258 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len219 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %258, i32 0, i32 19
  %259 = load i32, i32* %m_saved_match_len219, align 8
  %cmp220 = icmp ugt i32 %257, %259
  br i1 %cmp220, label %if.then222, label %if.else236

if.then222:                                       ; preds = %if.then218
  %260 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %261 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_lit = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %261, i32 0, i32 20
  %262 = load i32, i32* %m_saved_lit, align 4
  %conv223 = trunc i32 %262 to i8
  store %struct.tdefl_compressor* %260, %struct.tdefl_compressor** %d.addr.i338, align 8
  store i8 %conv223, i8* %lit.addr.i, align 1
  %263 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_total_lz_bytes.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %263, i32 0, i32 14
  %264 = load i32, i32* %m_total_lz_bytes.i, align 4
  %inc.i = add i32 %264, 1
  store i32 %inc.i, i32* %m_total_lz_bytes.i, align 4
  %265 = load i8, i8* %lit.addr.i, align 1
  %266 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_pLZ_code_buf.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %266, i32 0, i32 9
  %267 = load i8*, i8** %m_pLZ_code_buf.i, align 8
  %incdec.ptr.i339 = getelementptr inbounds i8, i8* %267, i32 1
  store i8* %incdec.ptr.i339, i8** %m_pLZ_code_buf.i, align 8
  store i8 %265, i8* %267, align 1
  %268 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_pLZ_flags.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %268, i32 0, i32 10
  %269 = load i8*, i8** %m_pLZ_flags.i, align 8
  %270 = load i8, i8* %269, align 1
  %conv.i340 = zext i8 %270 to i32
  %shr.i = ashr i32 %conv.i340, 1
  %conv1.i = trunc i32 %shr.i to i8
  %271 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_pLZ_flags2.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %271, i32 0, i32 10
  %272 = load i8*, i8** %m_pLZ_flags2.i, align 8
  store i8 %conv1.i, i8* %272, align 1
  %273 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_num_flags_left.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %273, i32 0, i32 13
  %274 = load i32, i32* %m_num_flags_left.i, align 8
  %dec.i341 = add i32 %274, -1
  store i32 %dec.i341, i32* %m_num_flags_left.i, align 8
  %cmp.i342 = icmp eq i32 %dec.i341, 0
  br i1 %cmp.i342, label %if.then.i343, label %tdefl_record_literal.exit

if.then.i343:                                     ; preds = %if.then222
  %275 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_num_flags_left4.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %275, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left4.i, align 8
  %276 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_pLZ_code_buf5.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %276, i32 0, i32 9
  %277 = load i8*, i8** %m_pLZ_code_buf5.i, align 8
  %incdec.ptr6.i = getelementptr inbounds i8, i8* %277, i32 1
  store i8* %incdec.ptr6.i, i8** %m_pLZ_code_buf5.i, align 8
  %278 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_pLZ_flags7.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %278, i32 0, i32 10
  store i8* %277, i8** %m_pLZ_flags7.i, align 8
  br label %tdefl_record_literal.exit

tdefl_record_literal.exit:                        ; preds = %if.then222, %if.then.i343
  %279 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i338, align 8
  %m_huff_count.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %279, i32 0, i32 36
  %arrayidx.i344 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count.i, i64 0, i64 0
  %280 = load i8, i8* %lit.addr.i, align 1
  %idxprom.i345 = zext i8 %280 to i64
  %arrayidx8.i = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx.i344, i64 0, i64 %idxprom.i345
  %281 = load i16, i16* %arrayidx8.i, align 2
  %inc9.i = add i16 %281, 1
  store i16 %inc9.i, i16* %arrayidx8.i, align 2
  %282 = load i32, i32* %cur_match_len, align 4
  %cmp224 = icmp uge i32 %282, 128
  br i1 %cmp224, label %if.then226, label %if.else228

if.then226:                                       ; preds = %tdefl_record_literal.exit
  %283 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %284 = load i32, i32* %cur_match_len, align 4
  %285 = load i32, i32* %cur_match_dist, align 4
  store %struct.tdefl_compressor* %283, %struct.tdefl_compressor** %d.addr.i347, align 8
  store i32 %284, i32* %match_len.addr.i, align 4
  store i32 %285, i32* %match_dist.addr.i, align 4
  %286 = load i32, i32* %match_len.addr.i, align 4
  %cmp.i348 = icmp uge i32 %286, 3
  br i1 %cmp.i348, label %land.lhs.true.i349, label %land.end.i354

land.lhs.true.i349:                               ; preds = %if.then226
  %287 = load i32, i32* %match_dist.addr.i, align 4
  %cmp1.i = icmp uge i32 %287, 1
  br i1 %cmp1.i, label %land.rhs.i350, label %land.end.i354

land.rhs.i350:                                    ; preds = %land.lhs.true.i349
  %288 = load i32, i32* %match_dist.addr.i, align 4
  %cmp2.i = icmp ule i32 %288, 32768
  br label %land.end.i354

land.end.i354:                                    ; preds = %land.rhs.i350, %land.lhs.true.i349, %if.then226
  %289 = phi i1 [ false, %land.lhs.true.i349 ], [ false, %if.then226 ], [ %cmp2.i, %land.rhs.i350 ]
  %lnot.i351 = xor i1 %289, true
  %lnot.ext.i352 = zext i1 %lnot.i351 to i32
  %conv.i353 = sext i32 %lnot.ext.i352 to i64
  br i1 %lnot.i351, label %cond.true.i355, label %cond.false.i356

cond.true.i355:                                   ; preds = %land.end.i354
  call void @__assert_rtn(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.tdefl_record_match, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1685, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.62, i32 0, i32 0)) #12
  unreachable

cond.false.i356:                                  ; preds = %land.end.i354
  %290 = load i32, i32* %match_len.addr.i, align 4
  %291 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_total_lz_bytes.i357 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %291, i32 0, i32 14
  %292 = load i32, i32* %m_total_lz_bytes.i357, align 4
  %add.i358 = add i32 %292, %290
  store i32 %add.i358, i32* %m_total_lz_bytes.i357, align 4
  %293 = load i32, i32* %match_len.addr.i, align 4
  %sub.i359 = sub i32 %293, 3
  %conv3.i = trunc i32 %sub.i359 to i8
  %294 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_pLZ_code_buf.i360 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %294, i32 0, i32 9
  %295 = load i8*, i8** %m_pLZ_code_buf.i360, align 8
  store i8 %conv3.i, i8* %295, align 1
  %296 = load i32, i32* %match_dist.addr.i, align 4
  %sub4.i = sub i32 %296, 1
  store i32 %sub4.i, i32* %match_dist.addr.i, align 4
  %297 = load i32, i32* %match_dist.addr.i, align 4
  %and.i361 = and i32 %297, 255
  %conv5.i = trunc i32 %and.i361 to i8
  %298 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_pLZ_code_buf6.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %298, i32 0, i32 9
  %299 = load i8*, i8** %m_pLZ_code_buf6.i, align 8
  %arrayidx7.i = getelementptr inbounds i8, i8* %299, i64 1
  store i8 %conv5.i, i8* %arrayidx7.i, align 1
  %300 = load i32, i32* %match_dist.addr.i, align 4
  %shr.i362 = lshr i32 %300, 8
  %conv8.i = trunc i32 %shr.i362 to i8
  %301 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_pLZ_code_buf9.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %301, i32 0, i32 9
  %302 = load i8*, i8** %m_pLZ_code_buf9.i, align 8
  %arrayidx10.i = getelementptr inbounds i8, i8* %302, i64 2
  store i8 %conv8.i, i8* %arrayidx10.i, align 1
  %303 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_pLZ_code_buf11.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %303, i32 0, i32 9
  %304 = load i8*, i8** %m_pLZ_code_buf11.i, align 8
  %add.ptr.i363 = getelementptr inbounds i8, i8* %304, i64 3
  store i8* %add.ptr.i363, i8** %m_pLZ_code_buf11.i, align 8
  %305 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_pLZ_flags.i364 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %305, i32 0, i32 10
  %306 = load i8*, i8** %m_pLZ_flags.i364, align 8
  %307 = load i8, i8* %306, align 1
  %conv12.i = zext i8 %307 to i32
  %shr13.i = ashr i32 %conv12.i, 1
  %or.i = or i32 %shr13.i, 128
  %conv14.i = trunc i32 %or.i to i8
  %308 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_pLZ_flags15.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %308, i32 0, i32 10
  %309 = load i8*, i8** %m_pLZ_flags15.i, align 8
  store i8 %conv14.i, i8* %309, align 1
  %310 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_num_flags_left.i365 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %310, i32 0, i32 13
  %311 = load i32, i32* %m_num_flags_left.i365, align 8
  %dec.i366 = add i32 %311, -1
  store i32 %dec.i366, i32* %m_num_flags_left.i365, align 8
  %cmp16.i = icmp eq i32 %dec.i366, 0
  br i1 %cmp16.i, label %if.then.i368, label %if.end.i371

if.then.i368:                                     ; preds = %cond.false.i356
  %312 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_num_flags_left18.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %312, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left18.i, align 8
  %313 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_pLZ_code_buf19.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %313, i32 0, i32 9
  %314 = load i8*, i8** %m_pLZ_code_buf19.i, align 8
  %incdec.ptr.i367 = getelementptr inbounds i8, i8* %314, i32 1
  store i8* %incdec.ptr.i367, i8** %m_pLZ_code_buf19.i, align 8
  %315 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_pLZ_flags20.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %315, i32 0, i32 10
  store i8* %314, i8** %m_pLZ_flags20.i, align 8
  br label %if.end.i371

if.end.i371:                                      ; preds = %if.then.i368, %cond.false.i356
  %316 = load i32, i32* %match_dist.addr.i, align 4
  %and21.i = and i32 %316, 511
  %idxprom.i369 = zext i32 %and21.i to i64
  %arrayidx22.i = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_sym, i64 0, i64 %idxprom.i369
  %317 = load i8, i8* %arrayidx22.i, align 1
  %conv23.i = zext i8 %317 to i32
  store i32 %conv23.i, i32* %s0.i, align 4
  %318 = load i32, i32* %match_dist.addr.i, align 4
  %shr24.i = lshr i32 %318, 8
  %and25.i = and i32 %shr24.i, 127
  %idxprom26.i = zext i32 %and25.i to i64
  %arrayidx27.i = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_sym, i64 0, i64 %idxprom26.i
  %319 = load i8, i8* %arrayidx27.i, align 1
  %conv28.i = zext i8 %319 to i32
  store i32 %conv28.i, i32* %s1.i, align 4
  %320 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_huff_count.i370 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %320, i32 0, i32 36
  %arrayidx29.i = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count.i370, i64 0, i64 1
  %321 = load i32, i32* %match_dist.addr.i, align 4
  %cmp30.i = icmp ult i32 %321, 512
  br i1 %cmp30.i, label %cond.true32.i, label %cond.false33.i

cond.true32.i:                                    ; preds = %if.end.i371
  %322 = load i32, i32* %s0.i, align 4
  br label %cond.end34.i

cond.false33.i:                                   ; preds = %if.end.i371
  %323 = load i32, i32* %s1.i, align 4
  br label %cond.end34.i

cond.end34.i:                                     ; preds = %cond.false33.i, %cond.true32.i
  %cond.i372 = phi i32 [ %322, %cond.true32.i ], [ %323, %cond.false33.i ]
  %idxprom35.i = zext i32 %cond.i372 to i64
  %arrayidx36.i = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx29.i, i64 0, i64 %idxprom35.i
  %324 = load i16, i16* %arrayidx36.i, align 2
  %inc.i373 = add i16 %324, 1
  store i16 %inc.i373, i16* %arrayidx36.i, align 2
  %325 = load i32, i32* %match_len.addr.i, align 4
  %cmp37.i = icmp uge i32 %325, 3
  br i1 %cmp37.i, label %if.then39.i, label %tdefl_record_match.exit

if.then39.i:                                      ; preds = %cond.end34.i
  %326 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i347, align 8
  %m_huff_count40.i = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %326, i32 0, i32 36
  %arrayidx41.i374 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count40.i, i64 0, i64 0
  %327 = load i32, i32* %match_len.addr.i, align 4
  %sub42.i = sub i32 %327, 3
  %idxprom43.i = zext i32 %sub42.i to i64
  %arrayidx44.i = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom43.i
  %328 = load i16, i16* %arrayidx44.i, align 2
  %idxprom45.i = zext i16 %328 to i64
  %arrayidx46.i = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx41.i374, i64 0, i64 %idxprom45.i
  %329 = load i16, i16* %arrayidx46.i, align 2
  %inc47.i = add i16 %329, 1
  store i16 %inc47.i, i16* %arrayidx46.i, align 2
  br label %tdefl_record_match.exit

tdefl_record_match.exit:                          ; preds = %cond.end34.i, %if.then39.i
  %330 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len227 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %330, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len227, align 8
  %331 = load i32, i32* %cur_match_len, align 4
  store i32 %331, i32* %len_to_move, align 4
  br label %if.end235

if.else228:                                       ; preds = %tdefl_record_literal.exit
  %332 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict229 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %332, i32 0, i32 35
  %333 = load i32, i32* %cur_pos, align 4
  %idxprom230 = zext i32 %333 to i64
  %arrayidx231 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict229, i64 0, i64 %idxprom230
  %334 = load i8, i8* %arrayidx231, align 1
  %conv232 = zext i8 %334 to i32
  %335 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_lit233 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %335, i32 0, i32 20
  store i32 %conv232, i32* %m_saved_lit233, align 4
  %336 = load i32, i32* %cur_match_dist, align 4
  %337 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_dist = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %337, i32 0, i32 18
  store i32 %336, i32* %m_saved_match_dist, align 4
  %338 = load i32, i32* %cur_match_len, align 4
  %339 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len234 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %339, i32 0, i32 19
  store i32 %338, i32* %m_saved_match_len234, align 8
  br label %if.end235

if.end235:                                        ; preds = %if.else228, %tdefl_record_match.exit
  br label %if.end242

if.else236:                                       ; preds = %if.then218
  %340 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %341 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len237 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %341, i32 0, i32 19
  %342 = load i32, i32* %m_saved_match_len237, align 8
  %343 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_dist238 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %343, i32 0, i32 18
  %344 = load i32, i32* %m_saved_match_dist238, align 4
  store %struct.tdefl_compressor* %340, %struct.tdefl_compressor** %d.addr.i375, align 8
  store i32 %342, i32* %match_len.addr.i376, align 4
  store i32 %344, i32* %match_dist.addr.i377, align 4
  %345 = load i32, i32* %match_len.addr.i376, align 4
  %cmp.i380 = icmp uge i32 %345, 3
  br i1 %cmp.i380, label %land.lhs.true.i382, label %land.end.i388

land.lhs.true.i382:                               ; preds = %if.else236
  %346 = load i32, i32* %match_dist.addr.i377, align 4
  %cmp1.i381 = icmp uge i32 %346, 1
  br i1 %cmp1.i381, label %land.rhs.i384, label %land.end.i388

land.rhs.i384:                                    ; preds = %land.lhs.true.i382
  %347 = load i32, i32* %match_dist.addr.i377, align 4
  %cmp2.i383 = icmp ule i32 %347, 32768
  br label %land.end.i388

land.end.i388:                                    ; preds = %land.rhs.i384, %land.lhs.true.i382, %if.else236
  %348 = phi i1 [ false, %land.lhs.true.i382 ], [ false, %if.else236 ], [ %cmp2.i383, %land.rhs.i384 ]
  %lnot.i385 = xor i1 %348, true
  %lnot.ext.i386 = zext i1 %lnot.i385 to i32
  %conv.i387 = sext i32 %lnot.ext.i386 to i64
  br i1 %lnot.i385, label %cond.true.i389, label %cond.false.i390

cond.true.i389:                                   ; preds = %land.end.i388
  call void @__assert_rtn(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.tdefl_record_match, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1685, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.62, i32 0, i32 0)) #12
  unreachable

cond.false.i390:                                  ; preds = %land.end.i388
  %349 = load i32, i32* %match_len.addr.i376, align 4
  %350 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_total_lz_bytes.i391 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %350, i32 0, i32 14
  %351 = load i32, i32* %m_total_lz_bytes.i391, align 4
  %add.i392 = add i32 %351, %349
  store i32 %add.i392, i32* %m_total_lz_bytes.i391, align 4
  %352 = load i32, i32* %match_len.addr.i376, align 4
  %sub.i393 = sub i32 %352, 3
  %conv3.i394 = trunc i32 %sub.i393 to i8
  %353 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_pLZ_code_buf.i395 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %353, i32 0, i32 9
  %354 = load i8*, i8** %m_pLZ_code_buf.i395, align 8
  store i8 %conv3.i394, i8* %354, align 1
  %355 = load i32, i32* %match_dist.addr.i377, align 4
  %sub4.i396 = sub i32 %355, 1
  store i32 %sub4.i396, i32* %match_dist.addr.i377, align 4
  %356 = load i32, i32* %match_dist.addr.i377, align 4
  %and.i397 = and i32 %356, 255
  %conv5.i398 = trunc i32 %and.i397 to i8
  %357 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_pLZ_code_buf6.i399 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %357, i32 0, i32 9
  %358 = load i8*, i8** %m_pLZ_code_buf6.i399, align 8
  %arrayidx7.i400 = getelementptr inbounds i8, i8* %358, i64 1
  store i8 %conv5.i398, i8* %arrayidx7.i400, align 1
  %359 = load i32, i32* %match_dist.addr.i377, align 4
  %shr.i401 = lshr i32 %359, 8
  %conv8.i402 = trunc i32 %shr.i401 to i8
  %360 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_pLZ_code_buf9.i403 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %360, i32 0, i32 9
  %361 = load i8*, i8** %m_pLZ_code_buf9.i403, align 8
  %arrayidx10.i404 = getelementptr inbounds i8, i8* %361, i64 2
  store i8 %conv8.i402, i8* %arrayidx10.i404, align 1
  %362 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_pLZ_code_buf11.i405 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %362, i32 0, i32 9
  %363 = load i8*, i8** %m_pLZ_code_buf11.i405, align 8
  %add.ptr.i406 = getelementptr inbounds i8, i8* %363, i64 3
  store i8* %add.ptr.i406, i8** %m_pLZ_code_buf11.i405, align 8
  %364 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_pLZ_flags.i407 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %364, i32 0, i32 10
  %365 = load i8*, i8** %m_pLZ_flags.i407, align 8
  %366 = load i8, i8* %365, align 1
  %conv12.i408 = zext i8 %366 to i32
  %shr13.i409 = ashr i32 %conv12.i408, 1
  %or.i410 = or i32 %shr13.i409, 128
  %conv14.i411 = trunc i32 %or.i410 to i8
  %367 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_pLZ_flags15.i412 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %367, i32 0, i32 10
  %368 = load i8*, i8** %m_pLZ_flags15.i412, align 8
  store i8 %conv14.i411, i8* %368, align 1
  %369 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_num_flags_left.i413 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %369, i32 0, i32 13
  %370 = load i32, i32* %m_num_flags_left.i413, align 8
  %dec.i414 = add i32 %370, -1
  store i32 %dec.i414, i32* %m_num_flags_left.i413, align 8
  %cmp16.i415 = icmp eq i32 %dec.i414, 0
  br i1 %cmp16.i415, label %if.then.i420, label %if.end.i433

if.then.i420:                                     ; preds = %cond.false.i390
  %371 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_num_flags_left18.i416 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %371, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left18.i416, align 8
  %372 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_pLZ_code_buf19.i417 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %372, i32 0, i32 9
  %373 = load i8*, i8** %m_pLZ_code_buf19.i417, align 8
  %incdec.ptr.i418 = getelementptr inbounds i8, i8* %373, i32 1
  store i8* %incdec.ptr.i418, i8** %m_pLZ_code_buf19.i417, align 8
  %374 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_pLZ_flags20.i419 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %374, i32 0, i32 10
  store i8* %373, i8** %m_pLZ_flags20.i419, align 8
  br label %if.end.i433

if.end.i433:                                      ; preds = %if.then.i420, %cond.false.i390
  %375 = load i32, i32* %match_dist.addr.i377, align 4
  %and21.i421 = and i32 %375, 511
  %idxprom.i422 = zext i32 %and21.i421 to i64
  %arrayidx22.i423 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_sym, i64 0, i64 %idxprom.i422
  %376 = load i8, i8* %arrayidx22.i423, align 1
  %conv23.i424 = zext i8 %376 to i32
  store i32 %conv23.i424, i32* %s0.i378, align 4
  %377 = load i32, i32* %match_dist.addr.i377, align 4
  %shr24.i425 = lshr i32 %377, 8
  %and25.i426 = and i32 %shr24.i425, 127
  %idxprom26.i427 = zext i32 %and25.i426 to i64
  %arrayidx27.i428 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_sym, i64 0, i64 %idxprom26.i427
  %378 = load i8, i8* %arrayidx27.i428, align 1
  %conv28.i429 = zext i8 %378 to i32
  store i32 %conv28.i429, i32* %s1.i379, align 4
  %379 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_huff_count.i430 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %379, i32 0, i32 36
  %arrayidx29.i431 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count.i430, i64 0, i64 1
  %380 = load i32, i32* %match_dist.addr.i377, align 4
  %cmp30.i432 = icmp ult i32 %380, 512
  br i1 %cmp30.i432, label %cond.true32.i434, label %cond.false33.i435

cond.true32.i434:                                 ; preds = %if.end.i433
  %381 = load i32, i32* %s0.i378, align 4
  br label %cond.end34.i441

cond.false33.i435:                                ; preds = %if.end.i433
  %382 = load i32, i32* %s1.i379, align 4
  br label %cond.end34.i441

cond.end34.i441:                                  ; preds = %cond.false33.i435, %cond.true32.i434
  %cond.i436 = phi i32 [ %381, %cond.true32.i434 ], [ %382, %cond.false33.i435 ]
  %idxprom35.i437 = zext i32 %cond.i436 to i64
  %arrayidx36.i438 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx29.i431, i64 0, i64 %idxprom35.i437
  %383 = load i16, i16* %arrayidx36.i438, align 2
  %inc.i439 = add i16 %383, 1
  store i16 %inc.i439, i16* %arrayidx36.i438, align 2
  %384 = load i32, i32* %match_len.addr.i376, align 4
  %cmp37.i440 = icmp uge i32 %384, 3
  br i1 %cmp37.i440, label %if.then39.i450, label %tdefl_record_match.exit451

if.then39.i450:                                   ; preds = %cond.end34.i441
  %385 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i375, align 8
  %m_huff_count40.i442 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %385, i32 0, i32 36
  %arrayidx41.i443 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count40.i442, i64 0, i64 0
  %386 = load i32, i32* %match_len.addr.i376, align 4
  %sub42.i444 = sub i32 %386, 3
  %idxprom43.i445 = zext i32 %sub42.i444 to i64
  %arrayidx44.i446 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom43.i445
  %387 = load i16, i16* %arrayidx44.i446, align 2
  %idxprom45.i447 = zext i16 %387 to i64
  %arrayidx46.i448 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx41.i443, i64 0, i64 %idxprom45.i447
  %388 = load i16, i16* %arrayidx46.i448, align 2
  %inc47.i449 = add i16 %388, 1
  store i16 %inc47.i449, i16* %arrayidx46.i448, align 2
  br label %tdefl_record_match.exit451

tdefl_record_match.exit451:                       ; preds = %cond.end34.i441, %if.then39.i450
  %389 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len239 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %389, i32 0, i32 19
  %390 = load i32, i32* %m_saved_match_len239, align 8
  %sub240 = sub i32 %390, 1
  store i32 %sub240, i32* %len_to_move, align 4
  %391 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len241 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %391, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len241, align 8
  br label %if.end242

if.end242:                                        ; preds = %tdefl_record_match.exit451, %if.end235
  br label %if.end283

if.else243:                                       ; preds = %if.end215
  %392 = load i32, i32* %cur_match_dist, align 4
  %tobool244 = icmp ne i32 %392, 0
  br i1 %tobool244, label %if.else256, label %if.then245

if.then245:                                       ; preds = %if.else243
  %393 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %394 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict246 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %394, i32 0, i32 35
  %395 = load i32, i32* %cur_pos, align 4
  %conv247 = zext i32 %395 to i64
  %cmp248 = icmp ult i64 %conv247, 33024
  br i1 %cmp248, label %cond.true250, label %cond.false252

cond.true250:                                     ; preds = %if.then245
  %396 = load i32, i32* %cur_pos, align 4
  %conv251 = zext i32 %396 to i64
  br label %cond.end253

cond.false252:                                    ; preds = %if.then245
  br label %cond.end253

cond.end253:                                      ; preds = %cond.false252, %cond.true250
  %cond254 = phi i64 [ %conv251, %cond.true250 ], [ 33024, %cond.false252 ]
  %arrayidx255 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict246, i64 0, i64 %cond254
  %397 = load i8, i8* %arrayidx255, align 1
  store %struct.tdefl_compressor* %393, %struct.tdefl_compressor** %d.addr.i452, align 8
  store i8 %397, i8* %lit.addr.i453, align 1
  %398 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_total_lz_bytes.i454 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %398, i32 0, i32 14
  %399 = load i32, i32* %m_total_lz_bytes.i454, align 4
  %inc.i455 = add i32 %399, 1
  store i32 %inc.i455, i32* %m_total_lz_bytes.i454, align 4
  %400 = load i8, i8* %lit.addr.i453, align 1
  %401 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_pLZ_code_buf.i456 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %401, i32 0, i32 9
  %402 = load i8*, i8** %m_pLZ_code_buf.i456, align 8
  %incdec.ptr.i457 = getelementptr inbounds i8, i8* %402, i32 1
  store i8* %incdec.ptr.i457, i8** %m_pLZ_code_buf.i456, align 8
  store i8 %400, i8* %402, align 1
  %403 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_pLZ_flags.i458 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %403, i32 0, i32 10
  %404 = load i8*, i8** %m_pLZ_flags.i458, align 8
  %405 = load i8, i8* %404, align 1
  %conv.i459 = zext i8 %405 to i32
  %shr.i460 = ashr i32 %conv.i459, 1
  %conv1.i461 = trunc i32 %shr.i460 to i8
  %406 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_pLZ_flags2.i462 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %406, i32 0, i32 10
  %407 = load i8*, i8** %m_pLZ_flags2.i462, align 8
  store i8 %conv1.i461, i8* %407, align 1
  %408 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_num_flags_left.i463 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %408, i32 0, i32 13
  %409 = load i32, i32* %m_num_flags_left.i463, align 8
  %dec.i464 = add i32 %409, -1
  store i32 %dec.i464, i32* %m_num_flags_left.i463, align 8
  %cmp.i465 = icmp eq i32 %dec.i464, 0
  br i1 %cmp.i465, label %if.then.i470, label %tdefl_record_literal.exit477

if.then.i470:                                     ; preds = %cond.end253
  %410 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_num_flags_left4.i466 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %410, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left4.i466, align 8
  %411 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_pLZ_code_buf5.i467 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %411, i32 0, i32 9
  %412 = load i8*, i8** %m_pLZ_code_buf5.i467, align 8
  %incdec.ptr6.i468 = getelementptr inbounds i8, i8* %412, i32 1
  store i8* %incdec.ptr6.i468, i8** %m_pLZ_code_buf5.i467, align 8
  %413 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_pLZ_flags7.i469 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %413, i32 0, i32 10
  store i8* %412, i8** %m_pLZ_flags7.i469, align 8
  br label %tdefl_record_literal.exit477

tdefl_record_literal.exit477:                     ; preds = %cond.end253, %if.then.i470
  %414 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i452, align 8
  %m_huff_count.i471 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %414, i32 0, i32 36
  %arrayidx.i472 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count.i471, i64 0, i64 0
  %415 = load i8, i8* %lit.addr.i453, align 1
  %idxprom.i473 = zext i8 %415 to i64
  %arrayidx8.i474 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx.i472, i64 0, i64 %idxprom.i473
  %416 = load i16, i16* %arrayidx8.i474, align 2
  %inc9.i475 = add i16 %416, 1
  store i16 %inc9.i475, i16* %arrayidx8.i474, align 2
  br label %if.end282

if.else256:                                       ; preds = %if.else243
  %417 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_greedy_parsing = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %417, i32 0, i32 4
  %418 = load i32, i32* %m_greedy_parsing, align 4
  %tobool257 = icmp ne i32 %418, 0
  br i1 %tobool257, label %if.then265, label %lor.lhs.false258

lor.lhs.false258:                                 ; preds = %if.else256
  %419 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags259 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %419, i32 0, i32 2
  %420 = load i32, i32* %m_flags259, align 8
  %and260 = and i32 %420, 65536
  %tobool261 = icmp ne i32 %and260, 0
  br i1 %tobool261, label %if.then265, label %lor.lhs.false262

lor.lhs.false262:                                 ; preds = %lor.lhs.false258
  %421 = load i32, i32* %cur_match_len, align 4
  %cmp263 = icmp uge i32 %421, 128
  br i1 %cmp263, label %if.then265, label %if.else266

if.then265:                                       ; preds = %lor.lhs.false262, %lor.lhs.false258, %if.else256
  %422 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %423 = load i32, i32* %cur_match_len, align 4
  %424 = load i32, i32* %cur_match_dist, align 4
  store %struct.tdefl_compressor* %422, %struct.tdefl_compressor** %d.addr.i478, align 8
  store i32 %423, i32* %match_len.addr.i479, align 4
  store i32 %424, i32* %match_dist.addr.i480, align 4
  %425 = load i32, i32* %match_len.addr.i479, align 4
  %cmp.i483 = icmp uge i32 %425, 3
  br i1 %cmp.i483, label %land.lhs.true.i485, label %land.end.i491

land.lhs.true.i485:                               ; preds = %if.then265
  %426 = load i32, i32* %match_dist.addr.i480, align 4
  %cmp1.i484 = icmp uge i32 %426, 1
  br i1 %cmp1.i484, label %land.rhs.i487, label %land.end.i491

land.rhs.i487:                                    ; preds = %land.lhs.true.i485
  %427 = load i32, i32* %match_dist.addr.i480, align 4
  %cmp2.i486 = icmp ule i32 %427, 32768
  br label %land.end.i491

land.end.i491:                                    ; preds = %land.rhs.i487, %land.lhs.true.i485, %if.then265
  %428 = phi i1 [ false, %land.lhs.true.i485 ], [ false, %if.then265 ], [ %cmp2.i486, %land.rhs.i487 ]
  %lnot.i488 = xor i1 %428, true
  %lnot.ext.i489 = zext i1 %lnot.i488 to i32
  %conv.i490 = sext i32 %lnot.ext.i489 to i64
  br i1 %lnot.i488, label %cond.true.i492, label %cond.false.i493

cond.true.i492:                                   ; preds = %land.end.i491
  call void @__assert_rtn(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.tdefl_record_match, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1685, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.62, i32 0, i32 0)) #12
  unreachable

cond.false.i493:                                  ; preds = %land.end.i491
  %429 = load i32, i32* %match_len.addr.i479, align 4
  %430 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_total_lz_bytes.i494 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %430, i32 0, i32 14
  %431 = load i32, i32* %m_total_lz_bytes.i494, align 4
  %add.i495 = add i32 %431, %429
  store i32 %add.i495, i32* %m_total_lz_bytes.i494, align 4
  %432 = load i32, i32* %match_len.addr.i479, align 4
  %sub.i496 = sub i32 %432, 3
  %conv3.i497 = trunc i32 %sub.i496 to i8
  %433 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_pLZ_code_buf.i498 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %433, i32 0, i32 9
  %434 = load i8*, i8** %m_pLZ_code_buf.i498, align 8
  store i8 %conv3.i497, i8* %434, align 1
  %435 = load i32, i32* %match_dist.addr.i480, align 4
  %sub4.i499 = sub i32 %435, 1
  store i32 %sub4.i499, i32* %match_dist.addr.i480, align 4
  %436 = load i32, i32* %match_dist.addr.i480, align 4
  %and.i500 = and i32 %436, 255
  %conv5.i501 = trunc i32 %and.i500 to i8
  %437 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_pLZ_code_buf6.i502 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %437, i32 0, i32 9
  %438 = load i8*, i8** %m_pLZ_code_buf6.i502, align 8
  %arrayidx7.i503 = getelementptr inbounds i8, i8* %438, i64 1
  store i8 %conv5.i501, i8* %arrayidx7.i503, align 1
  %439 = load i32, i32* %match_dist.addr.i480, align 4
  %shr.i504 = lshr i32 %439, 8
  %conv8.i505 = trunc i32 %shr.i504 to i8
  %440 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_pLZ_code_buf9.i506 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %440, i32 0, i32 9
  %441 = load i8*, i8** %m_pLZ_code_buf9.i506, align 8
  %arrayidx10.i507 = getelementptr inbounds i8, i8* %441, i64 2
  store i8 %conv8.i505, i8* %arrayidx10.i507, align 1
  %442 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_pLZ_code_buf11.i508 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %442, i32 0, i32 9
  %443 = load i8*, i8** %m_pLZ_code_buf11.i508, align 8
  %add.ptr.i509 = getelementptr inbounds i8, i8* %443, i64 3
  store i8* %add.ptr.i509, i8** %m_pLZ_code_buf11.i508, align 8
  %444 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_pLZ_flags.i510 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %444, i32 0, i32 10
  %445 = load i8*, i8** %m_pLZ_flags.i510, align 8
  %446 = load i8, i8* %445, align 1
  %conv12.i511 = zext i8 %446 to i32
  %shr13.i512 = ashr i32 %conv12.i511, 1
  %or.i513 = or i32 %shr13.i512, 128
  %conv14.i514 = trunc i32 %or.i513 to i8
  %447 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_pLZ_flags15.i515 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %447, i32 0, i32 10
  %448 = load i8*, i8** %m_pLZ_flags15.i515, align 8
  store i8 %conv14.i514, i8* %448, align 1
  %449 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_num_flags_left.i516 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %449, i32 0, i32 13
  %450 = load i32, i32* %m_num_flags_left.i516, align 8
  %dec.i517 = add i32 %450, -1
  store i32 %dec.i517, i32* %m_num_flags_left.i516, align 8
  %cmp16.i518 = icmp eq i32 %dec.i517, 0
  br i1 %cmp16.i518, label %if.then.i523, label %if.end.i536

if.then.i523:                                     ; preds = %cond.false.i493
  %451 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_num_flags_left18.i519 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %451, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left18.i519, align 8
  %452 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_pLZ_code_buf19.i520 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %452, i32 0, i32 9
  %453 = load i8*, i8** %m_pLZ_code_buf19.i520, align 8
  %incdec.ptr.i521 = getelementptr inbounds i8, i8* %453, i32 1
  store i8* %incdec.ptr.i521, i8** %m_pLZ_code_buf19.i520, align 8
  %454 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_pLZ_flags20.i522 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %454, i32 0, i32 10
  store i8* %453, i8** %m_pLZ_flags20.i522, align 8
  br label %if.end.i536

if.end.i536:                                      ; preds = %if.then.i523, %cond.false.i493
  %455 = load i32, i32* %match_dist.addr.i480, align 4
  %and21.i524 = and i32 %455, 511
  %idxprom.i525 = zext i32 %and21.i524 to i64
  %arrayidx22.i526 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_sym, i64 0, i64 %idxprom.i525
  %456 = load i8, i8* %arrayidx22.i526, align 1
  %conv23.i527 = zext i8 %456 to i32
  store i32 %conv23.i527, i32* %s0.i481, align 4
  %457 = load i32, i32* %match_dist.addr.i480, align 4
  %shr24.i528 = lshr i32 %457, 8
  %and25.i529 = and i32 %shr24.i528, 127
  %idxprom26.i530 = zext i32 %and25.i529 to i64
  %arrayidx27.i531 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_sym, i64 0, i64 %idxprom26.i530
  %458 = load i8, i8* %arrayidx27.i531, align 1
  %conv28.i532 = zext i8 %458 to i32
  store i32 %conv28.i532, i32* %s1.i482, align 4
  %459 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_huff_count.i533 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %459, i32 0, i32 36
  %arrayidx29.i534 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count.i533, i64 0, i64 1
  %460 = load i32, i32* %match_dist.addr.i480, align 4
  %cmp30.i535 = icmp ult i32 %460, 512
  br i1 %cmp30.i535, label %cond.true32.i537, label %cond.false33.i538

cond.true32.i537:                                 ; preds = %if.end.i536
  %461 = load i32, i32* %s0.i481, align 4
  br label %cond.end34.i544

cond.false33.i538:                                ; preds = %if.end.i536
  %462 = load i32, i32* %s1.i482, align 4
  br label %cond.end34.i544

cond.end34.i544:                                  ; preds = %cond.false33.i538, %cond.true32.i537
  %cond.i539 = phi i32 [ %461, %cond.true32.i537 ], [ %462, %cond.false33.i538 ]
  %idxprom35.i540 = zext i32 %cond.i539 to i64
  %arrayidx36.i541 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx29.i534, i64 0, i64 %idxprom35.i540
  %463 = load i16, i16* %arrayidx36.i541, align 2
  %inc.i542 = add i16 %463, 1
  store i16 %inc.i542, i16* %arrayidx36.i541, align 2
  %464 = load i32, i32* %match_len.addr.i479, align 4
  %cmp37.i543 = icmp uge i32 %464, 3
  br i1 %cmp37.i543, label %if.then39.i553, label %tdefl_record_match.exit554

if.then39.i553:                                   ; preds = %cond.end34.i544
  %465 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr.i478, align 8
  %m_huff_count40.i545 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %465, i32 0, i32 36
  %arrayidx41.i546 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count40.i545, i64 0, i64 0
  %466 = load i32, i32* %match_len.addr.i479, align 4
  %sub42.i547 = sub i32 %466, 3
  %idxprom43.i548 = zext i32 %sub42.i547 to i64
  %arrayidx44.i549 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom43.i548
  %467 = load i16, i16* %arrayidx44.i549, align 2
  %idxprom45.i550 = zext i16 %467 to i64
  %arrayidx46.i551 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx41.i546, i64 0, i64 %idxprom45.i550
  %468 = load i16, i16* %arrayidx46.i551, align 2
  %inc47.i552 = add i16 %468, 1
  store i16 %inc47.i552, i16* %arrayidx46.i551, align 2
  br label %tdefl_record_match.exit554

tdefl_record_match.exit554:                       ; preds = %cond.end34.i544, %if.then39.i553
  %469 = load i32, i32* %cur_match_len, align 4
  store i32 %469, i32* %len_to_move, align 4
  br label %if.end281

if.else266:                                       ; preds = %lor.lhs.false262
  %470 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict267 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %470, i32 0, i32 35
  %471 = load i32, i32* %cur_pos, align 4
  %conv268 = zext i32 %471 to i64
  %cmp269 = icmp ult i64 %conv268, 33024
  br i1 %cmp269, label %cond.true271, label %cond.false273

cond.true271:                                     ; preds = %if.else266
  %472 = load i32, i32* %cur_pos, align 4
  %conv272 = zext i32 %472 to i64
  br label %cond.end274

cond.false273:                                    ; preds = %if.else266
  br label %cond.end274

cond.end274:                                      ; preds = %cond.false273, %cond.true271
  %cond275 = phi i64 [ %conv272, %cond.true271 ], [ 33024, %cond.false273 ]
  %arrayidx276 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict267, i64 0, i64 %cond275
  %473 = load i8, i8* %arrayidx276, align 1
  %conv277 = zext i8 %473 to i32
  %474 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_lit278 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %474, i32 0, i32 20
  store i32 %conv277, i32* %m_saved_lit278, align 4
  %475 = load i32, i32* %cur_match_dist, align 4
  %476 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_dist279 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %476, i32 0, i32 18
  store i32 %475, i32* %m_saved_match_dist279, align 4
  %477 = load i32, i32* %cur_match_len, align 4
  %478 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_saved_match_len280 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %478, i32 0, i32 19
  store i32 %477, i32* %m_saved_match_len280, align 8
  br label %if.end281

if.end281:                                        ; preds = %cond.end274, %tdefl_record_match.exit554
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %tdefl_record_literal.exit477
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %if.end242
  %479 = load i32, i32* %len_to_move, align 4
  %480 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos284 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %480, i32 0, i32 6
  %481 = load i32, i32* %m_lookahead_pos284, align 4
  %add285 = add i32 %481, %479
  store i32 %add285, i32* %m_lookahead_pos284, align 4
  %482 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size286 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %482, i32 0, i32 7
  %483 = load i32, i32* %m_lookahead_size286, align 8
  %484 = load i32, i32* %len_to_move, align 4
  %cmp287 = icmp uge i32 %483, %484
  %lnot = xor i1 %cmp287, true
  %lnot.ext = zext i1 %lnot to i32
  %conv289 = sext i32 %lnot.ext to i64
  %tobool290 = icmp ne i64 %conv289, 0
  br i1 %tobool290, label %cond.true291, label %cond.false292

cond.true291:                                     ; preds = %if.end283
  call void @__assert_rtn(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__func__.tdefl_compress_normal, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1836, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.60, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end293

cond.false292:                                    ; preds = %if.end283
  br label %cond.end293

cond.end293:                                      ; preds = %cond.false292, %485
  %486 = load i32, i32* %len_to_move, align 4
  %487 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_size294 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %487, i32 0, i32 7
  %488 = load i32, i32* %m_lookahead_size294, align 8
  %sub295 = sub i32 %488, %486
  store i32 %sub295, i32* %m_lookahead_size294, align 8
  %489 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size296 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %489, i32 0, i32 8
  %490 = load i32, i32* %m_dict_size296, align 4
  %491 = load i32, i32* %len_to_move, align 4
  %add297 = add i32 %490, %491
  %cmp298 = icmp ult i32 %add297, 32768
  br i1 %cmp298, label %cond.true300, label %cond.false303

cond.true300:                                     ; preds = %cond.end293
  %492 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size301 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %492, i32 0, i32 8
  %493 = load i32, i32* %m_dict_size301, align 4
  %494 = load i32, i32* %len_to_move, align 4
  %add302 = add i32 %493, %494
  br label %cond.end304

cond.false303:                                    ; preds = %cond.end293
  br label %cond.end304

cond.end304:                                      ; preds = %cond.false303, %cond.true300
  %cond305 = phi i32 [ %add302, %cond.true300 ], [ 32768, %cond.false303 ]
  %495 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size306 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %495, i32 0, i32 8
  store i32 %cond305, i32* %m_dict_size306, align 4
  %496 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %496, i32 0, i32 9
  %497 = load i8*, i8** %m_pLZ_code_buf, align 8
  %498 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %498, i32 0, i32 39
  %arrayidx307 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i64 0, i64 65528
  %cmp308 = icmp ugt i8* %497, %arrayidx307
  br i1 %cmp308, label %if.then324, label %lor.lhs.false310

lor.lhs.false310:                                 ; preds = %cond.end304
  %499 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %499, i32 0, i32 14
  %500 = load i32, i32* %m_total_lz_bytes, align 4
  %cmp311 = icmp ugt i32 %500, 31744
  br i1 %cmp311, label %land.lhs.true313, label %if.end334

land.lhs.true313:                                 ; preds = %lor.lhs.false310
  %501 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf314 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %501, i32 0, i32 9
  %502 = load i8*, i8** %m_pLZ_code_buf314, align 8
  %503 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf315 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %503, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf315, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %502 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv316 = trunc i64 %sub.ptr.sub to i32
  %mul = mul i32 %conv316, 115
  %shr = lshr i32 %mul, 7
  %504 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes317 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %504, i32 0, i32 14
  %505 = load i32, i32* %m_total_lz_bytes317, align 4
  %cmp318 = icmp uge i32 %shr, %505
  br i1 %cmp318, label %if.then324, label %lor.lhs.false320

lor.lhs.false320:                                 ; preds = %land.lhs.true313
  %506 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags321 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %506, i32 0, i32 2
  %507 = load i32, i32* %m_flags321, align 8
  %and322 = and i32 %507, 524288
  %tobool323 = icmp ne i32 %and322, 0
  br i1 %tobool323, label %if.then324, label %if.end334

if.then324:                                       ; preds = %lor.lhs.false320, %land.lhs.true313, %cond.end304
  %508 = load i8*, i8** %pSrc, align 8
  %509 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc325 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %509, i32 0, i32 32
  store i8* %508, i8** %m_pSrc325, align 8
  %510 = load i64, i64* %src_buf_left, align 8
  %511 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left326 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %511, i32 0, i32 33
  store i64 %510, i64* %m_src_buf_left326, align 8
  %512 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %512, i32 0)
  store i32 %call, i32* %n, align 4
  %cmp327 = icmp ne i32 %call, 0
  br i1 %cmp327, label %if.then329, label %if.end333

if.then329:                                       ; preds = %if.then324
  %513 = load i32, i32* %n, align 4
  %cmp330 = icmp slt i32 %513, 0
  %cond332 = select i1 %cmp330, i32 0, i32 1
  store i32 %cond332, i32* %retval, align 4
  br label %return

if.end333:                                        ; preds = %if.then324
  br label %if.end334

if.end334:                                        ; preds = %if.end333, %lor.lhs.false320, %lor.lhs.false310
  br label %while.cond

while.end335:                                     ; preds = %if.then146, %lor.end
  %514 = load i8*, i8** %pSrc, align 8
  %515 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc336 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %515, i32 0, i32 32
  store i8* %514, i8** %m_pSrc336, align 8
  %516 = load i64, i64* %src_buf_left, align 8
  %517 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_src_buf_left337 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %517, i32 0, i32 33
  store i64 %516, i64* %m_src_buf_left337, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end335, %if.then329
  %518 = load i32, i32* %retval, align 4
  ret i32 %518
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @tdefl_flush_block(%struct.tdefl_compressor* %d, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %flush.addr = alloca i32, align 4
  %saved_bit_buf = alloca i32, align 4
  %saved_bits_in = alloca i32, align 4
  %pSaved_output_buf = alloca i8*, align 8
  %comp_block_succeeded = alloca i32, align 4
  %n = alloca i32, align 4
  %use_raw_block = alloca i32, align 4
  %pOutput_buf_start = alloca i8*, align 8
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits55 = alloca i32, align 4
  %len56 = alloca i32, align 4
  %bits97 = alloca i32, align 4
  %len100 = alloca i32, align 4
  %i = alloca i32, align 4
  %bits172 = alloca i32, align 4
  %len173 = alloca i32, align 4
  %bits216 = alloca i32, align 4
  %len217 = alloca i32, align 4
  %bits261 = alloca i32, align 4
  %len264 = alloca i32, align 4
  %bits310 = alloca i32, align 4
  %len315 = alloca i32, align 4
  %bits373 = alloca i32, align 4
  %len374 = alloca i32, align 4
  %i420 = alloca i32, align 4
  %a = alloca i32, align 4
  %bits426 = alloca i32, align 4
  %len429 = alloca i32, align 4
  %i474 = alloca i32, align 4
  %z = alloca i32, align 4
  %bits476 = alloca i32, align 4
  %len477 = alloca i32, align 4
  %bits520 = alloca i32, align 4
  %len521 = alloca i32, align 4
  %bits567 = alloca i32, align 4
  %len569 = alloca i32, align 4
  %bytes_to_copy = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  store i32 0, i32* %comp_block_succeeded, align 4
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 2
  %1 = load i32, i32* %m_flags, align 8
  %and = and i32 %1, 524288
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %2, i32 0, i32 6
  %3 = load i32, i32* %m_lookahead_pos, align 4
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 15
  %5 = load i32, i32* %m_lz_code_buf_dict_pos, align 8
  %sub = sub i32 %3, %5
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 8
  %7 = load i32, i32* %m_dict_size, align 4
  %cmp1 = icmp ule i32 %sub, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  store i32 %land.ext, i32* %use_raw_block, align 4
  %9 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %9, i32 0, i32 0
  %10 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8
  %cmp2 = icmp eq i32 (i8*, i32, i8*)* %10, null
  br i1 %cmp2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %land.end
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %11, i32 0, i32 30
  %12 = load i64*, i64** %m_pOut_buf_size, align 8
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 34
  %15 = load i64, i64* %m_out_buf_ofs, align 8
  %sub3 = sub i64 %13, %15
  %cmp4 = icmp uge i64 %sub3, 85196
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %16, i32 0, i32 28
  %17 = load i8*, i8** %m_pOut_buf, align 8
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs5 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 34
  %19 = load i64, i64* %m_out_buf_ofs5, align 8
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %19
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %land.end
  %20 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %20, i32 0, i32 42
  %arraydecay = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %arraydecay, %cond.false ]
  store i8* %cond, i8** %pOutput_buf_start, align 8
  %21 = load i8*, i8** %pOutput_buf_start, align 8
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 11
  store i8* %21, i8** %m_pOutput_buf, align 8
  %23 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %23, i32 0, i32 11
  %24 = load i8*, i8** %m_pOutput_buf6, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %24, i64 85196
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr7, i64 -16
  %25 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %25, i32 0, i32 12
  store i8* %add.ptr8, i8** %m_pOutput_buf_end, align 8
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %26, i32 0, i32 22
  %27 = load i32, i32* %m_output_flush_remaining, align 4
  %tobool = icmp ne i32 %27, 0
  %lnot = xor i1 %tobool, true
  %lnot9 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot9 to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool10 = icmp ne i64 %conv, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %cond.end
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1243, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.63, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end13

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false12, %28
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 21
  store i32 0, i32* %m_output_flush_ofs, align 8
  %30 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining14 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %30, i32 0, i32 22
  store i32 0, i32* %m_output_flush_remaining14, align 4
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 10
  %32 = load i8*, i8** %m_pLZ_flags, align 8
  %33 = load i8, i8* %32, align 1
  %conv15 = zext i8 %33 to i32
  %34 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %34, i32 0, i32 13
  %35 = load i32, i32* %m_num_flags_left, align 8
  %shr = ashr i32 %conv15, %35
  %conv16 = trunc i32 %shr to i8
  %36 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags17 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %36, i32 0, i32 10
  %37 = load i8*, i8** %m_pLZ_flags17, align 8
  store i8 %conv16, i8* %37, align 1
  %38 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left18 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %38, i32 0, i32 13
  %39 = load i32, i32* %m_num_flags_left18, align 8
  %cmp19 = icmp eq i32 %39, 8
  %conv20 = zext i1 %cmp19 to i32
  %40 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %40, i32 0, i32 9
  %41 = load i8*, i8** %m_pLZ_code_buf, align 8
  %idx.ext = sext i32 %conv20 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr21 = getelementptr inbounds i8, i8* %41, i64 %idx.neg
  store i8* %add.ptr21, i8** %m_pLZ_code_buf, align 8
  %42 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags22 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %42, i32 0, i32 2
  %43 = load i32, i32* %m_flags22, align 8
  %and23 = and i32 %43, 4096
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true25, label %if.end95

land.lhs.true25:                                  ; preds = %cond.end13
  %44 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_block_index = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %44, i32 0, i32 24
  %45 = load i32, i32* %m_block_index, align 4
  %tobool26 = icmp ne i32 %45, 0
  br i1 %tobool26, label %if.end95, label %if.then

if.then:                                          ; preds = %land.lhs.true25
  br label %do.body

do.body:                                          ; preds = %if.then
  store i32 120, i32* %bits, align 4
  store i32 8, i32* %len, align 4
  %46 = load i32, i32* %bits, align 4
  %47 = load i32, i32* %len, align 4
  %shl = shl i32 1, %47
  %sub27 = sub i32 %shl, 1
  %cmp28 = icmp ule i32 %46, %sub27
  %lnot30 = xor i1 %cmp28, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  %conv32 = sext i32 %lnot.ext31 to i64
  %tobool33 = icmp ne i64 %conv32, 0
  br i1 %tobool33, label %cond.true34, label %cond.false35

cond.true34:                                      ; preds = %do.body
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1252, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end36

cond.false35:                                     ; preds = %do.body
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false35, %48
  %49 = load i32, i32* %bits, align 4
  %50 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %50, i32 0, i32 16
  %51 = load i32, i32* %m_bits_in, align 4
  %shl37 = shl i32 %49, %51
  %52 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %52, i32 0, i32 17
  %53 = load i32, i32* %m_bit_buffer, align 8
  %or = or i32 %53, %shl37
  store i32 %or, i32* %m_bit_buffer, align 8
  %54 = load i32, i32* %len, align 4
  %55 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in38 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %55, i32 0, i32 16
  %56 = load i32, i32* %m_bits_in38, align 4
  %add = add i32 %56, %54
  store i32 %add, i32* %m_bits_in38, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end36
  %57 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in39 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %57, i32 0, i32 16
  %58 = load i32, i32* %m_bits_in39, align 4
  %cmp40 = icmp uge i32 %58, 8
  br i1 %cmp40, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %59 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf42 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %59, i32 0, i32 11
  %60 = load i8*, i8** %m_pOutput_buf42, align 8
  %61 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end43 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %61, i32 0, i32 12
  %62 = load i8*, i8** %m_pOutput_buf_end43, align 8
  %cmp44 = icmp ult i8* %60, %62
  br i1 %cmp44, label %if.then46, label %if.end

if.then46:                                        ; preds = %while.body
  %63 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer47 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %63, i32 0, i32 17
  %64 = load i32, i32* %m_bit_buffer47, align 8
  %conv48 = trunc i32 %64 to i8
  %65 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf49 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %65, i32 0, i32 11
  %66 = load i8*, i8** %m_pOutput_buf49, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %66, i32 1
  store i8* %incdec.ptr, i8** %m_pOutput_buf49, align 8
  store i8 %conv48, i8* %66, align 1
  br label %if.end

if.end:                                           ; preds = %if.then46, %while.body
  %67 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer50 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %67, i32 0, i32 17
  %68 = load i32, i32* %m_bit_buffer50, align 8
  %shr51 = lshr i32 %68, 8
  store i32 %shr51, i32* %m_bit_buffer50, align 8
  %69 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in52 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %69, i32 0, i32 16
  %70 = load i32, i32* %m_bits_in52, align 4
  %sub53 = sub i32 %70, 8
  store i32 %sub53, i32* %m_bits_in52, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end

do.end:                                           ; preds = %while.end
  br label %do.body54

do.body54:                                        ; preds = %do.end
  store i32 1, i32* %bits55, align 4
  store i32 8, i32* %len56, align 4
  %71 = load i32, i32* %bits55, align 4
  %72 = load i32, i32* %len56, align 4
  %shl57 = shl i32 1, %72
  %sub58 = sub i32 %shl57, 1
  %cmp59 = icmp ule i32 %71, %sub58
  %lnot61 = xor i1 %cmp59, true
  %lnot.ext62 = zext i1 %lnot61 to i32
  %conv63 = sext i32 %lnot.ext62 to i64
  %tobool64 = icmp ne i64 %conv63, 0
  br i1 %tobool64, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %do.body54
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1253, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end67

cond.false66:                                     ; preds = %do.body54
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false66, %73
  %74 = load i32, i32* %bits55, align 4
  %75 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in68 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %75, i32 0, i32 16
  %76 = load i32, i32* %m_bits_in68, align 4
  %shl69 = shl i32 %74, %76
  %77 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer70 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %77, i32 0, i32 17
  %78 = load i32, i32* %m_bit_buffer70, align 8
  %or71 = or i32 %78, %shl69
  store i32 %or71, i32* %m_bit_buffer70, align 8
  %79 = load i32, i32* %len56, align 4
  %80 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in72 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %80, i32 0, i32 16
  %81 = load i32, i32* %m_bits_in72, align 4
  %add73 = add i32 %81, %79
  store i32 %add73, i32* %m_bits_in72, align 4
  br label %while.cond74

while.cond74:                                     ; preds = %if.end88, %cond.end67
  %82 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in75 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %82, i32 0, i32 16
  %83 = load i32, i32* %m_bits_in75, align 4
  %cmp76 = icmp uge i32 %83, 8
  br i1 %cmp76, label %while.body78, label %while.end93

while.body78:                                     ; preds = %while.cond74
  %84 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf79 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %84, i32 0, i32 11
  %85 = load i8*, i8** %m_pOutput_buf79, align 8
  %86 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end80 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %86, i32 0, i32 12
  %87 = load i8*, i8** %m_pOutput_buf_end80, align 8
  %cmp81 = icmp ult i8* %85, %87
  br i1 %cmp81, label %if.then83, label %if.end88

if.then83:                                        ; preds = %while.body78
  %88 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer84 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %88, i32 0, i32 17
  %89 = load i32, i32* %m_bit_buffer84, align 8
  %conv85 = trunc i32 %89 to i8
  %90 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf86 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %90, i32 0, i32 11
  %91 = load i8*, i8** %m_pOutput_buf86, align 8
  %incdec.ptr87 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr87, i8** %m_pOutput_buf86, align 8
  store i8 %conv85, i8* %91, align 1
  br label %if.end88

if.end88:                                         ; preds = %if.then83, %while.body78
  %92 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer89 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %92, i32 0, i32 17
  %93 = load i32, i32* %m_bit_buffer89, align 8
  %shr90 = lshr i32 %93, 8
  store i32 %shr90, i32* %m_bit_buffer89, align 8
  %94 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in91 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %94, i32 0, i32 16
  %95 = load i32, i32* %m_bits_in91, align 4
  %sub92 = sub i32 %95, 8
  store i32 %sub92, i32* %m_bits_in91, align 4
  br label %while.cond74

while.end93:                                      ; preds = %while.cond74
  br label %do.end94

do.end94:                                         ; preds = %while.end93
  br label %if.end95

if.end95:                                         ; preds = %do.end94, %land.lhs.true25, %cond.end13
  br label %do.body96

do.body96:                                        ; preds = %if.end95
  %96 = load i32, i32* %flush.addr, align 4
  %cmp98 = icmp eq i32 %96, 4
  %conv99 = zext i1 %cmp98 to i32
  store i32 %conv99, i32* %bits97, align 4
  store i32 1, i32* %len100, align 4
  %97 = load i32, i32* %bits97, align 4
  %98 = load i32, i32* %len100, align 4
  %shl101 = shl i32 1, %98
  %sub102 = sub i32 %shl101, 1
  %cmp103 = icmp ule i32 %97, %sub102
  %lnot105 = xor i1 %cmp103, true
  %lnot.ext106 = zext i1 %lnot105 to i32
  %conv107 = sext i32 %lnot.ext106 to i64
  %tobool108 = icmp ne i64 %conv107, 0
  br i1 %tobool108, label %cond.true109, label %cond.false110

cond.true109:                                     ; preds = %do.body96
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1256, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end111

cond.false110:                                    ; preds = %do.body96
  br label %cond.end111

cond.end111:                                      ; preds = %cond.false110, %99
  %100 = load i32, i32* %bits97, align 4
  %101 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in112 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %101, i32 0, i32 16
  %102 = load i32, i32* %m_bits_in112, align 4
  %shl113 = shl i32 %100, %102
  %103 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer114 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %103, i32 0, i32 17
  %104 = load i32, i32* %m_bit_buffer114, align 8
  %or115 = or i32 %104, %shl113
  store i32 %or115, i32* %m_bit_buffer114, align 8
  %105 = load i32, i32* %len100, align 4
  %106 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in116 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %106, i32 0, i32 16
  %107 = load i32, i32* %m_bits_in116, align 4
  %add117 = add i32 %107, %105
  store i32 %add117, i32* %m_bits_in116, align 4
  br label %while.cond118

while.cond118:                                    ; preds = %if.end132, %cond.end111
  %108 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in119 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %108, i32 0, i32 16
  %109 = load i32, i32* %m_bits_in119, align 4
  %cmp120 = icmp uge i32 %109, 8
  br i1 %cmp120, label %while.body122, label %while.end137

while.body122:                                    ; preds = %while.cond118
  %110 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf123 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %110, i32 0, i32 11
  %111 = load i8*, i8** %m_pOutput_buf123, align 8
  %112 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end124 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %112, i32 0, i32 12
  %113 = load i8*, i8** %m_pOutput_buf_end124, align 8
  %cmp125 = icmp ult i8* %111, %113
  br i1 %cmp125, label %if.then127, label %if.end132

if.then127:                                       ; preds = %while.body122
  %114 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer128 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %114, i32 0, i32 17
  %115 = load i32, i32* %m_bit_buffer128, align 8
  %conv129 = trunc i32 %115 to i8
  %116 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf130 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %116, i32 0, i32 11
  %117 = load i8*, i8** %m_pOutput_buf130, align 8
  %incdec.ptr131 = getelementptr inbounds i8, i8* %117, i32 1
  store i8* %incdec.ptr131, i8** %m_pOutput_buf130, align 8
  store i8 %conv129, i8* %117, align 1
  br label %if.end132

if.end132:                                        ; preds = %if.then127, %while.body122
  %118 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer133 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %118, i32 0, i32 17
  %119 = load i32, i32* %m_bit_buffer133, align 8
  %shr134 = lshr i32 %119, 8
  store i32 %shr134, i32* %m_bit_buffer133, align 8
  %120 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in135 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %120, i32 0, i32 16
  %121 = load i32, i32* %m_bits_in135, align 4
  %sub136 = sub i32 %121, 8
  store i32 %sub136, i32* %m_bits_in135, align 4
  br label %while.cond118

while.end137:                                     ; preds = %while.cond118
  br label %do.end138

do.end138:                                        ; preds = %while.end137
  %122 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf139 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %122, i32 0, i32 11
  %123 = load i8*, i8** %m_pOutput_buf139, align 8
  store i8* %123, i8** %pSaved_output_buf, align 8
  %124 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer140 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %124, i32 0, i32 17
  %125 = load i32, i32* %m_bit_buffer140, align 8
  store i32 %125, i32* %saved_bit_buf, align 4
  %126 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in141 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %126, i32 0, i32 16
  %127 = load i32, i32* %m_bits_in141, align 4
  store i32 %127, i32* %saved_bits_in, align 4
  %128 = load i32, i32* %use_raw_block, align 4
  %tobool142 = icmp ne i32 %128, 0
  br i1 %tobool142, label %if.end149, label %if.then143

if.then143:                                       ; preds = %do.end138
  %129 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %130 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags144 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %130, i32 0, i32 2
  %131 = load i32, i32* %m_flags144, align 8
  %and145 = and i32 %131, 262144
  %tobool146 = icmp ne i32 %and145, 0
  br i1 %tobool146, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then143
  %132 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %132, i32 0, i32 14
  %133 = load i32, i32* %m_total_lz_bytes, align 4
  %cmp147 = icmp ult i32 %133, 48
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then143
  %134 = phi i1 [ true, %if.then143 ], [ %cmp147, %lor.rhs ]
  %lor.ext = zext i1 %134 to i32
  %call = call i32 @tdefl_compress_block(%struct.tdefl_compressor* %129, i32 %lor.ext)
  store i32 %call, i32* %comp_block_succeeded, align 4
  br label %if.end149

if.end149:                                        ; preds = %lor.end, %do.end138
  %135 = load i32, i32* %use_raw_block, align 4
  %tobool150 = icmp ne i32 %135, 0
  br i1 %tobool150, label %land.lhs.true160, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end149
  %136 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes151 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %136, i32 0, i32 14
  %137 = load i32, i32* %m_total_lz_bytes151, align 4
  %tobool152 = icmp ne i32 %137, 0
  br i1 %tobool152, label %land.lhs.true153, label %if.else

land.lhs.true153:                                 ; preds = %lor.lhs.false
  %138 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf154 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %138, i32 0, i32 11
  %139 = load i8*, i8** %m_pOutput_buf154, align 8
  %140 = load i8*, i8** %pSaved_output_buf, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %139 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %140 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add155 = add nsw i64 %sub.ptr.sub, 1
  %141 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes156 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %141, i32 0, i32 14
  %142 = load i32, i32* %m_total_lz_bytes156, align 4
  %conv157 = zext i32 %142 to i64
  %cmp158 = icmp sge i64 %add155, %conv157
  br i1 %cmp158, label %land.lhs.true160, label %if.else

land.lhs.true160:                                 ; preds = %land.lhs.true153, %if.end149
  %143 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lookahead_pos161 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %143, i32 0, i32 6
  %144 = load i32, i32* %m_lookahead_pos161, align 4
  %145 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos162 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %145, i32 0, i32 15
  %146 = load i32, i32* %m_lz_code_buf_dict_pos162, align 8
  %sub163 = sub i32 %144, %146
  %147 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict_size164 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %147, i32 0, i32 8
  %148 = load i32, i32* %m_dict_size164, align 4
  %cmp165 = icmp ule i32 %sub163, %148
  br i1 %cmp165, label %if.then167, label %if.else

if.then167:                                       ; preds = %land.lhs.true160
  %149 = load i8*, i8** %pSaved_output_buf, align 8
  %150 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf168 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %150, i32 0, i32 11
  store i8* %149, i8** %m_pOutput_buf168, align 8
  %151 = load i32, i32* %saved_bit_buf, align 4
  %152 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer169 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %152, i32 0, i32 17
  store i32 %151, i32* %m_bit_buffer169, align 8
  %153 = load i32, i32* %saved_bits_in, align 4
  %154 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in170 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %154, i32 0, i32 16
  store i32 %153, i32* %m_bits_in170, align 4
  br label %do.body171

do.body171:                                       ; preds = %if.then167
  store i32 0, i32* %bits172, align 4
  store i32 2, i32* %len173, align 4
  %155 = load i32, i32* %bits172, align 4
  %156 = load i32, i32* %len173, align 4
  %shl174 = shl i32 1, %156
  %sub175 = sub i32 %shl174, 1
  %cmp176 = icmp ule i32 %155, %sub175
  %lnot178 = xor i1 %cmp176, true
  %lnot.ext179 = zext i1 %lnot178 to i32
  %conv180 = sext i32 %lnot.ext179 to i64
  %tobool181 = icmp ne i64 %conv180, 0
  br i1 %tobool181, label %cond.true182, label %cond.false183

cond.true182:                                     ; preds = %do.body171
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1272, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end184

cond.false183:                                    ; preds = %do.body171
  br label %cond.end184

cond.end184:                                      ; preds = %cond.false183, %157
  %158 = load i32, i32* %bits172, align 4
  %159 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in185 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %159, i32 0, i32 16
  %160 = load i32, i32* %m_bits_in185, align 4
  %shl186 = shl i32 %158, %160
  %161 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer187 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %161, i32 0, i32 17
  %162 = load i32, i32* %m_bit_buffer187, align 8
  %or188 = or i32 %162, %shl186
  store i32 %or188, i32* %m_bit_buffer187, align 8
  %163 = load i32, i32* %len173, align 4
  %164 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in189 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %164, i32 0, i32 16
  %165 = load i32, i32* %m_bits_in189, align 4
  %add190 = add i32 %165, %163
  store i32 %add190, i32* %m_bits_in189, align 4
  br label %while.cond191

while.cond191:                                    ; preds = %if.end205, %cond.end184
  %166 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in192 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %166, i32 0, i32 16
  %167 = load i32, i32* %m_bits_in192, align 4
  %cmp193 = icmp uge i32 %167, 8
  br i1 %cmp193, label %while.body195, label %while.end210

while.body195:                                    ; preds = %while.cond191
  %168 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf196 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %168, i32 0, i32 11
  %169 = load i8*, i8** %m_pOutput_buf196, align 8
  %170 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end197 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %170, i32 0, i32 12
  %171 = load i8*, i8** %m_pOutput_buf_end197, align 8
  %cmp198 = icmp ult i8* %169, %171
  br i1 %cmp198, label %if.then200, label %if.end205

if.then200:                                       ; preds = %while.body195
  %172 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer201 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %172, i32 0, i32 17
  %173 = load i32, i32* %m_bit_buffer201, align 8
  %conv202 = trunc i32 %173 to i8
  %174 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf203 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %174, i32 0, i32 11
  %175 = load i8*, i8** %m_pOutput_buf203, align 8
  %incdec.ptr204 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %incdec.ptr204, i8** %m_pOutput_buf203, align 8
  store i8 %conv202, i8* %175, align 1
  br label %if.end205

if.end205:                                        ; preds = %if.then200, %while.body195
  %176 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer206 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %176, i32 0, i32 17
  %177 = load i32, i32* %m_bit_buffer206, align 8
  %shr207 = lshr i32 %177, 8
  store i32 %shr207, i32* %m_bit_buffer206, align 8
  %178 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in208 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %178, i32 0, i32 16
  %179 = load i32, i32* %m_bits_in208, align 4
  %sub209 = sub i32 %179, 8
  store i32 %sub209, i32* %m_bits_in208, align 4
  br label %while.cond191

while.end210:                                     ; preds = %while.cond191
  br label %do.end211

do.end211:                                        ; preds = %while.end210
  %180 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in212 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %180, i32 0, i32 16
  %181 = load i32, i32* %m_bits_in212, align 4
  %tobool213 = icmp ne i32 %181, 0
  br i1 %tobool213, label %if.then214, label %if.end258

if.then214:                                       ; preds = %do.end211
  br label %do.body215

do.body215:                                       ; preds = %if.then214
  store i32 0, i32* %bits216, align 4
  %182 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in218 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %182, i32 0, i32 16
  %183 = load i32, i32* %m_bits_in218, align 4
  %sub219 = sub i32 8, %183
  store i32 %sub219, i32* %len217, align 4
  %184 = load i32, i32* %bits216, align 4
  %185 = load i32, i32* %len217, align 4
  %shl220 = shl i32 1, %185
  %sub221 = sub i32 %shl220, 1
  %cmp222 = icmp ule i32 %184, %sub221
  %lnot224 = xor i1 %cmp222, true
  %lnot.ext225 = zext i1 %lnot224 to i32
  %conv226 = sext i32 %lnot.ext225 to i64
  %tobool227 = icmp ne i64 %conv226, 0
  br i1 %tobool227, label %cond.true228, label %cond.false229

cond.true228:                                     ; preds = %do.body215
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1275, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end230

cond.false229:                                    ; preds = %do.body215
  br label %cond.end230

cond.end230:                                      ; preds = %cond.false229, %186
  %187 = load i32, i32* %bits216, align 4
  %188 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in231 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %188, i32 0, i32 16
  %189 = load i32, i32* %m_bits_in231, align 4
  %shl232 = shl i32 %187, %189
  %190 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer233 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %190, i32 0, i32 17
  %191 = load i32, i32* %m_bit_buffer233, align 8
  %or234 = or i32 %191, %shl232
  store i32 %or234, i32* %m_bit_buffer233, align 8
  %192 = load i32, i32* %len217, align 4
  %193 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in235 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %193, i32 0, i32 16
  %194 = load i32, i32* %m_bits_in235, align 4
  %add236 = add i32 %194, %192
  store i32 %add236, i32* %m_bits_in235, align 4
  br label %while.cond237

while.cond237:                                    ; preds = %if.end251, %cond.end230
  %195 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in238 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %195, i32 0, i32 16
  %196 = load i32, i32* %m_bits_in238, align 4
  %cmp239 = icmp uge i32 %196, 8
  br i1 %cmp239, label %while.body241, label %while.end256

while.body241:                                    ; preds = %while.cond237
  %197 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf242 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %197, i32 0, i32 11
  %198 = load i8*, i8** %m_pOutput_buf242, align 8
  %199 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end243 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %199, i32 0, i32 12
  %200 = load i8*, i8** %m_pOutput_buf_end243, align 8
  %cmp244 = icmp ult i8* %198, %200
  br i1 %cmp244, label %if.then246, label %if.end251

if.then246:                                       ; preds = %while.body241
  %201 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer247 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %201, i32 0, i32 17
  %202 = load i32, i32* %m_bit_buffer247, align 8
  %conv248 = trunc i32 %202 to i8
  %203 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf249 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %203, i32 0, i32 11
  %204 = load i8*, i8** %m_pOutput_buf249, align 8
  %incdec.ptr250 = getelementptr inbounds i8, i8* %204, i32 1
  store i8* %incdec.ptr250, i8** %m_pOutput_buf249, align 8
  store i8 %conv248, i8* %204, align 1
  br label %if.end251

if.end251:                                        ; preds = %if.then246, %while.body241
  %205 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer252 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %205, i32 0, i32 17
  %206 = load i32, i32* %m_bit_buffer252, align 8
  %shr253 = lshr i32 %206, 8
  store i32 %shr253, i32* %m_bit_buffer252, align 8
  %207 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in254 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %207, i32 0, i32 16
  %208 = load i32, i32* %m_bits_in254, align 4
  %sub255 = sub i32 %208, 8
  store i32 %sub255, i32* %m_bits_in254, align 4
  br label %while.cond237

while.end256:                                     ; preds = %while.cond237
  br label %do.end257

do.end257:                                        ; preds = %while.end256
  br label %if.end258

if.end258:                                        ; preds = %do.end257, %do.end211
  store i32 2, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end258
  %209 = load i32, i32* %i, align 4
  %tobool259 = icmp ne i32 %209, 0
  br i1 %tobool259, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body260

do.body260:                                       ; preds = %for.body
  %210 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes262 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %210, i32 0, i32 14
  %211 = load i32, i32* %m_total_lz_bytes262, align 4
  %and263 = and i32 %211, 65535
  store i32 %and263, i32* %bits261, align 4
  store i32 16, i32* %len264, align 4
  %212 = load i32, i32* %bits261, align 4
  %213 = load i32, i32* %len264, align 4
  %shl265 = shl i32 1, %213
  %sub266 = sub i32 %shl265, 1
  %cmp267 = icmp ule i32 %212, %sub266
  %lnot269 = xor i1 %cmp267, true
  %lnot.ext270 = zext i1 %lnot269 to i32
  %conv271 = sext i32 %lnot.ext270 to i64
  %tobool272 = icmp ne i64 %conv271, 0
  br i1 %tobool272, label %cond.true273, label %cond.false274

cond.true273:                                     ; preds = %do.body260
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1279, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end275

cond.false274:                                    ; preds = %do.body260
  br label %cond.end275

cond.end275:                                      ; preds = %cond.false274, %214
  %215 = load i32, i32* %bits261, align 4
  %216 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in276 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %216, i32 0, i32 16
  %217 = load i32, i32* %m_bits_in276, align 4
  %shl277 = shl i32 %215, %217
  %218 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer278 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %218, i32 0, i32 17
  %219 = load i32, i32* %m_bit_buffer278, align 8
  %or279 = or i32 %219, %shl277
  store i32 %or279, i32* %m_bit_buffer278, align 8
  %220 = load i32, i32* %len264, align 4
  %221 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in280 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %221, i32 0, i32 16
  %222 = load i32, i32* %m_bits_in280, align 4
  %add281 = add i32 %222, %220
  store i32 %add281, i32* %m_bits_in280, align 4
  br label %while.cond282

while.cond282:                                    ; preds = %if.end296, %cond.end275
  %223 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in283 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %223, i32 0, i32 16
  %224 = load i32, i32* %m_bits_in283, align 4
  %cmp284 = icmp uge i32 %224, 8
  br i1 %cmp284, label %while.body286, label %while.end301

while.body286:                                    ; preds = %while.cond282
  %225 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf287 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %225, i32 0, i32 11
  %226 = load i8*, i8** %m_pOutput_buf287, align 8
  %227 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end288 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %227, i32 0, i32 12
  %228 = load i8*, i8** %m_pOutput_buf_end288, align 8
  %cmp289 = icmp ult i8* %226, %228
  br i1 %cmp289, label %if.then291, label %if.end296

if.then291:                                       ; preds = %while.body286
  %229 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer292 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %229, i32 0, i32 17
  %230 = load i32, i32* %m_bit_buffer292, align 8
  %conv293 = trunc i32 %230 to i8
  %231 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf294 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %231, i32 0, i32 11
  %232 = load i8*, i8** %m_pOutput_buf294, align 8
  %incdec.ptr295 = getelementptr inbounds i8, i8* %232, i32 1
  store i8* %incdec.ptr295, i8** %m_pOutput_buf294, align 8
  store i8 %conv293, i8* %232, align 1
  br label %if.end296

if.end296:                                        ; preds = %if.then291, %while.body286
  %233 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer297 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %233, i32 0, i32 17
  %234 = load i32, i32* %m_bit_buffer297, align 8
  %shr298 = lshr i32 %234, 8
  store i32 %shr298, i32* %m_bit_buffer297, align 8
  %235 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in299 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %235, i32 0, i32 16
  %236 = load i32, i32* %m_bits_in299, align 4
  %sub300 = sub i32 %236, 8
  store i32 %sub300, i32* %m_bits_in299, align 4
  br label %while.cond282

while.end301:                                     ; preds = %while.cond282
  br label %do.end302

do.end302:                                        ; preds = %while.end301
  br label %for.inc

for.inc:                                          ; preds = %do.end302
  %237 = load i32, i32* %i, align 4
  %dec = add i32 %237, -1
  store i32 %dec, i32* %i, align 4
  %238 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes303 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %238, i32 0, i32 14
  %239 = load i32, i32* %m_total_lz_bytes303, align 4
  %xor = xor i32 %239, 65535
  store i32 %xor, i32* %m_total_lz_bytes303, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond304

for.cond304:                                      ; preds = %for.inc354, %for.end
  %240 = load i32, i32* %i, align 4
  %241 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes305 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %241, i32 0, i32 14
  %242 = load i32, i32* %m_total_lz_bytes305, align 4
  %cmp306 = icmp ult i32 %240, %242
  br i1 %cmp306, label %for.body308, label %for.end355

for.body308:                                      ; preds = %for.cond304
  br label %do.body309

do.body309:                                       ; preds = %for.body308
  %243 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %243, i32 0, i32 35
  %244 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos311 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %244, i32 0, i32 15
  %245 = load i32, i32* %m_lz_code_buf_dict_pos311, align 8
  %246 = load i32, i32* %i, align 4
  %add312 = add i32 %245, %246
  %and313 = and i32 %add312, 32767
  %idxprom = zext i32 %and313 to i64
  %arrayidx = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict, i64 0, i64 %idxprom
  %247 = load i8, i8* %arrayidx, align 1
  %conv314 = zext i8 %247 to i32
  store i32 %conv314, i32* %bits310, align 4
  store i32 8, i32* %len315, align 4
  %248 = load i32, i32* %bits310, align 4
  %249 = load i32, i32* %len315, align 4
  %shl316 = shl i32 1, %249
  %sub317 = sub i32 %shl316, 1
  %cmp318 = icmp ule i32 %248, %sub317
  %lnot320 = xor i1 %cmp318, true
  %lnot.ext321 = zext i1 %lnot320 to i32
  %conv322 = sext i32 %lnot.ext321 to i64
  %tobool323 = icmp ne i64 %conv322, 0
  br i1 %tobool323, label %cond.true324, label %cond.false325

cond.true324:                                     ; preds = %do.body309
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1283, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end326

cond.false325:                                    ; preds = %do.body309
  br label %cond.end326

cond.end326:                                      ; preds = %cond.false325, %250
  %251 = load i32, i32* %bits310, align 4
  %252 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in327 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %252, i32 0, i32 16
  %253 = load i32, i32* %m_bits_in327, align 4
  %shl328 = shl i32 %251, %253
  %254 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer329 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %254, i32 0, i32 17
  %255 = load i32, i32* %m_bit_buffer329, align 8
  %or330 = or i32 %255, %shl328
  store i32 %or330, i32* %m_bit_buffer329, align 8
  %256 = load i32, i32* %len315, align 4
  %257 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in331 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %257, i32 0, i32 16
  %258 = load i32, i32* %m_bits_in331, align 4
  %add332 = add i32 %258, %256
  store i32 %add332, i32* %m_bits_in331, align 4
  br label %while.cond333

while.cond333:                                    ; preds = %if.end347, %cond.end326
  %259 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in334 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %259, i32 0, i32 16
  %260 = load i32, i32* %m_bits_in334, align 4
  %cmp335 = icmp uge i32 %260, 8
  br i1 %cmp335, label %while.body337, label %while.end352

while.body337:                                    ; preds = %while.cond333
  %261 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf338 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %261, i32 0, i32 11
  %262 = load i8*, i8** %m_pOutput_buf338, align 8
  %263 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end339 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %263, i32 0, i32 12
  %264 = load i8*, i8** %m_pOutput_buf_end339, align 8
  %cmp340 = icmp ult i8* %262, %264
  br i1 %cmp340, label %if.then342, label %if.end347

if.then342:                                       ; preds = %while.body337
  %265 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer343 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %265, i32 0, i32 17
  %266 = load i32, i32* %m_bit_buffer343, align 8
  %conv344 = trunc i32 %266 to i8
  %267 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf345 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %267, i32 0, i32 11
  %268 = load i8*, i8** %m_pOutput_buf345, align 8
  %incdec.ptr346 = getelementptr inbounds i8, i8* %268, i32 1
  store i8* %incdec.ptr346, i8** %m_pOutput_buf345, align 8
  store i8 %conv344, i8* %268, align 1
  br label %if.end347

if.end347:                                        ; preds = %if.then342, %while.body337
  %269 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer348 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %269, i32 0, i32 17
  %270 = load i32, i32* %m_bit_buffer348, align 8
  %shr349 = lshr i32 %270, 8
  store i32 %shr349, i32* %m_bit_buffer348, align 8
  %271 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in350 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %271, i32 0, i32 16
  %272 = load i32, i32* %m_bits_in350, align 4
  %sub351 = sub i32 %272, 8
  store i32 %sub351, i32* %m_bits_in350, align 4
  br label %while.cond333

while.end352:                                     ; preds = %while.cond333
  br label %do.end353

do.end353:                                        ; preds = %while.end352
  br label %for.inc354

for.inc354:                                       ; preds = %do.end353
  %273 = load i32, i32* %i, align 4
  %inc = add i32 %273, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond304

for.end355:                                       ; preds = %for.cond304
  br label %if.end363

if.else:                                          ; preds = %land.lhs.true160, %land.lhs.true153, %lor.lhs.false
  %274 = load i32, i32* %comp_block_succeeded, align 4
  %tobool356 = icmp ne i32 %274, 0
  br i1 %tobool356, label %if.end362, label %if.then357

if.then357:                                       ; preds = %if.else
  %275 = load i8*, i8** %pSaved_output_buf, align 8
  %276 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf358 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %276, i32 0, i32 11
  store i8* %275, i8** %m_pOutput_buf358, align 8
  %277 = load i32, i32* %saved_bit_buf, align 4
  %278 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer359 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %278, i32 0, i32 17
  store i32 %277, i32* %m_bit_buffer359, align 8
  %279 = load i32, i32* %saved_bits_in, align 4
  %280 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in360 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %280, i32 0, i32 16
  store i32 %279, i32* %m_bits_in360, align 4
  %281 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call361 = call i32 @tdefl_compress_block(%struct.tdefl_compressor* %281, i32 1)
  br label %if.end362

if.end362:                                        ; preds = %if.then357, %if.else
  br label %if.end363

if.end363:                                        ; preds = %if.end362, %for.end355
  %282 = load i32, i32* %flush.addr, align 4
  %tobool364 = icmp ne i32 %282, 0
  br i1 %tobool364, label %if.then365, label %if.end613

if.then365:                                       ; preds = %if.end363
  %283 = load i32, i32* %flush.addr, align 4
  %cmp366 = icmp eq i32 %283, 4
  br i1 %cmp366, label %if.then368, label %if.else473

if.then368:                                       ; preds = %if.then365
  %284 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in369 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %284, i32 0, i32 16
  %285 = load i32, i32* %m_bits_in369, align 4
  %tobool370 = icmp ne i32 %285, 0
  br i1 %tobool370, label %if.then371, label %if.end415

if.then371:                                       ; preds = %if.then368
  br label %do.body372

do.body372:                                       ; preds = %if.then371
  store i32 0, i32* %bits373, align 4
  %286 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in375 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %286, i32 0, i32 16
  %287 = load i32, i32* %m_bits_in375, align 4
  %sub376 = sub i32 8, %287
  store i32 %sub376, i32* %len374, align 4
  %288 = load i32, i32* %bits373, align 4
  %289 = load i32, i32* %len374, align 4
  %shl377 = shl i32 1, %289
  %sub378 = sub i32 %shl377, 1
  %cmp379 = icmp ule i32 %288, %sub378
  %lnot381 = xor i1 %cmp379, true
  %lnot.ext382 = zext i1 %lnot381 to i32
  %conv383 = sext i32 %lnot.ext382 to i64
  %tobool384 = icmp ne i64 %conv383, 0
  br i1 %tobool384, label %cond.true385, label %cond.false386

cond.true385:                                     ; preds = %do.body372
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1300, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end387

cond.false386:                                    ; preds = %do.body372
  br label %cond.end387

cond.end387:                                      ; preds = %cond.false386, %290
  %291 = load i32, i32* %bits373, align 4
  %292 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in388 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %292, i32 0, i32 16
  %293 = load i32, i32* %m_bits_in388, align 4
  %shl389 = shl i32 %291, %293
  %294 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer390 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %294, i32 0, i32 17
  %295 = load i32, i32* %m_bit_buffer390, align 8
  %or391 = or i32 %295, %shl389
  store i32 %or391, i32* %m_bit_buffer390, align 8
  %296 = load i32, i32* %len374, align 4
  %297 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in392 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %297, i32 0, i32 16
  %298 = load i32, i32* %m_bits_in392, align 4
  %add393 = add i32 %298, %296
  store i32 %add393, i32* %m_bits_in392, align 4
  br label %while.cond394

while.cond394:                                    ; preds = %if.end408, %cond.end387
  %299 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in395 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %299, i32 0, i32 16
  %300 = load i32, i32* %m_bits_in395, align 4
  %cmp396 = icmp uge i32 %300, 8
  br i1 %cmp396, label %while.body398, label %while.end413

while.body398:                                    ; preds = %while.cond394
  %301 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf399 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %301, i32 0, i32 11
  %302 = load i8*, i8** %m_pOutput_buf399, align 8
  %303 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end400 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %303, i32 0, i32 12
  %304 = load i8*, i8** %m_pOutput_buf_end400, align 8
  %cmp401 = icmp ult i8* %302, %304
  br i1 %cmp401, label %if.then403, label %if.end408

if.then403:                                       ; preds = %while.body398
  %305 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer404 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %305, i32 0, i32 17
  %306 = load i32, i32* %m_bit_buffer404, align 8
  %conv405 = trunc i32 %306 to i8
  %307 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf406 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %307, i32 0, i32 11
  %308 = load i8*, i8** %m_pOutput_buf406, align 8
  %incdec.ptr407 = getelementptr inbounds i8, i8* %308, i32 1
  store i8* %incdec.ptr407, i8** %m_pOutput_buf406, align 8
  store i8 %conv405, i8* %308, align 1
  br label %if.end408

if.end408:                                        ; preds = %if.then403, %while.body398
  %309 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer409 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %309, i32 0, i32 17
  %310 = load i32, i32* %m_bit_buffer409, align 8
  %shr410 = lshr i32 %310, 8
  store i32 %shr410, i32* %m_bit_buffer409, align 8
  %311 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in411 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %311, i32 0, i32 16
  %312 = load i32, i32* %m_bits_in411, align 4
  %sub412 = sub i32 %312, 8
  store i32 %sub412, i32* %m_bits_in411, align 4
  br label %while.cond394

while.end413:                                     ; preds = %while.cond394
  br label %do.end414

do.end414:                                        ; preds = %while.end413
  br label %if.end415

if.end415:                                        ; preds = %do.end414, %if.then368
  %313 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_flags416 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %313, i32 0, i32 2
  %314 = load i32, i32* %m_flags416, align 8
  %and417 = and i32 %314, 4096
  %tobool418 = icmp ne i32 %and417, 0
  br i1 %tobool418, label %if.then419, label %if.end472

if.then419:                                       ; preds = %if.end415
  %315 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %315, i32 0, i32 5
  %316 = load i32, i32* %m_adler32, align 8
  store i32 %316, i32* %a, align 4
  store i32 0, i32* %i420, align 4
  br label %for.cond421

for.cond421:                                      ; preds = %for.inc469, %if.then419
  %317 = load i32, i32* %i420, align 4
  %cmp422 = icmp ult i32 %317, 4
  br i1 %cmp422, label %for.body424, label %for.end471

for.body424:                                      ; preds = %for.cond421
  br label %do.body425

do.body425:                                       ; preds = %for.body424
  %318 = load i32, i32* %a, align 4
  %shr427 = lshr i32 %318, 24
  %and428 = and i32 %shr427, 255
  store i32 %and428, i32* %bits426, align 4
  store i32 8, i32* %len429, align 4
  %319 = load i32, i32* %bits426, align 4
  %320 = load i32, i32* %len429, align 4
  %shl430 = shl i32 1, %320
  %sub431 = sub i32 %shl430, 1
  %cmp432 = icmp ule i32 %319, %sub431
  %lnot434 = xor i1 %cmp432, true
  %lnot.ext435 = zext i1 %lnot434 to i32
  %conv436 = sext i32 %lnot.ext435 to i64
  %tobool437 = icmp ne i64 %conv436, 0
  br i1 %tobool437, label %cond.true438, label %cond.false439

cond.true438:                                     ; preds = %do.body425
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1307, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end440

cond.false439:                                    ; preds = %do.body425
  br label %cond.end440

cond.end440:                                      ; preds = %cond.false439, %321
  %322 = load i32, i32* %bits426, align 4
  %323 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in441 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %323, i32 0, i32 16
  %324 = load i32, i32* %m_bits_in441, align 4
  %shl442 = shl i32 %322, %324
  %325 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer443 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %325, i32 0, i32 17
  %326 = load i32, i32* %m_bit_buffer443, align 8
  %or444 = or i32 %326, %shl442
  store i32 %or444, i32* %m_bit_buffer443, align 8
  %327 = load i32, i32* %len429, align 4
  %328 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in445 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %328, i32 0, i32 16
  %329 = load i32, i32* %m_bits_in445, align 4
  %add446 = add i32 %329, %327
  store i32 %add446, i32* %m_bits_in445, align 4
  br label %while.cond447

while.cond447:                                    ; preds = %if.end461, %cond.end440
  %330 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in448 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %330, i32 0, i32 16
  %331 = load i32, i32* %m_bits_in448, align 4
  %cmp449 = icmp uge i32 %331, 8
  br i1 %cmp449, label %while.body451, label %while.end466

while.body451:                                    ; preds = %while.cond447
  %332 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf452 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %332, i32 0, i32 11
  %333 = load i8*, i8** %m_pOutput_buf452, align 8
  %334 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end453 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %334, i32 0, i32 12
  %335 = load i8*, i8** %m_pOutput_buf_end453, align 8
  %cmp454 = icmp ult i8* %333, %335
  br i1 %cmp454, label %if.then456, label %if.end461

if.then456:                                       ; preds = %while.body451
  %336 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer457 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %336, i32 0, i32 17
  %337 = load i32, i32* %m_bit_buffer457, align 8
  %conv458 = trunc i32 %337 to i8
  %338 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf459 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %338, i32 0, i32 11
  %339 = load i8*, i8** %m_pOutput_buf459, align 8
  %incdec.ptr460 = getelementptr inbounds i8, i8* %339, i32 1
  store i8* %incdec.ptr460, i8** %m_pOutput_buf459, align 8
  store i8 %conv458, i8* %339, align 1
  br label %if.end461

if.end461:                                        ; preds = %if.then456, %while.body451
  %340 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer462 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %340, i32 0, i32 17
  %341 = load i32, i32* %m_bit_buffer462, align 8
  %shr463 = lshr i32 %341, 8
  store i32 %shr463, i32* %m_bit_buffer462, align 8
  %342 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in464 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %342, i32 0, i32 16
  %343 = load i32, i32* %m_bits_in464, align 4
  %sub465 = sub i32 %343, 8
  store i32 %sub465, i32* %m_bits_in464, align 4
  br label %while.cond447

while.end466:                                     ; preds = %while.cond447
  br label %do.end467

do.end467:                                        ; preds = %while.end466
  %344 = load i32, i32* %a, align 4
  %shl468 = shl i32 %344, 8
  store i32 %shl468, i32* %a, align 4
  br label %for.inc469

for.inc469:                                       ; preds = %do.end467
  %345 = load i32, i32* %i420, align 4
  %inc470 = add i32 %345, 1
  store i32 %inc470, i32* %i420, align 4
  br label %for.cond421

for.end471:                                       ; preds = %for.cond421
  br label %if.end472

if.end472:                                        ; preds = %for.end471, %if.end415
  br label %if.end612

if.else473:                                       ; preds = %if.then365
  store i32 0, i32* %z, align 4
  br label %do.body475

do.body475:                                       ; preds = %if.else473
  store i32 0, i32* %bits476, align 4
  store i32 3, i32* %len477, align 4
  %346 = load i32, i32* %bits476, align 4
  %347 = load i32, i32* %len477, align 4
  %shl478 = shl i32 1, %347
  %sub479 = sub i32 %shl478, 1
  %cmp480 = icmp ule i32 %346, %sub479
  %lnot482 = xor i1 %cmp480, true
  %lnot.ext483 = zext i1 %lnot482 to i32
  %conv484 = sext i32 %lnot.ext483 to i64
  %tobool485 = icmp ne i64 %conv484, 0
  br i1 %tobool485, label %cond.true486, label %cond.false487

cond.true486:                                     ; preds = %do.body475
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1315, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end488

cond.false487:                                    ; preds = %do.body475
  br label %cond.end488

cond.end488:                                      ; preds = %cond.false487, %348
  %349 = load i32, i32* %bits476, align 4
  %350 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in489 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %350, i32 0, i32 16
  %351 = load i32, i32* %m_bits_in489, align 4
  %shl490 = shl i32 %349, %351
  %352 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer491 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %352, i32 0, i32 17
  %353 = load i32, i32* %m_bit_buffer491, align 8
  %or492 = or i32 %353, %shl490
  store i32 %or492, i32* %m_bit_buffer491, align 8
  %354 = load i32, i32* %len477, align 4
  %355 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in493 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %355, i32 0, i32 16
  %356 = load i32, i32* %m_bits_in493, align 4
  %add494 = add i32 %356, %354
  store i32 %add494, i32* %m_bits_in493, align 4
  br label %while.cond495

while.cond495:                                    ; preds = %if.end509, %cond.end488
  %357 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in496 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %357, i32 0, i32 16
  %358 = load i32, i32* %m_bits_in496, align 4
  %cmp497 = icmp uge i32 %358, 8
  br i1 %cmp497, label %while.body499, label %while.end514

while.body499:                                    ; preds = %while.cond495
  %359 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf500 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %359, i32 0, i32 11
  %360 = load i8*, i8** %m_pOutput_buf500, align 8
  %361 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end501 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %361, i32 0, i32 12
  %362 = load i8*, i8** %m_pOutput_buf_end501, align 8
  %cmp502 = icmp ult i8* %360, %362
  br i1 %cmp502, label %if.then504, label %if.end509

if.then504:                                       ; preds = %while.body499
  %363 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer505 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %363, i32 0, i32 17
  %364 = load i32, i32* %m_bit_buffer505, align 8
  %conv506 = trunc i32 %364 to i8
  %365 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf507 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %365, i32 0, i32 11
  %366 = load i8*, i8** %m_pOutput_buf507, align 8
  %incdec.ptr508 = getelementptr inbounds i8, i8* %366, i32 1
  store i8* %incdec.ptr508, i8** %m_pOutput_buf507, align 8
  store i8 %conv506, i8* %366, align 1
  br label %if.end509

if.end509:                                        ; preds = %if.then504, %while.body499
  %367 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer510 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %367, i32 0, i32 17
  %368 = load i32, i32* %m_bit_buffer510, align 8
  %shr511 = lshr i32 %368, 8
  store i32 %shr511, i32* %m_bit_buffer510, align 8
  %369 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in512 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %369, i32 0, i32 16
  %370 = load i32, i32* %m_bits_in512, align 4
  %sub513 = sub i32 %370, 8
  store i32 %sub513, i32* %m_bits_in512, align 4
  br label %while.cond495

while.end514:                                     ; preds = %while.cond495
  br label %do.end515

do.end515:                                        ; preds = %while.end514
  %371 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in516 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %371, i32 0, i32 16
  %372 = load i32, i32* %m_bits_in516, align 4
  %tobool517 = icmp ne i32 %372, 0
  br i1 %tobool517, label %if.then518, label %if.end562

if.then518:                                       ; preds = %do.end515
  br label %do.body519

do.body519:                                       ; preds = %if.then518
  store i32 0, i32* %bits520, align 4
  %373 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in522 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %373, i32 0, i32 16
  %374 = load i32, i32* %m_bits_in522, align 4
  %sub523 = sub i32 8, %374
  store i32 %sub523, i32* %len521, align 4
  %375 = load i32, i32* %bits520, align 4
  %376 = load i32, i32* %len521, align 4
  %shl524 = shl i32 1, %376
  %sub525 = sub i32 %shl524, 1
  %cmp526 = icmp ule i32 %375, %sub525
  %lnot528 = xor i1 %cmp526, true
  %lnot.ext529 = zext i1 %lnot528 to i32
  %conv530 = sext i32 %lnot.ext529 to i64
  %tobool531 = icmp ne i64 %conv530, 0
  br i1 %tobool531, label %cond.true532, label %cond.false533

cond.true532:                                     ; preds = %do.body519
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1318, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end534

cond.false533:                                    ; preds = %do.body519
  br label %cond.end534

cond.end534:                                      ; preds = %cond.false533, %377
  %378 = load i32, i32* %bits520, align 4
  %379 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in535 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %379, i32 0, i32 16
  %380 = load i32, i32* %m_bits_in535, align 4
  %shl536 = shl i32 %378, %380
  %381 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer537 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %381, i32 0, i32 17
  %382 = load i32, i32* %m_bit_buffer537, align 8
  %or538 = or i32 %382, %shl536
  store i32 %or538, i32* %m_bit_buffer537, align 8
  %383 = load i32, i32* %len521, align 4
  %384 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in539 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %384, i32 0, i32 16
  %385 = load i32, i32* %m_bits_in539, align 4
  %add540 = add i32 %385, %383
  store i32 %add540, i32* %m_bits_in539, align 4
  br label %while.cond541

while.cond541:                                    ; preds = %if.end555, %cond.end534
  %386 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in542 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %386, i32 0, i32 16
  %387 = load i32, i32* %m_bits_in542, align 4
  %cmp543 = icmp uge i32 %387, 8
  br i1 %cmp543, label %while.body545, label %while.end560

while.body545:                                    ; preds = %while.cond541
  %388 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf546 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %388, i32 0, i32 11
  %389 = load i8*, i8** %m_pOutput_buf546, align 8
  %390 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end547 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %390, i32 0, i32 12
  %391 = load i8*, i8** %m_pOutput_buf_end547, align 8
  %cmp548 = icmp ult i8* %389, %391
  br i1 %cmp548, label %if.then550, label %if.end555

if.then550:                                       ; preds = %while.body545
  %392 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer551 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %392, i32 0, i32 17
  %393 = load i32, i32* %m_bit_buffer551, align 8
  %conv552 = trunc i32 %393 to i8
  %394 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf553 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %394, i32 0, i32 11
  %395 = load i8*, i8** %m_pOutput_buf553, align 8
  %incdec.ptr554 = getelementptr inbounds i8, i8* %395, i32 1
  store i8* %incdec.ptr554, i8** %m_pOutput_buf553, align 8
  store i8 %conv552, i8* %395, align 1
  br label %if.end555

if.end555:                                        ; preds = %if.then550, %while.body545
  %396 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer556 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %396, i32 0, i32 17
  %397 = load i32, i32* %m_bit_buffer556, align 8
  %shr557 = lshr i32 %397, 8
  store i32 %shr557, i32* %m_bit_buffer556, align 8
  %398 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in558 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %398, i32 0, i32 16
  %399 = load i32, i32* %m_bits_in558, align 4
  %sub559 = sub i32 %399, 8
  store i32 %sub559, i32* %m_bits_in558, align 4
  br label %while.cond541

while.end560:                                     ; preds = %while.cond541
  br label %do.end561

do.end561:                                        ; preds = %while.end560
  br label %if.end562

if.end562:                                        ; preds = %do.end561, %do.end515
  store i32 2, i32* %i474, align 4
  br label %for.cond563

for.cond563:                                      ; preds = %for.inc608, %if.end562
  %400 = load i32, i32* %i474, align 4
  %tobool564 = icmp ne i32 %400, 0
  br i1 %tobool564, label %for.body565, label %for.end611

for.body565:                                      ; preds = %for.cond563
  br label %do.body566

do.body566:                                       ; preds = %for.body565
  %401 = load i32, i32* %z, align 4
  %and568 = and i32 %401, 65535
  store i32 %and568, i32* %bits567, align 4
  store i32 16, i32* %len569, align 4
  %402 = load i32, i32* %bits567, align 4
  %403 = load i32, i32* %len569, align 4
  %shl570 = shl i32 1, %403
  %sub571 = sub i32 %shl570, 1
  %cmp572 = icmp ule i32 %402, %sub571
  %lnot574 = xor i1 %cmp572, true
  %lnot.ext575 = zext i1 %lnot574 to i32
  %conv576 = sext i32 %lnot.ext575 to i64
  %tobool577 = icmp ne i64 %conv576, 0
  br i1 %tobool577, label %cond.true578, label %cond.false579

cond.true578:                                     ; preds = %do.body566
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1322, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end580

cond.false579:                                    ; preds = %do.body566
  br label %cond.end580

cond.end580:                                      ; preds = %cond.false579, %404
  %405 = load i32, i32* %bits567, align 4
  %406 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in581 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %406, i32 0, i32 16
  %407 = load i32, i32* %m_bits_in581, align 4
  %shl582 = shl i32 %405, %407
  %408 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer583 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %408, i32 0, i32 17
  %409 = load i32, i32* %m_bit_buffer583, align 8
  %or584 = or i32 %409, %shl582
  store i32 %or584, i32* %m_bit_buffer583, align 8
  %410 = load i32, i32* %len569, align 4
  %411 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in585 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %411, i32 0, i32 16
  %412 = load i32, i32* %m_bits_in585, align 4
  %add586 = add i32 %412, %410
  store i32 %add586, i32* %m_bits_in585, align 4
  br label %while.cond587

while.cond587:                                    ; preds = %if.end601, %cond.end580
  %413 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in588 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %413, i32 0, i32 16
  %414 = load i32, i32* %m_bits_in588, align 4
  %cmp589 = icmp uge i32 %414, 8
  br i1 %cmp589, label %while.body591, label %while.end606

while.body591:                                    ; preds = %while.cond587
  %415 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf592 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %415, i32 0, i32 11
  %416 = load i8*, i8** %m_pOutput_buf592, align 8
  %417 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end593 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %417, i32 0, i32 12
  %418 = load i8*, i8** %m_pOutput_buf_end593, align 8
  %cmp594 = icmp ult i8* %416, %418
  br i1 %cmp594, label %if.then596, label %if.end601

if.then596:                                       ; preds = %while.body591
  %419 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer597 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %419, i32 0, i32 17
  %420 = load i32, i32* %m_bit_buffer597, align 8
  %conv598 = trunc i32 %420 to i8
  %421 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf599 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %421, i32 0, i32 11
  %422 = load i8*, i8** %m_pOutput_buf599, align 8
  %incdec.ptr600 = getelementptr inbounds i8, i8* %422, i32 1
  store i8* %incdec.ptr600, i8** %m_pOutput_buf599, align 8
  store i8 %conv598, i8* %422, align 1
  br label %if.end601

if.end601:                                        ; preds = %if.then596, %while.body591
  %423 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer602 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %423, i32 0, i32 17
  %424 = load i32, i32* %m_bit_buffer602, align 8
  %shr603 = lshr i32 %424, 8
  store i32 %shr603, i32* %m_bit_buffer602, align 8
  %425 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in604 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %425, i32 0, i32 16
  %426 = load i32, i32* %m_bits_in604, align 4
  %sub605 = sub i32 %426, 8
  store i32 %sub605, i32* %m_bits_in604, align 4
  br label %while.cond587

while.end606:                                     ; preds = %while.cond587
  br label %do.end607

do.end607:                                        ; preds = %while.end606
  br label %for.inc608

for.inc608:                                       ; preds = %do.end607
  %427 = load i32, i32* %i474, align 4
  %dec609 = add i32 %427, -1
  store i32 %dec609, i32* %i474, align 4
  %428 = load i32, i32* %z, align 4
  %xor610 = xor i32 %428, 65535
  store i32 %xor610, i32* %z, align 4
  br label %for.cond563

for.end611:                                       ; preds = %for.cond563
  br label %if.end612

if.end612:                                        ; preds = %for.end611, %if.end472
  br label %if.end613

if.end613:                                        ; preds = %if.end612, %if.end363
  %429 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf614 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %429, i32 0, i32 11
  %430 = load i8*, i8** %m_pOutput_buf614, align 8
  %431 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end615 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %431, i32 0, i32 12
  %432 = load i8*, i8** %m_pOutput_buf_end615, align 8
  %cmp616 = icmp ult i8* %430, %432
  %lnot618 = xor i1 %cmp616, true
  %lnot.ext619 = zext i1 %lnot618 to i32
  %conv620 = sext i32 %lnot.ext619 to i64
  %tobool621 = icmp ne i64 %conv620, 0
  br i1 %tobool621, label %cond.true622, label %cond.false623

cond.true622:                                     ; preds = %if.end613
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1327, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.65, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end624

cond.false623:                                    ; preds = %if.end613
  br label %cond.end624

cond.end624:                                      ; preds = %cond.false623, %433
  %434 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %434, i32 0, i32 36
  %arrayidx625 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %arrayidx626 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx625, i64 0, i64 0
  %435 = bitcast i16* %arrayidx626 to i8*
  %436 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count627 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %436, i32 0, i32 36
  %arrayidx628 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count627, i64 0, i64 0
  %arrayidx629 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx628, i64 0, i64 0
  %437 = bitcast i16* %arrayidx629 to i8*
  %438 = call i64 @llvm.objectsize.i64.p0i8(i8* %437, i1 false)
  %call630 = call i8* @__memset_chk(i8* %435, i32 0, i64 576, i64 %438) #10
  %439 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count631 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %439, i32 0, i32 36
  %arrayidx632 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count631, i64 0, i64 1
  %arrayidx633 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx632, i64 0, i64 0
  %440 = bitcast i16* %arrayidx633 to i8*
  %441 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count634 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %441, i32 0, i32 36
  %arrayidx635 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count634, i64 0, i64 1
  %arrayidx636 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx635, i64 0, i64 0
  %442 = bitcast i16* %arrayidx636 to i8*
  %443 = call i64 @llvm.objectsize.i64.p0i8(i8* %442, i1 false)
  %call637 = call i8* @__memset_chk(i8* %440, i32 0, i64 64, i64 %443) #10
  %444 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %444, i32 0, i32 39
  %arraydecay638 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i32 0, i32 0
  %add.ptr639 = getelementptr inbounds i8, i8* %arraydecay638, i64 1
  %445 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf640 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %445, i32 0, i32 9
  store i8* %add.ptr639, i8** %m_pLZ_code_buf640, align 8
  %446 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf641 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %446, i32 0, i32 39
  %arraydecay642 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf641, i32 0, i32 0
  %447 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_flags643 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %447, i32 0, i32 10
  store i8* %arraydecay642, i8** %m_pLZ_flags643, align 8
  %448 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_num_flags_left644 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %448, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left644, align 8
  %449 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes645 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %449, i32 0, i32 14
  %450 = load i32, i32* %m_total_lz_bytes645, align 4
  %451 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf_dict_pos646 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %451, i32 0, i32 15
  %452 = load i32, i32* %m_lz_code_buf_dict_pos646, align 8
  %add647 = add i32 %452, %450
  store i32 %add647, i32* %m_lz_code_buf_dict_pos646, align 8
  %453 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_total_lz_bytes648 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %453, i32 0, i32 14
  store i32 0, i32* %m_total_lz_bytes648, align 4
  %454 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_block_index649 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %454, i32 0, i32 24
  %455 = load i32, i32* %m_block_index649, align 4
  %inc650 = add i32 %455, 1
  store i32 %inc650, i32* %m_block_index649, align 4
  %456 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf651 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %456, i32 0, i32 11
  %457 = load i8*, i8** %m_pOutput_buf651, align 8
  %458 = load i8*, i8** %pOutput_buf_start, align 8
  %sub.ptr.lhs.cast652 = ptrtoint i8* %457 to i64
  %sub.ptr.rhs.cast653 = ptrtoint i8* %458 to i64
  %sub.ptr.sub654 = sub i64 %sub.ptr.lhs.cast652, %sub.ptr.rhs.cast653
  %conv655 = trunc i64 %sub.ptr.sub654 to i32
  store i32 %conv655, i32* %n, align 4
  %cmp656 = icmp ne i32 %conv655, 0
  br i1 %cmp656, label %if.then658, label %if.end719

if.then658:                                       ; preds = %cond.end624
  %459 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func659 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %459, i32 0, i32 0
  %460 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func659, align 8
  %tobool660 = icmp ne i32 (i8*, i32, i8*)* %460, null
  br i1 %tobool660, label %if.then661, label %if.else672

if.then661:                                       ; preds = %if.then658
  %461 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %461, i32 0, i32 32
  %462 = load i8*, i8** %m_pSrc, align 8
  %463 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %463, i32 0, i32 27
  %464 = load i8*, i8** %m_pIn_buf, align 8
  %sub.ptr.lhs.cast662 = ptrtoint i8* %462 to i64
  %sub.ptr.rhs.cast663 = ptrtoint i8* %464 to i64
  %sub.ptr.sub664 = sub i64 %sub.ptr.lhs.cast662, %sub.ptr.rhs.cast663
  %465 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %465, i32 0, i32 29
  %466 = load i64*, i64** %m_pIn_buf_size, align 8
  store i64 %sub.ptr.sub664, i64* %466, align 8
  %467 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func665 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %467, i32 0, i32 0
  %468 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func665, align 8
  %469 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf666 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %469, i32 0, i32 42
  %arraydecay667 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf666, i32 0, i32 0
  %470 = load i32, i32* %n, align 4
  %471 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_user = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %471, i32 0, i32 1
  %472 = load i8*, i8** %m_pPut_buf_user, align 8
  %call668 = call i32 %468(i8* %arraydecay667, i32 %470, i8* %472)
  %tobool669 = icmp ne i32 %call668, 0
  br i1 %tobool669, label %if.end671, label %if.then670

if.then670:                                       ; preds = %if.then661
  %473 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %473, i32 0, i32 26
  store i32 -1, i32* %m_prev_return_status, align 4
  store i32 -1, i32* %retval, align 4
  br label %return

if.end671:                                        ; preds = %if.then661
  br label %if.end718

if.else672:                                       ; preds = %if.then658
  %474 = load i8*, i8** %pOutput_buf_start, align 8
  %475 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf673 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %475, i32 0, i32 42
  %arraydecay674 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf673, i32 0, i32 0
  %cmp675 = icmp eq i8* %474, %arraydecay674
  br i1 %cmp675, label %if.then677, label %if.else713

if.then677:                                       ; preds = %if.else672
  %476 = load i32, i32* %n, align 4
  %conv678 = sext i32 %476 to i64
  %477 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size679 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %477, i32 0, i32 30
  %478 = load i64*, i64** %m_pOut_buf_size679, align 8
  %479 = load i64, i64* %478, align 8
  %480 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs680 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %480, i32 0, i32 34
  %481 = load i64, i64* %m_out_buf_ofs680, align 8
  %sub681 = sub i64 %479, %481
  %cmp682 = icmp ult i64 %conv678, %sub681
  br i1 %cmp682, label %cond.true684, label %cond.false686

cond.true684:                                     ; preds = %if.then677
  %482 = load i32, i32* %n, align 4
  %conv685 = sext i32 %482 to i64
  br label %cond.end690

cond.false686:                                    ; preds = %if.then677
  %483 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf_size687 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %483, i32 0, i32 30
  %484 = load i64*, i64** %m_pOut_buf_size687, align 8
  %485 = load i64, i64* %484, align 8
  %486 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs688 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %486, i32 0, i32 34
  %487 = load i64, i64* %m_out_buf_ofs688, align 8
  %sub689 = sub i64 %485, %487
  br label %cond.end690

cond.end690:                                      ; preds = %cond.false686, %cond.true684
  %cond691 = phi i64 [ %conv685, %cond.true684 ], [ %sub689, %cond.false686 ]
  %conv692 = trunc i64 %cond691 to i32
  store i32 %conv692, i32* %bytes_to_copy, align 4
  %488 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf693 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %488, i32 0, i32 28
  %489 = load i8*, i8** %m_pOut_buf693, align 8
  %490 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs694 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %490, i32 0, i32 34
  %491 = load i64, i64* %m_out_buf_ofs694, align 8
  %add.ptr695 = getelementptr inbounds i8, i8* %489, i64 %491
  %492 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_buf696 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %492, i32 0, i32 42
  %arraydecay697 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf696, i32 0, i32 0
  %493 = load i32, i32* %bytes_to_copy, align 4
  %conv698 = sext i32 %493 to i64
  %494 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOut_buf699 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %494, i32 0, i32 28
  %495 = load i8*, i8** %m_pOut_buf699, align 8
  %496 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs700 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %496, i32 0, i32 34
  %497 = load i64, i64* %m_out_buf_ofs700, align 8
  %add.ptr701 = getelementptr inbounds i8, i8* %495, i64 %497
  %498 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr701, i1 false)
  %call702 = call i8* @__memcpy_chk(i8* %add.ptr695, i8* %arraydecay697, i64 %conv698, i64 %498) #10
  %499 = load i32, i32* %bytes_to_copy, align 4
  %conv703 = sext i32 %499 to i64
  %500 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs704 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %500, i32 0, i32 34
  %501 = load i64, i64* %m_out_buf_ofs704, align 8
  %add705 = add i64 %501, %conv703
  store i64 %add705, i64* %m_out_buf_ofs704, align 8
  %502 = load i32, i32* %bytes_to_copy, align 4
  %503 = load i32, i32* %n, align 4
  %sub706 = sub nsw i32 %503, %502
  store i32 %sub706, i32* %n, align 4
  %cmp707 = icmp ne i32 %sub706, 0
  br i1 %cmp707, label %if.then709, label %if.end712

if.then709:                                       ; preds = %cond.end690
  %504 = load i32, i32* %bytes_to_copy, align 4
  %505 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_ofs710 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %505, i32 0, i32 21
  store i32 %504, i32* %m_output_flush_ofs710, align 8
  %506 = load i32, i32* %n, align 4
  %507 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining711 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %507, i32 0, i32 22
  store i32 %506, i32* %m_output_flush_remaining711, align 4
  br label %if.end712

if.end712:                                        ; preds = %if.then709, %cond.end690
  br label %if.end717

if.else713:                                       ; preds = %if.else672
  %508 = load i32, i32* %n, align 4
  %conv714 = sext i32 %508 to i64
  %509 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_out_buf_ofs715 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %509, i32 0, i32 34
  %510 = load i64, i64* %m_out_buf_ofs715, align 8
  %add716 = add i64 %510, %conv714
  store i64 %add716, i64* %m_out_buf_ofs715, align 8
  br label %if.end717

if.end717:                                        ; preds = %if.else713, %if.end712
  br label %if.end718

if.end718:                                        ; preds = %if.end717, %if.end671
  br label %if.end719

if.end719:                                        ; preds = %if.end718, %cond.end624
  %511 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_output_flush_remaining720 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %511, i32 0, i32 22
  %512 = load i32, i32* %m_output_flush_remaining720, align 4
  store i32 %512, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end719, %if.then670
  %513 = load i32, i32* %retval, align 4
  ret i32 %513
}

; Function Attrs: nounwind
declare i8* @__memset_chk(i8*, i32, i64, i64) #5

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %d, i8* %pIn_buf, i64 %in_buf_size, i32 %flush) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pIn_buf.addr = alloca i8*, align 8
  %in_buf_size.addr = alloca i64, align 8
  %flush.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8
  store i64 %in_buf_size, i64* %in_buf_size.addr, align 8
  store i32 %flush, i32* %flush.addr, align 4
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 0
  %1 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8
  %tobool = icmp ne i32 (i8*, i32, i8*)* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool1 = icmp ne i64 %conv, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__func__.tdefl_compress_buffer, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1947, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %2
  %3 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %4 = load i8*, i8** %pIn_buf.addr, align 8
  %5 = load i32, i32* %flush.addr, align 4
  %call = call i32 @tdefl_compress(%struct.tdefl_compressor* %3, i8* %4, i64* %in_buf_size.addr, i8* null, i64* null, i32 %5)
  ret i32 %call
}

; Function Attrs: noreturn
declare void @__assert_rtn(i8*, i8*, i32, i8*) #7

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tdefl_get_prev_return_status(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 26
  %1 = load i32, i32* %m_prev_return_status, align 4
  ret i32 %1
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tdefl_compress_mem_to_output(i8* %pBuf, i64 %buf_len, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %succeeded = alloca i32, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i64, i64* %buf_len.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i8*, i8** %pBuf.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %2 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  %tobool2 = icmp ne i32 (i8*, i32, i8*)* %2, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %call = call i8* @malloc(i64 319352) #8
  %3 = bitcast i8* %call to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %3, %struct.tdefl_compressor** %pComp, align 8
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %tobool3 = icmp ne %struct.tdefl_compressor* %4, null
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  %5 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %6 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  %7 = load i8*, i8** %pPut_buf_user.addr, align 8
  %8 = load i32, i32* %flags.addr, align 4
  %call6 = call i32 @tdefl_init(%struct.tdefl_compressor* %5, i32 (i8*, i32, i8*)* %6, i8* %7, i32 %8)
  %cmp = icmp eq i32 %call6, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %succeeded, align 4
  %9 = load i32, i32* %succeeded, align 4
  %tobool7 = icmp ne i32 %9, 0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end5
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %11 = load i8*, i8** %pBuf.addr, align 8
  %12 = load i64, i64* %buf_len.addr, align 8
  %call8 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %10, i8* %11, i64 %12, i32 4)
  %cmp9 = icmp eq i32 %call8, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end5
  %13 = phi i1 [ false, %if.end5 ], [ %cmp9, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  store i32 %land.ext, i32* %succeeded, align 4
  %14 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %15 = bitcast %struct.tdefl_compressor* %14 to i8*
  call void @free(i8* %15)
  %16 = load i32, i32* %succeeded, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %land.end, %if.then4, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @tdefl_compress_mem_to_heap(i8* %pSrc_buf, i64 %src_buf_len, i64* %pOut_len, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %pOut_len.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8
  store i64* %pOut_len, i64** %pOut_len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load i64*, i64** %pOut_len.addr, align 8
  %tobool = icmp ne i64* %1, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i64*, i64** %pOut_len.addr, align 8
  store i64 0, i64* %2, align 8
  br label %if.end

if.end:                                           ; preds = %if.else
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 3
  store i32 1, i32* %m_expandable, align 8
  %3 = load i8*, i8** %pSrc_buf.addr, align 8
  %4 = load i64, i64* %src_buf_len.addr, align 8
  %5 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %6 = load i32, i32* %flags.addr, align 4
  %call = call i32 @tdefl_compress_mem_to_output(i8* %3, i64 %4, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %5, i32 %6)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i8* null, i8** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %7 = load i64, i64* %m_size, align 8
  %8 = load i64*, i64** %pOut_len.addr, align 8
  store i64 %7, i64* %8, align 8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %9 = load i8*, i8** %m_pBuf, align 8
  store i8* %9, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %10 = load i8*, i8** %retval, align 8
  ret i8* %10
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @tdefl_output_buffer_putter(i8* %pBuf, i32 %len, i8* %pUser) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %pUser.addr = alloca i8*, align 8
  %p = alloca %struct.tdefl_output_buffer*, align 8
  %new_size = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %pNew_buf = alloca i8*, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %pUser, i8** %pUser.addr, align 8
  %0 = load i8*, i8** %pUser.addr, align 8
  %1 = bitcast i8* %0 to %struct.tdefl_output_buffer*
  store %struct.tdefl_output_buffer* %1, %struct.tdefl_output_buffer** %p, align 8
  %2 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %2, i32 0, i32 0
  %3 = load i64, i64* %m_size, align 8
  %4 = load i32, i32* %len.addr, align 4
  %conv = sext i32 %4 to i64
  %add = add i64 %3, %conv
  store i64 %add, i64* %new_size, align 8
  %5 = load i64, i64* %new_size, align 8
  %6 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %6, i32 0, i32 1
  %7 = load i64, i64* %m_capacity, align 8
  %cmp = icmp ugt i64 %5, %7
  br i1 %cmp, label %if.then, label %if.end14

if.then:                                          ; preds = %entry
  %8 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_capacity2 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %8, i32 0, i32 1
  %9 = load i64, i64* %m_capacity2, align 8
  store i64 %9, i64* %new_capacity, align 8
  %10 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %10, i32 0, i32 3
  %11 = load i32, i32* %m_expandable, align 8
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %12 = load i64, i64* %new_capacity, align 8
  %shl = shl i64 %12, 1
  %cmp4 = icmp ugt i64 128, %shl
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %13 = load i64, i64* %new_capacity, align 8
  %shl6 = shl i64 %13, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 128, %cond.true ], [ %shl6, %cond.false ]
  store i64 %cond, i64* %new_capacity, align 8
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %14 = load i64, i64* %new_size, align 8
  %15 = load i64, i64* %new_capacity, align 8
  %cmp7 = icmp ugt i64 %14, %15
  br i1 %cmp7, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %16 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %16, i32 0, i32 2
  %17 = load i8*, i8** %m_pBuf, align 8
  %18 = load i64, i64* %new_capacity, align 8
  %call = call i8* @realloc(i8* %17, i64 %18) #9
  store i8* %call, i8** %pNew_buf, align 8
  %19 = load i8*, i8** %pNew_buf, align 8
  %tobool9 = icmp ne i8* %19, null
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %do.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %do.end
  %20 = load i8*, i8** %pNew_buf, align 8
  %21 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_pBuf12 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %21, i32 0, i32 2
  store i8* %20, i8** %m_pBuf12, align 8
  %22 = load i64, i64* %new_capacity, align 8
  %23 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_capacity13 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %23, i32 0, i32 1
  store i64 %22, i64* %m_capacity13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.end11, %entry
  %24 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_pBuf15 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %24, i32 0, i32 2
  %25 = load i8*, i8** %m_pBuf15, align 8
  %26 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_size16 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %26, i32 0, i32 0
  %27 = load i64, i64* %m_size16, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 %27
  %28 = load i8*, i8** %pBuf.addr, align 8
  %29 = load i32, i32* %len.addr, align 4
  %conv17 = sext i32 %29 to i64
  %30 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_pBuf18 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %30, i32 0, i32 2
  %31 = load i8*, i8** %m_pBuf18, align 8
  %32 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_size19 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %32, i32 0, i32 0
  %33 = load i64, i64* %m_size19, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %31, i64 %33
  %34 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr20, i1 false)
  %call21 = call i8* @__memcpy_chk(i8* %add.ptr, i8* %28, i64 %conv17, i64 %34) #10
  %35 = load i64, i64* %new_size, align 8
  %36 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8
  %m_size22 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %36, i32 0, i32 0
  store i64 %35, i64* %m_size22, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end14, %if.then10, %if.then3
  %37 = load i32, i32* %retval, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @tdefl_compress_mem_to_mem(i8* %pOut_buf, i64 %out_buf_len, i8* %pSrc_buf, i64 %src_buf_len, i32 %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %pOut_buf.addr = alloca i8*, align 8
  %out_buf_len.addr = alloca i64, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8
  store i64 %out_buf_len, i64* %out_buf_len.addr, align 8
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load i8*, i8** %pOut_buf.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %pOut_buf.addr, align 8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  store i8* %2, i8** %m_pBuf, align 8
  %3 = load i64, i64* %out_buf_len.addr, align 8
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  store i64 %3, i64* %m_capacity, align 8
  %4 = load i8*, i8** %pSrc_buf.addr, align 8
  %5 = load i64, i64* %src_buf_len.addr, align 8
  %6 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %7 = load i32, i32* %flags.addr, align 4
  %call = call i32 @tdefl_compress_mem_to_output(i8* %4, i64 %5, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %6, i32 %7)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i64 0, i64* %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %8 = load i64, i64* %m_size, align 8
  store i64 %8, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %9 = load i64, i64* %retval, align 8
  ret i64 %9
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @tdefl_write_image_to_png_file_in_memory_ex(i8* %pImage, i32 %w, i32 %h, i32 %num_chans, i64* %pLen_out, i32 %level, i32 %flip) #0 {
entry:
  %retval = alloca i8*, align 8
  %pImage.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %num_chans.addr = alloca i32, align 4
  %pLen_out.addr = alloca i64*, align 8
  %level.addr = alloca i32, align 4
  %flip.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  %i = alloca i32, align 4
  %bpl = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  %c = alloca i32, align 4
  %pnghdr = alloca [41 x i8], align 16
  store i8* %pImage, i8** %pImage.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %num_chans, i32* %num_chans.addr, align 4
  store i64* %pLen_out, i64** %pLen_out.addr, align 8
  store i32 %level, i32* %level.addr, align 4
  store i32 %flip, i32* %flip.addr, align 4
  %call = call i8* @malloc(i64 319352) #8
  %0 = bitcast i8* %call to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %0, %struct.tdefl_compressor** %pComp, align 8
  %1 = load i32, i32* %w.addr, align 4
  %2 = load i32, i32* %num_chans.addr, align 4
  %mul = mul nsw i32 %1, %2
  store i32 %mul, i32* %bpl, align 4
  %3 = load i64*, i64** %pLen_out.addr, align 8
  store i64 0, i64* %3, align 8
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %tobool = icmp ne %struct.tdefl_compressor* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %5 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 32, i32 8, i1 false)
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 3
  store i32 1, i32* %m_expandable, align 8
  %6 = load i32, i32* %bpl, align 4
  %add = add nsw i32 1, %6
  %7 = load i32, i32* %h.addr, align 4
  %mul1 = mul nsw i32 %add, %7
  %cmp = icmp sgt i32 64, %mul1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %8 = load i32, i32* %bpl, align 4
  %add2 = add nsw i32 1, %8
  %9 = load i32, i32* %h.addr, align 4
  %mul3 = mul nsw i32 %add2, %9
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 64, %cond.true ], [ %mul3, %cond.false ]
  %add4 = add nsw i32 57, %cond
  %conv = sext i32 %add4 to i64
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  store i64 %conv, i64* %m_capacity, align 8
  %m_capacity5 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  %10 = load i64, i64* %m_capacity5, align 8
  %call6 = call i8* @malloc(i64 %10) #8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  store i8* %call6, i8** %m_pBuf, align 8
  %cmp7 = icmp eq i8* null, %call6
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %cond.end
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %12 = bitcast %struct.tdefl_compressor* %11 to i8*
  call void @free(i8* %12)
  store i8* null, i8** %retval, align 8
  br label %return

if.end10:                                         ; preds = %cond.end
  store i32 41, i32* %z, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end10
  %13 = load i32, i32* %z, align 4
  %tobool11 = icmp ne i32 %13, 0
  br i1 %tobool11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = bitcast i32* %z to i8*
  %15 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %call12 = call i32 @tdefl_output_buffer_putter(i8* %14, i32 1, i8* %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %z, align 4
  %dec = add nsw i32 %16, -1
  store i32 %dec, i32* %z, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %18 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %19 = load i32, i32* %level.addr, align 4
  %cmp13 = icmp ult i32 10, %19
  br i1 %cmp13, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %for.end
  br label %cond.end17

cond.false16:                                     ; preds = %for.end
  %20 = load i32, i32* %level.addr, align 4
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 10, %cond.true15 ], [ %20, %cond.false16 ]
  %idxprom = zext i32 %cond18 to i64
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* @tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes, i64 0, i64 %idxprom
  %21 = load i32, i32* %arrayidx, align 4
  %or = or i32 %21, 4096
  %call19 = call i32 @tdefl_init(%struct.tdefl_compressor* %17, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %18, i32 %or)
  store i32 0, i32* %y, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc34, %cond.end17
  %22 = load i32, i32* %y, align 4
  %23 = load i32, i32* %h.addr, align 4
  %cmp21 = icmp slt i32 %22, %23
  br i1 %cmp21, label %for.body23, label %for.end35

for.body23:                                       ; preds = %for.cond20
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %25 = bitcast i32* %z to i8*
  %call24 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %24, i8* %25, i64 1, i32 0)
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %27 = load i8*, i8** %pImage.addr, align 8
  %28 = load i32, i32* %flip.addr, align 4
  %tobool25 = icmp ne i32 %28, 0
  br i1 %tobool25, label %cond.true26, label %cond.false28

cond.true26:                                      ; preds = %for.body23
  %29 = load i32, i32* %h.addr, align 4
  %sub = sub nsw i32 %29, 1
  %30 = load i32, i32* %y, align 4
  %sub27 = sub nsw i32 %sub, %30
  br label %cond.end29

cond.false28:                                     ; preds = %for.body23
  %31 = load i32, i32* %y, align 4
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi i32 [ %sub27, %cond.true26 ], [ %31, %cond.false28 ]
  %32 = load i32, i32* %bpl, align 4
  %mul31 = mul nsw i32 %cond30, %32
  %idx.ext = sext i32 %mul31 to i64
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %idx.ext
  %33 = load i32, i32* %bpl, align 4
  %conv32 = sext i32 %33 to i64
  %call33 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %26, i8* %add.ptr, i64 %conv32, i32 0)
  br label %for.inc34

for.inc34:                                        ; preds = %cond.end29
  %34 = load i32, i32* %y, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %y, align 4
  br label %for.cond20

for.end35:                                        ; preds = %for.cond20
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %call36 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %35, i8* null, i64 0, i32 4)
  %cmp37 = icmp ne i32 %call36, 1
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %for.end35
  %36 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %37 = bitcast %struct.tdefl_compressor* %36 to i8*
  call void @free(i8* %37)
  %m_pBuf40 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %38 = load i8*, i8** %m_pBuf40, align 8
  call void @free(i8* %38)
  store i8* null, i8** %retval, align 8
  br label %return

if.end41:                                         ; preds = %for.end35
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %39 = load i64, i64* %m_size, align 8
  %sub42 = sub i64 %39, 41
  %40 = load i64*, i64** %pLen_out.addr, align 8
  store i64 %sub42, i64* %40, align 8
  %41 = bitcast [41 x i8]* %pnghdr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @tdefl_write_image_to_png_file_in_memory_ex.pnghdr, i32 0, i32 0), i64 41, i32 16, i1 false)
  %42 = load i32, i32* %w.addr, align 4
  %shr = ashr i32 %42, 8
  %conv43 = trunc i32 %shr to i8
  %arrayidx44 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 18
  store i8 %conv43, i8* %arrayidx44, align 2
  %43 = load i32, i32* %w.addr, align 4
  %conv45 = trunc i32 %43 to i8
  %arrayidx46 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 19
  store i8 %conv45, i8* %arrayidx46, align 1
  %44 = load i32, i32* %h.addr, align 4
  %shr47 = ashr i32 %44, 8
  %conv48 = trunc i32 %shr47 to i8
  %arrayidx49 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 22
  store i8 %conv48, i8* %arrayidx49, align 2
  %45 = load i32, i32* %h.addr, align 4
  %conv50 = trunc i32 %45 to i8
  %arrayidx51 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 23
  store i8 %conv50, i8* %arrayidx51, align 1
  %46 = load i32, i32* %num_chans.addr, align 4
  %idxprom52 = sext i32 %46 to i64
  %arrayidx53 = getelementptr inbounds [5 x i8], [5 x i8]* @tdefl_write_image_to_png_file_in_memory_ex.chans, i64 0, i64 %idxprom52
  %47 = load i8, i8* %arrayidx53, align 1
  %arrayidx54 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 25
  store i8 %47, i8* %arrayidx54, align 1
  %48 = load i64*, i64** %pLen_out.addr, align 8
  %49 = load i64, i64* %48, align 8
  %shr55 = lshr i64 %49, 24
  %conv56 = trunc i64 %shr55 to i8
  %arrayidx57 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 33
  store i8 %conv56, i8* %arrayidx57, align 1
  %50 = load i64*, i64** %pLen_out.addr, align 8
  %51 = load i64, i64* %50, align 8
  %shr58 = lshr i64 %51, 16
  %conv59 = trunc i64 %shr58 to i8
  %arrayidx60 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 34
  store i8 %conv59, i8* %arrayidx60, align 2
  %52 = load i64*, i64** %pLen_out.addr, align 8
  %53 = load i64, i64* %52, align 8
  %shr61 = lshr i64 %53, 8
  %conv62 = trunc i64 %shr61 to i8
  %arrayidx63 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 35
  store i8 %conv62, i8* %arrayidx63, align 1
  %54 = load i64*, i64** %pLen_out.addr, align 8
  %55 = load i64, i64* %54, align 8
  %conv64 = trunc i64 %55 to i8
  %arrayidx65 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 36
  store i8 %conv64, i8* %arrayidx65, align 4
  %arraydecay = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i32 0, i32 0
  %add.ptr66 = getelementptr inbounds i8, i8* %arraydecay, i64 12
  %call67 = call i64 @mz_crc32(i64 0, i8* %add.ptr66, i64 17)
  %conv68 = trunc i64 %call67 to i32
  store i32 %conv68, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond69

for.cond69:                                       ; preds = %for.inc79, %if.end41
  %56 = load i32, i32* %i, align 4
  %cmp70 = icmp slt i32 %56, 4
  br i1 %cmp70, label %for.body72, label %for.end81

for.body72:                                       ; preds = %for.cond69
  %57 = load i32, i32* %c, align 4
  %shr73 = lshr i32 %57, 24
  %conv74 = trunc i32 %shr73 to i8
  %arraydecay75 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i32 0, i32 0
  %add.ptr76 = getelementptr inbounds i8, i8* %arraydecay75, i64 29
  %58 = load i32, i32* %i, align 4
  %idxprom77 = sext i32 %58 to i64
  %arrayidx78 = getelementptr inbounds i8, i8* %add.ptr76, i64 %idxprom77
  store i8 %conv74, i8* %arrayidx78, align 1
  br label %for.inc79

for.inc79:                                        ; preds = %for.body72
  %59 = load i32, i32* %i, align 4
  %inc80 = add nsw i32 %59, 1
  store i32 %inc80, i32* %i, align 4
  %60 = load i32, i32* %c, align 4
  %shl = shl i32 %60, 8
  store i32 %shl, i32* %c, align 4
  br label %for.cond69

for.end81:                                        ; preds = %for.cond69
  %m_pBuf82 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %61 = load i8*, i8** %m_pBuf82, align 8
  %arraydecay83 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i32 0, i32 0
  %m_pBuf84 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %62 = load i8*, i8** %m_pBuf84, align 8
  %63 = call i64 @llvm.objectsize.i64.p0i8(i8* %62, i1 false)
  %call85 = call i8* @__memcpy_chk(i8* %61, i8* %arraydecay83, i64 41, i64 %63) #10
  %64 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %call86 = call i32 @tdefl_output_buffer_putter(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i32 0, i32 0), i32 16, i8* %64)
  %tobool87 = icmp ne i32 %call86, 0
  br i1 %tobool87, label %if.end90, label %if.then88

if.then88:                                        ; preds = %for.end81
  %65 = load i64*, i64** %pLen_out.addr, align 8
  store i64 0, i64* %65, align 8
  %66 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %67 = bitcast %struct.tdefl_compressor* %66 to i8*
  call void @free(i8* %67)
  %m_pBuf89 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %68 = load i8*, i8** %m_pBuf89, align 8
  call void @free(i8* %68)
  store i8* null, i8** %retval, align 8
  br label %return

if.end90:                                         ; preds = %for.end81
  %m_pBuf91 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %69 = load i8*, i8** %m_pBuf91, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %69, i64 41
  %add.ptr93 = getelementptr inbounds i8, i8* %add.ptr92, i64 -4
  %70 = load i64*, i64** %pLen_out.addr, align 8
  %71 = load i64, i64* %70, align 8
  %add94 = add i64 %71, 4
  %call95 = call i64 @mz_crc32(i64 0, i8* %add.ptr93, i64 %add94)
  %conv96 = trunc i64 %call95 to i32
  store i32 %conv96, i32* %c, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond97

for.cond97:                                       ; preds = %for.inc109, %if.end90
  %72 = load i32, i32* %i, align 4
  %cmp98 = icmp slt i32 %72, 4
  br i1 %cmp98, label %for.body100, label %for.end112

for.body100:                                      ; preds = %for.cond97
  %73 = load i32, i32* %c, align 4
  %shr101 = lshr i32 %73, 24
  %conv102 = trunc i32 %shr101 to i8
  %m_pBuf103 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %74 = load i8*, i8** %m_pBuf103, align 8
  %m_size104 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %75 = load i64, i64* %m_size104, align 8
  %add.ptr105 = getelementptr inbounds i8, i8* %74, i64 %75
  %add.ptr106 = getelementptr inbounds i8, i8* %add.ptr105, i64 -16
  %76 = load i32, i32* %i, align 4
  %idxprom107 = sext i32 %76 to i64
  %arrayidx108 = getelementptr inbounds i8, i8* %add.ptr106, i64 %idxprom107
  store i8 %conv102, i8* %arrayidx108, align 1
  br label %for.inc109

for.inc109:                                       ; preds = %for.body100
  %77 = load i32, i32* %i, align 4
  %inc110 = add nsw i32 %77, 1
  store i32 %inc110, i32* %i, align 4
  %78 = load i32, i32* %c, align 4
  %shl111 = shl i32 %78, 8
  store i32 %shl111, i32* %c, align 4
  br label %for.cond97

for.end112:                                       ; preds = %for.cond97
  %79 = load i64*, i64** %pLen_out.addr, align 8
  %80 = load i64, i64* %79, align 8
  %add113 = add i64 %80, 57
  store i64 %add113, i64* %79, align 8
  %81 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %82 = bitcast %struct.tdefl_compressor* %81 to i8*
  call void @free(i8* %82)
  %m_pBuf114 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %83 = load i8*, i8** %m_pBuf114, align 8
  store i8* %83, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end112, %if.then88, %if.then39, %if.then9, %if.then
  %84 = load i8*, i8** %retval, align 8
  ret i8* %84
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: noinline nounwind ssp uwtable
define i8* @tdefl_write_image_to_png_file_in_memory(i8* %pImage, i32 %w, i32 %h, i32 %num_chans, i64* %pLen_out) #0 {
entry:
  %pImage.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %num_chans.addr = alloca i32, align 4
  %pLen_out.addr = alloca i64*, align 8
  store i8* %pImage, i8** %pImage.addr, align 8
  store i32 %w, i32* %w.addr, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %num_chans, i32* %num_chans.addr, align 4
  store i64* %pLen_out, i64** %pLen_out.addr, align 8
  %0 = load i8*, i8** %pImage.addr, align 8
  %1 = load i32, i32* %w.addr, align 4
  %2 = load i32, i32* %h.addr, align 4
  %3 = load i32, i32* %num_chans.addr, align 4
  %4 = load i64*, i64** %pLen_out.addr, align 8
  %call = call i8* @tdefl_write_image_to_png_file_in_memory_ex(i8* %0, i32 %1, i32 %2, i32 %3, i64* %4, i32 6, i32 0)
  ret i8* %call
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.tdefl_compressor* @tdefl_compressor_alloc() #0 {
entry:
  %call = call i8* @malloc(i64 319352) #8
  %0 = bitcast i8* %call to %struct.tdefl_compressor*
  ret %struct.tdefl_compressor* %0
}

; Function Attrs: noinline nounwind ssp uwtable
define void @tdefl_compressor_free(%struct.tdefl_compressor* %pComp) #0 {
entry:
  %pComp.addr = alloca %struct.tdefl_compressor*, align 8
  store %struct.tdefl_compressor* %pComp, %struct.tdefl_compressor** %pComp.addr, align 8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp.addr, align 8
  %1 = bitcast %struct.tdefl_compressor* %0 to i8*
  call void @free(i8* %1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @tinfl_decompress_mem_to_heap(i8* %pSrc_buf, i64 %src_buf_len, i64* %pOut_len, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %pOut_len.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %pBuf = alloca i8*, align 8
  %pNew_buf = alloca i8*, align 8
  %src_buf_ofs = alloca i64, align 8
  %out_buf_capacity = alloca i64, align 8
  %src_buf_size = alloca i64, align 8
  %dst_buf_size = alloca i64, align 8
  %new_out_buf_capacity = alloca i64, align 8
  %status = alloca i32, align 4
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8
  store i64* %pOut_len, i64** %pOut_len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* null, i8** %pBuf, align 8
  store i64 0, i64* %src_buf_ofs, align 8
  store i64 0, i64* %out_buf_capacity, align 8
  %0 = load i64*, i64** %pOut_len.addr, align 8
  store i64 0, i64* %0, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %for.cond

for.cond:                                         ; preds = %if.end14, %do.end
  %1 = load i64, i64* %src_buf_len.addr, align 8
  %2 = load i64, i64* %src_buf_ofs, align 8
  %sub = sub i64 %1, %2
  store i64 %sub, i64* %src_buf_size, align 8
  %3 = load i64, i64* %out_buf_capacity, align 8
  %4 = load i64*, i64** %pOut_len.addr, align 8
  %5 = load i64, i64* %4, align 8
  %sub1 = sub i64 %3, %5
  store i64 %sub1, i64* %dst_buf_size, align 8
  %6 = load i8*, i8** %pSrc_buf.addr, align 8
  %7 = load i64, i64* %src_buf_ofs, align 8
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i8*, i8** %pBuf, align 8
  %9 = load i8*, i8** %pBuf, align 8
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %10 = load i8*, i8** %pBuf, align 8
  %11 = load i64*, i64** %pOut_len.addr, align 8
  %12 = load i64, i64* %11, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 %12
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr2, %cond.true ], [ null, %cond.false ]
  %13 = load i32, i32* %flags.addr, align 4
  %and = and i32 %13, -3
  %or = or i32 %and, 4
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %add.ptr, i64* %src_buf_size, i8* %8, i8* %cond, i64* %dst_buf_size, i32 %or)
  store i32 %call, i32* %status, align 4
  %14 = load i32, i32* %status, align 4
  %cmp = icmp slt i32 %14, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %15 = load i32, i32* %status, align 4
  %cmp3 = icmp eq i32 %15, 1
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %16 = load i8*, i8** %pBuf, align 8
  call void @free(i8* %16)
  %17 = load i64*, i64** %pOut_len.addr, align 8
  store i64 0, i64* %17, align 8
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %18 = load i64, i64* %src_buf_size, align 8
  %19 = load i64, i64* %src_buf_ofs, align 8
  %add = add i64 %19, %18
  store i64 %add, i64* %src_buf_ofs, align 8
  %20 = load i64, i64* %dst_buf_size, align 8
  %21 = load i64*, i64** %pOut_len.addr, align 8
  %22 = load i64, i64* %21, align 8
  %add4 = add i64 %22, %20
  store i64 %add4, i64* %21, align 8
  %23 = load i32, i32* %status, align 4
  %cmp5 = icmp eq i32 %23, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  br label %for.end

if.end7:                                          ; preds = %if.end
  %24 = load i64, i64* %out_buf_capacity, align 8
  %mul = mul i64 %24, 2
  store i64 %mul, i64* %new_out_buf_capacity, align 8
  %25 = load i64, i64* %new_out_buf_capacity, align 8
  %cmp8 = icmp ult i64 %25, 128
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  store i64 128, i64* %new_out_buf_capacity, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  %26 = load i8*, i8** %pBuf, align 8
  %27 = load i64, i64* %new_out_buf_capacity, align 8
  %call11 = call i8* @realloc(i8* %26, i64 %27) #9
  store i8* %call11, i8** %pNew_buf, align 8
  %28 = load i8*, i8** %pNew_buf, align 8
  %tobool12 = icmp ne i8* %28, null
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end10
  %29 = load i8*, i8** %pBuf, align 8
  call void @free(i8* %29)
  %30 = load i64*, i64** %pOut_len.addr, align 8
  store i64 0, i64* %30, align 8
  store i8* null, i8** %retval, align 8
  br label %return

if.end14:                                         ; preds = %if.end10
  %31 = load i8*, i8** %pNew_buf, align 8
  store i8* %31, i8** %pBuf, align 8
  %32 = load i64, i64* %new_out_buf_capacity, align 8
  store i64 %32, i64* %out_buf_capacity, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then6
  %33 = load i8*, i8** %pBuf, align 8
  store i8* %33, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then13, %if.then
  %34 = load i8*, i8** %retval, align 8
  ret i8* %34
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @tinfl_decompress_mem_to_mem(i8* %pOut_buf, i64 %out_buf_len, i8* %pSrc_buf, i64 %src_buf_len, i32 %flags) #0 {
entry:
  %pOut_buf.addr = alloca i8*, align 8
  %out_buf_len.addr = alloca i64, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %status = alloca i32, align 4
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8
  store i64 %out_buf_len, i64* %out_buf_len.addr, align 8
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %0 = load i8*, i8** %pSrc_buf.addr, align 8
  %1 = load i8*, i8** %pOut_buf.addr, align 8
  %2 = load i8*, i8** %pOut_buf.addr, align 8
  %3 = load i32, i32* %flags.addr, align 4
  %and = and i32 %3, -3
  %or = or i32 %and, 4
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %0, i64* %src_buf_len.addr, i8* %1, i8* %2, i64* %out_buf_len.addr, i32 %or)
  store i32 %call, i32* %status, align 4
  %4 = load i32, i32* %status, align 4
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %5 = load i64, i64* %out_buf_len.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %5, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @tinfl_decompress_mem_to_callback(i8* %pIn_buf, i64* %pIn_buf_size, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pIn_buf.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %result = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %pDict = alloca i8*, align 8
  %in_buf_ofs = alloca i64, align 8
  %dict_ofs = alloca i64, align 8
  %in_buf_size = alloca i64, align 8
  %dst_buf_size = alloca i64, align 8
  %status = alloca i32, align 4
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %result, align 4
  %call = call i8* @malloc(i64 32768) #8
  store i8* %call, i8** %pDict, align 8
  store i64 0, i64* %in_buf_ofs, align 8
  store i64 0, i64* %dict_ofs, align 8
  %0 = load i8*, i8** %pDict, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %for.cond

for.cond:                                         ; preds = %if.end14, %do.end
  %1 = load i64*, i64** %pIn_buf_size.addr, align 8
  %2 = load i64, i64* %1, align 8
  %3 = load i64, i64* %in_buf_ofs, align 8
  %sub = sub i64 %2, %3
  store i64 %sub, i64* %in_buf_size, align 8
  %4 = load i64, i64* %dict_ofs, align 8
  %sub1 = sub i64 32768, %4
  store i64 %sub1, i64* %dst_buf_size, align 8
  %5 = load i8*, i8** %pIn_buf.addr, align 8
  %6 = load i64, i64* %in_buf_ofs, align 8
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %6
  %7 = load i8*, i8** %pDict, align 8
  %8 = load i8*, i8** %pDict, align 8
  %9 = load i64, i64* %dict_ofs, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %8, i64 %9
  %10 = load i32, i32* %flags.addr, align 4
  %and = and i32 %10, -7
  %call3 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %add.ptr, i64* %in_buf_size, i8* %7, i8* %add.ptr2, i64* %dst_buf_size, i32 %and)
  store i32 %call3, i32* %status, align 4
  %11 = load i64, i64* %in_buf_size, align 8
  %12 = load i64, i64* %in_buf_ofs, align 8
  %add = add i64 %12, %11
  store i64 %add, i64* %in_buf_ofs, align 8
  %13 = load i64, i64* %dst_buf_size, align 8
  %tobool4 = icmp ne i64 %13, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %for.cond
  %14 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8
  %15 = load i8*, i8** %pDict, align 8
  %16 = load i64, i64* %dict_ofs, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %15, i64 %16
  %17 = load i64, i64* %dst_buf_size, align 8
  %conv = trunc i64 %17 to i32
  %18 = load i8*, i8** %pPut_buf_user.addr, align 8
  %call6 = call i32 %14(i8* %add.ptr5, i32 %conv, i8* %18)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %land.lhs.true
  br label %for.end

if.end9:                                          ; preds = %land.lhs.true, %for.cond
  %19 = load i32, i32* %status, align 4
  %cmp = icmp ne i32 %19, 2
  br i1 %cmp, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end9
  %20 = load i32, i32* %status, align 4
  %cmp12 = icmp eq i32 %20, 0
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %result, align 4
  br label %for.end

if.end14:                                         ; preds = %if.end9
  %21 = load i64, i64* %dict_ofs, align 8
  %22 = load i64, i64* %dst_buf_size, align 8
  %add15 = add i64 %21, %22
  %and16 = and i64 %add15, 32767
  store i64 %and16, i64* %dict_ofs, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then11, %if.then8
  %23 = load i8*, i8** %pDict, align 8
  call void @free(i8* %23)
  %24 = load i64, i64* %in_buf_ofs, align 8
  %25 = load i64*, i64** %pIn_buf_size.addr, align 8
  store i64 %24, i64* %25, align 8
  %26 = load i32, i32* %result, align 4
  store i32 %26, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.tinfl_decompressor_tag* @tinfl_decompressor_alloc() #0 {
entry:
  %pDecomp = alloca %struct.tinfl_decompressor_tag*, align 8
  %call = call i8* @malloc(i64 11000) #8
  %0 = bitcast i8* %call to %struct.tinfl_decompressor_tag*
  store %struct.tinfl_decompressor_tag* %0, %struct.tinfl_decompressor_tag** %pDecomp, align 8
  %1 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %pDecomp, align 8
  %tobool = icmp ne %struct.tinfl_decompressor_tag* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %pDecomp, align 8
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %2, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %3 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %pDecomp, align 8
  ret %struct.tinfl_decompressor_tag* %3
}

; Function Attrs: noinline nounwind ssp uwtable
define void @tinfl_decompressor_free(%struct.tinfl_decompressor_tag* %pDecomp) #0 {
entry:
  %pDecomp.addr = alloca %struct.tinfl_decompressor_tag*, align 8
  store %struct.tinfl_decompressor_tag* %pDecomp, %struct.tinfl_decompressor_tag** %pDecomp.addr, align 8
  %0 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %pDecomp.addr, align 8
  %1 = bitcast %struct.tinfl_decompressor_tag* %0 to i8*
  call void @free(i8* %1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mz_zip_zero_struct(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %2 = bitcast %struct.mz_zip_archive* %1 to i8*
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %4 = bitcast %struct.mz_zip_archive* %3 to i8*
  %5 = call i64 @llvm.objectsize.i64.p0i8(i8* %4, i1 false)
  %call = call i8* @__memset_chk(i8* %2, i32 0, i64 112, i64 %5) #10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_end(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %0, i32 1)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %pZip, i32 %set_last_error) #0 {
entry:
  %pZip.addr.i40 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i41 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i34 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i35 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %set_last_error.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %set_last_error, i32* %set_last_error.addr, align 4
  store i32 1, i32* %status, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then6

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 7
  %4 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool2 = icmp ne i8* (i8*, i64, i64)* %4, null
  br i1 %tobool2, label %lor.lhs.false3, label %if.then6

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 8
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %tobool4 = icmp ne void (i8*, i8*)* %6, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then6

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 3
  %8 = load i32, i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %8, 1
  br i1 %cmp, label %if.then6, label %if.end10

if.then6:                                         ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %if.end
  %9 = load i32, i32* %set_last_error.addr, align 4
  %tobool7 = icmp ne i32 %9, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.then6
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 5
  store i32 24, i32* %m_last_error, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then6
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %lor.lhs.false5
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState11 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 15
  %12 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState11, align 8
  %tobool12 = icmp ne %struct.mz_zip_internal_state_tag* %12, null
  br i1 %tobool12, label %if.then13, label %if.end32

if.then13:                                        ; preds = %if.end10
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState14 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 15
  %14 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState14, align 8
  store %struct.mz_zip_internal_state_tag* %14, %struct.mz_zip_internal_state_tag** %pState, align 8
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 15
  store %struct.mz_zip_internal_state_tag* null, %struct.mz_zip_internal_state_tag** %m_pState15, align 8
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %17 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %17, i32 0, i32 0
  store %struct.mz_zip_archive* %16, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pArray.addr.i, align 8
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pFree.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 8
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i, align 8
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pAlloc_opaque.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 10
  %21 = load i8*, i8** %m_pAlloc_opaque.i, align 8
  %22 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %22, i32 0, i32 0
  %23 = load i8*, i8** %m_p.i, align 8
  call void %19(i8* %21, i8* %23) #10
  %24 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %25 = bitcast %struct.mz_zip_array* %24 to i8*
  %26 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %27 = bitcast %struct.mz_zip_array* %26 to i8*
  %28 = call i64 @llvm.objectsize.i64.p0i8(i8* %27, i1 false) #10
  %call.i = call i8* @__memset_chk(i8* %25, i32 0, i64 32, i64 %28) #10
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %30 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %30, i32 0, i32 1
  store %struct.mz_zip_archive* %29, %struct.mz_zip_archive** %pZip.addr.i34, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i35, align 8
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i34, align 8
  %m_pFree.i36 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 8
  %32 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i36, align 8
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i34, align 8
  %m_pAlloc_opaque.i37 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 10
  %34 = load i8*, i8** %m_pAlloc_opaque.i37, align 8
  %35 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i35, align 8
  %m_p.i38 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %35, i32 0, i32 0
  %36 = load i8*, i8** %m_p.i38, align 8
  call void %32(i8* %34, i8* %36) #10
  %37 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i35, align 8
  %38 = bitcast %struct.mz_zip_array* %37 to i8*
  %39 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i35, align 8
  %40 = bitcast %struct.mz_zip_array* %39 to i8*
  %41 = call i64 @llvm.objectsize.i64.p0i8(i8* %40, i1 false) #10
  %call.i39 = call i8* @__memset_chk(i8* %38, i32 0, i64 32, i64 %41) #10
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %43 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %43, i32 0, i32 2
  store %struct.mz_zip_archive* %42, %struct.mz_zip_archive** %pZip.addr.i40, align 8
  store %struct.mz_zip_array* %m_sorted_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i41, align 8
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i40, align 8
  %m_pFree.i42 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 8
  %45 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i42, align 8
  %46 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i40, align 8
  %m_pAlloc_opaque.i43 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %46, i32 0, i32 10
  %47 = load i8*, i8** %m_pAlloc_opaque.i43, align 8
  %48 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i41, align 8
  %m_p.i44 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %48, i32 0, i32 0
  %49 = load i8*, i8** %m_p.i44, align 8
  call void %45(i8* %47, i8* %49) #10
  %50 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i41, align 8
  %51 = bitcast %struct.mz_zip_array* %50 to i8*
  %52 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i41, align 8
  %53 = bitcast %struct.mz_zip_array* %52 to i8*
  %54 = call i64 @llvm.objectsize.i64.p0i8(i8* %53, i1 false) #10
  %call.i45 = call i8* @__memset_chk(i8* %51, i32 0, i64 32, i64 %54) #10
  %55 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %55, i32 0, i32 6
  %56 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8
  %tobool16 = icmp ne %struct.__sFILE* %56, null
  br i1 %tobool16, label %if.then17, label %if.end30

if.then17:                                        ; preds = %if.then13
  %57 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %57, i32 0, i32 4
  %58 = load i32, i32* %m_zip_type, align 8
  %cmp18 = icmp eq i32 %58, 4
  br i1 %cmp18, label %if.then19, label %if.end28

if.then19:                                        ; preds = %if.then17
  %59 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile20 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %59, i32 0, i32 6
  %60 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile20, align 8
  %call = call i32 @fclose(%struct.__sFILE* %60)
  %cmp21 = icmp eq i32 %call, -1
  br i1 %cmp21, label %if.then22, label %if.end27

if.then22:                                        ; preds = %if.then19
  %61 = load i32, i32* %set_last_error.addr, align 4
  %tobool23 = icmp ne i32 %61, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.then22
  %62 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_last_error25 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %62, i32 0, i32 5
  store i32 21, i32* %m_last_error25, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.then22
  store i32 0, i32* %status, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then19
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then17
  %63 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile29 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %63, i32 0, i32 6
  store %struct.__sFILE* null, %struct.__sFILE** %m_pFile29, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.end28, %if.then13
  %64 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %64, i32 0, i32 8
  %65 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree31, align 8
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %66, i32 0, i32 10
  %67 = load i8*, i8** %m_pAlloc_opaque, align 8
  %68 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %69 = bitcast %struct.mz_zip_internal_state_tag* %68 to i8*
  call void %65(i8* %67, i8* %69)
  br label %if.end32

if.end32:                                         ; preds = %if.end30, %if.end10
  %70 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %70, i32 0, i32 3
  store i32 0, i32* %m_zip_mode33, align 4
  %71 = load i32, i32* %status, align 4
  store i32 %71, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end32, %if.end9, %if.then
  %72 = load i32, i32* %retval, align 4
  ret i32 %72
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_init(%struct.mz_zip_archive* %pZip, i64 %size, i32 %flags) #0 {
entry:
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 11
  %2 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool1 = icmp ne i64 (i8*, i64, i8*, i64)* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %3, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %4, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %5 = load i32, i32* %err_num.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 5
  store i32 %5, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %8 = load i32, i32* %flags.addr, align 4
  %call2 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %7, i32 %8)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 4
  store i32 1, i32* %m_zip_type, align 8
  %10 = load i64, i64* %size.addr, align 8
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 0
  store i64 %10, i64* %m_archive_size, align 8
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %13 = load i32, i32* %flags.addr, align 4
  %call6 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %12, i32 %13)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end5
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call9 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %14, i32 0)
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end5
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end10, %if.then8, %if.then4, %mz_zip_set_error.exit
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %pZip, i32 %flags) #0 {
entry:
  %pZip.addr.i34 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i35 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 3
  %5 = load i32, i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %6, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %7, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %8 = load i32, i32* %err_num.addr.i, align 4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 5
  store i32 %8, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 7
  %11 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %11, null
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 7
  store i8* (i8*, i64, i64)* @miniz_def_alloc_func, i8* (i8*, i64, i64)** %m_pAlloc5, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 8
  %14 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %tobool7 = icmp ne void (i8*, i8*)* %14, null
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end6
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree9 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 8
  store void (i8*, i8*)* @miniz_def_free_func, void (i8*, i8*)** %m_pFree9, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.end6
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 9
  %17 = load i8* (i8*, i8*, i64, i64)*, i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8
  %tobool11 = icmp ne i8* (i8*, i8*, i64, i64)* %17, null
  br i1 %tobool11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.end10
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRealloc13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 9
  store i8* (i8*, i8*, i64, i64)* @miniz_def_realloc_func, i8* (i8*, i8*, i64, i64)** %m_pRealloc13, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end10
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 0
  store i64 0, i64* %m_archive_size, align 8
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs, align 8
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 2
  store i32 0, i32* %m_total_files, align 8
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 5
  store i32 0, i32* %m_last_error, align 4
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 7
  %24 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc15, align 8
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 10
  %26 = load i8*, i8** %m_pAlloc_opaque, align 8
  %call16 = call i8* %24(i8* %26, i64 1, i64 152)
  %27 = bitcast i8* %call16 to %struct.mz_zip_internal_state_tag*
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState17 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 15
  store %struct.mz_zip_internal_state_tag* %27, %struct.mz_zip_internal_state_tag** %m_pState17, align 8
  %cmp18 = icmp eq %struct.mz_zip_internal_state_tag* null, %27
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end14
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %29, %struct.mz_zip_archive** %pZip.addr.i34, align 8
  store i32 16, i32* %err_num.addr.i35, align 4
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i34, align 8
  %tobool.i36 = icmp ne %struct.mz_zip_archive* %30, null
  br i1 %tobool.i36, label %if.then.i38, label %mz_zip_set_error.exit39

if.then.i38:                                      ; preds = %if.then19
  %31 = load i32, i32* %err_num.addr.i35, align 4
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i34, align 8
  %m_last_error.i37 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 5
  store i32 %31, i32* %m_last_error.i37, align 4
  br label %mz_zip_set_error.exit39

mz_zip_set_error.exit39:                          ; preds = %if.then19, %if.then.i38
  store i32 0, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end14
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState22 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 15
  %34 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState22, align 8
  %35 = bitcast %struct.mz_zip_internal_state_tag* %34 to i8*
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState23 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 15
  %37 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState23, align 8
  %38 = bitcast %struct.mz_zip_internal_state_tag* %37 to i8*
  %39 = call i64 @llvm.objectsize.i64.p0i8(i8* %38, i1 false)
  %call24 = call i8* @__memset_chk(i8* %35, i32 0, i64 152, i64 %39) #10
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState25 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 15
  %41 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState25, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %41, i32 0, i32 0
  %m_element_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 3
  store i32 1, i32* %m_element_size, align 8
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState26 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %42, i32 0, i32 15
  %43 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState26, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %43, i32 0, i32 1
  %m_element_size27 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size27, align 8
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState28 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 15
  %45 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState28, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %45, i32 0, i32 2
  %m_element_size29 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size29, align 8
  %46 = load i32, i32* %flags.addr, align 4
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState30 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %47, i32 0, i32 15
  %48 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState30, align 8
  %m_init_flags = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %48, i32 0, i32 3
  store i32 %46, i32* %m_init_flags, align 8
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %49, i32 0, i32 15
  %50 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState31, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %50, i32 0, i32 4
  store i32 0, i32* %m_zip64, align 4
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState32 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %51, i32 0, i32 15
  %52 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState32, align 8
  %m_zip64_has_extended_info_fields = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %52, i32 0, i32 5
  store i32 0, i32* %m_zip64_has_extended_info_fields, align 8
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %53, i32 0, i32 3
  store i32 1, i32* %m_zip_mode33, align 4
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end21, %mz_zip_set_error.exit39, %mz_zip_set_error.exit
  %54 = load i32, i32* %retval, align 4
  ret i32 %54
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %pZip, i32 %flags) #0 {
entry:
  %pZip.addr.i605 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i606 = alloca i32, align 4
  %pZip.addr.i598 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i599 = alloca i32, align 4
  %pZip.addr.i591 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i592 = alloca i32, align 4
  %pZip.addr.i584 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i585 = alloca i32, align 4
  %pZip.addr.i577 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i578 = alloca i32, align 4
  %pZip.addr.i570 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i571 = alloca i32, align 4
  %pZip.addr.i563 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i564 = alloca i32, align 4
  %pZip.addr.i556 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i557 = alloca i32, align 4
  %retval.i541 = alloca i32, align 4
  %pZip.addr.i542 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i543 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i544 = alloca i64, align 8
  %growing.addr.i545 = alloca i32, align 4
  %pZip.addr.i534 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i535 = alloca i32, align 4
  %retval.i519 = alloca i32, align 4
  %pZip.addr.i520 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i521 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i522 = alloca i64, align 8
  %growing.addr.i523 = alloca i32, align 4
  %pZip.addr.i512 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i513 = alloca i32, align 4
  %pZip.addr.i505 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i506 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %pZip.addr.i502 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i = alloca i64, align 8
  %growing.addr.i = alloca i32, align 4
  %pZip.addr.i496 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i497 = alloca i32, align 4
  %pZip.addr.i490 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i491 = alloca i32, align 4
  %pZip.addr.i484 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i485 = alloca i32, align 4
  %pZip.addr.i478 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i479 = alloca i32, align 4
  %pZip.addr.i472 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i473 = alloca i32, align 4
  %pZip.addr.i466 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i467 = alloca i32, align 4
  %pZip.addr.i460 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i461 = alloca i32, align 4
  %pZip.addr.i454 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i455 = alloca i32, align 4
  %pZip.addr.i448 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i449 = alloca i32, align 4
  %pZip.addr.i442 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i443 = alloca i32, align 4
  %pZip.addr.i436 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i437 = alloca i32, align 4
  %pZip.addr.i430 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i431 = alloca i32, align 4
  %pZip.addr.i424 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i425 = alloca i32, align 4
  %pZip.addr.i418 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i419 = alloca i32, align 4
  %pZip.addr.i412 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i413 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %flags.addr = alloca i32, align 4
  %cdir_size = alloca i32, align 4
  %cdir_entries_on_this_disk = alloca i32, align 4
  %num_this_disk = alloca i32, align 4
  %cdir_disk_index = alloca i32, align 4
  %cdir_ofs = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %p = alloca i8*, align 8
  %buf_u32 = alloca [1024 x i32], align 16
  %pBuf = alloca i8*, align 8
  %sort_central_dir = alloca i32, align 4
  %zip64_end_of_central_dir_locator_u32 = alloca [5 x i32], align 16
  %pZip64_locator = alloca i8*, align 8
  %zip64_end_of_central_dir_header_u32 = alloca [14 x i32], align 16
  %pZip64_end_of_central_dir = alloca i8*, align 8
  %zip64_end_of_central_dir_ofs = alloca i64, align 8
  %zip64_total_num_of_disks = alloca i32, align 4
  %zip64_cdir_total_entries = alloca i64, align 8
  %zip64_cdir_total_entries_on_this_disk = alloca i64, align 8
  %zip64_size_of_end_of_central_dir_record = alloca i64, align 8
  %zip64_size_of_central_directory = alloca i64, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %total_header_size = alloca i32, align 4
  %disk_index = alloca i32, align 4
  %bit_flags = alloca i32, align 4
  %filename_size = alloca i32, align 4
  %ext_data_size = alloca i32, align 4
  %comp_size = alloca i64, align 8
  %decomp_size = alloca i64, align 8
  %local_header_ofs = alloca i64, align 8
  %extra_size_remaining = alloca i32, align 4
  %pExtra_data = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %cdir_size, align 4
  store i32 0, i32* %cdir_entries_on_this_disk, align 4
  store i32 0, i32* %num_this_disk, align 4
  store i32 0, i32* %cdir_disk_index, align 4
  store i64 0, i64* %cdir_ofs, align 8
  store i64 0, i64* %cur_file_ofs, align 8
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %buf_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pBuf, align 8
  %1 = load i32, i32* %flags.addr, align 4
  %and = and i32 %1, 2048
  %cmp = icmp eq i32 %and, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %sort_central_dir, align 4
  %arraydecay1 = getelementptr inbounds [5 x i32], [5 x i32]* %zip64_end_of_central_dir_locator_u32, i32 0, i32 0
  %2 = bitcast i32* %arraydecay1 to i8*
  store i8* %2, i8** %pZip64_locator, align 8
  %arraydecay2 = getelementptr inbounds [14 x i32], [14 x i32]* %zip64_end_of_central_dir_header_u32, i32 0, i32 0
  %3 = bitcast i32* %arraydecay2 to i8*
  store i8* %3, i8** %pZip64_end_of_central_dir, align 8
  store i64 0, i64* %zip64_end_of_central_dir_ofs, align 8
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 0
  %5 = load i64, i64* %m_archive_size, align 8
  %cmp3 = icmp ult i64 %5, 22
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %6, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 8, i32* %err_num.addr.i, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %7, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %8 = load i32, i32* %err_num.addr.i, align 4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 5
  store i32 %8, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call5 = call i32 @mz_zip_reader_locate_header_sig(%struct.mz_zip_archive* %10, i32 101010256, i32 22, i64* %cur_file_ofs)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.end
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %11, %struct.mz_zip_archive** %pZip.addr.i412, align 8
  store i32 7, i32* %err_num.addr.i413, align 4
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i412, align 8
  %tobool.i414 = icmp ne %struct.mz_zip_archive* %12, null
  br i1 %tobool.i414, label %if.then.i416, label %mz_zip_set_error.exit417

if.then.i416:                                     ; preds = %if.then6
  %13 = load i32, i32* %err_num.addr.i413, align 4
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i412, align 8
  %m_last_error.i415 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 5
  store i32 %13, i32* %m_last_error.i415, align 4
  br label %mz_zip_set_error.exit417

mz_zip_set_error.exit417:                         ; preds = %if.then6, %if.then.i416
  store i32 0, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 11
  %16 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 14
  %18 = load i8*, i8** %m_pIO_opaque, align 8
  %19 = load i64, i64* %cur_file_ofs, align 8
  %20 = load i8*, i8** %pBuf, align 8
  %call9 = call i64 %16(i8* %18, i64 %19, i8* %20, i64 22)
  %cmp10 = icmp ne i64 %call9, 22
  br i1 %cmp10, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end8
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %21, %struct.mz_zip_archive** %pZip.addr.i466, align 8
  store i32 20, i32* %err_num.addr.i467, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i466, align 8
  %tobool.i468 = icmp ne %struct.mz_zip_archive* %22, null
  br i1 %tobool.i468, label %if.then.i470, label %mz_zip_set_error.exit471

if.then.i470:                                     ; preds = %if.then12
  %23 = load i32, i32* %err_num.addr.i467, align 4
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i466, align 8
  %m_last_error.i469 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %24, i32 0, i32 5
  store i32 %23, i32* %m_last_error.i469, align 4
  br label %mz_zip_set_error.exit471

mz_zip_set_error.exit471:                         ; preds = %if.then12, %if.then.i470
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end8
  %25 = load i8*, i8** %pBuf, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 0
  %26 = bitcast i8* %add.ptr to i32*
  %27 = load i32, i32* %26, align 4
  %cmp15 = icmp ne i32 %27, 101010256
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end14
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %28, %struct.mz_zip_archive** %pZip.addr.i490, align 8
  store i32 8, i32* %err_num.addr.i491, align 4
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i490, align 8
  %tobool.i492 = icmp ne %struct.mz_zip_archive* %29, null
  br i1 %tobool.i492, label %if.then.i494, label %mz_zip_set_error.exit495

if.then.i494:                                     ; preds = %if.then17
  %30 = load i32, i32* %err_num.addr.i491, align 4
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i490, align 8
  %m_last_error.i493 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 5
  store i32 %30, i32* %m_last_error.i493, align 4
  br label %mz_zip_set_error.exit495

mz_zip_set_error.exit495:                         ; preds = %if.then17, %if.then.i494
  store i32 0, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %if.end14
  %32 = load i64, i64* %cur_file_ofs, align 8
  %cmp20 = icmp sge i64 %32, 76
  br i1 %cmp20, label %if.then22, label %if.end59

if.then22:                                        ; preds = %if.end19
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead23 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 11
  %34 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead23, align 8
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque24 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 14
  %36 = load i8*, i8** %m_pIO_opaque24, align 8
  %37 = load i64, i64* %cur_file_ofs, align 8
  %sub = sub nsw i64 %37, 20
  %38 = load i8*, i8** %pZip64_locator, align 8
  %call25 = call i64 %34(i8* %36, i64 %sub, i8* %38, i64 20)
  %cmp26 = icmp eq i64 %call25, 20
  br i1 %cmp26, label %if.then28, label %if.end58

if.then28:                                        ; preds = %if.then22
  %39 = load i8*, i8** %pZip64_locator, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %39, i64 0
  %40 = bitcast i8* %add.ptr29 to i32*
  %41 = load i32, i32* %40, align 4
  %cmp30 = icmp eq i32 %41, 117853008
  br i1 %cmp30, label %if.then32, label %if.end57

if.then32:                                        ; preds = %if.then28
  %42 = load i8*, i8** %pZip64_locator, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %42, i64 8
  %43 = bitcast i8* %add.ptr33 to i32*
  %44 = load i32, i32* %43, align 4
  %conv34 = zext i32 %44 to i64
  %45 = load i8*, i8** %pZip64_locator, align 8
  %add.ptr35 = getelementptr inbounds i8, i8* %45, i64 8
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr35, i64 4
  %46 = bitcast i8* %add.ptr36 to i32*
  %47 = load i32, i32* %46, align 4
  %conv37 = zext i32 %47 to i64
  %shl = shl i64 %conv37, 32
  %or = or i64 %conv34, %shl
  store i64 %or, i64* %zip64_end_of_central_dir_ofs, align 8
  %48 = load i64, i64* %zip64_end_of_central_dir_ofs, align 8
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size38 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %49, i32 0, i32 0
  %50 = load i64, i64* %m_archive_size38, align 8
  %sub39 = sub i64 %50, 56
  %cmp40 = icmp ugt i64 %48, %sub39
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.then32
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %51, %struct.mz_zip_archive** %pZip.addr.i505, align 8
  store i32 8, i32* %err_num.addr.i506, align 4
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i505, align 8
  %tobool.i507 = icmp ne %struct.mz_zip_archive* %52, null
  br i1 %tobool.i507, label %if.then.i509, label %mz_zip_set_error.exit511

if.then.i509:                                     ; preds = %if.then42
  %53 = load i32, i32* %err_num.addr.i506, align 4
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i505, align 8
  %m_last_error.i508 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %54, i32 0, i32 5
  store i32 %53, i32* %m_last_error.i508, align 4
  br label %mz_zip_set_error.exit511

mz_zip_set_error.exit511:                         ; preds = %if.then42, %if.then.i509
  store i32 0, i32* %retval, align 4
  br label %return

if.end44:                                         ; preds = %if.then32
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead45 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %55, i32 0, i32 11
  %56 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead45, align 8
  %57 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque46 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %57, i32 0, i32 14
  %58 = load i8*, i8** %m_pIO_opaque46, align 8
  %59 = load i64, i64* %zip64_end_of_central_dir_ofs, align 8
  %60 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %call47 = call i64 %56(i8* %58, i64 %59, i8* %60, i64 56)
  %cmp48 = icmp eq i64 %call47, 56
  br i1 %cmp48, label %if.then50, label %if.end56

if.then50:                                        ; preds = %if.end44
  %61 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr51 = getelementptr inbounds i8, i8* %61, i64 0
  %62 = bitcast i8* %add.ptr51 to i32*
  %63 = load i32, i32* %62, align 4
  %cmp52 = icmp eq i32 %63, 101075792
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.then50
  %64 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %64, i32 0, i32 15
  %65 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %65, i32 0, i32 4
  store i32 1, i32* %m_zip64, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.then54, %if.then50
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end44
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then28
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then22
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end19
  %66 = load i8*, i8** %pBuf, align 8
  %add.ptr60 = getelementptr inbounds i8, i8* %66, i64 10
  %67 = bitcast i8* %add.ptr60 to i16*
  %68 = load i16, i16* %67, align 2
  %conv61 = zext i16 %68 to i32
  %69 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %69, i32 0, i32 2
  store i32 %conv61, i32* %m_total_files, align 8
  %70 = load i8*, i8** %pBuf, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %70, i64 8
  %71 = bitcast i8* %add.ptr62 to i16*
  %72 = load i16, i16* %71, align 2
  %conv63 = zext i16 %72 to i32
  store i32 %conv63, i32* %cdir_entries_on_this_disk, align 4
  %73 = load i8*, i8** %pBuf, align 8
  %add.ptr64 = getelementptr inbounds i8, i8* %73, i64 4
  %74 = bitcast i8* %add.ptr64 to i16*
  %75 = load i16, i16* %74, align 2
  %conv65 = zext i16 %75 to i32
  store i32 %conv65, i32* %num_this_disk, align 4
  %76 = load i8*, i8** %pBuf, align 8
  %add.ptr66 = getelementptr inbounds i8, i8* %76, i64 6
  %77 = bitcast i8* %add.ptr66 to i16*
  %78 = load i16, i16* %77, align 2
  %conv67 = zext i16 %78 to i32
  store i32 %conv67, i32* %cdir_disk_index, align 4
  %79 = load i8*, i8** %pBuf, align 8
  %add.ptr68 = getelementptr inbounds i8, i8* %79, i64 12
  %80 = bitcast i8* %add.ptr68 to i32*
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %cdir_size, align 4
  %82 = load i8*, i8** %pBuf, align 8
  %add.ptr69 = getelementptr inbounds i8, i8* %82, i64 16
  %83 = bitcast i8* %add.ptr69 to i32*
  %84 = load i32, i32* %83, align 4
  %conv70 = zext i32 %84 to i64
  store i64 %conv70, i64* %cdir_ofs, align 8
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState71 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %85, i32 0, i32 15
  %86 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState71, align 8
  %m_zip6472 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %86, i32 0, i32 4
  %87 = load i32, i32* %m_zip6472, align 4
  %tobool73 = icmp ne i32 %87, 0
  br i1 %tobool73, label %if.then74, label %if.end142

if.then74:                                        ; preds = %if.end59
  %88 = load i8*, i8** %pZip64_locator, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %88, i64 16
  %89 = bitcast i8* %add.ptr75 to i32*
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %zip64_total_num_of_disks, align 4
  %91 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr76 = getelementptr inbounds i8, i8* %91, i64 32
  %92 = bitcast i8* %add.ptr76 to i32*
  %93 = load i32, i32* %92, align 4
  %conv77 = zext i32 %93 to i64
  %94 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr78 = getelementptr inbounds i8, i8* %94, i64 32
  %add.ptr79 = getelementptr inbounds i8, i8* %add.ptr78, i64 4
  %95 = bitcast i8* %add.ptr79 to i32*
  %96 = load i32, i32* %95, align 4
  %conv80 = zext i32 %96 to i64
  %shl81 = shl i64 %conv80, 32
  %or82 = or i64 %conv77, %shl81
  store i64 %or82, i64* %zip64_cdir_total_entries, align 8
  %97 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr83 = getelementptr inbounds i8, i8* %97, i64 24
  %98 = bitcast i8* %add.ptr83 to i32*
  %99 = load i32, i32* %98, align 4
  %conv84 = zext i32 %99 to i64
  %100 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr85 = getelementptr inbounds i8, i8* %100, i64 24
  %add.ptr86 = getelementptr inbounds i8, i8* %add.ptr85, i64 4
  %101 = bitcast i8* %add.ptr86 to i32*
  %102 = load i32, i32* %101, align 4
  %conv87 = zext i32 %102 to i64
  %shl88 = shl i64 %conv87, 32
  %or89 = or i64 %conv84, %shl88
  store i64 %or89, i64* %zip64_cdir_total_entries_on_this_disk, align 8
  %103 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr90 = getelementptr inbounds i8, i8* %103, i64 4
  %104 = bitcast i8* %add.ptr90 to i32*
  %105 = load i32, i32* %104, align 4
  %conv91 = zext i32 %105 to i64
  %106 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %106, i64 4
  %add.ptr93 = getelementptr inbounds i8, i8* %add.ptr92, i64 4
  %107 = bitcast i8* %add.ptr93 to i32*
  %108 = load i32, i32* %107, align 4
  %conv94 = zext i32 %108 to i64
  %shl95 = shl i64 %conv94, 32
  %or96 = or i64 %conv91, %shl95
  store i64 %or96, i64* %zip64_size_of_end_of_central_dir_record, align 8
  %109 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr97 = getelementptr inbounds i8, i8* %109, i64 40
  %110 = bitcast i8* %add.ptr97 to i32*
  %111 = load i32, i32* %110, align 4
  %conv98 = zext i32 %111 to i64
  %112 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr99 = getelementptr inbounds i8, i8* %112, i64 40
  %add.ptr100 = getelementptr inbounds i8, i8* %add.ptr99, i64 4
  %113 = bitcast i8* %add.ptr100 to i32*
  %114 = load i32, i32* %113, align 4
  %conv101 = zext i32 %114 to i64
  %shl102 = shl i64 %conv101, 32
  %or103 = or i64 %conv98, %shl102
  store i64 %or103, i64* %zip64_size_of_central_directory, align 8
  %115 = load i64, i64* %zip64_size_of_end_of_central_dir_record, align 8
  %cmp104 = icmp ult i64 %115, 44
  br i1 %cmp104, label %if.then106, label %if.end108

if.then106:                                       ; preds = %if.then74
  %116 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %116, %struct.mz_zip_archive** %pZip.addr.i534, align 8
  store i32 9, i32* %err_num.addr.i535, align 4
  %117 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i534, align 8
  %tobool.i536 = icmp ne %struct.mz_zip_archive* %117, null
  br i1 %tobool.i536, label %if.then.i538, label %mz_zip_set_error.exit540

if.then.i538:                                     ; preds = %if.then106
  %118 = load i32, i32* %err_num.addr.i535, align 4
  %119 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i534, align 8
  %m_last_error.i537 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %119, i32 0, i32 5
  store i32 %118, i32* %m_last_error.i537, align 4
  br label %mz_zip_set_error.exit540

mz_zip_set_error.exit540:                         ; preds = %if.then106, %if.then.i538
  store i32 0, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %if.then74
  %120 = load i32, i32* %zip64_total_num_of_disks, align 4
  %cmp109 = icmp ne i32 %120, 1
  br i1 %cmp109, label %if.then111, label %if.end113

if.then111:                                       ; preds = %if.end108
  %121 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %121, %struct.mz_zip_archive** %pZip.addr.i556, align 8
  store i32 10, i32* %err_num.addr.i557, align 4
  %122 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i556, align 8
  %tobool.i558 = icmp ne %struct.mz_zip_archive* %122, null
  br i1 %tobool.i558, label %if.then.i560, label %mz_zip_set_error.exit562

if.then.i560:                                     ; preds = %if.then111
  %123 = load i32, i32* %err_num.addr.i557, align 4
  %124 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i556, align 8
  %m_last_error.i559 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %124, i32 0, i32 5
  store i32 %123, i32* %m_last_error.i559, align 4
  br label %mz_zip_set_error.exit562

mz_zip_set_error.exit562:                         ; preds = %if.then111, %if.then.i560
  store i32 0, i32* %retval, align 4
  br label %return

if.end113:                                        ; preds = %if.end108
  %125 = load i64, i64* %zip64_cdir_total_entries, align 8
  %cmp114 = icmp ugt i64 %125, 4294967295
  br i1 %cmp114, label %if.then116, label %if.end118

if.then116:                                       ; preds = %if.end113
  %126 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %126, %struct.mz_zip_archive** %pZip.addr.i605, align 8
  store i32 2, i32* %err_num.addr.i606, align 4
  %127 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i605, align 8
  %tobool.i607 = icmp ne %struct.mz_zip_archive* %127, null
  br i1 %tobool.i607, label %if.then.i609, label %mz_zip_set_error.exit611

if.then.i609:                                     ; preds = %if.then116
  %128 = load i32, i32* %err_num.addr.i606, align 4
  %129 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i605, align 8
  %m_last_error.i608 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %129, i32 0, i32 5
  store i32 %128, i32* %m_last_error.i608, align 4
  br label %mz_zip_set_error.exit611

mz_zip_set_error.exit611:                         ; preds = %if.then116, %if.then.i609
  store i32 0, i32* %retval, align 4
  br label %return

if.end118:                                        ; preds = %if.end113
  %130 = load i64, i64* %zip64_cdir_total_entries, align 8
  %conv119 = trunc i64 %130 to i32
  %131 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files120 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %131, i32 0, i32 2
  store i32 %conv119, i32* %m_total_files120, align 8
  %132 = load i64, i64* %zip64_cdir_total_entries_on_this_disk, align 8
  %cmp121 = icmp ugt i64 %132, 4294967295
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %if.end118
  %133 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %133, %struct.mz_zip_archive** %pZip.addr.i598, align 8
  store i32 2, i32* %err_num.addr.i599, align 4
  %134 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i598, align 8
  %tobool.i600 = icmp ne %struct.mz_zip_archive* %134, null
  br i1 %tobool.i600, label %if.then.i602, label %mz_zip_set_error.exit604

if.then.i602:                                     ; preds = %if.then123
  %135 = load i32, i32* %err_num.addr.i599, align 4
  %136 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i598, align 8
  %m_last_error.i601 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %136, i32 0, i32 5
  store i32 %135, i32* %m_last_error.i601, align 4
  br label %mz_zip_set_error.exit604

mz_zip_set_error.exit604:                         ; preds = %if.then123, %if.then.i602
  store i32 0, i32* %retval, align 4
  br label %return

if.end125:                                        ; preds = %if.end118
  %137 = load i64, i64* %zip64_cdir_total_entries_on_this_disk, align 8
  %conv126 = trunc i64 %137 to i32
  store i32 %conv126, i32* %cdir_entries_on_this_disk, align 4
  %138 = load i64, i64* %zip64_size_of_central_directory, align 8
  %cmp127 = icmp ugt i64 %138, 4294967295
  br i1 %cmp127, label %if.then129, label %if.end131

if.then129:                                       ; preds = %if.end125
  %139 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %139, %struct.mz_zip_archive** %pZip.addr.i591, align 8
  store i32 15, i32* %err_num.addr.i592, align 4
  %140 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i591, align 8
  %tobool.i593 = icmp ne %struct.mz_zip_archive* %140, null
  br i1 %tobool.i593, label %if.then.i595, label %mz_zip_set_error.exit597

if.then.i595:                                     ; preds = %if.then129
  %141 = load i32, i32* %err_num.addr.i592, align 4
  %142 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i591, align 8
  %m_last_error.i594 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %142, i32 0, i32 5
  store i32 %141, i32* %m_last_error.i594, align 4
  br label %mz_zip_set_error.exit597

mz_zip_set_error.exit597:                         ; preds = %if.then129, %if.then.i595
  store i32 0, i32* %retval, align 4
  br label %return

if.end131:                                        ; preds = %if.end125
  %143 = load i64, i64* %zip64_size_of_central_directory, align 8
  %conv132 = trunc i64 %143 to i32
  store i32 %conv132, i32* %cdir_size, align 4
  %144 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr133 = getelementptr inbounds i8, i8* %144, i64 16
  %145 = bitcast i8* %add.ptr133 to i32*
  %146 = load i32, i32* %145, align 4
  store i32 %146, i32* %num_this_disk, align 4
  %147 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr134 = getelementptr inbounds i8, i8* %147, i64 20
  %148 = bitcast i8* %add.ptr134 to i32*
  %149 = load i32, i32* %148, align 4
  store i32 %149, i32* %cdir_disk_index, align 4
  %150 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr135 = getelementptr inbounds i8, i8* %150, i64 48
  %151 = bitcast i8* %add.ptr135 to i32*
  %152 = load i32, i32* %151, align 4
  %conv136 = zext i32 %152 to i64
  %153 = load i8*, i8** %pZip64_end_of_central_dir, align 8
  %add.ptr137 = getelementptr inbounds i8, i8* %153, i64 48
  %add.ptr138 = getelementptr inbounds i8, i8* %add.ptr137, i64 4
  %154 = bitcast i8* %add.ptr138 to i32*
  %155 = load i32, i32* %154, align 4
  %conv139 = zext i32 %155 to i64
  %shl140 = shl i64 %conv139, 32
  %or141 = or i64 %conv136, %shl140
  store i64 %or141, i64* %cdir_ofs, align 8
  br label %if.end142

if.end142:                                        ; preds = %if.end131, %if.end59
  %156 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files143 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %156, i32 0, i32 2
  %157 = load i32, i32* %m_total_files143, align 8
  %158 = load i32, i32* %cdir_entries_on_this_disk, align 4
  %cmp144 = icmp ne i32 %157, %158
  br i1 %cmp144, label %if.then146, label %if.end148

if.then146:                                       ; preds = %if.end142
  %159 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %159, %struct.mz_zip_archive** %pZip.addr.i584, align 8
  store i32 10, i32* %err_num.addr.i585, align 4
  %160 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i584, align 8
  %tobool.i586 = icmp ne %struct.mz_zip_archive* %160, null
  br i1 %tobool.i586, label %if.then.i588, label %mz_zip_set_error.exit590

if.then.i588:                                     ; preds = %if.then146
  %161 = load i32, i32* %err_num.addr.i585, align 4
  %162 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i584, align 8
  %m_last_error.i587 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %162, i32 0, i32 5
  store i32 %161, i32* %m_last_error.i587, align 4
  br label %mz_zip_set_error.exit590

mz_zip_set_error.exit590:                         ; preds = %if.then146, %if.then.i588
  store i32 0, i32* %retval, align 4
  br label %return

if.end148:                                        ; preds = %if.end142
  %163 = load i32, i32* %num_this_disk, align 4
  %164 = load i32, i32* %cdir_disk_index, align 4
  %or149 = or i32 %163, %164
  %cmp150 = icmp ne i32 %or149, 0
  br i1 %cmp150, label %land.lhs.true, label %if.end158

land.lhs.true:                                    ; preds = %if.end148
  %165 = load i32, i32* %num_this_disk, align 4
  %cmp152 = icmp ne i32 %165, 1
  br i1 %cmp152, label %if.then156, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %166 = load i32, i32* %cdir_disk_index, align 4
  %cmp154 = icmp ne i32 %166, 1
  br i1 %cmp154, label %if.then156, label %if.end158

if.then156:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %167 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %167, %struct.mz_zip_archive** %pZip.addr.i577, align 8
  store i32 10, i32* %err_num.addr.i578, align 4
  %168 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i577, align 8
  %tobool.i579 = icmp ne %struct.mz_zip_archive* %168, null
  br i1 %tobool.i579, label %if.then.i581, label %mz_zip_set_error.exit583

if.then.i581:                                     ; preds = %if.then156
  %169 = load i32, i32* %err_num.addr.i578, align 4
  %170 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i577, align 8
  %m_last_error.i580 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %170, i32 0, i32 5
  store i32 %169, i32* %m_last_error.i580, align 4
  br label %mz_zip_set_error.exit583

mz_zip_set_error.exit583:                         ; preds = %if.then156, %if.then.i581
  store i32 0, i32* %retval, align 4
  br label %return

if.end158:                                        ; preds = %lor.lhs.false, %if.end148
  %171 = load i32, i32* %cdir_size, align 4
  %172 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files159 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %172, i32 0, i32 2
  %173 = load i32, i32* %m_total_files159, align 8
  %mul = mul i32 %173, 46
  %cmp160 = icmp ult i32 %171, %mul
  br i1 %cmp160, label %if.then162, label %if.end164

if.then162:                                       ; preds = %if.end158
  %174 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %174, %struct.mz_zip_archive** %pZip.addr.i570, align 8
  store i32 9, i32* %err_num.addr.i571, align 4
  %175 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i570, align 8
  %tobool.i572 = icmp ne %struct.mz_zip_archive* %175, null
  br i1 %tobool.i572, label %if.then.i574, label %mz_zip_set_error.exit576

if.then.i574:                                     ; preds = %if.then162
  %176 = load i32, i32* %err_num.addr.i571, align 4
  %177 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i570, align 8
  %m_last_error.i573 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %177, i32 0, i32 5
  store i32 %176, i32* %m_last_error.i573, align 4
  br label %mz_zip_set_error.exit576

mz_zip_set_error.exit576:                         ; preds = %if.then162, %if.then.i574
  store i32 0, i32* %retval, align 4
  br label %return

if.end164:                                        ; preds = %if.end158
  %178 = load i64, i64* %cdir_ofs, align 8
  %179 = load i32, i32* %cdir_size, align 4
  %conv165 = zext i32 %179 to i64
  %add = add i64 %178, %conv165
  %180 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size166 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %180, i32 0, i32 0
  %181 = load i64, i64* %m_archive_size166, align 8
  %cmp167 = icmp ugt i64 %add, %181
  br i1 %cmp167, label %if.then169, label %if.end171

if.then169:                                       ; preds = %if.end164
  %182 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %182, %struct.mz_zip_archive** %pZip.addr.i563, align 8
  store i32 9, i32* %err_num.addr.i564, align 4
  %183 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i563, align 8
  %tobool.i565 = icmp ne %struct.mz_zip_archive* %183, null
  br i1 %tobool.i565, label %if.then.i567, label %mz_zip_set_error.exit569

if.then.i567:                                     ; preds = %if.then169
  %184 = load i32, i32* %err_num.addr.i564, align 4
  %185 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i563, align 8
  %m_last_error.i566 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %185, i32 0, i32 5
  store i32 %184, i32* %m_last_error.i566, align 4
  br label %mz_zip_set_error.exit569

mz_zip_set_error.exit569:                         ; preds = %if.then169, %if.then.i567
  store i32 0, i32* %retval, align 4
  br label %return

if.end171:                                        ; preds = %if.end164
  %186 = load i64, i64* %cdir_ofs, align 8
  %187 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %187, i32 0, i32 1
  store i64 %186, i64* %m_central_directory_file_ofs, align 8
  %188 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files172 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %188, i32 0, i32 2
  %189 = load i32, i32* %m_total_files172, align 8
  %tobool173 = icmp ne i32 %189, 0
  br i1 %tobool173, label %if.then174, label %if.end408

if.then174:                                       ; preds = %if.end171
  %190 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %191 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState175 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %191, i32 0, i32 15
  %192 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState175, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %192, i32 0, i32 0
  %193 = load i32, i32* %cdir_size, align 4
  %conv176 = zext i32 %193 to i64
  store %struct.mz_zip_archive* %190, %struct.mz_zip_archive** %pZip.addr.i542, align 8
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pArray.addr.i543, align 8
  store i64 %conv176, i64* %new_size.addr.i544, align 8
  store i32 0, i32* %growing.addr.i545, align 4
  %194 = load i64, i64* %new_size.addr.i544, align 8
  %195 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i543, align 8
  %m_capacity.i546 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %195, i32 0, i32 2
  %196 = load i64, i64* %m_capacity.i546, align 8
  %cmp.i547 = icmp ugt i64 %194, %196
  br i1 %cmp.i547, label %if.then.i550, label %if.end2.i554

if.then.i550:                                     ; preds = %if.then174
  %197 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i542, align 8
  %198 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i543, align 8
  %199 = load i64, i64* %new_size.addr.i544, align 8
  %200 = load i32, i32* %growing.addr.i545, align 4
  %call.i548 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %197, %struct.mz_zip_array* %198, i64 %199, i32 %200) #10
  %tobool.i549 = icmp ne i32 %call.i548, 0
  br i1 %tobool.i549, label %if.end.i552, label %if.then1.i551

if.then1.i551:                                    ; preds = %if.then.i550
  store i32 0, i32* %retval.i541, align 4
  br label %mz_zip_array_resize.exit555

if.end.i552:                                      ; preds = %if.then.i550
  br label %if.end2.i554

if.end2.i554:                                     ; preds = %if.end.i552, %if.then174
  %201 = load i64, i64* %new_size.addr.i544, align 8
  %202 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i543, align 8
  %m_size.i553 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %202, i32 0, i32 1
  store i64 %201, i64* %m_size.i553, align 8
  store i32 1, i32* %retval.i541, align 4
  br label %mz_zip_array_resize.exit555

mz_zip_array_resize.exit555:                      ; preds = %if.then1.i551, %if.end2.i554
  %203 = load i32, i32* %retval.i541, align 4
  %tobool178 = icmp ne i32 %203, 0
  br i1 %tobool178, label %lor.lhs.false179, label %if.then185

lor.lhs.false179:                                 ; preds = %mz_zip_array_resize.exit555
  %204 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %205 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState180 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %205, i32 0, i32 15
  %206 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState180, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %206, i32 0, i32 1
  %207 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files181 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %207, i32 0, i32 2
  %208 = load i32, i32* %m_total_files181, align 8
  %conv182 = zext i32 %208 to i64
  store %struct.mz_zip_archive* %204, %struct.mz_zip_archive** %pZip.addr.i520, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i521, align 8
  store i64 %conv182, i64* %new_size.addr.i522, align 8
  store i32 0, i32* %growing.addr.i523, align 4
  %209 = load i64, i64* %new_size.addr.i522, align 8
  %210 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i521, align 8
  %m_capacity.i524 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %210, i32 0, i32 2
  %211 = load i64, i64* %m_capacity.i524, align 8
  %cmp.i525 = icmp ugt i64 %209, %211
  br i1 %cmp.i525, label %if.then.i528, label %if.end2.i532

if.then.i528:                                     ; preds = %lor.lhs.false179
  %212 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i520, align 8
  %213 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i521, align 8
  %214 = load i64, i64* %new_size.addr.i522, align 8
  %215 = load i32, i32* %growing.addr.i523, align 4
  %call.i526 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %212, %struct.mz_zip_array* %213, i64 %214, i32 %215) #10
  %tobool.i527 = icmp ne i32 %call.i526, 0
  br i1 %tobool.i527, label %if.end.i530, label %if.then1.i529

if.then1.i529:                                    ; preds = %if.then.i528
  store i32 0, i32* %retval.i519, align 4
  br label %mz_zip_array_resize.exit533

if.end.i530:                                      ; preds = %if.then.i528
  br label %if.end2.i532

if.end2.i532:                                     ; preds = %if.end.i530, %lor.lhs.false179
  %216 = load i64, i64* %new_size.addr.i522, align 8
  %217 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i521, align 8
  %m_size.i531 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %217, i32 0, i32 1
  store i64 %216, i64* %m_size.i531, align 8
  store i32 1, i32* %retval.i519, align 4
  br label %mz_zip_array_resize.exit533

mz_zip_array_resize.exit533:                      ; preds = %if.then1.i529, %if.end2.i532
  %218 = load i32, i32* %retval.i519, align 4
  %tobool184 = icmp ne i32 %218, 0
  br i1 %tobool184, label %if.end187, label %if.then185

if.then185:                                       ; preds = %mz_zip_array_resize.exit533, %mz_zip_array_resize.exit555
  %219 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %219, %struct.mz_zip_archive** %pZip.addr.i512, align 8
  store i32 16, i32* %err_num.addr.i513, align 4
  %220 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i512, align 8
  %tobool.i514 = icmp ne %struct.mz_zip_archive* %220, null
  br i1 %tobool.i514, label %if.then.i516, label %mz_zip_set_error.exit518

if.then.i516:                                     ; preds = %if.then185
  %221 = load i32, i32* %err_num.addr.i513, align 4
  %222 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i512, align 8
  %m_last_error.i515 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %222, i32 0, i32 5
  store i32 %221, i32* %m_last_error.i515, align 4
  br label %mz_zip_set_error.exit518

mz_zip_set_error.exit518:                         ; preds = %if.then185, %if.then.i516
  store i32 0, i32* %retval, align 4
  br label %return

if.end187:                                        ; preds = %mz_zip_array_resize.exit533
  %223 = load i32, i32* %sort_central_dir, align 4
  %tobool188 = icmp ne i32 %223, 0
  br i1 %tobool188, label %if.then189, label %if.end198

if.then189:                                       ; preds = %if.end187
  %224 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %225 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState190 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %225, i32 0, i32 15
  %226 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState190, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %226, i32 0, i32 2
  %227 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files191 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %227, i32 0, i32 2
  %228 = load i32, i32* %m_total_files191, align 8
  %conv192 = zext i32 %228 to i64
  store %struct.mz_zip_archive* %224, %struct.mz_zip_archive** %pZip.addr.i502, align 8
  store %struct.mz_zip_array* %m_sorted_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i64 %conv192, i64* %new_size.addr.i, align 8
  store i32 0, i32* %growing.addr.i, align 4
  %229 = load i64, i64* %new_size.addr.i, align 8
  %230 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_capacity.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %230, i32 0, i32 2
  %231 = load i64, i64* %m_capacity.i, align 8
  %cmp.i = icmp ugt i64 %229, %231
  br i1 %cmp.i, label %if.then.i504, label %if.end2.i

if.then.i504:                                     ; preds = %if.then189
  %232 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i502, align 8
  %233 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %234 = load i64, i64* %new_size.addr.i, align 8
  %235 = load i32, i32* %growing.addr.i, align 4
  %call.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %232, %struct.mz_zip_array* %233, i64 %234, i32 %235) #10
  %tobool.i503 = icmp ne i32 %call.i, 0
  br i1 %tobool.i503, label %if.end.i, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i504
  store i32 0, i32* %retval.i, align 4
  br label %mz_zip_array_resize.exit

if.end.i:                                         ; preds = %if.then.i504
  br label %if.end2.i

if.end2.i:                                        ; preds = %if.end.i, %if.then189
  %236 = load i64, i64* %new_size.addr.i, align 8
  %237 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %237, i32 0, i32 1
  store i64 %236, i64* %m_size.i, align 8
  store i32 1, i32* %retval.i, align 4
  br label %mz_zip_array_resize.exit

mz_zip_array_resize.exit:                         ; preds = %if.then1.i, %if.end2.i
  %238 = load i32, i32* %retval.i, align 4
  %tobool194 = icmp ne i32 %238, 0
  br i1 %tobool194, label %if.end197, label %if.then195

if.then195:                                       ; preds = %mz_zip_array_resize.exit
  %239 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %239, %struct.mz_zip_archive** %pZip.addr.i496, align 8
  store i32 16, i32* %err_num.addr.i497, align 4
  %240 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i496, align 8
  %tobool.i498 = icmp ne %struct.mz_zip_archive* %240, null
  br i1 %tobool.i498, label %if.then.i500, label %mz_zip_set_error.exit501

if.then.i500:                                     ; preds = %if.then195
  %241 = load i32, i32* %err_num.addr.i497, align 4
  %242 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i496, align 8
  %m_last_error.i499 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %242, i32 0, i32 5
  store i32 %241, i32* %m_last_error.i499, align 4
  br label %mz_zip_set_error.exit501

mz_zip_set_error.exit501:                         ; preds = %if.then195, %if.then.i500
  store i32 0, i32* %retval, align 4
  br label %return

if.end197:                                        ; preds = %mz_zip_array_resize.exit
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %if.end187
  %243 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead199 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %243, i32 0, i32 11
  %244 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead199, align 8
  %245 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque200 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %245, i32 0, i32 14
  %246 = load i8*, i8** %m_pIO_opaque200, align 8
  %247 = load i64, i64* %cdir_ofs, align 8
  %248 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState201 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %248, i32 0, i32 15
  %249 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState201, align 8
  %m_central_dir202 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %249, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir202, i32 0, i32 0
  %250 = load i8*, i8** %m_p, align 8
  %251 = load i32, i32* %cdir_size, align 4
  %conv203 = zext i32 %251 to i64
  %call204 = call i64 %244(i8* %246, i64 %247, i8* %250, i64 %conv203)
  %252 = load i32, i32* %cdir_size, align 4
  %conv205 = zext i32 %252 to i64
  %cmp206 = icmp ne i64 %call204, %conv205
  br i1 %cmp206, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.end198
  %253 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %253, %struct.mz_zip_archive** %pZip.addr.i484, align 8
  store i32 20, i32* %err_num.addr.i485, align 4
  %254 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i484, align 8
  %tobool.i486 = icmp ne %struct.mz_zip_archive* %254, null
  br i1 %tobool.i486, label %if.then.i488, label %mz_zip_set_error.exit489

if.then.i488:                                     ; preds = %if.then208
  %255 = load i32, i32* %err_num.addr.i485, align 4
  %256 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i484, align 8
  %m_last_error.i487 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %256, i32 0, i32 5
  store i32 %255, i32* %m_last_error.i487, align 4
  br label %mz_zip_set_error.exit489

mz_zip_set_error.exit489:                         ; preds = %if.then208, %if.then.i488
  store i32 0, i32* %retval, align 4
  br label %return

if.end210:                                        ; preds = %if.end198
  %257 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState211 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %257, i32 0, i32 15
  %258 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState211, align 8
  %m_central_dir212 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %258, i32 0, i32 0
  %m_p213 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir212, i32 0, i32 0
  %259 = load i8*, i8** %m_p213, align 8
  store i8* %259, i8** %p, align 8
  %260 = load i32, i32* %cdir_size, align 4
  store i32 %260, i32* %n, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end210
  %261 = load i32, i32* %i, align 4
  %262 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files214 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %262, i32 0, i32 2
  %263 = load i32, i32* %m_total_files214, align 8
  %cmp215 = icmp ult i32 %261, %263
  br i1 %cmp215, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %264 = load i32, i32* %n, align 4
  %cmp217 = icmp ult i32 %264, 46
  br i1 %cmp217, label %if.then222, label %lor.lhs.false219

lor.lhs.false219:                                 ; preds = %for.body
  %265 = load i8*, i8** %p, align 8
  %266 = bitcast i8* %265 to i32*
  %267 = load i32, i32* %266, align 4
  %cmp220 = icmp ne i32 %267, 33639248
  br i1 %cmp220, label %if.then222, label %if.end224

if.then222:                                       ; preds = %lor.lhs.false219, %for.body
  %268 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %268, %struct.mz_zip_archive** %pZip.addr.i478, align 8
  store i32 9, i32* %err_num.addr.i479, align 4
  %269 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i478, align 8
  %tobool.i480 = icmp ne %struct.mz_zip_archive* %269, null
  br i1 %tobool.i480, label %if.then.i482, label %mz_zip_set_error.exit483

if.then.i482:                                     ; preds = %if.then222
  %270 = load i32, i32* %err_num.addr.i479, align 4
  %271 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i478, align 8
  %m_last_error.i481 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %271, i32 0, i32 5
  store i32 %270, i32* %m_last_error.i481, align 4
  br label %mz_zip_set_error.exit483

mz_zip_set_error.exit483:                         ; preds = %if.then222, %if.then.i482
  store i32 0, i32* %retval, align 4
  br label %return

if.end224:                                        ; preds = %lor.lhs.false219
  %272 = load i8*, i8** %p, align 8
  %273 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState225 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %273, i32 0, i32 15
  %274 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState225, align 8
  %m_central_dir226 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %274, i32 0, i32 0
  %m_p227 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir226, i32 0, i32 0
  %275 = load i8*, i8** %m_p227, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %272 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %275 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv228 = trunc i64 %sub.ptr.sub to i32
  %276 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState229 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %276, i32 0, i32 15
  %277 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState229, align 8
  %m_central_dir_offsets230 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %277, i32 0, i32 1
  %m_p231 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets230, i32 0, i32 0
  %278 = load i8*, i8** %m_p231, align 8
  %279 = bitcast i8* %278 to i32*
  %280 = load i32, i32* %i, align 4
  %idxprom = zext i32 %280 to i64
  %arrayidx = getelementptr inbounds i32, i32* %279, i64 %idxprom
  store i32 %conv228, i32* %arrayidx, align 4
  %281 = load i32, i32* %sort_central_dir, align 4
  %tobool232 = icmp ne i32 %281, 0
  br i1 %tobool232, label %if.then233, label %if.end239

if.then233:                                       ; preds = %if.end224
  %282 = load i32, i32* %i, align 4
  %283 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState234 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %283, i32 0, i32 15
  %284 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState234, align 8
  %m_sorted_central_dir_offsets235 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %284, i32 0, i32 2
  %m_p236 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets235, i32 0, i32 0
  %285 = load i8*, i8** %m_p236, align 8
  %286 = bitcast i8* %285 to i32*
  %287 = load i32, i32* %i, align 4
  %idxprom237 = zext i32 %287 to i64
  %arrayidx238 = getelementptr inbounds i32, i32* %286, i64 %idxprom237
  store i32 %282, i32* %arrayidx238, align 4
  br label %if.end239

if.end239:                                        ; preds = %if.then233, %if.end224
  %288 = load i8*, i8** %p, align 8
  %add.ptr240 = getelementptr inbounds i8, i8* %288, i64 20
  %289 = bitcast i8* %add.ptr240 to i32*
  %290 = load i32, i32* %289, align 4
  %conv241 = zext i32 %290 to i64
  store i64 %conv241, i64* %comp_size, align 8
  %291 = load i8*, i8** %p, align 8
  %add.ptr242 = getelementptr inbounds i8, i8* %291, i64 24
  %292 = bitcast i8* %add.ptr242 to i32*
  %293 = load i32, i32* %292, align 4
  %conv243 = zext i32 %293 to i64
  store i64 %conv243, i64* %decomp_size, align 8
  %294 = load i8*, i8** %p, align 8
  %add.ptr244 = getelementptr inbounds i8, i8* %294, i64 42
  %295 = bitcast i8* %add.ptr244 to i32*
  %296 = load i32, i32* %295, align 4
  %conv245 = zext i32 %296 to i64
  store i64 %conv245, i64* %local_header_ofs, align 8
  %297 = load i8*, i8** %p, align 8
  %add.ptr246 = getelementptr inbounds i8, i8* %297, i64 28
  %298 = bitcast i8* %add.ptr246 to i16*
  %299 = load i16, i16* %298, align 2
  %conv247 = zext i16 %299 to i32
  store i32 %conv247, i32* %filename_size, align 4
  %300 = load i8*, i8** %p, align 8
  %add.ptr248 = getelementptr inbounds i8, i8* %300, i64 30
  %301 = bitcast i8* %add.ptr248 to i16*
  %302 = load i16, i16* %301, align 2
  %conv249 = zext i16 %302 to i32
  store i32 %conv249, i32* %ext_data_size, align 4
  %303 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState250 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %303, i32 0, i32 15
  %304 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState250, align 8
  %m_zip64_has_extended_info_fields = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %304, i32 0, i32 5
  %305 = load i32, i32* %m_zip64_has_extended_info_fields, align 8
  %tobool251 = icmp ne i32 %305, 0
  br i1 %tobool251, label %if.end337, label %land.lhs.true252

land.lhs.true252:                                 ; preds = %if.end239
  %306 = load i32, i32* %ext_data_size, align 4
  %tobool253 = icmp ne i32 %306, 0
  br i1 %tobool253, label %land.lhs.true254, label %if.end337

land.lhs.true254:                                 ; preds = %land.lhs.true252
  %307 = load i64, i64* %comp_size, align 8
  %308 = load i64, i64* %decomp_size, align 8
  %cmp255 = icmp ugt i64 %307, %308
  br i1 %cmp255, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true254
  %309 = load i64, i64* %comp_size, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true254
  %310 = load i64, i64* %decomp_size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %309, %cond.true ], [ %310, %cond.false ]
  %311 = load i64, i64* %local_header_ofs, align 8
  %cmp257 = icmp ugt i64 %cond, %311
  br i1 %cmp257, label %cond.true259, label %cond.false266

cond.true259:                                     ; preds = %cond.end
  %312 = load i64, i64* %comp_size, align 8
  %313 = load i64, i64* %decomp_size, align 8
  %cmp260 = icmp ugt i64 %312, %313
  br i1 %cmp260, label %cond.true262, label %cond.false263

cond.true262:                                     ; preds = %cond.true259
  %314 = load i64, i64* %comp_size, align 8
  br label %cond.end264

cond.false263:                                    ; preds = %cond.true259
  %315 = load i64, i64* %decomp_size, align 8
  br label %cond.end264

cond.end264:                                      ; preds = %cond.false263, %cond.true262
  %cond265 = phi i64 [ %314, %cond.true262 ], [ %315, %cond.false263 ]
  br label %cond.end267

cond.false266:                                    ; preds = %cond.end
  %316 = load i64, i64* %local_header_ofs, align 8
  br label %cond.end267

cond.end267:                                      ; preds = %cond.false266, %cond.end264
  %cond268 = phi i64 [ %cond265, %cond.end264 ], [ %316, %cond.false266 ]
  %cmp269 = icmp eq i64 %cond268, 4294967295
  br i1 %cmp269, label %if.then271, label %if.end337

if.then271:                                       ; preds = %cond.end267
  %317 = load i32, i32* %ext_data_size, align 4
  store i32 %317, i32* %extra_size_remaining, align 4
  %318 = load i32, i32* %extra_size_remaining, align 4
  %tobool272 = icmp ne i32 %318, 0
  br i1 %tobool272, label %if.then273, label %if.end336

if.then273:                                       ; preds = %if.then271
  store i8* null, i8** %buf, align 8
  %319 = load i32, i32* %filename_size, align 4
  %add274 = add i32 46, %319
  %320 = load i32, i32* %ext_data_size, align 4
  %add275 = add i32 %add274, %320
  %321 = load i32, i32* %n, align 4
  %cmp276 = icmp ugt i32 %add275, %321
  br i1 %cmp276, label %if.then278, label %if.else

if.then278:                                       ; preds = %if.then273
  %322 = load i32, i32* %ext_data_size, align 4
  %conv279 = zext i32 %322 to i64
  %call280 = call i8* @malloc(i64 %conv279) #8
  store i8* %call280, i8** %buf, align 8
  %323 = load i8*, i8** %buf, align 8
  %cmp281 = icmp eq i8* %323, null
  br i1 %cmp281, label %if.then283, label %if.end285

if.then283:                                       ; preds = %if.then278
  %324 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %324, %struct.mz_zip_archive** %pZip.addr.i472, align 8
  store i32 16, i32* %err_num.addr.i473, align 4
  %325 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i472, align 8
  %tobool.i474 = icmp ne %struct.mz_zip_archive* %325, null
  br i1 %tobool.i474, label %if.then.i476, label %mz_zip_set_error.exit477

if.then.i476:                                     ; preds = %if.then283
  %326 = load i32, i32* %err_num.addr.i473, align 4
  %327 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i472, align 8
  %m_last_error.i475 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %327, i32 0, i32 5
  store i32 %326, i32* %m_last_error.i475, align 4
  br label %mz_zip_set_error.exit477

mz_zip_set_error.exit477:                         ; preds = %if.then283, %if.then.i476
  store i32 0, i32* %retval, align 4
  br label %return

if.end285:                                        ; preds = %if.then278
  %328 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead286 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %328, i32 0, i32 11
  %329 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead286, align 8
  %330 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque287 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %330, i32 0, i32 14
  %331 = load i8*, i8** %m_pIO_opaque287, align 8
  %332 = load i64, i64* %cdir_ofs, align 8
  %add288 = add i64 %332, 46
  %333 = load i32, i32* %filename_size, align 4
  %conv289 = zext i32 %333 to i64
  %add290 = add i64 %add288, %conv289
  %334 = load i8*, i8** %buf, align 8
  %335 = load i32, i32* %ext_data_size, align 4
  %conv291 = zext i32 %335 to i64
  %call292 = call i64 %329(i8* %331, i64 %add290, i8* %334, i64 %conv291)
  %336 = load i32, i32* %ext_data_size, align 4
  %conv293 = zext i32 %336 to i64
  %cmp294 = icmp ne i64 %call292, %conv293
  br i1 %cmp294, label %if.then296, label %if.end298

if.then296:                                       ; preds = %if.end285
  %337 = load i8*, i8** %buf, align 8
  call void @free(i8* %337)
  %338 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %338, %struct.mz_zip_archive** %pZip.addr.i460, align 8
  store i32 20, i32* %err_num.addr.i461, align 4
  %339 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i460, align 8
  %tobool.i462 = icmp ne %struct.mz_zip_archive* %339, null
  br i1 %tobool.i462, label %if.then.i464, label %mz_zip_set_error.exit465

if.then.i464:                                     ; preds = %if.then296
  %340 = load i32, i32* %err_num.addr.i461, align 4
  %341 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i460, align 8
  %m_last_error.i463 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %341, i32 0, i32 5
  store i32 %340, i32* %m_last_error.i463, align 4
  br label %mz_zip_set_error.exit465

mz_zip_set_error.exit465:                         ; preds = %if.then296, %if.then.i464
  store i32 0, i32* %retval, align 4
  br label %return

if.end298:                                        ; preds = %if.end285
  %342 = load i8*, i8** %buf, align 8
  store i8* %342, i8** %pExtra_data, align 8
  br label %if.end301

if.else:                                          ; preds = %if.then273
  %343 = load i8*, i8** %p, align 8
  %add.ptr299 = getelementptr inbounds i8, i8* %343, i64 46
  %344 = load i32, i32* %filename_size, align 4
  %idx.ext = zext i32 %344 to i64
  %add.ptr300 = getelementptr inbounds i8, i8* %add.ptr299, i64 %idx.ext
  store i8* %add.ptr300, i8** %pExtra_data, align 8
  br label %if.end301

if.end301:                                        ; preds = %if.else, %if.end298
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end301
  %345 = load i32, i32* %extra_size_remaining, align 4
  %conv302 = zext i32 %345 to i64
  %cmp303 = icmp ult i64 %conv302, 4
  br i1 %cmp303, label %if.then305, label %if.end307

if.then305:                                       ; preds = %do.body
  %346 = load i8*, i8** %buf, align 8
  call void @free(i8* %346)
  %347 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %347, %struct.mz_zip_archive** %pZip.addr.i454, align 8
  store i32 9, i32* %err_num.addr.i455, align 4
  %348 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i454, align 8
  %tobool.i456 = icmp ne %struct.mz_zip_archive* %348, null
  br i1 %tobool.i456, label %if.then.i458, label %mz_zip_set_error.exit459

if.then.i458:                                     ; preds = %if.then305
  %349 = load i32, i32* %err_num.addr.i455, align 4
  %350 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i454, align 8
  %m_last_error.i457 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %350, i32 0, i32 5
  store i32 %349, i32* %m_last_error.i457, align 4
  br label %mz_zip_set_error.exit459

mz_zip_set_error.exit459:                         ; preds = %if.then305, %if.then.i458
  store i32 0, i32* %retval, align 4
  br label %return

if.end307:                                        ; preds = %do.body
  %351 = load i8*, i8** %pExtra_data, align 8
  %352 = bitcast i8* %351 to i16*
  %353 = load i16, i16* %352, align 2
  %conv308 = zext i16 %353 to i32
  store i32 %conv308, i32* %field_id, align 4
  %354 = load i8*, i8** %pExtra_data, align 8
  %add.ptr309 = getelementptr inbounds i8, i8* %354, i64 2
  %355 = bitcast i8* %add.ptr309 to i16*
  %356 = load i16, i16* %355, align 2
  %conv310 = zext i16 %356 to i32
  store i32 %conv310, i32* %field_data_size, align 4
  %357 = load i32, i32* %field_data_size, align 4
  %conv311 = zext i32 %357 to i64
  %add312 = add i64 %conv311, 4
  %358 = load i32, i32* %extra_size_remaining, align 4
  %conv313 = zext i32 %358 to i64
  %cmp314 = icmp ugt i64 %add312, %conv313
  br i1 %cmp314, label %if.then316, label %if.end318

if.then316:                                       ; preds = %if.end307
  %359 = load i8*, i8** %buf, align 8
  call void @free(i8* %359)
  %360 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %360, %struct.mz_zip_archive** %pZip.addr.i448, align 8
  store i32 9, i32* %err_num.addr.i449, align 4
  %361 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i448, align 8
  %tobool.i450 = icmp ne %struct.mz_zip_archive* %361, null
  br i1 %tobool.i450, label %if.then.i452, label %mz_zip_set_error.exit453

if.then.i452:                                     ; preds = %if.then316
  %362 = load i32, i32* %err_num.addr.i449, align 4
  %363 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i448, align 8
  %m_last_error.i451 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %363, i32 0, i32 5
  store i32 %362, i32* %m_last_error.i451, align 4
  br label %mz_zip_set_error.exit453

mz_zip_set_error.exit453:                         ; preds = %if.then316, %if.then.i452
  store i32 0, i32* %retval, align 4
  br label %return

if.end318:                                        ; preds = %if.end307
  %364 = load i32, i32* %field_id, align 4
  %cmp319 = icmp eq i32 %364, 1
  br i1 %cmp319, label %if.then321, label %if.end326

if.then321:                                       ; preds = %if.end318
  %365 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState322 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %365, i32 0, i32 15
  %366 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState322, align 8
  %m_zip64323 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %366, i32 0, i32 4
  store i32 1, i32* %m_zip64323, align 4
  %367 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState324 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %367, i32 0, i32 15
  %368 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState324, align 8
  %m_zip64_has_extended_info_fields325 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %368, i32 0, i32 5
  store i32 1, i32* %m_zip64_has_extended_info_fields325, align 8
  br label %do.end

if.end326:                                        ; preds = %if.end318
  %369 = load i32, i32* %field_data_size, align 4
  %conv327 = zext i32 %369 to i64
  %add328 = add i64 4, %conv327
  %370 = load i8*, i8** %pExtra_data, align 8
  %add.ptr329 = getelementptr inbounds i8, i8* %370, i64 %add328
  store i8* %add.ptr329, i8** %pExtra_data, align 8
  %371 = load i32, i32* %extra_size_remaining, align 4
  %conv330 = zext i32 %371 to i64
  %sub331 = sub i64 %conv330, 4
  %372 = load i32, i32* %field_data_size, align 4
  %conv332 = zext i32 %372 to i64
  %sub333 = sub i64 %sub331, %conv332
  %conv334 = trunc i64 %sub333 to i32
  store i32 %conv334, i32* %extra_size_remaining, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end326
  %373 = load i32, i32* %extra_size_remaining, align 4
  %tobool335 = icmp ne i32 %373, 0
  br i1 %tobool335, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then321
  %374 = load i8*, i8** %buf, align 8
  call void @free(i8* %374)
  br label %if.end336

if.end336:                                        ; preds = %do.end, %if.then271
  br label %if.end337

if.end337:                                        ; preds = %if.end336, %cond.end267, %land.lhs.true252, %if.end239
  %375 = load i64, i64* %comp_size, align 8
  %cmp338 = icmp ne i64 %375, 4294967295
  br i1 %cmp338, label %land.lhs.true340, label %if.end356

land.lhs.true340:                                 ; preds = %if.end337
  %376 = load i64, i64* %decomp_size, align 8
  %cmp341 = icmp ne i64 %376, 4294967295
  br i1 %cmp341, label %if.then343, label %if.end356

if.then343:                                       ; preds = %land.lhs.true340
  %377 = load i8*, i8** %p, align 8
  %add.ptr344 = getelementptr inbounds i8, i8* %377, i64 10
  %378 = bitcast i8* %add.ptr344 to i32*
  %379 = load i32, i32* %378, align 4
  %tobool345 = icmp ne i32 %379, 0
  br i1 %tobool345, label %lor.lhs.false349, label %land.lhs.true346

land.lhs.true346:                                 ; preds = %if.then343
  %380 = load i64, i64* %decomp_size, align 8
  %381 = load i64, i64* %comp_size, align 8
  %cmp347 = icmp ne i64 %380, %381
  br i1 %cmp347, label %if.then353, label %lor.lhs.false349

lor.lhs.false349:                                 ; preds = %land.lhs.true346, %if.then343
  %382 = load i64, i64* %decomp_size, align 8
  %tobool350 = icmp ne i64 %382, 0
  br i1 %tobool350, label %land.lhs.true351, label %if.end355

land.lhs.true351:                                 ; preds = %lor.lhs.false349
  %383 = load i64, i64* %comp_size, align 8
  %tobool352 = icmp ne i64 %383, 0
  br i1 %tobool352, label %if.end355, label %if.then353

if.then353:                                       ; preds = %land.lhs.true351, %land.lhs.true346
  %384 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %384, %struct.mz_zip_archive** %pZip.addr.i442, align 8
  store i32 9, i32* %err_num.addr.i443, align 4
  %385 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i442, align 8
  %tobool.i444 = icmp ne %struct.mz_zip_archive* %385, null
  br i1 %tobool.i444, label %if.then.i446, label %mz_zip_set_error.exit447

if.then.i446:                                     ; preds = %if.then353
  %386 = load i32, i32* %err_num.addr.i443, align 4
  %387 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i442, align 8
  %m_last_error.i445 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %387, i32 0, i32 5
  store i32 %386, i32* %m_last_error.i445, align 4
  br label %mz_zip_set_error.exit447

mz_zip_set_error.exit447:                         ; preds = %if.then353, %if.then.i446
  store i32 0, i32* %retval, align 4
  br label %return

if.end355:                                        ; preds = %land.lhs.true351, %lor.lhs.false349
  br label %if.end356

if.end356:                                        ; preds = %if.end355, %land.lhs.true340, %if.end337
  %388 = load i8*, i8** %p, align 8
  %add.ptr357 = getelementptr inbounds i8, i8* %388, i64 34
  %389 = bitcast i8* %add.ptr357 to i16*
  %390 = load i16, i16* %389, align 2
  %conv358 = zext i16 %390 to i32
  store i32 %conv358, i32* %disk_index, align 4
  %391 = load i32, i32* %disk_index, align 4
  %cmp359 = icmp eq i32 %391, 65535
  br i1 %cmp359, label %if.then367, label %lor.lhs.false361

lor.lhs.false361:                                 ; preds = %if.end356
  %392 = load i32, i32* %disk_index, align 4
  %393 = load i32, i32* %num_this_disk, align 4
  %cmp362 = icmp ne i32 %392, %393
  br i1 %cmp362, label %land.lhs.true364, label %if.end369

land.lhs.true364:                                 ; preds = %lor.lhs.false361
  %394 = load i32, i32* %disk_index, align 4
  %cmp365 = icmp ne i32 %394, 1
  br i1 %cmp365, label %if.then367, label %if.end369

if.then367:                                       ; preds = %land.lhs.true364, %if.end356
  %395 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %395, %struct.mz_zip_archive** %pZip.addr.i436, align 8
  store i32 10, i32* %err_num.addr.i437, align 4
  %396 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i436, align 8
  %tobool.i438 = icmp ne %struct.mz_zip_archive* %396, null
  br i1 %tobool.i438, label %if.then.i440, label %mz_zip_set_error.exit441

if.then.i440:                                     ; preds = %if.then367
  %397 = load i32, i32* %err_num.addr.i437, align 4
  %398 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i436, align 8
  %m_last_error.i439 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %398, i32 0, i32 5
  store i32 %397, i32* %m_last_error.i439, align 4
  br label %mz_zip_set_error.exit441

mz_zip_set_error.exit441:                         ; preds = %if.then367, %if.then.i440
  store i32 0, i32* %retval, align 4
  br label %return

if.end369:                                        ; preds = %land.lhs.true364, %lor.lhs.false361
  %399 = load i64, i64* %comp_size, align 8
  %cmp370 = icmp ne i64 %399, 4294967295
  br i1 %cmp370, label %if.then372, label %if.end383

if.then372:                                       ; preds = %if.end369
  %400 = load i8*, i8** %p, align 8
  %add.ptr373 = getelementptr inbounds i8, i8* %400, i64 42
  %401 = bitcast i8* %add.ptr373 to i32*
  %402 = load i32, i32* %401, align 4
  %conv374 = zext i32 %402 to i64
  %add375 = add i64 %conv374, 30
  %403 = load i64, i64* %comp_size, align 8
  %add376 = add i64 %add375, %403
  %404 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size377 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %404, i32 0, i32 0
  %405 = load i64, i64* %m_archive_size377, align 8
  %cmp378 = icmp ugt i64 %add376, %405
  br i1 %cmp378, label %if.then380, label %if.end382

if.then380:                                       ; preds = %if.then372
  %406 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %406, %struct.mz_zip_archive** %pZip.addr.i430, align 8
  store i32 9, i32* %err_num.addr.i431, align 4
  %407 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i430, align 8
  %tobool.i432 = icmp ne %struct.mz_zip_archive* %407, null
  br i1 %tobool.i432, label %if.then.i434, label %mz_zip_set_error.exit435

if.then.i434:                                     ; preds = %if.then380
  %408 = load i32, i32* %err_num.addr.i431, align 4
  %409 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i430, align 8
  %m_last_error.i433 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %409, i32 0, i32 5
  store i32 %408, i32* %m_last_error.i433, align 4
  br label %mz_zip_set_error.exit435

mz_zip_set_error.exit435:                         ; preds = %if.then380, %if.then.i434
  store i32 0, i32* %retval, align 4
  br label %return

if.end382:                                        ; preds = %if.then372
  br label %if.end383

if.end383:                                        ; preds = %if.end382, %if.end369
  %410 = load i8*, i8** %p, align 8
  %add.ptr384 = getelementptr inbounds i8, i8* %410, i64 8
  %411 = bitcast i8* %add.ptr384 to i16*
  %412 = load i16, i16* %411, align 2
  %conv385 = zext i16 %412 to i32
  store i32 %conv385, i32* %bit_flags, align 4
  %413 = load i32, i32* %bit_flags, align 4
  %and386 = and i32 %413, 8192
  %tobool387 = icmp ne i32 %and386, 0
  br i1 %tobool387, label %if.then388, label %if.end390

if.then388:                                       ; preds = %if.end383
  %414 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %414, %struct.mz_zip_archive** %pZip.addr.i424, align 8
  store i32 5, i32* %err_num.addr.i425, align 4
  %415 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i424, align 8
  %tobool.i426 = icmp ne %struct.mz_zip_archive* %415, null
  br i1 %tobool.i426, label %if.then.i428, label %mz_zip_set_error.exit429

if.then.i428:                                     ; preds = %if.then388
  %416 = load i32, i32* %err_num.addr.i425, align 4
  %417 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i424, align 8
  %m_last_error.i427 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %417, i32 0, i32 5
  store i32 %416, i32* %m_last_error.i427, align 4
  br label %mz_zip_set_error.exit429

mz_zip_set_error.exit429:                         ; preds = %if.then388, %if.then.i428
  store i32 0, i32* %retval, align 4
  br label %return

if.end390:                                        ; preds = %if.end383
  %418 = load i8*, i8** %p, align 8
  %add.ptr391 = getelementptr inbounds i8, i8* %418, i64 28
  %419 = bitcast i8* %add.ptr391 to i16*
  %420 = load i16, i16* %419, align 2
  %conv392 = zext i16 %420 to i32
  %add393 = add nsw i32 46, %conv392
  %421 = load i8*, i8** %p, align 8
  %add.ptr394 = getelementptr inbounds i8, i8* %421, i64 30
  %422 = bitcast i8* %add.ptr394 to i16*
  %423 = load i16, i16* %422, align 2
  %conv395 = zext i16 %423 to i32
  %add396 = add nsw i32 %add393, %conv395
  %424 = load i8*, i8** %p, align 8
  %add.ptr397 = getelementptr inbounds i8, i8* %424, i64 32
  %425 = bitcast i8* %add.ptr397 to i16*
  %426 = load i16, i16* %425, align 2
  %conv398 = zext i16 %426 to i32
  %add399 = add nsw i32 %add396, %conv398
  store i32 %add399, i32* %total_header_size, align 4
  %427 = load i32, i32* %n, align 4
  %cmp400 = icmp ugt i32 %add399, %427
  br i1 %cmp400, label %if.then402, label %if.end404

if.then402:                                       ; preds = %if.end390
  %428 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %428, %struct.mz_zip_archive** %pZip.addr.i418, align 8
  store i32 9, i32* %err_num.addr.i419, align 4
  %429 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i418, align 8
  %tobool.i420 = icmp ne %struct.mz_zip_archive* %429, null
  br i1 %tobool.i420, label %if.then.i422, label %mz_zip_set_error.exit423

if.then.i422:                                     ; preds = %if.then402
  %430 = load i32, i32* %err_num.addr.i419, align 4
  %431 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i418, align 8
  %m_last_error.i421 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %431, i32 0, i32 5
  store i32 %430, i32* %m_last_error.i421, align 4
  br label %mz_zip_set_error.exit423

mz_zip_set_error.exit423:                         ; preds = %if.then402, %if.then.i422
  store i32 0, i32* %retval, align 4
  br label %return

if.end404:                                        ; preds = %if.end390
  %432 = load i32, i32* %total_header_size, align 4
  %433 = load i32, i32* %n, align 4
  %sub405 = sub i32 %433, %432
  store i32 %sub405, i32* %n, align 4
  %434 = load i32, i32* %total_header_size, align 4
  %435 = load i8*, i8** %p, align 8
  %idx.ext406 = zext i32 %434 to i64
  %add.ptr407 = getelementptr inbounds i8, i8* %435, i64 %idx.ext406
  store i8* %add.ptr407, i8** %p, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end404
  %436 = load i32, i32* %i, align 4
  %inc = add i32 %436, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end408

if.end408:                                        ; preds = %for.end, %if.end171
  %437 = load i32, i32* %sort_central_dir, align 4
  %tobool409 = icmp ne i32 %437, 0
  br i1 %tobool409, label %if.then410, label %if.end411

if.then410:                                       ; preds = %if.end408
  %438 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  call void @mz_zip_reader_sort_central_dir_offsets_by_filename(%struct.mz_zip_archive* %438)
  br label %if.end411

if.end411:                                        ; preds = %if.then410, %if.end408
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end411, %mz_zip_set_error.exit423, %mz_zip_set_error.exit429, %mz_zip_set_error.exit435, %mz_zip_set_error.exit441, %mz_zip_set_error.exit447, %mz_zip_set_error.exit453, %mz_zip_set_error.exit459, %mz_zip_set_error.exit465, %mz_zip_set_error.exit477, %mz_zip_set_error.exit483, %mz_zip_set_error.exit489, %mz_zip_set_error.exit501, %mz_zip_set_error.exit518, %mz_zip_set_error.exit569, %mz_zip_set_error.exit576, %mz_zip_set_error.exit583, %mz_zip_set_error.exit590, %mz_zip_set_error.exit597, %mz_zip_set_error.exit604, %mz_zip_set_error.exit611, %mz_zip_set_error.exit562, %mz_zip_set_error.exit540, %mz_zip_set_error.exit511, %mz_zip_set_error.exit495, %mz_zip_set_error.exit471, %mz_zip_set_error.exit417, %mz_zip_set_error.exit
  %439 = load i32, i32* %retval, align 4
  ret i32 %439
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_init_mem(%struct.mz_zip_archive* %pZip, i8* %pMem, i64 %size, i32 %flags) #0 {
entry:
  %pZip.addr.i14 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i15 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pMem.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pMem, i8** %pMem.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %pMem.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %1, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %3 = load i32, i32* %err_num.addr.i, align 4
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 5
  store i32 %3, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %size.addr, align 8
  %cmp = icmp ult i64 %5, 22
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %6, %struct.mz_zip_archive** %pZip.addr.i14, align 8
  store i32 8, i32* %err_num.addr.i15, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i14, align 8
  %tobool.i16 = icmp ne %struct.mz_zip_archive* %7, null
  br i1 %tobool.i16, label %if.then.i18, label %mz_zip_set_error.exit19

if.then.i18:                                      ; preds = %if.then1
  %8 = load i32, i32* %err_num.addr.i15, align 4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i14, align 8
  %m_last_error.i17 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 5
  store i32 %8, i32* %m_last_error.i17, align 4
  br label %mz_zip_set_error.exit19

mz_zip_set_error.exit19:                          ; preds = %if.then1, %if.then.i18
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %11 = load i32, i32* %flags.addr, align 4
  %call4 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %10, i32 %11)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end3
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end3
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 4
  store i32 2, i32* %m_zip_type, align 8
  %13 = load i64, i64* %size.addr, align 8
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 0
  store i64 %13, i64* %m_archive_size, align 8
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_mem_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %17 = bitcast %struct.mz_zip_archive* %16 to i8*
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 14
  store i8* %17, i8** %m_pIO_opaque, align 8
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8
  %20 = load i8*, i8** %pMem.addr, align 8
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 15
  %22 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %22, i32 0, i32 8
  store i8* %20, i8** %m_pMem, align 8
  %23 = load i64, i64* %size.addr, align 8
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState8 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %24, i32 0, i32 15
  %25 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState8, align 8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %25, i32 0, i32 9
  store i64 %23, i64* %m_mem_size, align 8
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %27 = load i32, i32* %flags.addr, align 4
  %call9 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %26, i32 %27)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.end7
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call12 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %28, i32 0)
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end7
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end13, %if.then11, %if.then6, %mz_zip_set_error.exit19, %mz_zip_set_error.exit
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mz_zip_mem_read_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive*, align 8
  %s = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_archive*
  store %struct.mz_zip_archive* %1, %struct.mz_zip_archive** %pZip, align 8
  %2 = load i64, i64* %file_ofs.addr, align 8
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 0
  %4 = load i64, i64* %m_archive_size, align 8
  %cmp = icmp uge i64 %2, %4
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end7

cond.false:                                       ; preds = %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_archive_size1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 0
  %6 = load i64, i64* %m_archive_size1, align 8
  %7 = load i64, i64* %file_ofs.addr, align 8
  %sub = sub i64 %6, %7
  %8 = load i64, i64* %n.addr, align 8
  %cmp2 = icmp ult i64 %sub, %8
  br i1 %cmp2, label %cond.true3, label %cond.false6

cond.true3:                                       ; preds = %cond.false
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_archive_size4 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 0
  %10 = load i64, i64* %m_archive_size4, align 8
  %11 = load i64, i64* %file_ofs.addr, align 8
  %sub5 = sub i64 %10, %11
  br label %cond.end

cond.false6:                                      ; preds = %cond.false
  %12 = load i64, i64* %n.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true3
  %cond = phi i64 [ %sub5, %cond.true3 ], [ %12, %cond.false6 ]
  br label %cond.end7

cond.end7:                                        ; preds = %cond.end, %cond.true
  %cond8 = phi i64 [ 0, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond8, i64* %s, align 8
  %13 = load i8*, i8** %pBuf.addr, align 8
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 15
  %15 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %15, i32 0, i32 8
  %16 = load i8*, i8** %m_pMem, align 8
  %17 = load i64, i64* %file_ofs.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %17
  %18 = load i64, i64* %s, align 8
  %19 = load i8*, i8** %pBuf.addr, align 8
  %20 = call i64 @llvm.objectsize.i64.p0i8(i8* %19, i1 false)
  %call = call i8* @__memcpy_chk(i8* %13, i8* %add.ptr, i64 %18, i64 %20) #10
  %21 = load i64, i64* %s, align 8
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_init_file(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32 %flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pFilename.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %0, i8* %1, i32 %2, i64 0, i64 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32 %flags, i64 %file_start_ofs, i64 %archive_size) #0 {
entry:
  %pZip.addr.i47 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i48 = alloca i32, align 4
  %pZip.addr.i41 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i42 = alloca i32, align 4
  %pZip.addr.i35 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i36 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_start_ofs.addr = alloca i64, align 8
  %archive_size.addr = alloca i64, align 8
  %file_size = alloca i64, align 8
  %pFile = alloca %struct.__sFILE*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i64 %file_start_ofs, i64* %file_start_ofs.addr, align 8
  store i64 %archive_size, i64* %archive_size.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %pFilename.addr, align 8
  %tobool1 = icmp ne i8* %1, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i64, i64* %archive_size.addr, align 8
  %tobool3 = icmp ne i64 %2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %3 = load i64, i64* %archive_size.addr, align 8
  %cmp = icmp ult i64 %3, 22
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %4, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %5, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %6 = load i32, i32* %err_num.addr.i, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 5
  store i32 %6, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false2
  %8 = load i8*, i8** %pFilename.addr, align 8
  %call4 = call %struct.__sFILE* @"\01_fopen"(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0))
  store %struct.__sFILE* %call4, %struct.__sFILE** %pFile, align 8
  %9 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %tobool5 = icmp ne %struct.__sFILE* %9, null
  br i1 %tobool5, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %10, %struct.mz_zip_archive** %pZip.addr.i35, align 8
  store i32 17, i32* %err_num.addr.i36, align 4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i35, align 8
  %tobool.i37 = icmp ne %struct.mz_zip_archive* %11, null
  br i1 %tobool.i37, label %if.then.i39, label %mz_zip_set_error.exit40

if.then.i39:                                      ; preds = %if.then6
  %12 = load i32, i32* %err_num.addr.i36, align 4
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i35, align 8
  %m_last_error.i38 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 5
  store i32 %12, i32* %m_last_error.i38, align 4
  br label %mz_zip_set_error.exit40

mz_zip_set_error.exit40:                          ; preds = %if.then6, %if.then.i39
  store i32 0, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %if.end
  %14 = load i64, i64* %archive_size.addr, align 8
  store i64 %14, i64* %file_size, align 8
  %15 = load i64, i64* %file_size, align 8
  %tobool9 = icmp ne i64 %15, 0
  br i1 %tobool9, label %if.end18, label %if.then10

if.then10:                                        ; preds = %if.end8
  %16 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %call11 = call i32 @fseeko(%struct.__sFILE* %16, i64 0, i32 2)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then13, label %if.end16

if.then13:                                        ; preds = %if.then10
  %17 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %call14 = call i32 @fclose(%struct.__sFILE* %17)
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %18, %struct.mz_zip_archive** %pZip.addr.i41, align 8
  store i32 22, i32* %err_num.addr.i42, align 4
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i41, align 8
  %tobool.i43 = icmp ne %struct.mz_zip_archive* %19, null
  br i1 %tobool.i43, label %if.then.i45, label %mz_zip_set_error.exit46

if.then.i45:                                      ; preds = %if.then13
  %20 = load i32, i32* %err_num.addr.i42, align 4
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i41, align 8
  %m_last_error.i44 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 5
  store i32 %20, i32* %m_last_error.i44, align 4
  br label %mz_zip_set_error.exit46

mz_zip_set_error.exit46:                          ; preds = %if.then13, %if.then.i45
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %if.then10
  %22 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %call17 = call i64 @ftello(%struct.__sFILE* %22)
  store i64 %call17, i64* %file_size, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.end16, %if.end8
  %23 = load i64, i64* %file_size, align 8
  %cmp19 = icmp ult i64 %23, 22
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end18
  %24 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %call21 = call i32 @fclose(%struct.__sFILE* %24)
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %25, %struct.mz_zip_archive** %pZip.addr.i47, align 8
  store i32 8, i32* %err_num.addr.i48, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i47, align 8
  %tobool.i49 = icmp ne %struct.mz_zip_archive* %26, null
  br i1 %tobool.i49, label %if.then.i51, label %mz_zip_set_error.exit52

if.then.i51:                                      ; preds = %if.then20
  %27 = load i32, i32* %err_num.addr.i48, align 4
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i47, align 8
  %m_last_error.i50 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 5
  store i32 %27, i32* %m_last_error.i50, align 4
  br label %mz_zip_set_error.exit52

mz_zip_set_error.exit52:                          ; preds = %if.then20, %if.then.i51
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.end18
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %30 = load i32, i32* %flags.addr, align 4
  %call24 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %29, i32 %30)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end23
  %31 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %call27 = call i32 @fclose(%struct.__sFILE* %31)
  store i32 0, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %if.end23
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 4
  store i32 4, i32* %m_zip_type, align 8
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %35 = bitcast %struct.mz_zip_archive* %34 to i8*
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 14
  store i8* %35, i8** %m_pIO_opaque, align 8
  %37 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 15
  %39 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %39, i32 0, i32 6
  store %struct.__sFILE* %37, %struct.__sFILE** %m_pFile, align 8
  %40 = load i64, i64* %file_size, align 8
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %41, i32 0, i32 0
  store i64 %40, i64* %m_archive_size, align 8
  %42 = load i64, i64* %file_start_ofs.addr, align 8
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState29 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %43, i32 0, i32 15
  %44 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState29, align 8
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %44, i32 0, i32 7
  store i64 %42, i64* %m_file_archive_start_ofs, align 8
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %46 = load i32, i32* %flags.addr, align 4
  %call30 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %45, i32 %46)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end34, label %if.then32

if.then32:                                        ; preds = %if.end28
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call33 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %47, i32 0)
  store i32 0, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %if.end28
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end34, %if.then32, %if.then26, %mz_zip_set_error.exit52, %mz_zip_set_error.exit46, %mz_zip_set_error.exit40, %mz_zip_set_error.exit
  %48 = load i32, i32* %retval, align 4
  ret i32 %48
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #1

declare i32 @fseeko(%struct.__sFILE*, i64, i32) #1

declare i32 @fclose(%struct.__sFILE*) #1

declare i64 @ftello(%struct.__sFILE*) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mz_zip_file_read_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive*, align 8
  %cur_ofs = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_archive*
  store %struct.mz_zip_archive* %1, %struct.mz_zip_archive** %pZip, align 8
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %3, i32 0, i32 6
  %4 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8
  %call = call i64 @ftello(%struct.__sFILE* %4)
  store i64 %call, i64* %cur_ofs, align 8
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 15
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState1, align 8
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %6, i32 0, i32 7
  %7 = load i64, i64* %m_file_archive_start_ofs, align 8
  %8 = load i64, i64* %file_ofs.addr, align 8
  %add = add i64 %8, %7
  store i64 %add, i64* %file_ofs.addr, align 8
  %9 = load i64, i64* %file_ofs.addr, align 8
  %cmp = icmp slt i64 %9, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %10 = load i64, i64* %cur_ofs, align 8
  %11 = load i64, i64* %file_ofs.addr, align 8
  %cmp2 = icmp ne i64 %10, %11
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 15
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8
  %m_pFile4 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %13, i32 0, i32 6
  %14 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile4, align 8
  %15 = load i64, i64* %file_ofs.addr, align 8
  %call5 = call i32 @fseeko(%struct.__sFILE* %14, i64 %15, i32 0)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %16 = load i8*, i8** %pBuf.addr, align 8
  %17 = load i64, i64* %n.addr, align 8
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState6 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 15
  %19 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState6, align 8
  %m_pFile7 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %19, i32 0, i32 6
  %20 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile7, align 8
  %call8 = call i64 @fread(i8* %16, i64 1, i64 %17, %struct.__sFILE* %20)
  store i64 %call8, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %21 = load i64, i64* %retval, align 8
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_init_cfile(%struct.mz_zip_archive* %pZip, %struct.__sFILE* %pFile, i64 %archive_size, i32 %flags) #0 {
entry:
  %pZip.addr.i31 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i32 = alloca i32, align 4
  %pZip.addr.i25 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i26 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFile.addr = alloca %struct.__sFILE*, align 8
  %archive_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %cur_file_ofs = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.__sFILE* %pFile, %struct.__sFILE** %pFile.addr, align 8
  store i64 %archive_size, i64* %archive_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8
  %tobool1 = icmp ne %struct.__sFILE* %1, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %2, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 17, i32* %err_num.addr.i, align 4
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %3, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %4 = load i32, i32* %err_num.addr.i, align 4
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 5
  store i32 %4, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8
  %call2 = call i64 @ftello(%struct.__sFILE* %6)
  store i64 %call2, i64* %cur_file_ofs, align 8
  %7 = load i64, i64* %archive_size.addr, align 8
  %tobool3 = icmp ne i64 %7, 0
  br i1 %tobool3, label %if.end14, label %if.then4

if.then4:                                         ; preds = %if.end
  %8 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8
  %call5 = call i32 @fseeko(%struct.__sFILE* %8, i64 0, i32 2)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.then4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %9, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  store i32 22, i32* %err_num.addr.i26, align 4
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  %tobool.i27 = icmp ne %struct.mz_zip_archive* %10, null
  br i1 %tobool.i27, label %if.then.i29, label %mz_zip_set_error.exit30

if.then.i29:                                      ; preds = %if.then7
  %11 = load i32, i32* %err_num.addr.i26, align 4
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  %m_last_error.i28 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 5
  store i32 %11, i32* %m_last_error.i28, align 4
  br label %mz_zip_set_error.exit30

mz_zip_set_error.exit30:                          ; preds = %if.then7, %if.then.i29
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.then4
  %13 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8
  %call10 = call i64 @ftello(%struct.__sFILE* %13)
  %14 = load i64, i64* %cur_file_ofs, align 8
  %sub = sub i64 %call10, %14
  store i64 %sub, i64* %archive_size.addr, align 8
  %15 = load i64, i64* %archive_size.addr, align 8
  %cmp = icmp ult i64 %15, 22
  br i1 %cmp, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end9
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %16, %struct.mz_zip_archive** %pZip.addr.i31, align 8
  store i32 8, i32* %err_num.addr.i32, align 4
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i31, align 8
  %tobool.i33 = icmp ne %struct.mz_zip_archive* %17, null
  br i1 %tobool.i33, label %if.then.i35, label %mz_zip_set_error.exit36

if.then.i35:                                      ; preds = %if.then11
  %18 = load i32, i32* %err_num.addr.i32, align 4
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i31, align 8
  %m_last_error.i34 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 5
  store i32 %18, i32* %m_last_error.i34, align 4
  br label %mz_zip_set_error.exit36

mz_zip_set_error.exit36:                          ; preds = %if.then11, %if.then.i35
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %21 = load i32, i32* %flags.addr, align 4
  %call15 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %20, i32 %21)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end14
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 4
  store i32 5, i32* %m_zip_type, align 8
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %25 = bitcast %struct.mz_zip_archive* %24 to i8*
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 14
  store i8* %25, i8** %m_pIO_opaque, align 8
  %27 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 15
  %29 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %29, i32 0, i32 6
  store %struct.__sFILE* %27, %struct.__sFILE** %m_pFile, align 8
  %30 = load i64, i64* %archive_size.addr, align 8
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 0
  store i64 %30, i64* %m_archive_size, align 8
  %32 = load i64, i64* %cur_file_ofs, align 8
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState19 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 15
  %34 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState19, align 8
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %34, i32 0, i32 7
  store i64 %32, i64* %m_file_archive_start_ofs, align 8
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %36 = load i32, i32* %flags.addr, align 4
  %call20 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %35, i32 %36)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end24, label %if.then22

if.then22:                                        ; preds = %if.end18
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call23 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %37, i32 0)
  store i32 0, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end18
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end24, %if.then22, %if.then17, %mz_zip_set_error.exit36, %mz_zip_set_error.exit30, %mz_zip_set_error.exit
  %38 = load i32, i32* %retval, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_is_file_encrypted(%struct.mz_zip_archive* %pZip, i32 %file_index) #0 {
entry:
  %pZip.addr.i3 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %m_bit_flag = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive* %0, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32, i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 2
  %7 = load i32, i32* %m_total_files.i, align 8
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState3.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 15
  %9 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %9, i32 0, i32 0
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %10 = load i8*, i8** %m_p.i, align 8
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState4.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 15
  %12 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8*, i8** %m_p5.i, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %14, i64 %idxprom.i
  %16 = load i32, i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %16 to i64
  %arrayidx7.i = getelementptr inbounds i8, i8* %10, i64 %idxprom6.i
  store i8* %arrayidx7.i, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

mz_zip_get_cdh.exit:                              ; preds = %if.then.i, %if.end.i
  %17 = load i8*, i8** %retval.i, align 8
  store i8* %17, i8** %p, align 8
  %18 = load i8*, i8** %p, align 8
  %tobool = icmp ne i8* %18, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %mz_zip_get_cdh.exit
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %19, %struct.mz_zip_archive** %pZip.addr.i3, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i3, align 8
  %tobool.i4 = icmp ne %struct.mz_zip_archive* %20, null
  br i1 %tobool.i4, label %if.then.i5, label %mz_zip_set_error.exit

if.then.i5:                                       ; preds = %if.then
  %21 = load i32, i32* %err_num.addr.i, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i3, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 5
  store i32 %21, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i5
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %mz_zip_get_cdh.exit
  %23 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 8
  %24 = bitcast i8* %add.ptr to i16*
  %25 = load i16, i16* %24, align 2
  %conv = zext i16 %25 to i32
  store i32 %conv, i32* %m_bit_flag, align 4
  %26 = load i32, i32* %m_bit_flag, align 4
  %and = and i32 %26, 65
  %cmp = icmp ne i32 %and, 0
  %conv2 = zext i1 %cmp to i32
  store i32 %conv2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %mz_zip_set_error.exit
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_is_file_supported(%struct.mz_zip_archive* %pZip, i32 %file_index) #0 {
entry:
  %pZip.addr.i37 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i38 = alloca i32, align 4
  %pZip.addr.i30 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i31 = alloca i32, align 4
  %pZip.addr.i23 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i24 = alloca i32, align 4
  %pZip.addr.i19 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %bit_flag = alloca i32, align 4
  %method = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive* %0, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32, i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 2
  %7 = load i32, i32* %m_total_files.i, align 8
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState3.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 15
  %9 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %9, i32 0, i32 0
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %10 = load i8*, i8** %m_p.i, align 8
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState4.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 15
  %12 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8*, i8** %m_p5.i, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %14, i64 %idxprom.i
  %16 = load i32, i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %16 to i64
  %arrayidx7.i = getelementptr inbounds i8, i8* %10, i64 %idxprom6.i
  store i8* %arrayidx7.i, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

mz_zip_get_cdh.exit:                              ; preds = %if.then.i, %if.end.i
  %17 = load i8*, i8** %retval.i, align 8
  store i8* %17, i8** %p, align 8
  %18 = load i8*, i8** %p, align 8
  %tobool = icmp ne i8* %18, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %mz_zip_get_cdh.exit
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %19, %struct.mz_zip_archive** %pZip.addr.i37, align 8
  store i32 24, i32* %err_num.addr.i38, align 4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i37, align 8
  %tobool.i39 = icmp ne %struct.mz_zip_archive* %20, null
  br i1 %tobool.i39, label %if.then.i41, label %mz_zip_set_error.exit43

if.then.i41:                                      ; preds = %if.then
  %21 = load i32, i32* %err_num.addr.i38, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i37, align 8
  %m_last_error.i40 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 5
  store i32 %21, i32* %m_last_error.i40, align 4
  br label %mz_zip_set_error.exit43

mz_zip_set_error.exit43:                          ; preds = %if.then, %if.then.i41
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %mz_zip_get_cdh.exit
  %23 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 10
  %24 = bitcast i8* %add.ptr to i16*
  %25 = load i16, i16* %24, align 2
  %conv = zext i16 %25 to i32
  store i32 %conv, i32* %method, align 4
  %26 = load i8*, i8** %p, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %26, i64 8
  %27 = bitcast i8* %add.ptr2 to i16*
  %28 = load i16, i16* %27, align 2
  %conv3 = zext i16 %28 to i32
  store i32 %conv3, i32* %bit_flag, align 4
  %29 = load i32, i32* %method, align 4
  %cmp = icmp ne i32 %29, 0
  br i1 %cmp, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %if.end
  %30 = load i32, i32* %method, align 4
  %cmp5 = icmp ne i32 %30, 8
  br i1 %cmp5, label %if.then7, label %if.end9

if.then7:                                         ; preds = %land.lhs.true
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %31, %struct.mz_zip_archive** %pZip.addr.i30, align 8
  store i32 4, i32* %err_num.addr.i31, align 4
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i30, align 8
  %tobool.i32 = icmp ne %struct.mz_zip_archive* %32, null
  br i1 %tobool.i32, label %if.then.i34, label %mz_zip_set_error.exit36

if.then.i34:                                      ; preds = %if.then7
  %33 = load i32, i32* %err_num.addr.i31, align 4
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i30, align 8
  %m_last_error.i33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 5
  store i32 %33, i32* %m_last_error.i33, align 4
  br label %mz_zip_set_error.exit36

mz_zip_set_error.exit36:                          ; preds = %if.then7, %if.then.i34
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %land.lhs.true, %if.end
  %35 = load i32, i32* %bit_flag, align 4
  %and = and i32 %35, 65
  %tobool10 = icmp ne i32 %and, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end9
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %36, %struct.mz_zip_archive** %pZip.addr.i23, align 8
  store i32 5, i32* %err_num.addr.i24, align 4
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i23, align 8
  %tobool.i25 = icmp ne %struct.mz_zip_archive* %37, null
  br i1 %tobool.i25, label %if.then.i27, label %mz_zip_set_error.exit29

if.then.i27:                                      ; preds = %if.then11
  %38 = load i32, i32* %err_num.addr.i24, align 4
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i23, align 8
  %m_last_error.i26 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %39, i32 0, i32 5
  store i32 %38, i32* %m_last_error.i26, align 4
  br label %mz_zip_set_error.exit29

mz_zip_set_error.exit29:                          ; preds = %if.then11, %if.then.i27
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end9
  %40 = load i32, i32* %bit_flag, align 4
  %and14 = and i32 %40, 32
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end13
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %41, %struct.mz_zip_archive** %pZip.addr.i19, align 8
  store i32 6, i32* %err_num.addr.i, align 4
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i19, align 8
  %tobool.i20 = icmp ne %struct.mz_zip_archive* %42, null
  br i1 %tobool.i20, label %if.then.i21, label %mz_zip_set_error.exit

if.then.i21:                                      ; preds = %if.then16
  %43 = load i32, i32* %err_num.addr.i, align 4
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i19, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 5
  store i32 %43, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then16, %if.then.i21
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end13
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end18, %mz_zip_set_error.exit, %mz_zip_set_error.exit29, %mz_zip_set_error.exit36, %mz_zip_set_error.exit43
  %45 = load i32, i32* %retval, align 4
  ret i32 %45
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_is_file_a_directory(%struct.mz_zip_archive* %pZip, i32 %file_index) #0 {
entry:
  %pZip.addr.i19 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %filename_len = alloca i32, align 4
  %attribute_mapping_id = alloca i32, align 4
  %external_attr = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive* %0, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32, i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 2
  %7 = load i32, i32* %m_total_files.i, align 8
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState3.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 15
  %9 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %9, i32 0, i32 0
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %10 = load i8*, i8** %m_p.i, align 8
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState4.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 15
  %12 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8*, i8** %m_p5.i, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %14, i64 %idxprom.i
  %16 = load i32, i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %16 to i64
  %arrayidx7.i = getelementptr inbounds i8, i8* %10, i64 %idxprom6.i
  store i8* %arrayidx7.i, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

mz_zip_get_cdh.exit:                              ; preds = %if.then.i, %if.end.i
  %17 = load i8*, i8** %retval.i, align 8
  store i8* %17, i8** %p, align 8
  %18 = load i8*, i8** %p, align 8
  %tobool = icmp ne i8* %18, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %mz_zip_get_cdh.exit
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %19, %struct.mz_zip_archive** %pZip.addr.i19, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i19, align 8
  %tobool.i20 = icmp ne %struct.mz_zip_archive* %20, null
  br i1 %tobool.i20, label %if.then.i21, label %mz_zip_set_error.exit

if.then.i21:                                      ; preds = %if.then
  %21 = load i32, i32* %err_num.addr.i, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i19, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 5
  store i32 %21, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i21
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %mz_zip_get_cdh.exit
  %23 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %23, i64 28
  %24 = bitcast i8* %add.ptr to i16*
  %25 = load i16, i16* %24, align 2
  %conv = zext i16 %25 to i32
  store i32 %conv, i32* %filename_len, align 4
  %26 = load i32, i32* %filename_len, align 4
  %tobool2 = icmp ne i32 %26, 0
  br i1 %tobool2, label %if.then3, label %if.end11

if.then3:                                         ; preds = %if.end
  %27 = load i8*, i8** %p, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %27, i64 46
  %28 = load i32, i32* %filename_len, align 4
  %idx.ext = zext i32 %28 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %add.ptr4, i64 %idx.ext
  %add.ptr6 = getelementptr inbounds i8, i8* %add.ptr5, i64 -1
  %29 = load i8, i8* %add.ptr6, align 1
  %conv7 = zext i8 %29 to i32
  %cmp = icmp eq i32 %conv7, 47
  br i1 %cmp, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then3
  store i32 1, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.then3
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.end
  %30 = load i8*, i8** %p, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %30, i64 4
  %31 = bitcast i8* %add.ptr12 to i16*
  %32 = load i16, i16* %31, align 2
  %conv13 = zext i16 %32 to i32
  %shr = ashr i32 %conv13, 8
  store i32 %shr, i32* %attribute_mapping_id, align 4
  %33 = load i32, i32* %attribute_mapping_id, align 4
  %34 = load i8*, i8** %p, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %34, i64 38
  %35 = bitcast i8* %add.ptr14 to i32*
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %external_attr, align 4
  %37 = load i32, i32* %external_attr, align 4
  %and = and i32 %37, 16
  %cmp15 = icmp ne i32 %and, 0
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end11
  store i32 1, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end11
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end18, %if.then17, %if.then9, %mz_zip_set_error.exit
  %38 = load i32, i32* %retval, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_locate_file(%struct.mz_zip_archive* %pZip, i8* %pName, i8* %pComment, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pName.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %index = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pName, i8** %pName.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pName.addr, align 8
  %2 = load i8*, i8** %pComment.addr, align 8
  %3 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %0, i8* %1, i8* %2, i32 %3, i32* %index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %4 = load i32, i32* %index, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %pZip, i8* %pName, i8* %pComment, i32 %flags, i32* %pIndex) #0 {
entry:
  %pZip.addr.i184 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i185 = alloca i32, align 4
  %retval.i119 = alloca i32, align 4
  %pA.addr.i120 = alloca i8*, align 8
  %pB.addr.i121 = alloca i8*, align 8
  %len.addr.i122 = alloca i32, align 4
  %flags.addr.i123 = alloca i32, align 4
  %i.i124 = alloca i32, align 4
  %pZip.addr.i112 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i113 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %pA.addr.i = alloca i8*, align 8
  %pB.addr.i = alloca i8*, align 8
  %len.addr.i = alloca i32, align 4
  %flags.addr.i = alloca i32, align 4
  %i.i = alloca i32, align 4
  %pZip.addr.i104 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i105 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pName.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pIndex.addr = alloca i32*, align 8
  %file_index = alloca i32, align 4
  %name_len = alloca i64, align 8
  %comment_len = alloca i64, align 8
  %pHeader = alloca i8*, align 8
  %filename_len = alloca i32, align 4
  %pFilename = alloca i8*, align 8
  %file_extra_len = alloca i32, align 4
  %file_comment_len = alloca i32, align 4
  %pFile_comment = alloca i8*, align 8
  %ofs = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pName, i8** %pName.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32* %pIndex, i32** %pIndex.addr, align 8
  %0 = load i32*, i32** %pIndex.addr, align 8
  %tobool = icmp ne i32* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %pIndex.addr, align 8
  store i32 0, i32* %1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool1 = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then5

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool2 = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool2, label %lor.lhs.false3, label %if.then5

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %5 = load i8*, i8** %pName.addr, align 8
  %tobool4 = icmp ne i8* %5, null
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %lor.lhs.false3, %lor.lhs.false, %if.end
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %6, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %7, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then5
  %8 = load i32, i32* %err_num.addr.i, align 4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 5
  store i32 %8, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then5, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %lor.lhs.false3
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState7, align 8
  %m_init_flags = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 3
  %12 = load i32, i32* %m_init_flags, align 8
  %and = and i32 %12, 2048
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %if.end6
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 3
  %14 = load i32, i32* %m_zip_mode, align 4
  %cmp8 = icmp eq i32 %14, 1
  br i1 %cmp8, label %land.lhs.true9, label %if.end19

land.lhs.true9:                                   ; preds = %land.lhs.true
  %15 = load i32, i32* %flags.addr, align 4
  %and10 = and i32 %15, 768
  %cmp11 = icmp eq i32 %and10, 0
  br i1 %cmp11, label %land.lhs.true12, label %if.end19

land.lhs.true12:                                  ; preds = %land.lhs.true9
  %16 = load i8*, i8** %pComment.addr, align 8
  %tobool13 = icmp ne i8* %16, null
  br i1 %tobool13, label %if.end19, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 15
  %18 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState15, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %18, i32 0, i32 2
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 1
  %19 = load i64, i64* %m_size, align 8
  %tobool16 = icmp ne i64 %19, 0
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %land.lhs.true14
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %21 = load i8*, i8** %pName.addr, align 8
  %22 = load i32*, i32** %pIndex.addr, align 8
  %call18 = call i32 @mz_zip_locate_file_binary_search(%struct.mz_zip_archive* %20, i8* %21, i32* %22)
  store i32 %call18, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %land.lhs.true14, %land.lhs.true12, %land.lhs.true9, %land.lhs.true, %if.end6
  %23 = load i8*, i8** %pName.addr, align 8
  %call20 = call i64 @strlen(i8* %23)
  store i64 %call20, i64* %name_len, align 8
  %24 = load i64, i64* %name_len, align 8
  %cmp21 = icmp ugt i64 %24, 65535
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %25, %struct.mz_zip_archive** %pZip.addr.i112, align 8
  store i32 24, i32* %err_num.addr.i113, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i112, align 8
  %tobool.i114 = icmp ne %struct.mz_zip_archive* %26, null
  br i1 %tobool.i114, label %if.then.i116, label %mz_zip_set_error.exit118

if.then.i116:                                     ; preds = %if.then22
  %27 = load i32, i32* %err_num.addr.i113, align 4
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i112, align 8
  %m_last_error.i115 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 5
  store i32 %27, i32* %m_last_error.i115, align 4
  br label %mz_zip_set_error.exit118

mz_zip_set_error.exit118:                         ; preds = %if.then22, %if.then.i116
  store i32 0, i32* %retval, align 4
  br label %return

if.end24:                                         ; preds = %if.end19
  %29 = load i8*, i8** %pComment.addr, align 8
  %tobool25 = icmp ne i8* %29, null
  br i1 %tobool25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end24
  %30 = load i8*, i8** %pComment.addr, align 8
  %call26 = call i64 @strlen(i8* %30)
  br label %cond.end

cond.false:                                       ; preds = %if.end24
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call26, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %comment_len, align 8
  %31 = load i64, i64* %comment_len, align 8
  %cmp27 = icmp ugt i64 %31, 65535
  br i1 %cmp27, label %if.then28, label %if.end30

if.then28:                                        ; preds = %cond.end
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %32, %struct.mz_zip_archive** %pZip.addr.i184, align 8
  store i32 24, i32* %err_num.addr.i185, align 4
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i184, align 8
  %tobool.i186 = icmp ne %struct.mz_zip_archive* %33, null
  br i1 %tobool.i186, label %if.then.i188, label %mz_zip_set_error.exit190

if.then.i188:                                     ; preds = %if.then28
  %34 = load i32, i32* %err_num.addr.i185, align 4
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i184, align 8
  %m_last_error.i187 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 5
  store i32 %34, i32* %m_last_error.i187, align 4
  br label %mz_zip_set_error.exit190

mz_zip_set_error.exit190:                         ; preds = %if.then28, %if.then.i188
  store i32 0, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %cond.end
  store i32 0, i32* %file_index, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end30
  %36 = load i32, i32* %file_index, align 4
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %37, i32 0, i32 2
  %38 = load i32, i32* %m_total_files, align 8
  %cmp31 = icmp ult i32 %36, %38
  br i1 %cmp31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState32 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %39, i32 0, i32 15
  %40 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState32, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %40, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 0
  %41 = load i8*, i8** %m_p, align 8
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %42, i32 0, i32 15
  %43 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState33, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %43, i32 0, i32 1
  %m_p34 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 0
  %44 = load i8*, i8** %m_p34, align 8
  %45 = bitcast i8* %44 to i32*
  %46 = load i32, i32* %file_index, align 4
  %idxprom = zext i32 %46 to i64
  %arrayidx = getelementptr inbounds i32, i32* %45, i64 %idxprom
  %47 = load i32, i32* %arrayidx, align 4
  %idxprom35 = zext i32 %47 to i64
  %arrayidx36 = getelementptr inbounds i8, i8* %41, i64 %idxprom35
  store i8* %arrayidx36, i8** %pHeader, align 8
  %48 = load i8*, i8** %pHeader, align 8
  %add.ptr = getelementptr inbounds i8, i8* %48, i64 28
  %49 = bitcast i8* %add.ptr to i16*
  %50 = load i16, i16* %49, align 2
  %conv = zext i16 %50 to i32
  store i32 %conv, i32* %filename_len, align 4
  %51 = load i8*, i8** %pHeader, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %51, i64 46
  store i8* %add.ptr37, i8** %pFilename, align 8
  %52 = load i32, i32* %filename_len, align 4
  %conv38 = zext i32 %52 to i64
  %53 = load i64, i64* %name_len, align 8
  %cmp39 = icmp ult i64 %conv38, %53
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %for.body
  br label %for.inc

if.end42:                                         ; preds = %for.body
  %54 = load i64, i64* %comment_len, align 8
  %tobool43 = icmp ne i64 %54, 0
  br i1 %tobool43, label %if.then44, label %if.end60

if.then44:                                        ; preds = %if.end42
  %55 = load i8*, i8** %pHeader, align 8
  %add.ptr45 = getelementptr inbounds i8, i8* %55, i64 30
  %56 = bitcast i8* %add.ptr45 to i16*
  %57 = load i16, i16* %56, align 2
  %conv46 = zext i16 %57 to i32
  store i32 %conv46, i32* %file_extra_len, align 4
  %58 = load i8*, i8** %pHeader, align 8
  %add.ptr47 = getelementptr inbounds i8, i8* %58, i64 32
  %59 = bitcast i8* %add.ptr47 to i16*
  %60 = load i16, i16* %59, align 2
  %conv48 = zext i16 %60 to i32
  store i32 %conv48, i32* %file_comment_len, align 4
  %61 = load i8*, i8** %pFilename, align 8
  %62 = load i32, i32* %filename_len, align 4
  %idx.ext = zext i32 %62 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %61, i64 %idx.ext
  %63 = load i32, i32* %file_extra_len, align 4
  %idx.ext50 = zext i32 %63 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %add.ptr49, i64 %idx.ext50
  store i8* %add.ptr51, i8** %pFile_comment, align 8
  %64 = load i32, i32* %file_comment_len, align 4
  %conv52 = zext i32 %64 to i64
  %65 = load i64, i64* %comment_len, align 8
  %cmp53 = icmp ne i64 %conv52, %65
  br i1 %cmp53, label %if.then58, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %if.then44
  %66 = load i8*, i8** %pComment.addr, align 8
  %67 = load i8*, i8** %pFile_comment, align 8
  %68 = load i32, i32* %file_comment_len, align 4
  %69 = load i32, i32* %flags.addr, align 4
  store i8* %66, i8** %pA.addr.i120, align 8
  store i8* %67, i8** %pB.addr.i121, align 8
  store i32 %68, i32* %len.addr.i122, align 4
  store i32 %69, i32* %flags.addr.i123, align 4
  %70 = load i32, i32* %flags.addr.i123, align 4
  %and.i125 = and i32 %70, 256
  %tobool.i126 = icmp ne i32 %and.i125, 0
  br i1 %tobool.i126, label %if.then.i131, label %if.end.i132

if.then.i131:                                     ; preds = %lor.lhs.false55
  %71 = load i8*, i8** %pA.addr.i120, align 8
  %72 = load i8*, i8** %pB.addr.i121, align 8
  %73 = load i32, i32* %len.addr.i122, align 4
  %conv.i127 = zext i32 %73 to i64
  %call.i128 = call i32 @memcmp(i8* %71, i8* %72, i64 %conv.i127) #10
  %cmp.i129 = icmp eq i32 0, %call.i128
  %conv1.i130 = zext i1 %cmp.i129 to i32
  store i32 %conv1.i130, i32* %retval.i119, align 4
  br label %mz_zip_string_equal.exit183

if.end.i132:                                      ; preds = %lor.lhs.false55
  store i32 0, i32* %i.i124, align 4
  br label %for.cond.i134

for.cond.i134:                                    ; preds = %if.end44.i180, %if.end.i132
  %74 = load i32, i32* %i.i124, align 4
  %75 = load i32, i32* %len.addr.i122, align 4
  %cmp2.i133 = icmp ult i32 %74, %75
  br i1 %cmp2.i133, label %for.body.i139, label %for.end.i182

for.body.i139:                                    ; preds = %for.cond.i134
  %76 = load i8*, i8** %pA.addr.i120, align 8
  %77 = load i32, i32* %i.i124, align 4
  %idxprom.i135 = zext i32 %77 to i64
  %arrayidx.i136 = getelementptr inbounds i8, i8* %76, i64 %idxprom.i135
  %78 = load i8, i8* %arrayidx.i136, align 1
  %conv4.i137 = sext i8 %78 to i32
  %cmp5.i138 = icmp sge i32 %conv4.i137, 65
  br i1 %cmp5.i138, label %land.lhs.true.i144, label %cond.false.i154

land.lhs.true.i144:                               ; preds = %for.body.i139
  %79 = load i8*, i8** %pA.addr.i120, align 8
  %80 = load i32, i32* %i.i124, align 4
  %idxprom7.i140 = zext i32 %80 to i64
  %arrayidx8.i141 = getelementptr inbounds i8, i8* %79, i64 %idxprom7.i140
  %81 = load i8, i8* %arrayidx8.i141, align 1
  %conv9.i142 = sext i8 %81 to i32
  %cmp10.i143 = icmp sle i32 %conv9.i142, 90
  br i1 %cmp10.i143, label %cond.true.i150, label %cond.false.i154

cond.true.i150:                                   ; preds = %land.lhs.true.i144
  %82 = load i8*, i8** %pA.addr.i120, align 8
  %83 = load i32, i32* %i.i124, align 4
  %idxprom12.i145 = zext i32 %83 to i64
  %arrayidx13.i146 = getelementptr inbounds i8, i8* %82, i64 %idxprom12.i145
  %84 = load i8, i8* %arrayidx13.i146, align 1
  %conv14.i147 = sext i8 %84 to i32
  %sub.i148 = sub nsw i32 %conv14.i147, 65
  %add.i149 = add nsw i32 %sub.i148, 97
  br label %cond.end.i160

cond.false.i154:                                  ; preds = %land.lhs.true.i144, %for.body.i139
  %85 = load i8*, i8** %pA.addr.i120, align 8
  %86 = load i32, i32* %i.i124, align 4
  %idxprom15.i151 = zext i32 %86 to i64
  %arrayidx16.i152 = getelementptr inbounds i8, i8* %85, i64 %idxprom15.i151
  %87 = load i8, i8* %arrayidx16.i152, align 1
  %conv17.i153 = sext i8 %87 to i32
  br label %cond.end.i160

cond.end.i160:                                    ; preds = %cond.false.i154, %cond.true.i150
  %cond.i155 = phi i32 [ %add.i149, %cond.true.i150 ], [ %conv17.i153, %cond.false.i154 ]
  %88 = load i8*, i8** %pB.addr.i121, align 8
  %89 = load i32, i32* %i.i124, align 4
  %idxprom18.i156 = zext i32 %89 to i64
  %arrayidx19.i157 = getelementptr inbounds i8, i8* %88, i64 %idxprom18.i156
  %90 = load i8, i8* %arrayidx19.i157, align 1
  %conv20.i158 = sext i8 %90 to i32
  %cmp21.i159 = icmp sge i32 %conv20.i158, 65
  br i1 %cmp21.i159, label %land.lhs.true23.i165, label %cond.false35.i175

land.lhs.true23.i165:                             ; preds = %cond.end.i160
  %91 = load i8*, i8** %pB.addr.i121, align 8
  %92 = load i32, i32* %i.i124, align 4
  %idxprom24.i161 = zext i32 %92 to i64
  %arrayidx25.i162 = getelementptr inbounds i8, i8* %91, i64 %idxprom24.i161
  %93 = load i8, i8* %arrayidx25.i162, align 1
  %conv26.i163 = sext i8 %93 to i32
  %cmp27.i164 = icmp sle i32 %conv26.i163, 90
  br i1 %cmp27.i164, label %cond.true29.i171, label %cond.false35.i175

cond.true29.i171:                                 ; preds = %land.lhs.true23.i165
  %94 = load i8*, i8** %pB.addr.i121, align 8
  %95 = load i32, i32* %i.i124, align 4
  %idxprom30.i166 = zext i32 %95 to i64
  %arrayidx31.i167 = getelementptr inbounds i8, i8* %94, i64 %idxprom30.i166
  %96 = load i8, i8* %arrayidx31.i167, align 1
  %conv32.i168 = sext i8 %96 to i32
  %sub33.i169 = sub nsw i32 %conv32.i168, 65
  %add34.i170 = add nsw i32 %sub33.i169, 97
  br label %cond.end39.i178

cond.false35.i175:                                ; preds = %land.lhs.true23.i165, %cond.end.i160
  %97 = load i8*, i8** %pB.addr.i121, align 8
  %98 = load i32, i32* %i.i124, align 4
  %idxprom36.i172 = zext i32 %98 to i64
  %arrayidx37.i173 = getelementptr inbounds i8, i8* %97, i64 %idxprom36.i172
  %99 = load i8, i8* %arrayidx37.i173, align 1
  %conv38.i174 = sext i8 %99 to i32
  br label %cond.end39.i178

cond.end39.i178:                                  ; preds = %cond.false35.i175, %cond.true29.i171
  %cond40.i176 = phi i32 [ %add34.i170, %cond.true29.i171 ], [ %conv38.i174, %cond.false35.i175 ]
  %cmp41.i177 = icmp ne i32 %cond.i155, %cond40.i176
  br i1 %cmp41.i177, label %if.then43.i179, label %if.end44.i180

if.then43.i179:                                   ; preds = %cond.end39.i178
  store i32 0, i32* %retval.i119, align 4
  br label %mz_zip_string_equal.exit183

if.end44.i180:                                    ; preds = %cond.end39.i178
  %100 = load i32, i32* %i.i124, align 4
  %inc.i181 = add i32 %100, 1
  store i32 %inc.i181, i32* %i.i124, align 4
  br label %for.cond.i134

for.end.i182:                                     ; preds = %for.cond.i134
  store i32 1, i32* %retval.i119, align 4
  br label %mz_zip_string_equal.exit183

mz_zip_string_equal.exit183:                      ; preds = %if.then.i131, %if.then43.i179, %for.end.i182
  %101 = load i32, i32* %retval.i119, align 4
  %tobool57 = icmp ne i32 %101, 0
  br i1 %tobool57, label %if.end59, label %if.then58

if.then58:                                        ; preds = %mz_zip_string_equal.exit183, %if.then44
  br label %for.inc

if.end59:                                         ; preds = %mz_zip_string_equal.exit183
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end42
  %102 = load i32, i32* %flags.addr, align 4
  %and61 = and i32 %102, 512
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %land.lhs.true63, label %if.end90

land.lhs.true63:                                  ; preds = %if.end60
  %103 = load i32, i32* %filename_len, align 4
  %tobool64 = icmp ne i32 %103, 0
  br i1 %tobool64, label %if.then65, label %if.end90

if.then65:                                        ; preds = %land.lhs.true63
  %104 = load i32, i32* %filename_len, align 4
  %sub = sub i32 %104, 1
  store i32 %sub, i32* %ofs, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then65
  %105 = load i8*, i8** %pFilename, align 8
  %106 = load i32, i32* %ofs, align 4
  %idxprom66 = sext i32 %106 to i64
  %arrayidx67 = getelementptr inbounds i8, i8* %105, i64 %idxprom66
  %107 = load i8, i8* %arrayidx67, align 1
  %conv68 = sext i8 %107 to i32
  %cmp69 = icmp eq i32 %conv68, 47
  br i1 %cmp69, label %if.then83, label %lor.lhs.false71

lor.lhs.false71:                                  ; preds = %do.body
  %108 = load i8*, i8** %pFilename, align 8
  %109 = load i32, i32* %ofs, align 4
  %idxprom72 = sext i32 %109 to i64
  %arrayidx73 = getelementptr inbounds i8, i8* %108, i64 %idxprom72
  %110 = load i8, i8* %arrayidx73, align 1
  %conv74 = sext i8 %110 to i32
  %cmp75 = icmp eq i32 %conv74, 92
  br i1 %cmp75, label %if.then83, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %lor.lhs.false71
  %111 = load i8*, i8** %pFilename, align 8
  %112 = load i32, i32* %ofs, align 4
  %idxprom78 = sext i32 %112 to i64
  %arrayidx79 = getelementptr inbounds i8, i8* %111, i64 %idxprom78
  %113 = load i8, i8* %arrayidx79, align 1
  %conv80 = sext i8 %113 to i32
  %cmp81 = icmp eq i32 %conv80, 58
  br i1 %cmp81, label %if.then83, label %if.end84

if.then83:                                        ; preds = %lor.lhs.false77, %lor.lhs.false71, %do.body
  br label %do.end

if.end84:                                         ; preds = %lor.lhs.false77
  br label %do.cond

do.cond:                                          ; preds = %if.end84
  %114 = load i32, i32* %ofs, align 4
  %dec = add nsw i32 %114, -1
  store i32 %dec, i32* %ofs, align 4
  %cmp85 = icmp sge i32 %dec, 0
  br i1 %cmp85, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then83
  %115 = load i32, i32* %ofs, align 4
  %inc = add nsw i32 %115, 1
  store i32 %inc, i32* %ofs, align 4
  %116 = load i32, i32* %ofs, align 4
  %117 = load i8*, i8** %pFilename, align 8
  %idx.ext87 = sext i32 %116 to i64
  %add.ptr88 = getelementptr inbounds i8, i8* %117, i64 %idx.ext87
  store i8* %add.ptr88, i8** %pFilename, align 8
  %118 = load i32, i32* %ofs, align 4
  %119 = load i32, i32* %filename_len, align 4
  %sub89 = sub i32 %119, %118
  store i32 %sub89, i32* %filename_len, align 4
  br label %if.end90

if.end90:                                         ; preds = %do.end, %land.lhs.true63, %if.end60
  %120 = load i32, i32* %filename_len, align 4
  %conv91 = zext i32 %120 to i64
  %121 = load i64, i64* %name_len, align 8
  %cmp92 = icmp eq i64 %conv91, %121
  br i1 %cmp92, label %land.lhs.true94, label %if.end101

land.lhs.true94:                                  ; preds = %if.end90
  %122 = load i8*, i8** %pName.addr, align 8
  %123 = load i8*, i8** %pFilename, align 8
  %124 = load i32, i32* %filename_len, align 4
  %125 = load i32, i32* %flags.addr, align 4
  store i8* %122, i8** %pA.addr.i, align 8
  store i8* %123, i8** %pB.addr.i, align 8
  store i32 %124, i32* %len.addr.i, align 4
  store i32 %125, i32* %flags.addr.i, align 4
  %126 = load i32, i32* %flags.addr.i, align 4
  %and.i = and i32 %126, 256
  %tobool.i110 = icmp ne i32 %and.i, 0
  br i1 %tobool.i110, label %if.then.i111, label %if.end.i

if.then.i111:                                     ; preds = %land.lhs.true94
  %127 = load i8*, i8** %pA.addr.i, align 8
  %128 = load i8*, i8** %pB.addr.i, align 8
  %129 = load i32, i32* %len.addr.i, align 4
  %conv.i = zext i32 %129 to i64
  %call.i = call i32 @memcmp(i8* %127, i8* %128, i64 %conv.i) #10
  %cmp.i = icmp eq i32 0, %call.i
  %conv1.i = zext i1 %cmp.i to i32
  store i32 %conv1.i, i32* %retval.i, align 4
  br label %mz_zip_string_equal.exit

if.end.i:                                         ; preds = %land.lhs.true94
  store i32 0, i32* %i.i, align 4
  br label %for.cond.i

for.cond.i:                                       ; preds = %if.end44.i, %if.end.i
  %130 = load i32, i32* %i.i, align 4
  %131 = load i32, i32* %len.addr.i, align 4
  %cmp2.i = icmp ult i32 %130, %131
  br i1 %cmp2.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.cond.i
  %132 = load i8*, i8** %pA.addr.i, align 8
  %133 = load i32, i32* %i.i, align 4
  %idxprom.i = zext i32 %133 to i64
  %arrayidx.i = getelementptr inbounds i8, i8* %132, i64 %idxprom.i
  %134 = load i8, i8* %arrayidx.i, align 1
  %conv4.i = sext i8 %134 to i32
  %cmp5.i = icmp sge i32 %conv4.i, 65
  br i1 %cmp5.i, label %land.lhs.true.i, label %cond.false.i

land.lhs.true.i:                                  ; preds = %for.body.i
  %135 = load i8*, i8** %pA.addr.i, align 8
  %136 = load i32, i32* %i.i, align 4
  %idxprom7.i = zext i32 %136 to i64
  %arrayidx8.i = getelementptr inbounds i8, i8* %135, i64 %idxprom7.i
  %137 = load i8, i8* %arrayidx8.i, align 1
  %conv9.i = sext i8 %137 to i32
  %cmp10.i = icmp sle i32 %conv9.i, 90
  br i1 %cmp10.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %land.lhs.true.i
  %138 = load i8*, i8** %pA.addr.i, align 8
  %139 = load i32, i32* %i.i, align 4
  %idxprom12.i = zext i32 %139 to i64
  %arrayidx13.i = getelementptr inbounds i8, i8* %138, i64 %idxprom12.i
  %140 = load i8, i8* %arrayidx13.i, align 1
  %conv14.i = sext i8 %140 to i32
  %sub.i = sub nsw i32 %conv14.i, 65
  %add.i = add nsw i32 %sub.i, 97
  br label %cond.end.i

cond.false.i:                                     ; preds = %land.lhs.true.i, %for.body.i
  %141 = load i8*, i8** %pA.addr.i, align 8
  %142 = load i32, i32* %i.i, align 4
  %idxprom15.i = zext i32 %142 to i64
  %arrayidx16.i = getelementptr inbounds i8, i8* %141, i64 %idxprom15.i
  %143 = load i8, i8* %arrayidx16.i, align 1
  %conv17.i = sext i8 %143 to i32
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %add.i, %cond.true.i ], [ %conv17.i, %cond.false.i ]
  %144 = load i8*, i8** %pB.addr.i, align 8
  %145 = load i32, i32* %i.i, align 4
  %idxprom18.i = zext i32 %145 to i64
  %arrayidx19.i = getelementptr inbounds i8, i8* %144, i64 %idxprom18.i
  %146 = load i8, i8* %arrayidx19.i, align 1
  %conv20.i = sext i8 %146 to i32
  %cmp21.i = icmp sge i32 %conv20.i, 65
  br i1 %cmp21.i, label %land.lhs.true23.i, label %cond.false35.i

land.lhs.true23.i:                                ; preds = %cond.end.i
  %147 = load i8*, i8** %pB.addr.i, align 8
  %148 = load i32, i32* %i.i, align 4
  %idxprom24.i = zext i32 %148 to i64
  %arrayidx25.i = getelementptr inbounds i8, i8* %147, i64 %idxprom24.i
  %149 = load i8, i8* %arrayidx25.i, align 1
  %conv26.i = sext i8 %149 to i32
  %cmp27.i = icmp sle i32 %conv26.i, 90
  br i1 %cmp27.i, label %cond.true29.i, label %cond.false35.i

cond.true29.i:                                    ; preds = %land.lhs.true23.i
  %150 = load i8*, i8** %pB.addr.i, align 8
  %151 = load i32, i32* %i.i, align 4
  %idxprom30.i = zext i32 %151 to i64
  %arrayidx31.i = getelementptr inbounds i8, i8* %150, i64 %idxprom30.i
  %152 = load i8, i8* %arrayidx31.i, align 1
  %conv32.i = sext i8 %152 to i32
  %sub33.i = sub nsw i32 %conv32.i, 65
  %add34.i = add nsw i32 %sub33.i, 97
  br label %cond.end39.i

cond.false35.i:                                   ; preds = %land.lhs.true23.i, %cond.end.i
  %153 = load i8*, i8** %pB.addr.i, align 8
  %154 = load i32, i32* %i.i, align 4
  %idxprom36.i = zext i32 %154 to i64
  %arrayidx37.i = getelementptr inbounds i8, i8* %153, i64 %idxprom36.i
  %155 = load i8, i8* %arrayidx37.i, align 1
  %conv38.i = sext i8 %155 to i32
  br label %cond.end39.i

cond.end39.i:                                     ; preds = %cond.false35.i, %cond.true29.i
  %cond40.i = phi i32 [ %add34.i, %cond.true29.i ], [ %conv38.i, %cond.false35.i ]
  %cmp41.i = icmp ne i32 %cond.i, %cond40.i
  br i1 %cmp41.i, label %if.then43.i, label %if.end44.i

if.then43.i:                                      ; preds = %cond.end39.i
  store i32 0, i32* %retval.i, align 4
  br label %mz_zip_string_equal.exit

if.end44.i:                                       ; preds = %cond.end39.i
  %156 = load i32, i32* %i.i, align 4
  %inc.i = add i32 %156, 1
  store i32 %inc.i, i32* %i.i, align 4
  br label %for.cond.i

for.end.i:                                        ; preds = %for.cond.i
  store i32 1, i32* %retval.i, align 4
  br label %mz_zip_string_equal.exit

mz_zip_string_equal.exit:                         ; preds = %if.then.i111, %if.then43.i, %for.end.i
  %157 = load i32, i32* %retval.i, align 4
  %tobool96 = icmp ne i32 %157, 0
  br i1 %tobool96, label %if.then97, label %if.end101

if.then97:                                        ; preds = %mz_zip_string_equal.exit
  %158 = load i32*, i32** %pIndex.addr, align 8
  %tobool98 = icmp ne i32* %158, null
  br i1 %tobool98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %if.then97
  %159 = load i32, i32* %file_index, align 4
  %160 = load i32*, i32** %pIndex.addr, align 8
  store i32 %159, i32* %160, align 4
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %if.then97
  store i32 1, i32* %retval, align 4
  br label %return

if.end101:                                        ; preds = %mz_zip_string_equal.exit, %if.end90
  br label %for.inc

for.inc:                                          ; preds = %if.end101, %if.then58, %if.then41
  %161 = load i32, i32* %file_index, align 4
  %inc102 = add i32 %161, 1
  store i32 %inc102, i32* %file_index, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %162 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %162, %struct.mz_zip_archive** %pZip.addr.i104, align 8
  store i32 28, i32* %err_num.addr.i105, align 4
  %163 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i104, align 8
  %tobool.i106 = icmp ne %struct.mz_zip_archive* %163, null
  br i1 %tobool.i106, label %if.then.i108, label %mz_zip_set_error.exit109

if.then.i108:                                     ; preds = %for.end
  %164 = load i32, i32* %err_num.addr.i105, align 4
  %165 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i104, align 8
  %m_last_error.i107 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %165, i32 0, i32 5
  store i32 %164, i32* %m_last_error.i107, align 4
  br label %mz_zip_set_error.exit109

mz_zip_set_error.exit109:                         ; preds = %for.end, %if.then.i108
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %mz_zip_set_error.exit109, %if.end100, %mz_zip_set_error.exit190, %mz_zip_set_error.exit118, %if.then17, %mz_zip_set_error.exit
  %166 = load i32, i32* %retval, align 4
  ret i32 %166
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_locate_file_binary_search(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32* %pIndex) #0 {
entry:
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %pCentral_dir_array.addr.i = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i = alloca i32, align 4
  %pR.addr.i = alloca i8*, align 8
  %r_len.addr.i = alloca i32, align 4
  %pL.i = alloca i8*, align 8
  %pE.i = alloca i8*, align 8
  %l_len.i = alloca i32, align 4
  %l.i = alloca i8, align 1
  %r.i = alloca i8, align 1
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pIndex.addr = alloca i32*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pCentral_dir_offsets = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir = alloca %struct.mz_zip_array*, align 8
  %pIndices = alloca i32*, align 8
  %size = alloca i32, align 4
  %filename_len = alloca i32, align 4
  %l = alloca i64, align 8
  %h = alloca i64, align 8
  %m = alloca i64, align 8
  %file_index = alloca i32, align 4
  %comp = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32* %pIndex, i32** %pIndex.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 15
  %1 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  store %struct.mz_zip_internal_state_tag* %1, %struct.mz_zip_internal_state_tag** %pState, align 8
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %2, i32 0, i32 1
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %3, i32 0, i32 0
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pCentral_dir, align 8
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 2
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 0
  %5 = load i8*, i8** %m_p, align 8
  %6 = bitcast i8* %5 to i32*
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 0
  store i32* %arrayidx, i32** %pIndices, align 8
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 2
  %8 = load i32, i32* %m_total_files, align 8
  store i32 %8, i32* %size, align 4
  %9 = load i8*, i8** %pFilename.addr, align 8
  %call = call i64 @strlen(i8* %9)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %filename_len, align 4
  %10 = load i32*, i32** %pIndex.addr, align 8
  %tobool = icmp ne i32* %10, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load i32*, i32** %pIndex.addr, align 8
  store i32 0, i32* %11, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i32, i32* %size, align 4
  %tobool1 = icmp ne i32 %12, 0
  br i1 %tobool1, label %if.then2, label %if.end22

if.then2:                                         ; preds = %if.end
  store i64 0, i64* %l, align 8
  %13 = load i32, i32* %size, align 4
  %conv3 = zext i32 %13 to i64
  %sub = sub nsw i64 %conv3, 1
  store i64 %sub, i64* %h, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end21, %if.then2
  %14 = load i64, i64* %l, align 8
  %15 = load i64, i64* %h, align 8
  %cmp = icmp sle i64 %14, %15
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i64, i64* %l, align 8
  %17 = load i64, i64* %h, align 8
  %18 = load i64, i64* %l, align 8
  %sub5 = sub nsw i64 %17, %18
  %shr = ashr i64 %sub5, 1
  %add = add nsw i64 %16, %shr
  store i64 %add, i64* %m, align 8
  %19 = load i32*, i32** %pIndices, align 8
  %20 = load i64, i64* %m, align 8
  %conv6 = trunc i64 %20 to i32
  %idxprom = zext i32 %conv6 to i64
  %arrayidx7 = getelementptr inbounds i32, i32* %19, i64 %idxprom
  %21 = load i32, i32* %arrayidx7, align 4
  store i32 %21, i32* %file_index, align 4
  %22 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8
  %23 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %24 = load i32, i32* %file_index, align 4
  %25 = load i8*, i8** %pFilename.addr, align 8
  %26 = load i32, i32* %filename_len, align 4
  store %struct.mz_zip_array* %22, %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  store %struct.mz_zip_array* %23, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  store i32 %24, i32* %l_index.addr.i, align 4
  store i8* %25, i8** %pR.addr.i, align 8
  store i32 %26, i32* %r_len.addr.i, align 4
  %27 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %27, i32 0, i32 0
  %28 = load i8*, i8** %m_p.i, align 8
  %29 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  %m_p1.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %29, i32 0, i32 0
  %30 = load i8*, i8** %m_p1.i, align 8
  %31 = bitcast i8* %30 to i32*
  %32 = load i32, i32* %l_index.addr.i, align 4
  %idxprom.i = zext i32 %32 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %31, i64 %idxprom.i
  %33 = load i32, i32* %arrayidx.i, align 4
  %idxprom2.i = zext i32 %33 to i64
  %arrayidx3.i = getelementptr inbounds i8, i8* %28, i64 %idxprom2.i
  store i8* %arrayidx3.i, i8** %pL.i, align 8
  %34 = load i8*, i8** %pL.i, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* %34, i64 28
  %35 = bitcast i8* %add.ptr.i to i16*
  %36 = load i16, i16* %35, align 2
  %conv.i = zext i16 %36 to i32
  store i32 %conv.i, i32* %l_len.i, align 4
  store i8 0, i8* %l.i, align 1
  store i8 0, i8* %r.i, align 1
  %37 = load i8*, i8** %pL.i, align 8
  %add.ptr4.i = getelementptr inbounds i8, i8* %37, i64 46
  store i8* %add.ptr4.i, i8** %pL.i, align 8
  %38 = load i8*, i8** %pL.i, align 8
  %39 = load i32, i32* %l_len.i, align 4
  %40 = load i32, i32* %r_len.addr.i, align 4
  %cmp.i = icmp ult i32 %39, %40
  br i1 %cmp.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %while.body
  %41 = load i32, i32* %l_len.i, align 4
  br label %cond.end.i

cond.false.i:                                     ; preds = %while.body
  %42 = load i32, i32* %r_len.addr.i, align 4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %41, %cond.true.i ], [ %42, %cond.false.i ]
  %idx.ext.i = zext i32 %cond.i to i64
  %add.ptr6.i = getelementptr inbounds i8, i8* %38, i64 %idx.ext.i
  store i8* %add.ptr6.i, i8** %pE.i, align 8
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end.i, %cond.end.i
  %43 = load i8*, i8** %pL.i, align 8
  %44 = load i8*, i8** %pE.i, align 8
  %cmp7.i = icmp ult i8* %43, %44
  br i1 %cmp7.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %45 = load i8*, i8** %pL.i, align 8
  %46 = load i8, i8* %45, align 1
  %conv9.i = zext i8 %46 to i32
  %cmp10.i = icmp sge i32 %conv9.i, 65
  br i1 %cmp10.i, label %land.lhs.true.i, label %cond.false17.i

land.lhs.true.i:                                  ; preds = %while.body.i
  %47 = load i8*, i8** %pL.i, align 8
  %48 = load i8, i8* %47, align 1
  %conv12.i = zext i8 %48 to i32
  %cmp13.i = icmp sle i32 %conv12.i, 90
  br i1 %cmp13.i, label %cond.true15.i, label %cond.false17.i

cond.true15.i:                                    ; preds = %land.lhs.true.i
  %49 = load i8*, i8** %pL.i, align 8
  %50 = load i8, i8* %49, align 1
  %conv16.i = zext i8 %50 to i32
  %sub.i = sub nsw i32 %conv16.i, 65
  %add.i = add nsw i32 %sub.i, 97
  br label %cond.end19.i

cond.false17.i:                                   ; preds = %land.lhs.true.i, %while.body.i
  %51 = load i8*, i8** %pL.i, align 8
  %52 = load i8, i8* %51, align 1
  %conv18.i = zext i8 %52 to i32
  br label %cond.end19.i

cond.end19.i:                                     ; preds = %cond.false17.i, %cond.true15.i
  %cond20.i = phi i32 [ %add.i, %cond.true15.i ], [ %conv18.i, %cond.false17.i ]
  %conv21.i = trunc i32 %cond20.i to i8
  store i8 %conv21.i, i8* %l.i, align 1
  %conv22.i = zext i8 %conv21.i to i32
  %53 = load i8*, i8** %pR.addr.i, align 8
  %54 = load i8, i8* %53, align 1
  %conv23.i = sext i8 %54 to i32
  %cmp24.i = icmp sge i32 %conv23.i, 65
  br i1 %cmp24.i, label %land.lhs.true26.i, label %cond.false34.i

land.lhs.true26.i:                                ; preds = %cond.end19.i
  %55 = load i8*, i8** %pR.addr.i, align 8
  %56 = load i8, i8* %55, align 1
  %conv27.i = sext i8 %56 to i32
  %cmp28.i = icmp sle i32 %conv27.i, 90
  br i1 %cmp28.i, label %cond.true30.i, label %cond.false34.i

cond.true30.i:                                    ; preds = %land.lhs.true26.i
  %57 = load i8*, i8** %pR.addr.i, align 8
  %58 = load i8, i8* %57, align 1
  %conv31.i = sext i8 %58 to i32
  %sub32.i = sub nsw i32 %conv31.i, 65
  %add33.i = add nsw i32 %sub32.i, 97
  br label %cond.end36.i

cond.false34.i:                                   ; preds = %land.lhs.true26.i, %cond.end19.i
  %59 = load i8*, i8** %pR.addr.i, align 8
  %60 = load i8, i8* %59, align 1
  %conv35.i = sext i8 %60 to i32
  br label %cond.end36.i

cond.end36.i:                                     ; preds = %cond.false34.i, %cond.true30.i
  %cond37.i = phi i32 [ %add33.i, %cond.true30.i ], [ %conv35.i, %cond.false34.i ]
  %conv38.i = trunc i32 %cond37.i to i8
  store i8 %conv38.i, i8* %r.i, align 1
  %conv39.i = zext i8 %conv38.i to i32
  %cmp40.i = icmp ne i32 %conv22.i, %conv39.i
  br i1 %cmp40.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.end36.i
  br label %while.end.i

if.end.i:                                         ; preds = %cond.end36.i
  %61 = load i8*, i8** %pL.i, align 8
  %incdec.ptr.i = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %incdec.ptr.i, i8** %pL.i, align 8
  %62 = load i8*, i8** %pR.addr.i, align 8
  %incdec.ptr42.i = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr42.i, i8** %pR.addr.i, align 8
  br label %while.cond.i

while.end.i:                                      ; preds = %if.then.i, %while.cond.i
  %63 = load i8*, i8** %pL.i, align 8
  %64 = load i8*, i8** %pE.i, align 8
  %cmp43.i = icmp eq i8* %63, %64
  br i1 %cmp43.i, label %cond.true45.i, label %cond.false47.i

cond.true45.i:                                    ; preds = %while.end.i
  %65 = load i32, i32* %l_len.i, align 4
  %66 = load i32, i32* %r_len.addr.i, align 4
  %sub46.i = sub i32 %65, %66
  br label %mz_zip_filename_compare.exit

cond.false47.i:                                   ; preds = %while.end.i
  %67 = load i8, i8* %l.i, align 1
  %conv48.i = zext i8 %67 to i32
  %68 = load i8, i8* %r.i, align 1
  %conv49.i = zext i8 %68 to i32
  %sub50.i = sub nsw i32 %conv48.i, %conv49.i
  br label %mz_zip_filename_compare.exit

mz_zip_filename_compare.exit:                     ; preds = %cond.true45.i, %cond.false47.i
  %cond52.i = phi i32 [ %sub46.i, %cond.true45.i ], [ %sub50.i, %cond.false47.i ]
  store i32 %cond52.i, i32* %comp, align 4
  %69 = load i32, i32* %comp, align 4
  %tobool9 = icmp ne i32 %69, 0
  br i1 %tobool9, label %if.else, label %if.then10

if.then10:                                        ; preds = %mz_zip_filename_compare.exit
  %70 = load i32*, i32** %pIndex.addr, align 8
  %tobool11 = icmp ne i32* %70, null
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then10
  %71 = load i32, i32* %file_index, align 4
  %72 = load i32*, i32** %pIndex.addr, align 8
  store i32 %71, i32* %72, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then10
  store i32 1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %mz_zip_filename_compare.exit
  %73 = load i32, i32* %comp, align 4
  %cmp14 = icmp slt i32 %73, 0
  br i1 %cmp14, label %if.then16, label %if.else18

if.then16:                                        ; preds = %if.else
  %74 = load i64, i64* %m, align 8
  %add17 = add nsw i64 %74, 1
  store i64 %add17, i64* %l, align 8
  br label %if.end20

if.else18:                                        ; preds = %if.else
  %75 = load i64, i64* %m, align 8
  %sub19 = sub nsw i64 %75, 1
  store i64 %sub19, i64* %h, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.else18, %if.then16
  br label %if.end21

if.end21:                                         ; preds = %if.end20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end22

if.end22:                                         ; preds = %while.end, %if.end
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %76, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 28, i32* %err_num.addr.i, align 4
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %77, null
  br i1 %tobool.i, label %if.then.i24, label %mz_zip_set_error.exit

if.then.i24:                                      ; preds = %if.end22
  %78 = load i32, i32* %err_num.addr.i, align 4
  %79 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %79, i32 0, i32 5
  store i32 %78, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.end22, %if.then.i24
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %mz_zip_set_error.exit, %if.end13
  %80 = load i32, i32* %retval, align 4
  ret i32 %80
}

declare i64 @strlen(i8*) #1

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pBuf, i64 %buf_size, i32 %flags, i8* %pUser_read_buf, i64 %user_read_buf_size) #0 {
entry:
  %pZip.addr.i261 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i262 = alloca i32, align 4
  %pZip.addr.i255 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i256 = alloca i32, align 4
  %pZip.addr.i249 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i250 = alloca i32, align 4
  %pZip.addr.i243 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i244 = alloca i32, align 4
  %pZip.addr.i237 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i238 = alloca i32, align 4
  %pZip.addr.i231 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i232 = alloca i32, align 4
  %pZip.addr.i225 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i226 = alloca i32, align 4
  %pZip.addr.i219 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i220 = alloca i32, align 4
  %pZip.addr.i213 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i214 = alloca i32, align 4
  %pZip.addr.i207 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i208 = alloca i32, align 4
  %pZip.addr.i201 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i202 = alloca i32, align 4
  %pZip.addr.i195 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i196 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pUser_read_buf.addr = alloca i8*, align 8
  %user_read_buf_size.addr = alloca i64, align 8
  %status = alloca i32, align 4
  %needed_size = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %comp_remaining = alloca i64, align 8
  %out_buf_ofs = alloca i64, align 8
  %read_buf_size = alloca i64, align 8
  %read_buf_ofs = alloca i64, align 8
  %read_buf_avail = alloca i64, align 8
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pRead_buf = alloca i8*, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %inflator = alloca %struct.tinfl_decompressor_tag, align 8
  %in_buf_size = alloca i64, align 8
  %out_buf_size = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %pUser_read_buf, i8** %pUser_read_buf.addr, align 8
  store i64 %user_read_buf_size, i64* %user_read_buf_size.addr, align 8
  store i32 0, i32* %status, align 4
  store i64 0, i64* %out_buf_ofs, align 8
  store i64 0, i64* %read_buf_ofs, align 8
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pLocal_header, align 8
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load i64, i64* %buf_size.addr, align 8
  %tobool3 = icmp ne i64 %4, 0
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false5

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %5 = load i8*, i8** %pBuf.addr, align 8
  %tobool4 = icmp ne i8* %5, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then

lor.lhs.false5:                                   ; preds = %land.lhs.true, %lor.lhs.false2
  %6 = load i64, i64* %user_read_buf_size.addr, align 8
  %tobool6 = icmp ne i64 %6, 0
  br i1 %tobool6, label %land.lhs.true7, label %lor.lhs.false9

land.lhs.true7:                                   ; preds = %lor.lhs.false5
  %7 = load i8*, i8** %pUser_read_buf.addr, align 8
  %tobool8 = icmp ne i8* %7, null
  br i1 %tobool8, label %lor.lhs.false9, label %if.then

lor.lhs.false9:                                   ; preds = %land.lhs.true7, %lor.lhs.false5
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 11
  %9 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool10 = icmp ne i64 (i8*, i64, i8*, i64)* %9, null
  br i1 %tobool10, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false9, %land.lhs.true7, %land.lhs.true, %lor.lhs.false, %entry
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %10, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %11, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %12 = load i32, i32* %err_num.addr.i, align 4
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 5
  store i32 %12, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false9
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %15 = load i32, i32* %file_index.addr, align 4
  %call11 = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %14, i32 %15, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %16 = load i32, i32* %m_is_directory, align 4
  %tobool15 = icmp ne i32 %16, 0
  br i1 %tobool15, label %if.then18, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %if.end14
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %17 = load i64, i64* %m_comp_size, align 8
  %tobool17 = icmp ne i64 %17, 0
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %lor.lhs.false16, %if.end14
  store i32 1, i32* %retval, align 4
  br label %return

if.end19:                                         ; preds = %lor.lhs.false16
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 4
  %18 = load i16, i16* %m_bit_flag, align 4
  %conv = zext i16 %18 to i32
  %and = and i32 %conv, 97
  %tobool20 = icmp ne i32 %and, 0
  br i1 %tobool20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end19
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %19, %struct.mz_zip_archive** %pZip.addr.i195, align 8
  store i32 5, i32* %err_num.addr.i196, align 4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i195, align 8
  %tobool.i197 = icmp ne %struct.mz_zip_archive* %20, null
  br i1 %tobool.i197, label %if.then.i199, label %mz_zip_set_error.exit200

if.then.i199:                                     ; preds = %if.then21
  %21 = load i32, i32* %err_num.addr.i196, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i195, align 8
  %m_last_error.i198 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 5
  store i32 %21, i32* %m_last_error.i198, align 4
  br label %mz_zip_set_error.exit200

mz_zip_set_error.exit200:                         ; preds = %if.then21, %if.then.i199
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.end19
  %23 = load i32, i32* %flags.addr, align 4
  %and24 = and i32 %23, 1024
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.end36, label %land.lhs.true26

land.lhs.true26:                                  ; preds = %if.end23
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %24 = load i16, i16* %m_method, align 2
  %conv27 = zext i16 %24 to i32
  %cmp = icmp ne i32 %conv27, 0
  br i1 %cmp, label %land.lhs.true29, label %if.end36

land.lhs.true29:                                  ; preds = %land.lhs.true26
  %m_method30 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %25 = load i16, i16* %m_method30, align 2
  %conv31 = zext i16 %25 to i32
  %cmp32 = icmp ne i32 %conv31, 8
  br i1 %cmp32, label %if.then34, label %if.end36

if.then34:                                        ; preds = %land.lhs.true29
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %26, %struct.mz_zip_archive** %pZip.addr.i207, align 8
  store i32 4, i32* %err_num.addr.i208, align 4
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i207, align 8
  %tobool.i209 = icmp ne %struct.mz_zip_archive* %27, null
  br i1 %tobool.i209, label %if.then.i211, label %mz_zip_set_error.exit212

if.then.i211:                                     ; preds = %if.then34
  %28 = load i32, i32* %err_num.addr.i208, align 4
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i207, align 8
  %m_last_error.i210 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 5
  store i32 %28, i32* %m_last_error.i210, align 4
  br label %mz_zip_set_error.exit212

mz_zip_set_error.exit212:                         ; preds = %if.then34, %if.then.i211
  store i32 0, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %land.lhs.true29, %land.lhs.true26, %if.end23
  %30 = load i32, i32* %flags.addr, align 4
  %and37 = and i32 %30, 1024
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end36
  %m_comp_size39 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %31 = load i64, i64* %m_comp_size39, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end36
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %32 = load i64, i64* %m_uncomp_size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %31, %cond.true ], [ %32, %cond.false ]
  store i64 %cond, i64* %needed_size, align 8
  %33 = load i64, i64* %buf_size.addr, align 8
  %34 = load i64, i64* %needed_size, align 8
  %cmp40 = icmp ult i64 %33, %34
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %cond.end
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %35, %struct.mz_zip_archive** %pZip.addr.i219, align 8
  store i32 26, i32* %err_num.addr.i220, align 4
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i219, align 8
  %tobool.i221 = icmp ne %struct.mz_zip_archive* %36, null
  br i1 %tobool.i221, label %if.then.i223, label %mz_zip_set_error.exit224

if.then.i223:                                     ; preds = %if.then42
  %37 = load i32, i32* %err_num.addr.i220, align 4
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i219, align 8
  %m_last_error.i222 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 5
  store i32 %37, i32* %m_last_error.i222, align 4
  br label %mz_zip_set_error.exit224

mz_zip_set_error.exit224:                         ; preds = %if.then42, %if.then.i223
  store i32 0, i32* %retval, align 4
  br label %return

if.end44:                                         ; preds = %cond.end
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 12
  %39 = load i64, i64* %m_local_header_ofs, align 8
  store i64 %39, i64* %cur_file_ofs, align 8
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead45 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 11
  %41 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead45, align 8
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %42, i32 0, i32 14
  %43 = load i8*, i8** %m_pIO_opaque, align 8
  %44 = load i64, i64* %cur_file_ofs, align 8
  %45 = load i8*, i8** %pLocal_header, align 8
  %call46 = call i64 %41(i8* %43, i64 %44, i8* %45, i64 30)
  %cmp47 = icmp ne i64 %call46, 30
  br i1 %cmp47, label %if.then49, label %if.end51

if.then49:                                        ; preds = %if.end44
  %46 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %46, %struct.mz_zip_archive** %pZip.addr.i231, align 8
  store i32 20, i32* %err_num.addr.i232, align 4
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i231, align 8
  %tobool.i233 = icmp ne %struct.mz_zip_archive* %47, null
  br i1 %tobool.i233, label %if.then.i235, label %mz_zip_set_error.exit236

if.then.i235:                                     ; preds = %if.then49
  %48 = load i32, i32* %err_num.addr.i232, align 4
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i231, align 8
  %m_last_error.i234 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %49, i32 0, i32 5
  store i32 %48, i32* %m_last_error.i234, align 4
  br label %mz_zip_set_error.exit236

mz_zip_set_error.exit236:                         ; preds = %if.then49, %if.then.i235
  store i32 0, i32* %retval, align 4
  br label %return

if.end51:                                         ; preds = %if.end44
  %50 = load i8*, i8** %pLocal_header, align 8
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %cmp52 = icmp ne i32 %52, 67324752
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %if.end51
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %53, %struct.mz_zip_archive** %pZip.addr.i243, align 8
  store i32 9, i32* %err_num.addr.i244, align 4
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i243, align 8
  %tobool.i245 = icmp ne %struct.mz_zip_archive* %54, null
  br i1 %tobool.i245, label %if.then.i247, label %mz_zip_set_error.exit248

if.then.i247:                                     ; preds = %if.then54
  %55 = load i32, i32* %err_num.addr.i244, align 4
  %56 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i243, align 8
  %m_last_error.i246 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %56, i32 0, i32 5
  store i32 %55, i32* %m_last_error.i246, align 4
  br label %mz_zip_set_error.exit248

mz_zip_set_error.exit248:                         ; preds = %if.then54, %if.then.i247
  store i32 0, i32* %retval, align 4
  br label %return

if.end56:                                         ; preds = %if.end51
  %57 = load i8*, i8** %pLocal_header, align 8
  %add.ptr = getelementptr inbounds i8, i8* %57, i64 26
  %58 = bitcast i8* %add.ptr to i16*
  %59 = load i16, i16* %58, align 2
  %conv57 = zext i16 %59 to i32
  %add = add nsw i32 30, %conv57
  %60 = load i8*, i8** %pLocal_header, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %60, i64 28
  %61 = bitcast i8* %add.ptr58 to i16*
  %62 = load i16, i16* %61, align 2
  %conv59 = zext i16 %62 to i32
  %add60 = add nsw i32 %add, %conv59
  %conv61 = sext i32 %add60 to i64
  %63 = load i64, i64* %cur_file_ofs, align 8
  %add62 = add i64 %63, %conv61
  store i64 %add62, i64* %cur_file_ofs, align 8
  %64 = load i64, i64* %cur_file_ofs, align 8
  %m_comp_size63 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %65 = load i64, i64* %m_comp_size63, align 8
  %add64 = add i64 %64, %65
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %66, i32 0, i32 0
  %67 = load i64, i64* %m_archive_size, align 8
  %cmp65 = icmp ugt i64 %add64, %67
  br i1 %cmp65, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.end56
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %68, %struct.mz_zip_archive** %pZip.addr.i255, align 8
  store i32 9, i32* %err_num.addr.i256, align 4
  %69 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i255, align 8
  %tobool.i257 = icmp ne %struct.mz_zip_archive* %69, null
  br i1 %tobool.i257, label %if.then.i259, label %mz_zip_set_error.exit260

if.then.i259:                                     ; preds = %if.then67
  %70 = load i32, i32* %err_num.addr.i256, align 4
  %71 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i255, align 8
  %m_last_error.i258 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %71, i32 0, i32 5
  store i32 %70, i32* %m_last_error.i258, align 4
  br label %mz_zip_set_error.exit260

mz_zip_set_error.exit260:                         ; preds = %if.then67, %if.then.i259
  store i32 0, i32* %retval, align 4
  br label %return

if.end69:                                         ; preds = %if.end56
  %72 = load i32, i32* %flags.addr, align 4
  %and70 = and i32 %72, 1024
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.then75, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %if.end69
  %m_method73 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %73 = load i16, i16* %m_method73, align 2
  %tobool74 = icmp ne i16 %73, 0
  br i1 %tobool74, label %if.end97, label %if.then75

if.then75:                                        ; preds = %lor.lhs.false72, %if.end69
  %74 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead76 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %74, i32 0, i32 11
  %75 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead76, align 8
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque77 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %76, i32 0, i32 14
  %77 = load i8*, i8** %m_pIO_opaque77, align 8
  %78 = load i64, i64* %cur_file_ofs, align 8
  %79 = load i8*, i8** %pBuf.addr, align 8
  %80 = load i64, i64* %needed_size, align 8
  %call78 = call i64 %75(i8* %77, i64 %78, i8* %79, i64 %80)
  %81 = load i64, i64* %needed_size, align 8
  %cmp79 = icmp ne i64 %call78, %81
  br i1 %cmp79, label %if.then81, label %if.end83

if.then81:                                        ; preds = %if.then75
  %82 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %82, %struct.mz_zip_archive** %pZip.addr.i261, align 8
  store i32 20, i32* %err_num.addr.i262, align 4
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i261, align 8
  %tobool.i263 = icmp ne %struct.mz_zip_archive* %83, null
  br i1 %tobool.i263, label %if.then.i265, label %mz_zip_set_error.exit266

if.then.i265:                                     ; preds = %if.then81
  %84 = load i32, i32* %err_num.addr.i262, align 4
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i261, align 8
  %m_last_error.i264 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %85, i32 0, i32 5
  store i32 %84, i32* %m_last_error.i264, align 4
  br label %mz_zip_set_error.exit266

mz_zip_set_error.exit266:                         ; preds = %if.then81, %if.then.i265
  store i32 0, i32* %retval, align 4
  br label %return

if.end83:                                         ; preds = %if.then75
  %86 = load i32, i32* %flags.addr, align 4
  %and84 = and i32 %86, 1024
  %cmp85 = icmp eq i32 %and84, 0
  br i1 %cmp85, label %if.then87, label %if.end96

if.then87:                                        ; preds = %if.end83
  %87 = load i8*, i8** %pBuf.addr, align 8
  %m_uncomp_size88 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %88 = load i64, i64* %m_uncomp_size88, align 8
  %call89 = call i64 @mz_crc32(i64 0, i8* %87, i64 %88)
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %89 = load i32, i32* %m_crc32, align 8
  %conv90 = zext i32 %89 to i64
  %cmp91 = icmp ne i64 %call89, %conv90
  br i1 %cmp91, label %if.then93, label %if.end95

if.then93:                                        ; preds = %if.then87
  %90 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %90, %struct.mz_zip_archive** %pZip.addr.i249, align 8
  store i32 14, i32* %err_num.addr.i250, align 4
  %91 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i249, align 8
  %tobool.i251 = icmp ne %struct.mz_zip_archive* %91, null
  br i1 %tobool.i251, label %if.then.i253, label %mz_zip_set_error.exit254

if.then.i253:                                     ; preds = %if.then93
  %92 = load i32, i32* %err_num.addr.i250, align 4
  %93 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i249, align 8
  %m_last_error.i252 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %93, i32 0, i32 5
  store i32 %92, i32* %m_last_error.i252, align 4
  br label %mz_zip_set_error.exit254

mz_zip_set_error.exit254:                         ; preds = %if.then93, %if.then.i253
  store i32 0, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.then87
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.end83
  store i32 1, i32* %retval, align 4
  br label %return

if.end97:                                         ; preds = %lor.lhs.false72
  br label %do.body

do.body:                                          ; preds = %if.end97
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %inflator, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %94 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState98 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %94, i32 0, i32 15
  %95 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState98, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %95, i32 0, i32 8
  %96 = load i8*, i8** %m_pMem, align 8
  %tobool99 = icmp ne i8* %96, null
  br i1 %tobool99, label %if.then100, label %if.else

if.then100:                                       ; preds = %do.end
  %97 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState101 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %97, i32 0, i32 15
  %98 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState101, align 8
  %m_pMem102 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %98, i32 0, i32 8
  %99 = load i8*, i8** %m_pMem102, align 8
  %100 = load i64, i64* %cur_file_ofs, align 8
  %add.ptr103 = getelementptr inbounds i8, i8* %99, i64 %100
  store i8* %add.ptr103, i8** %pRead_buf, align 8
  %m_comp_size104 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %101 = load i64, i64* %m_comp_size104, align 8
  store i64 %101, i64* %read_buf_avail, align 8
  store i64 %101, i64* %read_buf_size, align 8
  store i64 0, i64* %comp_remaining, align 8
  br label %if.end128

if.else:                                          ; preds = %do.end
  %102 = load i8*, i8** %pUser_read_buf.addr, align 8
  %tobool105 = icmp ne i8* %102, null
  br i1 %tobool105, label %if.then106, label %if.else111

if.then106:                                       ; preds = %if.else
  %103 = load i64, i64* %user_read_buf_size.addr, align 8
  %tobool107 = icmp ne i64 %103, 0
  br i1 %tobool107, label %if.end109, label %if.then108

if.then108:                                       ; preds = %if.then106
  store i32 0, i32* %retval, align 4
  br label %return

if.end109:                                        ; preds = %if.then106
  %104 = load i8*, i8** %pUser_read_buf.addr, align 8
  store i8* %104, i8** %pRead_buf, align 8
  %105 = load i64, i64* %user_read_buf_size.addr, align 8
  store i64 %105, i64* %read_buf_size, align 8
  store i64 0, i64* %read_buf_avail, align 8
  %m_comp_size110 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %106 = load i64, i64* %m_comp_size110, align 8
  store i64 %106, i64* %comp_remaining, align 8
  br label %if.end127

if.else111:                                       ; preds = %if.else
  %m_comp_size112 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %107 = load i64, i64* %m_comp_size112, align 8
  %cmp113 = icmp ult i64 %107, 65536
  br i1 %cmp113, label %cond.true115, label %cond.false117

cond.true115:                                     ; preds = %if.else111
  %m_comp_size116 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %108 = load i64, i64* %m_comp_size116, align 8
  br label %cond.end118

cond.false117:                                    ; preds = %if.else111
  br label %cond.end118

cond.end118:                                      ; preds = %cond.false117, %cond.true115
  %cond119 = phi i64 [ %108, %cond.true115 ], [ 65536, %cond.false117 ]
  store i64 %cond119, i64* %read_buf_size, align 8
  %109 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %109, i32 0, i32 7
  %110 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %111 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %111, i32 0, i32 10
  %112 = load i8*, i8** %m_pAlloc_opaque, align 8
  %113 = load i64, i64* %read_buf_size, align 8
  %call120 = call i8* %110(i8* %112, i64 1, i64 %113)
  store i8* %call120, i8** %pRead_buf, align 8
  %cmp121 = icmp eq i8* null, %call120
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %cond.end118
  %114 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %114, %struct.mz_zip_archive** %pZip.addr.i237, align 8
  store i32 16, i32* %err_num.addr.i238, align 4
  %115 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i237, align 8
  %tobool.i239 = icmp ne %struct.mz_zip_archive* %115, null
  br i1 %tobool.i239, label %if.then.i241, label %mz_zip_set_error.exit242

if.then.i241:                                     ; preds = %if.then123
  %116 = load i32, i32* %err_num.addr.i238, align 4
  %117 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i237, align 8
  %m_last_error.i240 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %117, i32 0, i32 5
  store i32 %116, i32* %m_last_error.i240, align 4
  br label %mz_zip_set_error.exit242

mz_zip_set_error.exit242:                         ; preds = %if.then123, %if.then.i241
  store i32 0, i32* %retval, align 4
  br label %return

if.end125:                                        ; preds = %cond.end118
  store i64 0, i64* %read_buf_avail, align 8
  %m_comp_size126 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %118 = load i64, i64* %m_comp_size126, align 8
  store i64 %118, i64* %comp_remaining, align 8
  br label %if.end127

if.end127:                                        ; preds = %if.end125, %if.end109
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.then100
  br label %do.body129

do.body129:                                       ; preds = %do.cond, %if.end128
  %m_uncomp_size130 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %119 = load i64, i64* %m_uncomp_size130, align 8
  %120 = load i64, i64* %out_buf_ofs, align 8
  %sub = sub i64 %119, %120
  store i64 %sub, i64* %out_buf_size, align 8
  %121 = load i64, i64* %read_buf_avail, align 8
  %tobool131 = icmp ne i64 %121, 0
  br i1 %tobool131, label %if.end153, label %land.lhs.true132

land.lhs.true132:                                 ; preds = %do.body129
  %122 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState133 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %122, i32 0, i32 15
  %123 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState133, align 8
  %m_pMem134 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %123, i32 0, i32 8
  %124 = load i8*, i8** %m_pMem134, align 8
  %tobool135 = icmp ne i8* %124, null
  br i1 %tobool135, label %if.end153, label %if.then136

if.then136:                                       ; preds = %land.lhs.true132
  %125 = load i64, i64* %read_buf_size, align 8
  %126 = load i64, i64* %comp_remaining, align 8
  %cmp137 = icmp ult i64 %125, %126
  br i1 %cmp137, label %cond.true139, label %cond.false140

cond.true139:                                     ; preds = %if.then136
  %127 = load i64, i64* %read_buf_size, align 8
  br label %cond.end141

cond.false140:                                    ; preds = %if.then136
  %128 = load i64, i64* %comp_remaining, align 8
  br label %cond.end141

cond.end141:                                      ; preds = %cond.false140, %cond.true139
  %cond142 = phi i64 [ %127, %cond.true139 ], [ %128, %cond.false140 ]
  store i64 %cond142, i64* %read_buf_avail, align 8
  %129 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead143 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %129, i32 0, i32 11
  %130 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead143, align 8
  %131 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque144 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %131, i32 0, i32 14
  %132 = load i8*, i8** %m_pIO_opaque144, align 8
  %133 = load i64, i64* %cur_file_ofs, align 8
  %134 = load i8*, i8** %pRead_buf, align 8
  %135 = load i64, i64* %read_buf_avail, align 8
  %call145 = call i64 %130(i8* %132, i64 %133, i8* %134, i64 %135)
  %136 = load i64, i64* %read_buf_avail, align 8
  %cmp146 = icmp ne i64 %call145, %136
  br i1 %cmp146, label %if.then148, label %if.end150

if.then148:                                       ; preds = %cond.end141
  store i32 -1, i32* %status, align 4
  %137 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %137, %struct.mz_zip_archive** %pZip.addr.i225, align 8
  store i32 11, i32* %err_num.addr.i226, align 4
  %138 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i225, align 8
  %tobool.i227 = icmp ne %struct.mz_zip_archive* %138, null
  br i1 %tobool.i227, label %if.then.i229, label %mz_zip_set_error.exit230

if.then.i229:                                     ; preds = %if.then148
  %139 = load i32, i32* %err_num.addr.i226, align 4
  %140 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i225, align 8
  %m_last_error.i228 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %140, i32 0, i32 5
  store i32 %139, i32* %m_last_error.i228, align 4
  br label %mz_zip_set_error.exit230

mz_zip_set_error.exit230:                         ; preds = %if.then148, %if.then.i229
  br label %do.end164

if.end150:                                        ; preds = %cond.end141
  %141 = load i64, i64* %read_buf_avail, align 8
  %142 = load i64, i64* %cur_file_ofs, align 8
  %add151 = add i64 %142, %141
  store i64 %add151, i64* %cur_file_ofs, align 8
  %143 = load i64, i64* %read_buf_avail, align 8
  %144 = load i64, i64* %comp_remaining, align 8
  %sub152 = sub i64 %144, %143
  store i64 %sub152, i64* %comp_remaining, align 8
  store i64 0, i64* %read_buf_ofs, align 8
  br label %if.end153

if.end153:                                        ; preds = %if.end150, %land.lhs.true132, %do.body129
  %145 = load i64, i64* %read_buf_avail, align 8
  store i64 %145, i64* %in_buf_size, align 8
  %146 = load i8*, i8** %pRead_buf, align 8
  %147 = load i64, i64* %read_buf_ofs, align 8
  %add.ptr154 = getelementptr inbounds i8, i8* %146, i64 %147
  %148 = load i8*, i8** %pBuf.addr, align 8
  %149 = load i8*, i8** %pBuf.addr, align 8
  %150 = load i64, i64* %out_buf_ofs, align 8
  %add.ptr155 = getelementptr inbounds i8, i8* %149, i64 %150
  %151 = load i64, i64* %comp_remaining, align 8
  %tobool156 = icmp ne i64 %151, 0
  %cond157 = select i1 %tobool156, i32 2, i32 0
  %or = or i32 4, %cond157
  %call158 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %inflator, i8* %add.ptr154, i64* %in_buf_size, i8* %148, i8* %add.ptr155, i64* %out_buf_size, i32 %or)
  store i32 %call158, i32* %status, align 4
  %152 = load i64, i64* %in_buf_size, align 8
  %153 = load i64, i64* %read_buf_avail, align 8
  %sub159 = sub i64 %153, %152
  store i64 %sub159, i64* %read_buf_avail, align 8
  %154 = load i64, i64* %in_buf_size, align 8
  %155 = load i64, i64* %read_buf_ofs, align 8
  %add160 = add i64 %155, %154
  store i64 %add160, i64* %read_buf_ofs, align 8
  %156 = load i64, i64* %out_buf_size, align 8
  %157 = load i64, i64* %out_buf_ofs, align 8
  %add161 = add i64 %157, %156
  store i64 %add161, i64* %out_buf_ofs, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end153
  %158 = load i32, i32* %status, align 4
  %cmp162 = icmp eq i32 %158, 1
  br i1 %cmp162, label %do.body129, label %do.end164

do.end164:                                        ; preds = %do.cond, %mz_zip_set_error.exit230
  %159 = load i32, i32* %status, align 4
  %cmp165 = icmp eq i32 %159, 0
  br i1 %cmp165, label %if.then167, label %if.end184

if.then167:                                       ; preds = %do.end164
  %160 = load i64, i64* %out_buf_ofs, align 8
  %m_uncomp_size168 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %161 = load i64, i64* %m_uncomp_size168, align 8
  %cmp169 = icmp ne i64 %160, %161
  br i1 %cmp169, label %if.then171, label %if.else173

if.then171:                                       ; preds = %if.then167
  %162 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %162, %struct.mz_zip_archive** %pZip.addr.i213, align 8
  store i32 13, i32* %err_num.addr.i214, align 4
  %163 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i213, align 8
  %tobool.i215 = icmp ne %struct.mz_zip_archive* %163, null
  br i1 %tobool.i215, label %if.then.i217, label %mz_zip_set_error.exit218

if.then.i217:                                     ; preds = %if.then171
  %164 = load i32, i32* %err_num.addr.i214, align 4
  %165 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i213, align 8
  %m_last_error.i216 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %165, i32 0, i32 5
  store i32 %164, i32* %m_last_error.i216, align 4
  br label %mz_zip_set_error.exit218

mz_zip_set_error.exit218:                         ; preds = %if.then171, %if.then.i217
  store i32 -1, i32* %status, align 4
  br label %if.end183

if.else173:                                       ; preds = %if.then167
  %166 = load i8*, i8** %pBuf.addr, align 8
  %m_uncomp_size174 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %167 = load i64, i64* %m_uncomp_size174, align 8
  %call175 = call i64 @mz_crc32(i64 0, i8* %166, i64 %167)
  %m_crc32176 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %168 = load i32, i32* %m_crc32176, align 8
  %conv177 = zext i32 %168 to i64
  %cmp178 = icmp ne i64 %call175, %conv177
  br i1 %cmp178, label %if.then180, label %if.end182

if.then180:                                       ; preds = %if.else173
  %169 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %169, %struct.mz_zip_archive** %pZip.addr.i201, align 8
  store i32 14, i32* %err_num.addr.i202, align 4
  %170 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i201, align 8
  %tobool.i203 = icmp ne %struct.mz_zip_archive* %170, null
  br i1 %tobool.i203, label %if.then.i205, label %mz_zip_set_error.exit206

if.then.i205:                                     ; preds = %if.then180
  %171 = load i32, i32* %err_num.addr.i202, align 4
  %172 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i201, align 8
  %m_last_error.i204 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %172, i32 0, i32 5
  store i32 %171, i32* %m_last_error.i204, align 4
  br label %mz_zip_set_error.exit206

mz_zip_set_error.exit206:                         ; preds = %if.then180, %if.then.i205
  store i32 -1, i32* %status, align 4
  br label %if.end182

if.end182:                                        ; preds = %mz_zip_set_error.exit206, %if.else173
  br label %if.end183

if.end183:                                        ; preds = %if.end182, %mz_zip_set_error.exit218
  br label %if.end184

if.end184:                                        ; preds = %if.end183, %do.end164
  %173 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState185 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %173, i32 0, i32 15
  %174 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState185, align 8
  %m_pMem186 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %174, i32 0, i32 8
  %175 = load i8*, i8** %m_pMem186, align 8
  %tobool187 = icmp ne i8* %175, null
  br i1 %tobool187, label %if.end192, label %land.lhs.true188

land.lhs.true188:                                 ; preds = %if.end184
  %176 = load i8*, i8** %pUser_read_buf.addr, align 8
  %tobool189 = icmp ne i8* %176, null
  br i1 %tobool189, label %if.end192, label %if.then190

if.then190:                                       ; preds = %land.lhs.true188
  %177 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %177, i32 0, i32 8
  %178 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %179 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque191 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %179, i32 0, i32 10
  %180 = load i8*, i8** %m_pAlloc_opaque191, align 8
  %181 = load i8*, i8** %pRead_buf, align 8
  call void %178(i8* %180, i8* %181)
  br label %if.end192

if.end192:                                        ; preds = %if.then190, %land.lhs.true188, %if.end184
  %182 = load i32, i32* %status, align 4
  %cmp193 = icmp eq i32 %182, 0
  %conv194 = zext i1 %cmp193 to i32
  store i32 %conv194, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end192, %mz_zip_set_error.exit242, %if.then108, %if.end96, %mz_zip_set_error.exit254, %mz_zip_set_error.exit266, %mz_zip_set_error.exit260, %mz_zip_set_error.exit248, %mz_zip_set_error.exit236, %mz_zip_set_error.exit224, %mz_zip_set_error.exit212, %mz_zip_set_error.exit200, %if.then18, %if.then13, %mz_zip_set_error.exit
  %183 = load i32, i32* %retval, align 4
  ret i32 %183
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %pZip, i32 %file_index, %struct.mz_zip_archive_file_stat* %pStat) #0 {
entry:
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr.i = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pStat.addr = alloca %struct.mz_zip_archive_file_stat*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive_file_stat* %pStat, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %3 = load i32, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive* %2, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 %3, i32* %file_index.addr.i, align 4
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %4, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 15
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %6, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %7 = load i32, i32* %file_index.addr.i, align 4
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 2
  %9 = load i32, i32* %m_total_files.i, align 8
  %cmp.i = icmp uge i32 %7, %9
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false2.i
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState3.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 0
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %12 = load i8*, i8** %m_p.i, align 8
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState4.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 15
  %14 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %14, i32 0, i32 1
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %15 = load i8*, i8** %m_p5.i, align 8
  %16 = bitcast i8* %15 to i32*
  %17 = load i32, i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %17 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %16, i64 %idxprom.i
  %18 = load i32, i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %18 to i64
  %arrayidx7.i = getelementptr inbounds i8, i8* %12, i64 %idxprom6.i
  store i8* %arrayidx7.i, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

mz_zip_get_cdh.exit:                              ; preds = %if.then.i, %if.end.i
  %19 = load i8*, i8** %retval.i, align 8
  %20 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %call1 = call i32 @mz_zip_file_stat_internal(%struct.mz_zip_archive* %0, i32 %1, i8* %19, %struct.mz_zip_archive_file_stat* %20, i32* null)
  ret i32 %call1
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_mem_no_alloc(%struct.mz_zip_archive* %pZip, i8* %pFilename, i8* %pBuf, i64 %buf_size, i32 %flags, i8* %pUser_read_buf, i64 %user_read_buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pUser_read_buf.addr = alloca i8*, align 8
  %user_read_buf_size.addr = alloca i64, align 8
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %pUser_read_buf, i8** %pUser_read_buf.addr, align 8
  store i64 %user_read_buf_size, i64* %user_read_buf_size.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pFilename.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %0, i8* %1, i8* null, i32 %2, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %4 = load i32, i32* %file_index, align 4
  %5 = load i8*, i8** %pBuf.addr, align 8
  %6 = load i64, i64* %buf_size.addr, align 8
  %7 = load i32, i32* %flags.addr, align 4
  %8 = load i8*, i8** %pUser_read_buf.addr, align 8
  %9 = load i64, i64* %user_read_buf_size.addr, align 8
  %call1 = call i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive* %3, i32 %4, i8* %5, i64 %6, i32 %7, i8* %8, i64 %9)
  store i32 %call1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_mem(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pBuf, i64 %buf_size, i32 %flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  %2 = load i8*, i8** %pBuf.addr, align 8
  %3 = load i64, i64* %buf_size.addr, align 8
  %4 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive* %0, i32 %1, i8* %2, i64 %3, i32 %4, i8* null, i64 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_mem(%struct.mz_zip_archive* %pZip, i8* %pFilename, i8* %pBuf, i64 %buf_size, i32 %flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pFilename.addr, align 8
  %2 = load i8*, i8** %pBuf.addr, align 8
  %3 = load i64, i64* %buf_size.addr, align 8
  %4 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_extract_file_to_mem_no_alloc(%struct.mz_zip_archive* %0, i8* %1, i8* %2, i64 %3, i32 %4, i8* null, i64 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive* %pZip, i32 %file_index, i64* %pSize, i32 %flags) #0 {
entry:
  %pZip.addr.i25 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i26 = alloca i32, align 4
  %pZip.addr.i21 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i8*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %comp_size = alloca i64, align 8
  %uncomp_size = alloca i64, align 8
  %alloc_size = alloca i64, align 8
  %p = alloca i8*, align 8
  %pBuf = alloca i8*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i64* %pSize, i64** %pSize.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive* %0, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32, i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 2
  %7 = load i32, i32* %m_total_files.i, align 8
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState3.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 15
  %9 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %9, i32 0, i32 0
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %10 = load i8*, i8** %m_p.i, align 8
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState4.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 15
  %12 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8*, i8** %m_p5.i, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %14, i64 %idxprom.i
  %16 = load i32, i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %16 to i64
  %arrayidx7.i = getelementptr inbounds i8, i8* %10, i64 %idxprom6.i
  store i8* %arrayidx7.i, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

mz_zip_get_cdh.exit:                              ; preds = %if.then.i, %if.end.i
  %17 = load i8*, i8** %retval.i, align 8
  store i8* %17, i8** %p, align 8
  %18 = load i64*, i64** %pSize.addr, align 8
  %tobool = icmp ne i64* %18, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %mz_zip_get_cdh.exit
  %19 = load i64*, i64** %pSize.addr, align 8
  store i64 0, i64* %19, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %mz_zip_get_cdh.exit
  %20 = load i8*, i8** %p, align 8
  %tobool1 = icmp ne i8* %20, null
  br i1 %tobool1, label %if.end4, label %if.then2

if.then2:                                         ; preds = %if.end
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %21, %struct.mz_zip_archive** %pZip.addr.i21, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i21, align 8
  %tobool.i22 = icmp ne %struct.mz_zip_archive* %22, null
  br i1 %tobool.i22, label %if.then.i23, label %mz_zip_set_error.exit

if.then.i23:                                      ; preds = %if.then2
  %23 = load i32, i32* %err_num.addr.i, align 4
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i21, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %24, i32 0, i32 5
  store i32 %23, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then2, %if.then.i23
  store i8* null, i8** %retval, align 8
  br label %return

if.end4:                                          ; preds = %if.end
  %25 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 20
  %26 = bitcast i8* %add.ptr to i32*
  %27 = load i32, i32* %26, align 4
  %conv = zext i32 %27 to i64
  store i64 %conv, i64* %comp_size, align 8
  %28 = load i8*, i8** %p, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %28, i64 24
  %29 = bitcast i8* %add.ptr5 to i32*
  %30 = load i32, i32* %29, align 4
  %conv6 = zext i32 %30 to i64
  store i64 %conv6, i64* %uncomp_size, align 8
  %31 = load i32, i32* %flags.addr, align 4
  %and = and i32 %31, 1024
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %32 = load i64, i64* %comp_size, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  %33 = load i64, i64* %uncomp_size, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %32, %cond.true ], [ %33, %cond.false ]
  store i64 %cond, i64* %alloc_size, align 8
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 7
  %35 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 10
  %37 = load i8*, i8** %m_pAlloc_opaque, align 8
  %38 = load i64, i64* %alloc_size, align 8
  %call8 = call i8* %35(i8* %37, i64 1, i64 %38)
  store i8* %call8, i8** %pBuf, align 8
  %cmp = icmp eq i8* null, %call8
  br i1 %cmp, label %if.then10, label %if.end12

if.then10:                                        ; preds = %cond.end
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %39, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  store i32 16, i32* %err_num.addr.i26, align 4
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  %tobool.i27 = icmp ne %struct.mz_zip_archive* %40, null
  br i1 %tobool.i27, label %if.then.i29, label %mz_zip_set_error.exit31

if.then.i29:                                      ; preds = %if.then10
  %41 = load i32, i32* %err_num.addr.i26, align 4
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  %m_last_error.i28 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %42, i32 0, i32 5
  store i32 %41, i32* %m_last_error.i28, align 4
  br label %mz_zip_set_error.exit31

mz_zip_set_error.exit31:                          ; preds = %if.then10, %if.then.i29
  store i8* null, i8** %retval, align 8
  br label %return

if.end12:                                         ; preds = %cond.end
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %44 = load i32, i32* %file_index.addr, align 4
  %45 = load i8*, i8** %pBuf, align 8
  %46 = load i64, i64* %alloc_size, align 8
  %47 = load i32, i32* %flags.addr, align 4
  %call13 = call i32 @mz_zip_reader_extract_to_mem(%struct.mz_zip_archive* %43, i32 %44, i8* %45, i64 %46, i32 %47)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end17, label %if.then15

if.then15:                                        ; preds = %if.end12
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %48, i32 0, i32 8
  %49 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque16 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %50, i32 0, i32 10
  %51 = load i8*, i8** %m_pAlloc_opaque16, align 8
  %52 = load i8*, i8** %pBuf, align 8
  call void %49(i8* %51, i8* %52)
  store i8* null, i8** %retval, align 8
  br label %return

if.end17:                                         ; preds = %if.end12
  %53 = load i64*, i64** %pSize.addr, align 8
  %tobool18 = icmp ne i64* %53, null
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  %54 = load i64, i64* %alloc_size, align 8
  %55 = load i64*, i64** %pSize.addr, align 8
  store i64 %54, i64* %55, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.end17
  %56 = load i8*, i8** %pBuf, align 8
  store i8* %56, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end20, %if.then15, %mz_zip_set_error.exit31, %mz_zip_set_error.exit
  %57 = load i8*, i8** %retval, align 8
  ret i8* %57
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mz_zip_reader_extract_file_to_heap(%struct.mz_zip_archive* %pZip, i8* %pFilename, i64* %pSize, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64* %pSize, i64** %pSize.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pFilename.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %0, i8* %1, i8* null, i32 %2, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end3, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64*, i64** %pSize.addr, align 8
  %tobool1 = icmp ne i64* %3, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %4 = load i64*, i64** %pSize.addr, align 8
  store i64 0, i64* %4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i8* null, i8** %retval, align 8
  br label %return

if.end3:                                          ; preds = %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %6 = load i32, i32* %file_index, align 4
  %7 = load i64*, i64** %pSize.addr, align 8
  %8 = load i32, i32* %flags.addr, align 4
  %call4 = call i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive* %5, i32 %6, i64* %7, i32 %8)
  store i8* %call4, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end3, %if.end
  %9 = load i8*, i8** %retval, align 8
  ret i8* %9
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %pZip, i32 %file_index, i64 (i8*, i64, i8*, i64)* %pCallback, i8* %pOpaque, i32 %flags) #0 {
entry:
  %pZip.addr.i322 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i323 = alloca i32, align 4
  %pZip.addr.i316 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i317 = alloca i32, align 4
  %pZip.addr.i310 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i311 = alloca i32, align 4
  %pZip.addr.i304 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i305 = alloca i32, align 4
  %pZip.addr.i298 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i299 = alloca i32, align 4
  %pZip.addr.i292 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i293 = alloca i32, align 4
  %pZip.addr.i286 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i287 = alloca i32, align 4
  %pZip.addr.i280 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i281 = alloca i32, align 4
  %pZip.addr.i274 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i275 = alloca i32, align 4
  %pZip.addr.i268 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i269 = alloca i32, align 4
  %pZip.addr.i262 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i263 = alloca i32, align 4
  %pZip.addr.i256 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i257 = alloca i32, align 4
  %pZip.addr.i250 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i251 = alloca i32, align 4
  %pZip.addr.i244 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i245 = alloca i32, align 4
  %pZip.addr.i238 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i239 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pCallback.addr = alloca i64 (i8*, i64, i8*, i64)*, align 8
  %pOpaque.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %file_crc32 = alloca i32, align 4
  %read_buf_size = alloca i64, align 8
  %read_buf_ofs = alloca i64, align 8
  %read_buf_avail = alloca i64, align 8
  %comp_remaining = alloca i64, align 8
  %out_buf_ofs = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pRead_buf = alloca i8*, align 8
  %pWrite_buf = alloca i8*, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %inflator = alloca %struct.tinfl_decompressor_tag, align 8
  %pWrite_buf_cur = alloca i8*, align 8
  %in_buf_size = alloca i64, align 8
  %out_buf_size = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i64 (i8*, i64, i8*, i64)* %pCallback, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %status, align 4
  store i32 0, i32* %file_crc32, align 4
  store i64 0, i64* %read_buf_ofs, align 8
  store i64 0, i64* %out_buf_ofs, align 8
  store i8* null, i8** %pRead_buf, align 8
  store i8* null, i8** %pWrite_buf, align 8
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pLocal_header, align 8
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %tobool3 = icmp ne i64 (i8*, i64, i8*, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 11
  %6 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool5 = icmp ne i64 (i8*, i64, i8*, i64)* %6, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %7, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %8, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %9 = load i32, i32* %err_num.addr.i, align 4
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 5
  store i32 %9, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %12 = load i32, i32* %file_index.addr, align 4
  %call6 = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %11, i32 %12, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.end
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %13 = load i32, i32* %m_is_directory, align 4
  %tobool10 = icmp ne i32 %13, 0
  br i1 %tobool10, label %if.then13, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %if.end9
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %14 = load i64, i64* %m_comp_size, align 8
  %tobool12 = icmp ne i64 %14, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false11, %if.end9
  store i32 1, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %lor.lhs.false11
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 4
  %15 = load i16, i16* %m_bit_flag, align 4
  %conv = zext i16 %15 to i32
  %and = and i32 %conv, 97
  %tobool15 = icmp ne i32 %and, 0
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %16, %struct.mz_zip_archive** %pZip.addr.i238, align 8
  store i32 5, i32* %err_num.addr.i239, align 4
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i238, align 8
  %tobool.i240 = icmp ne %struct.mz_zip_archive* %17, null
  br i1 %tobool.i240, label %if.then.i242, label %mz_zip_set_error.exit243

if.then.i242:                                     ; preds = %if.then16
  %18 = load i32, i32* %err_num.addr.i239, align 4
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i238, align 8
  %m_last_error.i241 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 5
  store i32 %18, i32* %m_last_error.i241, align 4
  br label %mz_zip_set_error.exit243

mz_zip_set_error.exit243:                         ; preds = %if.then16, %if.then.i242
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.end14
  %20 = load i32, i32* %flags.addr, align 4
  %and19 = and i32 %20, 1024
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.end30, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end18
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %21 = load i16, i16* %m_method, align 2
  %conv21 = zext i16 %21 to i32
  %cmp = icmp ne i32 %conv21, 0
  br i1 %cmp, label %land.lhs.true23, label %if.end30

land.lhs.true23:                                  ; preds = %land.lhs.true
  %m_method24 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %22 = load i16, i16* %m_method24, align 2
  %conv25 = zext i16 %22 to i32
  %cmp26 = icmp ne i32 %conv25, 8
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %land.lhs.true23
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %23, %struct.mz_zip_archive** %pZip.addr.i244, align 8
  store i32 4, i32* %err_num.addr.i245, align 4
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i244, align 8
  %tobool.i246 = icmp ne %struct.mz_zip_archive* %24, null
  br i1 %tobool.i246, label %if.then.i248, label %mz_zip_set_error.exit249

if.then.i248:                                     ; preds = %if.then28
  %25 = load i32, i32* %err_num.addr.i245, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i244, align 8
  %m_last_error.i247 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 5
  store i32 %25, i32* %m_last_error.i247, align 4
  br label %mz_zip_set_error.exit249

mz_zip_set_error.exit249:                         ; preds = %if.then28, %if.then.i248
  store i32 0, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %land.lhs.true23, %land.lhs.true, %if.end18
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 12
  %27 = load i64, i64* %m_local_header_ofs, align 8
  store i64 %27, i64* %cur_file_ofs, align 8
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 11
  %29 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead31, align 8
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 14
  %31 = load i8*, i8** %m_pIO_opaque, align 8
  %32 = load i64, i64* %cur_file_ofs, align 8
  %33 = load i8*, i8** %pLocal_header, align 8
  %call32 = call i64 %29(i8* %31, i64 %32, i8* %33, i64 30)
  %cmp33 = icmp ne i64 %call32, 30
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end30
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %34, %struct.mz_zip_archive** %pZip.addr.i268, align 8
  store i32 20, i32* %err_num.addr.i269, align 4
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i268, align 8
  %tobool.i270 = icmp ne %struct.mz_zip_archive* %35, null
  br i1 %tobool.i270, label %if.then.i272, label %mz_zip_set_error.exit273

if.then.i272:                                     ; preds = %if.then35
  %36 = load i32, i32* %err_num.addr.i269, align 4
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i268, align 8
  %m_last_error.i271 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %37, i32 0, i32 5
  store i32 %36, i32* %m_last_error.i271, align 4
  br label %mz_zip_set_error.exit273

mz_zip_set_error.exit273:                         ; preds = %if.then35, %if.then.i272
  store i32 0, i32* %retval, align 4
  br label %return

if.end37:                                         ; preds = %if.end30
  %38 = load i8*, i8** %pLocal_header, align 8
  %39 = bitcast i8* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %cmp38 = icmp ne i32 %40, 67324752
  br i1 %cmp38, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.end37
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %41, %struct.mz_zip_archive** %pZip.addr.i280, align 8
  store i32 9, i32* %err_num.addr.i281, align 4
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i280, align 8
  %tobool.i282 = icmp ne %struct.mz_zip_archive* %42, null
  br i1 %tobool.i282, label %if.then.i284, label %mz_zip_set_error.exit285

if.then.i284:                                     ; preds = %if.then40
  %43 = load i32, i32* %err_num.addr.i281, align 4
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i280, align 8
  %m_last_error.i283 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 5
  store i32 %43, i32* %m_last_error.i283, align 4
  br label %mz_zip_set_error.exit285

mz_zip_set_error.exit285:                         ; preds = %if.then40, %if.then.i284
  store i32 0, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end37
  %45 = load i8*, i8** %pLocal_header, align 8
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 26
  %46 = bitcast i8* %add.ptr to i16*
  %47 = load i16, i16* %46, align 2
  %conv43 = zext i16 %47 to i32
  %add = add nsw i32 30, %conv43
  %48 = load i8*, i8** %pLocal_header, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %48, i64 28
  %49 = bitcast i8* %add.ptr44 to i16*
  %50 = load i16, i16* %49, align 2
  %conv45 = zext i16 %50 to i32
  %add46 = add nsw i32 %add, %conv45
  %conv47 = sext i32 %add46 to i64
  %51 = load i64, i64* %cur_file_ofs, align 8
  %add48 = add i64 %51, %conv47
  store i64 %add48, i64* %cur_file_ofs, align 8
  %52 = load i64, i64* %cur_file_ofs, align 8
  %m_comp_size49 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %53 = load i64, i64* %m_comp_size49, align 8
  %add50 = add i64 %52, %53
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %54, i32 0, i32 0
  %55 = load i64, i64* %m_archive_size, align 8
  %cmp51 = icmp ugt i64 %add50, %55
  br i1 %cmp51, label %if.then53, label %if.end55

if.then53:                                        ; preds = %if.end42
  %56 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %56, %struct.mz_zip_archive** %pZip.addr.i286, align 8
  store i32 9, i32* %err_num.addr.i287, align 4
  %57 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i286, align 8
  %tobool.i288 = icmp ne %struct.mz_zip_archive* %57, null
  br i1 %tobool.i288, label %if.then.i290, label %mz_zip_set_error.exit291

if.then.i290:                                     ; preds = %if.then53
  %58 = load i32, i32* %err_num.addr.i287, align 4
  %59 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i286, align 8
  %m_last_error.i289 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %59, i32 0, i32 5
  store i32 %58, i32* %m_last_error.i289, align 4
  br label %mz_zip_set_error.exit291

mz_zip_set_error.exit291:                         ; preds = %if.then53, %if.then.i290
  store i32 0, i32* %retval, align 4
  br label %return

if.end55:                                         ; preds = %if.end42
  %60 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState56 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %60, i32 0, i32 15
  %61 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState56, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %61, i32 0, i32 8
  %62 = load i8*, i8** %m_pMem, align 8
  %tobool57 = icmp ne i8* %62, null
  br i1 %tobool57, label %if.then58, label %if.else

if.then58:                                        ; preds = %if.end55
  %63 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState59 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %63, i32 0, i32 15
  %64 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState59, align 8
  %m_pMem60 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %64, i32 0, i32 8
  %65 = load i8*, i8** %m_pMem60, align 8
  %66 = load i64, i64* %cur_file_ofs, align 8
  %add.ptr61 = getelementptr inbounds i8, i8* %65, i64 %66
  store i8* %add.ptr61, i8** %pRead_buf, align 8
  %m_comp_size62 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %67 = load i64, i64* %m_comp_size62, align 8
  store i64 %67, i64* %read_buf_avail, align 8
  store i64 %67, i64* %read_buf_size, align 8
  store i64 0, i64* %comp_remaining, align 8
  br label %if.end74

if.else:                                          ; preds = %if.end55
  %m_comp_size63 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %68 = load i64, i64* %m_comp_size63, align 8
  %cmp64 = icmp ult i64 %68, 65536
  br i1 %cmp64, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %m_comp_size66 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %69 = load i64, i64* %m_comp_size66, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %69, %cond.true ], [ 65536, %cond.false ]
  store i64 %cond, i64* %read_buf_size, align 8
  %70 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %70, i32 0, i32 7
  %71 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %72 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %72, i32 0, i32 10
  %73 = load i8*, i8** %m_pAlloc_opaque, align 8
  %74 = load i64, i64* %read_buf_size, align 8
  %call67 = call i8* %71(i8* %73, i64 1, i64 %74)
  store i8* %call67, i8** %pRead_buf, align 8
  %cmp68 = icmp eq i8* null, %call67
  br i1 %cmp68, label %if.then70, label %if.end72

if.then70:                                        ; preds = %cond.end
  %75 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %75, %struct.mz_zip_archive** %pZip.addr.i298, align 8
  store i32 16, i32* %err_num.addr.i299, align 4
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i298, align 8
  %tobool.i300 = icmp ne %struct.mz_zip_archive* %76, null
  br i1 %tobool.i300, label %if.then.i302, label %mz_zip_set_error.exit303

if.then.i302:                                     ; preds = %if.then70
  %77 = load i32, i32* %err_num.addr.i299, align 4
  %78 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i298, align 8
  %m_last_error.i301 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %78, i32 0, i32 5
  store i32 %77, i32* %m_last_error.i301, align 4
  br label %mz_zip_set_error.exit303

mz_zip_set_error.exit303:                         ; preds = %if.then70, %if.then.i302
  store i32 0, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %cond.end
  store i64 0, i64* %read_buf_avail, align 8
  %m_comp_size73 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %79 = load i64, i64* %m_comp_size73, align 8
  store i64 %79, i64* %comp_remaining, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.end72, %if.then58
  %80 = load i32, i32* %flags.addr, align 4
  %and75 = and i32 %80, 1024
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %if.then80, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %if.end74
  %m_method78 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %81 = load i16, i16* %m_method78, align 2
  %tobool79 = icmp ne i16 %81, 0
  br i1 %tobool79, label %if.else138, label %if.then80

if.then80:                                        ; preds = %lor.lhs.false77, %if.end74
  %82 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState81 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %82, i32 0, i32 15
  %83 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState81, align 8
  %m_pMem82 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %83, i32 0, i32 8
  %84 = load i8*, i8** %m_pMem82, align 8
  %tobool83 = icmp ne i8* %84, null
  br i1 %tobool83, label %if.then84, label %if.else106

if.then84:                                        ; preds = %if.then80
  %85 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %86 = load i8*, i8** %pOpaque.addr, align 8
  %87 = load i64, i64* %out_buf_ofs, align 8
  %88 = load i8*, i8** %pRead_buf, align 8
  %m_comp_size85 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %89 = load i64, i64* %m_comp_size85, align 8
  %call86 = call i64 %85(i8* %86, i64 %87, i8* %88, i64 %89)
  %m_comp_size87 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %90 = load i64, i64* %m_comp_size87, align 8
  %cmp88 = icmp ne i64 %call86, %90
  br i1 %cmp88, label %if.then90, label %if.else92

if.then90:                                        ; preds = %if.then84
  %91 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %91, %struct.mz_zip_archive** %pZip.addr.i310, align 8
  store i32 31, i32* %err_num.addr.i311, align 4
  %92 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i310, align 8
  %tobool.i312 = icmp ne %struct.mz_zip_archive* %92, null
  br i1 %tobool.i312, label %if.then.i314, label %mz_zip_set_error.exit315

if.then.i314:                                     ; preds = %if.then90
  %93 = load i32, i32* %err_num.addr.i311, align 4
  %94 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i310, align 8
  %m_last_error.i313 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %94, i32 0, i32 5
  store i32 %93, i32* %m_last_error.i313, align 4
  br label %mz_zip_set_error.exit315

mz_zip_set_error.exit315:                         ; preds = %if.then90, %if.then.i314
  store i32 -1, i32* %status, align 4
  br label %if.end101

if.else92:                                        ; preds = %if.then84
  %95 = load i32, i32* %flags.addr, align 4
  %and93 = and i32 %95, 1024
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %if.end100, label %if.then95

if.then95:                                        ; preds = %if.else92
  %96 = load i32, i32* %file_crc32, align 4
  %conv96 = zext i32 %96 to i64
  %97 = load i8*, i8** %pRead_buf, align 8
  %m_comp_size97 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %98 = load i64, i64* %m_comp_size97, align 8
  %call98 = call i64 @mz_crc32(i64 %conv96, i8* %97, i64 %98)
  %conv99 = trunc i64 %call98 to i32
  store i32 %conv99, i32* %file_crc32, align 4
  br label %if.end100

if.end100:                                        ; preds = %if.then95, %if.else92
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %mz_zip_set_error.exit315
  %m_comp_size102 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %99 = load i64, i64* %m_comp_size102, align 8
  %100 = load i64, i64* %cur_file_ofs, align 8
  %add103 = add i64 %100, %99
  store i64 %add103, i64* %cur_file_ofs, align 8
  %m_comp_size104 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %101 = load i64, i64* %m_comp_size104, align 8
  %102 = load i64, i64* %out_buf_ofs, align 8
  %add105 = add i64 %102, %101
  store i64 %add105, i64* %out_buf_ofs, align 8
  store i64 0, i64* %comp_remaining, align 8
  br label %if.end137

if.else106:                                       ; preds = %if.then80
  br label %while.cond

while.cond:                                       ; preds = %if.end134, %if.else106
  %103 = load i64, i64* %comp_remaining, align 8
  %tobool107 = icmp ne i64 %103, 0
  br i1 %tobool107, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %104 = load i64, i64* %read_buf_size, align 8
  %105 = load i64, i64* %comp_remaining, align 8
  %cmp108 = icmp ult i64 %104, %105
  br i1 %cmp108, label %cond.true110, label %cond.false111

cond.true110:                                     ; preds = %while.body
  %106 = load i64, i64* %read_buf_size, align 8
  br label %cond.end112

cond.false111:                                    ; preds = %while.body
  %107 = load i64, i64* %comp_remaining, align 8
  br label %cond.end112

cond.end112:                                      ; preds = %cond.false111, %cond.true110
  %cond113 = phi i64 [ %106, %cond.true110 ], [ %107, %cond.false111 ]
  store i64 %cond113, i64* %read_buf_avail, align 8
  %108 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead114 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %108, i32 0, i32 11
  %109 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead114, align 8
  %110 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque115 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %110, i32 0, i32 14
  %111 = load i8*, i8** %m_pIO_opaque115, align 8
  %112 = load i64, i64* %cur_file_ofs, align 8
  %113 = load i8*, i8** %pRead_buf, align 8
  %114 = load i64, i64* %read_buf_avail, align 8
  %call116 = call i64 %109(i8* %111, i64 %112, i8* %113, i64 %114)
  %115 = load i64, i64* %read_buf_avail, align 8
  %cmp117 = icmp ne i64 %call116, %115
  br i1 %cmp117, label %if.then119, label %if.end121

if.then119:                                       ; preds = %cond.end112
  %116 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %116, %struct.mz_zip_archive** %pZip.addr.i322, align 8
  store i32 20, i32* %err_num.addr.i323, align 4
  %117 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i322, align 8
  %tobool.i324 = icmp ne %struct.mz_zip_archive* %117, null
  br i1 %tobool.i324, label %if.then.i326, label %mz_zip_set_error.exit327

if.then.i326:                                     ; preds = %if.then119
  %118 = load i32, i32* %err_num.addr.i323, align 4
  %119 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i322, align 8
  %m_last_error.i325 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %119, i32 0, i32 5
  store i32 %118, i32* %m_last_error.i325, align 4
  br label %mz_zip_set_error.exit327

mz_zip_set_error.exit327:                         ; preds = %if.then119, %if.then.i326
  store i32 -1, i32* %status, align 4
  br label %while.end

if.end121:                                        ; preds = %cond.end112
  %120 = load i32, i32* %flags.addr, align 4
  %and122 = and i32 %120, 1024
  %tobool123 = icmp ne i32 %and122, 0
  br i1 %tobool123, label %if.end128, label %if.then124

if.then124:                                       ; preds = %if.end121
  %121 = load i32, i32* %file_crc32, align 4
  %conv125 = zext i32 %121 to i64
  %122 = load i8*, i8** %pRead_buf, align 8
  %123 = load i64, i64* %read_buf_avail, align 8
  %call126 = call i64 @mz_crc32(i64 %conv125, i8* %122, i64 %123)
  %conv127 = trunc i64 %call126 to i32
  store i32 %conv127, i32* %file_crc32, align 4
  br label %if.end128

if.end128:                                        ; preds = %if.then124, %if.end121
  %124 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %125 = load i8*, i8** %pOpaque.addr, align 8
  %126 = load i64, i64* %out_buf_ofs, align 8
  %127 = load i8*, i8** %pRead_buf, align 8
  %128 = load i64, i64* %read_buf_avail, align 8
  %call129 = call i64 %124(i8* %125, i64 %126, i8* %127, i64 %128)
  %129 = load i64, i64* %read_buf_avail, align 8
  %cmp130 = icmp ne i64 %call129, %129
  br i1 %cmp130, label %if.then132, label %if.end134

if.then132:                                       ; preds = %if.end128
  %130 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %130, %struct.mz_zip_archive** %pZip.addr.i316, align 8
  store i32 31, i32* %err_num.addr.i317, align 4
  %131 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i316, align 8
  %tobool.i318 = icmp ne %struct.mz_zip_archive* %131, null
  br i1 %tobool.i318, label %if.then.i320, label %mz_zip_set_error.exit321

if.then.i320:                                     ; preds = %if.then132
  %132 = load i32, i32* %err_num.addr.i317, align 4
  %133 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i316, align 8
  %m_last_error.i319 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %133, i32 0, i32 5
  store i32 %132, i32* %m_last_error.i319, align 4
  br label %mz_zip_set_error.exit321

mz_zip_set_error.exit321:                         ; preds = %if.then132, %if.then.i320
  store i32 -1, i32* %status, align 4
  br label %while.end

if.end134:                                        ; preds = %if.end128
  %134 = load i64, i64* %read_buf_avail, align 8
  %135 = load i64, i64* %cur_file_ofs, align 8
  %add135 = add i64 %135, %134
  store i64 %add135, i64* %cur_file_ofs, align 8
  %136 = load i64, i64* %read_buf_avail, align 8
  %137 = load i64, i64* %out_buf_ofs, align 8
  %add136 = add i64 %137, %136
  store i64 %add136, i64* %out_buf_ofs, align 8
  %138 = load i64, i64* %read_buf_avail, align 8
  %139 = load i64, i64* %comp_remaining, align 8
  %sub = sub i64 %139, %138
  store i64 %sub, i64* %comp_remaining, align 8
  br label %while.cond

while.end:                                        ; preds = %mz_zip_set_error.exit321, %mz_zip_set_error.exit327, %while.cond
  br label %if.end137

if.end137:                                        ; preds = %while.end, %if.end101
  br label %if.end205

if.else138:                                       ; preds = %lor.lhs.false77
  br label %do.body

do.body:                                          ; preds = %if.else138
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %inflator, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %140 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc139 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %140, i32 0, i32 7
  %141 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc139, align 8
  %142 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque140 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %142, i32 0, i32 10
  %143 = load i8*, i8** %m_pAlloc_opaque140, align 8
  %call141 = call i8* %141(i8* %143, i64 1, i64 32768)
  store i8* %call141, i8** %pWrite_buf, align 8
  %cmp142 = icmp eq i8* null, %call141
  br i1 %cmp142, label %if.then144, label %if.else146

if.then144:                                       ; preds = %do.end
  %144 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %144, %struct.mz_zip_archive** %pZip.addr.i304, align 8
  store i32 16, i32* %err_num.addr.i305, align 4
  %145 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i304, align 8
  %tobool.i306 = icmp ne %struct.mz_zip_archive* %145, null
  br i1 %tobool.i306, label %if.then.i308, label %mz_zip_set_error.exit309

if.then.i308:                                     ; preds = %if.then144
  %146 = load i32, i32* %err_num.addr.i305, align 4
  %147 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i304, align 8
  %m_last_error.i307 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %147, i32 0, i32 5
  store i32 %146, i32* %m_last_error.i307, align 4
  br label %mz_zip_set_error.exit309

mz_zip_set_error.exit309:                         ; preds = %if.then144, %if.then.i308
  store i32 -1, i32* %status, align 4
  br label %if.end204

if.else146:                                       ; preds = %do.end
  br label %do.body147

do.body147:                                       ; preds = %lor.end, %if.else146
  %148 = load i8*, i8** %pWrite_buf, align 8
  %149 = load i64, i64* %out_buf_ofs, align 8
  %and148 = and i64 %149, 32767
  %add.ptr149 = getelementptr inbounds i8, i8* %148, i64 %and148
  store i8* %add.ptr149, i8** %pWrite_buf_cur, align 8
  %150 = load i64, i64* %out_buf_ofs, align 8
  %and150 = and i64 %150, 32767
  %sub151 = sub i64 32768, %and150
  store i64 %sub151, i64* %out_buf_size, align 8
  %151 = load i64, i64* %read_buf_avail, align 8
  %tobool152 = icmp ne i64 %151, 0
  br i1 %tobool152, label %if.end174, label %land.lhs.true153

land.lhs.true153:                                 ; preds = %do.body147
  %152 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState154 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %152, i32 0, i32 15
  %153 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState154, align 8
  %m_pMem155 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %153, i32 0, i32 8
  %154 = load i8*, i8** %m_pMem155, align 8
  %tobool156 = icmp ne i8* %154, null
  br i1 %tobool156, label %if.end174, label %if.then157

if.then157:                                       ; preds = %land.lhs.true153
  %155 = load i64, i64* %read_buf_size, align 8
  %156 = load i64, i64* %comp_remaining, align 8
  %cmp158 = icmp ult i64 %155, %156
  br i1 %cmp158, label %cond.true160, label %cond.false161

cond.true160:                                     ; preds = %if.then157
  %157 = load i64, i64* %read_buf_size, align 8
  br label %cond.end162

cond.false161:                                    ; preds = %if.then157
  %158 = load i64, i64* %comp_remaining, align 8
  br label %cond.end162

cond.end162:                                      ; preds = %cond.false161, %cond.true160
  %cond163 = phi i64 [ %157, %cond.true160 ], [ %158, %cond.false161 ]
  store i64 %cond163, i64* %read_buf_avail, align 8
  %159 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead164 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %159, i32 0, i32 11
  %160 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead164, align 8
  %161 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque165 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %161, i32 0, i32 14
  %162 = load i8*, i8** %m_pIO_opaque165, align 8
  %163 = load i64, i64* %cur_file_ofs, align 8
  %164 = load i8*, i8** %pRead_buf, align 8
  %165 = load i64, i64* %read_buf_avail, align 8
  %call166 = call i64 %160(i8* %162, i64 %163, i8* %164, i64 %165)
  %166 = load i64, i64* %read_buf_avail, align 8
  %cmp167 = icmp ne i64 %call166, %166
  br i1 %cmp167, label %if.then169, label %if.end171

if.then169:                                       ; preds = %cond.end162
  %167 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %167, %struct.mz_zip_archive** %pZip.addr.i292, align 8
  store i32 20, i32* %err_num.addr.i293, align 4
  %168 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i292, align 8
  %tobool.i294 = icmp ne %struct.mz_zip_archive* %168, null
  br i1 %tobool.i294, label %if.then.i296, label %mz_zip_set_error.exit297

if.then.i296:                                     ; preds = %if.then169
  %169 = load i32, i32* %err_num.addr.i293, align 4
  %170 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i292, align 8
  %m_last_error.i295 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %170, i32 0, i32 5
  store i32 %169, i32* %m_last_error.i295, align 4
  br label %mz_zip_set_error.exit297

mz_zip_set_error.exit297:                         ; preds = %if.then169, %if.then.i296
  store i32 -1, i32* %status, align 4
  br label %do.end203

if.end171:                                        ; preds = %cond.end162
  %171 = load i64, i64* %read_buf_avail, align 8
  %172 = load i64, i64* %cur_file_ofs, align 8
  %add172 = add i64 %172, %171
  store i64 %add172, i64* %cur_file_ofs, align 8
  %173 = load i64, i64* %read_buf_avail, align 8
  %174 = load i64, i64* %comp_remaining, align 8
  %sub173 = sub i64 %174, %173
  store i64 %sub173, i64* %comp_remaining, align 8
  store i64 0, i64* %read_buf_ofs, align 8
  br label %if.end174

if.end174:                                        ; preds = %if.end171, %land.lhs.true153, %do.body147
  %175 = load i64, i64* %read_buf_avail, align 8
  store i64 %175, i64* %in_buf_size, align 8
  %176 = load i8*, i8** %pRead_buf, align 8
  %177 = load i64, i64* %read_buf_ofs, align 8
  %add.ptr175 = getelementptr inbounds i8, i8* %176, i64 %177
  %178 = load i8*, i8** %pWrite_buf, align 8
  %179 = load i8*, i8** %pWrite_buf_cur, align 8
  %180 = load i64, i64* %comp_remaining, align 8
  %tobool176 = icmp ne i64 %180, 0
  %cond177 = select i1 %tobool176, i32 2, i32 0
  %call178 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %inflator, i8* %add.ptr175, i64* %in_buf_size, i8* %178, i8* %179, i64* %out_buf_size, i32 %cond177)
  store i32 %call178, i32* %status, align 4
  %181 = load i64, i64* %in_buf_size, align 8
  %182 = load i64, i64* %read_buf_avail, align 8
  %sub179 = sub i64 %182, %181
  store i64 %sub179, i64* %read_buf_avail, align 8
  %183 = load i64, i64* %in_buf_size, align 8
  %184 = load i64, i64* %read_buf_ofs, align 8
  %add180 = add i64 %184, %183
  store i64 %add180, i64* %read_buf_ofs, align 8
  %185 = load i64, i64* %out_buf_size, align 8
  %tobool181 = icmp ne i64 %185, 0
  br i1 %tobool181, label %if.then182, label %if.end198

if.then182:                                       ; preds = %if.end174
  %186 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %187 = load i8*, i8** %pOpaque.addr, align 8
  %188 = load i64, i64* %out_buf_ofs, align 8
  %189 = load i8*, i8** %pWrite_buf_cur, align 8
  %190 = load i64, i64* %out_buf_size, align 8
  %call183 = call i64 %186(i8* %187, i64 %188, i8* %189, i64 %190)
  %191 = load i64, i64* %out_buf_size, align 8
  %cmp184 = icmp ne i64 %call183, %191
  br i1 %cmp184, label %if.then186, label %if.end188

if.then186:                                       ; preds = %if.then182
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %192, %struct.mz_zip_archive** %pZip.addr.i274, align 8
  store i32 31, i32* %err_num.addr.i275, align 4
  %193 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i274, align 8
  %tobool.i276 = icmp ne %struct.mz_zip_archive* %193, null
  br i1 %tobool.i276, label %if.then.i278, label %mz_zip_set_error.exit279

if.then.i278:                                     ; preds = %if.then186
  %194 = load i32, i32* %err_num.addr.i275, align 4
  %195 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i274, align 8
  %m_last_error.i277 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %195, i32 0, i32 5
  store i32 %194, i32* %m_last_error.i277, align 4
  br label %mz_zip_set_error.exit279

mz_zip_set_error.exit279:                         ; preds = %if.then186, %if.then.i278
  store i32 -1, i32* %status, align 4
  br label %do.end203

if.end188:                                        ; preds = %if.then182
  %196 = load i32, i32* %file_crc32, align 4
  %conv189 = zext i32 %196 to i64
  %197 = load i8*, i8** %pWrite_buf_cur, align 8
  %198 = load i64, i64* %out_buf_size, align 8
  %call190 = call i64 @mz_crc32(i64 %conv189, i8* %197, i64 %198)
  %conv191 = trunc i64 %call190 to i32
  store i32 %conv191, i32* %file_crc32, align 4
  %199 = load i64, i64* %out_buf_size, align 8
  %200 = load i64, i64* %out_buf_ofs, align 8
  %add192 = add i64 %200, %199
  store i64 %add192, i64* %out_buf_ofs, align 8
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %201 = load i64, i64* %m_uncomp_size, align 8
  %cmp193 = icmp ugt i64 %add192, %201
  br i1 %cmp193, label %if.then195, label %if.end197

if.then195:                                       ; preds = %if.end188
  %202 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %202, %struct.mz_zip_archive** %pZip.addr.i262, align 8
  store i32 11, i32* %err_num.addr.i263, align 4
  %203 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i262, align 8
  %tobool.i264 = icmp ne %struct.mz_zip_archive* %203, null
  br i1 %tobool.i264, label %if.then.i266, label %mz_zip_set_error.exit267

if.then.i266:                                     ; preds = %if.then195
  %204 = load i32, i32* %err_num.addr.i263, align 4
  %205 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i262, align 8
  %m_last_error.i265 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %205, i32 0, i32 5
  store i32 %204, i32* %m_last_error.i265, align 4
  br label %mz_zip_set_error.exit267

mz_zip_set_error.exit267:                         ; preds = %if.then195, %if.then.i266
  store i32 -1, i32* %status, align 4
  br label %do.end203

if.end197:                                        ; preds = %if.end188
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %if.end174
  br label %do.cond

do.cond:                                          ; preds = %if.end198
  %206 = load i32, i32* %status, align 4
  %cmp199 = icmp eq i32 %206, 1
  br i1 %cmp199, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.cond
  %207 = load i32, i32* %status, align 4
  %cmp201 = icmp eq i32 %207, 2
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.cond
  %208 = phi i1 [ true, %do.cond ], [ %cmp201, %lor.rhs ]
  br i1 %208, label %do.body147, label %do.end203

do.end203:                                        ; preds = %lor.end, %mz_zip_set_error.exit267, %mz_zip_set_error.exit279, %mz_zip_set_error.exit297
  br label %if.end204

if.end204:                                        ; preds = %do.end203, %mz_zip_set_error.exit309
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %if.end137
  %209 = load i32, i32* %status, align 4
  %cmp206 = icmp eq i32 %209, 0
  br i1 %cmp206, label %land.lhs.true208, label %if.end224

land.lhs.true208:                                 ; preds = %if.end205
  %210 = load i32, i32* %flags.addr, align 4
  %and209 = and i32 %210, 1024
  %tobool210 = icmp ne i32 %and209, 0
  br i1 %tobool210, label %if.end224, label %if.then211

if.then211:                                       ; preds = %land.lhs.true208
  %211 = load i64, i64* %out_buf_ofs, align 8
  %m_uncomp_size212 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %212 = load i64, i64* %m_uncomp_size212, align 8
  %cmp213 = icmp ne i64 %211, %212
  br i1 %cmp213, label %if.then215, label %if.else217

if.then215:                                       ; preds = %if.then211
  %213 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %213, %struct.mz_zip_archive** %pZip.addr.i256, align 8
  store i32 13, i32* %err_num.addr.i257, align 4
  %214 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i256, align 8
  %tobool.i258 = icmp ne %struct.mz_zip_archive* %214, null
  br i1 %tobool.i258, label %if.then.i260, label %mz_zip_set_error.exit261

if.then.i260:                                     ; preds = %if.then215
  %215 = load i32, i32* %err_num.addr.i257, align 4
  %216 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i256, align 8
  %m_last_error.i259 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %216, i32 0, i32 5
  store i32 %215, i32* %m_last_error.i259, align 4
  br label %mz_zip_set_error.exit261

mz_zip_set_error.exit261:                         ; preds = %if.then215, %if.then.i260
  store i32 -1, i32* %status, align 4
  br label %if.end223

if.else217:                                       ; preds = %if.then211
  %217 = load i32, i32* %file_crc32, align 4
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %218 = load i32, i32* %m_crc32, align 8
  %cmp218 = icmp ne i32 %217, %218
  br i1 %cmp218, label %if.then220, label %if.end222

if.then220:                                       ; preds = %if.else217
  %219 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %219, %struct.mz_zip_archive** %pZip.addr.i250, align 8
  store i32 11, i32* %err_num.addr.i251, align 4
  %220 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i250, align 8
  %tobool.i252 = icmp ne %struct.mz_zip_archive* %220, null
  br i1 %tobool.i252, label %if.then.i254, label %mz_zip_set_error.exit255

if.then.i254:                                     ; preds = %if.then220
  %221 = load i32, i32* %err_num.addr.i251, align 4
  %222 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i250, align 8
  %m_last_error.i253 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %222, i32 0, i32 5
  store i32 %221, i32* %m_last_error.i253, align 4
  br label %mz_zip_set_error.exit255

mz_zip_set_error.exit255:                         ; preds = %if.then220, %if.then.i254
  store i32 -1, i32* %status, align 4
  br label %if.end222

if.end222:                                        ; preds = %mz_zip_set_error.exit255, %if.else217
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %mz_zip_set_error.exit261
  br label %if.end224

if.end224:                                        ; preds = %if.end223, %land.lhs.true208, %if.end205
  %223 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState225 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %223, i32 0, i32 15
  %224 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState225, align 8
  %m_pMem226 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %224, i32 0, i32 8
  %225 = load i8*, i8** %m_pMem226, align 8
  %tobool227 = icmp ne i8* %225, null
  br i1 %tobool227, label %if.end230, label %if.then228

if.then228:                                       ; preds = %if.end224
  %226 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %226, i32 0, i32 8
  %227 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %228 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque229 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %228, i32 0, i32 10
  %229 = load i8*, i8** %m_pAlloc_opaque229, align 8
  %230 = load i8*, i8** %pRead_buf, align 8
  call void %227(i8* %229, i8* %230)
  br label %if.end230

if.end230:                                        ; preds = %if.then228, %if.end224
  %231 = load i8*, i8** %pWrite_buf, align 8
  %tobool231 = icmp ne i8* %231, null
  br i1 %tobool231, label %if.then232, label %if.end235

if.then232:                                       ; preds = %if.end230
  %232 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree233 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %232, i32 0, i32 8
  %233 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree233, align 8
  %234 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque234 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %234, i32 0, i32 10
  %235 = load i8*, i8** %m_pAlloc_opaque234, align 8
  %236 = load i8*, i8** %pWrite_buf, align 8
  call void %233(i8* %235, i8* %236)
  br label %if.end235

if.end235:                                        ; preds = %if.then232, %if.end230
  %237 = load i32, i32* %status, align 4
  %cmp236 = icmp eq i32 %237, 0
  %conv237 = zext i1 %cmp236 to i32
  store i32 %conv237, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end235, %mz_zip_set_error.exit303, %mz_zip_set_error.exit291, %mz_zip_set_error.exit285, %mz_zip_set_error.exit273, %mz_zip_set_error.exit249, %mz_zip_set_error.exit243, %if.then13, %if.then8, %mz_zip_set_error.exit
  %238 = load i32, i32* %retval, align 4
  ret i32 %238
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_callback(%struct.mz_zip_archive* %pZip, i8* %pFilename, i64 (i8*, i64, i8*, i64)* %pCallback, i8* %pOpaque, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pCallback.addr = alloca i64 (i8*, i64, i8*, i64)*, align 8
  %pOpaque.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64 (i8*, i64, i8*, i64)* %pCallback, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pFilename.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %0, i8* %1, i8* null, i32 %2, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %4 = load i32, i32* %file_index, align 4
  %5 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8
  %6 = load i8*, i8** %pOpaque.addr, align 8
  %7 = load i32, i32* %flags.addr, align 4
  %call1 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %3, i32 %4, i64 (i8*, i64, i8*, i64)* %5, i8* %6, i32 %7)
  store i32 %call1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mz_zip_reader_extract_iter_state* @mz_zip_reader_extract_iter_new(%struct.mz_zip_archive* %pZip, i32 %file_index, i32 %flags) #0 {
entry:
  %pZip.addr.i178 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i179 = alloca i32, align 4
  %pZip.addr.i172 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i173 = alloca i32, align 4
  %pZip.addr.i166 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i167 = alloca i32, align 4
  %pZip.addr.i160 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i161 = alloca i32, align 4
  %pZip.addr.i154 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i155 = alloca i32, align 4
  %pZip.addr.i148 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i149 = alloca i32, align 4
  %pZip.addr.i142 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i143 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pLocal_header, align 8
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 7
  %5 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 10
  %7 = load i8*, i8** %m_pAlloc_opaque, align 8
  %call = call i8* %5(i8* %7, i64 1, i64 12208)
  %8 = bitcast i8* %call to %struct.mz_zip_reader_extract_iter_state*
  store %struct.mz_zip_reader_extract_iter_state* %8, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %9 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %tobool2 = icmp ne %struct.mz_zip_reader_extract_iter_state* %9, null
  br i1 %tobool2, label %if.end5, label %if.then3

if.then3:                                         ; preds = %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %10, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 16, i32* %err_num.addr.i, align 4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %11, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then3
  %12 = load i32, i32* %err_num.addr.i, align 4
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 5
  store i32 %12, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then3, %if.then.i
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end5:                                          ; preds = %if.end
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %15 = load i32, i32* %file_index.addr, align 4
  %16 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %16, i32 0, i32 10
  %call6 = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %14, i32 %15, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end5
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 8
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque9 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 10
  %20 = load i8*, i8** %m_pAlloc_opaque9, align 8
  %21 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %22 = bitcast %struct.mz_zip_reader_extract_iter_state* %21 to i8*
  call void %18(i8* %20, i8* %22)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end10:                                         ; preds = %if.end5
  %23 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat11 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %23, i32 0, i32 10
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat11, i32 0, i32 4
  %24 = load i16, i16* %m_bit_flag, align 4
  %conv = zext i16 %24 to i32
  %and = and i32 %conv, 97
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %if.then13, label %if.end17

if.then13:                                        ; preds = %if.end10
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %25, %struct.mz_zip_archive** %pZip.addr.i142, align 8
  store i32 5, i32* %err_num.addr.i143, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i142, align 8
  %tobool.i144 = icmp ne %struct.mz_zip_archive* %26, null
  br i1 %tobool.i144, label %if.then.i146, label %mz_zip_set_error.exit147

if.then.i146:                                     ; preds = %if.then13
  %27 = load i32, i32* %err_num.addr.i143, align 4
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i142, align 8
  %m_last_error.i145 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 5
  store i32 %27, i32* %m_last_error.i145, align 4
  br label %mz_zip_set_error.exit147

mz_zip_set_error.exit147:                         ; preds = %if.then13, %if.then.i146
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 8
  %30 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree15, align 8
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque16 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 10
  %32 = load i8*, i8** %m_pAlloc_opaque16, align 8
  %33 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %34 = bitcast %struct.mz_zip_reader_extract_iter_state* %33 to i8*
  call void %30(i8* %32, i8* %34)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end17:                                         ; preds = %if.end10
  %35 = load i32, i32* %flags.addr, align 4
  %and18 = and i32 %35, 1024
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.end33, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end17
  %36 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat20 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %36, i32 0, i32 10
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat20, i32 0, i32 5
  %37 = load i16, i16* %m_method, align 2
  %conv21 = zext i16 %37 to i32
  %cmp = icmp ne i32 %conv21, 0
  br i1 %cmp, label %land.lhs.true23, label %if.end33

land.lhs.true23:                                  ; preds = %land.lhs.true
  %38 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat24 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %38, i32 0, i32 10
  %m_method25 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat24, i32 0, i32 5
  %39 = load i16, i16* %m_method25, align 2
  %conv26 = zext i16 %39 to i32
  %cmp27 = icmp ne i32 %conv26, 8
  br i1 %cmp27, label %if.then29, label %if.end33

if.then29:                                        ; preds = %land.lhs.true23
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %40, %struct.mz_zip_archive** %pZip.addr.i148, align 8
  store i32 4, i32* %err_num.addr.i149, align 4
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i148, align 8
  %tobool.i150 = icmp ne %struct.mz_zip_archive* %41, null
  br i1 %tobool.i150, label %if.then.i152, label %mz_zip_set_error.exit153

if.then.i152:                                     ; preds = %if.then29
  %42 = load i32, i32* %err_num.addr.i149, align 4
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i148, align 8
  %m_last_error.i151 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %43, i32 0, i32 5
  store i32 %42, i32* %m_last_error.i151, align 4
  br label %mz_zip_set_error.exit153

mz_zip_set_error.exit153:                         ; preds = %if.then29, %if.then.i152
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 8
  %45 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree31, align 8
  %46 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque32 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %46, i32 0, i32 10
  %47 = load i8*, i8** %m_pAlloc_opaque32, align 8
  %48 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %49 = bitcast %struct.mz_zip_reader_extract_iter_state* %48 to i8*
  call void %45(i8* %47, i8* %49)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end33:                                         ; preds = %land.lhs.true23, %land.lhs.true, %if.end17
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %51 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %pZip34 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %51, i32 0, i32 0
  store %struct.mz_zip_archive* %50, %struct.mz_zip_archive** %pZip34, align 8
  %52 = load i32, i32* %flags.addr, align 4
  %53 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %flags35 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %53, i32 0, i32 1
  store i32 %52, i32* %flags35, align 8
  %54 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %status = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %54, i32 0, i32 2
  store i32 0, i32* %status, align 4
  %55 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_crc32 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %55, i32 0, i32 3
  store i32 0, i32* %file_crc32, align 8
  %56 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %read_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %56, i32 0, i32 5
  store i64 0, i64* %read_buf_ofs, align 8
  %57 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %out_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %57, i32 0, i32 8
  store i64 0, i64* %out_buf_ofs, align 8
  %58 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %pRead_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %58, i32 0, i32 11
  store i8* null, i8** %pRead_buf, align 8
  %59 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %pWrite_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %59, i32 0, i32 12
  store i8* null, i8** %pWrite_buf, align 8
  %60 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %out_blk_remain = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %60, i32 0, i32 13
  store i64 0, i64* %out_blk_remain, align 8
  %61 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat36 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %61, i32 0, i32 10
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat36, i32 0, i32 12
  %62 = load i64, i64* %m_local_header_ofs, align 8
  %63 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %cur_file_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %63, i32 0, i32 9
  store i64 %62, i64* %cur_file_ofs, align 8
  %64 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %64, i32 0, i32 11
  %65 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %66, i32 0, i32 14
  %67 = load i8*, i8** %m_pIO_opaque, align 8
  %68 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %cur_file_ofs37 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %68, i32 0, i32 9
  %69 = load i64, i64* %cur_file_ofs37, align 8
  %70 = load i8*, i8** %pLocal_header, align 8
  %call38 = call i64 %65(i8* %67, i64 %69, i8* %70, i64 30)
  %cmp39 = icmp ne i64 %call38, 30
  br i1 %cmp39, label %if.then41, label %if.end45

if.then41:                                        ; preds = %if.end33
  %71 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %71, %struct.mz_zip_archive** %pZip.addr.i160, align 8
  store i32 20, i32* %err_num.addr.i161, align 4
  %72 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i160, align 8
  %tobool.i162 = icmp ne %struct.mz_zip_archive* %72, null
  br i1 %tobool.i162, label %if.then.i164, label %mz_zip_set_error.exit165

if.then.i164:                                     ; preds = %if.then41
  %73 = load i32, i32* %err_num.addr.i161, align 4
  %74 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i160, align 8
  %m_last_error.i163 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %74, i32 0, i32 5
  store i32 %73, i32* %m_last_error.i163, align 4
  br label %mz_zip_set_error.exit165

mz_zip_set_error.exit165:                         ; preds = %if.then41, %if.then.i164
  %75 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree43 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %75, i32 0, i32 8
  %76 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree43, align 8
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque44 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %77, i32 0, i32 10
  %78 = load i8*, i8** %m_pAlloc_opaque44, align 8
  %79 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %80 = bitcast %struct.mz_zip_reader_extract_iter_state* %79 to i8*
  call void %76(i8* %78, i8* %80)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end45:                                         ; preds = %if.end33
  %81 = load i8*, i8** %pLocal_header, align 8
  %82 = bitcast i8* %81 to i32*
  %83 = load i32, i32* %82, align 4
  %cmp46 = icmp ne i32 %83, 67324752
  br i1 %cmp46, label %if.then48, label %if.end52

if.then48:                                        ; preds = %if.end45
  %84 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %84, %struct.mz_zip_archive** %pZip.addr.i166, align 8
  store i32 9, i32* %err_num.addr.i167, align 4
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i166, align 8
  %tobool.i168 = icmp ne %struct.mz_zip_archive* %85, null
  br i1 %tobool.i168, label %if.then.i170, label %mz_zip_set_error.exit171

if.then.i170:                                     ; preds = %if.then48
  %86 = load i32, i32* %err_num.addr.i167, align 4
  %87 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i166, align 8
  %m_last_error.i169 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %87, i32 0, i32 5
  store i32 %86, i32* %m_last_error.i169, align 4
  br label %mz_zip_set_error.exit171

mz_zip_set_error.exit171:                         ; preds = %if.then48, %if.then.i170
  %88 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree50 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %88, i32 0, i32 8
  %89 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree50, align 8
  %90 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque51 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %90, i32 0, i32 10
  %91 = load i8*, i8** %m_pAlloc_opaque51, align 8
  %92 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %93 = bitcast %struct.mz_zip_reader_extract_iter_state* %92 to i8*
  call void %89(i8* %91, i8* %93)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end52:                                         ; preds = %if.end45
  %94 = load i8*, i8** %pLocal_header, align 8
  %add.ptr = getelementptr inbounds i8, i8* %94, i64 26
  %95 = bitcast i8* %add.ptr to i16*
  %96 = load i16, i16* %95, align 2
  %conv53 = zext i16 %96 to i32
  %add = add nsw i32 30, %conv53
  %97 = load i8*, i8** %pLocal_header, align 8
  %add.ptr54 = getelementptr inbounds i8, i8* %97, i64 28
  %98 = bitcast i8* %add.ptr54 to i16*
  %99 = load i16, i16* %98, align 2
  %conv55 = zext i16 %99 to i32
  %add56 = add nsw i32 %add, %conv55
  %conv57 = sext i32 %add56 to i64
  %100 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %cur_file_ofs58 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %100, i32 0, i32 9
  %101 = load i64, i64* %cur_file_ofs58, align 8
  %add59 = add i64 %101, %conv57
  store i64 %add59, i64* %cur_file_ofs58, align 8
  %102 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %cur_file_ofs60 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %102, i32 0, i32 9
  %103 = load i64, i64* %cur_file_ofs60, align 8
  %104 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat61 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %104, i32 0, i32 10
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat61, i32 0, i32 8
  %105 = load i64, i64* %m_comp_size, align 8
  %add62 = add i64 %103, %105
  %106 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %106, i32 0, i32 0
  %107 = load i64, i64* %m_archive_size, align 8
  %cmp63 = icmp ugt i64 %add62, %107
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end52
  %108 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %108, %struct.mz_zip_archive** %pZip.addr.i178, align 8
  store i32 9, i32* %err_num.addr.i179, align 4
  %109 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i178, align 8
  %tobool.i180 = icmp ne %struct.mz_zip_archive* %109, null
  br i1 %tobool.i180, label %if.then.i182, label %mz_zip_set_error.exit183

if.then.i182:                                     ; preds = %if.then65
  %110 = load i32, i32* %err_num.addr.i179, align 4
  %111 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i178, align 8
  %m_last_error.i181 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %111, i32 0, i32 5
  store i32 %110, i32* %m_last_error.i181, align 4
  br label %mz_zip_set_error.exit183

mz_zip_set_error.exit183:                         ; preds = %if.then65, %if.then.i182
  %112 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree67 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %112, i32 0, i32 8
  %113 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree67, align 8
  %114 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque68 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %114, i32 0, i32 10
  %115 = load i8*, i8** %m_pAlloc_opaque68, align 8
  %116 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %117 = bitcast %struct.mz_zip_reader_extract_iter_state* %116 to i8*
  call void %113(i8* %115, i8* %117)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end69:                                         ; preds = %if.end52
  %118 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState70 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %118, i32 0, i32 15
  %119 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState70, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %119, i32 0, i32 8
  %120 = load i8*, i8** %m_pMem, align 8
  %tobool71 = icmp ne i8* %120, null
  br i1 %tobool71, label %if.then72, label %if.else

if.then72:                                        ; preds = %if.end69
  %121 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState73 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %121, i32 0, i32 15
  %122 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState73, align 8
  %m_pMem74 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %122, i32 0, i32 8
  %123 = load i8*, i8** %m_pMem74, align 8
  %124 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %cur_file_ofs75 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %124, i32 0, i32 9
  %125 = load i64, i64* %cur_file_ofs75, align 8
  %add.ptr76 = getelementptr inbounds i8, i8* %123, i64 %125
  %126 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %pRead_buf77 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %126, i32 0, i32 11
  store i8* %add.ptr76, i8** %pRead_buf77, align 8
  %127 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat78 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %127, i32 0, i32 10
  %m_comp_size79 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat78, i32 0, i32 8
  %128 = load i64, i64* %m_comp_size79, align 8
  %129 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %read_buf_avail = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %129, i32 0, i32 6
  store i64 %128, i64* %read_buf_avail, align 8
  %130 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %read_buf_size = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %130, i32 0, i32 4
  store i64 %128, i64* %read_buf_size, align 8
  %131 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat80 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %131, i32 0, i32 10
  %m_comp_size81 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat80, i32 0, i32 8
  %132 = load i64, i64* %m_comp_size81, align 8
  %133 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %comp_remaining = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %133, i32 0, i32 7
  store i64 %132, i64* %comp_remaining, align 8
  br label %if.end115

if.else:                                          ; preds = %if.end69
  %134 = load i32, i32* %flags.addr, align 4
  %and82 = and i32 %134, 1024
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.else108, label %lor.lhs.false84

lor.lhs.false84:                                  ; preds = %if.else
  %135 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat85 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %135, i32 0, i32 10
  %m_method86 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat85, i32 0, i32 5
  %136 = load i16, i16* %m_method86, align 2
  %tobool87 = icmp ne i16 %136, 0
  br i1 %tobool87, label %if.then88, label %if.else108

if.then88:                                        ; preds = %lor.lhs.false84
  %137 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat89 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %137, i32 0, i32 10
  %m_comp_size90 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat89, i32 0, i32 8
  %138 = load i64, i64* %m_comp_size90, align 8
  %cmp91 = icmp ult i64 %138, 65536
  br i1 %cmp91, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then88
  %139 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat93 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %139, i32 0, i32 10
  %m_comp_size94 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat93, i32 0, i32 8
  %140 = load i64, i64* %m_comp_size94, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then88
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %140, %cond.true ], [ 65536, %cond.false ]
  %141 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %read_buf_size95 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %141, i32 0, i32 4
  store i64 %cond, i64* %read_buf_size95, align 8
  %142 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc96 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %142, i32 0, i32 7
  %143 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc96, align 8
  %144 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque97 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %144, i32 0, i32 10
  %145 = load i8*, i8** %m_pAlloc_opaque97, align 8
  %146 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %read_buf_size98 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %146, i32 0, i32 4
  %147 = load i64, i64* %read_buf_size98, align 8
  %call99 = call i8* %143(i8* %145, i64 1, i64 %147)
  %148 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %pRead_buf100 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %148, i32 0, i32 11
  store i8* %call99, i8** %pRead_buf100, align 8
  %cmp101 = icmp eq i8* null, %call99
  br i1 %cmp101, label %if.then103, label %if.end107

if.then103:                                       ; preds = %cond.end
  %149 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %149, %struct.mz_zip_archive** %pZip.addr.i172, align 8
  store i32 16, i32* %err_num.addr.i173, align 4
  %150 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i172, align 8
  %tobool.i174 = icmp ne %struct.mz_zip_archive* %150, null
  br i1 %tobool.i174, label %if.then.i176, label %mz_zip_set_error.exit177

if.then.i176:                                     ; preds = %if.then103
  %151 = load i32, i32* %err_num.addr.i173, align 4
  %152 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i172, align 8
  %m_last_error.i175 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %152, i32 0, i32 5
  store i32 %151, i32* %m_last_error.i175, align 4
  br label %mz_zip_set_error.exit177

mz_zip_set_error.exit177:                         ; preds = %if.then103, %if.then.i176
  %153 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree105 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %153, i32 0, i32 8
  %154 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree105, align 8
  %155 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque106 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %155, i32 0, i32 10
  %156 = load i8*, i8** %m_pAlloc_opaque106, align 8
  %157 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %158 = bitcast %struct.mz_zip_reader_extract_iter_state* %157 to i8*
  call void %154(i8* %156, i8* %158)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end107:                                        ; preds = %cond.end
  br label %if.end110

if.else108:                                       ; preds = %lor.lhs.false84, %if.else
  %159 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %read_buf_size109 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %159, i32 0, i32 4
  store i64 0, i64* %read_buf_size109, align 8
  br label %if.end110

if.end110:                                        ; preds = %if.else108, %if.end107
  %160 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %read_buf_avail111 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %160, i32 0, i32 6
  store i64 0, i64* %read_buf_avail111, align 8
  %161 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat112 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %161, i32 0, i32 10
  %m_comp_size113 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat112, i32 0, i32 8
  %162 = load i64, i64* %m_comp_size113, align 8
  %163 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %comp_remaining114 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %163, i32 0, i32 7
  store i64 %162, i64* %comp_remaining114, align 8
  br label %if.end115

if.end115:                                        ; preds = %if.end110, %if.then72
  %164 = load i32, i32* %flags.addr, align 4
  %and116 = and i32 %164, 1024
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %if.end141, label %lor.lhs.false118

lor.lhs.false118:                                 ; preds = %if.end115
  %165 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %file_stat119 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %165, i32 0, i32 10
  %m_method120 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat119, i32 0, i32 5
  %166 = load i16, i16* %m_method120, align 2
  %tobool121 = icmp ne i16 %166, 0
  br i1 %tobool121, label %if.then122, label %if.end141

if.then122:                                       ; preds = %lor.lhs.false118
  br label %do.body

do.body:                                          ; preds = %if.then122
  %167 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %inflator = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %167, i32 0, i32 14
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %inflator, i32 0, i32 0
  store i32 0, i32* %m_state, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %168 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc123 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %168, i32 0, i32 7
  %169 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc123, align 8
  %170 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque124 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %170, i32 0, i32 10
  %171 = load i8*, i8** %m_pAlloc_opaque124, align 8
  %call125 = call i8* %169(i8* %171, i64 1, i64 32768)
  %172 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %pWrite_buf126 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %172, i32 0, i32 12
  store i8* %call125, i8** %pWrite_buf126, align 8
  %cmp127 = icmp eq i8* null, %call125
  br i1 %cmp127, label %if.then129, label %if.end140

if.then129:                                       ; preds = %do.end
  %173 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %173, %struct.mz_zip_archive** %pZip.addr.i154, align 8
  store i32 16, i32* %err_num.addr.i155, align 4
  %174 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i154, align 8
  %tobool.i156 = icmp ne %struct.mz_zip_archive* %174, null
  br i1 %tobool.i156, label %if.then.i158, label %mz_zip_set_error.exit159

if.then.i158:                                     ; preds = %if.then129
  %175 = load i32, i32* %err_num.addr.i155, align 4
  %176 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i154, align 8
  %m_last_error.i157 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %176, i32 0, i32 5
  store i32 %175, i32* %m_last_error.i157, align 4
  br label %mz_zip_set_error.exit159

mz_zip_set_error.exit159:                         ; preds = %if.then129, %if.then.i158
  %177 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %pRead_buf131 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %177, i32 0, i32 11
  %178 = load i8*, i8** %pRead_buf131, align 8
  %tobool132 = icmp ne i8* %178, null
  br i1 %tobool132, label %if.then133, label %if.end137

if.then133:                                       ; preds = %mz_zip_set_error.exit159
  %179 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree134 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %179, i32 0, i32 8
  %180 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree134, align 8
  %181 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque135 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %181, i32 0, i32 10
  %182 = load i8*, i8** %m_pAlloc_opaque135, align 8
  %183 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %pRead_buf136 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %183, i32 0, i32 11
  %184 = load i8*, i8** %pRead_buf136, align 8
  call void %180(i8* %182, i8* %184)
  br label %if.end137

if.end137:                                        ; preds = %if.then133, %mz_zip_set_error.exit159
  %185 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree138 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %185, i32 0, i32 8
  %186 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree138, align 8
  %187 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque139 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %187, i32 0, i32 10
  %188 = load i8*, i8** %m_pAlloc_opaque139, align 8
  %189 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  %190 = bitcast %struct.mz_zip_reader_extract_iter_state* %189 to i8*
  call void %186(i8* %188, i8* %190)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end140:                                        ; preds = %do.end
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %lor.lhs.false118, %if.end115
  %191 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8
  store %struct.mz_zip_reader_extract_iter_state* %191, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

return:                                           ; preds = %if.end141, %if.end137, %mz_zip_set_error.exit177, %mz_zip_set_error.exit183, %mz_zip_set_error.exit171, %mz_zip_set_error.exit165, %mz_zip_set_error.exit153, %mz_zip_set_error.exit147, %if.then8, %mz_zip_set_error.exit, %if.then
  %192 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  ret %struct.mz_zip_reader_extract_iter_state* %192
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mz_zip_reader_extract_iter_state* @mz_zip_reader_extract_file_iter_new(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32 %flags) #0 {
entry:
  %retval = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pFilename.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %0, i8* %1, i8* null, i32 %2, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %4 = load i32, i32* %file_index, align 4
  %5 = load i32, i32* %flags.addr, align 4
  %call1 = call %struct.mz_zip_reader_extract_iter_state* @mz_zip_reader_extract_iter_new(%struct.mz_zip_archive* %3, i32 %4, i32 %5)
  store %struct.mz_zip_reader_extract_iter_state* %call1, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  ret %struct.mz_zip_reader_extract_iter_state* %6
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_zip_reader_extract_iter_read(%struct.mz_zip_reader_extract_iter_state* %pState, i8* %pvBuf, i64 %buf_size) #0 {
entry:
  %pZip.addr.i152 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i153 = alloca i32, align 4
  %pZip.addr.i146 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i147 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i64, align 8
  %pState.addr = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %pvBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %copied_to_caller = alloca i64, align 8
  %pWrite_buf_cur = alloca i8*, align 8
  %in_buf_size = alloca i64, align 8
  %out_buf_size = alloca i64, align 8
  %to_copy = alloca i64, align 8
  store %struct.mz_zip_reader_extract_iter_state* %pState, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  store i8* %pvBuf, i8** %pvBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i64 0, i64* %copied_to_caller, align 8
  %0 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %tobool = icmp ne %struct.mz_zip_reader_extract_iter_state* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %1, i32 0, i32 0
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %tobool1 = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip3 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %3, i32 0, i32 0
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip3, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 15
  %5 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool4 = icmp ne %struct.mz_zip_internal_state_tag* %5, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then

lor.lhs.false5:                                   ; preds = %lor.lhs.false2
  %6 = load i8*, i8** %pvBuf.addr, align 8
  %tobool6 = icmp ne i8* %6, null
  br i1 %tobool6, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false2, %lor.lhs.false, %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false5
  %7 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %flags = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %7, i32 0, i32 1
  %8 = load i32, i32* %flags, align 8
  %and = and i32 %8, 1024
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %if.then10, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %if.end
  %9 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_stat = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %9, i32 0, i32 10
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %10 = load i16, i16* %m_method, align 2
  %tobool9 = icmp ne i16 %10, 0
  br i1 %tobool9, label %if.else38, label %if.then10

if.then10:                                        ; preds = %lor.lhs.false8, %if.end
  %11 = load i64, i64* %buf_size.addr, align 8
  %12 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %comp_remaining = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %12, i32 0, i32 7
  %13 = load i64, i64* %comp_remaining, align 8
  %cmp = icmp ult i64 %11, %13
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then10
  %14 = load i64, i64* %buf_size.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then10
  %15 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %comp_remaining11 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %15, i32 0, i32 7
  %16 = load i64, i64* %comp_remaining11, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %14, %cond.true ], [ %16, %cond.false ]
  store i64 %cond, i64* %copied_to_caller, align 8
  %17 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip12 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %17, i32 0, i32 0
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip12, align 8
  %m_pState13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 15
  %19 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState13, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %19, i32 0, i32 8
  %20 = load i8*, i8** %m_pMem, align 8
  %tobool14 = icmp ne i8* %20, null
  br i1 %tobool14, label %if.then15, label %if.else

if.then15:                                        ; preds = %cond.end
  %21 = load i8*, i8** %pvBuf.addr, align 8
  %22 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pRead_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %22, i32 0, i32 11
  %23 = load i8*, i8** %pRead_buf, align 8
  %24 = load i64, i64* %copied_to_caller, align 8
  %25 = load i8*, i8** %pvBuf.addr, align 8
  %26 = call i64 @llvm.objectsize.i64.p0i8(i8* %25, i1 false)
  %call = call i8* @__memcpy_chk(i8* %21, i8* %23, i64 %24, i64 %26) #10
  %27 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pRead_buf16 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %27, i32 0, i32 11
  %28 = load i8*, i8** %pRead_buf16, align 8
  %29 = load i64, i64* %copied_to_caller, align 8
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %29
  %30 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pRead_buf17 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %30, i32 0, i32 11
  store i8* %add.ptr, i8** %pRead_buf17, align 8
  br label %if.end26

if.else:                                          ; preds = %cond.end
  %31 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip18 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %31, i32 0, i32 0
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip18, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 11
  %33 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %34 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip19 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %34, i32 0, i32 0
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip19, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 14
  %36 = load i8*, i8** %m_pIO_opaque, align 8
  %37 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %cur_file_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %37, i32 0, i32 9
  %38 = load i64, i64* %cur_file_ofs, align 8
  %39 = load i8*, i8** %pvBuf.addr, align 8
  %40 = load i64, i64* %copied_to_caller, align 8
  %call20 = call i64 %33(i8* %36, i64 %38, i8* %39, i64 %40)
  %41 = load i64, i64* %copied_to_caller, align 8
  %cmp21 = icmp ne i64 %call20, %41
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.else
  %42 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip23 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %42, i32 0, i32 0
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip23, align 8
  store %struct.mz_zip_archive* %43, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 20, i32* %err_num.addr.i, align 4
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %44, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then22
  %45 = load i32, i32* %err_num.addr.i, align 4
  %46 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %46, i32 0, i32 5
  store i32 %45, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then22, %if.then.i
  %47 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %47, i32 0, i32 2
  store i32 -1, i32* %status, align 4
  store i64 0, i64* %copied_to_caller, align 8
  br label %if.end25

if.end25:                                         ; preds = %mz_zip_set_error.exit, %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then15
  %48 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %flags27 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %48, i32 0, i32 1
  %49 = load i32, i32* %flags27, align 8
  %and28 = and i32 %49, 1024
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.end34, label %if.then30

if.then30:                                        ; preds = %if.end26
  %50 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_crc32 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %50, i32 0, i32 3
  %51 = load i32, i32* %file_crc32, align 8
  %conv = zext i32 %51 to i64
  %52 = load i8*, i8** %pvBuf.addr, align 8
  %53 = load i64, i64* %copied_to_caller, align 8
  %call31 = call i64 @mz_crc32(i64 %conv, i8* %52, i64 %53)
  %conv32 = trunc i64 %call31 to i32
  %54 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_crc3233 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %54, i32 0, i32 3
  store i32 %conv32, i32* %file_crc3233, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then30, %if.end26
  %55 = load i64, i64* %copied_to_caller, align 8
  %56 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %cur_file_ofs35 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %56, i32 0, i32 9
  %57 = load i64, i64* %cur_file_ofs35, align 8
  %add = add i64 %57, %55
  store i64 %add, i64* %cur_file_ofs35, align 8
  %58 = load i64, i64* %copied_to_caller, align 8
  %59 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %59, i32 0, i32 8
  %60 = load i64, i64* %out_buf_ofs, align 8
  %add36 = add i64 %60, %58
  store i64 %add36, i64* %out_buf_ofs, align 8
  %61 = load i64, i64* %copied_to_caller, align 8
  %62 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %comp_remaining37 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %62, i32 0, i32 7
  %63 = load i64, i64* %comp_remaining37, align 8
  %sub = sub i64 %63, %61
  store i64 %sub, i64* %comp_remaining37, align 8
  br label %if.end145

if.else38:                                        ; preds = %lor.lhs.false8
  br label %do.body

do.body:                                          ; preds = %land.end, %if.else38
  %64 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pWrite_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %64, i32 0, i32 12
  %65 = load i8*, i8** %pWrite_buf, align 8
  %66 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_buf_ofs39 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %66, i32 0, i32 8
  %67 = load i64, i64* %out_buf_ofs39, align 8
  %and40 = and i64 %67, 32767
  %add.ptr41 = getelementptr inbounds i8, i8* %65, i64 %and40
  store i8* %add.ptr41, i8** %pWrite_buf_cur, align 8
  %68 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_buf_ofs42 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %68, i32 0, i32 8
  %69 = load i64, i64* %out_buf_ofs42, align 8
  %and43 = and i64 %69, 32767
  %sub44 = sub i64 32768, %and43
  store i64 %sub44, i64* %out_buf_size, align 8
  %70 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_blk_remain = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %70, i32 0, i32 13
  %71 = load i64, i64* %out_blk_remain, align 8
  %tobool45 = icmp ne i64 %71, 0
  br i1 %tobool45, label %if.end101, label %if.then46

if.then46:                                        ; preds = %do.body
  %72 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_avail = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %72, i32 0, i32 6
  %73 = load i64, i64* %read_buf_avail, align 8
  %tobool47 = icmp ne i64 %73, 0
  br i1 %tobool47, label %if.end85, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then46
  %74 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip48 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %74, i32 0, i32 0
  %75 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip48, align 8
  %m_pState49 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %75, i32 0, i32 15
  %76 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState49, align 8
  %m_pMem50 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %76, i32 0, i32 8
  %77 = load i8*, i8** %m_pMem50, align 8
  %tobool51 = icmp ne i8* %77, null
  br i1 %tobool51, label %if.end85, label %if.then52

if.then52:                                        ; preds = %land.lhs.true
  %78 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_size = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %78, i32 0, i32 4
  %79 = load i64, i64* %read_buf_size, align 8
  %80 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %comp_remaining53 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %80, i32 0, i32 7
  %81 = load i64, i64* %comp_remaining53, align 8
  %cmp54 = icmp ult i64 %79, %81
  br i1 %cmp54, label %cond.true56, label %cond.false58

cond.true56:                                      ; preds = %if.then52
  %82 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_size57 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %82, i32 0, i32 4
  %83 = load i64, i64* %read_buf_size57, align 8
  br label %cond.end60

cond.false58:                                     ; preds = %if.then52
  %84 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %comp_remaining59 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %84, i32 0, i32 7
  %85 = load i64, i64* %comp_remaining59, align 8
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false58, %cond.true56
  %cond61 = phi i64 [ %83, %cond.true56 ], [ %85, %cond.false58 ]
  %86 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_avail62 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %86, i32 0, i32 6
  store i64 %cond61, i64* %read_buf_avail62, align 8
  %87 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip63 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %87, i32 0, i32 0
  %88 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip63, align 8
  %m_pRead64 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %88, i32 0, i32 11
  %89 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead64, align 8
  %90 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip65 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %90, i32 0, i32 0
  %91 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip65, align 8
  %m_pIO_opaque66 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %91, i32 0, i32 14
  %92 = load i8*, i8** %m_pIO_opaque66, align 8
  %93 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %cur_file_ofs67 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %93, i32 0, i32 9
  %94 = load i64, i64* %cur_file_ofs67, align 8
  %95 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pRead_buf68 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %95, i32 0, i32 11
  %96 = load i8*, i8** %pRead_buf68, align 8
  %97 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_avail69 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %97, i32 0, i32 6
  %98 = load i64, i64* %read_buf_avail69, align 8
  %call70 = call i64 %89(i8* %92, i64 %94, i8* %96, i64 %98)
  %99 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_avail71 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %99, i32 0, i32 6
  %100 = load i64, i64* %read_buf_avail71, align 8
  %cmp72 = icmp ne i64 %call70, %100
  br i1 %cmp72, label %if.then74, label %if.end78

if.then74:                                        ; preds = %cond.end60
  %101 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip75 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %101, i32 0, i32 0
  %102 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip75, align 8
  store %struct.mz_zip_archive* %102, %struct.mz_zip_archive** %pZip.addr.i152, align 8
  store i32 20, i32* %err_num.addr.i153, align 4
  %103 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i152, align 8
  %tobool.i154 = icmp ne %struct.mz_zip_archive* %103, null
  br i1 %tobool.i154, label %if.then.i156, label %mz_zip_set_error.exit157

if.then.i156:                                     ; preds = %if.then74
  %104 = load i32, i32* %err_num.addr.i153, align 4
  %105 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i152, align 8
  %m_last_error.i155 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %105, i32 0, i32 5
  store i32 %104, i32* %m_last_error.i155, align 4
  br label %mz_zip_set_error.exit157

mz_zip_set_error.exit157:                         ; preds = %if.then74, %if.then.i156
  %106 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status77 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %106, i32 0, i32 2
  store i32 -1, i32* %status77, align 4
  br label %do.end

if.end78:                                         ; preds = %cond.end60
  %107 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_avail79 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %107, i32 0, i32 6
  %108 = load i64, i64* %read_buf_avail79, align 8
  %109 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %cur_file_ofs80 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %109, i32 0, i32 9
  %110 = load i64, i64* %cur_file_ofs80, align 8
  %add81 = add i64 %110, %108
  store i64 %add81, i64* %cur_file_ofs80, align 8
  %111 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_avail82 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %111, i32 0, i32 6
  %112 = load i64, i64* %read_buf_avail82, align 8
  %113 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %comp_remaining83 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %113, i32 0, i32 7
  %114 = load i64, i64* %comp_remaining83, align 8
  %sub84 = sub i64 %114, %112
  store i64 %sub84, i64* %comp_remaining83, align 8
  %115 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %115, i32 0, i32 5
  store i64 0, i64* %read_buf_ofs, align 8
  br label %if.end85

if.end85:                                         ; preds = %if.end78, %land.lhs.true, %if.then46
  %116 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_avail86 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %116, i32 0, i32 6
  %117 = load i64, i64* %read_buf_avail86, align 8
  store i64 %117, i64* %in_buf_size, align 8
  %118 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %inflator = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %118, i32 0, i32 14
  %119 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pRead_buf87 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %119, i32 0, i32 11
  %120 = load i8*, i8** %pRead_buf87, align 8
  %121 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_ofs88 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %121, i32 0, i32 5
  %122 = load i64, i64* %read_buf_ofs88, align 8
  %add.ptr89 = getelementptr inbounds i8, i8* %120, i64 %122
  %123 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pWrite_buf90 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %123, i32 0, i32 12
  %124 = load i8*, i8** %pWrite_buf90, align 8
  %125 = load i8*, i8** %pWrite_buf_cur, align 8
  %126 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %comp_remaining91 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %126, i32 0, i32 7
  %127 = load i64, i64* %comp_remaining91, align 8
  %tobool92 = icmp ne i64 %127, 0
  %cond93 = select i1 %tobool92, i32 2, i32 0
  %call94 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %inflator, i8* %add.ptr89, i64* %in_buf_size, i8* %124, i8* %125, i64* %out_buf_size, i32 %cond93)
  %128 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status95 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %128, i32 0, i32 2
  store i32 %call94, i32* %status95, align 4
  %129 = load i64, i64* %in_buf_size, align 8
  %130 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_avail96 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %130, i32 0, i32 6
  %131 = load i64, i64* %read_buf_avail96, align 8
  %sub97 = sub i64 %131, %129
  store i64 %sub97, i64* %read_buf_avail96, align 8
  %132 = load i64, i64* %in_buf_size, align 8
  %133 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %read_buf_ofs98 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %133, i32 0, i32 5
  %134 = load i64, i64* %read_buf_ofs98, align 8
  %add99 = add i64 %134, %132
  store i64 %add99, i64* %read_buf_ofs98, align 8
  %135 = load i64, i64* %out_buf_size, align 8
  %136 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_blk_remain100 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %136, i32 0, i32 13
  store i64 %135, i64* %out_blk_remain100, align 8
  br label %if.end101

if.end101:                                        ; preds = %if.end85, %do.body
  %137 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_blk_remain102 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %137, i32 0, i32 13
  %138 = load i64, i64* %out_blk_remain102, align 8
  %tobool103 = icmp ne i64 %138, 0
  br i1 %tobool103, label %if.then104, label %if.end136

if.then104:                                       ; preds = %if.end101
  %139 = load i64, i64* %buf_size.addr, align 8
  %140 = load i64, i64* %copied_to_caller, align 8
  %sub105 = sub i64 %139, %140
  %141 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_blk_remain106 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %141, i32 0, i32 13
  %142 = load i64, i64* %out_blk_remain106, align 8
  %cmp107 = icmp ult i64 %sub105, %142
  br i1 %cmp107, label %cond.true109, label %cond.false111

cond.true109:                                     ; preds = %if.then104
  %143 = load i64, i64* %buf_size.addr, align 8
  %144 = load i64, i64* %copied_to_caller, align 8
  %sub110 = sub i64 %143, %144
  br label %cond.end113

cond.false111:                                    ; preds = %if.then104
  %145 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_blk_remain112 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %145, i32 0, i32 13
  %146 = load i64, i64* %out_blk_remain112, align 8
  br label %cond.end113

cond.end113:                                      ; preds = %cond.false111, %cond.true109
  %cond114 = phi i64 [ %sub110, %cond.true109 ], [ %146, %cond.false111 ]
  store i64 %cond114, i64* %to_copy, align 8
  %147 = load i8*, i8** %pvBuf.addr, align 8
  %148 = load i64, i64* %copied_to_caller, align 8
  %add.ptr115 = getelementptr inbounds i8, i8* %147, i64 %148
  %149 = load i8*, i8** %pWrite_buf_cur, align 8
  %150 = load i64, i64* %to_copy, align 8
  %151 = load i8*, i8** %pvBuf.addr, align 8
  %152 = load i64, i64* %copied_to_caller, align 8
  %add.ptr116 = getelementptr inbounds i8, i8* %151, i64 %152
  %153 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr116, i1 false)
  %call117 = call i8* @__memcpy_chk(i8* %add.ptr115, i8* %149, i64 %150, i64 %153) #10
  %154 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_crc32118 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %154, i32 0, i32 3
  %155 = load i32, i32* %file_crc32118, align 8
  %conv119 = zext i32 %155 to i64
  %156 = load i8*, i8** %pWrite_buf_cur, align 8
  %157 = load i64, i64* %to_copy, align 8
  %call120 = call i64 @mz_crc32(i64 %conv119, i8* %156, i64 %157)
  %conv121 = trunc i64 %call120 to i32
  %158 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_crc32122 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %158, i32 0, i32 3
  store i32 %conv121, i32* %file_crc32122, align 8
  %159 = load i64, i64* %to_copy, align 8
  %160 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_blk_remain123 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %160, i32 0, i32 13
  %161 = load i64, i64* %out_blk_remain123, align 8
  %sub124 = sub i64 %161, %159
  store i64 %sub124, i64* %out_blk_remain123, align 8
  %162 = load i64, i64* %to_copy, align 8
  %163 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_buf_ofs125 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %163, i32 0, i32 8
  %164 = load i64, i64* %out_buf_ofs125, align 8
  %add126 = add i64 %164, %162
  store i64 %add126, i64* %out_buf_ofs125, align 8
  %165 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_stat127 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %165, i32 0, i32 10
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat127, i32 0, i32 9
  %166 = load i64, i64* %m_uncomp_size, align 8
  %cmp128 = icmp ugt i64 %add126, %166
  br i1 %cmp128, label %if.then130, label %if.end134

if.then130:                                       ; preds = %cond.end113
  %167 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip131 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %167, i32 0, i32 0
  %168 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip131, align 8
  store %struct.mz_zip_archive* %168, %struct.mz_zip_archive** %pZip.addr.i146, align 8
  store i32 11, i32* %err_num.addr.i147, align 4
  %169 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i146, align 8
  %tobool.i148 = icmp ne %struct.mz_zip_archive* %169, null
  br i1 %tobool.i148, label %if.then.i150, label %mz_zip_set_error.exit151

if.then.i150:                                     ; preds = %if.then130
  %170 = load i32, i32* %err_num.addr.i147, align 4
  %171 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i146, align 8
  %m_last_error.i149 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %171, i32 0, i32 5
  store i32 %170, i32* %m_last_error.i149, align 4
  br label %mz_zip_set_error.exit151

mz_zip_set_error.exit151:                         ; preds = %if.then130, %if.then.i150
  %172 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status133 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %172, i32 0, i32 2
  store i32 -1, i32* %status133, align 4
  br label %do.end

if.end134:                                        ; preds = %cond.end113
  %173 = load i64, i64* %to_copy, align 8
  %174 = load i64, i64* %copied_to_caller, align 8
  %add135 = add i64 %174, %173
  store i64 %add135, i64* %copied_to_caller, align 8
  br label %if.end136

if.end136:                                        ; preds = %if.end134, %if.end101
  br label %do.cond

do.cond:                                          ; preds = %if.end136
  %175 = load i64, i64* %copied_to_caller, align 8
  %176 = load i64, i64* %buf_size.addr, align 8
  %cmp137 = icmp ult i64 %175, %176
  br i1 %cmp137, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %177 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status139 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %177, i32 0, i32 2
  %178 = load i32, i32* %status139, align 4
  %cmp140 = icmp eq i32 %178, 1
  br i1 %cmp140, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %179 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status142 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %179, i32 0, i32 2
  %180 = load i32, i32* %status142, align 4
  %cmp143 = icmp eq i32 %180, 2
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %181 = phi i1 [ true, %land.rhs ], [ %cmp143, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %do.cond
  %182 = phi i1 [ false, %do.cond ], [ %181, %lor.end ]
  br i1 %182, label %do.body, label %do.end

do.end:                                           ; preds = %land.end, %mz_zip_set_error.exit151, %mz_zip_set_error.exit157
  br label %if.end145

if.end145:                                        ; preds = %do.end, %if.end34
  %183 = load i64, i64* %copied_to_caller, align 8
  store i64 %183, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end145, %if.then
  %184 = load i64, i64* %retval, align 8
  ret i64 %184
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_iter_free(%struct.mz_zip_reader_extract_iter_state* %pState) #0 {
entry:
  %pZip.addr.i42 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i43 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pState.addr = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %status = alloca i32, align 4
  store %struct.mz_zip_reader_extract_iter_state* %pState, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %0 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %tobool = icmp ne %struct.mz_zip_reader_extract_iter_state* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %1, i32 0, i32 0
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %tobool1 = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip3 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %3, i32 0, i32 0
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip3, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 15
  %5 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool4 = icmp ne %struct.mz_zip_internal_state_tag* %5, null
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %6 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status5 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %6, i32 0, i32 2
  %7 = load i32, i32* %status5, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %flags = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %8, i32 0, i32 1
  %9 = load i32, i32* %flags, align 8
  %and = and i32 %9, 1024
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %if.end20, label %if.then7

if.then7:                                         ; preds = %land.lhs.true
  %10 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %out_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %10, i32 0, i32 8
  %11 = load i64, i64* %out_buf_ofs, align 8
  %12 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_stat = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %12, i32 0, i32 10
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %13 = load i64, i64* %m_uncomp_size, align 8
  %cmp8 = icmp ne i64 %11, %13
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then7
  %14 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip10 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %14, i32 0, i32 0
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip10, align 8
  store %struct.mz_zip_archive* %15, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 13, i32* %err_num.addr.i, align 4
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %16, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then9
  %17 = load i32, i32* %err_num.addr.i, align 4
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 5
  store i32 %17, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then9, %if.then.i
  %19 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status11 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %19, i32 0, i32 2
  store i32 -1, i32* %status11, align 4
  br label %if.end19

if.else:                                          ; preds = %if.then7
  %20 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_crc32 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %20, i32 0, i32 3
  %21 = load i32, i32* %file_crc32, align 8
  %22 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %file_stat12 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %22, i32 0, i32 10
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat12, i32 0, i32 7
  %23 = load i32, i32* %m_crc32, align 8
  %cmp13 = icmp ne i32 %21, %23
  br i1 %cmp13, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.else
  %24 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip15 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %24, i32 0, i32 0
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip15, align 8
  store %struct.mz_zip_archive* %25, %struct.mz_zip_archive** %pZip.addr.i42, align 8
  store i32 11, i32* %err_num.addr.i43, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i42, align 8
  %tobool.i44 = icmp ne %struct.mz_zip_archive* %26, null
  br i1 %tobool.i44, label %if.then.i46, label %mz_zip_set_error.exit47

if.then.i46:                                      ; preds = %if.then14
  %27 = load i32, i32* %err_num.addr.i43, align 4
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i42, align 8
  %m_last_error.i45 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 5
  store i32 %27, i32* %m_last_error.i45, align 4
  br label %mz_zip_set_error.exit47

mz_zip_set_error.exit47:                          ; preds = %if.then14, %if.then.i46
  %29 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status17 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %29, i32 0, i32 2
  store i32 -1, i32* %status17, align 4
  br label %if.end18

if.end18:                                         ; preds = %mz_zip_set_error.exit47, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %mz_zip_set_error.exit
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %land.lhs.true, %if.end
  %30 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip21 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %30, i32 0, i32 0
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip21, align 8
  %m_pState22 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 15
  %32 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState22, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %32, i32 0, i32 8
  %33 = load i8*, i8** %m_pMem, align 8
  %tobool23 = icmp ne i8* %33, null
  br i1 %tobool23, label %if.end27, label %if.then24

if.then24:                                        ; preds = %if.end20
  %34 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip25 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %34, i32 0, i32 0
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip25, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 8
  %36 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %37 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip26 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %37, i32 0, i32 0
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip26, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 10
  %39 = load i8*, i8** %m_pAlloc_opaque, align 8
  %40 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pRead_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %40, i32 0, i32 11
  %41 = load i8*, i8** %pRead_buf, align 8
  call void %36(i8* %39, i8* %41)
  br label %if.end27

if.end27:                                         ; preds = %if.then24, %if.end20
  %42 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pWrite_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %42, i32 0, i32 12
  %43 = load i8*, i8** %pWrite_buf, align 8
  %tobool28 = icmp ne i8* %43, null
  br i1 %tobool28, label %if.then29, label %if.end35

if.then29:                                        ; preds = %if.end27
  %44 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip30 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %44, i32 0, i32 0
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip30, align 8
  %m_pFree31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %45, i32 0, i32 8
  %46 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree31, align 8
  %47 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip32 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %47, i32 0, i32 0
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip32, align 8
  %m_pAlloc_opaque33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %48, i32 0, i32 10
  %49 = load i8*, i8** %m_pAlloc_opaque33, align 8
  %50 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pWrite_buf34 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %50, i32 0, i32 12
  %51 = load i8*, i8** %pWrite_buf34, align 8
  call void %46(i8* %49, i8* %51)
  br label %if.end35

if.end35:                                         ; preds = %if.then29, %if.end27
  %52 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %status36 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %52, i32 0, i32 2
  %53 = load i32, i32* %status36, align 4
  store i32 %53, i32* %status, align 4
  %54 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip37 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %54, i32 0, i32 0
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip37, align 8
  %m_pFree38 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %55, i32 0, i32 8
  %56 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree38, align 8
  %57 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %pZip39 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %57, i32 0, i32 0
  %58 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip39, align 8
  %m_pAlloc_opaque40 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %58, i32 0, i32 10
  %59 = load i8*, i8** %m_pAlloc_opaque40, align 8
  %60 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8
  %61 = bitcast %struct.mz_zip_reader_extract_iter_state* %60 to i8*
  call void %56(i8* %59, i8* %61)
  %62 = load i32, i32* %status, align 4
  %cmp41 = icmp eq i32 %62, 0
  %conv = zext i1 %cmp41 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end35, %if.then
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_file(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pDst_filename, i32 %flags) #0 {
entry:
  %pZip.addr.i30 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i31 = alloca i32, align 4
  %pZip.addr.i24 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i25 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pDst_filename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pFile = alloca %struct.__sFILE*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pDst_filename, i8** %pDst_filename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  %call = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %0, i32 %1, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %2 = load i32, i32* %m_is_directory, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %m_is_supported = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 16
  %3 = load i32, i32* %m_is_supported, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %if.end5, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %4, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 6, i32* %err_num.addr.i, align 4
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %5, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then3
  %6 = load i32, i32* %err_num.addr.i, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 5
  store i32 %6, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then3, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %lor.lhs.false
  %8 = load i8*, i8** %pDst_filename.addr, align 8
  %call6 = call %struct.__sFILE* @"\01_fopen"(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0))
  store %struct.__sFILE* %call6, %struct.__sFILE** %pFile, align 8
  %9 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %tobool7 = icmp ne %struct.__sFILE* %9, null
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end5
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %10, %struct.mz_zip_archive** %pZip.addr.i24, align 8
  store i32 17, i32* %err_num.addr.i25, align 4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i24, align 8
  %tobool.i26 = icmp ne %struct.mz_zip_archive* %11, null
  br i1 %tobool.i26, label %if.then.i28, label %mz_zip_set_error.exit29

if.then.i28:                                      ; preds = %if.then8
  %12 = load i32, i32* %err_num.addr.i25, align 4
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i24, align 8
  %m_last_error.i27 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 5
  store i32 %12, i32* %m_last_error.i27, align 4
  br label %mz_zip_set_error.exit29

mz_zip_set_error.exit29:                          ; preds = %if.then8, %if.then.i28
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end5
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %15 = load i32, i32* %file_index.addr, align 4
  %16 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %17 = bitcast %struct.__sFILE* %16 to i8*
  %18 = load i32, i32* %flags.addr, align 4
  %call11 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %14, i32 %15, i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_callback, i8* %17, i32 %18)
  store i32 %call11, i32* %status, align 4
  %19 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %call12 = call i32 @fclose(%struct.__sFILE* %19)
  %cmp = icmp eq i32 %call12, -1
  br i1 %cmp, label %if.then13, label %if.end18

if.then13:                                        ; preds = %if.end10
  %20 = load i32, i32* %status, align 4
  %tobool14 = icmp ne i32 %20, 0
  br i1 %tobool14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.then13
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %21, %struct.mz_zip_archive** %pZip.addr.i30, align 8
  store i32 21, i32* %err_num.addr.i31, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i30, align 8
  %tobool.i32 = icmp ne %struct.mz_zip_archive* %22, null
  br i1 %tobool.i32, label %if.then.i34, label %mz_zip_set_error.exit35

if.then.i34:                                      ; preds = %if.then15
  %23 = load i32, i32* %err_num.addr.i31, align 4
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i30, align 8
  %m_last_error.i33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %24, i32 0, i32 5
  store i32 %23, i32* %m_last_error.i33, align 4
  br label %mz_zip_set_error.exit35

mz_zip_set_error.exit35:                          ; preds = %if.then15, %if.then.i34
  br label %if.end17

if.end17:                                         ; preds = %mz_zip_set_error.exit35, %if.then13
  store i32 0, i32* %status, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end10
  %25 = load i32, i32* %status, align 4
  %tobool19 = icmp ne i32 %25, 0
  br i1 %tobool19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end18
  %26 = load i8*, i8** %pDst_filename.addr, align 8
  %m_time = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 6
  %27 = load i64, i64* %m_time, align 8
  %m_time21 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 6
  %28 = load i64, i64* %m_time21, align 8
  %call22 = call i32 @mz_zip_set_file_times(i8* %26, i64 %27, i64 %28)
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end18
  %29 = load i32, i32* %status, align 4
  store i32 %29, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end23, %mz_zip_set_error.exit29, %mz_zip_set_error.exit, %if.then
  %30 = load i32, i32* %retval, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mz_zip_file_write_callback(i8* %pOpaque, i64 %ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pOpaque.addr = alloca i8*, align 8
  %ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %ofs, i64* %ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i64, i64* %ofs.addr, align 8
  %1 = load i8*, i8** %pBuf.addr, align 8
  %2 = load i64, i64* %n.addr, align 8
  %3 = load i8*, i8** %pOpaque.addr, align 8
  %4 = bitcast i8* %3 to %struct.__sFILE*
  %call = call i64 @"\01_fwrite"(i8* %1, i64 1, i64 %2, %struct.__sFILE* %4)
  ret i64 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_set_file_times(i8* %pFilename, i64 %access_time, i64 %modified_time) #0 {
entry:
  %pFilename.addr = alloca i8*, align 8
  %access_time.addr = alloca i64, align 8
  %modified_time.addr = alloca i64, align 8
  %t = alloca %struct.utimbuf, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64 %access_time, i64* %access_time.addr, align 8
  store i64 %modified_time, i64* %modified_time.addr, align 8
  %0 = bitcast %struct.utimbuf* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 8, i1 false)
  %1 = load i64, i64* %access_time.addr, align 8
  %actime = getelementptr inbounds %struct.utimbuf, %struct.utimbuf* %t, i32 0, i32 0
  store i64 %1, i64* %actime, align 8
  %2 = load i64, i64* %modified_time.addr, align 8
  %modtime = getelementptr inbounds %struct.utimbuf, %struct.utimbuf* %t, i32 0, i32 1
  store i64 %2, i64* %modtime, align 8
  %3 = load i8*, i8** %pFilename.addr, align 8
  %call = call i32 @utime(i8* %3, %struct.utimbuf* %t)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_file(%struct.mz_zip_archive* %pZip, i8* %pArchive_filename, i8* %pDst_filename, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_filename.addr = alloca i8*, align 8
  %pDst_filename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pArchive_filename, i8** %pArchive_filename.addr, align 8
  store i8* %pDst_filename, i8** %pDst_filename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pArchive_filename.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %0, i8* %1, i8* null, i32 %2, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %4 = load i32, i32* %file_index, align 4
  %5 = load i8*, i8** %pDst_filename.addr, align 8
  %6 = load i32, i32* %flags.addr, align 4
  %call1 = call i32 @mz_zip_reader_extract_to_file(%struct.mz_zip_archive* %3, i32 %4, i8* %5, i32 %6)
  store i32 %call1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_cfile(%struct.mz_zip_archive* %pZip, i32 %file_index, %struct.__sFILE* %pFile, i32 %flags) #0 {
entry:
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pFile.addr = alloca %struct.__sFILE*, align 8
  %flags.addr = alloca i32, align 4
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store %struct.__sFILE* %pFile, %struct.__sFILE** %pFile.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  %call = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %0, i32 %1, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %2 = load i32, i32* %m_is_directory, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %m_is_supported = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 16
  %3 = load i32, i32* %m_is_supported, align 4
  %tobool2 = icmp ne i32 %3, 0
  br i1 %tobool2, label %if.end5, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %4, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 6, i32* %err_num.addr.i, align 4
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %5, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then3
  %6 = load i32, i32* %err_num.addr.i, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 5
  store i32 %6, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then3, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %lor.lhs.false
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %9 = load i32, i32* %file_index.addr, align 4
  %10 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8
  %11 = bitcast %struct.__sFILE* %10 to i8*
  %12 = load i32, i32* %flags.addr, align 4
  %call6 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %8, i32 %9, i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_callback, i8* %11, i32 %12)
  store i32 %call6, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end5, %mz_zip_set_error.exit, %if.then
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_cfile(%struct.mz_zip_archive* %pZip, i8* %pArchive_filename, %struct.__sFILE* %pFile, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_filename.addr = alloca i8*, align 8
  %pFile.addr = alloca %struct.__sFILE*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pArchive_filename, i8** %pArchive_filename.addr, align 8
  store %struct.__sFILE* %pFile, %struct.__sFILE** %pFile.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pArchive_filename.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %0, i8* %1, i8* null, i32 %2, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %4 = load i32, i32* %file_index, align 4
  %5 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8
  %6 = load i32, i32* %flags.addr, align 4
  %call1 = call i32 @mz_zip_reader_extract_to_cfile(%struct.mz_zip_archive* %3, i32 %4, %struct.__sFILE* %5, i32 %6)
  store i32 %call1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_validate_file(%struct.mz_zip_archive* %pZip, i32 %file_index, i32 %flags) #0 {
entry:
  %pZip.addr.i433 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i434 = alloca i32, align 4
  %retval.i425 = alloca i32, align 4
  %pZip.addr.i426 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i427 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i = alloca i64, align 8
  %growing.addr.i = alloca i32, align 4
  %pZip.addr.i418 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i419 = alloca i32, align 4
  %pZip.addr.i411 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i412 = alloca i32, align 4
  %pZip.addr.i404 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i405 = alloca i32, align 4
  %pZip.addr.i397 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i398 = alloca i32, align 4
  %pZip.addr.i390 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i391 = alloca i32, align 4
  %pZip.addr.i383 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i384 = alloca i32, align 4
  %pZip.addr.i376 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i377 = alloca i32, align 4
  %pZip.addr.i369 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i370 = alloca i32, align 4
  %pZip.addr.i362 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i363 = alloca i32, align 4
  %pZip.addr.i355 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i356 = alloca i32, align 4
  %pZip.addr.i348 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i349 = alloca i32, align 4
  %pZip.addr.i341 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i342 = alloca i32, align 4
  %pZip.addr.i334 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i335 = alloca i32, align 4
  %pZip.addr.i327 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i328 = alloca i32, align 4
  %pZip.addr.i320 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i321 = alloca i32, align 4
  %pZip.addr.i314 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i315 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i307 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i308 = alloca i32, align 4
  %pZip.addr.i300 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i301 = alloca i32, align 4
  %retval.i = alloca i8*, align 8
  %pZip.addr.i296 = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr.i = alloca i32, align 4
  %pZip.addr.i290 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i291 = alloca i32, align 4
  %pZip.addr.i287 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i288 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %element_size.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pCentral_dir_header = alloca i8*, align 8
  %found_zip64_ext_data_in_cdir = alloca i32, align 4
  %found_zip64_ext_data_in_ldir = alloca i32, align 4
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %local_header_ofs = alloca i64, align 8
  %local_header_filename_len = alloca i32, align 4
  %local_header_extra_len = alloca i32, align 4
  %local_header_crc32 = alloca i32, align 4
  %local_header_comp_size = alloca i64, align 8
  %local_header_uncomp_size = alloca i64, align 8
  %uncomp_crc32 = alloca i32, align 4
  %has_data_descriptor = alloca i32, align 4
  %local_header_bit_flags = alloca i32, align 4
  %file_data_array = alloca %struct.mz_zip_array, align 8
  %extra_size_remaining = alloca i32, align 4
  %pExtra_data = alloca i8*, align 8
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  %field_total_size = alloca i32, align 4
  %pSrc_field_data = alloca i8*, align 8
  %descriptor_buf = alloca [32 x i8], align 16
  %has_id = alloca i32, align 4
  %pSrc = alloca i8*, align 8
  %file_crc32 = alloca i32, align 4
  %comp_size = alloca i64, align 8
  %uncomp_size = alloca i64, align 8
  %num_descriptor_uint32s = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store i32 0, i32* %found_zip64_ext_data_in_cdir, align 4
  store i32 0, i32* %found_zip64_ext_data_in_ldir, align 4
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pLocal_header, align 8
  store i64 0, i64* %local_header_ofs, align 8
  store i32 0, i32* %uncomp_crc32, align 4
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i32 1, i32* %element_size.addr.i, align 4
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %2 = bitcast %struct.mz_zip_array* %1 to i8*
  %3 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %4 = bitcast %struct.mz_zip_array* %3 to i8*
  %5 = call i64 @llvm.objectsize.i64.p0i8(i8* %4, i1 false) #10
  %call.i = call i8* @__memset_chk(i8* %2, i32 0, i64 32, i64 %5) #10
  %6 = load i32, i32* %element_size.addr.i, align 4
  %7 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_element_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %7, i32 0, i32 3
  store i32 %6, i32* %m_element_size.i, align 8
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %8, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 15
  %10 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %10, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 7
  %12 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %12, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 8
  %14 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %tobool5 = icmp ne void (i8*, i8*)* %14, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 11
  %16 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool7 = icmp ne i64 (i8*, i64, i8*, i64)* %16, null
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %17, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %18, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %19 = load i32, i32* %err_num.addr.i, align 4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 5
  store i32 %19, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false6
  %21 = load i32, i32* %file_index.addr, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 2
  %23 = load i32, i32* %m_total_files, align 8
  %cmp = icmp ugt i32 %21, %23
  br i1 %cmp, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %24, %struct.mz_zip_archive** %pZip.addr.i290, align 8
  store i32 24, i32* %err_num.addr.i291, align 4
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i290, align 8
  %tobool.i292 = icmp ne %struct.mz_zip_archive* %25, null
  br i1 %tobool.i292, label %if.then.i294, label %mz_zip_set_error.exit295

if.then.i294:                                     ; preds = %if.then8
  %26 = load i32, i32* %err_num.addr.i291, align 4
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i290, align 8
  %m_last_error.i293 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %27, i32 0, i32 5
  store i32 %26, i32* %m_last_error.i293, align 4
  br label %mz_zip_set_error.exit295

mz_zip_set_error.exit295:                         ; preds = %if.then8, %if.then.i294
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState11 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 15
  %29 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState11, align 8
  store %struct.mz_zip_internal_state_tag* %29, %struct.mz_zip_internal_state_tag** %pState, align 8
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %31 = load i32, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive* %30, %struct.mz_zip_archive** %pZip.addr.i296, align 8
  store i32 %31, i32* %file_index.addr.i, align 4
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i296, align 8
  %tobool.i297 = icmp ne %struct.mz_zip_archive* %32, null
  br i1 %tobool.i297, label %lor.lhs.false.i, label %if.then.i298

lor.lhs.false.i:                                  ; preds = %if.end10
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i296, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 15
  %34 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %34, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i298

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %35 = load i32, i32* %file_index.addr.i, align 4
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i296, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 2
  %37 = load i32, i32* %m_total_files.i, align 8
  %cmp.i = icmp uge i32 %35, %37
  br i1 %cmp.i, label %if.then.i298, label %if.end.i

if.then.i298:                                     ; preds = %lor.lhs.false2.i, %lor.lhs.false.i, %if.end10
  store i8* null, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false2.i
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i296, align 8
  %m_pState3.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 15
  %39 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %39, i32 0, i32 0
  %m_p.i299 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %40 = load i8*, i8** %m_p.i299, align 8
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i296, align 8
  %m_pState4.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %41, i32 0, i32 15
  %42 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %42, i32 0, i32 1
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %43 = load i8*, i8** %m_p5.i, align 8
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %45 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %44, i64 %idxprom.i
  %46 = load i32, i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %46 to i64
  %arrayidx7.i = getelementptr inbounds i8, i8* %40, i64 %idxprom6.i
  store i8* %arrayidx7.i, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

mz_zip_get_cdh.exit:                              ; preds = %if.then.i298, %if.end.i
  %47 = load i8*, i8** %retval.i, align 8
  store i8* %47, i8** %pCentral_dir_header, align 8
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %49 = load i32, i32* %file_index.addr, align 4
  %50 = load i8*, i8** %pCentral_dir_header, align 8
  %call13 = call i32 @mz_zip_file_stat_internal(%struct.mz_zip_archive* %48, i32 %49, i8* %50, %struct.mz_zip_archive_file_stat* %file_stat, i32* %found_zip64_ext_data_in_cdir)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %mz_zip_get_cdh.exit
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %mz_zip_get_cdh.exit
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %51 = load i32, i32* %m_is_directory, align 4
  %tobool17 = icmp ne i32 %51, 0
  br i1 %tobool17, label %if.then20, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %if.end16
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %52 = load i64, i64* %m_uncomp_size, align 8
  %tobool19 = icmp ne i64 %52, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %lor.lhs.false18, %if.end16
  store i32 1, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %lor.lhs.false18
  %m_is_encrypted = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 15
  %53 = load i32, i32* %m_is_encrypted, align 8
  %tobool22 = icmp ne i32 %53, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end21
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %54, %struct.mz_zip_archive** %pZip.addr.i307, align 8
  store i32 5, i32* %err_num.addr.i308, align 4
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i307, align 8
  %tobool.i309 = icmp ne %struct.mz_zip_archive* %55, null
  br i1 %tobool.i309, label %if.then.i311, label %mz_zip_set_error.exit313

if.then.i311:                                     ; preds = %if.then23
  %56 = load i32, i32* %err_num.addr.i308, align 4
  %57 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i307, align 8
  %m_last_error.i310 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %57, i32 0, i32 5
  store i32 %56, i32* %m_last_error.i310, align 4
  br label %mz_zip_set_error.exit313

mz_zip_set_error.exit313:                         ; preds = %if.then23, %if.then.i311
  store i32 0, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %if.end21
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %58 = load i16, i16* %m_method, align 2
  %conv = zext i16 %58 to i32
  %cmp26 = icmp ne i32 %conv, 0
  br i1 %cmp26, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %if.end25
  %m_method28 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %59 = load i16, i16* %m_method28, align 2
  %conv29 = zext i16 %59 to i32
  %cmp30 = icmp ne i32 %conv29, 8
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %land.lhs.true
  %60 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %60, %struct.mz_zip_archive** %pZip.addr.i320, align 8
  store i32 4, i32* %err_num.addr.i321, align 4
  %61 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i320, align 8
  %tobool.i322 = icmp ne %struct.mz_zip_archive* %61, null
  br i1 %tobool.i322, label %if.then.i324, label %mz_zip_set_error.exit326

if.then.i324:                                     ; preds = %if.then32
  %62 = load i32, i32* %err_num.addr.i321, align 4
  %63 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i320, align 8
  %m_last_error.i323 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %63, i32 0, i32 5
  store i32 %62, i32* %m_last_error.i323, align 4
  br label %mz_zip_set_error.exit326

mz_zip_set_error.exit326:                         ; preds = %if.then32, %if.then.i324
  store i32 0, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %land.lhs.true, %if.end25
  %m_is_supported = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 16
  %64 = load i32, i32* %m_is_supported, align 4
  %tobool35 = icmp ne i32 %64, 0
  br i1 %tobool35, label %if.end38, label %if.then36

if.then36:                                        ; preds = %if.end34
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %65, %struct.mz_zip_archive** %pZip.addr.i327, align 8
  store i32 6, i32* %err_num.addr.i328, align 4
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i327, align 8
  %tobool.i329 = icmp ne %struct.mz_zip_archive* %66, null
  br i1 %tobool.i329, label %if.then.i331, label %mz_zip_set_error.exit333

if.then.i331:                                     ; preds = %if.then36
  %67 = load i32, i32* %err_num.addr.i328, align 4
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i327, align 8
  %m_last_error.i330 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %68, i32 0, i32 5
  store i32 %67, i32* %m_last_error.i330, align 4
  br label %mz_zip_set_error.exit333

mz_zip_set_error.exit333:                         ; preds = %if.then36, %if.then.i331
  store i32 0, i32* %retval, align 4
  br label %return

if.end38:                                         ; preds = %if.end34
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 12
  %69 = load i64, i64* %m_local_header_ofs, align 8
  store i64 %69, i64* %local_header_ofs, align 8
  %70 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead39 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %70, i32 0, i32 11
  %71 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead39, align 8
  %72 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %72, i32 0, i32 14
  %73 = load i8*, i8** %m_pIO_opaque, align 8
  %74 = load i64, i64* %local_header_ofs, align 8
  %75 = load i8*, i8** %pLocal_header, align 8
  %call40 = call i64 %71(i8* %73, i64 %74, i8* %75, i64 30)
  %cmp41 = icmp ne i64 %call40, 30
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %if.end38
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %76, %struct.mz_zip_archive** %pZip.addr.i355, align 8
  store i32 20, i32* %err_num.addr.i356, align 4
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i355, align 8
  %tobool.i357 = icmp ne %struct.mz_zip_archive* %77, null
  br i1 %tobool.i357, label %if.then.i359, label %mz_zip_set_error.exit361

if.then.i359:                                     ; preds = %if.then43
  %78 = load i32, i32* %err_num.addr.i356, align 4
  %79 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i355, align 8
  %m_last_error.i358 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %79, i32 0, i32 5
  store i32 %78, i32* %m_last_error.i358, align 4
  br label %mz_zip_set_error.exit361

mz_zip_set_error.exit361:                         ; preds = %if.then43, %if.then.i359
  store i32 0, i32* %retval, align 4
  br label %return

if.end45:                                         ; preds = %if.end38
  %80 = load i8*, i8** %pLocal_header, align 8
  %81 = bitcast i8* %80 to i32*
  %82 = load i32, i32* %81, align 4
  %cmp46 = icmp ne i32 %82, 67324752
  br i1 %cmp46, label %if.then48, label %if.end50

if.then48:                                        ; preds = %if.end45
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %83, %struct.mz_zip_archive** %pZip.addr.i390, align 8
  store i32 9, i32* %err_num.addr.i391, align 4
  %84 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i390, align 8
  %tobool.i392 = icmp ne %struct.mz_zip_archive* %84, null
  br i1 %tobool.i392, label %if.then.i394, label %mz_zip_set_error.exit396

if.then.i394:                                     ; preds = %if.then48
  %85 = load i32, i32* %err_num.addr.i391, align 4
  %86 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i390, align 8
  %m_last_error.i393 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %86, i32 0, i32 5
  store i32 %85, i32* %m_last_error.i393, align 4
  br label %mz_zip_set_error.exit396

mz_zip_set_error.exit396:                         ; preds = %if.then48, %if.then.i394
  store i32 0, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %if.end45
  %87 = load i8*, i8** %pLocal_header, align 8
  %add.ptr = getelementptr inbounds i8, i8* %87, i64 26
  %88 = bitcast i8* %add.ptr to i16*
  %89 = load i16, i16* %88, align 2
  %conv51 = zext i16 %89 to i32
  store i32 %conv51, i32* %local_header_filename_len, align 4
  %90 = load i8*, i8** %pLocal_header, align 8
  %add.ptr52 = getelementptr inbounds i8, i8* %90, i64 28
  %91 = bitcast i8* %add.ptr52 to i16*
  %92 = load i16, i16* %91, align 2
  %conv53 = zext i16 %92 to i32
  store i32 %conv53, i32* %local_header_extra_len, align 4
  %93 = load i8*, i8** %pLocal_header, align 8
  %add.ptr54 = getelementptr inbounds i8, i8* %93, i64 18
  %94 = bitcast i8* %add.ptr54 to i32*
  %95 = load i32, i32* %94, align 4
  %conv55 = zext i32 %95 to i64
  store i64 %conv55, i64* %local_header_comp_size, align 8
  %96 = load i8*, i8** %pLocal_header, align 8
  %add.ptr56 = getelementptr inbounds i8, i8* %96, i64 22
  %97 = bitcast i8* %add.ptr56 to i32*
  %98 = load i32, i32* %97, align 4
  %conv57 = zext i32 %98 to i64
  store i64 %conv57, i64* %local_header_uncomp_size, align 8
  %99 = load i8*, i8** %pLocal_header, align 8
  %add.ptr58 = getelementptr inbounds i8, i8* %99, i64 14
  %100 = bitcast i8* %add.ptr58 to i32*
  %101 = load i32, i32* %100, align 4
  store i32 %101, i32* %local_header_crc32, align 4
  %102 = load i8*, i8** %pLocal_header, align 8
  %add.ptr59 = getelementptr inbounds i8, i8* %102, i64 6
  %103 = bitcast i8* %add.ptr59 to i16*
  %104 = load i16, i16* %103, align 2
  %conv60 = zext i16 %104 to i32
  store i32 %conv60, i32* %local_header_bit_flags, align 4
  %105 = load i32, i32* %local_header_bit_flags, align 4
  %and = and i32 %105, 8
  %cmp61 = icmp ne i32 %and, 0
  %conv62 = zext i1 %cmp61 to i32
  store i32 %conv62, i32* %has_data_descriptor, align 4
  %106 = load i32, i32* %local_header_filename_len, align 4
  %conv63 = zext i32 %106 to i64
  %m_filename = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 17
  %arraydecay64 = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename, i32 0, i32 0
  %call65 = call i64 @strlen(i8* %arraydecay64)
  %cmp66 = icmp ne i64 %conv63, %call65
  br i1 %cmp66, label %if.then68, label %if.end70

if.then68:                                        ; preds = %if.end50
  %107 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %107, %struct.mz_zip_archive** %pZip.addr.i411, align 8
  store i32 9, i32* %err_num.addr.i412, align 4
  %108 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i411, align 8
  %tobool.i413 = icmp ne %struct.mz_zip_archive* %108, null
  br i1 %tobool.i413, label %if.then.i415, label %mz_zip_set_error.exit417

if.then.i415:                                     ; preds = %if.then68
  %109 = load i32, i32* %err_num.addr.i412, align 4
  %110 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i411, align 8
  %m_last_error.i414 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %110, i32 0, i32 5
  store i32 %109, i32* %m_last_error.i414, align 4
  br label %mz_zip_set_error.exit417

mz_zip_set_error.exit417:                         ; preds = %if.then68, %if.then.i415
  store i32 0, i32* %retval, align 4
  br label %return

if.end70:                                         ; preds = %if.end50
  %111 = load i64, i64* %local_header_ofs, align 8
  %add = add i64 %111, 30
  %112 = load i32, i32* %local_header_filename_len, align 4
  %conv71 = zext i32 %112 to i64
  %add72 = add i64 %add, %conv71
  %113 = load i32, i32* %local_header_extra_len, align 4
  %conv73 = zext i32 %113 to i64
  %add74 = add i64 %add72, %conv73
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %114 = load i64, i64* %m_comp_size, align 8
  %add75 = add i64 %add74, %114
  %115 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %115, i32 0, i32 0
  %116 = load i64, i64* %m_archive_size, align 8
  %cmp76 = icmp ugt i64 %add75, %116
  br i1 %cmp76, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.end70
  %117 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %117, %struct.mz_zip_archive** %pZip.addr.i433, align 8
  store i32 9, i32* %err_num.addr.i434, align 4
  %118 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i433, align 8
  %tobool.i435 = icmp ne %struct.mz_zip_archive* %118, null
  br i1 %tobool.i435, label %if.then.i437, label %mz_zip_set_error.exit439

if.then.i437:                                     ; preds = %if.then78
  %119 = load i32, i32* %err_num.addr.i434, align 4
  %120 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i433, align 8
  %m_last_error.i436 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %120, i32 0, i32 5
  store i32 %119, i32* %m_last_error.i436, align 4
  br label %mz_zip_set_error.exit439

mz_zip_set_error.exit439:                         ; preds = %if.then78, %if.then.i437
  store i32 0, i32* %retval, align 4
  br label %return

if.end80:                                         ; preds = %if.end70
  %121 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %122 = load i32, i32* %local_header_filename_len, align 4
  %123 = load i32, i32* %local_header_extra_len, align 4
  %cmp81 = icmp ugt i32 %122, %123
  br i1 %cmp81, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end80
  %124 = load i32, i32* %local_header_filename_len, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end80
  %125 = load i32, i32* %local_header_extra_len, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %124, %cond.true ], [ %125, %cond.false ]
  %conv83 = zext i32 %cond to i64
  store %struct.mz_zip_archive* %121, %struct.mz_zip_archive** %pZip.addr.i426, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i427, align 8
  store i64 %conv83, i64* %new_size.addr.i, align 8
  store i32 0, i32* %growing.addr.i, align 4
  %126 = load i64, i64* %new_size.addr.i, align 8
  %127 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i427, align 8
  %m_capacity.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %127, i32 0, i32 2
  %128 = load i64, i64* %m_capacity.i, align 8
  %cmp.i428 = icmp ugt i64 %126, %128
  br i1 %cmp.i428, label %if.then.i431, label %if.end2.i

if.then.i431:                                     ; preds = %cond.end
  %129 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i426, align 8
  %130 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i427, align 8
  %131 = load i64, i64* %new_size.addr.i, align 8
  %132 = load i32, i32* %growing.addr.i, align 4
  %call.i429 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %129, %struct.mz_zip_array* %130, i64 %131, i32 %132) #10
  %tobool.i430 = icmp ne i32 %call.i429, 0
  br i1 %tobool.i430, label %if.end.i432, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i431
  store i32 0, i32* %retval.i425, align 4
  br label %mz_zip_array_resize.exit

if.end.i432:                                      ; preds = %if.then.i431
  br label %if.end2.i

if.end2.i:                                        ; preds = %if.end.i432, %cond.end
  %133 = load i64, i64* %new_size.addr.i, align 8
  %134 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i427, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %134, i32 0, i32 1
  store i64 %133, i64* %m_size.i, align 8
  store i32 1, i32* %retval.i425, align 4
  br label %mz_zip_array_resize.exit

mz_zip_array_resize.exit:                         ; preds = %if.then1.i, %if.end2.i
  %135 = load i32, i32* %retval.i425, align 4
  %tobool85 = icmp ne i32 %135, 0
  br i1 %tobool85, label %if.end88, label %if.then86

if.then86:                                        ; preds = %mz_zip_array_resize.exit
  %136 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %136, %struct.mz_zip_archive** %pZip.addr.i418, align 8
  store i32 16, i32* %err_num.addr.i419, align 4
  %137 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i418, align 8
  %tobool.i420 = icmp ne %struct.mz_zip_archive* %137, null
  br i1 %tobool.i420, label %if.then.i422, label %mz_zip_set_error.exit424

if.then.i422:                                     ; preds = %if.then86
  %138 = load i32, i32* %err_num.addr.i419, align 4
  %139 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i418, align 8
  %m_last_error.i421 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %139, i32 0, i32 5
  store i32 %138, i32* %m_last_error.i421, align 4
  br label %mz_zip_set_error.exit424

mz_zip_set_error.exit424:                         ; preds = %if.then86, %if.then.i422
  store i32 0, i32* %retval, align 4
  br label %return

if.end88:                                         ; preds = %mz_zip_array_resize.exit
  %140 = load i32, i32* %local_header_filename_len, align 4
  %tobool89 = icmp ne i32 %140, 0
  br i1 %tobool89, label %if.then90, label %if.end112

if.then90:                                        ; preds = %if.end88
  %141 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead91 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %141, i32 0, i32 11
  %142 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead91, align 8
  %143 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque92 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %143, i32 0, i32 14
  %144 = load i8*, i8** %m_pIO_opaque92, align 8
  %145 = load i64, i64* %local_header_ofs, align 8
  %add93 = add i64 %145, 30
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %146 = load i8*, i8** %m_p, align 8
  %147 = load i32, i32* %local_header_filename_len, align 4
  %conv94 = zext i32 %147 to i64
  %call95 = call i64 %142(i8* %144, i64 %add93, i8* %146, i64 %conv94)
  %148 = load i32, i32* %local_header_filename_len, align 4
  %conv96 = zext i32 %148 to i64
  %cmp97 = icmp ne i64 %call95, %conv96
  br i1 %cmp97, label %if.then99, label %if.end101

if.then99:                                        ; preds = %if.then90
  %149 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %149, %struct.mz_zip_archive** %pZip.addr.i404, align 8
  store i32 20, i32* %err_num.addr.i405, align 4
  %150 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i404, align 8
  %tobool.i406 = icmp ne %struct.mz_zip_archive* %150, null
  br i1 %tobool.i406, label %if.then.i408, label %mz_zip_set_error.exit410

if.then.i408:                                     ; preds = %if.then99
  %151 = load i32, i32* %err_num.addr.i405, align 4
  %152 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i404, align 8
  %m_last_error.i407 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %152, i32 0, i32 5
  store i32 %151, i32* %m_last_error.i407, align 4
  br label %mz_zip_set_error.exit410

mz_zip_set_error.exit410:                         ; preds = %if.then99, %if.then.i408
  br label %handle_failure

if.end101:                                        ; preds = %if.then90
  %m_filename102 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 17
  %arraydecay103 = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename102, i32 0, i32 0
  %m_p104 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %153 = load i8*, i8** %m_p104, align 8
  %154 = load i32, i32* %local_header_filename_len, align 4
  %conv105 = zext i32 %154 to i64
  %call106 = call i32 @memcmp(i8* %arraydecay103, i8* %153, i64 %conv105)
  %cmp107 = icmp ne i32 %call106, 0
  br i1 %cmp107, label %if.then109, label %if.end111

if.then109:                                       ; preds = %if.end101
  %155 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %155, %struct.mz_zip_archive** %pZip.addr.i397, align 8
  store i32 30, i32* %err_num.addr.i398, align 4
  %156 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i397, align 8
  %tobool.i399 = icmp ne %struct.mz_zip_archive* %156, null
  br i1 %tobool.i399, label %if.then.i401, label %mz_zip_set_error.exit403

if.then.i401:                                     ; preds = %if.then109
  %157 = load i32, i32* %err_num.addr.i398, align 4
  %158 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i397, align 8
  %m_last_error.i400 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %158, i32 0, i32 5
  store i32 %157, i32* %m_last_error.i400, align 4
  br label %mz_zip_set_error.exit403

mz_zip_set_error.exit403:                         ; preds = %if.then109, %if.then.i401
  br label %handle_failure

if.end111:                                        ; preds = %if.end101
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %if.end88
  %159 = load i32, i32* %local_header_extra_len, align 4
  %tobool113 = icmp ne i32 %159, 0
  br i1 %tobool113, label %land.lhs.true114, label %if.end176

land.lhs.true114:                                 ; preds = %if.end112
  %160 = load i64, i64* %local_header_comp_size, align 8
  %cmp115 = icmp eq i64 %160, 4294967295
  br i1 %cmp115, label %if.then120, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %land.lhs.true114
  %161 = load i64, i64* %local_header_uncomp_size, align 8
  %cmp118 = icmp eq i64 %161, 4294967295
  br i1 %cmp118, label %if.then120, label %if.end176

if.then120:                                       ; preds = %lor.lhs.false117, %land.lhs.true114
  %162 = load i32, i32* %local_header_extra_len, align 4
  store i32 %162, i32* %extra_size_remaining, align 4
  %m_p121 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %163 = load i8*, i8** %m_p121, align 8
  store i8* %163, i8** %pExtra_data, align 8
  %164 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead122 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %164, i32 0, i32 11
  %165 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead122, align 8
  %166 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque123 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %166, i32 0, i32 14
  %167 = load i8*, i8** %m_pIO_opaque123, align 8
  %168 = load i64, i64* %local_header_ofs, align 8
  %add124 = add i64 %168, 30
  %169 = load i32, i32* %local_header_filename_len, align 4
  %conv125 = zext i32 %169 to i64
  %add126 = add i64 %add124, %conv125
  %m_p127 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %170 = load i8*, i8** %m_p127, align 8
  %171 = load i32, i32* %local_header_extra_len, align 4
  %conv128 = zext i32 %171 to i64
  %call129 = call i64 %165(i8* %167, i64 %add126, i8* %170, i64 %conv128)
  %172 = load i32, i32* %local_header_extra_len, align 4
  %conv130 = zext i32 %172 to i64
  %cmp131 = icmp ne i64 %call129, %conv130
  br i1 %cmp131, label %if.then133, label %if.end135

if.then133:                                       ; preds = %if.then120
  %173 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %173, %struct.mz_zip_archive** %pZip.addr.i383, align 8
  store i32 20, i32* %err_num.addr.i384, align 4
  %174 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i383, align 8
  %tobool.i385 = icmp ne %struct.mz_zip_archive* %174, null
  br i1 %tobool.i385, label %if.then.i387, label %mz_zip_set_error.exit389

if.then.i387:                                     ; preds = %if.then133
  %175 = load i32, i32* %err_num.addr.i384, align 4
  %176 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i383, align 8
  %m_last_error.i386 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %176, i32 0, i32 5
  store i32 %175, i32* %m_last_error.i386, align 4
  br label %mz_zip_set_error.exit389

mz_zip_set_error.exit389:                         ; preds = %if.then133, %if.then.i387
  br label %handle_failure

if.end135:                                        ; preds = %if.then120
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end135
  %177 = load i32, i32* %extra_size_remaining, align 4
  %conv136 = zext i32 %177 to i64
  %cmp137 = icmp ult i64 %conv136, 4
  br i1 %cmp137, label %if.then139, label %if.end141

if.then139:                                       ; preds = %do.body
  %178 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %178, %struct.mz_zip_archive** %pZip.addr.i376, align 8
  store i32 9, i32* %err_num.addr.i377, align 4
  %179 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i376, align 8
  %tobool.i378 = icmp ne %struct.mz_zip_archive* %179, null
  br i1 %tobool.i378, label %if.then.i380, label %mz_zip_set_error.exit382

if.then.i380:                                     ; preds = %if.then139
  %180 = load i32, i32* %err_num.addr.i377, align 4
  %181 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i376, align 8
  %m_last_error.i379 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %181, i32 0, i32 5
  store i32 %180, i32* %m_last_error.i379, align 4
  br label %mz_zip_set_error.exit382

mz_zip_set_error.exit382:                         ; preds = %if.then139, %if.then.i380
  store i32 0, i32* %retval, align 4
  br label %return

if.end141:                                        ; preds = %do.body
  %182 = load i8*, i8** %pExtra_data, align 8
  %183 = bitcast i8* %182 to i16*
  %184 = load i16, i16* %183, align 2
  %conv142 = zext i16 %184 to i32
  store i32 %conv142, i32* %field_id, align 4
  %185 = load i8*, i8** %pExtra_data, align 8
  %add.ptr143 = getelementptr inbounds i8, i8* %185, i64 2
  %186 = bitcast i8* %add.ptr143 to i16*
  %187 = load i16, i16* %186, align 2
  %conv144 = zext i16 %187 to i32
  store i32 %conv144, i32* %field_data_size, align 4
  %188 = load i32, i32* %field_data_size, align 4
  %conv145 = zext i32 %188 to i64
  %add146 = add i64 %conv145, 4
  %conv147 = trunc i64 %add146 to i32
  store i32 %conv147, i32* %field_total_size, align 4
  %189 = load i32, i32* %field_total_size, align 4
  %190 = load i32, i32* %extra_size_remaining, align 4
  %cmp148 = icmp ugt i32 %189, %190
  br i1 %cmp148, label %if.then150, label %if.end152

if.then150:                                       ; preds = %if.end141
  %191 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %191, %struct.mz_zip_archive** %pZip.addr.i369, align 8
  store i32 9, i32* %err_num.addr.i370, align 4
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i369, align 8
  %tobool.i371 = icmp ne %struct.mz_zip_archive* %192, null
  br i1 %tobool.i371, label %if.then.i373, label %mz_zip_set_error.exit375

if.then.i373:                                     ; preds = %if.then150
  %193 = load i32, i32* %err_num.addr.i370, align 4
  %194 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i369, align 8
  %m_last_error.i372 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %194, i32 0, i32 5
  store i32 %193, i32* %m_last_error.i372, align 4
  br label %mz_zip_set_error.exit375

mz_zip_set_error.exit375:                         ; preds = %if.then150, %if.then.i373
  store i32 0, i32* %retval, align 4
  br label %return

if.end152:                                        ; preds = %if.end141
  %195 = load i32, i32* %field_id, align 4
  %cmp153 = icmp eq i32 %195, 1
  br i1 %cmp153, label %if.then155, label %if.end173

if.then155:                                       ; preds = %if.end152
  %196 = load i8*, i8** %pExtra_data, align 8
  %add.ptr156 = getelementptr inbounds i8, i8* %196, i64 4
  store i8* %add.ptr156, i8** %pSrc_field_data, align 8
  %197 = load i32, i32* %field_data_size, align 4
  %conv157 = zext i32 %197 to i64
  %cmp158 = icmp ult i64 %conv157, 16
  br i1 %cmp158, label %if.then160, label %if.end162

if.then160:                                       ; preds = %if.then155
  %198 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %198, %struct.mz_zip_archive** %pZip.addr.i362, align 8
  store i32 9, i32* %err_num.addr.i363, align 4
  %199 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i362, align 8
  %tobool.i364 = icmp ne %struct.mz_zip_archive* %199, null
  br i1 %tobool.i364, label %if.then.i366, label %mz_zip_set_error.exit368

if.then.i366:                                     ; preds = %if.then160
  %200 = load i32, i32* %err_num.addr.i363, align 4
  %201 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i362, align 8
  %m_last_error.i365 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %201, i32 0, i32 5
  store i32 %200, i32* %m_last_error.i365, align 4
  br label %mz_zip_set_error.exit368

mz_zip_set_error.exit368:                         ; preds = %if.then160, %if.then.i366
  br label %handle_failure

if.end162:                                        ; preds = %if.then155
  %202 = load i8*, i8** %pSrc_field_data, align 8
  %203 = bitcast i8* %202 to i32*
  %204 = load i32, i32* %203, align 4
  %conv163 = zext i32 %204 to i64
  %205 = load i8*, i8** %pSrc_field_data, align 8
  %add.ptr164 = getelementptr inbounds i8, i8* %205, i64 4
  %206 = bitcast i8* %add.ptr164 to i32*
  %207 = load i32, i32* %206, align 4
  %conv165 = zext i32 %207 to i64
  %shl = shl i64 %conv165, 32
  %or = or i64 %conv163, %shl
  store i64 %or, i64* %local_header_uncomp_size, align 8
  %208 = load i8*, i8** %pSrc_field_data, align 8
  %add.ptr166 = getelementptr inbounds i8, i8* %208, i64 8
  %209 = bitcast i8* %add.ptr166 to i32*
  %210 = load i32, i32* %209, align 4
  %conv167 = zext i32 %210 to i64
  %211 = load i8*, i8** %pSrc_field_data, align 8
  %add.ptr168 = getelementptr inbounds i8, i8* %211, i64 8
  %add.ptr169 = getelementptr inbounds i8, i8* %add.ptr168, i64 4
  %212 = bitcast i8* %add.ptr169 to i32*
  %213 = load i32, i32* %212, align 4
  %conv170 = zext i32 %213 to i64
  %shl171 = shl i64 %conv170, 32
  %or172 = or i64 %conv167, %shl171
  store i64 %or172, i64* %local_header_comp_size, align 8
  store i32 1, i32* %found_zip64_ext_data_in_ldir, align 4
  br label %do.end

if.end173:                                        ; preds = %if.end152
  %214 = load i32, i32* %field_total_size, align 4
  %215 = load i8*, i8** %pExtra_data, align 8
  %idx.ext = zext i32 %214 to i64
  %add.ptr174 = getelementptr inbounds i8, i8* %215, i64 %idx.ext
  store i8* %add.ptr174, i8** %pExtra_data, align 8
  %216 = load i32, i32* %field_total_size, align 4
  %217 = load i32, i32* %extra_size_remaining, align 4
  %sub = sub i32 %217, %216
  store i32 %sub, i32* %extra_size_remaining, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end173
  %218 = load i32, i32* %extra_size_remaining, align 4
  %tobool175 = icmp ne i32 %218, 0
  br i1 %tobool175, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.end162
  br label %if.end176

if.end176:                                        ; preds = %do.end, %lor.lhs.false117, %if.end112
  %219 = load i32, i32* %has_data_descriptor, align 4
  %tobool177 = icmp ne i32 %219, 0
  br i1 %tobool177, label %land.lhs.true178, label %if.else256

land.lhs.true178:                                 ; preds = %if.end176
  %220 = load i64, i64* %local_header_comp_size, align 8
  %tobool179 = icmp ne i64 %220, 0
  br i1 %tobool179, label %if.else256, label %land.lhs.true180

land.lhs.true180:                                 ; preds = %land.lhs.true178
  %221 = load i32, i32* %local_header_crc32, align 4
  %tobool181 = icmp ne i32 %221, 0
  br i1 %tobool181, label %if.else256, label %if.then182

if.then182:                                       ; preds = %land.lhs.true180
  store i64 0, i64* %comp_size, align 8
  store i64 0, i64* %uncomp_size, align 8
  %222 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %222, i32 0, i32 4
  %223 = load i32, i32* %m_zip64, align 4
  %tobool183 = icmp ne i32 %223, 0
  br i1 %tobool183, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then182
  %224 = load i32, i32* %found_zip64_ext_data_in_ldir, align 4
  %tobool184 = icmp ne i32 %224, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then182
  %225 = phi i1 [ true, %if.then182 ], [ %tobool184, %lor.rhs ]
  %cond185 = select i1 %225, i32 6, i32 4
  store i32 %cond185, i32* %num_descriptor_uint32s, align 4
  %226 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead186 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %226, i32 0, i32 11
  %227 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead186, align 8
  %228 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque187 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %228, i32 0, i32 14
  %229 = load i8*, i8** %m_pIO_opaque187, align 8
  %230 = load i64, i64* %local_header_ofs, align 8
  %add188 = add i64 %230, 30
  %231 = load i32, i32* %local_header_filename_len, align 4
  %conv189 = zext i32 %231 to i64
  %add190 = add i64 %add188, %conv189
  %232 = load i32, i32* %local_header_extra_len, align 4
  %conv191 = zext i32 %232 to i64
  %add192 = add i64 %add190, %conv191
  %m_comp_size193 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %233 = load i64, i64* %m_comp_size193, align 8
  %add194 = add i64 %add192, %233
  %arraydecay195 = getelementptr inbounds [32 x i8], [32 x i8]* %descriptor_buf, i32 0, i32 0
  %234 = load i32, i32* %num_descriptor_uint32s, align 4
  %conv196 = zext i32 %234 to i64
  %mul = mul i64 4, %conv196
  %call197 = call i64 %227(i8* %229, i64 %add194, i8* %arraydecay195, i64 %mul)
  %235 = load i32, i32* %num_descriptor_uint32s, align 4
  %conv198 = zext i32 %235 to i64
  %mul199 = mul i64 4, %conv198
  %cmp200 = icmp ne i64 %call197, %mul199
  br i1 %cmp200, label %if.then202, label %if.end204

if.then202:                                       ; preds = %lor.end
  %236 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %236, %struct.mz_zip_archive** %pZip.addr.i348, align 8
  store i32 20, i32* %err_num.addr.i349, align 4
  %237 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i348, align 8
  %tobool.i350 = icmp ne %struct.mz_zip_archive* %237, null
  br i1 %tobool.i350, label %if.then.i352, label %mz_zip_set_error.exit354

if.then.i352:                                     ; preds = %if.then202
  %238 = load i32, i32* %err_num.addr.i349, align 4
  %239 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i348, align 8
  %m_last_error.i351 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %239, i32 0, i32 5
  store i32 %238, i32* %m_last_error.i351, align 4
  br label %mz_zip_set_error.exit354

mz_zip_set_error.exit354:                         ; preds = %if.then202, %if.then.i352
  br label %handle_failure

if.end204:                                        ; preds = %lor.end
  %arraydecay205 = getelementptr inbounds [32 x i8], [32 x i8]* %descriptor_buf, i32 0, i32 0
  %240 = bitcast i8* %arraydecay205 to i32*
  %241 = load i32, i32* %240, align 16
  %cmp206 = icmp eq i32 %241, 134695760
  %conv207 = zext i1 %cmp206 to i32
  store i32 %conv207, i32* %has_id, align 4
  %242 = load i32, i32* %has_id, align 4
  %tobool208 = icmp ne i32 %242, 0
  br i1 %tobool208, label %cond.true209, label %cond.false212

cond.true209:                                     ; preds = %if.end204
  %arraydecay210 = getelementptr inbounds [32 x i8], [32 x i8]* %descriptor_buf, i32 0, i32 0
  %add.ptr211 = getelementptr inbounds i8, i8* %arraydecay210, i64 4
  br label %cond.end214

cond.false212:                                    ; preds = %if.end204
  %arraydecay213 = getelementptr inbounds [32 x i8], [32 x i8]* %descriptor_buf, i32 0, i32 0
  br label %cond.end214

cond.end214:                                      ; preds = %cond.false212, %cond.true209
  %cond215 = phi i8* [ %add.ptr211, %cond.true209 ], [ %arraydecay213, %cond.false212 ]
  store i8* %cond215, i8** %pSrc, align 8
  %243 = load i8*, i8** %pSrc, align 8
  %244 = bitcast i8* %243 to i32*
  %245 = load i32, i32* %244, align 4
  store i32 %245, i32* %file_crc32, align 4
  %246 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64216 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %246, i32 0, i32 4
  %247 = load i32, i32* %m_zip64216, align 4
  %tobool217 = icmp ne i32 %247, 0
  br i1 %tobool217, label %if.then220, label %lor.lhs.false218

lor.lhs.false218:                                 ; preds = %cond.end214
  %248 = load i32, i32* %found_zip64_ext_data_in_ldir, align 4
  %tobool219 = icmp ne i32 %248, 0
  br i1 %tobool219, label %if.then220, label %if.else

if.then220:                                       ; preds = %lor.lhs.false218, %cond.end214
  %249 = load i8*, i8** %pSrc, align 8
  %add.ptr221 = getelementptr inbounds i8, i8* %249, i64 4
  %250 = bitcast i8* %add.ptr221 to i32*
  %251 = load i32, i32* %250, align 4
  %conv222 = zext i32 %251 to i64
  %252 = load i8*, i8** %pSrc, align 8
  %add.ptr223 = getelementptr inbounds i8, i8* %252, i64 4
  %add.ptr224 = getelementptr inbounds i8, i8* %add.ptr223, i64 4
  %253 = bitcast i8* %add.ptr224 to i32*
  %254 = load i32, i32* %253, align 4
  %conv225 = zext i32 %254 to i64
  %shl226 = shl i64 %conv225, 32
  %or227 = or i64 %conv222, %shl226
  store i64 %or227, i64* %comp_size, align 8
  %255 = load i8*, i8** %pSrc, align 8
  %add.ptr228 = getelementptr inbounds i8, i8* %255, i64 4
  %add.ptr229 = getelementptr inbounds i8, i8* %add.ptr228, i64 8
  %256 = bitcast i8* %add.ptr229 to i32*
  %257 = load i32, i32* %256, align 4
  %conv230 = zext i32 %257 to i64
  %258 = load i8*, i8** %pSrc, align 8
  %add.ptr231 = getelementptr inbounds i8, i8* %258, i64 4
  %add.ptr232 = getelementptr inbounds i8, i8* %add.ptr231, i64 8
  %add.ptr233 = getelementptr inbounds i8, i8* %add.ptr232, i64 4
  %259 = bitcast i8* %add.ptr233 to i32*
  %260 = load i32, i32* %259, align 4
  %conv234 = zext i32 %260 to i64
  %shl235 = shl i64 %conv234, 32
  %or236 = or i64 %conv230, %shl235
  store i64 %or236, i64* %uncomp_size, align 8
  br label %if.end242

if.else:                                          ; preds = %lor.lhs.false218
  %261 = load i8*, i8** %pSrc, align 8
  %add.ptr237 = getelementptr inbounds i8, i8* %261, i64 4
  %262 = bitcast i8* %add.ptr237 to i32*
  %263 = load i32, i32* %262, align 4
  %conv238 = zext i32 %263 to i64
  store i64 %conv238, i64* %comp_size, align 8
  %264 = load i8*, i8** %pSrc, align 8
  %add.ptr239 = getelementptr inbounds i8, i8* %264, i64 4
  %add.ptr240 = getelementptr inbounds i8, i8* %add.ptr239, i64 4
  %265 = bitcast i8* %add.ptr240 to i32*
  %266 = load i32, i32* %265, align 4
  %conv241 = zext i32 %266 to i64
  store i64 %conv241, i64* %uncomp_size, align 8
  br label %if.end242

if.end242:                                        ; preds = %if.else, %if.then220
  %267 = load i32, i32* %file_crc32, align 4
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %268 = load i32, i32* %m_crc32, align 8
  %cmp243 = icmp ne i32 %267, %268
  br i1 %cmp243, label %if.then253, label %lor.lhs.false245

lor.lhs.false245:                                 ; preds = %if.end242
  %269 = load i64, i64* %comp_size, align 8
  %m_comp_size246 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %270 = load i64, i64* %m_comp_size246, align 8
  %cmp247 = icmp ne i64 %269, %270
  br i1 %cmp247, label %if.then253, label %lor.lhs.false249

lor.lhs.false249:                                 ; preds = %lor.lhs.false245
  %271 = load i64, i64* %uncomp_size, align 8
  %m_uncomp_size250 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %272 = load i64, i64* %m_uncomp_size250, align 8
  %cmp251 = icmp ne i64 %271, %272
  br i1 %cmp251, label %if.then253, label %if.end255

if.then253:                                       ; preds = %lor.lhs.false249, %lor.lhs.false245, %if.end242
  %273 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %273, %struct.mz_zip_archive** %pZip.addr.i341, align 8
  store i32 30, i32* %err_num.addr.i342, align 4
  %274 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i341, align 8
  %tobool.i343 = icmp ne %struct.mz_zip_archive* %274, null
  br i1 %tobool.i343, label %if.then.i345, label %mz_zip_set_error.exit347

if.then.i345:                                     ; preds = %if.then253
  %275 = load i32, i32* %err_num.addr.i342, align 4
  %276 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i341, align 8
  %m_last_error.i344 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %276, i32 0, i32 5
  store i32 %275, i32* %m_last_error.i344, align 4
  br label %mz_zip_set_error.exit347

mz_zip_set_error.exit347:                         ; preds = %if.then253, %if.then.i345
  br label %handle_failure

if.end255:                                        ; preds = %lor.lhs.false249
  br label %if.end271

if.else256:                                       ; preds = %land.lhs.true180, %land.lhs.true178, %if.end176
  %277 = load i32, i32* %local_header_crc32, align 4
  %m_crc32257 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %278 = load i32, i32* %m_crc32257, align 8
  %cmp258 = icmp ne i32 %277, %278
  br i1 %cmp258, label %if.then268, label %lor.lhs.false260

lor.lhs.false260:                                 ; preds = %if.else256
  %279 = load i64, i64* %local_header_comp_size, align 8
  %m_comp_size261 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %280 = load i64, i64* %m_comp_size261, align 8
  %cmp262 = icmp ne i64 %279, %280
  br i1 %cmp262, label %if.then268, label %lor.lhs.false264

lor.lhs.false264:                                 ; preds = %lor.lhs.false260
  %281 = load i64, i64* %local_header_uncomp_size, align 8
  %m_uncomp_size265 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %282 = load i64, i64* %m_uncomp_size265, align 8
  %cmp266 = icmp ne i64 %281, %282
  br i1 %cmp266, label %if.then268, label %if.end270

if.then268:                                       ; preds = %lor.lhs.false264, %lor.lhs.false260, %if.else256
  %283 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %283, %struct.mz_zip_archive** %pZip.addr.i334, align 8
  store i32 30, i32* %err_num.addr.i335, align 4
  %284 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i334, align 8
  %tobool.i336 = icmp ne %struct.mz_zip_archive* %284, null
  br i1 %tobool.i336, label %if.then.i338, label %mz_zip_set_error.exit340

if.then.i338:                                     ; preds = %if.then268
  %285 = load i32, i32* %err_num.addr.i335, align 4
  %286 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i334, align 8
  %m_last_error.i337 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %286, i32 0, i32 5
  store i32 %285, i32* %m_last_error.i337, align 4
  br label %mz_zip_set_error.exit340

mz_zip_set_error.exit340:                         ; preds = %if.then268, %if.then.i338
  br label %handle_failure

if.end270:                                        ; preds = %lor.lhs.false264
  br label %if.end271

if.end271:                                        ; preds = %if.end270, %if.end255
  %287 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %287, %struct.mz_zip_archive** %pZip.addr.i314, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i315, align 8
  %288 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i314, align 8
  %m_pFree.i316 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %288, i32 0, i32 8
  %289 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i316, align 8
  %290 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i314, align 8
  %m_pAlloc_opaque.i317 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %290, i32 0, i32 10
  %291 = load i8*, i8** %m_pAlloc_opaque.i317, align 8
  %292 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i315, align 8
  %m_p.i318 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %292, i32 0, i32 0
  %293 = load i8*, i8** %m_p.i318, align 8
  call void %289(i8* %291, i8* %293) #10
  %294 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i315, align 8
  %295 = bitcast %struct.mz_zip_array* %294 to i8*
  %296 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i315, align 8
  %297 = bitcast %struct.mz_zip_array* %296 to i8*
  %298 = call i64 @llvm.objectsize.i64.p0i8(i8* %297, i1 false) #10
  %call.i319 = call i8* @__memset_chk(i8* %295, i32 0, i64 32, i64 %298) #10
  %299 = load i32, i32* %flags.addr, align 4
  %and272 = and i32 %299, 8192
  %cmp273 = icmp eq i32 %and272, 0
  br i1 %cmp273, label %if.then275, label %if.end286

if.then275:                                       ; preds = %if.end271
  %300 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %301 = load i32, i32* %file_index.addr, align 4
  %302 = bitcast i32* %uncomp_crc32 to i8*
  %call276 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %300, i32 %301, i64 (i8*, i64, i8*, i64)* @mz_zip_compute_crc32_callback, i8* %302, i32 0)
  %tobool277 = icmp ne i32 %call276, 0
  br i1 %tobool277, label %if.end279, label %if.then278

if.then278:                                       ; preds = %if.then275
  store i32 0, i32* %retval, align 4
  br label %return

if.end279:                                        ; preds = %if.then275
  %303 = load i32, i32* %uncomp_crc32, align 4
  %m_crc32280 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %304 = load i32, i32* %m_crc32280, align 8
  %cmp281 = icmp ne i32 %303, %304
  br i1 %cmp281, label %if.then283, label %if.end285

if.then283:                                       ; preds = %if.end279
  %305 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %305, %struct.mz_zip_archive** %pZip.addr.i300, align 8
  store i32 30, i32* %err_num.addr.i301, align 4
  %306 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i300, align 8
  %tobool.i302 = icmp ne %struct.mz_zip_archive* %306, null
  br i1 %tobool.i302, label %if.then.i304, label %mz_zip_set_error.exit306

if.then.i304:                                     ; preds = %if.then283
  %307 = load i32, i32* %err_num.addr.i301, align 4
  %308 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i300, align 8
  %m_last_error.i303 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %308, i32 0, i32 5
  store i32 %307, i32* %m_last_error.i303, align 4
  br label %mz_zip_set_error.exit306

mz_zip_set_error.exit306:                         ; preds = %if.then283, %if.then.i304
  store i32 0, i32* %retval, align 4
  br label %return

if.end285:                                        ; preds = %if.end279
  br label %if.end286

if.end286:                                        ; preds = %if.end285, %if.end271
  store i32 1, i32* %retval, align 4
  br label %return

handle_failure:                                   ; preds = %mz_zip_set_error.exit340, %mz_zip_set_error.exit347, %mz_zip_set_error.exit354, %mz_zip_set_error.exit368, %mz_zip_set_error.exit389, %mz_zip_set_error.exit403, %mz_zip_set_error.exit410
  %309 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %309, %struct.mz_zip_archive** %pZip.addr.i287, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i288, align 8
  %310 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i287, align 8
  %m_pFree.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %310, i32 0, i32 8
  %311 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i, align 8
  %312 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i287, align 8
  %m_pAlloc_opaque.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %312, i32 0, i32 10
  %313 = load i8*, i8** %m_pAlloc_opaque.i, align 8
  %314 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i288, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %314, i32 0, i32 0
  %315 = load i8*, i8** %m_p.i, align 8
  call void %311(i8* %313, i8* %315) #10
  %316 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i288, align 8
  %317 = bitcast %struct.mz_zip_array* %316 to i8*
  %318 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i288, align 8
  %319 = bitcast %struct.mz_zip_array* %318 to i8*
  %320 = call i64 @llvm.objectsize.i64.p0i8(i8* %319, i1 false) #10
  %call.i289 = call i8* @__memset_chk(i8* %317, i32 0, i64 32, i64 %320) #10
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %handle_failure, %if.end286, %mz_zip_set_error.exit306, %if.then278, %mz_zip_set_error.exit375, %mz_zip_set_error.exit382, %mz_zip_set_error.exit424, %mz_zip_set_error.exit439, %mz_zip_set_error.exit417, %mz_zip_set_error.exit396, %mz_zip_set_error.exit361, %mz_zip_set_error.exit333, %mz_zip_set_error.exit326, %mz_zip_set_error.exit313, %if.then20, %if.then15, %mz_zip_set_error.exit295, %mz_zip_set_error.exit
  %321 = load i32, i32* %retval, align 4
  ret i32 %321
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_file_stat_internal(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pCentral_dir_header, %struct.mz_zip_archive_file_stat* %pStat, i32* %pFound_zip64_extra_data) #0 {
entry:
  %pZip.addr.i219 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i220 = alloca i32, align 4
  %pZip.addr.i213 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i214 = alloca i32, align 4
  %pZip.addr.i207 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i208 = alloca i32, align 4
  %pZip.addr.i201 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i202 = alloca i32, align 4
  %pZip.addr.i195 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i196 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pCentral_dir_header.addr = alloca i8*, align 8
  %pStat.addr = alloca %struct.mz_zip_archive_file_stat*, align 8
  %pFound_zip64_extra_data.addr = alloca i32*, align 8
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  %extra_size_remaining = alloca i32, align 4
  %pExtra_data = alloca i8*, align 8
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  %pField_data = alloca i8*, align 8
  %field_data_remaining = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pCentral_dir_header, i8** %pCentral_dir_header.addr, align 8
  store %struct.mz_zip_archive_file_stat* %pStat, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  store i32* %pFound_zip64_extra_data, i32** %pFound_zip64_extra_data.addr, align 8
  %0 = load i8*, i8** %pCentral_dir_header.addr, align 8
  store i8* %0, i8** %p, align 8
  %1 = load i32*, i32** %pFound_zip64_extra_data.addr, align 8
  %tobool = icmp ne i32* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %pFound_zip64_extra_data.addr, align 8
  store i32 0, i32* %2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i8*, i8** %p, align 8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %tobool2 = icmp ne %struct.mz_zip_archive_file_stat* %4, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %5, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %6, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then3
  %7 = load i32, i32* %err_num.addr.i, align 4
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 5
  store i32 %7, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then3, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %lor.lhs.false
  %9 = load i32, i32* %file_index.addr, align 4
  %10 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_file_index = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %10, i32 0, i32 0
  store i32 %9, i32* %m_file_index, align 8
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 15
  %12 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 0
  %13 = load i8*, i8** %m_p, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %file_index.addr, align 4
  %idxprom = zext i32 %15 to i64
  %arrayidx = getelementptr inbounds i32, i32* %14, i64 %idxprom
  %16 = load i32, i32* %arrayidx, align 4
  %conv = zext i32 %16 to i64
  %17 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_central_dir_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %17, i32 0, i32 1
  store i64 %conv, i64* %m_central_dir_ofs, align 8
  %18 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 4
  %19 = bitcast i8* %add.ptr to i16*
  %20 = load i16, i16* %19, align 2
  %21 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_version_made_by = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %21, i32 0, i32 2
  store i16 %20, i16* %m_version_made_by, align 8
  %22 = load i8*, i8** %p, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %22, i64 6
  %23 = bitcast i8* %add.ptr5 to i16*
  %24 = load i16, i16* %23, align 2
  %25 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_version_needed = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %25, i32 0, i32 3
  store i16 %24, i16* %m_version_needed, align 2
  %26 = load i8*, i8** %p, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %26, i64 8
  %27 = bitcast i8* %add.ptr6 to i16*
  %28 = load i16, i16* %27, align 2
  %29 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %29, i32 0, i32 4
  store i16 %28, i16* %m_bit_flag, align 4
  %30 = load i8*, i8** %p, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %30, i64 10
  %31 = bitcast i8* %add.ptr7 to i16*
  %32 = load i16, i16* %31, align 2
  %33 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %33, i32 0, i32 5
  store i16 %32, i16* %m_method, align 2
  %34 = load i8*, i8** %p, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %34, i64 12
  %35 = bitcast i8* %add.ptr8 to i16*
  %36 = load i16, i16* %35, align 2
  %conv9 = zext i16 %36 to i32
  %37 = load i8*, i8** %p, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %37, i64 14
  %38 = bitcast i8* %add.ptr10 to i16*
  %39 = load i16, i16* %38, align 2
  %conv11 = zext i16 %39 to i32
  %call12 = call i64 @mz_zip_dos_to_time_t(i32 %conv9, i32 %conv11)
  %40 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_time = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %40, i32 0, i32 6
  store i64 %call12, i64* %m_time, align 8
  %41 = load i8*, i8** %p, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %41, i64 16
  %42 = bitcast i8* %add.ptr13 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %44, i32 0, i32 7
  store i32 %43, i32* %m_crc32, align 8
  %45 = load i8*, i8** %p, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %45, i64 20
  %46 = bitcast i8* %add.ptr14 to i32*
  %47 = load i32, i32* %46, align 4
  %conv15 = zext i32 %47 to i64
  %48 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %48, i32 0, i32 8
  store i64 %conv15, i64* %m_comp_size, align 8
  %49 = load i8*, i8** %p, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %49, i64 24
  %50 = bitcast i8* %add.ptr16 to i32*
  %51 = load i32, i32* %50, align 4
  %conv17 = zext i32 %51 to i64
  %52 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %52, i32 0, i32 9
  store i64 %conv17, i64* %m_uncomp_size, align 8
  %53 = load i8*, i8** %p, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %53, i64 36
  %54 = bitcast i8* %add.ptr18 to i16*
  %55 = load i16, i16* %54, align 2
  %56 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_internal_attr = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %56, i32 0, i32 10
  store i16 %55, i16* %m_internal_attr, align 8
  %57 = load i8*, i8** %p, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %57, i64 38
  %58 = bitcast i8* %add.ptr19 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_external_attr = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %60, i32 0, i32 11
  store i32 %59, i32* %m_external_attr, align 4
  %61 = load i8*, i8** %p, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %61, i64 42
  %62 = bitcast i8* %add.ptr20 to i32*
  %63 = load i32, i32* %62, align 4
  %conv21 = zext i32 %63 to i64
  %64 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %64, i32 0, i32 12
  store i64 %conv21, i64* %m_local_header_ofs, align 8
  %65 = load i8*, i8** %p, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %65, i64 28
  %66 = bitcast i8* %add.ptr22 to i16*
  %67 = load i16, i16* %66, align 2
  %conv23 = zext i16 %67 to i32
  store i32 %conv23, i32* %n, align 4
  %68 = load i32, i32* %n, align 4
  %cmp = icmp ult i32 %68, 511
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %69 = load i32, i32* %n, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %69, %cond.true ], [ 511, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %70 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_filename = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %70, i32 0, i32 17
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename, i32 0, i32 0
  %71 = load i8*, i8** %p, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %71, i64 46
  %72 = load i32, i32* %n, align 4
  %conv26 = zext i32 %72 to i64
  %73 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_filename27 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %73, i32 0, i32 17
  %arraydecay28 = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename27, i32 0, i32 0
  %74 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay28, i1 false)
  %call29 = call i8* @__memcpy_chk(i8* %arraydecay, i8* %add.ptr25, i64 %conv26, i64 %74) #10
  %75 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_filename30 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %75, i32 0, i32 17
  %76 = load i32, i32* %n, align 4
  %idxprom31 = zext i32 %76 to i64
  %arrayidx32 = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename30, i64 0, i64 %idxprom31
  store i8 0, i8* %arrayidx32, align 1
  %77 = load i8*, i8** %p, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %77, i64 32
  %78 = bitcast i8* %add.ptr33 to i16*
  %79 = load i16, i16* %78, align 2
  %conv34 = zext i16 %79 to i32
  store i32 %conv34, i32* %n, align 4
  %80 = load i32, i32* %n, align 4
  %cmp35 = icmp ult i32 %80, 511
  br i1 %cmp35, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %cond.end
  %81 = load i32, i32* %n, align 4
  br label %cond.end39

cond.false38:                                     ; preds = %cond.end
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond40 = phi i32 [ %81, %cond.true37 ], [ 511, %cond.false38 ]
  store i32 %cond40, i32* %n, align 4
  %82 = load i32, i32* %n, align 4
  %83 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comment_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %83, i32 0, i32 13
  store i32 %82, i32* %m_comment_size, align 8
  %84 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comment = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %84, i32 0, i32 18
  %arraydecay41 = getelementptr inbounds [512 x i8], [512 x i8]* %m_comment, i32 0, i32 0
  %85 = load i8*, i8** %p, align 8
  %add.ptr42 = getelementptr inbounds i8, i8* %85, i64 46
  %86 = load i8*, i8** %p, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %86, i64 28
  %87 = bitcast i8* %add.ptr43 to i16*
  %88 = load i16, i16* %87, align 2
  %conv44 = zext i16 %88 to i32
  %idx.ext = sext i32 %conv44 to i64
  %add.ptr45 = getelementptr inbounds i8, i8* %add.ptr42, i64 %idx.ext
  %89 = load i8*, i8** %p, align 8
  %add.ptr46 = getelementptr inbounds i8, i8* %89, i64 30
  %90 = bitcast i8* %add.ptr46 to i16*
  %91 = load i16, i16* %90, align 2
  %conv47 = zext i16 %91 to i32
  %idx.ext48 = sext i32 %conv47 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr45, i64 %idx.ext48
  %92 = load i32, i32* %n, align 4
  %conv50 = zext i32 %92 to i64
  %93 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comment51 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %93, i32 0, i32 18
  %arraydecay52 = getelementptr inbounds [512 x i8], [512 x i8]* %m_comment51, i32 0, i32 0
  %94 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay52, i1 false)
  %call53 = call i8* @__memcpy_chk(i8* %arraydecay41, i8* %add.ptr49, i64 %conv50, i64 %94) #10
  %95 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comment54 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %95, i32 0, i32 18
  %96 = load i32, i32* %n, align 4
  %idxprom55 = zext i32 %96 to i64
  %arrayidx56 = getelementptr inbounds [512 x i8], [512 x i8]* %m_comment54, i64 0, i64 %idxprom55
  store i8 0, i8* %arrayidx56, align 1
  %97 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %98 = load i32, i32* %file_index.addr, align 4
  %call57 = call i32 @mz_zip_reader_is_file_a_directory(%struct.mz_zip_archive* %97, i32 %98)
  %99 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %99, i32 0, i32 14
  store i32 %call57, i32* %m_is_directory, align 4
  %100 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %101 = load i32, i32* %file_index.addr, align 4
  %call58 = call i32 @mz_zip_reader_is_file_encrypted(%struct.mz_zip_archive* %100, i32 %101)
  %102 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_is_encrypted = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %102, i32 0, i32 15
  store i32 %call58, i32* %m_is_encrypted, align 8
  %103 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %104 = load i32, i32* %file_index.addr, align 4
  %call59 = call i32 @mz_zip_reader_is_file_supported(%struct.mz_zip_archive* %103, i32 %104)
  %105 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_is_supported = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %105, i32 0, i32 16
  store i32 %call59, i32* %m_is_supported, align 4
  %106 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comp_size60 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %106, i32 0, i32 8
  %107 = load i64, i64* %m_comp_size60, align 8
  %108 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_uncomp_size61 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %108, i32 0, i32 9
  %109 = load i64, i64* %m_uncomp_size61, align 8
  %cmp62 = icmp ugt i64 %107, %109
  br i1 %cmp62, label %cond.true64, label %cond.false66

cond.true64:                                      ; preds = %cond.end39
  %110 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comp_size65 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %110, i32 0, i32 8
  %111 = load i64, i64* %m_comp_size65, align 8
  br label %cond.end68

cond.false66:                                     ; preds = %cond.end39
  %112 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_uncomp_size67 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %112, i32 0, i32 9
  %113 = load i64, i64* %m_uncomp_size67, align 8
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false66, %cond.true64
  %cond69 = phi i64 [ %111, %cond.true64 ], [ %113, %cond.false66 ]
  %114 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_local_header_ofs70 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %114, i32 0, i32 12
  %115 = load i64, i64* %m_local_header_ofs70, align 8
  %cmp71 = icmp ugt i64 %cond69, %115
  br i1 %cmp71, label %cond.true73, label %cond.false84

cond.true73:                                      ; preds = %cond.end68
  %116 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comp_size74 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %116, i32 0, i32 8
  %117 = load i64, i64* %m_comp_size74, align 8
  %118 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_uncomp_size75 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %118, i32 0, i32 9
  %119 = load i64, i64* %m_uncomp_size75, align 8
  %cmp76 = icmp ugt i64 %117, %119
  br i1 %cmp76, label %cond.true78, label %cond.false80

cond.true78:                                      ; preds = %cond.true73
  %120 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comp_size79 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %120, i32 0, i32 8
  %121 = load i64, i64* %m_comp_size79, align 8
  br label %cond.end82

cond.false80:                                     ; preds = %cond.true73
  %122 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_uncomp_size81 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %122, i32 0, i32 9
  %123 = load i64, i64* %m_uncomp_size81, align 8
  br label %cond.end82

cond.end82:                                       ; preds = %cond.false80, %cond.true78
  %cond83 = phi i64 [ %121, %cond.true78 ], [ %123, %cond.false80 ]
  br label %cond.end86

cond.false84:                                     ; preds = %cond.end68
  %124 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_local_header_ofs85 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %124, i32 0, i32 12
  %125 = load i64, i64* %m_local_header_ofs85, align 8
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false84, %cond.end82
  %cond87 = phi i64 [ %cond83, %cond.end82 ], [ %125, %cond.false84 ]
  %cmp88 = icmp eq i64 %cond87, 4294967295
  br i1 %cmp88, label %if.then90, label %if.end194

if.then90:                                        ; preds = %cond.end86
  %126 = load i8*, i8** %p, align 8
  %add.ptr91 = getelementptr inbounds i8, i8* %126, i64 30
  %127 = bitcast i8* %add.ptr91 to i16*
  %128 = load i16, i16* %127, align 2
  %conv92 = zext i16 %128 to i32
  store i32 %conv92, i32* %extra_size_remaining, align 4
  %129 = load i32, i32* %extra_size_remaining, align 4
  %tobool93 = icmp ne i32 %129, 0
  br i1 %tobool93, label %if.then94, label %if.end193

if.then94:                                        ; preds = %if.then90
  %130 = load i8*, i8** %p, align 8
  %add.ptr95 = getelementptr inbounds i8, i8* %130, i64 46
  %131 = load i8*, i8** %p, align 8
  %add.ptr96 = getelementptr inbounds i8, i8* %131, i64 28
  %132 = bitcast i8* %add.ptr96 to i16*
  %133 = load i16, i16* %132, align 2
  %conv97 = zext i16 %133 to i32
  %idx.ext98 = sext i32 %conv97 to i64
  %add.ptr99 = getelementptr inbounds i8, i8* %add.ptr95, i64 %idx.ext98
  store i8* %add.ptr99, i8** %pExtra_data, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then94
  %134 = load i32, i32* %extra_size_remaining, align 4
  %conv100 = zext i32 %134 to i64
  %cmp101 = icmp ult i64 %conv100, 4
  br i1 %cmp101, label %if.then103, label %if.end105

if.then103:                                       ; preds = %do.body
  %135 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %135, %struct.mz_zip_archive** %pZip.addr.i219, align 8
  store i32 9, i32* %err_num.addr.i220, align 4
  %136 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i219, align 8
  %tobool.i221 = icmp ne %struct.mz_zip_archive* %136, null
  br i1 %tobool.i221, label %if.then.i223, label %mz_zip_set_error.exit224

if.then.i223:                                     ; preds = %if.then103
  %137 = load i32, i32* %err_num.addr.i220, align 4
  %138 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i219, align 8
  %m_last_error.i222 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %138, i32 0, i32 5
  store i32 %137, i32* %m_last_error.i222, align 4
  br label %mz_zip_set_error.exit224

mz_zip_set_error.exit224:                         ; preds = %if.then103, %if.then.i223
  store i32 0, i32* %retval, align 4
  br label %return

if.end105:                                        ; preds = %do.body
  %139 = load i8*, i8** %pExtra_data, align 8
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2
  %conv106 = zext i16 %141 to i32
  store i32 %conv106, i32* %field_id, align 4
  %142 = load i8*, i8** %pExtra_data, align 8
  %add.ptr107 = getelementptr inbounds i8, i8* %142, i64 2
  %143 = bitcast i8* %add.ptr107 to i16*
  %144 = load i16, i16* %143, align 2
  %conv108 = zext i16 %144 to i32
  store i32 %conv108, i32* %field_data_size, align 4
  %145 = load i32, i32* %field_data_size, align 4
  %conv109 = zext i32 %145 to i64
  %add = add i64 %conv109, 4
  %146 = load i32, i32* %extra_size_remaining, align 4
  %conv110 = zext i32 %146 to i64
  %cmp111 = icmp ugt i64 %add, %conv110
  br i1 %cmp111, label %if.then113, label %if.end115

if.then113:                                       ; preds = %if.end105
  %147 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %147, %struct.mz_zip_archive** %pZip.addr.i213, align 8
  store i32 9, i32* %err_num.addr.i214, align 4
  %148 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i213, align 8
  %tobool.i215 = icmp ne %struct.mz_zip_archive* %148, null
  br i1 %tobool.i215, label %if.then.i217, label %mz_zip_set_error.exit218

if.then.i217:                                     ; preds = %if.then113
  %149 = load i32, i32* %err_num.addr.i214, align 4
  %150 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i213, align 8
  %m_last_error.i216 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %150, i32 0, i32 5
  store i32 %149, i32* %m_last_error.i216, align 4
  br label %mz_zip_set_error.exit218

mz_zip_set_error.exit218:                         ; preds = %if.then113, %if.then.i217
  store i32 0, i32* %retval, align 4
  br label %return

if.end115:                                        ; preds = %if.end105
  %151 = load i32, i32* %field_id, align 4
  %cmp116 = icmp eq i32 %151, 1
  br i1 %cmp116, label %if.then118, label %if.end183

if.then118:                                       ; preds = %if.end115
  %152 = load i8*, i8** %pExtra_data, align 8
  %add.ptr119 = getelementptr inbounds i8, i8* %152, i64 4
  store i8* %add.ptr119, i8** %pField_data, align 8
  %153 = load i32, i32* %field_data_size, align 4
  store i32 %153, i32* %field_data_remaining, align 4
  %154 = load i32*, i32** %pFound_zip64_extra_data.addr, align 8
  %tobool120 = icmp ne i32* %154, null
  br i1 %tobool120, label %if.then121, label %if.end122

if.then121:                                       ; preds = %if.then118
  %155 = load i32*, i32** %pFound_zip64_extra_data.addr, align 8
  store i32 1, i32* %155, align 4
  br label %if.end122

if.end122:                                        ; preds = %if.then121, %if.then118
  %156 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_uncomp_size123 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %156, i32 0, i32 9
  %157 = load i64, i64* %m_uncomp_size123, align 8
  %cmp124 = icmp eq i64 %157, 4294967295
  br i1 %cmp124, label %if.then126, label %if.end140

if.then126:                                       ; preds = %if.end122
  %158 = load i32, i32* %field_data_remaining, align 4
  %conv127 = zext i32 %158 to i64
  %cmp128 = icmp ult i64 %conv127, 8
  br i1 %cmp128, label %if.then130, label %if.end132

if.then130:                                       ; preds = %if.then126
  %159 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %159, %struct.mz_zip_archive** %pZip.addr.i207, align 8
  store i32 9, i32* %err_num.addr.i208, align 4
  %160 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i207, align 8
  %tobool.i209 = icmp ne %struct.mz_zip_archive* %160, null
  br i1 %tobool.i209, label %if.then.i211, label %mz_zip_set_error.exit212

if.then.i211:                                     ; preds = %if.then130
  %161 = load i32, i32* %err_num.addr.i208, align 4
  %162 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i207, align 8
  %m_last_error.i210 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %162, i32 0, i32 5
  store i32 %161, i32* %m_last_error.i210, align 4
  br label %mz_zip_set_error.exit212

mz_zip_set_error.exit212:                         ; preds = %if.then130, %if.then.i211
  store i32 0, i32* %retval, align 4
  br label %return

if.end132:                                        ; preds = %if.then126
  %163 = load i8*, i8** %pField_data, align 8
  %164 = bitcast i8* %163 to i32*
  %165 = load i32, i32* %164, align 4
  %conv133 = zext i32 %165 to i64
  %166 = load i8*, i8** %pField_data, align 8
  %add.ptr134 = getelementptr inbounds i8, i8* %166, i64 4
  %167 = bitcast i8* %add.ptr134 to i32*
  %168 = load i32, i32* %167, align 4
  %conv135 = zext i32 %168 to i64
  %shl = shl i64 %conv135, 32
  %or = or i64 %conv133, %shl
  %169 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_uncomp_size136 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %169, i32 0, i32 9
  store i64 %or, i64* %m_uncomp_size136, align 8
  %170 = load i8*, i8** %pField_data, align 8
  %add.ptr137 = getelementptr inbounds i8, i8* %170, i64 8
  store i8* %add.ptr137, i8** %pField_data, align 8
  %171 = load i32, i32* %field_data_remaining, align 4
  %conv138 = zext i32 %171 to i64
  %sub = sub i64 %conv138, 8
  %conv139 = trunc i64 %sub to i32
  store i32 %conv139, i32* %field_data_remaining, align 4
  br label %if.end140

if.end140:                                        ; preds = %if.end132, %if.end122
  %172 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comp_size141 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %172, i32 0, i32 8
  %173 = load i64, i64* %m_comp_size141, align 8
  %cmp142 = icmp eq i64 %173, 4294967295
  br i1 %cmp142, label %if.then144, label %if.end161

if.then144:                                       ; preds = %if.end140
  %174 = load i32, i32* %field_data_remaining, align 4
  %conv145 = zext i32 %174 to i64
  %cmp146 = icmp ult i64 %conv145, 8
  br i1 %cmp146, label %if.then148, label %if.end150

if.then148:                                       ; preds = %if.then144
  %175 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %175, %struct.mz_zip_archive** %pZip.addr.i201, align 8
  store i32 9, i32* %err_num.addr.i202, align 4
  %176 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i201, align 8
  %tobool.i203 = icmp ne %struct.mz_zip_archive* %176, null
  br i1 %tobool.i203, label %if.then.i205, label %mz_zip_set_error.exit206

if.then.i205:                                     ; preds = %if.then148
  %177 = load i32, i32* %err_num.addr.i202, align 4
  %178 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i201, align 8
  %m_last_error.i204 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %178, i32 0, i32 5
  store i32 %177, i32* %m_last_error.i204, align 4
  br label %mz_zip_set_error.exit206

mz_zip_set_error.exit206:                         ; preds = %if.then148, %if.then.i205
  store i32 0, i32* %retval, align 4
  br label %return

if.end150:                                        ; preds = %if.then144
  %179 = load i8*, i8** %pField_data, align 8
  %180 = bitcast i8* %179 to i32*
  %181 = load i32, i32* %180, align 4
  %conv151 = zext i32 %181 to i64
  %182 = load i8*, i8** %pField_data, align 8
  %add.ptr152 = getelementptr inbounds i8, i8* %182, i64 4
  %183 = bitcast i8* %add.ptr152 to i32*
  %184 = load i32, i32* %183, align 4
  %conv153 = zext i32 %184 to i64
  %shl154 = shl i64 %conv153, 32
  %or155 = or i64 %conv151, %shl154
  %185 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_comp_size156 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %185, i32 0, i32 8
  store i64 %or155, i64* %m_comp_size156, align 8
  %186 = load i8*, i8** %pField_data, align 8
  %add.ptr157 = getelementptr inbounds i8, i8* %186, i64 8
  store i8* %add.ptr157, i8** %pField_data, align 8
  %187 = load i32, i32* %field_data_remaining, align 4
  %conv158 = zext i32 %187 to i64
  %sub159 = sub i64 %conv158, 8
  %conv160 = trunc i64 %sub159 to i32
  store i32 %conv160, i32* %field_data_remaining, align 4
  br label %if.end161

if.end161:                                        ; preds = %if.end150, %if.end140
  %188 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_local_header_ofs162 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %188, i32 0, i32 12
  %189 = load i64, i64* %m_local_header_ofs162, align 8
  %cmp163 = icmp eq i64 %189, 4294967295
  br i1 %cmp163, label %if.then165, label %if.end182

if.then165:                                       ; preds = %if.end161
  %190 = load i32, i32* %field_data_remaining, align 4
  %conv166 = zext i32 %190 to i64
  %cmp167 = icmp ult i64 %conv166, 8
  br i1 %cmp167, label %if.then169, label %if.end171

if.then169:                                       ; preds = %if.then165
  %191 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %191, %struct.mz_zip_archive** %pZip.addr.i195, align 8
  store i32 9, i32* %err_num.addr.i196, align 4
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i195, align 8
  %tobool.i197 = icmp ne %struct.mz_zip_archive* %192, null
  br i1 %tobool.i197, label %if.then.i199, label %mz_zip_set_error.exit200

if.then.i199:                                     ; preds = %if.then169
  %193 = load i32, i32* %err_num.addr.i196, align 4
  %194 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i195, align 8
  %m_last_error.i198 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %194, i32 0, i32 5
  store i32 %193, i32* %m_last_error.i198, align 4
  br label %mz_zip_set_error.exit200

mz_zip_set_error.exit200:                         ; preds = %if.then169, %if.then.i199
  store i32 0, i32* %retval, align 4
  br label %return

if.end171:                                        ; preds = %if.then165
  %195 = load i8*, i8** %pField_data, align 8
  %196 = bitcast i8* %195 to i32*
  %197 = load i32, i32* %196, align 4
  %conv172 = zext i32 %197 to i64
  %198 = load i8*, i8** %pField_data, align 8
  %add.ptr173 = getelementptr inbounds i8, i8* %198, i64 4
  %199 = bitcast i8* %add.ptr173 to i32*
  %200 = load i32, i32* %199, align 4
  %conv174 = zext i32 %200 to i64
  %shl175 = shl i64 %conv174, 32
  %or176 = or i64 %conv172, %shl175
  %201 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8
  %m_local_header_ofs177 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %201, i32 0, i32 12
  store i64 %or176, i64* %m_local_header_ofs177, align 8
  %202 = load i8*, i8** %pField_data, align 8
  %add.ptr178 = getelementptr inbounds i8, i8* %202, i64 8
  store i8* %add.ptr178, i8** %pField_data, align 8
  %203 = load i32, i32* %field_data_remaining, align 4
  %conv179 = zext i32 %203 to i64
  %sub180 = sub i64 %conv179, 8
  %conv181 = trunc i64 %sub180 to i32
  store i32 %conv181, i32* %field_data_remaining, align 4
  br label %if.end182

if.end182:                                        ; preds = %if.end171, %if.end161
  br label %do.end

if.end183:                                        ; preds = %if.end115
  %204 = load i32, i32* %field_data_size, align 4
  %conv184 = zext i32 %204 to i64
  %add185 = add i64 4, %conv184
  %205 = load i8*, i8** %pExtra_data, align 8
  %add.ptr186 = getelementptr inbounds i8, i8* %205, i64 %add185
  store i8* %add.ptr186, i8** %pExtra_data, align 8
  %206 = load i32, i32* %extra_size_remaining, align 4
  %conv187 = zext i32 %206 to i64
  %sub188 = sub i64 %conv187, 4
  %207 = load i32, i32* %field_data_size, align 4
  %conv189 = zext i32 %207 to i64
  %sub190 = sub i64 %sub188, %conv189
  %conv191 = trunc i64 %sub190 to i32
  store i32 %conv191, i32* %extra_size_remaining, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end183
  %208 = load i32, i32* %extra_size_remaining, align 4
  %tobool192 = icmp ne i32 %208, 0
  br i1 %tobool192, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.end182
  br label %if.end193

if.end193:                                        ; preds = %do.end, %if.then90
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %cond.end86
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end194, %mz_zip_set_error.exit200, %mz_zip_set_error.exit206, %mz_zip_set_error.exit212, %mz_zip_set_error.exit218, %mz_zip_set_error.exit224, %mz_zip_set_error.exit
  %209 = load i32, i32* %retval, align 4
  ret i32 %209
}

declare i32 @memcmp(i8*, i8*, i64) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mz_zip_compute_crc32_callback(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %p = alloca i32*, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %p, align 8
  %2 = load i64, i64* %file_ofs.addr, align 8
  %3 = load i32*, i32** %p, align 8
  %4 = load i32, i32* %3, align 4
  %conv = zext i32 %4 to i64
  %5 = load i8*, i8** %pBuf.addr, align 8
  %6 = load i64, i64* %n.addr, align 8
  %call = call i64 @mz_crc32(i64 %conv, i8* %5, i64 %6)
  %conv1 = trunc i64 %call to i32
  %7 = load i32*, i32** %p, align 8
  store i32 %conv1, i32* %7, align 4
  %8 = load i64, i64* %n.addr, align 8
  ret i64 %8
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_validate_archive(%struct.mz_zip_archive* %pZip, i32 %flags) #0 {
entry:
  %pZip.addr.i73 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i74 = alloca i32, align 4
  %pZip.addr.i67 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i68 = alloca i32, align 4
  %pZip.addr.i61 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i62 = alloca i32, align 4
  %pZip.addr.i55 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i56 = alloca i32, align 4
  %pZip.addr.i49 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i50 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %flags.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %i = alloca i32, align 4
  %found_index = alloca i32, align 4
  %stat = alloca %struct.mz_zip_archive_file_stat, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 7
  %4 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 8
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %tobool5 = icmp ne void (i8*, i8*)* %6, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 11
  %8 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool7 = icmp ne i64 (i8*, i64, i8*, i64)* %8, null
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %9, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %10, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %11 = load i32, i32* %err_num.addr.i, align 4
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 5
  store i32 %11, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false6
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState8 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 15
  %14 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState8, align 8
  store %struct.mz_zip_internal_state_tag* %14, %struct.mz_zip_internal_state_tag** %pState, align 8
  %15 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %15, i32 0, i32 4
  %16 = load i32, i32* %m_zip64, align 4
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %if.else, label %if.then10

if.then10:                                        ; preds = %if.end
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 2
  %18 = load i32, i32* %m_total_files, align 8
  %cmp = icmp ugt i32 %18, 65535
  br i1 %cmp, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.then10
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %19, %struct.mz_zip_archive** %pZip.addr.i49, align 8
  store i32 29, i32* %err_num.addr.i50, align 4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i49, align 8
  %tobool.i51 = icmp ne %struct.mz_zip_archive* %20, null
  br i1 %tobool.i51, label %if.then.i53, label %mz_zip_set_error.exit54

if.then.i53:                                      ; preds = %if.then11
  %21 = load i32, i32* %err_num.addr.i50, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i49, align 8
  %m_last_error.i52 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 5
  store i32 %21, i32* %m_last_error.i52, align 4
  br label %mz_zip_set_error.exit54

mz_zip_set_error.exit54:                          ; preds = %if.then11, %if.then.i53
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.then10
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 0
  %24 = load i64, i64* %m_archive_size, align 8
  %cmp14 = icmp ugt i64 %24, 4294967295
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end13
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %25, %struct.mz_zip_archive** %pZip.addr.i61, align 8
  store i32 29, i32* %err_num.addr.i62, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i61, align 8
  %tobool.i63 = icmp ne %struct.mz_zip_archive* %26, null
  br i1 %tobool.i63, label %if.then.i65, label %mz_zip_set_error.exit66

if.then.i65:                                      ; preds = %if.then15
  %27 = load i32, i32* %err_num.addr.i62, align 4
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i61, align 8
  %m_last_error.i64 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 5
  store i32 %27, i32* %m_last_error.i64, align 4
  br label %mz_zip_set_error.exit66

mz_zip_set_error.exit66:                          ; preds = %if.then15, %if.then.i65
  store i32 0, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end13
  br label %if.end27

if.else:                                          ; preds = %if.end
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files18 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 2
  %30 = load i32, i32* %m_total_files18, align 8
  %cmp19 = icmp uge i32 %30, -1
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.else
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %31, %struct.mz_zip_archive** %pZip.addr.i67, align 8
  store i32 29, i32* %err_num.addr.i68, align 4
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i67, align 8
  %tobool.i69 = icmp ne %struct.mz_zip_archive* %32, null
  br i1 %tobool.i69, label %if.then.i71, label %mz_zip_set_error.exit72

if.then.i71:                                      ; preds = %if.then20
  %33 = load i32, i32* %err_num.addr.i68, align 4
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i67, align 8
  %m_last_error.i70 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 5
  store i32 %33, i32* %m_last_error.i70, align 4
  br label %mz_zip_set_error.exit72

mz_zip_set_error.exit72:                          ; preds = %if.then20, %if.then.i71
  store i32 0, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.else
  %35 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %35, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %36 = load i64, i64* %m_size, align 8
  %cmp23 = icmp uge i64 %36, 4294967295
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end22
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %37, %struct.mz_zip_archive** %pZip.addr.i73, align 8
  store i32 29, i32* %err_num.addr.i74, align 4
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i73, align 8
  %tobool.i75 = icmp ne %struct.mz_zip_archive* %38, null
  br i1 %tobool.i75, label %if.then.i77, label %mz_zip_set_error.exit78

if.then.i77:                                      ; preds = %if.then24
  %39 = load i32, i32* %err_num.addr.i74, align 4
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i73, align 8
  %m_last_error.i76 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 5
  store i32 %39, i32* %m_last_error.i76, align 4
  br label %mz_zip_set_error.exit78

mz_zip_set_error.exit78:                          ; preds = %if.then24, %if.then.i77
  store i32 0, i32* %retval, align 4
  br label %return

if.end26:                                         ; preds = %if.end22
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end17
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end27
  %41 = load i32, i32* %i, align 4
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files28 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %42, i32 0, i32 2
  %43 = load i32, i32* %m_total_files28, align 8
  %cmp29 = icmp ult i32 %41, %43
  br i1 %cmp29, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %44 = load i32, i32* %flags.addr, align 4
  %and = and i32 4096, %44
  %tobool30 = icmp ne i32 %and, 0
  br i1 %tobool30, label %if.then31, label %if.end44

if.then31:                                        ; preds = %for.body
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %46 = load i32, i32* %i, align 4
  %call32 = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %45, i32 %46, %struct.mz_zip_archive_file_stat* %stat)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %if.then31
  store i32 0, i32* %retval, align 4
  br label %return

if.end35:                                         ; preds = %if.then31
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_filename = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %stat, i32 0, i32 17
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename, i32 0, i32 0
  %call36 = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %47, i8* %arraydecay, i8* null, i32 0, i32* %found_index)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end39, label %if.then38

if.then38:                                        ; preds = %if.end35
  store i32 0, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end35
  %48 = load i32, i32* %found_index, align 4
  %49 = load i32, i32* %i, align 4
  %cmp40 = icmp ne i32 %48, %49
  br i1 %cmp40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end39
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %50, %struct.mz_zip_archive** %pZip.addr.i55, align 8
  store i32 30, i32* %err_num.addr.i56, align 4
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i55, align 8
  %tobool.i57 = icmp ne %struct.mz_zip_archive* %51, null
  br i1 %tobool.i57, label %if.then.i59, label %mz_zip_set_error.exit60

if.then.i59:                                      ; preds = %if.then41
  %52 = load i32, i32* %err_num.addr.i56, align 4
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i55, align 8
  %m_last_error.i58 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %53, i32 0, i32 5
  store i32 %52, i32* %m_last_error.i58, align 4
  br label %mz_zip_set_error.exit60

mz_zip_set_error.exit60:                          ; preds = %if.then41, %if.then.i59
  store i32 0, i32* %retval, align 4
  br label %return

if.end43:                                         ; preds = %if.end39
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.body
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %55 = load i32, i32* %i, align 4
  %56 = load i32, i32* %flags.addr, align 4
  %call45 = call i32 @mz_zip_validate_file(%struct.mz_zip_archive* %54, i32 %55, i32 %56)
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.end48, label %if.then47

if.then47:                                        ; preds = %if.end44
  store i32 0, i32* %retval, align 4
  br label %return

if.end48:                                         ; preds = %if.end44
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %57 = load i32, i32* %i, align 4
  %inc = add i32 %57, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then47, %mz_zip_set_error.exit60, %if.then38, %if.then34, %mz_zip_set_error.exit78, %mz_zip_set_error.exit72, %mz_zip_set_error.exit66, %mz_zip_set_error.exit54, %mz_zip_set_error.exit
  %58 = load i32, i32* %retval, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_validate_mem_archive(i8* %pMem, i64 %size, i32 %flags, i32* %pErr) #0 {
entry:
  %retval = alloca i32, align 4
  %pMem.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pErr.addr = alloca i32*, align 8
  %success = alloca i32, align 4
  %zip = alloca %struct.mz_zip_archive, align 8
  %actual_err = alloca i32, align 4
  store i8* %pMem, i8** %pMem.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32* %pErr, i32** %pErr.addr, align 8
  store i32 1, i32* %success, align 4
  store i32 0, i32* %actual_err, align 4
  %0 = load i8*, i8** %pMem.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %size.addr, align 8
  %tobool1 = icmp ne i64 %1, 0
  br i1 %tobool1, label %if.end4, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i32*, i32** %pErr.addr, align 8
  %tobool2 = icmp ne i32* %2, null
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %3 = load i32*, i32** %pErr.addr, align 8
  store i32 24, i32* %3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %lor.lhs.false
  call void @mz_zip_zero_struct(%struct.mz_zip_archive* %zip)
  %4 = load i8*, i8** %pMem.addr, align 8
  %5 = load i64, i64* %size.addr, align 8
  %6 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_init_mem(%struct.mz_zip_archive* %zip, i8* %4, i64 %5, i32 %6)
  %tobool5 = icmp ne i32 %call, 0
  br i1 %tobool5, label %if.end10, label %if.then6

if.then6:                                         ; preds = %if.end4
  %7 = load i32*, i32** %pErr.addr, align 8
  %tobool7 = icmp ne i32* %7, null
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.then6
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %8 = load i32, i32* %m_last_error, align 4
  %9 = load i32*, i32** %pErr.addr, align 8
  store i32 %8, i32* %9, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then6
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end4
  %10 = load i32, i32* %flags.addr, align 4
  %call11 = call i32 @mz_zip_validate_archive(%struct.mz_zip_archive* %zip, i32 %10)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end15, label %if.then13

if.then13:                                        ; preds = %if.end10
  %m_last_error14 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %11 = load i32, i32* %m_last_error14, align 4
  store i32 %11, i32* %actual_err, align 4
  store i32 0, i32* %success, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end10
  %12 = load i32, i32* %success, align 4
  %call16 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %zip, i32 %12)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end23, label %if.then18

if.then18:                                        ; preds = %if.end15
  %13 = load i32, i32* %actual_err, align 4
  %tobool19 = icmp ne i32 %13, 0
  br i1 %tobool19, label %if.end22, label %if.then20

if.then20:                                        ; preds = %if.then18
  %m_last_error21 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %14 = load i32, i32* %m_last_error21, align 4
  store i32 %14, i32* %actual_err, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.then18
  store i32 0, i32* %success, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.end15
  %15 = load i32*, i32** %pErr.addr, align 8
  %tobool24 = icmp ne i32* %15, null
  br i1 %tobool24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end23
  %16 = load i32, i32* %actual_err, align 4
  %17 = load i32*, i32** %pErr.addr, align 8
  store i32 %16, i32* %17, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %if.end23
  %18 = load i32, i32* %success, align 4
  store i32 %18, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end26, %if.end9, %if.end
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_validate_file_archive(i8* %pFilename, i32 %flags, i32* %pErr) #0 {
entry:
  %retval = alloca i32, align 4
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pErr.addr = alloca i32*, align 8
  %success = alloca i32, align 4
  %zip = alloca %struct.mz_zip_archive, align 8
  %actual_err = alloca i32, align 4
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32* %pErr, i32** %pErr.addr, align 8
  store i32 1, i32* %success, align 4
  store i32 0, i32* %actual_err, align 4
  %0 = load i8*, i8** %pFilename.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end3, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %pErr.addr, align 8
  %tobool1 = icmp ne i32* %1, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load i32*, i32** %pErr.addr, align 8
  store i32 24, i32* %2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %entry
  call void @mz_zip_zero_struct(%struct.mz_zip_archive* %zip)
  %3 = load i8*, i8** %pFilename.addr, align 8
  %4 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %zip, i8* %3, i32 %4, i64 0, i64 0)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.end9, label %if.then5

if.then5:                                         ; preds = %if.end3
  %5 = load i32*, i32** %pErr.addr, align 8
  %tobool6 = icmp ne i32* %5, null
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then5
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %6 = load i32, i32* %m_last_error, align 4
  %7 = load i32*, i32** %pErr.addr, align 8
  store i32 %6, i32* %7, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.then5
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.end3
  %8 = load i32, i32* %flags.addr, align 4
  %call10 = call i32 @mz_zip_validate_archive(%struct.mz_zip_archive* %zip, i32 %8)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.end9
  %m_last_error13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %9 = load i32, i32* %m_last_error13, align 4
  store i32 %9, i32* %actual_err, align 4
  store i32 0, i32* %success, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end9
  %10 = load i32, i32* %success, align 4
  %call15 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %zip, i32 %10)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end22, label %if.then17

if.then17:                                        ; preds = %if.end14
  %11 = load i32, i32* %actual_err, align 4
  %tobool18 = icmp ne i32 %11, 0
  br i1 %tobool18, label %if.end21, label %if.then19

if.then19:                                        ; preds = %if.then17
  %m_last_error20 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %12 = load i32, i32* %m_last_error20, align 4
  store i32 %12, i32* %actual_err, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.then17
  store i32 0, i32* %success, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end14
  %13 = load i32*, i32** %pErr.addr, align 8
  %tobool23 = icmp ne i32* %13, null
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end22
  %14 = load i32, i32* %actual_err, align 4
  %15 = load i32*, i32** %pErr.addr, align 8
  store i32 %14, i32* %15, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.end22
  %16 = load i32, i32* %success, align 4
  store i32 %16, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end25, %if.end8, %if.end
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %pZip, i64 %existing_size, i32 %flags) #0 {
entry:
  %pZip.addr.i68 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i69 = alloca i32, align 4
  %pZip.addr.i62 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i63 = alloca i32, align 4
  %pZip.addr.i56 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i57 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %existing_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %zip64 = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i64 %existing_size, i64* %existing_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 16384
  %cmp = icmp ne i32 %and, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %zip64, align 4
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 12
  %5 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %tobool3 = icmp ne i64 (i8*, i64, i8*, i64)* %5, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 3
  %7 = load i32, i32* %m_zip_mode, align 4
  %cmp5 = icmp ne i32 %7, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %8, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %9, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %10 = load i32, i32* %err_num.addr.i, align 4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 5
  store i32 %10, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %12 = load i32, i32* %flags.addr, align 4
  %and7 = and i32 %12, 32768
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 11
  %14 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool10 = icmp ne i64 (i8*, i64, i8*, i64)* %14, null
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.then9
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %15, %struct.mz_zip_archive** %pZip.addr.i62, align 8
  store i32 24, i32* %err_num.addr.i63, align 4
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i62, align 8
  %tobool.i64 = icmp ne %struct.mz_zip_archive* %16, null
  br i1 %tobool.i64, label %if.then.i66, label %mz_zip_set_error.exit67

if.then.i66:                                      ; preds = %if.then11
  %17 = load i32, i32* %err_num.addr.i63, align 4
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i62, align 8
  %m_last_error.i65 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 5
  store i32 %17, i32* %m_last_error.i65, align 4
  br label %mz_zip_set_error.exit67

mz_zip_set_error.exit67:                          ; preds = %if.then11, %if.then.i66
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.then9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 6
  %20 = load i64, i64* %m_file_offset_alignment, align 8
  %tobool15 = icmp ne i64 %20, 0
  br i1 %tobool15, label %if.then16, label %if.end24

if.then16:                                        ; preds = %if.end14
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment17 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 6
  %22 = load i64, i64* %m_file_offset_alignment17, align 8
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment18 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 6
  %24 = load i64, i64* %m_file_offset_alignment18, align 8
  %sub = sub i64 %24, 1
  %and19 = and i64 %22, %sub
  %tobool20 = icmp ne i64 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.then16
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %25, %struct.mz_zip_archive** %pZip.addr.i68, align 8
  store i32 24, i32* %err_num.addr.i69, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i68, align 8
  %tobool.i70 = icmp ne %struct.mz_zip_archive* %26, null
  br i1 %tobool.i70, label %if.then.i72, label %mz_zip_set_error.exit73

if.then.i72:                                      ; preds = %if.then21
  %27 = load i32, i32* %err_num.addr.i69, align 4
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i68, align 8
  %m_last_error.i71 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 5
  store i32 %27, i32* %m_last_error.i71, align 4
  br label %mz_zip_set_error.exit73

mz_zip_set_error.exit73:                          ; preds = %if.then21, %if.then.i72
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.then16
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end14
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 7
  %30 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool25 = icmp ne i8* (i8*, i64, i64)* %30, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc27 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 7
  store i8* (i8*, i64, i64)* @miniz_def_alloc_func, i8* (i8*, i64, i64)** %m_pAlloc27, align 8
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 8
  %33 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %tobool29 = icmp ne void (i8*, i8*)* %33, null
  br i1 %tobool29, label %if.end32, label %if.then30

if.then30:                                        ; preds = %if.end28
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 8
  store void (i8*, i8*)* @miniz_def_free_func, void (i8*, i8*)** %m_pFree31, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 9
  %36 = load i8* (i8*, i8*, i64, i64)*, i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8
  %tobool33 = icmp ne i8* (i8*, i8*, i64, i64)* %36, null
  br i1 %tobool33, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRealloc35 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %37, i32 0, i32 9
  store i8* (i8*, i8*, i64, i64)* @miniz_def_realloc_func, i8* (i8*, i8*, i64, i64)** %m_pRealloc35, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %38 = load i64, i64* %existing_size.addr, align 8
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %39, i32 0, i32 0
  store i64 %38, i64* %m_archive_size, align 8
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs, align 8
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %41, i32 0, i32 2
  store i32 0, i32* %m_total_files, align 8
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc37 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %42, i32 0, i32 7
  %43 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc37, align 8
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 10
  %45 = load i8*, i8** %m_pAlloc_opaque, align 8
  %call38 = call i8* %43(i8* %45, i64 1, i64 152)
  %46 = bitcast i8* %call38 to %struct.mz_zip_internal_state_tag*
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState39 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %47, i32 0, i32 15
  store %struct.mz_zip_internal_state_tag* %46, %struct.mz_zip_internal_state_tag** %m_pState39, align 8
  %cmp40 = icmp eq %struct.mz_zip_internal_state_tag* null, %46
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.end36
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %48, %struct.mz_zip_archive** %pZip.addr.i56, align 8
  store i32 16, i32* %err_num.addr.i57, align 4
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i56, align 8
  %tobool.i58 = icmp ne %struct.mz_zip_archive* %49, null
  br i1 %tobool.i58, label %if.then.i60, label %mz_zip_set_error.exit61

if.then.i60:                                      ; preds = %if.then42
  %50 = load i32, i32* %err_num.addr.i57, align 4
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i56, align 8
  %m_last_error.i59 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %51, i32 0, i32 5
  store i32 %50, i32* %m_last_error.i59, align 4
  br label %mz_zip_set_error.exit61

mz_zip_set_error.exit61:                          ; preds = %if.then42, %if.then.i60
  store i32 0, i32* %retval, align 4
  br label %return

if.end44:                                         ; preds = %if.end36
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState45 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %52, i32 0, i32 15
  %53 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState45, align 8
  %54 = bitcast %struct.mz_zip_internal_state_tag* %53 to i8*
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState46 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %55, i32 0, i32 15
  %56 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState46, align 8
  %57 = bitcast %struct.mz_zip_internal_state_tag* %56 to i8*
  %58 = call i64 @llvm.objectsize.i64.p0i8(i8* %57, i1 false)
  %call47 = call i8* @__memset_chk(i8* %54, i32 0, i64 152, i64 %58) #10
  %59 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState48 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %59, i32 0, i32 15
  %60 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState48, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %60, i32 0, i32 0
  %m_element_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 3
  store i32 1, i32* %m_element_size, align 8
  %61 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState49 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %61, i32 0, i32 15
  %62 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState49, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %62, i32 0, i32 1
  %m_element_size50 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size50, align 8
  %63 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState51 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %63, i32 0, i32 15
  %64 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState51, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %64, i32 0, i32 2
  %m_element_size52 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size52, align 8
  %65 = load i32, i32* %zip64, align 4
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState53 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %66, i32 0, i32 15
  %67 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState53, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %67, i32 0, i32 4
  store i32 %65, i32* %m_zip64, align 4
  %68 = load i32, i32* %zip64, align 4
  %69 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState54 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %69, i32 0, i32 15
  %70 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState54, align 8
  %m_zip64_has_extended_info_fields = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %70, i32 0, i32 5
  store i32 %68, i32* %m_zip64_has_extended_info_fields, align 8
  %71 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %71, i32 0, i32 4
  store i32 1, i32* %m_zip_type, align 8
  %72 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode55 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %72, i32 0, i32 3
  store i32 2, i32* %m_zip_mode55, align 4
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end44, %mz_zip_set_error.exit61, %mz_zip_set_error.exit73, %mz_zip_set_error.exit67, %mz_zip_set_error.exit
  %73 = load i32, i32* %retval, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init(%struct.mz_zip_archive* %pZip, i64 %existing_size) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %existing_size.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i64 %existing_size, i64* %existing_size.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i64, i64* %existing_size.addr, align 8
  %call = call i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %0, i64 %1, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init_heap_v2(%struct.mz_zip_archive* %pZip, i64 %size_to_reserve_at_beginning, i64 %initial_allocation_size, i32 %flags) #0 {
entry:
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  %initial_allocation_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8
  store i64 %initial_allocation_size, i64* %initial_allocation_size.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_heap_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %and = and i32 %2, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_mem_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %5 = bitcast %struct.mz_zip_archive* %4 to i8*
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 14
  store i8* %5, i8** %m_pIO_opaque, align 8
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %8 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %7, i64 %8, i32 %9)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 4
  store i32 3, i32* %m_zip_type, align 8
  %11 = load i64, i64* %initial_allocation_size.addr, align 8
  %12 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %cmp = icmp ugt i64 %11, %12
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end3
  %13 = load i64, i64* %initial_allocation_size.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end3
  %14 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %13, %cond.true ], [ %14, %cond.false ]
  store i64 %cond, i64* %initial_allocation_size.addr, align 8
  %cmp4 = icmp ne i64 0, %cond
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %cond.end
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 7
  %16 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 10
  %18 = load i8*, i8** %m_pAlloc_opaque, align 8
  %19 = load i64, i64* %initial_allocation_size.addr, align 8
  %call6 = call i8* %16(i8* %18, i64 1, i64 %19)
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 15
  %21 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %21, i32 0, i32 8
  store i8* %call6, i8** %m_pMem, align 8
  %cmp7 = icmp eq i8* null, %call6
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.then5
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call9 = call i32 @mz_zip_writer_end_internal(%struct.mz_zip_archive* %22, i32 0)
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %23, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 16, i32* %err_num.addr.i, align 4
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %24, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then8
  %25 = load i32, i32* %err_num.addr.i, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 5
  store i32 %25, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then8, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.then5
  %27 = load i64, i64* %initial_allocation_size.addr, align 8
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState12 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 15
  %29 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState12, align 8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %29, i32 0, i32 10
  store i64 %27, i64* %m_mem_capacity, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.end11, %cond.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end13, %mz_zip_set_error.exit, %if.then2
  %30 = load i32, i32* %retval, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mz_zip_heap_write_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %new_size = alloca i64, align 8
  %pNew_block = alloca i8*, align 8
  %new_capacity = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_archive*
  store %struct.mz_zip_archive* %1, %struct.mz_zip_archive** %pZip, align 8
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  store %struct.mz_zip_internal_state_tag* %3, %struct.mz_zip_internal_state_tag** %pState, align 8
  %4 = load i64, i64* %file_ofs.addr, align 8
  %5 = load i64, i64* %n.addr, align 8
  %add = add i64 %4, %5
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %6, i32 0, i32 9
  %7 = load i64, i64* %m_mem_size, align 8
  %cmp = icmp ugt i64 %add, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i64, i64* %file_ofs.addr, align 8
  %9 = load i64, i64* %n.addr, align 8
  %add1 = add i64 %8, %9
  br label %cond.end

cond.false:                                       ; preds = %entry
  %10 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_size2 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %10, i32 0, i32 9
  %11 = load i64, i64* %m_mem_size2, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add1, %cond.true ], [ %11, %cond.false ]
  store i64 %cond, i64* %new_size, align 8
  %12 = load i64, i64* %n.addr, align 8
  %tobool = icmp ne i64 %12, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end
  %13 = load i64, i64* %new_size, align 8
  %14 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %14, i32 0, i32 10
  %15 = load i64, i64* %m_mem_capacity, align 8
  %cmp3 = icmp ugt i64 %13, %15
  br i1 %cmp3, label %if.then4, label %if.end19

if.then4:                                         ; preds = %if.end
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity5 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %16, i32 0, i32 10
  %17 = load i64, i64* %m_mem_capacity5, align 8
  %cmp6 = icmp ugt i64 64, %17
  br i1 %cmp6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.then4
  br label %cond.end10

cond.false8:                                      ; preds = %if.then4
  %18 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity9 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %18, i32 0, i32 10
  %19 = load i64, i64* %m_mem_capacity9, align 8
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false8, %cond.true7
  %cond11 = phi i64 [ 64, %cond.true7 ], [ %19, %cond.false8 ]
  store i64 %cond11, i64* %new_capacity, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end10
  %20 = load i64, i64* %new_capacity, align 8
  %21 = load i64, i64* %new_size, align 8
  %cmp12 = icmp ult i64 %20, %21
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %22 = load i64, i64* %new_capacity, align 8
  %mul = mul i64 %22, 2
  store i64 %mul, i64* %new_capacity, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 9
  %24 = load i8* (i8*, i8*, i64, i64)*, i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 10
  %26 = load i8*, i8** %m_pAlloc_opaque, align 8
  %27 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %27, i32 0, i32 8
  %28 = load i8*, i8** %m_pMem, align 8
  %29 = load i64, i64* %new_capacity, align 8
  %call = call i8* %24(i8* %26, i8* %28, i64 1, i64 %29)
  store i8* %call, i8** %pNew_block, align 8
  %cmp13 = icmp eq i8* null, %call
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %while.end
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  store %struct.mz_zip_archive* %30, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 16, i32* %err_num.addr.i, align 4
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %31, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then14
  %32 = load i32, i32* %err_num.addr.i, align 4
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 5
  store i32 %32, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then14, %if.then.i
  store i64 0, i64* %retval, align 8
  br label %return

if.end16:                                         ; preds = %while.end
  %34 = load i8*, i8** %pNew_block, align 8
  %35 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem17 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %35, i32 0, i32 8
  store i8* %34, i8** %m_pMem17, align 8
  %36 = load i64, i64* %new_capacity, align 8
  %37 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity18 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %37, i32 0, i32 10
  store i64 %36, i64* %m_mem_capacity18, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.end16, %if.end
  %38 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem20 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %38, i32 0, i32 8
  %39 = load i8*, i8** %m_pMem20, align 8
  %40 = load i64, i64* %file_ofs.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %39, i64 %40
  %41 = load i8*, i8** %pBuf.addr, align 8
  %42 = load i64, i64* %n.addr, align 8
  %43 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem21 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %43, i32 0, i32 8
  %44 = load i8*, i8** %m_pMem21, align 8
  %45 = load i64, i64* %file_ofs.addr, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %44, i64 %45
  %46 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr22, i1 false)
  %call23 = call i8* @__memcpy_chk(i8* %add.ptr, i8* %41, i64 %42, i64 %46) #10
  %47 = load i64, i64* %new_size, align 8
  %48 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_size24 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %48, i32 0, i32 9
  store i64 %47, i64* %m_mem_size24, align 8
  %49 = load i64, i64* %n.addr, align 8
  store i64 %49, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end19, %mz_zip_set_error.exit, %if.then
  %50 = load i64, i64* %retval, align 8
  ret i64 %50
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_end_internal(%struct.mz_zip_archive* %pZip, i32 %set_last_error) #0 {
entry:
  %pZip.addr.i54 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i55 = alloca i32, align 4
  %pZip.addr.i48 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i49 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i42 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i43 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i41 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %set_last_error.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %status = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %set_last_error, i32* %set_last_error.addr, align 4
  store i32 1, i32* %status, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 7
  %4 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 8
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %tobool5 = icmp ne void (i8*, i8*)* %6, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 3
  %8 = load i32, i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %8, 2
  br i1 %cmp, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %lor.lhs.false6
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 3
  %10 = load i32, i32* %m_zip_mode7, align 4
  %cmp8 = icmp ne i32 %10, 3
  br i1 %cmp8, label %if.then, label %if.end11

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %11 = load i32, i32* %set_last_error.addr, align 4
  %tobool9 = icmp ne i32 %11, 0
  br i1 %tobool9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %12, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %13, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then10
  %14 = load i32, i32* %err_num.addr.i, align 4
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 5
  store i32 %14, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then10, %if.then.i
  br label %if.end

if.end:                                           ; preds = %mz_zip_set_error.exit, %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %land.lhs.true, %lor.lhs.false6
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState12 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 15
  %17 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState12, align 8
  store %struct.mz_zip_internal_state_tag* %17, %struct.mz_zip_internal_state_tag** %pState, align 8
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 15
  store %struct.mz_zip_internal_state_tag* null, %struct.mz_zip_internal_state_tag** %m_pState13, align 8
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %20 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %20, i32 0, i32 0
  store %struct.mz_zip_archive* %19, %struct.mz_zip_archive** %pZip.addr.i41, align 8
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pArray.addr.i, align 8
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i41, align 8
  %m_pFree.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 8
  %22 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i, align 8
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i41, align 8
  %m_pAlloc_opaque.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 10
  %24 = load i8*, i8** %m_pAlloc_opaque.i, align 8
  %25 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %25, i32 0, i32 0
  %26 = load i8*, i8** %m_p.i, align 8
  call void %22(i8* %24, i8* %26) #10
  %27 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %28 = bitcast %struct.mz_zip_array* %27 to i8*
  %29 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %30 = bitcast %struct.mz_zip_array* %29 to i8*
  %31 = call i64 @llvm.objectsize.i64.p0i8(i8* %30, i1 false) #10
  %call.i = call i8* @__memset_chk(i8* %28, i32 0, i64 32, i64 %31) #10
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %33 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %33, i32 0, i32 1
  store %struct.mz_zip_archive* %32, %struct.mz_zip_archive** %pZip.addr.i42, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i43, align 8
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i42, align 8
  %m_pFree.i44 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 8
  %35 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i44, align 8
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i42, align 8
  %m_pAlloc_opaque.i45 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 10
  %37 = load i8*, i8** %m_pAlloc_opaque.i45, align 8
  %38 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i43, align 8
  %m_p.i46 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %38, i32 0, i32 0
  %39 = load i8*, i8** %m_p.i46, align 8
  call void %35(i8* %37, i8* %39) #10
  %40 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i43, align 8
  %41 = bitcast %struct.mz_zip_array* %40 to i8*
  %42 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i43, align 8
  %43 = bitcast %struct.mz_zip_array* %42 to i8*
  %44 = call i64 @llvm.objectsize.i64.p0i8(i8* %43, i1 false) #10
  %call.i47 = call i8* @__memset_chk(i8* %41, i32 0, i64 32, i64 %44) #10
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %46 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %46, i32 0, i32 2
  store %struct.mz_zip_archive* %45, %struct.mz_zip_archive** %pZip.addr.i48, align 8
  store %struct.mz_zip_array* %m_sorted_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i49, align 8
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i48, align 8
  %m_pFree.i50 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %47, i32 0, i32 8
  %48 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i50, align 8
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i48, align 8
  %m_pAlloc_opaque.i51 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %49, i32 0, i32 10
  %50 = load i8*, i8** %m_pAlloc_opaque.i51, align 8
  %51 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i49, align 8
  %m_p.i52 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %51, i32 0, i32 0
  %52 = load i8*, i8** %m_p.i52, align 8
  call void %48(i8* %50, i8* %52) #10
  %53 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i49, align 8
  %54 = bitcast %struct.mz_zip_array* %53 to i8*
  %55 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i49, align 8
  %56 = bitcast %struct.mz_zip_array* %55 to i8*
  %57 = call i64 @llvm.objectsize.i64.p0i8(i8* %56, i1 false) #10
  %call.i53 = call i8* @__memset_chk(i8* %54, i32 0, i64 32, i64 %57) #10
  %58 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %58, i32 0, i32 6
  %59 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8
  %tobool14 = icmp ne %struct.__sFILE* %59, null
  br i1 %tobool14, label %if.then15, label %if.end29

if.then15:                                        ; preds = %if.end11
  %60 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %60, i32 0, i32 4
  %61 = load i32, i32* %m_zip_type, align 8
  %cmp16 = icmp eq i32 %61, 4
  br i1 %cmp16, label %if.then17, label %if.end27

if.then17:                                        ; preds = %if.then15
  %62 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile18 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %62, i32 0, i32 6
  %63 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile18, align 8
  %call19 = call i32 @fclose(%struct.__sFILE* %63)
  %cmp20 = icmp eq i32 %call19, -1
  br i1 %cmp20, label %if.then21, label %if.end26

if.then21:                                        ; preds = %if.then17
  %64 = load i32, i32* %set_last_error.addr, align 4
  %tobool22 = icmp ne i32 %64, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.then21
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %65, %struct.mz_zip_archive** %pZip.addr.i54, align 8
  store i32 21, i32* %err_num.addr.i55, align 4
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i54, align 8
  %tobool.i56 = icmp ne %struct.mz_zip_archive* %66, null
  br i1 %tobool.i56, label %if.then.i58, label %mz_zip_set_error.exit59

if.then.i58:                                      ; preds = %if.then23
  %67 = load i32, i32* %err_num.addr.i55, align 4
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i54, align 8
  %m_last_error.i57 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %68, i32 0, i32 5
  store i32 %67, i32* %m_last_error.i57, align 4
  br label %mz_zip_set_error.exit59

mz_zip_set_error.exit59:                          ; preds = %if.then23, %if.then.i58
  br label %if.end25

if.end25:                                         ; preds = %mz_zip_set_error.exit59, %if.then21
  store i32 0, i32* %status, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then17
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then15
  %69 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile28 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %69, i32 0, i32 6
  store %struct.__sFILE* null, %struct.__sFILE** %m_pFile28, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.end27, %if.end11
  %70 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %70, i32 0, i32 12
  %71 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %cmp30 = icmp eq i64 (i8*, i64, i8*, i64)* %71, @mz_zip_heap_write_func
  br i1 %cmp30, label %land.lhs.true31, label %if.end37

land.lhs.true31:                                  ; preds = %if.end29
  %72 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %72, i32 0, i32 8
  %73 = load i8*, i8** %m_pMem, align 8
  %tobool32 = icmp ne i8* %73, null
  br i1 %tobool32, label %if.then33, label %if.end37

if.then33:                                        ; preds = %land.lhs.true31
  %74 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree34 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %74, i32 0, i32 8
  %75 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree34, align 8
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %76, i32 0, i32 10
  %77 = load i8*, i8** %m_pAlloc_opaque, align 8
  %78 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem35 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %78, i32 0, i32 8
  %79 = load i8*, i8** %m_pMem35, align 8
  call void %75(i8* %77, i8* %79)
  %80 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem36 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %80, i32 0, i32 8
  store i8* null, i8** %m_pMem36, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %land.lhs.true31, %if.end29
  %81 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree38 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %81, i32 0, i32 8
  %82 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree38, align 8
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque39 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %83, i32 0, i32 10
  %84 = load i8*, i8** %m_pAlloc_opaque39, align 8
  %85 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %86 = bitcast %struct.mz_zip_internal_state_tag* %85 to i8*
  call void %82(i8* %84, i8* %86)
  %87 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode40 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %87, i32 0, i32 3
  store i32 0, i32* %m_zip_mode40, align 4
  %88 = load i32, i32* %status, align 4
  store i32 %88, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end37, %if.end
  %89 = load i32, i32* %retval, align 4
  ret i32 %89
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init_heap(%struct.mz_zip_archive* %pZip, i64 %size_to_reserve_at_beginning, i64 %initial_allocation_size) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  %initial_allocation_size.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8
  store i64 %initial_allocation_size, i64* %initial_allocation_size.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %2 = load i64, i64* %initial_allocation_size.addr, align 8
  %call = call i32 @mz_zip_writer_init_heap_v2(%struct.mz_zip_archive* %0, i64 %1, i64 %2, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init_file(%struct.mz_zip_archive* %pZip, i8* %pFilename, i64 %size_to_reserve_at_beginning) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pFilename.addr, align 8
  %2 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %call = call i32 @mz_zip_writer_init_file_v2(%struct.mz_zip_archive* %0, i8* %1, i64 %2, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init_file_v2(%struct.mz_zip_archive* %pZip, i8* %pFilename, i64 %size_to_reserve_at_beginning, i32 %flags) #0 {
entry:
  %pZip.addr.i25 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i26 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pFile = alloca %struct.__sFILE*, align 8
  %cur_ofs = alloca i64, align 8
  %buf = alloca [4096 x i8], align 16
  %n = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %and = and i32 %2, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %5 = bitcast %struct.mz_zip_archive* %4 to i8*
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 14
  store i8* %5, i8** %m_pIO_opaque, align 8
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %8 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %9 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %7, i64 %8, i32 %9)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %10 = load i8*, i8** %pFilename.addr, align 8
  %11 = load i32, i32* %flags.addr, align 4
  %and4 = and i32 %11, 32768
  %tobool5 = icmp ne i32 %and4, 0
  %cond = select i1 %tobool5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0)
  %call6 = call %struct.__sFILE* @"\01_fopen"(i8* %10, i8* %cond)
  store %struct.__sFILE* %call6, %struct.__sFILE** %pFile, align 8
  %cmp = icmp eq %struct.__sFILE* null, %call6
  br i1 %cmp, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.end3
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call8 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive* %12)
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %13, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 17, i32* %err_num.addr.i, align 4
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %14, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then7
  %15 = load i32, i32* %err_num.addr.i, align 4
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 5
  store i32 %15, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then7, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end3
  %17 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 15
  %19 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %19, i32 0, i32 6
  store %struct.__sFILE* %17, %struct.__sFILE** %m_pFile, align 8
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 4
  store i32 4, i32* %m_zip_type, align 8
  %21 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %tobool11 = icmp ne i64 %21, 0
  br i1 %tobool11, label %if.then12, label %if.end24

if.then12:                                        ; preds = %if.end10
  store i64 0, i64* %cur_ofs, align 8
  %22 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 4096, i32 16, i1 false)
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then12
  %23 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %cmp13 = icmp ult i64 4096, %23
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %24 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond14 = phi i64 [ 4096, %cond.true ], [ %24, %cond.false ]
  store i64 %cond14, i64* %n, align 8
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 12
  %26 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite15, align 8
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque16 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %27, i32 0, i32 14
  %28 = load i8*, i8** %m_pIO_opaque16, align 8
  %29 = load i64, i64* %cur_ofs, align 8
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i32 0, i32 0
  %30 = load i64, i64* %n, align 8
  %call17 = call i64 %26(i8* %28, i64 %29, i8* %arraydecay, i64 %30)
  %31 = load i64, i64* %n, align 8
  %cmp18 = icmp ne i64 %call17, %31
  br i1 %cmp18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %cond.end
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call20 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive* %32)
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %33, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  store i32 19, i32* %err_num.addr.i26, align 4
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  %tobool.i27 = icmp ne %struct.mz_zip_archive* %34, null
  br i1 %tobool.i27, label %if.then.i29, label %mz_zip_set_error.exit30

if.then.i29:                                      ; preds = %if.then19
  %35 = load i32, i32* %err_num.addr.i26, align 4
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i25, align 8
  %m_last_error.i28 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 5
  store i32 %35, i32* %m_last_error.i28, align 4
  br label %mz_zip_set_error.exit30

mz_zip_set_error.exit30:                          ; preds = %if.then19, %if.then.i29
  store i32 0, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %cond.end
  %37 = load i64, i64* %n, align 8
  %38 = load i64, i64* %cur_ofs, align 8
  %add = add i64 %38, %37
  store i64 %add, i64* %cur_ofs, align 8
  %39 = load i64, i64* %n, align 8
  %40 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %sub = sub i64 %40, %39
  store i64 %sub, i64* %size_to_reserve_at_beginning.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end22
  %41 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8
  %tobool23 = icmp ne i64 %41, 0
  br i1 %tobool23, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end24

if.end24:                                         ; preds = %do.end, %if.end10
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end24, %mz_zip_set_error.exit30, %mz_zip_set_error.exit, %if.then2
  %42 = load i32, i32* %retval, align 4
  ret i32 %42
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mz_zip_file_write_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive*, align 8
  %cur_ofs = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_archive*
  store %struct.mz_zip_archive* %1, %struct.mz_zip_archive** %pZip, align 8
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %3, i32 0, i32 6
  %4 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8
  %call = call i64 @ftello(%struct.__sFILE* %4)
  store i64 %call, i64* %cur_ofs, align 8
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 15
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState1, align 8
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %6, i32 0, i32 7
  %7 = load i64, i64* %m_file_archive_start_ofs, align 8
  %8 = load i64, i64* %file_ofs.addr, align 8
  %add = add i64 %8, %7
  store i64 %add, i64* %file_ofs.addr, align 8
  %9 = load i64, i64* %file_ofs.addr, align 8
  %cmp = icmp slt i64 %9, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %10 = load i64, i64* %cur_ofs, align 8
  %11 = load i64, i64* %file_ofs.addr, align 8
  %cmp2 = icmp ne i64 %10, %11
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 15
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8
  %m_pFile4 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %13, i32 0, i32 6
  %14 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile4, align 8
  %15 = load i64, i64* %file_ofs.addr, align 8
  %call5 = call i32 @fseeko(%struct.__sFILE* %14, i64 %15, i32 0)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  store %struct.mz_zip_archive* %16, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 22, i32* %err_num.addr.i, align 4
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %17, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %18 = load i32, i32* %err_num.addr.i, align 4
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 5
  store i32 %18, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %20 = load i8*, i8** %pBuf.addr, align 8
  %21 = load i64, i64* %n.addr, align 8
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8
  %m_pState7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 15
  %23 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState7, align 8
  %m_pFile8 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %23, i32 0, i32 6
  %24 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile8, align 8
  %call9 = call i64 @"\01_fwrite"(i8* %20, i64 1, i64 %21, %struct.__sFILE* %24)
  store i64 %call9, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %mz_zip_set_error.exit
  %25 = load i64, i64* %retval, align 8
  ret i64 %25
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_end(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call = call i32 @mz_zip_writer_end_internal(%struct.mz_zip_archive* %0, i32 1)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init_cfile(%struct.mz_zip_archive* %pZip, %struct.__sFILE* %pFile, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFile.addr = alloca %struct.__sFILE*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.__sFILE* %pFile, %struct.__sFILE** %pFile.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %and = and i32 %2, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %5 = bitcast %struct.mz_zip_archive* %4 to i8*
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 14
  store i8* %5, i8** %m_pIO_opaque, align 8
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %8 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %7, i64 0, i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %9 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 6
  store %struct.__sFILE* %9, %struct.__sFILE** %m_pFile, align 8
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState4 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 15
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4, align 8
  %m_pFile5 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %13, i32 0, i32 6
  %14 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile5, align 8
  %call6 = call i64 @ftello(%struct.__sFILE* %14)
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 15
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState7, align 8
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %16, i32 0, i32 7
  store i64 %call6, i64* %m_file_archive_start_ofs, align 8
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 4
  store i32 5, i32* %m_zip_type, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then2
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init_from_reader_v2(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32 %flags) #0 {
entry:
  %pZip.addr.i123 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i124 = alloca i32, align 4
  %pZip.addr.i117 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i118 = alloca i32, align 4
  %pZip.addr.i111 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i112 = alloca i32, align 4
  %pZip.addr.i105 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i106 = alloca i32, align 4
  %pZip.addr.i99 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i100 = alloca i32, align 4
  %pZip.addr.i93 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i94 = alloca i32, align 4
  %pZip.addr.i87 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i88 = alloca i32, align 4
  %pZip.addr.i81 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i82 = alloca i32, align 4
  %pZip.addr.i75 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i76 = alloca i32, align 4
  %pZip.addr.i74 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 3
  %4 = load i32, i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %4, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %5, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %6, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %7 = load i32, i32* %err_num.addr.i, align 4
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 5
  store i32 %7, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %9 = load i32, i32* %flags.addr, align 4
  %and = and i32 %9, 16384
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.then4, label %if.end10

if.then4:                                         ; preds = %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState5, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 4
  %12 = load i32, i32* %m_zip64, align 4
  %tobool6 = icmp ne i32 %12, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %if.then4
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %13, %struct.mz_zip_archive** %pZip.addr.i75, align 8
  store i32 24, i32* %err_num.addr.i76, align 4
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i75, align 8
  %tobool.i77 = icmp ne %struct.mz_zip_archive* %14, null
  br i1 %tobool.i77, label %if.then.i79, label %mz_zip_set_error.exit80

if.then.i79:                                      ; preds = %if.then7
  %15 = load i32, i32* %err_num.addr.i76, align 4
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i75, align 8
  %m_last_error.i78 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 5
  store i32 %15, i32* %m_last_error.i78, align 4
  br label %mz_zip_set_error.exit80

mz_zip_set_error.exit80:                          ; preds = %if.then7, %if.then.i79
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.then4
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.end
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState11 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 15
  %18 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState11, align 8
  %m_zip6412 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %18, i32 0, i32 4
  %19 = load i32, i32* %m_zip6412, align 4
  %tobool13 = icmp ne i32 %19, 0
  br i1 %tobool13, label %if.then14, label %if.else

if.then14:                                        ; preds = %if.end10
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 2
  %21 = load i32, i32* %m_total_files, align 8
  %cmp15 = icmp eq i32 %21, -1
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.then14
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %22, %struct.mz_zip_archive** %pZip.addr.i81, align 8
  store i32 2, i32* %err_num.addr.i82, align 4
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i81, align 8
  %tobool.i83 = icmp ne %struct.mz_zip_archive* %23, null
  br i1 %tobool.i83, label %if.then.i85, label %mz_zip_set_error.exit86

if.then.i85:                                      ; preds = %if.then16
  %24 = load i32, i32* %err_num.addr.i82, align 4
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i81, align 8
  %m_last_error.i84 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 5
  store i32 %24, i32* %m_last_error.i84, align 4
  br label %mz_zip_set_error.exit86

mz_zip_set_error.exit86:                          ; preds = %if.then16, %if.then.i85
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.then14
  br label %if.end29

if.else:                                          ; preds = %if.end10
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files19 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 2
  %27 = load i32, i32* %m_total_files19, align 8
  %cmp20 = icmp eq i32 %27, 65535
  br i1 %cmp20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.else
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %28, %struct.mz_zip_archive** %pZip.addr.i105, align 8
  store i32 2, i32* %err_num.addr.i106, align 4
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i105, align 8
  %tobool.i107 = icmp ne %struct.mz_zip_archive* %29, null
  br i1 %tobool.i107, label %if.then.i109, label %mz_zip_set_error.exit110

if.then.i109:                                     ; preds = %if.then21
  %30 = load i32, i32* %err_num.addr.i106, align 4
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i105, align 8
  %m_last_error.i108 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 5
  store i32 %30, i32* %m_last_error.i108, align 4
  br label %mz_zip_set_error.exit110

mz_zip_set_error.exit110:                         ; preds = %if.then21, %if.then.i109
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %if.else
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 0
  %33 = load i64, i64* %m_archive_size, align 8
  %add = add i64 %33, 46
  %add24 = add i64 %add, 30
  %cmp25 = icmp ugt i64 %add24, 4294967295
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end23
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %34, %struct.mz_zip_archive** %pZip.addr.i123, align 8
  store i32 3, i32* %err_num.addr.i124, align 4
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i123, align 8
  %tobool.i125 = icmp ne %struct.mz_zip_archive* %35, null
  br i1 %tobool.i125, label %if.then.i127, label %mz_zip_set_error.exit128

if.then.i127:                                     ; preds = %if.then26
  %36 = load i32, i32* %err_num.addr.i124, align 4
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i123, align 8
  %m_last_error.i126 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %37, i32 0, i32 5
  store i32 %36, i32* %m_last_error.i126, align 4
  br label %mz_zip_set_error.exit128

mz_zip_set_error.exit128:                         ; preds = %if.then26, %if.then.i127
  store i32 0, i32* %retval, align 4
  br label %return

if.end28:                                         ; preds = %if.end23
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end18
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState30 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 15
  %39 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState30, align 8
  store %struct.mz_zip_internal_state_tag* %39, %struct.mz_zip_internal_state_tag** %pState, align 8
  %40 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %40, i32 0, i32 6
  %41 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8
  %tobool31 = icmp ne %struct.__sFILE* %41, null
  br i1 %tobool31, label %if.then32, label %if.else52

if.then32:                                        ; preds = %if.end29
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %42, i32 0, i32 14
  %43 = load i8*, i8** %m_pIO_opaque, align 8
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %45 = bitcast %struct.mz_zip_archive* %44 to i8*
  %cmp33 = icmp ne i8* %43, %45
  br i1 %cmp33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %if.then32
  %46 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %46, %struct.mz_zip_archive** %pZip.addr.i117, align 8
  store i32 24, i32* %err_num.addr.i118, align 4
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i117, align 8
  %tobool.i119 = icmp ne %struct.mz_zip_archive* %47, null
  br i1 %tobool.i119, label %if.then.i121, label %mz_zip_set_error.exit122

if.then.i121:                                     ; preds = %if.then34
  %48 = load i32, i32* %err_num.addr.i118, align 4
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i117, align 8
  %m_last_error.i120 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %49, i32 0, i32 5
  store i32 %48, i32* %m_last_error.i120, align 4
  br label %mz_zip_set_error.exit122

mz_zip_set_error.exit122:                         ; preds = %if.then34, %if.then.i121
  store i32 0, i32* %retval, align 4
  br label %return

if.end36:                                         ; preds = %if.then32
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %50, i32 0, i32 4
  %51 = load i32, i32* %m_zip_type, align 8
  %cmp37 = icmp eq i32 %51, 4
  br i1 %cmp37, label %if.then38, label %if.end51

if.then38:                                        ; preds = %if.end36
  %52 = load i8*, i8** %pFilename.addr, align 8
  %tobool39 = icmp ne i8* %52, null
  br i1 %tobool39, label %if.end42, label %if.then40

if.then40:                                        ; preds = %if.then38
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %53, %struct.mz_zip_archive** %pZip.addr.i111, align 8
  store i32 24, i32* %err_num.addr.i112, align 4
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i111, align 8
  %tobool.i113 = icmp ne %struct.mz_zip_archive* %54, null
  br i1 %tobool.i113, label %if.then.i115, label %mz_zip_set_error.exit116

if.then.i115:                                     ; preds = %if.then40
  %55 = load i32, i32* %err_num.addr.i112, align 4
  %56 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i111, align 8
  %m_last_error.i114 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %56, i32 0, i32 5
  store i32 %55, i32* %m_last_error.i114, align 4
  br label %mz_zip_set_error.exit116

mz_zip_set_error.exit116:                         ; preds = %if.then40, %if.then.i115
  store i32 0, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.then38
  %57 = load i8*, i8** %pFilename.addr, align 8
  %58 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile43 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %58, i32 0, i32 6
  %59 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile43, align 8
  %call44 = call %struct.__sFILE* @"\01_freopen"(i8* %57, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i32 0, i32 0), %struct.__sFILE* %59)
  %60 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile45 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %60, i32 0, i32 6
  store %struct.__sFILE* %call44, %struct.__sFILE** %m_pFile45, align 8
  %cmp46 = icmp eq %struct.__sFILE* null, %call44
  br i1 %cmp46, label %if.then47, label %if.end50

if.then47:                                        ; preds = %if.end42
  %61 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call48 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %61, i32 0)
  %62 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %62, %struct.mz_zip_archive** %pZip.addr.i99, align 8
  store i32 17, i32* %err_num.addr.i100, align 4
  %63 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i99, align 8
  %tobool.i101 = icmp ne %struct.mz_zip_archive* %63, null
  br i1 %tobool.i101, label %if.then.i103, label %mz_zip_set_error.exit104

if.then.i103:                                     ; preds = %if.then47
  %64 = load i32, i32* %err_num.addr.i100, align 4
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i99, align 8
  %m_last_error.i102 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %65, i32 0, i32 5
  store i32 %64, i32* %m_last_error.i102, align 4
  br label %mz_zip_set_error.exit104

mz_zip_set_error.exit104:                         ; preds = %if.then47, %if.then.i103
  store i32 0, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %if.end42
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end36
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %66, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %67 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %67, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8
  br label %if.end69

if.else52:                                        ; preds = %if.end29
  %68 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %68, i32 0, i32 8
  %69 = load i8*, i8** %m_pMem, align 8
  %tobool53 = icmp ne i8* %69, null
  br i1 %tobool53, label %if.then54, label %if.else62

if.then54:                                        ; preds = %if.else52
  %70 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque55 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %70, i32 0, i32 14
  %71 = load i8*, i8** %m_pIO_opaque55, align 8
  %72 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %73 = bitcast %struct.mz_zip_archive* %72 to i8*
  %cmp56 = icmp ne i8* %71, %73
  br i1 %cmp56, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.then54
  %74 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %74, %struct.mz_zip_archive** %pZip.addr.i93, align 8
  store i32 24, i32* %err_num.addr.i94, align 4
  %75 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i93, align 8
  %tobool.i95 = icmp ne %struct.mz_zip_archive* %75, null
  br i1 %tobool.i95, label %if.then.i97, label %mz_zip_set_error.exit98

if.then.i97:                                      ; preds = %if.then57
  %76 = load i32, i32* %err_num.addr.i94, align 4
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i93, align 8
  %m_last_error.i96 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %77, i32 0, i32 5
  store i32 %76, i32* %m_last_error.i96, align 4
  br label %mz_zip_set_error.exit98

mz_zip_set_error.exit98:                          ; preds = %if.then57, %if.then.i97
  store i32 0, i32* %retval, align 4
  br label %return

if.end59:                                         ; preds = %if.then54
  %78 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %78, i32 0, i32 9
  %79 = load i64, i64* %m_mem_size, align 8
  %80 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %80, i32 0, i32 10
  store i64 %79, i64* %m_mem_capacity, align 8
  %81 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite60 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %81, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_heap_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite60, align 8
  %82 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pNeeds_keepalive61 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %82, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive61, align 8
  br label %if.end68

if.else62:                                        ; preds = %if.else52
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite63 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %83, i32 0, i32 12
  %84 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite63, align 8
  %tobool64 = icmp ne i64 (i8*, i64, i8*, i64)* %84, null
  br i1 %tobool64, label %if.end67, label %if.then65

if.then65:                                        ; preds = %if.else62
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %85, %struct.mz_zip_archive** %pZip.addr.i87, align 8
  store i32 24, i32* %err_num.addr.i88, align 4
  %86 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i87, align 8
  %tobool.i89 = icmp ne %struct.mz_zip_archive* %86, null
  br i1 %tobool.i89, label %if.then.i91, label %mz_zip_set_error.exit92

if.then.i91:                                      ; preds = %if.then65
  %87 = load i32, i32* %err_num.addr.i88, align 4
  %88 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i87, align 8
  %m_last_error.i90 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %88, i32 0, i32 5
  store i32 %87, i32* %m_last_error.i90, align 4
  br label %mz_zip_set_error.exit92

mz_zip_set_error.exit92:                          ; preds = %if.then65, %if.then.i91
  store i32 0, i32* %retval, align 4
  br label %return

if.end67:                                         ; preds = %if.else62
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end59
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end51
  %89 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %89, i32 0, i32 1
  %90 = load i64, i64* %m_central_directory_file_ofs, align 8
  %91 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size70 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %91, i32 0, i32 0
  store i64 %90, i64* %m_archive_size70, align 8
  %92 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_central_directory_file_ofs71 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %92, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs71, align 8
  %93 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %94 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState72 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %94, i32 0, i32 15
  %95 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState72, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %95, i32 0, i32 2
  store %struct.mz_zip_archive* %93, %struct.mz_zip_archive** %pZip.addr.i74, align 8
  store %struct.mz_zip_array* %m_sorted_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i, align 8
  %96 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i74, align 8
  %m_pFree.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %96, i32 0, i32 8
  %97 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i, align 8
  %98 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i74, align 8
  %m_pAlloc_opaque.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %98, i32 0, i32 10
  %99 = load i8*, i8** %m_pAlloc_opaque.i, align 8
  %100 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %100, i32 0, i32 0
  %101 = load i8*, i8** %m_p.i, align 8
  call void %97(i8* %99, i8* %101) #10
  %102 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %103 = bitcast %struct.mz_zip_array* %102 to i8*
  %104 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %105 = bitcast %struct.mz_zip_array* %104 to i8*
  %106 = call i64 @llvm.objectsize.i64.p0i8(i8* %105, i1 false) #10
  %call.i = call i8* @__memset_chk(i8* %103, i32 0, i64 32, i64 %106) #10
  %107 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode73 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %107, i32 0, i32 3
  store i32 2, i32* %m_zip_mode73, align 4
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end69, %mz_zip_set_error.exit92, %mz_zip_set_error.exit98, %mz_zip_set_error.exit104, %mz_zip_set_error.exit116, %mz_zip_set_error.exit122, %mz_zip_set_error.exit128, %mz_zip_set_error.exit110, %mz_zip_set_error.exit86, %mz_zip_set_error.exit80, %mz_zip_set_error.exit
  %108 = load i32, i32* %retval, align 4
  ret i32 %108
}

declare %struct.__sFILE* @"\01_freopen"(i8*, i8*, %struct.__sFILE*) #1

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_init_from_reader(%struct.mz_zip_archive* %pZip, i8* %pFilename) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pFilename.addr, align 8
  %call = call i32 @mz_zip_writer_init_from_reader_v2(%struct.mz_zip_archive* %0, i8* %1, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_add_mem(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i32 %level_and_flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %level_and_flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pArchive_name.addr, align 8
  %2 = load i8*, i8** %pBuf.addr, align 8
  %3 = load i64, i64* %buf_size.addr, align 8
  %4 = load i32, i32* %level_and_flags.addr, align 4
  %call = call i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive* %0, i8* %1, i8* %2, i64 %3, i8* null, i16 zeroext 0, i32 %4, i64 0, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i64 %uncomp_size, i32 %uncomp_crc32) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %uncomp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pArchive_name.addr, align 8
  %2 = load i8*, i8** %pBuf.addr, align 8
  %3 = load i64, i64* %buf_size.addr, align 8
  %4 = load i8*, i8** %pComment.addr, align 8
  %5 = load i16, i16* %comment_size.addr, align 2
  %6 = load i32, i32* %level_and_flags.addr, align 4
  %7 = load i64, i64* %uncomp_size.addr, align 8
  %8 = load i32, i32* %uncomp_crc32.addr, align 4
  %call = call i32 @mz_zip_writer_add_mem_ex_v2(%struct.mz_zip_archive* %0, i8* %1, i8* %2, i64 %3, i8* %4, i16 zeroext %5, i32 %6, i64 %7, i32 %8, i64* null, i8* null, i32 0, i8* null, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_add_mem_ex_v2(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i64 %uncomp_size, i32 %uncomp_crc32, i64* %last_modified, i8* %user_extra_data, i32 %user_extra_data_len, i8* %user_extra_data_central, i32 %user_extra_data_central_len) #0 {
entry:
  %pZip.addr.i649 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i650 = alloca i32, align 4
  %pZip.addr.i643 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i644 = alloca i32, align 4
  %pZip.addr.i637 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i638 = alloca i32, align 4
  %pZip.addr.i631 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i632 = alloca i32, align 4
  %pZip.addr.i625 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i626 = alloca i32, align 4
  %pZip.addr.i619 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i620 = alloca i32, align 4
  %pZip.addr.i613 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i614 = alloca i32, align 4
  %pZip.addr.i607 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i608 = alloca i32, align 4
  %pZip.addr.i601 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i602 = alloca i32, align 4
  %pZip.addr.i595 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i596 = alloca i32, align 4
  %pZip.addr.i589 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i590 = alloca i32, align 4
  %pZip.addr.i583 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i584 = alloca i32, align 4
  %retval.i.i564 = alloca i32, align 4
  %pZip.addr.i.i565 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i566 = alloca %struct.mz_zip_array*, align 8
  %new_capacity.addr.i.i567 = alloca i64, align 8
  %growing.addr.i.i568 = alloca i32, align 4
  %pZip.addr.i569 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i570 = alloca %struct.mz_zip_array*, align 8
  %n.addr.i571 = alloca i64, align 8
  %retval.i.i = alloca i32, align 4
  %pZip.addr.i.i = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i = alloca %struct.mz_zip_array*, align 8
  %new_capacity.addr.i.i = alloca i64, align 8
  %growing.addr.i.i = alloca i32, align 4
  %pZip.addr.i563 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %n.addr.i = alloca i64, align 8
  %pZip.addr.i557 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i558 = alloca i32, align 4
  %pZip.addr.i551 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i552 = alloca i32, align 4
  %pZip.addr.i545 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i546 = alloca i32, align 4
  %pZip.addr.i539 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i540 = alloca i32, align 4
  %p.addr.i527 = alloca i8*, align 8
  %v.addr.i528 = alloca i32, align 4
  %p.addr.i515 = alloca i8*, align 8
  %v.addr.i516 = alloca i32, align 4
  %pZip.addr.i509 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i510 = alloca i32, align 4
  %p.addr.i497 = alloca i8*, align 8
  %v.addr.i498 = alloca i32, align 4
  %p.addr.i492 = alloca i8*, align 8
  %v.addr.i493 = alloca i32, align 4
  %p.addr.i2.i462 = alloca i8*, align 8
  %v.addr.i3.i463 = alloca i32, align 4
  %p.addr.i.i464 = alloca i8*, align 8
  %v.addr.i.i465 = alloca i32, align 4
  %p.addr.i466 = alloca i8*, align 8
  %v.addr.i467 = alloca i64, align 8
  %p.addr.i2.i = alloca i8*, align 8
  %v.addr.i3.i = alloca i32, align 4
  %p.addr.i.i = alloca i8*, align 8
  %v.addr.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %pZip.addr.i456 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i457 = alloca i32, align 4
  %pZip.addr.i450 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i451 = alloca i32, align 4
  %pZip.addr.i444 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i445 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %uncomp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %last_modified.addr = alloca i64*, align 8
  %user_extra_data.addr = alloca i8*, align 8
  %user_extra_data_len.addr = alloca i32, align 4
  %user_extra_data_central.addr = alloca i8*, align 8
  %user_extra_data_central_len.addr = alloca i32, align 4
  %method = alloca i16, align 2
  %dos_time = alloca i16, align 2
  %dos_date = alloca i16, align 2
  %level = alloca i32, align 4
  %ext_attributes = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %local_dir_header_ofs = alloca i64, align 8
  %cur_archive_file_ofs = alloca i64, align 8
  %comp_size = alloca i64, align 8
  %archive_name_size = alloca i64, align 8
  %local_dir_header = alloca [30 x i8], align 16
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %store_data_uncompressed = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pExtra_data = alloca i8*, align 8
  %extra_size = alloca i32, align 4
  %extra_data = alloca [28 x i8], align 16
  %bit_flags = alloca i16, align 2
  %cur_time = alloca i64, align 8
  %state = alloca %struct.mz_zip_writer_add_state, align 8
  %local_dir_footer = alloca [24 x i8], align 16
  %local_dir_footer_size = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  store i64* %last_modified, i64** %last_modified.addr, align 8
  store i8* %user_extra_data, i8** %user_extra_data.addr, align 8
  store i32 %user_extra_data_len, i32* %user_extra_data_len.addr, align 4
  store i8* %user_extra_data_central, i8** %user_extra_data_central.addr, align 8
  store i32 %user_extra_data_central_len, i32* %user_extra_data_central_len.addr, align 4
  store i16 0, i16* %method, align 2
  store i16 0, i16* %dos_time, align 2
  store i16 0, i16* %dos_date, align 2
  store i32 0, i32* %ext_attributes, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 0
  %1 = load i64, i64* %m_archive_size, align 8
  store i64 %1, i64* %local_dir_header_ofs, align 8
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 0
  %3 = load i64, i64* %m_archive_size1, align 8
  store i64 %3, i64* %cur_archive_file_ofs, align 8
  store i64 0, i64* %comp_size, align 8
  store %struct.tdefl_compressor* null, %struct.tdefl_compressor** %pComp, align 8
  store i8* null, i8** %pExtra_data, align 8
  store i32 0, i32* %extra_size, align 4
  store i16 0, i16* %bit_flags, align 2
  %4 = load i32, i32* %level_and_flags.addr, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 6, i32* %level_and_flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i64, i64* %uncomp_size.addr, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %6 = load i64, i64* %buf_size.addr, align 8
  %tobool2 = icmp ne i64 %6, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %lor.lhs.false
  %7 = load i32, i32* %level_and_flags.addr, align 4
  %and = and i32 %7, 1024
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %land.lhs.true, %if.end
  %8 = load i16, i16* %bit_flags, align 2
  %conv = zext i16 %8 to i32
  %or = or i32 %conv, 8
  %conv5 = trunc i32 %or to i16
  store i16 %conv5, i16* %bit_flags, align 2
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %land.lhs.true, %lor.lhs.false
  %9 = load i32, i32* %level_and_flags.addr, align 4
  %and7 = and i32 %9, 65536
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.end13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %10 = load i16, i16* %bit_flags, align 2
  %conv10 = zext i16 %10 to i32
  %or11 = or i32 %conv10, 2048
  %conv12 = trunc i32 %or11 to i16
  store i16 %conv12, i16* %bit_flags, align 2
  br label %if.end13

if.end13:                                         ; preds = %if.then9, %if.end6
  %11 = load i32, i32* %level_and_flags.addr, align 4
  %and14 = and i32 %11, 15
  store i32 %and14, i32* %level, align 4
  %12 = load i32, i32* %level, align 4
  %tobool15 = icmp ne i32 %12, 0
  br i1 %tobool15, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end13
  %13 = load i32, i32* %level_and_flags.addr, align 4
  %and16 = and i32 %13, 1024
  %tobool17 = icmp ne i32 %and16, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end13
  %14 = phi i1 [ true, %if.end13 ], [ %tobool17, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32
  store i32 %lor.ext, i32* %store_data_uncompressed, align 4
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool18 = icmp ne %struct.mz_zip_archive* %15, null
  br i1 %tobool18, label %lor.lhs.false19, label %if.then38

lor.lhs.false19:                                  ; preds = %lor.end
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 15
  %17 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool20 = icmp ne %struct.mz_zip_internal_state_tag* %17, null
  br i1 %tobool20, label %lor.lhs.false21, label %if.then38

lor.lhs.false21:                                  ; preds = %lor.lhs.false19
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 3
  %19 = load i32, i32* %m_zip_mode, align 4
  %cmp22 = icmp ne i32 %19, 2
  br i1 %cmp22, label %if.then38, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false21
  %20 = load i64, i64* %buf_size.addr, align 8
  %tobool25 = icmp ne i64 %20, 0
  br i1 %tobool25, label %land.lhs.true26, label %lor.lhs.false28

land.lhs.true26:                                  ; preds = %lor.lhs.false24
  %21 = load i8*, i8** %pBuf.addr, align 8
  %tobool27 = icmp ne i8* %21, null
  br i1 %tobool27, label %lor.lhs.false28, label %if.then38

lor.lhs.false28:                                  ; preds = %land.lhs.true26, %lor.lhs.false24
  %22 = load i8*, i8** %pArchive_name.addr, align 8
  %tobool29 = icmp ne i8* %22, null
  br i1 %tobool29, label %lor.lhs.false30, label %if.then38

lor.lhs.false30:                                  ; preds = %lor.lhs.false28
  %23 = load i16, i16* %comment_size.addr, align 2
  %conv31 = zext i16 %23 to i32
  %tobool32 = icmp ne i32 %conv31, 0
  br i1 %tobool32, label %land.lhs.true33, label %lor.lhs.false35

land.lhs.true33:                                  ; preds = %lor.lhs.false30
  %24 = load i8*, i8** %pComment.addr, align 8
  %tobool34 = icmp ne i8* %24, null
  br i1 %tobool34, label %lor.lhs.false35, label %if.then38

lor.lhs.false35:                                  ; preds = %land.lhs.true33, %lor.lhs.false30
  %25 = load i32, i32* %level, align 4
  %cmp36 = icmp ugt i32 %25, 10
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %lor.lhs.false35, %land.lhs.true33, %lor.lhs.false28, %land.lhs.true26, %lor.lhs.false21, %lor.lhs.false19, %lor.end
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %26, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %27, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then38
  %28 = load i32, i32* %err_num.addr.i, align 4
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 5
  store i32 %28, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then38, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %lor.lhs.false35
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState40 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 15
  %31 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState40, align 8
  store %struct.mz_zip_internal_state_tag* %31, %struct.mz_zip_internal_state_tag** %pState, align 8
  %32 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %32, i32 0, i32 4
  %33 = load i32, i32* %m_zip64, align 4
  %tobool41 = icmp ne i32 %33, 0
  br i1 %tobool41, label %if.then42, label %if.else

if.then42:                                        ; preds = %if.end39
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 2
  %35 = load i32, i32* %m_total_files, align 8
  %cmp43 = icmp eq i32 %35, -1
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.then42
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %36, %struct.mz_zip_archive** %pZip.addr.i444, align 8
  store i32 2, i32* %err_num.addr.i445, align 4
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i444, align 8
  %tobool.i446 = icmp ne %struct.mz_zip_archive* %37, null
  br i1 %tobool.i446, label %if.then.i448, label %mz_zip_set_error.exit449

if.then.i448:                                     ; preds = %if.then45
  %38 = load i32, i32* %err_num.addr.i445, align 4
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i444, align 8
  %m_last_error.i447 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %39, i32 0, i32 5
  store i32 %38, i32* %m_last_error.i447, align 4
  br label %mz_zip_set_error.exit449

mz_zip_set_error.exit449:                         ; preds = %if.then45, %if.then.i448
  store i32 0, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.then42
  br label %if.end62

if.else:                                          ; preds = %if.end39
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files48 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 2
  %41 = load i32, i32* %m_total_files48, align 8
  %cmp49 = icmp eq i32 %41, 65535
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.else
  %42 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6452 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %42, i32 0, i32 4
  store i32 1, i32* %m_zip6452, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.else
  %43 = load i64, i64* %buf_size.addr, align 8
  %cmp54 = icmp ugt i64 %43, 4294967295
  br i1 %cmp54, label %if.then59, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %if.end53
  %44 = load i64, i64* %uncomp_size.addr, align 8
  %cmp57 = icmp ugt i64 %44, 4294967295
  br i1 %cmp57, label %if.then59, label %if.end61

if.then59:                                        ; preds = %lor.lhs.false56, %if.end53
  %45 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6460 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %45, i32 0, i32 4
  store i32 1, i32* %m_zip6460, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %lor.lhs.false56
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end47
  %46 = load i32, i32* %level_and_flags.addr, align 4
  %and63 = and i32 %46, 1024
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.end69, label %land.lhs.true65

land.lhs.true65:                                  ; preds = %if.end62
  %47 = load i64, i64* %uncomp_size.addr, align 8
  %tobool66 = icmp ne i64 %47, 0
  br i1 %tobool66, label %if.then67, label %if.end69

if.then67:                                        ; preds = %land.lhs.true65
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %48, %struct.mz_zip_archive** %pZip.addr.i450, align 8
  store i32 24, i32* %err_num.addr.i451, align 4
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i450, align 8
  %tobool.i452 = icmp ne %struct.mz_zip_archive* %49, null
  br i1 %tobool.i452, label %if.then.i454, label %mz_zip_set_error.exit455

if.then.i454:                                     ; preds = %if.then67
  %50 = load i32, i32* %err_num.addr.i451, align 4
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i450, align 8
  %m_last_error.i453 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %51, i32 0, i32 5
  store i32 %50, i32* %m_last_error.i453, align 4
  br label %mz_zip_set_error.exit455

mz_zip_set_error.exit455:                         ; preds = %if.then67, %if.then.i454
  store i32 0, i32* %retval, align 4
  br label %return

if.end69:                                         ; preds = %land.lhs.true65, %if.end62
  %52 = load i8*, i8** %pArchive_name.addr, align 8
  %call70 = call i32 @mz_zip_writer_validate_archive_name(i8* %52)
  %tobool71 = icmp ne i32 %call70, 0
  br i1 %tobool71, label %if.end74, label %if.then72

if.then72:                                        ; preds = %if.end69
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %53, %struct.mz_zip_archive** %pZip.addr.i456, align 8
  store i32 25, i32* %err_num.addr.i457, align 4
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i456, align 8
  %tobool.i458 = icmp ne %struct.mz_zip_archive* %54, null
  br i1 %tobool.i458, label %if.then.i460, label %mz_zip_set_error.exit461

if.then.i460:                                     ; preds = %if.then72
  %55 = load i32, i32* %err_num.addr.i457, align 4
  %56 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i456, align 8
  %m_last_error.i459 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %56, i32 0, i32 5
  store i32 %55, i32* %m_last_error.i459, align 4
  br label %mz_zip_set_error.exit461

mz_zip_set_error.exit461:                         ; preds = %if.then72, %if.then.i460
  store i32 0, i32* %retval, align 4
  br label %return

if.end74:                                         ; preds = %if.end69
  %57 = load i64*, i64** %last_modified.addr, align 8
  %cmp75 = icmp ne i64* %57, null
  br i1 %cmp75, label %if.then77, label %if.else78

if.then77:                                        ; preds = %if.end74
  %58 = load i64*, i64** %last_modified.addr, align 8
  %59 = load i64, i64* %58, align 8
  call void @mz_zip_time_t_to_dos_time(i64 %59, i16* %dos_time, i16* %dos_date)
  br label %if.end80

if.else78:                                        ; preds = %if.end74
  %call79 = call i64 @time(i64* %cur_time)
  %60 = load i64, i64* %cur_time, align 8
  call void @mz_zip_time_t_to_dos_time(i64 %60, i16* %dos_time, i16* %dos_date)
  br label %if.end80

if.end80:                                         ; preds = %if.else78, %if.then77
  %61 = load i32, i32* %level_and_flags.addr, align 4
  %and81 = and i32 %61, 1024
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %if.end90, label %if.then83

if.then83:                                        ; preds = %if.end80
  %62 = load i8*, i8** %pBuf.addr, align 8
  %63 = load i64, i64* %buf_size.addr, align 8
  %call84 = call i64 @mz_crc32(i64 0, i8* %62, i64 %63)
  %conv85 = trunc i64 %call84 to i32
  store i32 %conv85, i32* %uncomp_crc32.addr, align 4
  %64 = load i64, i64* %buf_size.addr, align 8
  store i64 %64, i64* %uncomp_size.addr, align 8
  %65 = load i64, i64* %uncomp_size.addr, align 8
  %cmp86 = icmp ule i64 %65, 3
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.then83
  store i32 0, i32* %level, align 4
  store i32 1, i32* %store_data_uncompressed, align 4
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %if.then83
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.end80
  %66 = load i8*, i8** %pArchive_name.addr, align 8
  %call91 = call i64 @strlen(i8* %66)
  store i64 %call91, i64* %archive_name_size, align 8
  %67 = load i64, i64* %archive_name_size, align 8
  %cmp92 = icmp ugt i64 %67, 65535
  br i1 %cmp92, label %if.then94, label %if.end96

if.then94:                                        ; preds = %if.end90
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %68, %struct.mz_zip_archive** %pZip.addr.i539, align 8
  store i32 25, i32* %err_num.addr.i540, align 4
  %69 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i539, align 8
  %tobool.i541 = icmp ne %struct.mz_zip_archive* %69, null
  br i1 %tobool.i541, label %if.then.i543, label %mz_zip_set_error.exit544

if.then.i543:                                     ; preds = %if.then94
  %70 = load i32, i32* %err_num.addr.i540, align 4
  %71 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i539, align 8
  %m_last_error.i542 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %71, i32 0, i32 5
  store i32 %70, i32* %m_last_error.i542, align 4
  br label %mz_zip_set_error.exit544

mz_zip_set_error.exit544:                         ; preds = %if.then94, %if.then.i543
  store i32 0, i32* %retval, align 4
  br label %return

if.end96:                                         ; preds = %if.end90
  %72 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call97 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive* %72)
  store i32 %call97, i32* %num_alignment_padding_bytes, align 4
  %73 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %73, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %74 = load i64, i64* %m_size, align 8
  %add = add i64 %74, 46
  %75 = load i64, i64* %archive_name_size, align 8
  %add98 = add i64 %add, %75
  %add99 = add i64 %add98, 28
  %76 = load i16, i16* %comment_size.addr, align 2
  %conv100 = zext i16 %76 to i64
  %add101 = add i64 %add99, %conv100
  %cmp102 = icmp uge i64 %add101, 4294967295
  br i1 %cmp102, label %if.then104, label %if.end106

if.then104:                                       ; preds = %if.end96
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %77, %struct.mz_zip_archive** %pZip.addr.i551, align 8
  store i32 15, i32* %err_num.addr.i552, align 4
  %78 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i551, align 8
  %tobool.i553 = icmp ne %struct.mz_zip_archive* %78, null
  br i1 %tobool.i553, label %if.then.i555, label %mz_zip_set_error.exit556

if.then.i555:                                     ; preds = %if.then104
  %79 = load i32, i32* %err_num.addr.i552, align 4
  %80 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i551, align 8
  %m_last_error.i554 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %80, i32 0, i32 5
  store i32 %79, i32* %m_last_error.i554, align 4
  br label %mz_zip_set_error.exit556

mz_zip_set_error.exit556:                         ; preds = %if.then104, %if.then.i555
  store i32 0, i32* %retval, align 4
  br label %return

if.end106:                                        ; preds = %if.end96
  %81 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64107 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %81, i32 0, i32 4
  %82 = load i32, i32* %m_zip64107, align 4
  %tobool108 = icmp ne i32 %82, 0
  br i1 %tobool108, label %if.end133, label %if.then109

if.then109:                                       ; preds = %if.end106
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size110 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %83, i32 0, i32 0
  %84 = load i64, i64* %m_archive_size110, align 8
  %85 = load i32, i32* %num_alignment_padding_bytes, align 4
  %conv111 = zext i32 %85 to i64
  %add112 = add i64 %84, %conv111
  %add113 = add i64 %add112, 30
  %86 = load i64, i64* %archive_name_size, align 8
  %add114 = add i64 %add113, %86
  %add115 = add i64 %add114, 46
  %87 = load i64, i64* %archive_name_size, align 8
  %add116 = add i64 %add115, %87
  %88 = load i16, i16* %comment_size.addr, align 2
  %conv117 = zext i16 %88 to i64
  %add118 = add i64 %add116, %conv117
  %89 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv119 = zext i32 %89 to i64
  %add120 = add i64 %add118, %conv119
  %90 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir121 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %90, i32 0, i32 0
  %m_size122 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir121, i32 0, i32 1
  %91 = load i64, i64* %m_size122, align 8
  %add123 = add i64 %add120, %91
  %add124 = add i64 %add123, 22
  %92 = load i32, i32* %user_extra_data_central_len.addr, align 4
  %conv125 = zext i32 %92 to i64
  %add126 = add i64 %add124, %conv125
  %add127 = add i64 %add126, 16
  %cmp128 = icmp ugt i64 %add127, 4294967295
  br i1 %cmp128, label %if.then130, label %if.end132

if.then130:                                       ; preds = %if.then109
  %93 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64131 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %93, i32 0, i32 4
  store i32 1, i32* %m_zip64131, align 4
  br label %if.end132

if.end132:                                        ; preds = %if.then130, %if.then109
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.end106
  %94 = load i64, i64* %archive_name_size, align 8
  %tobool134 = icmp ne i64 %94, 0
  br i1 %tobool134, label %land.lhs.true135, label %if.end147

land.lhs.true135:                                 ; preds = %if.end133
  %95 = load i8*, i8** %pArchive_name.addr, align 8
  %96 = load i64, i64* %archive_name_size, align 8
  %sub = sub i64 %96, 1
  %arrayidx = getelementptr inbounds i8, i8* %95, i64 %sub
  %97 = load i8, i8* %arrayidx, align 1
  %conv136 = sext i8 %97 to i32
  %cmp137 = icmp eq i32 %conv136, 47
  br i1 %cmp137, label %if.then139, label %if.end147

if.then139:                                       ; preds = %land.lhs.true135
  %98 = load i32, i32* %ext_attributes, align 4
  %or140 = or i32 %98, 16
  store i32 %or140, i32* %ext_attributes, align 4
  %99 = load i64, i64* %buf_size.addr, align 8
  %tobool141 = icmp ne i64 %99, 0
  br i1 %tobool141, label %if.then144, label %lor.lhs.false142

lor.lhs.false142:                                 ; preds = %if.then139
  %100 = load i64, i64* %uncomp_size.addr, align 8
  %tobool143 = icmp ne i64 %100, 0
  br i1 %tobool143, label %if.then144, label %if.end146

if.then144:                                       ; preds = %lor.lhs.false142, %if.then139
  %101 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %101, %struct.mz_zip_archive** %pZip.addr.i557, align 8
  store i32 24, i32* %err_num.addr.i558, align 4
  %102 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i557, align 8
  %tobool.i559 = icmp ne %struct.mz_zip_archive* %102, null
  br i1 %tobool.i559, label %if.then.i561, label %mz_zip_set_error.exit562

if.then.i561:                                     ; preds = %if.then144
  %103 = load i32, i32* %err_num.addr.i558, align 4
  %104 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i557, align 8
  %m_last_error.i560 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %104, i32 0, i32 5
  store i32 %103, i32* %m_last_error.i560, align 4
  br label %mz_zip_set_error.exit562

mz_zip_set_error.exit562:                         ; preds = %if.then144, %if.then.i561
  store i32 0, i32* %retval, align 4
  br label %return

if.end146:                                        ; preds = %lor.lhs.false142
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %land.lhs.true135, %if.end133
  %105 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %106 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir148 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %106, i32 0, i32 0
  %107 = load i64, i64* %archive_name_size, align 8
  %add149 = add i64 46, %107
  %108 = load i16, i16* %comment_size.addr, align 2
  %conv150 = zext i16 %108 to i64
  %add151 = add i64 %add149, %conv150
  %109 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64152 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %109, i32 0, i32 4
  %110 = load i32, i32* %m_zip64152, align 4
  %tobool153 = icmp ne i32 %110, 0
  %cond = select i1 %tobool153, i64 28, i64 0
  %add154 = add i64 %add151, %cond
  store %struct.mz_zip_archive* %105, %struct.mz_zip_archive** %pZip.addr.i563, align 8
  store %struct.mz_zip_array* %m_central_dir148, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i64 %add154, i64* %n.addr.i, align 8
  %111 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i563, align 8
  %112 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %113 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %113, i32 0, i32 1
  %114 = load i64, i64* %m_size.i, align 8
  %115 = load i64, i64* %n.addr.i, align 8
  %add.i = add i64 %114, %115
  store %struct.mz_zip_archive* %111, %struct.mz_zip_archive** %pZip.addr.i.i, align 8
  store %struct.mz_zip_array* %112, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  store i64 %add.i, i64* %new_capacity.addr.i.i, align 8
  store i32 1, i32* %growing.addr.i.i, align 4
  %116 = load i64, i64* %new_capacity.addr.i.i, align 8
  %117 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_capacity.i.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %117, i32 0, i32 2
  %118 = load i64, i64* %m_capacity.i.i, align 8
  %cmp.i.i = icmp ugt i64 %116, %118
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end2.i.i

if.then.i.i:                                      ; preds = %if.end147
  %119 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i, align 8
  %120 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %121 = load i64, i64* %new_capacity.addr.i.i, align 8
  %122 = load i32, i32* %growing.addr.i.i, align 4
  %call.i.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %119, %struct.mz_zip_array* %120, i64 %121, i32 %122) #10
  %tobool.i.i = icmp ne i32 %call.i.i, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.then.i.i
  store i32 0, i32* %retval.i.i, align 4
  br label %mz_zip_array_ensure_room.exit

if.end.i.i:                                       ; preds = %if.then.i.i
  br label %if.end2.i.i

if.end2.i.i:                                      ; preds = %if.end.i.i, %if.end147
  store i32 1, i32* %retval.i.i, align 4
  br label %mz_zip_array_ensure_room.exit

mz_zip_array_ensure_room.exit:                    ; preds = %if.then1.i.i, %if.end2.i.i
  %123 = load i32, i32* %retval.i.i, align 4
  %tobool156 = icmp ne i32 %123, 0
  br i1 %tobool156, label %lor.lhs.false157, label %if.then160

lor.lhs.false157:                                 ; preds = %mz_zip_array_ensure_room.exit
  %124 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %125 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %125, i32 0, i32 1
  store %struct.mz_zip_archive* %124, %struct.mz_zip_archive** %pZip.addr.i569, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i570, align 8
  store i64 1, i64* %n.addr.i571, align 8
  %126 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i569, align 8
  %127 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i570, align 8
  %128 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i570, align 8
  %m_size.i572 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %128, i32 0, i32 1
  %129 = load i64, i64* %m_size.i572, align 8
  %130 = load i64, i64* %n.addr.i571, align 8
  %add.i573 = add i64 %129, %130
  store %struct.mz_zip_archive* %126, %struct.mz_zip_archive** %pZip.addr.i.i565, align 8
  store %struct.mz_zip_array* %127, %struct.mz_zip_array** %pArray.addr.i.i566, align 8
  store i64 %add.i573, i64* %new_capacity.addr.i.i567, align 8
  store i32 1, i32* %growing.addr.i.i568, align 4
  %131 = load i64, i64* %new_capacity.addr.i.i567, align 8
  %132 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i566, align 8
  %m_capacity.i.i574 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %132, i32 0, i32 2
  %133 = load i64, i64* %m_capacity.i.i574, align 8
  %cmp.i.i575 = icmp ugt i64 %131, %133
  br i1 %cmp.i.i575, label %if.then.i.i578, label %if.end2.i.i581

if.then.i.i578:                                   ; preds = %lor.lhs.false157
  %134 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i565, align 8
  %135 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i566, align 8
  %136 = load i64, i64* %new_capacity.addr.i.i567, align 8
  %137 = load i32, i32* %growing.addr.i.i568, align 4
  %call.i.i576 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %134, %struct.mz_zip_array* %135, i64 %136, i32 %137) #10
  %tobool.i.i577 = icmp ne i32 %call.i.i576, 0
  br i1 %tobool.i.i577, label %if.end.i.i580, label %if.then1.i.i579

if.then1.i.i579:                                  ; preds = %if.then.i.i578
  store i32 0, i32* %retval.i.i564, align 4
  br label %mz_zip_array_ensure_room.exit582

if.end.i.i580:                                    ; preds = %if.then.i.i578
  br label %if.end2.i.i581

if.end2.i.i581:                                   ; preds = %if.end.i.i580, %lor.lhs.false157
  store i32 1, i32* %retval.i.i564, align 4
  br label %mz_zip_array_ensure_room.exit582

mz_zip_array_ensure_room.exit582:                 ; preds = %if.then1.i.i579, %if.end2.i.i581
  %138 = load i32, i32* %retval.i.i564, align 4
  %tobool159 = icmp ne i32 %138, 0
  br i1 %tobool159, label %if.end162, label %if.then160

if.then160:                                       ; preds = %mz_zip_array_ensure_room.exit582, %mz_zip_array_ensure_room.exit
  %139 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %139, %struct.mz_zip_archive** %pZip.addr.i583, align 8
  store i32 16, i32* %err_num.addr.i584, align 4
  %140 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i583, align 8
  %tobool.i585 = icmp ne %struct.mz_zip_archive* %140, null
  br i1 %tobool.i585, label %if.then.i587, label %mz_zip_set_error.exit588

if.then.i587:                                     ; preds = %if.then160
  %141 = load i32, i32* %err_num.addr.i584, align 4
  %142 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i583, align 8
  %m_last_error.i586 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %142, i32 0, i32 5
  store i32 %141, i32* %m_last_error.i586, align 4
  br label %mz_zip_set_error.exit588

mz_zip_set_error.exit588:                         ; preds = %if.then160, %if.then.i587
  store i32 0, i32* %retval, align 4
  br label %return

if.end162:                                        ; preds = %mz_zip_array_ensure_room.exit582
  %143 = load i32, i32* %store_data_uncompressed, align 4
  %tobool163 = icmp ne i32 %143, 0
  br i1 %tobool163, label %if.end173, label %land.lhs.true164

land.lhs.true164:                                 ; preds = %if.end162
  %144 = load i64, i64* %buf_size.addr, align 8
  %tobool165 = icmp ne i64 %144, 0
  br i1 %tobool165, label %if.then166, label %if.end173

if.then166:                                       ; preds = %land.lhs.true164
  %145 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %145, i32 0, i32 7
  %146 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %147 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %147, i32 0, i32 10
  %148 = load i8*, i8** %m_pAlloc_opaque, align 8
  %call167 = call i8* %146(i8* %148, i64 1, i64 319352)
  %149 = bitcast i8* %call167 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %149, %struct.tdefl_compressor** %pComp, align 8
  %cmp168 = icmp eq %struct.tdefl_compressor* null, %149
  br i1 %cmp168, label %if.then170, label %if.end172

if.then170:                                       ; preds = %if.then166
  %150 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %150, %struct.mz_zip_archive** %pZip.addr.i589, align 8
  store i32 16, i32* %err_num.addr.i590, align 4
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i589, align 8
  %tobool.i591 = icmp ne %struct.mz_zip_archive* %151, null
  br i1 %tobool.i591, label %if.then.i593, label %mz_zip_set_error.exit594

if.then.i593:                                     ; preds = %if.then170
  %152 = load i32, i32* %err_num.addr.i590, align 4
  %153 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i589, align 8
  %m_last_error.i592 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %153, i32 0, i32 5
  store i32 %152, i32* %m_last_error.i592, align 4
  br label %mz_zip_set_error.exit594

mz_zip_set_error.exit594:                         ; preds = %if.then170, %if.then.i593
  store i32 0, i32* %retval, align 4
  br label %return

if.end172:                                        ; preds = %if.then166
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %land.lhs.true164, %if.end162
  %154 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %155 = load i64, i64* %cur_archive_file_ofs, align 8
  %156 = load i32, i32* %num_alignment_padding_bytes, align 4
  %call174 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive* %154, i64 %155, i32 %156)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end178, label %if.then176

if.then176:                                       ; preds = %if.end173
  %157 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %157, i32 0, i32 8
  %158 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %159 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque177 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %159, i32 0, i32 10
  %160 = load i8*, i8** %m_pAlloc_opaque177, align 8
  %161 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %162 = bitcast %struct.tdefl_compressor* %161 to i8*
  call void %158(i8* %160, i8* %162)
  store i32 0, i32* %retval, align 4
  br label %return

if.end178:                                        ; preds = %if.end173
  %163 = load i32, i32* %num_alignment_padding_bytes, align 4
  %conv179 = zext i32 %163 to i64
  %164 = load i64, i64* %local_dir_header_ofs, align 8
  %add180 = add i64 %164, %conv179
  store i64 %add180, i64* %local_dir_header_ofs, align 8
  %165 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %165, i32 0, i32 6
  %166 = load i64, i64* %m_file_offset_alignment, align 8
  %tobool181 = icmp ne i64 %166, 0
  br i1 %tobool181, label %if.then182, label %if.end190

if.then182:                                       ; preds = %if.end178
  %167 = load i64, i64* %local_dir_header_ofs, align 8
  %168 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment183 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %168, i32 0, i32 6
  %169 = load i64, i64* %m_file_offset_alignment183, align 8
  %sub184 = sub i64 %169, 1
  %and185 = and i64 %167, %sub184
  %cmp186 = icmp eq i64 %and185, 0
  %lnot = xor i1 %cmp186, true
  %lnot.ext = zext i1 %lnot to i32
  %conv188 = sext i32 %lnot.ext to i64
  %tobool189 = icmp ne i64 %conv188, 0
  br i1 %tobool189, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then182
  call void @__assert_rtn(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__func__.mz_zip_writer_add_mem_ex_v2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 6222, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.22, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then182
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %170
  br label %if.end190

if.end190:                                        ; preds = %cond.end, %if.end178
  %171 = load i32, i32* %num_alignment_padding_bytes, align 4
  %conv191 = zext i32 %171 to i64
  %172 = load i64, i64* %cur_archive_file_ofs, align 8
  %add192 = add i64 %172, %conv191
  store i64 %add192, i64* %cur_archive_file_ofs, align 8
  %173 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.memset.p0i8.i64(i8* %173, i8 0, i64 30, i32 16, i1 false)
  %174 = load i32, i32* %store_data_uncompressed, align 4
  %tobool193 = icmp ne i32 %174, 0
  br i1 %tobool193, label %lor.lhs.false194, label %if.then197

lor.lhs.false194:                                 ; preds = %if.end190
  %175 = load i32, i32* %level_and_flags.addr, align 4
  %and195 = and i32 %175, 1024
  %tobool196 = icmp ne i32 %and195, 0
  br i1 %tobool196, label %if.then197, label %if.end198

if.then197:                                       ; preds = %lor.lhs.false194, %if.end190
  store i16 8, i16* %method, align 2
  br label %if.end198

if.end198:                                        ; preds = %if.then197, %lor.lhs.false194
  %176 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64199 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %176, i32 0, i32 4
  %177 = load i32, i32* %m_zip64199, align 4
  %tobool200 = icmp ne i32 %177, 0
  br i1 %tobool200, label %if.then201, label %if.else274

if.then201:                                       ; preds = %if.end198
  %178 = load i64, i64* %uncomp_size.addr, align 8
  %cmp202 = icmp uge i64 %178, 4294967295
  br i1 %cmp202, label %if.then207, label %lor.lhs.false204

lor.lhs.false204:                                 ; preds = %if.then201
  %179 = load i64, i64* %local_dir_header_ofs, align 8
  %cmp205 = icmp uge i64 %179, 4294967295
  br i1 %cmp205, label %if.then207, label %if.end228

if.then207:                                       ; preds = %lor.lhs.false204, %if.then201
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i32 0, i32 0
  store i8* %arraydecay, i8** %pExtra_data, align 8
  %arraydecay208 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i32 0, i32 0
  %180 = load i64, i64* %uncomp_size.addr, align 8
  %cmp209 = icmp uge i64 %180, 4294967295
  br i1 %cmp209, label %cond.true211, label %cond.false212

cond.true211:                                     ; preds = %if.then207
  br label %cond.end213

cond.false212:                                    ; preds = %if.then207
  br label %cond.end213

cond.end213:                                      ; preds = %cond.false212, %cond.true211
  %cond214 = phi i64* [ %uncomp_size.addr, %cond.true211 ], [ null, %cond.false212 ]
  %181 = load i64, i64* %uncomp_size.addr, align 8
  %cmp215 = icmp uge i64 %181, 4294967295
  br i1 %cmp215, label %cond.true217, label %cond.false218

cond.true217:                                     ; preds = %cond.end213
  br label %cond.end219

cond.false218:                                    ; preds = %cond.end213
  br label %cond.end219

cond.end219:                                      ; preds = %cond.false218, %cond.true217
  %cond220 = phi i64* [ %comp_size, %cond.true217 ], [ null, %cond.false218 ]
  %182 = load i64, i64* %local_dir_header_ofs, align 8
  %cmp221 = icmp uge i64 %182, 4294967295
  br i1 %cmp221, label %cond.true223, label %cond.false224

cond.true223:                                     ; preds = %cond.end219
  br label %cond.end225

cond.false224:                                    ; preds = %cond.end219
  br label %cond.end225

cond.end225:                                      ; preds = %cond.false224, %cond.true223
  %cond226 = phi i64* [ %local_dir_header_ofs, %cond.true223 ], [ null, %cond.false224 ]
  %call227 = call i32 @mz_zip_writer_create_zip64_extra_data(i8* %arraydecay208, i64* %cond214, i64* %cond220, i64* %cond226)
  store i32 %call227, i32* %extra_size, align 4
  br label %if.end228

if.end228:                                        ; preds = %cond.end225, %lor.lhs.false204
  %183 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %arraydecay229 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i32 0, i32 0
  %184 = load i64, i64* %archive_name_size, align 8
  %conv230 = trunc i64 %184 to i16
  %185 = load i32, i32* %extra_size, align 4
  %186 = load i32, i32* %user_extra_data_len.addr, align 4
  %add231 = add i32 %185, %186
  %conv232 = trunc i32 %add231 to i16
  %187 = load i16, i16* %method, align 2
  %188 = load i16, i16* %bit_flags, align 2
  %189 = load i16, i16* %dos_time, align 2
  %190 = load i16, i16* %dos_date, align 2
  %call233 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %183, i8* %arraydecay229, i16 zeroext %conv230, i16 zeroext %conv232, i64 0, i64 0, i32 0, i16 zeroext %187, i16 zeroext %188, i16 zeroext %189, i16 zeroext %190)
  %tobool234 = icmp ne i32 %call233, 0
  br i1 %tobool234, label %if.end237, label %if.then235

if.then235:                                       ; preds = %if.end228
  %191 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %191, %struct.mz_zip_archive** %pZip.addr.i601, align 8
  store i32 27, i32* %err_num.addr.i602, align 4
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i601, align 8
  %tobool.i603 = icmp ne %struct.mz_zip_archive* %192, null
  br i1 %tobool.i603, label %if.then.i605, label %mz_zip_set_error.exit606

if.then.i605:                                     ; preds = %if.then235
  %193 = load i32, i32* %err_num.addr.i602, align 4
  %194 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i601, align 8
  %m_last_error.i604 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %194, i32 0, i32 5
  store i32 %193, i32* %m_last_error.i604, align 4
  br label %mz_zip_set_error.exit606

mz_zip_set_error.exit606:                         ; preds = %if.then235, %if.then.i605
  store i32 0, i32* %retval, align 4
  br label %return

if.end237:                                        ; preds = %if.end228
  %195 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %195, i32 0, i32 12
  %196 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %197 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %197, i32 0, i32 14
  %198 = load i8*, i8** %m_pIO_opaque, align 8
  %199 = load i64, i64* %local_dir_header_ofs, align 8
  %arraydecay238 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i32 0, i32 0
  %call239 = call i64 %196(i8* %198, i64 %199, i8* %arraydecay238, i64 30)
  %cmp240 = icmp ne i64 %call239, 30
  br i1 %cmp240, label %if.then242, label %if.end244

if.then242:                                       ; preds = %if.end237
  %200 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %200, %struct.mz_zip_archive** %pZip.addr.i607, align 8
  store i32 19, i32* %err_num.addr.i608, align 4
  %201 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i607, align 8
  %tobool.i609 = icmp ne %struct.mz_zip_archive* %201, null
  br i1 %tobool.i609, label %if.then.i611, label %mz_zip_set_error.exit612

if.then.i611:                                     ; preds = %if.then242
  %202 = load i32, i32* %err_num.addr.i608, align 4
  %203 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i607, align 8
  %m_last_error.i610 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %203, i32 0, i32 5
  store i32 %202, i32* %m_last_error.i610, align 4
  br label %mz_zip_set_error.exit612

mz_zip_set_error.exit612:                         ; preds = %if.then242, %if.then.i611
  store i32 0, i32* %retval, align 4
  br label %return

if.end244:                                        ; preds = %if.end237
  %204 = load i64, i64* %cur_archive_file_ofs, align 8
  %add245 = add i64 %204, 30
  store i64 %add245, i64* %cur_archive_file_ofs, align 8
  %205 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite246 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %205, i32 0, i32 12
  %206 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite246, align 8
  %207 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque247 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %207, i32 0, i32 14
  %208 = load i8*, i8** %m_pIO_opaque247, align 8
  %209 = load i64, i64* %cur_archive_file_ofs, align 8
  %210 = load i8*, i8** %pArchive_name.addr, align 8
  %211 = load i64, i64* %archive_name_size, align 8
  %call248 = call i64 %206(i8* %208, i64 %209, i8* %210, i64 %211)
  %212 = load i64, i64* %archive_name_size, align 8
  %cmp249 = icmp ne i64 %call248, %212
  br i1 %cmp249, label %if.then251, label %if.end255

if.then251:                                       ; preds = %if.end244
  %213 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree252 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %213, i32 0, i32 8
  %214 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree252, align 8
  %215 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque253 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %215, i32 0, i32 10
  %216 = load i8*, i8** %m_pAlloc_opaque253, align 8
  %217 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %218 = bitcast %struct.tdefl_compressor* %217 to i8*
  call void %214(i8* %216, i8* %218)
  %219 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %219, %struct.mz_zip_archive** %pZip.addr.i619, align 8
  store i32 19, i32* %err_num.addr.i620, align 4
  %220 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i619, align 8
  %tobool.i621 = icmp ne %struct.mz_zip_archive* %220, null
  br i1 %tobool.i621, label %if.then.i623, label %mz_zip_set_error.exit624

if.then.i623:                                     ; preds = %if.then251
  %221 = load i32, i32* %err_num.addr.i620, align 4
  %222 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i619, align 8
  %m_last_error.i622 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %222, i32 0, i32 5
  store i32 %221, i32* %m_last_error.i622, align 4
  br label %mz_zip_set_error.exit624

mz_zip_set_error.exit624:                         ; preds = %if.then251, %if.then.i623
  store i32 0, i32* %retval, align 4
  br label %return

if.end255:                                        ; preds = %if.end244
  %223 = load i64, i64* %archive_name_size, align 8
  %224 = load i64, i64* %cur_archive_file_ofs, align 8
  %add256 = add i64 %224, %223
  store i64 %add256, i64* %cur_archive_file_ofs, align 8
  %225 = load i8*, i8** %pExtra_data, align 8
  %cmp257 = icmp ne i8* %225, null
  br i1 %cmp257, label %if.then259, label %if.end273

if.then259:                                       ; preds = %if.end255
  %226 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite260 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %226, i32 0, i32 12
  %227 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite260, align 8
  %228 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque261 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %228, i32 0, i32 14
  %229 = load i8*, i8** %m_pIO_opaque261, align 8
  %230 = load i64, i64* %cur_archive_file_ofs, align 8
  %arraydecay262 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i32 0, i32 0
  %231 = load i32, i32* %extra_size, align 4
  %conv263 = zext i32 %231 to i64
  %call264 = call i64 %227(i8* %229, i64 %230, i8* %arraydecay262, i64 %conv263)
  %232 = load i32, i32* %extra_size, align 4
  %conv265 = zext i32 %232 to i64
  %cmp266 = icmp ne i64 %call264, %conv265
  br i1 %cmp266, label %if.then268, label %if.end270

if.then268:                                       ; preds = %if.then259
  %233 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %233, %struct.mz_zip_archive** %pZip.addr.i631, align 8
  store i32 19, i32* %err_num.addr.i632, align 4
  %234 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i631, align 8
  %tobool.i633 = icmp ne %struct.mz_zip_archive* %234, null
  br i1 %tobool.i633, label %if.then.i635, label %mz_zip_set_error.exit636

if.then.i635:                                     ; preds = %if.then268
  %235 = load i32, i32* %err_num.addr.i632, align 4
  %236 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i631, align 8
  %m_last_error.i634 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %236, i32 0, i32 5
  store i32 %235, i32* %m_last_error.i634, align 4
  br label %mz_zip_set_error.exit636

mz_zip_set_error.exit636:                         ; preds = %if.then268, %if.then.i635
  store i32 0, i32* %retval, align 4
  br label %return

if.end270:                                        ; preds = %if.then259
  %237 = load i32, i32* %extra_size, align 4
  %conv271 = zext i32 %237 to i64
  %238 = load i64, i64* %cur_archive_file_ofs, align 8
  %add272 = add i64 %238, %conv271
  store i64 %add272, i64* %cur_archive_file_ofs, align 8
  br label %if.end273

if.end273:                                        ; preds = %if.end270, %if.end255
  br label %if.end312

if.else274:                                       ; preds = %if.end198
  %239 = load i64, i64* %comp_size, align 8
  %cmp275 = icmp ugt i64 %239, 4294967295
  br i1 %cmp275, label %if.then280, label %lor.lhs.false277

lor.lhs.false277:                                 ; preds = %if.else274
  %240 = load i64, i64* %cur_archive_file_ofs, align 8
  %cmp278 = icmp ugt i64 %240, 4294967295
  br i1 %cmp278, label %if.then280, label %if.end282

if.then280:                                       ; preds = %lor.lhs.false277, %if.else274
  %241 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %241, %struct.mz_zip_archive** %pZip.addr.i637, align 8
  store i32 29, i32* %err_num.addr.i638, align 4
  %242 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i637, align 8
  %tobool.i639 = icmp ne %struct.mz_zip_archive* %242, null
  br i1 %tobool.i639, label %if.then.i641, label %mz_zip_set_error.exit642

if.then.i641:                                     ; preds = %if.then280
  %243 = load i32, i32* %err_num.addr.i638, align 4
  %244 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i637, align 8
  %m_last_error.i640 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %244, i32 0, i32 5
  store i32 %243, i32* %m_last_error.i640, align 4
  br label %mz_zip_set_error.exit642

mz_zip_set_error.exit642:                         ; preds = %if.then280, %if.then.i641
  store i32 0, i32* %retval, align 4
  br label %return

if.end282:                                        ; preds = %lor.lhs.false277
  %245 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %arraydecay283 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i32 0, i32 0
  %246 = load i64, i64* %archive_name_size, align 8
  %conv284 = trunc i64 %246 to i16
  %247 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv285 = trunc i32 %247 to i16
  %248 = load i16, i16* %method, align 2
  %249 = load i16, i16* %bit_flags, align 2
  %250 = load i16, i16* %dos_time, align 2
  %251 = load i16, i16* %dos_date, align 2
  %call286 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %245, i8* %arraydecay283, i16 zeroext %conv284, i16 zeroext %conv285, i64 0, i64 0, i32 0, i16 zeroext %248, i16 zeroext %249, i16 zeroext %250, i16 zeroext %251)
  %tobool287 = icmp ne i32 %call286, 0
  br i1 %tobool287, label %if.end290, label %if.then288

if.then288:                                       ; preds = %if.end282
  %252 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %252, %struct.mz_zip_archive** %pZip.addr.i649, align 8
  store i32 27, i32* %err_num.addr.i650, align 4
  %253 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i649, align 8
  %tobool.i651 = icmp ne %struct.mz_zip_archive* %253, null
  br i1 %tobool.i651, label %if.then.i653, label %mz_zip_set_error.exit654

if.then.i653:                                     ; preds = %if.then288
  %254 = load i32, i32* %err_num.addr.i650, align 4
  %255 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i649, align 8
  %m_last_error.i652 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %255, i32 0, i32 5
  store i32 %254, i32* %m_last_error.i652, align 4
  br label %mz_zip_set_error.exit654

mz_zip_set_error.exit654:                         ; preds = %if.then288, %if.then.i653
  store i32 0, i32* %retval, align 4
  br label %return

if.end290:                                        ; preds = %if.end282
  %256 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite291 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %256, i32 0, i32 12
  %257 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite291, align 8
  %258 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque292 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %258, i32 0, i32 14
  %259 = load i8*, i8** %m_pIO_opaque292, align 8
  %260 = load i64, i64* %local_dir_header_ofs, align 8
  %arraydecay293 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i32 0, i32 0
  %call294 = call i64 %257(i8* %259, i64 %260, i8* %arraydecay293, i64 30)
  %cmp295 = icmp ne i64 %call294, 30
  br i1 %cmp295, label %if.then297, label %if.end299

if.then297:                                       ; preds = %if.end290
  %261 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %261, %struct.mz_zip_archive** %pZip.addr.i643, align 8
  store i32 19, i32* %err_num.addr.i644, align 4
  %262 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i643, align 8
  %tobool.i645 = icmp ne %struct.mz_zip_archive* %262, null
  br i1 %tobool.i645, label %if.then.i647, label %mz_zip_set_error.exit648

if.then.i647:                                     ; preds = %if.then297
  %263 = load i32, i32* %err_num.addr.i644, align 4
  %264 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i643, align 8
  %m_last_error.i646 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %264, i32 0, i32 5
  store i32 %263, i32* %m_last_error.i646, align 4
  br label %mz_zip_set_error.exit648

mz_zip_set_error.exit648:                         ; preds = %if.then297, %if.then.i647
  store i32 0, i32* %retval, align 4
  br label %return

if.end299:                                        ; preds = %if.end290
  %265 = load i64, i64* %cur_archive_file_ofs, align 8
  %add300 = add i64 %265, 30
  store i64 %add300, i64* %cur_archive_file_ofs, align 8
  %266 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite301 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %266, i32 0, i32 12
  %267 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite301, align 8
  %268 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque302 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %268, i32 0, i32 14
  %269 = load i8*, i8** %m_pIO_opaque302, align 8
  %270 = load i64, i64* %cur_archive_file_ofs, align 8
  %271 = load i8*, i8** %pArchive_name.addr, align 8
  %272 = load i64, i64* %archive_name_size, align 8
  %call303 = call i64 %267(i8* %269, i64 %270, i8* %271, i64 %272)
  %273 = load i64, i64* %archive_name_size, align 8
  %cmp304 = icmp ne i64 %call303, %273
  br i1 %cmp304, label %if.then306, label %if.end310

if.then306:                                       ; preds = %if.end299
  %274 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree307 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %274, i32 0, i32 8
  %275 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree307, align 8
  %276 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque308 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %276, i32 0, i32 10
  %277 = load i8*, i8** %m_pAlloc_opaque308, align 8
  %278 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %279 = bitcast %struct.tdefl_compressor* %278 to i8*
  call void %275(i8* %277, i8* %279)
  %280 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %280, %struct.mz_zip_archive** %pZip.addr.i625, align 8
  store i32 19, i32* %err_num.addr.i626, align 4
  %281 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i625, align 8
  %tobool.i627 = icmp ne %struct.mz_zip_archive* %281, null
  br i1 %tobool.i627, label %if.then.i629, label %mz_zip_set_error.exit630

if.then.i629:                                     ; preds = %if.then306
  %282 = load i32, i32* %err_num.addr.i626, align 4
  %283 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i625, align 8
  %m_last_error.i628 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %283, i32 0, i32 5
  store i32 %282, i32* %m_last_error.i628, align 4
  br label %mz_zip_set_error.exit630

mz_zip_set_error.exit630:                         ; preds = %if.then306, %if.then.i629
  store i32 0, i32* %retval, align 4
  br label %return

if.end310:                                        ; preds = %if.end299
  %284 = load i64, i64* %archive_name_size, align 8
  %285 = load i64, i64* %cur_archive_file_ofs, align 8
  %add311 = add i64 %285, %284
  store i64 %add311, i64* %cur_archive_file_ofs, align 8
  br label %if.end312

if.end312:                                        ; preds = %if.end310, %if.end273
  %286 = load i32, i32* %user_extra_data_len.addr, align 4
  %cmp313 = icmp ugt i32 %286, 0
  br i1 %cmp313, label %if.then315, label %if.end328

if.then315:                                       ; preds = %if.end312
  %287 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite316 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %287, i32 0, i32 12
  %288 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite316, align 8
  %289 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque317 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %289, i32 0, i32 14
  %290 = load i8*, i8** %m_pIO_opaque317, align 8
  %291 = load i64, i64* %cur_archive_file_ofs, align 8
  %292 = load i8*, i8** %user_extra_data.addr, align 8
  %293 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv318 = zext i32 %293 to i64
  %call319 = call i64 %288(i8* %290, i64 %291, i8* %292, i64 %conv318)
  %294 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv320 = zext i32 %294 to i64
  %cmp321 = icmp ne i64 %call319, %conv320
  br i1 %cmp321, label %if.then323, label %if.end325

if.then323:                                       ; preds = %if.then315
  %295 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %295, %struct.mz_zip_archive** %pZip.addr.i613, align 8
  store i32 19, i32* %err_num.addr.i614, align 4
  %296 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i613, align 8
  %tobool.i615 = icmp ne %struct.mz_zip_archive* %296, null
  br i1 %tobool.i615, label %if.then.i617, label %mz_zip_set_error.exit618

if.then.i617:                                     ; preds = %if.then323
  %297 = load i32, i32* %err_num.addr.i614, align 4
  %298 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i613, align 8
  %m_last_error.i616 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %298, i32 0, i32 5
  store i32 %297, i32* %m_last_error.i616, align 4
  br label %mz_zip_set_error.exit618

mz_zip_set_error.exit618:                         ; preds = %if.then323, %if.then.i617
  store i32 0, i32* %retval, align 4
  br label %return

if.end325:                                        ; preds = %if.then315
  %299 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv326 = zext i32 %299 to i64
  %300 = load i64, i64* %cur_archive_file_ofs, align 8
  %add327 = add i64 %300, %conv326
  store i64 %add327, i64* %cur_archive_file_ofs, align 8
  br label %if.end328

if.end328:                                        ; preds = %if.end325, %if.end312
  %301 = load i32, i32* %store_data_uncompressed, align 4
  %tobool329 = icmp ne i32 %301, 0
  br i1 %tobool329, label %if.then330, label %if.else342

if.then330:                                       ; preds = %if.end328
  %302 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite331 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %302, i32 0, i32 12
  %303 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite331, align 8
  %304 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque332 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %304, i32 0, i32 14
  %305 = load i8*, i8** %m_pIO_opaque332, align 8
  %306 = load i64, i64* %cur_archive_file_ofs, align 8
  %307 = load i8*, i8** %pBuf.addr, align 8
  %308 = load i64, i64* %buf_size.addr, align 8
  %call333 = call i64 %303(i8* %305, i64 %306, i8* %307, i64 %308)
  %309 = load i64, i64* %buf_size.addr, align 8
  %cmp334 = icmp ne i64 %call333, %309
  br i1 %cmp334, label %if.then336, label %if.end340

if.then336:                                       ; preds = %if.then330
  %310 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree337 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %310, i32 0, i32 8
  %311 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree337, align 8
  %312 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque338 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %312, i32 0, i32 10
  %313 = load i8*, i8** %m_pAlloc_opaque338, align 8
  %314 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %315 = bitcast %struct.tdefl_compressor* %314 to i8*
  call void %311(i8* %313, i8* %315)
  %316 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %316, %struct.mz_zip_archive** %pZip.addr.i595, align 8
  store i32 19, i32* %err_num.addr.i596, align 4
  %317 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i595, align 8
  %tobool.i597 = icmp ne %struct.mz_zip_archive* %317, null
  br i1 %tobool.i597, label %if.then.i599, label %mz_zip_set_error.exit600

if.then.i599:                                     ; preds = %if.then336
  %318 = load i32, i32* %err_num.addr.i596, align 4
  %319 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i595, align 8
  %m_last_error.i598 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %319, i32 0, i32 5
  store i32 %318, i32* %m_last_error.i598, align 4
  br label %mz_zip_set_error.exit600

mz_zip_set_error.exit600:                         ; preds = %if.then336, %if.then.i599
  store i32 0, i32* %retval, align 4
  br label %return

if.end340:                                        ; preds = %if.then330
  %320 = load i64, i64* %buf_size.addr, align 8
  %321 = load i64, i64* %cur_archive_file_ofs, align 8
  %add341 = add i64 %321, %320
  store i64 %add341, i64* %cur_archive_file_ofs, align 8
  %322 = load i64, i64* %buf_size.addr, align 8
  store i64 %322, i64* %comp_size, align 8
  br label %if.end361

if.else342:                                       ; preds = %if.end328
  %323 = load i64, i64* %buf_size.addr, align 8
  %tobool343 = icmp ne i64 %323, 0
  br i1 %tobool343, label %if.then344, label %if.end360

if.then344:                                       ; preds = %if.else342
  %324 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 0
  store %struct.mz_zip_archive* %324, %struct.mz_zip_archive** %m_pZip, align 8
  %325 = load i64, i64* %cur_archive_file_ofs, align 8
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  store i64 %325, i64* %m_cur_archive_file_ofs, align 8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  store i64 0, i64* %m_comp_size, align 8
  %326 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %327 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  %328 = load i32, i32* %level, align 4
  %call345 = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %328, i32 -15, i32 0)
  %call346 = call i32 @tdefl_init(%struct.tdefl_compressor* %326, i32 (i8*, i32, i8*)* @mz_zip_writer_add_put_buf_callback, i8* %327, i32 %call345)
  %cmp347 = icmp ne i32 %call346, 0
  br i1 %cmp347, label %if.then353, label %lor.lhs.false349

lor.lhs.false349:                                 ; preds = %if.then344
  %329 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %330 = load i8*, i8** %pBuf.addr, align 8
  %331 = load i64, i64* %buf_size.addr, align 8
  %call350 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %329, i8* %330, i64 %331, i32 4)
  %cmp351 = icmp ne i32 %call350, 1
  br i1 %cmp351, label %if.then353, label %if.end357

if.then353:                                       ; preds = %lor.lhs.false349, %if.then344
  %332 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree354 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %332, i32 0, i32 8
  %333 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree354, align 8
  %334 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque355 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %334, i32 0, i32 10
  %335 = load i8*, i8** %m_pAlloc_opaque355, align 8
  %336 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %337 = bitcast %struct.tdefl_compressor* %336 to i8*
  call void %333(i8* %335, i8* %337)
  %338 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %338, %struct.mz_zip_archive** %pZip.addr.i545, align 8
  store i32 12, i32* %err_num.addr.i546, align 4
  %339 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i545, align 8
  %tobool.i547 = icmp ne %struct.mz_zip_archive* %339, null
  br i1 %tobool.i547, label %if.then.i549, label %mz_zip_set_error.exit550

if.then.i549:                                     ; preds = %if.then353
  %340 = load i32, i32* %err_num.addr.i546, align 4
  %341 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i545, align 8
  %m_last_error.i548 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %341, i32 0, i32 5
  store i32 %340, i32* %m_last_error.i548, align 4
  br label %mz_zip_set_error.exit550

mz_zip_set_error.exit550:                         ; preds = %if.then353, %if.then.i549
  store i32 0, i32* %retval, align 4
  br label %return

if.end357:                                        ; preds = %lor.lhs.false349
  %m_comp_size358 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  %342 = load i64, i64* %m_comp_size358, align 8
  store i64 %342, i64* %comp_size, align 8
  %m_cur_archive_file_ofs359 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  %343 = load i64, i64* %m_cur_archive_file_ofs359, align 8
  store i64 %343, i64* %cur_archive_file_ofs, align 8
  br label %if.end360

if.end360:                                        ; preds = %if.end357, %if.else342
  br label %if.end361

if.end361:                                        ; preds = %if.end360, %if.end340
  %344 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree362 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %344, i32 0, i32 8
  %345 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree362, align 8
  %346 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque363 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %346, i32 0, i32 10
  %347 = load i8*, i8** %m_pAlloc_opaque363, align 8
  %348 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %349 = bitcast %struct.tdefl_compressor* %348 to i8*
  call void %345(i8* %347, i8* %349)
  store %struct.tdefl_compressor* null, %struct.tdefl_compressor** %pComp, align 8
  %350 = load i64, i64* %uncomp_size.addr, align 8
  %tobool364 = icmp ne i64 %350, 0
  br i1 %tobool364, label %if.then365, label %if.end411

if.then365:                                       ; preds = %if.end361
  store i32 16, i32* %local_dir_footer_size, align 4
  %351 = load i16, i16* %bit_flags, align 2
  %conv366 = zext i16 %351 to i32
  %and367 = and i32 %conv366, 8
  %tobool368 = icmp ne i32 %and367, 0
  %lnot369 = xor i1 %tobool368, true
  %lnot.ext370 = zext i1 %lnot369 to i32
  %conv371 = sext i32 %lnot.ext370 to i64
  %tobool372 = icmp ne i64 %conv371, 0
  br i1 %tobool372, label %cond.true373, label %cond.false374

cond.true373:                                     ; preds = %if.then365
  call void @__assert_rtn(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__func__.mz_zip_writer_add_mem_ex_v2, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 6331, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end375

cond.false374:                                    ; preds = %if.then365
  br label %cond.end375

cond.end375:                                      ; preds = %cond.false374, %352
  %arraydecay376 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay376, i64 0
  store i8* %add.ptr, i8** %p.addr.i527, align 8
  store i32 134695760, i32* %v.addr.i528, align 4
  %353 = load i32, i32* %v.addr.i528, align 4
  %conv.i529 = trunc i32 %353 to i8
  %354 = load i8*, i8** %p.addr.i527, align 8
  store i8 %conv.i529, i8* %354, align 1
  %355 = load i32, i32* %v.addr.i528, align 4
  %shr.i530 = lshr i32 %355, 8
  %conv1.i531 = trunc i32 %shr.i530 to i8
  %356 = load i8*, i8** %p.addr.i527, align 8
  %arrayidx2.i532 = getelementptr inbounds i8, i8* %356, i64 1
  store i8 %conv1.i531, i8* %arrayidx2.i532, align 1
  %357 = load i32, i32* %v.addr.i528, align 4
  %shr3.i533 = lshr i32 %357, 16
  %conv4.i534 = trunc i32 %shr3.i533 to i8
  %358 = load i8*, i8** %p.addr.i527, align 8
  %arrayidx5.i535 = getelementptr inbounds i8, i8* %358, i64 2
  store i8 %conv4.i534, i8* %arrayidx5.i535, align 1
  %359 = load i32, i32* %v.addr.i528, align 4
  %shr6.i536 = lshr i32 %359, 24
  %conv7.i537 = trunc i32 %shr6.i536 to i8
  %360 = load i8*, i8** %p.addr.i527, align 8
  %arrayidx8.i538 = getelementptr inbounds i8, i8* %360, i64 3
  store i8 %conv7.i537, i8* %arrayidx8.i538, align 1
  %arraydecay377 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr378 = getelementptr inbounds i8, i8* %arraydecay377, i64 4
  %361 = load i32, i32* %uncomp_crc32.addr, align 4
  store i8* %add.ptr378, i8** %p.addr.i515, align 8
  store i32 %361, i32* %v.addr.i516, align 4
  %362 = load i32, i32* %v.addr.i516, align 4
  %conv.i517 = trunc i32 %362 to i8
  %363 = load i8*, i8** %p.addr.i515, align 8
  store i8 %conv.i517, i8* %363, align 1
  %364 = load i32, i32* %v.addr.i516, align 4
  %shr.i518 = lshr i32 %364, 8
  %conv1.i519 = trunc i32 %shr.i518 to i8
  %365 = load i8*, i8** %p.addr.i515, align 8
  %arrayidx2.i520 = getelementptr inbounds i8, i8* %365, i64 1
  store i8 %conv1.i519, i8* %arrayidx2.i520, align 1
  %366 = load i32, i32* %v.addr.i516, align 4
  %shr3.i521 = lshr i32 %366, 16
  %conv4.i522 = trunc i32 %shr3.i521 to i8
  %367 = load i8*, i8** %p.addr.i515, align 8
  %arrayidx5.i523 = getelementptr inbounds i8, i8* %367, i64 2
  store i8 %conv4.i522, i8* %arrayidx5.i523, align 1
  %368 = load i32, i32* %v.addr.i516, align 4
  %shr6.i524 = lshr i32 %368, 24
  %conv7.i525 = trunc i32 %shr6.i524 to i8
  %369 = load i8*, i8** %p.addr.i515, align 8
  %arrayidx8.i526 = getelementptr inbounds i8, i8* %369, i64 3
  store i8 %conv7.i525, i8* %arrayidx8.i526, align 1
  %370 = load i8*, i8** %pExtra_data, align 8
  %cmp379 = icmp eq i8* %370, null
  br i1 %cmp379, label %if.then381, label %if.else393

if.then381:                                       ; preds = %cond.end375
  %371 = load i64, i64* %comp_size, align 8
  %cmp382 = icmp ugt i64 %371, 4294967295
  br i1 %cmp382, label %if.then384, label %if.end386

if.then384:                                       ; preds = %if.then381
  %372 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %372, %struct.mz_zip_archive** %pZip.addr.i509, align 8
  store i32 29, i32* %err_num.addr.i510, align 4
  %373 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i509, align 8
  %tobool.i511 = icmp ne %struct.mz_zip_archive* %373, null
  br i1 %tobool.i511, label %if.then.i513, label %mz_zip_set_error.exit514

if.then.i513:                                     ; preds = %if.then384
  %374 = load i32, i32* %err_num.addr.i510, align 4
  %375 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i509, align 8
  %m_last_error.i512 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %375, i32 0, i32 5
  store i32 %374, i32* %m_last_error.i512, align 4
  br label %mz_zip_set_error.exit514

mz_zip_set_error.exit514:                         ; preds = %if.then384, %if.then.i513
  store i32 0, i32* %retval, align 4
  br label %return

if.end386:                                        ; preds = %if.then381
  %arraydecay387 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr388 = getelementptr inbounds i8, i8* %arraydecay387, i64 8
  %376 = load i64, i64* %comp_size, align 8
  %conv389 = trunc i64 %376 to i32
  store i8* %add.ptr388, i8** %p.addr.i497, align 8
  store i32 %conv389, i32* %v.addr.i498, align 4
  %377 = load i32, i32* %v.addr.i498, align 4
  %conv.i499 = trunc i32 %377 to i8
  %378 = load i8*, i8** %p.addr.i497, align 8
  store i8 %conv.i499, i8* %378, align 1
  %379 = load i32, i32* %v.addr.i498, align 4
  %shr.i500 = lshr i32 %379, 8
  %conv1.i501 = trunc i32 %shr.i500 to i8
  %380 = load i8*, i8** %p.addr.i497, align 8
  %arrayidx2.i502 = getelementptr inbounds i8, i8* %380, i64 1
  store i8 %conv1.i501, i8* %arrayidx2.i502, align 1
  %381 = load i32, i32* %v.addr.i498, align 4
  %shr3.i503 = lshr i32 %381, 16
  %conv4.i504 = trunc i32 %shr3.i503 to i8
  %382 = load i8*, i8** %p.addr.i497, align 8
  %arrayidx5.i505 = getelementptr inbounds i8, i8* %382, i64 2
  store i8 %conv4.i504, i8* %arrayidx5.i505, align 1
  %383 = load i32, i32* %v.addr.i498, align 4
  %shr6.i506 = lshr i32 %383, 24
  %conv7.i507 = trunc i32 %shr6.i506 to i8
  %384 = load i8*, i8** %p.addr.i497, align 8
  %arrayidx8.i508 = getelementptr inbounds i8, i8* %384, i64 3
  store i8 %conv7.i507, i8* %arrayidx8.i508, align 1
  %arraydecay390 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr391 = getelementptr inbounds i8, i8* %arraydecay390, i64 12
  %385 = load i64, i64* %uncomp_size.addr, align 8
  %conv392 = trunc i64 %385 to i32
  store i8* %add.ptr391, i8** %p.addr.i492, align 8
  store i32 %conv392, i32* %v.addr.i493, align 4
  %386 = load i32, i32* %v.addr.i493, align 4
  %conv.i494 = trunc i32 %386 to i8
  %387 = load i8*, i8** %p.addr.i492, align 8
  store i8 %conv.i494, i8* %387, align 1
  %388 = load i32, i32* %v.addr.i493, align 4
  %shr.i495 = lshr i32 %388, 8
  %conv1.i496 = trunc i32 %shr.i495 to i8
  %389 = load i8*, i8** %p.addr.i492, align 8
  %arrayidx2.i = getelementptr inbounds i8, i8* %389, i64 1
  store i8 %conv1.i496, i8* %arrayidx2.i, align 1
  %390 = load i32, i32* %v.addr.i493, align 4
  %shr3.i = lshr i32 %390, 16
  %conv4.i = trunc i32 %shr3.i to i8
  %391 = load i8*, i8** %p.addr.i492, align 8
  %arrayidx5.i = getelementptr inbounds i8, i8* %391, i64 2
  store i8 %conv4.i, i8* %arrayidx5.i, align 1
  %392 = load i32, i32* %v.addr.i493, align 4
  %shr6.i = lshr i32 %392, 24
  %conv7.i = trunc i32 %shr6.i to i8
  %393 = load i8*, i8** %p.addr.i492, align 8
  %arrayidx8.i = getelementptr inbounds i8, i8* %393, i64 3
  store i8 %conv7.i, i8* %arrayidx8.i, align 1
  br label %if.end398

if.else393:                                       ; preds = %cond.end375
  %arraydecay394 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr395 = getelementptr inbounds i8, i8* %arraydecay394, i64 8
  %394 = load i64, i64* %comp_size, align 8
  store i8* %add.ptr395, i8** %p.addr.i466, align 8
  store i64 %394, i64* %v.addr.i467, align 8
  %395 = load i8*, i8** %p.addr.i466, align 8
  %396 = load i64, i64* %v.addr.i467, align 8
  %conv.i468 = trunc i64 %396 to i32
  store i8* %395, i8** %p.addr.i.i464, align 8
  store i32 %conv.i468, i32* %v.addr.i.i465, align 4
  %397 = load i32, i32* %v.addr.i.i465, align 4
  %conv.i.i469 = trunc i32 %397 to i8
  %398 = load i8*, i8** %p.addr.i.i464, align 8
  store i8 %conv.i.i469, i8* %398, align 1
  %399 = load i32, i32* %v.addr.i.i465, align 4
  %shr.i.i470 = lshr i32 %399, 8
  %conv1.i.i471 = trunc i32 %shr.i.i470 to i8
  %400 = load i8*, i8** %p.addr.i.i464, align 8
  %arrayidx2.i.i472 = getelementptr inbounds i8, i8* %400, i64 1
  store i8 %conv1.i.i471, i8* %arrayidx2.i.i472, align 1
  %401 = load i32, i32* %v.addr.i.i465, align 4
  %shr3.i.i473 = lshr i32 %401, 16
  %conv4.i.i474 = trunc i32 %shr3.i.i473 to i8
  %402 = load i8*, i8** %p.addr.i.i464, align 8
  %arrayidx5.i.i475 = getelementptr inbounds i8, i8* %402, i64 2
  store i8 %conv4.i.i474, i8* %arrayidx5.i.i475, align 1
  %403 = load i32, i32* %v.addr.i.i465, align 4
  %shr6.i.i476 = lshr i32 %403, 24
  %conv7.i.i477 = trunc i32 %shr6.i.i476 to i8
  %404 = load i8*, i8** %p.addr.i.i464, align 8
  %arrayidx8.i.i478 = getelementptr inbounds i8, i8* %404, i64 3
  store i8 %conv7.i.i477, i8* %arrayidx8.i.i478, align 1
  %405 = load i8*, i8** %p.addr.i466, align 8
  %add.ptr.i479 = getelementptr inbounds i8, i8* %405, i64 4
  %406 = load i64, i64* %v.addr.i467, align 8
  %shr.i480 = lshr i64 %406, 32
  %conv1.i481 = trunc i64 %shr.i480 to i32
  store i8* %add.ptr.i479, i8** %p.addr.i2.i462, align 8
  store i32 %conv1.i481, i32* %v.addr.i3.i463, align 4
  %407 = load i32, i32* %v.addr.i3.i463, align 4
  %conv.i4.i482 = trunc i32 %407 to i8
  %408 = load i8*, i8** %p.addr.i2.i462, align 8
  store i8 %conv.i4.i482, i8* %408, align 1
  %409 = load i32, i32* %v.addr.i3.i463, align 4
  %shr.i5.i483 = lshr i32 %409, 8
  %conv1.i6.i484 = trunc i32 %shr.i5.i483 to i8
  %410 = load i8*, i8** %p.addr.i2.i462, align 8
  %arrayidx2.i7.i485 = getelementptr inbounds i8, i8* %410, i64 1
  store i8 %conv1.i6.i484, i8* %arrayidx2.i7.i485, align 1
  %411 = load i32, i32* %v.addr.i3.i463, align 4
  %shr3.i8.i486 = lshr i32 %411, 16
  %conv4.i9.i487 = trunc i32 %shr3.i8.i486 to i8
  %412 = load i8*, i8** %p.addr.i2.i462, align 8
  %arrayidx5.i10.i488 = getelementptr inbounds i8, i8* %412, i64 2
  store i8 %conv4.i9.i487, i8* %arrayidx5.i10.i488, align 1
  %413 = load i32, i32* %v.addr.i3.i463, align 4
  %shr6.i11.i489 = lshr i32 %413, 24
  %conv7.i12.i490 = trunc i32 %shr6.i11.i489 to i8
  %414 = load i8*, i8** %p.addr.i2.i462, align 8
  %arrayidx8.i13.i491 = getelementptr inbounds i8, i8* %414, i64 3
  store i8 %conv7.i12.i490, i8* %arrayidx8.i13.i491, align 1
  %arraydecay396 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr397 = getelementptr inbounds i8, i8* %arraydecay396, i64 16
  %415 = load i64, i64* %uncomp_size.addr, align 8
  store i8* %add.ptr397, i8** %p.addr.i, align 8
  store i64 %415, i64* %v.addr.i, align 8
  %416 = load i8*, i8** %p.addr.i, align 8
  %417 = load i64, i64* %v.addr.i, align 8
  %conv.i = trunc i64 %417 to i32
  store i8* %416, i8** %p.addr.i.i, align 8
  store i32 %conv.i, i32* %v.addr.i.i, align 4
  %418 = load i32, i32* %v.addr.i.i, align 4
  %conv.i.i = trunc i32 %418 to i8
  %419 = load i8*, i8** %p.addr.i.i, align 8
  store i8 %conv.i.i, i8* %419, align 1
  %420 = load i32, i32* %v.addr.i.i, align 4
  %shr.i.i = lshr i32 %420, 8
  %conv1.i.i = trunc i32 %shr.i.i to i8
  %421 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx2.i.i = getelementptr inbounds i8, i8* %421, i64 1
  store i8 %conv1.i.i, i8* %arrayidx2.i.i, align 1
  %422 = load i32, i32* %v.addr.i.i, align 4
  %shr3.i.i = lshr i32 %422, 16
  %conv4.i.i = trunc i32 %shr3.i.i to i8
  %423 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i8, i8* %423, i64 2
  store i8 %conv4.i.i, i8* %arrayidx5.i.i, align 1
  %424 = load i32, i32* %v.addr.i.i, align 4
  %shr6.i.i = lshr i32 %424, 24
  %conv7.i.i = trunc i32 %shr6.i.i to i8
  %425 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx8.i.i = getelementptr inbounds i8, i8* %425, i64 3
  store i8 %conv7.i.i, i8* %arrayidx8.i.i, align 1
  %426 = load i8*, i8** %p.addr.i, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* %426, i64 4
  %427 = load i64, i64* %v.addr.i, align 8
  %shr.i = lshr i64 %427, 32
  %conv1.i = trunc i64 %shr.i to i32
  store i8* %add.ptr.i, i8** %p.addr.i2.i, align 8
  store i32 %conv1.i, i32* %v.addr.i3.i, align 4
  %428 = load i32, i32* %v.addr.i3.i, align 4
  %conv.i4.i = trunc i32 %428 to i8
  %429 = load i8*, i8** %p.addr.i2.i, align 8
  store i8 %conv.i4.i, i8* %429, align 1
  %430 = load i32, i32* %v.addr.i3.i, align 4
  %shr.i5.i = lshr i32 %430, 8
  %conv1.i6.i = trunc i32 %shr.i5.i to i8
  %431 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx2.i7.i = getelementptr inbounds i8, i8* %431, i64 1
  store i8 %conv1.i6.i, i8* %arrayidx2.i7.i, align 1
  %432 = load i32, i32* %v.addr.i3.i, align 4
  %shr3.i8.i = lshr i32 %432, 16
  %conv4.i9.i = trunc i32 %shr3.i8.i to i8
  %433 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx5.i10.i = getelementptr inbounds i8, i8* %433, i64 2
  store i8 %conv4.i9.i, i8* %arrayidx5.i10.i, align 1
  %434 = load i32, i32* %v.addr.i3.i, align 4
  %shr6.i11.i = lshr i32 %434, 24
  %conv7.i12.i = trunc i32 %shr6.i11.i to i8
  %435 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx8.i13.i = getelementptr inbounds i8, i8* %435, i64 3
  store i8 %conv7.i12.i, i8* %arrayidx8.i13.i, align 1
  store i32 24, i32* %local_dir_footer_size, align 4
  br label %if.end398

if.end398:                                        ; preds = %if.else393, %if.end386
  %436 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite399 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %436, i32 0, i32 12
  %437 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite399, align 8
  %438 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque400 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %438, i32 0, i32 14
  %439 = load i8*, i8** %m_pIO_opaque400, align 8
  %440 = load i64, i64* %cur_archive_file_ofs, align 8
  %arraydecay401 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %441 = load i32, i32* %local_dir_footer_size, align 4
  %conv402 = zext i32 %441 to i64
  %call403 = call i64 %437(i8* %439, i64 %440, i8* %arraydecay401, i64 %conv402)
  %442 = load i32, i32* %local_dir_footer_size, align 4
  %conv404 = zext i32 %442 to i64
  %cmp405 = icmp ne i64 %call403, %conv404
  br i1 %cmp405, label %if.then407, label %if.end408

if.then407:                                       ; preds = %if.end398
  store i32 0, i32* %retval, align 4
  br label %return

if.end408:                                        ; preds = %if.end398
  %443 = load i32, i32* %local_dir_footer_size, align 4
  %conv409 = zext i32 %443 to i64
  %444 = load i64, i64* %cur_archive_file_ofs, align 8
  %add410 = add i64 %444, %conv409
  store i64 %add410, i64* %cur_archive_file_ofs, align 8
  br label %if.end411

if.end411:                                        ; preds = %if.end408, %if.end361
  %445 = load i8*, i8** %pExtra_data, align 8
  %cmp412 = icmp ne i8* %445, null
  br i1 %cmp412, label %if.then414, label %if.end435

if.then414:                                       ; preds = %if.end411
  %arraydecay415 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i32 0, i32 0
  %446 = load i64, i64* %uncomp_size.addr, align 8
  %cmp416 = icmp uge i64 %446, 4294967295
  br i1 %cmp416, label %cond.true418, label %cond.false419

cond.true418:                                     ; preds = %if.then414
  br label %cond.end420

cond.false419:                                    ; preds = %if.then414
  br label %cond.end420

cond.end420:                                      ; preds = %cond.false419, %cond.true418
  %cond421 = phi i64* [ %uncomp_size.addr, %cond.true418 ], [ null, %cond.false419 ]
  %447 = load i64, i64* %uncomp_size.addr, align 8
  %cmp422 = icmp uge i64 %447, 4294967295
  br i1 %cmp422, label %cond.true424, label %cond.false425

cond.true424:                                     ; preds = %cond.end420
  br label %cond.end426

cond.false425:                                    ; preds = %cond.end420
  br label %cond.end426

cond.end426:                                      ; preds = %cond.false425, %cond.true424
  %cond427 = phi i64* [ %comp_size, %cond.true424 ], [ null, %cond.false425 ]
  %448 = load i64, i64* %local_dir_header_ofs, align 8
  %cmp428 = icmp uge i64 %448, 4294967295
  br i1 %cmp428, label %cond.true430, label %cond.false431

cond.true430:                                     ; preds = %cond.end426
  br label %cond.end432

cond.false431:                                    ; preds = %cond.end426
  br label %cond.end432

cond.end432:                                      ; preds = %cond.false431, %cond.true430
  %cond433 = phi i64* [ %local_dir_header_ofs, %cond.true430 ], [ null, %cond.false431 ]
  %call434 = call i32 @mz_zip_writer_create_zip64_extra_data(i8* %arraydecay415, i64* %cond421, i64* %cond427, i64* %cond433)
  store i32 %call434, i32* %extra_size, align 4
  br label %if.end435

if.end435:                                        ; preds = %cond.end432, %if.end411
  %449 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %450 = load i8*, i8** %pArchive_name.addr, align 8
  %451 = load i64, i64* %archive_name_size, align 8
  %conv436 = trunc i64 %451 to i16
  %452 = load i8*, i8** %pExtra_data, align 8
  %453 = load i32, i32* %extra_size, align 4
  %conv437 = trunc i32 %453 to i16
  %454 = load i8*, i8** %pComment.addr, align 8
  %455 = load i16, i16* %comment_size.addr, align 2
  %456 = load i64, i64* %uncomp_size.addr, align 8
  %457 = load i64, i64* %comp_size, align 8
  %458 = load i32, i32* %uncomp_crc32.addr, align 4
  %459 = load i16, i16* %method, align 2
  %460 = load i16, i16* %bit_flags, align 2
  %461 = load i16, i16* %dos_time, align 2
  %462 = load i16, i16* %dos_date, align 2
  %463 = load i64, i64* %local_dir_header_ofs, align 8
  %464 = load i32, i32* %ext_attributes, align 4
  %465 = load i8*, i8** %user_extra_data_central.addr, align 8
  %466 = load i32, i32* %user_extra_data_central_len.addr, align 4
  %call438 = call i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive* %449, i8* %450, i16 zeroext %conv436, i8* %452, i16 zeroext %conv437, i8* %454, i16 zeroext %455, i64 %456, i64 %457, i32 %458, i16 zeroext %459, i16 zeroext %460, i16 zeroext %461, i16 zeroext %462, i64 %463, i32 %464, i8* %465, i32 %466)
  %tobool439 = icmp ne i32 %call438, 0
  br i1 %tobool439, label %if.end441, label %if.then440

if.then440:                                       ; preds = %if.end435
  store i32 0, i32* %retval, align 4
  br label %return

if.end441:                                        ; preds = %if.end435
  %467 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files442 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %467, i32 0, i32 2
  %468 = load i32, i32* %m_total_files442, align 8
  %inc = add i32 %468, 1
  store i32 %inc, i32* %m_total_files442, align 8
  %469 = load i64, i64* %cur_archive_file_ofs, align 8
  %470 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size443 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %470, i32 0, i32 0
  store i64 %469, i64* %m_archive_size443, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end441, %if.then440, %if.then407, %mz_zip_set_error.exit514, %mz_zip_set_error.exit550, %mz_zip_set_error.exit600, %mz_zip_set_error.exit618, %mz_zip_set_error.exit630, %mz_zip_set_error.exit648, %mz_zip_set_error.exit654, %mz_zip_set_error.exit642, %mz_zip_set_error.exit636, %mz_zip_set_error.exit624, %mz_zip_set_error.exit612, %mz_zip_set_error.exit606, %if.then176, %mz_zip_set_error.exit594, %mz_zip_set_error.exit588, %mz_zip_set_error.exit562, %mz_zip_set_error.exit556, %mz_zip_set_error.exit544, %mz_zip_set_error.exit461, %mz_zip_set_error.exit455, %mz_zip_set_error.exit449, %mz_zip_set_error.exit
  %471 = load i32, i32* %retval, align 4
  ret i32 %471
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_validate_archive_name(i8* %pArchive_name) #0 {
entry:
  %retval = alloca i32, align 4
  %pArchive_name.addr = alloca i8*, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  %0 = load i8*, i8** %pArchive_name.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 47
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mz_zip_time_t_to_dos_time(i64 %time, i16* %pDOS_time, i16* %pDOS_date) #0 {
entry:
  %time.addr = alloca i64, align 8
  %pDOS_time.addr = alloca i16*, align 8
  %pDOS_date.addr = alloca i16*, align 8
  %tm = alloca %struct.tm*, align 8
  store i64 %time, i64* %time.addr, align 8
  store i16* %pDOS_time, i16** %pDOS_time.addr, align 8
  store i16* %pDOS_date, i16** %pDOS_date.addr, align 8
  %call = call %struct.tm* @localtime(i64* %time.addr)
  store %struct.tm* %call, %struct.tm** %tm, align 8
  %0 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 2
  %1 = load i32, i32* %tm_hour, align 8
  %shl = shl i32 %1, 11
  %2 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %2, i32 0, i32 1
  %3 = load i32, i32* %tm_min, align 4
  %shl1 = shl i32 %3, 5
  %add = add nsw i32 %shl, %shl1
  %4 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %4, i32 0, i32 0
  %5 = load i32, i32* %tm_sec, align 8
  %shr = ashr i32 %5, 1
  %add2 = add nsw i32 %add, %shr
  %conv = trunc i32 %add2 to i16
  %6 = load i16*, i16** %pDOS_time.addr, align 8
  store i16 %conv, i16* %6, align 2
  %7 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %7, i32 0, i32 5
  %8 = load i32, i32* %tm_year, align 4
  %add3 = add nsw i32 %8, 1900
  %sub = sub nsw i32 %add3, 1980
  %shl4 = shl i32 %sub, 9
  %9 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %9, i32 0, i32 4
  %10 = load i32, i32* %tm_mon, align 8
  %add5 = add nsw i32 %10, 1
  %shl6 = shl i32 %add5, 5
  %add7 = add nsw i32 %shl4, %shl6
  %11 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %11, i32 0, i32 3
  %12 = load i32, i32* %tm_mday, align 4
  %add8 = add nsw i32 %add7, %12
  %conv9 = trunc i32 %add8 to i16
  %13 = load i16*, i16** %pDOS_date.addr, align 8
  store i16 %conv9, i16* %13, align 2
  ret void
}

declare i64 @time(i64*) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %n = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 6
  %1 = load i64, i64* %m_file_offset_alignment, align 8
  %tobool = icmp ne i64 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 0
  %3 = load i64, i64* %m_archive_size, align 8
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 6
  %5 = load i64, i64* %m_file_offset_alignment1, align 8
  %sub = sub i64 %5, 1
  %and = and i64 %3, %sub
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %n, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 6
  %7 = load i64, i64* %m_file_offset_alignment2, align 8
  %8 = load i32, i32* %n, align 4
  %conv3 = zext i32 %8 to i64
  %sub4 = sub i64 %7, %conv3
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 6
  %10 = load i64, i64* %m_file_offset_alignment5, align 8
  %sub6 = sub i64 %10, 1
  %and7 = and i64 %sub4, %sub6
  %conv8 = trunc i64 %and7 to i32
  store i32 %conv8, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive* %pZip, i64 %cur_file_ofs, i32 %n) #0 {
entry:
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %cur_file_ofs.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  %buf = alloca [4096 x i8], align 16
  %s = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i64 %cur_file_ofs, i64* %cur_file_ofs.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i32 0, i32 0
  %0 = load i32, i32* %n.addr, align 4
  %conv = zext i32 %0 to i64
  %cmp = icmp ult i64 4096, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %conv2 = zext i32 %1 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 4096, %cond.true ], [ %conv2, %cond.false ]
  %call = call i8* @__memset_chk(i8* %arraydecay, i32 0, i64 %cond, i64 4096) #10
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %2 = load i32, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %n.addr, align 4
  %conv3 = zext i32 %3 to i64
  %cmp4 = icmp ult i64 4096, %conv3
  br i1 %cmp4, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %while.body
  br label %cond.end9

cond.false7:                                      ; preds = %while.body
  %4 = load i32, i32* %n.addr, align 4
  %conv8 = zext i32 %4 to i64
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false7, %cond.true6
  %cond10 = phi i64 [ 4096, %cond.true6 ], [ %conv8, %cond.false7 ]
  %conv11 = trunc i64 %cond10 to i32
  store i32 %conv11, i32* %s, align 4
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 12
  %6 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 14
  %8 = load i8*, i8** %m_pIO_opaque, align 8
  %9 = load i64, i64* %cur_file_ofs.addr, align 8
  %arraydecay12 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i32 0, i32 0
  %10 = load i32, i32* %s, align 4
  %conv13 = zext i32 %10 to i64
  %call14 = call i64 %6(i8* %8, i64 %9, i8* %arraydecay12, i64 %conv13)
  %11 = load i32, i32* %s, align 4
  %conv15 = zext i32 %11 to i64
  %cmp16 = icmp ne i64 %call14, %conv15
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end9
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %12, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 19, i32* %err_num.addr.i, align 4
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %13, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %14 = load i32, i32* %err_num.addr.i, align 4
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 5
  store i32 %14, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end9
  %16 = load i32, i32* %s, align 4
  %conv19 = zext i32 %16 to i64
  %17 = load i64, i64* %cur_file_ofs.addr, align 8
  %add = add i64 %17, %conv19
  store i64 %add, i64* %cur_file_ofs.addr, align 8
  %18 = load i32, i32* %s, align 4
  %19 = load i32, i32* %n.addr, align 4
  %sub = sub i32 %19, %18
  store i32 %sub, i32* %n.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %mz_zip_set_error.exit
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_create_zip64_extra_data(i8* %pBuf, i64* %pUncomp_size, i64* %pComp_size, i64* %pLocal_header_ofs) #0 {
entry:
  %p.addr.i94 = alloca i8*, align 8
  %v.addr.i95 = alloca i16, align 2
  %p.addr.i2.i64 = alloca i8*, align 8
  %v.addr.i3.i65 = alloca i32, align 4
  %p.addr.i.i66 = alloca i8*, align 8
  %v.addr.i.i67 = alloca i32, align 4
  %p.addr.i68 = alloca i8*, align 8
  %v.addr.i69 = alloca i64, align 8
  %p.addr.i2.i34 = alloca i8*, align 8
  %v.addr.i3.i35 = alloca i32, align 4
  %p.addr.i.i36 = alloca i8*, align 8
  %v.addr.i.i37 = alloca i32, align 4
  %p.addr.i38 = alloca i8*, align 8
  %v.addr.i39 = alloca i64, align 8
  %p.addr.i2.i = alloca i8*, align 8
  %v.addr.i3.i = alloca i32, align 4
  %p.addr.i.i = alloca i8*, align 8
  %v.addr.i.i = alloca i32, align 4
  %p.addr.i29 = alloca i8*, align 8
  %v.addr.i30 = alloca i64, align 8
  %p.addr.i22 = alloca i8*, align 8
  %v.addr.i23 = alloca i16, align 2
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i16, align 2
  %pBuf.addr = alloca i8*, align 8
  %pUncomp_size.addr = alloca i64*, align 8
  %pComp_size.addr = alloca i64*, align 8
  %pLocal_header_ofs.addr = alloca i64*, align 8
  %pDst = alloca i8*, align 8
  %field_size = alloca i32, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64* %pUncomp_size, i64** %pUncomp_size.addr, align 8
  store i64* %pComp_size, i64** %pComp_size.addr, align 8
  store i64* %pLocal_header_ofs, i64** %pLocal_header_ofs.addr, align 8
  %0 = load i8*, i8** %pBuf.addr, align 8
  store i8* %0, i8** %pDst, align 8
  store i32 0, i32* %field_size, align 4
  %1 = load i8*, i8** %pDst, align 8
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 0
  store i8* %add.ptr, i8** %p.addr.i, align 8
  store i16 1, i16* %v.addr.i, align 2
  %2 = load i16, i16* %v.addr.i, align 2
  %conv.i = trunc i16 %2 to i8
  %3 = load i8*, i8** %p.addr.i, align 8
  store i8 %conv.i, i8* %3, align 1
  %4 = load i16, i16* %v.addr.i, align 2
  %conv1.i = zext i16 %4 to i32
  %shr.i = ashr i32 %conv1.i, 8
  %conv2.i = trunc i32 %shr.i to i8
  %5 = load i8*, i8** %p.addr.i, align 8
  %arrayidx3.i = getelementptr inbounds i8, i8* %5, i64 1
  store i8 %conv2.i, i8* %arrayidx3.i, align 1
  %6 = load i8*, i8** %pDst, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 2
  store i8* %add.ptr1, i8** %p.addr.i94, align 8
  store i16 0, i16* %v.addr.i95, align 2
  %7 = load i16, i16* %v.addr.i95, align 2
  %conv.i96 = trunc i16 %7 to i8
  %8 = load i8*, i8** %p.addr.i94, align 8
  store i8 %conv.i96, i8* %8, align 1
  %9 = load i16, i16* %v.addr.i95, align 2
  %conv1.i97 = zext i16 %9 to i32
  %shr.i98 = ashr i32 %conv1.i97, 8
  %conv2.i99 = trunc i32 %shr.i98 to i8
  %10 = load i8*, i8** %p.addr.i94, align 8
  %arrayidx3.i100 = getelementptr inbounds i8, i8* %10, i64 1
  store i8 %conv2.i99, i8* %arrayidx3.i100, align 1
  %11 = load i8*, i8** %pDst, align 8
  %add.ptr2 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %add.ptr2, i8** %pDst, align 8
  %12 = load i64*, i64** %pUncomp_size.addr, align 8
  %tobool = icmp ne i64* %12, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load i8*, i8** %pDst, align 8
  %14 = load i64*, i64** %pUncomp_size.addr, align 8
  %15 = load i64, i64* %14, align 8
  store i8* %13, i8** %p.addr.i68, align 8
  store i64 %15, i64* %v.addr.i69, align 8
  %16 = load i8*, i8** %p.addr.i68, align 8
  %17 = load i64, i64* %v.addr.i69, align 8
  %conv.i70 = trunc i64 %17 to i32
  store i8* %16, i8** %p.addr.i.i66, align 8
  store i32 %conv.i70, i32* %v.addr.i.i67, align 4
  %18 = load i32, i32* %v.addr.i.i67, align 4
  %conv.i.i71 = trunc i32 %18 to i8
  %19 = load i8*, i8** %p.addr.i.i66, align 8
  store i8 %conv.i.i71, i8* %19, align 1
  %20 = load i32, i32* %v.addr.i.i67, align 4
  %shr.i.i72 = lshr i32 %20, 8
  %conv1.i.i73 = trunc i32 %shr.i.i72 to i8
  %21 = load i8*, i8** %p.addr.i.i66, align 8
  %arrayidx2.i.i74 = getelementptr inbounds i8, i8* %21, i64 1
  store i8 %conv1.i.i73, i8* %arrayidx2.i.i74, align 1
  %22 = load i32, i32* %v.addr.i.i67, align 4
  %shr3.i.i75 = lshr i32 %22, 16
  %conv4.i.i76 = trunc i32 %shr3.i.i75 to i8
  %23 = load i8*, i8** %p.addr.i.i66, align 8
  %arrayidx5.i.i77 = getelementptr inbounds i8, i8* %23, i64 2
  store i8 %conv4.i.i76, i8* %arrayidx5.i.i77, align 1
  %24 = load i32, i32* %v.addr.i.i67, align 4
  %shr6.i.i78 = lshr i32 %24, 24
  %conv7.i.i79 = trunc i32 %shr6.i.i78 to i8
  %25 = load i8*, i8** %p.addr.i.i66, align 8
  %arrayidx8.i.i80 = getelementptr inbounds i8, i8* %25, i64 3
  store i8 %conv7.i.i79, i8* %arrayidx8.i.i80, align 1
  %26 = load i8*, i8** %p.addr.i68, align 8
  %add.ptr.i81 = getelementptr inbounds i8, i8* %26, i64 4
  %27 = load i64, i64* %v.addr.i69, align 8
  %shr.i82 = lshr i64 %27, 32
  %conv1.i83 = trunc i64 %shr.i82 to i32
  store i8* %add.ptr.i81, i8** %p.addr.i2.i64, align 8
  store i32 %conv1.i83, i32* %v.addr.i3.i65, align 4
  %28 = load i32, i32* %v.addr.i3.i65, align 4
  %conv.i4.i84 = trunc i32 %28 to i8
  %29 = load i8*, i8** %p.addr.i2.i64, align 8
  store i8 %conv.i4.i84, i8* %29, align 1
  %30 = load i32, i32* %v.addr.i3.i65, align 4
  %shr.i5.i85 = lshr i32 %30, 8
  %conv1.i6.i86 = trunc i32 %shr.i5.i85 to i8
  %31 = load i8*, i8** %p.addr.i2.i64, align 8
  %arrayidx2.i7.i87 = getelementptr inbounds i8, i8* %31, i64 1
  store i8 %conv1.i6.i86, i8* %arrayidx2.i7.i87, align 1
  %32 = load i32, i32* %v.addr.i3.i65, align 4
  %shr3.i8.i88 = lshr i32 %32, 16
  %conv4.i9.i89 = trunc i32 %shr3.i8.i88 to i8
  %33 = load i8*, i8** %p.addr.i2.i64, align 8
  %arrayidx5.i10.i90 = getelementptr inbounds i8, i8* %33, i64 2
  store i8 %conv4.i9.i89, i8* %arrayidx5.i10.i90, align 1
  %34 = load i32, i32* %v.addr.i3.i65, align 4
  %shr6.i11.i91 = lshr i32 %34, 24
  %conv7.i12.i92 = trunc i32 %shr6.i11.i91 to i8
  %35 = load i8*, i8** %p.addr.i2.i64, align 8
  %arrayidx8.i13.i93 = getelementptr inbounds i8, i8* %35, i64 3
  store i8 %conv7.i12.i92, i8* %arrayidx8.i13.i93, align 1
  %36 = load i8*, i8** %pDst, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %36, i64 8
  store i8* %add.ptr3, i8** %pDst, align 8
  %37 = load i32, i32* %field_size, align 4
  %conv = zext i32 %37 to i64
  %add = add i64 %conv, 8
  %conv4 = trunc i64 %add to i32
  store i32 %conv4, i32* %field_size, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %38 = load i64*, i64** %pComp_size.addr, align 8
  %tobool5 = icmp ne i64* %38, null
  br i1 %tobool5, label %if.then6, label %if.end11

if.then6:                                         ; preds = %if.end
  %39 = load i8*, i8** %pDst, align 8
  %40 = load i64*, i64** %pComp_size.addr, align 8
  %41 = load i64, i64* %40, align 8
  store i8* %39, i8** %p.addr.i38, align 8
  store i64 %41, i64* %v.addr.i39, align 8
  %42 = load i8*, i8** %p.addr.i38, align 8
  %43 = load i64, i64* %v.addr.i39, align 8
  %conv.i40 = trunc i64 %43 to i32
  store i8* %42, i8** %p.addr.i.i36, align 8
  store i32 %conv.i40, i32* %v.addr.i.i37, align 4
  %44 = load i32, i32* %v.addr.i.i37, align 4
  %conv.i.i41 = trunc i32 %44 to i8
  %45 = load i8*, i8** %p.addr.i.i36, align 8
  store i8 %conv.i.i41, i8* %45, align 1
  %46 = load i32, i32* %v.addr.i.i37, align 4
  %shr.i.i42 = lshr i32 %46, 8
  %conv1.i.i43 = trunc i32 %shr.i.i42 to i8
  %47 = load i8*, i8** %p.addr.i.i36, align 8
  %arrayidx2.i.i44 = getelementptr inbounds i8, i8* %47, i64 1
  store i8 %conv1.i.i43, i8* %arrayidx2.i.i44, align 1
  %48 = load i32, i32* %v.addr.i.i37, align 4
  %shr3.i.i45 = lshr i32 %48, 16
  %conv4.i.i46 = trunc i32 %shr3.i.i45 to i8
  %49 = load i8*, i8** %p.addr.i.i36, align 8
  %arrayidx5.i.i47 = getelementptr inbounds i8, i8* %49, i64 2
  store i8 %conv4.i.i46, i8* %arrayidx5.i.i47, align 1
  %50 = load i32, i32* %v.addr.i.i37, align 4
  %shr6.i.i48 = lshr i32 %50, 24
  %conv7.i.i49 = trunc i32 %shr6.i.i48 to i8
  %51 = load i8*, i8** %p.addr.i.i36, align 8
  %arrayidx8.i.i50 = getelementptr inbounds i8, i8* %51, i64 3
  store i8 %conv7.i.i49, i8* %arrayidx8.i.i50, align 1
  %52 = load i8*, i8** %p.addr.i38, align 8
  %add.ptr.i51 = getelementptr inbounds i8, i8* %52, i64 4
  %53 = load i64, i64* %v.addr.i39, align 8
  %shr.i52 = lshr i64 %53, 32
  %conv1.i53 = trunc i64 %shr.i52 to i32
  store i8* %add.ptr.i51, i8** %p.addr.i2.i34, align 8
  store i32 %conv1.i53, i32* %v.addr.i3.i35, align 4
  %54 = load i32, i32* %v.addr.i3.i35, align 4
  %conv.i4.i54 = trunc i32 %54 to i8
  %55 = load i8*, i8** %p.addr.i2.i34, align 8
  store i8 %conv.i4.i54, i8* %55, align 1
  %56 = load i32, i32* %v.addr.i3.i35, align 4
  %shr.i5.i55 = lshr i32 %56, 8
  %conv1.i6.i56 = trunc i32 %shr.i5.i55 to i8
  %57 = load i8*, i8** %p.addr.i2.i34, align 8
  %arrayidx2.i7.i57 = getelementptr inbounds i8, i8* %57, i64 1
  store i8 %conv1.i6.i56, i8* %arrayidx2.i7.i57, align 1
  %58 = load i32, i32* %v.addr.i3.i35, align 4
  %shr3.i8.i58 = lshr i32 %58, 16
  %conv4.i9.i59 = trunc i32 %shr3.i8.i58 to i8
  %59 = load i8*, i8** %p.addr.i2.i34, align 8
  %arrayidx5.i10.i60 = getelementptr inbounds i8, i8* %59, i64 2
  store i8 %conv4.i9.i59, i8* %arrayidx5.i10.i60, align 1
  %60 = load i32, i32* %v.addr.i3.i35, align 4
  %shr6.i11.i61 = lshr i32 %60, 24
  %conv7.i12.i62 = trunc i32 %shr6.i11.i61 to i8
  %61 = load i8*, i8** %p.addr.i2.i34, align 8
  %arrayidx8.i13.i63 = getelementptr inbounds i8, i8* %61, i64 3
  store i8 %conv7.i12.i62, i8* %arrayidx8.i13.i63, align 1
  %62 = load i8*, i8** %pDst, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %62, i64 8
  store i8* %add.ptr7, i8** %pDst, align 8
  %63 = load i32, i32* %field_size, align 4
  %conv8 = zext i32 %63 to i64
  %add9 = add i64 %conv8, 8
  %conv10 = trunc i64 %add9 to i32
  store i32 %conv10, i32* %field_size, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then6, %if.end
  %64 = load i64*, i64** %pLocal_header_ofs.addr, align 8
  %tobool12 = icmp ne i64* %64, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %if.end11
  %65 = load i8*, i8** %pDst, align 8
  %66 = load i64*, i64** %pLocal_header_ofs.addr, align 8
  %67 = load i64, i64* %66, align 8
  store i8* %65, i8** %p.addr.i29, align 8
  store i64 %67, i64* %v.addr.i30, align 8
  %68 = load i8*, i8** %p.addr.i29, align 8
  %69 = load i64, i64* %v.addr.i30, align 8
  %conv.i31 = trunc i64 %69 to i32
  store i8* %68, i8** %p.addr.i.i, align 8
  store i32 %conv.i31, i32* %v.addr.i.i, align 4
  %70 = load i32, i32* %v.addr.i.i, align 4
  %conv.i.i = trunc i32 %70 to i8
  %71 = load i8*, i8** %p.addr.i.i, align 8
  store i8 %conv.i.i, i8* %71, align 1
  %72 = load i32, i32* %v.addr.i.i, align 4
  %shr.i.i = lshr i32 %72, 8
  %conv1.i.i = trunc i32 %shr.i.i to i8
  %73 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx2.i.i = getelementptr inbounds i8, i8* %73, i64 1
  store i8 %conv1.i.i, i8* %arrayidx2.i.i, align 1
  %74 = load i32, i32* %v.addr.i.i, align 4
  %shr3.i.i = lshr i32 %74, 16
  %conv4.i.i = trunc i32 %shr3.i.i to i8
  %75 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i8, i8* %75, i64 2
  store i8 %conv4.i.i, i8* %arrayidx5.i.i, align 1
  %76 = load i32, i32* %v.addr.i.i, align 4
  %shr6.i.i = lshr i32 %76, 24
  %conv7.i.i = trunc i32 %shr6.i.i to i8
  %77 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx8.i.i = getelementptr inbounds i8, i8* %77, i64 3
  store i8 %conv7.i.i, i8* %arrayidx8.i.i, align 1
  %78 = load i8*, i8** %p.addr.i29, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* %78, i64 4
  %79 = load i64, i64* %v.addr.i30, align 8
  %shr.i32 = lshr i64 %79, 32
  %conv1.i33 = trunc i64 %shr.i32 to i32
  store i8* %add.ptr.i, i8** %p.addr.i2.i, align 8
  store i32 %conv1.i33, i32* %v.addr.i3.i, align 4
  %80 = load i32, i32* %v.addr.i3.i, align 4
  %conv.i4.i = trunc i32 %80 to i8
  %81 = load i8*, i8** %p.addr.i2.i, align 8
  store i8 %conv.i4.i, i8* %81, align 1
  %82 = load i32, i32* %v.addr.i3.i, align 4
  %shr.i5.i = lshr i32 %82, 8
  %conv1.i6.i = trunc i32 %shr.i5.i to i8
  %83 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx2.i7.i = getelementptr inbounds i8, i8* %83, i64 1
  store i8 %conv1.i6.i, i8* %arrayidx2.i7.i, align 1
  %84 = load i32, i32* %v.addr.i3.i, align 4
  %shr3.i8.i = lshr i32 %84, 16
  %conv4.i9.i = trunc i32 %shr3.i8.i to i8
  %85 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx5.i10.i = getelementptr inbounds i8, i8* %85, i64 2
  store i8 %conv4.i9.i, i8* %arrayidx5.i10.i, align 1
  %86 = load i32, i32* %v.addr.i3.i, align 4
  %shr6.i11.i = lshr i32 %86, 24
  %conv7.i12.i = trunc i32 %shr6.i11.i to i8
  %87 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx8.i13.i = getelementptr inbounds i8, i8* %87, i64 3
  store i8 %conv7.i12.i, i8* %arrayidx8.i13.i, align 1
  %88 = load i8*, i8** %pDst, align 8
  %add.ptr14 = getelementptr inbounds i8, i8* %88, i64 8
  store i8* %add.ptr14, i8** %pDst, align 8
  %89 = load i32, i32* %field_size, align 4
  %conv15 = zext i32 %89 to i64
  %add16 = add i64 %conv15, 8
  %conv17 = trunc i64 %add16 to i32
  store i32 %conv17, i32* %field_size, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then13, %if.end11
  %90 = load i8*, i8** %pBuf.addr, align 8
  %add.ptr19 = getelementptr inbounds i8, i8* %90, i64 2
  %91 = load i32, i32* %field_size, align 4
  %conv20 = trunc i32 %91 to i16
  store i8* %add.ptr19, i8** %p.addr.i22, align 8
  store i16 %conv20, i16* %v.addr.i23, align 2
  %92 = load i16, i16* %v.addr.i23, align 2
  %conv.i24 = trunc i16 %92 to i8
  %93 = load i8*, i8** %p.addr.i22, align 8
  store i8 %conv.i24, i8* %93, align 1
  %94 = load i16, i16* %v.addr.i23, align 2
  %conv1.i25 = zext i16 %94 to i32
  %shr.i26 = ashr i32 %conv1.i25, 8
  %conv2.i27 = trunc i32 %shr.i26 to i8
  %95 = load i8*, i8** %p.addr.i22, align 8
  %arrayidx3.i28 = getelementptr inbounds i8, i8* %95, i64 1
  store i8 %conv2.i27, i8* %arrayidx3.i28, align 1
  %96 = load i8*, i8** %pDst, align 8
  %97 = load i8*, i8** %pBuf.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %96 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %97 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv21 = trunc i64 %sub.ptr.sub to i32
  ret i32 %conv21
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %pZip, i8* %pDst, i16 zeroext %filename_size, i16 zeroext %extra_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date) #0 {
entry:
  %p.addr.i98 = alloca i8*, align 8
  %v.addr.i99 = alloca i16, align 2
  %p.addr.i91 = alloca i8*, align 8
  %v.addr.i92 = alloca i16, align 2
  %p.addr.i84 = alloca i8*, align 8
  %v.addr.i85 = alloca i16, align 2
  %p.addr.i77 = alloca i8*, align 8
  %v.addr.i78 = alloca i16, align 2
  %p.addr.i70 = alloca i8*, align 8
  %v.addr.i71 = alloca i16, align 2
  %p.addr.i58 = alloca i8*, align 8
  %v.addr.i59 = alloca i32, align 4
  %p.addr.i46 = alloca i8*, align 8
  %v.addr.i47 = alloca i32, align 4
  %p.addr.i34 = alloca i8*, align 8
  %v.addr.i35 = alloca i32, align 4
  %p.addr.i27 = alloca i8*, align 8
  %v.addr.i28 = alloca i16, align 2
  %p.addr.i22 = alloca i8*, align 8
  %v.addr.i23 = alloca i16, align 2
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pDst.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %extra_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pDst, i8** %pDst.addr, align 8
  store i16 %filename_size, i16* %filename_size.addr, align 2
  store i16 %extra_size, i16* %extra_size.addr, align 2
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i64 %comp_size, i64* %comp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  store i16 %method, i16* %method.addr, align 2
  store i16 %bit_flags, i16* %bit_flags.addr, align 2
  store i16 %dos_time, i16* %dos_time.addr, align 2
  store i16 %dos_date, i16* %dos_date.addr, align 2
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pDst.addr, align 8
  %2 = load i8*, i8** %pDst.addr, align 8
  %3 = call i64 @llvm.objectsize.i64.p0i8(i8* %2, i1 false)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 30, i64 %3) #10
  %4 = load i8*, i8** %pDst.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 0
  store i8* %add.ptr, i8** %p.addr.i, align 8
  store i32 67324752, i32* %v.addr.i, align 4
  %5 = load i32, i32* %v.addr.i, align 4
  %conv.i = trunc i32 %5 to i8
  %6 = load i8*, i8** %p.addr.i, align 8
  store i8 %conv.i, i8* %6, align 1
  %7 = load i32, i32* %v.addr.i, align 4
  %shr.i = lshr i32 %7, 8
  %conv1.i = trunc i32 %shr.i to i8
  %8 = load i8*, i8** %p.addr.i, align 8
  %arrayidx2.i = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %conv1.i, i8* %arrayidx2.i, align 1
  %9 = load i32, i32* %v.addr.i, align 4
  %shr3.i = lshr i32 %9, 16
  %conv4.i = trunc i32 %shr3.i to i8
  %10 = load i8*, i8** %p.addr.i, align 8
  %arrayidx5.i = getelementptr inbounds i8, i8* %10, i64 2
  store i8 %conv4.i, i8* %arrayidx5.i, align 1
  %11 = load i32, i32* %v.addr.i, align 4
  %shr6.i = lshr i32 %11, 24
  %conv7.i = trunc i32 %shr6.i to i8
  %12 = load i8*, i8** %p.addr.i, align 8
  %arrayidx8.i = getelementptr inbounds i8, i8* %12, i64 3
  store i8 %conv7.i, i8* %arrayidx8.i, align 1
  %13 = load i8*, i8** %pDst.addr, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %13, i64 4
  %14 = load i16, i16* %method.addr, align 2
  %conv = zext i16 %14 to i32
  %tobool = icmp ne i32 %conv, 0
  %cond = select i1 %tobool, i32 20, i32 0
  %conv2 = trunc i32 %cond to i16
  store i8* %add.ptr1, i8** %p.addr.i98, align 8
  store i16 %conv2, i16* %v.addr.i99, align 2
  %15 = load i16, i16* %v.addr.i99, align 2
  %conv.i100 = trunc i16 %15 to i8
  %16 = load i8*, i8** %p.addr.i98, align 8
  store i8 %conv.i100, i8* %16, align 1
  %17 = load i16, i16* %v.addr.i99, align 2
  %conv1.i101 = zext i16 %17 to i32
  %shr.i102 = ashr i32 %conv1.i101, 8
  %conv2.i103 = trunc i32 %shr.i102 to i8
  %18 = load i8*, i8** %p.addr.i98, align 8
  %arrayidx3.i104 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %conv2.i103, i8* %arrayidx3.i104, align 1
  %19 = load i8*, i8** %pDst.addr, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %19, i64 6
  %20 = load i16, i16* %bit_flags.addr, align 2
  store i8* %add.ptr3, i8** %p.addr.i91, align 8
  store i16 %20, i16* %v.addr.i92, align 2
  %21 = load i16, i16* %v.addr.i92, align 2
  %conv.i93 = trunc i16 %21 to i8
  %22 = load i8*, i8** %p.addr.i91, align 8
  store i8 %conv.i93, i8* %22, align 1
  %23 = load i16, i16* %v.addr.i92, align 2
  %conv1.i94 = zext i16 %23 to i32
  %shr.i95 = ashr i32 %conv1.i94, 8
  %conv2.i96 = trunc i32 %shr.i95 to i8
  %24 = load i8*, i8** %p.addr.i91, align 8
  %arrayidx3.i97 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %conv2.i96, i8* %arrayidx3.i97, align 1
  %25 = load i8*, i8** %pDst.addr, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %25, i64 8
  %26 = load i16, i16* %method.addr, align 2
  store i8* %add.ptr4, i8** %p.addr.i84, align 8
  store i16 %26, i16* %v.addr.i85, align 2
  %27 = load i16, i16* %v.addr.i85, align 2
  %conv.i86 = trunc i16 %27 to i8
  %28 = load i8*, i8** %p.addr.i84, align 8
  store i8 %conv.i86, i8* %28, align 1
  %29 = load i16, i16* %v.addr.i85, align 2
  %conv1.i87 = zext i16 %29 to i32
  %shr.i88 = ashr i32 %conv1.i87, 8
  %conv2.i89 = trunc i32 %shr.i88 to i8
  %30 = load i8*, i8** %p.addr.i84, align 8
  %arrayidx3.i90 = getelementptr inbounds i8, i8* %30, i64 1
  store i8 %conv2.i89, i8* %arrayidx3.i90, align 1
  %31 = load i8*, i8** %pDst.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %31, i64 10
  %32 = load i16, i16* %dos_time.addr, align 2
  store i8* %add.ptr5, i8** %p.addr.i77, align 8
  store i16 %32, i16* %v.addr.i78, align 2
  %33 = load i16, i16* %v.addr.i78, align 2
  %conv.i79 = trunc i16 %33 to i8
  %34 = load i8*, i8** %p.addr.i77, align 8
  store i8 %conv.i79, i8* %34, align 1
  %35 = load i16, i16* %v.addr.i78, align 2
  %conv1.i80 = zext i16 %35 to i32
  %shr.i81 = ashr i32 %conv1.i80, 8
  %conv2.i82 = trunc i32 %shr.i81 to i8
  %36 = load i8*, i8** %p.addr.i77, align 8
  %arrayidx3.i83 = getelementptr inbounds i8, i8* %36, i64 1
  store i8 %conv2.i82, i8* %arrayidx3.i83, align 1
  %37 = load i8*, i8** %pDst.addr, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %37, i64 12
  %38 = load i16, i16* %dos_date.addr, align 2
  store i8* %add.ptr6, i8** %p.addr.i70, align 8
  store i16 %38, i16* %v.addr.i71, align 2
  %39 = load i16, i16* %v.addr.i71, align 2
  %conv.i72 = trunc i16 %39 to i8
  %40 = load i8*, i8** %p.addr.i70, align 8
  store i8 %conv.i72, i8* %40, align 1
  %41 = load i16, i16* %v.addr.i71, align 2
  %conv1.i73 = zext i16 %41 to i32
  %shr.i74 = ashr i32 %conv1.i73, 8
  %conv2.i75 = trunc i32 %shr.i74 to i8
  %42 = load i8*, i8** %p.addr.i70, align 8
  %arrayidx3.i76 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %conv2.i75, i8* %arrayidx3.i76, align 1
  %43 = load i8*, i8** %pDst.addr, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %43, i64 14
  %44 = load i32, i32* %uncomp_crc32.addr, align 4
  store i8* %add.ptr7, i8** %p.addr.i58, align 8
  store i32 %44, i32* %v.addr.i59, align 4
  %45 = load i32, i32* %v.addr.i59, align 4
  %conv.i60 = trunc i32 %45 to i8
  %46 = load i8*, i8** %p.addr.i58, align 8
  store i8 %conv.i60, i8* %46, align 1
  %47 = load i32, i32* %v.addr.i59, align 4
  %shr.i61 = lshr i32 %47, 8
  %conv1.i62 = trunc i32 %shr.i61 to i8
  %48 = load i8*, i8** %p.addr.i58, align 8
  %arrayidx2.i63 = getelementptr inbounds i8, i8* %48, i64 1
  store i8 %conv1.i62, i8* %arrayidx2.i63, align 1
  %49 = load i32, i32* %v.addr.i59, align 4
  %shr3.i64 = lshr i32 %49, 16
  %conv4.i65 = trunc i32 %shr3.i64 to i8
  %50 = load i8*, i8** %p.addr.i58, align 8
  %arrayidx5.i66 = getelementptr inbounds i8, i8* %50, i64 2
  store i8 %conv4.i65, i8* %arrayidx5.i66, align 1
  %51 = load i32, i32* %v.addr.i59, align 4
  %shr6.i67 = lshr i32 %51, 24
  %conv7.i68 = trunc i32 %shr6.i67 to i8
  %52 = load i8*, i8** %p.addr.i58, align 8
  %arrayidx8.i69 = getelementptr inbounds i8, i8* %52, i64 3
  store i8 %conv7.i68, i8* %arrayidx8.i69, align 1
  %53 = load i8*, i8** %pDst.addr, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %53, i64 18
  %54 = load i64, i64* %comp_size.addr, align 8
  %cmp = icmp ult i64 %54, 4294967295
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %55 = load i64, i64* %comp_size.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond10 = phi i64 [ %55, %cond.true ], [ 4294967295, %cond.false ]
  %conv11 = trunc i64 %cond10 to i32
  store i8* %add.ptr8, i8** %p.addr.i46, align 8
  store i32 %conv11, i32* %v.addr.i47, align 4
  %56 = load i32, i32* %v.addr.i47, align 4
  %conv.i48 = trunc i32 %56 to i8
  %57 = load i8*, i8** %p.addr.i46, align 8
  store i8 %conv.i48, i8* %57, align 1
  %58 = load i32, i32* %v.addr.i47, align 4
  %shr.i49 = lshr i32 %58, 8
  %conv1.i50 = trunc i32 %shr.i49 to i8
  %59 = load i8*, i8** %p.addr.i46, align 8
  %arrayidx2.i51 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %conv1.i50, i8* %arrayidx2.i51, align 1
  %60 = load i32, i32* %v.addr.i47, align 4
  %shr3.i52 = lshr i32 %60, 16
  %conv4.i53 = trunc i32 %shr3.i52 to i8
  %61 = load i8*, i8** %p.addr.i46, align 8
  %arrayidx5.i54 = getelementptr inbounds i8, i8* %61, i64 2
  store i8 %conv4.i53, i8* %arrayidx5.i54, align 1
  %62 = load i32, i32* %v.addr.i47, align 4
  %shr6.i55 = lshr i32 %62, 24
  %conv7.i56 = trunc i32 %shr6.i55 to i8
  %63 = load i8*, i8** %p.addr.i46, align 8
  %arrayidx8.i57 = getelementptr inbounds i8, i8* %63, i64 3
  store i8 %conv7.i56, i8* %arrayidx8.i57, align 1
  %64 = load i8*, i8** %pDst.addr, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %64, i64 22
  %65 = load i64, i64* %uncomp_size.addr, align 8
  %cmp13 = icmp ult i64 %65, 4294967295
  br i1 %cmp13, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %cond.end
  %66 = load i64, i64* %uncomp_size.addr, align 8
  br label %cond.end17

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i64 [ %66, %cond.true15 ], [ 4294967295, %cond.false16 ]
  %conv19 = trunc i64 %cond18 to i32
  store i8* %add.ptr12, i8** %p.addr.i34, align 8
  store i32 %conv19, i32* %v.addr.i35, align 4
  %67 = load i32, i32* %v.addr.i35, align 4
  %conv.i36 = trunc i32 %67 to i8
  %68 = load i8*, i8** %p.addr.i34, align 8
  store i8 %conv.i36, i8* %68, align 1
  %69 = load i32, i32* %v.addr.i35, align 4
  %shr.i37 = lshr i32 %69, 8
  %conv1.i38 = trunc i32 %shr.i37 to i8
  %70 = load i8*, i8** %p.addr.i34, align 8
  %arrayidx2.i39 = getelementptr inbounds i8, i8* %70, i64 1
  store i8 %conv1.i38, i8* %arrayidx2.i39, align 1
  %71 = load i32, i32* %v.addr.i35, align 4
  %shr3.i40 = lshr i32 %71, 16
  %conv4.i41 = trunc i32 %shr3.i40 to i8
  %72 = load i8*, i8** %p.addr.i34, align 8
  %arrayidx5.i42 = getelementptr inbounds i8, i8* %72, i64 2
  store i8 %conv4.i41, i8* %arrayidx5.i42, align 1
  %73 = load i32, i32* %v.addr.i35, align 4
  %shr6.i43 = lshr i32 %73, 24
  %conv7.i44 = trunc i32 %shr6.i43 to i8
  %74 = load i8*, i8** %p.addr.i34, align 8
  %arrayidx8.i45 = getelementptr inbounds i8, i8* %74, i64 3
  store i8 %conv7.i44, i8* %arrayidx8.i45, align 1
  %75 = load i8*, i8** %pDst.addr, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %75, i64 26
  %76 = load i16, i16* %filename_size.addr, align 2
  store i8* %add.ptr20, i8** %p.addr.i27, align 8
  store i16 %76, i16* %v.addr.i28, align 2
  %77 = load i16, i16* %v.addr.i28, align 2
  %conv.i29 = trunc i16 %77 to i8
  %78 = load i8*, i8** %p.addr.i27, align 8
  store i8 %conv.i29, i8* %78, align 1
  %79 = load i16, i16* %v.addr.i28, align 2
  %conv1.i30 = zext i16 %79 to i32
  %shr.i31 = ashr i32 %conv1.i30, 8
  %conv2.i32 = trunc i32 %shr.i31 to i8
  %80 = load i8*, i8** %p.addr.i27, align 8
  %arrayidx3.i33 = getelementptr inbounds i8, i8* %80, i64 1
  store i8 %conv2.i32, i8* %arrayidx3.i33, align 1
  %81 = load i8*, i8** %pDst.addr, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %81, i64 28
  %82 = load i16, i16* %extra_size.addr, align 2
  store i8* %add.ptr21, i8** %p.addr.i22, align 8
  store i16 %82, i16* %v.addr.i23, align 2
  %83 = load i16, i16* %v.addr.i23, align 2
  %conv.i24 = trunc i16 %83 to i8
  %84 = load i8*, i8** %p.addr.i22, align 8
  store i8 %conv.i24, i8* %84, align 1
  %85 = load i16, i16* %v.addr.i23, align 2
  %conv1.i25 = zext i16 %85 to i32
  %shr.i26 = ashr i32 %conv1.i25, 8
  %conv2.i = trunc i32 %shr.i26 to i8
  %86 = load i8*, i8** %p.addr.i22, align 8
  %arrayidx3.i = getelementptr inbounds i8, i8* %86, i64 1
  store i8 %conv2.i, i8* %arrayidx3.i, align 1
  ret i32 1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_add_put_buf_callback(i8* %pBuf, i32 %len, i8* %pUser) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %pUser.addr = alloca i8*, align 8
  %pState = alloca %struct.mz_zip_writer_add_state*, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %pUser, i8** %pUser.addr, align 8
  %0 = load i8*, i8** %pUser.addr, align 8
  %1 = bitcast i8* %0 to %struct.mz_zip_writer_add_state*
  store %struct.mz_zip_writer_add_state* %1, %struct.mz_zip_writer_add_state** %pState, align 8
  %2 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %2, i32 0, i32 0
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %m_pZip, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 12
  %4 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %5 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8
  %m_pZip1 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %5, i32 0, i32 0
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %m_pZip1, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 14
  %7 = load i8*, i8** %m_pIO_opaque, align 8
  %8 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %8, i32 0, i32 1
  %9 = load i64, i64* %m_cur_archive_file_ofs, align 8
  %10 = load i8*, i8** %pBuf.addr, align 8
  %11 = load i32, i32* %len.addr, align 4
  %conv = sext i32 %11 to i64
  %call = call i64 %4(i8* %7, i64 %9, i8* %10, i64 %conv)
  %conv2 = trunc i64 %call to i32
  %12 = load i32, i32* %len.addr, align 4
  %cmp = icmp ne i32 %conv2, %12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %13 = load i32, i32* %len.addr, align 4
  %conv4 = sext i32 %13 to i64
  %14 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8
  %m_cur_archive_file_ofs5 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %14, i32 0, i32 1
  %15 = load i64, i64* %m_cur_archive_file_ofs5, align 8
  %add = add i64 %15, %conv4
  store i64 %add, i64* %m_cur_archive_file_ofs5, align 8
  %16 = load i32, i32* %len.addr, align 4
  %conv6 = sext i32 %16 to i64
  %17 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %17, i32 0, i32 2
  %18 = load i64, i64* %m_comp_size, align 8
  %add7 = add i64 %18, %conv6
  store i64 %add7, i64* %m_comp_size, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive* %pZip, i8* %pFilename, i16 zeroext %filename_size, i8* %pExtra, i16 zeroext %extra_size, i8* %pComment, i16 zeroext %comment_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date, i64 %local_header_ofs, i32 %ext_attributes, i8* %user_extra_data, i32 %user_extra_data_len) #0 {
entry:
  %retval.i.i269 = alloca i32, align 4
  %pZip.addr.i.i270 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i271 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i272 = alloca i64, align 8
  %growing.addr.i.i273 = alloca i32, align 4
  %retval.i274 = alloca i32, align 4
  %pZip.addr.i275 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i276 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i277 = alloca i8*, align 8
  %n.addr.i278 = alloca i64, align 8
  %orig_size.i279 = alloca i64, align 8
  %retval.i.i225 = alloca i32, align 4
  %pZip.addr.i.i226 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i227 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i228 = alloca i64, align 8
  %growing.addr.i.i229 = alloca i32, align 4
  %retval.i230 = alloca i32, align 4
  %pZip.addr.i231 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i232 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i233 = alloca i8*, align 8
  %n.addr.i234 = alloca i64, align 8
  %orig_size.i235 = alloca i64, align 8
  %retval.i.i181 = alloca i32, align 4
  %pZip.addr.i.i182 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i183 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i184 = alloca i64, align 8
  %growing.addr.i.i185 = alloca i32, align 4
  %retval.i186 = alloca i32, align 4
  %pZip.addr.i187 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i188 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i189 = alloca i8*, align 8
  %n.addr.i190 = alloca i64, align 8
  %orig_size.i191 = alloca i64, align 8
  %retval.i.i137 = alloca i32, align 4
  %pZip.addr.i.i138 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i139 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i140 = alloca i64, align 8
  %growing.addr.i.i141 = alloca i32, align 4
  %retval.i142 = alloca i32, align 4
  %pZip.addr.i143 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i144 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i145 = alloca i8*, align 8
  %n.addr.i146 = alloca i64, align 8
  %orig_size.i147 = alloca i64, align 8
  %retval.i.i93 = alloca i32, align 4
  %pZip.addr.i.i94 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i95 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i96 = alloca i64, align 8
  %growing.addr.i.i97 = alloca i32, align 4
  %retval.i98 = alloca i32, align 4
  %pZip.addr.i99 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i100 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i101 = alloca i8*, align 8
  %n.addr.i102 = alloca i64, align 8
  %orig_size.i103 = alloca i64, align 8
  %pZip.addr.i86 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i87 = alloca i32, align 4
  %retval.i.i = alloca i32, align 4
  %pZip.addr.i.i = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i = alloca i64, align 8
  %growing.addr.i.i = alloca i32, align 4
  %retval.i77 = alloca i32, align 4
  %pZip.addr.i78 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i79 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i = alloca i8*, align 8
  %n.addr.i = alloca i64, align 8
  %orig_size.i = alloca i64, align 8
  %pZip.addr.i70 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i71 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %pZip.addr.i67 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i = alloca i64, align 8
  %growing.addr.i = alloca i32, align 4
  %pZip.addr.i61 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i62 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %pExtra.addr = alloca i8*, align 8
  %extra_size.addr = alloca i16, align 2
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  %local_header_ofs.addr = alloca i64, align 8
  %ext_attributes.addr = alloca i32, align 4
  %user_extra_data.addr = alloca i8*, align 8
  %user_extra_data_len.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %central_dir_ofs = alloca i32, align 4
  %orig_central_dir_size = alloca i64, align 8
  %central_dir_header = alloca [46 x i8], align 16
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i16 %filename_size, i16* %filename_size.addr, align 2
  store i8* %pExtra, i8** %pExtra.addr, align 8
  store i16 %extra_size, i16* %extra_size.addr, align 2
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i64 %comp_size, i64* %comp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  store i16 %method, i16* %method.addr, align 2
  store i16 %bit_flags, i16* %bit_flags.addr, align 2
  store i16 %dos_time, i16* %dos_time.addr, align 2
  store i16 %dos_date, i16* %dos_date.addr, align 2
  store i64 %local_header_ofs, i64* %local_header_ofs.addr, align 8
  store i32 %ext_attributes, i32* %ext_attributes.addr, align 4
  store i8* %user_extra_data, i8** %user_extra_data.addr, align 8
  store i32 %user_extra_data_len, i32* %user_extra_data_len.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 15
  %1 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  store %struct.mz_zip_internal_state_tag* %1, %struct.mz_zip_internal_state_tag** %pState, align 8
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %2, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %3 = load i64, i64* %m_size, align 8
  %conv = trunc i64 %3 to i32
  store i32 %conv, i32* %central_dir_ofs, align 4
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir1 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 0
  %m_size2 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir1, i32 0, i32 1
  %5 = load i64, i64* %m_size2, align 8
  store i64 %5, i64* %orig_central_dir_size, align 8
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 15
  %7 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %7, i32 0, i32 4
  %8 = load i32, i32* %m_zip64, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %local_header_ofs.addr, align 8
  %cmp = icmp ugt i64 %9, 4294967295
  br i1 %cmp, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %10, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 3, i32* %err_num.addr.i, align 4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %11, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then5
  %12 = load i32, i32* %err_num.addr.i, align 4
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 5
  store i32 %12, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then5, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end6

if.end6:                                          ; preds = %if.end, %entry
  %14 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir7 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %14, i32 0, i32 0
  %m_size8 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir7, i32 0, i32 1
  %15 = load i64, i64* %m_size8, align 8
  %add = add i64 %15, 46
  %16 = load i16, i16* %filename_size.addr, align 2
  %conv9 = zext i16 %16 to i64
  %add10 = add i64 %add, %conv9
  %17 = load i16, i16* %extra_size.addr, align 2
  %conv11 = zext i16 %17 to i64
  %add12 = add i64 %add10, %conv11
  %18 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv13 = zext i32 %18 to i64
  %add14 = add i64 %add12, %conv13
  %19 = load i16, i16* %comment_size.addr, align 2
  %conv15 = zext i16 %19 to i64
  %add16 = add i64 %add14, %conv15
  %cmp17 = icmp uge i64 %add16, 4294967295
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end6
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %20, %struct.mz_zip_archive** %pZip.addr.i70, align 8
  store i32 15, i32* %err_num.addr.i71, align 4
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i70, align 8
  %tobool.i72 = icmp ne %struct.mz_zip_archive* %21, null
  br i1 %tobool.i72, label %if.then.i74, label %mz_zip_set_error.exit76

if.then.i74:                                      ; preds = %if.then19
  %22 = load i32, i32* %err_num.addr.i71, align 4
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i70, align 8
  %m_last_error.i73 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 5
  store i32 %22, i32* %m_last_error.i73, align 4
  br label %mz_zip_set_error.exit76

mz_zip_set_error.exit76:                          ; preds = %if.then19, %if.then.i74
  store i32 0, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end6
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %arraydecay = getelementptr inbounds [46 x i8], [46 x i8]* %central_dir_header, i32 0, i32 0
  %25 = load i16, i16* %filename_size.addr, align 2
  %26 = load i16, i16* %extra_size.addr, align 2
  %conv22 = zext i16 %26 to i32
  %27 = load i32, i32* %user_extra_data_len.addr, align 4
  %add23 = add i32 %conv22, %27
  %conv24 = trunc i32 %add23 to i16
  %28 = load i16, i16* %comment_size.addr, align 2
  %29 = load i64, i64* %uncomp_size.addr, align 8
  %30 = load i64, i64* %comp_size.addr, align 8
  %31 = load i32, i32* %uncomp_crc32.addr, align 4
  %32 = load i16, i16* %method.addr, align 2
  %33 = load i16, i16* %bit_flags.addr, align 2
  %34 = load i16, i16* %dos_time.addr, align 2
  %35 = load i16, i16* %dos_date.addr, align 2
  %36 = load i64, i64* %local_header_ofs.addr, align 8
  %37 = load i32, i32* %ext_attributes.addr, align 4
  %call25 = call i32 @mz_zip_writer_create_central_dir_header(%struct.mz_zip_archive* %24, i8* %arraydecay, i16 zeroext %25, i16 zeroext %conv24, i16 zeroext %28, i64 %29, i64 %30, i32 %31, i16 zeroext %32, i16 zeroext %33, i16 zeroext %34, i16 zeroext %35, i64 %36, i32 %37)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end29, label %if.then27

if.then27:                                        ; preds = %if.end21
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %38, %struct.mz_zip_archive** %pZip.addr.i86, align 8
  store i32 27, i32* %err_num.addr.i87, align 4
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i86, align 8
  %tobool.i88 = icmp ne %struct.mz_zip_archive* %39, null
  br i1 %tobool.i88, label %if.then.i90, label %mz_zip_set_error.exit92

if.then.i90:                                      ; preds = %if.then27
  %40 = load i32, i32* %err_num.addr.i87, align 4
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i86, align 8
  %m_last_error.i89 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %41, i32 0, i32 5
  store i32 %40, i32* %m_last_error.i89, align 4
  br label %mz_zip_set_error.exit92

mz_zip_set_error.exit92:                          ; preds = %if.then27, %if.then.i90
  store i32 0, i32* %retval, align 4
  br label %return

if.end29:                                         ; preds = %if.end21
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %43 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir30 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %43, i32 0, i32 0
  %arraydecay31 = getelementptr inbounds [46 x i8], [46 x i8]* %central_dir_header, i32 0, i32 0
  store %struct.mz_zip_archive* %42, %struct.mz_zip_archive** %pZip.addr.i99, align 8
  store %struct.mz_zip_array* %m_central_dir30, %struct.mz_zip_array** %pArray.addr.i100, align 8
  store i8* %arraydecay31, i8** %pElements.addr.i101, align 8
  store i64 46, i64* %n.addr.i102, align 8
  %44 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i100, align 8
  %m_size.i104 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %44, i32 0, i32 1
  %45 = load i64, i64* %m_size.i104, align 8
  store i64 %45, i64* %orig_size.i103, align 8
  %46 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i99, align 8
  %47 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i100, align 8
  %48 = load i64, i64* %orig_size.i103, align 8
  %49 = load i64, i64* %n.addr.i102, align 8
  %add.i105 = add i64 %48, %49
  store %struct.mz_zip_archive* %46, %struct.mz_zip_archive** %pZip.addr.i.i94, align 8
  store %struct.mz_zip_array* %47, %struct.mz_zip_array** %pArray.addr.i.i95, align 8
  store i64 %add.i105, i64* %new_size.addr.i.i96, align 8
  store i32 1, i32* %growing.addr.i.i97, align 4
  %50 = load i64, i64* %new_size.addr.i.i96, align 8
  %51 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i95, align 8
  %m_capacity.i.i106 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %51, i32 0, i32 2
  %52 = load i64, i64* %m_capacity.i.i106, align 8
  %cmp.i.i107 = icmp ugt i64 %50, %52
  br i1 %cmp.i.i107, label %if.then.i.i110, label %if.end2.i.i114

if.then.i.i110:                                   ; preds = %if.end29
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i94, align 8
  %54 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i95, align 8
  %55 = load i64, i64* %new_size.addr.i.i96, align 8
  %56 = load i32, i32* %growing.addr.i.i97, align 4
  %call.i.i108 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %53, %struct.mz_zip_array* %54, i64 %55, i32 %56) #10
  %tobool.i.i109 = icmp ne i32 %call.i.i108, 0
  br i1 %tobool.i.i109, label %if.end.i.i112, label %if.then1.i.i111

if.then1.i.i111:                                  ; preds = %if.then.i.i110
  store i32 0, i32* %retval.i.i93, align 4
  br label %mz_zip_array_resize.exit.i116

if.end.i.i112:                                    ; preds = %if.then.i.i110
  br label %if.end2.i.i114

if.end2.i.i114:                                   ; preds = %if.end.i.i112, %if.end29
  %57 = load i64, i64* %new_size.addr.i.i96, align 8
  %58 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i95, align 8
  %m_size.i.i113 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %58, i32 0, i32 1
  store i64 %57, i64* %m_size.i.i113, align 8
  store i32 1, i32* %retval.i.i93, align 4
  br label %mz_zip_array_resize.exit.i116

mz_zip_array_resize.exit.i116:                    ; preds = %if.end2.i.i114, %if.then1.i.i111
  %59 = load i32, i32* %retval.i.i93, align 4
  %tobool.i115 = icmp ne i32 %59, 0
  br i1 %tobool.i115, label %if.end.i119, label %if.then.i117

if.then.i117:                                     ; preds = %mz_zip_array_resize.exit.i116
  store i32 0, i32* %retval.i98, align 4
  br label %mz_zip_array_push_back.exit136

if.end.i119:                                      ; preds = %mz_zip_array_resize.exit.i116
  %60 = load i64, i64* %n.addr.i102, align 8
  %cmp.i118 = icmp ugt i64 %60, 0
  br i1 %cmp.i118, label %if.then1.i134, label %if.end11.i135

if.then1.i134:                                    ; preds = %if.end.i119
  %61 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i100, align 8
  %m_p.i120 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %61, i32 0, i32 0
  %62 = load i8*, i8** %m_p.i120, align 8
  %63 = load i64, i64* %orig_size.i103, align 8
  %64 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i100, align 8
  %m_element_size.i121 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %64, i32 0, i32 3
  %65 = load i32, i32* %m_element_size.i121, align 8
  %conv.i122 = zext i32 %65 to i64
  %mul.i123 = mul i64 %63, %conv.i122
  %add.ptr.i124 = getelementptr inbounds i8, i8* %62, i64 %mul.i123
  %66 = load i8*, i8** %pElements.addr.i101, align 8
  %67 = load i64, i64* %n.addr.i102, align 8
  %68 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i100, align 8
  %m_element_size2.i125 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %68, i32 0, i32 3
  %69 = load i32, i32* %m_element_size2.i125, align 8
  %conv3.i126 = zext i32 %69 to i64
  %mul4.i127 = mul i64 %67, %conv3.i126
  %70 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i100, align 8
  %m_p5.i128 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %70, i32 0, i32 0
  %71 = load i8*, i8** %m_p5.i128, align 8
  %72 = load i64, i64* %orig_size.i103, align 8
  %73 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i100, align 8
  %m_element_size6.i129 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %73, i32 0, i32 3
  %74 = load i32, i32* %m_element_size6.i129, align 8
  %conv7.i130 = zext i32 %74 to i64
  %mul8.i131 = mul i64 %72, %conv7.i130
  %add.ptr9.i132 = getelementptr inbounds i8, i8* %71, i64 %mul8.i131
  %75 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i132, i1 false) #10
  %call10.i133 = call i8* @__memcpy_chk(i8* %add.ptr.i124, i8* %66, i64 %mul4.i127, i64 %75) #10
  br label %if.end11.i135

if.end11.i135:                                    ; preds = %if.then1.i134, %if.end.i119
  store i32 1, i32* %retval.i98, align 4
  br label %mz_zip_array_push_back.exit136

mz_zip_array_push_back.exit136:                   ; preds = %if.then.i117, %if.end11.i135
  %76 = load i32, i32* %retval.i98, align 4
  %tobool33 = icmp ne i32 %76, 0
  br i1 %tobool33, label %lor.lhs.false, label %if.then56

lor.lhs.false:                                    ; preds = %mz_zip_array_push_back.exit136
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %78 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir34 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %78, i32 0, i32 0
  %79 = load i8*, i8** %pFilename.addr, align 8
  %80 = load i16, i16* %filename_size.addr, align 2
  %conv35 = zext i16 %80 to i64
  store %struct.mz_zip_archive* %77, %struct.mz_zip_archive** %pZip.addr.i143, align 8
  store %struct.mz_zip_array* %m_central_dir34, %struct.mz_zip_array** %pArray.addr.i144, align 8
  store i8* %79, i8** %pElements.addr.i145, align 8
  store i64 %conv35, i64* %n.addr.i146, align 8
  %81 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i144, align 8
  %m_size.i148 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %81, i32 0, i32 1
  %82 = load i64, i64* %m_size.i148, align 8
  store i64 %82, i64* %orig_size.i147, align 8
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i143, align 8
  %84 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i144, align 8
  %85 = load i64, i64* %orig_size.i147, align 8
  %86 = load i64, i64* %n.addr.i146, align 8
  %add.i149 = add i64 %85, %86
  store %struct.mz_zip_archive* %83, %struct.mz_zip_archive** %pZip.addr.i.i138, align 8
  store %struct.mz_zip_array* %84, %struct.mz_zip_array** %pArray.addr.i.i139, align 8
  store i64 %add.i149, i64* %new_size.addr.i.i140, align 8
  store i32 1, i32* %growing.addr.i.i141, align 4
  %87 = load i64, i64* %new_size.addr.i.i140, align 8
  %88 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i139, align 8
  %m_capacity.i.i150 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %88, i32 0, i32 2
  %89 = load i64, i64* %m_capacity.i.i150, align 8
  %cmp.i.i151 = icmp ugt i64 %87, %89
  br i1 %cmp.i.i151, label %if.then.i.i154, label %if.end2.i.i158

if.then.i.i154:                                   ; preds = %lor.lhs.false
  %90 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i138, align 8
  %91 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i139, align 8
  %92 = load i64, i64* %new_size.addr.i.i140, align 8
  %93 = load i32, i32* %growing.addr.i.i141, align 4
  %call.i.i152 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %90, %struct.mz_zip_array* %91, i64 %92, i32 %93) #10
  %tobool.i.i153 = icmp ne i32 %call.i.i152, 0
  br i1 %tobool.i.i153, label %if.end.i.i156, label %if.then1.i.i155

if.then1.i.i155:                                  ; preds = %if.then.i.i154
  store i32 0, i32* %retval.i.i137, align 4
  br label %mz_zip_array_resize.exit.i160

if.end.i.i156:                                    ; preds = %if.then.i.i154
  br label %if.end2.i.i158

if.end2.i.i158:                                   ; preds = %if.end.i.i156, %lor.lhs.false
  %94 = load i64, i64* %new_size.addr.i.i140, align 8
  %95 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i139, align 8
  %m_size.i.i157 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %95, i32 0, i32 1
  store i64 %94, i64* %m_size.i.i157, align 8
  store i32 1, i32* %retval.i.i137, align 4
  br label %mz_zip_array_resize.exit.i160

mz_zip_array_resize.exit.i160:                    ; preds = %if.end2.i.i158, %if.then1.i.i155
  %96 = load i32, i32* %retval.i.i137, align 4
  %tobool.i159 = icmp ne i32 %96, 0
  br i1 %tobool.i159, label %if.end.i163, label %if.then.i161

if.then.i161:                                     ; preds = %mz_zip_array_resize.exit.i160
  store i32 0, i32* %retval.i142, align 4
  br label %mz_zip_array_push_back.exit180

if.end.i163:                                      ; preds = %mz_zip_array_resize.exit.i160
  %97 = load i64, i64* %n.addr.i146, align 8
  %cmp.i162 = icmp ugt i64 %97, 0
  br i1 %cmp.i162, label %if.then1.i178, label %if.end11.i179

if.then1.i178:                                    ; preds = %if.end.i163
  %98 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i144, align 8
  %m_p.i164 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %98, i32 0, i32 0
  %99 = load i8*, i8** %m_p.i164, align 8
  %100 = load i64, i64* %orig_size.i147, align 8
  %101 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i144, align 8
  %m_element_size.i165 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %101, i32 0, i32 3
  %102 = load i32, i32* %m_element_size.i165, align 8
  %conv.i166 = zext i32 %102 to i64
  %mul.i167 = mul i64 %100, %conv.i166
  %add.ptr.i168 = getelementptr inbounds i8, i8* %99, i64 %mul.i167
  %103 = load i8*, i8** %pElements.addr.i145, align 8
  %104 = load i64, i64* %n.addr.i146, align 8
  %105 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i144, align 8
  %m_element_size2.i169 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %105, i32 0, i32 3
  %106 = load i32, i32* %m_element_size2.i169, align 8
  %conv3.i170 = zext i32 %106 to i64
  %mul4.i171 = mul i64 %104, %conv3.i170
  %107 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i144, align 8
  %m_p5.i172 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %107, i32 0, i32 0
  %108 = load i8*, i8** %m_p5.i172, align 8
  %109 = load i64, i64* %orig_size.i147, align 8
  %110 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i144, align 8
  %m_element_size6.i173 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %110, i32 0, i32 3
  %111 = load i32, i32* %m_element_size6.i173, align 8
  %conv7.i174 = zext i32 %111 to i64
  %mul8.i175 = mul i64 %109, %conv7.i174
  %add.ptr9.i176 = getelementptr inbounds i8, i8* %108, i64 %mul8.i175
  %112 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i176, i1 false) #10
  %call10.i177 = call i8* @__memcpy_chk(i8* %add.ptr.i168, i8* %103, i64 %mul4.i171, i64 %112) #10
  br label %if.end11.i179

if.end11.i179:                                    ; preds = %if.then1.i178, %if.end.i163
  store i32 1, i32* %retval.i142, align 4
  br label %mz_zip_array_push_back.exit180

mz_zip_array_push_back.exit180:                   ; preds = %if.then.i161, %if.end11.i179
  %113 = load i32, i32* %retval.i142, align 4
  %tobool37 = icmp ne i32 %113, 0
  br i1 %tobool37, label %lor.lhs.false38, label %if.then56

lor.lhs.false38:                                  ; preds = %mz_zip_array_push_back.exit180
  %114 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %115 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir39 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %115, i32 0, i32 0
  %116 = load i8*, i8** %pExtra.addr, align 8
  %117 = load i16, i16* %extra_size.addr, align 2
  %conv40 = zext i16 %117 to i64
  store %struct.mz_zip_archive* %114, %struct.mz_zip_archive** %pZip.addr.i187, align 8
  store %struct.mz_zip_array* %m_central_dir39, %struct.mz_zip_array** %pArray.addr.i188, align 8
  store i8* %116, i8** %pElements.addr.i189, align 8
  store i64 %conv40, i64* %n.addr.i190, align 8
  %118 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i188, align 8
  %m_size.i192 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %118, i32 0, i32 1
  %119 = load i64, i64* %m_size.i192, align 8
  store i64 %119, i64* %orig_size.i191, align 8
  %120 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i187, align 8
  %121 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i188, align 8
  %122 = load i64, i64* %orig_size.i191, align 8
  %123 = load i64, i64* %n.addr.i190, align 8
  %add.i193 = add i64 %122, %123
  store %struct.mz_zip_archive* %120, %struct.mz_zip_archive** %pZip.addr.i.i182, align 8
  store %struct.mz_zip_array* %121, %struct.mz_zip_array** %pArray.addr.i.i183, align 8
  store i64 %add.i193, i64* %new_size.addr.i.i184, align 8
  store i32 1, i32* %growing.addr.i.i185, align 4
  %124 = load i64, i64* %new_size.addr.i.i184, align 8
  %125 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i183, align 8
  %m_capacity.i.i194 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %125, i32 0, i32 2
  %126 = load i64, i64* %m_capacity.i.i194, align 8
  %cmp.i.i195 = icmp ugt i64 %124, %126
  br i1 %cmp.i.i195, label %if.then.i.i198, label %if.end2.i.i202

if.then.i.i198:                                   ; preds = %lor.lhs.false38
  %127 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i182, align 8
  %128 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i183, align 8
  %129 = load i64, i64* %new_size.addr.i.i184, align 8
  %130 = load i32, i32* %growing.addr.i.i185, align 4
  %call.i.i196 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %127, %struct.mz_zip_array* %128, i64 %129, i32 %130) #10
  %tobool.i.i197 = icmp ne i32 %call.i.i196, 0
  br i1 %tobool.i.i197, label %if.end.i.i200, label %if.then1.i.i199

if.then1.i.i199:                                  ; preds = %if.then.i.i198
  store i32 0, i32* %retval.i.i181, align 4
  br label %mz_zip_array_resize.exit.i204

if.end.i.i200:                                    ; preds = %if.then.i.i198
  br label %if.end2.i.i202

if.end2.i.i202:                                   ; preds = %if.end.i.i200, %lor.lhs.false38
  %131 = load i64, i64* %new_size.addr.i.i184, align 8
  %132 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i183, align 8
  %m_size.i.i201 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %132, i32 0, i32 1
  store i64 %131, i64* %m_size.i.i201, align 8
  store i32 1, i32* %retval.i.i181, align 4
  br label %mz_zip_array_resize.exit.i204

mz_zip_array_resize.exit.i204:                    ; preds = %if.end2.i.i202, %if.then1.i.i199
  %133 = load i32, i32* %retval.i.i181, align 4
  %tobool.i203 = icmp ne i32 %133, 0
  br i1 %tobool.i203, label %if.end.i207, label %if.then.i205

if.then.i205:                                     ; preds = %mz_zip_array_resize.exit.i204
  store i32 0, i32* %retval.i186, align 4
  br label %mz_zip_array_push_back.exit224

if.end.i207:                                      ; preds = %mz_zip_array_resize.exit.i204
  %134 = load i64, i64* %n.addr.i190, align 8
  %cmp.i206 = icmp ugt i64 %134, 0
  br i1 %cmp.i206, label %if.then1.i222, label %if.end11.i223

if.then1.i222:                                    ; preds = %if.end.i207
  %135 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i188, align 8
  %m_p.i208 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %135, i32 0, i32 0
  %136 = load i8*, i8** %m_p.i208, align 8
  %137 = load i64, i64* %orig_size.i191, align 8
  %138 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i188, align 8
  %m_element_size.i209 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %138, i32 0, i32 3
  %139 = load i32, i32* %m_element_size.i209, align 8
  %conv.i210 = zext i32 %139 to i64
  %mul.i211 = mul i64 %137, %conv.i210
  %add.ptr.i212 = getelementptr inbounds i8, i8* %136, i64 %mul.i211
  %140 = load i8*, i8** %pElements.addr.i189, align 8
  %141 = load i64, i64* %n.addr.i190, align 8
  %142 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i188, align 8
  %m_element_size2.i213 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %142, i32 0, i32 3
  %143 = load i32, i32* %m_element_size2.i213, align 8
  %conv3.i214 = zext i32 %143 to i64
  %mul4.i215 = mul i64 %141, %conv3.i214
  %144 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i188, align 8
  %m_p5.i216 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %144, i32 0, i32 0
  %145 = load i8*, i8** %m_p5.i216, align 8
  %146 = load i64, i64* %orig_size.i191, align 8
  %147 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i188, align 8
  %m_element_size6.i217 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %147, i32 0, i32 3
  %148 = load i32, i32* %m_element_size6.i217, align 8
  %conv7.i218 = zext i32 %148 to i64
  %mul8.i219 = mul i64 %146, %conv7.i218
  %add.ptr9.i220 = getelementptr inbounds i8, i8* %145, i64 %mul8.i219
  %149 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i220, i1 false) #10
  %call10.i221 = call i8* @__memcpy_chk(i8* %add.ptr.i212, i8* %140, i64 %mul4.i215, i64 %149) #10
  br label %if.end11.i223

if.end11.i223:                                    ; preds = %if.then1.i222, %if.end.i207
  store i32 1, i32* %retval.i186, align 4
  br label %mz_zip_array_push_back.exit224

mz_zip_array_push_back.exit224:                   ; preds = %if.then.i205, %if.end11.i223
  %150 = load i32, i32* %retval.i186, align 4
  %tobool42 = icmp ne i32 %150, 0
  br i1 %tobool42, label %lor.lhs.false43, label %if.then56

lor.lhs.false43:                                  ; preds = %mz_zip_array_push_back.exit224
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %152 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir44 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %152, i32 0, i32 0
  %153 = load i8*, i8** %user_extra_data.addr, align 8
  %154 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv45 = zext i32 %154 to i64
  store %struct.mz_zip_archive* %151, %struct.mz_zip_archive** %pZip.addr.i231, align 8
  store %struct.mz_zip_array* %m_central_dir44, %struct.mz_zip_array** %pArray.addr.i232, align 8
  store i8* %153, i8** %pElements.addr.i233, align 8
  store i64 %conv45, i64* %n.addr.i234, align 8
  %155 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i232, align 8
  %m_size.i236 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %155, i32 0, i32 1
  %156 = load i64, i64* %m_size.i236, align 8
  store i64 %156, i64* %orig_size.i235, align 8
  %157 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i231, align 8
  %158 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i232, align 8
  %159 = load i64, i64* %orig_size.i235, align 8
  %160 = load i64, i64* %n.addr.i234, align 8
  %add.i237 = add i64 %159, %160
  store %struct.mz_zip_archive* %157, %struct.mz_zip_archive** %pZip.addr.i.i226, align 8
  store %struct.mz_zip_array* %158, %struct.mz_zip_array** %pArray.addr.i.i227, align 8
  store i64 %add.i237, i64* %new_size.addr.i.i228, align 8
  store i32 1, i32* %growing.addr.i.i229, align 4
  %161 = load i64, i64* %new_size.addr.i.i228, align 8
  %162 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i227, align 8
  %m_capacity.i.i238 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %162, i32 0, i32 2
  %163 = load i64, i64* %m_capacity.i.i238, align 8
  %cmp.i.i239 = icmp ugt i64 %161, %163
  br i1 %cmp.i.i239, label %if.then.i.i242, label %if.end2.i.i246

if.then.i.i242:                                   ; preds = %lor.lhs.false43
  %164 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i226, align 8
  %165 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i227, align 8
  %166 = load i64, i64* %new_size.addr.i.i228, align 8
  %167 = load i32, i32* %growing.addr.i.i229, align 4
  %call.i.i240 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %164, %struct.mz_zip_array* %165, i64 %166, i32 %167) #10
  %tobool.i.i241 = icmp ne i32 %call.i.i240, 0
  br i1 %tobool.i.i241, label %if.end.i.i244, label %if.then1.i.i243

if.then1.i.i243:                                  ; preds = %if.then.i.i242
  store i32 0, i32* %retval.i.i225, align 4
  br label %mz_zip_array_resize.exit.i248

if.end.i.i244:                                    ; preds = %if.then.i.i242
  br label %if.end2.i.i246

if.end2.i.i246:                                   ; preds = %if.end.i.i244, %lor.lhs.false43
  %168 = load i64, i64* %new_size.addr.i.i228, align 8
  %169 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i227, align 8
  %m_size.i.i245 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %169, i32 0, i32 1
  store i64 %168, i64* %m_size.i.i245, align 8
  store i32 1, i32* %retval.i.i225, align 4
  br label %mz_zip_array_resize.exit.i248

mz_zip_array_resize.exit.i248:                    ; preds = %if.end2.i.i246, %if.then1.i.i243
  %170 = load i32, i32* %retval.i.i225, align 4
  %tobool.i247 = icmp ne i32 %170, 0
  br i1 %tobool.i247, label %if.end.i251, label %if.then.i249

if.then.i249:                                     ; preds = %mz_zip_array_resize.exit.i248
  store i32 0, i32* %retval.i230, align 4
  br label %mz_zip_array_push_back.exit268

if.end.i251:                                      ; preds = %mz_zip_array_resize.exit.i248
  %171 = load i64, i64* %n.addr.i234, align 8
  %cmp.i250 = icmp ugt i64 %171, 0
  br i1 %cmp.i250, label %if.then1.i266, label %if.end11.i267

if.then1.i266:                                    ; preds = %if.end.i251
  %172 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i232, align 8
  %m_p.i252 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %172, i32 0, i32 0
  %173 = load i8*, i8** %m_p.i252, align 8
  %174 = load i64, i64* %orig_size.i235, align 8
  %175 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i232, align 8
  %m_element_size.i253 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %175, i32 0, i32 3
  %176 = load i32, i32* %m_element_size.i253, align 8
  %conv.i254 = zext i32 %176 to i64
  %mul.i255 = mul i64 %174, %conv.i254
  %add.ptr.i256 = getelementptr inbounds i8, i8* %173, i64 %mul.i255
  %177 = load i8*, i8** %pElements.addr.i233, align 8
  %178 = load i64, i64* %n.addr.i234, align 8
  %179 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i232, align 8
  %m_element_size2.i257 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %179, i32 0, i32 3
  %180 = load i32, i32* %m_element_size2.i257, align 8
  %conv3.i258 = zext i32 %180 to i64
  %mul4.i259 = mul i64 %178, %conv3.i258
  %181 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i232, align 8
  %m_p5.i260 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %181, i32 0, i32 0
  %182 = load i8*, i8** %m_p5.i260, align 8
  %183 = load i64, i64* %orig_size.i235, align 8
  %184 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i232, align 8
  %m_element_size6.i261 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %184, i32 0, i32 3
  %185 = load i32, i32* %m_element_size6.i261, align 8
  %conv7.i262 = zext i32 %185 to i64
  %mul8.i263 = mul i64 %183, %conv7.i262
  %add.ptr9.i264 = getelementptr inbounds i8, i8* %182, i64 %mul8.i263
  %186 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i264, i1 false) #10
  %call10.i265 = call i8* @__memcpy_chk(i8* %add.ptr.i256, i8* %177, i64 %mul4.i259, i64 %186) #10
  br label %if.end11.i267

if.end11.i267:                                    ; preds = %if.then1.i266, %if.end.i251
  store i32 1, i32* %retval.i230, align 4
  br label %mz_zip_array_push_back.exit268

mz_zip_array_push_back.exit268:                   ; preds = %if.then.i249, %if.end11.i267
  %187 = load i32, i32* %retval.i230, align 4
  %tobool47 = icmp ne i32 %187, 0
  br i1 %tobool47, label %lor.lhs.false48, label %if.then56

lor.lhs.false48:                                  ; preds = %mz_zip_array_push_back.exit268
  %188 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %189 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir49 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %189, i32 0, i32 0
  %190 = load i8*, i8** %pComment.addr, align 8
  %191 = load i16, i16* %comment_size.addr, align 2
  %conv50 = zext i16 %191 to i64
  store %struct.mz_zip_archive* %188, %struct.mz_zip_archive** %pZip.addr.i275, align 8
  store %struct.mz_zip_array* %m_central_dir49, %struct.mz_zip_array** %pArray.addr.i276, align 8
  store i8* %190, i8** %pElements.addr.i277, align 8
  store i64 %conv50, i64* %n.addr.i278, align 8
  %192 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i276, align 8
  %m_size.i280 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %192, i32 0, i32 1
  %193 = load i64, i64* %m_size.i280, align 8
  store i64 %193, i64* %orig_size.i279, align 8
  %194 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i275, align 8
  %195 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i276, align 8
  %196 = load i64, i64* %orig_size.i279, align 8
  %197 = load i64, i64* %n.addr.i278, align 8
  %add.i281 = add i64 %196, %197
  store %struct.mz_zip_archive* %194, %struct.mz_zip_archive** %pZip.addr.i.i270, align 8
  store %struct.mz_zip_array* %195, %struct.mz_zip_array** %pArray.addr.i.i271, align 8
  store i64 %add.i281, i64* %new_size.addr.i.i272, align 8
  store i32 1, i32* %growing.addr.i.i273, align 4
  %198 = load i64, i64* %new_size.addr.i.i272, align 8
  %199 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i271, align 8
  %m_capacity.i.i282 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %199, i32 0, i32 2
  %200 = load i64, i64* %m_capacity.i.i282, align 8
  %cmp.i.i283 = icmp ugt i64 %198, %200
  br i1 %cmp.i.i283, label %if.then.i.i286, label %if.end2.i.i290

if.then.i.i286:                                   ; preds = %lor.lhs.false48
  %201 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i270, align 8
  %202 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i271, align 8
  %203 = load i64, i64* %new_size.addr.i.i272, align 8
  %204 = load i32, i32* %growing.addr.i.i273, align 4
  %call.i.i284 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %201, %struct.mz_zip_array* %202, i64 %203, i32 %204) #10
  %tobool.i.i285 = icmp ne i32 %call.i.i284, 0
  br i1 %tobool.i.i285, label %if.end.i.i288, label %if.then1.i.i287

if.then1.i.i287:                                  ; preds = %if.then.i.i286
  store i32 0, i32* %retval.i.i269, align 4
  br label %mz_zip_array_resize.exit.i292

if.end.i.i288:                                    ; preds = %if.then.i.i286
  br label %if.end2.i.i290

if.end2.i.i290:                                   ; preds = %if.end.i.i288, %lor.lhs.false48
  %205 = load i64, i64* %new_size.addr.i.i272, align 8
  %206 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i271, align 8
  %m_size.i.i289 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %206, i32 0, i32 1
  store i64 %205, i64* %m_size.i.i289, align 8
  store i32 1, i32* %retval.i.i269, align 4
  br label %mz_zip_array_resize.exit.i292

mz_zip_array_resize.exit.i292:                    ; preds = %if.end2.i.i290, %if.then1.i.i287
  %207 = load i32, i32* %retval.i.i269, align 4
  %tobool.i291 = icmp ne i32 %207, 0
  br i1 %tobool.i291, label %if.end.i295, label %if.then.i293

if.then.i293:                                     ; preds = %mz_zip_array_resize.exit.i292
  store i32 0, i32* %retval.i274, align 4
  br label %mz_zip_array_push_back.exit312

if.end.i295:                                      ; preds = %mz_zip_array_resize.exit.i292
  %208 = load i64, i64* %n.addr.i278, align 8
  %cmp.i294 = icmp ugt i64 %208, 0
  br i1 %cmp.i294, label %if.then1.i310, label %if.end11.i311

if.then1.i310:                                    ; preds = %if.end.i295
  %209 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i276, align 8
  %m_p.i296 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %209, i32 0, i32 0
  %210 = load i8*, i8** %m_p.i296, align 8
  %211 = load i64, i64* %orig_size.i279, align 8
  %212 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i276, align 8
  %m_element_size.i297 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %212, i32 0, i32 3
  %213 = load i32, i32* %m_element_size.i297, align 8
  %conv.i298 = zext i32 %213 to i64
  %mul.i299 = mul i64 %211, %conv.i298
  %add.ptr.i300 = getelementptr inbounds i8, i8* %210, i64 %mul.i299
  %214 = load i8*, i8** %pElements.addr.i277, align 8
  %215 = load i64, i64* %n.addr.i278, align 8
  %216 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i276, align 8
  %m_element_size2.i301 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %216, i32 0, i32 3
  %217 = load i32, i32* %m_element_size2.i301, align 8
  %conv3.i302 = zext i32 %217 to i64
  %mul4.i303 = mul i64 %215, %conv3.i302
  %218 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i276, align 8
  %m_p5.i304 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %218, i32 0, i32 0
  %219 = load i8*, i8** %m_p5.i304, align 8
  %220 = load i64, i64* %orig_size.i279, align 8
  %221 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i276, align 8
  %m_element_size6.i305 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %221, i32 0, i32 3
  %222 = load i32, i32* %m_element_size6.i305, align 8
  %conv7.i306 = zext i32 %222 to i64
  %mul8.i307 = mul i64 %220, %conv7.i306
  %add.ptr9.i308 = getelementptr inbounds i8, i8* %219, i64 %mul8.i307
  %223 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i308, i1 false) #10
  %call10.i309 = call i8* @__memcpy_chk(i8* %add.ptr.i300, i8* %214, i64 %mul4.i303, i64 %223) #10
  br label %if.end11.i311

if.end11.i311:                                    ; preds = %if.then1.i310, %if.end.i295
  store i32 1, i32* %retval.i274, align 4
  br label %mz_zip_array_push_back.exit312

mz_zip_array_push_back.exit312:                   ; preds = %if.then.i293, %if.end11.i311
  %224 = load i32, i32* %retval.i274, align 4
  %tobool52 = icmp ne i32 %224, 0
  br i1 %tobool52, label %lor.lhs.false53, label %if.then56

lor.lhs.false53:                                  ; preds = %mz_zip_array_push_back.exit312
  %225 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %226 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %226, i32 0, i32 1
  %227 = bitcast i32* %central_dir_ofs to i8*
  store %struct.mz_zip_archive* %225, %struct.mz_zip_archive** %pZip.addr.i78, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i79, align 8
  store i8* %227, i8** %pElements.addr.i, align 8
  store i64 1, i64* %n.addr.i, align 8
  %228 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i79, align 8
  %m_size.i80 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %228, i32 0, i32 1
  %229 = load i64, i64* %m_size.i80, align 8
  store i64 %229, i64* %orig_size.i, align 8
  %230 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i78, align 8
  %231 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i79, align 8
  %232 = load i64, i64* %orig_size.i, align 8
  %233 = load i64, i64* %n.addr.i, align 8
  %add.i = add i64 %232, %233
  store %struct.mz_zip_archive* %230, %struct.mz_zip_archive** %pZip.addr.i.i, align 8
  store %struct.mz_zip_array* %231, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  store i64 %add.i, i64* %new_size.addr.i.i, align 8
  store i32 1, i32* %growing.addr.i.i, align 4
  %234 = load i64, i64* %new_size.addr.i.i, align 8
  %235 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_capacity.i.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %235, i32 0, i32 2
  %236 = load i64, i64* %m_capacity.i.i, align 8
  %cmp.i.i = icmp ugt i64 %234, %236
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end2.i.i

if.then.i.i:                                      ; preds = %lor.lhs.false53
  %237 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i, align 8
  %238 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %239 = load i64, i64* %new_size.addr.i.i, align 8
  %240 = load i32, i32* %growing.addr.i.i, align 4
  %call.i.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %237, %struct.mz_zip_array* %238, i64 %239, i32 %240) #10
  %tobool.i.i = icmp ne i32 %call.i.i, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.then.i.i
  store i32 0, i32* %retval.i.i, align 4
  br label %mz_zip_array_resize.exit.i

if.end.i.i:                                       ; preds = %if.then.i.i
  br label %if.end2.i.i

if.end2.i.i:                                      ; preds = %if.end.i.i, %lor.lhs.false53
  %241 = load i64, i64* %new_size.addr.i.i, align 8
  %242 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_size.i.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %242, i32 0, i32 1
  store i64 %241, i64* %m_size.i.i, align 8
  store i32 1, i32* %retval.i.i, align 4
  br label %mz_zip_array_resize.exit.i

mz_zip_array_resize.exit.i:                       ; preds = %if.end2.i.i, %if.then1.i.i
  %243 = load i32, i32* %retval.i.i, align 4
  %tobool.i81 = icmp ne i32 %243, 0
  br i1 %tobool.i81, label %if.end.i84, label %if.then.i82

if.then.i82:                                      ; preds = %mz_zip_array_resize.exit.i
  store i32 0, i32* %retval.i77, align 4
  br label %mz_zip_array_push_back.exit

if.end.i84:                                       ; preds = %mz_zip_array_resize.exit.i
  %244 = load i64, i64* %n.addr.i, align 8
  %cmp.i83 = icmp ugt i64 %244, 0
  br i1 %cmp.i83, label %if.then1.i85, label %if.end11.i

if.then1.i85:                                     ; preds = %if.end.i84
  %245 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i79, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %245, i32 0, i32 0
  %246 = load i8*, i8** %m_p.i, align 8
  %247 = load i64, i64* %orig_size.i, align 8
  %248 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i79, align 8
  %m_element_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %248, i32 0, i32 3
  %249 = load i32, i32* %m_element_size.i, align 8
  %conv.i = zext i32 %249 to i64
  %mul.i = mul i64 %247, %conv.i
  %add.ptr.i = getelementptr inbounds i8, i8* %246, i64 %mul.i
  %250 = load i8*, i8** %pElements.addr.i, align 8
  %251 = load i64, i64* %n.addr.i, align 8
  %252 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i79, align 8
  %m_element_size2.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %252, i32 0, i32 3
  %253 = load i32, i32* %m_element_size2.i, align 8
  %conv3.i = zext i32 %253 to i64
  %mul4.i = mul i64 %251, %conv3.i
  %254 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i79, align 8
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %254, i32 0, i32 0
  %255 = load i8*, i8** %m_p5.i, align 8
  %256 = load i64, i64* %orig_size.i, align 8
  %257 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i79, align 8
  %m_element_size6.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %257, i32 0, i32 3
  %258 = load i32, i32* %m_element_size6.i, align 8
  %conv7.i = zext i32 %258 to i64
  %mul8.i = mul i64 %256, %conv7.i
  %add.ptr9.i = getelementptr inbounds i8, i8* %255, i64 %mul8.i
  %259 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i, i1 false) #10
  %call10.i = call i8* @__memcpy_chk(i8* %add.ptr.i, i8* %250, i64 %mul4.i, i64 %259) #10
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then1.i85, %if.end.i84
  store i32 1, i32* %retval.i77, align 4
  br label %mz_zip_array_push_back.exit

mz_zip_array_push_back.exit:                      ; preds = %if.then.i82, %if.end11.i
  %260 = load i32, i32* %retval.i77, align 4
  %tobool55 = icmp ne i32 %260, 0
  br i1 %tobool55, label %if.end60, label %if.then56

if.then56:                                        ; preds = %mz_zip_array_push_back.exit, %mz_zip_array_push_back.exit312, %mz_zip_array_push_back.exit268, %mz_zip_array_push_back.exit224, %mz_zip_array_push_back.exit180, %mz_zip_array_push_back.exit136
  %261 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %262 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir57 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %262, i32 0, i32 0
  %263 = load i64, i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive* %261, %struct.mz_zip_archive** %pZip.addr.i67, align 8
  store %struct.mz_zip_array* %m_central_dir57, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i64 %263, i64* %new_size.addr.i, align 8
  store i32 0, i32* %growing.addr.i, align 4
  %264 = load i64, i64* %new_size.addr.i, align 8
  %265 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_capacity.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %265, i32 0, i32 2
  %266 = load i64, i64* %m_capacity.i, align 8
  %cmp.i = icmp ugt i64 %264, %266
  br i1 %cmp.i, label %if.then.i69, label %if.end2.i

if.then.i69:                                      ; preds = %if.then56
  %267 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i67, align 8
  %268 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %269 = load i64, i64* %new_size.addr.i, align 8
  %270 = load i32, i32* %growing.addr.i, align 4
  %call.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %267, %struct.mz_zip_array* %268, i64 %269, i32 %270) #10
  %tobool.i68 = icmp ne i32 %call.i, 0
  br i1 %tobool.i68, label %if.end.i, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i69
  store i32 0, i32* %retval.i, align 4
  br label %mz_zip_array_resize.exit

if.end.i:                                         ; preds = %if.then.i69
  br label %if.end2.i

if.end2.i:                                        ; preds = %if.end.i, %if.then56
  %271 = load i64, i64* %new_size.addr.i, align 8
  %272 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %272, i32 0, i32 1
  store i64 %271, i64* %m_size.i, align 8
  store i32 1, i32* %retval.i, align 4
  br label %mz_zip_array_resize.exit

mz_zip_array_resize.exit:                         ; preds = %if.then1.i, %if.end2.i
  %273 = load i32, i32* %retval.i, align 4
  %274 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %274, %struct.mz_zip_archive** %pZip.addr.i61, align 8
  store i32 16, i32* %err_num.addr.i62, align 4
  %275 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i61, align 8
  %tobool.i63 = icmp ne %struct.mz_zip_archive* %275, null
  br i1 %tobool.i63, label %if.then.i65, label %mz_zip_set_error.exit66

if.then.i65:                                      ; preds = %mz_zip_array_resize.exit
  %276 = load i32, i32* %err_num.addr.i62, align 4
  %277 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i61, align 8
  %m_last_error.i64 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %277, i32 0, i32 5
  store i32 %276, i32* %m_last_error.i64, align 4
  br label %mz_zip_set_error.exit66

mz_zip_set_error.exit66:                          ; preds = %mz_zip_array_resize.exit, %if.then.i65
  store i32 0, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %mz_zip_array_push_back.exit
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end60, %mz_zip_set_error.exit66, %mz_zip_set_error.exit92, %mz_zip_set_error.exit76, %mz_zip_set_error.exit
  %278 = load i32, i32* %retval, align 4
  ret i32 %278
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_add_read_buf_callback(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i64 (i8*, i64, i8*, i64)* %read_callback, i8* %callback_opaque, i64 %size_to_add, i64* %pFile_time, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i8* %user_extra_data, i32 %user_extra_data_len, i8* %user_extra_data_central, i32 %user_extra_data_central_len) #0 {
entry:
  %pZip.addr.i635 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i636 = alloca i32, align 4
  %pZip.addr.i629 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i630 = alloca i32, align 4
  %pZip.addr.i623 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i624 = alloca i32, align 4
  %pZip.addr.i617 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i618 = alloca i32, align 4
  %pZip.addr.i611 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i612 = alloca i32, align 4
  %pZip.addr.i605 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i606 = alloca i32, align 4
  %pZip.addr.i599 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i600 = alloca i32, align 4
  %pZip.addr.i593 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i594 = alloca i32, align 4
  %pZip.addr.i587 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i588 = alloca i32, align 4
  %pZip.addr.i581 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i582 = alloca i32, align 4
  %pZip.addr.i575 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i576 = alloca i32, align 4
  %pZip.addr.i569 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i570 = alloca i32, align 4
  %pZip.addr.i563 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i564 = alloca i32, align 4
  %pZip.addr.i557 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i558 = alloca i32, align 4
  %pZip.addr.i551 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i552 = alloca i32, align 4
  %pZip.addr.i545 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i546 = alloca i32, align 4
  %pZip.addr.i539 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i540 = alloca i32, align 4
  %pZip.addr.i533 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i534 = alloca i32, align 4
  %p.addr.i521 = alloca i8*, align 8
  %v.addr.i522 = alloca i32, align 4
  %p.addr.i509 = alloca i8*, align 8
  %v.addr.i510 = alloca i32, align 4
  %pZip.addr.i503 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i504 = alloca i32, align 4
  %p.addr.i491 = alloca i8*, align 8
  %v.addr.i492 = alloca i32, align 4
  %p.addr.i486 = alloca i8*, align 8
  %v.addr.i487 = alloca i32, align 4
  %p.addr.i2.i456 = alloca i8*, align 8
  %v.addr.i3.i457 = alloca i32, align 4
  %p.addr.i.i458 = alloca i8*, align 8
  %v.addr.i.i459 = alloca i32, align 4
  %p.addr.i460 = alloca i8*, align 8
  %v.addr.i461 = alloca i64, align 8
  %p.addr.i2.i = alloca i8*, align 8
  %v.addr.i3.i = alloca i32, align 4
  %p.addr.i.i = alloca i8*, align 8
  %v.addr.i.i = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i64, align 8
  %pZip.addr.i450 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i451 = alloca i32, align 4
  %pZip.addr.i444 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i445 = alloca i32, align 4
  %pZip.addr.i438 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i439 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %read_callback.addr = alloca i64 (i8*, i64, i8*, i64)*, align 8
  %callback_opaque.addr = alloca i8*, align 8
  %size_to_add.addr = alloca i64, align 8
  %pFile_time.addr = alloca i64*, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %user_extra_data.addr = alloca i8*, align 8
  %user_extra_data_len.addr = alloca i32, align 4
  %user_extra_data_central.addr = alloca i8*, align 8
  %user_extra_data_central_len.addr = alloca i32, align 4
  %gen_flags = alloca i16, align 2
  %uncomp_crc32 = alloca i32, align 4
  %level = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %method = alloca i16, align 2
  %dos_time = alloca i16, align 2
  %dos_date = alloca i16, align 2
  %ext_attributes = alloca i16, align 2
  %local_dir_header_ofs = alloca i64, align 8
  %cur_archive_file_ofs = alloca i64, align 8
  %uncomp_size = alloca i64, align 8
  %comp_size = alloca i64, align 8
  %archive_name_size = alloca i64, align 8
  %local_dir_header = alloca [30 x i8], align 16
  %pExtra_data = alloca i8*, align 8
  %extra_size = alloca i32, align 4
  %extra_data = alloca [28 x i8], align 16
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %file_ofs = alloca i64, align 8
  %uncomp_remaining = alloca i64, align 8
  %pRead_buf = alloca i8*, align 8
  %n = alloca i32, align 4
  %result = alloca i32, align 4
  %state = alloca %struct.mz_zip_writer_add_state, align 8
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %in_buf_size = alloca i64, align 8
  %status = alloca i32, align 4
  %flush = alloca i32, align 4
  %local_dir_footer = alloca [24 x i8], align 16
  %local_dir_footer_size = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i64 (i8*, i64, i8*, i64)* %read_callback, i64 (i8*, i64, i8*, i64)** %read_callback.addr, align 8
  store i8* %callback_opaque, i8** %callback_opaque.addr, align 8
  store i64 %size_to_add, i64* %size_to_add.addr, align 8
  store i64* %pFile_time, i64** %pFile_time.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store i8* %user_extra_data, i8** %user_extra_data.addr, align 8
  store i32 %user_extra_data_len, i32* %user_extra_data_len.addr, align 4
  store i8* %user_extra_data_central, i8** %user_extra_data_central.addr, align 8
  store i32 %user_extra_data_central_len, i32* %user_extra_data_central_len.addr, align 4
  store i16 8, i16* %gen_flags, align 2
  store i32 0, i32* %uncomp_crc32, align 4
  store i16 0, i16* %method, align 2
  store i16 0, i16* %dos_time, align 2
  store i16 0, i16* %dos_date, align 2
  store i16 0, i16* %ext_attributes, align 2
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 0
  %1 = load i64, i64* %m_archive_size, align 8
  store i64 %1, i64* %cur_archive_file_ofs, align 8
  %2 = load i64, i64* %size_to_add.addr, align 8
  store i64 %2, i64* %uncomp_size, align 8
  store i64 0, i64* %comp_size, align 8
  store i8* null, i8** %pExtra_data, align 8
  store i32 0, i32* %extra_size, align 4
  store i64 0, i64* %file_ofs, align 8
  %3 = load i32, i32* %level_and_flags.addr, align 4
  %and = and i32 %3, 65536
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i16, i16* %gen_flags, align 2
  %conv = zext i16 %4 to i32
  %or = or i32 %conv, 2048
  %conv1 = trunc i32 %or to i16
  store i16 %conv1, i16* %gen_flags, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %level_and_flags.addr, align 4
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 6, i32* %level_and_flags.addr, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %6 = load i32, i32* %level_and_flags.addr, align 4
  %and5 = and i32 %6, 15
  store i32 %and5, i32* %level, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool6 = icmp ne %struct.mz_zip_archive* %7, null
  br i1 %tobool6, label %lor.lhs.false, label %if.then20

lor.lhs.false:                                    ; preds = %if.end4
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 15
  %9 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool7 = icmp ne %struct.mz_zip_internal_state_tag* %9, null
  br i1 %tobool7, label %lor.lhs.false8, label %if.then20

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 3
  %11 = load i32, i32* %m_zip_mode, align 4
  %cmp9 = icmp ne i32 %11, 2
  br i1 %cmp9, label %if.then20, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false8
  %12 = load i8*, i8** %pArchive_name.addr, align 8
  %tobool12 = icmp ne i8* %12, null
  br i1 %tobool12, label %lor.lhs.false13, label %if.then20

lor.lhs.false13:                                  ; preds = %lor.lhs.false11
  %13 = load i16, i16* %comment_size.addr, align 2
  %conv14 = zext i16 %13 to i32
  %tobool15 = icmp ne i32 %conv14, 0
  br i1 %tobool15, label %land.lhs.true, label %lor.lhs.false17

land.lhs.true:                                    ; preds = %lor.lhs.false13
  %14 = load i8*, i8** %pComment.addr, align 8
  %tobool16 = icmp ne i8* %14, null
  br i1 %tobool16, label %lor.lhs.false17, label %if.then20

lor.lhs.false17:                                  ; preds = %land.lhs.true, %lor.lhs.false13
  %15 = load i32, i32* %level, align 4
  %cmp18 = icmp ugt i32 %15, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %lor.lhs.false17, %land.lhs.true, %lor.lhs.false11, %lor.lhs.false8, %lor.lhs.false, %if.end4
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %16, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %17, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then20
  %18 = load i32, i32* %err_num.addr.i, align 4
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 5
  store i32 %18, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then20, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %lor.lhs.false17
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState22 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 15
  %21 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState22, align 8
  store %struct.mz_zip_internal_state_tag* %21, %struct.mz_zip_internal_state_tag** %pState, align 8
  %22 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %22, i32 0, i32 4
  %23 = load i32, i32* %m_zip64, align 4
  %tobool23 = icmp ne i32 %23, 0
  br i1 %tobool23, label %if.end29, label %land.lhs.true24

land.lhs.true24:                                  ; preds = %if.end21
  %24 = load i64, i64* %uncomp_size, align 8
  %cmp25 = icmp ugt i64 %24, 4294967295
  br i1 %cmp25, label %if.then27, label %if.end29

if.then27:                                        ; preds = %land.lhs.true24
  %25 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6428 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %25, i32 0, i32 4
  store i32 1, i32* %m_zip6428, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %land.lhs.true24, %if.end21
  %26 = load i32, i32* %level_and_flags.addr, align 4
  %and30 = and i32 %26, 1024
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %27, %struct.mz_zip_archive** %pZip.addr.i438, align 8
  store i32 24, i32* %err_num.addr.i439, align 4
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i438, align 8
  %tobool.i440 = icmp ne %struct.mz_zip_archive* %28, null
  br i1 %tobool.i440, label %if.then.i442, label %mz_zip_set_error.exit443

if.then.i442:                                     ; preds = %if.then32
  %29 = load i32, i32* %err_num.addr.i439, align 4
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i438, align 8
  %m_last_error.i441 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 5
  store i32 %29, i32* %m_last_error.i441, align 4
  br label %mz_zip_set_error.exit443

mz_zip_set_error.exit443:                         ; preds = %if.then32, %if.then.i442
  store i32 0, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %if.end29
  %31 = load i8*, i8** %pArchive_name.addr, align 8
  %call35 = call i32 @mz_zip_writer_validate_archive_name(i8* %31)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.end39, label %if.then37

if.then37:                                        ; preds = %if.end34
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %32, %struct.mz_zip_archive** %pZip.addr.i444, align 8
  store i32 25, i32* %err_num.addr.i445, align 4
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i444, align 8
  %tobool.i446 = icmp ne %struct.mz_zip_archive* %33, null
  br i1 %tobool.i446, label %if.then.i448, label %mz_zip_set_error.exit449

if.then.i448:                                     ; preds = %if.then37
  %34 = load i32, i32* %err_num.addr.i445, align 4
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i444, align 8
  %m_last_error.i447 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 5
  store i32 %34, i32* %m_last_error.i447, align 4
  br label %mz_zip_set_error.exit449

mz_zip_set_error.exit449:                         ; preds = %if.then37, %if.then.i448
  store i32 0, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %if.end34
  %36 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6440 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %36, i32 0, i32 4
  %37 = load i32, i32* %m_zip6440, align 4
  %tobool41 = icmp ne i32 %37, 0
  br i1 %tobool41, label %if.then42, label %if.else

if.then42:                                        ; preds = %if.end39
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 2
  %39 = load i32, i32* %m_total_files, align 8
  %cmp43 = icmp eq i32 %39, -1
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.then42
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %40, %struct.mz_zip_archive** %pZip.addr.i450, align 8
  store i32 2, i32* %err_num.addr.i451, align 4
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i450, align 8
  %tobool.i452 = icmp ne %struct.mz_zip_archive* %41, null
  br i1 %tobool.i452, label %if.then.i454, label %mz_zip_set_error.exit455

if.then.i454:                                     ; preds = %if.then45
  %42 = load i32, i32* %err_num.addr.i451, align 4
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i450, align 8
  %m_last_error.i453 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %43, i32 0, i32 5
  store i32 %42, i32* %m_last_error.i453, align 4
  br label %mz_zip_set_error.exit455

mz_zip_set_error.exit455:                         ; preds = %if.then45, %if.then.i454
  store i32 0, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.then42
  br label %if.end54

if.else:                                          ; preds = %if.end39
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files48 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 2
  %45 = load i32, i32* %m_total_files48, align 8
  %cmp49 = icmp eq i32 %45, 65535
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.else
  %46 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6452 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %46, i32 0, i32 4
  store i32 1, i32* %m_zip6452, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.else
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end47
  %47 = load i8*, i8** %pArchive_name.addr, align 8
  %call55 = call i64 @strlen(i8* %47)
  store i64 %call55, i64* %archive_name_size, align 8
  %48 = load i64, i64* %archive_name_size, align 8
  %cmp56 = icmp ugt i64 %48, 65535
  br i1 %cmp56, label %if.then58, label %if.end60

if.then58:                                        ; preds = %if.end54
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %49, %struct.mz_zip_archive** %pZip.addr.i533, align 8
  store i32 25, i32* %err_num.addr.i534, align 4
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i533, align 8
  %tobool.i535 = icmp ne %struct.mz_zip_archive* %50, null
  br i1 %tobool.i535, label %if.then.i537, label %mz_zip_set_error.exit538

if.then.i537:                                     ; preds = %if.then58
  %51 = load i32, i32* %err_num.addr.i534, align 4
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i533, align 8
  %m_last_error.i536 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %52, i32 0, i32 5
  store i32 %51, i32* %m_last_error.i536, align 4
  br label %mz_zip_set_error.exit538

mz_zip_set_error.exit538:                         ; preds = %if.then58, %if.then.i537
  store i32 0, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end54
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call61 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive* %53)
  store i32 %call61, i32* %num_alignment_padding_bytes, align 4
  %54 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %54, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %55 = load i64, i64* %m_size, align 8
  %add = add i64 %55, 46
  %56 = load i64, i64* %archive_name_size, align 8
  %add62 = add i64 %add, %56
  %add63 = add i64 %add62, 28
  %57 = load i16, i16* %comment_size.addr, align 2
  %conv64 = zext i16 %57 to i64
  %add65 = add i64 %add63, %conv64
  %cmp66 = icmp uge i64 %add65, 4294967295
  br i1 %cmp66, label %if.then68, label %if.end70

if.then68:                                        ; preds = %if.end60
  %58 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %58, %struct.mz_zip_archive** %pZip.addr.i539, align 8
  store i32 15, i32* %err_num.addr.i540, align 4
  %59 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i539, align 8
  %tobool.i541 = icmp ne %struct.mz_zip_archive* %59, null
  br i1 %tobool.i541, label %if.then.i543, label %mz_zip_set_error.exit544

if.then.i543:                                     ; preds = %if.then68
  %60 = load i32, i32* %err_num.addr.i540, align 4
  %61 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i539, align 8
  %m_last_error.i542 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %61, i32 0, i32 5
  store i32 %60, i32* %m_last_error.i542, align 4
  br label %mz_zip_set_error.exit544

mz_zip_set_error.exit544:                         ; preds = %if.then68, %if.then.i543
  store i32 0, i32* %retval, align 4
  br label %return

if.end70:                                         ; preds = %if.end60
  %62 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6471 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %62, i32 0, i32 4
  %63 = load i32, i32* %m_zip6471, align 4
  %tobool72 = icmp ne i32 %63, 0
  br i1 %tobool72, label %if.end98, label %if.then73

if.then73:                                        ; preds = %if.end70
  %64 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size74 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %64, i32 0, i32 0
  %65 = load i64, i64* %m_archive_size74, align 8
  %66 = load i32, i32* %num_alignment_padding_bytes, align 4
  %conv75 = zext i32 %66 to i64
  %add76 = add i64 %65, %conv75
  %add77 = add i64 %add76, 30
  %67 = load i64, i64* %archive_name_size, align 8
  %add78 = add i64 %add77, %67
  %add79 = add i64 %add78, 46
  %68 = load i64, i64* %archive_name_size, align 8
  %add80 = add i64 %add79, %68
  %69 = load i16, i16* %comment_size.addr, align 2
  %conv81 = zext i16 %69 to i64
  %add82 = add i64 %add80, %conv81
  %70 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv83 = zext i32 %70 to i64
  %add84 = add i64 %add82, %conv83
  %71 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir85 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %71, i32 0, i32 0
  %m_size86 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir85, i32 0, i32 1
  %72 = load i64, i64* %m_size86, align 8
  %add87 = add i64 %add84, %72
  %add88 = add i64 %add87, 22
  %add89 = add i64 %add88, 1024
  %add90 = add i64 %add89, 16
  %73 = load i32, i32* %user_extra_data_central_len.addr, align 4
  %conv91 = zext i32 %73 to i64
  %add92 = add i64 %add90, %conv91
  %cmp93 = icmp ugt i64 %add92, 4294967295
  br i1 %cmp93, label %if.then95, label %if.end97

if.then95:                                        ; preds = %if.then73
  %74 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6496 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %74, i32 0, i32 4
  store i32 1, i32* %m_zip6496, align 4
  br label %if.end97

if.end97:                                         ; preds = %if.then95, %if.then73
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end70
  %75 = load i64*, i64** %pFile_time.addr, align 8
  %tobool99 = icmp ne i64* %75, null
  br i1 %tobool99, label %if.then100, label %if.end101

if.then100:                                       ; preds = %if.end98
  %76 = load i64*, i64** %pFile_time.addr, align 8
  %77 = load i64, i64* %76, align 8
  call void @mz_zip_time_t_to_dos_time(i64 %77, i16* %dos_time, i16* %dos_date)
  br label %if.end101

if.end101:                                        ; preds = %if.then100, %if.end98
  %78 = load i64, i64* %uncomp_size, align 8
  %cmp102 = icmp ule i64 %78, 3
  br i1 %cmp102, label %if.then104, label %if.end105

if.then104:                                       ; preds = %if.end101
  store i32 0, i32* %level, align 4
  br label %if.end105

if.end105:                                        ; preds = %if.then104, %if.end101
  %79 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %80 = load i64, i64* %cur_archive_file_ofs, align 8
  %81 = load i32, i32* %num_alignment_padding_bytes, align 4
  %call106 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive* %79, i64 %80, i32 %81)
  %tobool107 = icmp ne i32 %call106, 0
  br i1 %tobool107, label %if.end110, label %if.then108

if.then108:                                       ; preds = %if.end105
  %82 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %82, %struct.mz_zip_archive** %pZip.addr.i545, align 8
  store i32 19, i32* %err_num.addr.i546, align 4
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i545, align 8
  %tobool.i547 = icmp ne %struct.mz_zip_archive* %83, null
  br i1 %tobool.i547, label %if.then.i549, label %mz_zip_set_error.exit550

if.then.i549:                                     ; preds = %if.then108
  %84 = load i32, i32* %err_num.addr.i546, align 4
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i545, align 8
  %m_last_error.i548 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %85, i32 0, i32 5
  store i32 %84, i32* %m_last_error.i548, align 4
  br label %mz_zip_set_error.exit550

mz_zip_set_error.exit550:                         ; preds = %if.then108, %if.then.i549
  store i32 0, i32* %retval, align 4
  br label %return

if.end110:                                        ; preds = %if.end105
  %86 = load i32, i32* %num_alignment_padding_bytes, align 4
  %conv111 = zext i32 %86 to i64
  %87 = load i64, i64* %cur_archive_file_ofs, align 8
  %add112 = add i64 %87, %conv111
  store i64 %add112, i64* %cur_archive_file_ofs, align 8
  %88 = load i64, i64* %cur_archive_file_ofs, align 8
  store i64 %88, i64* %local_dir_header_ofs, align 8
  %89 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %89, i32 0, i32 6
  %90 = load i64, i64* %m_file_offset_alignment, align 8
  %tobool113 = icmp ne i64 %90, 0
  br i1 %tobool113, label %if.then114, label %if.end121

if.then114:                                       ; preds = %if.end110
  %91 = load i64, i64* %cur_archive_file_ofs, align 8
  %92 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment115 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %92, i32 0, i32 6
  %93 = load i64, i64* %m_file_offset_alignment115, align 8
  %sub = sub i64 %93, 1
  %and116 = and i64 %91, %sub
  %cmp117 = icmp eq i64 %and116, 0
  %lnot = xor i1 %cmp117, true
  %lnot.ext = zext i1 %lnot to i32
  %conv119 = sext i32 %lnot.ext to i64
  %tobool120 = icmp ne i64 %conv119, 0
  br i1 %tobool120, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then114
  call void @__assert_rtn(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @__func__.mz_zip_writer_add_read_buf_callback, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 6471, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.24, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then114
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %94
  br label %if.end121

if.end121:                                        ; preds = %cond.end, %if.end110
  %95 = load i64, i64* %uncomp_size, align 8
  %tobool122 = icmp ne i64 %95, 0
  br i1 %tobool122, label %land.lhs.true123, label %if.end126

land.lhs.true123:                                 ; preds = %if.end121
  %96 = load i32, i32* %level, align 4
  %tobool124 = icmp ne i32 %96, 0
  br i1 %tobool124, label %if.then125, label %if.end126

if.then125:                                       ; preds = %land.lhs.true123
  store i16 8, i16* %method, align 2
  br label %if.end126

if.end126:                                        ; preds = %if.then125, %land.lhs.true123, %if.end121
  %97 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.memset.p0i8.i64(i8* %97, i8 0, i64 30, i32 16, i1 false)
  %98 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64127 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %98, i32 0, i32 4
  %99 = load i32, i32* %m_zip64127, align 4
  %tobool128 = icmp ne i32 %99, 0
  br i1 %tobool128, label %if.then129, label %if.else195

if.then129:                                       ; preds = %if.end126
  %100 = load i64, i64* %uncomp_size, align 8
  %cmp130 = icmp uge i64 %100, 4294967295
  br i1 %cmp130, label %if.then135, label %lor.lhs.false132

lor.lhs.false132:                                 ; preds = %if.then129
  %101 = load i64, i64* %local_dir_header_ofs, align 8
  %cmp133 = icmp uge i64 %101, 4294967295
  br i1 %cmp133, label %if.then135, label %if.end155

if.then135:                                       ; preds = %lor.lhs.false132, %if.then129
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i32 0, i32 0
  store i8* %arraydecay, i8** %pExtra_data, align 8
  %arraydecay136 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i32 0, i32 0
  %102 = load i64, i64* %uncomp_size, align 8
  %cmp137 = icmp uge i64 %102, 4294967295
  br i1 %cmp137, label %cond.true139, label %cond.false140

cond.true139:                                     ; preds = %if.then135
  br label %cond.end141

cond.false140:                                    ; preds = %if.then135
  br label %cond.end141

cond.end141:                                      ; preds = %cond.false140, %cond.true139
  %cond = phi i64* [ %uncomp_size, %cond.true139 ], [ null, %cond.false140 ]
  %103 = load i64, i64* %uncomp_size, align 8
  %cmp142 = icmp uge i64 %103, 4294967295
  br i1 %cmp142, label %cond.true144, label %cond.false145

cond.true144:                                     ; preds = %cond.end141
  br label %cond.end146

cond.false145:                                    ; preds = %cond.end141
  br label %cond.end146

cond.end146:                                      ; preds = %cond.false145, %cond.true144
  %cond147 = phi i64* [ %comp_size, %cond.true144 ], [ null, %cond.false145 ]
  %104 = load i64, i64* %local_dir_header_ofs, align 8
  %cmp148 = icmp uge i64 %104, 4294967295
  br i1 %cmp148, label %cond.true150, label %cond.false151

cond.true150:                                     ; preds = %cond.end146
  br label %cond.end152

cond.false151:                                    ; preds = %cond.end146
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false151, %cond.true150
  %cond153 = phi i64* [ %local_dir_header_ofs, %cond.true150 ], [ null, %cond.false151 ]
  %call154 = call i32 @mz_zip_writer_create_zip64_extra_data(i8* %arraydecay136, i64* %cond, i64* %cond147, i64* %cond153)
  store i32 %call154, i32* %extra_size, align 4
  br label %if.end155

if.end155:                                        ; preds = %cond.end152, %lor.lhs.false132
  %105 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %arraydecay156 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i32 0, i32 0
  %106 = load i64, i64* %archive_name_size, align 8
  %conv157 = trunc i64 %106 to i16
  %107 = load i32, i32* %extra_size, align 4
  %108 = load i32, i32* %user_extra_data_len.addr, align 4
  %add158 = add i32 %107, %108
  %conv159 = trunc i32 %add158 to i16
  %109 = load i16, i16* %method, align 2
  %110 = load i16, i16* %gen_flags, align 2
  %111 = load i16, i16* %dos_time, align 2
  %112 = load i16, i16* %dos_date, align 2
  %call160 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %105, i8* %arraydecay156, i16 zeroext %conv157, i16 zeroext %conv159, i64 0, i64 0, i32 0, i16 zeroext %109, i16 zeroext %110, i16 zeroext %111, i16 zeroext %112)
  %tobool161 = icmp ne i32 %call160, 0
  br i1 %tobool161, label %if.end164, label %if.then162

if.then162:                                       ; preds = %if.end155
  %113 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %113, %struct.mz_zip_archive** %pZip.addr.i557, align 8
  store i32 27, i32* %err_num.addr.i558, align 4
  %114 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i557, align 8
  %tobool.i559 = icmp ne %struct.mz_zip_archive* %114, null
  br i1 %tobool.i559, label %if.then.i561, label %mz_zip_set_error.exit562

if.then.i561:                                     ; preds = %if.then162
  %115 = load i32, i32* %err_num.addr.i558, align 4
  %116 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i557, align 8
  %m_last_error.i560 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %116, i32 0, i32 5
  store i32 %115, i32* %m_last_error.i560, align 4
  br label %mz_zip_set_error.exit562

mz_zip_set_error.exit562:                         ; preds = %if.then162, %if.then.i561
  store i32 0, i32* %retval, align 4
  br label %return

if.end164:                                        ; preds = %if.end155
  %117 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %117, i32 0, i32 12
  %118 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %119 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %119, i32 0, i32 14
  %120 = load i8*, i8** %m_pIO_opaque, align 8
  %121 = load i64, i64* %cur_archive_file_ofs, align 8
  %arraydecay165 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i32 0, i32 0
  %call166 = call i64 %118(i8* %120, i64 %121, i8* %arraydecay165, i64 30)
  %cmp167 = icmp ne i64 %call166, 30
  br i1 %cmp167, label %if.then169, label %if.end171

if.then169:                                       ; preds = %if.end164
  %122 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %122, %struct.mz_zip_archive** %pZip.addr.i563, align 8
  store i32 19, i32* %err_num.addr.i564, align 4
  %123 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i563, align 8
  %tobool.i565 = icmp ne %struct.mz_zip_archive* %123, null
  br i1 %tobool.i565, label %if.then.i567, label %mz_zip_set_error.exit568

if.then.i567:                                     ; preds = %if.then169
  %124 = load i32, i32* %err_num.addr.i564, align 4
  %125 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i563, align 8
  %m_last_error.i566 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %125, i32 0, i32 5
  store i32 %124, i32* %m_last_error.i566, align 4
  br label %mz_zip_set_error.exit568

mz_zip_set_error.exit568:                         ; preds = %if.then169, %if.then.i567
  store i32 0, i32* %retval, align 4
  br label %return

if.end171:                                        ; preds = %if.end164
  %126 = load i64, i64* %cur_archive_file_ofs, align 8
  %add172 = add i64 %126, 30
  store i64 %add172, i64* %cur_archive_file_ofs, align 8
  %127 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite173 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %127, i32 0, i32 12
  %128 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite173, align 8
  %129 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque174 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %129, i32 0, i32 14
  %130 = load i8*, i8** %m_pIO_opaque174, align 8
  %131 = load i64, i64* %cur_archive_file_ofs, align 8
  %132 = load i8*, i8** %pArchive_name.addr, align 8
  %133 = load i64, i64* %archive_name_size, align 8
  %call175 = call i64 %128(i8* %130, i64 %131, i8* %132, i64 %133)
  %134 = load i64, i64* %archive_name_size, align 8
  %cmp176 = icmp ne i64 %call175, %134
  br i1 %cmp176, label %if.then178, label %if.end180

if.then178:                                       ; preds = %if.end171
  %135 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %135, %struct.mz_zip_archive** %pZip.addr.i569, align 8
  store i32 19, i32* %err_num.addr.i570, align 4
  %136 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i569, align 8
  %tobool.i571 = icmp ne %struct.mz_zip_archive* %136, null
  br i1 %tobool.i571, label %if.then.i573, label %mz_zip_set_error.exit574

if.then.i573:                                     ; preds = %if.then178
  %137 = load i32, i32* %err_num.addr.i570, align 4
  %138 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i569, align 8
  %m_last_error.i572 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %138, i32 0, i32 5
  store i32 %137, i32* %m_last_error.i572, align 4
  br label %mz_zip_set_error.exit574

mz_zip_set_error.exit574:                         ; preds = %if.then178, %if.then.i573
  store i32 0, i32* %retval, align 4
  br label %return

if.end180:                                        ; preds = %if.end171
  %139 = load i64, i64* %archive_name_size, align 8
  %140 = load i64, i64* %cur_archive_file_ofs, align 8
  %add181 = add i64 %140, %139
  store i64 %add181, i64* %cur_archive_file_ofs, align 8
  %141 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite182 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %141, i32 0, i32 12
  %142 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite182, align 8
  %143 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque183 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %143, i32 0, i32 14
  %144 = load i8*, i8** %m_pIO_opaque183, align 8
  %145 = load i64, i64* %cur_archive_file_ofs, align 8
  %arraydecay184 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i32 0, i32 0
  %146 = load i32, i32* %extra_size, align 4
  %conv185 = zext i32 %146 to i64
  %call186 = call i64 %142(i8* %144, i64 %145, i8* %arraydecay184, i64 %conv185)
  %147 = load i32, i32* %extra_size, align 4
  %conv187 = zext i32 %147 to i64
  %cmp188 = icmp ne i64 %call186, %conv187
  br i1 %cmp188, label %if.then190, label %if.end192

if.then190:                                       ; preds = %if.end180
  %148 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %148, %struct.mz_zip_archive** %pZip.addr.i581, align 8
  store i32 19, i32* %err_num.addr.i582, align 4
  %149 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i581, align 8
  %tobool.i583 = icmp ne %struct.mz_zip_archive* %149, null
  br i1 %tobool.i583, label %if.then.i585, label %mz_zip_set_error.exit586

if.then.i585:                                     ; preds = %if.then190
  %150 = load i32, i32* %err_num.addr.i582, align 4
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i581, align 8
  %m_last_error.i584 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %151, i32 0, i32 5
  store i32 %150, i32* %m_last_error.i584, align 4
  br label %mz_zip_set_error.exit586

mz_zip_set_error.exit586:                         ; preds = %if.then190, %if.then.i585
  store i32 0, i32* %retval, align 4
  br label %return

if.end192:                                        ; preds = %if.end180
  %152 = load i32, i32* %extra_size, align 4
  %conv193 = zext i32 %152 to i64
  %153 = load i64, i64* %cur_archive_file_ofs, align 8
  %add194 = add i64 %153, %conv193
  store i64 %add194, i64* %cur_archive_file_ofs, align 8
  br label %if.end231

if.else195:                                       ; preds = %if.end126
  %154 = load i64, i64* %comp_size, align 8
  %cmp196 = icmp ugt i64 %154, 4294967295
  br i1 %cmp196, label %if.then201, label %lor.lhs.false198

lor.lhs.false198:                                 ; preds = %if.else195
  %155 = load i64, i64* %cur_archive_file_ofs, align 8
  %cmp199 = icmp ugt i64 %155, 4294967295
  br i1 %cmp199, label %if.then201, label %if.end203

if.then201:                                       ; preds = %lor.lhs.false198, %if.else195
  %156 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %156, %struct.mz_zip_archive** %pZip.addr.i593, align 8
  store i32 29, i32* %err_num.addr.i594, align 4
  %157 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i593, align 8
  %tobool.i595 = icmp ne %struct.mz_zip_archive* %157, null
  br i1 %tobool.i595, label %if.then.i597, label %mz_zip_set_error.exit598

if.then.i597:                                     ; preds = %if.then201
  %158 = load i32, i32* %err_num.addr.i594, align 4
  %159 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i593, align 8
  %m_last_error.i596 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %159, i32 0, i32 5
  store i32 %158, i32* %m_last_error.i596, align 4
  br label %mz_zip_set_error.exit598

mz_zip_set_error.exit598:                         ; preds = %if.then201, %if.then.i597
  store i32 0, i32* %retval, align 4
  br label %return

if.end203:                                        ; preds = %lor.lhs.false198
  %160 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %arraydecay204 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i32 0, i32 0
  %161 = load i64, i64* %archive_name_size, align 8
  %conv205 = trunc i64 %161 to i16
  %162 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv206 = trunc i32 %162 to i16
  %163 = load i16, i16* %method, align 2
  %164 = load i16, i16* %gen_flags, align 2
  %165 = load i16, i16* %dos_time, align 2
  %166 = load i16, i16* %dos_date, align 2
  %call207 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %160, i8* %arraydecay204, i16 zeroext %conv205, i16 zeroext %conv206, i64 0, i64 0, i32 0, i16 zeroext %163, i16 zeroext %164, i16 zeroext %165, i16 zeroext %166)
  %tobool208 = icmp ne i32 %call207, 0
  br i1 %tobool208, label %if.end211, label %if.then209

if.then209:                                       ; preds = %if.end203
  %167 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %167, %struct.mz_zip_archive** %pZip.addr.i599, align 8
  store i32 27, i32* %err_num.addr.i600, align 4
  %168 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i599, align 8
  %tobool.i601 = icmp ne %struct.mz_zip_archive* %168, null
  br i1 %tobool.i601, label %if.then.i603, label %mz_zip_set_error.exit604

if.then.i603:                                     ; preds = %if.then209
  %169 = load i32, i32* %err_num.addr.i600, align 4
  %170 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i599, align 8
  %m_last_error.i602 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %170, i32 0, i32 5
  store i32 %169, i32* %m_last_error.i602, align 4
  br label %mz_zip_set_error.exit604

mz_zip_set_error.exit604:                         ; preds = %if.then209, %if.then.i603
  store i32 0, i32* %retval, align 4
  br label %return

if.end211:                                        ; preds = %if.end203
  %171 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite212 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %171, i32 0, i32 12
  %172 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite212, align 8
  %173 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque213 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %173, i32 0, i32 14
  %174 = load i8*, i8** %m_pIO_opaque213, align 8
  %175 = load i64, i64* %cur_archive_file_ofs, align 8
  %arraydecay214 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i32 0, i32 0
  %call215 = call i64 %172(i8* %174, i64 %175, i8* %arraydecay214, i64 30)
  %cmp216 = icmp ne i64 %call215, 30
  br i1 %cmp216, label %if.then218, label %if.end220

if.then218:                                       ; preds = %if.end211
  %176 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %176, %struct.mz_zip_archive** %pZip.addr.i605, align 8
  store i32 19, i32* %err_num.addr.i606, align 4
  %177 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i605, align 8
  %tobool.i607 = icmp ne %struct.mz_zip_archive* %177, null
  br i1 %tobool.i607, label %if.then.i609, label %mz_zip_set_error.exit610

if.then.i609:                                     ; preds = %if.then218
  %178 = load i32, i32* %err_num.addr.i606, align 4
  %179 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i605, align 8
  %m_last_error.i608 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %179, i32 0, i32 5
  store i32 %178, i32* %m_last_error.i608, align 4
  br label %mz_zip_set_error.exit610

mz_zip_set_error.exit610:                         ; preds = %if.then218, %if.then.i609
  store i32 0, i32* %retval, align 4
  br label %return

if.end220:                                        ; preds = %if.end211
  %180 = load i64, i64* %cur_archive_file_ofs, align 8
  %add221 = add i64 %180, 30
  store i64 %add221, i64* %cur_archive_file_ofs, align 8
  %181 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite222 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %181, i32 0, i32 12
  %182 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite222, align 8
  %183 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque223 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %183, i32 0, i32 14
  %184 = load i8*, i8** %m_pIO_opaque223, align 8
  %185 = load i64, i64* %cur_archive_file_ofs, align 8
  %186 = load i8*, i8** %pArchive_name.addr, align 8
  %187 = load i64, i64* %archive_name_size, align 8
  %call224 = call i64 %182(i8* %184, i64 %185, i8* %186, i64 %187)
  %188 = load i64, i64* %archive_name_size, align 8
  %cmp225 = icmp ne i64 %call224, %188
  br i1 %cmp225, label %if.then227, label %if.end229

if.then227:                                       ; preds = %if.end220
  %189 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %189, %struct.mz_zip_archive** %pZip.addr.i611, align 8
  store i32 19, i32* %err_num.addr.i612, align 4
  %190 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i611, align 8
  %tobool.i613 = icmp ne %struct.mz_zip_archive* %190, null
  br i1 %tobool.i613, label %if.then.i615, label %mz_zip_set_error.exit616

if.then.i615:                                     ; preds = %if.then227
  %191 = load i32, i32* %err_num.addr.i612, align 4
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i611, align 8
  %m_last_error.i614 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %192, i32 0, i32 5
  store i32 %191, i32* %m_last_error.i614, align 4
  br label %mz_zip_set_error.exit616

mz_zip_set_error.exit616:                         ; preds = %if.then227, %if.then.i615
  store i32 0, i32* %retval, align 4
  br label %return

if.end229:                                        ; preds = %if.end220
  %193 = load i64, i64* %archive_name_size, align 8
  %194 = load i64, i64* %cur_archive_file_ofs, align 8
  %add230 = add i64 %194, %193
  store i64 %add230, i64* %cur_archive_file_ofs, align 8
  br label %if.end231

if.end231:                                        ; preds = %if.end229, %if.end192
  %195 = load i32, i32* %user_extra_data_len.addr, align 4
  %cmp232 = icmp ugt i32 %195, 0
  br i1 %cmp232, label %if.then234, label %if.end247

if.then234:                                       ; preds = %if.end231
  %196 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite235 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %196, i32 0, i32 12
  %197 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite235, align 8
  %198 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque236 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %198, i32 0, i32 14
  %199 = load i8*, i8** %m_pIO_opaque236, align 8
  %200 = load i64, i64* %cur_archive_file_ofs, align 8
  %201 = load i8*, i8** %user_extra_data.addr, align 8
  %202 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv237 = zext i32 %202 to i64
  %call238 = call i64 %197(i8* %199, i64 %200, i8* %201, i64 %conv237)
  %203 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv239 = zext i32 %203 to i64
  %cmp240 = icmp ne i64 %call238, %conv239
  br i1 %cmp240, label %if.then242, label %if.end244

if.then242:                                       ; preds = %if.then234
  %204 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %204, %struct.mz_zip_archive** %pZip.addr.i623, align 8
  store i32 19, i32* %err_num.addr.i624, align 4
  %205 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i623, align 8
  %tobool.i625 = icmp ne %struct.mz_zip_archive* %205, null
  br i1 %tobool.i625, label %if.then.i627, label %mz_zip_set_error.exit628

if.then.i627:                                     ; preds = %if.then242
  %206 = load i32, i32* %err_num.addr.i624, align 4
  %207 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i623, align 8
  %m_last_error.i626 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %207, i32 0, i32 5
  store i32 %206, i32* %m_last_error.i626, align 4
  br label %mz_zip_set_error.exit628

mz_zip_set_error.exit628:                         ; preds = %if.then242, %if.then.i627
  store i32 0, i32* %retval, align 4
  br label %return

if.end244:                                        ; preds = %if.then234
  %208 = load i32, i32* %user_extra_data_len.addr, align 4
  %conv245 = zext i32 %208 to i64
  %209 = load i64, i64* %cur_archive_file_ofs, align 8
  %add246 = add i64 %209, %conv245
  store i64 %add246, i64* %cur_archive_file_ofs, align 8
  br label %if.end247

if.end247:                                        ; preds = %if.end244, %if.end231
  %210 = load i64, i64* %uncomp_size, align 8
  %tobool248 = icmp ne i64 %210, 0
  br i1 %tobool248, label %if.then249, label %if.end369

if.then249:                                       ; preds = %if.end247
  %211 = load i64, i64* %uncomp_size, align 8
  store i64 %211, i64* %uncomp_remaining, align 8
  %212 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %212, i32 0, i32 7
  %213 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %214 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %214, i32 0, i32 10
  %215 = load i8*, i8** %m_pAlloc_opaque, align 8
  %call250 = call i8* %213(i8* %215, i64 1, i64 65536)
  store i8* %call250, i8** %pRead_buf, align 8
  %216 = load i8*, i8** %pRead_buf, align 8
  %tobool251 = icmp ne i8* %216, null
  br i1 %tobool251, label %if.end254, label %if.then252

if.then252:                                       ; preds = %if.then249
  %217 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %217, %struct.mz_zip_archive** %pZip.addr.i629, align 8
  store i32 16, i32* %err_num.addr.i630, align 4
  %218 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i629, align 8
  %tobool.i631 = icmp ne %struct.mz_zip_archive* %218, null
  br i1 %tobool.i631, label %if.then.i633, label %mz_zip_set_error.exit634

if.then.i633:                                     ; preds = %if.then252
  %219 = load i32, i32* %err_num.addr.i630, align 4
  %220 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i629, align 8
  %m_last_error.i632 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %220, i32 0, i32 5
  store i32 %219, i32* %m_last_error.i632, align 4
  br label %mz_zip_set_error.exit634

mz_zip_set_error.exit634:                         ; preds = %if.then252, %if.then.i633
  store i32 0, i32* %retval, align 4
  br label %return

if.end254:                                        ; preds = %if.then249
  %221 = load i32, i32* %level, align 4
  %tobool255 = icmp ne i32 %221, 0
  br i1 %tobool255, label %if.else292, label %if.then256

if.then256:                                       ; preds = %if.end254
  br label %while.cond

while.cond:                                       ; preds = %if.end281, %if.then256
  %222 = load i64, i64* %uncomp_remaining, align 8
  %tobool257 = icmp ne i64 %222, 0
  br i1 %tobool257, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %223 = load i64, i64* %uncomp_remaining, align 8
  %cmp258 = icmp ult i64 65536, %223
  br i1 %cmp258, label %cond.true260, label %cond.false261

cond.true260:                                     ; preds = %while.body
  br label %cond.end262

cond.false261:                                    ; preds = %while.body
  %224 = load i64, i64* %uncomp_remaining, align 8
  br label %cond.end262

cond.end262:                                      ; preds = %cond.false261, %cond.true260
  %cond263 = phi i64 [ 65536, %cond.true260 ], [ %224, %cond.false261 ]
  %conv264 = trunc i64 %cond263 to i32
  store i32 %conv264, i32* %n, align 4
  %225 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %read_callback.addr, align 8
  %226 = load i8*, i8** %callback_opaque.addr, align 8
  %227 = load i64, i64* %file_ofs, align 8
  %228 = load i8*, i8** %pRead_buf, align 8
  %229 = load i32, i32* %n, align 4
  %conv265 = zext i32 %229 to i64
  %call266 = call i64 %225(i8* %226, i64 %227, i8* %228, i64 %conv265)
  %230 = load i32, i32* %n, align 4
  %conv267 = zext i32 %230 to i64
  %cmp268 = icmp ne i64 %call266, %conv267
  br i1 %cmp268, label %if.then278, label %lor.lhs.false270

lor.lhs.false270:                                 ; preds = %cond.end262
  %231 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite271 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %231, i32 0, i32 12
  %232 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite271, align 8
  %233 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque272 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %233, i32 0, i32 14
  %234 = load i8*, i8** %m_pIO_opaque272, align 8
  %235 = load i64, i64* %cur_archive_file_ofs, align 8
  %236 = load i8*, i8** %pRead_buf, align 8
  %237 = load i32, i32* %n, align 4
  %conv273 = zext i32 %237 to i64
  %call274 = call i64 %232(i8* %234, i64 %235, i8* %236, i64 %conv273)
  %238 = load i32, i32* %n, align 4
  %conv275 = zext i32 %238 to i64
  %cmp276 = icmp ne i64 %call274, %conv275
  br i1 %cmp276, label %if.then278, label %if.end281

if.then278:                                       ; preds = %lor.lhs.false270, %cond.end262
  %239 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %239, i32 0, i32 8
  %240 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %241 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque279 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %241, i32 0, i32 10
  %242 = load i8*, i8** %m_pAlloc_opaque279, align 8
  %243 = load i8*, i8** %pRead_buf, align 8
  call void %240(i8* %242, i8* %243)
  %244 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %244, %struct.mz_zip_archive** %pZip.addr.i635, align 8
  store i32 20, i32* %err_num.addr.i636, align 4
  %245 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i635, align 8
  %tobool.i637 = icmp ne %struct.mz_zip_archive* %245, null
  br i1 %tobool.i637, label %if.then.i639, label %mz_zip_set_error.exit640

if.then.i639:                                     ; preds = %if.then278
  %246 = load i32, i32* %err_num.addr.i636, align 4
  %247 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i635, align 8
  %m_last_error.i638 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %247, i32 0, i32 5
  store i32 %246, i32* %m_last_error.i638, align 4
  br label %mz_zip_set_error.exit640

mz_zip_set_error.exit640:                         ; preds = %if.then278, %if.then.i639
  store i32 0, i32* %retval, align 4
  br label %return

if.end281:                                        ; preds = %lor.lhs.false270
  %248 = load i32, i32* %n, align 4
  %conv282 = zext i32 %248 to i64
  %249 = load i64, i64* %file_ofs, align 8
  %add283 = add i64 %249, %conv282
  store i64 %add283, i64* %file_ofs, align 8
  %250 = load i32, i32* %uncomp_crc32, align 4
  %conv284 = zext i32 %250 to i64
  %251 = load i8*, i8** %pRead_buf, align 8
  %252 = load i32, i32* %n, align 4
  %conv285 = zext i32 %252 to i64
  %call286 = call i64 @mz_crc32(i64 %conv284, i8* %251, i64 %conv285)
  %conv287 = trunc i64 %call286 to i32
  store i32 %conv287, i32* %uncomp_crc32, align 4
  %253 = load i32, i32* %n, align 4
  %conv288 = zext i32 %253 to i64
  %254 = load i64, i64* %uncomp_remaining, align 8
  %sub289 = sub i64 %254, %conv288
  store i64 %sub289, i64* %uncomp_remaining, align 8
  %255 = load i32, i32* %n, align 4
  %conv290 = zext i32 %255 to i64
  %256 = load i64, i64* %cur_archive_file_ofs, align 8
  %add291 = add i64 %256, %conv290
  store i64 %add291, i64* %cur_archive_file_ofs, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %257 = load i64, i64* %uncomp_size, align 8
  store i64 %257, i64* %comp_size, align 8
  br label %if.end366

if.else292:                                       ; preds = %if.end254
  store i32 0, i32* %result, align 4
  %258 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc293 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %258, i32 0, i32 7
  %259 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc293, align 8
  %260 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque294 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %260, i32 0, i32 10
  %261 = load i8*, i8** %m_pAlloc_opaque294, align 8
  %call295 = call i8* %259(i8* %261, i64 1, i64 319352)
  %262 = bitcast i8* %call295 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %262, %struct.tdefl_compressor** %pComp, align 8
  %263 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %tobool296 = icmp ne %struct.tdefl_compressor* %263, null
  br i1 %tobool296, label %if.end301, label %if.then297

if.then297:                                       ; preds = %if.else292
  %264 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree298 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %264, i32 0, i32 8
  %265 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree298, align 8
  %266 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque299 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %266, i32 0, i32 10
  %267 = load i8*, i8** %m_pAlloc_opaque299, align 8
  %268 = load i8*, i8** %pRead_buf, align 8
  call void %265(i8* %267, i8* %268)
  %269 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %269, %struct.mz_zip_archive** %pZip.addr.i617, align 8
  store i32 16, i32* %err_num.addr.i618, align 4
  %270 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i617, align 8
  %tobool.i619 = icmp ne %struct.mz_zip_archive* %270, null
  br i1 %tobool.i619, label %if.then.i621, label %mz_zip_set_error.exit622

if.then.i621:                                     ; preds = %if.then297
  %271 = load i32, i32* %err_num.addr.i618, align 4
  %272 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i617, align 8
  %m_last_error.i620 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %272, i32 0, i32 5
  store i32 %271, i32* %m_last_error.i620, align 4
  br label %mz_zip_set_error.exit622

mz_zip_set_error.exit622:                         ; preds = %if.then297, %if.then.i621
  store i32 0, i32* %retval, align 4
  br label %return

if.end301:                                        ; preds = %if.else292
  %273 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 0
  store %struct.mz_zip_archive* %273, %struct.mz_zip_archive** %m_pZip, align 8
  %274 = load i64, i64* %cur_archive_file_ofs, align 8
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  store i64 %274, i64* %m_cur_archive_file_ofs, align 8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  store i64 0, i64* %m_comp_size, align 8
  %275 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %276 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  %277 = load i32, i32* %level, align 4
  %call302 = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %277, i32 -15, i32 0)
  %call303 = call i32 @tdefl_init(%struct.tdefl_compressor* %275, i32 (i8*, i32, i8*)* @mz_zip_writer_add_put_buf_callback, i8* %276, i32 %call302)
  %cmp304 = icmp ne i32 %call303, 0
  br i1 %cmp304, label %if.then306, label %if.end312

if.then306:                                       ; preds = %if.end301
  %278 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree307 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %278, i32 0, i32 8
  %279 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree307, align 8
  %280 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque308 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %280, i32 0, i32 10
  %281 = load i8*, i8** %m_pAlloc_opaque308, align 8
  %282 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %283 = bitcast %struct.tdefl_compressor* %282 to i8*
  call void %279(i8* %281, i8* %283)
  %284 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree309 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %284, i32 0, i32 8
  %285 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree309, align 8
  %286 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque310 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %286, i32 0, i32 10
  %287 = load i8*, i8** %m_pAlloc_opaque310, align 8
  %288 = load i8*, i8** %pRead_buf, align 8
  call void %285(i8* %287, i8* %288)
  %289 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %289, %struct.mz_zip_archive** %pZip.addr.i587, align 8
  store i32 27, i32* %err_num.addr.i588, align 4
  %290 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i587, align 8
  %tobool.i589 = icmp ne %struct.mz_zip_archive* %290, null
  br i1 %tobool.i589, label %if.then.i591, label %mz_zip_set_error.exit592

if.then.i591:                                     ; preds = %if.then306
  %291 = load i32, i32* %err_num.addr.i588, align 4
  %292 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i587, align 8
  %m_last_error.i590 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %292, i32 0, i32 5
  store i32 %291, i32* %m_last_error.i590, align 4
  br label %mz_zip_set_error.exit592

mz_zip_set_error.exit592:                         ; preds = %if.then306, %if.then.i591
  store i32 0, i32* %retval, align 4
  br label %return

if.end312:                                        ; preds = %if.end301
  br label %for.cond

for.cond:                                         ; preds = %if.end356, %if.end312
  %293 = load i64, i64* %uncomp_remaining, align 8
  %cmp313 = icmp ult i64 %293, 65536
  br i1 %cmp313, label %cond.true315, label %cond.false316

cond.true315:                                     ; preds = %for.cond
  %294 = load i64, i64* %uncomp_remaining, align 8
  br label %cond.end317

cond.false316:                                    ; preds = %for.cond
  br label %cond.end317

cond.end317:                                      ; preds = %cond.false316, %cond.true315
  %cond318 = phi i64 [ %294, %cond.true315 ], [ 65536, %cond.false316 ]
  %conv319 = trunc i64 %cond318 to i32
  %conv320 = zext i32 %conv319 to i64
  store i64 %conv320, i64* %in_buf_size, align 8
  store i32 0, i32* %flush, align 4
  %295 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %read_callback.addr, align 8
  %296 = load i8*, i8** %callback_opaque.addr, align 8
  %297 = load i64, i64* %file_ofs, align 8
  %298 = load i8*, i8** %pRead_buf, align 8
  %299 = load i64, i64* %in_buf_size, align 8
  %call321 = call i64 %295(i8* %296, i64 %297, i8* %298, i64 %299)
  %300 = load i64, i64* %in_buf_size, align 8
  %cmp322 = icmp ne i64 %call321, %300
  br i1 %cmp322, label %if.then324, label %if.end326

if.then324:                                       ; preds = %cond.end317
  %301 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %301, %struct.mz_zip_archive** %pZip.addr.i575, align 8
  store i32 20, i32* %err_num.addr.i576, align 4
  %302 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i575, align 8
  %tobool.i577 = icmp ne %struct.mz_zip_archive* %302, null
  br i1 %tobool.i577, label %if.then.i579, label %mz_zip_set_error.exit580

if.then.i579:                                     ; preds = %if.then324
  %303 = load i32, i32* %err_num.addr.i576, align 4
  %304 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i575, align 8
  %m_last_error.i578 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %304, i32 0, i32 5
  store i32 %303, i32* %m_last_error.i578, align 4
  br label %mz_zip_set_error.exit580

mz_zip_set_error.exit580:                         ; preds = %if.then324, %if.then.i579
  br label %for.end

if.end326:                                        ; preds = %cond.end317
  %305 = load i64, i64* %in_buf_size, align 8
  %306 = load i64, i64* %file_ofs, align 8
  %add327 = add i64 %306, %305
  store i64 %add327, i64* %file_ofs, align 8
  %307 = load i32, i32* %uncomp_crc32, align 4
  %conv328 = zext i32 %307 to i64
  %308 = load i8*, i8** %pRead_buf, align 8
  %309 = load i64, i64* %in_buf_size, align 8
  %call329 = call i64 @mz_crc32(i64 %conv328, i8* %308, i64 %309)
  %conv330 = trunc i64 %call329 to i32
  store i32 %conv330, i32* %uncomp_crc32, align 4
  %310 = load i64, i64* %in_buf_size, align 8
  %311 = load i64, i64* %uncomp_remaining, align 8
  %sub331 = sub i64 %311, %310
  store i64 %sub331, i64* %uncomp_remaining, align 8
  %312 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %312, i32 0, i32 13
  %313 = load i32 (i8*)*, i32 (i8*)** %m_pNeeds_keepalive, align 8
  %cmp332 = icmp ne i32 (i8*)* %313, null
  br i1 %cmp332, label %land.lhs.true334, label %if.end340

land.lhs.true334:                                 ; preds = %if.end326
  %314 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pNeeds_keepalive335 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %314, i32 0, i32 13
  %315 = load i32 (i8*)*, i32 (i8*)** %m_pNeeds_keepalive335, align 8
  %316 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque336 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %316, i32 0, i32 14
  %317 = load i8*, i8** %m_pIO_opaque336, align 8
  %call337 = call i32 %315(i8* %317)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.then339, label %if.end340

if.then339:                                       ; preds = %land.lhs.true334
  store i32 3, i32* %flush, align 4
  br label %if.end340

if.end340:                                        ; preds = %if.then339, %land.lhs.true334, %if.end326
  %318 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %319 = load i8*, i8** %pRead_buf, align 8
  %320 = load i64, i64* %in_buf_size, align 8
  %321 = load i64, i64* %uncomp_remaining, align 8
  %tobool341 = icmp ne i64 %321, 0
  br i1 %tobool341, label %cond.true342, label %cond.false343

cond.true342:                                     ; preds = %if.end340
  %322 = load i32, i32* %flush, align 4
  br label %cond.end344

cond.false343:                                    ; preds = %if.end340
  br label %cond.end344

cond.end344:                                      ; preds = %cond.false343, %cond.true342
  %cond345 = phi i32 [ %322, %cond.true342 ], [ 4, %cond.false343 ]
  %call346 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %318, i8* %319, i64 %320, i32 %cond345)
  store i32 %call346, i32* %status, align 4
  %323 = load i32, i32* %status, align 4
  %cmp347 = icmp eq i32 %323, 1
  br i1 %cmp347, label %if.then349, label %if.else350

if.then349:                                       ; preds = %cond.end344
  store i32 1, i32* %result, align 4
  br label %for.end

if.else350:                                       ; preds = %cond.end344
  %324 = load i32, i32* %status, align 4
  %cmp351 = icmp ne i32 %324, 0
  br i1 %cmp351, label %if.then353, label %if.end355

if.then353:                                       ; preds = %if.else350
  %325 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %325, %struct.mz_zip_archive** %pZip.addr.i551, align 8
  store i32 12, i32* %err_num.addr.i552, align 4
  %326 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i551, align 8
  %tobool.i553 = icmp ne %struct.mz_zip_archive* %326, null
  br i1 %tobool.i553, label %if.then.i555, label %mz_zip_set_error.exit556

if.then.i555:                                     ; preds = %if.then353
  %327 = load i32, i32* %err_num.addr.i552, align 4
  %328 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i551, align 8
  %m_last_error.i554 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %328, i32 0, i32 5
  store i32 %327, i32* %m_last_error.i554, align 4
  br label %mz_zip_set_error.exit556

mz_zip_set_error.exit556:                         ; preds = %if.then353, %if.then.i555
  br label %for.end

if.end355:                                        ; preds = %if.else350
  br label %if.end356

if.end356:                                        ; preds = %if.end355
  br label %for.cond

for.end:                                          ; preds = %mz_zip_set_error.exit556, %if.then349, %mz_zip_set_error.exit580
  %329 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree357 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %329, i32 0, i32 8
  %330 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree357, align 8
  %331 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque358 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %331, i32 0, i32 10
  %332 = load i8*, i8** %m_pAlloc_opaque358, align 8
  %333 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8
  %334 = bitcast %struct.tdefl_compressor* %333 to i8*
  call void %330(i8* %332, i8* %334)
  %335 = load i32, i32* %result, align 4
  %tobool359 = icmp ne i32 %335, 0
  br i1 %tobool359, label %if.end363, label %if.then360

if.then360:                                       ; preds = %for.end
  %336 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree361 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %336, i32 0, i32 8
  %337 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree361, align 8
  %338 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque362 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %338, i32 0, i32 10
  %339 = load i8*, i8** %m_pAlloc_opaque362, align 8
  %340 = load i8*, i8** %pRead_buf, align 8
  call void %337(i8* %339, i8* %340)
  store i32 0, i32* %retval, align 4
  br label %return

if.end363:                                        ; preds = %for.end
  %m_comp_size364 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  %341 = load i64, i64* %m_comp_size364, align 8
  store i64 %341, i64* %comp_size, align 8
  %m_cur_archive_file_ofs365 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  %342 = load i64, i64* %m_cur_archive_file_ofs365, align 8
  store i64 %342, i64* %cur_archive_file_ofs, align 8
  br label %if.end366

if.end366:                                        ; preds = %if.end363, %while.end
  %343 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree367 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %343, i32 0, i32 8
  %344 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree367, align 8
  %345 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque368 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %345, i32 0, i32 10
  %346 = load i8*, i8** %m_pAlloc_opaque368, align 8
  %347 = load i8*, i8** %pRead_buf, align 8
  call void %344(i8* %346, i8* %347)
  br label %if.end369

if.end369:                                        ; preds = %if.end366, %if.end247
  store i32 16, i32* %local_dir_footer_size, align 4
  %arraydecay370 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay370, i64 0
  store i8* %add.ptr, i8** %p.addr.i521, align 8
  store i32 134695760, i32* %v.addr.i522, align 4
  %348 = load i32, i32* %v.addr.i522, align 4
  %conv.i523 = trunc i32 %348 to i8
  %349 = load i8*, i8** %p.addr.i521, align 8
  store i8 %conv.i523, i8* %349, align 1
  %350 = load i32, i32* %v.addr.i522, align 4
  %shr.i524 = lshr i32 %350, 8
  %conv1.i525 = trunc i32 %shr.i524 to i8
  %351 = load i8*, i8** %p.addr.i521, align 8
  %arrayidx2.i526 = getelementptr inbounds i8, i8* %351, i64 1
  store i8 %conv1.i525, i8* %arrayidx2.i526, align 1
  %352 = load i32, i32* %v.addr.i522, align 4
  %shr3.i527 = lshr i32 %352, 16
  %conv4.i528 = trunc i32 %shr3.i527 to i8
  %353 = load i8*, i8** %p.addr.i521, align 8
  %arrayidx5.i529 = getelementptr inbounds i8, i8* %353, i64 2
  store i8 %conv4.i528, i8* %arrayidx5.i529, align 1
  %354 = load i32, i32* %v.addr.i522, align 4
  %shr6.i530 = lshr i32 %354, 24
  %conv7.i531 = trunc i32 %shr6.i530 to i8
  %355 = load i8*, i8** %p.addr.i521, align 8
  %arrayidx8.i532 = getelementptr inbounds i8, i8* %355, i64 3
  store i8 %conv7.i531, i8* %arrayidx8.i532, align 1
  %arraydecay371 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr372 = getelementptr inbounds i8, i8* %arraydecay371, i64 4
  %356 = load i32, i32* %uncomp_crc32, align 4
  store i8* %add.ptr372, i8** %p.addr.i509, align 8
  store i32 %356, i32* %v.addr.i510, align 4
  %357 = load i32, i32* %v.addr.i510, align 4
  %conv.i511 = trunc i32 %357 to i8
  %358 = load i8*, i8** %p.addr.i509, align 8
  store i8 %conv.i511, i8* %358, align 1
  %359 = load i32, i32* %v.addr.i510, align 4
  %shr.i512 = lshr i32 %359, 8
  %conv1.i513 = trunc i32 %shr.i512 to i8
  %360 = load i8*, i8** %p.addr.i509, align 8
  %arrayidx2.i514 = getelementptr inbounds i8, i8* %360, i64 1
  store i8 %conv1.i513, i8* %arrayidx2.i514, align 1
  %361 = load i32, i32* %v.addr.i510, align 4
  %shr3.i515 = lshr i32 %361, 16
  %conv4.i516 = trunc i32 %shr3.i515 to i8
  %362 = load i8*, i8** %p.addr.i509, align 8
  %arrayidx5.i517 = getelementptr inbounds i8, i8* %362, i64 2
  store i8 %conv4.i516, i8* %arrayidx5.i517, align 1
  %363 = load i32, i32* %v.addr.i510, align 4
  %shr6.i518 = lshr i32 %363, 24
  %conv7.i519 = trunc i32 %shr6.i518 to i8
  %364 = load i8*, i8** %p.addr.i509, align 8
  %arrayidx8.i520 = getelementptr inbounds i8, i8* %364, i64 3
  store i8 %conv7.i519, i8* %arrayidx8.i520, align 1
  %365 = load i8*, i8** %pExtra_data, align 8
  %cmp373 = icmp eq i8* %365, null
  br i1 %cmp373, label %if.then375, label %if.else387

if.then375:                                       ; preds = %if.end369
  %366 = load i64, i64* %comp_size, align 8
  %cmp376 = icmp ugt i64 %366, 4294967295
  br i1 %cmp376, label %if.then378, label %if.end380

if.then378:                                       ; preds = %if.then375
  %367 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %367, %struct.mz_zip_archive** %pZip.addr.i503, align 8
  store i32 29, i32* %err_num.addr.i504, align 4
  %368 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i503, align 8
  %tobool.i505 = icmp ne %struct.mz_zip_archive* %368, null
  br i1 %tobool.i505, label %if.then.i507, label %mz_zip_set_error.exit508

if.then.i507:                                     ; preds = %if.then378
  %369 = load i32, i32* %err_num.addr.i504, align 4
  %370 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i503, align 8
  %m_last_error.i506 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %370, i32 0, i32 5
  store i32 %369, i32* %m_last_error.i506, align 4
  br label %mz_zip_set_error.exit508

mz_zip_set_error.exit508:                         ; preds = %if.then378, %if.then.i507
  store i32 0, i32* %retval, align 4
  br label %return

if.end380:                                        ; preds = %if.then375
  %arraydecay381 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr382 = getelementptr inbounds i8, i8* %arraydecay381, i64 8
  %371 = load i64, i64* %comp_size, align 8
  %conv383 = trunc i64 %371 to i32
  store i8* %add.ptr382, i8** %p.addr.i491, align 8
  store i32 %conv383, i32* %v.addr.i492, align 4
  %372 = load i32, i32* %v.addr.i492, align 4
  %conv.i493 = trunc i32 %372 to i8
  %373 = load i8*, i8** %p.addr.i491, align 8
  store i8 %conv.i493, i8* %373, align 1
  %374 = load i32, i32* %v.addr.i492, align 4
  %shr.i494 = lshr i32 %374, 8
  %conv1.i495 = trunc i32 %shr.i494 to i8
  %375 = load i8*, i8** %p.addr.i491, align 8
  %arrayidx2.i496 = getelementptr inbounds i8, i8* %375, i64 1
  store i8 %conv1.i495, i8* %arrayidx2.i496, align 1
  %376 = load i32, i32* %v.addr.i492, align 4
  %shr3.i497 = lshr i32 %376, 16
  %conv4.i498 = trunc i32 %shr3.i497 to i8
  %377 = load i8*, i8** %p.addr.i491, align 8
  %arrayidx5.i499 = getelementptr inbounds i8, i8* %377, i64 2
  store i8 %conv4.i498, i8* %arrayidx5.i499, align 1
  %378 = load i32, i32* %v.addr.i492, align 4
  %shr6.i500 = lshr i32 %378, 24
  %conv7.i501 = trunc i32 %shr6.i500 to i8
  %379 = load i8*, i8** %p.addr.i491, align 8
  %arrayidx8.i502 = getelementptr inbounds i8, i8* %379, i64 3
  store i8 %conv7.i501, i8* %arrayidx8.i502, align 1
  %arraydecay384 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr385 = getelementptr inbounds i8, i8* %arraydecay384, i64 12
  %380 = load i64, i64* %uncomp_size, align 8
  %conv386 = trunc i64 %380 to i32
  store i8* %add.ptr385, i8** %p.addr.i486, align 8
  store i32 %conv386, i32* %v.addr.i487, align 4
  %381 = load i32, i32* %v.addr.i487, align 4
  %conv.i488 = trunc i32 %381 to i8
  %382 = load i8*, i8** %p.addr.i486, align 8
  store i8 %conv.i488, i8* %382, align 1
  %383 = load i32, i32* %v.addr.i487, align 4
  %shr.i489 = lshr i32 %383, 8
  %conv1.i490 = trunc i32 %shr.i489 to i8
  %384 = load i8*, i8** %p.addr.i486, align 8
  %arrayidx2.i = getelementptr inbounds i8, i8* %384, i64 1
  store i8 %conv1.i490, i8* %arrayidx2.i, align 1
  %385 = load i32, i32* %v.addr.i487, align 4
  %shr3.i = lshr i32 %385, 16
  %conv4.i = trunc i32 %shr3.i to i8
  %386 = load i8*, i8** %p.addr.i486, align 8
  %arrayidx5.i = getelementptr inbounds i8, i8* %386, i64 2
  store i8 %conv4.i, i8* %arrayidx5.i, align 1
  %387 = load i32, i32* %v.addr.i487, align 4
  %shr6.i = lshr i32 %387, 24
  %conv7.i = trunc i32 %shr6.i to i8
  %388 = load i8*, i8** %p.addr.i486, align 8
  %arrayidx8.i = getelementptr inbounds i8, i8* %388, i64 3
  store i8 %conv7.i, i8* %arrayidx8.i, align 1
  br label %if.end392

if.else387:                                       ; preds = %if.end369
  %arraydecay388 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr389 = getelementptr inbounds i8, i8* %arraydecay388, i64 8
  %389 = load i64, i64* %comp_size, align 8
  store i8* %add.ptr389, i8** %p.addr.i460, align 8
  store i64 %389, i64* %v.addr.i461, align 8
  %390 = load i8*, i8** %p.addr.i460, align 8
  %391 = load i64, i64* %v.addr.i461, align 8
  %conv.i462 = trunc i64 %391 to i32
  store i8* %390, i8** %p.addr.i.i458, align 8
  store i32 %conv.i462, i32* %v.addr.i.i459, align 4
  %392 = load i32, i32* %v.addr.i.i459, align 4
  %conv.i.i463 = trunc i32 %392 to i8
  %393 = load i8*, i8** %p.addr.i.i458, align 8
  store i8 %conv.i.i463, i8* %393, align 1
  %394 = load i32, i32* %v.addr.i.i459, align 4
  %shr.i.i464 = lshr i32 %394, 8
  %conv1.i.i465 = trunc i32 %shr.i.i464 to i8
  %395 = load i8*, i8** %p.addr.i.i458, align 8
  %arrayidx2.i.i466 = getelementptr inbounds i8, i8* %395, i64 1
  store i8 %conv1.i.i465, i8* %arrayidx2.i.i466, align 1
  %396 = load i32, i32* %v.addr.i.i459, align 4
  %shr3.i.i467 = lshr i32 %396, 16
  %conv4.i.i468 = trunc i32 %shr3.i.i467 to i8
  %397 = load i8*, i8** %p.addr.i.i458, align 8
  %arrayidx5.i.i469 = getelementptr inbounds i8, i8* %397, i64 2
  store i8 %conv4.i.i468, i8* %arrayidx5.i.i469, align 1
  %398 = load i32, i32* %v.addr.i.i459, align 4
  %shr6.i.i470 = lshr i32 %398, 24
  %conv7.i.i471 = trunc i32 %shr6.i.i470 to i8
  %399 = load i8*, i8** %p.addr.i.i458, align 8
  %arrayidx8.i.i472 = getelementptr inbounds i8, i8* %399, i64 3
  store i8 %conv7.i.i471, i8* %arrayidx8.i.i472, align 1
  %400 = load i8*, i8** %p.addr.i460, align 8
  %add.ptr.i473 = getelementptr inbounds i8, i8* %400, i64 4
  %401 = load i64, i64* %v.addr.i461, align 8
  %shr.i474 = lshr i64 %401, 32
  %conv1.i475 = trunc i64 %shr.i474 to i32
  store i8* %add.ptr.i473, i8** %p.addr.i2.i456, align 8
  store i32 %conv1.i475, i32* %v.addr.i3.i457, align 4
  %402 = load i32, i32* %v.addr.i3.i457, align 4
  %conv.i4.i476 = trunc i32 %402 to i8
  %403 = load i8*, i8** %p.addr.i2.i456, align 8
  store i8 %conv.i4.i476, i8* %403, align 1
  %404 = load i32, i32* %v.addr.i3.i457, align 4
  %shr.i5.i477 = lshr i32 %404, 8
  %conv1.i6.i478 = trunc i32 %shr.i5.i477 to i8
  %405 = load i8*, i8** %p.addr.i2.i456, align 8
  %arrayidx2.i7.i479 = getelementptr inbounds i8, i8* %405, i64 1
  store i8 %conv1.i6.i478, i8* %arrayidx2.i7.i479, align 1
  %406 = load i32, i32* %v.addr.i3.i457, align 4
  %shr3.i8.i480 = lshr i32 %406, 16
  %conv4.i9.i481 = trunc i32 %shr3.i8.i480 to i8
  %407 = load i8*, i8** %p.addr.i2.i456, align 8
  %arrayidx5.i10.i482 = getelementptr inbounds i8, i8* %407, i64 2
  store i8 %conv4.i9.i481, i8* %arrayidx5.i10.i482, align 1
  %408 = load i32, i32* %v.addr.i3.i457, align 4
  %shr6.i11.i483 = lshr i32 %408, 24
  %conv7.i12.i484 = trunc i32 %shr6.i11.i483 to i8
  %409 = load i8*, i8** %p.addr.i2.i456, align 8
  %arrayidx8.i13.i485 = getelementptr inbounds i8, i8* %409, i64 3
  store i8 %conv7.i12.i484, i8* %arrayidx8.i13.i485, align 1
  %arraydecay390 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %add.ptr391 = getelementptr inbounds i8, i8* %arraydecay390, i64 16
  %410 = load i64, i64* %uncomp_size, align 8
  store i8* %add.ptr391, i8** %p.addr.i, align 8
  store i64 %410, i64* %v.addr.i, align 8
  %411 = load i8*, i8** %p.addr.i, align 8
  %412 = load i64, i64* %v.addr.i, align 8
  %conv.i = trunc i64 %412 to i32
  store i8* %411, i8** %p.addr.i.i, align 8
  store i32 %conv.i, i32* %v.addr.i.i, align 4
  %413 = load i32, i32* %v.addr.i.i, align 4
  %conv.i.i = trunc i32 %413 to i8
  %414 = load i8*, i8** %p.addr.i.i, align 8
  store i8 %conv.i.i, i8* %414, align 1
  %415 = load i32, i32* %v.addr.i.i, align 4
  %shr.i.i = lshr i32 %415, 8
  %conv1.i.i = trunc i32 %shr.i.i to i8
  %416 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx2.i.i = getelementptr inbounds i8, i8* %416, i64 1
  store i8 %conv1.i.i, i8* %arrayidx2.i.i, align 1
  %417 = load i32, i32* %v.addr.i.i, align 4
  %shr3.i.i = lshr i32 %417, 16
  %conv4.i.i = trunc i32 %shr3.i.i to i8
  %418 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i8, i8* %418, i64 2
  store i8 %conv4.i.i, i8* %arrayidx5.i.i, align 1
  %419 = load i32, i32* %v.addr.i.i, align 4
  %shr6.i.i = lshr i32 %419, 24
  %conv7.i.i = trunc i32 %shr6.i.i to i8
  %420 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx8.i.i = getelementptr inbounds i8, i8* %420, i64 3
  store i8 %conv7.i.i, i8* %arrayidx8.i.i, align 1
  %421 = load i8*, i8** %p.addr.i, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* %421, i64 4
  %422 = load i64, i64* %v.addr.i, align 8
  %shr.i = lshr i64 %422, 32
  %conv1.i = trunc i64 %shr.i to i32
  store i8* %add.ptr.i, i8** %p.addr.i2.i, align 8
  store i32 %conv1.i, i32* %v.addr.i3.i, align 4
  %423 = load i32, i32* %v.addr.i3.i, align 4
  %conv.i4.i = trunc i32 %423 to i8
  %424 = load i8*, i8** %p.addr.i2.i, align 8
  store i8 %conv.i4.i, i8* %424, align 1
  %425 = load i32, i32* %v.addr.i3.i, align 4
  %shr.i5.i = lshr i32 %425, 8
  %conv1.i6.i = trunc i32 %shr.i5.i to i8
  %426 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx2.i7.i = getelementptr inbounds i8, i8* %426, i64 1
  store i8 %conv1.i6.i, i8* %arrayidx2.i7.i, align 1
  %427 = load i32, i32* %v.addr.i3.i, align 4
  %shr3.i8.i = lshr i32 %427, 16
  %conv4.i9.i = trunc i32 %shr3.i8.i to i8
  %428 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx5.i10.i = getelementptr inbounds i8, i8* %428, i64 2
  store i8 %conv4.i9.i, i8* %arrayidx5.i10.i, align 1
  %429 = load i32, i32* %v.addr.i3.i, align 4
  %shr6.i11.i = lshr i32 %429, 24
  %conv7.i12.i = trunc i32 %shr6.i11.i to i8
  %430 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx8.i13.i = getelementptr inbounds i8, i8* %430, i64 3
  store i8 %conv7.i12.i, i8* %arrayidx8.i13.i, align 1
  store i32 24, i32* %local_dir_footer_size, align 4
  br label %if.end392

if.end392:                                        ; preds = %if.else387, %if.end380
  %431 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite393 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %431, i32 0, i32 12
  %432 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite393, align 8
  %433 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque394 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %433, i32 0, i32 14
  %434 = load i8*, i8** %m_pIO_opaque394, align 8
  %435 = load i64, i64* %cur_archive_file_ofs, align 8
  %arraydecay395 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i32 0, i32 0
  %436 = load i32, i32* %local_dir_footer_size, align 4
  %conv396 = zext i32 %436 to i64
  %call397 = call i64 %432(i8* %434, i64 %435, i8* %arraydecay395, i64 %conv396)
  %437 = load i32, i32* %local_dir_footer_size, align 4
  %conv398 = zext i32 %437 to i64
  %cmp399 = icmp ne i64 %call397, %conv398
  br i1 %cmp399, label %if.then401, label %if.end402

if.then401:                                       ; preds = %if.end392
  store i32 0, i32* %retval, align 4
  br label %return

if.end402:                                        ; preds = %if.end392
  %438 = load i32, i32* %local_dir_footer_size, align 4
  %conv403 = zext i32 %438 to i64
  %439 = load i64, i64* %cur_archive_file_ofs, align 8
  %add404 = add i64 %439, %conv403
  store i64 %add404, i64* %cur_archive_file_ofs, align 8
  %440 = load i8*, i8** %pExtra_data, align 8
  %cmp405 = icmp ne i8* %440, null
  br i1 %cmp405, label %if.then407, label %if.end428

if.then407:                                       ; preds = %if.end402
  %arraydecay408 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i32 0, i32 0
  %441 = load i64, i64* %uncomp_size, align 8
  %cmp409 = icmp uge i64 %441, 4294967295
  br i1 %cmp409, label %cond.true411, label %cond.false412

cond.true411:                                     ; preds = %if.then407
  br label %cond.end413

cond.false412:                                    ; preds = %if.then407
  br label %cond.end413

cond.end413:                                      ; preds = %cond.false412, %cond.true411
  %cond414 = phi i64* [ %uncomp_size, %cond.true411 ], [ null, %cond.false412 ]
  %442 = load i64, i64* %uncomp_size, align 8
  %cmp415 = icmp uge i64 %442, 4294967295
  br i1 %cmp415, label %cond.true417, label %cond.false418

cond.true417:                                     ; preds = %cond.end413
  br label %cond.end419

cond.false418:                                    ; preds = %cond.end413
  br label %cond.end419

cond.end419:                                      ; preds = %cond.false418, %cond.true417
  %cond420 = phi i64* [ %comp_size, %cond.true417 ], [ null, %cond.false418 ]
  %443 = load i64, i64* %local_dir_header_ofs, align 8
  %cmp421 = icmp uge i64 %443, 4294967295
  br i1 %cmp421, label %cond.true423, label %cond.false424

cond.true423:                                     ; preds = %cond.end419
  br label %cond.end425

cond.false424:                                    ; preds = %cond.end419
  br label %cond.end425

cond.end425:                                      ; preds = %cond.false424, %cond.true423
  %cond426 = phi i64* [ %local_dir_header_ofs, %cond.true423 ], [ null, %cond.false424 ]
  %call427 = call i32 @mz_zip_writer_create_zip64_extra_data(i8* %arraydecay408, i64* %cond414, i64* %cond420, i64* %cond426)
  store i32 %call427, i32* %extra_size, align 4
  br label %if.end428

if.end428:                                        ; preds = %cond.end425, %if.end402
  %444 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %445 = load i8*, i8** %pArchive_name.addr, align 8
  %446 = load i64, i64* %archive_name_size, align 8
  %conv429 = trunc i64 %446 to i16
  %447 = load i8*, i8** %pExtra_data, align 8
  %448 = load i32, i32* %extra_size, align 4
  %conv430 = trunc i32 %448 to i16
  %449 = load i8*, i8** %pComment.addr, align 8
  %450 = load i16, i16* %comment_size.addr, align 2
  %451 = load i64, i64* %uncomp_size, align 8
  %452 = load i64, i64* %comp_size, align 8
  %453 = load i32, i32* %uncomp_crc32, align 4
  %454 = load i16, i16* %method, align 2
  %455 = load i16, i16* %gen_flags, align 2
  %456 = load i16, i16* %dos_time, align 2
  %457 = load i16, i16* %dos_date, align 2
  %458 = load i64, i64* %local_dir_header_ofs, align 8
  %459 = load i16, i16* %ext_attributes, align 2
  %conv431 = zext i16 %459 to i32
  %460 = load i8*, i8** %user_extra_data_central.addr, align 8
  %461 = load i32, i32* %user_extra_data_central_len.addr, align 4
  %call432 = call i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive* %444, i8* %445, i16 zeroext %conv429, i8* %447, i16 zeroext %conv430, i8* %449, i16 zeroext %450, i64 %451, i64 %452, i32 %453, i16 zeroext %454, i16 zeroext %455, i16 zeroext %456, i16 zeroext %457, i64 %458, i32 %conv431, i8* %460, i32 %461)
  %tobool433 = icmp ne i32 %call432, 0
  br i1 %tobool433, label %if.end435, label %if.then434

if.then434:                                       ; preds = %if.end428
  store i32 0, i32* %retval, align 4
  br label %return

if.end435:                                        ; preds = %if.end428
  %462 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files436 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %462, i32 0, i32 2
  %463 = load i32, i32* %m_total_files436, align 8
  %inc = add i32 %463, 1
  store i32 %inc, i32* %m_total_files436, align 8
  %464 = load i64, i64* %cur_archive_file_ofs, align 8
  %465 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size437 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %465, i32 0, i32 0
  store i64 %464, i64* %m_archive_size437, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end435, %if.then434, %if.then401, %mz_zip_set_error.exit508, %if.then360, %mz_zip_set_error.exit592, %mz_zip_set_error.exit622, %mz_zip_set_error.exit640, %mz_zip_set_error.exit634, %mz_zip_set_error.exit628, %mz_zip_set_error.exit616, %mz_zip_set_error.exit610, %mz_zip_set_error.exit604, %mz_zip_set_error.exit598, %mz_zip_set_error.exit586, %mz_zip_set_error.exit574, %mz_zip_set_error.exit568, %mz_zip_set_error.exit562, %mz_zip_set_error.exit550, %mz_zip_set_error.exit544, %mz_zip_set_error.exit538, %mz_zip_set_error.exit455, %mz_zip_set_error.exit449, %mz_zip_set_error.exit443, %mz_zip_set_error.exit
  %466 = load i32, i32* %retval, align 4
  ret i32 %466
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_add_cfile(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, %struct.__sFILE* %pSrc_file, i64 %size_to_add, i64* %pFile_time, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i8* %user_extra_data, i32 %user_extra_data_len, i8* %user_extra_data_central, i32 %user_extra_data_central_len) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pSrc_file.addr = alloca %struct.__sFILE*, align 8
  %size_to_add.addr = alloca i64, align 8
  %pFile_time.addr = alloca i64*, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %user_extra_data.addr = alloca i8*, align 8
  %user_extra_data_len.addr = alloca i32, align 4
  %user_extra_data_central.addr = alloca i8*, align 8
  %user_extra_data_central_len.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store %struct.__sFILE* %pSrc_file, %struct.__sFILE** %pSrc_file.addr, align 8
  store i64 %size_to_add, i64* %size_to_add.addr, align 8
  store i64* %pFile_time, i64** %pFile_time.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store i8* %user_extra_data, i8** %user_extra_data.addr, align 8
  store i32 %user_extra_data_len, i32* %user_extra_data_len.addr, align 4
  store i8* %user_extra_data_central, i8** %user_extra_data_central.addr, align 8
  store i32 %user_extra_data_central_len, i32* %user_extra_data_central_len.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pArchive_name.addr, align 8
  %2 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file.addr, align 8
  %3 = bitcast %struct.__sFILE* %2 to i8*
  %4 = load i64, i64* %size_to_add.addr, align 8
  %5 = load i64*, i64** %pFile_time.addr, align 8
  %6 = load i8*, i8** %pComment.addr, align 8
  %7 = load i16, i16* %comment_size.addr, align 2
  %8 = load i32, i32* %level_and_flags.addr, align 4
  %9 = load i8*, i8** %user_extra_data.addr, align 8
  %10 = load i32, i32* %user_extra_data_len.addr, align 4
  %11 = load i8*, i8** %user_extra_data_central.addr, align 8
  %12 = load i32, i32* %user_extra_data_central_len.addr, align 4
  %call = call i32 @mz_zip_writer_add_read_buf_callback(%struct.mz_zip_archive* %0, i8* %1, i64 (i8*, i64, i8*, i64)* @mz_file_read_func_stdio, i8* %3, i64 %4, i64* %5, i8* %6, i16 zeroext %7, i32 %8, i8* %9, i32 %10, i8* %11, i32 %12)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mz_file_read_func_stdio(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pSrc_file = alloca %struct.__sFILE*, align 8
  %cur_ofs = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8*, i8** %pOpaque.addr, align 8
  %1 = bitcast i8* %0 to %struct.__sFILE*
  store %struct.__sFILE* %1, %struct.__sFILE** %pSrc_file, align 8
  %2 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %call = call i64 @ftello(%struct.__sFILE* %2)
  store i64 %call, i64* %cur_ofs, align 8
  %3 = load i64, i64* %file_ofs.addr, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load i64, i64* %cur_ofs, align 8
  %5 = load i64, i64* %file_ofs.addr, align 8
  %cmp1 = icmp ne i64 %4, %5
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %7 = load i64, i64* %file_ofs.addr, align 8
  %call2 = call i32 @fseeko(%struct.__sFILE* %6, i64 %7, i32 0)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %8 = load i8*, i8** %pBuf.addr, align 8
  %9 = load i64, i64* %n.addr, align 8
  %10 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %call3 = call i64 @fread(i8* %8, i64 1, i64 %9, %struct.__sFILE* %10)
  store i64 %call3, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i64, i64* %retval, align 8
  ret i64 %11
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_add_file(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i8* %pSrc_filename, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags) #0 {
entry:
  %pZip.addr.i12 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i13 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pSrc_filename.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %pSrc_file = alloca %struct.__sFILE*, align 8
  %uncomp_size = alloca i64, align 8
  %file_modified_time = alloca i64, align 8
  %pFile_time = alloca i64*, align 8
  %status = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pSrc_filename, i8** %pSrc_filename.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store %struct.__sFILE* null, %struct.__sFILE** %pSrc_file, align 8
  store i64 0, i64* %uncomp_size, align 8
  store i64* null, i64** %pFile_time, align 8
  %0 = bitcast i64* %file_modified_time to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 8, i32 8, i1 false)
  store i64* %file_modified_time, i64** %pFile_time, align 8
  %1 = load i8*, i8** %pSrc_filename.addr, align 8
  %call = call i32 @mz_zip_get_file_modified_time(i8* %1, i64* %file_modified_time)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %2, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 23, i32* %err_num.addr.i, align 4
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %3, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %4 = load i32, i32* %err_num.addr.i, align 4
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 5
  store i32 %4, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %pSrc_filename.addr, align 8
  %call2 = call %struct.__sFILE* @"\01_fopen"(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i32 0, i32 0))
  store %struct.__sFILE* %call2, %struct.__sFILE** %pSrc_file, align 8
  %7 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %tobool3 = icmp ne %struct.__sFILE* %7, null
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %8, %struct.mz_zip_archive** %pZip.addr.i12, align 8
  store i32 17, i32* %err_num.addr.i13, align 4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i12, align 8
  %tobool.i14 = icmp ne %struct.mz_zip_archive* %9, null
  br i1 %tobool.i14, label %if.then.i16, label %mz_zip_set_error.exit17

if.then.i16:                                      ; preds = %if.then4
  %10 = load i32, i32* %err_num.addr.i13, align 4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i12, align 8
  %m_last_error.i15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 5
  store i32 %10, i32* %m_last_error.i15, align 4
  br label %mz_zip_set_error.exit17

mz_zip_set_error.exit17:                          ; preds = %if.then4, %if.then.i16
  store i32 0, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %12 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %call7 = call i32 @fseeko(%struct.__sFILE* %12, i64 0, i32 2)
  %13 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %call8 = call i64 @ftello(%struct.__sFILE* %13)
  store i64 %call8, i64* %uncomp_size, align 8
  %14 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %call9 = call i32 @fseeko(%struct.__sFILE* %14, i64 0, i32 0)
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %16 = load i8*, i8** %pArchive_name.addr, align 8
  %17 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %18 = load i64, i64* %uncomp_size, align 8
  %19 = load i64*, i64** %pFile_time, align 8
  %20 = load i8*, i8** %pComment.addr, align 8
  %21 = load i16, i16* %comment_size.addr, align 2
  %22 = load i32, i32* %level_and_flags.addr, align 4
  %call10 = call i32 @mz_zip_writer_add_cfile(%struct.mz_zip_archive* %15, i8* %16, %struct.__sFILE* %17, i64 %18, i64* %19, i8* %20, i16 zeroext %21, i32 %22, i8* null, i32 0, i8* null, i32 0)
  store i32 %call10, i32* %status, align 4
  %23 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8
  %call11 = call i32 @fclose(%struct.__sFILE* %23)
  %24 = load i32, i32* %status, align 4
  store i32 %24, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %mz_zip_set_error.exit17, %mz_zip_set_error.exit
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_get_file_modified_time(i8* %pFilename, i64* %pTime) #0 {
entry:
  %retval = alloca i32, align 4
  %pFilename.addr = alloca i8*, align 8
  %pTime.addr = alloca i64*, align 8
  %file_stat = alloca %struct.stat, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i64* %pTime, i64** %pTime.addr, align 8
  %0 = load i8*, i8** %pFilename.addr, align 8
  %call = call i32 @"\01_stat$INODE64"(i8* %0, %struct.stat* %file_stat)
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %st_mtimespec = getelementptr inbounds %struct.stat, %struct.stat* %file_stat, i32 0, i32 8
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtimespec, i32 0, i32 0
  %1 = load i64, i64* %tv_sec, align 8
  %2 = load i64*, i64** %pTime.addr, align 8
  store i64 %1, i64* %2, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_add_from_zip_reader(%struct.mz_zip_archive* %pZip, %struct.mz_zip_archive* %pSource_zip, i32 %src_file_index) #0 {
entry:
  %pZip.addr.i1210 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i1211 = alloca i32, align 4
  %pZip.addr.i1204 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i1205 = alloca %struct.mz_zip_array*, align 8
  %retval.i.i1160 = alloca i32, align 4
  %pZip.addr.i.i1161 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i1162 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i1163 = alloca i64, align 8
  %growing.addr.i.i1164 = alloca i32, align 4
  %retval.i1165 = alloca i32, align 4
  %pZip.addr.i1166 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i1167 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i1168 = alloca i8*, align 8
  %n.addr.i1169 = alloca i64, align 8
  %orig_size.i1170 = alloca i64, align 8
  %p.addr.i1155 = alloca i8*, align 8
  %v.addr.i1156 = alloca i16, align 2
  %pZip.addr.i1149 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i1150 = alloca %struct.mz_zip_array*, align 8
  %retval.i.i1105 = alloca i32, align 4
  %pZip.addr.i.i1106 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i1107 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i1108 = alloca i64, align 8
  %growing.addr.i.i1109 = alloca i32, align 4
  %retval.i1110 = alloca i32, align 4
  %pZip.addr.i1111 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i1112 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i1113 = alloca i8*, align 8
  %n.addr.i1114 = alloca i64, align 8
  %orig_size.i1115 = alloca i64, align 8
  %p.addr.i1093 = alloca i8*, align 8
  %v.addr.i1094 = alloca i32, align 4
  %p.addr.i1081 = alloca i8*, align 8
  %v.addr.i1082 = alloca i32, align 4
  %pZip.addr.i1075 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i1076 = alloca %struct.mz_zip_array*, align 8
  %p.addr.i1063 = alloca i8*, align 8
  %v.addr.i1064 = alloca i32, align 4
  %pArray.addr.i1059 = alloca %struct.mz_zip_array*, align 8
  %element_size.addr.i1060 = alloca i32, align 4
  %retval.i1044 = alloca i32, align 4
  %pZip.addr.i1045 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i1046 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i1047 = alloca i64, align 8
  %growing.addr.i1048 = alloca i32, align 4
  %pZip.addr.i1037 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i1038 = alloca i32, align 4
  %pZip.addr.i1030 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i1031 = alloca i32, align 4
  %p.addr.i2.i1000 = alloca i8*, align 8
  %v.addr.i3.i1001 = alloca i32, align 4
  %p.addr.i.i1002 = alloca i8*, align 8
  %v.addr.i.i1003 = alloca i32, align 4
  %p.addr.i1004 = alloca i8*, align 8
  %v.addr.i1005 = alloca i64, align 8
  %retval.i.i956 = alloca i32, align 4
  %pZip.addr.i.i957 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i958 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i959 = alloca i64, align 8
  %growing.addr.i.i960 = alloca i32, align 4
  %retval.i961 = alloca i32, align 4
  %pZip.addr.i962 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i963 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i964 = alloca i8*, align 8
  %n.addr.i965 = alloca i64, align 8
  %orig_size.i966 = alloca i64, align 8
  %p.addr.i2.i = alloca i8*, align 8
  %v.addr.i3.i = alloca i32, align 4
  %p.addr.i.i = alloca i8*, align 8
  %v.addr.i.i = alloca i32, align 4
  %p.addr.i950 = alloca i8*, align 8
  %v.addr.i951 = alloca i64, align 8
  %p.addr.i938 = alloca i8*, align 8
  %v.addr.i939 = alloca i32, align 4
  %pZip.addr.i932 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i933 = alloca %struct.mz_zip_array*, align 8
  %p.addr.i920 = alloca i8*, align 8
  %v.addr.i921 = alloca i32, align 4
  %retval.i905 = alloca i32, align 4
  %pZip.addr.i906 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i907 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i908 = alloca i64, align 8
  %growing.addr.i909 = alloca i32, align 4
  %pZip.addr.i898 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i899 = alloca i32, align 4
  %pZip.addr.i891 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i892 = alloca i32, align 4
  %pZip.addr.i884 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i885 = alloca i32, align 4
  %retval.i.i840 = alloca i32, align 4
  %pZip.addr.i.i841 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i842 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i843 = alloca i64, align 8
  %growing.addr.i.i844 = alloca i32, align 4
  %retval.i845 = alloca i32, align 4
  %pZip.addr.i846 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i847 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i848 = alloca i8*, align 8
  %n.addr.i849 = alloca i64, align 8
  %orig_size.i850 = alloca i64, align 8
  %pZip.addr.i833 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i834 = alloca i32, align 4
  %pZip.addr.i826 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i827 = alloca i32, align 4
  %pZip.addr.i820 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i821 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i813 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i814 = alloca i32, align 4
  %retval.i798 = alloca i32, align 4
  %pZip.addr.i799 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i800 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i801 = alloca i64, align 8
  %growing.addr.i802 = alloca i32, align 4
  %pZip.addr.i791 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i792 = alloca i32, align 4
  %pZip.addr.i784 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i785 = alloca i32, align 4
  %pZip.addr.i777 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i778 = alloca i32, align 4
  %pZip.addr.i771 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i772 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i764 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i765 = alloca i32, align 4
  %pZip.addr.i758 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i759 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i751 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i752 = alloca i32, align 4
  %pZip.addr.i745 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i746 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i738 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i739 = alloca i32, align 4
  %pZip.addr.i732 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i733 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i725 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i726 = alloca i32, align 4
  %pZip.addr.i719 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i720 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i712 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i713 = alloca i32, align 4
  %retval.i697 = alloca i32, align 4
  %pZip.addr.i698 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i699 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i700 = alloca i64, align 8
  %growing.addr.i701 = alloca i32, align 4
  %pArray.addr.i694 = alloca %struct.mz_zip_array*, align 8
  %element_size.addr.i = alloca i32, align 4
  %pZip.addr.i690 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i691 = alloca %struct.mz_zip_array*, align 8
  %pZip.addr.i683 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i684 = alloca i32, align 4
  %pZip.addr.i676 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i677 = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %pZip.addr.i667 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i668 = alloca i32, align 4
  %pZip.addr.i660 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i661 = alloca i32, align 4
  %retval.i.i616 = alloca i32, align 4
  %pZip.addr.i.i617 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i618 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i619 = alloca i64, align 8
  %growing.addr.i.i620 = alloca i32, align 4
  %retval.i621 = alloca i32, align 4
  %pZip.addr.i622 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i623 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i624 = alloca i8*, align 8
  %n.addr.i625 = alloca i64, align 8
  %orig_size.i626 = alloca i64, align 8
  %pZip.addr.i609 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i610 = alloca i32, align 4
  %pZip.addr.i602 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i603 = alloca i32, align 4
  %pZip.addr.i595 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i596 = alloca i32, align 4
  %retval.i.i551 = alloca i32, align 4
  %pZip.addr.i.i552 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i553 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i554 = alloca i64, align 8
  %growing.addr.i.i555 = alloca i32, align 4
  %retval.i556 = alloca i32, align 4
  %pZip.addr.i557 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i558 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i559 = alloca i8*, align 8
  %n.addr.i560 = alloca i64, align 8
  %orig_size.i561 = alloca i64, align 8
  %pZip.addr.i544 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i545 = alloca i32, align 4
  %retval.i529 = alloca i32, align 4
  %pZip.addr.i530 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i531 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i532 = alloca i64, align 8
  %growing.addr.i533 = alloca i32, align 4
  %pZip.addr.i522 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i523 = alloca i32, align 4
  %pZip.addr.i515 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i516 = alloca i32, align 4
  %retval.i500 = alloca i32, align 4
  %pZip.addr.i501 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i502 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i503 = alloca i64, align 8
  %growing.addr.i504 = alloca i32, align 4
  %pZip.addr.i493 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i494 = alloca i32, align 4
  %pZip.addr.i486 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i487 = alloca i32, align 4
  %retval.i478 = alloca i8*, align 8
  %pZip.addr.i479 = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval.i.i = alloca i32, align 4
  %pZip.addr.i.i = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i = alloca i64, align 8
  %growing.addr.i.i = alloca i32, align 4
  %retval.i469 = alloca i32, align 4
  %pZip.addr.i470 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i471 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i = alloca i8*, align 8
  %n.addr.i = alloca i64, align 8
  %orig_size.i = alloca i64, align 8
  %pZip.addr.i462 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i463 = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %pZip.addr.i459 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i = alloca i64, align 8
  %growing.addr.i = alloca i32, align 4
  %pZip.addr.i453 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i454 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pSource_zip.addr = alloca %struct.mz_zip_archive*, align 8
  %src_file_index.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %bit_flags = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %src_central_dir_following_data_size = alloca i32, align 4
  %src_archive_bytes_remaining = alloca i64, align 8
  %local_dir_header_ofs = alloca i64, align 8
  %cur_src_file_ofs = alloca i64, align 8
  %cur_dst_file_ofs = alloca i64, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %new_central_header = alloca [46 x i8], align 16
  %orig_central_dir_size = alloca i64, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pBuf = alloca i8*, align 8
  %pSrc_central_header = alloca i8*, align 8
  %src_file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %src_filename_len = alloca i32, align 4
  %src_comment_len = alloca i32, align 4
  %src_ext_len = alloca i32, align 4
  %local_header_filename_size = alloca i32, align 4
  %local_header_extra_len = alloca i32, align 4
  %local_header_comp_size = alloca i64, align 8
  %local_header_uncomp_size = alloca i64, align 8
  %found_zip64_ext_data_in_ldir = alloca i32, align 4
  %file_data_array = alloca %struct.mz_zip_array, align 8
  %pExtra_data = alloca i8*, align 8
  %extra_size_remaining = alloca i32, align 4
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  %field_total_size = alloca i32, align 4
  %pSrc_field_data = alloca i8*, align 8
  %approx_new_archive_size = alloca i64, align 8
  %has_id = alloca i32, align 4
  %pSrc_descriptor = alloca i32*, align 8
  %src_crc32 = alloca i32, align 4
  %src_comp_size = alloca i64, align 8
  %src_uncomp_size = alloca i64, align 8
  %pSrc_ext = alloca i8*, align 8
  %new_ext_block = alloca %struct.mz_zip_array, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %pSource_zip, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  store i32 %src_file_index, i32* %src_file_index.addr, align 4
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pLocal_header, align 8
  store i32 0, i32* %found_zip64_ext_data_in_ldir, align 4
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 3
  %5 = load i32, i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %5, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false2
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 11
  %7 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool4 = icmp ne i64 (i8*, i64, i8*, i64)* %7, null
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false2, %lor.lhs.false, %entry
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %8, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %9, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %10 = load i32, i32* %err_num.addr.i, align 4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 5
  store i32 %10, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false3
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 15
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState5, align 8
  store %struct.mz_zip_internal_state_tag* %13, %struct.mz_zip_internal_state_tag** %pState, align 8
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pState6 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 15
  %15 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState6, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %15, i32 0, i32 4
  %16 = load i32, i32* %m_zip64, align 4
  %tobool7 = icmp ne i32 %16, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.end
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState8 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 15
  %18 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState8, align 8
  %m_zip649 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %18, i32 0, i32 4
  %19 = load i32, i32* %m_zip649, align 4
  %tobool10 = icmp ne i32 %19, 0
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %land.lhs.true
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %20, %struct.mz_zip_archive** %pZip.addr.i462, align 8
  store i32 24, i32* %err_num.addr.i463, align 4
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i462, align 8
  %tobool.i464 = icmp ne %struct.mz_zip_archive* %21, null
  br i1 %tobool.i464, label %if.then.i466, label %mz_zip_set_error.exit468

if.then.i466:                                     ; preds = %if.then11
  %22 = load i32, i32* %err_num.addr.i463, align 4
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i462, align 8
  %m_last_error.i465 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 5
  store i32 %22, i32* %m_last_error.i465, align 4
  br label %mz_zip_set_error.exit468

mz_zip_set_error.exit468:                         ; preds = %if.then11, %if.then.i466
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %land.lhs.true, %if.end
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %25 = load i32, i32* %src_file_index.addr, align 4
  store %struct.mz_zip_archive* %24, %struct.mz_zip_archive** %pZip.addr.i479, align 8
  store i32 %25, i32* %file_index.addr.i, align 4
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i479, align 8
  %tobool.i480 = icmp ne %struct.mz_zip_archive* %26, null
  br i1 %tobool.i480, label %lor.lhs.false.i, label %if.then.i482

lor.lhs.false.i:                                  ; preds = %if.end13
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i479, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %27, i32 0, i32 15
  %28 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %28, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i482

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %29 = load i32, i32* %file_index.addr.i, align 4
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i479, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 2
  %31 = load i32, i32* %m_total_files.i, align 8
  %cmp.i481 = icmp uge i32 %29, %31
  br i1 %cmp.i481, label %if.then.i482, label %if.end.i485

if.then.i482:                                     ; preds = %lor.lhs.false2.i, %lor.lhs.false.i, %if.end13
  store i8* null, i8** %retval.i478, align 8
  br label %mz_zip_get_cdh.exit

if.end.i485:                                      ; preds = %lor.lhs.false2.i
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i479, align 8
  %m_pState3.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 15
  %33 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %33, i32 0, i32 0
  %m_p.i483 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %34 = load i8*, i8** %m_p.i483, align 8
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i479, align 8
  %m_pState4.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 15
  %36 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %36, i32 0, i32 1
  %m_p5.i484 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %37 = load i8*, i8** %m_p5.i484, align 8
  %38 = bitcast i8* %37 to i32*
  %39 = load i32, i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %39 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %38, i64 %idxprom.i
  %40 = load i32, i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %40 to i64
  %arrayidx7.i = getelementptr inbounds i8, i8* %34, i64 %idxprom6.i
  store i8* %arrayidx7.i, i8** %retval.i478, align 8
  br label %mz_zip_get_cdh.exit

mz_zip_get_cdh.exit:                              ; preds = %if.then.i482, %if.end.i485
  %41 = load i8*, i8** %retval.i478, align 8
  store i8* %41, i8** %pSrc_central_header, align 8
  %cmp15 = icmp eq i8* null, %41
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %mz_zip_get_cdh.exit
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %42, %struct.mz_zip_archive** %pZip.addr.i486, align 8
  store i32 24, i32* %err_num.addr.i487, align 4
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i486, align 8
  %tobool.i488 = icmp ne %struct.mz_zip_archive* %43, null
  br i1 %tobool.i488, label %if.then.i490, label %mz_zip_set_error.exit492

if.then.i490:                                     ; preds = %if.then16
  %44 = load i32, i32* %err_num.addr.i487, align 4
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i486, align 8
  %m_last_error.i489 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %45, i32 0, i32 5
  store i32 %44, i32* %m_last_error.i489, align 4
  br label %mz_zip_set_error.exit492

mz_zip_set_error.exit492:                         ; preds = %if.then16, %if.then.i490
  store i32 0, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %mz_zip_get_cdh.exit
  %46 = load i8*, i8** %pSrc_central_header, align 8
  %add.ptr = getelementptr inbounds i8, i8* %46, i64 0
  %47 = bitcast i8* %add.ptr to i32*
  %48 = load i32, i32* %47, align 4
  %cmp19 = icmp ne i32 %48, 33639248
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end18
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %49, %struct.mz_zip_archive** %pZip.addr.i515, align 8
  store i32 9, i32* %err_num.addr.i516, align 4
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i515, align 8
  %tobool.i517 = icmp ne %struct.mz_zip_archive* %50, null
  br i1 %tobool.i517, label %if.then.i519, label %mz_zip_set_error.exit521

if.then.i519:                                     ; preds = %if.then20
  %51 = load i32, i32* %err_num.addr.i516, align 4
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i515, align 8
  %m_last_error.i518 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %52, i32 0, i32 5
  store i32 %51, i32* %m_last_error.i518, align 4
  br label %mz_zip_set_error.exit521

mz_zip_set_error.exit521:                         ; preds = %if.then20, %if.then.i519
  store i32 0, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end18
  %53 = load i8*, i8** %pSrc_central_header, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %53, i64 28
  %54 = bitcast i8* %add.ptr23 to i16*
  %55 = load i16, i16* %54, align 2
  %conv = zext i16 %55 to i32
  store i32 %conv, i32* %src_filename_len, align 4
  %56 = load i8*, i8** %pSrc_central_header, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %56, i64 32
  %57 = bitcast i8* %add.ptr24 to i16*
  %58 = load i16, i16* %57, align 2
  %conv25 = zext i16 %58 to i32
  store i32 %conv25, i32* %src_comment_len, align 4
  %59 = load i8*, i8** %pSrc_central_header, align 8
  %add.ptr26 = getelementptr inbounds i8, i8* %59, i64 30
  %60 = bitcast i8* %add.ptr26 to i16*
  %61 = load i16, i16* %60, align 2
  %conv27 = zext i16 %61 to i32
  store i32 %conv27, i32* %src_ext_len, align 4
  %62 = load i32, i32* %src_filename_len, align 4
  %63 = load i32, i32* %src_ext_len, align 4
  %add = add i32 %62, %63
  %64 = load i32, i32* %src_comment_len, align 4
  %add28 = add i32 %add, %64
  store i32 %add28, i32* %src_central_dir_following_data_size, align 4
  %65 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %65, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %66 = load i64, i64* %m_size, align 8
  %add29 = add i64 %66, 46
  %67 = load i32, i32* %src_central_dir_following_data_size, align 4
  %conv30 = zext i32 %67 to i64
  %add31 = add i64 %add29, %conv30
  %add32 = add i64 %add31, 32
  %cmp33 = icmp uge i64 %add32, 4294967295
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end22
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %68, %struct.mz_zip_archive** %pZip.addr.i544, align 8
  store i32 15, i32* %err_num.addr.i545, align 4
  %69 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i544, align 8
  %tobool.i546 = icmp ne %struct.mz_zip_archive* %69, null
  br i1 %tobool.i546, label %if.then.i548, label %mz_zip_set_error.exit550

if.then.i548:                                     ; preds = %if.then35
  %70 = load i32, i32* %err_num.addr.i545, align 4
  %71 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i544, align 8
  %m_last_error.i547 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %71, i32 0, i32 5
  store i32 %70, i32* %m_last_error.i547, align 4
  br label %mz_zip_set_error.exit550

mz_zip_set_error.exit550:                         ; preds = %if.then35, %if.then.i548
  store i32 0, i32* %retval, align 4
  br label %return

if.end37:                                         ; preds = %if.end22
  %72 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call38 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive* %72)
  store i32 %call38, i32* %num_alignment_padding_bytes, align 4
  %73 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6439 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %73, i32 0, i32 4
  %74 = load i32, i32* %m_zip6439, align 4
  %tobool40 = icmp ne i32 %74, 0
  br i1 %tobool40, label %if.else, label %if.then41

if.then41:                                        ; preds = %if.end37
  %75 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %75, i32 0, i32 2
  %76 = load i32, i32* %m_total_files, align 8
  %cmp42 = icmp eq i32 %76, 65535
  br i1 %cmp42, label %if.then44, label %if.end46

if.then44:                                        ; preds = %if.then41
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %77, %struct.mz_zip_archive** %pZip.addr.i595, align 8
  store i32 2, i32* %err_num.addr.i596, align 4
  %78 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i595, align 8
  %tobool.i597 = icmp ne %struct.mz_zip_archive* %78, null
  br i1 %tobool.i597, label %if.then.i599, label %mz_zip_set_error.exit601

if.then.i599:                                     ; preds = %if.then44
  %79 = load i32, i32* %err_num.addr.i596, align 4
  %80 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i595, align 8
  %m_last_error.i598 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %80, i32 0, i32 5
  store i32 %79, i32* %m_last_error.i598, align 4
  br label %mz_zip_set_error.exit601

mz_zip_set_error.exit601:                         ; preds = %if.then44, %if.then.i599
  store i32 0, i32* %retval, align 4
  br label %return

if.end46:                                         ; preds = %if.then41
  br label %if.end53

if.else:                                          ; preds = %if.end37
  %81 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files47 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %81, i32 0, i32 2
  %82 = load i32, i32* %m_total_files47, align 8
  %cmp48 = icmp eq i32 %82, -1
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %if.else
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %83, %struct.mz_zip_archive** %pZip.addr.i602, align 8
  store i32 2, i32* %err_num.addr.i603, align 4
  %84 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i602, align 8
  %tobool.i604 = icmp ne %struct.mz_zip_archive* %84, null
  br i1 %tobool.i604, label %if.then.i606, label %mz_zip_set_error.exit608

if.then.i606:                                     ; preds = %if.then50
  %85 = load i32, i32* %err_num.addr.i603, align 4
  %86 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i602, align 8
  %m_last_error.i605 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %86, i32 0, i32 5
  store i32 %85, i32* %m_last_error.i605, align 4
  br label %mz_zip_set_error.exit608

mz_zip_set_error.exit608:                         ; preds = %if.then50, %if.then.i606
  store i32 0, i32* %retval, align 4
  br label %return

if.end52:                                         ; preds = %if.else
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.end46
  %87 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %88 = load i32, i32* %src_file_index.addr, align 4
  %89 = load i8*, i8** %pSrc_central_header, align 8
  %call54 = call i32 @mz_zip_file_stat_internal(%struct.mz_zip_archive* %87, i32 %88, i8* %89, %struct.mz_zip_archive_file_stat* %src_file_stat, i32* null)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end57, label %if.then56

if.then56:                                        ; preds = %if.end53
  store i32 0, i32* %retval, align 4
  br label %return

if.end57:                                         ; preds = %if.end53
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 12
  %90 = load i64, i64* %m_local_header_ofs, align 8
  store i64 %90, i64* %cur_src_file_ofs, align 8
  %91 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %91, i32 0, i32 0
  %92 = load i64, i64* %m_archive_size, align 8
  store i64 %92, i64* %cur_dst_file_ofs, align 8
  %93 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pRead58 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %93, i32 0, i32 11
  %94 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead58, align 8
  %95 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %95, i32 0, i32 14
  %96 = load i8*, i8** %m_pIO_opaque, align 8
  %97 = load i64, i64* %cur_src_file_ofs, align 8
  %98 = load i8*, i8** %pLocal_header, align 8
  %call59 = call i64 %94(i8* %96, i64 %97, i8* %98, i64 30)
  %cmp60 = icmp ne i64 %call59, 30
  br i1 %cmp60, label %if.then62, label %if.end64

if.then62:                                        ; preds = %if.end57
  %99 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %99, %struct.mz_zip_archive** %pZip.addr.i660, align 8
  store i32 20, i32* %err_num.addr.i661, align 4
  %100 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i660, align 8
  %tobool.i662 = icmp ne %struct.mz_zip_archive* %100, null
  br i1 %tobool.i662, label %if.then.i664, label %mz_zip_set_error.exit666

if.then.i664:                                     ; preds = %if.then62
  %101 = load i32, i32* %err_num.addr.i661, align 4
  %102 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i660, align 8
  %m_last_error.i663 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %102, i32 0, i32 5
  store i32 %101, i32* %m_last_error.i663, align 4
  br label %mz_zip_set_error.exit666

mz_zip_set_error.exit666:                         ; preds = %if.then62, %if.then.i664
  store i32 0, i32* %retval, align 4
  br label %return

if.end64:                                         ; preds = %if.end57
  %103 = load i8*, i8** %pLocal_header, align 8
  %104 = bitcast i8* %103 to i32*
  %105 = load i32, i32* %104, align 4
  %cmp65 = icmp ne i32 %105, 67324752
  br i1 %cmp65, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.end64
  %106 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %106, %struct.mz_zip_archive** %pZip.addr.i667, align 8
  store i32 9, i32* %err_num.addr.i668, align 4
  %107 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i667, align 8
  %tobool.i669 = icmp ne %struct.mz_zip_archive* %107, null
  br i1 %tobool.i669, label %if.then.i671, label %mz_zip_set_error.exit673

if.then.i671:                                     ; preds = %if.then67
  %108 = load i32, i32* %err_num.addr.i668, align 4
  %109 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i667, align 8
  %m_last_error.i670 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %109, i32 0, i32 5
  store i32 %108, i32* %m_last_error.i670, align 4
  br label %mz_zip_set_error.exit673

mz_zip_set_error.exit673:                         ; preds = %if.then67, %if.then.i671
  store i32 0, i32* %retval, align 4
  br label %return

if.end69:                                         ; preds = %if.end64
  %110 = load i64, i64* %cur_src_file_ofs, align 8
  %add70 = add i64 %110, 30
  store i64 %add70, i64* %cur_src_file_ofs, align 8
  %111 = load i8*, i8** %pLocal_header, align 8
  %add.ptr71 = getelementptr inbounds i8, i8* %111, i64 26
  %112 = bitcast i8* %add.ptr71 to i16*
  %113 = load i16, i16* %112, align 2
  %conv72 = zext i16 %113 to i32
  store i32 %conv72, i32* %local_header_filename_size, align 4
  %114 = load i8*, i8** %pLocal_header, align 8
  %add.ptr73 = getelementptr inbounds i8, i8* %114, i64 28
  %115 = bitcast i8* %add.ptr73 to i16*
  %116 = load i16, i16* %115, align 2
  %conv74 = zext i16 %116 to i32
  store i32 %conv74, i32* %local_header_extra_len, align 4
  %117 = load i8*, i8** %pLocal_header, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %117, i64 18
  %118 = bitcast i8* %add.ptr75 to i32*
  %119 = load i32, i32* %118, align 4
  %conv76 = zext i32 %119 to i64
  store i64 %conv76, i64* %local_header_comp_size, align 8
  %120 = load i8*, i8** %pLocal_header, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %120, i64 22
  %121 = bitcast i8* %add.ptr77 to i32*
  %122 = load i32, i32* %121, align 4
  %conv78 = zext i32 %122 to i64
  store i64 %conv78, i64* %local_header_uncomp_size, align 8
  %123 = load i32, i32* %local_header_filename_size, align 4
  %124 = load i32, i32* %local_header_extra_len, align 4
  %add79 = add i32 %123, %124
  %conv80 = zext i32 %add79 to i64
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 8
  %125 = load i64, i64* %m_comp_size, align 8
  %add81 = add i64 %conv80, %125
  store i64 %add81, i64* %src_archive_bytes_remaining, align 8
  %126 = load i32, i32* %local_header_extra_len, align 4
  %tobool82 = icmp ne i32 %126, 0
  br i1 %tobool82, label %land.lhs.true83, label %if.end151

land.lhs.true83:                                  ; preds = %if.end69
  %127 = load i64, i64* %local_header_comp_size, align 8
  %cmp84 = icmp eq i64 %127, 4294967295
  br i1 %cmp84, label %if.then89, label %lor.lhs.false86

lor.lhs.false86:                                  ; preds = %land.lhs.true83
  %128 = load i64, i64* %local_header_uncomp_size, align 8
  %cmp87 = icmp eq i64 %128, 4294967295
  br i1 %cmp87, label %if.then89, label %if.end151

if.then89:                                        ; preds = %lor.lhs.false86, %land.lhs.true83
  %129 = load i32, i32* %local_header_extra_len, align 4
  store i32 %129, i32* %extra_size_remaining, align 4
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i694, align 8
  store i32 1, i32* %element_size.addr.i, align 4
  %130 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i694, align 8
  %131 = bitcast %struct.mz_zip_array* %130 to i8*
  %132 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i694, align 8
  %133 = bitcast %struct.mz_zip_array* %132 to i8*
  %134 = call i64 @llvm.objectsize.i64.p0i8(i8* %133, i1 false) #10
  %call.i695 = call i8* @__memset_chk(i8* %131, i32 0, i64 32, i64 %134) #10
  %135 = load i32, i32* %element_size.addr.i, align 4
  %136 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i694, align 8
  %m_element_size.i696 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %136, i32 0, i32 3
  store i32 %135, i32* %m_element_size.i696, align 8
  %137 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %138 = load i32, i32* %local_header_extra_len, align 4
  %conv90 = zext i32 %138 to i64
  store %struct.mz_zip_archive* %137, %struct.mz_zip_archive** %pZip.addr.i698, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i699, align 8
  store i64 %conv90, i64* %new_size.addr.i700, align 8
  store i32 0, i32* %growing.addr.i701, align 4
  %139 = load i64, i64* %new_size.addr.i700, align 8
  %140 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i699, align 8
  %m_capacity.i702 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %140, i32 0, i32 2
  %141 = load i64, i64* %m_capacity.i702, align 8
  %cmp.i703 = icmp ugt i64 %139, %141
  br i1 %cmp.i703, label %if.then.i706, label %if.end2.i710

if.then.i706:                                     ; preds = %if.then89
  %142 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i698, align 8
  %143 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i699, align 8
  %144 = load i64, i64* %new_size.addr.i700, align 8
  %145 = load i32, i32* %growing.addr.i701, align 4
  %call.i704 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %142, %struct.mz_zip_array* %143, i64 %144, i32 %145) #10
  %tobool.i705 = icmp ne i32 %call.i704, 0
  br i1 %tobool.i705, label %if.end.i708, label %if.then1.i707

if.then1.i707:                                    ; preds = %if.then.i706
  store i32 0, i32* %retval.i697, align 4
  br label %mz_zip_array_resize.exit711

if.end.i708:                                      ; preds = %if.then.i706
  br label %if.end2.i710

if.end2.i710:                                     ; preds = %if.end.i708, %if.then89
  %146 = load i64, i64* %new_size.addr.i700, align 8
  %147 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i699, align 8
  %m_size.i709 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %147, i32 0, i32 1
  store i64 %146, i64* %m_size.i709, align 8
  store i32 1, i32* %retval.i697, align 4
  br label %mz_zip_array_resize.exit711

mz_zip_array_resize.exit711:                      ; preds = %if.then1.i707, %if.end2.i710
  %148 = load i32, i32* %retval.i697, align 4
  %tobool92 = icmp ne i32 %148, 0
  br i1 %tobool92, label %if.end95, label %if.then93

if.then93:                                        ; preds = %mz_zip_array_resize.exit711
  %149 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %149, %struct.mz_zip_archive** %pZip.addr.i712, align 8
  store i32 16, i32* %err_num.addr.i713, align 4
  %150 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i712, align 8
  %tobool.i714 = icmp ne %struct.mz_zip_archive* %150, null
  br i1 %tobool.i714, label %if.then.i716, label %mz_zip_set_error.exit718

if.then.i716:                                     ; preds = %if.then93
  %151 = load i32, i32* %err_num.addr.i713, align 4
  %152 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i712, align 8
  %m_last_error.i715 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %152, i32 0, i32 5
  store i32 %151, i32* %m_last_error.i715, align 4
  br label %mz_zip_set_error.exit718

mz_zip_set_error.exit718:                         ; preds = %if.then93, %if.then.i716
  store i32 0, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %mz_zip_array_resize.exit711
  %153 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pRead96 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %153, i32 0, i32 11
  %154 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead96, align 8
  %155 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pIO_opaque97 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %155, i32 0, i32 14
  %156 = load i8*, i8** %m_pIO_opaque97, align 8
  %m_local_header_ofs98 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 12
  %157 = load i64, i64* %m_local_header_ofs98, align 8
  %add99 = add i64 %157, 30
  %158 = load i32, i32* %local_header_filename_size, align 4
  %conv100 = zext i32 %158 to i64
  %add101 = add i64 %add99, %conv100
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %159 = load i8*, i8** %m_p, align 8
  %160 = load i32, i32* %local_header_extra_len, align 4
  %conv102 = zext i32 %160 to i64
  %call103 = call i64 %154(i8* %156, i64 %add101, i8* %159, i64 %conv102)
  %161 = load i32, i32* %local_header_extra_len, align 4
  %conv104 = zext i32 %161 to i64
  %cmp105 = icmp ne i64 %call103, %conv104
  br i1 %cmp105, label %if.then107, label %if.end109

if.then107:                                       ; preds = %if.end95
  %162 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %162, %struct.mz_zip_archive** %pZip.addr.i719, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i720, align 8
  %163 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i719, align 8
  %m_pFree.i721 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %163, i32 0, i32 8
  %164 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i721, align 8
  %165 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i719, align 8
  %m_pAlloc_opaque.i722 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %165, i32 0, i32 10
  %166 = load i8*, i8** %m_pAlloc_opaque.i722, align 8
  %167 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i720, align 8
  %m_p.i723 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %167, i32 0, i32 0
  %168 = load i8*, i8** %m_p.i723, align 8
  call void %164(i8* %166, i8* %168) #10
  %169 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i720, align 8
  %170 = bitcast %struct.mz_zip_array* %169 to i8*
  %171 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i720, align 8
  %172 = bitcast %struct.mz_zip_array* %171 to i8*
  %173 = call i64 @llvm.objectsize.i64.p0i8(i8* %172, i1 false) #10
  %call.i724 = call i8* @__memset_chk(i8* %170, i32 0, i64 32, i64 %173) #10
  %174 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %174, %struct.mz_zip_archive** %pZip.addr.i725, align 8
  store i32 20, i32* %err_num.addr.i726, align 4
  %175 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i725, align 8
  %tobool.i727 = icmp ne %struct.mz_zip_archive* %175, null
  br i1 %tobool.i727, label %if.then.i729, label %mz_zip_set_error.exit731

if.then.i729:                                     ; preds = %if.then107
  %176 = load i32, i32* %err_num.addr.i726, align 4
  %177 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i725, align 8
  %m_last_error.i728 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %177, i32 0, i32 5
  store i32 %176, i32* %m_last_error.i728, align 4
  br label %mz_zip_set_error.exit731

mz_zip_set_error.exit731:                         ; preds = %if.then107, %if.then.i729
  store i32 0, i32* %retval, align 4
  br label %return

if.end109:                                        ; preds = %if.end95
  %m_p110 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %178 = load i8*, i8** %m_p110, align 8
  store i8* %178, i8** %pExtra_data, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end109
  %179 = load i32, i32* %extra_size_remaining, align 4
  %conv111 = zext i32 %179 to i64
  %cmp112 = icmp ult i64 %conv111, 4
  br i1 %cmp112, label %if.then114, label %if.end116

if.then114:                                       ; preds = %do.body
  %180 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %180, %struct.mz_zip_archive** %pZip.addr.i732, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i733, align 8
  %181 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i732, align 8
  %m_pFree.i734 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %181, i32 0, i32 8
  %182 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i734, align 8
  %183 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i732, align 8
  %m_pAlloc_opaque.i735 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %183, i32 0, i32 10
  %184 = load i8*, i8** %m_pAlloc_opaque.i735, align 8
  %185 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i733, align 8
  %m_p.i736 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %185, i32 0, i32 0
  %186 = load i8*, i8** %m_p.i736, align 8
  call void %182(i8* %184, i8* %186) #10
  %187 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i733, align 8
  %188 = bitcast %struct.mz_zip_array* %187 to i8*
  %189 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i733, align 8
  %190 = bitcast %struct.mz_zip_array* %189 to i8*
  %191 = call i64 @llvm.objectsize.i64.p0i8(i8* %190, i1 false) #10
  %call.i737 = call i8* @__memset_chk(i8* %188, i32 0, i64 32, i64 %191) #10
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %192, %struct.mz_zip_archive** %pZip.addr.i738, align 8
  store i32 9, i32* %err_num.addr.i739, align 4
  %193 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i738, align 8
  %tobool.i740 = icmp ne %struct.mz_zip_archive* %193, null
  br i1 %tobool.i740, label %if.then.i742, label %mz_zip_set_error.exit744

if.then.i742:                                     ; preds = %if.then114
  %194 = load i32, i32* %err_num.addr.i739, align 4
  %195 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i738, align 8
  %m_last_error.i741 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %195, i32 0, i32 5
  store i32 %194, i32* %m_last_error.i741, align 4
  br label %mz_zip_set_error.exit744

mz_zip_set_error.exit744:                         ; preds = %if.then114, %if.then.i742
  store i32 0, i32* %retval, align 4
  br label %return

if.end116:                                        ; preds = %do.body
  %196 = load i8*, i8** %pExtra_data, align 8
  %197 = bitcast i8* %196 to i16*
  %198 = load i16, i16* %197, align 2
  %conv117 = zext i16 %198 to i32
  store i32 %conv117, i32* %field_id, align 4
  %199 = load i8*, i8** %pExtra_data, align 8
  %add.ptr118 = getelementptr inbounds i8, i8* %199, i64 2
  %200 = bitcast i8* %add.ptr118 to i16*
  %201 = load i16, i16* %200, align 2
  %conv119 = zext i16 %201 to i32
  store i32 %conv119, i32* %field_data_size, align 4
  %202 = load i32, i32* %field_data_size, align 4
  %conv120 = zext i32 %202 to i64
  %add121 = add i64 %conv120, 4
  %conv122 = trunc i64 %add121 to i32
  store i32 %conv122, i32* %field_total_size, align 4
  %203 = load i32, i32* %field_total_size, align 4
  %204 = load i32, i32* %extra_size_remaining, align 4
  %cmp123 = icmp ugt i32 %203, %204
  br i1 %cmp123, label %if.then125, label %if.end127

if.then125:                                       ; preds = %if.end116
  %205 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %205, %struct.mz_zip_archive** %pZip.addr.i745, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i746, align 8
  %206 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i745, align 8
  %m_pFree.i747 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %206, i32 0, i32 8
  %207 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i747, align 8
  %208 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i745, align 8
  %m_pAlloc_opaque.i748 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %208, i32 0, i32 10
  %209 = load i8*, i8** %m_pAlloc_opaque.i748, align 8
  %210 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i746, align 8
  %m_p.i749 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %210, i32 0, i32 0
  %211 = load i8*, i8** %m_p.i749, align 8
  call void %207(i8* %209, i8* %211) #10
  %212 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i746, align 8
  %213 = bitcast %struct.mz_zip_array* %212 to i8*
  %214 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i746, align 8
  %215 = bitcast %struct.mz_zip_array* %214 to i8*
  %216 = call i64 @llvm.objectsize.i64.p0i8(i8* %215, i1 false) #10
  %call.i750 = call i8* @__memset_chk(i8* %213, i32 0, i64 32, i64 %216) #10
  %217 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %217, %struct.mz_zip_archive** %pZip.addr.i751, align 8
  store i32 9, i32* %err_num.addr.i752, align 4
  %218 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i751, align 8
  %tobool.i753 = icmp ne %struct.mz_zip_archive* %218, null
  br i1 %tobool.i753, label %if.then.i755, label %mz_zip_set_error.exit757

if.then.i755:                                     ; preds = %if.then125
  %219 = load i32, i32* %err_num.addr.i752, align 4
  %220 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i751, align 8
  %m_last_error.i754 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %220, i32 0, i32 5
  store i32 %219, i32* %m_last_error.i754, align 4
  br label %mz_zip_set_error.exit757

mz_zip_set_error.exit757:                         ; preds = %if.then125, %if.then.i755
  store i32 0, i32* %retval, align 4
  br label %return

if.end127:                                        ; preds = %if.end116
  %221 = load i32, i32* %field_id, align 4
  %cmp128 = icmp eq i32 %221, 1
  br i1 %cmp128, label %if.then130, label %if.end148

if.then130:                                       ; preds = %if.end127
  %222 = load i8*, i8** %pExtra_data, align 8
  %add.ptr131 = getelementptr inbounds i8, i8* %222, i64 4
  store i8* %add.ptr131, i8** %pSrc_field_data, align 8
  %223 = load i32, i32* %field_data_size, align 4
  %conv132 = zext i32 %223 to i64
  %cmp133 = icmp ult i64 %conv132, 16
  br i1 %cmp133, label %if.then135, label %if.end137

if.then135:                                       ; preds = %if.then130
  %224 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %224, %struct.mz_zip_archive** %pZip.addr.i758, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i759, align 8
  %225 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i758, align 8
  %m_pFree.i760 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %225, i32 0, i32 8
  %226 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i760, align 8
  %227 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i758, align 8
  %m_pAlloc_opaque.i761 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %227, i32 0, i32 10
  %228 = load i8*, i8** %m_pAlloc_opaque.i761, align 8
  %229 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i759, align 8
  %m_p.i762 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %229, i32 0, i32 0
  %230 = load i8*, i8** %m_p.i762, align 8
  call void %226(i8* %228, i8* %230) #10
  %231 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i759, align 8
  %232 = bitcast %struct.mz_zip_array* %231 to i8*
  %233 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i759, align 8
  %234 = bitcast %struct.mz_zip_array* %233 to i8*
  %235 = call i64 @llvm.objectsize.i64.p0i8(i8* %234, i1 false) #10
  %call.i763 = call i8* @__memset_chk(i8* %232, i32 0, i64 32, i64 %235) #10
  %236 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %236, %struct.mz_zip_archive** %pZip.addr.i764, align 8
  store i32 9, i32* %err_num.addr.i765, align 4
  %237 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i764, align 8
  %tobool.i766 = icmp ne %struct.mz_zip_archive* %237, null
  br i1 %tobool.i766, label %if.then.i768, label %mz_zip_set_error.exit770

if.then.i768:                                     ; preds = %if.then135
  %238 = load i32, i32* %err_num.addr.i765, align 4
  %239 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i764, align 8
  %m_last_error.i767 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %239, i32 0, i32 5
  store i32 %238, i32* %m_last_error.i767, align 4
  br label %mz_zip_set_error.exit770

mz_zip_set_error.exit770:                         ; preds = %if.then135, %if.then.i768
  store i32 0, i32* %retval, align 4
  br label %return

if.end137:                                        ; preds = %if.then130
  %240 = load i8*, i8** %pSrc_field_data, align 8
  %241 = bitcast i8* %240 to i32*
  %242 = load i32, i32* %241, align 4
  %conv138 = zext i32 %242 to i64
  %243 = load i8*, i8** %pSrc_field_data, align 8
  %add.ptr139 = getelementptr inbounds i8, i8* %243, i64 4
  %244 = bitcast i8* %add.ptr139 to i32*
  %245 = load i32, i32* %244, align 4
  %conv140 = zext i32 %245 to i64
  %shl = shl i64 %conv140, 32
  %or = or i64 %conv138, %shl
  store i64 %or, i64* %local_header_uncomp_size, align 8
  %246 = load i8*, i8** %pSrc_field_data, align 8
  %add.ptr141 = getelementptr inbounds i8, i8* %246, i64 8
  %247 = bitcast i8* %add.ptr141 to i32*
  %248 = load i32, i32* %247, align 4
  %conv142 = zext i32 %248 to i64
  %249 = load i8*, i8** %pSrc_field_data, align 8
  %add.ptr143 = getelementptr inbounds i8, i8* %249, i64 8
  %add.ptr144 = getelementptr inbounds i8, i8* %add.ptr143, i64 4
  %250 = bitcast i8* %add.ptr144 to i32*
  %251 = load i32, i32* %250, align 4
  %conv145 = zext i32 %251 to i64
  %shl146 = shl i64 %conv145, 32
  %or147 = or i64 %conv142, %shl146
  store i64 %or147, i64* %local_header_comp_size, align 8
  store i32 1, i32* %found_zip64_ext_data_in_ldir, align 4
  br label %do.end

if.end148:                                        ; preds = %if.end127
  %252 = load i32, i32* %field_total_size, align 4
  %253 = load i8*, i8** %pExtra_data, align 8
  %idx.ext = zext i32 %252 to i64
  %add.ptr149 = getelementptr inbounds i8, i8* %253, i64 %idx.ext
  store i8* %add.ptr149, i8** %pExtra_data, align 8
  %254 = load i32, i32* %field_total_size, align 4
  %255 = load i32, i32* %extra_size_remaining, align 4
  %sub = sub i32 %255, %254
  store i32 %sub, i32* %extra_size_remaining, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end148
  %256 = load i32, i32* %extra_size_remaining, align 4
  %tobool150 = icmp ne i32 %256, 0
  br i1 %tobool150, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.end137
  %257 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %257, %struct.mz_zip_archive** %pZip.addr.i771, align 8
  store %struct.mz_zip_array* %file_data_array, %struct.mz_zip_array** %pArray.addr.i772, align 8
  %258 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i771, align 8
  %m_pFree.i773 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %258, i32 0, i32 8
  %259 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i773, align 8
  %260 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i771, align 8
  %m_pAlloc_opaque.i774 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %260, i32 0, i32 10
  %261 = load i8*, i8** %m_pAlloc_opaque.i774, align 8
  %262 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i772, align 8
  %m_p.i775 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %262, i32 0, i32 0
  %263 = load i8*, i8** %m_p.i775, align 8
  call void %259(i8* %261, i8* %263) #10
  %264 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i772, align 8
  %265 = bitcast %struct.mz_zip_array* %264 to i8*
  %266 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i772, align 8
  %267 = bitcast %struct.mz_zip_array* %266 to i8*
  %268 = call i64 @llvm.objectsize.i64.p0i8(i8* %267, i1 false) #10
  %call.i776 = call i8* @__memset_chk(i8* %265, i32 0, i64 32, i64 %268) #10
  br label %if.end151

if.end151:                                        ; preds = %do.end, %lor.lhs.false86, %if.end69
  %269 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64152 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %269, i32 0, i32 4
  %270 = load i32, i32* %m_zip64152, align 4
  %tobool153 = icmp ne i32 %270, 0
  br i1 %tobool153, label %if.end173, label %if.then154

if.then154:                                       ; preds = %if.end151
  %271 = load i64, i64* %cur_dst_file_ofs, align 8
  %272 = load i32, i32* %num_alignment_padding_bytes, align 4
  %conv155 = zext i32 %272 to i64
  %add156 = add i64 %271, %conv155
  %add157 = add i64 %add156, 30
  %273 = load i64, i64* %src_archive_bytes_remaining, align 8
  %add158 = add i64 %add157, %273
  %add159 = add i64 %add158, 16
  %274 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir160 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %274, i32 0, i32 0
  %m_size161 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir160, i32 0, i32 1
  %275 = load i64, i64* %m_size161, align 8
  %add162 = add i64 %add159, %275
  %add163 = add i64 %add162, 46
  %276 = load i32, i32* %src_central_dir_following_data_size, align 4
  %conv164 = zext i32 %276 to i64
  %add165 = add i64 %add163, %conv164
  %add166 = add i64 %add165, 22
  %add167 = add i64 %add166, 64
  store i64 %add167, i64* %approx_new_archive_size, align 8
  %277 = load i64, i64* %approx_new_archive_size, align 8
  %cmp168 = icmp uge i64 %277, 4294967295
  br i1 %cmp168, label %if.then170, label %if.end172

if.then170:                                       ; preds = %if.then154
  %278 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %278, %struct.mz_zip_archive** %pZip.addr.i777, align 8
  store i32 29, i32* %err_num.addr.i778, align 4
  %279 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i777, align 8
  %tobool.i779 = icmp ne %struct.mz_zip_archive* %279, null
  br i1 %tobool.i779, label %if.then.i781, label %mz_zip_set_error.exit783

if.then.i781:                                     ; preds = %if.then170
  %280 = load i32, i32* %err_num.addr.i778, align 4
  %281 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i777, align 8
  %m_last_error.i780 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %281, i32 0, i32 5
  store i32 %280, i32* %m_last_error.i780, align 4
  br label %mz_zip_set_error.exit783

mz_zip_set_error.exit783:                         ; preds = %if.then170, %if.then.i781
  store i32 0, i32* %retval, align 4
  br label %return

if.end172:                                        ; preds = %if.then154
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %if.end151
  %282 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %283 = load i64, i64* %cur_dst_file_ofs, align 8
  %284 = load i32, i32* %num_alignment_padding_bytes, align 4
  %call174 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive* %282, i64 %283, i32 %284)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end177, label %if.then176

if.then176:                                       ; preds = %if.end173
  store i32 0, i32* %retval, align 4
  br label %return

if.end177:                                        ; preds = %if.end173
  %285 = load i32, i32* %num_alignment_padding_bytes, align 4
  %conv178 = zext i32 %285 to i64
  %286 = load i64, i64* %cur_dst_file_ofs, align 8
  %add179 = add i64 %286, %conv178
  store i64 %add179, i64* %cur_dst_file_ofs, align 8
  %287 = load i64, i64* %cur_dst_file_ofs, align 8
  store i64 %287, i64* %local_dir_header_ofs, align 8
  %288 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %288, i32 0, i32 6
  %289 = load i64, i64* %m_file_offset_alignment, align 8
  %tobool180 = icmp ne i64 %289, 0
  br i1 %tobool180, label %if.then181, label %if.end188

if.then181:                                       ; preds = %if.end177
  %290 = load i64, i64* %local_dir_header_ofs, align 8
  %291 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_file_offset_alignment182 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %291, i32 0, i32 6
  %292 = load i64, i64* %m_file_offset_alignment182, align 8
  %sub183 = sub i64 %292, 1
  %and = and i64 %290, %sub183
  %cmp184 = icmp eq i64 %and, 0
  %lnot = xor i1 %cmp184, true
  %lnot.ext = zext i1 %lnot to i32
  %conv186 = sext i32 %lnot.ext to i64
  %tobool187 = icmp ne i64 %conv186, 0
  br i1 %tobool187, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then181
  call void @__assert_rtn(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__func__.mz_zip_writer_add_from_zip_reader, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 6973, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.22, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then181
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %293
  br label %if.end188

if.end188:                                        ; preds = %cond.end, %if.end177
  %294 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %294, i32 0, i32 12
  %295 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %296 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque189 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %296, i32 0, i32 14
  %297 = load i8*, i8** %m_pIO_opaque189, align 8
  %298 = load i64, i64* %cur_dst_file_ofs, align 8
  %299 = load i8*, i8** %pLocal_header, align 8
  %call190 = call i64 %295(i8* %297, i64 %298, i8* %299, i64 30)
  %cmp191 = icmp ne i64 %call190, 30
  br i1 %cmp191, label %if.then193, label %if.end195

if.then193:                                       ; preds = %if.end188
  %300 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %300, %struct.mz_zip_archive** %pZip.addr.i784, align 8
  store i32 19, i32* %err_num.addr.i785, align 4
  %301 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i784, align 8
  %tobool.i786 = icmp ne %struct.mz_zip_archive* %301, null
  br i1 %tobool.i786, label %if.then.i788, label %mz_zip_set_error.exit790

if.then.i788:                                     ; preds = %if.then193
  %302 = load i32, i32* %err_num.addr.i785, align 4
  %303 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i784, align 8
  %m_last_error.i787 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %303, i32 0, i32 5
  store i32 %302, i32* %m_last_error.i787, align 4
  br label %mz_zip_set_error.exit790

mz_zip_set_error.exit790:                         ; preds = %if.then193, %if.then.i788
  store i32 0, i32* %retval, align 4
  br label %return

if.end195:                                        ; preds = %if.end188
  %304 = load i64, i64* %cur_dst_file_ofs, align 8
  %add196 = add i64 %304, 30
  store i64 %add196, i64* %cur_dst_file_ofs, align 8
  %305 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %305, i32 0, i32 7
  %306 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8
  %307 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %307, i32 0, i32 10
  %308 = load i8*, i8** %m_pAlloc_opaque, align 8
  %309 = load i64, i64* %src_archive_bytes_remaining, align 8
  %cmp197 = icmp ult i64 65536, %309
  br i1 %cmp197, label %cond.true199, label %cond.false200

cond.true199:                                     ; preds = %if.end195
  br label %cond.end201

cond.false200:                                    ; preds = %if.end195
  %310 = load i64, i64* %src_archive_bytes_remaining, align 8
  br label %cond.end201

cond.end201:                                      ; preds = %cond.false200, %cond.true199
  %cond = phi i64 [ 65536, %cond.true199 ], [ %310, %cond.false200 ]
  %cmp202 = icmp ugt i64 32, %cond
  br i1 %cmp202, label %cond.true204, label %cond.false205

cond.true204:                                     ; preds = %cond.end201
  br label %cond.end212

cond.false205:                                    ; preds = %cond.end201
  %311 = load i64, i64* %src_archive_bytes_remaining, align 8
  %cmp206 = icmp ult i64 65536, %311
  br i1 %cmp206, label %cond.true208, label %cond.false209

cond.true208:                                     ; preds = %cond.false205
  br label %cond.end210

cond.false209:                                    ; preds = %cond.false205
  %312 = load i64, i64* %src_archive_bytes_remaining, align 8
  br label %cond.end210

cond.end210:                                      ; preds = %cond.false209, %cond.true208
  %cond211 = phi i64 [ 65536, %cond.true208 ], [ %312, %cond.false209 ]
  br label %cond.end212

cond.end212:                                      ; preds = %cond.end210, %cond.true204
  %cond213 = phi i64 [ 32, %cond.true204 ], [ %cond211, %cond.end210 ]
  %call214 = call i8* %306(i8* %308, i64 1, i64 %cond213)
  store i8* %call214, i8** %pBuf, align 8
  %cmp215 = icmp eq i8* null, %call214
  br i1 %cmp215, label %if.then217, label %if.end219

if.then217:                                       ; preds = %cond.end212
  %313 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %313, %struct.mz_zip_archive** %pZip.addr.i813, align 8
  store i32 16, i32* %err_num.addr.i814, align 4
  %314 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i813, align 8
  %tobool.i815 = icmp ne %struct.mz_zip_archive* %314, null
  br i1 %tobool.i815, label %if.then.i817, label %mz_zip_set_error.exit819

if.then.i817:                                     ; preds = %if.then217
  %315 = load i32, i32* %err_num.addr.i814, align 4
  %316 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i813, align 8
  %m_last_error.i816 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %316, i32 0, i32 5
  store i32 %315, i32* %m_last_error.i816, align 4
  br label %mz_zip_set_error.exit819

mz_zip_set_error.exit819:                         ; preds = %if.then217, %if.then.i817
  store i32 0, i32* %retval, align 4
  br label %return

if.end219:                                        ; preds = %cond.end212
  br label %while.cond

while.cond:                                       ; preds = %if.end252, %if.end219
  %317 = load i64, i64* %src_archive_bytes_remaining, align 8
  %tobool220 = icmp ne i64 %317, 0
  br i1 %tobool220, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %318 = load i64, i64* %src_archive_bytes_remaining, align 8
  %cmp221 = icmp ult i64 65536, %318
  br i1 %cmp221, label %cond.true223, label %cond.false224

cond.true223:                                     ; preds = %while.body
  br label %cond.end225

cond.false224:                                    ; preds = %while.body
  %319 = load i64, i64* %src_archive_bytes_remaining, align 8
  br label %cond.end225

cond.end225:                                      ; preds = %cond.false224, %cond.true223
  %cond226 = phi i64 [ 65536, %cond.true223 ], [ %319, %cond.false224 ]
  %conv227 = trunc i64 %cond226 to i32
  store i32 %conv227, i32* %n, align 4
  %320 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pRead228 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %320, i32 0, i32 11
  %321 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead228, align 8
  %322 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pIO_opaque229 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %322, i32 0, i32 14
  %323 = load i8*, i8** %m_pIO_opaque229, align 8
  %324 = load i64, i64* %cur_src_file_ofs, align 8
  %325 = load i8*, i8** %pBuf, align 8
  %326 = load i32, i32* %n, align 4
  %conv230 = zext i32 %326 to i64
  %call231 = call i64 %321(i8* %323, i64 %324, i8* %325, i64 %conv230)
  %327 = load i32, i32* %n, align 4
  %conv232 = zext i32 %327 to i64
  %cmp233 = icmp ne i64 %call231, %conv232
  br i1 %cmp233, label %if.then235, label %if.end238

if.then235:                                       ; preds = %cond.end225
  %328 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %328, i32 0, i32 8
  %329 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8
  %330 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque236 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %330, i32 0, i32 10
  %331 = load i8*, i8** %m_pAlloc_opaque236, align 8
  %332 = load i8*, i8** %pBuf, align 8
  call void %329(i8* %331, i8* %332)
  %333 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %333, %struct.mz_zip_archive** %pZip.addr.i826, align 8
  store i32 20, i32* %err_num.addr.i827, align 4
  %334 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i826, align 8
  %tobool.i828 = icmp ne %struct.mz_zip_archive* %334, null
  br i1 %tobool.i828, label %if.then.i830, label %mz_zip_set_error.exit832

if.then.i830:                                     ; preds = %if.then235
  %335 = load i32, i32* %err_num.addr.i827, align 4
  %336 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i826, align 8
  %m_last_error.i829 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %336, i32 0, i32 5
  store i32 %335, i32* %m_last_error.i829, align 4
  br label %mz_zip_set_error.exit832

mz_zip_set_error.exit832:                         ; preds = %if.then235, %if.then.i830
  store i32 0, i32* %retval, align 4
  br label %return

if.end238:                                        ; preds = %cond.end225
  %337 = load i32, i32* %n, align 4
  %conv239 = zext i32 %337 to i64
  %338 = load i64, i64* %cur_src_file_ofs, align 8
  %add240 = add i64 %338, %conv239
  store i64 %add240, i64* %cur_src_file_ofs, align 8
  %339 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite241 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %339, i32 0, i32 12
  %340 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite241, align 8
  %341 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque242 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %341, i32 0, i32 14
  %342 = load i8*, i8** %m_pIO_opaque242, align 8
  %343 = load i64, i64* %cur_dst_file_ofs, align 8
  %344 = load i8*, i8** %pBuf, align 8
  %345 = load i32, i32* %n, align 4
  %conv243 = zext i32 %345 to i64
  %call244 = call i64 %340(i8* %342, i64 %343, i8* %344, i64 %conv243)
  %346 = load i32, i32* %n, align 4
  %conv245 = zext i32 %346 to i64
  %cmp246 = icmp ne i64 %call244, %conv245
  br i1 %cmp246, label %if.then248, label %if.end252

if.then248:                                       ; preds = %if.end238
  %347 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree249 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %347, i32 0, i32 8
  %348 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree249, align 8
  %349 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque250 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %349, i32 0, i32 10
  %350 = load i8*, i8** %m_pAlloc_opaque250, align 8
  %351 = load i8*, i8** %pBuf, align 8
  call void %348(i8* %350, i8* %351)
  %352 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %352, %struct.mz_zip_archive** %pZip.addr.i833, align 8
  store i32 19, i32* %err_num.addr.i834, align 4
  %353 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i833, align 8
  %tobool.i835 = icmp ne %struct.mz_zip_archive* %353, null
  br i1 %tobool.i835, label %if.then.i837, label %mz_zip_set_error.exit839

if.then.i837:                                     ; preds = %if.then248
  %354 = load i32, i32* %err_num.addr.i834, align 4
  %355 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i833, align 8
  %m_last_error.i836 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %355, i32 0, i32 5
  store i32 %354, i32* %m_last_error.i836, align 4
  br label %mz_zip_set_error.exit839

mz_zip_set_error.exit839:                         ; preds = %if.then248, %if.then.i837
  store i32 0, i32* %retval, align 4
  br label %return

if.end252:                                        ; preds = %if.end238
  %356 = load i32, i32* %n, align 4
  %conv253 = zext i32 %356 to i64
  %357 = load i64, i64* %cur_dst_file_ofs, align 8
  %add254 = add i64 %357, %conv253
  store i64 %add254, i64* %cur_dst_file_ofs, align 8
  %358 = load i32, i32* %n, align 4
  %conv255 = zext i32 %358 to i64
  %359 = load i64, i64* %src_archive_bytes_remaining, align 8
  %sub256 = sub i64 %359, %conv255
  store i64 %sub256, i64* %src_archive_bytes_remaining, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %360 = load i8*, i8** %pLocal_header, align 8
  %add.ptr257 = getelementptr inbounds i8, i8* %360, i64 6
  %361 = bitcast i8* %add.ptr257 to i16*
  %362 = load i16, i16* %361, align 2
  %conv258 = zext i16 %362 to i32
  store i32 %conv258, i32* %bit_flags, align 4
  %363 = load i32, i32* %bit_flags, align 4
  %and259 = and i32 %363, 8
  %tobool260 = icmp ne i32 %and259, 0
  br i1 %tobool260, label %if.then261, label %if.end334

if.then261:                                       ; preds = %while.end
  %364 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pState262 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %364, i32 0, i32 15
  %365 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState262, align 8
  %m_zip64263 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %365, i32 0, i32 4
  %366 = load i32, i32* %m_zip64263, align 4
  %tobool264 = icmp ne i32 %366, 0
  br i1 %tobool264, label %if.then267, label %lor.lhs.false265

lor.lhs.false265:                                 ; preds = %if.then261
  %367 = load i32, i32* %found_zip64_ext_data_in_ldir, align 4
  %tobool266 = icmp ne i32 %367, 0
  br i1 %tobool266, label %if.then267, label %if.else283

if.then267:                                       ; preds = %lor.lhs.false265, %if.then261
  %368 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pRead268 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %368, i32 0, i32 11
  %369 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead268, align 8
  %370 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pIO_opaque269 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %370, i32 0, i32 14
  %371 = load i8*, i8** %m_pIO_opaque269, align 8
  %372 = load i64, i64* %cur_src_file_ofs, align 8
  %373 = load i8*, i8** %pBuf, align 8
  %call270 = call i64 %369(i8* %371, i64 %372, i8* %373, i64 24)
  %cmp271 = icmp ne i64 %call270, 24
  br i1 %cmp271, label %if.then273, label %if.end277

if.then273:                                       ; preds = %if.then267
  %374 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree274 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %374, i32 0, i32 8
  %375 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree274, align 8
  %376 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque275 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %376, i32 0, i32 10
  %377 = load i8*, i8** %m_pAlloc_opaque275, align 8
  %378 = load i8*, i8** %pBuf, align 8
  call void %375(i8* %377, i8* %378)
  %379 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %379, %struct.mz_zip_archive** %pZip.addr.i884, align 8
  store i32 20, i32* %err_num.addr.i885, align 4
  %380 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i884, align 8
  %tobool.i886 = icmp ne %struct.mz_zip_archive* %380, null
  br i1 %tobool.i886, label %if.then.i888, label %mz_zip_set_error.exit890

if.then.i888:                                     ; preds = %if.then273
  %381 = load i32, i32* %err_num.addr.i885, align 4
  %382 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i884, align 8
  %m_last_error.i887 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %382, i32 0, i32 5
  store i32 %381, i32* %m_last_error.i887, align 4
  br label %mz_zip_set_error.exit890

mz_zip_set_error.exit890:                         ; preds = %if.then273, %if.then.i888
  store i32 0, i32* %retval, align 4
  br label %return

if.end277:                                        ; preds = %if.then267
  %383 = load i8*, i8** %pBuf, align 8
  %384 = bitcast i8* %383 to i32*
  %385 = load i32, i32* %384, align 4
  %cmp278 = icmp eq i32 %385, 134695760
  %cond280 = select i1 %cmp278, i32 6, i32 5
  %conv281 = sext i32 %cond280 to i64
  %mul = mul i64 4, %conv281
  %conv282 = trunc i64 %mul to i32
  store i32 %conv282, i32* %n, align 4
  br label %if.end317

if.else283:                                       ; preds = %lor.lhs.false265
  %386 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pRead284 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %386, i32 0, i32 11
  %387 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead284, align 8
  %388 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8
  %m_pIO_opaque285 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %388, i32 0, i32 14
  %389 = load i8*, i8** %m_pIO_opaque285, align 8
  %390 = load i64, i64* %cur_src_file_ofs, align 8
  %391 = load i8*, i8** %pBuf, align 8
  %call286 = call i64 %387(i8* %389, i64 %390, i8* %391, i64 16)
  %cmp287 = icmp ne i64 %call286, 16
  br i1 %cmp287, label %if.then289, label %if.end293

if.then289:                                       ; preds = %if.else283
  %392 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree290 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %392, i32 0, i32 8
  %393 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree290, align 8
  %394 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque291 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %394, i32 0, i32 10
  %395 = load i8*, i8** %m_pAlloc_opaque291, align 8
  %396 = load i8*, i8** %pBuf, align 8
  call void %393(i8* %395, i8* %396)
  %397 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %397, %struct.mz_zip_archive** %pZip.addr.i891, align 8
  store i32 20, i32* %err_num.addr.i892, align 4
  %398 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i891, align 8
  %tobool.i893 = icmp ne %struct.mz_zip_archive* %398, null
  br i1 %tobool.i893, label %if.then.i895, label %mz_zip_set_error.exit897

if.then.i895:                                     ; preds = %if.then289
  %399 = load i32, i32* %err_num.addr.i892, align 4
  %400 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i891, align 8
  %m_last_error.i894 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %400, i32 0, i32 5
  store i32 %399, i32* %m_last_error.i894, align 4
  br label %mz_zip_set_error.exit897

mz_zip_set_error.exit897:                         ; preds = %if.then289, %if.then.i895
  store i32 0, i32* %retval, align 4
  br label %return

if.end293:                                        ; preds = %if.else283
  %401 = load i8*, i8** %pBuf, align 8
  %402 = bitcast i8* %401 to i32*
  %403 = load i32, i32* %402, align 4
  %cmp294 = icmp eq i32 %403, 134695760
  %conv295 = zext i1 %cmp294 to i32
  store i32 %conv295, i32* %has_id, align 4
  %404 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState296 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %404, i32 0, i32 15
  %405 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState296, align 8
  %m_zip64297 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %405, i32 0, i32 4
  %406 = load i32, i32* %m_zip64297, align 4
  %tobool298 = icmp ne i32 %406, 0
  br i1 %tobool298, label %if.then299, label %if.else310

if.then299:                                       ; preds = %if.end293
  %407 = load i8*, i8** %pBuf, align 8
  %408 = load i32, i32* %has_id, align 4
  %tobool300 = icmp ne i32 %408, 0
  %cond301 = select i1 %tobool300, i64 4, i64 0
  %add.ptr302 = getelementptr inbounds i8, i8* %407, i64 %cond301
  %409 = bitcast i8* %add.ptr302 to i32*
  store i32* %409, i32** %pSrc_descriptor, align 8
  %410 = load i32*, i32** %pSrc_descriptor, align 8
  %arrayidx = getelementptr inbounds i32, i32* %410, i64 0
  %411 = load i32, i32* %arrayidx, align 4
  store i32 %411, i32* %src_crc32, align 4
  %412 = load i32*, i32** %pSrc_descriptor, align 8
  %arrayidx303 = getelementptr inbounds i32, i32* %412, i64 1
  %413 = load i32, i32* %arrayidx303, align 4
  %conv304 = zext i32 %413 to i64
  store i64 %conv304, i64* %src_comp_size, align 8
  %414 = load i32*, i32** %pSrc_descriptor, align 8
  %arrayidx305 = getelementptr inbounds i32, i32* %414, i64 2
  %415 = load i32, i32* %arrayidx305, align 4
  %conv306 = zext i32 %415 to i64
  store i64 %conv306, i64* %src_uncomp_size, align 8
  %416 = load i8*, i8** %pBuf, align 8
  store i8* %416, i8** %p.addr.i920, align 8
  store i32 134695760, i32* %v.addr.i921, align 4
  %417 = load i32, i32* %v.addr.i921, align 4
  %conv.i922 = trunc i32 %417 to i8
  %418 = load i8*, i8** %p.addr.i920, align 8
  store i8 %conv.i922, i8* %418, align 1
  %419 = load i32, i32* %v.addr.i921, align 4
  %shr.i923 = lshr i32 %419, 8
  %conv1.i924 = trunc i32 %shr.i923 to i8
  %420 = load i8*, i8** %p.addr.i920, align 8
  %arrayidx2.i925 = getelementptr inbounds i8, i8* %420, i64 1
  store i8 %conv1.i924, i8* %arrayidx2.i925, align 1
  %421 = load i32, i32* %v.addr.i921, align 4
  %shr3.i926 = lshr i32 %421, 16
  %conv4.i927 = trunc i32 %shr3.i926 to i8
  %422 = load i8*, i8** %p.addr.i920, align 8
  %arrayidx5.i928 = getelementptr inbounds i8, i8* %422, i64 2
  store i8 %conv4.i927, i8* %arrayidx5.i928, align 1
  %423 = load i32, i32* %v.addr.i921, align 4
  %shr6.i929 = lshr i32 %423, 24
  %conv7.i930 = trunc i32 %shr6.i929 to i8
  %424 = load i8*, i8** %p.addr.i920, align 8
  %arrayidx8.i931 = getelementptr inbounds i8, i8* %424, i64 3
  store i8 %conv7.i930, i8* %arrayidx8.i931, align 1
  %425 = load i8*, i8** %pBuf, align 8
  %add.ptr307 = getelementptr inbounds i8, i8* %425, i64 4
  %426 = load i32, i32* %src_crc32, align 4
  store i8* %add.ptr307, i8** %p.addr.i938, align 8
  store i32 %426, i32* %v.addr.i939, align 4
  %427 = load i32, i32* %v.addr.i939, align 4
  %conv.i940 = trunc i32 %427 to i8
  %428 = load i8*, i8** %p.addr.i938, align 8
  store i8 %conv.i940, i8* %428, align 1
  %429 = load i32, i32* %v.addr.i939, align 4
  %shr.i941 = lshr i32 %429, 8
  %conv1.i942 = trunc i32 %shr.i941 to i8
  %430 = load i8*, i8** %p.addr.i938, align 8
  %arrayidx2.i943 = getelementptr inbounds i8, i8* %430, i64 1
  store i8 %conv1.i942, i8* %arrayidx2.i943, align 1
  %431 = load i32, i32* %v.addr.i939, align 4
  %shr3.i944 = lshr i32 %431, 16
  %conv4.i945 = trunc i32 %shr3.i944 to i8
  %432 = load i8*, i8** %p.addr.i938, align 8
  %arrayidx5.i946 = getelementptr inbounds i8, i8* %432, i64 2
  store i8 %conv4.i945, i8* %arrayidx5.i946, align 1
  %433 = load i32, i32* %v.addr.i939, align 4
  %shr6.i947 = lshr i32 %433, 24
  %conv7.i948 = trunc i32 %shr6.i947 to i8
  %434 = load i8*, i8** %p.addr.i938, align 8
  %arrayidx8.i949 = getelementptr inbounds i8, i8* %434, i64 3
  store i8 %conv7.i948, i8* %arrayidx8.i949, align 1
  %435 = load i8*, i8** %pBuf, align 8
  %add.ptr308 = getelementptr inbounds i8, i8* %435, i64 8
  %436 = load i64, i64* %src_comp_size, align 8
  store i8* %add.ptr308, i8** %p.addr.i950, align 8
  store i64 %436, i64* %v.addr.i951, align 8
  %437 = load i8*, i8** %p.addr.i950, align 8
  %438 = load i64, i64* %v.addr.i951, align 8
  %conv.i952 = trunc i64 %438 to i32
  store i8* %437, i8** %p.addr.i.i, align 8
  store i32 %conv.i952, i32* %v.addr.i.i, align 4
  %439 = load i32, i32* %v.addr.i.i, align 4
  %conv.i.i = trunc i32 %439 to i8
  %440 = load i8*, i8** %p.addr.i.i, align 8
  store i8 %conv.i.i, i8* %440, align 1
  %441 = load i32, i32* %v.addr.i.i, align 4
  %shr.i.i = lshr i32 %441, 8
  %conv1.i.i = trunc i32 %shr.i.i to i8
  %442 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx2.i.i = getelementptr inbounds i8, i8* %442, i64 1
  store i8 %conv1.i.i, i8* %arrayidx2.i.i, align 1
  %443 = load i32, i32* %v.addr.i.i, align 4
  %shr3.i.i = lshr i32 %443, 16
  %conv4.i.i = trunc i32 %shr3.i.i to i8
  %444 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i8, i8* %444, i64 2
  store i8 %conv4.i.i, i8* %arrayidx5.i.i, align 1
  %445 = load i32, i32* %v.addr.i.i, align 4
  %shr6.i.i = lshr i32 %445, 24
  %conv7.i.i = trunc i32 %shr6.i.i to i8
  %446 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx8.i.i = getelementptr inbounds i8, i8* %446, i64 3
  store i8 %conv7.i.i, i8* %arrayidx8.i.i, align 1
  %447 = load i8*, i8** %p.addr.i950, align 8
  %add.ptr.i953 = getelementptr inbounds i8, i8* %447, i64 4
  %448 = load i64, i64* %v.addr.i951, align 8
  %shr.i954 = lshr i64 %448, 32
  %conv1.i955 = trunc i64 %shr.i954 to i32
  store i8* %add.ptr.i953, i8** %p.addr.i2.i, align 8
  store i32 %conv1.i955, i32* %v.addr.i3.i, align 4
  %449 = load i32, i32* %v.addr.i3.i, align 4
  %conv.i4.i = trunc i32 %449 to i8
  %450 = load i8*, i8** %p.addr.i2.i, align 8
  store i8 %conv.i4.i, i8* %450, align 1
  %451 = load i32, i32* %v.addr.i3.i, align 4
  %shr.i5.i = lshr i32 %451, 8
  %conv1.i6.i = trunc i32 %shr.i5.i to i8
  %452 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx2.i7.i = getelementptr inbounds i8, i8* %452, i64 1
  store i8 %conv1.i6.i, i8* %arrayidx2.i7.i, align 1
  %453 = load i32, i32* %v.addr.i3.i, align 4
  %shr3.i8.i = lshr i32 %453, 16
  %conv4.i9.i = trunc i32 %shr3.i8.i to i8
  %454 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx5.i10.i = getelementptr inbounds i8, i8* %454, i64 2
  store i8 %conv4.i9.i, i8* %arrayidx5.i10.i, align 1
  %455 = load i32, i32* %v.addr.i3.i, align 4
  %shr6.i11.i = lshr i32 %455, 24
  %conv7.i12.i = trunc i32 %shr6.i11.i to i8
  %456 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx8.i13.i = getelementptr inbounds i8, i8* %456, i64 3
  store i8 %conv7.i12.i, i8* %arrayidx8.i13.i, align 1
  %457 = load i8*, i8** %pBuf, align 8
  %add.ptr309 = getelementptr inbounds i8, i8* %457, i64 16
  %458 = load i64, i64* %src_uncomp_size, align 8
  store i8* %add.ptr309, i8** %p.addr.i1004, align 8
  store i64 %458, i64* %v.addr.i1005, align 8
  %459 = load i8*, i8** %p.addr.i1004, align 8
  %460 = load i64, i64* %v.addr.i1005, align 8
  %conv.i1006 = trunc i64 %460 to i32
  store i8* %459, i8** %p.addr.i.i1002, align 8
  store i32 %conv.i1006, i32* %v.addr.i.i1003, align 4
  %461 = load i32, i32* %v.addr.i.i1003, align 4
  %conv.i.i1007 = trunc i32 %461 to i8
  %462 = load i8*, i8** %p.addr.i.i1002, align 8
  store i8 %conv.i.i1007, i8* %462, align 1
  %463 = load i32, i32* %v.addr.i.i1003, align 4
  %shr.i.i1008 = lshr i32 %463, 8
  %conv1.i.i1009 = trunc i32 %shr.i.i1008 to i8
  %464 = load i8*, i8** %p.addr.i.i1002, align 8
  %arrayidx2.i.i1010 = getelementptr inbounds i8, i8* %464, i64 1
  store i8 %conv1.i.i1009, i8* %arrayidx2.i.i1010, align 1
  %465 = load i32, i32* %v.addr.i.i1003, align 4
  %shr3.i.i1011 = lshr i32 %465, 16
  %conv4.i.i1012 = trunc i32 %shr3.i.i1011 to i8
  %466 = load i8*, i8** %p.addr.i.i1002, align 8
  %arrayidx5.i.i1013 = getelementptr inbounds i8, i8* %466, i64 2
  store i8 %conv4.i.i1012, i8* %arrayidx5.i.i1013, align 1
  %467 = load i32, i32* %v.addr.i.i1003, align 4
  %shr6.i.i1014 = lshr i32 %467, 24
  %conv7.i.i1015 = trunc i32 %shr6.i.i1014 to i8
  %468 = load i8*, i8** %p.addr.i.i1002, align 8
  %arrayidx8.i.i1016 = getelementptr inbounds i8, i8* %468, i64 3
  store i8 %conv7.i.i1015, i8* %arrayidx8.i.i1016, align 1
  %469 = load i8*, i8** %p.addr.i1004, align 8
  %add.ptr.i1017 = getelementptr inbounds i8, i8* %469, i64 4
  %470 = load i64, i64* %v.addr.i1005, align 8
  %shr.i1018 = lshr i64 %470, 32
  %conv1.i1019 = trunc i64 %shr.i1018 to i32
  store i8* %add.ptr.i1017, i8** %p.addr.i2.i1000, align 8
  store i32 %conv1.i1019, i32* %v.addr.i3.i1001, align 4
  %471 = load i32, i32* %v.addr.i3.i1001, align 4
  %conv.i4.i1020 = trunc i32 %471 to i8
  %472 = load i8*, i8** %p.addr.i2.i1000, align 8
  store i8 %conv.i4.i1020, i8* %472, align 1
  %473 = load i32, i32* %v.addr.i3.i1001, align 4
  %shr.i5.i1021 = lshr i32 %473, 8
  %conv1.i6.i1022 = trunc i32 %shr.i5.i1021 to i8
  %474 = load i8*, i8** %p.addr.i2.i1000, align 8
  %arrayidx2.i7.i1023 = getelementptr inbounds i8, i8* %474, i64 1
  store i8 %conv1.i6.i1022, i8* %arrayidx2.i7.i1023, align 1
  %475 = load i32, i32* %v.addr.i3.i1001, align 4
  %shr3.i8.i1024 = lshr i32 %475, 16
  %conv4.i9.i1025 = trunc i32 %shr3.i8.i1024 to i8
  %476 = load i8*, i8** %p.addr.i2.i1000, align 8
  %arrayidx5.i10.i1026 = getelementptr inbounds i8, i8* %476, i64 2
  store i8 %conv4.i9.i1025, i8* %arrayidx5.i10.i1026, align 1
  %477 = load i32, i32* %v.addr.i3.i1001, align 4
  %shr6.i11.i1027 = lshr i32 %477, 24
  %conv7.i12.i1028 = trunc i32 %shr6.i11.i1027 to i8
  %478 = load i8*, i8** %p.addr.i2.i1000, align 8
  %arrayidx8.i13.i1029 = getelementptr inbounds i8, i8* %478, i64 3
  store i8 %conv7.i12.i1028, i8* %arrayidx8.i13.i1029, align 1
  store i32 24, i32* %n, align 4
  br label %if.end316

if.else310:                                       ; preds = %if.end293
  %479 = load i32, i32* %has_id, align 4
  %tobool311 = icmp ne i32 %479, 0
  %cond312 = select i1 %tobool311, i32 4, i32 3
  %conv313 = sext i32 %cond312 to i64
  %mul314 = mul i64 4, %conv313
  %conv315 = trunc i64 %mul314 to i32
  store i32 %conv315, i32* %n, align 4
  br label %if.end316

if.end316:                                        ; preds = %if.else310, %if.then299
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %if.end277
  %480 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite318 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %480, i32 0, i32 12
  %481 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite318, align 8
  %482 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque319 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %482, i32 0, i32 14
  %483 = load i8*, i8** %m_pIO_opaque319, align 8
  %484 = load i64, i64* %cur_dst_file_ofs, align 8
  %485 = load i8*, i8** %pBuf, align 8
  %486 = load i32, i32* %n, align 4
  %conv320 = zext i32 %486 to i64
  %call321 = call i64 %481(i8* %483, i64 %484, i8* %485, i64 %conv320)
  %487 = load i32, i32* %n, align 4
  %conv322 = zext i32 %487 to i64
  %cmp323 = icmp ne i64 %call321, %conv322
  br i1 %cmp323, label %if.then325, label %if.end329

if.then325:                                       ; preds = %if.end317
  %488 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree326 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %488, i32 0, i32 8
  %489 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree326, align 8
  %490 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque327 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %490, i32 0, i32 10
  %491 = load i8*, i8** %m_pAlloc_opaque327, align 8
  %492 = load i8*, i8** %pBuf, align 8
  call void %489(i8* %491, i8* %492)
  %493 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %493, %struct.mz_zip_archive** %pZip.addr.i1030, align 8
  store i32 19, i32* %err_num.addr.i1031, align 4
  %494 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1030, align 8
  %tobool.i1032 = icmp ne %struct.mz_zip_archive* %494, null
  br i1 %tobool.i1032, label %if.then.i1034, label %mz_zip_set_error.exit1036

if.then.i1034:                                    ; preds = %if.then325
  %495 = load i32, i32* %err_num.addr.i1031, align 4
  %496 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1030, align 8
  %m_last_error.i1033 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %496, i32 0, i32 5
  store i32 %495, i32* %m_last_error.i1033, align 4
  br label %mz_zip_set_error.exit1036

mz_zip_set_error.exit1036:                        ; preds = %if.then325, %if.then.i1034
  store i32 0, i32* %retval, align 4
  br label %return

if.end329:                                        ; preds = %if.end317
  %497 = load i32, i32* %n, align 4
  %conv330 = zext i32 %497 to i64
  %498 = load i64, i64* %cur_src_file_ofs, align 8
  %add331 = add i64 %498, %conv330
  store i64 %add331, i64* %cur_src_file_ofs, align 8
  %499 = load i32, i32* %n, align 4
  %conv332 = zext i32 %499 to i64
  %500 = load i64, i64* %cur_dst_file_ofs, align 8
  %add333 = add i64 %500, %conv332
  store i64 %add333, i64* %cur_dst_file_ofs, align 8
  br label %if.end334

if.end334:                                        ; preds = %if.end329, %while.end
  %501 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pFree335 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %501, i32 0, i32 8
  %502 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree335, align 8
  %503 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque336 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %503, i32 0, i32 10
  %504 = load i8*, i8** %m_pAlloc_opaque336, align 8
  %505 = load i8*, i8** %pBuf, align 8
  call void %502(i8* %504, i8* %505)
  %506 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir337 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %506, i32 0, i32 0
  %m_size338 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir337, i32 0, i32 1
  %507 = load i64, i64* %m_size338, align 8
  store i64 %507, i64* %orig_central_dir_size, align 8
  %arraydecay339 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i32 0, i32 0
  %508 = load i8*, i8** %pSrc_central_header, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arraydecay339, i8* %508, i64 46, i32 1, i1 false)
  %509 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64340 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %509, i32 0, i32 4
  %510 = load i32, i32* %m_zip64340, align 4
  %tobool341 = icmp ne i32 %510, 0
  br i1 %tobool341, label %if.then342, label %if.else402

if.then342:                                       ; preds = %if.end334
  %511 = load i8*, i8** %pSrc_central_header, align 8
  %add.ptr343 = getelementptr inbounds i8, i8* %511, i64 46
  %512 = load i32, i32* %src_filename_len, align 4
  %idx.ext344 = zext i32 %512 to i64
  %add.ptr345 = getelementptr inbounds i8, i8* %add.ptr343, i64 %idx.ext344
  store i8* %add.ptr345, i8** %pSrc_ext, align 8
  store %struct.mz_zip_array* %new_ext_block, %struct.mz_zip_array** %pArray.addr.i1059, align 8
  store i32 1, i32* %element_size.addr.i1060, align 4
  %513 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1059, align 8
  %514 = bitcast %struct.mz_zip_array* %513 to i8*
  %515 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1059, align 8
  %516 = bitcast %struct.mz_zip_array* %515 to i8*
  %517 = call i64 @llvm.objectsize.i64.p0i8(i8* %516, i1 false) #10
  %call.i1061 = call i8* @__memset_chk(i8* %514, i32 0, i64 32, i64 %517) #10
  %518 = load i32, i32* %element_size.addr.i1060, align 4
  %519 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1059, align 8
  %m_element_size.i1062 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %519, i32 0, i32 3
  store i32 %518, i32* %m_element_size.i1062, align 8
  %arraydecay346 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i32 0, i32 0
  %add.ptr347 = getelementptr inbounds i8, i8* %arraydecay346, i64 20
  store i8* %add.ptr347, i8** %p.addr.i1063, align 8
  store i32 -1, i32* %v.addr.i1064, align 4
  %520 = load i32, i32* %v.addr.i1064, align 4
  %conv.i1065 = trunc i32 %520 to i8
  %521 = load i8*, i8** %p.addr.i1063, align 8
  store i8 %conv.i1065, i8* %521, align 1
  %522 = load i32, i32* %v.addr.i1064, align 4
  %shr.i1066 = lshr i32 %522, 8
  %conv1.i1067 = trunc i32 %shr.i1066 to i8
  %523 = load i8*, i8** %p.addr.i1063, align 8
  %arrayidx2.i1068 = getelementptr inbounds i8, i8* %523, i64 1
  store i8 %conv1.i1067, i8* %arrayidx2.i1068, align 1
  %524 = load i32, i32* %v.addr.i1064, align 4
  %shr3.i1069 = lshr i32 %524, 16
  %conv4.i1070 = trunc i32 %shr3.i1069 to i8
  %525 = load i8*, i8** %p.addr.i1063, align 8
  %arrayidx5.i1071 = getelementptr inbounds i8, i8* %525, i64 2
  store i8 %conv4.i1070, i8* %arrayidx5.i1071, align 1
  %526 = load i32, i32* %v.addr.i1064, align 4
  %shr6.i1072 = lshr i32 %526, 24
  %conv7.i1073 = trunc i32 %shr6.i1072 to i8
  %527 = load i8*, i8** %p.addr.i1063, align 8
  %arrayidx8.i1074 = getelementptr inbounds i8, i8* %527, i64 3
  store i8 %conv7.i1073, i8* %arrayidx8.i1074, align 1
  %arraydecay348 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i32 0, i32 0
  %add.ptr349 = getelementptr inbounds i8, i8* %arraydecay348, i64 24
  store i8* %add.ptr349, i8** %p.addr.i1081, align 8
  store i32 -1, i32* %v.addr.i1082, align 4
  %528 = load i32, i32* %v.addr.i1082, align 4
  %conv.i1083 = trunc i32 %528 to i8
  %529 = load i8*, i8** %p.addr.i1081, align 8
  store i8 %conv.i1083, i8* %529, align 1
  %530 = load i32, i32* %v.addr.i1082, align 4
  %shr.i1084 = lshr i32 %530, 8
  %conv1.i1085 = trunc i32 %shr.i1084 to i8
  %531 = load i8*, i8** %p.addr.i1081, align 8
  %arrayidx2.i1086 = getelementptr inbounds i8, i8* %531, i64 1
  store i8 %conv1.i1085, i8* %arrayidx2.i1086, align 1
  %532 = load i32, i32* %v.addr.i1082, align 4
  %shr3.i1087 = lshr i32 %532, 16
  %conv4.i1088 = trunc i32 %shr3.i1087 to i8
  %533 = load i8*, i8** %p.addr.i1081, align 8
  %arrayidx5.i1089 = getelementptr inbounds i8, i8* %533, i64 2
  store i8 %conv4.i1088, i8* %arrayidx5.i1089, align 1
  %534 = load i32, i32* %v.addr.i1082, align 4
  %shr6.i1090 = lshr i32 %534, 24
  %conv7.i1091 = trunc i32 %shr6.i1090 to i8
  %535 = load i8*, i8** %p.addr.i1081, align 8
  %arrayidx8.i1092 = getelementptr inbounds i8, i8* %535, i64 3
  store i8 %conv7.i1091, i8* %arrayidx8.i1092, align 1
  %arraydecay350 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i32 0, i32 0
  %add.ptr351 = getelementptr inbounds i8, i8* %arraydecay350, i64 42
  store i8* %add.ptr351, i8** %p.addr.i1093, align 8
  store i32 -1, i32* %v.addr.i1094, align 4
  %536 = load i32, i32* %v.addr.i1094, align 4
  %conv.i1095 = trunc i32 %536 to i8
  %537 = load i8*, i8** %p.addr.i1093, align 8
  store i8 %conv.i1095, i8* %537, align 1
  %538 = load i32, i32* %v.addr.i1094, align 4
  %shr.i1096 = lshr i32 %538, 8
  %conv1.i1097 = trunc i32 %shr.i1096 to i8
  %539 = load i8*, i8** %p.addr.i1093, align 8
  %arrayidx2.i1098 = getelementptr inbounds i8, i8* %539, i64 1
  store i8 %conv1.i1097, i8* %arrayidx2.i1098, align 1
  %540 = load i32, i32* %v.addr.i1094, align 4
  %shr3.i1099 = lshr i32 %540, 16
  %conv4.i1100 = trunc i32 %shr3.i1099 to i8
  %541 = load i8*, i8** %p.addr.i1093, align 8
  %arrayidx5.i1101 = getelementptr inbounds i8, i8* %541, i64 2
  store i8 %conv4.i1100, i8* %arrayidx5.i1101, align 1
  %542 = load i32, i32* %v.addr.i1094, align 4
  %shr6.i1102 = lshr i32 %542, 24
  %conv7.i1103 = trunc i32 %shr6.i1102 to i8
  %543 = load i8*, i8** %p.addr.i1093, align 8
  %arrayidx8.i1104 = getelementptr inbounds i8, i8* %543, i64 3
  store i8 %conv7.i1103, i8* %arrayidx8.i1104, align 1
  %544 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %545 = load i8*, i8** %pSrc_ext, align 8
  %546 = load i32, i32* %src_ext_len, align 4
  %m_comp_size352 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 8
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 9
  %call353 = call i32 @mz_zip_writer_update_zip64_extension_block(%struct.mz_zip_array* %new_ext_block, %struct.mz_zip_archive* %544, i8* %545, i32 %546, i64* %m_comp_size352, i64* %m_uncomp_size, i64* %local_dir_header_ofs, i32* null)
  %tobool354 = icmp ne i32 %call353, 0
  br i1 %tobool354, label %if.end356, label %if.then355

if.then355:                                       ; preds = %if.then342
  %547 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %547, %struct.mz_zip_archive** %pZip.addr.i1149, align 8
  store %struct.mz_zip_array* %new_ext_block, %struct.mz_zip_array** %pArray.addr.i1150, align 8
  %548 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1149, align 8
  %m_pFree.i1151 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %548, i32 0, i32 8
  %549 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i1151, align 8
  %550 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1149, align 8
  %m_pAlloc_opaque.i1152 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %550, i32 0, i32 10
  %551 = load i8*, i8** %m_pAlloc_opaque.i1152, align 8
  %552 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1150, align 8
  %m_p.i1153 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %552, i32 0, i32 0
  %553 = load i8*, i8** %m_p.i1153, align 8
  call void %549(i8* %551, i8* %553) #10
  %554 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1150, align 8
  %555 = bitcast %struct.mz_zip_array* %554 to i8*
  %556 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1150, align 8
  %557 = bitcast %struct.mz_zip_array* %556 to i8*
  %558 = call i64 @llvm.objectsize.i64.p0i8(i8* %557, i1 false) #10
  %call.i1154 = call i8* @__memset_chk(i8* %555, i32 0, i64 32, i64 %558) #10
  store i32 0, i32* %retval, align 4
  br label %return

if.end356:                                        ; preds = %if.then342
  %arraydecay357 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i32 0, i32 0
  %add.ptr358 = getelementptr inbounds i8, i8* %arraydecay357, i64 30
  %m_size359 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %new_ext_block, i32 0, i32 1
  %559 = load i64, i64* %m_size359, align 8
  %conv360 = trunc i64 %559 to i16
  store i8* %add.ptr358, i8** %p.addr.i1155, align 8
  store i16 %conv360, i16* %v.addr.i1156, align 2
  %560 = load i16, i16* %v.addr.i1156, align 2
  %conv.i1157 = trunc i16 %560 to i8
  %561 = load i8*, i8** %p.addr.i1155, align 8
  store i8 %conv.i1157, i8* %561, align 1
  %562 = load i16, i16* %v.addr.i1156, align 2
  %conv1.i1158 = zext i16 %562 to i32
  %shr.i1159 = ashr i32 %conv1.i1158, 8
  %conv2.i = trunc i32 %shr.i1159 to i8
  %563 = load i8*, i8** %p.addr.i1155, align 8
  %arrayidx3.i = getelementptr inbounds i8, i8* %563, i64 1
  store i8 %conv2.i, i8* %arrayidx3.i, align 1
  %564 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %565 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir361 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %565, i32 0, i32 0
  %arraydecay362 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i32 0, i32 0
  store %struct.mz_zip_archive* %564, %struct.mz_zip_archive** %pZip.addr.i1166, align 8
  store %struct.mz_zip_array* %m_central_dir361, %struct.mz_zip_array** %pArray.addr.i1167, align 8
  store i8* %arraydecay362, i8** %pElements.addr.i1168, align 8
  store i64 46, i64* %n.addr.i1169, align 8
  %566 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1167, align 8
  %m_size.i1171 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %566, i32 0, i32 1
  %567 = load i64, i64* %m_size.i1171, align 8
  store i64 %567, i64* %orig_size.i1170, align 8
  %568 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1166, align 8
  %569 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1167, align 8
  %570 = load i64, i64* %orig_size.i1170, align 8
  %571 = load i64, i64* %n.addr.i1169, align 8
  %add.i1172 = add i64 %570, %571
  store %struct.mz_zip_archive* %568, %struct.mz_zip_archive** %pZip.addr.i.i1161, align 8
  store %struct.mz_zip_array* %569, %struct.mz_zip_array** %pArray.addr.i.i1162, align 8
  store i64 %add.i1172, i64* %new_size.addr.i.i1163, align 8
  store i32 1, i32* %growing.addr.i.i1164, align 4
  %572 = load i64, i64* %new_size.addr.i.i1163, align 8
  %573 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i1162, align 8
  %m_capacity.i.i1173 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %573, i32 0, i32 2
  %574 = load i64, i64* %m_capacity.i.i1173, align 8
  %cmp.i.i1174 = icmp ugt i64 %572, %574
  br i1 %cmp.i.i1174, label %if.then.i.i1177, label %if.end2.i.i1181

if.then.i.i1177:                                  ; preds = %if.end356
  %575 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i1161, align 8
  %576 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i1162, align 8
  %577 = load i64, i64* %new_size.addr.i.i1163, align 8
  %578 = load i32, i32* %growing.addr.i.i1164, align 4
  %call.i.i1175 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %575, %struct.mz_zip_array* %576, i64 %577, i32 %578) #10
  %tobool.i.i1176 = icmp ne i32 %call.i.i1175, 0
  br i1 %tobool.i.i1176, label %if.end.i.i1179, label %if.then1.i.i1178

if.then1.i.i1178:                                 ; preds = %if.then.i.i1177
  store i32 0, i32* %retval.i.i1160, align 4
  br label %mz_zip_array_resize.exit.i1183

if.end.i.i1179:                                   ; preds = %if.then.i.i1177
  br label %if.end2.i.i1181

if.end2.i.i1181:                                  ; preds = %if.end.i.i1179, %if.end356
  %579 = load i64, i64* %new_size.addr.i.i1163, align 8
  %580 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i1162, align 8
  %m_size.i.i1180 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %580, i32 0, i32 1
  store i64 %579, i64* %m_size.i.i1180, align 8
  store i32 1, i32* %retval.i.i1160, align 4
  br label %mz_zip_array_resize.exit.i1183

mz_zip_array_resize.exit.i1183:                   ; preds = %if.end2.i.i1181, %if.then1.i.i1178
  %581 = load i32, i32* %retval.i.i1160, align 4
  %tobool.i1182 = icmp ne i32 %581, 0
  br i1 %tobool.i1182, label %if.end.i1186, label %if.then.i1184

if.then.i1184:                                    ; preds = %mz_zip_array_resize.exit.i1183
  store i32 0, i32* %retval.i1165, align 4
  br label %mz_zip_array_push_back.exit1203

if.end.i1186:                                     ; preds = %mz_zip_array_resize.exit.i1183
  %582 = load i64, i64* %n.addr.i1169, align 8
  %cmp.i1185 = icmp ugt i64 %582, 0
  br i1 %cmp.i1185, label %if.then1.i1201, label %if.end11.i1202

if.then1.i1201:                                   ; preds = %if.end.i1186
  %583 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1167, align 8
  %m_p.i1187 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %583, i32 0, i32 0
  %584 = load i8*, i8** %m_p.i1187, align 8
  %585 = load i64, i64* %orig_size.i1170, align 8
  %586 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1167, align 8
  %m_element_size.i1188 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %586, i32 0, i32 3
  %587 = load i32, i32* %m_element_size.i1188, align 8
  %conv.i1189 = zext i32 %587 to i64
  %mul.i1190 = mul i64 %585, %conv.i1189
  %add.ptr.i1191 = getelementptr inbounds i8, i8* %584, i64 %mul.i1190
  %588 = load i8*, i8** %pElements.addr.i1168, align 8
  %589 = load i64, i64* %n.addr.i1169, align 8
  %590 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1167, align 8
  %m_element_size2.i1192 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %590, i32 0, i32 3
  %591 = load i32, i32* %m_element_size2.i1192, align 8
  %conv3.i1193 = zext i32 %591 to i64
  %mul4.i1194 = mul i64 %589, %conv3.i1193
  %592 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1167, align 8
  %m_p5.i1195 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %592, i32 0, i32 0
  %593 = load i8*, i8** %m_p5.i1195, align 8
  %594 = load i64, i64* %orig_size.i1170, align 8
  %595 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1167, align 8
  %m_element_size6.i1196 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %595, i32 0, i32 3
  %596 = load i32, i32* %m_element_size6.i1196, align 8
  %conv7.i1197 = zext i32 %596 to i64
  %mul8.i1198 = mul i64 %594, %conv7.i1197
  %add.ptr9.i1199 = getelementptr inbounds i8, i8* %593, i64 %mul8.i1198
  %597 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i1199, i1 false) #10
  %call10.i1200 = call i8* @__memcpy_chk(i8* %add.ptr.i1191, i8* %588, i64 %mul4.i1194, i64 %597) #10
  br label %if.end11.i1202

if.end11.i1202:                                   ; preds = %if.then1.i1201, %if.end.i1186
  store i32 1, i32* %retval.i1165, align 4
  br label %mz_zip_array_push_back.exit1203

mz_zip_array_push_back.exit1203:                  ; preds = %if.then.i1184, %if.end11.i1202
  %598 = load i32, i32* %retval.i1165, align 4
  %tobool364 = icmp ne i32 %598, 0
  br i1 %tobool364, label %if.end367, label %if.then365

if.then365:                                       ; preds = %mz_zip_array_push_back.exit1203
  %599 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %599, %struct.mz_zip_archive** %pZip.addr.i1204, align 8
  store %struct.mz_zip_array* %new_ext_block, %struct.mz_zip_array** %pArray.addr.i1205, align 8
  %600 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1204, align 8
  %m_pFree.i1206 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %600, i32 0, i32 8
  %601 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i1206, align 8
  %602 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1204, align 8
  %m_pAlloc_opaque.i1207 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %602, i32 0, i32 10
  %603 = load i8*, i8** %m_pAlloc_opaque.i1207, align 8
  %604 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1205, align 8
  %m_p.i1208 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %604, i32 0, i32 0
  %605 = load i8*, i8** %m_p.i1208, align 8
  call void %601(i8* %603, i8* %605) #10
  %606 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1205, align 8
  %607 = bitcast %struct.mz_zip_array* %606 to i8*
  %608 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1205, align 8
  %609 = bitcast %struct.mz_zip_array* %608 to i8*
  %610 = call i64 @llvm.objectsize.i64.p0i8(i8* %609, i1 false) #10
  %call.i1209 = call i8* @__memset_chk(i8* %607, i32 0, i64 32, i64 %610) #10
  %611 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %611, %struct.mz_zip_archive** %pZip.addr.i1210, align 8
  store i32 16, i32* %err_num.addr.i1211, align 4
  %612 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1210, align 8
  %tobool.i1212 = icmp ne %struct.mz_zip_archive* %612, null
  br i1 %tobool.i1212, label %if.then.i1214, label %mz_zip_set_error.exit1216

if.then.i1214:                                    ; preds = %if.then365
  %613 = load i32, i32* %err_num.addr.i1211, align 4
  %614 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1210, align 8
  %m_last_error.i1213 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %614, i32 0, i32 5
  store i32 %613, i32* %m_last_error.i1213, align 4
  br label %mz_zip_set_error.exit1216

mz_zip_set_error.exit1216:                        ; preds = %if.then365, %if.then.i1214
  store i32 0, i32* %retval, align 4
  br label %return

if.end367:                                        ; preds = %mz_zip_array_push_back.exit1203
  %615 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %616 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir368 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %616, i32 0, i32 0
  %617 = load i8*, i8** %pSrc_central_header, align 8
  %add.ptr369 = getelementptr inbounds i8, i8* %617, i64 46
  %618 = load i32, i32* %src_filename_len, align 4
  %conv370 = zext i32 %618 to i64
  store %struct.mz_zip_archive* %615, %struct.mz_zip_archive** %pZip.addr.i1111, align 8
  store %struct.mz_zip_array* %m_central_dir368, %struct.mz_zip_array** %pArray.addr.i1112, align 8
  store i8* %add.ptr369, i8** %pElements.addr.i1113, align 8
  store i64 %conv370, i64* %n.addr.i1114, align 8
  %619 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1112, align 8
  %m_size.i1116 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %619, i32 0, i32 1
  %620 = load i64, i64* %m_size.i1116, align 8
  store i64 %620, i64* %orig_size.i1115, align 8
  %621 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1111, align 8
  %622 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1112, align 8
  %623 = load i64, i64* %orig_size.i1115, align 8
  %624 = load i64, i64* %n.addr.i1114, align 8
  %add.i1117 = add i64 %623, %624
  store %struct.mz_zip_archive* %621, %struct.mz_zip_archive** %pZip.addr.i.i1106, align 8
  store %struct.mz_zip_array* %622, %struct.mz_zip_array** %pArray.addr.i.i1107, align 8
  store i64 %add.i1117, i64* %new_size.addr.i.i1108, align 8
  store i32 1, i32* %growing.addr.i.i1109, align 4
  %625 = load i64, i64* %new_size.addr.i.i1108, align 8
  %626 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i1107, align 8
  %m_capacity.i.i1118 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %626, i32 0, i32 2
  %627 = load i64, i64* %m_capacity.i.i1118, align 8
  %cmp.i.i1119 = icmp ugt i64 %625, %627
  br i1 %cmp.i.i1119, label %if.then.i.i1122, label %if.end2.i.i1126

if.then.i.i1122:                                  ; preds = %if.end367
  %628 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i1106, align 8
  %629 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i1107, align 8
  %630 = load i64, i64* %new_size.addr.i.i1108, align 8
  %631 = load i32, i32* %growing.addr.i.i1109, align 4
  %call.i.i1120 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %628, %struct.mz_zip_array* %629, i64 %630, i32 %631) #10
  %tobool.i.i1121 = icmp ne i32 %call.i.i1120, 0
  br i1 %tobool.i.i1121, label %if.end.i.i1124, label %if.then1.i.i1123

if.then1.i.i1123:                                 ; preds = %if.then.i.i1122
  store i32 0, i32* %retval.i.i1105, align 4
  br label %mz_zip_array_resize.exit.i1128

if.end.i.i1124:                                   ; preds = %if.then.i.i1122
  br label %if.end2.i.i1126

if.end2.i.i1126:                                  ; preds = %if.end.i.i1124, %if.end367
  %632 = load i64, i64* %new_size.addr.i.i1108, align 8
  %633 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i1107, align 8
  %m_size.i.i1125 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %633, i32 0, i32 1
  store i64 %632, i64* %m_size.i.i1125, align 8
  store i32 1, i32* %retval.i.i1105, align 4
  br label %mz_zip_array_resize.exit.i1128

mz_zip_array_resize.exit.i1128:                   ; preds = %if.end2.i.i1126, %if.then1.i.i1123
  %634 = load i32, i32* %retval.i.i1105, align 4
  %tobool.i1127 = icmp ne i32 %634, 0
  br i1 %tobool.i1127, label %if.end.i1131, label %if.then.i1129

if.then.i1129:                                    ; preds = %mz_zip_array_resize.exit.i1128
  store i32 0, i32* %retval.i1110, align 4
  br label %mz_zip_array_push_back.exit1148

if.end.i1131:                                     ; preds = %mz_zip_array_resize.exit.i1128
  %635 = load i64, i64* %n.addr.i1114, align 8
  %cmp.i1130 = icmp ugt i64 %635, 0
  br i1 %cmp.i1130, label %if.then1.i1146, label %if.end11.i1147

if.then1.i1146:                                   ; preds = %if.end.i1131
  %636 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1112, align 8
  %m_p.i1132 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %636, i32 0, i32 0
  %637 = load i8*, i8** %m_p.i1132, align 8
  %638 = load i64, i64* %orig_size.i1115, align 8
  %639 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1112, align 8
  %m_element_size.i1133 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %639, i32 0, i32 3
  %640 = load i32, i32* %m_element_size.i1133, align 8
  %conv.i1134 = zext i32 %640 to i64
  %mul.i1135 = mul i64 %638, %conv.i1134
  %add.ptr.i1136 = getelementptr inbounds i8, i8* %637, i64 %mul.i1135
  %641 = load i8*, i8** %pElements.addr.i1113, align 8
  %642 = load i64, i64* %n.addr.i1114, align 8
  %643 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1112, align 8
  %m_element_size2.i1137 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %643, i32 0, i32 3
  %644 = load i32, i32* %m_element_size2.i1137, align 8
  %conv3.i1138 = zext i32 %644 to i64
  %mul4.i1139 = mul i64 %642, %conv3.i1138
  %645 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1112, align 8
  %m_p5.i1140 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %645, i32 0, i32 0
  %646 = load i8*, i8** %m_p5.i1140, align 8
  %647 = load i64, i64* %orig_size.i1115, align 8
  %648 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1112, align 8
  %m_element_size6.i1141 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %648, i32 0, i32 3
  %649 = load i32, i32* %m_element_size6.i1141, align 8
  %conv7.i1142 = zext i32 %649 to i64
  %mul8.i1143 = mul i64 %647, %conv7.i1142
  %add.ptr9.i1144 = getelementptr inbounds i8, i8* %646, i64 %mul8.i1143
  %650 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i1144, i1 false) #10
  %call10.i1145 = call i8* @__memcpy_chk(i8* %add.ptr.i1136, i8* %641, i64 %mul4.i1139, i64 %650) #10
  br label %if.end11.i1147

if.end11.i1147:                                   ; preds = %if.then1.i1146, %if.end.i1131
  store i32 1, i32* %retval.i1110, align 4
  br label %mz_zip_array_push_back.exit1148

mz_zip_array_push_back.exit1148:                  ; preds = %if.then.i1129, %if.end11.i1147
  %651 = load i32, i32* %retval.i1110, align 4
  %tobool372 = icmp ne i32 %651, 0
  br i1 %tobool372, label %if.end377, label %if.then373

if.then373:                                       ; preds = %mz_zip_array_push_back.exit1148
  %652 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %652, %struct.mz_zip_archive** %pZip.addr.i1075, align 8
  store %struct.mz_zip_array* %new_ext_block, %struct.mz_zip_array** %pArray.addr.i1076, align 8
  %653 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1075, align 8
  %m_pFree.i1077 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %653, i32 0, i32 8
  %654 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i1077, align 8
  %655 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1075, align 8
  %m_pAlloc_opaque.i1078 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %655, i32 0, i32 10
  %656 = load i8*, i8** %m_pAlloc_opaque.i1078, align 8
  %657 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1076, align 8
  %m_p.i1079 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %657, i32 0, i32 0
  %658 = load i8*, i8** %m_p.i1079, align 8
  call void %654(i8* %656, i8* %658) #10
  %659 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1076, align 8
  %660 = bitcast %struct.mz_zip_array* %659 to i8*
  %661 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1076, align 8
  %662 = bitcast %struct.mz_zip_array* %661 to i8*
  %663 = call i64 @llvm.objectsize.i64.p0i8(i8* %662, i1 false) #10
  %call.i1080 = call i8* @__memset_chk(i8* %660, i32 0, i64 32, i64 %663) #10
  %664 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %665 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir374 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %665, i32 0, i32 0
  %666 = load i64, i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive* %664, %struct.mz_zip_archive** %pZip.addr.i1045, align 8
  store %struct.mz_zip_array* %m_central_dir374, %struct.mz_zip_array** %pArray.addr.i1046, align 8
  store i64 %666, i64* %new_size.addr.i1047, align 8
  store i32 0, i32* %growing.addr.i1048, align 4
  %667 = load i64, i64* %new_size.addr.i1047, align 8
  %668 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1046, align 8
  %m_capacity.i1049 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %668, i32 0, i32 2
  %669 = load i64, i64* %m_capacity.i1049, align 8
  %cmp.i1050 = icmp ugt i64 %667, %669
  br i1 %cmp.i1050, label %if.then.i1053, label %if.end2.i1057

if.then.i1053:                                    ; preds = %if.then373
  %670 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1045, align 8
  %671 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1046, align 8
  %672 = load i64, i64* %new_size.addr.i1047, align 8
  %673 = load i32, i32* %growing.addr.i1048, align 4
  %call.i1051 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %670, %struct.mz_zip_array* %671, i64 %672, i32 %673) #10
  %tobool.i1052 = icmp ne i32 %call.i1051, 0
  br i1 %tobool.i1052, label %if.end.i1055, label %if.then1.i1054

if.then1.i1054:                                   ; preds = %if.then.i1053
  store i32 0, i32* %retval.i1044, align 4
  br label %mz_zip_array_resize.exit1058

if.end.i1055:                                     ; preds = %if.then.i1053
  br label %if.end2.i1057

if.end2.i1057:                                    ; preds = %if.end.i1055, %if.then373
  %674 = load i64, i64* %new_size.addr.i1047, align 8
  %675 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i1046, align 8
  %m_size.i1056 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %675, i32 0, i32 1
  store i64 %674, i64* %m_size.i1056, align 8
  store i32 1, i32* %retval.i1044, align 4
  br label %mz_zip_array_resize.exit1058

mz_zip_array_resize.exit1058:                     ; preds = %if.then1.i1054, %if.end2.i1057
  %676 = load i32, i32* %retval.i1044, align 4
  %677 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %677, %struct.mz_zip_archive** %pZip.addr.i1037, align 8
  store i32 16, i32* %err_num.addr.i1038, align 4
  %678 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1037, align 8
  %tobool.i1039 = icmp ne %struct.mz_zip_archive* %678, null
  br i1 %tobool.i1039, label %if.then.i1041, label %mz_zip_set_error.exit1043

if.then.i1041:                                    ; preds = %mz_zip_array_resize.exit1058
  %679 = load i32, i32* %err_num.addr.i1038, align 4
  %680 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i1037, align 8
  %m_last_error.i1040 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %680, i32 0, i32 5
  store i32 %679, i32* %m_last_error.i1040, align 4
  br label %mz_zip_set_error.exit1043

mz_zip_set_error.exit1043:                        ; preds = %mz_zip_array_resize.exit1058, %if.then.i1041
  store i32 0, i32* %retval, align 4
  br label %return

if.end377:                                        ; preds = %mz_zip_array_push_back.exit1148
  %681 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %682 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir378 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %682, i32 0, i32 0
  %m_p379 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %new_ext_block, i32 0, i32 0
  %683 = load i8*, i8** %m_p379, align 8
  %m_size380 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %new_ext_block, i32 0, i32 1
  %684 = load i64, i64* %m_size380, align 8
  store %struct.mz_zip_archive* %681, %struct.mz_zip_archive** %pZip.addr.i962, align 8
  store %struct.mz_zip_array* %m_central_dir378, %struct.mz_zip_array** %pArray.addr.i963, align 8
  store i8* %683, i8** %pElements.addr.i964, align 8
  store i64 %684, i64* %n.addr.i965, align 8
  %685 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i963, align 8
  %m_size.i967 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %685, i32 0, i32 1
  %686 = load i64, i64* %m_size.i967, align 8
  store i64 %686, i64* %orig_size.i966, align 8
  %687 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i962, align 8
  %688 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i963, align 8
  %689 = load i64, i64* %orig_size.i966, align 8
  %690 = load i64, i64* %n.addr.i965, align 8
  %add.i968 = add i64 %689, %690
  store %struct.mz_zip_archive* %687, %struct.mz_zip_archive** %pZip.addr.i.i957, align 8
  store %struct.mz_zip_array* %688, %struct.mz_zip_array** %pArray.addr.i.i958, align 8
  store i64 %add.i968, i64* %new_size.addr.i.i959, align 8
  store i32 1, i32* %growing.addr.i.i960, align 4
  %691 = load i64, i64* %new_size.addr.i.i959, align 8
  %692 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i958, align 8
  %m_capacity.i.i969 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %692, i32 0, i32 2
  %693 = load i64, i64* %m_capacity.i.i969, align 8
  %cmp.i.i970 = icmp ugt i64 %691, %693
  br i1 %cmp.i.i970, label %if.then.i.i973, label %if.end2.i.i977

if.then.i.i973:                                   ; preds = %if.end377
  %694 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i957, align 8
  %695 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i958, align 8
  %696 = load i64, i64* %new_size.addr.i.i959, align 8
  %697 = load i32, i32* %growing.addr.i.i960, align 4
  %call.i.i971 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %694, %struct.mz_zip_array* %695, i64 %696, i32 %697) #10
  %tobool.i.i972 = icmp ne i32 %call.i.i971, 0
  br i1 %tobool.i.i972, label %if.end.i.i975, label %if.then1.i.i974

if.then1.i.i974:                                  ; preds = %if.then.i.i973
  store i32 0, i32* %retval.i.i956, align 4
  br label %mz_zip_array_resize.exit.i979

if.end.i.i975:                                    ; preds = %if.then.i.i973
  br label %if.end2.i.i977

if.end2.i.i977:                                   ; preds = %if.end.i.i975, %if.end377
  %698 = load i64, i64* %new_size.addr.i.i959, align 8
  %699 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i958, align 8
  %m_size.i.i976 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %699, i32 0, i32 1
  store i64 %698, i64* %m_size.i.i976, align 8
  store i32 1, i32* %retval.i.i956, align 4
  br label %mz_zip_array_resize.exit.i979

mz_zip_array_resize.exit.i979:                    ; preds = %if.end2.i.i977, %if.then1.i.i974
  %700 = load i32, i32* %retval.i.i956, align 4
  %tobool.i978 = icmp ne i32 %700, 0
  br i1 %tobool.i978, label %if.end.i982, label %if.then.i980

if.then.i980:                                     ; preds = %mz_zip_array_resize.exit.i979
  store i32 0, i32* %retval.i961, align 4
  br label %mz_zip_array_push_back.exit999

if.end.i982:                                      ; preds = %mz_zip_array_resize.exit.i979
  %701 = load i64, i64* %n.addr.i965, align 8
  %cmp.i981 = icmp ugt i64 %701, 0
  br i1 %cmp.i981, label %if.then1.i997, label %if.end11.i998

if.then1.i997:                                    ; preds = %if.end.i982
  %702 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i963, align 8
  %m_p.i983 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %702, i32 0, i32 0
  %703 = load i8*, i8** %m_p.i983, align 8
  %704 = load i64, i64* %orig_size.i966, align 8
  %705 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i963, align 8
  %m_element_size.i984 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %705, i32 0, i32 3
  %706 = load i32, i32* %m_element_size.i984, align 8
  %conv.i985 = zext i32 %706 to i64
  %mul.i986 = mul i64 %704, %conv.i985
  %add.ptr.i987 = getelementptr inbounds i8, i8* %703, i64 %mul.i986
  %707 = load i8*, i8** %pElements.addr.i964, align 8
  %708 = load i64, i64* %n.addr.i965, align 8
  %709 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i963, align 8
  %m_element_size2.i988 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %709, i32 0, i32 3
  %710 = load i32, i32* %m_element_size2.i988, align 8
  %conv3.i989 = zext i32 %710 to i64
  %mul4.i990 = mul i64 %708, %conv3.i989
  %711 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i963, align 8
  %m_p5.i991 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %711, i32 0, i32 0
  %712 = load i8*, i8** %m_p5.i991, align 8
  %713 = load i64, i64* %orig_size.i966, align 8
  %714 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i963, align 8
  %m_element_size6.i992 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %714, i32 0, i32 3
  %715 = load i32, i32* %m_element_size6.i992, align 8
  %conv7.i993 = zext i32 %715 to i64
  %mul8.i994 = mul i64 %713, %conv7.i993
  %add.ptr9.i995 = getelementptr inbounds i8, i8* %712, i64 %mul8.i994
  %716 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i995, i1 false) #10
  %call10.i996 = call i8* @__memcpy_chk(i8* %add.ptr.i987, i8* %707, i64 %mul4.i990, i64 %716) #10
  br label %if.end11.i998

if.end11.i998:                                    ; preds = %if.then1.i997, %if.end.i982
  store i32 1, i32* %retval.i961, align 4
  br label %mz_zip_array_push_back.exit999

mz_zip_array_push_back.exit999:                   ; preds = %if.then.i980, %if.end11.i998
  %717 = load i32, i32* %retval.i961, align 4
  %tobool382 = icmp ne i32 %717, 0
  br i1 %tobool382, label %if.end387, label %if.then383

if.then383:                                       ; preds = %mz_zip_array_push_back.exit999
  %718 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %718, %struct.mz_zip_archive** %pZip.addr.i932, align 8
  store %struct.mz_zip_array* %new_ext_block, %struct.mz_zip_array** %pArray.addr.i933, align 8
  %719 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i932, align 8
  %m_pFree.i934 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %719, i32 0, i32 8
  %720 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i934, align 8
  %721 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i932, align 8
  %m_pAlloc_opaque.i935 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %721, i32 0, i32 10
  %722 = load i8*, i8** %m_pAlloc_opaque.i935, align 8
  %723 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i933, align 8
  %m_p.i936 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %723, i32 0, i32 0
  %724 = load i8*, i8** %m_p.i936, align 8
  call void %720(i8* %722, i8* %724) #10
  %725 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i933, align 8
  %726 = bitcast %struct.mz_zip_array* %725 to i8*
  %727 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i933, align 8
  %728 = bitcast %struct.mz_zip_array* %727 to i8*
  %729 = call i64 @llvm.objectsize.i64.p0i8(i8* %728, i1 false) #10
  %call.i937 = call i8* @__memset_chk(i8* %726, i32 0, i64 32, i64 %729) #10
  %730 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %731 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir384 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %731, i32 0, i32 0
  %732 = load i64, i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive* %730, %struct.mz_zip_archive** %pZip.addr.i906, align 8
  store %struct.mz_zip_array* %m_central_dir384, %struct.mz_zip_array** %pArray.addr.i907, align 8
  store i64 %732, i64* %new_size.addr.i908, align 8
  store i32 0, i32* %growing.addr.i909, align 4
  %733 = load i64, i64* %new_size.addr.i908, align 8
  %734 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i907, align 8
  %m_capacity.i910 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %734, i32 0, i32 2
  %735 = load i64, i64* %m_capacity.i910, align 8
  %cmp.i911 = icmp ugt i64 %733, %735
  br i1 %cmp.i911, label %if.then.i914, label %if.end2.i918

if.then.i914:                                     ; preds = %if.then383
  %736 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i906, align 8
  %737 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i907, align 8
  %738 = load i64, i64* %new_size.addr.i908, align 8
  %739 = load i32, i32* %growing.addr.i909, align 4
  %call.i912 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %736, %struct.mz_zip_array* %737, i64 %738, i32 %739) #10
  %tobool.i913 = icmp ne i32 %call.i912, 0
  br i1 %tobool.i913, label %if.end.i916, label %if.then1.i915

if.then1.i915:                                    ; preds = %if.then.i914
  store i32 0, i32* %retval.i905, align 4
  br label %mz_zip_array_resize.exit919

if.end.i916:                                      ; preds = %if.then.i914
  br label %if.end2.i918

if.end2.i918:                                     ; preds = %if.end.i916, %if.then383
  %740 = load i64, i64* %new_size.addr.i908, align 8
  %741 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i907, align 8
  %m_size.i917 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %741, i32 0, i32 1
  store i64 %740, i64* %m_size.i917, align 8
  store i32 1, i32* %retval.i905, align 4
  br label %mz_zip_array_resize.exit919

mz_zip_array_resize.exit919:                      ; preds = %if.then1.i915, %if.end2.i918
  %742 = load i32, i32* %retval.i905, align 4
  %743 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %743, %struct.mz_zip_archive** %pZip.addr.i898, align 8
  store i32 16, i32* %err_num.addr.i899, align 4
  %744 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i898, align 8
  %tobool.i900 = icmp ne %struct.mz_zip_archive* %744, null
  br i1 %tobool.i900, label %if.then.i902, label %mz_zip_set_error.exit904

if.then.i902:                                     ; preds = %mz_zip_array_resize.exit919
  %745 = load i32, i32* %err_num.addr.i899, align 4
  %746 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i898, align 8
  %m_last_error.i901 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %746, i32 0, i32 5
  store i32 %745, i32* %m_last_error.i901, align 4
  br label %mz_zip_set_error.exit904

mz_zip_set_error.exit904:                         ; preds = %mz_zip_array_resize.exit919, %if.then.i902
  store i32 0, i32* %retval, align 4
  br label %return

if.end387:                                        ; preds = %mz_zip_array_push_back.exit999
  %747 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %748 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir388 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %748, i32 0, i32 0
  %749 = load i8*, i8** %pSrc_central_header, align 8
  %add.ptr389 = getelementptr inbounds i8, i8* %749, i64 46
  %750 = load i32, i32* %src_filename_len, align 4
  %idx.ext390 = zext i32 %750 to i64
  %add.ptr391 = getelementptr inbounds i8, i8* %add.ptr389, i64 %idx.ext390
  %751 = load i32, i32* %src_ext_len, align 4
  %idx.ext392 = zext i32 %751 to i64
  %add.ptr393 = getelementptr inbounds i8, i8* %add.ptr391, i64 %idx.ext392
  %752 = load i32, i32* %src_comment_len, align 4
  %conv394 = zext i32 %752 to i64
  store %struct.mz_zip_archive* %747, %struct.mz_zip_archive** %pZip.addr.i846, align 8
  store %struct.mz_zip_array* %m_central_dir388, %struct.mz_zip_array** %pArray.addr.i847, align 8
  store i8* %add.ptr393, i8** %pElements.addr.i848, align 8
  store i64 %conv394, i64* %n.addr.i849, align 8
  %753 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i847, align 8
  %m_size.i851 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %753, i32 0, i32 1
  %754 = load i64, i64* %m_size.i851, align 8
  store i64 %754, i64* %orig_size.i850, align 8
  %755 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i846, align 8
  %756 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i847, align 8
  %757 = load i64, i64* %orig_size.i850, align 8
  %758 = load i64, i64* %n.addr.i849, align 8
  %add.i852 = add i64 %757, %758
  store %struct.mz_zip_archive* %755, %struct.mz_zip_archive** %pZip.addr.i.i841, align 8
  store %struct.mz_zip_array* %756, %struct.mz_zip_array** %pArray.addr.i.i842, align 8
  store i64 %add.i852, i64* %new_size.addr.i.i843, align 8
  store i32 1, i32* %growing.addr.i.i844, align 4
  %759 = load i64, i64* %new_size.addr.i.i843, align 8
  %760 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i842, align 8
  %m_capacity.i.i853 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %760, i32 0, i32 2
  %761 = load i64, i64* %m_capacity.i.i853, align 8
  %cmp.i.i854 = icmp ugt i64 %759, %761
  br i1 %cmp.i.i854, label %if.then.i.i857, label %if.end2.i.i861

if.then.i.i857:                                   ; preds = %if.end387
  %762 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i841, align 8
  %763 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i842, align 8
  %764 = load i64, i64* %new_size.addr.i.i843, align 8
  %765 = load i32, i32* %growing.addr.i.i844, align 4
  %call.i.i855 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %762, %struct.mz_zip_array* %763, i64 %764, i32 %765) #10
  %tobool.i.i856 = icmp ne i32 %call.i.i855, 0
  br i1 %tobool.i.i856, label %if.end.i.i859, label %if.then1.i.i858

if.then1.i.i858:                                  ; preds = %if.then.i.i857
  store i32 0, i32* %retval.i.i840, align 4
  br label %mz_zip_array_resize.exit.i863

if.end.i.i859:                                    ; preds = %if.then.i.i857
  br label %if.end2.i.i861

if.end2.i.i861:                                   ; preds = %if.end.i.i859, %if.end387
  %766 = load i64, i64* %new_size.addr.i.i843, align 8
  %767 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i842, align 8
  %m_size.i.i860 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %767, i32 0, i32 1
  store i64 %766, i64* %m_size.i.i860, align 8
  store i32 1, i32* %retval.i.i840, align 4
  br label %mz_zip_array_resize.exit.i863

mz_zip_array_resize.exit.i863:                    ; preds = %if.end2.i.i861, %if.then1.i.i858
  %768 = load i32, i32* %retval.i.i840, align 4
  %tobool.i862 = icmp ne i32 %768, 0
  br i1 %tobool.i862, label %if.end.i866, label %if.then.i864

if.then.i864:                                     ; preds = %mz_zip_array_resize.exit.i863
  store i32 0, i32* %retval.i845, align 4
  br label %mz_zip_array_push_back.exit883

if.end.i866:                                      ; preds = %mz_zip_array_resize.exit.i863
  %769 = load i64, i64* %n.addr.i849, align 8
  %cmp.i865 = icmp ugt i64 %769, 0
  br i1 %cmp.i865, label %if.then1.i881, label %if.end11.i882

if.then1.i881:                                    ; preds = %if.end.i866
  %770 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i847, align 8
  %m_p.i867 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %770, i32 0, i32 0
  %771 = load i8*, i8** %m_p.i867, align 8
  %772 = load i64, i64* %orig_size.i850, align 8
  %773 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i847, align 8
  %m_element_size.i868 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %773, i32 0, i32 3
  %774 = load i32, i32* %m_element_size.i868, align 8
  %conv.i869 = zext i32 %774 to i64
  %mul.i870 = mul i64 %772, %conv.i869
  %add.ptr.i871 = getelementptr inbounds i8, i8* %771, i64 %mul.i870
  %775 = load i8*, i8** %pElements.addr.i848, align 8
  %776 = load i64, i64* %n.addr.i849, align 8
  %777 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i847, align 8
  %m_element_size2.i872 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %777, i32 0, i32 3
  %778 = load i32, i32* %m_element_size2.i872, align 8
  %conv3.i873 = zext i32 %778 to i64
  %mul4.i874 = mul i64 %776, %conv3.i873
  %779 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i847, align 8
  %m_p5.i875 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %779, i32 0, i32 0
  %780 = load i8*, i8** %m_p5.i875, align 8
  %781 = load i64, i64* %orig_size.i850, align 8
  %782 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i847, align 8
  %m_element_size6.i876 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %782, i32 0, i32 3
  %783 = load i32, i32* %m_element_size6.i876, align 8
  %conv7.i877 = zext i32 %783 to i64
  %mul8.i878 = mul i64 %781, %conv7.i877
  %add.ptr9.i879 = getelementptr inbounds i8, i8* %780, i64 %mul8.i878
  %784 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i879, i1 false) #10
  %call10.i880 = call i8* @__memcpy_chk(i8* %add.ptr.i871, i8* %775, i64 %mul4.i874, i64 %784) #10
  br label %if.end11.i882

if.end11.i882:                                    ; preds = %if.then1.i881, %if.end.i866
  store i32 1, i32* %retval.i845, align 4
  br label %mz_zip_array_push_back.exit883

mz_zip_array_push_back.exit883:                   ; preds = %if.then.i864, %if.end11.i882
  %785 = load i32, i32* %retval.i845, align 4
  %tobool396 = icmp ne i32 %785, 0
  br i1 %tobool396, label %if.end401, label %if.then397

if.then397:                                       ; preds = %mz_zip_array_push_back.exit883
  %786 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %786, %struct.mz_zip_archive** %pZip.addr.i820, align 8
  store %struct.mz_zip_array* %new_ext_block, %struct.mz_zip_array** %pArray.addr.i821, align 8
  %787 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i820, align 8
  %m_pFree.i822 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %787, i32 0, i32 8
  %788 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i822, align 8
  %789 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i820, align 8
  %m_pAlloc_opaque.i823 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %789, i32 0, i32 10
  %790 = load i8*, i8** %m_pAlloc_opaque.i823, align 8
  %791 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i821, align 8
  %m_p.i824 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %791, i32 0, i32 0
  %792 = load i8*, i8** %m_p.i824, align 8
  call void %788(i8* %790, i8* %792) #10
  %793 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i821, align 8
  %794 = bitcast %struct.mz_zip_array* %793 to i8*
  %795 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i821, align 8
  %796 = bitcast %struct.mz_zip_array* %795 to i8*
  %797 = call i64 @llvm.objectsize.i64.p0i8(i8* %796, i1 false) #10
  %call.i825 = call i8* @__memset_chk(i8* %794, i32 0, i64 32, i64 %797) #10
  %798 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %799 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir398 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %799, i32 0, i32 0
  %800 = load i64, i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive* %798, %struct.mz_zip_archive** %pZip.addr.i799, align 8
  store %struct.mz_zip_array* %m_central_dir398, %struct.mz_zip_array** %pArray.addr.i800, align 8
  store i64 %800, i64* %new_size.addr.i801, align 8
  store i32 0, i32* %growing.addr.i802, align 4
  %801 = load i64, i64* %new_size.addr.i801, align 8
  %802 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i800, align 8
  %m_capacity.i803 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %802, i32 0, i32 2
  %803 = load i64, i64* %m_capacity.i803, align 8
  %cmp.i804 = icmp ugt i64 %801, %803
  br i1 %cmp.i804, label %if.then.i807, label %if.end2.i811

if.then.i807:                                     ; preds = %if.then397
  %804 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i799, align 8
  %805 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i800, align 8
  %806 = load i64, i64* %new_size.addr.i801, align 8
  %807 = load i32, i32* %growing.addr.i802, align 4
  %call.i805 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %804, %struct.mz_zip_array* %805, i64 %806, i32 %807) #10
  %tobool.i806 = icmp ne i32 %call.i805, 0
  br i1 %tobool.i806, label %if.end.i809, label %if.then1.i808

if.then1.i808:                                    ; preds = %if.then.i807
  store i32 0, i32* %retval.i798, align 4
  br label %mz_zip_array_resize.exit812

if.end.i809:                                      ; preds = %if.then.i807
  br label %if.end2.i811

if.end2.i811:                                     ; preds = %if.end.i809, %if.then397
  %808 = load i64, i64* %new_size.addr.i801, align 8
  %809 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i800, align 8
  %m_size.i810 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %809, i32 0, i32 1
  store i64 %808, i64* %m_size.i810, align 8
  store i32 1, i32* %retval.i798, align 4
  br label %mz_zip_array_resize.exit812

mz_zip_array_resize.exit812:                      ; preds = %if.then1.i808, %if.end2.i811
  %810 = load i32, i32* %retval.i798, align 4
  %811 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %811, %struct.mz_zip_archive** %pZip.addr.i791, align 8
  store i32 16, i32* %err_num.addr.i792, align 4
  %812 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i791, align 8
  %tobool.i793 = icmp ne %struct.mz_zip_archive* %812, null
  br i1 %tobool.i793, label %if.then.i795, label %mz_zip_set_error.exit797

if.then.i795:                                     ; preds = %mz_zip_array_resize.exit812
  %813 = load i32, i32* %err_num.addr.i792, align 4
  %814 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i791, align 8
  %m_last_error.i794 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %814, i32 0, i32 5
  store i32 %813, i32* %m_last_error.i794, align 4
  br label %mz_zip_set_error.exit797

mz_zip_set_error.exit797:                         ; preds = %mz_zip_array_resize.exit812, %if.then.i795
  store i32 0, i32* %retval, align 4
  br label %return

if.end401:                                        ; preds = %mz_zip_array_push_back.exit883
  %815 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %815, %struct.mz_zip_archive** %pZip.addr.i690, align 8
  store %struct.mz_zip_array* %new_ext_block, %struct.mz_zip_array** %pArray.addr.i691, align 8
  %816 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i690, align 8
  %m_pFree.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %816, i32 0, i32 8
  %817 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree.i, align 8
  %818 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i690, align 8
  %m_pAlloc_opaque.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %818, i32 0, i32 10
  %819 = load i8*, i8** %m_pAlloc_opaque.i, align 8
  %820 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i691, align 8
  %m_p.i692 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %820, i32 0, i32 0
  %821 = load i8*, i8** %m_p.i692, align 8
  call void %817(i8* %819, i8* %821) #10
  %822 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i691, align 8
  %823 = bitcast %struct.mz_zip_array* %822 to i8*
  %824 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i691, align 8
  %825 = bitcast %struct.mz_zip_array* %824 to i8*
  %826 = call i64 @llvm.objectsize.i64.p0i8(i8* %825, i1 false) #10
  %call.i693 = call i8* @__memset_chk(i8* %823, i32 0, i64 32, i64 %826) #10
  br label %if.end433

if.else402:                                       ; preds = %if.end334
  %827 = load i64, i64* %cur_dst_file_ofs, align 8
  %cmp403 = icmp ugt i64 %827, 4294967295
  br i1 %cmp403, label %if.then405, label %if.end407

if.then405:                                       ; preds = %if.else402
  %828 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %828, %struct.mz_zip_archive** %pZip.addr.i683, align 8
  store i32 29, i32* %err_num.addr.i684, align 4
  %829 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i683, align 8
  %tobool.i685 = icmp ne %struct.mz_zip_archive* %829, null
  br i1 %tobool.i685, label %if.then.i687, label %mz_zip_set_error.exit689

if.then.i687:                                     ; preds = %if.then405
  %830 = load i32, i32* %err_num.addr.i684, align 4
  %831 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i683, align 8
  %m_last_error.i686 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %831, i32 0, i32 5
  store i32 %830, i32* %m_last_error.i686, align 4
  br label %mz_zip_set_error.exit689

mz_zip_set_error.exit689:                         ; preds = %if.then405, %if.then.i687
  store i32 0, i32* %retval, align 4
  br label %return

if.end407:                                        ; preds = %if.else402
  %832 = load i64, i64* %local_dir_header_ofs, align 8
  %cmp408 = icmp uge i64 %832, 4294967295
  br i1 %cmp408, label %if.then410, label %if.end412

if.then410:                                       ; preds = %if.end407
  %833 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %833, %struct.mz_zip_archive** %pZip.addr.i676, align 8
  store i32 29, i32* %err_num.addr.i677, align 4
  %834 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i676, align 8
  %tobool.i678 = icmp ne %struct.mz_zip_archive* %834, null
  br i1 %tobool.i678, label %if.then.i680, label %mz_zip_set_error.exit682

if.then.i680:                                     ; preds = %if.then410
  %835 = load i32, i32* %err_num.addr.i677, align 4
  %836 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i676, align 8
  %m_last_error.i679 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %836, i32 0, i32 5
  store i32 %835, i32* %m_last_error.i679, align 4
  br label %mz_zip_set_error.exit682

mz_zip_set_error.exit682:                         ; preds = %if.then410, %if.then.i680
  store i32 0, i32* %retval, align 4
  br label %return

if.end412:                                        ; preds = %if.end407
  %arraydecay413 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i32 0, i32 0
  %add.ptr414 = getelementptr inbounds i8, i8* %arraydecay413, i64 42
  %837 = load i64, i64* %local_dir_header_ofs, align 8
  %conv415 = trunc i64 %837 to i32
  store i8* %add.ptr414, i8** %p.addr.i, align 8
  store i32 %conv415, i32* %v.addr.i, align 4
  %838 = load i32, i32* %v.addr.i, align 4
  %conv.i674 = trunc i32 %838 to i8
  %839 = load i8*, i8** %p.addr.i, align 8
  store i8 %conv.i674, i8* %839, align 1
  %840 = load i32, i32* %v.addr.i, align 4
  %shr.i = lshr i32 %840, 8
  %conv1.i = trunc i32 %shr.i to i8
  %841 = load i8*, i8** %p.addr.i, align 8
  %arrayidx2.i = getelementptr inbounds i8, i8* %841, i64 1
  store i8 %conv1.i, i8* %arrayidx2.i, align 1
  %842 = load i32, i32* %v.addr.i, align 4
  %shr3.i = lshr i32 %842, 16
  %conv4.i = trunc i32 %shr3.i to i8
  %843 = load i8*, i8** %p.addr.i, align 8
  %arrayidx5.i = getelementptr inbounds i8, i8* %843, i64 2
  store i8 %conv4.i, i8* %arrayidx5.i, align 1
  %844 = load i32, i32* %v.addr.i, align 4
  %shr6.i = lshr i32 %844, 24
  %conv7.i675 = trunc i32 %shr6.i to i8
  %845 = load i8*, i8** %p.addr.i, align 8
  %arrayidx8.i = getelementptr inbounds i8, i8* %845, i64 3
  store i8 %conv7.i675, i8* %arrayidx8.i, align 1
  %846 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %847 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir416 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %847, i32 0, i32 0
  %arraydecay417 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i32 0, i32 0
  store %struct.mz_zip_archive* %846, %struct.mz_zip_archive** %pZip.addr.i622, align 8
  store %struct.mz_zip_array* %m_central_dir416, %struct.mz_zip_array** %pArray.addr.i623, align 8
  store i8* %arraydecay417, i8** %pElements.addr.i624, align 8
  store i64 46, i64* %n.addr.i625, align 8
  %848 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i623, align 8
  %m_size.i627 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %848, i32 0, i32 1
  %849 = load i64, i64* %m_size.i627, align 8
  store i64 %849, i64* %orig_size.i626, align 8
  %850 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i622, align 8
  %851 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i623, align 8
  %852 = load i64, i64* %orig_size.i626, align 8
  %853 = load i64, i64* %n.addr.i625, align 8
  %add.i628 = add i64 %852, %853
  store %struct.mz_zip_archive* %850, %struct.mz_zip_archive** %pZip.addr.i.i617, align 8
  store %struct.mz_zip_array* %851, %struct.mz_zip_array** %pArray.addr.i.i618, align 8
  store i64 %add.i628, i64* %new_size.addr.i.i619, align 8
  store i32 1, i32* %growing.addr.i.i620, align 4
  %854 = load i64, i64* %new_size.addr.i.i619, align 8
  %855 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i618, align 8
  %m_capacity.i.i629 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %855, i32 0, i32 2
  %856 = load i64, i64* %m_capacity.i.i629, align 8
  %cmp.i.i630 = icmp ugt i64 %854, %856
  br i1 %cmp.i.i630, label %if.then.i.i633, label %if.end2.i.i637

if.then.i.i633:                                   ; preds = %if.end412
  %857 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i617, align 8
  %858 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i618, align 8
  %859 = load i64, i64* %new_size.addr.i.i619, align 8
  %860 = load i32, i32* %growing.addr.i.i620, align 4
  %call.i.i631 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %857, %struct.mz_zip_array* %858, i64 %859, i32 %860) #10
  %tobool.i.i632 = icmp ne i32 %call.i.i631, 0
  br i1 %tobool.i.i632, label %if.end.i.i635, label %if.then1.i.i634

if.then1.i.i634:                                  ; preds = %if.then.i.i633
  store i32 0, i32* %retval.i.i616, align 4
  br label %mz_zip_array_resize.exit.i639

if.end.i.i635:                                    ; preds = %if.then.i.i633
  br label %if.end2.i.i637

if.end2.i.i637:                                   ; preds = %if.end.i.i635, %if.end412
  %861 = load i64, i64* %new_size.addr.i.i619, align 8
  %862 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i618, align 8
  %m_size.i.i636 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %862, i32 0, i32 1
  store i64 %861, i64* %m_size.i.i636, align 8
  store i32 1, i32* %retval.i.i616, align 4
  br label %mz_zip_array_resize.exit.i639

mz_zip_array_resize.exit.i639:                    ; preds = %if.end2.i.i637, %if.then1.i.i634
  %863 = load i32, i32* %retval.i.i616, align 4
  %tobool.i638 = icmp ne i32 %863, 0
  br i1 %tobool.i638, label %if.end.i642, label %if.then.i640

if.then.i640:                                     ; preds = %mz_zip_array_resize.exit.i639
  store i32 0, i32* %retval.i621, align 4
  br label %mz_zip_array_push_back.exit659

if.end.i642:                                      ; preds = %mz_zip_array_resize.exit.i639
  %864 = load i64, i64* %n.addr.i625, align 8
  %cmp.i641 = icmp ugt i64 %864, 0
  br i1 %cmp.i641, label %if.then1.i657, label %if.end11.i658

if.then1.i657:                                    ; preds = %if.end.i642
  %865 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i623, align 8
  %m_p.i643 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %865, i32 0, i32 0
  %866 = load i8*, i8** %m_p.i643, align 8
  %867 = load i64, i64* %orig_size.i626, align 8
  %868 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i623, align 8
  %m_element_size.i644 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %868, i32 0, i32 3
  %869 = load i32, i32* %m_element_size.i644, align 8
  %conv.i645 = zext i32 %869 to i64
  %mul.i646 = mul i64 %867, %conv.i645
  %add.ptr.i647 = getelementptr inbounds i8, i8* %866, i64 %mul.i646
  %870 = load i8*, i8** %pElements.addr.i624, align 8
  %871 = load i64, i64* %n.addr.i625, align 8
  %872 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i623, align 8
  %m_element_size2.i648 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %872, i32 0, i32 3
  %873 = load i32, i32* %m_element_size2.i648, align 8
  %conv3.i649 = zext i32 %873 to i64
  %mul4.i650 = mul i64 %871, %conv3.i649
  %874 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i623, align 8
  %m_p5.i651 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %874, i32 0, i32 0
  %875 = load i8*, i8** %m_p5.i651, align 8
  %876 = load i64, i64* %orig_size.i626, align 8
  %877 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i623, align 8
  %m_element_size6.i652 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %877, i32 0, i32 3
  %878 = load i32, i32* %m_element_size6.i652, align 8
  %conv7.i653 = zext i32 %878 to i64
  %mul8.i654 = mul i64 %876, %conv7.i653
  %add.ptr9.i655 = getelementptr inbounds i8, i8* %875, i64 %mul8.i654
  %879 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i655, i1 false) #10
  %call10.i656 = call i8* @__memcpy_chk(i8* %add.ptr.i647, i8* %870, i64 %mul4.i650, i64 %879) #10
  br label %if.end11.i658

if.end11.i658:                                    ; preds = %if.then1.i657, %if.end.i642
  store i32 1, i32* %retval.i621, align 4
  br label %mz_zip_array_push_back.exit659

mz_zip_array_push_back.exit659:                   ; preds = %if.then.i640, %if.end11.i658
  %880 = load i32, i32* %retval.i621, align 4
  %tobool419 = icmp ne i32 %880, 0
  br i1 %tobool419, label %if.end422, label %if.then420

if.then420:                                       ; preds = %mz_zip_array_push_back.exit659
  %881 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %881, %struct.mz_zip_archive** %pZip.addr.i609, align 8
  store i32 16, i32* %err_num.addr.i610, align 4
  %882 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i609, align 8
  %tobool.i611 = icmp ne %struct.mz_zip_archive* %882, null
  br i1 %tobool.i611, label %if.then.i613, label %mz_zip_set_error.exit615

if.then.i613:                                     ; preds = %if.then420
  %883 = load i32, i32* %err_num.addr.i610, align 4
  %884 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i609, align 8
  %m_last_error.i612 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %884, i32 0, i32 5
  store i32 %883, i32* %m_last_error.i612, align 4
  br label %mz_zip_set_error.exit615

mz_zip_set_error.exit615:                         ; preds = %if.then420, %if.then.i613
  store i32 0, i32* %retval, align 4
  br label %return

if.end422:                                        ; preds = %mz_zip_array_push_back.exit659
  %885 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %886 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir423 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %886, i32 0, i32 0
  %887 = load i8*, i8** %pSrc_central_header, align 8
  %add.ptr424 = getelementptr inbounds i8, i8* %887, i64 46
  %888 = load i32, i32* %src_central_dir_following_data_size, align 4
  %conv425 = zext i32 %888 to i64
  store %struct.mz_zip_archive* %885, %struct.mz_zip_archive** %pZip.addr.i557, align 8
  store %struct.mz_zip_array* %m_central_dir423, %struct.mz_zip_array** %pArray.addr.i558, align 8
  store i8* %add.ptr424, i8** %pElements.addr.i559, align 8
  store i64 %conv425, i64* %n.addr.i560, align 8
  %889 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i558, align 8
  %m_size.i562 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %889, i32 0, i32 1
  %890 = load i64, i64* %m_size.i562, align 8
  store i64 %890, i64* %orig_size.i561, align 8
  %891 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i557, align 8
  %892 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i558, align 8
  %893 = load i64, i64* %orig_size.i561, align 8
  %894 = load i64, i64* %n.addr.i560, align 8
  %add.i563 = add i64 %893, %894
  store %struct.mz_zip_archive* %891, %struct.mz_zip_archive** %pZip.addr.i.i552, align 8
  store %struct.mz_zip_array* %892, %struct.mz_zip_array** %pArray.addr.i.i553, align 8
  store i64 %add.i563, i64* %new_size.addr.i.i554, align 8
  store i32 1, i32* %growing.addr.i.i555, align 4
  %895 = load i64, i64* %new_size.addr.i.i554, align 8
  %896 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i553, align 8
  %m_capacity.i.i564 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %896, i32 0, i32 2
  %897 = load i64, i64* %m_capacity.i.i564, align 8
  %cmp.i.i565 = icmp ugt i64 %895, %897
  br i1 %cmp.i.i565, label %if.then.i.i568, label %if.end2.i.i572

if.then.i.i568:                                   ; preds = %if.end422
  %898 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i552, align 8
  %899 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i553, align 8
  %900 = load i64, i64* %new_size.addr.i.i554, align 8
  %901 = load i32, i32* %growing.addr.i.i555, align 4
  %call.i.i566 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %898, %struct.mz_zip_array* %899, i64 %900, i32 %901) #10
  %tobool.i.i567 = icmp ne i32 %call.i.i566, 0
  br i1 %tobool.i.i567, label %if.end.i.i570, label %if.then1.i.i569

if.then1.i.i569:                                  ; preds = %if.then.i.i568
  store i32 0, i32* %retval.i.i551, align 4
  br label %mz_zip_array_resize.exit.i574

if.end.i.i570:                                    ; preds = %if.then.i.i568
  br label %if.end2.i.i572

if.end2.i.i572:                                   ; preds = %if.end.i.i570, %if.end422
  %902 = load i64, i64* %new_size.addr.i.i554, align 8
  %903 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i553, align 8
  %m_size.i.i571 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %903, i32 0, i32 1
  store i64 %902, i64* %m_size.i.i571, align 8
  store i32 1, i32* %retval.i.i551, align 4
  br label %mz_zip_array_resize.exit.i574

mz_zip_array_resize.exit.i574:                    ; preds = %if.end2.i.i572, %if.then1.i.i569
  %904 = load i32, i32* %retval.i.i551, align 4
  %tobool.i573 = icmp ne i32 %904, 0
  br i1 %tobool.i573, label %if.end.i577, label %if.then.i575

if.then.i575:                                     ; preds = %mz_zip_array_resize.exit.i574
  store i32 0, i32* %retval.i556, align 4
  br label %mz_zip_array_push_back.exit594

if.end.i577:                                      ; preds = %mz_zip_array_resize.exit.i574
  %905 = load i64, i64* %n.addr.i560, align 8
  %cmp.i576 = icmp ugt i64 %905, 0
  br i1 %cmp.i576, label %if.then1.i592, label %if.end11.i593

if.then1.i592:                                    ; preds = %if.end.i577
  %906 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i558, align 8
  %m_p.i578 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %906, i32 0, i32 0
  %907 = load i8*, i8** %m_p.i578, align 8
  %908 = load i64, i64* %orig_size.i561, align 8
  %909 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i558, align 8
  %m_element_size.i579 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %909, i32 0, i32 3
  %910 = load i32, i32* %m_element_size.i579, align 8
  %conv.i580 = zext i32 %910 to i64
  %mul.i581 = mul i64 %908, %conv.i580
  %add.ptr.i582 = getelementptr inbounds i8, i8* %907, i64 %mul.i581
  %911 = load i8*, i8** %pElements.addr.i559, align 8
  %912 = load i64, i64* %n.addr.i560, align 8
  %913 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i558, align 8
  %m_element_size2.i583 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %913, i32 0, i32 3
  %914 = load i32, i32* %m_element_size2.i583, align 8
  %conv3.i584 = zext i32 %914 to i64
  %mul4.i585 = mul i64 %912, %conv3.i584
  %915 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i558, align 8
  %m_p5.i586 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %915, i32 0, i32 0
  %916 = load i8*, i8** %m_p5.i586, align 8
  %917 = load i64, i64* %orig_size.i561, align 8
  %918 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i558, align 8
  %m_element_size6.i587 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %918, i32 0, i32 3
  %919 = load i32, i32* %m_element_size6.i587, align 8
  %conv7.i588 = zext i32 %919 to i64
  %mul8.i589 = mul i64 %917, %conv7.i588
  %add.ptr9.i590 = getelementptr inbounds i8, i8* %916, i64 %mul8.i589
  %920 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i590, i1 false) #10
  %call10.i591 = call i8* @__memcpy_chk(i8* %add.ptr.i582, i8* %911, i64 %mul4.i585, i64 %920) #10
  br label %if.end11.i593

if.end11.i593:                                    ; preds = %if.then1.i592, %if.end.i577
  store i32 1, i32* %retval.i556, align 4
  br label %mz_zip_array_push_back.exit594

mz_zip_array_push_back.exit594:                   ; preds = %if.then.i575, %if.end11.i593
  %921 = load i32, i32* %retval.i556, align 4
  %tobool427 = icmp ne i32 %921, 0
  br i1 %tobool427, label %if.end432, label %if.then428

if.then428:                                       ; preds = %mz_zip_array_push_back.exit594
  %922 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %923 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir429 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %923, i32 0, i32 0
  %924 = load i64, i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive* %922, %struct.mz_zip_archive** %pZip.addr.i530, align 8
  store %struct.mz_zip_array* %m_central_dir429, %struct.mz_zip_array** %pArray.addr.i531, align 8
  store i64 %924, i64* %new_size.addr.i532, align 8
  store i32 0, i32* %growing.addr.i533, align 4
  %925 = load i64, i64* %new_size.addr.i532, align 8
  %926 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i531, align 8
  %m_capacity.i534 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %926, i32 0, i32 2
  %927 = load i64, i64* %m_capacity.i534, align 8
  %cmp.i535 = icmp ugt i64 %925, %927
  br i1 %cmp.i535, label %if.then.i538, label %if.end2.i542

if.then.i538:                                     ; preds = %if.then428
  %928 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i530, align 8
  %929 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i531, align 8
  %930 = load i64, i64* %new_size.addr.i532, align 8
  %931 = load i32, i32* %growing.addr.i533, align 4
  %call.i536 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %928, %struct.mz_zip_array* %929, i64 %930, i32 %931) #10
  %tobool.i537 = icmp ne i32 %call.i536, 0
  br i1 %tobool.i537, label %if.end.i540, label %if.then1.i539

if.then1.i539:                                    ; preds = %if.then.i538
  store i32 0, i32* %retval.i529, align 4
  br label %mz_zip_array_resize.exit543

if.end.i540:                                      ; preds = %if.then.i538
  br label %if.end2.i542

if.end2.i542:                                     ; preds = %if.end.i540, %if.then428
  %932 = load i64, i64* %new_size.addr.i532, align 8
  %933 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i531, align 8
  %m_size.i541 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %933, i32 0, i32 1
  store i64 %932, i64* %m_size.i541, align 8
  store i32 1, i32* %retval.i529, align 4
  br label %mz_zip_array_resize.exit543

mz_zip_array_resize.exit543:                      ; preds = %if.then1.i539, %if.end2.i542
  %934 = load i32, i32* %retval.i529, align 4
  %935 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %935, %struct.mz_zip_archive** %pZip.addr.i522, align 8
  store i32 16, i32* %err_num.addr.i523, align 4
  %936 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i522, align 8
  %tobool.i524 = icmp ne %struct.mz_zip_archive* %936, null
  br i1 %tobool.i524, label %if.then.i526, label %mz_zip_set_error.exit528

if.then.i526:                                     ; preds = %mz_zip_array_resize.exit543
  %937 = load i32, i32* %err_num.addr.i523, align 4
  %938 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i522, align 8
  %m_last_error.i525 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %938, i32 0, i32 5
  store i32 %937, i32* %m_last_error.i525, align 4
  br label %mz_zip_set_error.exit528

mz_zip_set_error.exit528:                         ; preds = %mz_zip_array_resize.exit543, %if.then.i526
  store i32 0, i32* %retval, align 4
  br label %return

if.end432:                                        ; preds = %mz_zip_array_push_back.exit594
  br label %if.end433

if.end433:                                        ; preds = %if.end432, %if.end401
  %939 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir434 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %939, i32 0, i32 0
  %m_size435 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir434, i32 0, i32 1
  %940 = load i64, i64* %m_size435, align 8
  %cmp436 = icmp uge i64 %940, 4294967295
  br i1 %cmp436, label %if.then438, label %if.end442

if.then438:                                       ; preds = %if.end433
  %941 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %942 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir439 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %942, i32 0, i32 0
  %943 = load i64, i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive* %941, %struct.mz_zip_archive** %pZip.addr.i501, align 8
  store %struct.mz_zip_array* %m_central_dir439, %struct.mz_zip_array** %pArray.addr.i502, align 8
  store i64 %943, i64* %new_size.addr.i503, align 8
  store i32 0, i32* %growing.addr.i504, align 4
  %944 = load i64, i64* %new_size.addr.i503, align 8
  %945 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i502, align 8
  %m_capacity.i505 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %945, i32 0, i32 2
  %946 = load i64, i64* %m_capacity.i505, align 8
  %cmp.i506 = icmp ugt i64 %944, %946
  br i1 %cmp.i506, label %if.then.i509, label %if.end2.i513

if.then.i509:                                     ; preds = %if.then438
  %947 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i501, align 8
  %948 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i502, align 8
  %949 = load i64, i64* %new_size.addr.i503, align 8
  %950 = load i32, i32* %growing.addr.i504, align 4
  %call.i507 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %947, %struct.mz_zip_array* %948, i64 %949, i32 %950) #10
  %tobool.i508 = icmp ne i32 %call.i507, 0
  br i1 %tobool.i508, label %if.end.i511, label %if.then1.i510

if.then1.i510:                                    ; preds = %if.then.i509
  store i32 0, i32* %retval.i500, align 4
  br label %mz_zip_array_resize.exit514

if.end.i511:                                      ; preds = %if.then.i509
  br label %if.end2.i513

if.end2.i513:                                     ; preds = %if.end.i511, %if.then438
  %951 = load i64, i64* %new_size.addr.i503, align 8
  %952 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i502, align 8
  %m_size.i512 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %952, i32 0, i32 1
  store i64 %951, i64* %m_size.i512, align 8
  store i32 1, i32* %retval.i500, align 4
  br label %mz_zip_array_resize.exit514

mz_zip_array_resize.exit514:                      ; preds = %if.then1.i510, %if.end2.i513
  %953 = load i32, i32* %retval.i500, align 4
  %954 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %954, %struct.mz_zip_archive** %pZip.addr.i493, align 8
  store i32 15, i32* %err_num.addr.i494, align 4
  %955 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i493, align 8
  %tobool.i495 = icmp ne %struct.mz_zip_archive* %955, null
  br i1 %tobool.i495, label %if.then.i497, label %mz_zip_set_error.exit499

if.then.i497:                                     ; preds = %mz_zip_array_resize.exit514
  %956 = load i32, i32* %err_num.addr.i494, align 4
  %957 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i493, align 8
  %m_last_error.i496 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %957, i32 0, i32 5
  store i32 %956, i32* %m_last_error.i496, align 4
  br label %mz_zip_set_error.exit499

mz_zip_set_error.exit499:                         ; preds = %mz_zip_array_resize.exit514, %if.then.i497
  store i32 0, i32* %retval, align 4
  br label %return

if.end442:                                        ; preds = %if.end433
  %958 = load i64, i64* %orig_central_dir_size, align 8
  %conv443 = trunc i64 %958 to i32
  store i32 %conv443, i32* %n, align 4
  %959 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %960 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %960, i32 0, i32 1
  %961 = bitcast i32* %n to i8*
  store %struct.mz_zip_archive* %959, %struct.mz_zip_archive** %pZip.addr.i470, align 8
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pArray.addr.i471, align 8
  store i8* %961, i8** %pElements.addr.i, align 8
  store i64 1, i64* %n.addr.i, align 8
  %962 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i471, align 8
  %m_size.i472 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %962, i32 0, i32 1
  %963 = load i64, i64* %m_size.i472, align 8
  store i64 %963, i64* %orig_size.i, align 8
  %964 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i470, align 8
  %965 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i471, align 8
  %966 = load i64, i64* %orig_size.i, align 8
  %967 = load i64, i64* %n.addr.i, align 8
  %add.i = add i64 %966, %967
  store %struct.mz_zip_archive* %964, %struct.mz_zip_archive** %pZip.addr.i.i, align 8
  store %struct.mz_zip_array* %965, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  store i64 %add.i, i64* %new_size.addr.i.i, align 8
  store i32 1, i32* %growing.addr.i.i, align 4
  %968 = load i64, i64* %new_size.addr.i.i, align 8
  %969 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_capacity.i.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %969, i32 0, i32 2
  %970 = load i64, i64* %m_capacity.i.i, align 8
  %cmp.i.i = icmp ugt i64 %968, %970
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end2.i.i

if.then.i.i:                                      ; preds = %if.end442
  %971 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i, align 8
  %972 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %973 = load i64, i64* %new_size.addr.i.i, align 8
  %974 = load i32, i32* %growing.addr.i.i, align 4
  %call.i.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %971, %struct.mz_zip_array* %972, i64 %973, i32 %974) #10
  %tobool.i.i = icmp ne i32 %call.i.i, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.then.i.i
  store i32 0, i32* %retval.i.i, align 4
  br label %mz_zip_array_resize.exit.i

if.end.i.i:                                       ; preds = %if.then.i.i
  br label %if.end2.i.i

if.end2.i.i:                                      ; preds = %if.end.i.i, %if.end442
  %975 = load i64, i64* %new_size.addr.i.i, align 8
  %976 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_size.i.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %976, i32 0, i32 1
  store i64 %975, i64* %m_size.i.i, align 8
  store i32 1, i32* %retval.i.i, align 4
  br label %mz_zip_array_resize.exit.i

mz_zip_array_resize.exit.i:                       ; preds = %if.end2.i.i, %if.then1.i.i
  %977 = load i32, i32* %retval.i.i, align 4
  %tobool.i473 = icmp ne i32 %977, 0
  br i1 %tobool.i473, label %if.end.i476, label %if.then.i474

if.then.i474:                                     ; preds = %mz_zip_array_resize.exit.i
  store i32 0, i32* %retval.i469, align 4
  br label %mz_zip_array_push_back.exit

if.end.i476:                                      ; preds = %mz_zip_array_resize.exit.i
  %978 = load i64, i64* %n.addr.i, align 8
  %cmp.i475 = icmp ugt i64 %978, 0
  br i1 %cmp.i475, label %if.then1.i477, label %if.end11.i

if.then1.i477:                                    ; preds = %if.end.i476
  %979 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i471, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %979, i32 0, i32 0
  %980 = load i8*, i8** %m_p.i, align 8
  %981 = load i64, i64* %orig_size.i, align 8
  %982 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i471, align 8
  %m_element_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %982, i32 0, i32 3
  %983 = load i32, i32* %m_element_size.i, align 8
  %conv.i = zext i32 %983 to i64
  %mul.i = mul i64 %981, %conv.i
  %add.ptr.i = getelementptr inbounds i8, i8* %980, i64 %mul.i
  %984 = load i8*, i8** %pElements.addr.i, align 8
  %985 = load i64, i64* %n.addr.i, align 8
  %986 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i471, align 8
  %m_element_size2.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %986, i32 0, i32 3
  %987 = load i32, i32* %m_element_size2.i, align 8
  %conv3.i = zext i32 %987 to i64
  %mul4.i = mul i64 %985, %conv3.i
  %988 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i471, align 8
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %988, i32 0, i32 0
  %989 = load i8*, i8** %m_p5.i, align 8
  %990 = load i64, i64* %orig_size.i, align 8
  %991 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i471, align 8
  %m_element_size6.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %991, i32 0, i32 3
  %992 = load i32, i32* %m_element_size6.i, align 8
  %conv7.i = zext i32 %992 to i64
  %mul8.i = mul i64 %990, %conv7.i
  %add.ptr9.i = getelementptr inbounds i8, i8* %989, i64 %mul8.i
  %993 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i, i1 false) #10
  %call10.i = call i8* @__memcpy_chk(i8* %add.ptr.i, i8* %984, i64 %mul4.i, i64 %993) #10
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then1.i477, %if.end.i476
  store i32 1, i32* %retval.i469, align 4
  br label %mz_zip_array_push_back.exit

mz_zip_array_push_back.exit:                      ; preds = %if.then.i474, %if.end11.i
  %994 = load i32, i32* %retval.i469, align 4
  %tobool445 = icmp ne i32 %994, 0
  br i1 %tobool445, label %if.end450, label %if.then446

if.then446:                                       ; preds = %mz_zip_array_push_back.exit
  %995 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %996 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir447 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %996, i32 0, i32 0
  %997 = load i64, i64* %orig_central_dir_size, align 8
  store %struct.mz_zip_archive* %995, %struct.mz_zip_archive** %pZip.addr.i459, align 8
  store %struct.mz_zip_array* %m_central_dir447, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i64 %997, i64* %new_size.addr.i, align 8
  store i32 0, i32* %growing.addr.i, align 4
  %998 = load i64, i64* %new_size.addr.i, align 8
  %999 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_capacity.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %999, i32 0, i32 2
  %1000 = load i64, i64* %m_capacity.i, align 8
  %cmp.i = icmp ugt i64 %998, %1000
  br i1 %cmp.i, label %if.then.i461, label %if.end2.i

if.then.i461:                                     ; preds = %if.then446
  %1001 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i459, align 8
  %1002 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %1003 = load i64, i64* %new_size.addr.i, align 8
  %1004 = load i32, i32* %growing.addr.i, align 4
  %call.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %1001, %struct.mz_zip_array* %1002, i64 %1003, i32 %1004) #10
  %tobool.i460 = icmp ne i32 %call.i, 0
  br i1 %tobool.i460, label %if.end.i, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i461
  store i32 0, i32* %retval.i, align 4
  br label %mz_zip_array_resize.exit

if.end.i:                                         ; preds = %if.then.i461
  br label %if.end2.i

if.end2.i:                                        ; preds = %if.end.i, %if.then446
  %1005 = load i64, i64* %new_size.addr.i, align 8
  %1006 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %1006, i32 0, i32 1
  store i64 %1005, i64* %m_size.i, align 8
  store i32 1, i32* %retval.i, align 4
  br label %mz_zip_array_resize.exit

mz_zip_array_resize.exit:                         ; preds = %if.then1.i, %if.end2.i
  %1007 = load i32, i32* %retval.i, align 4
  %1008 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %1008, %struct.mz_zip_archive** %pZip.addr.i453, align 8
  store i32 16, i32* %err_num.addr.i454, align 4
  %1009 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i453, align 8
  %tobool.i455 = icmp ne %struct.mz_zip_archive* %1009, null
  br i1 %tobool.i455, label %if.then.i457, label %mz_zip_set_error.exit458

if.then.i457:                                     ; preds = %mz_zip_array_resize.exit
  %1010 = load i32, i32* %err_num.addr.i454, align 4
  %1011 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i453, align 8
  %m_last_error.i456 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1011, i32 0, i32 5
  store i32 %1010, i32* %m_last_error.i456, align 4
  br label %mz_zip_set_error.exit458

mz_zip_set_error.exit458:                         ; preds = %mz_zip_array_resize.exit, %if.then.i457
  store i32 0, i32* %retval, align 4
  br label %return

if.end450:                                        ; preds = %mz_zip_array_push_back.exit
  %1012 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files451 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1012, i32 0, i32 2
  %1013 = load i32, i32* %m_total_files451, align 8
  %inc = add i32 %1013, 1
  store i32 %inc, i32* %m_total_files451, align 8
  %1014 = load i64, i64* %cur_dst_file_ofs, align 8
  %1015 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size452 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1015, i32 0, i32 0
  store i64 %1014, i64* %m_archive_size452, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end450, %mz_zip_set_error.exit458, %mz_zip_set_error.exit499, %mz_zip_set_error.exit528, %mz_zip_set_error.exit615, %mz_zip_set_error.exit682, %mz_zip_set_error.exit689, %mz_zip_set_error.exit797, %mz_zip_set_error.exit904, %mz_zip_set_error.exit1043, %mz_zip_set_error.exit1216, %if.then355, %mz_zip_set_error.exit1036, %mz_zip_set_error.exit897, %mz_zip_set_error.exit890, %mz_zip_set_error.exit839, %mz_zip_set_error.exit832, %mz_zip_set_error.exit819, %mz_zip_set_error.exit790, %if.then176, %mz_zip_set_error.exit783, %mz_zip_set_error.exit770, %mz_zip_set_error.exit757, %mz_zip_set_error.exit744, %mz_zip_set_error.exit731, %mz_zip_set_error.exit718, %mz_zip_set_error.exit673, %mz_zip_set_error.exit666, %if.then56, %mz_zip_set_error.exit608, %mz_zip_set_error.exit601, %mz_zip_set_error.exit550, %mz_zip_set_error.exit521, %mz_zip_set_error.exit492, %mz_zip_set_error.exit468, %mz_zip_set_error.exit
  %1016 = load i32, i32* %retval, align 4
  ret i32 %1016
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_update_zip64_extension_block(%struct.mz_zip_array* %pNew_ext, %struct.mz_zip_archive* %pZip, i8* %pExt, i32 %ext_len, i64* %pComp_size, i64* %pUncomp_size, i64* %pLocal_header_ofs, i32* %pDisk_start) #0 {
entry:
  %p.addr.i2.i229 = alloca i8*, align 8
  %v.addr.i3.i230 = alloca i32, align 4
  %p.addr.i.i231 = alloca i8*, align 8
  %v.addr.i.i232 = alloca i32, align 4
  %p.addr.i233 = alloca i8*, align 8
  %v.addr.i234 = alloca i64, align 8
  %p.addr.i223 = alloca i8*, align 8
  %v.addr.i224 = alloca i32, align 4
  %p.addr.i216 = alloca i8*, align 8
  %v.addr.i217 = alloca i16, align 2
  %p.addr.i2.i186 = alloca i8*, align 8
  %v.addr.i3.i187 = alloca i32, align 4
  %p.addr.i.i188 = alloca i8*, align 8
  %v.addr.i.i189 = alloca i32, align 4
  %p.addr.i190 = alloca i8*, align 8
  %v.addr.i191 = alloca i64, align 8
  %p.addr.i2.i = alloca i8*, align 8
  %v.addr.i3.i = alloca i32, align 4
  %p.addr.i.i = alloca i8*, align 8
  %v.addr.i.i = alloca i32, align 4
  %p.addr.i180 = alloca i8*, align 8
  %v.addr.i181 = alloca i64, align 8
  %retval.i.i136 = alloca i32, align 4
  %pZip.addr.i.i137 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i138 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i139 = alloca i64, align 8
  %growing.addr.i.i140 = alloca i32, align 4
  %retval.i141 = alloca i32, align 4
  %pZip.addr.i142 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i143 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i144 = alloca i8*, align 8
  %n.addr.i145 = alloca i64, align 8
  %orig_size.i146 = alloca i64, align 8
  %pZip.addr.i129 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i130 = alloca i32, align 4
  %pZip.addr.i122 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i123 = alloca i32, align 4
  %pZip.addr.i115 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i116 = alloca i32, align 4
  %p.addr.i108 = alloca i8*, align 8
  %v.addr.i109 = alloca i16, align 2
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i16, align 2
  %retval.i94 = alloca i32, align 4
  %pZip.addr.i95 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i96 = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i = alloca i64, align 8
  %growing.addr.i97 = alloca i32, align 4
  %retval.i.i = alloca i32, align 4
  %pZip.addr.i.i = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i.i = alloca %struct.mz_zip_array*, align 8
  %new_size.addr.i.i = alloca i64, align 8
  %growing.addr.i.i = alloca i32, align 4
  %retval.i86 = alloca i32, align 4
  %pZip.addr.i87 = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i88 = alloca %struct.mz_zip_array*, align 8
  %pElements.addr.i = alloca i8*, align 8
  %n.addr.i = alloca i64, align 8
  %orig_size.i = alloca i64, align 8
  %pZip.addr.i79 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i80 = alloca i32, align 4
  %pZip.addr.i75 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval.i = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr.i = alloca %struct.mz_zip_array*, align 8
  %new_capacity.addr.i = alloca i64, align 8
  %growing.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pNew_ext.addr = alloca %struct.mz_zip_array*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pExt.addr = alloca i8*, align 8
  %ext_len.addr = alloca i32, align 4
  %pComp_size.addr = alloca i64*, align 8
  %pUncomp_size.addr = alloca i64*, align 8
  %pLocal_header_ofs.addr = alloca i64*, align 8
  %pDisk_start.addr = alloca i32*, align 8
  %new_ext_block = alloca [64 x i8], align 16
  %pDst = alloca i8*, align 8
  %extra_size_remaining = alloca i32, align 4
  %pExtra_data = alloca i8*, align 8
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  %field_total_size = alloca i32, align 4
  store %struct.mz_zip_array* %pNew_ext, %struct.mz_zip_array** %pNew_ext.addr, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pExt, i8** %pExt.addr, align 8
  store i32 %ext_len, i32* %ext_len.addr, align 4
  store i64* %pComp_size, i64** %pComp_size.addr, align 8
  store i64* %pUncomp_size, i64** %pUncomp_size.addr, align 8
  store i64* %pLocal_header_ofs, i64** %pLocal_header_ofs.addr, align 8
  store i32* %pDisk_start, i32** %pDisk_start.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pNew_ext.addr, align 8
  %2 = load i32, i32* %ext_len.addr, align 4
  %add = add i32 %2, 64
  %conv = zext i32 %add to i64
  store %struct.mz_zip_archive* %0, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store %struct.mz_zip_array* %1, %struct.mz_zip_array** %pArray.addr.i, align 8
  store i64 %conv, i64* %new_capacity.addr.i, align 8
  store i32 0, i32* %growing.addr.i, align 4
  %3 = load i64, i64* %new_capacity.addr.i, align 8
  %4 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %m_capacity.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %4, i32 0, i32 2
  %5 = load i64, i64* %m_capacity.i, align 8
  %cmp.i = icmp ugt i64 %3, %5
  br i1 %cmp.i, label %if.then.i, label %if.end2.i

if.then.i:                                        ; preds = %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %7 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i, align 8
  %8 = load i64, i64* %new_capacity.addr.i, align 8
  %9 = load i32, i32* %growing.addr.i, align 4
  %call.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %6, %struct.mz_zip_array* %7, i64 %8, i32 %9) #10
  %tobool.i = icmp ne i32 %call.i, 0
  br i1 %tobool.i, label %if.end.i, label %if.then1.i

if.then1.i:                                       ; preds = %if.then.i
  store i32 0, i32* %retval.i, align 4
  br label %mz_zip_array_reserve.exit

if.end.i:                                         ; preds = %if.then.i
  br label %if.end2.i

if.end2.i:                                        ; preds = %if.end.i, %entry
  store i32 1, i32* %retval.i, align 4
  br label %mz_zip_array_reserve.exit

mz_zip_array_reserve.exit:                        ; preds = %if.then1.i, %if.end2.i
  %10 = load i32, i32* %retval.i, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %mz_zip_array_reserve.exit
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %11, %struct.mz_zip_archive** %pZip.addr.i75, align 8
  store i32 16, i32* %err_num.addr.i, align 4
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i75, align 8
  %tobool.i76 = icmp ne %struct.mz_zip_archive* %12, null
  br i1 %tobool.i76, label %if.then.i77, label %mz_zip_set_error.exit

if.then.i77:                                      ; preds = %if.then
  %13 = load i32, i32* %err_num.addr.i, align 4
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i75, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 5
  store i32 %13, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i77
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %mz_zip_array_reserve.exit
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %16 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pNew_ext.addr, align 8
  store %struct.mz_zip_archive* %15, %struct.mz_zip_archive** %pZip.addr.i95, align 8
  store %struct.mz_zip_array* %16, %struct.mz_zip_array** %pArray.addr.i96, align 8
  store i64 0, i64* %new_size.addr.i, align 8
  store i32 0, i32* %growing.addr.i97, align 4
  %17 = load i64, i64* %new_size.addr.i, align 8
  %18 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i96, align 8
  %m_capacity.i98 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %18, i32 0, i32 2
  %19 = load i64, i64* %m_capacity.i98, align 8
  %cmp.i99 = icmp ugt i64 %17, %19
  br i1 %cmp.i99, label %if.then.i102, label %if.end2.i106

if.then.i102:                                     ; preds = %if.end
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i95, align 8
  %21 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i96, align 8
  %22 = load i64, i64* %new_size.addr.i, align 8
  %23 = load i32, i32* %growing.addr.i97, align 4
  %call.i100 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %20, %struct.mz_zip_array* %21, i64 %22, i32 %23) #10
  %tobool.i101 = icmp ne i32 %call.i100, 0
  br i1 %tobool.i101, label %if.end.i104, label %if.then1.i103

if.then1.i103:                                    ; preds = %if.then.i102
  store i32 0, i32* %retval.i94, align 4
  br label %mz_zip_array_resize.exit

if.end.i104:                                      ; preds = %if.then.i102
  br label %if.end2.i106

if.end2.i106:                                     ; preds = %if.end.i104, %if.end
  %24 = load i64, i64* %new_size.addr.i, align 8
  %25 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i96, align 8
  %m_size.i105 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %25, i32 0, i32 1
  store i64 %24, i64* %m_size.i105, align 8
  store i32 1, i32* %retval.i94, align 4
  br label %mz_zip_array_resize.exit

mz_zip_array_resize.exit:                         ; preds = %if.then1.i103, %if.end2.i106
  %26 = load i32, i32* %retval.i94, align 4
  %27 = load i64*, i64** %pUncomp_size.addr, align 8
  %tobool3 = icmp ne i64* %27, null
  br i1 %tobool3, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %mz_zip_array_resize.exit
  %28 = load i64*, i64** %pComp_size.addr, align 8
  %tobool4 = icmp ne i64* %28, null
  br i1 %tobool4, label %if.then9, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %29 = load i64*, i64** %pLocal_header_ofs.addr, align 8
  %tobool6 = icmp ne i64* %29, null
  br i1 %tobool6, label %if.then9, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %lor.lhs.false5
  %30 = load i32*, i32** %pDisk_start.addr, align 8
  %tobool8 = icmp ne i32* %30, null
  br i1 %tobool8, label %if.then9, label %if.end41

if.then9:                                         ; preds = %lor.lhs.false7, %lor.lhs.false5, %lor.lhs.false, %mz_zip_array_resize.exit
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i32 0, i32 0
  store i8* %arraydecay, i8** %pDst, align 8
  %31 = load i8*, i8** %pDst, align 8
  store i8* %31, i8** %p.addr.i, align 8
  store i16 1, i16* %v.addr.i, align 2
  %32 = load i16, i16* %v.addr.i, align 2
  %conv.i107 = trunc i16 %32 to i8
  %33 = load i8*, i8** %p.addr.i, align 8
  store i8 %conv.i107, i8* %33, align 1
  %34 = load i16, i16* %v.addr.i, align 2
  %conv1.i = zext i16 %34 to i32
  %shr.i = ashr i32 %conv1.i, 8
  %conv2.i = trunc i32 %shr.i to i8
  %35 = load i8*, i8** %p.addr.i, align 8
  %arrayidx3.i = getelementptr inbounds i8, i8* %35, i64 1
  store i8 %conv2.i, i8* %arrayidx3.i, align 1
  %36 = load i8*, i8** %pDst, align 8
  %add.ptr = getelementptr inbounds i8, i8* %36, i64 2
  store i8* %add.ptr, i8** %p.addr.i108, align 8
  store i16 0, i16* %v.addr.i109, align 2
  %37 = load i16, i16* %v.addr.i109, align 2
  %conv.i110 = trunc i16 %37 to i8
  %38 = load i8*, i8** %p.addr.i108, align 8
  store i8 %conv.i110, i8* %38, align 1
  %39 = load i16, i16* %v.addr.i109, align 2
  %conv1.i111 = zext i16 %39 to i32
  %shr.i112 = ashr i32 %conv1.i111, 8
  %conv2.i113 = trunc i32 %shr.i112 to i8
  %40 = load i8*, i8** %p.addr.i108, align 8
  %arrayidx3.i114 = getelementptr inbounds i8, i8* %40, i64 1
  store i8 %conv2.i113, i8* %arrayidx3.i114, align 1
  %41 = load i8*, i8** %pDst, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %41, i64 4
  store i8* %add.ptr10, i8** %pDst, align 8
  %42 = load i64*, i64** %pUncomp_size.addr, align 8
  %tobool11 = icmp ne i64* %42, null
  br i1 %tobool11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.then9
  %43 = load i8*, i8** %pDst, align 8
  %44 = load i64*, i64** %pUncomp_size.addr, align 8
  %45 = load i64, i64* %44, align 8
  store i8* %43, i8** %p.addr.i180, align 8
  store i64 %45, i64* %v.addr.i181, align 8
  %46 = load i8*, i8** %p.addr.i180, align 8
  %47 = load i64, i64* %v.addr.i181, align 8
  %conv.i182 = trunc i64 %47 to i32
  store i8* %46, i8** %p.addr.i.i, align 8
  store i32 %conv.i182, i32* %v.addr.i.i, align 4
  %48 = load i32, i32* %v.addr.i.i, align 4
  %conv.i.i = trunc i32 %48 to i8
  %49 = load i8*, i8** %p.addr.i.i, align 8
  store i8 %conv.i.i, i8* %49, align 1
  %50 = load i32, i32* %v.addr.i.i, align 4
  %shr.i.i = lshr i32 %50, 8
  %conv1.i.i = trunc i32 %shr.i.i to i8
  %51 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx2.i.i = getelementptr inbounds i8, i8* %51, i64 1
  store i8 %conv1.i.i, i8* %arrayidx2.i.i, align 1
  %52 = load i32, i32* %v.addr.i.i, align 4
  %shr3.i.i = lshr i32 %52, 16
  %conv4.i.i = trunc i32 %shr3.i.i to i8
  %53 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i8, i8* %53, i64 2
  store i8 %conv4.i.i, i8* %arrayidx5.i.i, align 1
  %54 = load i32, i32* %v.addr.i.i, align 4
  %shr6.i.i = lshr i32 %54, 24
  %conv7.i.i = trunc i32 %shr6.i.i to i8
  %55 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx8.i.i = getelementptr inbounds i8, i8* %55, i64 3
  store i8 %conv7.i.i, i8* %arrayidx8.i.i, align 1
  %56 = load i8*, i8** %p.addr.i180, align 8
  %add.ptr.i183 = getelementptr inbounds i8, i8* %56, i64 4
  %57 = load i64, i64* %v.addr.i181, align 8
  %shr.i184 = lshr i64 %57, 32
  %conv1.i185 = trunc i64 %shr.i184 to i32
  store i8* %add.ptr.i183, i8** %p.addr.i2.i, align 8
  store i32 %conv1.i185, i32* %v.addr.i3.i, align 4
  %58 = load i32, i32* %v.addr.i3.i, align 4
  %conv.i4.i = trunc i32 %58 to i8
  %59 = load i8*, i8** %p.addr.i2.i, align 8
  store i8 %conv.i4.i, i8* %59, align 1
  %60 = load i32, i32* %v.addr.i3.i, align 4
  %shr.i5.i = lshr i32 %60, 8
  %conv1.i6.i = trunc i32 %shr.i5.i to i8
  %61 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx2.i7.i = getelementptr inbounds i8, i8* %61, i64 1
  store i8 %conv1.i6.i, i8* %arrayidx2.i7.i, align 1
  %62 = load i32, i32* %v.addr.i3.i, align 4
  %shr3.i8.i = lshr i32 %62, 16
  %conv4.i9.i = trunc i32 %shr3.i8.i to i8
  %63 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx5.i10.i = getelementptr inbounds i8, i8* %63, i64 2
  store i8 %conv4.i9.i, i8* %arrayidx5.i10.i, align 1
  %64 = load i32, i32* %v.addr.i3.i, align 4
  %shr6.i11.i = lshr i32 %64, 24
  %conv7.i12.i = trunc i32 %shr6.i11.i to i8
  %65 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx8.i13.i = getelementptr inbounds i8, i8* %65, i64 3
  store i8 %conv7.i12.i, i8* %arrayidx8.i13.i, align 1
  %66 = load i8*, i8** %pDst, align 8
  %add.ptr13 = getelementptr inbounds i8, i8* %66, i64 8
  store i8* %add.ptr13, i8** %pDst, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.then9
  %67 = load i64*, i64** %pComp_size.addr, align 8
  %tobool15 = icmp ne i64* %67, null
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %68 = load i8*, i8** %pDst, align 8
  %69 = load i64*, i64** %pComp_size.addr, align 8
  %70 = load i64, i64* %69, align 8
  store i8* %68, i8** %p.addr.i190, align 8
  store i64 %70, i64* %v.addr.i191, align 8
  %71 = load i8*, i8** %p.addr.i190, align 8
  %72 = load i64, i64* %v.addr.i191, align 8
  %conv.i192 = trunc i64 %72 to i32
  store i8* %71, i8** %p.addr.i.i188, align 8
  store i32 %conv.i192, i32* %v.addr.i.i189, align 4
  %73 = load i32, i32* %v.addr.i.i189, align 4
  %conv.i.i193 = trunc i32 %73 to i8
  %74 = load i8*, i8** %p.addr.i.i188, align 8
  store i8 %conv.i.i193, i8* %74, align 1
  %75 = load i32, i32* %v.addr.i.i189, align 4
  %shr.i.i194 = lshr i32 %75, 8
  %conv1.i.i195 = trunc i32 %shr.i.i194 to i8
  %76 = load i8*, i8** %p.addr.i.i188, align 8
  %arrayidx2.i.i196 = getelementptr inbounds i8, i8* %76, i64 1
  store i8 %conv1.i.i195, i8* %arrayidx2.i.i196, align 1
  %77 = load i32, i32* %v.addr.i.i189, align 4
  %shr3.i.i197 = lshr i32 %77, 16
  %conv4.i.i198 = trunc i32 %shr3.i.i197 to i8
  %78 = load i8*, i8** %p.addr.i.i188, align 8
  %arrayidx5.i.i199 = getelementptr inbounds i8, i8* %78, i64 2
  store i8 %conv4.i.i198, i8* %arrayidx5.i.i199, align 1
  %79 = load i32, i32* %v.addr.i.i189, align 4
  %shr6.i.i200 = lshr i32 %79, 24
  %conv7.i.i201 = trunc i32 %shr6.i.i200 to i8
  %80 = load i8*, i8** %p.addr.i.i188, align 8
  %arrayidx8.i.i202 = getelementptr inbounds i8, i8* %80, i64 3
  store i8 %conv7.i.i201, i8* %arrayidx8.i.i202, align 1
  %81 = load i8*, i8** %p.addr.i190, align 8
  %add.ptr.i203 = getelementptr inbounds i8, i8* %81, i64 4
  %82 = load i64, i64* %v.addr.i191, align 8
  %shr.i204 = lshr i64 %82, 32
  %conv1.i205 = trunc i64 %shr.i204 to i32
  store i8* %add.ptr.i203, i8** %p.addr.i2.i186, align 8
  store i32 %conv1.i205, i32* %v.addr.i3.i187, align 4
  %83 = load i32, i32* %v.addr.i3.i187, align 4
  %conv.i4.i206 = trunc i32 %83 to i8
  %84 = load i8*, i8** %p.addr.i2.i186, align 8
  store i8 %conv.i4.i206, i8* %84, align 1
  %85 = load i32, i32* %v.addr.i3.i187, align 4
  %shr.i5.i207 = lshr i32 %85, 8
  %conv1.i6.i208 = trunc i32 %shr.i5.i207 to i8
  %86 = load i8*, i8** %p.addr.i2.i186, align 8
  %arrayidx2.i7.i209 = getelementptr inbounds i8, i8* %86, i64 1
  store i8 %conv1.i6.i208, i8* %arrayidx2.i7.i209, align 1
  %87 = load i32, i32* %v.addr.i3.i187, align 4
  %shr3.i8.i210 = lshr i32 %87, 16
  %conv4.i9.i211 = trunc i32 %shr3.i8.i210 to i8
  %88 = load i8*, i8** %p.addr.i2.i186, align 8
  %arrayidx5.i10.i212 = getelementptr inbounds i8, i8* %88, i64 2
  store i8 %conv4.i9.i211, i8* %arrayidx5.i10.i212, align 1
  %89 = load i32, i32* %v.addr.i3.i187, align 4
  %shr6.i11.i213 = lshr i32 %89, 24
  %conv7.i12.i214 = trunc i32 %shr6.i11.i213 to i8
  %90 = load i8*, i8** %p.addr.i2.i186, align 8
  %arrayidx8.i13.i215 = getelementptr inbounds i8, i8* %90, i64 3
  store i8 %conv7.i12.i214, i8* %arrayidx8.i13.i215, align 1
  %91 = load i8*, i8** %pDst, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %91, i64 8
  store i8* %add.ptr17, i8** %pDst, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end14
  %92 = load i64*, i64** %pLocal_header_ofs.addr, align 8
  %tobool19 = icmp ne i64* %92, null
  br i1 %tobool19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end18
  %93 = load i8*, i8** %pDst, align 8
  %94 = load i64*, i64** %pLocal_header_ofs.addr, align 8
  %95 = load i64, i64* %94, align 8
  store i8* %93, i8** %p.addr.i233, align 8
  store i64 %95, i64* %v.addr.i234, align 8
  %96 = load i8*, i8** %p.addr.i233, align 8
  %97 = load i64, i64* %v.addr.i234, align 8
  %conv.i235 = trunc i64 %97 to i32
  store i8* %96, i8** %p.addr.i.i231, align 8
  store i32 %conv.i235, i32* %v.addr.i.i232, align 4
  %98 = load i32, i32* %v.addr.i.i232, align 4
  %conv.i.i236 = trunc i32 %98 to i8
  %99 = load i8*, i8** %p.addr.i.i231, align 8
  store i8 %conv.i.i236, i8* %99, align 1
  %100 = load i32, i32* %v.addr.i.i232, align 4
  %shr.i.i237 = lshr i32 %100, 8
  %conv1.i.i238 = trunc i32 %shr.i.i237 to i8
  %101 = load i8*, i8** %p.addr.i.i231, align 8
  %arrayidx2.i.i239 = getelementptr inbounds i8, i8* %101, i64 1
  store i8 %conv1.i.i238, i8* %arrayidx2.i.i239, align 1
  %102 = load i32, i32* %v.addr.i.i232, align 4
  %shr3.i.i240 = lshr i32 %102, 16
  %conv4.i.i241 = trunc i32 %shr3.i.i240 to i8
  %103 = load i8*, i8** %p.addr.i.i231, align 8
  %arrayidx5.i.i242 = getelementptr inbounds i8, i8* %103, i64 2
  store i8 %conv4.i.i241, i8* %arrayidx5.i.i242, align 1
  %104 = load i32, i32* %v.addr.i.i232, align 4
  %shr6.i.i243 = lshr i32 %104, 24
  %conv7.i.i244 = trunc i32 %shr6.i.i243 to i8
  %105 = load i8*, i8** %p.addr.i.i231, align 8
  %arrayidx8.i.i245 = getelementptr inbounds i8, i8* %105, i64 3
  store i8 %conv7.i.i244, i8* %arrayidx8.i.i245, align 1
  %106 = load i8*, i8** %p.addr.i233, align 8
  %add.ptr.i246 = getelementptr inbounds i8, i8* %106, i64 4
  %107 = load i64, i64* %v.addr.i234, align 8
  %shr.i247 = lshr i64 %107, 32
  %conv1.i248 = trunc i64 %shr.i247 to i32
  store i8* %add.ptr.i246, i8** %p.addr.i2.i229, align 8
  store i32 %conv1.i248, i32* %v.addr.i3.i230, align 4
  %108 = load i32, i32* %v.addr.i3.i230, align 4
  %conv.i4.i249 = trunc i32 %108 to i8
  %109 = load i8*, i8** %p.addr.i2.i229, align 8
  store i8 %conv.i4.i249, i8* %109, align 1
  %110 = load i32, i32* %v.addr.i3.i230, align 4
  %shr.i5.i250 = lshr i32 %110, 8
  %conv1.i6.i251 = trunc i32 %shr.i5.i250 to i8
  %111 = load i8*, i8** %p.addr.i2.i229, align 8
  %arrayidx2.i7.i252 = getelementptr inbounds i8, i8* %111, i64 1
  store i8 %conv1.i6.i251, i8* %arrayidx2.i7.i252, align 1
  %112 = load i32, i32* %v.addr.i3.i230, align 4
  %shr3.i8.i253 = lshr i32 %112, 16
  %conv4.i9.i254 = trunc i32 %shr3.i8.i253 to i8
  %113 = load i8*, i8** %p.addr.i2.i229, align 8
  %arrayidx5.i10.i255 = getelementptr inbounds i8, i8* %113, i64 2
  store i8 %conv4.i9.i254, i8* %arrayidx5.i10.i255, align 1
  %114 = load i32, i32* %v.addr.i3.i230, align 4
  %shr6.i11.i256 = lshr i32 %114, 24
  %conv7.i12.i257 = trunc i32 %shr6.i11.i256 to i8
  %115 = load i8*, i8** %p.addr.i2.i229, align 8
  %arrayidx8.i13.i258 = getelementptr inbounds i8, i8* %115, i64 3
  store i8 %conv7.i12.i257, i8* %arrayidx8.i13.i258, align 1
  %116 = load i8*, i8** %pDst, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %116, i64 8
  store i8* %add.ptr21, i8** %pDst, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.end18
  %117 = load i32*, i32** %pDisk_start.addr, align 8
  %tobool23 = icmp ne i32* %117, null
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end22
  %118 = load i8*, i8** %pDst, align 8
  %119 = load i32*, i32** %pDisk_start.addr, align 8
  %120 = load i32, i32* %119, align 4
  store i8* %118, i8** %p.addr.i223, align 8
  store i32 %120, i32* %v.addr.i224, align 4
  %121 = load i32, i32* %v.addr.i224, align 4
  %conv.i225 = trunc i32 %121 to i8
  %122 = load i8*, i8** %p.addr.i223, align 8
  store i8 %conv.i225, i8* %122, align 1
  %123 = load i32, i32* %v.addr.i224, align 4
  %shr.i226 = lshr i32 %123, 8
  %conv1.i227 = trunc i32 %shr.i226 to i8
  %124 = load i8*, i8** %p.addr.i223, align 8
  %arrayidx2.i = getelementptr inbounds i8, i8* %124, i64 1
  store i8 %conv1.i227, i8* %arrayidx2.i, align 1
  %125 = load i32, i32* %v.addr.i224, align 4
  %shr3.i = lshr i32 %125, 16
  %conv4.i = trunc i32 %shr3.i to i8
  %126 = load i8*, i8** %p.addr.i223, align 8
  %arrayidx5.i = getelementptr inbounds i8, i8* %126, i64 2
  store i8 %conv4.i, i8* %arrayidx5.i, align 1
  %127 = load i32, i32* %v.addr.i224, align 4
  %shr6.i = lshr i32 %127, 24
  %conv7.i228 = trunc i32 %shr6.i to i8
  %128 = load i8*, i8** %p.addr.i223, align 8
  %arrayidx8.i = getelementptr inbounds i8, i8* %128, i64 3
  store i8 %conv7.i228, i8* %arrayidx8.i, align 1
  %129 = load i8*, i8** %pDst, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %129, i64 4
  store i8* %add.ptr25, i8** %pDst, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.end22
  %arraydecay27 = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i32 0, i32 0
  %add.ptr28 = getelementptr inbounds i8, i8* %arraydecay27, i64 2
  %130 = load i8*, i8** %pDst, align 8
  %arraydecay29 = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %130 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub i64 %sub.ptr.sub, 4
  %conv30 = trunc i64 %sub to i16
  store i8* %add.ptr28, i8** %p.addr.i216, align 8
  store i16 %conv30, i16* %v.addr.i217, align 2
  %131 = load i16, i16* %v.addr.i217, align 2
  %conv.i218 = trunc i16 %131 to i8
  %132 = load i8*, i8** %p.addr.i216, align 8
  store i8 %conv.i218, i8* %132, align 1
  %133 = load i16, i16* %v.addr.i217, align 2
  %conv1.i219 = zext i16 %133 to i32
  %shr.i220 = ashr i32 %conv1.i219, 8
  %conv2.i221 = trunc i32 %shr.i220 to i8
  %134 = load i8*, i8** %p.addr.i216, align 8
  %arrayidx3.i222 = getelementptr inbounds i8, i8* %134, i64 1
  store i8 %conv2.i221, i8* %arrayidx3.i222, align 1
  %135 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %136 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pNew_ext.addr, align 8
  %arraydecay31 = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i32 0, i32 0
  %137 = load i8*, i8** %pDst, align 8
  %arraydecay32 = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i32 0, i32 0
  %sub.ptr.lhs.cast33 = ptrtoint i8* %137 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i8* %arraydecay32 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  store %struct.mz_zip_archive* %135, %struct.mz_zip_archive** %pZip.addr.i142, align 8
  store %struct.mz_zip_array* %136, %struct.mz_zip_array** %pArray.addr.i143, align 8
  store i8* %arraydecay31, i8** %pElements.addr.i144, align 8
  store i64 %sub.ptr.sub35, i64* %n.addr.i145, align 8
  %138 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i143, align 8
  %m_size.i147 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %138, i32 0, i32 1
  %139 = load i64, i64* %m_size.i147, align 8
  store i64 %139, i64* %orig_size.i146, align 8
  %140 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i142, align 8
  %141 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i143, align 8
  %142 = load i64, i64* %orig_size.i146, align 8
  %143 = load i64, i64* %n.addr.i145, align 8
  %add.i148 = add i64 %142, %143
  store %struct.mz_zip_archive* %140, %struct.mz_zip_archive** %pZip.addr.i.i137, align 8
  store %struct.mz_zip_array* %141, %struct.mz_zip_array** %pArray.addr.i.i138, align 8
  store i64 %add.i148, i64* %new_size.addr.i.i139, align 8
  store i32 1, i32* %growing.addr.i.i140, align 4
  %144 = load i64, i64* %new_size.addr.i.i139, align 8
  %145 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i138, align 8
  %m_capacity.i.i149 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %145, i32 0, i32 2
  %146 = load i64, i64* %m_capacity.i.i149, align 8
  %cmp.i.i150 = icmp ugt i64 %144, %146
  br i1 %cmp.i.i150, label %if.then.i.i153, label %if.end2.i.i157

if.then.i.i153:                                   ; preds = %if.end26
  %147 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i137, align 8
  %148 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i138, align 8
  %149 = load i64, i64* %new_size.addr.i.i139, align 8
  %150 = load i32, i32* %growing.addr.i.i140, align 4
  %call.i.i151 = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %147, %struct.mz_zip_array* %148, i64 %149, i32 %150) #10
  %tobool.i.i152 = icmp ne i32 %call.i.i151, 0
  br i1 %tobool.i.i152, label %if.end.i.i155, label %if.then1.i.i154

if.then1.i.i154:                                  ; preds = %if.then.i.i153
  store i32 0, i32* %retval.i.i136, align 4
  br label %mz_zip_array_resize.exit.i159

if.end.i.i155:                                    ; preds = %if.then.i.i153
  br label %if.end2.i.i157

if.end2.i.i157:                                   ; preds = %if.end.i.i155, %if.end26
  %151 = load i64, i64* %new_size.addr.i.i139, align 8
  %152 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i138, align 8
  %m_size.i.i156 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %152, i32 0, i32 1
  store i64 %151, i64* %m_size.i.i156, align 8
  store i32 1, i32* %retval.i.i136, align 4
  br label %mz_zip_array_resize.exit.i159

mz_zip_array_resize.exit.i159:                    ; preds = %if.end2.i.i157, %if.then1.i.i154
  %153 = load i32, i32* %retval.i.i136, align 4
  %tobool.i158 = icmp ne i32 %153, 0
  br i1 %tobool.i158, label %if.end.i162, label %if.then.i160

if.then.i160:                                     ; preds = %mz_zip_array_resize.exit.i159
  store i32 0, i32* %retval.i141, align 4
  br label %mz_zip_array_push_back.exit179

if.end.i162:                                      ; preds = %mz_zip_array_resize.exit.i159
  %154 = load i64, i64* %n.addr.i145, align 8
  %cmp.i161 = icmp ugt i64 %154, 0
  br i1 %cmp.i161, label %if.then1.i177, label %if.end11.i178

if.then1.i177:                                    ; preds = %if.end.i162
  %155 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i143, align 8
  %m_p.i163 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %155, i32 0, i32 0
  %156 = load i8*, i8** %m_p.i163, align 8
  %157 = load i64, i64* %orig_size.i146, align 8
  %158 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i143, align 8
  %m_element_size.i164 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %158, i32 0, i32 3
  %159 = load i32, i32* %m_element_size.i164, align 8
  %conv.i165 = zext i32 %159 to i64
  %mul.i166 = mul i64 %157, %conv.i165
  %add.ptr.i167 = getelementptr inbounds i8, i8* %156, i64 %mul.i166
  %160 = load i8*, i8** %pElements.addr.i144, align 8
  %161 = load i64, i64* %n.addr.i145, align 8
  %162 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i143, align 8
  %m_element_size2.i168 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %162, i32 0, i32 3
  %163 = load i32, i32* %m_element_size2.i168, align 8
  %conv3.i169 = zext i32 %163 to i64
  %mul4.i170 = mul i64 %161, %conv3.i169
  %164 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i143, align 8
  %m_p5.i171 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %164, i32 0, i32 0
  %165 = load i8*, i8** %m_p5.i171, align 8
  %166 = load i64, i64* %orig_size.i146, align 8
  %167 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i143, align 8
  %m_element_size6.i172 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %167, i32 0, i32 3
  %168 = load i32, i32* %m_element_size6.i172, align 8
  %conv7.i173 = zext i32 %168 to i64
  %mul8.i174 = mul i64 %166, %conv7.i173
  %add.ptr9.i175 = getelementptr inbounds i8, i8* %165, i64 %mul8.i174
  %169 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i175, i1 false) #10
  %call10.i176 = call i8* @__memcpy_chk(i8* %add.ptr.i167, i8* %160, i64 %mul4.i170, i64 %169) #10
  br label %if.end11.i178

if.end11.i178:                                    ; preds = %if.then1.i177, %if.end.i162
  store i32 1, i32* %retval.i141, align 4
  br label %mz_zip_array_push_back.exit179

mz_zip_array_push_back.exit179:                   ; preds = %if.then.i160, %if.end11.i178
  %170 = load i32, i32* %retval.i141, align 4
  %tobool37 = icmp ne i32 %170, 0
  br i1 %tobool37, label %if.end40, label %if.then38

if.then38:                                        ; preds = %mz_zip_array_push_back.exit179
  %171 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %171, %struct.mz_zip_archive** %pZip.addr.i129, align 8
  store i32 16, i32* %err_num.addr.i130, align 4
  %172 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i129, align 8
  %tobool.i131 = icmp ne %struct.mz_zip_archive* %172, null
  br i1 %tobool.i131, label %if.then.i133, label %mz_zip_set_error.exit135

if.then.i133:                                     ; preds = %if.then38
  %173 = load i32, i32* %err_num.addr.i130, align 4
  %174 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i129, align 8
  %m_last_error.i132 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %174, i32 0, i32 5
  store i32 %173, i32* %m_last_error.i132, align 4
  br label %mz_zip_set_error.exit135

mz_zip_set_error.exit135:                         ; preds = %if.then38, %if.then.i133
  store i32 0, i32* %retval, align 4
  br label %return

if.end40:                                         ; preds = %mz_zip_array_push_back.exit179
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %lor.lhs.false7
  %175 = load i8*, i8** %pExt.addr, align 8
  %tobool42 = icmp ne i8* %175, null
  br i1 %tobool42, label %land.lhs.true, label %if.end74

land.lhs.true:                                    ; preds = %if.end41
  %176 = load i32, i32* %ext_len.addr, align 4
  %tobool43 = icmp ne i32 %176, 0
  br i1 %tobool43, label %if.then44, label %if.end74

if.then44:                                        ; preds = %land.lhs.true
  %177 = load i32, i32* %ext_len.addr, align 4
  store i32 %177, i32* %extra_size_remaining, align 4
  %178 = load i8*, i8** %pExt.addr, align 8
  store i8* %178, i8** %pExtra_data, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then44
  %179 = load i32, i32* %extra_size_remaining, align 4
  %conv45 = zext i32 %179 to i64
  %cmp = icmp ult i64 %conv45, 4
  br i1 %cmp, label %if.then47, label %if.end49

if.then47:                                        ; preds = %do.body
  %180 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %180, %struct.mz_zip_archive** %pZip.addr.i122, align 8
  store i32 9, i32* %err_num.addr.i123, align 4
  %181 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i122, align 8
  %tobool.i124 = icmp ne %struct.mz_zip_archive* %181, null
  br i1 %tobool.i124, label %if.then.i126, label %mz_zip_set_error.exit128

if.then.i126:                                     ; preds = %if.then47
  %182 = load i32, i32* %err_num.addr.i123, align 4
  %183 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i122, align 8
  %m_last_error.i125 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %183, i32 0, i32 5
  store i32 %182, i32* %m_last_error.i125, align 4
  br label %mz_zip_set_error.exit128

mz_zip_set_error.exit128:                         ; preds = %if.then47, %if.then.i126
  store i32 0, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %do.body
  %184 = load i8*, i8** %pExtra_data, align 8
  %185 = bitcast i8* %184 to i16*
  %186 = load i16, i16* %185, align 2
  %conv50 = zext i16 %186 to i32
  store i32 %conv50, i32* %field_id, align 4
  %187 = load i8*, i8** %pExtra_data, align 8
  %add.ptr51 = getelementptr inbounds i8, i8* %187, i64 2
  %188 = bitcast i8* %add.ptr51 to i16*
  %189 = load i16, i16* %188, align 2
  %conv52 = zext i16 %189 to i32
  store i32 %conv52, i32* %field_data_size, align 4
  %190 = load i32, i32* %field_data_size, align 4
  %conv53 = zext i32 %190 to i64
  %add54 = add i64 %conv53, 4
  %conv55 = trunc i64 %add54 to i32
  store i32 %conv55, i32* %field_total_size, align 4
  %191 = load i32, i32* %field_total_size, align 4
  %192 = load i32, i32* %extra_size_remaining, align 4
  %cmp56 = icmp ugt i32 %191, %192
  br i1 %cmp56, label %if.then58, label %if.end60

if.then58:                                        ; preds = %if.end49
  %193 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %193, %struct.mz_zip_archive** %pZip.addr.i115, align 8
  store i32 9, i32* %err_num.addr.i116, align 4
  %194 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i115, align 8
  %tobool.i117 = icmp ne %struct.mz_zip_archive* %194, null
  br i1 %tobool.i117, label %if.then.i119, label %mz_zip_set_error.exit121

if.then.i119:                                     ; preds = %if.then58
  %195 = load i32, i32* %err_num.addr.i116, align 4
  %196 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i115, align 8
  %m_last_error.i118 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %196, i32 0, i32 5
  store i32 %195, i32* %m_last_error.i118, align 4
  br label %mz_zip_set_error.exit121

mz_zip_set_error.exit121:                         ; preds = %if.then58, %if.then.i119
  store i32 0, i32* %retval, align 4
  br label %return

if.end60:                                         ; preds = %if.end49
  %197 = load i32, i32* %field_id, align 4
  %cmp61 = icmp ne i32 %197, 1
  br i1 %cmp61, label %if.then63, label %if.end70

if.then63:                                        ; preds = %if.end60
  %198 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %199 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pNew_ext.addr, align 8
  %200 = load i8*, i8** %pExtra_data, align 8
  %201 = load i32, i32* %field_total_size, align 4
  %conv64 = zext i32 %201 to i64
  store %struct.mz_zip_archive* %198, %struct.mz_zip_archive** %pZip.addr.i87, align 8
  store %struct.mz_zip_array* %199, %struct.mz_zip_array** %pArray.addr.i88, align 8
  store i8* %200, i8** %pElements.addr.i, align 8
  store i64 %conv64, i64* %n.addr.i, align 8
  %202 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i88, align 8
  %m_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %202, i32 0, i32 1
  %203 = load i64, i64* %m_size.i, align 8
  store i64 %203, i64* %orig_size.i, align 8
  %204 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i87, align 8
  %205 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i88, align 8
  %206 = load i64, i64* %orig_size.i, align 8
  %207 = load i64, i64* %n.addr.i, align 8
  %add.i = add i64 %206, %207
  store %struct.mz_zip_archive* %204, %struct.mz_zip_archive** %pZip.addr.i.i, align 8
  store %struct.mz_zip_array* %205, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  store i64 %add.i, i64* %new_size.addr.i.i, align 8
  store i32 1, i32* %growing.addr.i.i, align 4
  %208 = load i64, i64* %new_size.addr.i.i, align 8
  %209 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_capacity.i.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %209, i32 0, i32 2
  %210 = load i64, i64* %m_capacity.i.i, align 8
  %cmp.i.i = icmp ugt i64 %208, %210
  br i1 %cmp.i.i, label %if.then.i.i, label %if.end2.i.i

if.then.i.i:                                      ; preds = %if.then63
  %211 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i.i, align 8
  %212 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %213 = load i64, i64* %new_size.addr.i.i, align 8
  %214 = load i32, i32* %growing.addr.i.i, align 4
  %call.i.i = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %211, %struct.mz_zip_array* %212, i64 %213, i32 %214) #10
  %tobool.i.i = icmp ne i32 %call.i.i, 0
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then1.i.i

if.then1.i.i:                                     ; preds = %if.then.i.i
  store i32 0, i32* %retval.i.i, align 4
  br label %mz_zip_array_resize.exit.i

if.end.i.i:                                       ; preds = %if.then.i.i
  br label %if.end2.i.i

if.end2.i.i:                                      ; preds = %if.end.i.i, %if.then63
  %215 = load i64, i64* %new_size.addr.i.i, align 8
  %216 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i.i, align 8
  %m_size.i.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %216, i32 0, i32 1
  store i64 %215, i64* %m_size.i.i, align 8
  store i32 1, i32* %retval.i.i, align 4
  br label %mz_zip_array_resize.exit.i

mz_zip_array_resize.exit.i:                       ; preds = %if.end2.i.i, %if.then1.i.i
  %217 = load i32, i32* %retval.i.i, align 4
  %tobool.i89 = icmp ne i32 %217, 0
  br i1 %tobool.i89, label %if.end.i92, label %if.then.i90

if.then.i90:                                      ; preds = %mz_zip_array_resize.exit.i
  store i32 0, i32* %retval.i86, align 4
  br label %mz_zip_array_push_back.exit

if.end.i92:                                       ; preds = %mz_zip_array_resize.exit.i
  %218 = load i64, i64* %n.addr.i, align 8
  %cmp.i91 = icmp ugt i64 %218, 0
  br i1 %cmp.i91, label %if.then1.i93, label %if.end11.i

if.then1.i93:                                     ; preds = %if.end.i92
  %219 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i88, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %219, i32 0, i32 0
  %220 = load i8*, i8** %m_p.i, align 8
  %221 = load i64, i64* %orig_size.i, align 8
  %222 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i88, align 8
  %m_element_size.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %222, i32 0, i32 3
  %223 = load i32, i32* %m_element_size.i, align 8
  %conv.i = zext i32 %223 to i64
  %mul.i = mul i64 %221, %conv.i
  %add.ptr.i = getelementptr inbounds i8, i8* %220, i64 %mul.i
  %224 = load i8*, i8** %pElements.addr.i, align 8
  %225 = load i64, i64* %n.addr.i, align 8
  %226 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i88, align 8
  %m_element_size2.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %226, i32 0, i32 3
  %227 = load i32, i32* %m_element_size2.i, align 8
  %conv3.i = zext i32 %227 to i64
  %mul4.i = mul i64 %225, %conv3.i
  %228 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i88, align 8
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %228, i32 0, i32 0
  %229 = load i8*, i8** %m_p5.i, align 8
  %230 = load i64, i64* %orig_size.i, align 8
  %231 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr.i88, align 8
  %m_element_size6.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %231, i32 0, i32 3
  %232 = load i32, i32* %m_element_size6.i, align 8
  %conv7.i = zext i32 %232 to i64
  %mul8.i = mul i64 %230, %conv7.i
  %add.ptr9.i = getelementptr inbounds i8, i8* %229, i64 %mul8.i
  %233 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9.i, i1 false) #10
  %call10.i = call i8* @__memcpy_chk(i8* %add.ptr.i, i8* %224, i64 %mul4.i, i64 %233) #10
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then1.i93, %if.end.i92
  store i32 1, i32* %retval.i86, align 4
  br label %mz_zip_array_push_back.exit

mz_zip_array_push_back.exit:                      ; preds = %if.then.i90, %if.end11.i
  %234 = load i32, i32* %retval.i86, align 4
  %tobool66 = icmp ne i32 %234, 0
  br i1 %tobool66, label %if.end69, label %if.then67

if.then67:                                        ; preds = %mz_zip_array_push_back.exit
  %235 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %235, %struct.mz_zip_archive** %pZip.addr.i79, align 8
  store i32 16, i32* %err_num.addr.i80, align 4
  %236 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i79, align 8
  %tobool.i81 = icmp ne %struct.mz_zip_archive* %236, null
  br i1 %tobool.i81, label %if.then.i83, label %mz_zip_set_error.exit85

if.then.i83:                                      ; preds = %if.then67
  %237 = load i32, i32* %err_num.addr.i80, align 4
  %238 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i79, align 8
  %m_last_error.i82 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %238, i32 0, i32 5
  store i32 %237, i32* %m_last_error.i82, align 4
  br label %mz_zip_set_error.exit85

mz_zip_set_error.exit85:                          ; preds = %if.then67, %if.then.i83
  store i32 0, i32* %retval, align 4
  br label %return

if.end69:                                         ; preds = %mz_zip_array_push_back.exit
  br label %if.end70

if.end70:                                         ; preds = %if.end69, %if.end60
  %239 = load i32, i32* %field_total_size, align 4
  %240 = load i8*, i8** %pExtra_data, align 8
  %idx.ext = zext i32 %239 to i64
  %add.ptr71 = getelementptr inbounds i8, i8* %240, i64 %idx.ext
  store i8* %add.ptr71, i8** %pExtra_data, align 8
  %241 = load i32, i32* %field_total_size, align 4
  %242 = load i32, i32* %extra_size_remaining, align 4
  %sub72 = sub i32 %242, %241
  store i32 %sub72, i32* %extra_size_remaining, align 4
  br label %do.cond

do.cond:                                          ; preds = %if.end70
  %243 = load i32, i32* %extra_size_remaining, align 4
  %tobool73 = icmp ne i32 %243, 0
  br i1 %tobool73, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end74

if.end74:                                         ; preds = %do.end, %land.lhs.true, %if.end41
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end74, %mz_zip_set_error.exit85, %mz_zip_set_error.exit121, %mz_zip_set_error.exit128, %mz_zip_set_error.exit135, %mz_zip_set_error.exit
  %244 = load i32, i32* %retval, align 4
  ret i32 %244
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %p.addr.i420 = alloca i8*, align 8
  %v.addr.i421 = alloca i32, align 4
  %p.addr.i2.i390 = alloca i8*, align 8
  %v.addr.i3.i391 = alloca i32, align 4
  %p.addr.i.i392 = alloca i8*, align 8
  %v.addr.i.i393 = alloca i32, align 4
  %p.addr.i394 = alloca i8*, align 8
  %v.addr.i395 = alloca i64, align 8
  %p.addr.i383 = alloca i8*, align 8
  %v.addr.i384 = alloca i16, align 2
  %p.addr.i376 = alloca i8*, align 8
  %v.addr.i377 = alloca i16, align 2
  %p.addr.i2.i346 = alloca i8*, align 8
  %v.addr.i3.i347 = alloca i32, align 4
  %p.addr.i.i348 = alloca i8*, align 8
  %v.addr.i.i349 = alloca i32, align 4
  %p.addr.i350 = alloca i8*, align 8
  %v.addr.i351 = alloca i64, align 8
  %p.addr.i2.i316 = alloca i8*, align 8
  %v.addr.i3.i317 = alloca i32, align 4
  %p.addr.i.i318 = alloca i8*, align 8
  %v.addr.i.i319 = alloca i32, align 4
  %p.addr.i320 = alloca i8*, align 8
  %v.addr.i321 = alloca i64, align 8
  %p.addr.i2.i286 = alloca i8*, align 8
  %v.addr.i3.i287 = alloca i32, align 4
  %p.addr.i.i288 = alloca i8*, align 8
  %v.addr.i.i289 = alloca i32, align 4
  %p.addr.i290 = alloca i8*, align 8
  %v.addr.i291 = alloca i64, align 8
  %p.addr.i2.i256 = alloca i8*, align 8
  %v.addr.i3.i257 = alloca i32, align 4
  %p.addr.i.i258 = alloca i8*, align 8
  %v.addr.i.i259 = alloca i32, align 4
  %p.addr.i260 = alloca i8*, align 8
  %v.addr.i261 = alloca i64, align 8
  %pZip.addr.i250 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i251 = alloca i32, align 4
  %pZip.addr.i244 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i245 = alloca i32, align 4
  %p.addr.i232 = alloca i8*, align 8
  %v.addr.i233 = alloca i32, align 4
  %p.addr.i2.i = alloca i8*, align 8
  %v.addr.i3.i = alloca i32, align 4
  %p.addr.i.i = alloca i8*, align 8
  %v.addr.i.i = alloca i32, align 4
  %p.addr.i227 = alloca i8*, align 8
  %v.addr.i228 = alloca i64, align 8
  %p.addr.i215 = alloca i8*, align 8
  %v.addr.i216 = alloca i32, align 4
  %pZip.addr.i209 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i210 = alloca i32, align 4
  %pZip.addr.i203 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i204 = alloca i32, align 4
  %p.addr.i191 = alloca i8*, align 8
  %v.addr.i192 = alloca i32, align 4
  %p.addr.i184 = alloca i8*, align 8
  %v.addr.i185 = alloca i16, align 2
  %p.addr.i179 = alloca i8*, align 8
  %v.addr.i180 = alloca i16, align 2
  %p.addr.i167 = alloca i8*, align 8
  %v.addr.i168 = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %pZip.addr.i161 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i162 = alloca i32, align 4
  %pZip.addr.i155 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i156 = alloca i32, align 4
  %pZip.addr.i149 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i150 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %central_dir_ofs = alloca i64, align 8
  %central_dir_size = alloca i64, align 8
  %hdr = alloca [256 x i8], align 16
  %rel_ofs_to_zip64_ecdr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 3
  %4 = load i32, i32* %m_zip_mode, align 4
  %cmp = icmp ne i32 %4, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %5, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %6, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %7 = load i32, i32* %err_num.addr.i, align 4
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 5
  store i32 %7, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 15
  %10 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8
  store %struct.mz_zip_internal_state_tag* %10, %struct.mz_zip_internal_state_tag** %pState, align 8
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 4
  %12 = load i32, i32* %m_zip64, align 4
  %tobool4 = icmp ne i32 %12, 0
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 2
  %14 = load i32, i32* %m_total_files, align 8
  %cmp6 = icmp ugt i32 %14, -1
  br i1 %cmp6, label %if.then9, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %if.then5
  %15 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %15, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %16 = load i64, i64* %m_size, align 8
  %cmp8 = icmp uge i64 %16, 4294967295
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %lor.lhs.false7, %if.then5
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %17, %struct.mz_zip_archive** %pZip.addr.i161, align 8
  store i32 2, i32* %err_num.addr.i162, align 4
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i161, align 8
  %tobool.i163 = icmp ne %struct.mz_zip_archive* %18, null
  br i1 %tobool.i163, label %if.then.i165, label %mz_zip_set_error.exit166

if.then.i165:                                     ; preds = %if.then9
  %19 = load i32, i32* %err_num.addr.i162, align 4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i161, align 8
  %m_last_error.i164 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 5
  store i32 %19, i32* %m_last_error.i164, align 4
  br label %mz_zip_set_error.exit166

mz_zip_set_error.exit166:                         ; preds = %if.then9, %if.then.i165
  store i32 0, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %lor.lhs.false7
  br label %if.end22

if.else:                                          ; preds = %if.end
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files12 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 2
  %22 = load i32, i32* %m_total_files12, align 8
  %cmp13 = icmp ugt i32 %22, 65535
  br i1 %cmp13, label %if.then19, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %if.else
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 0
  %24 = load i64, i64* %m_archive_size, align 8
  %25 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir15 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %25, i32 0, i32 0
  %m_size16 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir15, i32 0, i32 1
  %26 = load i64, i64* %m_size16, align 8
  %add = add i64 %24, %26
  %add17 = add i64 %add, 22
  %cmp18 = icmp ugt i64 %add17, 4294967295
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %lor.lhs.false14, %if.else
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %27, %struct.mz_zip_archive** %pZip.addr.i209, align 8
  store i32 2, i32* %err_num.addr.i210, align 4
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i209, align 8
  %tobool.i211 = icmp ne %struct.mz_zip_archive* %28, null
  br i1 %tobool.i211, label %if.then.i213, label %mz_zip_set_error.exit214

if.then.i213:                                     ; preds = %if.then19
  %29 = load i32, i32* %err_num.addr.i210, align 4
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i209, align 8
  %m_last_error.i212 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 5
  store i32 %29, i32* %m_last_error.i212, align 4
  br label %mz_zip_set_error.exit214

mz_zip_set_error.exit214:                         ; preds = %if.then19, %if.then.i213
  store i32 0, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %lor.lhs.false14
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end11
  store i64 0, i64* %central_dir_ofs, align 8
  store i64 0, i64* %central_dir_size, align 8
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files23 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 2
  %32 = load i32, i32* %m_total_files23, align 8
  %tobool24 = icmp ne i32 %32, 0
  br i1 %tobool24, label %if.then25, label %if.end37

if.then25:                                        ; preds = %if.end22
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size26 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 0
  %34 = load i64, i64* %m_archive_size26, align 8
  store i64 %34, i64* %central_dir_ofs, align 8
  %35 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir27 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %35, i32 0, i32 0
  %m_size28 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir27, i32 0, i32 1
  %36 = load i64, i64* %m_size28, align 8
  store i64 %36, i64* %central_dir_size, align 8
  %37 = load i64, i64* %central_dir_ofs, align 8
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 1
  store i64 %37, i64* %m_central_directory_file_ofs, align 8
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %39, i32 0, i32 12
  %40 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %41, i32 0, i32 14
  %42 = load i8*, i8** %m_pIO_opaque, align 8
  %43 = load i64, i64* %central_dir_ofs, align 8
  %44 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir29 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %44, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir29, i32 0, i32 0
  %45 = load i8*, i8** %m_p, align 8
  %46 = load i64, i64* %central_dir_size, align 8
  %call30 = call i64 %40(i8* %42, i64 %43, i8* %45, i64 %46)
  %47 = load i64, i64* %central_dir_size, align 8
  %cmp31 = icmp ne i64 %call30, %47
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.then25
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %48, %struct.mz_zip_archive** %pZip.addr.i250, align 8
  store i32 19, i32* %err_num.addr.i251, align 4
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i250, align 8
  %tobool.i252 = icmp ne %struct.mz_zip_archive* %49, null
  br i1 %tobool.i252, label %if.then.i254, label %mz_zip_set_error.exit255

if.then.i254:                                     ; preds = %if.then32
  %50 = load i32, i32* %err_num.addr.i251, align 4
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i250, align 8
  %m_last_error.i253 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %51, i32 0, i32 5
  store i32 %50, i32* %m_last_error.i253, align 4
  br label %mz_zip_set_error.exit255

mz_zip_set_error.exit255:                         ; preds = %if.then32, %if.then.i254
  store i32 0, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %if.then25
  %52 = load i64, i64* %central_dir_size, align 8
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size35 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %53, i32 0, i32 0
  %54 = load i64, i64* %m_archive_size35, align 8
  %add36 = add i64 %54, %52
  store i64 %add36, i64* %m_archive_size35, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.end34, %if.end22
  %55 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_zip6438 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %55, i32 0, i32 4
  %56 = load i32, i32* %m_zip6438, align 4
  %tobool39 = icmp ne i32 %56, 0
  br i1 %tobool39, label %if.then40, label %if.end89

if.then40:                                        ; preds = %if.end37
  %57 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size41 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %57, i32 0, i32 0
  %58 = load i64, i64* %m_archive_size41, align 8
  store i64 %58, i64* %rel_ofs_to_zip64_ecdr, align 8
  %59 = bitcast [256 x i8]* %hdr to i8*
  call void @llvm.memset.p0i8.i64(i8* %59, i8 0, i64 256, i32 16, i1 false)
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 0
  store i8* %add.ptr, i8** %p.addr.i420, align 8
  store i32 101075792, i32* %v.addr.i421, align 4
  %60 = load i32, i32* %v.addr.i421, align 4
  %conv.i422 = trunc i32 %60 to i8
  %61 = load i8*, i8** %p.addr.i420, align 8
  store i8 %conv.i422, i8* %61, align 1
  %62 = load i32, i32* %v.addr.i421, align 4
  %shr.i423 = lshr i32 %62, 8
  %conv1.i424 = trunc i32 %shr.i423 to i8
  %63 = load i8*, i8** %p.addr.i420, align 8
  %arrayidx2.i425 = getelementptr inbounds i8, i8* %63, i64 1
  store i8 %conv1.i424, i8* %arrayidx2.i425, align 1
  %64 = load i32, i32* %v.addr.i421, align 4
  %shr3.i426 = lshr i32 %64, 16
  %conv4.i427 = trunc i32 %shr3.i426 to i8
  %65 = load i8*, i8** %p.addr.i420, align 8
  %arrayidx5.i428 = getelementptr inbounds i8, i8* %65, i64 2
  store i8 %conv4.i427, i8* %arrayidx5.i428, align 1
  %66 = load i32, i32* %v.addr.i421, align 4
  %shr6.i429 = lshr i32 %66, 24
  %conv7.i430 = trunc i32 %shr6.i429 to i8
  %67 = load i8*, i8** %p.addr.i420, align 8
  %arrayidx8.i431 = getelementptr inbounds i8, i8* %67, i64 3
  store i8 %conv7.i430, i8* %arrayidx8.i431, align 1
  %arraydecay42 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr43 = getelementptr inbounds i8, i8* %arraydecay42, i64 4
  store i8* %add.ptr43, i8** %p.addr.i394, align 8
  store i64 44, i64* %v.addr.i395, align 8
  %68 = load i8*, i8** %p.addr.i394, align 8
  %69 = load i64, i64* %v.addr.i395, align 8
  %conv.i396 = trunc i64 %69 to i32
  store i8* %68, i8** %p.addr.i.i392, align 8
  store i32 %conv.i396, i32* %v.addr.i.i393, align 4
  %70 = load i32, i32* %v.addr.i.i393, align 4
  %conv.i.i397 = trunc i32 %70 to i8
  %71 = load i8*, i8** %p.addr.i.i392, align 8
  store i8 %conv.i.i397, i8* %71, align 1
  %72 = load i32, i32* %v.addr.i.i393, align 4
  %shr.i.i398 = lshr i32 %72, 8
  %conv1.i.i399 = trunc i32 %shr.i.i398 to i8
  %73 = load i8*, i8** %p.addr.i.i392, align 8
  %arrayidx2.i.i400 = getelementptr inbounds i8, i8* %73, i64 1
  store i8 %conv1.i.i399, i8* %arrayidx2.i.i400, align 1
  %74 = load i32, i32* %v.addr.i.i393, align 4
  %shr3.i.i401 = lshr i32 %74, 16
  %conv4.i.i402 = trunc i32 %shr3.i.i401 to i8
  %75 = load i8*, i8** %p.addr.i.i392, align 8
  %arrayidx5.i.i403 = getelementptr inbounds i8, i8* %75, i64 2
  store i8 %conv4.i.i402, i8* %arrayidx5.i.i403, align 1
  %76 = load i32, i32* %v.addr.i.i393, align 4
  %shr6.i.i404 = lshr i32 %76, 24
  %conv7.i.i405 = trunc i32 %shr6.i.i404 to i8
  %77 = load i8*, i8** %p.addr.i.i392, align 8
  %arrayidx8.i.i406 = getelementptr inbounds i8, i8* %77, i64 3
  store i8 %conv7.i.i405, i8* %arrayidx8.i.i406, align 1
  %78 = load i8*, i8** %p.addr.i394, align 8
  %add.ptr.i407 = getelementptr inbounds i8, i8* %78, i64 4
  %79 = load i64, i64* %v.addr.i395, align 8
  %shr.i408 = lshr i64 %79, 32
  %conv1.i409 = trunc i64 %shr.i408 to i32
  store i8* %add.ptr.i407, i8** %p.addr.i2.i390, align 8
  store i32 %conv1.i409, i32* %v.addr.i3.i391, align 4
  %80 = load i32, i32* %v.addr.i3.i391, align 4
  %conv.i4.i410 = trunc i32 %80 to i8
  %81 = load i8*, i8** %p.addr.i2.i390, align 8
  store i8 %conv.i4.i410, i8* %81, align 1
  %82 = load i32, i32* %v.addr.i3.i391, align 4
  %shr.i5.i411 = lshr i32 %82, 8
  %conv1.i6.i412 = trunc i32 %shr.i5.i411 to i8
  %83 = load i8*, i8** %p.addr.i2.i390, align 8
  %arrayidx2.i7.i413 = getelementptr inbounds i8, i8* %83, i64 1
  store i8 %conv1.i6.i412, i8* %arrayidx2.i7.i413, align 1
  %84 = load i32, i32* %v.addr.i3.i391, align 4
  %shr3.i8.i414 = lshr i32 %84, 16
  %conv4.i9.i415 = trunc i32 %shr3.i8.i414 to i8
  %85 = load i8*, i8** %p.addr.i2.i390, align 8
  %arrayidx5.i10.i416 = getelementptr inbounds i8, i8* %85, i64 2
  store i8 %conv4.i9.i415, i8* %arrayidx5.i10.i416, align 1
  %86 = load i32, i32* %v.addr.i3.i391, align 4
  %shr6.i11.i417 = lshr i32 %86, 24
  %conv7.i12.i418 = trunc i32 %shr6.i11.i417 to i8
  %87 = load i8*, i8** %p.addr.i2.i390, align 8
  %arrayidx8.i13.i419 = getelementptr inbounds i8, i8* %87, i64 3
  store i8 %conv7.i12.i418, i8* %arrayidx8.i13.i419, align 1
  %arraydecay44 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr45 = getelementptr inbounds i8, i8* %arraydecay44, i64 12
  store i8* %add.ptr45, i8** %p.addr.i383, align 8
  store i16 798, i16* %v.addr.i384, align 2
  %88 = load i16, i16* %v.addr.i384, align 2
  %conv.i385 = trunc i16 %88 to i8
  %89 = load i8*, i8** %p.addr.i383, align 8
  store i8 %conv.i385, i8* %89, align 1
  %90 = load i16, i16* %v.addr.i384, align 2
  %conv1.i386 = zext i16 %90 to i32
  %shr.i387 = ashr i32 %conv1.i386, 8
  %conv2.i388 = trunc i32 %shr.i387 to i8
  %91 = load i8*, i8** %p.addr.i383, align 8
  %arrayidx3.i389 = getelementptr inbounds i8, i8* %91, i64 1
  store i8 %conv2.i388, i8* %arrayidx3.i389, align 1
  %arraydecay46 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr47 = getelementptr inbounds i8, i8* %arraydecay46, i64 14
  store i8* %add.ptr47, i8** %p.addr.i376, align 8
  store i16 45, i16* %v.addr.i377, align 2
  %92 = load i16, i16* %v.addr.i377, align 2
  %conv.i378 = trunc i16 %92 to i8
  %93 = load i8*, i8** %p.addr.i376, align 8
  store i8 %conv.i378, i8* %93, align 1
  %94 = load i16, i16* %v.addr.i377, align 2
  %conv1.i379 = zext i16 %94 to i32
  %shr.i380 = ashr i32 %conv1.i379, 8
  %conv2.i381 = trunc i32 %shr.i380 to i8
  %95 = load i8*, i8** %p.addr.i376, align 8
  %arrayidx3.i382 = getelementptr inbounds i8, i8* %95, i64 1
  store i8 %conv2.i381, i8* %arrayidx3.i382, align 1
  %arraydecay48 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr49 = getelementptr inbounds i8, i8* %arraydecay48, i64 24
  %96 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files50 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %96, i32 0, i32 2
  %97 = load i32, i32* %m_total_files50, align 8
  %conv = zext i32 %97 to i64
  store i8* %add.ptr49, i8** %p.addr.i350, align 8
  store i64 %conv, i64* %v.addr.i351, align 8
  %98 = load i8*, i8** %p.addr.i350, align 8
  %99 = load i64, i64* %v.addr.i351, align 8
  %conv.i352 = trunc i64 %99 to i32
  store i8* %98, i8** %p.addr.i.i348, align 8
  store i32 %conv.i352, i32* %v.addr.i.i349, align 4
  %100 = load i32, i32* %v.addr.i.i349, align 4
  %conv.i.i353 = trunc i32 %100 to i8
  %101 = load i8*, i8** %p.addr.i.i348, align 8
  store i8 %conv.i.i353, i8* %101, align 1
  %102 = load i32, i32* %v.addr.i.i349, align 4
  %shr.i.i354 = lshr i32 %102, 8
  %conv1.i.i355 = trunc i32 %shr.i.i354 to i8
  %103 = load i8*, i8** %p.addr.i.i348, align 8
  %arrayidx2.i.i356 = getelementptr inbounds i8, i8* %103, i64 1
  store i8 %conv1.i.i355, i8* %arrayidx2.i.i356, align 1
  %104 = load i32, i32* %v.addr.i.i349, align 4
  %shr3.i.i357 = lshr i32 %104, 16
  %conv4.i.i358 = trunc i32 %shr3.i.i357 to i8
  %105 = load i8*, i8** %p.addr.i.i348, align 8
  %arrayidx5.i.i359 = getelementptr inbounds i8, i8* %105, i64 2
  store i8 %conv4.i.i358, i8* %arrayidx5.i.i359, align 1
  %106 = load i32, i32* %v.addr.i.i349, align 4
  %shr6.i.i360 = lshr i32 %106, 24
  %conv7.i.i361 = trunc i32 %shr6.i.i360 to i8
  %107 = load i8*, i8** %p.addr.i.i348, align 8
  %arrayidx8.i.i362 = getelementptr inbounds i8, i8* %107, i64 3
  store i8 %conv7.i.i361, i8* %arrayidx8.i.i362, align 1
  %108 = load i8*, i8** %p.addr.i350, align 8
  %add.ptr.i363 = getelementptr inbounds i8, i8* %108, i64 4
  %109 = load i64, i64* %v.addr.i351, align 8
  %shr.i364 = lshr i64 %109, 32
  %conv1.i365 = trunc i64 %shr.i364 to i32
  store i8* %add.ptr.i363, i8** %p.addr.i2.i346, align 8
  store i32 %conv1.i365, i32* %v.addr.i3.i347, align 4
  %110 = load i32, i32* %v.addr.i3.i347, align 4
  %conv.i4.i366 = trunc i32 %110 to i8
  %111 = load i8*, i8** %p.addr.i2.i346, align 8
  store i8 %conv.i4.i366, i8* %111, align 1
  %112 = load i32, i32* %v.addr.i3.i347, align 4
  %shr.i5.i367 = lshr i32 %112, 8
  %conv1.i6.i368 = trunc i32 %shr.i5.i367 to i8
  %113 = load i8*, i8** %p.addr.i2.i346, align 8
  %arrayidx2.i7.i369 = getelementptr inbounds i8, i8* %113, i64 1
  store i8 %conv1.i6.i368, i8* %arrayidx2.i7.i369, align 1
  %114 = load i32, i32* %v.addr.i3.i347, align 4
  %shr3.i8.i370 = lshr i32 %114, 16
  %conv4.i9.i371 = trunc i32 %shr3.i8.i370 to i8
  %115 = load i8*, i8** %p.addr.i2.i346, align 8
  %arrayidx5.i10.i372 = getelementptr inbounds i8, i8* %115, i64 2
  store i8 %conv4.i9.i371, i8* %arrayidx5.i10.i372, align 1
  %116 = load i32, i32* %v.addr.i3.i347, align 4
  %shr6.i11.i373 = lshr i32 %116, 24
  %conv7.i12.i374 = trunc i32 %shr6.i11.i373 to i8
  %117 = load i8*, i8** %p.addr.i2.i346, align 8
  %arrayidx8.i13.i375 = getelementptr inbounds i8, i8* %117, i64 3
  store i8 %conv7.i12.i374, i8* %arrayidx8.i13.i375, align 1
  %arraydecay51 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr52 = getelementptr inbounds i8, i8* %arraydecay51, i64 32
  %118 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files53 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %118, i32 0, i32 2
  %119 = load i32, i32* %m_total_files53, align 8
  %conv54 = zext i32 %119 to i64
  store i8* %add.ptr52, i8** %p.addr.i320, align 8
  store i64 %conv54, i64* %v.addr.i321, align 8
  %120 = load i8*, i8** %p.addr.i320, align 8
  %121 = load i64, i64* %v.addr.i321, align 8
  %conv.i322 = trunc i64 %121 to i32
  store i8* %120, i8** %p.addr.i.i318, align 8
  store i32 %conv.i322, i32* %v.addr.i.i319, align 4
  %122 = load i32, i32* %v.addr.i.i319, align 4
  %conv.i.i323 = trunc i32 %122 to i8
  %123 = load i8*, i8** %p.addr.i.i318, align 8
  store i8 %conv.i.i323, i8* %123, align 1
  %124 = load i32, i32* %v.addr.i.i319, align 4
  %shr.i.i324 = lshr i32 %124, 8
  %conv1.i.i325 = trunc i32 %shr.i.i324 to i8
  %125 = load i8*, i8** %p.addr.i.i318, align 8
  %arrayidx2.i.i326 = getelementptr inbounds i8, i8* %125, i64 1
  store i8 %conv1.i.i325, i8* %arrayidx2.i.i326, align 1
  %126 = load i32, i32* %v.addr.i.i319, align 4
  %shr3.i.i327 = lshr i32 %126, 16
  %conv4.i.i328 = trunc i32 %shr3.i.i327 to i8
  %127 = load i8*, i8** %p.addr.i.i318, align 8
  %arrayidx5.i.i329 = getelementptr inbounds i8, i8* %127, i64 2
  store i8 %conv4.i.i328, i8* %arrayidx5.i.i329, align 1
  %128 = load i32, i32* %v.addr.i.i319, align 4
  %shr6.i.i330 = lshr i32 %128, 24
  %conv7.i.i331 = trunc i32 %shr6.i.i330 to i8
  %129 = load i8*, i8** %p.addr.i.i318, align 8
  %arrayidx8.i.i332 = getelementptr inbounds i8, i8* %129, i64 3
  store i8 %conv7.i.i331, i8* %arrayidx8.i.i332, align 1
  %130 = load i8*, i8** %p.addr.i320, align 8
  %add.ptr.i333 = getelementptr inbounds i8, i8* %130, i64 4
  %131 = load i64, i64* %v.addr.i321, align 8
  %shr.i334 = lshr i64 %131, 32
  %conv1.i335 = trunc i64 %shr.i334 to i32
  store i8* %add.ptr.i333, i8** %p.addr.i2.i316, align 8
  store i32 %conv1.i335, i32* %v.addr.i3.i317, align 4
  %132 = load i32, i32* %v.addr.i3.i317, align 4
  %conv.i4.i336 = trunc i32 %132 to i8
  %133 = load i8*, i8** %p.addr.i2.i316, align 8
  store i8 %conv.i4.i336, i8* %133, align 1
  %134 = load i32, i32* %v.addr.i3.i317, align 4
  %shr.i5.i337 = lshr i32 %134, 8
  %conv1.i6.i338 = trunc i32 %shr.i5.i337 to i8
  %135 = load i8*, i8** %p.addr.i2.i316, align 8
  %arrayidx2.i7.i339 = getelementptr inbounds i8, i8* %135, i64 1
  store i8 %conv1.i6.i338, i8* %arrayidx2.i7.i339, align 1
  %136 = load i32, i32* %v.addr.i3.i317, align 4
  %shr3.i8.i340 = lshr i32 %136, 16
  %conv4.i9.i341 = trunc i32 %shr3.i8.i340 to i8
  %137 = load i8*, i8** %p.addr.i2.i316, align 8
  %arrayidx5.i10.i342 = getelementptr inbounds i8, i8* %137, i64 2
  store i8 %conv4.i9.i341, i8* %arrayidx5.i10.i342, align 1
  %138 = load i32, i32* %v.addr.i3.i317, align 4
  %shr6.i11.i343 = lshr i32 %138, 24
  %conv7.i12.i344 = trunc i32 %shr6.i11.i343 to i8
  %139 = load i8*, i8** %p.addr.i2.i316, align 8
  %arrayidx8.i13.i345 = getelementptr inbounds i8, i8* %139, i64 3
  store i8 %conv7.i12.i344, i8* %arrayidx8.i13.i345, align 1
  %arraydecay55 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr56 = getelementptr inbounds i8, i8* %arraydecay55, i64 40
  %140 = load i64, i64* %central_dir_size, align 8
  store i8* %add.ptr56, i8** %p.addr.i290, align 8
  store i64 %140, i64* %v.addr.i291, align 8
  %141 = load i8*, i8** %p.addr.i290, align 8
  %142 = load i64, i64* %v.addr.i291, align 8
  %conv.i292 = trunc i64 %142 to i32
  store i8* %141, i8** %p.addr.i.i288, align 8
  store i32 %conv.i292, i32* %v.addr.i.i289, align 4
  %143 = load i32, i32* %v.addr.i.i289, align 4
  %conv.i.i293 = trunc i32 %143 to i8
  %144 = load i8*, i8** %p.addr.i.i288, align 8
  store i8 %conv.i.i293, i8* %144, align 1
  %145 = load i32, i32* %v.addr.i.i289, align 4
  %shr.i.i294 = lshr i32 %145, 8
  %conv1.i.i295 = trunc i32 %shr.i.i294 to i8
  %146 = load i8*, i8** %p.addr.i.i288, align 8
  %arrayidx2.i.i296 = getelementptr inbounds i8, i8* %146, i64 1
  store i8 %conv1.i.i295, i8* %arrayidx2.i.i296, align 1
  %147 = load i32, i32* %v.addr.i.i289, align 4
  %shr3.i.i297 = lshr i32 %147, 16
  %conv4.i.i298 = trunc i32 %shr3.i.i297 to i8
  %148 = load i8*, i8** %p.addr.i.i288, align 8
  %arrayidx5.i.i299 = getelementptr inbounds i8, i8* %148, i64 2
  store i8 %conv4.i.i298, i8* %arrayidx5.i.i299, align 1
  %149 = load i32, i32* %v.addr.i.i289, align 4
  %shr6.i.i300 = lshr i32 %149, 24
  %conv7.i.i301 = trunc i32 %shr6.i.i300 to i8
  %150 = load i8*, i8** %p.addr.i.i288, align 8
  %arrayidx8.i.i302 = getelementptr inbounds i8, i8* %150, i64 3
  store i8 %conv7.i.i301, i8* %arrayidx8.i.i302, align 1
  %151 = load i8*, i8** %p.addr.i290, align 8
  %add.ptr.i303 = getelementptr inbounds i8, i8* %151, i64 4
  %152 = load i64, i64* %v.addr.i291, align 8
  %shr.i304 = lshr i64 %152, 32
  %conv1.i305 = trunc i64 %shr.i304 to i32
  store i8* %add.ptr.i303, i8** %p.addr.i2.i286, align 8
  store i32 %conv1.i305, i32* %v.addr.i3.i287, align 4
  %153 = load i32, i32* %v.addr.i3.i287, align 4
  %conv.i4.i306 = trunc i32 %153 to i8
  %154 = load i8*, i8** %p.addr.i2.i286, align 8
  store i8 %conv.i4.i306, i8* %154, align 1
  %155 = load i32, i32* %v.addr.i3.i287, align 4
  %shr.i5.i307 = lshr i32 %155, 8
  %conv1.i6.i308 = trunc i32 %shr.i5.i307 to i8
  %156 = load i8*, i8** %p.addr.i2.i286, align 8
  %arrayidx2.i7.i309 = getelementptr inbounds i8, i8* %156, i64 1
  store i8 %conv1.i6.i308, i8* %arrayidx2.i7.i309, align 1
  %157 = load i32, i32* %v.addr.i3.i287, align 4
  %shr3.i8.i310 = lshr i32 %157, 16
  %conv4.i9.i311 = trunc i32 %shr3.i8.i310 to i8
  %158 = load i8*, i8** %p.addr.i2.i286, align 8
  %arrayidx5.i10.i312 = getelementptr inbounds i8, i8* %158, i64 2
  store i8 %conv4.i9.i311, i8* %arrayidx5.i10.i312, align 1
  %159 = load i32, i32* %v.addr.i3.i287, align 4
  %shr6.i11.i313 = lshr i32 %159, 24
  %conv7.i12.i314 = trunc i32 %shr6.i11.i313 to i8
  %160 = load i8*, i8** %p.addr.i2.i286, align 8
  %arrayidx8.i13.i315 = getelementptr inbounds i8, i8* %160, i64 3
  store i8 %conv7.i12.i314, i8* %arrayidx8.i13.i315, align 1
  %arraydecay57 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr58 = getelementptr inbounds i8, i8* %arraydecay57, i64 48
  %161 = load i64, i64* %central_dir_ofs, align 8
  store i8* %add.ptr58, i8** %p.addr.i260, align 8
  store i64 %161, i64* %v.addr.i261, align 8
  %162 = load i8*, i8** %p.addr.i260, align 8
  %163 = load i64, i64* %v.addr.i261, align 8
  %conv.i262 = trunc i64 %163 to i32
  store i8* %162, i8** %p.addr.i.i258, align 8
  store i32 %conv.i262, i32* %v.addr.i.i259, align 4
  %164 = load i32, i32* %v.addr.i.i259, align 4
  %conv.i.i263 = trunc i32 %164 to i8
  %165 = load i8*, i8** %p.addr.i.i258, align 8
  store i8 %conv.i.i263, i8* %165, align 1
  %166 = load i32, i32* %v.addr.i.i259, align 4
  %shr.i.i264 = lshr i32 %166, 8
  %conv1.i.i265 = trunc i32 %shr.i.i264 to i8
  %167 = load i8*, i8** %p.addr.i.i258, align 8
  %arrayidx2.i.i266 = getelementptr inbounds i8, i8* %167, i64 1
  store i8 %conv1.i.i265, i8* %arrayidx2.i.i266, align 1
  %168 = load i32, i32* %v.addr.i.i259, align 4
  %shr3.i.i267 = lshr i32 %168, 16
  %conv4.i.i268 = trunc i32 %shr3.i.i267 to i8
  %169 = load i8*, i8** %p.addr.i.i258, align 8
  %arrayidx5.i.i269 = getelementptr inbounds i8, i8* %169, i64 2
  store i8 %conv4.i.i268, i8* %arrayidx5.i.i269, align 1
  %170 = load i32, i32* %v.addr.i.i259, align 4
  %shr6.i.i270 = lshr i32 %170, 24
  %conv7.i.i271 = trunc i32 %shr6.i.i270 to i8
  %171 = load i8*, i8** %p.addr.i.i258, align 8
  %arrayidx8.i.i272 = getelementptr inbounds i8, i8* %171, i64 3
  store i8 %conv7.i.i271, i8* %arrayidx8.i.i272, align 1
  %172 = load i8*, i8** %p.addr.i260, align 8
  %add.ptr.i273 = getelementptr inbounds i8, i8* %172, i64 4
  %173 = load i64, i64* %v.addr.i261, align 8
  %shr.i274 = lshr i64 %173, 32
  %conv1.i275 = trunc i64 %shr.i274 to i32
  store i8* %add.ptr.i273, i8** %p.addr.i2.i256, align 8
  store i32 %conv1.i275, i32* %v.addr.i3.i257, align 4
  %174 = load i32, i32* %v.addr.i3.i257, align 4
  %conv.i4.i276 = trunc i32 %174 to i8
  %175 = load i8*, i8** %p.addr.i2.i256, align 8
  store i8 %conv.i4.i276, i8* %175, align 1
  %176 = load i32, i32* %v.addr.i3.i257, align 4
  %shr.i5.i277 = lshr i32 %176, 8
  %conv1.i6.i278 = trunc i32 %shr.i5.i277 to i8
  %177 = load i8*, i8** %p.addr.i2.i256, align 8
  %arrayidx2.i7.i279 = getelementptr inbounds i8, i8* %177, i64 1
  store i8 %conv1.i6.i278, i8* %arrayidx2.i7.i279, align 1
  %178 = load i32, i32* %v.addr.i3.i257, align 4
  %shr3.i8.i280 = lshr i32 %178, 16
  %conv4.i9.i281 = trunc i32 %shr3.i8.i280 to i8
  %179 = load i8*, i8** %p.addr.i2.i256, align 8
  %arrayidx5.i10.i282 = getelementptr inbounds i8, i8* %179, i64 2
  store i8 %conv4.i9.i281, i8* %arrayidx5.i10.i282, align 1
  %180 = load i32, i32* %v.addr.i3.i257, align 4
  %shr6.i11.i283 = lshr i32 %180, 24
  %conv7.i12.i284 = trunc i32 %shr6.i11.i283 to i8
  %181 = load i8*, i8** %p.addr.i2.i256, align 8
  %arrayidx8.i13.i285 = getelementptr inbounds i8, i8* %181, i64 3
  store i8 %conv7.i12.i284, i8* %arrayidx8.i13.i285, align 1
  %182 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite59 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %182, i32 0, i32 12
  %183 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite59, align 8
  %184 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque60 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %184, i32 0, i32 14
  %185 = load i8*, i8** %m_pIO_opaque60, align 8
  %186 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size61 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %186, i32 0, i32 0
  %187 = load i64, i64* %m_archive_size61, align 8
  %arraydecay62 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %call63 = call i64 %183(i8* %185, i64 %187, i8* %arraydecay62, i64 56)
  %cmp64 = icmp ne i64 %call63, 56
  br i1 %cmp64, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then40
  %188 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %188, %struct.mz_zip_archive** %pZip.addr.i244, align 8
  store i32 19, i32* %err_num.addr.i245, align 4
  %189 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i244, align 8
  %tobool.i246 = icmp ne %struct.mz_zip_archive* %189, null
  br i1 %tobool.i246, label %if.then.i248, label %mz_zip_set_error.exit249

if.then.i248:                                     ; preds = %if.then66
  %190 = load i32, i32* %err_num.addr.i245, align 4
  %191 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i244, align 8
  %m_last_error.i247 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %191, i32 0, i32 5
  store i32 %190, i32* %m_last_error.i247, align 4
  br label %mz_zip_set_error.exit249

mz_zip_set_error.exit249:                         ; preds = %if.then66, %if.then.i248
  store i32 0, i32* %retval, align 4
  br label %return

if.end68:                                         ; preds = %if.then40
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size69 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %192, i32 0, i32 0
  %193 = load i64, i64* %m_archive_size69, align 8
  %add70 = add i64 %193, 56
  store i64 %add70, i64* %m_archive_size69, align 8
  %194 = bitcast [256 x i8]* %hdr to i8*
  call void @llvm.memset.p0i8.i64(i8* %194, i8 0, i64 256, i32 16, i1 false)
  %arraydecay71 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr72 = getelementptr inbounds i8, i8* %arraydecay71, i64 0
  store i8* %add.ptr72, i8** %p.addr.i232, align 8
  store i32 117853008, i32* %v.addr.i233, align 4
  %195 = load i32, i32* %v.addr.i233, align 4
  %conv.i234 = trunc i32 %195 to i8
  %196 = load i8*, i8** %p.addr.i232, align 8
  store i8 %conv.i234, i8* %196, align 1
  %197 = load i32, i32* %v.addr.i233, align 4
  %shr.i235 = lshr i32 %197, 8
  %conv1.i236 = trunc i32 %shr.i235 to i8
  %198 = load i8*, i8** %p.addr.i232, align 8
  %arrayidx2.i237 = getelementptr inbounds i8, i8* %198, i64 1
  store i8 %conv1.i236, i8* %arrayidx2.i237, align 1
  %199 = load i32, i32* %v.addr.i233, align 4
  %shr3.i238 = lshr i32 %199, 16
  %conv4.i239 = trunc i32 %shr3.i238 to i8
  %200 = load i8*, i8** %p.addr.i232, align 8
  %arrayidx5.i240 = getelementptr inbounds i8, i8* %200, i64 2
  store i8 %conv4.i239, i8* %arrayidx5.i240, align 1
  %201 = load i32, i32* %v.addr.i233, align 4
  %shr6.i241 = lshr i32 %201, 24
  %conv7.i242 = trunc i32 %shr6.i241 to i8
  %202 = load i8*, i8** %p.addr.i232, align 8
  %arrayidx8.i243 = getelementptr inbounds i8, i8* %202, i64 3
  store i8 %conv7.i242, i8* %arrayidx8.i243, align 1
  %arraydecay73 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr74 = getelementptr inbounds i8, i8* %arraydecay73, i64 8
  %203 = load i64, i64* %rel_ofs_to_zip64_ecdr, align 8
  store i8* %add.ptr74, i8** %p.addr.i227, align 8
  store i64 %203, i64* %v.addr.i228, align 8
  %204 = load i8*, i8** %p.addr.i227, align 8
  %205 = load i64, i64* %v.addr.i228, align 8
  %conv.i229 = trunc i64 %205 to i32
  store i8* %204, i8** %p.addr.i.i, align 8
  store i32 %conv.i229, i32* %v.addr.i.i, align 4
  %206 = load i32, i32* %v.addr.i.i, align 4
  %conv.i.i = trunc i32 %206 to i8
  %207 = load i8*, i8** %p.addr.i.i, align 8
  store i8 %conv.i.i, i8* %207, align 1
  %208 = load i32, i32* %v.addr.i.i, align 4
  %shr.i.i = lshr i32 %208, 8
  %conv1.i.i = trunc i32 %shr.i.i to i8
  %209 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx2.i.i = getelementptr inbounds i8, i8* %209, i64 1
  store i8 %conv1.i.i, i8* %arrayidx2.i.i, align 1
  %210 = load i32, i32* %v.addr.i.i, align 4
  %shr3.i.i = lshr i32 %210, 16
  %conv4.i.i = trunc i32 %shr3.i.i to i8
  %211 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx5.i.i = getelementptr inbounds i8, i8* %211, i64 2
  store i8 %conv4.i.i, i8* %arrayidx5.i.i, align 1
  %212 = load i32, i32* %v.addr.i.i, align 4
  %shr6.i.i = lshr i32 %212, 24
  %conv7.i.i = trunc i32 %shr6.i.i to i8
  %213 = load i8*, i8** %p.addr.i.i, align 8
  %arrayidx8.i.i = getelementptr inbounds i8, i8* %213, i64 3
  store i8 %conv7.i.i, i8* %arrayidx8.i.i, align 1
  %214 = load i8*, i8** %p.addr.i227, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* %214, i64 4
  %215 = load i64, i64* %v.addr.i228, align 8
  %shr.i230 = lshr i64 %215, 32
  %conv1.i231 = trunc i64 %shr.i230 to i32
  store i8* %add.ptr.i, i8** %p.addr.i2.i, align 8
  store i32 %conv1.i231, i32* %v.addr.i3.i, align 4
  %216 = load i32, i32* %v.addr.i3.i, align 4
  %conv.i4.i = trunc i32 %216 to i8
  %217 = load i8*, i8** %p.addr.i2.i, align 8
  store i8 %conv.i4.i, i8* %217, align 1
  %218 = load i32, i32* %v.addr.i3.i, align 4
  %shr.i5.i = lshr i32 %218, 8
  %conv1.i6.i = trunc i32 %shr.i5.i to i8
  %219 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx2.i7.i = getelementptr inbounds i8, i8* %219, i64 1
  store i8 %conv1.i6.i, i8* %arrayidx2.i7.i, align 1
  %220 = load i32, i32* %v.addr.i3.i, align 4
  %shr3.i8.i = lshr i32 %220, 16
  %conv4.i9.i = trunc i32 %shr3.i8.i to i8
  %221 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx5.i10.i = getelementptr inbounds i8, i8* %221, i64 2
  store i8 %conv4.i9.i, i8* %arrayidx5.i10.i, align 1
  %222 = load i32, i32* %v.addr.i3.i, align 4
  %shr6.i11.i = lshr i32 %222, 24
  %conv7.i12.i = trunc i32 %shr6.i11.i to i8
  %223 = load i8*, i8** %p.addr.i2.i, align 8
  %arrayidx8.i13.i = getelementptr inbounds i8, i8* %223, i64 3
  store i8 %conv7.i12.i, i8* %arrayidx8.i13.i, align 1
  %arraydecay75 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr76 = getelementptr inbounds i8, i8* %arraydecay75, i64 16
  store i8* %add.ptr76, i8** %p.addr.i215, align 8
  store i32 1, i32* %v.addr.i216, align 4
  %224 = load i32, i32* %v.addr.i216, align 4
  %conv.i217 = trunc i32 %224 to i8
  %225 = load i8*, i8** %p.addr.i215, align 8
  store i8 %conv.i217, i8* %225, align 1
  %226 = load i32, i32* %v.addr.i216, align 4
  %shr.i218 = lshr i32 %226, 8
  %conv1.i219 = trunc i32 %shr.i218 to i8
  %227 = load i8*, i8** %p.addr.i215, align 8
  %arrayidx2.i220 = getelementptr inbounds i8, i8* %227, i64 1
  store i8 %conv1.i219, i8* %arrayidx2.i220, align 1
  %228 = load i32, i32* %v.addr.i216, align 4
  %shr3.i221 = lshr i32 %228, 16
  %conv4.i222 = trunc i32 %shr3.i221 to i8
  %229 = load i8*, i8** %p.addr.i215, align 8
  %arrayidx5.i223 = getelementptr inbounds i8, i8* %229, i64 2
  store i8 %conv4.i222, i8* %arrayidx5.i223, align 1
  %230 = load i32, i32* %v.addr.i216, align 4
  %shr6.i224 = lshr i32 %230, 24
  %conv7.i225 = trunc i32 %shr6.i224 to i8
  %231 = load i8*, i8** %p.addr.i215, align 8
  %arrayidx8.i226 = getelementptr inbounds i8, i8* %231, i64 3
  store i8 %conv7.i225, i8* %arrayidx8.i226, align 1
  %232 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite77 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %232, i32 0, i32 12
  %233 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite77, align 8
  %234 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque78 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %234, i32 0, i32 14
  %235 = load i8*, i8** %m_pIO_opaque78, align 8
  %236 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size79 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %236, i32 0, i32 0
  %237 = load i64, i64* %m_archive_size79, align 8
  %arraydecay80 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %call81 = call i64 %233(i8* %235, i64 %237, i8* %arraydecay80, i64 20)
  %cmp82 = icmp ne i64 %call81, 20
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end68
  %238 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %238, %struct.mz_zip_archive** %pZip.addr.i203, align 8
  store i32 19, i32* %err_num.addr.i204, align 4
  %239 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i203, align 8
  %tobool.i205 = icmp ne %struct.mz_zip_archive* %239, null
  br i1 %tobool.i205, label %if.then.i207, label %mz_zip_set_error.exit208

if.then.i207:                                     ; preds = %if.then84
  %240 = load i32, i32* %err_num.addr.i204, align 4
  %241 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i203, align 8
  %m_last_error.i206 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %241, i32 0, i32 5
  store i32 %240, i32* %m_last_error.i206, align 4
  br label %mz_zip_set_error.exit208

mz_zip_set_error.exit208:                         ; preds = %if.then84, %if.then.i207
  store i32 0, i32* %retval, align 4
  br label %return

if.end86:                                         ; preds = %if.end68
  %242 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size87 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %242, i32 0, i32 0
  %243 = load i64, i64* %m_archive_size87, align 8
  %add88 = add i64 %243, 20
  store i64 %add88, i64* %m_archive_size87, align 8
  br label %if.end89

if.end89:                                         ; preds = %if.end86, %if.end37
  %244 = bitcast [256 x i8]* %hdr to i8*
  call void @llvm.memset.p0i8.i64(i8* %244, i8 0, i64 256, i32 16, i1 false)
  %arraydecay90 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr91 = getelementptr inbounds i8, i8* %arraydecay90, i64 0
  store i8* %add.ptr91, i8** %p.addr.i191, align 8
  store i32 101010256, i32* %v.addr.i192, align 4
  %245 = load i32, i32* %v.addr.i192, align 4
  %conv.i193 = trunc i32 %245 to i8
  %246 = load i8*, i8** %p.addr.i191, align 8
  store i8 %conv.i193, i8* %246, align 1
  %247 = load i32, i32* %v.addr.i192, align 4
  %shr.i194 = lshr i32 %247, 8
  %conv1.i195 = trunc i32 %shr.i194 to i8
  %248 = load i8*, i8** %p.addr.i191, align 8
  %arrayidx2.i196 = getelementptr inbounds i8, i8* %248, i64 1
  store i8 %conv1.i195, i8* %arrayidx2.i196, align 1
  %249 = load i32, i32* %v.addr.i192, align 4
  %shr3.i197 = lshr i32 %249, 16
  %conv4.i198 = trunc i32 %shr3.i197 to i8
  %250 = load i8*, i8** %p.addr.i191, align 8
  %arrayidx5.i199 = getelementptr inbounds i8, i8* %250, i64 2
  store i8 %conv4.i198, i8* %arrayidx5.i199, align 1
  %251 = load i32, i32* %v.addr.i192, align 4
  %shr6.i200 = lshr i32 %251, 24
  %conv7.i201 = trunc i32 %shr6.i200 to i8
  %252 = load i8*, i8** %p.addr.i191, align 8
  %arrayidx8.i202 = getelementptr inbounds i8, i8* %252, i64 3
  store i8 %conv7.i201, i8* %arrayidx8.i202, align 1
  %arraydecay92 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr93 = getelementptr inbounds i8, i8* %arraydecay92, i64 8
  %253 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files94 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %253, i32 0, i32 2
  %254 = load i32, i32* %m_total_files94, align 8
  %cmp95 = icmp ult i32 65535, %254
  br i1 %cmp95, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end89
  br label %cond.end

cond.false:                                       ; preds = %if.end89
  %255 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files97 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %255, i32 0, i32 2
  %256 = load i32, i32* %m_total_files97, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 65535, %cond.true ], [ %256, %cond.false ]
  %conv98 = trunc i32 %cond to i16
  store i8* %add.ptr93, i8** %p.addr.i184, align 8
  store i16 %conv98, i16* %v.addr.i185, align 2
  %257 = load i16, i16* %v.addr.i185, align 2
  %conv.i186 = trunc i16 %257 to i8
  %258 = load i8*, i8** %p.addr.i184, align 8
  store i8 %conv.i186, i8* %258, align 1
  %259 = load i16, i16* %v.addr.i185, align 2
  %conv1.i187 = zext i16 %259 to i32
  %shr.i188 = ashr i32 %conv1.i187, 8
  %conv2.i189 = trunc i32 %shr.i188 to i8
  %260 = load i8*, i8** %p.addr.i184, align 8
  %arrayidx3.i190 = getelementptr inbounds i8, i8* %260, i64 1
  store i8 %conv2.i189, i8* %arrayidx3.i190, align 1
  %arraydecay99 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr100 = getelementptr inbounds i8, i8* %arraydecay99, i64 10
  %261 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files101 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %261, i32 0, i32 2
  %262 = load i32, i32* %m_total_files101, align 8
  %cmp102 = icmp ult i32 65535, %262
  br i1 %cmp102, label %cond.true104, label %cond.false105

cond.true104:                                     ; preds = %cond.end
  br label %cond.end107

cond.false105:                                    ; preds = %cond.end
  %263 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files106 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %263, i32 0, i32 2
  %264 = load i32, i32* %m_total_files106, align 8
  br label %cond.end107

cond.end107:                                      ; preds = %cond.false105, %cond.true104
  %cond108 = phi i32 [ 65535, %cond.true104 ], [ %264, %cond.false105 ]
  %conv109 = trunc i32 %cond108 to i16
  store i8* %add.ptr100, i8** %p.addr.i179, align 8
  store i16 %conv109, i16* %v.addr.i180, align 2
  %265 = load i16, i16* %v.addr.i180, align 2
  %conv.i181 = trunc i16 %265 to i8
  %266 = load i8*, i8** %p.addr.i179, align 8
  store i8 %conv.i181, i8* %266, align 1
  %267 = load i16, i16* %v.addr.i180, align 2
  %conv1.i182 = zext i16 %267 to i32
  %shr.i183 = ashr i32 %conv1.i182, 8
  %conv2.i = trunc i32 %shr.i183 to i8
  %268 = load i8*, i8** %p.addr.i179, align 8
  %arrayidx3.i = getelementptr inbounds i8, i8* %268, i64 1
  store i8 %conv2.i, i8* %arrayidx3.i, align 1
  %arraydecay110 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr111 = getelementptr inbounds i8, i8* %arraydecay110, i64 12
  %269 = load i64, i64* %central_dir_size, align 8
  %cmp112 = icmp ult i64 4294967295, %269
  br i1 %cmp112, label %cond.true114, label %cond.false115

cond.true114:                                     ; preds = %cond.end107
  br label %cond.end116

cond.false115:                                    ; preds = %cond.end107
  %270 = load i64, i64* %central_dir_size, align 8
  br label %cond.end116

cond.end116:                                      ; preds = %cond.false115, %cond.true114
  %cond117 = phi i64 [ 4294967295, %cond.true114 ], [ %270, %cond.false115 ]
  %conv118 = trunc i64 %cond117 to i32
  store i8* %add.ptr111, i8** %p.addr.i167, align 8
  store i32 %conv118, i32* %v.addr.i168, align 4
  %271 = load i32, i32* %v.addr.i168, align 4
  %conv.i169 = trunc i32 %271 to i8
  %272 = load i8*, i8** %p.addr.i167, align 8
  store i8 %conv.i169, i8* %272, align 1
  %273 = load i32, i32* %v.addr.i168, align 4
  %shr.i170 = lshr i32 %273, 8
  %conv1.i171 = trunc i32 %shr.i170 to i8
  %274 = load i8*, i8** %p.addr.i167, align 8
  %arrayidx2.i172 = getelementptr inbounds i8, i8* %274, i64 1
  store i8 %conv1.i171, i8* %arrayidx2.i172, align 1
  %275 = load i32, i32* %v.addr.i168, align 4
  %shr3.i173 = lshr i32 %275, 16
  %conv4.i174 = trunc i32 %shr3.i173 to i8
  %276 = load i8*, i8** %p.addr.i167, align 8
  %arrayidx5.i175 = getelementptr inbounds i8, i8* %276, i64 2
  store i8 %conv4.i174, i8* %arrayidx5.i175, align 1
  %277 = load i32, i32* %v.addr.i168, align 4
  %shr6.i176 = lshr i32 %277, 24
  %conv7.i177 = trunc i32 %shr6.i176 to i8
  %278 = load i8*, i8** %p.addr.i167, align 8
  %arrayidx8.i178 = getelementptr inbounds i8, i8* %278, i64 3
  store i8 %conv7.i177, i8* %arrayidx8.i178, align 1
  %arraydecay119 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %add.ptr120 = getelementptr inbounds i8, i8* %arraydecay119, i64 16
  %279 = load i64, i64* %central_dir_ofs, align 8
  %cmp121 = icmp ult i64 4294967295, %279
  br i1 %cmp121, label %cond.true123, label %cond.false124

cond.true123:                                     ; preds = %cond.end116
  br label %cond.end125

cond.false124:                                    ; preds = %cond.end116
  %280 = load i64, i64* %central_dir_ofs, align 8
  br label %cond.end125

cond.end125:                                      ; preds = %cond.false124, %cond.true123
  %cond126 = phi i64 [ 4294967295, %cond.true123 ], [ %280, %cond.false124 ]
  %conv127 = trunc i64 %cond126 to i32
  store i8* %add.ptr120, i8** %p.addr.i, align 8
  store i32 %conv127, i32* %v.addr.i, align 4
  %281 = load i32, i32* %v.addr.i, align 4
  %conv.i = trunc i32 %281 to i8
  %282 = load i8*, i8** %p.addr.i, align 8
  store i8 %conv.i, i8* %282, align 1
  %283 = load i32, i32* %v.addr.i, align 4
  %shr.i = lshr i32 %283, 8
  %conv1.i = trunc i32 %shr.i to i8
  %284 = load i8*, i8** %p.addr.i, align 8
  %arrayidx2.i = getelementptr inbounds i8, i8* %284, i64 1
  store i8 %conv1.i, i8* %arrayidx2.i, align 1
  %285 = load i32, i32* %v.addr.i, align 4
  %shr3.i = lshr i32 %285, 16
  %conv4.i = trunc i32 %shr3.i to i8
  %286 = load i8*, i8** %p.addr.i, align 8
  %arrayidx5.i = getelementptr inbounds i8, i8* %286, i64 2
  store i8 %conv4.i, i8* %arrayidx5.i, align 1
  %287 = load i32, i32* %v.addr.i, align 4
  %shr6.i = lshr i32 %287, 24
  %conv7.i = trunc i32 %shr6.i to i8
  %288 = load i8*, i8** %p.addr.i, align 8
  %arrayidx8.i = getelementptr inbounds i8, i8* %288, i64 3
  store i8 %conv7.i, i8* %arrayidx8.i, align 1
  %289 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite128 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %289, i32 0, i32 12
  %290 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite128, align 8
  %291 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque129 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %291, i32 0, i32 14
  %292 = load i8*, i8** %m_pIO_opaque129, align 8
  %293 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size130 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %293, i32 0, i32 0
  %294 = load i64, i64* %m_archive_size130, align 8
  %arraydecay131 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i32 0, i32 0
  %call132 = call i64 %290(i8* %292, i64 %294, i8* %arraydecay131, i64 22)
  %cmp133 = icmp ne i64 %call132, 22
  br i1 %cmp133, label %if.then135, label %if.end137

if.then135:                                       ; preds = %cond.end125
  %295 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %295, %struct.mz_zip_archive** %pZip.addr.i155, align 8
  store i32 19, i32* %err_num.addr.i156, align 4
  %296 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i155, align 8
  %tobool.i157 = icmp ne %struct.mz_zip_archive* %296, null
  br i1 %tobool.i157, label %if.then.i159, label %mz_zip_set_error.exit160

if.then.i159:                                     ; preds = %if.then135
  %297 = load i32, i32* %err_num.addr.i156, align 4
  %298 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i155, align 8
  %m_last_error.i158 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %298, i32 0, i32 5
  store i32 %297, i32* %m_last_error.i158, align 4
  br label %mz_zip_set_error.exit160

mz_zip_set_error.exit160:                         ; preds = %if.then135, %if.then.i159
  store i32 0, i32* %retval, align 4
  br label %return

if.end137:                                        ; preds = %cond.end125
  %299 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %299, i32 0, i32 6
  %300 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8
  %tobool138 = icmp ne %struct.__sFILE* %300, null
  br i1 %tobool138, label %land.lhs.true, label %if.end145

land.lhs.true:                                    ; preds = %if.end137
  %301 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_pFile139 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %301, i32 0, i32 6
  %302 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile139, align 8
  %call140 = call i32 @fflush(%struct.__sFILE* %302)
  %cmp141 = icmp eq i32 %call140, -1
  br i1 %cmp141, label %if.then143, label %if.end145

if.then143:                                       ; preds = %land.lhs.true
  %303 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %303, %struct.mz_zip_archive** %pZip.addr.i149, align 8
  store i32 21, i32* %err_num.addr.i150, align 4
  %304 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i149, align 8
  %tobool.i151 = icmp ne %struct.mz_zip_archive* %304, null
  br i1 %tobool.i151, label %if.then.i153, label %mz_zip_set_error.exit154

if.then.i153:                                     ; preds = %if.then143
  %305 = load i32, i32* %err_num.addr.i150, align 4
  %306 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i149, align 8
  %m_last_error.i152 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %306, i32 0, i32 5
  store i32 %305, i32* %m_last_error.i152, align 4
  br label %mz_zip_set_error.exit154

mz_zip_set_error.exit154:                         ; preds = %if.then143, %if.then.i153
  store i32 0, i32* %retval, align 4
  br label %return

if.end145:                                        ; preds = %land.lhs.true, %if.end137
  %307 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size146 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %307, i32 0, i32 0
  %308 = load i64, i64* %m_archive_size146, align 8
  %add147 = add i64 %308, 22
  store i64 %add147, i64* %m_archive_size146, align 8
  %309 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode148 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %309, i32 0, i32 3
  store i32 3, i32* %m_zip_mode148, align 4
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end145, %mz_zip_set_error.exit154, %mz_zip_set_error.exit160, %mz_zip_set_error.exit208, %mz_zip_set_error.exit249, %mz_zip_set_error.exit255, %mz_zip_set_error.exit214, %mz_zip_set_error.exit166, %mz_zip_set_error.exit
  %310 = load i32, i32* %retval, align 4
  ret i32 %310
}

declare i32 @fflush(%struct.__sFILE*) #1

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_writer_finalize_heap_archive(%struct.mz_zip_archive* %pZip, i8** %ppBuf, i64* %pSize) #0 {
entry:
  %pZip.addr.i28 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i29 = alloca i32, align 4
  %pZip.addr.i22 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i23 = alloca i32, align 4
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %ppBuf.addr = alloca i8**, align 8
  %pSize.addr = alloca i64*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8** %ppBuf, i8*** %ppBuf.addr, align 8
  store i64* %pSize, i64** %pSize.addr, align 8
  %0 = load i8**, i8*** %ppBuf.addr, align 8
  %tobool = icmp ne i8** %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64*, i64** %pSize.addr, align 8
  %tobool1 = icmp ne i64* %1, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %2, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %3, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %4 = load i32, i32* %err_num.addr.i, align 4
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 5
  store i32 %4, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load i8**, i8*** %ppBuf.addr, align 8
  store i8* null, i8** %6, align 8
  %7 = load i64*, i64** %pSize.addr, align 8
  store i64 0, i64* %7, align 8
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool2 = icmp ne %struct.mz_zip_archive* %8, null
  br i1 %tobool2, label %lor.lhs.false3, label %if.then5

lor.lhs.false3:                                   ; preds = %if.end
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 15
  %10 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool4 = icmp ne %struct.mz_zip_internal_state_tag* %10, null
  br i1 %tobool4, label %if.end7, label %if.then5

if.then5:                                         ; preds = %lor.lhs.false3, %if.end
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %11, %struct.mz_zip_archive** %pZip.addr.i22, align 8
  store i32 24, i32* %err_num.addr.i23, align 4
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i22, align 8
  %tobool.i24 = icmp ne %struct.mz_zip_archive* %12, null
  br i1 %tobool.i24, label %if.then.i26, label %mz_zip_set_error.exit27

if.then.i26:                                      ; preds = %if.then5
  %13 = load i32, i32* %err_num.addr.i23, align 4
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i22, align 8
  %m_last_error.i25 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 5
  store i32 %13, i32* %m_last_error.i25, align 4
  br label %mz_zip_set_error.exit27

mz_zip_set_error.exit27:                          ; preds = %if.then5, %if.then.i26
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %lor.lhs.false3
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 12
  %16 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8
  %cmp = icmp ne i64 (i8*, i64, i8*, i64)* %16, @mz_zip_heap_write_func
  br i1 %cmp, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end7
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %17, %struct.mz_zip_archive** %pZip.addr.i28, align 8
  store i32 24, i32* %err_num.addr.i29, align 4
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i28, align 8
  %tobool.i30 = icmp ne %struct.mz_zip_archive* %18, null
  br i1 %tobool.i30, label %if.then.i32, label %mz_zip_set_error.exit33

if.then.i32:                                      ; preds = %if.then8
  %19 = load i32, i32* %err_num.addr.i29, align 4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i28, align 8
  %m_last_error.i31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 5
  store i32 %19, i32* %m_last_error.i31, align 4
  br label %mz_zip_set_error.exit33

mz_zip_set_error.exit33:                          ; preds = %if.then8, %if.then.i32
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end7
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call11 = call i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive* %21)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end10
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end10
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 15
  %23 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState15, align 8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %23, i32 0, i32 8
  %24 = load i8*, i8** %m_pMem, align 8
  %25 = load i8**, i8*** %ppBuf.addr, align 8
  store i8* %24, i8** %25, align 8
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState16 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 15
  %27 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState16, align 8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %27, i32 0, i32 9
  %28 = load i64, i64* %m_mem_size, align 8
  %29 = load i64*, i64** %pSize.addr, align 8
  store i64 %28, i64* %29, align 8
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState17 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 15
  %31 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState17, align 8
  %m_pMem18 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %31, i32 0, i32 8
  store i8* null, i8** %m_pMem18, align 8
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState19 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 15
  %33 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState19, align 8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %33, i32 0, i32 10
  store i64 0, i64* %m_mem_capacity, align 8
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState20 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 15
  %35 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState20, align 8
  %m_mem_size21 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %35, i32 0, i32 9
  store i64 0, i64* %m_mem_size21, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end14, %if.then13, %mz_zip_set_error.exit33, %mz_zip_set_error.exit27, %mz_zip_set_error.exit
  %36 = load i32, i32* %retval, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_add_mem_to_archive_file_in_place(i8* %pZip_filename, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags) #0 {
entry:
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  %0 = load i8*, i8** %pZip_filename.addr, align 8
  %1 = load i8*, i8** %pArchive_name.addr, align 8
  %2 = load i8*, i8** %pBuf.addr, align 8
  %3 = load i64, i64* %buf_size.addr, align 8
  %4 = load i8*, i8** %pComment.addr, align 8
  %5 = load i16, i16* %comment_size.addr, align 2
  %6 = load i32, i32* %level_and_flags.addr, align 4
  %call = call i32 @mz_zip_add_mem_to_archive_file_in_place_v2(i8* %0, i8* %1, i8* %2, i64 %3, i8* %4, i16 zeroext %5, i32 %6, i32* null)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_add_mem_to_archive_file_in_place_v2(i8* %pZip_filename, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i32* %pErr) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %pErr.addr = alloca i32*, align 8
  %status = alloca i32, align 4
  %created_new_archive = alloca i32, align 4
  %zip_archive = alloca %struct.mz_zip_archive, align 8
  %file_stat = alloca %struct.stat, align 8
  %actual_err = alloca i32, align 4
  %ignoredStatus = alloca i32, align 4
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4
  store i32* %pErr, i32** %pErr.addr, align 8
  store i32 0, i32* %created_new_archive, align 4
  store i32 0, i32* %actual_err, align 4
  call void @mz_zip_zero_struct(%struct.mz_zip_archive* %zip_archive)
  %0 = load i32, i32* %level_and_flags.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 6, i32* %level_and_flags.addr, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i8*, i8** %pZip_filename.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then12

lor.lhs.false:                                    ; preds = %if.end
  %2 = load i8*, i8** %pArchive_name.addr, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then12

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i64, i64* %buf_size.addr, align 8
  %tobool3 = icmp ne i64 %3, 0
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false5

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %4 = load i8*, i8** %pBuf.addr, align 8
  %tobool4 = icmp ne i8* %4, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then12

lor.lhs.false5:                                   ; preds = %land.lhs.true, %lor.lhs.false2
  %5 = load i16, i16* %comment_size.addr, align 2
  %conv = zext i16 %5 to i32
  %tobool6 = icmp ne i32 %conv, 0
  br i1 %tobool6, label %land.lhs.true7, label %lor.lhs.false9

land.lhs.true7:                                   ; preds = %lor.lhs.false5
  %6 = load i8*, i8** %pComment.addr, align 8
  %tobool8 = icmp ne i8* %6, null
  br i1 %tobool8, label %lor.lhs.false9, label %if.then12

lor.lhs.false9:                                   ; preds = %land.lhs.true7, %lor.lhs.false5
  %7 = load i32, i32* %level_and_flags.addr, align 4
  %and = and i32 %7, 15
  %cmp10 = icmp ugt i32 %and, 10
  br i1 %cmp10, label %if.then12, label %if.end16

if.then12:                                        ; preds = %lor.lhs.false9, %land.lhs.true7, %land.lhs.true, %lor.lhs.false, %if.end
  %8 = load i32*, i32** %pErr.addr, align 8
  %tobool13 = icmp ne i32* %8, null
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  %9 = load i32*, i32** %pErr.addr, align 8
  store i32 24, i32* %9, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.then12
  store i32 0, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %lor.lhs.false9
  %10 = load i8*, i8** %pArchive_name.addr, align 8
  %call = call i32 @mz_zip_writer_validate_archive_name(i8* %10)
  %tobool17 = icmp ne i32 %call, 0
  br i1 %tobool17, label %if.end22, label %if.then18

if.then18:                                        ; preds = %if.end16
  %11 = load i32*, i32** %pErr.addr, align 8
  %tobool19 = icmp ne i32* %11, null
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.then18
  %12 = load i32*, i32** %pErr.addr, align 8
  store i32 25, i32* %12, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.then18
  store i32 0, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end16
  %13 = load i8*, i8** %pZip_filename.addr, align 8
  %call23 = call i32 @"\01_stat$INODE64"(i8* %13, %struct.stat* %file_stat)
  %cmp24 = icmp ne i32 %call23, 0
  br i1 %cmp24, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.end22
  %14 = load i8*, i8** %pZip_filename.addr, align 8
  %15 = load i32, i32* %level_and_flags.addr, align 4
  %call27 = call i32 @mz_zip_writer_init_file_v2(%struct.mz_zip_archive* %zip_archive, i8* %14, i64 0, i32 %15)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.end33, label %if.then29

if.then29:                                        ; preds = %if.then26
  %16 = load i32*, i32** %pErr.addr, align 8
  %tobool30 = icmp ne i32* %16, null
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.then29
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %17 = load i32, i32* %m_last_error, align 4
  %18 = load i32*, i32** %pErr.addr, align 8
  store i32 %17, i32* %18, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.then29
  store i32 0, i32* %retval, align 4
  br label %return

if.end33:                                         ; preds = %if.then26
  store i32 1, i32* %created_new_archive, align 4
  br label %if.end51

if.else:                                          ; preds = %if.end22
  %19 = load i8*, i8** %pZip_filename.addr, align 8
  %20 = load i32, i32* %level_and_flags.addr, align 4
  %or = or i32 %20, 2048
  %call34 = call i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %zip_archive, i8* %19, i32 %or, i64 0, i64 0)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end41, label %if.then36

if.then36:                                        ; preds = %if.else
  %21 = load i32*, i32** %pErr.addr, align 8
  %tobool37 = icmp ne i32* %21, null
  br i1 %tobool37, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.then36
  %m_last_error39 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %22 = load i32, i32* %m_last_error39, align 4
  %23 = load i32*, i32** %pErr.addr, align 8
  store i32 %22, i32* %23, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.then36
  store i32 0, i32* %retval, align 4
  br label %return

if.end41:                                         ; preds = %if.else
  %24 = load i8*, i8** %pZip_filename.addr, align 8
  %25 = load i32, i32* %level_and_flags.addr, align 4
  %call42 = call i32 @mz_zip_writer_init_from_reader_v2(%struct.mz_zip_archive* %zip_archive, i8* %24, i32 %25)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end50, label %if.then44

if.then44:                                        ; preds = %if.end41
  %26 = load i32*, i32** %pErr.addr, align 8
  %tobool45 = icmp ne i32* %26, null
  br i1 %tobool45, label %if.then46, label %if.end48

if.then46:                                        ; preds = %if.then44
  %m_last_error47 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %27 = load i32, i32* %m_last_error47, align 4
  %28 = load i32*, i32** %pErr.addr, align 8
  store i32 %27, i32* %28, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %if.then44
  %call49 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %zip_archive, i32 0)
  store i32 0, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %if.end41
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end33
  %29 = load i8*, i8** %pArchive_name.addr, align 8
  %30 = load i8*, i8** %pBuf.addr, align 8
  %31 = load i64, i64* %buf_size.addr, align 8
  %32 = load i8*, i8** %pComment.addr, align 8
  %33 = load i16, i16* %comment_size.addr, align 2
  %34 = load i32, i32* %level_and_flags.addr, align 4
  %call52 = call i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive* %zip_archive, i8* %29, i8* %30, i64 %31, i8* %32, i16 zeroext %33, i32 %34, i64 0, i32 0)
  store i32 %call52, i32* %status, align 4
  %m_last_error53 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %35 = load i32, i32* %m_last_error53, align 4
  store i32 %35, i32* %actual_err, align 4
  %call54 = call i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive* %zip_archive)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end61, label %if.then56

if.then56:                                        ; preds = %if.end51
  %36 = load i32, i32* %actual_err, align 4
  %tobool57 = icmp ne i32 %36, 0
  br i1 %tobool57, label %if.end60, label %if.then58

if.then58:                                        ; preds = %if.then56
  %m_last_error59 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %37 = load i32, i32* %m_last_error59, align 4
  store i32 %37, i32* %actual_err, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %if.then56
  store i32 0, i32* %status, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.end51
  %38 = load i32, i32* %status, align 4
  %call62 = call i32 @mz_zip_writer_end_internal(%struct.mz_zip_archive* %zip_archive, i32 %38)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.end69, label %if.then64

if.then64:                                        ; preds = %if.end61
  %39 = load i32, i32* %actual_err, align 4
  %tobool65 = icmp ne i32 %39, 0
  br i1 %tobool65, label %if.end68, label %if.then66

if.then66:                                        ; preds = %if.then64
  %m_last_error67 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %40 = load i32, i32* %m_last_error67, align 4
  store i32 %40, i32* %actual_err, align 4
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %if.then64
  store i32 0, i32* %status, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end61
  %41 = load i32, i32* %status, align 4
  %tobool70 = icmp ne i32 %41, 0
  br i1 %tobool70, label %if.end75, label %land.lhs.true71

land.lhs.true71:                                  ; preds = %if.end69
  %42 = load i32, i32* %created_new_archive, align 4
  %tobool72 = icmp ne i32 %42, 0
  br i1 %tobool72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %land.lhs.true71
  %43 = load i8*, i8** %pZip_filename.addr, align 8
  %call74 = call i32 @remove(i8* %43)
  store i32 %call74, i32* %ignoredStatus, align 4
  %44 = load i32, i32* %ignoredStatus, align 4
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %land.lhs.true71, %if.end69
  %45 = load i32*, i32** %pErr.addr, align 8
  %tobool76 = icmp ne i32* %45, null
  br i1 %tobool76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.end75
  %46 = load i32, i32* %actual_err, align 4
  %47 = load i32*, i32** %pErr.addr, align 8
  store i32 %46, i32* %47, align 4
  br label %if.end78

if.end78:                                         ; preds = %if.then77, %if.end75
  %48 = load i32, i32* %status, align 4
  store i32 %48, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end78, %if.end48, %if.end40, %if.end32, %if.end21, %if.end15
  %49 = load i32, i32* %retval, align 4
  ret i32 %49
}

declare i32 @"\01_stat$INODE64"(i8*, %struct.stat*) #1

declare i32 @remove(i8*) #1

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mz_zip_extract_archive_file_to_heap_v2(i8* %pZip_filename, i8* %pArchive_name, i8* %pComment, i64* %pSize, i32 %flags, i32* %pErr) #0 {
entry:
  %retval = alloca i8*, align 8
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %pErr.addr = alloca i32*, align 8
  %file_index = alloca i32, align 4
  %zip_archive = alloca %struct.mz_zip_archive, align 8
  %p = alloca i8*, align 8
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i8* %pComment, i8** %pComment.addr, align 8
  store i64* %pSize, i64** %pSize.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32* %pErr, i32** %pErr.addr, align 8
  store i8* null, i8** %p, align 8
  %0 = load i64*, i64** %pSize.addr, align 8
  %tobool = icmp ne i64* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %pSize.addr, align 8
  store i64 0, i64* %1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %pZip_filename.addr, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i8*, i8** %pArchive_name.addr, align 8
  %tobool2 = icmp ne i8* %3, null
  br i1 %tobool2, label %if.end7, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %4 = load i32*, i32** %pErr.addr, align 8
  %tobool4 = icmp ne i32* %4, null
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %5 = load i32*, i32** %pErr.addr, align 8
  store i32 24, i32* %5, align 4
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.then3
  store i8* null, i8** %retval, align 8
  br label %return

if.end7:                                          ; preds = %lor.lhs.false
  call void @mz_zip_zero_struct(%struct.mz_zip_archive* %zip_archive)
  %6 = load i8*, i8** %pZip_filename.addr, align 8
  %7 = load i32, i32* %flags.addr, align 4
  %or = or i32 %7, 2048
  %call = call i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %zip_archive, i8* %6, i32 %or, i64 0, i64 0)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.end13, label %if.then9

if.then9:                                         ; preds = %if.end7
  %8 = load i32*, i32** %pErr.addr, align 8
  %tobool10 = icmp ne i32* %8, null
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then9
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %9 = load i32, i32* %m_last_error, align 4
  %10 = load i32*, i32** %pErr.addr, align 8
  store i32 %9, i32* %10, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then9
  store i8* null, i8** %retval, align 8
  br label %return

if.end13:                                         ; preds = %if.end7
  %11 = load i8*, i8** %pArchive_name.addr, align 8
  %12 = load i8*, i8** %pComment.addr, align 8
  %13 = load i32, i32* %flags.addr, align 4
  %call14 = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %zip_archive, i8* %11, i8* %12, i32 %13, i32* %file_index)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end13
  %14 = load i32, i32* %file_index, align 4
  %15 = load i64*, i64** %pSize.addr, align 8
  %16 = load i32, i32* %flags.addr, align 4
  %call17 = call i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive* %zip_archive, i32 %14, i64* %15, i32 %16)
  store i8* %call17, i8** %p, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end13
  %17 = load i8*, i8** %p, align 8
  %cmp = icmp ne i8* %17, null
  %conv = zext i1 %cmp to i32
  %call19 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %zip_archive, i32 %conv)
  %18 = load i32*, i32** %pErr.addr, align 8
  %tobool20 = icmp ne i32* %18, null
  br i1 %tobool20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end18
  %m_last_error22 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %19 = load i32, i32* %m_last_error22, align 4
  %20 = load i32*, i32** %pErr.addr, align 8
  store i32 %19, i32* %20, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.end18
  %21 = load i8*, i8** %p, align 8
  store i8* %21, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end23, %if.end12, %if.end6
  %22 = load i8*, i8** %retval, align 8
  ret i8* %22
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mz_zip_extract_archive_file_to_heap(i8* %pZip_filename, i8* %pArchive_name, i64* %pSize, i32 %flags) #0 {
entry:
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8
  store i64* %pSize, i64** %pSize.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %pZip_filename.addr, align 8
  %1 = load i8*, i8** %pArchive_name.addr, align 8
  %2 = load i64*, i64** %pSize.addr, align 8
  %3 = load i32, i32* %flags.addr, align 4
  %call = call i8* @mz_zip_extract_archive_file_to_heap_v2(i8* %0, i8* %1, i8* null, i64* %2, i32 %3, i32* null)
  ret i8* %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_get_mode(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 3
  %2 = load i32, i32* %m_zip_mode, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_get_type(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 4
  %2 = load i32, i32* %m_zip_type, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_set_last_error(%struct.mz_zip_archive* %pZip, i32 %err_num) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr = alloca i32, align 4
  %prev_err = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %err_num, i32* %err_num.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 24, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 5
  %2 = load i32, i32* %m_last_error, align 4
  store i32 %2, i32* %prev_err, align 4
  %3 = load i32, i32* %err_num.addr, align 4
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_last_error1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 5
  store i32 %3, i32* %m_last_error1, align 4
  %5 = load i32, i32* %prev_err, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_peek_last_error(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 24, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 5
  %2 = load i32, i32* %m_last_error, align 4
  store i32 %2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_clear_last_error(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call = call i32 @mz_zip_set_last_error(%struct.mz_zip_archive* %0, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_get_last_error(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %prev_err = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 24, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 5
  %2 = load i32, i32* %m_last_error, align 4
  store i32 %2, i32* %prev_err, align 4
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_last_error1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 5
  store i32 0, i32* %m_last_error1, align 4
  %4 = load i32, i32* %prev_err, align 4
  store i32 %4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mz_zip_get_error_string(i32 %mz_err) #0 {
entry:
  %retval = alloca i8*, align 8
  %mz_err.addr = alloca i32, align 4
  store i32 %mz_err, i32* %mz_err.addr, align 4
  %0 = load i32, i32* %mz_err.addr, align 4
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
    i32 4, label %sw.bb4
    i32 5, label %sw.bb5
    i32 6, label %sw.bb6
    i32 7, label %sw.bb7
    i32 8, label %sw.bb8
    i32 9, label %sw.bb9
    i32 10, label %sw.bb10
    i32 11, label %sw.bb11
    i32 12, label %sw.bb12
    i32 13, label %sw.bb13
    i32 14, label %sw.bb14
    i32 15, label %sw.bb15
    i32 16, label %sw.bb16
    i32 17, label %sw.bb17
    i32 18, label %sw.bb18
    i32 19, label %sw.bb19
    i32 20, label %sw.bb20
    i32 21, label %sw.bb21
    i32 22, label %sw.bb22
    i32 23, label %sw.bb23
    i32 24, label %sw.bb24
    i32 25, label %sw.bb25
    i32 26, label %sw.bb26
    i32 27, label %sw.bb27
    i32 28, label %sw.bb28
    i32 29, label %sw.bb29
    i32 30, label %sw.bb30
    i32 31, label %sw.bb31
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb7:                                           ; preds = %entry
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.32, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb8:                                           ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.33, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb9:                                           ; preds = %entry
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.34, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb10:                                          ; preds = %entry
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.35, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb11:                                          ; preds = %entry
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.36, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb12:                                          ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.37, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb13:                                          ; preds = %entry
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.38, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb14:                                          ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.39, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb15:                                          ; preds = %entry
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.40, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb16:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb17:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb18:                                          ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.43, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb19:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.44, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb20:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb21:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.46, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb22:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.47, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb23:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.48, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb24:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.49, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb25:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb26:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.51, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb27:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.52, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb28:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb29:                                          ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.54, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb30:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.55, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb31:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.56, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.57, i32 0, i32 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb31, %sw.bb30, %sw.bb29, %sw.bb28, %sw.bb27, %sw.bb26, %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8
  ret i8* %1
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_is_zip64(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState2, align 8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 4
  %5 = load i32, i32* %m_zip64, align 4
  store i32 %5, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_zip_get_central_dir_size(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i64, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState2, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %5 = load i64, i64* %m_size, align 8
  store i64 %5, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_get_num_files(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 2
  %2 = load i32, i32* %m_total_files, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_zip_get_archive_size(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i64, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 0
  %2 = load i64, i64* %m_archive_size, align 8
  store i64 %2, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i64, i64* %retval, align 8
  ret i64 %3
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_zip_get_archive_file_start_offset(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i64, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState2, align 8
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 7
  %5 = load i64, i64* %m_file_archive_start_ofs, align 8
  store i64 %5, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.__sFILE* @mz_zip_get_cfile(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca %struct.__sFILE*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.__sFILE* null, %struct.__sFILE** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState2, align 8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 6
  %5 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8
  store %struct.__sFILE* %5, %struct.__sFILE** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.__sFILE*, %struct.__sFILE** %retval, align 8
  ret %struct.__sFILE* %6
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mz_zip_read_archive_data(%struct.mz_zip_archive* %pZip, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval = alloca i64, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8
  store i8* %pBuf, i8** %pBuf.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i8*, i8** %pBuf.addr, align 8
  %tobool3 = icmp ne i8* %3, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 11
  %5 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %tobool5 = icmp ne i64 (i8*, i64, i8*, i64)* %5, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %6, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %7, null
  br i1 %tobool.i, label %if.then.i, label %mz_zip_set_error.exit

if.then.i:                                        ; preds = %if.then
  %8 = load i32, i32* %err_num.addr.i, align 4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 5
  store i32 %8, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.then, %if.then.i
  %conv = sext i32 0 to i64
  store i64 %conv, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead6 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 11
  %11 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead6, align 8
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 14
  %13 = load i8*, i8** %m_pIO_opaque, align 8
  %14 = load i64, i64* %file_ofs.addr, align 8
  %15 = load i8*, i8** %pBuf.addr, align 8
  %16 = load i64, i64* %n.addr, align 8
  %call7 = call i64 %11(i8* %13, i64 %14, i8* %15, i64 %16)
  store i64 %call7, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %mz_zip_set_error.exit
  %17 = load i64, i64* %retval, align 8
  ret i64 %17
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_reader_get_filename(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pFilename, i32 %filename_buf_size) #0 {
entry:
  %pZip.addr.i14 = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr.i = alloca i32, align 4
  %retval.i = alloca i8*, align 8
  %pZip.addr.i = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr.i = alloca i32, align 4
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pFilename.addr = alloca i8*, align 8
  %filename_buf_size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %file_index, i32* %file_index.addr, align 4
  store i8* %pFilename, i8** %pFilename.addr, align 8
  store i32 %filename_buf_size, i32* %filename_buf_size.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i32, i32* %file_index.addr, align 4
  store %struct.mz_zip_archive* %0, %struct.mz_zip_archive** %pZip.addr.i, align 8
  store i32 %1, i32* %file_index.addr.i, align 4
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %tobool.i = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool.i, label %lor.lhs.false.i, label %if.then.i

lor.lhs.false.i:                                  ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState.i, align 8
  %tobool1.i = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1.i, label %lor.lhs.false2.i, label %if.then.i

lor.lhs.false2.i:                                 ; preds = %lor.lhs.false.i
  %5 = load i32, i32* %file_index.addr.i, align 4
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_total_files.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 2
  %7 = load i32, i32* %m_total_files.i, align 8
  %cmp.i = icmp uge i32 %5, %7
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %lor.lhs.false2.i, %lor.lhs.false.i, %entry
  store i8* null, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

if.end.i:                                         ; preds = %lor.lhs.false2.i
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState3.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 15
  %9 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3.i, align 8
  %m_central_dir.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %9, i32 0, i32 0
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir.i, i32 0, i32 0
  %10 = load i8*, i8** %m_p.i, align 8
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i, align 8
  %m_pState4.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 15
  %12 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4.i, align 8
  %m_central_dir_offsets.i = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %12, i32 0, i32 1
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets.i, i32 0, i32 0
  %13 = load i8*, i8** %m_p5.i, align 8
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %file_index.addr.i, align 4
  %idxprom.i = zext i32 %15 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %14, i64 %idxprom.i
  %16 = load i32, i32* %arrayidx.i, align 4
  %idxprom6.i = zext i32 %16 to i64
  %arrayidx7.i = getelementptr inbounds i8, i8* %10, i64 %idxprom6.i
  store i8* %arrayidx7.i, i8** %retval.i, align 8
  br label %mz_zip_get_cdh.exit

mz_zip_get_cdh.exit:                              ; preds = %if.then.i, %if.end.i
  %17 = load i8*, i8** %retval.i, align 8
  store i8* %17, i8** %p, align 8
  %18 = load i8*, i8** %p, align 8
  %tobool = icmp ne i8* %18, null
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %mz_zip_get_cdh.exit
  %19 = load i32, i32* %filename_buf_size.addr, align 4
  %tobool1 = icmp ne i32 %19, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %20 = load i8*, i8** %pFilename.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 0
  store i8 0, i8* %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_archive* %21, %struct.mz_zip_archive** %pZip.addr.i14, align 8
  store i32 24, i32* %err_num.addr.i, align 4
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i14, align 8
  %tobool.i15 = icmp ne %struct.mz_zip_archive* %22, null
  br i1 %tobool.i15, label %if.then.i16, label %mz_zip_set_error.exit

if.then.i16:                                      ; preds = %if.end
  %23 = load i32, i32* %err_num.addr.i, align 4
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr.i14, align 8
  %m_last_error.i = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %24, i32 0, i32 5
  store i32 %23, i32* %m_last_error.i, align 4
  br label %mz_zip_set_error.exit

mz_zip_set_error.exit:                            ; preds = %if.end, %if.then.i16
  store i32 0, i32* %retval, align 4
  br label %return

if.end4:                                          ; preds = %mz_zip_get_cdh.exit
  %25 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 28
  %26 = bitcast i8* %add.ptr to i16*
  %27 = load i16, i16* %26, align 2
  %conv = zext i16 %27 to i32
  store i32 %conv, i32* %n, align 4
  %28 = load i32, i32* %filename_buf_size.addr, align 4
  %tobool5 = icmp ne i32 %28, 0
  br i1 %tobool5, label %if.then6, label %if.end13

if.then6:                                         ; preds = %if.end4
  %29 = load i32, i32* %n, align 4
  %30 = load i32, i32* %filename_buf_size.addr, align 4
  %sub = sub i32 %30, 1
  %cmp = icmp ult i32 %29, %sub
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then6
  %31 = load i32, i32* %n, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then6
  %32 = load i32, i32* %filename_buf_size.addr, align 4
  %sub8 = sub i32 %32, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %31, %cond.true ], [ %sub8, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %33 = load i8*, i8** %pFilename.addr, align 8
  %34 = load i8*, i8** %p, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %34, i64 46
  %35 = load i32, i32* %n, align 4
  %conv10 = zext i32 %35 to i64
  %36 = load i8*, i8** %pFilename.addr, align 8
  %37 = call i64 @llvm.objectsize.i64.p0i8(i8* %36, i1 false)
  %call11 = call i8* @__memcpy_chk(i8* %33, i8* %add.ptr9, i64 %conv10, i64 %37) #10
  %38 = load i8*, i8** %pFilename.addr, align 8
  %39 = load i32, i32* %n, align 4
  %idxprom = zext i32 %39 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %38, i64 %idxprom
  store i8 0, i8* %arrayidx12, align 1
  br label %if.end13

if.end13:                                         ; preds = %cond.end, %if.end4
  %40 = load i32, i32* %n, align 4
  %add = add i32 %40, 1
  store i32 %add, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end13, %mz_zip_set_error.exit
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mz_zip_end(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 3
  %2 = load i32, i32* %m_zip_mode, align 4
  %cmp = icmp eq i32 %2, 1
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call = call i32 @mz_zip_reader_end(%struct.mz_zip_archive* %3)
  store i32 %call, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.end
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 3
  %5 = load i32, i32* %m_zip_mode2, align 4
  %cmp3 = icmp eq i32 %5, 2
  br i1 %cmp3, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_zip_mode4 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 3
  %7 = load i32, i32* %m_zip_mode4, align 4
  %cmp5 = icmp eq i32 %7, 3
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %lor.lhs.false, %if.else
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %call7 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive* %8)
  store i32 %call7, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  br label %if.end9

if.end9:                                          ; preds = %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end9, %if.then6, %if.then1, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @TDEFL_READ_UNALIGNED_WORD32(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  %0 = bitcast i32* %ret to i8*
  %1 = load i8*, i8** %p.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 4, i32 1, i1 false)
  %2 = load i32, i32* %ret, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind ssp uwtable
define internal zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %p) #0 {
entry:
  %p.addr = alloca i16*, align 8
  %ret = alloca i16, align 2
  store i16* %p, i16** %p.addr, align 8
  %0 = bitcast i16* %ret to i8*
  %1 = load i16*, i16** %p.addr, align 8
  %2 = bitcast i16* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %2, i64 2, i32 2, i1 false)
  %3 = load i16, i16* %ret, align 2
  ret i16 %3
}

; Function Attrs: noinline nounwind ssp uwtable
define internal zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %ret = alloca i16, align 2
  store i8* %p, i8** %p.addr, align 8
  %0 = bitcast i16* %ret to i8*
  %1 = load i8*, i8** %p.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 2, i32 1, i1 false)
  %2 = load i16, i16* %ret, align 2
  ret i16 %2
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @tdefl_compress_block(%struct.tdefl_compressor* %d, i32 %static_block) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %static_block.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i32 %static_block, i32* %static_block.addr, align 4
  %0 = load i32, i32* %static_block.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_start_static_block(%struct.tdefl_compressor* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_start_dynamic_block(%struct.tdefl_compressor* %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %call = call i32 @tdefl_compress_lz_codes(%struct.tdefl_compressor* %3)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @tdefl_start_static_block(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 38
  %arrayidx = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes, i64 0, i64 0
  %arrayidx1 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx, i64 0, i64 0
  store i8* %arrayidx1, i8** %p, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp ule i32 %1, 143
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 8, i8* %2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %3 = load i32, i32* %i, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc6, %for.end
  %4 = load i32, i32* %i, align 4
  %cmp3 = icmp ule i32 %4, 255
  br i1 %cmp3, label %for.body4, label %for.end8

for.body4:                                        ; preds = %for.cond2
  %5 = load i8*, i8** %p, align 8
  %incdec.ptr5 = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr5, i8** %p, align 8
  store i8 9, i8* %5, align 1
  br label %for.inc6

for.inc6:                                         ; preds = %for.body4
  %6 = load i32, i32* %i, align 4
  %inc7 = add i32 %6, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond2

for.end8:                                         ; preds = %for.cond2
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc13, %for.end8
  %7 = load i32, i32* %i, align 4
  %cmp10 = icmp ule i32 %7, 279
  br i1 %cmp10, label %for.body11, label %for.end15

for.body11:                                       ; preds = %for.cond9
  %8 = load i8*, i8** %p, align 8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr12, i8** %p, align 8
  store i8 7, i8* %8, align 1
  br label %for.inc13

for.inc13:                                        ; preds = %for.body11
  %9 = load i32, i32* %i, align 4
  %inc14 = add i32 %9, 1
  store i32 %inc14, i32* %i, align 4
  br label %for.cond9

for.end15:                                        ; preds = %for.cond9
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc20, %for.end15
  %10 = load i32, i32* %i, align 4
  %cmp17 = icmp ule i32 %10, 287
  br i1 %cmp17, label %for.body18, label %for.end22

for.body18:                                       ; preds = %for.cond16
  %11 = load i8*, i8** %p, align 8
  %incdec.ptr19 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr19, i8** %p, align 8
  store i8 8, i8* %11, align 1
  br label %for.inc20

for.inc20:                                        ; preds = %for.body18
  %12 = load i32, i32* %i, align 4
  %inc21 = add i32 %12, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond16

for.end22:                                        ; preds = %for.cond16
  %13 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes23 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %13, i32 0, i32 38
  %arrayidx24 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes23, i64 0, i64 1
  %arraydecay = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx24, i32 0, i32 0
  %14 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes25 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 38
  %arrayidx26 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes25, i64 0, i64 1
  %arraydecay27 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx26, i32 0, i32 0
  %15 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay27, i1 false)
  %call = call i8* @__memset_chk(i8* %arraydecay, i32 5, i64 32, i64 %15) #10
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %16, i32 0, i32 288, i32 15, i32 1)
  %17 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %17, i32 1, i32 32, i32 15, i32 1)
  br label %do.body

do.body:                                          ; preds = %for.end22
  store i32 1, i32* %bits, align 4
  store i32 2, i32* %len, align 4
  %18 = load i32, i32* %bits, align 4
  %19 = load i32, i32* %len, align 4
  %shl = shl i32 1, %19
  %sub = sub i32 %shl, 1
  %cmp28 = icmp ule i32 %18, %sub
  %lnot = xor i1 %cmp28, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  call void @__assert_rtn(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.tdefl_start_static_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1075, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %do.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %20
  %21 = load i32, i32* %bits, align 4
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 16
  %23 = load i32, i32* %m_bits_in, align 4
  %shl29 = shl i32 %21, %23
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 17
  %25 = load i32, i32* %m_bit_buffer, align 8
  %or = or i32 %25, %shl29
  store i32 %or, i32* %m_bit_buffer, align 8
  %26 = load i32, i32* %len, align 4
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in30 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 16
  %28 = load i32, i32* %m_bits_in30, align 4
  %add = add i32 %28, %26
  store i32 %add, i32* %m_bits_in30, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in31 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 16
  %30 = load i32, i32* %m_bits_in31, align 4
  %cmp32 = icmp uge i32 %30, 8
  br i1 %cmp32, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 11
  %32 = load i8*, i8** %m_pOutput_buf, align 8
  %33 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %33, i32 0, i32 12
  %34 = load i8*, i8** %m_pOutput_buf_end, align 8
  %cmp34 = icmp ult i8* %32, %34
  br i1 %cmp34, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer36 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %35, i32 0, i32 17
  %36 = load i32, i32* %m_bit_buffer36, align 8
  %conv37 = trunc i32 %36 to i8
  %37 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf38 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %37, i32 0, i32 11
  %38 = load i8*, i8** %m_pOutput_buf38, align 8
  %incdec.ptr39 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr39, i8** %m_pOutput_buf38, align 8
  store i8 %conv37, i8* %38, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %39 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer40 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %39, i32 0, i32 17
  %40 = load i32, i32* %m_bit_buffer40, align 8
  %shr = lshr i32 %40, 8
  store i32 %shr, i32* %m_bit_buffer40, align 8
  %41 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in41 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %41, i32 0, i32 16
  %42 = load i32, i32* %m_bits_in41, align 4
  %sub42 = sub i32 %42, 8
  store i32 %sub42, i32* %m_bits_in41, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.end

do.end:                                           ; preds = %while.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @tdefl_start_dynamic_block(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %num_lit_codes = alloca i32, align 4
  %num_dist_codes = alloca i32, align 4
  %num_bit_lengths = alloca i32, align 4
  %i = alloca i32, align 4
  %total_code_sizes_to_pack = alloca i32, align 4
  %num_packed_code_sizes = alloca i32, align 4
  %rle_z_count = alloca i32, align 4
  %rle_repeat_count = alloca i32, align 4
  %packed_code_sizes_index = alloca i32, align 4
  %code_sizes_to_pack = alloca [320 x i8], align 16
  %packed_code_sizes = alloca [320 x i8], align 16
  %prev_code_size = alloca i8, align 1
  %code_size = alloca i8, align 1
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits473 = alloca i32, align 4
  %len475 = alloca i32, align 4
  %bits515 = alloca i32, align 4
  %len517 = alloca i32, align 4
  %bits580 = alloca i32, align 4
  %len582 = alloca i32, align 4
  %bits626 = alloca i32, align 4
  %len634 = alloca i32, align 4
  %code = alloca i32, align 4
  %bits694 = alloca i32, align 4
  %len699 = alloca i32, align 4
  %bits747 = alloca i32, align 4
  %len752 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i8 -1, i8* %prev_code_size, align 1
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 36
  %arrayidx = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %arrayidx1 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx, i64 0, i64 256
  store i16 1, i16* %arrayidx1, align 2
  %1 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %1, i32 0, i32 288, i32 15, i32 0)
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %2, i32 1, i32 32, i32 15, i32 0)
  store i32 286, i32* %num_lit_codes, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %num_lit_codes, align 4
  %cmp = icmp sgt i32 %3, 257
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 38
  %arrayidx2 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes, i64 0, i64 0
  %5 = load i32, i32* %num_lit_codes, align 4
  %sub = sub nsw i32 %5, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx3 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx2, i64 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx3, align 1
  %tobool = icmp ne i8 %6, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %num_lit_codes, align 4
  %dec = add nsw i32 %7, -1
  store i32 %dec, i32* %num_lit_codes, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 30, i32* %num_dist_codes, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc15, %for.end
  %8 = load i32, i32* %num_dist_codes, align 4
  %cmp5 = icmp sgt i32 %8, 1
  br i1 %cmp5, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond4
  %9 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %9, i32 0, i32 38
  %arrayidx8 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes7, i64 0, i64 1
  %10 = load i32, i32* %num_dist_codes, align 4
  %sub9 = sub nsw i32 %10, 1
  %idxprom10 = sext i32 %sub9 to i64
  %arrayidx11 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx8, i64 0, i64 %idxprom10
  %11 = load i8, i8* %arrayidx11, align 1
  %tobool12 = icmp ne i8 %11, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body6
  br label %for.end17

if.end14:                                         ; preds = %for.body6
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %12 = load i32, i32* %num_dist_codes, align 4
  %dec16 = add nsw i32 %12, -1
  store i32 %dec16, i32* %num_dist_codes, align 4
  br label %for.cond4

for.end17:                                        ; preds = %if.then13, %for.cond4
  %arraydecay = getelementptr inbounds [320 x i8], [320 x i8]* %code_sizes_to_pack, i32 0, i32 0
  %13 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes18 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %13, i32 0, i32 38
  %arrayidx19 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes18, i64 0, i64 0
  %arrayidx20 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx19, i64 0, i64 0
  %14 = load i32, i32* %num_lit_codes, align 4
  %conv = sext i32 %14 to i64
  %call = call i8* @__memcpy_chk(i8* %arraydecay, i8* %arrayidx20, i64 %conv, i64 320) #10
  %arraydecay21 = getelementptr inbounds [320 x i8], [320 x i8]* %code_sizes_to_pack, i32 0, i32 0
  %15 = load i32, i32* %num_lit_codes, align 4
  %idx.ext = sext i32 %15 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay21, i64 %idx.ext
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes22 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %16, i32 0, i32 38
  %arrayidx23 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes22, i64 0, i64 1
  %arrayidx24 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx23, i64 0, i64 0
  %17 = load i32, i32* %num_dist_codes, align 4
  %conv25 = sext i32 %17 to i64
  %arraydecay26 = getelementptr inbounds [320 x i8], [320 x i8]* %code_sizes_to_pack, i32 0, i32 0
  %18 = load i32, i32* %num_lit_codes, align 4
  %idx.ext27 = sext i32 %18 to i64
  %add.ptr28 = getelementptr inbounds i8, i8* %arraydecay26, i64 %idx.ext27
  %19 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr28, i1 false)
  %call29 = call i8* @__memcpy_chk(i8* %add.ptr, i8* %arrayidx24, i64 %conv25, i64 %19) #10
  %20 = load i32, i32* %num_lit_codes, align 4
  %21 = load i32, i32* %num_dist_codes, align 4
  %add = add nsw i32 %20, %21
  store i32 %add, i32* %total_code_sizes_to_pack, align 4
  store i32 0, i32* %num_packed_code_sizes, align 4
  store i32 0, i32* %rle_z_count, align 4
  store i32 0, i32* %rle_repeat_count, align 4
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count30 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 36
  %arrayidx31 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count30, i64 0, i64 2
  %arrayidx32 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx31, i64 0, i64 0
  %23 = bitcast i16* %arrayidx32 to i8*
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count33 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 36
  %arrayidx34 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count33, i64 0, i64 2
  %arrayidx35 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx34, i64 0, i64 0
  %25 = bitcast i16* %arrayidx35 to i8*
  %26 = call i64 @llvm.objectsize.i64.p0i8(i8* %25, i1 false)
  %call36 = call i8* @__memset_chk(i8* %23, i32 0, i64 38, i64 %26) #10
  store i32 0, i32* %i, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc333, %for.end17
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %total_code_sizes_to_pack, align 4
  %cmp38 = icmp ult i32 %27, %28
  br i1 %cmp38, label %for.body40, label %for.end335

for.body40:                                       ; preds = %for.cond37
  %29 = load i32, i32* %i, align 4
  %idxprom41 = zext i32 %29 to i64
  %arrayidx42 = getelementptr inbounds [320 x i8], [320 x i8]* %code_sizes_to_pack, i64 0, i64 %idxprom41
  %30 = load i8, i8* %arrayidx42, align 1
  store i8 %30, i8* %code_size, align 1
  %31 = load i8, i8* %code_size, align 1
  %tobool43 = icmp ne i8 %31, 0
  br i1 %tobool43, label %if.else153, label %if.then44

if.then44:                                        ; preds = %for.body40
  %32 = load i32, i32* %rle_repeat_count, align 4
  %tobool45 = icmp ne i32 %32, 0
  br i1 %tobool45, label %if.then46, label %if.end83

if.then46:                                        ; preds = %if.then44
  %33 = load i32, i32* %rle_repeat_count, align 4
  %cmp47 = icmp ult i32 %33, 3
  br i1 %cmp47, label %if.then49, label %if.else

if.then49:                                        ; preds = %if.then46
  %34 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count50 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %34, i32 0, i32 36
  %arrayidx51 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count50, i64 0, i64 2
  %35 = load i8, i8* %prev_code_size, align 1
  %idxprom52 = zext i8 %35 to i64
  %arrayidx53 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx51, i64 0, i64 %idxprom52
  %36 = load i16, i16* %arrayidx53, align 2
  %conv54 = zext i16 %36 to i32
  %37 = load i32, i32* %rle_repeat_count, align 4
  %add55 = add i32 %conv54, %37
  %conv56 = trunc i32 %add55 to i16
  %38 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count57 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %38, i32 0, i32 36
  %arrayidx58 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count57, i64 0, i64 2
  %39 = load i8, i8* %prev_code_size, align 1
  %idxprom59 = zext i8 %39 to i64
  %arrayidx60 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx58, i64 0, i64 %idxprom59
  store i16 %conv56, i16* %arrayidx60, align 2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then49
  %40 = load i32, i32* %rle_repeat_count, align 4
  %dec61 = add i32 %40, -1
  store i32 %dec61, i32* %rle_repeat_count, align 4
  %tobool62 = icmp ne i32 %40, 0
  br i1 %tobool62, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %41 = load i8, i8* %prev_code_size, align 1
  %42 = load i32, i32* %num_packed_code_sizes, align 4
  %inc = add i32 %42, 1
  store i32 %inc, i32* %num_packed_code_sizes, align 4
  %idxprom63 = zext i32 %42 to i64
  %arrayidx64 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom63
  store i8 %41, i8* %arrayidx64, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end82

if.else:                                          ; preds = %if.then46
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count65 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %43, i32 0, i32 36
  %arrayidx66 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count65, i64 0, i64 2
  %arrayidx67 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx66, i64 0, i64 16
  %44 = load i16, i16* %arrayidx67, align 2
  %conv68 = zext i16 %44 to i32
  %add69 = add nsw i32 %conv68, 1
  %conv70 = trunc i32 %add69 to i16
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count71 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 36
  %arrayidx72 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count71, i64 0, i64 2
  %arrayidx73 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx72, i64 0, i64 16
  store i16 %conv70, i16* %arrayidx73, align 2
  %46 = load i32, i32* %num_packed_code_sizes, align 4
  %inc74 = add i32 %46, 1
  store i32 %inc74, i32* %num_packed_code_sizes, align 4
  %idxprom75 = zext i32 %46 to i64
  %arrayidx76 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom75
  store i8 16, i8* %arrayidx76, align 1
  %47 = load i32, i32* %rle_repeat_count, align 4
  %sub77 = sub i32 %47, 3
  %conv78 = trunc i32 %sub77 to i8
  %48 = load i32, i32* %num_packed_code_sizes, align 4
  %inc79 = add i32 %48, 1
  store i32 %inc79, i32* %num_packed_code_sizes, align 4
  %idxprom80 = zext i32 %48 to i64
  %arrayidx81 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom80
  store i8 %conv78, i8* %arrayidx81, align 1
  br label %if.end82

if.end82:                                         ; preds = %if.else, %while.end
  store i32 0, i32* %rle_repeat_count, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then44
  %49 = load i32, i32* %rle_z_count, align 4
  %inc84 = add i32 %49, 1
  store i32 %inc84, i32* %rle_z_count, align 4
  %cmp85 = icmp eq i32 %inc84, 138
  br i1 %cmp85, label %if.then87, label %if.end152

if.then87:                                        ; preds = %if.end83
  %50 = load i32, i32* %rle_z_count, align 4
  %tobool88 = icmp ne i32 %50, 0
  br i1 %tobool88, label %if.then89, label %if.end151

if.then89:                                        ; preds = %if.then87
  %51 = load i32, i32* %rle_z_count, align 4
  %cmp90 = icmp ult i32 %51, 3
  br i1 %cmp90, label %if.then92, label %if.else110

if.then92:                                        ; preds = %if.then89
  %52 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count93 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %52, i32 0, i32 36
  %arrayidx94 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count93, i64 0, i64 2
  %arrayidx95 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx94, i64 0, i64 0
  %53 = load i16, i16* %arrayidx95, align 2
  %conv96 = zext i16 %53 to i32
  %54 = load i32, i32* %rle_z_count, align 4
  %add97 = add i32 %conv96, %54
  %conv98 = trunc i32 %add97 to i16
  %55 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count99 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %55, i32 0, i32 36
  %arrayidx100 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count99, i64 0, i64 2
  %arrayidx101 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx100, i64 0, i64 0
  store i16 %conv98, i16* %arrayidx101, align 2
  br label %while.cond102

while.cond102:                                    ; preds = %while.body105, %if.then92
  %56 = load i32, i32* %rle_z_count, align 4
  %dec103 = add i32 %56, -1
  store i32 %dec103, i32* %rle_z_count, align 4
  %tobool104 = icmp ne i32 %56, 0
  br i1 %tobool104, label %while.body105, label %while.end109

while.body105:                                    ; preds = %while.cond102
  %57 = load i32, i32* %num_packed_code_sizes, align 4
  %inc106 = add i32 %57, 1
  store i32 %inc106, i32* %num_packed_code_sizes, align 4
  %idxprom107 = zext i32 %57 to i64
  %arrayidx108 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom107
  store i8 0, i8* %arrayidx108, align 1
  br label %while.cond102

while.end109:                                     ; preds = %while.cond102
  br label %if.end150

if.else110:                                       ; preds = %if.then89
  %58 = load i32, i32* %rle_z_count, align 4
  %cmp111 = icmp ule i32 %58, 10
  br i1 %cmp111, label %if.then113, label %if.else131

if.then113:                                       ; preds = %if.else110
  %59 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count114 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %59, i32 0, i32 36
  %arrayidx115 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count114, i64 0, i64 2
  %arrayidx116 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx115, i64 0, i64 17
  %60 = load i16, i16* %arrayidx116, align 2
  %conv117 = zext i16 %60 to i32
  %add118 = add nsw i32 %conv117, 1
  %conv119 = trunc i32 %add118 to i16
  %61 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count120 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %61, i32 0, i32 36
  %arrayidx121 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count120, i64 0, i64 2
  %arrayidx122 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx121, i64 0, i64 17
  store i16 %conv119, i16* %arrayidx122, align 2
  %62 = load i32, i32* %num_packed_code_sizes, align 4
  %inc123 = add i32 %62, 1
  store i32 %inc123, i32* %num_packed_code_sizes, align 4
  %idxprom124 = zext i32 %62 to i64
  %arrayidx125 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom124
  store i8 17, i8* %arrayidx125, align 1
  %63 = load i32, i32* %rle_z_count, align 4
  %sub126 = sub i32 %63, 3
  %conv127 = trunc i32 %sub126 to i8
  %64 = load i32, i32* %num_packed_code_sizes, align 4
  %inc128 = add i32 %64, 1
  store i32 %inc128, i32* %num_packed_code_sizes, align 4
  %idxprom129 = zext i32 %64 to i64
  %arrayidx130 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom129
  store i8 %conv127, i8* %arrayidx130, align 1
  br label %if.end149

if.else131:                                       ; preds = %if.else110
  %65 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count132 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %65, i32 0, i32 36
  %arrayidx133 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count132, i64 0, i64 2
  %arrayidx134 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx133, i64 0, i64 18
  %66 = load i16, i16* %arrayidx134, align 2
  %conv135 = zext i16 %66 to i32
  %add136 = add nsw i32 %conv135, 1
  %conv137 = trunc i32 %add136 to i16
  %67 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count138 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %67, i32 0, i32 36
  %arrayidx139 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count138, i64 0, i64 2
  %arrayidx140 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx139, i64 0, i64 18
  store i16 %conv137, i16* %arrayidx140, align 2
  %68 = load i32, i32* %num_packed_code_sizes, align 4
  %inc141 = add i32 %68, 1
  store i32 %inc141, i32* %num_packed_code_sizes, align 4
  %idxprom142 = zext i32 %68 to i64
  %arrayidx143 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom142
  store i8 18, i8* %arrayidx143, align 1
  %69 = load i32, i32* %rle_z_count, align 4
  %sub144 = sub i32 %69, 11
  %conv145 = trunc i32 %sub144 to i8
  %70 = load i32, i32* %num_packed_code_sizes, align 4
  %inc146 = add i32 %70, 1
  store i32 %inc146, i32* %num_packed_code_sizes, align 4
  %idxprom147 = zext i32 %70 to i64
  %arrayidx148 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom147
  store i8 %conv145, i8* %arrayidx148, align 1
  br label %if.end149

if.end149:                                        ; preds = %if.else131, %if.then113
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %while.end109
  store i32 0, i32* %rle_z_count, align 4
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.then87
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %if.end83
  br label %if.end332

if.else153:                                       ; preds = %for.body40
  %71 = load i32, i32* %rle_z_count, align 4
  %tobool154 = icmp ne i32 %71, 0
  br i1 %tobool154, label %if.then155, label %if.end217

if.then155:                                       ; preds = %if.else153
  %72 = load i32, i32* %rle_z_count, align 4
  %cmp156 = icmp ult i32 %72, 3
  br i1 %cmp156, label %if.then158, label %if.else176

if.then158:                                       ; preds = %if.then155
  %73 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count159 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %73, i32 0, i32 36
  %arrayidx160 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count159, i64 0, i64 2
  %arrayidx161 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx160, i64 0, i64 0
  %74 = load i16, i16* %arrayidx161, align 2
  %conv162 = zext i16 %74 to i32
  %75 = load i32, i32* %rle_z_count, align 4
  %add163 = add i32 %conv162, %75
  %conv164 = trunc i32 %add163 to i16
  %76 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count165 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %76, i32 0, i32 36
  %arrayidx166 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count165, i64 0, i64 2
  %arrayidx167 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx166, i64 0, i64 0
  store i16 %conv164, i16* %arrayidx167, align 2
  br label %while.cond168

while.cond168:                                    ; preds = %while.body171, %if.then158
  %77 = load i32, i32* %rle_z_count, align 4
  %dec169 = add i32 %77, -1
  store i32 %dec169, i32* %rle_z_count, align 4
  %tobool170 = icmp ne i32 %77, 0
  br i1 %tobool170, label %while.body171, label %while.end175

while.body171:                                    ; preds = %while.cond168
  %78 = load i32, i32* %num_packed_code_sizes, align 4
  %inc172 = add i32 %78, 1
  store i32 %inc172, i32* %num_packed_code_sizes, align 4
  %idxprom173 = zext i32 %78 to i64
  %arrayidx174 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom173
  store i8 0, i8* %arrayidx174, align 1
  br label %while.cond168

while.end175:                                     ; preds = %while.cond168
  br label %if.end216

if.else176:                                       ; preds = %if.then155
  %79 = load i32, i32* %rle_z_count, align 4
  %cmp177 = icmp ule i32 %79, 10
  br i1 %cmp177, label %if.then179, label %if.else197

if.then179:                                       ; preds = %if.else176
  %80 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count180 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %80, i32 0, i32 36
  %arrayidx181 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count180, i64 0, i64 2
  %arrayidx182 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx181, i64 0, i64 17
  %81 = load i16, i16* %arrayidx182, align 2
  %conv183 = zext i16 %81 to i32
  %add184 = add nsw i32 %conv183, 1
  %conv185 = trunc i32 %add184 to i16
  %82 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count186 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %82, i32 0, i32 36
  %arrayidx187 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count186, i64 0, i64 2
  %arrayidx188 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx187, i64 0, i64 17
  store i16 %conv185, i16* %arrayidx188, align 2
  %83 = load i32, i32* %num_packed_code_sizes, align 4
  %inc189 = add i32 %83, 1
  store i32 %inc189, i32* %num_packed_code_sizes, align 4
  %idxprom190 = zext i32 %83 to i64
  %arrayidx191 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom190
  store i8 17, i8* %arrayidx191, align 1
  %84 = load i32, i32* %rle_z_count, align 4
  %sub192 = sub i32 %84, 3
  %conv193 = trunc i32 %sub192 to i8
  %85 = load i32, i32* %num_packed_code_sizes, align 4
  %inc194 = add i32 %85, 1
  store i32 %inc194, i32* %num_packed_code_sizes, align 4
  %idxprom195 = zext i32 %85 to i64
  %arrayidx196 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom195
  store i8 %conv193, i8* %arrayidx196, align 1
  br label %if.end215

if.else197:                                       ; preds = %if.else176
  %86 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count198 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %86, i32 0, i32 36
  %arrayidx199 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count198, i64 0, i64 2
  %arrayidx200 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx199, i64 0, i64 18
  %87 = load i16, i16* %arrayidx200, align 2
  %conv201 = zext i16 %87 to i32
  %add202 = add nsw i32 %conv201, 1
  %conv203 = trunc i32 %add202 to i16
  %88 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count204 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %88, i32 0, i32 36
  %arrayidx205 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count204, i64 0, i64 2
  %arrayidx206 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx205, i64 0, i64 18
  store i16 %conv203, i16* %arrayidx206, align 2
  %89 = load i32, i32* %num_packed_code_sizes, align 4
  %inc207 = add i32 %89, 1
  store i32 %inc207, i32* %num_packed_code_sizes, align 4
  %idxprom208 = zext i32 %89 to i64
  %arrayidx209 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom208
  store i8 18, i8* %arrayidx209, align 1
  %90 = load i32, i32* %rle_z_count, align 4
  %sub210 = sub i32 %90, 11
  %conv211 = trunc i32 %sub210 to i8
  %91 = load i32, i32* %num_packed_code_sizes, align 4
  %inc212 = add i32 %91, 1
  store i32 %inc212, i32* %num_packed_code_sizes, align 4
  %idxprom213 = zext i32 %91 to i64
  %arrayidx214 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom213
  store i8 %conv211, i8* %arrayidx214, align 1
  br label %if.end215

if.end215:                                        ; preds = %if.else197, %if.then179
  br label %if.end216

if.end216:                                        ; preds = %if.end215, %while.end175
  store i32 0, i32* %rle_z_count, align 4
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %if.else153
  %92 = load i8, i8* %code_size, align 1
  %conv218 = zext i8 %92 to i32
  %93 = load i8, i8* %prev_code_size, align 1
  %conv219 = zext i8 %93 to i32
  %cmp220 = icmp ne i32 %conv218, %conv219
  br i1 %cmp220, label %if.then222, label %if.else281

if.then222:                                       ; preds = %if.end217
  %94 = load i32, i32* %rle_repeat_count, align 4
  %tobool223 = icmp ne i32 %94, 0
  br i1 %tobool223, label %if.then224, label %if.end266

if.then224:                                       ; preds = %if.then222
  %95 = load i32, i32* %rle_repeat_count, align 4
  %cmp225 = icmp ult i32 %95, 3
  br i1 %cmp225, label %if.then227, label %if.else247

if.then227:                                       ; preds = %if.then224
  %96 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count228 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %96, i32 0, i32 36
  %arrayidx229 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count228, i64 0, i64 2
  %97 = load i8, i8* %prev_code_size, align 1
  %idxprom230 = zext i8 %97 to i64
  %arrayidx231 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx229, i64 0, i64 %idxprom230
  %98 = load i16, i16* %arrayidx231, align 2
  %conv232 = zext i16 %98 to i32
  %99 = load i32, i32* %rle_repeat_count, align 4
  %add233 = add i32 %conv232, %99
  %conv234 = trunc i32 %add233 to i16
  %100 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count235 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %100, i32 0, i32 36
  %arrayidx236 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count235, i64 0, i64 2
  %101 = load i8, i8* %prev_code_size, align 1
  %idxprom237 = zext i8 %101 to i64
  %arrayidx238 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx236, i64 0, i64 %idxprom237
  store i16 %conv234, i16* %arrayidx238, align 2
  br label %while.cond239

while.cond239:                                    ; preds = %while.body242, %if.then227
  %102 = load i32, i32* %rle_repeat_count, align 4
  %dec240 = add i32 %102, -1
  store i32 %dec240, i32* %rle_repeat_count, align 4
  %tobool241 = icmp ne i32 %102, 0
  br i1 %tobool241, label %while.body242, label %while.end246

while.body242:                                    ; preds = %while.cond239
  %103 = load i8, i8* %prev_code_size, align 1
  %104 = load i32, i32* %num_packed_code_sizes, align 4
  %inc243 = add i32 %104, 1
  store i32 %inc243, i32* %num_packed_code_sizes, align 4
  %idxprom244 = zext i32 %104 to i64
  %arrayidx245 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom244
  store i8 %103, i8* %arrayidx245, align 1
  br label %while.cond239

while.end246:                                     ; preds = %while.cond239
  br label %if.end265

if.else247:                                       ; preds = %if.then224
  %105 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count248 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %105, i32 0, i32 36
  %arrayidx249 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count248, i64 0, i64 2
  %arrayidx250 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx249, i64 0, i64 16
  %106 = load i16, i16* %arrayidx250, align 2
  %conv251 = zext i16 %106 to i32
  %add252 = add nsw i32 %conv251, 1
  %conv253 = trunc i32 %add252 to i16
  %107 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count254 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %107, i32 0, i32 36
  %arrayidx255 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count254, i64 0, i64 2
  %arrayidx256 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx255, i64 0, i64 16
  store i16 %conv253, i16* %arrayidx256, align 2
  %108 = load i32, i32* %num_packed_code_sizes, align 4
  %inc257 = add i32 %108, 1
  store i32 %inc257, i32* %num_packed_code_sizes, align 4
  %idxprom258 = zext i32 %108 to i64
  %arrayidx259 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom258
  store i8 16, i8* %arrayidx259, align 1
  %109 = load i32, i32* %rle_repeat_count, align 4
  %sub260 = sub i32 %109, 3
  %conv261 = trunc i32 %sub260 to i8
  %110 = load i32, i32* %num_packed_code_sizes, align 4
  %inc262 = add i32 %110, 1
  store i32 %inc262, i32* %num_packed_code_sizes, align 4
  %idxprom263 = zext i32 %110 to i64
  %arrayidx264 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom263
  store i8 %conv261, i8* %arrayidx264, align 1
  br label %if.end265

if.end265:                                        ; preds = %if.else247, %while.end246
  store i32 0, i32* %rle_repeat_count, align 4
  br label %if.end266

if.end266:                                        ; preds = %if.end265, %if.then222
  %111 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count267 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %111, i32 0, i32 36
  %arrayidx268 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count267, i64 0, i64 2
  %112 = load i8, i8* %code_size, align 1
  %idxprom269 = zext i8 %112 to i64
  %arrayidx270 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx268, i64 0, i64 %idxprom269
  %113 = load i16, i16* %arrayidx270, align 2
  %conv271 = zext i16 %113 to i32
  %add272 = add nsw i32 %conv271, 1
  %conv273 = trunc i32 %add272 to i16
  %114 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count274 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %114, i32 0, i32 36
  %arrayidx275 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count274, i64 0, i64 2
  %115 = load i8, i8* %code_size, align 1
  %idxprom276 = zext i8 %115 to i64
  %arrayidx277 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx275, i64 0, i64 %idxprom276
  store i16 %conv273, i16* %arrayidx277, align 2
  %116 = load i8, i8* %code_size, align 1
  %117 = load i32, i32* %num_packed_code_sizes, align 4
  %inc278 = add i32 %117, 1
  store i32 %inc278, i32* %num_packed_code_sizes, align 4
  %idxprom279 = zext i32 %117 to i64
  %arrayidx280 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom279
  store i8 %116, i8* %arrayidx280, align 1
  br label %if.end331

if.else281:                                       ; preds = %if.end217
  %118 = load i32, i32* %rle_repeat_count, align 4
  %inc282 = add i32 %118, 1
  store i32 %inc282, i32* %rle_repeat_count, align 4
  %cmp283 = icmp eq i32 %inc282, 6
  br i1 %cmp283, label %if.then285, label %if.end330

if.then285:                                       ; preds = %if.else281
  %119 = load i32, i32* %rle_repeat_count, align 4
  %tobool286 = icmp ne i32 %119, 0
  br i1 %tobool286, label %if.then287, label %if.end329

if.then287:                                       ; preds = %if.then285
  %120 = load i32, i32* %rle_repeat_count, align 4
  %cmp288 = icmp ult i32 %120, 3
  br i1 %cmp288, label %if.then290, label %if.else310

if.then290:                                       ; preds = %if.then287
  %121 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count291 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %121, i32 0, i32 36
  %arrayidx292 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count291, i64 0, i64 2
  %122 = load i8, i8* %prev_code_size, align 1
  %idxprom293 = zext i8 %122 to i64
  %arrayidx294 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx292, i64 0, i64 %idxprom293
  %123 = load i16, i16* %arrayidx294, align 2
  %conv295 = zext i16 %123 to i32
  %124 = load i32, i32* %rle_repeat_count, align 4
  %add296 = add i32 %conv295, %124
  %conv297 = trunc i32 %add296 to i16
  %125 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count298 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %125, i32 0, i32 36
  %arrayidx299 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count298, i64 0, i64 2
  %126 = load i8, i8* %prev_code_size, align 1
  %idxprom300 = zext i8 %126 to i64
  %arrayidx301 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx299, i64 0, i64 %idxprom300
  store i16 %conv297, i16* %arrayidx301, align 2
  br label %while.cond302

while.cond302:                                    ; preds = %while.body305, %if.then290
  %127 = load i32, i32* %rle_repeat_count, align 4
  %dec303 = add i32 %127, -1
  store i32 %dec303, i32* %rle_repeat_count, align 4
  %tobool304 = icmp ne i32 %127, 0
  br i1 %tobool304, label %while.body305, label %while.end309

while.body305:                                    ; preds = %while.cond302
  %128 = load i8, i8* %prev_code_size, align 1
  %129 = load i32, i32* %num_packed_code_sizes, align 4
  %inc306 = add i32 %129, 1
  store i32 %inc306, i32* %num_packed_code_sizes, align 4
  %idxprom307 = zext i32 %129 to i64
  %arrayidx308 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom307
  store i8 %128, i8* %arrayidx308, align 1
  br label %while.cond302

while.end309:                                     ; preds = %while.cond302
  br label %if.end328

if.else310:                                       ; preds = %if.then287
  %130 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count311 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %130, i32 0, i32 36
  %arrayidx312 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count311, i64 0, i64 2
  %arrayidx313 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx312, i64 0, i64 16
  %131 = load i16, i16* %arrayidx313, align 2
  %conv314 = zext i16 %131 to i32
  %add315 = add nsw i32 %conv314, 1
  %conv316 = trunc i32 %add315 to i16
  %132 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count317 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %132, i32 0, i32 36
  %arrayidx318 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count317, i64 0, i64 2
  %arrayidx319 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx318, i64 0, i64 16
  store i16 %conv316, i16* %arrayidx319, align 2
  %133 = load i32, i32* %num_packed_code_sizes, align 4
  %inc320 = add i32 %133, 1
  store i32 %inc320, i32* %num_packed_code_sizes, align 4
  %idxprom321 = zext i32 %133 to i64
  %arrayidx322 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom321
  store i8 16, i8* %arrayidx322, align 1
  %134 = load i32, i32* %rle_repeat_count, align 4
  %sub323 = sub i32 %134, 3
  %conv324 = trunc i32 %sub323 to i8
  %135 = load i32, i32* %num_packed_code_sizes, align 4
  %inc325 = add i32 %135, 1
  store i32 %inc325, i32* %num_packed_code_sizes, align 4
  %idxprom326 = zext i32 %135 to i64
  %arrayidx327 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom326
  store i8 %conv324, i8* %arrayidx327, align 1
  br label %if.end328

if.end328:                                        ; preds = %if.else310, %while.end309
  store i32 0, i32* %rle_repeat_count, align 4
  br label %if.end329

if.end329:                                        ; preds = %if.end328, %if.then285
  br label %if.end330

if.end330:                                        ; preds = %if.end329, %if.else281
  br label %if.end331

if.end331:                                        ; preds = %if.end330, %if.end266
  br label %if.end332

if.end332:                                        ; preds = %if.end331, %if.end152
  %136 = load i8, i8* %code_size, align 1
  store i8 %136, i8* %prev_code_size, align 1
  br label %for.inc333

for.inc333:                                       ; preds = %if.end332
  %137 = load i32, i32* %i, align 4
  %inc334 = add i32 %137, 1
  store i32 %inc334, i32* %i, align 4
  br label %for.cond37

for.end335:                                       ; preds = %for.cond37
  %138 = load i32, i32* %rle_repeat_count, align 4
  %tobool336 = icmp ne i32 %138, 0
  br i1 %tobool336, label %if.then337, label %if.else382

if.then337:                                       ; preds = %for.end335
  %139 = load i32, i32* %rle_repeat_count, align 4
  %tobool338 = icmp ne i32 %139, 0
  br i1 %tobool338, label %if.then339, label %if.end381

if.then339:                                       ; preds = %if.then337
  %140 = load i32, i32* %rle_repeat_count, align 4
  %cmp340 = icmp ult i32 %140, 3
  br i1 %cmp340, label %if.then342, label %if.else362

if.then342:                                       ; preds = %if.then339
  %141 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count343 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %141, i32 0, i32 36
  %arrayidx344 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count343, i64 0, i64 2
  %142 = load i8, i8* %prev_code_size, align 1
  %idxprom345 = zext i8 %142 to i64
  %arrayidx346 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx344, i64 0, i64 %idxprom345
  %143 = load i16, i16* %arrayidx346, align 2
  %conv347 = zext i16 %143 to i32
  %144 = load i32, i32* %rle_repeat_count, align 4
  %add348 = add i32 %conv347, %144
  %conv349 = trunc i32 %add348 to i16
  %145 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count350 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %145, i32 0, i32 36
  %arrayidx351 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count350, i64 0, i64 2
  %146 = load i8, i8* %prev_code_size, align 1
  %idxprom352 = zext i8 %146 to i64
  %arrayidx353 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx351, i64 0, i64 %idxprom352
  store i16 %conv349, i16* %arrayidx353, align 2
  br label %while.cond354

while.cond354:                                    ; preds = %while.body357, %if.then342
  %147 = load i32, i32* %rle_repeat_count, align 4
  %dec355 = add i32 %147, -1
  store i32 %dec355, i32* %rle_repeat_count, align 4
  %tobool356 = icmp ne i32 %147, 0
  br i1 %tobool356, label %while.body357, label %while.end361

while.body357:                                    ; preds = %while.cond354
  %148 = load i8, i8* %prev_code_size, align 1
  %149 = load i32, i32* %num_packed_code_sizes, align 4
  %inc358 = add i32 %149, 1
  store i32 %inc358, i32* %num_packed_code_sizes, align 4
  %idxprom359 = zext i32 %149 to i64
  %arrayidx360 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom359
  store i8 %148, i8* %arrayidx360, align 1
  br label %while.cond354

while.end361:                                     ; preds = %while.cond354
  br label %if.end380

if.else362:                                       ; preds = %if.then339
  %150 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count363 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %150, i32 0, i32 36
  %arrayidx364 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count363, i64 0, i64 2
  %arrayidx365 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx364, i64 0, i64 16
  %151 = load i16, i16* %arrayidx365, align 2
  %conv366 = zext i16 %151 to i32
  %add367 = add nsw i32 %conv366, 1
  %conv368 = trunc i32 %add367 to i16
  %152 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count369 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %152, i32 0, i32 36
  %arrayidx370 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count369, i64 0, i64 2
  %arrayidx371 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx370, i64 0, i64 16
  store i16 %conv368, i16* %arrayidx371, align 2
  %153 = load i32, i32* %num_packed_code_sizes, align 4
  %inc372 = add i32 %153, 1
  store i32 %inc372, i32* %num_packed_code_sizes, align 4
  %idxprom373 = zext i32 %153 to i64
  %arrayidx374 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom373
  store i8 16, i8* %arrayidx374, align 1
  %154 = load i32, i32* %rle_repeat_count, align 4
  %sub375 = sub i32 %154, 3
  %conv376 = trunc i32 %sub375 to i8
  %155 = load i32, i32* %num_packed_code_sizes, align 4
  %inc377 = add i32 %155, 1
  store i32 %inc377, i32* %num_packed_code_sizes, align 4
  %idxprom378 = zext i32 %155 to i64
  %arrayidx379 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom378
  store i8 %conv376, i8* %arrayidx379, align 1
  br label %if.end380

if.end380:                                        ; preds = %if.else362, %while.end361
  store i32 0, i32* %rle_repeat_count, align 4
  br label %if.end381

if.end381:                                        ; preds = %if.end380, %if.then337
  br label %if.end447

if.else382:                                       ; preds = %for.end335
  %156 = load i32, i32* %rle_z_count, align 4
  %tobool383 = icmp ne i32 %156, 0
  br i1 %tobool383, label %if.then384, label %if.end446

if.then384:                                       ; preds = %if.else382
  %157 = load i32, i32* %rle_z_count, align 4
  %cmp385 = icmp ult i32 %157, 3
  br i1 %cmp385, label %if.then387, label %if.else405

if.then387:                                       ; preds = %if.then384
  %158 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count388 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %158, i32 0, i32 36
  %arrayidx389 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count388, i64 0, i64 2
  %arrayidx390 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx389, i64 0, i64 0
  %159 = load i16, i16* %arrayidx390, align 2
  %conv391 = zext i16 %159 to i32
  %160 = load i32, i32* %rle_z_count, align 4
  %add392 = add i32 %conv391, %160
  %conv393 = trunc i32 %add392 to i16
  %161 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count394 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %161, i32 0, i32 36
  %arrayidx395 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count394, i64 0, i64 2
  %arrayidx396 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx395, i64 0, i64 0
  store i16 %conv393, i16* %arrayidx396, align 2
  br label %while.cond397

while.cond397:                                    ; preds = %while.body400, %if.then387
  %162 = load i32, i32* %rle_z_count, align 4
  %dec398 = add i32 %162, -1
  store i32 %dec398, i32* %rle_z_count, align 4
  %tobool399 = icmp ne i32 %162, 0
  br i1 %tobool399, label %while.body400, label %while.end404

while.body400:                                    ; preds = %while.cond397
  %163 = load i32, i32* %num_packed_code_sizes, align 4
  %inc401 = add i32 %163, 1
  store i32 %inc401, i32* %num_packed_code_sizes, align 4
  %idxprom402 = zext i32 %163 to i64
  %arrayidx403 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom402
  store i8 0, i8* %arrayidx403, align 1
  br label %while.cond397

while.end404:                                     ; preds = %while.cond397
  br label %if.end445

if.else405:                                       ; preds = %if.then384
  %164 = load i32, i32* %rle_z_count, align 4
  %cmp406 = icmp ule i32 %164, 10
  br i1 %cmp406, label %if.then408, label %if.else426

if.then408:                                       ; preds = %if.else405
  %165 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count409 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %165, i32 0, i32 36
  %arrayidx410 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count409, i64 0, i64 2
  %arrayidx411 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx410, i64 0, i64 17
  %166 = load i16, i16* %arrayidx411, align 2
  %conv412 = zext i16 %166 to i32
  %add413 = add nsw i32 %conv412, 1
  %conv414 = trunc i32 %add413 to i16
  %167 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count415 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %167, i32 0, i32 36
  %arrayidx416 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count415, i64 0, i64 2
  %arrayidx417 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx416, i64 0, i64 17
  store i16 %conv414, i16* %arrayidx417, align 2
  %168 = load i32, i32* %num_packed_code_sizes, align 4
  %inc418 = add i32 %168, 1
  store i32 %inc418, i32* %num_packed_code_sizes, align 4
  %idxprom419 = zext i32 %168 to i64
  %arrayidx420 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom419
  store i8 17, i8* %arrayidx420, align 1
  %169 = load i32, i32* %rle_z_count, align 4
  %sub421 = sub i32 %169, 3
  %conv422 = trunc i32 %sub421 to i8
  %170 = load i32, i32* %num_packed_code_sizes, align 4
  %inc423 = add i32 %170, 1
  store i32 %inc423, i32* %num_packed_code_sizes, align 4
  %idxprom424 = zext i32 %170 to i64
  %arrayidx425 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom424
  store i8 %conv422, i8* %arrayidx425, align 1
  br label %if.end444

if.else426:                                       ; preds = %if.else405
  %171 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count427 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %171, i32 0, i32 36
  %arrayidx428 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count427, i64 0, i64 2
  %arrayidx429 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx428, i64 0, i64 18
  %172 = load i16, i16* %arrayidx429, align 2
  %conv430 = zext i16 %172 to i32
  %add431 = add nsw i32 %conv430, 1
  %conv432 = trunc i32 %add431 to i16
  %173 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count433 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %173, i32 0, i32 36
  %arrayidx434 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count433, i64 0, i64 2
  %arrayidx435 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx434, i64 0, i64 18
  store i16 %conv432, i16* %arrayidx435, align 2
  %174 = load i32, i32* %num_packed_code_sizes, align 4
  %inc436 = add i32 %174, 1
  store i32 %inc436, i32* %num_packed_code_sizes, align 4
  %idxprom437 = zext i32 %174 to i64
  %arrayidx438 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom437
  store i8 18, i8* %arrayidx438, align 1
  %175 = load i32, i32* %rle_z_count, align 4
  %sub439 = sub i32 %175, 11
  %conv440 = trunc i32 %sub439 to i8
  %176 = load i32, i32* %num_packed_code_sizes, align 4
  %inc441 = add i32 %176, 1
  store i32 %inc441, i32* %num_packed_code_sizes, align 4
  %idxprom442 = zext i32 %176 to i64
  %arrayidx443 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom442
  store i8 %conv440, i8* %arrayidx443, align 1
  br label %if.end444

if.end444:                                        ; preds = %if.else426, %if.then408
  br label %if.end445

if.end445:                                        ; preds = %if.end444, %while.end404
  store i32 0, i32* %rle_z_count, align 4
  br label %if.end446

if.end446:                                        ; preds = %if.end445, %if.else382
  br label %if.end447

if.end447:                                        ; preds = %if.end446, %if.end381
  %177 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %177, i32 2, i32 19, i32 7, i32 0)
  br label %do.body

do.body:                                          ; preds = %if.end447
  store i32 2, i32* %bits, align 4
  store i32 2, i32* %len, align 4
  %178 = load i32, i32* %bits, align 4
  %179 = load i32, i32* %len, align 4
  %shl = shl i32 1, %179
  %sub448 = sub i32 %shl, 1
  %cmp449 = icmp ule i32 %178, %sub448
  %lnot = xor i1 %cmp449, true
  %lnot.ext = zext i1 %lnot to i32
  %conv451 = sext i32 %lnot.ext to i64
  %tobool452 = icmp ne i64 %conv451, 0
  br i1 %tobool452, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1033, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %do.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %180
  %181 = load i32, i32* %bits, align 4
  %182 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %182, i32 0, i32 16
  %183 = load i32, i32* %m_bits_in, align 4
  %shl453 = shl i32 %181, %183
  %184 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %184, i32 0, i32 17
  %185 = load i32, i32* %m_bit_buffer, align 8
  %or = or i32 %185, %shl453
  store i32 %or, i32* %m_bit_buffer, align 8
  %186 = load i32, i32* %len, align 4
  %187 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in454 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %187, i32 0, i32 16
  %188 = load i32, i32* %m_bits_in454, align 4
  %add455 = add i32 %188, %186
  store i32 %add455, i32* %m_bits_in454, align 4
  br label %while.cond456

while.cond456:                                    ; preds = %if.end467, %cond.end
  %189 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in457 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %189, i32 0, i32 16
  %190 = load i32, i32* %m_bits_in457, align 4
  %cmp458 = icmp uge i32 %190, 8
  br i1 %cmp458, label %while.body460, label %while.end471

while.body460:                                    ; preds = %while.cond456
  %191 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %191, i32 0, i32 11
  %192 = load i8*, i8** %m_pOutput_buf, align 8
  %193 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %193, i32 0, i32 12
  %194 = load i8*, i8** %m_pOutput_buf_end, align 8
  %cmp461 = icmp ult i8* %192, %194
  br i1 %cmp461, label %if.then463, label %if.end467

if.then463:                                       ; preds = %while.body460
  %195 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer464 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %195, i32 0, i32 17
  %196 = load i32, i32* %m_bit_buffer464, align 8
  %conv465 = trunc i32 %196 to i8
  %197 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf466 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %197, i32 0, i32 11
  %198 = load i8*, i8** %m_pOutput_buf466, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %198, i32 1
  store i8* %incdec.ptr, i8** %m_pOutput_buf466, align 8
  store i8 %conv465, i8* %198, align 1
  br label %if.end467

if.end467:                                        ; preds = %if.then463, %while.body460
  %199 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer468 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %199, i32 0, i32 17
  %200 = load i32, i32* %m_bit_buffer468, align 8
  %shr = lshr i32 %200, 8
  store i32 %shr, i32* %m_bit_buffer468, align 8
  %201 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in469 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %201, i32 0, i32 16
  %202 = load i32, i32* %m_bits_in469, align 4
  %sub470 = sub i32 %202, 8
  store i32 %sub470, i32* %m_bits_in469, align 4
  br label %while.cond456

while.end471:                                     ; preds = %while.cond456
  br label %do.end

do.end:                                           ; preds = %while.end471
  br label %do.body472

do.body472:                                       ; preds = %do.end
  %203 = load i32, i32* %num_lit_codes, align 4
  %sub474 = sub nsw i32 %203, 257
  store i32 %sub474, i32* %bits473, align 4
  store i32 5, i32* %len475, align 4
  %204 = load i32, i32* %bits473, align 4
  %205 = load i32, i32* %len475, align 4
  %shl476 = shl i32 1, %205
  %sub477 = sub i32 %shl476, 1
  %cmp478 = icmp ule i32 %204, %sub477
  %lnot480 = xor i1 %cmp478, true
  %lnot.ext481 = zext i1 %lnot480 to i32
  %conv482 = sext i32 %lnot.ext481 to i64
  %tobool483 = icmp ne i64 %conv482, 0
  br i1 %tobool483, label %cond.true484, label %cond.false485

cond.true484:                                     ; preds = %do.body472
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1035, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end486

cond.false485:                                    ; preds = %do.body472
  br label %cond.end486

cond.end486:                                      ; preds = %cond.false485, %206
  %207 = load i32, i32* %bits473, align 4
  %208 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in487 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %208, i32 0, i32 16
  %209 = load i32, i32* %m_bits_in487, align 4
  %shl488 = shl i32 %207, %209
  %210 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer489 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %210, i32 0, i32 17
  %211 = load i32, i32* %m_bit_buffer489, align 8
  %or490 = or i32 %211, %shl488
  store i32 %or490, i32* %m_bit_buffer489, align 8
  %212 = load i32, i32* %len475, align 4
  %213 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in491 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %213, i32 0, i32 16
  %214 = load i32, i32* %m_bits_in491, align 4
  %add492 = add i32 %214, %212
  store i32 %add492, i32* %m_bits_in491, align 4
  br label %while.cond493

while.cond493:                                    ; preds = %if.end507, %cond.end486
  %215 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in494 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %215, i32 0, i32 16
  %216 = load i32, i32* %m_bits_in494, align 4
  %cmp495 = icmp uge i32 %216, 8
  br i1 %cmp495, label %while.body497, label %while.end512

while.body497:                                    ; preds = %while.cond493
  %217 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf498 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %217, i32 0, i32 11
  %218 = load i8*, i8** %m_pOutput_buf498, align 8
  %219 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end499 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %219, i32 0, i32 12
  %220 = load i8*, i8** %m_pOutput_buf_end499, align 8
  %cmp500 = icmp ult i8* %218, %220
  br i1 %cmp500, label %if.then502, label %if.end507

if.then502:                                       ; preds = %while.body497
  %221 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer503 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %221, i32 0, i32 17
  %222 = load i32, i32* %m_bit_buffer503, align 8
  %conv504 = trunc i32 %222 to i8
  %223 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf505 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %223, i32 0, i32 11
  %224 = load i8*, i8** %m_pOutput_buf505, align 8
  %incdec.ptr506 = getelementptr inbounds i8, i8* %224, i32 1
  store i8* %incdec.ptr506, i8** %m_pOutput_buf505, align 8
  store i8 %conv504, i8* %224, align 1
  br label %if.end507

if.end507:                                        ; preds = %if.then502, %while.body497
  %225 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer508 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %225, i32 0, i32 17
  %226 = load i32, i32* %m_bit_buffer508, align 8
  %shr509 = lshr i32 %226, 8
  store i32 %shr509, i32* %m_bit_buffer508, align 8
  %227 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in510 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %227, i32 0, i32 16
  %228 = load i32, i32* %m_bits_in510, align 4
  %sub511 = sub i32 %228, 8
  store i32 %sub511, i32* %m_bits_in510, align 4
  br label %while.cond493

while.end512:                                     ; preds = %while.cond493
  br label %do.end513

do.end513:                                        ; preds = %while.end512
  br label %do.body514

do.body514:                                       ; preds = %do.end513
  %229 = load i32, i32* %num_dist_codes, align 4
  %sub516 = sub nsw i32 %229, 1
  store i32 %sub516, i32* %bits515, align 4
  store i32 5, i32* %len517, align 4
  %230 = load i32, i32* %bits515, align 4
  %231 = load i32, i32* %len517, align 4
  %shl518 = shl i32 1, %231
  %sub519 = sub i32 %shl518, 1
  %cmp520 = icmp ule i32 %230, %sub519
  %lnot522 = xor i1 %cmp520, true
  %lnot.ext523 = zext i1 %lnot522 to i32
  %conv524 = sext i32 %lnot.ext523 to i64
  %tobool525 = icmp ne i64 %conv524, 0
  br i1 %tobool525, label %cond.true526, label %cond.false527

cond.true526:                                     ; preds = %do.body514
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1036, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end528

cond.false527:                                    ; preds = %do.body514
  br label %cond.end528

cond.end528:                                      ; preds = %cond.false527, %232
  %233 = load i32, i32* %bits515, align 4
  %234 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in529 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %234, i32 0, i32 16
  %235 = load i32, i32* %m_bits_in529, align 4
  %shl530 = shl i32 %233, %235
  %236 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer531 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %236, i32 0, i32 17
  %237 = load i32, i32* %m_bit_buffer531, align 8
  %or532 = or i32 %237, %shl530
  store i32 %or532, i32* %m_bit_buffer531, align 8
  %238 = load i32, i32* %len517, align 4
  %239 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in533 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %239, i32 0, i32 16
  %240 = load i32, i32* %m_bits_in533, align 4
  %add534 = add i32 %240, %238
  store i32 %add534, i32* %m_bits_in533, align 4
  br label %while.cond535

while.cond535:                                    ; preds = %if.end549, %cond.end528
  %241 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in536 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %241, i32 0, i32 16
  %242 = load i32, i32* %m_bits_in536, align 4
  %cmp537 = icmp uge i32 %242, 8
  br i1 %cmp537, label %while.body539, label %while.end554

while.body539:                                    ; preds = %while.cond535
  %243 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf540 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %243, i32 0, i32 11
  %244 = load i8*, i8** %m_pOutput_buf540, align 8
  %245 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end541 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %245, i32 0, i32 12
  %246 = load i8*, i8** %m_pOutput_buf_end541, align 8
  %cmp542 = icmp ult i8* %244, %246
  br i1 %cmp542, label %if.then544, label %if.end549

if.then544:                                       ; preds = %while.body539
  %247 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer545 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %247, i32 0, i32 17
  %248 = load i32, i32* %m_bit_buffer545, align 8
  %conv546 = trunc i32 %248 to i8
  %249 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf547 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %249, i32 0, i32 11
  %250 = load i8*, i8** %m_pOutput_buf547, align 8
  %incdec.ptr548 = getelementptr inbounds i8, i8* %250, i32 1
  store i8* %incdec.ptr548, i8** %m_pOutput_buf547, align 8
  store i8 %conv546, i8* %250, align 1
  br label %if.end549

if.end549:                                        ; preds = %if.then544, %while.body539
  %251 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer550 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %251, i32 0, i32 17
  %252 = load i32, i32* %m_bit_buffer550, align 8
  %shr551 = lshr i32 %252, 8
  store i32 %shr551, i32* %m_bit_buffer550, align 8
  %253 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in552 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %253, i32 0, i32 16
  %254 = load i32, i32* %m_bits_in552, align 4
  %sub553 = sub i32 %254, 8
  store i32 %sub553, i32* %m_bits_in552, align 4
  br label %while.cond535

while.end554:                                     ; preds = %while.cond535
  br label %do.end555

do.end555:                                        ; preds = %while.end554
  store i32 18, i32* %num_bit_lengths, align 4
  br label %for.cond556

for.cond556:                                      ; preds = %for.inc569, %do.end555
  %255 = load i32, i32* %num_bit_lengths, align 4
  %cmp557 = icmp sge i32 %255, 0
  br i1 %cmp557, label %for.body559, label %for.end571

for.body559:                                      ; preds = %for.cond556
  %256 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes560 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %256, i32 0, i32 38
  %arrayidx561 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes560, i64 0, i64 2
  %257 = load i32, i32* %num_bit_lengths, align 4
  %idxprom562 = sext i32 %257 to i64
  %arrayidx563 = getelementptr inbounds [19 x i8], [19 x i8]* @s_tdefl_packed_code_size_syms_swizzle, i64 0, i64 %idxprom562
  %258 = load i8, i8* %arrayidx563, align 1
  %idxprom564 = zext i8 %258 to i64
  %arrayidx565 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx561, i64 0, i64 %idxprom564
  %259 = load i8, i8* %arrayidx565, align 1
  %tobool566 = icmp ne i8 %259, 0
  br i1 %tobool566, label %if.then567, label %if.end568

if.then567:                                       ; preds = %for.body559
  br label %for.end571

if.end568:                                        ; preds = %for.body559
  br label %for.inc569

for.inc569:                                       ; preds = %if.end568
  %260 = load i32, i32* %num_bit_lengths, align 4
  %dec570 = add nsw i32 %260, -1
  store i32 %dec570, i32* %num_bit_lengths, align 4
  br label %for.cond556

for.end571:                                       ; preds = %if.then567, %for.cond556
  %261 = load i32, i32* %num_bit_lengths, align 4
  %add572 = add nsw i32 %261, 1
  %cmp573 = icmp sgt i32 4, %add572
  br i1 %cmp573, label %cond.true575, label %cond.false576

cond.true575:                                     ; preds = %for.end571
  br label %cond.end578

cond.false576:                                    ; preds = %for.end571
  %262 = load i32, i32* %num_bit_lengths, align 4
  %add577 = add nsw i32 %262, 1
  br label %cond.end578

cond.end578:                                      ; preds = %cond.false576, %cond.true575
  %cond = phi i32 [ 4, %cond.true575 ], [ %add577, %cond.false576 ]
  store i32 %cond, i32* %num_bit_lengths, align 4
  br label %do.body579

do.body579:                                       ; preds = %cond.end578
  %263 = load i32, i32* %num_bit_lengths, align 4
  %sub581 = sub nsw i32 %263, 4
  store i32 %sub581, i32* %bits580, align 4
  store i32 4, i32* %len582, align 4
  %264 = load i32, i32* %bits580, align 4
  %265 = load i32, i32* %len582, align 4
  %shl583 = shl i32 1, %265
  %sub584 = sub i32 %shl583, 1
  %cmp585 = icmp ule i32 %264, %sub584
  %lnot587 = xor i1 %cmp585, true
  %lnot.ext588 = zext i1 %lnot587 to i32
  %conv589 = sext i32 %lnot.ext588 to i64
  %tobool590 = icmp ne i64 %conv589, 0
  br i1 %tobool590, label %cond.true591, label %cond.false592

cond.true591:                                     ; preds = %do.body579
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1042, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end593

cond.false592:                                    ; preds = %do.body579
  br label %cond.end593

cond.end593:                                      ; preds = %cond.false592, %266
  %267 = load i32, i32* %bits580, align 4
  %268 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in594 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %268, i32 0, i32 16
  %269 = load i32, i32* %m_bits_in594, align 4
  %shl595 = shl i32 %267, %269
  %270 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer596 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %270, i32 0, i32 17
  %271 = load i32, i32* %m_bit_buffer596, align 8
  %or597 = or i32 %271, %shl595
  store i32 %or597, i32* %m_bit_buffer596, align 8
  %272 = load i32, i32* %len582, align 4
  %273 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in598 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %273, i32 0, i32 16
  %274 = load i32, i32* %m_bits_in598, align 4
  %add599 = add i32 %274, %272
  store i32 %add599, i32* %m_bits_in598, align 4
  br label %while.cond600

while.cond600:                                    ; preds = %if.end614, %cond.end593
  %275 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in601 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %275, i32 0, i32 16
  %276 = load i32, i32* %m_bits_in601, align 4
  %cmp602 = icmp uge i32 %276, 8
  br i1 %cmp602, label %while.body604, label %while.end619

while.body604:                                    ; preds = %while.cond600
  %277 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf605 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %277, i32 0, i32 11
  %278 = load i8*, i8** %m_pOutput_buf605, align 8
  %279 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end606 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %279, i32 0, i32 12
  %280 = load i8*, i8** %m_pOutput_buf_end606, align 8
  %cmp607 = icmp ult i8* %278, %280
  br i1 %cmp607, label %if.then609, label %if.end614

if.then609:                                       ; preds = %while.body604
  %281 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer610 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %281, i32 0, i32 17
  %282 = load i32, i32* %m_bit_buffer610, align 8
  %conv611 = trunc i32 %282 to i8
  %283 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf612 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %283, i32 0, i32 11
  %284 = load i8*, i8** %m_pOutput_buf612, align 8
  %incdec.ptr613 = getelementptr inbounds i8, i8* %284, i32 1
  store i8* %incdec.ptr613, i8** %m_pOutput_buf612, align 8
  store i8 %conv611, i8* %284, align 1
  br label %if.end614

if.end614:                                        ; preds = %if.then609, %while.body604
  %285 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer615 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %285, i32 0, i32 17
  %286 = load i32, i32* %m_bit_buffer615, align 8
  %shr616 = lshr i32 %286, 8
  store i32 %shr616, i32* %m_bit_buffer615, align 8
  %287 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in617 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %287, i32 0, i32 16
  %288 = load i32, i32* %m_bits_in617, align 4
  %sub618 = sub i32 %288, 8
  store i32 %sub618, i32* %m_bits_in617, align 4
  br label %while.cond600

while.end619:                                     ; preds = %while.cond600
  br label %do.end620

do.end620:                                        ; preds = %while.end619
  store i32 0, i32* %i, align 4
  br label %for.cond621

for.cond621:                                      ; preds = %for.inc673, %do.end620
  %289 = load i32, i32* %i, align 4
  %290 = load i32, i32* %num_bit_lengths, align 4
  %cmp622 = icmp slt i32 %289, %290
  br i1 %cmp622, label %for.body624, label %for.end675

for.body624:                                      ; preds = %for.cond621
  br label %do.body625

do.body625:                                       ; preds = %for.body624
  %291 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes627 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %291, i32 0, i32 38
  %arrayidx628 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes627, i64 0, i64 2
  %292 = load i32, i32* %i, align 4
  %idxprom629 = zext i32 %292 to i64
  %arrayidx630 = getelementptr inbounds [19 x i8], [19 x i8]* @s_tdefl_packed_code_size_syms_swizzle, i64 0, i64 %idxprom629
  %293 = load i8, i8* %arrayidx630, align 1
  %idxprom631 = zext i8 %293 to i64
  %arrayidx632 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx628, i64 0, i64 %idxprom631
  %294 = load i8, i8* %arrayidx632, align 1
  %conv633 = zext i8 %294 to i32
  store i32 %conv633, i32* %bits626, align 4
  store i32 3, i32* %len634, align 4
  %295 = load i32, i32* %bits626, align 4
  %296 = load i32, i32* %len634, align 4
  %shl635 = shl i32 1, %296
  %sub636 = sub i32 %shl635, 1
  %cmp637 = icmp ule i32 %295, %sub636
  %lnot639 = xor i1 %cmp637, true
  %lnot.ext640 = zext i1 %lnot639 to i32
  %conv641 = sext i32 %lnot.ext640 to i64
  %tobool642 = icmp ne i64 %conv641, 0
  br i1 %tobool642, label %cond.true643, label %cond.false644

cond.true643:                                     ; preds = %do.body625
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1044, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end645

cond.false644:                                    ; preds = %do.body625
  br label %cond.end645

cond.end645:                                      ; preds = %cond.false644, %297
  %298 = load i32, i32* %bits626, align 4
  %299 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in646 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %299, i32 0, i32 16
  %300 = load i32, i32* %m_bits_in646, align 4
  %shl647 = shl i32 %298, %300
  %301 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer648 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %301, i32 0, i32 17
  %302 = load i32, i32* %m_bit_buffer648, align 8
  %or649 = or i32 %302, %shl647
  store i32 %or649, i32* %m_bit_buffer648, align 8
  %303 = load i32, i32* %len634, align 4
  %304 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in650 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %304, i32 0, i32 16
  %305 = load i32, i32* %m_bits_in650, align 4
  %add651 = add i32 %305, %303
  store i32 %add651, i32* %m_bits_in650, align 4
  br label %while.cond652

while.cond652:                                    ; preds = %if.end666, %cond.end645
  %306 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in653 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %306, i32 0, i32 16
  %307 = load i32, i32* %m_bits_in653, align 4
  %cmp654 = icmp uge i32 %307, 8
  br i1 %cmp654, label %while.body656, label %while.end671

while.body656:                                    ; preds = %while.cond652
  %308 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf657 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %308, i32 0, i32 11
  %309 = load i8*, i8** %m_pOutput_buf657, align 8
  %310 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end658 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %310, i32 0, i32 12
  %311 = load i8*, i8** %m_pOutput_buf_end658, align 8
  %cmp659 = icmp ult i8* %309, %311
  br i1 %cmp659, label %if.then661, label %if.end666

if.then661:                                       ; preds = %while.body656
  %312 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer662 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %312, i32 0, i32 17
  %313 = load i32, i32* %m_bit_buffer662, align 8
  %conv663 = trunc i32 %313 to i8
  %314 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf664 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %314, i32 0, i32 11
  %315 = load i8*, i8** %m_pOutput_buf664, align 8
  %incdec.ptr665 = getelementptr inbounds i8, i8* %315, i32 1
  store i8* %incdec.ptr665, i8** %m_pOutput_buf664, align 8
  store i8 %conv663, i8* %315, align 1
  br label %if.end666

if.end666:                                        ; preds = %if.then661, %while.body656
  %316 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer667 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %316, i32 0, i32 17
  %317 = load i32, i32* %m_bit_buffer667, align 8
  %shr668 = lshr i32 %317, 8
  store i32 %shr668, i32* %m_bit_buffer667, align 8
  %318 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in669 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %318, i32 0, i32 16
  %319 = load i32, i32* %m_bits_in669, align 4
  %sub670 = sub i32 %319, 8
  store i32 %sub670, i32* %m_bits_in669, align 4
  br label %while.cond652

while.end671:                                     ; preds = %while.cond652
  br label %do.end672

do.end672:                                        ; preds = %while.end671
  br label %for.inc673

for.inc673:                                       ; preds = %do.end672
  %320 = load i32, i32* %i, align 4
  %inc674 = add i32 %320, 1
  store i32 %inc674, i32* %i, align 4
  br label %for.cond621

for.end675:                                       ; preds = %for.cond621
  store i32 0, i32* %packed_code_sizes_index, align 4
  br label %for.cond676

for.cond676:                                      ; preds = %if.end795, %for.end675
  %321 = load i32, i32* %packed_code_sizes_index, align 4
  %322 = load i32, i32* %num_packed_code_sizes, align 4
  %cmp677 = icmp ult i32 %321, %322
  br i1 %cmp677, label %for.body679, label %for.end796

for.body679:                                      ; preds = %for.cond676
  %323 = load i32, i32* %packed_code_sizes_index, align 4
  %inc680 = add i32 %323, 1
  store i32 %inc680, i32* %packed_code_sizes_index, align 4
  %idxprom681 = zext i32 %323 to i64
  %arrayidx682 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom681
  %324 = load i8, i8* %arrayidx682, align 1
  %conv683 = zext i8 %324 to i32
  store i32 %conv683, i32* %code, align 4
  %325 = load i32, i32* %code, align 4
  %cmp684 = icmp ult i32 %325, 19
  %lnot686 = xor i1 %cmp684, true
  %lnot.ext687 = zext i1 %lnot686 to i32
  %conv688 = sext i32 %lnot.ext687 to i64
  %tobool689 = icmp ne i64 %conv688, 0
  br i1 %tobool689, label %cond.true690, label %cond.false691

cond.true690:                                     ; preds = %for.body679
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1049, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.66, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end692

cond.false691:                                    ; preds = %for.body679
  br label %cond.end692

cond.end692:                                      ; preds = %cond.false691, %326
  br label %do.body693

do.body693:                                       ; preds = %cond.end692
  %327 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %327, i32 0, i32 37
  %arrayidx695 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes, i64 0, i64 2
  %328 = load i32, i32* %code, align 4
  %idxprom696 = zext i32 %328 to i64
  %arrayidx697 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx695, i64 0, i64 %idxprom696
  %329 = load i16, i16* %arrayidx697, align 2
  %conv698 = zext i16 %329 to i32
  store i32 %conv698, i32* %bits694, align 4
  %330 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes700 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %330, i32 0, i32 38
  %arrayidx701 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes700, i64 0, i64 2
  %331 = load i32, i32* %code, align 4
  %idxprom702 = zext i32 %331 to i64
  %arrayidx703 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx701, i64 0, i64 %idxprom702
  %332 = load i8, i8* %arrayidx703, align 1
  %conv704 = zext i8 %332 to i32
  store i32 %conv704, i32* %len699, align 4
  %333 = load i32, i32* %bits694, align 4
  %334 = load i32, i32* %len699, align 4
  %shl705 = shl i32 1, %334
  %sub706 = sub i32 %shl705, 1
  %cmp707 = icmp ule i32 %333, %sub706
  %lnot709 = xor i1 %cmp707, true
  %lnot.ext710 = zext i1 %lnot709 to i32
  %conv711 = sext i32 %lnot.ext710 to i64
  %tobool712 = icmp ne i64 %conv711, 0
  br i1 %tobool712, label %cond.true713, label %cond.false714

cond.true713:                                     ; preds = %do.body693
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1050, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end715

cond.false714:                                    ; preds = %do.body693
  br label %cond.end715

cond.end715:                                      ; preds = %cond.false714, %335
  %336 = load i32, i32* %bits694, align 4
  %337 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in716 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %337, i32 0, i32 16
  %338 = load i32, i32* %m_bits_in716, align 4
  %shl717 = shl i32 %336, %338
  %339 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer718 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %339, i32 0, i32 17
  %340 = load i32, i32* %m_bit_buffer718, align 8
  %or719 = or i32 %340, %shl717
  store i32 %or719, i32* %m_bit_buffer718, align 8
  %341 = load i32, i32* %len699, align 4
  %342 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in720 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %342, i32 0, i32 16
  %343 = load i32, i32* %m_bits_in720, align 4
  %add721 = add i32 %343, %341
  store i32 %add721, i32* %m_bits_in720, align 4
  br label %while.cond722

while.cond722:                                    ; preds = %if.end736, %cond.end715
  %344 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in723 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %344, i32 0, i32 16
  %345 = load i32, i32* %m_bits_in723, align 4
  %cmp724 = icmp uge i32 %345, 8
  br i1 %cmp724, label %while.body726, label %while.end741

while.body726:                                    ; preds = %while.cond722
  %346 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf727 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %346, i32 0, i32 11
  %347 = load i8*, i8** %m_pOutput_buf727, align 8
  %348 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end728 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %348, i32 0, i32 12
  %349 = load i8*, i8** %m_pOutput_buf_end728, align 8
  %cmp729 = icmp ult i8* %347, %349
  br i1 %cmp729, label %if.then731, label %if.end736

if.then731:                                       ; preds = %while.body726
  %350 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer732 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %350, i32 0, i32 17
  %351 = load i32, i32* %m_bit_buffer732, align 8
  %conv733 = trunc i32 %351 to i8
  %352 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf734 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %352, i32 0, i32 11
  %353 = load i8*, i8** %m_pOutput_buf734, align 8
  %incdec.ptr735 = getelementptr inbounds i8, i8* %353, i32 1
  store i8* %incdec.ptr735, i8** %m_pOutput_buf734, align 8
  store i8 %conv733, i8* %353, align 1
  br label %if.end736

if.end736:                                        ; preds = %if.then731, %while.body726
  %354 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer737 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %354, i32 0, i32 17
  %355 = load i32, i32* %m_bit_buffer737, align 8
  %shr738 = lshr i32 %355, 8
  store i32 %shr738, i32* %m_bit_buffer737, align 8
  %356 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in739 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %356, i32 0, i32 16
  %357 = load i32, i32* %m_bits_in739, align 4
  %sub740 = sub i32 %357, 8
  store i32 %sub740, i32* %m_bits_in739, align 4
  br label %while.cond722

while.end741:                                     ; preds = %while.cond722
  br label %do.end742

do.end742:                                        ; preds = %while.end741
  %358 = load i32, i32* %code, align 4
  %cmp743 = icmp uge i32 %358, 16
  br i1 %cmp743, label %if.then745, label %if.end795

if.then745:                                       ; preds = %do.end742
  br label %do.body746

do.body746:                                       ; preds = %if.then745
  %359 = load i32, i32* %packed_code_sizes_index, align 4
  %inc748 = add i32 %359, 1
  store i32 %inc748, i32* %packed_code_sizes_index, align 4
  %idxprom749 = zext i32 %359 to i64
  %arrayidx750 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom749
  %360 = load i8, i8* %arrayidx750, align 1
  %conv751 = zext i8 %360 to i32
  store i32 %conv751, i32* %bits747, align 4
  %361 = load i32, i32* %code, align 4
  %sub753 = sub i32 %361, 16
  %idxprom754 = zext i32 %sub753 to i64
  %arrayidx755 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.15, i64 0, i64 %idxprom754
  %362 = load i8, i8* %arrayidx755, align 1
  %conv756 = sext i8 %362 to i32
  store i32 %conv756, i32* %len752, align 4
  %363 = load i32, i32* %bits747, align 4
  %364 = load i32, i32* %len752, align 4
  %shl757 = shl i32 1, %364
  %sub758 = sub i32 %shl757, 1
  %cmp759 = icmp ule i32 %363, %sub758
  %lnot761 = xor i1 %cmp759, true
  %lnot.ext762 = zext i1 %lnot761 to i32
  %conv763 = sext i32 %lnot.ext762 to i64
  %tobool764 = icmp ne i64 %conv763, 0
  br i1 %tobool764, label %cond.true765, label %cond.false766

cond.true765:                                     ; preds = %do.body746
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1052, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end767

cond.false766:                                    ; preds = %do.body746
  br label %cond.end767

cond.end767:                                      ; preds = %cond.false766, %365
  %366 = load i32, i32* %bits747, align 4
  %367 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in768 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %367, i32 0, i32 16
  %368 = load i32, i32* %m_bits_in768, align 4
  %shl769 = shl i32 %366, %368
  %369 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer770 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %369, i32 0, i32 17
  %370 = load i32, i32* %m_bit_buffer770, align 8
  %or771 = or i32 %370, %shl769
  store i32 %or771, i32* %m_bit_buffer770, align 8
  %371 = load i32, i32* %len752, align 4
  %372 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in772 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %372, i32 0, i32 16
  %373 = load i32, i32* %m_bits_in772, align 4
  %add773 = add i32 %373, %371
  store i32 %add773, i32* %m_bits_in772, align 4
  br label %while.cond774

while.cond774:                                    ; preds = %if.end788, %cond.end767
  %374 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in775 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %374, i32 0, i32 16
  %375 = load i32, i32* %m_bits_in775, align 4
  %cmp776 = icmp uge i32 %375, 8
  br i1 %cmp776, label %while.body778, label %while.end793

while.body778:                                    ; preds = %while.cond774
  %376 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf779 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %376, i32 0, i32 11
  %377 = load i8*, i8** %m_pOutput_buf779, align 8
  %378 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end780 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %378, i32 0, i32 12
  %379 = load i8*, i8** %m_pOutput_buf_end780, align 8
  %cmp781 = icmp ult i8* %377, %379
  br i1 %cmp781, label %if.then783, label %if.end788

if.then783:                                       ; preds = %while.body778
  %380 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer784 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %380, i32 0, i32 17
  %381 = load i32, i32* %m_bit_buffer784, align 8
  %conv785 = trunc i32 %381 to i8
  %382 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf786 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %382, i32 0, i32 11
  %383 = load i8*, i8** %m_pOutput_buf786, align 8
  %incdec.ptr787 = getelementptr inbounds i8, i8* %383, i32 1
  store i8* %incdec.ptr787, i8** %m_pOutput_buf786, align 8
  store i8 %conv785, i8* %383, align 1
  br label %if.end788

if.end788:                                        ; preds = %if.then783, %while.body778
  %384 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer789 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %384, i32 0, i32 17
  %385 = load i32, i32* %m_bit_buffer789, align 8
  %shr790 = lshr i32 %385, 8
  store i32 %shr790, i32* %m_bit_buffer789, align 8
  %386 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in791 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %386, i32 0, i32 16
  %387 = load i32, i32* %m_bits_in791, align 4
  %sub792 = sub i32 %387, 8
  store i32 %sub792, i32* %m_bits_in791, align 4
  br label %while.cond774

while.end793:                                     ; preds = %while.cond774
  br label %do.end794

do.end794:                                        ; preds = %while.end793
  br label %if.end795

if.end795:                                        ; preds = %do.end794, %do.end742
  br label %for.cond676

for.end796:                                       ; preds = %for.cond676
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @tdefl_compress_lz_codes(%struct.tdefl_compressor* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %flags = alloca i32, align 4
  %pLZ_codes = alloca i8*, align 8
  %pOutput_buf = alloca i8*, align 8
  %pLZ_code_buf_end = alloca i8*, align 8
  %bit_buffer = alloca i64, align 8
  %bits_in = alloca i32, align 4
  %s0 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %n0 = alloca i32, align 4
  %n1 = alloca i32, align 4
  %sym = alloca i32, align 4
  %num_extra_bits = alloca i32, align 4
  %match_len = alloca i32, align 4
  %match_dist = alloca i32, align 4
  %lit = alloca i32, align 4
  %n = alloca i32, align 4
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits270 = alloca i32, align 4
  %len275 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 11
  %1 = load i8*, i8** %m_pOutput_buf, align 8
  store i8* %1, i8** %pOutput_buf, align 8
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %2, i32 0, i32 9
  %3 = load i8*, i8** %m_pLZ_code_buf, align 8
  store i8* %3, i8** %pLZ_code_buf_end, align 8
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 17
  %5 = load i32, i32* %m_bit_buffer, align 8
  %conv = zext i32 %5 to i64
  store i64 %conv, i64* %bit_buffer, align 8
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 16
  %7 = load i32, i32* %m_bits_in, align 4
  store i32 %7, i32* %bits_in, align 4
  store i32 1, i32* %flags, align 4
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i32 0, i32 0
  store i8* %arraydecay, i8** %pLZ_codes, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i8*, i8** %pLZ_codes, align 8
  %10 = load i8*, i8** %pLZ_code_buf_end, align 8
  %cmp = icmp ult i8* %9, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %flags, align 4
  %cmp2 = icmp eq i32 %11, 1
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %12 = load i8*, i8** %pLZ_codes, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %pLZ_codes, align 8
  %13 = load i8, i8* %12, align 1
  %conv4 = zext i8 %13 to i32
  %or = or i32 %conv4, 256
  store i32 %or, i32* %flags, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %14 = load i32, i32* %flags, align 4
  %and = and i32 %14, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %15 = load i8*, i8** %pLZ_codes, align 8
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx, align 1
  %conv6 = zext i8 %16 to i32
  store i32 %conv6, i32* %match_len, align 4
  %17 = load i8*, i8** %pLZ_codes, align 8
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 1
  %18 = bitcast i8* %add.ptr to i16*
  %19 = load i16, i16* %18, align 2
  %conv7 = zext i16 %19 to i32
  store i32 %conv7, i32* %match_dist, align 4
  %20 = load i8*, i8** %pLZ_codes, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %20, i64 3
  store i8* %add.ptr8, i8** %pLZ_codes, align 8
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 38
  %arrayidx9 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes, i64 0, i64 0
  %22 = load i32, i32* %match_len, align 4
  %idxprom = zext i32 %22 to i64
  %arrayidx10 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom
  %23 = load i16, i16* %arrayidx10, align 2
  %idxprom11 = zext i16 %23 to i64
  %arrayidx12 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx9, i64 0, i64 %idxprom11
  %24 = load i8, i8* %arrayidx12, align 1
  %tobool13 = icmp ne i8 %24, 0
  %lnot = xor i1 %tobool13, true
  %lnot.ext = zext i1 %lnot to i32
  %conv14 = sext i32 %lnot.ext to i64
  %tobool15 = icmp ne i64 %conv14, 0
  br i1 %tobool15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1108, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.67, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %25
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %26, i32 0, i32 37
  %arrayidx16 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes, i64 0, i64 0
  %27 = load i32, i32* %match_len, align 4
  %idxprom17 = zext i32 %27 to i64
  %arrayidx18 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom17
  %28 = load i16, i16* %arrayidx18, align 2
  %idxprom19 = zext i16 %28 to i64
  %arrayidx20 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx16, i64 0, i64 %idxprom19
  %29 = load i16, i16* %arrayidx20, align 2
  %conv21 = zext i16 %29 to i64
  %30 = load i32, i32* %bits_in, align 4
  %sh_prom = zext i32 %30 to i64
  %shl = shl i64 %conv21, %sh_prom
  %31 = load i64, i64* %bit_buffer, align 8
  %or22 = or i64 %31, %shl
  store i64 %or22, i64* %bit_buffer, align 8
  %32 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes23 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %32, i32 0, i32 38
  %arrayidx24 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes23, i64 0, i64 0
  %33 = load i32, i32* %match_len, align 4
  %idxprom25 = zext i32 %33 to i64
  %arrayidx26 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom25
  %34 = load i16, i16* %arrayidx26, align 2
  %idxprom27 = zext i16 %34 to i64
  %arrayidx28 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx24, i64 0, i64 %idxprom27
  %35 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %35 to i32
  %36 = load i32, i32* %bits_in, align 4
  %add = add i32 %36, %conv29
  store i32 %add, i32* %bits_in, align 4
  %37 = load i32, i32* %match_len, align 4
  %38 = load i32, i32* %match_len, align 4
  %idxprom30 = zext i32 %38 to i64
  %arrayidx31 = getelementptr inbounds [256 x i8], [256 x i8]* @s_tdefl_len_extra, i64 0, i64 %idxprom30
  %39 = load i8, i8* %arrayidx31, align 1
  %idxprom32 = zext i8 %39 to i64
  %arrayidx33 = getelementptr inbounds [17 x i32], [17 x i32]* @mz_bitmasks, i64 0, i64 %idxprom32
  %40 = load i32, i32* %arrayidx33, align 4
  %and34 = and i32 %37, %40
  %conv35 = zext i32 %and34 to i64
  %41 = load i32, i32* %bits_in, align 4
  %sh_prom36 = zext i32 %41 to i64
  %shl37 = shl i64 %conv35, %sh_prom36
  %42 = load i64, i64* %bit_buffer, align 8
  %or38 = or i64 %42, %shl37
  store i64 %or38, i64* %bit_buffer, align 8
  %43 = load i32, i32* %match_len, align 4
  %idxprom39 = zext i32 %43 to i64
  %arrayidx40 = getelementptr inbounds [256 x i8], [256 x i8]* @s_tdefl_len_extra, i64 0, i64 %idxprom39
  %44 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %44 to i32
  %45 = load i32, i32* %bits_in, align 4
  %add42 = add i32 %45, %conv41
  store i32 %add42, i32* %bits_in, align 4
  %46 = load i32, i32* %match_dist, align 4
  %and43 = and i32 %46, 511
  %idxprom44 = zext i32 %and43 to i64
  %arrayidx45 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_sym, i64 0, i64 %idxprom44
  %47 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %47 to i32
  store i32 %conv46, i32* %s0, align 4
  %48 = load i32, i32* %match_dist, align 4
  %and47 = and i32 %48, 511
  %idxprom48 = zext i32 %and47 to i64
  %arrayidx49 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_extra, i64 0, i64 %idxprom48
  %49 = load i8, i8* %arrayidx49, align 1
  %conv50 = zext i8 %49 to i32
  store i32 %conv50, i32* %n0, align 4
  %50 = load i32, i32* %match_dist, align 4
  %shr = lshr i32 %50, 8
  %idxprom51 = zext i32 %shr to i64
  %arrayidx52 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_sym, i64 0, i64 %idxprom51
  %51 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %51 to i32
  store i32 %conv53, i32* %s1, align 4
  %52 = load i32, i32* %match_dist, align 4
  %shr54 = lshr i32 %52, 8
  %idxprom55 = zext i32 %shr54 to i64
  %arrayidx56 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_extra, i64 0, i64 %idxprom55
  %53 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %53 to i32
  store i32 %conv57, i32* %n1, align 4
  %54 = load i32, i32* %match_dist, align 4
  %cmp58 = icmp ult i32 %54, 512
  br i1 %cmp58, label %cond.true60, label %cond.false61

cond.true60:                                      ; preds = %cond.end
  %55 = load i32, i32* %s0, align 4
  br label %cond.end62

cond.false61:                                     ; preds = %cond.end
  %56 = load i32, i32* %s1, align 4
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond = phi i32 [ %55, %cond.true60 ], [ %56, %cond.false61 ]
  store i32 %cond, i32* %sym, align 4
  %57 = load i32, i32* %match_dist, align 4
  %cmp63 = icmp ult i32 %57, 512
  br i1 %cmp63, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %cond.end62
  %58 = load i32, i32* %n0, align 4
  br label %cond.end67

cond.false66:                                     ; preds = %cond.end62
  %59 = load i32, i32* %n1, align 4
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false66, %cond.true65
  %cond68 = phi i32 [ %58, %cond.true65 ], [ %59, %cond.false66 ]
  store i32 %cond68, i32* %num_extra_bits, align 4
  %60 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes69 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %60, i32 0, i32 38
  %arrayidx70 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes69, i64 0, i64 1
  %61 = load i32, i32* %sym, align 4
  %idxprom71 = zext i32 %61 to i64
  %arrayidx72 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx70, i64 0, i64 %idxprom71
  %62 = load i8, i8* %arrayidx72, align 1
  %tobool73 = icmp ne i8 %62, 0
  %lnot74 = xor i1 %tobool73, true
  %lnot.ext75 = zext i1 %lnot74 to i32
  %conv76 = sext i32 %lnot.ext75 to i64
  %tobool77 = icmp ne i64 %conv76, 0
  br i1 %tobool77, label %cond.true78, label %cond.false79

cond.true78:                                      ; preds = %cond.end67
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1120, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.68, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end80

cond.false79:                                     ; preds = %cond.end67
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false79, %63
  %64 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes81 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %64, i32 0, i32 37
  %arrayidx82 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes81, i64 0, i64 1
  %65 = load i32, i32* %sym, align 4
  %idxprom83 = zext i32 %65 to i64
  %arrayidx84 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx82, i64 0, i64 %idxprom83
  %66 = load i16, i16* %arrayidx84, align 2
  %conv85 = zext i16 %66 to i64
  %67 = load i32, i32* %bits_in, align 4
  %sh_prom86 = zext i32 %67 to i64
  %shl87 = shl i64 %conv85, %sh_prom86
  %68 = load i64, i64* %bit_buffer, align 8
  %or88 = or i64 %68, %shl87
  store i64 %or88, i64* %bit_buffer, align 8
  %69 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes89 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %69, i32 0, i32 38
  %arrayidx90 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes89, i64 0, i64 1
  %70 = load i32, i32* %sym, align 4
  %idxprom91 = zext i32 %70 to i64
  %arrayidx92 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx90, i64 0, i64 %idxprom91
  %71 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %71 to i32
  %72 = load i32, i32* %bits_in, align 4
  %add94 = add i32 %72, %conv93
  store i32 %add94, i32* %bits_in, align 4
  %73 = load i32, i32* %match_dist, align 4
  %74 = load i32, i32* %num_extra_bits, align 4
  %idxprom95 = zext i32 %74 to i64
  %arrayidx96 = getelementptr inbounds [17 x i32], [17 x i32]* @mz_bitmasks, i64 0, i64 %idxprom95
  %75 = load i32, i32* %arrayidx96, align 4
  %and97 = and i32 %73, %75
  %conv98 = zext i32 %and97 to i64
  %76 = load i32, i32* %bits_in, align 4
  %sh_prom99 = zext i32 %76 to i64
  %shl100 = shl i64 %conv98, %sh_prom99
  %77 = load i64, i64* %bit_buffer, align 8
  %or101 = or i64 %77, %shl100
  store i64 %or101, i64* %bit_buffer, align 8
  %78 = load i32, i32* %num_extra_bits, align 4
  %79 = load i32, i32* %bits_in, align 4
  %add102 = add i32 %79, %78
  store i32 %add102, i32* %bits_in, align 4
  br label %if.end204

if.else:                                          ; preds = %if.end
  %80 = load i8*, i8** %pLZ_codes, align 8
  %incdec.ptr103 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr103, i8** %pLZ_codes, align 8
  %81 = load i8, i8* %80, align 1
  %conv104 = zext i8 %81 to i32
  store i32 %conv104, i32* %lit, align 4
  %82 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes105 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %82, i32 0, i32 38
  %arrayidx106 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes105, i64 0, i64 0
  %83 = load i32, i32* %lit, align 4
  %idxprom107 = zext i32 %83 to i64
  %arrayidx108 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx106, i64 0, i64 %idxprom107
  %84 = load i8, i8* %arrayidx108, align 1
  %tobool109 = icmp ne i8 %84, 0
  %lnot110 = xor i1 %tobool109, true
  %lnot.ext111 = zext i1 %lnot110 to i32
  %conv112 = sext i32 %lnot.ext111 to i64
  %tobool113 = icmp ne i64 %conv112, 0
  br i1 %tobool113, label %cond.true114, label %cond.false115

cond.true114:                                     ; preds = %if.else
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1127, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end116

cond.false115:                                    ; preds = %if.else
  br label %cond.end116

cond.end116:                                      ; preds = %cond.false115, %85
  %86 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes117 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %86, i32 0, i32 37
  %arrayidx118 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes117, i64 0, i64 0
  %87 = load i32, i32* %lit, align 4
  %idxprom119 = zext i32 %87 to i64
  %arrayidx120 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx118, i64 0, i64 %idxprom119
  %88 = load i16, i16* %arrayidx120, align 2
  %conv121 = zext i16 %88 to i64
  %89 = load i32, i32* %bits_in, align 4
  %sh_prom122 = zext i32 %89 to i64
  %shl123 = shl i64 %conv121, %sh_prom122
  %90 = load i64, i64* %bit_buffer, align 8
  %or124 = or i64 %90, %shl123
  store i64 %or124, i64* %bit_buffer, align 8
  %91 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes125 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %91, i32 0, i32 38
  %arrayidx126 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes125, i64 0, i64 0
  %92 = load i32, i32* %lit, align 4
  %idxprom127 = zext i32 %92 to i64
  %arrayidx128 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx126, i64 0, i64 %idxprom127
  %93 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %93 to i32
  %94 = load i32, i32* %bits_in, align 4
  %add130 = add i32 %94, %conv129
  store i32 %add130, i32* %bits_in, align 4
  %95 = load i32, i32* %flags, align 4
  %and131 = and i32 %95, 2
  %cmp132 = icmp eq i32 %and131, 0
  br i1 %cmp132, label %land.lhs.true, label %if.end203

land.lhs.true:                                    ; preds = %cond.end116
  %96 = load i8*, i8** %pLZ_codes, align 8
  %97 = load i8*, i8** %pLZ_code_buf_end, align 8
  %cmp134 = icmp ult i8* %96, %97
  br i1 %cmp134, label %if.then136, label %if.end203

if.then136:                                       ; preds = %land.lhs.true
  %98 = load i32, i32* %flags, align 4
  %shr137 = lshr i32 %98, 1
  store i32 %shr137, i32* %flags, align 4
  %99 = load i8*, i8** %pLZ_codes, align 8
  %incdec.ptr138 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %incdec.ptr138, i8** %pLZ_codes, align 8
  %100 = load i8, i8* %99, align 1
  %conv139 = zext i8 %100 to i32
  store i32 %conv139, i32* %lit, align 4
  %101 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes140 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %101, i32 0, i32 38
  %arrayidx141 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes140, i64 0, i64 0
  %102 = load i32, i32* %lit, align 4
  %idxprom142 = zext i32 %102 to i64
  %arrayidx143 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx141, i64 0, i64 %idxprom142
  %103 = load i8, i8* %arrayidx143, align 1
  %tobool144 = icmp ne i8 %103, 0
  %lnot145 = xor i1 %tobool144, true
  %lnot.ext146 = zext i1 %lnot145 to i32
  %conv147 = sext i32 %lnot.ext146 to i64
  %tobool148 = icmp ne i64 %conv147, 0
  br i1 %tobool148, label %cond.true149, label %cond.false150

cond.true149:                                     ; preds = %if.then136
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1134, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end151

cond.false150:                                    ; preds = %if.then136
  br label %cond.end151

cond.end151:                                      ; preds = %cond.false150, %104
  %105 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes152 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %105, i32 0, i32 37
  %arrayidx153 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes152, i64 0, i64 0
  %106 = load i32, i32* %lit, align 4
  %idxprom154 = zext i32 %106 to i64
  %arrayidx155 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx153, i64 0, i64 %idxprom154
  %107 = load i16, i16* %arrayidx155, align 2
  %conv156 = zext i16 %107 to i64
  %108 = load i32, i32* %bits_in, align 4
  %sh_prom157 = zext i32 %108 to i64
  %shl158 = shl i64 %conv156, %sh_prom157
  %109 = load i64, i64* %bit_buffer, align 8
  %or159 = or i64 %109, %shl158
  store i64 %or159, i64* %bit_buffer, align 8
  %110 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes160 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %110, i32 0, i32 38
  %arrayidx161 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes160, i64 0, i64 0
  %111 = load i32, i32* %lit, align 4
  %idxprom162 = zext i32 %111 to i64
  %arrayidx163 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx161, i64 0, i64 %idxprom162
  %112 = load i8, i8* %arrayidx163, align 1
  %conv164 = zext i8 %112 to i32
  %113 = load i32, i32* %bits_in, align 4
  %add165 = add i32 %113, %conv164
  store i32 %add165, i32* %bits_in, align 4
  %114 = load i32, i32* %flags, align 4
  %and166 = and i32 %114, 2
  %cmp167 = icmp eq i32 %and166, 0
  br i1 %cmp167, label %land.lhs.true169, label %if.end202

land.lhs.true169:                                 ; preds = %cond.end151
  %115 = load i8*, i8** %pLZ_codes, align 8
  %116 = load i8*, i8** %pLZ_code_buf_end, align 8
  %cmp170 = icmp ult i8* %115, %116
  br i1 %cmp170, label %if.then172, label %if.end202

if.then172:                                       ; preds = %land.lhs.true169
  %117 = load i32, i32* %flags, align 4
  %shr173 = lshr i32 %117, 1
  store i32 %shr173, i32* %flags, align 4
  %118 = load i8*, i8** %pLZ_codes, align 8
  %incdec.ptr174 = getelementptr inbounds i8, i8* %118, i32 1
  store i8* %incdec.ptr174, i8** %pLZ_codes, align 8
  %119 = load i8, i8* %118, align 1
  %conv175 = zext i8 %119 to i32
  store i32 %conv175, i32* %lit, align 4
  %120 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes176 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %120, i32 0, i32 38
  %arrayidx177 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes176, i64 0, i64 0
  %121 = load i32, i32* %lit, align 4
  %idxprom178 = zext i32 %121 to i64
  %arrayidx179 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx177, i64 0, i64 %idxprom178
  %122 = load i8, i8* %arrayidx179, align 1
  %tobool180 = icmp ne i8 %122, 0
  %lnot181 = xor i1 %tobool180, true
  %lnot.ext182 = zext i1 %lnot181 to i32
  %conv183 = sext i32 %lnot.ext182 to i64
  %tobool184 = icmp ne i64 %conv183, 0
  br i1 %tobool184, label %cond.true185, label %cond.false186

cond.true185:                                     ; preds = %if.then172
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1141, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end187

cond.false186:                                    ; preds = %if.then172
  br label %cond.end187

cond.end187:                                      ; preds = %cond.false186, %123
  %124 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes188 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %124, i32 0, i32 37
  %arrayidx189 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes188, i64 0, i64 0
  %125 = load i32, i32* %lit, align 4
  %idxprom190 = zext i32 %125 to i64
  %arrayidx191 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx189, i64 0, i64 %idxprom190
  %126 = load i16, i16* %arrayidx191, align 2
  %conv192 = zext i16 %126 to i64
  %127 = load i32, i32* %bits_in, align 4
  %sh_prom193 = zext i32 %127 to i64
  %shl194 = shl i64 %conv192, %sh_prom193
  %128 = load i64, i64* %bit_buffer, align 8
  %or195 = or i64 %128, %shl194
  store i64 %or195, i64* %bit_buffer, align 8
  %129 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes196 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %129, i32 0, i32 38
  %arrayidx197 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes196, i64 0, i64 0
  %130 = load i32, i32* %lit, align 4
  %idxprom198 = zext i32 %130 to i64
  %arrayidx199 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx197, i64 0, i64 %idxprom198
  %131 = load i8, i8* %arrayidx199, align 1
  %conv200 = zext i8 %131 to i32
  %132 = load i32, i32* %bits_in, align 4
  %add201 = add i32 %132, %conv200
  store i32 %add201, i32* %bits_in, align 4
  br label %if.end202

if.end202:                                        ; preds = %cond.end187, %land.lhs.true169, %cond.end151
  br label %if.end203

if.end203:                                        ; preds = %if.end202, %land.lhs.true, %cond.end116
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %cond.end80
  %133 = load i8*, i8** %pOutput_buf, align 8
  %134 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %134, i32 0, i32 12
  %135 = load i8*, i8** %m_pOutput_buf_end, align 8
  %cmp205 = icmp uge i8* %133, %135
  br i1 %cmp205, label %if.then207, label %if.end208

if.then207:                                       ; preds = %if.end204
  store i32 0, i32* %retval, align 4
  br label %return

if.end208:                                        ; preds = %if.end204
  %136 = load i64, i64* %bit_buffer, align 8
  %137 = load i8*, i8** %pOutput_buf, align 8
  %138 = bitcast i8* %137 to i64*
  store i64 %136, i64* %138, align 8
  %139 = load i32, i32* %bits_in, align 4
  %shr209 = lshr i32 %139, 3
  %140 = load i8*, i8** %pOutput_buf, align 8
  %idx.ext = zext i32 %shr209 to i64
  %add.ptr210 = getelementptr inbounds i8, i8* %140, i64 %idx.ext
  store i8* %add.ptr210, i8** %pOutput_buf, align 8
  %141 = load i32, i32* %bits_in, align 4
  %and211 = and i32 %141, -8
  %142 = load i64, i64* %bit_buffer, align 8
  %sh_prom212 = zext i32 %and211 to i64
  %shr213 = lshr i64 %142, %sh_prom212
  store i64 %shr213, i64* %bit_buffer, align 8
  %143 = load i32, i32* %bits_in, align 4
  %and214 = and i32 %143, 7
  store i32 %and214, i32* %bits_in, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end208
  %144 = load i32, i32* %flags, align 4
  %shr215 = lshr i32 %144, 1
  store i32 %shr215, i32* %flags, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %145 = load i8*, i8** %pOutput_buf, align 8
  %146 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf216 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %146, i32 0, i32 11
  store i8* %145, i8** %m_pOutput_buf216, align 8
  %147 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in217 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %147, i32 0, i32 16
  store i32 0, i32* %m_bits_in217, align 4
  %148 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer218 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %148, i32 0, i32 17
  store i32 0, i32* %m_bit_buffer218, align 8
  br label %while.cond

while.cond:                                       ; preds = %do.end, %for.end
  %149 = load i32, i32* %bits_in, align 4
  %tobool219 = icmp ne i32 %149, 0
  br i1 %tobool219, label %while.body, label %while.end268

while.body:                                       ; preds = %while.cond
  %150 = load i32, i32* %bits_in, align 4
  %cmp220 = icmp ult i32 %150, 16
  br i1 %cmp220, label %cond.true222, label %cond.false223

cond.true222:                                     ; preds = %while.body
  %151 = load i32, i32* %bits_in, align 4
  br label %cond.end224

cond.false223:                                    ; preds = %while.body
  br label %cond.end224

cond.end224:                                      ; preds = %cond.false223, %cond.true222
  %cond225 = phi i32 [ %151, %cond.true222 ], [ 16, %cond.false223 ]
  store i32 %cond225, i32* %n, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end224
  %152 = load i64, i64* %bit_buffer, align 8
  %conv226 = trunc i64 %152 to i32
  %153 = load i32, i32* %n, align 4
  %idxprom227 = zext i32 %153 to i64
  %arrayidx228 = getelementptr inbounds [17 x i32], [17 x i32]* @mz_bitmasks, i64 0, i64 %idxprom227
  %154 = load i32, i32* %arrayidx228, align 4
  %and229 = and i32 %conv226, %154
  store i32 %and229, i32* %bits, align 4
  %155 = load i32, i32* %n, align 4
  store i32 %155, i32* %len, align 4
  %156 = load i32, i32* %bits, align 4
  %157 = load i32, i32* %len, align 4
  %shl230 = shl i32 1, %157
  %sub = sub i32 %shl230, 1
  %cmp231 = icmp ule i32 %156, %sub
  %lnot233 = xor i1 %cmp231, true
  %lnot.ext234 = zext i1 %lnot233 to i32
  %conv235 = sext i32 %lnot.ext234 to i64
  %tobool236 = icmp ne i64 %conv235, 0
  br i1 %tobool236, label %cond.true237, label %cond.false238

cond.true237:                                     ; preds = %do.body
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1165, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end239

cond.false238:                                    ; preds = %do.body
  br label %cond.end239

cond.end239:                                      ; preds = %cond.false238, %158
  %159 = load i32, i32* %bits, align 4
  %160 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in240 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %160, i32 0, i32 16
  %161 = load i32, i32* %m_bits_in240, align 4
  %shl241 = shl i32 %159, %161
  %162 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer242 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %162, i32 0, i32 17
  %163 = load i32, i32* %m_bit_buffer242, align 8
  %or243 = or i32 %163, %shl241
  store i32 %or243, i32* %m_bit_buffer242, align 8
  %164 = load i32, i32* %len, align 4
  %165 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in244 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %165, i32 0, i32 16
  %166 = load i32, i32* %m_bits_in244, align 4
  %add245 = add i32 %166, %164
  store i32 %add245, i32* %m_bits_in244, align 4
  br label %while.cond246

while.cond246:                                    ; preds = %if.end260, %cond.end239
  %167 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in247 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %167, i32 0, i32 16
  %168 = load i32, i32* %m_bits_in247, align 4
  %cmp248 = icmp uge i32 %168, 8
  br i1 %cmp248, label %while.body250, label %while.end

while.body250:                                    ; preds = %while.cond246
  %169 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf251 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %169, i32 0, i32 11
  %170 = load i8*, i8** %m_pOutput_buf251, align 8
  %171 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end252 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %171, i32 0, i32 12
  %172 = load i8*, i8** %m_pOutput_buf_end252, align 8
  %cmp253 = icmp ult i8* %170, %172
  br i1 %cmp253, label %if.then255, label %if.end260

if.then255:                                       ; preds = %while.body250
  %173 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer256 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %173, i32 0, i32 17
  %174 = load i32, i32* %m_bit_buffer256, align 8
  %conv257 = trunc i32 %174 to i8
  %175 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf258 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %175, i32 0, i32 11
  %176 = load i8*, i8** %m_pOutput_buf258, align 8
  %incdec.ptr259 = getelementptr inbounds i8, i8* %176, i32 1
  store i8* %incdec.ptr259, i8** %m_pOutput_buf258, align 8
  store i8 %conv257, i8* %176, align 1
  br label %if.end260

if.end260:                                        ; preds = %if.then255, %while.body250
  %177 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer261 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %177, i32 0, i32 17
  %178 = load i32, i32* %m_bit_buffer261, align 8
  %shr262 = lshr i32 %178, 8
  store i32 %shr262, i32* %m_bit_buffer261, align 8
  %179 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in263 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %179, i32 0, i32 16
  %180 = load i32, i32* %m_bits_in263, align 4
  %sub264 = sub i32 %180, 8
  store i32 %sub264, i32* %m_bits_in263, align 4
  br label %while.cond246

while.end:                                        ; preds = %while.cond246
  br label %do.end

do.end:                                           ; preds = %while.end
  %181 = load i32, i32* %n, align 4
  %182 = load i64, i64* %bit_buffer, align 8
  %sh_prom265 = zext i32 %181 to i64
  %shr266 = lshr i64 %182, %sh_prom265
  store i64 %shr266, i64* %bit_buffer, align 8
  %183 = load i32, i32* %n, align 4
  %184 = load i32, i32* %bits_in, align 4
  %sub267 = sub i32 %184, %183
  store i32 %sub267, i32* %bits_in, align 4
  br label %while.cond

while.end268:                                     ; preds = %while.cond
  br label %do.body269

do.body269:                                       ; preds = %while.end268
  %185 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes271 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %185, i32 0, i32 37
  %arrayidx272 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes271, i64 0, i64 0
  %arrayidx273 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx272, i64 0, i64 256
  %186 = load i16, i16* %arrayidx273, align 2
  %conv274 = zext i16 %186 to i32
  store i32 %conv274, i32* %bits270, align 4
  %187 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes276 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %187, i32 0, i32 38
  %arrayidx277 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes276, i64 0, i64 0
  %arrayidx278 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx277, i64 0, i64 256
  %188 = load i8, i8* %arrayidx278, align 2
  %conv279 = zext i8 %188 to i32
  store i32 %conv279, i32* %len275, align 4
  %189 = load i32, i32* %bits270, align 4
  %190 = load i32, i32* %len275, align 4
  %shl280 = shl i32 1, %190
  %sub281 = sub i32 %shl280, 1
  %cmp282 = icmp ule i32 %189, %sub281
  %lnot284 = xor i1 %cmp282, true
  %lnot.ext285 = zext i1 %lnot284 to i32
  %conv286 = sext i32 %lnot.ext285 to i64
  %tobool287 = icmp ne i64 %conv286, 0
  br i1 %tobool287, label %cond.true288, label %cond.false289

cond.true288:                                     ; preds = %do.body269
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 1170, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end290

cond.false289:                                    ; preds = %do.body269
  br label %cond.end290

cond.end290:                                      ; preds = %cond.false289, %191
  %192 = load i32, i32* %bits270, align 4
  %193 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in291 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %193, i32 0, i32 16
  %194 = load i32, i32* %m_bits_in291, align 4
  %shl292 = shl i32 %192, %194
  %195 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer293 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %195, i32 0, i32 17
  %196 = load i32, i32* %m_bit_buffer293, align 8
  %or294 = or i32 %196, %shl292
  store i32 %or294, i32* %m_bit_buffer293, align 8
  %197 = load i32, i32* %len275, align 4
  %198 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in295 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %198, i32 0, i32 16
  %199 = load i32, i32* %m_bits_in295, align 4
  %add296 = add i32 %199, %197
  store i32 %add296, i32* %m_bits_in295, align 4
  br label %while.cond297

while.cond297:                                    ; preds = %if.end311, %cond.end290
  %200 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in298 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %200, i32 0, i32 16
  %201 = load i32, i32* %m_bits_in298, align 4
  %cmp299 = icmp uge i32 %201, 8
  br i1 %cmp299, label %while.body301, label %while.end316

while.body301:                                    ; preds = %while.cond297
  %202 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf302 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %202, i32 0, i32 11
  %203 = load i8*, i8** %m_pOutput_buf302, align 8
  %204 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end303 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %204, i32 0, i32 12
  %205 = load i8*, i8** %m_pOutput_buf_end303, align 8
  %cmp304 = icmp ult i8* %203, %205
  br i1 %cmp304, label %if.then306, label %if.end311

if.then306:                                       ; preds = %while.body301
  %206 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer307 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %206, i32 0, i32 17
  %207 = load i32, i32* %m_bit_buffer307, align 8
  %conv308 = trunc i32 %207 to i8
  %208 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf309 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %208, i32 0, i32 11
  %209 = load i8*, i8** %m_pOutput_buf309, align 8
  %incdec.ptr310 = getelementptr inbounds i8, i8* %209, i32 1
  store i8* %incdec.ptr310, i8** %m_pOutput_buf309, align 8
  store i8 %conv308, i8* %209, align 1
  br label %if.end311

if.end311:                                        ; preds = %if.then306, %while.body301
  %210 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bit_buffer312 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %210, i32 0, i32 17
  %211 = load i32, i32* %m_bit_buffer312, align 8
  %shr313 = lshr i32 %211, 8
  store i32 %shr313, i32* %m_bit_buffer312, align 8
  %212 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_bits_in314 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %212, i32 0, i32 16
  %213 = load i32, i32* %m_bits_in314, align 4
  %sub315 = sub i32 %213, 8
  store i32 %sub315, i32* %m_bits_in314, align 4
  br label %while.cond297

while.end316:                                     ; preds = %while.cond297
  br label %do.end317

do.end317:                                        ; preds = %while.end316
  %214 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf318 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %214, i32 0, i32 11
  %215 = load i8*, i8** %m_pOutput_buf318, align 8
  %216 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_pOutput_buf_end319 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %216, i32 0, i32 12
  %217 = load i8*, i8** %m_pOutput_buf_end319, align 8
  %cmp320 = icmp ult i8* %215, %217
  %conv321 = zext i1 %cmp320 to i32
  store i32 %conv321, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end317, %if.then207
  %218 = load i32, i32* %retval, align 4
  ret i32 %218
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %d, i32 %table_num, i32 %table_len, i32 %code_size_limit, i32 %static_table) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %table_num.addr = alloca i32, align 4
  %table_len.addr = alloca i32, align 4
  %code_size_limit.addr = alloca i32, align 4
  %static_table.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %num_codes = alloca [33 x i32], align 16
  %next_code = alloca [33 x i32], align 16
  %syms0 = alloca [288 x %struct.tdefl_sym_freq], align 16
  %syms1 = alloca [288 x %struct.tdefl_sym_freq], align 16
  %pSyms = alloca %struct.tdefl_sym_freq*, align 8
  %num_used_syms = alloca i32, align 4
  %pSym_count = alloca i16*, align 8
  %rev_code = alloca i32, align 4
  %code = alloca i32, align 4
  %code_size = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8
  store i32 %table_num, i32* %table_num.addr, align 4
  store i32 %table_len, i32* %table_len.addr, align 4
  store i32 %code_size_limit, i32* %code_size_limit.addr, align 4
  store i32 %static_table, i32* %static_table.addr, align 4
  %0 = bitcast [33 x i32]* %num_codes to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 132, i32 16, i1 false)
  %1 = load i32, i32* %static_table.addr, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %table_len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 38
  %5 = load i32, i32* %table_num.addr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes, i64 0, i64 %idxprom
  %6 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %6 to i64
  %arrayidx2 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx, i64 0, i64 %idxprom1
  %7 = load i8, i8* %arrayidx2, align 1
  %idxprom3 = zext i8 %7 to i64
  %arrayidx4 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 %idxprom3
  %8 = load i32, i32* %arrayidx4, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %arrayidx4, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc5 = add nsw i32 %9, 1
  store i32 %inc5, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end79

if.else:                                          ; preds = %entry
  store i32 0, i32* %num_used_syms, align 4
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %10, i32 0, i32 36
  %11 = load i32, i32* %table_num.addr, align 4
  %idxprom6 = sext i32 %11 to i64
  %arrayidx7 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 %idxprom6
  %arrayidx8 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx7, i64 0, i64 0
  store i16* %arrayidx8, i16** %pSym_count, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %if.else
  %12 = load i32, i32* %i, align 4
  %13 = load i32, i32* %table_len.addr, align 4
  %cmp10 = icmp slt i32 %12, %13
  br i1 %cmp10, label %for.body11, label %for.end25

for.body11:                                       ; preds = %for.cond9
  %14 = load i16*, i16** %pSym_count, align 8
  %15 = load i32, i32* %i, align 4
  %idxprom12 = sext i32 %15 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %14, i64 %idxprom12
  %16 = load i16, i16* %arrayidx13, align 2
  %tobool14 = icmp ne i16 %16, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body11
  %17 = load i16*, i16** %pSym_count, align 8
  %18 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %18 to i64
  %arrayidx17 = getelementptr inbounds i16, i16* %17, i64 %idxprom16
  %19 = load i16, i16* %arrayidx17, align 2
  %20 = load i32, i32* %num_used_syms, align 4
  %idxprom18 = sext i32 %20 to i64
  %arrayidx19 = getelementptr inbounds [288 x %struct.tdefl_sym_freq], [288 x %struct.tdefl_sym_freq]* %syms0, i64 0, i64 %idxprom18
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx19, i32 0, i32 0
  store i16 %19, i16* %m_key, align 4
  %21 = load i32, i32* %i, align 4
  %conv = trunc i32 %21 to i16
  %22 = load i32, i32* %num_used_syms, align 4
  %inc20 = add nsw i32 %22, 1
  store i32 %inc20, i32* %num_used_syms, align 4
  %idxprom21 = sext i32 %22 to i64
  %arrayidx22 = getelementptr inbounds [288 x %struct.tdefl_sym_freq], [288 x %struct.tdefl_sym_freq]* %syms0, i64 0, i64 %idxprom21
  %m_sym_index = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx22, i32 0, i32 1
  store i16 %conv, i16* %m_sym_index, align 2
  br label %if.end

if.end:                                           ; preds = %if.then15, %for.body11
  br label %for.inc23

for.inc23:                                        ; preds = %if.end
  %23 = load i32, i32* %i, align 4
  %inc24 = add nsw i32 %23, 1
  store i32 %inc24, i32* %i, align 4
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %24 = load i32, i32* %num_used_syms, align 4
  %arraydecay = getelementptr inbounds [288 x %struct.tdefl_sym_freq], [288 x %struct.tdefl_sym_freq]* %syms0, i32 0, i32 0
  %arraydecay26 = getelementptr inbounds [288 x %struct.tdefl_sym_freq], [288 x %struct.tdefl_sym_freq]* %syms1, i32 0, i32 0
  %call = call %struct.tdefl_sym_freq* @tdefl_radix_sort_syms(i32 %24, %struct.tdefl_sym_freq* %arraydecay, %struct.tdefl_sym_freq* %arraydecay26)
  store %struct.tdefl_sym_freq* %call, %struct.tdefl_sym_freq** %pSyms, align 8
  %25 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms, align 8
  %26 = load i32, i32* %num_used_syms, align 4
  call void @tdefl_calculate_minimum_redundancy(%struct.tdefl_sym_freq* %25, i32 %26)
  store i32 0, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc37, %for.end25
  %27 = load i32, i32* %i, align 4
  %28 = load i32, i32* %num_used_syms, align 4
  %cmp28 = icmp slt i32 %27, %28
  br i1 %cmp28, label %for.body30, label %for.end39

for.body30:                                       ; preds = %for.cond27
  %29 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %30 to i64
  %arrayidx32 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %29, i64 %idxprom31
  %m_key33 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx32, i32 0, i32 0
  %31 = load i16, i16* %m_key33, align 2
  %idxprom34 = zext i16 %31 to i64
  %arrayidx35 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 %idxprom34
  %32 = load i32, i32* %arrayidx35, align 4
  %inc36 = add nsw i32 %32, 1
  store i32 %inc36, i32* %arrayidx35, align 4
  br label %for.inc37

for.inc37:                                        ; preds = %for.body30
  %33 = load i32, i32* %i, align 4
  %inc38 = add nsw i32 %33, 1
  store i32 %inc38, i32* %i, align 4
  br label %for.cond27

for.end39:                                        ; preds = %for.cond27
  %arraydecay40 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i32 0, i32 0
  %34 = load i32, i32* %num_used_syms, align 4
  %35 = load i32, i32* %code_size_limit.addr, align 4
  call void @tdefl_huffman_enforce_max_code_size(i32* %arraydecay40, i32 %34, i32 %35)
  %36 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes41 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %36, i32 0, i32 38
  %37 = load i32, i32* %table_num.addr, align 4
  %idxprom42 = sext i32 %37 to i64
  %arrayidx43 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes41, i64 0, i64 %idxprom42
  %38 = bitcast [288 x i8]* %arrayidx43 to i8*
  %39 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes44 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %39, i32 0, i32 38
  %40 = load i32, i32* %table_num.addr, align 4
  %idxprom45 = sext i32 %40 to i64
  %arrayidx46 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes44, i64 0, i64 %idxprom45
  %41 = bitcast [288 x i8]* %arrayidx46 to i8*
  %42 = call i64 @llvm.objectsize.i64.p0i8(i8* %41, i1 false)
  %call47 = call i8* @__memset_chk(i8* %38, i32 0, i64 288, i64 %42) #10
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %43, i32 0, i32 37
  %44 = load i32, i32* %table_num.addr, align 4
  %idxprom48 = sext i32 %44 to i64
  %arrayidx49 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes, i64 0, i64 %idxprom48
  %45 = bitcast [288 x i16]* %arrayidx49 to i8*
  %46 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes50 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %46, i32 0, i32 37
  %47 = load i32, i32* %table_num.addr, align 4
  %idxprom51 = sext i32 %47 to i64
  %arrayidx52 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes50, i64 0, i64 %idxprom51
  %48 = bitcast [288 x i16]* %arrayidx52 to i8*
  %49 = call i64 @llvm.objectsize.i64.p0i8(i8* %48, i1 false)
  %call53 = call i8* @__memset_chk(i8* %45, i32 0, i64 576, i64 %49) #10
  store i32 1, i32* %i, align 4
  %50 = load i32, i32* %num_used_syms, align 4
  store i32 %50, i32* %j, align 4
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc76, %for.end39
  %51 = load i32, i32* %i, align 4
  %52 = load i32, i32* %code_size_limit.addr, align 4
  %cmp55 = icmp sle i32 %51, %52
  br i1 %cmp55, label %for.body57, label %for.end78

for.body57:                                       ; preds = %for.cond54
  %53 = load i32, i32* %i, align 4
  %idxprom58 = sext i32 %53 to i64
  %arrayidx59 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 %idxprom58
  %54 = load i32, i32* %arrayidx59, align 4
  store i32 %54, i32* %l, align 4
  br label %for.cond60

for.cond60:                                       ; preds = %for.inc73, %for.body57
  %55 = load i32, i32* %l, align 4
  %cmp61 = icmp sgt i32 %55, 0
  br i1 %cmp61, label %for.body63, label %for.end75

for.body63:                                       ; preds = %for.cond60
  %56 = load i32, i32* %i, align 4
  %conv64 = trunc i32 %56 to i8
  %57 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes65 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %57, i32 0, i32 38
  %58 = load i32, i32* %table_num.addr, align 4
  %idxprom66 = sext i32 %58 to i64
  %arrayidx67 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes65, i64 0, i64 %idxprom66
  %59 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms, align 8
  %60 = load i32, i32* %j, align 4
  %dec = add nsw i32 %60, -1
  store i32 %dec, i32* %j, align 4
  %idxprom68 = sext i32 %dec to i64
  %arrayidx69 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %59, i64 %idxprom68
  %m_sym_index70 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx69, i32 0, i32 1
  %61 = load i16, i16* %m_sym_index70, align 2
  %idxprom71 = zext i16 %61 to i64
  %arrayidx72 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx67, i64 0, i64 %idxprom71
  store i8 %conv64, i8* %arrayidx72, align 1
  br label %for.inc73

for.inc73:                                        ; preds = %for.body63
  %62 = load i32, i32* %l, align 4
  %dec74 = add nsw i32 %62, -1
  store i32 %dec74, i32* %l, align 4
  br label %for.cond60

for.end75:                                        ; preds = %for.cond60
  br label %for.inc76

for.inc76:                                        ; preds = %for.end75
  %63 = load i32, i32* %i, align 4
  %inc77 = add nsw i32 %63, 1
  store i32 %inc77, i32* %i, align 4
  br label %for.cond54

for.end78:                                        ; preds = %for.cond54
  br label %if.end79

if.end79:                                         ; preds = %for.end78, %for.end
  %arrayidx80 = getelementptr inbounds [33 x i32], [33 x i32]* %next_code, i64 0, i64 1
  store i32 0, i32* %arrayidx80, align 4
  store i32 0, i32* %j, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc89, %if.end79
  %64 = load i32, i32* %i, align 4
  %65 = load i32, i32* %code_size_limit.addr, align 4
  %cmp82 = icmp sle i32 %64, %65
  br i1 %cmp82, label %for.body84, label %for.end91

for.body84:                                       ; preds = %for.cond81
  %66 = load i32, i32* %j, align 4
  %67 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %67, 1
  %idxprom85 = sext i32 %sub to i64
  %arrayidx86 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 %idxprom85
  %68 = load i32, i32* %arrayidx86, align 4
  %add = add nsw i32 %66, %68
  %shl = shl i32 %add, 1
  store i32 %shl, i32* %j, align 4
  %69 = load i32, i32* %i, align 4
  %idxprom87 = sext i32 %69 to i64
  %arrayidx88 = getelementptr inbounds [33 x i32], [33 x i32]* %next_code, i64 0, i64 %idxprom87
  store i32 %shl, i32* %arrayidx88, align 4
  br label %for.inc89

for.inc89:                                        ; preds = %for.body84
  %70 = load i32, i32* %i, align 4
  %inc90 = add nsw i32 %70, 1
  store i32 %inc90, i32* %i, align 4
  br label %for.cond81

for.end91:                                        ; preds = %for.cond81
  store i32 0, i32* %i, align 4
  br label %for.cond92

for.cond92:                                       ; preds = %for.inc123, %for.end91
  %71 = load i32, i32* %i, align 4
  %72 = load i32, i32* %table_len.addr, align 4
  %cmp93 = icmp slt i32 %71, %72
  br i1 %cmp93, label %for.body95, label %for.end125

for.body95:                                       ; preds = %for.cond92
  store i32 0, i32* %rev_code, align 4
  %73 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_code_sizes96 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %73, i32 0, i32 38
  %74 = load i32, i32* %table_num.addr, align 4
  %idxprom97 = sext i32 %74 to i64
  %arrayidx98 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes96, i64 0, i64 %idxprom97
  %75 = load i32, i32* %i, align 4
  %idxprom99 = sext i32 %75 to i64
  %arrayidx100 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx98, i64 0, i64 %idxprom99
  %76 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %76 to i32
  store i32 %conv101, i32* %code_size, align 4
  %cmp102 = icmp eq i32 %conv101, 0
  br i1 %cmp102, label %if.then104, label %if.end105

if.then104:                                       ; preds = %for.body95
  br label %for.inc123

if.end105:                                        ; preds = %for.body95
  %77 = load i32, i32* %code_size, align 4
  %idxprom106 = zext i32 %77 to i64
  %arrayidx107 = getelementptr inbounds [33 x i32], [33 x i32]* %next_code, i64 0, i64 %idxprom106
  %78 = load i32, i32* %arrayidx107, align 4
  %inc108 = add i32 %78, 1
  store i32 %inc108, i32* %arrayidx107, align 4
  store i32 %78, i32* %code, align 4
  %79 = load i32, i32* %code_size, align 4
  store i32 %79, i32* %l, align 4
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc114, %if.end105
  %80 = load i32, i32* %l, align 4
  %cmp110 = icmp sgt i32 %80, 0
  br i1 %cmp110, label %for.body112, label %for.end116

for.body112:                                      ; preds = %for.cond109
  %81 = load i32, i32* %rev_code, align 4
  %shl113 = shl i32 %81, 1
  %82 = load i32, i32* %code, align 4
  %and = and i32 %82, 1
  %or = or i32 %shl113, %and
  store i32 %or, i32* %rev_code, align 4
  br label %for.inc114

for.inc114:                                       ; preds = %for.body112
  %83 = load i32, i32* %l, align 4
  %dec115 = add nsw i32 %83, -1
  store i32 %dec115, i32* %l, align 4
  %84 = load i32, i32* %code, align 4
  %shr = lshr i32 %84, 1
  store i32 %shr, i32* %code, align 4
  br label %for.cond109

for.end116:                                       ; preds = %for.cond109
  %85 = load i32, i32* %rev_code, align 4
  %conv117 = trunc i32 %85 to i16
  %86 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8
  %m_huff_codes118 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %86, i32 0, i32 37
  %87 = load i32, i32* %table_num.addr, align 4
  %idxprom119 = sext i32 %87 to i64
  %arrayidx120 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes118, i64 0, i64 %idxprom119
  %88 = load i32, i32* %i, align 4
  %idxprom121 = sext i32 %88 to i64
  %arrayidx122 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx120, i64 0, i64 %idxprom121
  store i16 %conv117, i16* %arrayidx122, align 2
  br label %for.inc123

for.inc123:                                       ; preds = %for.end116, %if.then104
  %89 = load i32, i32* %i, align 4
  %inc124 = add nsw i32 %89, 1
  store i32 %inc124, i32* %i, align 4
  br label %for.cond92

for.end125:                                       ; preds = %for.cond92
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal %struct.tdefl_sym_freq* @tdefl_radix_sort_syms(i32 %num_syms, %struct.tdefl_sym_freq* %pSyms0, %struct.tdefl_sym_freq* %pSyms1) #0 {
entry:
  %num_syms.addr = alloca i32, align 4
  %pSyms0.addr = alloca %struct.tdefl_sym_freq*, align 8
  %pSyms1.addr = alloca %struct.tdefl_sym_freq*, align 8
  %total_passes = alloca i32, align 4
  %pass_shift = alloca i32, align 4
  %pass = alloca i32, align 4
  %i = alloca i32, align 4
  %hist = alloca [512 x i32], align 16
  %pCur_syms = alloca %struct.tdefl_sym_freq*, align 8
  %pNew_syms = alloca %struct.tdefl_sym_freq*, align 8
  %freq = alloca i32, align 4
  %pHist = alloca i32*, align 8
  %offsets = alloca [256 x i32], align 16
  %cur_ofs = alloca i32, align 4
  %t = alloca %struct.tdefl_sym_freq*, align 8
  store i32 %num_syms, i32* %num_syms.addr, align 4
  store %struct.tdefl_sym_freq* %pSyms0, %struct.tdefl_sym_freq** %pSyms0.addr, align 8
  store %struct.tdefl_sym_freq* %pSyms1, %struct.tdefl_sym_freq** %pSyms1.addr, align 8
  store i32 2, i32* %total_passes, align 4
  %0 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms0.addr, align 8
  store %struct.tdefl_sym_freq* %0, %struct.tdefl_sym_freq** %pCur_syms, align 8
  %1 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms1.addr, align 8
  store %struct.tdefl_sym_freq* %1, %struct.tdefl_sym_freq** %pNew_syms, align 8
  %2 = bitcast [512 x i32]* %hist to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 2048, i32 16, i1 false)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %4 = load i32, i32* %num_syms.addr, align 4
  %cmp = icmp ult i32 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms0.addr, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom = zext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %5, i64 %idxprom
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx, i32 0, i32 0
  %7 = load i16, i16* %m_key, align 2
  %conv = zext i16 %7 to i32
  store i32 %conv, i32* %freq, align 4
  %8 = load i32, i32* %freq, align 4
  %and = and i32 %8, 255
  %idxprom1 = zext i32 %and to i64
  %arrayidx2 = getelementptr inbounds [512 x i32], [512 x i32]* %hist, i64 0, i64 %idxprom1
  %9 = load i32, i32* %arrayidx2, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %arrayidx2, align 4
  %10 = load i32, i32* %freq, align 4
  %shr = lshr i32 %10, 8
  %and3 = and i32 %shr, 255
  %add = add i32 256, %and3
  %idxprom4 = zext i32 %add to i64
  %arrayidx5 = getelementptr inbounds [512 x i32], [512 x i32]* %hist, i64 0, i64 %idxprom4
  %11 = load i32, i32* %arrayidx5, align 4
  %inc6 = add i32 %11, 1
  store i32 %inc6, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc7 = add i32 %12, 1
  store i32 %inc7, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %13 = load i32, i32* %total_passes, align 4
  %cmp8 = icmp ugt i32 %13, 1
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %14 = load i32, i32* %num_syms.addr, align 4
  %15 = load i32, i32* %total_passes, align 4
  %sub = sub i32 %15, 1
  %mul = mul i32 %sub, 256
  %idxprom10 = zext i32 %mul to i64
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %hist, i64 0, i64 %idxprom10
  %16 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp eq i32 %14, %16
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %cmp12, %land.rhs ]
  br i1 %17, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %18 = load i32, i32* %total_passes, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %total_passes, align 4
  br label %while.cond

while.end:                                        ; preds = %land.end
  store i32 0, i32* %pass_shift, align 4
  store i32 0, i32* %pass, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc52, %while.end
  %19 = load i32, i32* %pass, align 4
  %20 = load i32, i32* %total_passes, align 4
  %cmp15 = icmp ult i32 %19, %20
  br i1 %cmp15, label %for.body17, label %for.end55

for.body17:                                       ; preds = %for.cond14
  %21 = load i32, i32* %pass, align 4
  %shl = shl i32 %21, 8
  %idxprom18 = zext i32 %shl to i64
  %arrayidx19 = getelementptr inbounds [512 x i32], [512 x i32]* %hist, i64 0, i64 %idxprom18
  store i32* %arrayidx19, i32** %pHist, align 8
  store i32 0, i32* %cur_ofs, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc29, %for.body17
  %22 = load i32, i32* %i, align 4
  %cmp21 = icmp ult i32 %22, 256
  br i1 %cmp21, label %for.body23, label %for.end31

for.body23:                                       ; preds = %for.cond20
  %23 = load i32, i32* %cur_ofs, align 4
  %24 = load i32, i32* %i, align 4
  %idxprom24 = zext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds [256 x i32], [256 x i32]* %offsets, i64 0, i64 %idxprom24
  store i32 %23, i32* %arrayidx25, align 4
  %25 = load i32*, i32** %pHist, align 8
  %26 = load i32, i32* %i, align 4
  %idxprom26 = zext i32 %26 to i64
  %arrayidx27 = getelementptr inbounds i32, i32* %25, i64 %idxprom26
  %27 = load i32, i32* %arrayidx27, align 4
  %28 = load i32, i32* %cur_ofs, align 4
  %add28 = add i32 %28, %27
  store i32 %add28, i32* %cur_ofs, align 4
  br label %for.inc29

for.inc29:                                        ; preds = %for.body23
  %29 = load i32, i32* %i, align 4
  %inc30 = add i32 %29, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond20

for.end31:                                        ; preds = %for.cond20
  store i32 0, i32* %i, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc49, %for.end31
  %30 = load i32, i32* %i, align 4
  %31 = load i32, i32* %num_syms.addr, align 4
  %cmp33 = icmp ult i32 %30, %31
  br i1 %cmp33, label %for.body35, label %for.end51

for.body35:                                       ; preds = %for.cond32
  %32 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pNew_syms, align 8
  %33 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pCur_syms, align 8
  %34 = load i32, i32* %i, align 4
  %idxprom36 = zext i32 %34 to i64
  %arrayidx37 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %33, i64 %idxprom36
  %m_key38 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx37, i32 0, i32 0
  %35 = load i16, i16* %m_key38, align 2
  %conv39 = zext i16 %35 to i32
  %36 = load i32, i32* %pass_shift, align 4
  %shr40 = ashr i32 %conv39, %36
  %and41 = and i32 %shr40, 255
  %idxprom42 = sext i32 %and41 to i64
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* %offsets, i64 0, i64 %idxprom42
  %37 = load i32, i32* %arrayidx43, align 4
  %inc44 = add i32 %37, 1
  store i32 %inc44, i32* %arrayidx43, align 4
  %idxprom45 = zext i32 %37 to i64
  %arrayidx46 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %32, i64 %idxprom45
  %38 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pCur_syms, align 8
  %39 = load i32, i32* %i, align 4
  %idxprom47 = zext i32 %39 to i64
  %arrayidx48 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %38, i64 %idxprom47
  %40 = bitcast %struct.tdefl_sym_freq* %arrayidx46 to i8*
  %41 = bitcast %struct.tdefl_sym_freq* %arrayidx48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 4, i32 2, i1 false)
  br label %for.inc49

for.inc49:                                        ; preds = %for.body35
  %42 = load i32, i32* %i, align 4
  %inc50 = add i32 %42, 1
  store i32 %inc50, i32* %i, align 4
  br label %for.cond32

for.end51:                                        ; preds = %for.cond32
  %43 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pCur_syms, align 8
  store %struct.tdefl_sym_freq* %43, %struct.tdefl_sym_freq** %t, align 8
  %44 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pNew_syms, align 8
  store %struct.tdefl_sym_freq* %44, %struct.tdefl_sym_freq** %pCur_syms, align 8
  %45 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %t, align 8
  store %struct.tdefl_sym_freq* %45, %struct.tdefl_sym_freq** %pNew_syms, align 8
  br label %for.inc52

for.inc52:                                        ; preds = %for.end51
  %46 = load i32, i32* %pass, align 4
  %inc53 = add i32 %46, 1
  store i32 %inc53, i32* %pass, align 4
  %47 = load i32, i32* %pass_shift, align 4
  %add54 = add i32 %47, 8
  store i32 %add54, i32* %pass_shift, align 4
  br label %for.cond14

for.end55:                                        ; preds = %for.cond14
  %48 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pCur_syms, align 8
  ret %struct.tdefl_sym_freq* %48
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @tdefl_calculate_minimum_redundancy(%struct.tdefl_sym_freq* %A, i32 %n) #0 {
entry:
  %A.addr = alloca %struct.tdefl_sym_freq*, align 8
  %n.addr = alloca i32, align 4
  %root = alloca i32, align 4
  %leaf = alloca i32, align 4
  %next = alloca i32, align 4
  %avbl = alloca i32, align 4
  %used = alloca i32, align 4
  %dpth = alloca i32, align 4
  store %struct.tdefl_sym_freq* %A, %struct.tdefl_sym_freq** %A.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %while.end145

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %1, 1
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.else
  %2 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %2, i64 0
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx, i32 0, i32 0
  store i16 1, i16* %m_key, align 2
  br label %while.end145

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end
  %3 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx4 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %3, i64 1
  %m_key5 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx4, i32 0, i32 0
  %4 = load i16, i16* %m_key5, align 2
  %conv = zext i16 %4 to i32
  %5 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %arrayidx6 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %5, i64 0
  %m_key7 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx6, i32 0, i32 0
  %6 = load i16, i16* %m_key7, align 2
  %conv8 = zext i16 %6 to i32
  %add = add nsw i32 %conv8, %conv
  %conv9 = trunc i32 %add to i16
  store i16 %conv9, i16* %m_key7, align 2
  store i32 0, i32* %root, align 4
  store i32 2, i32* %leaf, align 4
  store i32 1, i32* %next, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end3
  %7 = load i32, i32* %next, align 4
  %8 = load i32, i32* %n.addr, align 4
  %sub = sub nsw i32 %8, 1
  %cmp10 = icmp slt i32 %7, %sub
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %leaf, align 4
  %10 = load i32, i32* %n.addr, align 4
  %cmp12 = icmp sge i32 %9, %10
  br i1 %cmp12, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %11 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %12 = load i32, i32* %root, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx14 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %11, i64 %idxprom
  %m_key15 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx14, i32 0, i32 0
  %13 = load i16, i16* %m_key15, align 2
  %conv16 = zext i16 %13 to i32
  %14 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %15 = load i32, i32* %leaf, align 4
  %idxprom17 = sext i32 %15 to i64
  %arrayidx18 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %14, i64 %idxprom17
  %m_key19 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx18, i32 0, i32 0
  %16 = load i16, i16* %m_key19, align 2
  %conv20 = zext i16 %16 to i32
  %cmp21 = icmp slt i32 %conv16, %conv20
  br i1 %cmp21, label %if.then23, label %if.else34

if.then23:                                        ; preds = %lor.lhs.false, %for.body
  %17 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %18 = load i32, i32* %root, align 4
  %idxprom24 = sext i32 %18 to i64
  %arrayidx25 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %17, i64 %idxprom24
  %m_key26 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx25, i32 0, i32 0
  %19 = load i16, i16* %m_key26, align 2
  %20 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %21 = load i32, i32* %next, align 4
  %idxprom27 = sext i32 %21 to i64
  %arrayidx28 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %20, i64 %idxprom27
  %m_key29 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx28, i32 0, i32 0
  store i16 %19, i16* %m_key29, align 2
  %22 = load i32, i32* %next, align 4
  %conv30 = trunc i32 %22 to i16
  %23 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %24 = load i32, i32* %root, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %root, align 4
  %idxprom31 = sext i32 %24 to i64
  %arrayidx32 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %23, i64 %idxprom31
  %m_key33 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx32, i32 0, i32 0
  store i16 %conv30, i16* %m_key33, align 2
  br label %if.end42

if.else34:                                        ; preds = %lor.lhs.false
  %25 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %26 = load i32, i32* %leaf, align 4
  %inc35 = add nsw i32 %26, 1
  store i32 %inc35, i32* %leaf, align 4
  %idxprom36 = sext i32 %26 to i64
  %arrayidx37 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %25, i64 %idxprom36
  %m_key38 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx37, i32 0, i32 0
  %27 = load i16, i16* %m_key38, align 2
  %28 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %29 = load i32, i32* %next, align 4
  %idxprom39 = sext i32 %29 to i64
  %arrayidx40 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %28, i64 %idxprom39
  %m_key41 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx40, i32 0, i32 0
  store i16 %27, i16* %m_key41, align 2
  br label %if.end42

if.end42:                                         ; preds = %if.else34, %if.then23
  %30 = load i32, i32* %leaf, align 4
  %31 = load i32, i32* %n.addr, align 4
  %cmp43 = icmp sge i32 %30, %31
  br i1 %cmp43, label %if.then58, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.end42
  %32 = load i32, i32* %root, align 4
  %33 = load i32, i32* %next, align 4
  %cmp46 = icmp slt i32 %32, %33
  br i1 %cmp46, label %land.lhs.true, label %if.else77

land.lhs.true:                                    ; preds = %lor.lhs.false45
  %34 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %35 = load i32, i32* %root, align 4
  %idxprom48 = sext i32 %35 to i64
  %arrayidx49 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %34, i64 %idxprom48
  %m_key50 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx49, i32 0, i32 0
  %36 = load i16, i16* %m_key50, align 2
  %conv51 = zext i16 %36 to i32
  %37 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %38 = load i32, i32* %leaf, align 4
  %idxprom52 = sext i32 %38 to i64
  %arrayidx53 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %37, i64 %idxprom52
  %m_key54 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx53, i32 0, i32 0
  %39 = load i16, i16* %m_key54, align 2
  %conv55 = zext i16 %39 to i32
  %cmp56 = icmp slt i32 %conv51, %conv55
  br i1 %cmp56, label %if.then58, label %if.else77

if.then58:                                        ; preds = %land.lhs.true, %if.end42
  %40 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %41 = load i32, i32* %next, align 4
  %idxprom59 = sext i32 %41 to i64
  %arrayidx60 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %40, i64 %idxprom59
  %m_key61 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx60, i32 0, i32 0
  %42 = load i16, i16* %m_key61, align 2
  %conv62 = zext i16 %42 to i32
  %43 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %44 = load i32, i32* %root, align 4
  %idxprom63 = sext i32 %44 to i64
  %arrayidx64 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %43, i64 %idxprom63
  %m_key65 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx64, i32 0, i32 0
  %45 = load i16, i16* %m_key65, align 2
  %conv66 = zext i16 %45 to i32
  %add67 = add nsw i32 %conv62, %conv66
  %conv68 = trunc i32 %add67 to i16
  %46 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %47 = load i32, i32* %next, align 4
  %idxprom69 = sext i32 %47 to i64
  %arrayidx70 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %46, i64 %idxprom69
  %m_key71 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx70, i32 0, i32 0
  store i16 %conv68, i16* %m_key71, align 2
  %48 = load i32, i32* %next, align 4
  %conv72 = trunc i32 %48 to i16
  %49 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %50 = load i32, i32* %root, align 4
  %inc73 = add nsw i32 %50, 1
  store i32 %inc73, i32* %root, align 4
  %idxprom74 = sext i32 %50 to i64
  %arrayidx75 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %49, i64 %idxprom74
  %m_key76 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx75, i32 0, i32 0
  store i16 %conv72, i16* %m_key76, align 2
  br label %if.end92

if.else77:                                        ; preds = %land.lhs.true, %lor.lhs.false45
  %51 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %52 = load i32, i32* %next, align 4
  %idxprom78 = sext i32 %52 to i64
  %arrayidx79 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %51, i64 %idxprom78
  %m_key80 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx79, i32 0, i32 0
  %53 = load i16, i16* %m_key80, align 2
  %conv81 = zext i16 %53 to i32
  %54 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %55 = load i32, i32* %leaf, align 4
  %inc82 = add nsw i32 %55, 1
  store i32 %inc82, i32* %leaf, align 4
  %idxprom83 = sext i32 %55 to i64
  %arrayidx84 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %54, i64 %idxprom83
  %m_key85 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx84, i32 0, i32 0
  %56 = load i16, i16* %m_key85, align 2
  %conv86 = zext i16 %56 to i32
  %add87 = add nsw i32 %conv81, %conv86
  %conv88 = trunc i32 %add87 to i16
  %57 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %58 = load i32, i32* %next, align 4
  %idxprom89 = sext i32 %58 to i64
  %arrayidx90 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %57, i64 %idxprom89
  %m_key91 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx90, i32 0, i32 0
  store i16 %conv88, i16* %m_key91, align 2
  br label %if.end92

if.end92:                                         ; preds = %if.else77, %if.then58
  br label %for.inc

for.inc:                                          ; preds = %if.end92
  %59 = load i32, i32* %next, align 4
  %inc93 = add nsw i32 %59, 1
  store i32 %inc93, i32* %next, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %60 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %61 = load i32, i32* %n.addr, align 4
  %sub94 = sub nsw i32 %61, 2
  %idxprom95 = sext i32 %sub94 to i64
  %arrayidx96 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %60, i64 %idxprom95
  %m_key97 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx96, i32 0, i32 0
  store i16 0, i16* %m_key97, align 2
  %62 = load i32, i32* %n.addr, align 4
  %sub98 = sub nsw i32 %62, 3
  store i32 %sub98, i32* %next, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc115, %for.end
  %63 = load i32, i32* %next, align 4
  %cmp100 = icmp sge i32 %63, 0
  br i1 %cmp100, label %for.body102, label %for.end116

for.body102:                                      ; preds = %for.cond99
  %64 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %65 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %66 = load i32, i32* %next, align 4
  %idxprom103 = sext i32 %66 to i64
  %arrayidx104 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %65, i64 %idxprom103
  %m_key105 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx104, i32 0, i32 0
  %67 = load i16, i16* %m_key105, align 2
  %idxprom106 = zext i16 %67 to i64
  %arrayidx107 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %64, i64 %idxprom106
  %m_key108 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx107, i32 0, i32 0
  %68 = load i16, i16* %m_key108, align 2
  %conv109 = zext i16 %68 to i32
  %add110 = add nsw i32 %conv109, 1
  %conv111 = trunc i32 %add110 to i16
  %69 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %70 = load i32, i32* %next, align 4
  %idxprom112 = sext i32 %70 to i64
  %arrayidx113 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %69, i64 %idxprom112
  %m_key114 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx113, i32 0, i32 0
  store i16 %conv111, i16* %m_key114, align 2
  br label %for.inc115

for.inc115:                                       ; preds = %for.body102
  %71 = load i32, i32* %next, align 4
  %dec = add nsw i32 %71, -1
  store i32 %dec, i32* %next, align 4
  br label %for.cond99

for.end116:                                       ; preds = %for.cond99
  store i32 1, i32* %avbl, align 4
  store i32 0, i32* %dpth, align 4
  store i32 0, i32* %used, align 4
  %72 = load i32, i32* %n.addr, align 4
  %sub117 = sub nsw i32 %72, 2
  store i32 %sub117, i32* %root, align 4
  %73 = load i32, i32* %n.addr, align 4
  %sub118 = sub nsw i32 %73, 1
  store i32 %sub118, i32* %next, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.end143, %for.end116
  %74 = load i32, i32* %avbl, align 4
  %cmp119 = icmp sgt i32 %74, 0
  br i1 %cmp119, label %while.body, label %while.end145

while.body:                                       ; preds = %while.cond
  br label %while.cond121

while.cond121:                                    ; preds = %while.body130, %while.body
  %75 = load i32, i32* %root, align 4
  %cmp122 = icmp sge i32 %75, 0
  br i1 %cmp122, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond121
  %76 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %77 = load i32, i32* %root, align 4
  %idxprom124 = sext i32 %77 to i64
  %arrayidx125 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %76, i64 %idxprom124
  %m_key126 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx125, i32 0, i32 0
  %78 = load i16, i16* %m_key126, align 2
  %conv127 = zext i16 %78 to i32
  %79 = load i32, i32* %dpth, align 4
  %cmp128 = icmp eq i32 %conv127, %79
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond121
  %80 = phi i1 [ false, %while.cond121 ], [ %cmp128, %land.rhs ]
  br i1 %80, label %while.body130, label %while.end

while.body130:                                    ; preds = %land.end
  %81 = load i32, i32* %used, align 4
  %inc131 = add nsw i32 %81, 1
  store i32 %inc131, i32* %used, align 4
  %82 = load i32, i32* %root, align 4
  %dec132 = add nsw i32 %82, -1
  store i32 %dec132, i32* %root, align 4
  br label %while.cond121

while.end:                                        ; preds = %land.end
  br label %while.cond133

while.cond133:                                    ; preds = %while.body136, %while.end
  %83 = load i32, i32* %avbl, align 4
  %84 = load i32, i32* %used, align 4
  %cmp134 = icmp sgt i32 %83, %84
  br i1 %cmp134, label %while.body136, label %while.end143

while.body136:                                    ; preds = %while.cond133
  %85 = load i32, i32* %dpth, align 4
  %conv137 = trunc i32 %85 to i16
  %86 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8
  %87 = load i32, i32* %next, align 4
  %dec138 = add nsw i32 %87, -1
  store i32 %dec138, i32* %next, align 4
  %idxprom139 = sext i32 %87 to i64
  %arrayidx140 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %86, i64 %idxprom139
  %m_key141 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx140, i32 0, i32 0
  store i16 %conv137, i16* %m_key141, align 2
  %88 = load i32, i32* %avbl, align 4
  %dec142 = add nsw i32 %88, -1
  store i32 %dec142, i32* %avbl, align 4
  br label %while.cond133

while.end143:                                     ; preds = %while.cond133
  %89 = load i32, i32* %used, align 4
  %mul = mul nsw i32 2, %89
  store i32 %mul, i32* %avbl, align 4
  %90 = load i32, i32* %dpth, align 4
  %inc144 = add nsw i32 %90, 1
  store i32 %inc144, i32* %dpth, align 4
  store i32 0, i32* %used, align 4
  br label %while.cond

while.end145:                                     ; preds = %if.then, %if.then2, %while.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @tdefl_huffman_enforce_max_code_size(i32* %pNum_codes, i32 %code_list_len, i32 %max_code_size) #0 {
entry:
  %pNum_codes.addr = alloca i32*, align 8
  %code_list_len.addr = alloca i32, align 4
  %max_code_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %total = alloca i32, align 4
  store i32* %pNum_codes, i32** %pNum_codes.addr, align 8
  store i32 %code_list_len, i32* %code_list_len.addr, align 4
  store i32 %max_code_size, i32* %max_code_size.addr, align 4
  store i32 0, i32* %total, align 4
  %0 = load i32, i32* %code_list_len.addr, align 4
  %cmp = icmp sle i32 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.end

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %max_code_size.addr, align 4
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %cmp1 = icmp sle i32 %2, 32
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32*, i32** %pNum_codes.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4
  %6 = load i32*, i32** %pNum_codes.addr, align 8
  %7 = load i32, i32* %max_code_size.addr, align 4
  %idxprom2 = sext i32 %7 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %6, i64 %idxprom2
  %8 = load i32, i32* %arrayidx3, align 4
  %add4 = add nsw i32 %8, %5
  store i32 %add4, i32* %arrayidx3, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %max_code_size.addr, align 4
  store i32 %10, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc11, %for.end
  %11 = load i32, i32* %i, align 4
  %cmp6 = icmp sgt i32 %11, 0
  br i1 %cmp6, label %for.body7, label %for.end12

for.body7:                                        ; preds = %for.cond5
  %12 = load i32*, i32** %pNum_codes.addr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %13 to i64
  %arrayidx9 = getelementptr inbounds i32, i32* %12, i64 %idxprom8
  %14 = load i32, i32* %arrayidx9, align 4
  %15 = load i32, i32* %max_code_size.addr, align 4
  %16 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %15, %16
  %shl = shl i32 %14, %sub
  %17 = load i32, i32* %total, align 4
  %add10 = add i32 %17, %shl
  store i32 %add10, i32* %total, align 4
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %18 = load i32, i32* %i, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond5

for.end12:                                        ; preds = %for.cond5
  br label %while.cond

while.cond:                                       ; preds = %for.end37, %for.end12
  %19 = load i32, i32* %total, align 4
  %conv = zext i32 %19 to i64
  %20 = load i32, i32* %max_code_size.addr, align 4
  %sh_prom = zext i32 %20 to i64
  %shl13 = shl i64 1, %sh_prom
  %cmp14 = icmp ne i64 %conv, %shl13
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %21 = load i32*, i32** %pNum_codes.addr, align 8
  %22 = load i32, i32* %max_code_size.addr, align 4
  %idxprom16 = sext i32 %22 to i64
  %arrayidx17 = getelementptr inbounds i32, i32* %21, i64 %idxprom16
  %23 = load i32, i32* %arrayidx17, align 4
  %dec18 = add nsw i32 %23, -1
  store i32 %dec18, i32* %arrayidx17, align 4
  %24 = load i32, i32* %max_code_size.addr, align 4
  %sub19 = sub nsw i32 %24, 1
  store i32 %sub19, i32* %i, align 4
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc35, %while.body
  %25 = load i32, i32* %i, align 4
  %cmp21 = icmp sgt i32 %25, 0
  br i1 %cmp21, label %for.body23, label %for.end37

for.body23:                                       ; preds = %for.cond20
  %26 = load i32*, i32** %pNum_codes.addr, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom24 = sext i32 %27 to i64
  %arrayidx25 = getelementptr inbounds i32, i32* %26, i64 %idxprom24
  %28 = load i32, i32* %arrayidx25, align 4
  %tobool = icmp ne i32 %28, 0
  br i1 %tobool, label %if.then26, label %if.end34

if.then26:                                        ; preds = %for.body23
  %29 = load i32*, i32** %pNum_codes.addr, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %30 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %29, i64 %idxprom27
  %31 = load i32, i32* %arrayidx28, align 4
  %dec29 = add nsw i32 %31, -1
  store i32 %dec29, i32* %arrayidx28, align 4
  %32 = load i32*, i32** %pNum_codes.addr, align 8
  %33 = load i32, i32* %i, align 4
  %add30 = add nsw i32 %33, 1
  %idxprom31 = sext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds i32, i32* %32, i64 %idxprom31
  %34 = load i32, i32* %arrayidx32, align 4
  %add33 = add nsw i32 %34, 2
  store i32 %add33, i32* %arrayidx32, align 4
  br label %for.end37

if.end34:                                         ; preds = %for.body23
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %35 = load i32, i32* %i, align 4
  %dec36 = add nsw i32 %35, -1
  store i32 %dec36, i32* %i, align 4
  br label %for.cond20

for.end37:                                        ; preds = %if.then26, %for.cond20
  %36 = load i32, i32* %total, align 4
  %dec38 = add i32 %36, -1
  store i32 %dec38, i32* %total, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_reader_locate_header_sig(%struct.mz_zip_archive* %pZip, i32 %record_sig, i32 %record_size, i64* %pOfs) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %record_sig.addr = alloca i32, align 4
  %record_size.addr = alloca i32, align 4
  %pOfs.addr = alloca i64*, align 8
  %cur_file_ofs = alloca i64, align 8
  %buf_u32 = alloca [1024 x i32], align 16
  %pBuf = alloca i8*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %s = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i32 %record_sig, i32* %record_sig.addr, align 4
  store i32 %record_size, i32* %record_size.addr, align 4
  store i64* %pOfs, i64** %pOfs.addr, align 8
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %buf_u32, i32 0, i32 0
  %0 = bitcast i32* %arraydecay to i8*
  store i8* %0, i8** %pBuf, align 8
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 0
  %2 = load i64, i64* %m_archive_size, align 8
  %3 = load i32, i32* %record_size.addr, align 4
  %conv = zext i32 %3 to i64
  %cmp = icmp ult i64 %2, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 0
  %5 = load i64, i64* %m_archive_size2, align 8
  %sub = sub nsw i64 %5, 4096
  %cmp3 = icmp sgt i64 %sub, 0
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 0
  %7 = load i64, i64* %m_archive_size5, align 8
  %sub6 = sub nsw i64 %7, 4096
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub6, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %cur_file_ofs, align 8
  br label %for.cond

for.cond:                                         ; preds = %cond.end60, %cond.end
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 0
  %9 = load i64, i64* %m_archive_size7, align 8
  %10 = load i64, i64* %cur_file_ofs, align 8
  %sub8 = sub i64 %9, %10
  %cmp9 = icmp ult i64 4096, %sub8
  br i1 %cmp9, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %for.cond
  br label %cond.end15

cond.false12:                                     ; preds = %for.cond
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 0
  %12 = load i64, i64* %m_archive_size13, align 8
  %13 = load i64, i64* %cur_file_ofs, align 8
  %sub14 = sub i64 %12, %13
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false12, %cond.true11
  %cond16 = phi i64 [ 4096, %cond.true11 ], [ %sub14, %cond.false12 ]
  %conv17 = trunc i64 %cond16 to i32
  store i32 %conv17, i32* %n, align 4
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 11
  %15 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 14
  %17 = load i8*, i8** %m_pIO_opaque, align 8
  %18 = load i64, i64* %cur_file_ofs, align 8
  %19 = load i8*, i8** %pBuf, align 8
  %20 = load i32, i32* %n, align 4
  %conv18 = sext i32 %20 to i64
  %call = call i64 %15(i8* %17, i64 %18, i8* %19, i64 %conv18)
  %21 = load i32, i32* %n, align 4
  %conv19 = zext i32 %21 to i64
  %cmp20 = icmp ne i64 %call, %conv19
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %cond.end15
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %cond.end15
  %22 = load i32, i32* %n, align 4
  %sub24 = sub nsw i32 %22, 4
  store i32 %sub24, i32* %i, align 4
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %if.end23
  %23 = load i32, i32* %i, align 4
  %cmp26 = icmp sge i32 %23, 0
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond25
  %24 = load i8*, i8** %pBuf, align 8
  %25 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %25 to i64
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %idx.ext
  %26 = bitcast i8* %add.ptr to i32*
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %s, align 4
  %28 = load i32, i32* %s, align 4
  %29 = load i32, i32* %record_sig.addr, align 4
  %cmp28 = icmp eq i32 %28, %29
  br i1 %cmp28, label %if.then30, label %if.end39

if.then30:                                        ; preds = %for.body
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 0
  %31 = load i64, i64* %m_archive_size31, align 8
  %32 = load i64, i64* %cur_file_ofs, align 8
  %33 = load i32, i32* %i, align 4
  %conv32 = sext i32 %33 to i64
  %add = add nsw i64 %32, %conv32
  %sub33 = sub i64 %31, %add
  %34 = load i32, i32* %record_size.addr, align 4
  %conv34 = zext i32 %34 to i64
  %cmp35 = icmp uge i64 %sub33, %conv34
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.then30
  br label %for.end

if.end38:                                         ; preds = %if.then30
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end39
  %35 = load i32, i32* %i, align 4
  %dec = add nsw i32 %35, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond25

for.end:                                          ; preds = %if.then37, %for.cond25
  %36 = load i32, i32* %i, align 4
  %cmp40 = icmp sge i32 %36, 0
  br i1 %cmp40, label %if.then42, label %if.end45

if.then42:                                        ; preds = %for.end
  %37 = load i32, i32* %i, align 4
  %conv43 = sext i32 %37 to i64
  %38 = load i64, i64* %cur_file_ofs, align 8
  %add44 = add nsw i64 %38, %conv43
  store i64 %add44, i64* %cur_file_ofs, align 8
  br label %for.end62

if.end45:                                         ; preds = %for.end
  %39 = load i64, i64* %cur_file_ofs, align 8
  %tobool = icmp ne i64 %39, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then52

lor.lhs.false:                                    ; preds = %if.end45
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_archive_size46 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 0
  %41 = load i64, i64* %m_archive_size46, align 8
  %42 = load i64, i64* %cur_file_ofs, align 8
  %sub47 = sub i64 %41, %42
  %43 = load i32, i32* %record_size.addr, align 4
  %add48 = add i32 65535, %43
  %conv49 = zext i32 %add48 to i64
  %cmp50 = icmp uge i64 %sub47, %conv49
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %lor.lhs.false, %if.end45
  store i32 0, i32* %retval, align 4
  br label %return

if.end53:                                         ; preds = %lor.lhs.false
  %44 = load i64, i64* %cur_file_ofs, align 8
  %sub54 = sub i64 %44, 4093
  %cmp55 = icmp ugt i64 %sub54, 0
  br i1 %cmp55, label %cond.true57, label %cond.false59

cond.true57:                                      ; preds = %if.end53
  %45 = load i64, i64* %cur_file_ofs, align 8
  %sub58 = sub i64 %45, 4093
  br label %cond.end60

cond.false59:                                     ; preds = %if.end53
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi i64 [ %sub58, %cond.true57 ], [ 0, %cond.false59 ]
  store i64 %cond61, i64* %cur_file_ofs, align 8
  br label %for.cond

for.end62:                                        ; preds = %if.then42
  %46 = load i64, i64* %cur_file_ofs, align 8
  %47 = load i64*, i64** %pOfs.addr, align 8
  store i64 %46, i64* %47, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end62, %if.then52, %if.then22, %if.then
  %48 = load i32, i32* %retval, align 4
  ret i32 %48
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mz_zip_reader_sort_central_dir_offsets_by_filename(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pCentral_dir_array.addr.i252 = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i253 = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i254 = alloca i32, align 4
  %r_index.addr.i255 = alloca i32, align 4
  %pL.i256 = alloca i8*, align 8
  %pE.i257 = alloca i8*, align 8
  %pR.i258 = alloca i8*, align 8
  %l_len.i259 = alloca i32, align 4
  %r_len.i260 = alloca i32, align 4
  %l.i261 = alloca i8, align 1
  %r.i262 = alloca i8, align 1
  %pCentral_dir_array.addr.i166 = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i167 = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i168 = alloca i32, align 4
  %r_index.addr.i169 = alloca i32, align 4
  %pL.i170 = alloca i8*, align 8
  %pE.i171 = alloca i8*, align 8
  %pR.i172 = alloca i8*, align 8
  %l_len.i173 = alloca i32, align 4
  %r_len.i174 = alloca i32, align 4
  %l.i175 = alloca i8, align 1
  %r.i176 = alloca i8, align 1
  %pCentral_dir_array.addr.i80 = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i81 = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i82 = alloca i32, align 4
  %r_index.addr.i83 = alloca i32, align 4
  %pL.i84 = alloca i8*, align 8
  %pE.i85 = alloca i8*, align 8
  %pR.i86 = alloca i8*, align 8
  %l_len.i87 = alloca i32, align 4
  %r_len.i88 = alloca i32, align 4
  %l.i89 = alloca i8, align 1
  %r.i90 = alloca i8, align 1
  %pCentral_dir_array.addr.i = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr.i = alloca %struct.mz_zip_array*, align 8
  %l_index.addr.i = alloca i32, align 4
  %r_index.addr.i = alloca i32, align 4
  %pL.i = alloca i8*, align 8
  %pE.i = alloca i8*, align 8
  %pR.i = alloca i8*, align 8
  %l_len.i = alloca i32, align 4
  %r_len.i = alloca i32, align 4
  %l.i = alloca i8, align 1
  %r.i = alloca i8, align 1
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pCentral_dir_offsets = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir = alloca %struct.mz_zip_array*, align 8
  %pIndices = alloca i32*, align 8
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %size = alloca i32, align 4
  %child = alloca i64, align 8
  %root = alloca i64, align 8
  %t = alloca i32, align 4
  %child33 = alloca i64, align 8
  %root34 = alloca i64, align 8
  %t36 = alloca i32, align 4
  %t72 = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 15
  %1 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8
  store %struct.mz_zip_internal_state_tag* %1, %struct.mz_zip_internal_state_tag** %pState, align 8
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %2, i32 0, i32 1
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %3, i32 0, i32 0
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pCentral_dir, align 8
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 2
  %5 = load i32, i32* %m_total_files, align 8
  store i32 %5, i32* %size, align 4
  %6 = load i32, i32* %size, align 4
  %cmp = icmp ule i32 %6, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %while.end

if.end:                                           ; preds = %entry
  %7 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %7, i32 0, i32 2
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 0
  %8 = load i8*, i8** %m_p, align 8
  %9 = bitcast i8* %8 to i32*
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 0
  store i32* %arrayidx, i32** %pIndices, align 8
  %10 = load i32, i32* %size, align 4
  %sub = sub i32 %10, 2
  %shr = lshr i32 %sub, 1
  store i32 %shr, i32* %start, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end28, %if.end
  %11 = load i32, i32* %start, align 4
  %conv = zext i32 %11 to i64
  store i64 %conv, i64* %root, align 8
  br label %for.cond1

for.cond1:                                        ; preds = %do.end, %for.cond
  %12 = load i64, i64* %root, align 8
  %shl = shl i64 %12, 1
  %add = add i64 %shl, 1
  store i64 %add, i64* %child, align 8
  %13 = load i32, i32* %size, align 4
  %conv2 = zext i32 %13 to i64
  %cmp3 = icmp uge i64 %add, %conv2
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.cond1
  br label %for.end

if.end6:                                          ; preds = %for.cond1
  %14 = load i64, i64* %child, align 8
  %add7 = add i64 %14, 1
  %15 = load i32, i32* %size, align 4
  %conv8 = zext i32 %15 to i64
  %cmp9 = icmp ult i64 %add7, %conv8
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end6
  %16 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8
  %17 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %18 = load i32*, i32** %pIndices, align 8
  %19 = load i64, i64* %child, align 8
  %arrayidx11 = getelementptr inbounds i32, i32* %18, i64 %19
  %20 = load i32, i32* %arrayidx11, align 4
  %21 = load i32*, i32** %pIndices, align 8
  %22 = load i64, i64* %child, align 8
  %add12 = add i64 %22, 1
  %arrayidx13 = getelementptr inbounds i32, i32* %21, i64 %add12
  %23 = load i32, i32* %arrayidx13, align 4
  store %struct.mz_zip_array* %16, %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  store %struct.mz_zip_array* %17, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  store i32 %20, i32* %l_index.addr.i, align 4
  store i32 %23, i32* %r_index.addr.i, align 4
  %24 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  %m_p.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %24, i32 0, i32 0
  %25 = load i8*, i8** %m_p.i, align 8
  %26 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  %m_p1.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %26, i32 0, i32 0
  %27 = load i8*, i8** %m_p1.i, align 8
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %l_index.addr.i, align 4
  %idxprom.i = zext i32 %29 to i64
  %arrayidx.i = getelementptr inbounds i32, i32* %28, i64 %idxprom.i
  %30 = load i32, i32* %arrayidx.i, align 4
  %idxprom2.i = zext i32 %30 to i64
  %arrayidx3.i = getelementptr inbounds i8, i8* %25, i64 %idxprom2.i
  store i8* %arrayidx3.i, i8** %pL.i, align 8
  %31 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i, align 8
  %m_p4.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %31, i32 0, i32 0
  %32 = load i8*, i8** %m_p4.i, align 8
  %33 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i, align 8
  %m_p5.i = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %33, i32 0, i32 0
  %34 = load i8*, i8** %m_p5.i, align 8
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %r_index.addr.i, align 4
  %idxprom6.i = zext i32 %36 to i64
  %arrayidx7.i = getelementptr inbounds i32, i32* %35, i64 %idxprom6.i
  %37 = load i32, i32* %arrayidx7.i, align 4
  %idxprom8.i = zext i32 %37 to i64
  %arrayidx9.i = getelementptr inbounds i8, i8* %32, i64 %idxprom8.i
  store i8* %arrayidx9.i, i8** %pR.i, align 8
  %38 = load i8*, i8** %pL.i, align 8
  %add.ptr.i = getelementptr inbounds i8, i8* %38, i64 28
  %39 = bitcast i8* %add.ptr.i to i16*
  %40 = load i16, i16* %39, align 2
  %conv.i = zext i16 %40 to i32
  store i32 %conv.i, i32* %l_len.i, align 4
  %41 = load i8*, i8** %pR.i, align 8
  %add.ptr10.i = getelementptr inbounds i8, i8* %41, i64 28
  %42 = bitcast i8* %add.ptr10.i to i16*
  %43 = load i16, i16* %42, align 2
  %conv11.i = zext i16 %43 to i32
  store i32 %conv11.i, i32* %r_len.i, align 4
  store i8 0, i8* %l.i, align 1
  store i8 0, i8* %r.i, align 1
  %44 = load i8*, i8** %pL.i, align 8
  %add.ptr12.i = getelementptr inbounds i8, i8* %44, i64 46
  store i8* %add.ptr12.i, i8** %pL.i, align 8
  %45 = load i8*, i8** %pR.i, align 8
  %add.ptr13.i = getelementptr inbounds i8, i8* %45, i64 46
  store i8* %add.ptr13.i, i8** %pR.i, align 8
  %46 = load i8*, i8** %pL.i, align 8
  %47 = load i32, i32* %l_len.i, align 4
  %48 = load i32, i32* %r_len.i, align 4
  %cmp.i = icmp ult i32 %47, %48
  br i1 %cmp.i, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %land.rhs
  %49 = load i32, i32* %l_len.i, align 4
  br label %cond.end.i

cond.false.i:                                     ; preds = %land.rhs
  %50 = load i32, i32* %r_len.i, align 4
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %49, %cond.true.i ], [ %50, %cond.false.i ]
  %idx.ext.i = zext i32 %cond.i to i64
  %add.ptr15.i = getelementptr inbounds i8, i8* %46, i64 %idx.ext.i
  store i8* %add.ptr15.i, i8** %pE.i, align 8
  br label %while.cond.i

while.cond.i:                                     ; preds = %if.end.i, %cond.end.i
  %51 = load i8*, i8** %pL.i, align 8
  %52 = load i8*, i8** %pE.i, align 8
  %cmp16.i = icmp ult i8* %51, %52
  br i1 %cmp16.i, label %while.body.i, label %while.end.i

while.body.i:                                     ; preds = %while.cond.i
  %53 = load i8*, i8** %pL.i, align 8
  %54 = load i8, i8* %53, align 1
  %conv18.i = zext i8 %54 to i32
  %cmp19.i = icmp sge i32 %conv18.i, 65
  br i1 %cmp19.i, label %land.lhs.true.i, label %cond.false26.i

land.lhs.true.i:                                  ; preds = %while.body.i
  %55 = load i8*, i8** %pL.i, align 8
  %56 = load i8, i8* %55, align 1
  %conv21.i = zext i8 %56 to i32
  %cmp22.i = icmp sle i32 %conv21.i, 90
  br i1 %cmp22.i, label %cond.true24.i, label %cond.false26.i

cond.true24.i:                                    ; preds = %land.lhs.true.i
  %57 = load i8*, i8** %pL.i, align 8
  %58 = load i8, i8* %57, align 1
  %conv25.i = zext i8 %58 to i32
  %sub.i = sub nsw i32 %conv25.i, 65
  %add.i = add nsw i32 %sub.i, 97
  br label %cond.end28.i

cond.false26.i:                                   ; preds = %land.lhs.true.i, %while.body.i
  %59 = load i8*, i8** %pL.i, align 8
  %60 = load i8, i8* %59, align 1
  %conv27.i = zext i8 %60 to i32
  br label %cond.end28.i

cond.end28.i:                                     ; preds = %cond.false26.i, %cond.true24.i
  %cond29.i = phi i32 [ %add.i, %cond.true24.i ], [ %conv27.i, %cond.false26.i ]
  %conv30.i = trunc i32 %cond29.i to i8
  store i8 %conv30.i, i8* %l.i, align 1
  %conv31.i = zext i8 %conv30.i to i32
  %61 = load i8*, i8** %pR.i, align 8
  %62 = load i8, i8* %61, align 1
  %conv32.i = zext i8 %62 to i32
  %cmp33.i = icmp sge i32 %conv32.i, 65
  br i1 %cmp33.i, label %land.lhs.true35.i, label %cond.false43.i

land.lhs.true35.i:                                ; preds = %cond.end28.i
  %63 = load i8*, i8** %pR.i, align 8
  %64 = load i8, i8* %63, align 1
  %conv36.i = zext i8 %64 to i32
  %cmp37.i = icmp sle i32 %conv36.i, 90
  br i1 %cmp37.i, label %cond.true39.i, label %cond.false43.i

cond.true39.i:                                    ; preds = %land.lhs.true35.i
  %65 = load i8*, i8** %pR.i, align 8
  %66 = load i8, i8* %65, align 1
  %conv40.i = zext i8 %66 to i32
  %sub41.i = sub nsw i32 %conv40.i, 65
  %add42.i = add nsw i32 %sub41.i, 97
  br label %cond.end45.i

cond.false43.i:                                   ; preds = %land.lhs.true35.i, %cond.end28.i
  %67 = load i8*, i8** %pR.i, align 8
  %68 = load i8, i8* %67, align 1
  %conv44.i = zext i8 %68 to i32
  br label %cond.end45.i

cond.end45.i:                                     ; preds = %cond.false43.i, %cond.true39.i
  %cond46.i = phi i32 [ %add42.i, %cond.true39.i ], [ %conv44.i, %cond.false43.i ]
  %conv47.i = trunc i32 %cond46.i to i8
  store i8 %conv47.i, i8* %r.i, align 1
  %conv48.i = zext i8 %conv47.i to i32
  %cmp49.i = icmp ne i32 %conv31.i, %conv48.i
  br i1 %cmp49.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %cond.end45.i
  br label %while.end.i

if.end.i:                                         ; preds = %cond.end45.i
  %69 = load i8*, i8** %pL.i, align 8
  %incdec.ptr.i = getelementptr inbounds i8, i8* %69, i32 1
  store i8* %incdec.ptr.i, i8** %pL.i, align 8
  %70 = load i8*, i8** %pR.i, align 8
  %incdec.ptr51.i = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr51.i, i8** %pR.i, align 8
  br label %while.cond.i

while.end.i:                                      ; preds = %if.then.i, %while.cond.i
  %71 = load i8*, i8** %pL.i, align 8
  %72 = load i8*, i8** %pE.i, align 8
  %cmp52.i = icmp eq i8* %71, %72
  br i1 %cmp52.i, label %cond.true54.i, label %cond.false57.i

cond.true54.i:                                    ; preds = %while.end.i
  %73 = load i32, i32* %l_len.i, align 4
  %74 = load i32, i32* %r_len.i, align 4
  %cmp55.i = icmp ult i32 %73, %74
  %conv56.i = zext i1 %cmp55.i to i32
  br label %mz_zip_reader_filename_less.exit

cond.false57.i:                                   ; preds = %while.end.i
  %75 = load i8, i8* %l.i, align 1
  %conv58.i = zext i8 %75 to i32
  %76 = load i8, i8* %r.i, align 1
  %conv59.i = zext i8 %76 to i32
  %cmp60.i = icmp slt i32 %conv58.i, %conv59.i
  %conv61.i = zext i1 %cmp60.i to i32
  br label %mz_zip_reader_filename_less.exit

mz_zip_reader_filename_less.exit:                 ; preds = %cond.true54.i, %cond.false57.i
  %cond63.i = phi i32 [ %conv56.i, %cond.true54.i ], [ %conv61.i, %cond.false57.i ]
  %tobool = icmp ne i32 %cond63.i, 0
  br label %land.end

land.end:                                         ; preds = %mz_zip_reader_filename_less.exit, %if.end6
  %77 = phi i1 [ false, %if.end6 ], [ %tobool, %mz_zip_reader_filename_less.exit ]
  %land.ext = zext i1 %77 to i32
  %conv14 = sext i32 %land.ext to i64
  %78 = load i64, i64* %child, align 8
  %add15 = add i64 %78, %conv14
  store i64 %add15, i64* %child, align 8
  %79 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8
  %80 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %81 = load i32*, i32** %pIndices, align 8
  %82 = load i64, i64* %root, align 8
  %arrayidx16 = getelementptr inbounds i32, i32* %81, i64 %82
  %83 = load i32, i32* %arrayidx16, align 4
  %84 = load i32*, i32** %pIndices, align 8
  %85 = load i64, i64* %child, align 8
  %arrayidx17 = getelementptr inbounds i32, i32* %84, i64 %85
  %86 = load i32, i32* %arrayidx17, align 4
  store %struct.mz_zip_array* %79, %struct.mz_zip_array** %pCentral_dir_array.addr.i252, align 8
  store %struct.mz_zip_array* %80, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i253, align 8
  store i32 %83, i32* %l_index.addr.i254, align 4
  store i32 %86, i32* %r_index.addr.i255, align 4
  %87 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i252, align 8
  %m_p.i263 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %87, i32 0, i32 0
  %88 = load i8*, i8** %m_p.i263, align 8
  %89 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i253, align 8
  %m_p1.i264 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %89, i32 0, i32 0
  %90 = load i8*, i8** %m_p1.i264, align 8
  %91 = bitcast i8* %90 to i32*
  %92 = load i32, i32* %l_index.addr.i254, align 4
  %idxprom.i265 = zext i32 %92 to i64
  %arrayidx.i266 = getelementptr inbounds i32, i32* %91, i64 %idxprom.i265
  %93 = load i32, i32* %arrayidx.i266, align 4
  %idxprom2.i267 = zext i32 %93 to i64
  %arrayidx3.i268 = getelementptr inbounds i8, i8* %88, i64 %idxprom2.i267
  store i8* %arrayidx3.i268, i8** %pL.i256, align 8
  %94 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i252, align 8
  %m_p4.i269 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %94, i32 0, i32 0
  %95 = load i8*, i8** %m_p4.i269, align 8
  %96 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i253, align 8
  %m_p5.i270 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %96, i32 0, i32 0
  %97 = load i8*, i8** %m_p5.i270, align 8
  %98 = bitcast i8* %97 to i32*
  %99 = load i32, i32* %r_index.addr.i255, align 4
  %idxprom6.i271 = zext i32 %99 to i64
  %arrayidx7.i272 = getelementptr inbounds i32, i32* %98, i64 %idxprom6.i271
  %100 = load i32, i32* %arrayidx7.i272, align 4
  %idxprom8.i273 = zext i32 %100 to i64
  %arrayidx9.i274 = getelementptr inbounds i8, i8* %95, i64 %idxprom8.i273
  store i8* %arrayidx9.i274, i8** %pR.i258, align 8
  %101 = load i8*, i8** %pL.i256, align 8
  %add.ptr.i275 = getelementptr inbounds i8, i8* %101, i64 28
  %102 = bitcast i8* %add.ptr.i275 to i16*
  %103 = load i16, i16* %102, align 2
  %conv.i276 = zext i16 %103 to i32
  store i32 %conv.i276, i32* %l_len.i259, align 4
  %104 = load i8*, i8** %pR.i258, align 8
  %add.ptr10.i277 = getelementptr inbounds i8, i8* %104, i64 28
  %105 = bitcast i8* %add.ptr10.i277 to i16*
  %106 = load i16, i16* %105, align 2
  %conv11.i278 = zext i16 %106 to i32
  store i32 %conv11.i278, i32* %r_len.i260, align 4
  store i8 0, i8* %l.i261, align 1
  store i8 0, i8* %r.i262, align 1
  %107 = load i8*, i8** %pL.i256, align 8
  %add.ptr12.i279 = getelementptr inbounds i8, i8* %107, i64 46
  store i8* %add.ptr12.i279, i8** %pL.i256, align 8
  %108 = load i8*, i8** %pR.i258, align 8
  %add.ptr13.i280 = getelementptr inbounds i8, i8* %108, i64 46
  store i8* %add.ptr13.i280, i8** %pR.i258, align 8
  %109 = load i8*, i8** %pL.i256, align 8
  %110 = load i32, i32* %l_len.i259, align 4
  %111 = load i32, i32* %r_len.i260, align 4
  %cmp.i281 = icmp ult i32 %110, %111
  br i1 %cmp.i281, label %cond.true.i282, label %cond.false.i283

cond.true.i282:                                   ; preds = %land.end
  %112 = load i32, i32* %l_len.i259, align 4
  br label %cond.end.i287

cond.false.i283:                                  ; preds = %land.end
  %113 = load i32, i32* %r_len.i260, align 4
  br label %cond.end.i287

cond.end.i287:                                    ; preds = %cond.false.i283, %cond.true.i282
  %cond.i284 = phi i32 [ %112, %cond.true.i282 ], [ %113, %cond.false.i283 ]
  %idx.ext.i285 = zext i32 %cond.i284 to i64
  %add.ptr15.i286 = getelementptr inbounds i8, i8* %109, i64 %idx.ext.i285
  store i8* %add.ptr15.i286, i8** %pE.i257, align 8
  br label %while.cond.i289

while.cond.i289:                                  ; preds = %if.end.i325, %cond.end.i287
  %114 = load i8*, i8** %pL.i256, align 8
  %115 = load i8*, i8** %pE.i257, align 8
  %cmp16.i288 = icmp ult i8* %114, %115
  br i1 %cmp16.i288, label %while.body.i292, label %while.end.i327

while.body.i292:                                  ; preds = %while.cond.i289
  %116 = load i8*, i8** %pL.i256, align 8
  %117 = load i8, i8* %116, align 1
  %conv18.i290 = zext i8 %117 to i32
  %cmp19.i291 = icmp sge i32 %conv18.i290, 65
  br i1 %cmp19.i291, label %land.lhs.true.i295, label %cond.false26.i301

land.lhs.true.i295:                               ; preds = %while.body.i292
  %118 = load i8*, i8** %pL.i256, align 8
  %119 = load i8, i8* %118, align 1
  %conv21.i293 = zext i8 %119 to i32
  %cmp22.i294 = icmp sle i32 %conv21.i293, 90
  br i1 %cmp22.i294, label %cond.true24.i299, label %cond.false26.i301

cond.true24.i299:                                 ; preds = %land.lhs.true.i295
  %120 = load i8*, i8** %pL.i256, align 8
  %121 = load i8, i8* %120, align 1
  %conv25.i296 = zext i8 %121 to i32
  %sub.i297 = sub nsw i32 %conv25.i296, 65
  %add.i298 = add nsw i32 %sub.i297, 97
  br label %cond.end28.i307

cond.false26.i301:                                ; preds = %land.lhs.true.i295, %while.body.i292
  %122 = load i8*, i8** %pL.i256, align 8
  %123 = load i8, i8* %122, align 1
  %conv27.i300 = zext i8 %123 to i32
  br label %cond.end28.i307

cond.end28.i307:                                  ; preds = %cond.false26.i301, %cond.true24.i299
  %cond29.i302 = phi i32 [ %add.i298, %cond.true24.i299 ], [ %conv27.i300, %cond.false26.i301 ]
  %conv30.i303 = trunc i32 %cond29.i302 to i8
  store i8 %conv30.i303, i8* %l.i261, align 1
  %conv31.i304 = zext i8 %conv30.i303 to i32
  %124 = load i8*, i8** %pR.i258, align 8
  %125 = load i8, i8* %124, align 1
  %conv32.i305 = zext i8 %125 to i32
  %cmp33.i306 = icmp sge i32 %conv32.i305, 65
  br i1 %cmp33.i306, label %land.lhs.true35.i310, label %cond.false43.i316

land.lhs.true35.i310:                             ; preds = %cond.end28.i307
  %126 = load i8*, i8** %pR.i258, align 8
  %127 = load i8, i8* %126, align 1
  %conv36.i308 = zext i8 %127 to i32
  %cmp37.i309 = icmp sle i32 %conv36.i308, 90
  br i1 %cmp37.i309, label %cond.true39.i314, label %cond.false43.i316

cond.true39.i314:                                 ; preds = %land.lhs.true35.i310
  %128 = load i8*, i8** %pR.i258, align 8
  %129 = load i8, i8* %128, align 1
  %conv40.i311 = zext i8 %129 to i32
  %sub41.i312 = sub nsw i32 %conv40.i311, 65
  %add42.i313 = add nsw i32 %sub41.i312, 97
  br label %cond.end45.i321

cond.false43.i316:                                ; preds = %land.lhs.true35.i310, %cond.end28.i307
  %130 = load i8*, i8** %pR.i258, align 8
  %131 = load i8, i8* %130, align 1
  %conv44.i315 = zext i8 %131 to i32
  br label %cond.end45.i321

cond.end45.i321:                                  ; preds = %cond.false43.i316, %cond.true39.i314
  %cond46.i317 = phi i32 [ %add42.i313, %cond.true39.i314 ], [ %conv44.i315, %cond.false43.i316 ]
  %conv47.i318 = trunc i32 %cond46.i317 to i8
  store i8 %conv47.i318, i8* %r.i262, align 1
  %conv48.i319 = zext i8 %conv47.i318 to i32
  %cmp49.i320 = icmp ne i32 %conv31.i304, %conv48.i319
  br i1 %cmp49.i320, label %if.then.i322, label %if.end.i325

if.then.i322:                                     ; preds = %cond.end45.i321
  br label %while.end.i327

if.end.i325:                                      ; preds = %cond.end45.i321
  %132 = load i8*, i8** %pL.i256, align 8
  %incdec.ptr.i323 = getelementptr inbounds i8, i8* %132, i32 1
  store i8* %incdec.ptr.i323, i8** %pL.i256, align 8
  %133 = load i8*, i8** %pR.i258, align 8
  %incdec.ptr51.i324 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %incdec.ptr51.i324, i8** %pR.i258, align 8
  br label %while.cond.i289

while.end.i327:                                   ; preds = %if.then.i322, %while.cond.i289
  %134 = load i8*, i8** %pL.i256, align 8
  %135 = load i8*, i8** %pE.i257, align 8
  %cmp52.i326 = icmp eq i8* %134, %135
  br i1 %cmp52.i326, label %cond.true54.i330, label %cond.false57.i335

cond.true54.i330:                                 ; preds = %while.end.i327
  %136 = load i32, i32* %l_len.i259, align 4
  %137 = load i32, i32* %r_len.i260, align 4
  %cmp55.i328 = icmp ult i32 %136, %137
  %conv56.i329 = zext i1 %cmp55.i328 to i32
  br label %mz_zip_reader_filename_less.exit337

cond.false57.i335:                                ; preds = %while.end.i327
  %138 = load i8, i8* %l.i261, align 1
  %conv58.i331 = zext i8 %138 to i32
  %139 = load i8, i8* %r.i262, align 1
  %conv59.i332 = zext i8 %139 to i32
  %cmp60.i333 = icmp slt i32 %conv58.i331, %conv59.i332
  %conv61.i334 = zext i1 %cmp60.i333 to i32
  br label %mz_zip_reader_filename_less.exit337

mz_zip_reader_filename_less.exit337:              ; preds = %cond.true54.i330, %cond.false57.i335
  %cond63.i336 = phi i32 [ %conv56.i329, %cond.true54.i330 ], [ %conv61.i334, %cond.false57.i335 ]
  %tobool19 = icmp ne i32 %cond63.i336, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %mz_zip_reader_filename_less.exit337
  br label %for.end

if.end21:                                         ; preds = %mz_zip_reader_filename_less.exit337
  br label %do.body

do.body:                                          ; preds = %if.end21
  %140 = load i32*, i32** %pIndices, align 8
  %141 = load i64, i64* %root, align 8
  %arrayidx22 = getelementptr inbounds i32, i32* %140, i64 %141
  %142 = load i32, i32* %arrayidx22, align 4
  store i32 %142, i32* %t, align 4
  %143 = load i32*, i32** %pIndices, align 8
  %144 = load i64, i64* %child, align 8
  %arrayidx23 = getelementptr inbounds i32, i32* %143, i64 %144
  %145 = load i32, i32* %arrayidx23, align 4
  %146 = load i32*, i32** %pIndices, align 8
  %147 = load i64, i64* %root, align 8
  %arrayidx24 = getelementptr inbounds i32, i32* %146, i64 %147
  store i32 %145, i32* %arrayidx24, align 4
  %148 = load i32, i32* %t, align 4
  %149 = load i32*, i32** %pIndices, align 8
  %150 = load i64, i64* %child, align 8
  %arrayidx25 = getelementptr inbounds i32, i32* %149, i64 %150
  store i32 %148, i32* %arrayidx25, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %151 = load i64, i64* %child, align 8
  store i64 %151, i64* %root, align 8
  br label %for.cond1

for.end:                                          ; preds = %if.then20, %if.then5
  %152 = load i32, i32* %start, align 4
  %tobool26 = icmp ne i32 %152, 0
  br i1 %tobool26, label %if.end28, label %if.then27

if.then27:                                        ; preds = %for.end
  br label %for.end29

if.end28:                                         ; preds = %for.end
  %153 = load i32, i32* %start, align 4
  %dec = add i32 %153, -1
  store i32 %dec, i32* %start, align 4
  br label %for.cond

for.end29:                                        ; preds = %if.then27
  %154 = load i32, i32* %size, align 4
  %sub30 = sub i32 %154, 1
  store i32 %sub30, i32* %end, align 4
  br label %while.cond

while.cond:                                       ; preds = %for.end78, %for.end29
  %155 = load i32, i32* %end, align 4
  %cmp31 = icmp ugt i32 %155, 0
  br i1 %cmp31, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i64 0, i64* %root34, align 8
  br label %do.body35

do.body35:                                        ; preds = %while.body
  %156 = load i32*, i32** %pIndices, align 8
  %157 = load i32, i32* %end, align 4
  %idxprom = zext i32 %157 to i64
  %arrayidx37 = getelementptr inbounds i32, i32* %156, i64 %idxprom
  %158 = load i32, i32* %arrayidx37, align 4
  store i32 %158, i32* %t36, align 4
  %159 = load i32*, i32** %pIndices, align 8
  %arrayidx38 = getelementptr inbounds i32, i32* %159, i64 0
  %160 = load i32, i32* %arrayidx38, align 4
  %161 = load i32*, i32** %pIndices, align 8
  %162 = load i32, i32* %end, align 4
  %idxprom39 = zext i32 %162 to i64
  %arrayidx40 = getelementptr inbounds i32, i32* %161, i64 %idxprom39
  store i32 %160, i32* %arrayidx40, align 4
  %163 = load i32, i32* %t36, align 4
  %164 = load i32*, i32** %pIndices, align 8
  %arrayidx41 = getelementptr inbounds i32, i32* %164, i64 0
  store i32 %163, i32* %arrayidx41, align 4
  br label %do.end42

do.end42:                                         ; preds = %do.body35
  br label %for.cond43

for.cond43:                                       ; preds = %do.end77, %do.end42
  %165 = load i64, i64* %root34, align 8
  %shl44 = shl i64 %165, 1
  %add45 = add i64 %shl44, 1
  store i64 %add45, i64* %child33, align 8
  %166 = load i32, i32* %end, align 4
  %conv46 = zext i32 %166 to i64
  %cmp47 = icmp uge i64 %add45, %conv46
  br i1 %cmp47, label %if.then49, label %if.end50

if.then49:                                        ; preds = %for.cond43
  br label %for.end78

if.end50:                                         ; preds = %for.cond43
  %167 = load i64, i64* %child33, align 8
  %add51 = add i64 %167, 1
  %168 = load i32, i32* %end, align 4
  %conv52 = zext i32 %168 to i64
  %cmp53 = icmp ult i64 %add51, %conv52
  br i1 %cmp53, label %land.rhs55, label %land.end61

land.rhs55:                                       ; preds = %if.end50
  %169 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8
  %170 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %171 = load i32*, i32** %pIndices, align 8
  %172 = load i64, i64* %child33, align 8
  %arrayidx56 = getelementptr inbounds i32, i32* %171, i64 %172
  %173 = load i32, i32* %arrayidx56, align 4
  %174 = load i32*, i32** %pIndices, align 8
  %175 = load i64, i64* %child33, align 8
  %add57 = add i64 %175, 1
  %arrayidx58 = getelementptr inbounds i32, i32* %174, i64 %add57
  %176 = load i32, i32* %arrayidx58, align 4
  store %struct.mz_zip_array* %169, %struct.mz_zip_array** %pCentral_dir_array.addr.i166, align 8
  store %struct.mz_zip_array* %170, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i167, align 8
  store i32 %173, i32* %l_index.addr.i168, align 4
  store i32 %176, i32* %r_index.addr.i169, align 4
  %177 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i166, align 8
  %m_p.i177 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %177, i32 0, i32 0
  %178 = load i8*, i8** %m_p.i177, align 8
  %179 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i167, align 8
  %m_p1.i178 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %179, i32 0, i32 0
  %180 = load i8*, i8** %m_p1.i178, align 8
  %181 = bitcast i8* %180 to i32*
  %182 = load i32, i32* %l_index.addr.i168, align 4
  %idxprom.i179 = zext i32 %182 to i64
  %arrayidx.i180 = getelementptr inbounds i32, i32* %181, i64 %idxprom.i179
  %183 = load i32, i32* %arrayidx.i180, align 4
  %idxprom2.i181 = zext i32 %183 to i64
  %arrayidx3.i182 = getelementptr inbounds i8, i8* %178, i64 %idxprom2.i181
  store i8* %arrayidx3.i182, i8** %pL.i170, align 8
  %184 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i166, align 8
  %m_p4.i183 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %184, i32 0, i32 0
  %185 = load i8*, i8** %m_p4.i183, align 8
  %186 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i167, align 8
  %m_p5.i184 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %186, i32 0, i32 0
  %187 = load i8*, i8** %m_p5.i184, align 8
  %188 = bitcast i8* %187 to i32*
  %189 = load i32, i32* %r_index.addr.i169, align 4
  %idxprom6.i185 = zext i32 %189 to i64
  %arrayidx7.i186 = getelementptr inbounds i32, i32* %188, i64 %idxprom6.i185
  %190 = load i32, i32* %arrayidx7.i186, align 4
  %idxprom8.i187 = zext i32 %190 to i64
  %arrayidx9.i188 = getelementptr inbounds i8, i8* %185, i64 %idxprom8.i187
  store i8* %arrayidx9.i188, i8** %pR.i172, align 8
  %191 = load i8*, i8** %pL.i170, align 8
  %add.ptr.i189 = getelementptr inbounds i8, i8* %191, i64 28
  %192 = bitcast i8* %add.ptr.i189 to i16*
  %193 = load i16, i16* %192, align 2
  %conv.i190 = zext i16 %193 to i32
  store i32 %conv.i190, i32* %l_len.i173, align 4
  %194 = load i8*, i8** %pR.i172, align 8
  %add.ptr10.i191 = getelementptr inbounds i8, i8* %194, i64 28
  %195 = bitcast i8* %add.ptr10.i191 to i16*
  %196 = load i16, i16* %195, align 2
  %conv11.i192 = zext i16 %196 to i32
  store i32 %conv11.i192, i32* %r_len.i174, align 4
  store i8 0, i8* %l.i175, align 1
  store i8 0, i8* %r.i176, align 1
  %197 = load i8*, i8** %pL.i170, align 8
  %add.ptr12.i193 = getelementptr inbounds i8, i8* %197, i64 46
  store i8* %add.ptr12.i193, i8** %pL.i170, align 8
  %198 = load i8*, i8** %pR.i172, align 8
  %add.ptr13.i194 = getelementptr inbounds i8, i8* %198, i64 46
  store i8* %add.ptr13.i194, i8** %pR.i172, align 8
  %199 = load i8*, i8** %pL.i170, align 8
  %200 = load i32, i32* %l_len.i173, align 4
  %201 = load i32, i32* %r_len.i174, align 4
  %cmp.i195 = icmp ult i32 %200, %201
  br i1 %cmp.i195, label %cond.true.i196, label %cond.false.i197

cond.true.i196:                                   ; preds = %land.rhs55
  %202 = load i32, i32* %l_len.i173, align 4
  br label %cond.end.i201

cond.false.i197:                                  ; preds = %land.rhs55
  %203 = load i32, i32* %r_len.i174, align 4
  br label %cond.end.i201

cond.end.i201:                                    ; preds = %cond.false.i197, %cond.true.i196
  %cond.i198 = phi i32 [ %202, %cond.true.i196 ], [ %203, %cond.false.i197 ]
  %idx.ext.i199 = zext i32 %cond.i198 to i64
  %add.ptr15.i200 = getelementptr inbounds i8, i8* %199, i64 %idx.ext.i199
  store i8* %add.ptr15.i200, i8** %pE.i171, align 8
  br label %while.cond.i203

while.cond.i203:                                  ; preds = %if.end.i239, %cond.end.i201
  %204 = load i8*, i8** %pL.i170, align 8
  %205 = load i8*, i8** %pE.i171, align 8
  %cmp16.i202 = icmp ult i8* %204, %205
  br i1 %cmp16.i202, label %while.body.i206, label %while.end.i241

while.body.i206:                                  ; preds = %while.cond.i203
  %206 = load i8*, i8** %pL.i170, align 8
  %207 = load i8, i8* %206, align 1
  %conv18.i204 = zext i8 %207 to i32
  %cmp19.i205 = icmp sge i32 %conv18.i204, 65
  br i1 %cmp19.i205, label %land.lhs.true.i209, label %cond.false26.i215

land.lhs.true.i209:                               ; preds = %while.body.i206
  %208 = load i8*, i8** %pL.i170, align 8
  %209 = load i8, i8* %208, align 1
  %conv21.i207 = zext i8 %209 to i32
  %cmp22.i208 = icmp sle i32 %conv21.i207, 90
  br i1 %cmp22.i208, label %cond.true24.i213, label %cond.false26.i215

cond.true24.i213:                                 ; preds = %land.lhs.true.i209
  %210 = load i8*, i8** %pL.i170, align 8
  %211 = load i8, i8* %210, align 1
  %conv25.i210 = zext i8 %211 to i32
  %sub.i211 = sub nsw i32 %conv25.i210, 65
  %add.i212 = add nsw i32 %sub.i211, 97
  br label %cond.end28.i221

cond.false26.i215:                                ; preds = %land.lhs.true.i209, %while.body.i206
  %212 = load i8*, i8** %pL.i170, align 8
  %213 = load i8, i8* %212, align 1
  %conv27.i214 = zext i8 %213 to i32
  br label %cond.end28.i221

cond.end28.i221:                                  ; preds = %cond.false26.i215, %cond.true24.i213
  %cond29.i216 = phi i32 [ %add.i212, %cond.true24.i213 ], [ %conv27.i214, %cond.false26.i215 ]
  %conv30.i217 = trunc i32 %cond29.i216 to i8
  store i8 %conv30.i217, i8* %l.i175, align 1
  %conv31.i218 = zext i8 %conv30.i217 to i32
  %214 = load i8*, i8** %pR.i172, align 8
  %215 = load i8, i8* %214, align 1
  %conv32.i219 = zext i8 %215 to i32
  %cmp33.i220 = icmp sge i32 %conv32.i219, 65
  br i1 %cmp33.i220, label %land.lhs.true35.i224, label %cond.false43.i230

land.lhs.true35.i224:                             ; preds = %cond.end28.i221
  %216 = load i8*, i8** %pR.i172, align 8
  %217 = load i8, i8* %216, align 1
  %conv36.i222 = zext i8 %217 to i32
  %cmp37.i223 = icmp sle i32 %conv36.i222, 90
  br i1 %cmp37.i223, label %cond.true39.i228, label %cond.false43.i230

cond.true39.i228:                                 ; preds = %land.lhs.true35.i224
  %218 = load i8*, i8** %pR.i172, align 8
  %219 = load i8, i8* %218, align 1
  %conv40.i225 = zext i8 %219 to i32
  %sub41.i226 = sub nsw i32 %conv40.i225, 65
  %add42.i227 = add nsw i32 %sub41.i226, 97
  br label %cond.end45.i235

cond.false43.i230:                                ; preds = %land.lhs.true35.i224, %cond.end28.i221
  %220 = load i8*, i8** %pR.i172, align 8
  %221 = load i8, i8* %220, align 1
  %conv44.i229 = zext i8 %221 to i32
  br label %cond.end45.i235

cond.end45.i235:                                  ; preds = %cond.false43.i230, %cond.true39.i228
  %cond46.i231 = phi i32 [ %add42.i227, %cond.true39.i228 ], [ %conv44.i229, %cond.false43.i230 ]
  %conv47.i232 = trunc i32 %cond46.i231 to i8
  store i8 %conv47.i232, i8* %r.i176, align 1
  %conv48.i233 = zext i8 %conv47.i232 to i32
  %cmp49.i234 = icmp ne i32 %conv31.i218, %conv48.i233
  br i1 %cmp49.i234, label %if.then.i236, label %if.end.i239

if.then.i236:                                     ; preds = %cond.end45.i235
  br label %while.end.i241

if.end.i239:                                      ; preds = %cond.end45.i235
  %222 = load i8*, i8** %pL.i170, align 8
  %incdec.ptr.i237 = getelementptr inbounds i8, i8* %222, i32 1
  store i8* %incdec.ptr.i237, i8** %pL.i170, align 8
  %223 = load i8*, i8** %pR.i172, align 8
  %incdec.ptr51.i238 = getelementptr inbounds i8, i8* %223, i32 1
  store i8* %incdec.ptr51.i238, i8** %pR.i172, align 8
  br label %while.cond.i203

while.end.i241:                                   ; preds = %if.then.i236, %while.cond.i203
  %224 = load i8*, i8** %pL.i170, align 8
  %225 = load i8*, i8** %pE.i171, align 8
  %cmp52.i240 = icmp eq i8* %224, %225
  br i1 %cmp52.i240, label %cond.true54.i244, label %cond.false57.i249

cond.true54.i244:                                 ; preds = %while.end.i241
  %226 = load i32, i32* %l_len.i173, align 4
  %227 = load i32, i32* %r_len.i174, align 4
  %cmp55.i242 = icmp ult i32 %226, %227
  %conv56.i243 = zext i1 %cmp55.i242 to i32
  br label %mz_zip_reader_filename_less.exit251

cond.false57.i249:                                ; preds = %while.end.i241
  %228 = load i8, i8* %l.i175, align 1
  %conv58.i245 = zext i8 %228 to i32
  %229 = load i8, i8* %r.i176, align 1
  %conv59.i246 = zext i8 %229 to i32
  %cmp60.i247 = icmp slt i32 %conv58.i245, %conv59.i246
  %conv61.i248 = zext i1 %cmp60.i247 to i32
  br label %mz_zip_reader_filename_less.exit251

mz_zip_reader_filename_less.exit251:              ; preds = %cond.true54.i244, %cond.false57.i249
  %cond63.i250 = phi i32 [ %conv56.i243, %cond.true54.i244 ], [ %conv61.i248, %cond.false57.i249 ]
  %tobool60 = icmp ne i32 %cond63.i250, 0
  br label %land.end61

land.end61:                                       ; preds = %mz_zip_reader_filename_less.exit251, %if.end50
  %230 = phi i1 [ false, %if.end50 ], [ %tobool60, %mz_zip_reader_filename_less.exit251 ]
  %land.ext62 = zext i1 %230 to i32
  %conv63 = sext i32 %land.ext62 to i64
  %231 = load i64, i64* %child33, align 8
  %add64 = add i64 %231, %conv63
  store i64 %add64, i64* %child33, align 8
  %232 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8
  %233 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8
  %234 = load i32*, i32** %pIndices, align 8
  %235 = load i64, i64* %root34, align 8
  %arrayidx65 = getelementptr inbounds i32, i32* %234, i64 %235
  %236 = load i32, i32* %arrayidx65, align 4
  %237 = load i32*, i32** %pIndices, align 8
  %238 = load i64, i64* %child33, align 8
  %arrayidx66 = getelementptr inbounds i32, i32* %237, i64 %238
  %239 = load i32, i32* %arrayidx66, align 4
  store %struct.mz_zip_array* %232, %struct.mz_zip_array** %pCentral_dir_array.addr.i80, align 8
  store %struct.mz_zip_array* %233, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i81, align 8
  store i32 %236, i32* %l_index.addr.i82, align 4
  store i32 %239, i32* %r_index.addr.i83, align 4
  %240 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i80, align 8
  %m_p.i91 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %240, i32 0, i32 0
  %241 = load i8*, i8** %m_p.i91, align 8
  %242 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i81, align 8
  %m_p1.i92 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %242, i32 0, i32 0
  %243 = load i8*, i8** %m_p1.i92, align 8
  %244 = bitcast i8* %243 to i32*
  %245 = load i32, i32* %l_index.addr.i82, align 4
  %idxprom.i93 = zext i32 %245 to i64
  %arrayidx.i94 = getelementptr inbounds i32, i32* %244, i64 %idxprom.i93
  %246 = load i32, i32* %arrayidx.i94, align 4
  %idxprom2.i95 = zext i32 %246 to i64
  %arrayidx3.i96 = getelementptr inbounds i8, i8* %241, i64 %idxprom2.i95
  store i8* %arrayidx3.i96, i8** %pL.i84, align 8
  %247 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr.i80, align 8
  %m_p4.i97 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %247, i32 0, i32 0
  %248 = load i8*, i8** %m_p4.i97, align 8
  %249 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr.i81, align 8
  %m_p5.i98 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %249, i32 0, i32 0
  %250 = load i8*, i8** %m_p5.i98, align 8
  %251 = bitcast i8* %250 to i32*
  %252 = load i32, i32* %r_index.addr.i83, align 4
  %idxprom6.i99 = zext i32 %252 to i64
  %arrayidx7.i100 = getelementptr inbounds i32, i32* %251, i64 %idxprom6.i99
  %253 = load i32, i32* %arrayidx7.i100, align 4
  %idxprom8.i101 = zext i32 %253 to i64
  %arrayidx9.i102 = getelementptr inbounds i8, i8* %248, i64 %idxprom8.i101
  store i8* %arrayidx9.i102, i8** %pR.i86, align 8
  %254 = load i8*, i8** %pL.i84, align 8
  %add.ptr.i103 = getelementptr inbounds i8, i8* %254, i64 28
  %255 = bitcast i8* %add.ptr.i103 to i16*
  %256 = load i16, i16* %255, align 2
  %conv.i104 = zext i16 %256 to i32
  store i32 %conv.i104, i32* %l_len.i87, align 4
  %257 = load i8*, i8** %pR.i86, align 8
  %add.ptr10.i105 = getelementptr inbounds i8, i8* %257, i64 28
  %258 = bitcast i8* %add.ptr10.i105 to i16*
  %259 = load i16, i16* %258, align 2
  %conv11.i106 = zext i16 %259 to i32
  store i32 %conv11.i106, i32* %r_len.i88, align 4
  store i8 0, i8* %l.i89, align 1
  store i8 0, i8* %r.i90, align 1
  %260 = load i8*, i8** %pL.i84, align 8
  %add.ptr12.i107 = getelementptr inbounds i8, i8* %260, i64 46
  store i8* %add.ptr12.i107, i8** %pL.i84, align 8
  %261 = load i8*, i8** %pR.i86, align 8
  %add.ptr13.i108 = getelementptr inbounds i8, i8* %261, i64 46
  store i8* %add.ptr13.i108, i8** %pR.i86, align 8
  %262 = load i8*, i8** %pL.i84, align 8
  %263 = load i32, i32* %l_len.i87, align 4
  %264 = load i32, i32* %r_len.i88, align 4
  %cmp.i109 = icmp ult i32 %263, %264
  br i1 %cmp.i109, label %cond.true.i110, label %cond.false.i111

cond.true.i110:                                   ; preds = %land.end61
  %265 = load i32, i32* %l_len.i87, align 4
  br label %cond.end.i115

cond.false.i111:                                  ; preds = %land.end61
  %266 = load i32, i32* %r_len.i88, align 4
  br label %cond.end.i115

cond.end.i115:                                    ; preds = %cond.false.i111, %cond.true.i110
  %cond.i112 = phi i32 [ %265, %cond.true.i110 ], [ %266, %cond.false.i111 ]
  %idx.ext.i113 = zext i32 %cond.i112 to i64
  %add.ptr15.i114 = getelementptr inbounds i8, i8* %262, i64 %idx.ext.i113
  store i8* %add.ptr15.i114, i8** %pE.i85, align 8
  br label %while.cond.i117

while.cond.i117:                                  ; preds = %if.end.i153, %cond.end.i115
  %267 = load i8*, i8** %pL.i84, align 8
  %268 = load i8*, i8** %pE.i85, align 8
  %cmp16.i116 = icmp ult i8* %267, %268
  br i1 %cmp16.i116, label %while.body.i120, label %while.end.i155

while.body.i120:                                  ; preds = %while.cond.i117
  %269 = load i8*, i8** %pL.i84, align 8
  %270 = load i8, i8* %269, align 1
  %conv18.i118 = zext i8 %270 to i32
  %cmp19.i119 = icmp sge i32 %conv18.i118, 65
  br i1 %cmp19.i119, label %land.lhs.true.i123, label %cond.false26.i129

land.lhs.true.i123:                               ; preds = %while.body.i120
  %271 = load i8*, i8** %pL.i84, align 8
  %272 = load i8, i8* %271, align 1
  %conv21.i121 = zext i8 %272 to i32
  %cmp22.i122 = icmp sle i32 %conv21.i121, 90
  br i1 %cmp22.i122, label %cond.true24.i127, label %cond.false26.i129

cond.true24.i127:                                 ; preds = %land.lhs.true.i123
  %273 = load i8*, i8** %pL.i84, align 8
  %274 = load i8, i8* %273, align 1
  %conv25.i124 = zext i8 %274 to i32
  %sub.i125 = sub nsw i32 %conv25.i124, 65
  %add.i126 = add nsw i32 %sub.i125, 97
  br label %cond.end28.i135

cond.false26.i129:                                ; preds = %land.lhs.true.i123, %while.body.i120
  %275 = load i8*, i8** %pL.i84, align 8
  %276 = load i8, i8* %275, align 1
  %conv27.i128 = zext i8 %276 to i32
  br label %cond.end28.i135

cond.end28.i135:                                  ; preds = %cond.false26.i129, %cond.true24.i127
  %cond29.i130 = phi i32 [ %add.i126, %cond.true24.i127 ], [ %conv27.i128, %cond.false26.i129 ]
  %conv30.i131 = trunc i32 %cond29.i130 to i8
  store i8 %conv30.i131, i8* %l.i89, align 1
  %conv31.i132 = zext i8 %conv30.i131 to i32
  %277 = load i8*, i8** %pR.i86, align 8
  %278 = load i8, i8* %277, align 1
  %conv32.i133 = zext i8 %278 to i32
  %cmp33.i134 = icmp sge i32 %conv32.i133, 65
  br i1 %cmp33.i134, label %land.lhs.true35.i138, label %cond.false43.i144

land.lhs.true35.i138:                             ; preds = %cond.end28.i135
  %279 = load i8*, i8** %pR.i86, align 8
  %280 = load i8, i8* %279, align 1
  %conv36.i136 = zext i8 %280 to i32
  %cmp37.i137 = icmp sle i32 %conv36.i136, 90
  br i1 %cmp37.i137, label %cond.true39.i142, label %cond.false43.i144

cond.true39.i142:                                 ; preds = %land.lhs.true35.i138
  %281 = load i8*, i8** %pR.i86, align 8
  %282 = load i8, i8* %281, align 1
  %conv40.i139 = zext i8 %282 to i32
  %sub41.i140 = sub nsw i32 %conv40.i139, 65
  %add42.i141 = add nsw i32 %sub41.i140, 97
  br label %cond.end45.i149

cond.false43.i144:                                ; preds = %land.lhs.true35.i138, %cond.end28.i135
  %283 = load i8*, i8** %pR.i86, align 8
  %284 = load i8, i8* %283, align 1
  %conv44.i143 = zext i8 %284 to i32
  br label %cond.end45.i149

cond.end45.i149:                                  ; preds = %cond.false43.i144, %cond.true39.i142
  %cond46.i145 = phi i32 [ %add42.i141, %cond.true39.i142 ], [ %conv44.i143, %cond.false43.i144 ]
  %conv47.i146 = trunc i32 %cond46.i145 to i8
  store i8 %conv47.i146, i8* %r.i90, align 1
  %conv48.i147 = zext i8 %conv47.i146 to i32
  %cmp49.i148 = icmp ne i32 %conv31.i132, %conv48.i147
  br i1 %cmp49.i148, label %if.then.i150, label %if.end.i153

if.then.i150:                                     ; preds = %cond.end45.i149
  br label %while.end.i155

if.end.i153:                                      ; preds = %cond.end45.i149
  %285 = load i8*, i8** %pL.i84, align 8
  %incdec.ptr.i151 = getelementptr inbounds i8, i8* %285, i32 1
  store i8* %incdec.ptr.i151, i8** %pL.i84, align 8
  %286 = load i8*, i8** %pR.i86, align 8
  %incdec.ptr51.i152 = getelementptr inbounds i8, i8* %286, i32 1
  store i8* %incdec.ptr51.i152, i8** %pR.i86, align 8
  br label %while.cond.i117

while.end.i155:                                   ; preds = %if.then.i150, %while.cond.i117
  %287 = load i8*, i8** %pL.i84, align 8
  %288 = load i8*, i8** %pE.i85, align 8
  %cmp52.i154 = icmp eq i8* %287, %288
  br i1 %cmp52.i154, label %cond.true54.i158, label %cond.false57.i163

cond.true54.i158:                                 ; preds = %while.end.i155
  %289 = load i32, i32* %l_len.i87, align 4
  %290 = load i32, i32* %r_len.i88, align 4
  %cmp55.i156 = icmp ult i32 %289, %290
  %conv56.i157 = zext i1 %cmp55.i156 to i32
  br label %mz_zip_reader_filename_less.exit165

cond.false57.i163:                                ; preds = %while.end.i155
  %291 = load i8, i8* %l.i89, align 1
  %conv58.i159 = zext i8 %291 to i32
  %292 = load i8, i8* %r.i90, align 1
  %conv59.i160 = zext i8 %292 to i32
  %cmp60.i161 = icmp slt i32 %conv58.i159, %conv59.i160
  %conv61.i162 = zext i1 %cmp60.i161 to i32
  br label %mz_zip_reader_filename_less.exit165

mz_zip_reader_filename_less.exit165:              ; preds = %cond.true54.i158, %cond.false57.i163
  %cond63.i164 = phi i32 [ %conv56.i157, %cond.true54.i158 ], [ %conv61.i162, %cond.false57.i163 ]
  %tobool68 = icmp ne i32 %cond63.i164, 0
  br i1 %tobool68, label %if.end70, label %if.then69

if.then69:                                        ; preds = %mz_zip_reader_filename_less.exit165
  br label %for.end78

if.end70:                                         ; preds = %mz_zip_reader_filename_less.exit165
  br label %do.body71

do.body71:                                        ; preds = %if.end70
  %293 = load i32*, i32** %pIndices, align 8
  %294 = load i64, i64* %root34, align 8
  %arrayidx73 = getelementptr inbounds i32, i32* %293, i64 %294
  %295 = load i32, i32* %arrayidx73, align 4
  store i32 %295, i32* %t72, align 4
  %296 = load i32*, i32** %pIndices, align 8
  %297 = load i64, i64* %child33, align 8
  %arrayidx74 = getelementptr inbounds i32, i32* %296, i64 %297
  %298 = load i32, i32* %arrayidx74, align 4
  %299 = load i32*, i32** %pIndices, align 8
  %300 = load i64, i64* %root34, align 8
  %arrayidx75 = getelementptr inbounds i32, i32* %299, i64 %300
  store i32 %298, i32* %arrayidx75, align 4
  %301 = load i32, i32* %t72, align 4
  %302 = load i32*, i32** %pIndices, align 8
  %303 = load i64, i64* %child33, align 8
  %arrayidx76 = getelementptr inbounds i32, i32* %302, i64 %303
  store i32 %301, i32* %arrayidx76, align 4
  br label %do.end77

do.end77:                                         ; preds = %do.body71
  %304 = load i64, i64* %child33, align 8
  store i64 %304, i64* %root34, align 8
  br label %for.cond43

for.end78:                                        ; preds = %if.then69, %if.then49
  %305 = load i32, i32* %end, align 4
  %dec79 = add i32 %305, -1
  store i32 %dec79, i32* %end, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  ret void
}

declare i64 @fread(i8*, i64, i64, %struct.__sFILE*) #1

declare i64 @"\01_fwrite"(i8*, i64, i64, %struct.__sFILE*) #1

declare i32 @utime(i8*, %struct.utimbuf*) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mz_zip_dos_to_time_t(i32 %dos_time, i32 %dos_date) #0 {
entry:
  %dos_time.addr = alloca i32, align 4
  %dos_date.addr = alloca i32, align 4
  %tm = alloca %struct.tm, align 8
  store i32 %dos_time, i32* %dos_time.addr, align 4
  store i32 %dos_date, i32* %dos_date.addr, align 4
  %0 = bitcast %struct.tm* %tm to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 56, i32 8, i1 false)
  %tm_isdst = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 8
  store i32 -1, i32* %tm_isdst, align 8
  %1 = load i32, i32* %dos_date.addr, align 4
  %shr = ashr i32 %1, 9
  %and = and i32 %shr, 127
  %add = add nsw i32 %and, 1980
  %sub = sub nsw i32 %add, 1900
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 5
  store i32 %sub, i32* %tm_year, align 4
  %2 = load i32, i32* %dos_date.addr, align 4
  %shr1 = ashr i32 %2, 5
  %and2 = and i32 %shr1, 15
  %sub3 = sub nsw i32 %and2, 1
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 4
  store i32 %sub3, i32* %tm_mon, align 8
  %3 = load i32, i32* %dos_date.addr, align 4
  %and4 = and i32 %3, 31
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 3
  store i32 %and4, i32* %tm_mday, align 4
  %4 = load i32, i32* %dos_time.addr, align 4
  %shr5 = ashr i32 %4, 11
  %and6 = and i32 %shr5, 31
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 2
  store i32 %and6, i32* %tm_hour, align 8
  %5 = load i32, i32* %dos_time.addr, align 4
  %shr7 = ashr i32 %5, 5
  %and8 = and i32 %shr7, 63
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 1
  store i32 %and8, i32* %tm_min, align 4
  %6 = load i32, i32* %dos_time.addr, align 4
  %shl = shl i32 %6, 1
  %and9 = and i32 %shl, 62
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 0
  store i32 %and9, i32* %tm_sec, align 8
  %call = call i64 @"\01_mktime"(%struct.tm* %tm)
  ret i64 %call
}

declare i64 @"\01_mktime"(%struct.tm*) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %pZip, %struct.mz_zip_array* %pArray, i64 %min_new_capacity, i32 %growing) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  %min_new_capacity.addr = alloca i64, align 8
  %growing.addr = alloca i32, align 4
  %pNew_p = alloca i8*, align 8
  %new_capacity = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8
  store i64 %min_new_capacity, i64* %min_new_capacity.addr, align 8
  store i32 %growing, i32* %growing.addr, align 4
  %0 = load i64, i64* %min_new_capacity.addr, align 8
  store i64 %0, i64* %new_capacity, align 8
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8
  %m_element_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %1, i32 0, i32 3
  %2 = load i32, i32* %m_element_size, align 8
  %tobool = icmp ne i32 %2, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool1 = icmp ne i64 %conv, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.mz_zip_array_ensure_capacity, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i32 3254, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.70, i32 0, i32 0)) #11
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %3
  %4 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8
  %m_capacity = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %4, i32 0, i32 2
  %5 = load i64, i64* %m_capacity, align 8
  %6 = load i64, i64* %min_new_capacity.addr, align 8
  %cmp = icmp uge i64 %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end
  %7 = load i32, i32* %growing.addr, align 4
  %tobool3 = icmp ne i32 %7, 0
  br i1 %tobool3, label %if.then4, label %if.end14

if.then4:                                         ; preds = %if.end
  %8 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8
  %m_capacity5 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %8, i32 0, i32 2
  %9 = load i64, i64* %m_capacity5, align 8
  %cmp6 = icmp ugt i64 1, %9
  br i1 %cmp6, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %if.then4
  br label %cond.end11

cond.false9:                                      ; preds = %if.then4
  %10 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8
  %m_capacity10 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %10, i32 0, i32 2
  %11 = load i64, i64* %m_capacity10, align 8
  br label %cond.end11

cond.end11:                                       ; preds = %cond.false9, %cond.true8
  %cond = phi i64 [ 1, %cond.true8 ], [ %11, %cond.false9 ]
  store i64 %cond, i64* %new_capacity, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end11
  %12 = load i64, i64* %new_capacity, align 8
  %13 = load i64, i64* %min_new_capacity.addr, align 8
  %cmp12 = icmp ult i64 %12, %13
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i64, i64* %new_capacity, align 8
  %mul = mul i64 %14, 2
  store i64 %mul, i64* %new_capacity, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end14

if.end14:                                         ; preds = %while.end, %if.end
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 9
  %16 = load i8* (i8*, i8*, i64, i64)*, i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 10
  %18 = load i8*, i8** %m_pAlloc_opaque, align 8
  %19 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %19, i32 0, i32 0
  %20 = load i8*, i8** %m_p, align 8
  %21 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8
  %m_element_size15 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %21, i32 0, i32 3
  %22 = load i32, i32* %m_element_size15, align 8
  %conv16 = zext i32 %22 to i64
  %23 = load i64, i64* %new_capacity, align 8
  %call = call i8* %16(i8* %18, i8* %20, i64 %conv16, i64 %23)
  store i8* %call, i8** %pNew_p, align 8
  %cmp17 = icmp eq i8* null, %call
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  br label %return

if.end20:                                         ; preds = %if.end14
  %24 = load i8*, i8** %pNew_p, align 8
  %25 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8
  %m_p21 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %25, i32 0, i32 0
  store i8* %24, i8** %m_p21, align 8
  %26 = load i64, i64* %new_capacity, align 8
  %27 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8
  %m_capacity22 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %27, i32 0, i32 2
  store i64 %26, i64* %m_capacity22, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end20, %if.then19, %if.then
  %28 = load i32, i32* %retval, align 4
  ret i32 %28
}

declare %struct.tm* @localtime(i64*) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mz_zip_writer_create_central_dir_header(%struct.mz_zip_archive* %pZip, i8* %pDst, i16 zeroext %filename_size, i16 zeroext %extra_size, i16 zeroext %comment_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date, i64 %local_header_ofs, i32 %ext_attributes) #0 {
entry:
  %p.addr.i139 = alloca i8*, align 8
  %v.addr.i140 = alloca i16, align 2
  %p.addr.i132 = alloca i8*, align 8
  %v.addr.i133 = alloca i16, align 2
  %p.addr.i125 = alloca i8*, align 8
  %v.addr.i126 = alloca i16, align 2
  %p.addr.i118 = alloca i8*, align 8
  %v.addr.i119 = alloca i16, align 2
  %p.addr.i111 = alloca i8*, align 8
  %v.addr.i112 = alloca i16, align 2
  %p.addr.i99 = alloca i8*, align 8
  %v.addr.i100 = alloca i32, align 4
  %p.addr.i87 = alloca i8*, align 8
  %v.addr.i88 = alloca i32, align 4
  %p.addr.i75 = alloca i8*, align 8
  %v.addr.i76 = alloca i32, align 4
  %p.addr.i68 = alloca i8*, align 8
  %v.addr.i69 = alloca i16, align 2
  %p.addr.i61 = alloca i8*, align 8
  %v.addr.i62 = alloca i16, align 2
  %p.addr.i56 = alloca i8*, align 8
  %v.addr.i57 = alloca i16, align 2
  %p.addr.i44 = alloca i8*, align 8
  %v.addr.i45 = alloca i32, align 4
  %p.addr.i32 = alloca i8*, align 8
  %v.addr.i33 = alloca i32, align 4
  %p.addr.i = alloca i8*, align 8
  %v.addr.i = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pDst.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %extra_size.addr = alloca i16, align 2
  %comment_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  %local_header_ofs.addr = alloca i64, align 8
  %ext_attributes.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8
  store i8* %pDst, i8** %pDst.addr, align 8
  store i16 %filename_size, i16* %filename_size.addr, align 2
  store i16 %extra_size, i16* %extra_size.addr, align 2
  store i16 %comment_size, i16* %comment_size.addr, align 2
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8
  store i64 %comp_size, i64* %comp_size.addr, align 8
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4
  store i16 %method, i16* %method.addr, align 2
  store i16 %bit_flags, i16* %bit_flags.addr, align 2
  store i16 %dos_time, i16* %dos_time.addr, align 2
  store i16 %dos_date, i16* %dos_date.addr, align 2
  store i64 %local_header_ofs, i64* %local_header_ofs.addr, align 8
  store i32 %ext_attributes, i32* %ext_attributes.addr, align 4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8
  %1 = load i8*, i8** %pDst.addr, align 8
  %2 = load i8*, i8** %pDst.addr, align 8
  %3 = call i64 @llvm.objectsize.i64.p0i8(i8* %2, i1 false)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 46, i64 %3) #10
  %4 = load i8*, i8** %pDst.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 0
  store i8* %add.ptr, i8** %p.addr.i, align 8
  store i32 33639248, i32* %v.addr.i, align 4
  %5 = load i32, i32* %v.addr.i, align 4
  %conv.i = trunc i32 %5 to i8
  %6 = load i8*, i8** %p.addr.i, align 8
  store i8 %conv.i, i8* %6, align 1
  %7 = load i32, i32* %v.addr.i, align 4
  %shr.i = lshr i32 %7, 8
  %conv1.i = trunc i32 %shr.i to i8
  %8 = load i8*, i8** %p.addr.i, align 8
  %arrayidx2.i = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %conv1.i, i8* %arrayidx2.i, align 1
  %9 = load i32, i32* %v.addr.i, align 4
  %shr3.i = lshr i32 %9, 16
  %conv4.i = trunc i32 %shr3.i to i8
  %10 = load i8*, i8** %p.addr.i, align 8
  %arrayidx5.i = getelementptr inbounds i8, i8* %10, i64 2
  store i8 %conv4.i, i8* %arrayidx5.i, align 1
  %11 = load i32, i32* %v.addr.i, align 4
  %shr6.i = lshr i32 %11, 24
  %conv7.i = trunc i32 %shr6.i to i8
  %12 = load i8*, i8** %p.addr.i, align 8
  %arrayidx8.i = getelementptr inbounds i8, i8* %12, i64 3
  store i8 %conv7.i, i8* %arrayidx8.i, align 1
  %13 = load i8*, i8** %pDst.addr, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %13, i64 6
  %14 = load i16, i16* %method.addr, align 2
  %conv = zext i16 %14 to i32
  %tobool = icmp ne i32 %conv, 0
  %cond = select i1 %tobool, i32 20, i32 0
  %conv2 = trunc i32 %cond to i16
  store i8* %add.ptr1, i8** %p.addr.i139, align 8
  store i16 %conv2, i16* %v.addr.i140, align 2
  %15 = load i16, i16* %v.addr.i140, align 2
  %conv.i141 = trunc i16 %15 to i8
  %16 = load i8*, i8** %p.addr.i139, align 8
  store i8 %conv.i141, i8* %16, align 1
  %17 = load i16, i16* %v.addr.i140, align 2
  %conv1.i142 = zext i16 %17 to i32
  %shr.i143 = ashr i32 %conv1.i142, 8
  %conv2.i144 = trunc i32 %shr.i143 to i8
  %18 = load i8*, i8** %p.addr.i139, align 8
  %arrayidx3.i145 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %conv2.i144, i8* %arrayidx3.i145, align 1
  %19 = load i8*, i8** %pDst.addr, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %19, i64 8
  %20 = load i16, i16* %bit_flags.addr, align 2
  store i8* %add.ptr3, i8** %p.addr.i132, align 8
  store i16 %20, i16* %v.addr.i133, align 2
  %21 = load i16, i16* %v.addr.i133, align 2
  %conv.i134 = trunc i16 %21 to i8
  %22 = load i8*, i8** %p.addr.i132, align 8
  store i8 %conv.i134, i8* %22, align 1
  %23 = load i16, i16* %v.addr.i133, align 2
  %conv1.i135 = zext i16 %23 to i32
  %shr.i136 = ashr i32 %conv1.i135, 8
  %conv2.i137 = trunc i32 %shr.i136 to i8
  %24 = load i8*, i8** %p.addr.i132, align 8
  %arrayidx3.i138 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %conv2.i137, i8* %arrayidx3.i138, align 1
  %25 = load i8*, i8** %pDst.addr, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %25, i64 10
  %26 = load i16, i16* %method.addr, align 2
  store i8* %add.ptr4, i8** %p.addr.i125, align 8
  store i16 %26, i16* %v.addr.i126, align 2
  %27 = load i16, i16* %v.addr.i126, align 2
  %conv.i127 = trunc i16 %27 to i8
  %28 = load i8*, i8** %p.addr.i125, align 8
  store i8 %conv.i127, i8* %28, align 1
  %29 = load i16, i16* %v.addr.i126, align 2
  %conv1.i128 = zext i16 %29 to i32
  %shr.i129 = ashr i32 %conv1.i128, 8
  %conv2.i130 = trunc i32 %shr.i129 to i8
  %30 = load i8*, i8** %p.addr.i125, align 8
  %arrayidx3.i131 = getelementptr inbounds i8, i8* %30, i64 1
  store i8 %conv2.i130, i8* %arrayidx3.i131, align 1
  %31 = load i8*, i8** %pDst.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %31, i64 12
  %32 = load i16, i16* %dos_time.addr, align 2
  store i8* %add.ptr5, i8** %p.addr.i118, align 8
  store i16 %32, i16* %v.addr.i119, align 2
  %33 = load i16, i16* %v.addr.i119, align 2
  %conv.i120 = trunc i16 %33 to i8
  %34 = load i8*, i8** %p.addr.i118, align 8
  store i8 %conv.i120, i8* %34, align 1
  %35 = load i16, i16* %v.addr.i119, align 2
  %conv1.i121 = zext i16 %35 to i32
  %shr.i122 = ashr i32 %conv1.i121, 8
  %conv2.i123 = trunc i32 %shr.i122 to i8
  %36 = load i8*, i8** %p.addr.i118, align 8
  %arrayidx3.i124 = getelementptr inbounds i8, i8* %36, i64 1
  store i8 %conv2.i123, i8* %arrayidx3.i124, align 1
  %37 = load i8*, i8** %pDst.addr, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %37, i64 14
  %38 = load i16, i16* %dos_date.addr, align 2
  store i8* %add.ptr6, i8** %p.addr.i111, align 8
  store i16 %38, i16* %v.addr.i112, align 2
  %39 = load i16, i16* %v.addr.i112, align 2
  %conv.i113 = trunc i16 %39 to i8
  %40 = load i8*, i8** %p.addr.i111, align 8
  store i8 %conv.i113, i8* %40, align 1
  %41 = load i16, i16* %v.addr.i112, align 2
  %conv1.i114 = zext i16 %41 to i32
  %shr.i115 = ashr i32 %conv1.i114, 8
  %conv2.i116 = trunc i32 %shr.i115 to i8
  %42 = load i8*, i8** %p.addr.i111, align 8
  %arrayidx3.i117 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %conv2.i116, i8* %arrayidx3.i117, align 1
  %43 = load i8*, i8** %pDst.addr, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %43, i64 16
  %44 = load i32, i32* %uncomp_crc32.addr, align 4
  store i8* %add.ptr7, i8** %p.addr.i99, align 8
  store i32 %44, i32* %v.addr.i100, align 4
  %45 = load i32, i32* %v.addr.i100, align 4
  %conv.i101 = trunc i32 %45 to i8
  %46 = load i8*, i8** %p.addr.i99, align 8
  store i8 %conv.i101, i8* %46, align 1
  %47 = load i32, i32* %v.addr.i100, align 4
  %shr.i102 = lshr i32 %47, 8
  %conv1.i103 = trunc i32 %shr.i102 to i8
  %48 = load i8*, i8** %p.addr.i99, align 8
  %arrayidx2.i104 = getelementptr inbounds i8, i8* %48, i64 1
  store i8 %conv1.i103, i8* %arrayidx2.i104, align 1
  %49 = load i32, i32* %v.addr.i100, align 4
  %shr3.i105 = lshr i32 %49, 16
  %conv4.i106 = trunc i32 %shr3.i105 to i8
  %50 = load i8*, i8** %p.addr.i99, align 8
  %arrayidx5.i107 = getelementptr inbounds i8, i8* %50, i64 2
  store i8 %conv4.i106, i8* %arrayidx5.i107, align 1
  %51 = load i32, i32* %v.addr.i100, align 4
  %shr6.i108 = lshr i32 %51, 24
  %conv7.i109 = trunc i32 %shr6.i108 to i8
  %52 = load i8*, i8** %p.addr.i99, align 8
  %arrayidx8.i110 = getelementptr inbounds i8, i8* %52, i64 3
  store i8 %conv7.i109, i8* %arrayidx8.i110, align 1
  %53 = load i8*, i8** %pDst.addr, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %53, i64 20
  %54 = load i64, i64* %comp_size.addr, align 8
  %cmp = icmp ult i64 %54, 4294967295
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %55 = load i64, i64* %comp_size.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond10 = phi i64 [ %55, %cond.true ], [ 4294967295, %cond.false ]
  %conv11 = trunc i64 %cond10 to i32
  store i8* %add.ptr8, i8** %p.addr.i87, align 8
  store i32 %conv11, i32* %v.addr.i88, align 4
  %56 = load i32, i32* %v.addr.i88, align 4
  %conv.i89 = trunc i32 %56 to i8
  %57 = load i8*, i8** %p.addr.i87, align 8
  store i8 %conv.i89, i8* %57, align 1
  %58 = load i32, i32* %v.addr.i88, align 4
  %shr.i90 = lshr i32 %58, 8
  %conv1.i91 = trunc i32 %shr.i90 to i8
  %59 = load i8*, i8** %p.addr.i87, align 8
  %arrayidx2.i92 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %conv1.i91, i8* %arrayidx2.i92, align 1
  %60 = load i32, i32* %v.addr.i88, align 4
  %shr3.i93 = lshr i32 %60, 16
  %conv4.i94 = trunc i32 %shr3.i93 to i8
  %61 = load i8*, i8** %p.addr.i87, align 8
  %arrayidx5.i95 = getelementptr inbounds i8, i8* %61, i64 2
  store i8 %conv4.i94, i8* %arrayidx5.i95, align 1
  %62 = load i32, i32* %v.addr.i88, align 4
  %shr6.i96 = lshr i32 %62, 24
  %conv7.i97 = trunc i32 %shr6.i96 to i8
  %63 = load i8*, i8** %p.addr.i87, align 8
  %arrayidx8.i98 = getelementptr inbounds i8, i8* %63, i64 3
  store i8 %conv7.i97, i8* %arrayidx8.i98, align 1
  %64 = load i8*, i8** %pDst.addr, align 8
  %add.ptr12 = getelementptr inbounds i8, i8* %64, i64 24
  %65 = load i64, i64* %uncomp_size.addr, align 8
  %cmp13 = icmp ult i64 %65, 4294967295
  br i1 %cmp13, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %cond.end
  %66 = load i64, i64* %uncomp_size.addr, align 8
  br label %cond.end17

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i64 [ %66, %cond.true15 ], [ 4294967295, %cond.false16 ]
  %conv19 = trunc i64 %cond18 to i32
  store i8* %add.ptr12, i8** %p.addr.i75, align 8
  store i32 %conv19, i32* %v.addr.i76, align 4
  %67 = load i32, i32* %v.addr.i76, align 4
  %conv.i77 = trunc i32 %67 to i8
  %68 = load i8*, i8** %p.addr.i75, align 8
  store i8 %conv.i77, i8* %68, align 1
  %69 = load i32, i32* %v.addr.i76, align 4
  %shr.i78 = lshr i32 %69, 8
  %conv1.i79 = trunc i32 %shr.i78 to i8
  %70 = load i8*, i8** %p.addr.i75, align 8
  %arrayidx2.i80 = getelementptr inbounds i8, i8* %70, i64 1
  store i8 %conv1.i79, i8* %arrayidx2.i80, align 1
  %71 = load i32, i32* %v.addr.i76, align 4
  %shr3.i81 = lshr i32 %71, 16
  %conv4.i82 = trunc i32 %shr3.i81 to i8
  %72 = load i8*, i8** %p.addr.i75, align 8
  %arrayidx5.i83 = getelementptr inbounds i8, i8* %72, i64 2
  store i8 %conv4.i82, i8* %arrayidx5.i83, align 1
  %73 = load i32, i32* %v.addr.i76, align 4
  %shr6.i84 = lshr i32 %73, 24
  %conv7.i85 = trunc i32 %shr6.i84 to i8
  %74 = load i8*, i8** %p.addr.i75, align 8
  %arrayidx8.i86 = getelementptr inbounds i8, i8* %74, i64 3
  store i8 %conv7.i85, i8* %arrayidx8.i86, align 1
  %75 = load i8*, i8** %pDst.addr, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %75, i64 28
  %76 = load i16, i16* %filename_size.addr, align 2
  store i8* %add.ptr20, i8** %p.addr.i68, align 8
  store i16 %76, i16* %v.addr.i69, align 2
  %77 = load i16, i16* %v.addr.i69, align 2
  %conv.i70 = trunc i16 %77 to i8
  %78 = load i8*, i8** %p.addr.i68, align 8
  store i8 %conv.i70, i8* %78, align 1
  %79 = load i16, i16* %v.addr.i69, align 2
  %conv1.i71 = zext i16 %79 to i32
  %shr.i72 = ashr i32 %conv1.i71, 8
  %conv2.i73 = trunc i32 %shr.i72 to i8
  %80 = load i8*, i8** %p.addr.i68, align 8
  %arrayidx3.i74 = getelementptr inbounds i8, i8* %80, i64 1
  store i8 %conv2.i73, i8* %arrayidx3.i74, align 1
  %81 = load i8*, i8** %pDst.addr, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %81, i64 30
  %82 = load i16, i16* %extra_size.addr, align 2
  store i8* %add.ptr21, i8** %p.addr.i61, align 8
  store i16 %82, i16* %v.addr.i62, align 2
  %83 = load i16, i16* %v.addr.i62, align 2
  %conv.i63 = trunc i16 %83 to i8
  %84 = load i8*, i8** %p.addr.i61, align 8
  store i8 %conv.i63, i8* %84, align 1
  %85 = load i16, i16* %v.addr.i62, align 2
  %conv1.i64 = zext i16 %85 to i32
  %shr.i65 = ashr i32 %conv1.i64, 8
  %conv2.i66 = trunc i32 %shr.i65 to i8
  %86 = load i8*, i8** %p.addr.i61, align 8
  %arrayidx3.i67 = getelementptr inbounds i8, i8* %86, i64 1
  store i8 %conv2.i66, i8* %arrayidx3.i67, align 1
  %87 = load i8*, i8** %pDst.addr, align 8
  %add.ptr22 = getelementptr inbounds i8, i8* %87, i64 32
  %88 = load i16, i16* %comment_size.addr, align 2
  store i8* %add.ptr22, i8** %p.addr.i56, align 8
  store i16 %88, i16* %v.addr.i57, align 2
  %89 = load i16, i16* %v.addr.i57, align 2
  %conv.i58 = trunc i16 %89 to i8
  %90 = load i8*, i8** %p.addr.i56, align 8
  store i8 %conv.i58, i8* %90, align 1
  %91 = load i16, i16* %v.addr.i57, align 2
  %conv1.i59 = zext i16 %91 to i32
  %shr.i60 = ashr i32 %conv1.i59, 8
  %conv2.i = trunc i32 %shr.i60 to i8
  %92 = load i8*, i8** %p.addr.i56, align 8
  %arrayidx3.i = getelementptr inbounds i8, i8* %92, i64 1
  store i8 %conv2.i, i8* %arrayidx3.i, align 1
  %93 = load i8*, i8** %pDst.addr, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %93, i64 38
  %94 = load i32, i32* %ext_attributes.addr, align 4
  store i8* %add.ptr23, i8** %p.addr.i44, align 8
  store i32 %94, i32* %v.addr.i45, align 4
  %95 = load i32, i32* %v.addr.i45, align 4
  %conv.i46 = trunc i32 %95 to i8
  %96 = load i8*, i8** %p.addr.i44, align 8
  store i8 %conv.i46, i8* %96, align 1
  %97 = load i32, i32* %v.addr.i45, align 4
  %shr.i47 = lshr i32 %97, 8
  %conv1.i48 = trunc i32 %shr.i47 to i8
  %98 = load i8*, i8** %p.addr.i44, align 8
  %arrayidx2.i49 = getelementptr inbounds i8, i8* %98, i64 1
  store i8 %conv1.i48, i8* %arrayidx2.i49, align 1
  %99 = load i32, i32* %v.addr.i45, align 4
  %shr3.i50 = lshr i32 %99, 16
  %conv4.i51 = trunc i32 %shr3.i50 to i8
  %100 = load i8*, i8** %p.addr.i44, align 8
  %arrayidx5.i52 = getelementptr inbounds i8, i8* %100, i64 2
  store i8 %conv4.i51, i8* %arrayidx5.i52, align 1
  %101 = load i32, i32* %v.addr.i45, align 4
  %shr6.i53 = lshr i32 %101, 24
  %conv7.i54 = trunc i32 %shr6.i53 to i8
  %102 = load i8*, i8** %p.addr.i44, align 8
  %arrayidx8.i55 = getelementptr inbounds i8, i8* %102, i64 3
  store i8 %conv7.i54, i8* %arrayidx8.i55, align 1
  %103 = load i8*, i8** %pDst.addr, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %103, i64 42
  %104 = load i64, i64* %local_header_ofs.addr, align 8
  %cmp25 = icmp ult i64 %104, 4294967295
  br i1 %cmp25, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %cond.end17
  %105 = load i64, i64* %local_header_ofs.addr, align 8
  br label %cond.end29

cond.false28:                                     ; preds = %cond.end17
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i64 [ %105, %cond.true27 ], [ 4294967295, %cond.false28 ]
  %conv31 = trunc i64 %cond30 to i32
  store i8* %add.ptr24, i8** %p.addr.i32, align 8
  store i32 %conv31, i32* %v.addr.i33, align 4
  %106 = load i32, i32* %v.addr.i33, align 4
  %conv.i34 = trunc i32 %106 to i8
  %107 = load i8*, i8** %p.addr.i32, align 8
  store i8 %conv.i34, i8* %107, align 1
  %108 = load i32, i32* %v.addr.i33, align 4
  %shr.i35 = lshr i32 %108, 8
  %conv1.i36 = trunc i32 %shr.i35 to i8
  %109 = load i8*, i8** %p.addr.i32, align 8
  %arrayidx2.i37 = getelementptr inbounds i8, i8* %109, i64 1
  store i8 %conv1.i36, i8* %arrayidx2.i37, align 1
  %110 = load i32, i32* %v.addr.i33, align 4
  %shr3.i38 = lshr i32 %110, 16
  %conv4.i39 = trunc i32 %shr3.i38 to i8
  %111 = load i8*, i8** %p.addr.i32, align 8
  %arrayidx5.i40 = getelementptr inbounds i8, i8* %111, i64 2
  store i8 %conv4.i39, i8* %arrayidx5.i40, align 1
  %112 = load i32, i32* %v.addr.i33, align 4
  %shr6.i41 = lshr i32 %112, 24
  %conv7.i42 = trunc i32 %shr6.i41 to i8
  %113 = load i8*, i8** %p.addr.i32, align 8
  %arrayidx8.i43 = getelementptr inbounds i8, i8* %113, i64 3
  store i8 %conv7.i42, i8* %arrayidx8.i43, align 1
  ret i32 1
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { allocsize(0) }
attributes #9 = { allocsize(1) }
attributes #10 = { nounwind }
attributes #11 = { noreturn }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.1 (https://github.com/llvm-mirror/clang.git 3c8961bedc65c9a15cbe67a2ef385a0938f7cfef) (https://github.com/llvm-mirror/llvm.git c8fccc53ed66d505898f8850bcc690c977a7c9a7)"}
