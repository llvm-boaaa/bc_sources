; ModuleID = 'mongoose.c'
source_filename = "mongoose.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct.mg_iface_vtable = type { void (%struct.mg_iface*)*, void (%struct.mg_iface*)*, void (%struct.mg_connection*)*, void (%struct.mg_connection*)*, i64 (%struct.mg_iface*, i32)*, i32 (%struct.mg_connection*, %union.socket_address*)*, i32 (%struct.mg_connection*, %union.socket_address*)*, void (%struct.mg_connection*, %union.socket_address*)*, void (%struct.mg_connection*)*, i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)*, i32 (%struct.mg_connection*)*, void (%struct.mg_connection*)*, void (%struct.mg_connection*, i32)*, void (%struct.mg_connection*, i32, %union.socket_address*)* }
%struct.mg_iface = type { %struct.mg_mgr*, i8*, %struct.mg_iface_vtable* }
%struct.mg_mgr = type { %struct.mg_connection*, i8*, [2 x i32], i8*, i32, i32, %struct.mg_iface**, i8* }
%struct.mg_connection = type { %struct.mg_connection*, %struct.mg_connection*, %struct.mg_connection*, %struct.mg_mgr*, i32, i32, %union.socket_address, i64, %struct.mbuf, %struct.mbuf, i64, double, void (%struct.mg_connection*, i32, i8*)*, i8*, void (i8*)*, void (%struct.mg_connection*, i32, i8*)*, i8*, %union.anon, i8*, i8*, %struct.mg_iface*, i64, i8* }
%union.socket_address = type { %struct.sockaddr_in }
%struct.sockaddr_in = type { i8, i8, i16, %struct.in_addr, [8 x i8] }
%struct.in_addr = type { i32 }
%struct.mbuf = type { i8*, i64, i64 }
%union.anon = type { i8* }
%struct.mg_send_mqtt_handshake_opts = type { i8, i16, i8*, i8*, i8*, i8* }
%struct.mg_str = type { i8*, i64 }
%struct.anon = type { i8*, i64, i8* }
%struct.cs_base64_ctx = type { void (i8, i8*)*, [3 x i8], i32, i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.timeval = type { i64, i32 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.cs_md5_ctx = type { [4 x i32], [2 x i32], [64 x i8] }
%union.char64long16 = type { [16 x i32] }
%struct.cs_sha1_ctx = type { [5 x i32], [2 x i32], [64 x i8] }
%struct.mg_mgr_init_opts = type { %struct.mg_iface_vtable*, i32, %struct.mg_iface_vtable**, i8* }
%struct.mg_add_sock_opts = type { i8*, i32, i8**, %struct.mg_iface* }
%struct.mg_connect_opts = type { i8*, i32, i8**, %struct.mg_iface*, i8* }
%struct.mg_resolve_async_opts = type { i8*, i32, i32, i32, i32, %struct.mg_connection** }
%struct.mg_dns_message = type { %struct.mg_str, i16, i16, i32, i32, [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record] }
%struct.mg_dns_resource_record = type { %struct.mg_str, i32, i32, i32, i32, %struct.mg_str }
%struct.mg_resolve_async_request = type { [1024 x i8], i32, void (%struct.mg_dns_message*, i8*, i32)*, i8*, i64, i32, i32, i64, i32 }
%struct.mg_bind_opts = type { i8*, i32, i8**, %struct.mg_iface* }
%struct.ctl_msg = type { void (%struct.mg_connection*, i32, i8*)*, [8192 x i8] }
%struct.sockaddr = type { i8, i8, [14 x i8] }
%struct.fd_set = type { [32 x i32] }
%struct.http_message = type { %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str, i32, %struct.mg_str, %struct.mg_str, [40 x %struct.mg_str], [40 x %struct.mg_str], i64 }
%struct.mg_http_endpoint = type { %struct.mg_http_endpoint*, %struct.mg_str, i8*, i8*, void (%struct.mg_connection*, i32, i8*)* }
%struct.mg_http_proto_data = type { %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_cgi, %struct.mg_ws_proto_data, %struct.mg_http_proto_data_chuncked, %struct.mg_http_endpoint*, void (%struct.mg_connection*, i32, i8*)*, %struct.mg_reverse_proxy_data, i64, i64, i64, i32 }
%struct.mg_http_proto_data_file = type { %struct.__sFILE*, i64, i64, i32, i32 }
%struct.mg_http_proto_data_cgi = type { %struct.mg_connection* }
%struct.mg_ws_proto_data = type { i64 }
%struct.mg_http_proto_data_chuncked = type { i64 }
%struct.mg_reverse_proxy_data = type { %struct.mg_connection* }
%struct.stat = type { i32, i16, i16, i64, i32, i32, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, [2 x i64] }
%struct.altbuf = type { %struct.mbuf, i8*, i64, i64 }
%struct.mg_serve_http_opts = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.mg_http_endpoint_opts = type { i8*, i8*, i8* }
%struct.ws_mask_ctx = type { i64, i32 }
%struct.mg_mqtt_message = type { i32, i32, i32, %struct.mg_str, %struct.mg_str, i8, i16, i8, i8, i16, %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str, %struct.mg_str }
%struct.mg_mqtt_proto_data = type { i16, double }
%struct.mg_mqtt_topic_expression = type { i8*, i8 }
%struct.mg_dns_header = type { i16, i16, i16, i16, i16, i16 }
%struct.mg_cgi_env_block = type { %struct.mg_connection*, [8192 x i8], [64 x i8*], i32, i32 }
%struct.sigaction = type { %union.__sigaction_u, i32, i32 }
%union.__sigaction_u = type { void (i32)* }
%struct.dirent = type { i64, i64, i16, i16, i8, [1024 x i8] }
%struct.DIR = type { i32, i64, i64, i8*, i32, i64, i64, i32, %struct._opaque_pthread_mutex_t, %struct._telldir* }
%struct._opaque_pthread_mutex_t = type { i64, [56 x i8] }
%struct._telldir = type opaque
%struct.mg_ssi_call_ctx = type { %struct.http_message*, %struct.mg_str, %struct.mg_str }
%struct.websocket_message = type { i8*, i64, i8 }

@cs_base64_encode.b64 = internal global i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), align 8
@.str = private unnamed_addr constant [65 x i8] c"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\00", align 1
@cs_fprint_base64.b64 = internal global i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str, i32 0, i32 0), align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@cs_log_level = weak global i32 0, align 4
@cs_log_file = weak global %struct.__sFILE* null, align 8
@cs_log_cur_msg_level = weak global i32 -1, align 4
@s_file_level = internal global i8* null, align 8
@__stderrp = external global %struct.__sFILE*, align 8
@cs_timegm.month_day = internal constant [12 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334], align 16
@__func__.mbuf_insert = private unnamed_addr constant [12 x i8] c"mbuf_insert\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"mongoose.c\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"a != NULL\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"a->len <= a->size\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"off <= a->len\00", align 1
@cs_to_hex.hex = internal global i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0), align 8
@.str.6 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"%p 0x%lx %d\00", align 1
@mg_num_ifaces = global i32 1, align 4
@.str.8 = private unnamed_addr constant [35 x i8] c"==================================\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"init mgr=%p\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"%p\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"%p %p %d %#x\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"%p %s://%s:%hu\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"udp\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"tcp\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"%p -> %d bytes\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"%p %s://%s:%hu -> %d\00", align 1
@.str.17 = private unnamed_addr constant [21 x i8] c"cannot parse address\00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"cannot schedule DNS lookup\00", align 1
@.str.19 = private unnamed_addr constant [28 x i8] c"Failed to open listener: %d\00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"failed to open listener\00", align 1
@.str.21 = private unnamed_addr constant [8 x i8] c"%08x %c\00", align 1
@.str.22 = private unnamed_addr constant [16 x i8] c"%p %p %d -> %lu\00", align 1
@mg_default_iface_vtable = constant %struct.mg_iface_vtable { void (%struct.mg_iface*)* @mg_socket_if_init, void (%struct.mg_iface*)* @mg_socket_if_free, void (%struct.mg_connection*)* @mg_socket_if_add_conn, void (%struct.mg_connection*)* @mg_socket_if_remove_conn, i64 (%struct.mg_iface*, i32)* @mg_socket_if_poll, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_listen_tcp, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_listen_udp, void (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_connect_tcp, void (%struct.mg_connection*)* @mg_socket_if_connect_udp, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_tcp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_udp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_tcp_recv, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)* @mg_socket_if_udp_recv, i32 (%struct.mg_connection*)* @mg_socket_if_create_conn, void (%struct.mg_connection*)* @mg_socket_if_destroy_conn, void (%struct.mg_connection*, i32)* @mg_socket_if_sock_set, void (%struct.mg_connection*, i32, %union.socket_address*)* @mg_socket_if_get_conn_addr }, align 8
@mg_ifaces = global [1 x %struct.mg_iface_vtable*] [%struct.mg_iface_vtable* @mg_default_iface_vtable], align 8
@mg_null_iface_vtable = constant %struct.mg_iface_vtable { void (%struct.mg_iface*)* @mg_null_if_init, void (%struct.mg_iface*)* @mg_null_if_free, void (%struct.mg_connection*)* @mg_null_if_add_conn, void (%struct.mg_connection*)* @mg_null_if_remove_conn, i64 (%struct.mg_iface*, i32)* @mg_null_if_poll, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_null_if_listen_tcp, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_null_if_listen_udp, void (%struct.mg_connection*, %union.socket_address*)* @mg_null_if_connect_tcp, void (%struct.mg_connection*)* @mg_null_if_connect_udp, i32 (%struct.mg_connection*, i8*, i64)* @mg_null_if_tcp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_null_if_udp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_null_if_tcp_recv, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)* @mg_null_if_udp_recv, i32 (%struct.mg_connection*)* @mg_null_if_create_conn, void (%struct.mg_connection*)* @mg_null_if_destroy_conn, void (%struct.mg_connection*, i32)* @mg_null_if_sock_set, void (%struct.mg_connection*, i32, %union.socket_address*)* @mg_null_if_get_conn_addr }, align 8
@.str.24 = private unnamed_addr constant [33 x i8] c"%p sock %d rc %d errno %d err %d\00", align 1
@.str.25 = private unnamed_addr constant [52 x i8] c"%p fd=%d fd_flags=%d nc_flags=0x%lx rmbl=%d smbl=%d\00", align 1
@.str.26 = private unnamed_addr constant [46 x i8] c"%p after fd=%d nc_flags=0x%lx rmbl=%d smbl=%d\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"%p %d\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c"%p using select()\00", align 1
@mg_socket_iface_vtable = constant %struct.mg_iface_vtable { void (%struct.mg_iface*)* @mg_socket_if_init, void (%struct.mg_iface*)* @mg_socket_if_free, void (%struct.mg_connection*)* @mg_socket_if_add_conn, void (%struct.mg_connection*)* @mg_socket_if_remove_conn, i64 (%struct.mg_iface*, i32)* @mg_socket_if_poll, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_listen_tcp, i32 (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_listen_udp, void (%struct.mg_connection*, %union.socket_address*)* @mg_socket_if_connect_tcp, void (%struct.mg_connection*)* @mg_socket_if_connect_udp, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_tcp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_udp_send, i32 (%struct.mg_connection*, i8*, i64)* @mg_socket_if_tcp_recv, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)* @mg_socket_if_udp_recv, i32 (%struct.mg_connection*)* @mg_socket_if_create_conn, void (%struct.mg_connection*)* @mg_socket_if_destroy_conn, void (%struct.mg_connection*, i32)* @mg_socket_if_sock_set, void (%struct.mg_connection*, i32, %union.socket_address*)* @mg_socket_if_get_conn_addr }, align 8
@.str.29 = private unnamed_addr constant [4 x i8] c"://\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"?#\00", align 1
@.str.31 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.32 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.33 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.35 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"@\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c":%u\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.39 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.41 = private unnamed_addr constant [4 x i8] c"PUT\00", align 1
@.str.42 = private unnamed_addr constant [5 x i8] c"POST\00", align 1
@.str.43 = private unnamed_addr constant [18 x i8] c"Transfer-Encoding\00", align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"chunked\00", align 1
@.str.45 = private unnamed_addr constant [16 x i8] c"invalid request\00", align 1
@.str.46 = private unnamed_addr constant [29 x i8] c"%p WebSocket upgrade code %d\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"Sec-WebSocket-Accept\00", align 1
@.str.48 = private unnamed_addr constant [18 x i8] c"Sec-WebSocket-Key\00", align 1
@.str.49 = private unnamed_addr constant [81 x i8] c"%p recv buffer (%lu bytes) exceeds the limit %lu bytes, and not drained, closing\00", align 1
@.str.50 = private unnamed_addr constant [16 x i8] c"%p %s %.*s %.*s\00", align 1
@.str.51 = private unnamed_addr constant [27 x i8] c"%p finished %d ml %d bl %d\00", align 1
@.str.52 = private unnamed_addr constant [16 x i8] c"Partial Content\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"Moved\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"Found\00", align 1
@.str.55 = private unnamed_addr constant [12 x i8] c"Bad Request\00", align 1
@.str.56 = private unnamed_addr constant [13 x i8] c"Unauthorized\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Forbidden\00", align 1
@.str.58 = private unnamed_addr constant [10 x i8] c"Not Found\00", align 1
@.str.59 = private unnamed_addr constant [32 x i8] c"Requested Range Not Satisfiable\00", align 1
@.str.60 = private unnamed_addr constant [13 x i8] c"I'm a teapot\00", align 1
@.str.61 = private unnamed_addr constant [22 x i8] c"Internal Server Error\00", align 1
@.str.62 = private unnamed_addr constant [12 x i8] c"Bad Gateway\00", align 1
@.str.63 = private unnamed_addr constant [20 x i8] c"Service Unavailable\00", align 1
@.str.64 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.65 = private unnamed_addr constant [17 x i8] c"HTTP/1.1 %d %s\0D\0A\00", align 1
@.str.66 = private unnamed_addr constant [13 x i8] c"Server: %s\0D\0A\00", align 1
@mg_version_header = internal global i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.195, i32 0, i32 0), align 8
@.str.67 = private unnamed_addr constant [7 x i8] c"%.*s\0D\0A\00", align 1
@.str.68 = private unnamed_addr constant [36 x i8] c"<p>Moved <a href='%.*s'>here</a>.\0D\0A\00", align 1
@.str.69 = private unnamed_addr constant [93 x i8] c"Location: %.*s\0D\0AContent-Type: text/html\0D\0AContent-Length: %d\0D\0ACache-Control: no-cache\0D\0A%.*s%s\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.71 = private unnamed_addr constant [29 x i8] c"Transfer-Encoding: chunked\0D\0A\00", align 1
@.str.72 = private unnamed_addr constant [23 x i8] c"Content-Length: %lld\0D\0A\00", align 1
@.str.73 = private unnamed_addr constant [9 x i8] c"%p %d %s\00", align 1
@.str.74 = private unnamed_addr constant [44 x i8] c"Content-Type: text/plain\0D\0AConnection: close\00", align 1
@.str.75 = private unnamed_addr constant [18 x i8] c"%p [%s] %.*s %.*s\00", align 1
@.str.76 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"Open failed\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"Range\00", align 1
@.str.79 = private unnamed_addr constant [30 x i8] c"Content-Range: bytes */%lld\0D\0A\00", align 1
@.str.80 = private unnamed_addr constant [38 x i8] c"Content-Range: bytes %lld-%lld/%lld\0D\0A\00", align 1
@.str.81 = private unnamed_addr constant [11 x i8] c"Connection\00", align 1
@.str.82 = private unnamed_addr constant [11 x i8] c"keep-alive\00", align 1
@.str.83 = private unnamed_addr constant [9 x i8] c"HTTP/1.1\00", align 1
@.str.84 = private unnamed_addr constant [121 x i8] c"Date: %s\0D\0ALast-Modified: %s\0D\0AAccept-Ranges: bytes\0D\0AContent-Type: %.*s\0D\0AConnection: %s\0D\0AContent-Length: %zu\0D\0A%sEtag: %s\0D\0A\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"close\00", align 1
@.str.86 = private unnamed_addr constant [25 x i8] c"Content-Encoding: %.*s\0D\0A\00", align 1
@.str.87 = private unnamed_addr constant [6 x i8] c"%lX\0D\0A\00", align 1
@.str.88 = private unnamed_addr constant [5 x i8] c"&lt;\00", align 1
@.str.89 = private unnamed_addr constant [5 x i8] c"&gt;\00", align 1
@.str.90 = private unnamed_addr constant [14 x i8] c"Authorization\00", align 1
@.str.91 = private unnamed_addr constant [7 x i8] c"Basic \00", align 1
@.str.92 = private unnamed_addr constant [20 x i8] c"%%%zu[^:]:%%%zu[^\0A]\00", align 1
@mg_http_create_digest_auth_header.colon = internal constant [2 x i8] c":\00", align 1
@mg_http_create_digest_auth_header.qop = internal constant [5 x i8] c"auth\00", align 1
@mg_http_create_digest_auth_header.one = internal constant i64 1, align 8
@.str.93 = private unnamed_addr constant [4 x i8] c"%lx\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.95 = private unnamed_addr constant [101 x i8] c"Authorization: Digest username=\22%s\22,realm=\22%s\22,uri=\22%s\22,qop=%s,nc=1,cnonce=%s,nonce=%s,response=%s\0D\0A\00", align 1
@.str.96 = private unnamed_addr constant [9 x i8] c"username\00", align 1
@.str.97 = private unnamed_addr constant [7 x i8] c"cnonce\00", align 1
@.str.98 = private unnamed_addr constant [9 x i8] c"response\00", align 1
@.str.99 = private unnamed_addr constant [4 x i8] c"uri\00", align 1
@.str.100 = private unnamed_addr constant [4 x i8] c"qop\00", align 1
@.str.101 = private unnamed_addr constant [3 x i8] c"nc\00", align 1
@.str.102 = private unnamed_addr constant [6 x i8] c"nonce\00", align 1
@.str.103 = private unnamed_addr constant [15 x i8] c"%[^:]:%[^:]:%s\00", align 1
@.str.104 = private unnamed_addr constant [16 x i8] c"%.*s %s %.*s %s\00", align 1
@.str.105 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.106 = private unnamed_addr constant [9 x i8] c"%.*s%c%s\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"%.*s %s %x %d\00", align 1
@.str.108 = private unnamed_addr constant [9 x i8] c"%.*s%.*s\00", align 1
@.str.109 = private unnamed_addr constant [5 x i8] c"http\00", align 1
@.str.110 = private unnamed_addr constant [6 x i8] c"https\00", align 1
@.str.111 = private unnamed_addr constant [33 x i8] c"Proxying %.*s to %s (rule: %.*s)\00", align 1
@.str.112 = private unnamed_addr constant [27 x i8] c"Error connecting to %s: %s\00", align 1
@.str.113 = private unnamed_addr constant [21 x i8] c"%.*s %.*s HTTP/1.1\0D\0A\00", align 1
@.str.114 = private unnamed_addr constant [13 x i8] c"Host: %.*s\0D\0A\00", align 1
@.str.115 = private unnamed_addr constant [5 x i8] c"Host\00", align 1
@.str.116 = private unnamed_addr constant [18 x i8] c"Transfer-encoding\00", align 1
@.str.117 = private unnamed_addr constant [22 x i8] c"Content-Length: %zu\0D\0A\00", align 1
@.str.118 = private unnamed_addr constant [7 x i8] c"Expect\00", align 1
@.str.119 = private unnamed_addr constant [13 x i8] c"100-continue\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"%.*s: %.*s\0D\0A\00", align 1
@.str.121 = private unnamed_addr constant [111 x i8] c"HTTP/1.1 401 Unauthorized\0D\0AWWW-Authenticate: Digest qop=\22auth\22, realm=\22%s\22, nonce=\22%lx\22\0D\0AContent-Length: 0\0D\0A\0D\0A\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c".htpasswd\00", align 1
@.str.123 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.124 = private unnamed_addr constant [16 x i8] c"**.cgi$|**.php$\00", align 1
@.str.125 = private unnamed_addr constant [19 x i8] c"**.shtml$|**.shtm$\00", align 1
@.str.126 = private unnamed_addr constant [53 x i8] c"index.html,index.htm,index.shtml,index.cgi,index.php\00", align 1
@.str.127 = private unnamed_addr constant [17 x i8] c"cannot parse url\00", align 1
@.str.128 = private unnamed_addr constant [14 x i8] c"tcp://%.*s:%u\00", align 1
@.str.129 = private unnamed_addr constant [18 x i8] c"%s use_ssl? %d %s\00", align 1
@.str.130 = private unnamed_addr constant [16 x i8] c"ssl is disabled\00", align 1
@.str.131 = private unnamed_addr constant [62 x i8] c"%s %.*s HTTP/1.1\0D\0AHost: %.*s\0D\0AContent-Length: %zu\0D\0A%.*s%s\0D\0A%s\00", align 1
@.str.132 = private unnamed_addr constant [4 x i8] c"GET\00", align 1
@mg_parse_multipart.cd = internal constant [22 x i8] c"Content-Disposition: \00", align 16
@.str.133 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.134 = private unnamed_addr constant [9 x i8] c"filename\00", align 1
@.str.135 = private unnamed_addr constant [9 x i8] c"%p %d %d\00", align 1
@.str.136 = private unnamed_addr constant [115 x i8] c"GET %.*s HTTP/1.1\0D\0AUpgrade: websocket\0D\0AConnection: Upgrade\0D\0A%.*sSec-WebSocket-Version: 13\0D\0ASec-WebSocket-Key: %s\0D\0A\00", align 1
@.str.137 = private unnamed_addr constant [31 x i8] c"Sec-WebSocket-Protocol: %.*s\0D\0A\00", align 1
@.str.138 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@.str.139 = private unnamed_addr constant [3 x i8] c"ws\00", align 1
@.str.140 = private unnamed_addr constant [4 x i8] c"wss\00", align 1
@.str.141 = private unnamed_addr constant [6 x i8] c"%s:%d\00", align 1
@.str.142 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.143 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.144 = private unnamed_addr constant [3 x i8] c"<-\00", align 1
@.str.145 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str.146 = private unnamed_addr constant [3 x i8] c"<A\00", align 1
@.str.147 = private unnamed_addr constant [3 x i8] c"C>\00", align 1
@.str.148 = private unnamed_addr constant [3 x i8] c"XX\00", align 1
@.str.149 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@__stdoutp = external global %struct.__sFILE*, align 8
@.str.150 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.151 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.152 = private unnamed_addr constant [20 x i8] c"%lu %p %s %s %s %d\0A\00", align 1
@mg_is_big_endian.n = internal constant i32 1, align 4
@.str.153 = private unnamed_addr constant [22 x i8] c"Authorization: Basic \00", align 1
@.str.154 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.155 = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1
@.str.156 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.157 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str.158 = private unnamed_addr constant [11 x i8] c"._-$,;~()/\00", align 1
@mg_send_mqtt_handshake.opts = internal global %struct.mg_send_mqtt_handshake_opts zeroinitializer, align 8
@.str.159 = private unnamed_addr constant [8 x i8] c"\00\04MQTT\04\00", align 1
@.str.160 = private unnamed_addr constant [2 x i8] zeroinitializer, align 1
@.str.161 = private unnamed_addr constant [6 x i8] c"%s %d\00", align 1
@mg_dns_tid = internal global i32 160, align 4
@.str.162 = private unnamed_addr constant [11 x i8] c"/etc/hosts\00", align 1
@.str.163 = private unnamed_addr constant [14 x i8] c"%u.%u.%u.%u%n\00", align 1
@.str.164 = private unnamed_addr constant [5 x i8] c"%s%n\00", align 1
@.str.165 = private unnamed_addr constant [9 x i8] c"%s %d %p\00", align 1
@.str.166 = private unnamed_addr constant [8 x i8] c"8.8.8.8\00", align 1
@.str.167 = private unnamed_addr constant [12 x i8] c"udp://%s:53\00", align 1
@from_b64.tab = internal constant [128 x i8] c"\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF\FF>\FF\FF\FF?456789:;<=\FF\FF\FF\C8\FF\FF\FF\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\FF\FF\FF\FF\FF\FF\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123\FF\FF\FF\FF\FF", align 16
@.str.168 = private unnamed_addr constant [51 x i8] c"%p %s ev=%d ev_data=%p flags=0x%lx rmbl=%d smbl=%d\00", align 1
@.str.169 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.170 = private unnamed_addr constant [6 x i8] c"proto\00", align 1
@.str.171 = private unnamed_addr constant [40 x i8] c"%p after %s flags=0x%lx rmbl=%d smbl=%d\00", align 1
@.str.172 = private unnamed_addr constant [26 x i8] c"failed to init connection\00", align 1
@.str.173 = private unnamed_addr constant [6 x i8] c"%p %p\00", align 1
@.str.174 = private unnamed_addr constant [26 x i8] c"%p <- %d bytes from %s:%d\00", align 1
@.str.175 = private unnamed_addr constant [15 x i8] c"%p <- %d bytes\00", align 1
@.str.176 = private unnamed_addr constant [7 x i8] c"udp://\00", align 1
@.str.177 = private unnamed_addr constant [7 x i8] c"tcp://\00", align 1
@.str.178 = private unnamed_addr constant [17 x i8] c"%u.%u.%u.%u:%u%n\00", align 1
@.str.179 = private unnamed_addr constant [12 x i8] c"%[^ :]:%u%n\00", align 1
@.str.180 = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@.str.181 = private unnamed_addr constant [6 x i8] c":%u%n\00", align 1
@.str.182 = private unnamed_addr constant [5 x i8] c"%u%n\00", align 1
@.str.183 = private unnamed_addr constant [17 x i8] c"%d.%d.%d.%d/%d%n\00", align 1
@.str.184 = private unnamed_addr constant [14 x i8] c"%d.%d.%d.%d%n\00", align 1
@.str.185 = private unnamed_addr constant [28 x i8] c"failed to create connection\00", align 1
@.str.186 = private unnamed_addr constant [25 x i8] c"%p: failed to accept: %d\00", align 1
@.str.187 = private unnamed_addr constant [19 x i8] c"%p conn from %s:%d\00", align 1
@.str.188 = private unnamed_addr constant [24 x i8] c"read %d from ctl socket\00", align 1
@.str.189 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.190 = private unnamed_addr constant [15 x i8] c"Content-Length\00", align 1
@.str.191 = private unnamed_addr constant [22 x i8] c"%p sent %d (total %d)\00", align 1
@.str.192 = private unnamed_addr constant [25 x i8] c"%p done, %d bytes, ka %d\00", align 1
@__func__.mg_handle_chunked = private unnamed_addr constant [18 x i8] c"mg_handle_chunked\00", align 1
@.str.193 = private unnamed_addr constant [17 x i8] c"blen >= body_len\00", align 1
@.str.194 = private unnamed_addr constant [10 x i8] c"i <= blen\00", align 1
@.str.195 = private unnamed_addr constant [14 x i8] c"Mongoose/6.18\00", align 1
@.str.196 = private unnamed_addr constant [16 x i8] c"bytes=%lld-%lld\00", align 1
@.str.197 = private unnamed_addr constant [11 x i8] c"\22%lx.%lld\22\00", align 1
@.str.198 = private unnamed_addr constant [26 x i8] c"%a, %d %b %Y %H:%M:%S GMT\00", align 1
@mg_mkmd5resp.colon = internal constant [2 x i8] c":\00", align 1
@mg_mkmd5resp.one = internal constant i64 1, align 8
@.str.199 = private unnamed_addr constant [20 x i8] c"%p: upstream closed\00", align 1
@.str.200 = private unnamed_addr constant [8 x i8] c"http://\00", align 1
@mg_http_handle_forwarding.p1 = private unnamed_addr constant %struct.mg_str { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.200, i32 0, i32 0), i64 7 }, align 8
@.str.201 = private unnamed_addr constant [9 x i8] c"https://\00", align 1
@mg_http_handle_forwarding.p2 = private unnamed_addr constant %struct.mg_str { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.201, i32 0, i32 0), i64 8 }, align 8
@mg_http_send_port_based_redirect.local_port = private unnamed_addr constant [20 x i8] c"%\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str.202 = private unnamed_addr constant [42 x i8] c"Content-Length: 0\0D\0ALocation: %.*s%.*s\0D\0A\0D\0A\00", align 1
@__func__.mg_uri_to_local_path = private unnamed_addr constant [21 x i8] c"mg_uri_to_local_path\00", align 1
@.str.203 = private unnamed_addr constant [31 x i8] c"root.p != NULL && root.len > 0\00", align 1
@.str.204 = private unnamed_addr constant [24 x i8] c"'%.*s' -> '%s' + '%.*s'\00", align 1
@.str.205 = private unnamed_addr constant [62 x i8] c"%p %.*s [%s] exists=%d is_dir=%d is_dav=%d is_cgi=%d index=%s\00", align 1
@.str.206 = private unnamed_addr constant [59 x i8] c"HTTP/1.1 301 Moved\0D\0ALocation: %.*s/\0D\0AContent-Length: 0\0D\0A\0D\0A\00", align 1
@.str.207 = private unnamed_addr constant [8 x i8] c"OPTIONS\00", align 1
@.str.208 = private unnamed_addr constant [9 x i8] c"%s%c%.*s\00", align 1
@.str.209 = private unnamed_addr constant [10 x i8] c"[%s] [%s]\00", align 1
@.str.210 = private unnamed_addr constant [8 x i8] c"%p [%s]\00", align 1
@.str.211 = private unnamed_addr constant [12 x i8] c"CGI failure\00", align 1
@.str.212 = private unnamed_addr constant [12 x i8] c"SERVER_NAME\00", align 1
@.str.213 = private unnamed_addr constant [15 x i8] c"SERVER_NAME=%s\00", align 1
@.str.214 = private unnamed_addr constant [15 x i8] c"SERVER_ROOT=%s\00", align 1
@.str.215 = private unnamed_addr constant [17 x i8] c"DOCUMENT_ROOT=%s\00", align 1
@.str.216 = private unnamed_addr constant [22 x i8] c"SERVER_SOFTWARE=%s/%s\00", align 1
@.str.217 = private unnamed_addr constant [9 x i8] c"Mongoose\00", align 1
@.str.218 = private unnamed_addr constant [5 x i8] c"6.18\00", align 1
@.str.219 = private unnamed_addr constant [26 x i8] c"GATEWAY_INTERFACE=CGI/1.1\00", align 1
@.str.220 = private unnamed_addr constant [25 x i8] c"SERVER_PROTOCOL=HTTP/1.1\00", align 1
@.str.221 = private unnamed_addr constant [20 x i8] c"REDIRECT_STATUS=200\00", align 1
@.str.222 = private unnamed_addr constant [20 x i8] c"REQUEST_METHOD=%.*s\00", align 1
@.str.223 = private unnamed_addr constant [23 x i8] c"REQUEST_URI=%.*s%s%.*s\00", align 1
@.str.224 = private unnamed_addr constant [15 x i8] c"REMOTE_ADDR=%s\00", align 1
@.str.225 = private unnamed_addr constant [15 x i8] c"SERVER_PORT=%s\00", align 1
@.str.226 = private unnamed_addr constant [20 x i8] c"SCRIPT_NAME=%.*s/%s\00", align 1
@.str.227 = private unnamed_addr constant [17 x i8] c"SCRIPT_NAME=%.*s\00", align 1
@.str.228 = private unnamed_addr constant [19 x i8] c"SCRIPT_FILENAME=%s\00", align 1
@.str.229 = private unnamed_addr constant [15 x i8] c"PATH_INFO=%.*s\00", align 1
@.str.230 = private unnamed_addr constant [21 x i8] c"PATH_TRANSLATED=%.*s\00", align 1
@.str.231 = private unnamed_addr constant [10 x i8] c"HTTPS=off\00", align 1
@.str.232 = private unnamed_addr constant [13 x i8] c"Content-Type\00", align 1
@.str.233 = private unnamed_addr constant [18 x i8] c"CONTENT_TYPE=%.*s\00", align 1
@.str.234 = private unnamed_addr constant [18 x i8] c"QUERY_STRING=%.*s\00", align 1
@.str.235 = private unnamed_addr constant [20 x i8] c"CONTENT_LENGTH=%.*s\00", align 1
@.str.236 = private unnamed_addr constant [5 x i8] c"PATH\00", align 1
@.str.237 = private unnamed_addr constant [4 x i8] c"TMP\00", align 1
@.str.238 = private unnamed_addr constant [5 x i8] c"TEMP\00", align 1
@.str.239 = private unnamed_addr constant [7 x i8] c"TMPDIR\00", align 1
@.str.240 = private unnamed_addr constant [8 x i8] c"PERLLIB\00", align 1
@.str.241 = private unnamed_addr constant [13 x i8] c"MONGOOSE_CGI\00", align 1
@.str.242 = private unnamed_addr constant [16 x i8] c"LD_LIBRARY_PATH\00", align 1
@.str.243 = private unnamed_addr constant [15 x i8] c"HTTP_%.*s=%.*s\00", align 1
@.str.244 = private unnamed_addr constant [6 x i8] c"%s=%s\00", align 1
@.str.245 = private unnamed_addr constant [44 x i8] c"Status: 500\0D\0A\0D\0A500 Server Error: %s%s%s: %s\00", align 1
@.str.246 = private unnamed_addr constant [12 x i8] c"Bad headers\00", align 1
@.str.247 = private unnamed_addr constant [9 x i8] c"Location\00", align 1
@.str.248 = private unnamed_addr constant [21 x i8] c"HTTP/1.1 302 Moved\0D\0A\00", align 1
@.str.249 = private unnamed_addr constant [7 x i8] c"Status\00", align 1
@.str.250 = private unnamed_addr constant [16 x i8] c"HTTP/1.1 %.*s\0D\0A\00", align 1
@.str.251 = private unnamed_addr constant [18 x i8] c"HTTP/1.1 200 OK\0D\0A\00", align 1
@.str.252 = private unnamed_addr constant [9 x i8] c"%p CLOSE\00", align 1
@.str.253 = private unnamed_addr constant [6 x i8] c"MKCOL\00", align 1
@.str.254 = private unnamed_addr constant [45 x i8] c"Allow: GET, POST, HEAD, CONNECT, OPTIONS\0D\0A\0D\0A\00", align 1
@mg_send_directory_listing.sort_js_code = internal global i8* getelementptr inbounds ([453 x i8], [453 x i8]* @.str.255, i32 0, i32 0), align 8
@.str.255 = private unnamed_addr constant [453 x i8] c"<script>function srt(tb, sc, so, d) {var tr = Array.prototype.slice.call(tb.rows, 0),tr = tr.sort(function (a, b) { var c1 = a.cells[sc], c2 = b.cells[sc],n1 = c1.getAttribute('name'), n2 = c2.getAttribute('name'), t1 = a.cells[2].getAttribute('name'), t2 = b.cells[2].getAttribute('name'); return so * (t1 < 0 && t2 >= 0 ? -1 : t2 < 0 && t1 >= 0 ? 1 : n1 ? parseInt(n2) - parseInt(n1) : c1.textContent.trim().localeCompare(c2.textContent.trim())); });\00", align 1
@mg_send_directory_listing.sort_js_code2 = internal global i8* getelementptr inbounds ([452 x i8], [452 x i8]* @.str.256, i32 0, i32 0), align 8
@.str.256 = private unnamed_addr constant [452 x i8] c"for (var i = 0; i < tr.length; i++) tb.appendChild(tr[i]); if (!d) window.location.hash = ('sc=' + sc + '&so=' + so); };window.onload = function() {var tb = document.getElementById('tb');var m = /sc=([012]).so=(1|-1)/.exec(window.location.hash) || [0, 2, 1];var sc = m[1], so = m[2]; document.onclick = function(ev) { var c = ev.target.rel; if (c) {if (c == sc) so *= -1; srt(tb, c, so); sc = c; ev.preventDefault();}};srt(tb, sc, so, true);}</script>\00", align 1
@.str.257 = private unnamed_addr constant [19 x i8] c"%s: %s\0D\0A%s: %s\0D\0A\0D\0A\00", align 1
@.str.258 = private unnamed_addr constant [25 x i8] c"text/html; charset=utf-8\00", align 1
@.str.259 = private unnamed_addr constant [391 x i8] c"<!DOCTYPE html><html><head><title>Index of %.*s</title>%s%s<style>th,td {text-align: left; padding-right: 1em; font-family: monospace; }</style></head><body><h1>Index of %.*s</h1><table cellpadding=\220\22><thead><tr><th><a href=\22#\22 rel=\220\22>Name</a></th><th><a href=\22#\22 rel=\221\22>Modified</a></th><th><a href=\22#\22 rel=\222\22>Size</a></th></tr><tr><td colspan=\223\22><hr></td></tr></thead><tbody id=\22tb\22>\00", align 1
@.str.260 = private unnamed_addr constant [101 x i8] c"</tbody><tfoot><tr><td colspan=\223\22><hr></td></tr></tfoot></table><address>%s</address></body></html>\00", align 1
@.str.261 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.262 = private unnamed_addr constant [21 x i8] c"%p opendir(%s) -> %d\00", align 1
@.str.263 = private unnamed_addr constant [12 x i8] c"[DIRECTORY]\00", align 1
@.str.264 = private unnamed_addr constant [6 x i8] c"%.1fk\00", align 1
@.str.265 = private unnamed_addr constant [6 x i8] c"%.1fM\00", align 1
@.str.266 = private unnamed_addr constant [6 x i8] c"%.1fG\00", align 1
@.str.267 = private unnamed_addr constant [15 x i8] c"%d-%b-%Y %H:%M\00", align 1
@.str.268 = private unnamed_addr constant [76 x i8] c"<tr><td><a href=\22%s%s\22>%s%s</a></td><td>%s</td><td name=\22%lld\22>%s</td></tr>\00", align 1
@.str.269 = private unnamed_addr constant [14 x i8] c"If-None-Match\00", align 1
@.str.270 = private unnamed_addr constant [18 x i8] c"If-Modified-Since\00", align 1
@mg_parse_date_string.days_before_month = internal constant [12 x i16] [i16 0, i16 31, i16 59, i16 90, i16 120, i16 151, i16 181, i16 212, i16 243, i16 273, i16 304, i16 334], align 16
@.str.271 = private unnamed_addr constant [19 x i8] c"%d/%3s/%d %d:%d:%d\00", align 1
@.str.272 = private unnamed_addr constant [19 x i8] c"%d %3s %d %d:%d:%d\00", align 1
@.str.273 = private unnamed_addr constant [25 x i8] c"%*3s, %d %3s %d %d:%d:%d\00", align 1
@.str.274 = private unnamed_addr constant [19 x i8] c"%d-%3s-%d %d:%d:%d\00", align 1
@mg_get_month_index.month_names = internal global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.275, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.276, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.277, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.278, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.279, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.280, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.281, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.282, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.283, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.284, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.285, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.286, i32 0, i32 0)], align 16
@.str.275 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.276 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.277 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.278 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.279 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.280 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.281 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.282 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.283 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.284 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.285 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.286 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@.str.287 = private unnamed_addr constant [11 x i8] c"text/plain\00", align 1
@.str.288 = private unnamed_addr constant [6 x i8] c"%p %s\00", align 1
@.str.289 = private unnamed_addr constant [40 x i8] c"Content-Type: %.*s\0D\0AConnection: close\0D\0A\00", align 1
@mg_send_ssi_file.btag = internal constant %struct.mg_str { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.290, i32 0, i32 0), i64 5 }, align 8
@.str.290 = private unnamed_addr constant [6 x i8] c"<!--#\00", align 1
@mg_send_ssi_file.d_include = internal constant %struct.mg_str { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.291, i32 0, i32 0), i64 7 }, align 8
@.str.291 = private unnamed_addr constant [8 x i8] c"include\00", align 1
@mg_send_ssi_file.d_call = internal constant %struct.mg_str { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.292, i32 0, i32 0), i64 4 }, align 8
@.str.292 = private unnamed_addr constant [5 x i8] c"call\00", align 1
@.str.293 = private unnamed_addr constant [36 x i8] c"SSI #include level is too deep (%s)\00", align 1
@.str.294 = private unnamed_addr constant [25 x i8] c"%s: SSI tag is too large\00", align 1
@.str.295 = private unnamed_addr constant [17 x i8] c" virtual=\22%[^\22]\22\00", align 1
@.str.296 = private unnamed_addr constant [17 x i8] c" abspath=\22%[^\22]\22\00", align 1
@.str.297 = private unnamed_addr constant [14 x i8] c" file=\22%[^\22]\22\00", align 1
@.str.298 = private unnamed_addr constant [9 x i8] c" \22%[^\22]\22\00", align 1
@.str.299 = private unnamed_addr constant [23 x i8] c"Bad SSI #include: [%s]\00", align 1
@.str.300 = private unnamed_addr constant [36 x i8] c"SSI include error: mg_fopen(%s): %s\00", align 1
@.str.301 = private unnamed_addr constant [21 x i8] c"application/x-gunzip\00", align 1
@.str.302 = private unnamed_addr constant [21 x i8] c"'%.*s' '%.*s' '%.*s'\00", align 1
@.str.303 = private unnamed_addr constant [5 x i8] c"gzip\00", align 1
@mg_static_builtin_mime_types = internal constant [49 x %struct.anon] [%struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.304, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.304, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.306, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.307, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.308, i32 0, i32 0), i64 5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.305, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.309, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.310, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.311, i32 0, i32 0), i64 2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.312, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.313, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.314, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.315, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.316, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.317, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.318, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.319, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.318, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.320, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.321, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.322, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.323, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.324, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.287, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.325, i32 0, i32 0), i64 7, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.326, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.327, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.328, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.329, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.330, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.331, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.332, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.333, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.334, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.335, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.336, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.337, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.338, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.339, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.340, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.341, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.342, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.343, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.344, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.345, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.346, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.347, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.346, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.348, i32 0, i32 0), i64 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.338, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.349, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.350, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.351, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.352, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.353, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.354, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.355, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.356, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.357, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.358, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.359, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.360, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.361, i32 0, i32 0), i64 2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.301, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.362, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.363, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.364, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.365, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.366, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.367, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.368, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.369, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.370, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.371, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.372, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.373, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.374, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.375, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.376, i32 0, i32 0), i64 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.373, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.377, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.378, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.379, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.380, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.381, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.382, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.383, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.384, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.385, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.386, i32 0, i32 0) }, %struct.anon { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.387, i32 0, i32 0), i64 3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.388, i32 0, i32 0) }, %struct.anon zeroinitializer], align 16
@.str.304 = private unnamed_addr constant [5 x i8] c"html\00", align 1
@.str.305 = private unnamed_addr constant [10 x i8] c"text/html\00", align 1
@.str.306 = private unnamed_addr constant [4 x i8] c"htm\00", align 1
@.str.307 = private unnamed_addr constant [5 x i8] c"shtm\00", align 1
@.str.308 = private unnamed_addr constant [6 x i8] c"shtml\00", align 1
@.str.309 = private unnamed_addr constant [4 x i8] c"css\00", align 1
@.str.310 = private unnamed_addr constant [9 x i8] c"text/css\00", align 1
@.str.311 = private unnamed_addr constant [3 x i8] c"js\00", align 1
@.str.312 = private unnamed_addr constant [25 x i8] c"application/x-javascript\00", align 1
@.str.313 = private unnamed_addr constant [4 x i8] c"ico\00", align 1
@.str.314 = private unnamed_addr constant [13 x i8] c"image/x-icon\00", align 1
@.str.315 = private unnamed_addr constant [4 x i8] c"gif\00", align 1
@.str.316 = private unnamed_addr constant [10 x i8] c"image/gif\00", align 1
@.str.317 = private unnamed_addr constant [4 x i8] c"jpg\00", align 1
@.str.318 = private unnamed_addr constant [11 x i8] c"image/jpeg\00", align 1
@.str.319 = private unnamed_addr constant [5 x i8] c"jpeg\00", align 1
@.str.320 = private unnamed_addr constant [4 x i8] c"png\00", align 1
@.str.321 = private unnamed_addr constant [10 x i8] c"image/png\00", align 1
@.str.322 = private unnamed_addr constant [4 x i8] c"svg\00", align 1
@.str.323 = private unnamed_addr constant [14 x i8] c"image/svg+xml\00", align 1
@.str.324 = private unnamed_addr constant [4 x i8] c"txt\00", align 1
@.str.325 = private unnamed_addr constant [8 x i8] c"torrent\00", align 1
@.str.326 = private unnamed_addr constant [25 x i8] c"application/x-bittorrent\00", align 1
@.str.327 = private unnamed_addr constant [4 x i8] c"wav\00", align 1
@.str.328 = private unnamed_addr constant [12 x i8] c"audio/x-wav\00", align 1
@.str.329 = private unnamed_addr constant [4 x i8] c"mp3\00", align 1
@.str.330 = private unnamed_addr constant [12 x i8] c"audio/x-mp3\00", align 1
@.str.331 = private unnamed_addr constant [4 x i8] c"mid\00", align 1
@.str.332 = private unnamed_addr constant [10 x i8] c"audio/mid\00", align 1
@.str.333 = private unnamed_addr constant [4 x i8] c"m3u\00", align 1
@.str.334 = private unnamed_addr constant [16 x i8] c"audio/x-mpegurl\00", align 1
@.str.335 = private unnamed_addr constant [4 x i8] c"ogg\00", align 1
@.str.336 = private unnamed_addr constant [16 x i8] c"application/ogg\00", align 1
@.str.337 = private unnamed_addr constant [4 x i8] c"ram\00", align 1
@.str.338 = private unnamed_addr constant [21 x i8] c"audio/x-pn-realaudio\00", align 1
@.str.339 = private unnamed_addr constant [4 x i8] c"xml\00", align 1
@.str.340 = private unnamed_addr constant [9 x i8] c"text/xml\00", align 1
@.str.341 = private unnamed_addr constant [4 x i8] c"ttf\00", align 1
@.str.342 = private unnamed_addr constant [23 x i8] c"application/x-font-ttf\00", align 1
@.str.343 = private unnamed_addr constant [5 x i8] c"json\00", align 1
@.str.344 = private unnamed_addr constant [17 x i8] c"application/json\00", align 1
@.str.345 = private unnamed_addr constant [5 x i8] c"xslt\00", align 1
@.str.346 = private unnamed_addr constant [16 x i8] c"application/xml\00", align 1
@.str.347 = private unnamed_addr constant [4 x i8] c"xsl\00", align 1
@.str.348 = private unnamed_addr constant [3 x i8] c"ra\00", align 1
@.str.349 = private unnamed_addr constant [4 x i8] c"doc\00", align 1
@.str.350 = private unnamed_addr constant [19 x i8] c"application/msword\00", align 1
@.str.351 = private unnamed_addr constant [4 x i8] c"exe\00", align 1
@.str.352 = private unnamed_addr constant [25 x i8] c"application/octet-stream\00", align 1
@.str.353 = private unnamed_addr constant [4 x i8] c"zip\00", align 1
@.str.354 = private unnamed_addr constant [29 x i8] c"application/x-zip-compressed\00", align 1
@.str.355 = private unnamed_addr constant [4 x i8] c"xls\00", align 1
@.str.356 = private unnamed_addr constant [18 x i8] c"application/excel\00", align 1
@.str.357 = private unnamed_addr constant [4 x i8] c"tgz\00", align 1
@.str.358 = private unnamed_addr constant [21 x i8] c"application/x-tar-gz\00", align 1
@.str.359 = private unnamed_addr constant [4 x i8] c"tar\00", align 1
@.str.360 = private unnamed_addr constant [18 x i8] c"application/x-tar\00", align 1
@.str.361 = private unnamed_addr constant [3 x i8] c"gz\00", align 1
@.str.362 = private unnamed_addr constant [4 x i8] c"arj\00", align 1
@.str.363 = private unnamed_addr constant [29 x i8] c"application/x-arj-compressed\00", align 1
@.str.364 = private unnamed_addr constant [4 x i8] c"rar\00", align 1
@.str.365 = private unnamed_addr constant [29 x i8] c"application/x-rar-compressed\00", align 1
@.str.366 = private unnamed_addr constant [4 x i8] c"rtf\00", align 1
@.str.367 = private unnamed_addr constant [16 x i8] c"application/rtf\00", align 1
@.str.368 = private unnamed_addr constant [4 x i8] c"pdf\00", align 1
@.str.369 = private unnamed_addr constant [16 x i8] c"application/pdf\00", align 1
@.str.370 = private unnamed_addr constant [4 x i8] c"swf\00", align 1
@.str.371 = private unnamed_addr constant [30 x i8] c"application/x-shockwave-flash\00", align 1
@.str.372 = private unnamed_addr constant [4 x i8] c"mpg\00", align 1
@.str.373 = private unnamed_addr constant [11 x i8] c"video/mpeg\00", align 1
@.str.374 = private unnamed_addr constant [5 x i8] c"webm\00", align 1
@.str.375 = private unnamed_addr constant [11 x i8] c"video/webm\00", align 1
@.str.376 = private unnamed_addr constant [5 x i8] c"mpeg\00", align 1
@.str.377 = private unnamed_addr constant [4 x i8] c"mov\00", align 1
@.str.378 = private unnamed_addr constant [16 x i8] c"video/quicktime\00", align 1
@.str.379 = private unnamed_addr constant [4 x i8] c"mp4\00", align 1
@.str.380 = private unnamed_addr constant [10 x i8] c"video/mp4\00", align 1
@.str.381 = private unnamed_addr constant [4 x i8] c"m4v\00", align 1
@.str.382 = private unnamed_addr constant [12 x i8] c"video/x-m4v\00", align 1
@.str.383 = private unnamed_addr constant [4 x i8] c"asf\00", align 1
@.str.384 = private unnamed_addr constant [15 x i8] c"video/x-ms-asf\00", align 1
@.str.385 = private unnamed_addr constant [4 x i8] c"avi\00", align 1
@.str.386 = private unnamed_addr constant [16 x i8] c"video/x-msvideo\00", align 1
@.str.387 = private unnamed_addr constant [4 x i8] c"bmp\00", align 1
@.str.388 = private unnamed_addr constant [10 x i8] c"image/bmp\00", align 1
@__func__.mg_deliver_websocket_data = private unnamed_addr constant [26 x i8] c"mg_deliver_websocket_data\00", align 1
@.str.389 = private unnamed_addr constant [29 x i8] c"new_data_len >= existing_len\00", align 1
@.str.390 = private unnamed_addr constant [38 x i8] c"fragmented control frames are illegal\00", align 1
@.str.391 = private unnamed_addr constant [55 x i8] c"non-continuation in the middle of a fragmented message\00", align 1
@.str.392 = private unnamed_addr constant [19 x i8] c"overflowed message\00", align 1
@mg_ws_handshake.magic = internal global i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.393, i32 0, i32 0), align 8
@.str.393 = private unnamed_addr constant [37 x i8] c"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\00", align 1
@.str.394 = private unnamed_addr constant [76 x i8] c"HTTP/1.1 101 Switching Protocols\0D\0AUpgrade: websocket\0D\0AConnection: Upgrade\0D\0A\00", align 1
@.str.395 = private unnamed_addr constant [23 x i8] c"Sec-WebSocket-Protocol\00", align 1
@.str.396 = private unnamed_addr constant [27 x i8] c"Sec-WebSocket-Accept: %s%s\00", align 1
@.str.397 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@.str.398 = private unnamed_addr constant [11 x i8] c"%p %.*s %s\00", align 1
@.str.399 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.400 = private unnamed_addr constant [6 x i8] c"%04x \00", align 1
@.str.401 = private unnamed_addr constant [6 x i8] c" %02x\00", align 1
@.str.402 = private unnamed_addr constant [4 x i8] c"   \00", align 1
@.str.403 = private unnamed_addr constant [28 x i8] c"%p invalid len: %d, closing\00", align 1
@.str.404 = private unnamed_addr constant [14 x i8] c"Recv PINGRESP\00", align 1
@.str.405 = private unnamed_addr constant [13 x i8] c"Send PINGREQ\00", align 1
@.str.406 = private unnamed_addr constant [13 x i8] c"Ping timeout\00", align 1
@.str.407 = private unnamed_addr constant [107 x i8] c"%d %2x %d proto [%.*s] client_id [%.*s] will_topic [%.*s] will_msg [%.*s] user_name [%.*s] password [%.*s]\00", align 1
@.str.408 = private unnamed_addr constant [17 x i8] c"/etc/resolv.conf\00", align 1
@.str.409 = private unnamed_addr constant [23 x i8] c"nameserver %u.%u.%u.%u\00", align 1
@.str.410 = private unnamed_addr constant [12 x i8] c"%u.%u.%u.%u\00", align 1
@.str.411 = private unnamed_addr constant [19 x i8] c"ev=%d user_data=%p\00", align 1

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_base64_init(%struct.cs_base64_ctx* %ctx, void (i8, i8*)* %b64_putc, i8* %user_data) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %b64_putc.addr = alloca void (i8, i8*)*, align 8
  %user_data.addr = alloca i8*, align 8
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8
  store void (i8, i8*)* %b64_putc, void (i8, i8*)** %b64_putc.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %0, i32 0, i32 2
  store i32 0, i32* %chunk_size, align 4
  %1 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc.addr, align 8
  %2 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %b64_putc1 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %2, i32 0, i32 0
  store void (i8, i8*)* %1, void (i8, i8*)** %b64_putc1, align 8
  %3 = load i8*, i8** %user_data.addr, align 8
  %4 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %user_data2 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %4, i32 0, i32 3
  store i8* %3, i8** %user_data2, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* %str, i64 %len) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %str.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %src = alloca i8*, align 8
  %i = alloca i64, align 8
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8
  store i8* %str, i8** %str.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %str.addr, align 8
  store i8* %0, i8** %src, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8
  %2 = load i64, i64* %len.addr, align 8
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src, align 8
  %4 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4
  %5 = load i8, i8* %arrayidx, align 1
  %6 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %6, i32 0, i32 1
  %7 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %7, i32 0, i32 2
  %8 = load i32, i32* %chunk_size, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %chunk_size, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx1 = getelementptr inbounds [3 x i8], [3 x i8]* %chunk, i64 0, i64 %idxprom
  store i8 %5, i8* %arrayidx1, align 1
  %9 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size2 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %9, i32 0, i32 2
  %10 = load i32, i32* %chunk_size2, align 4
  %cmp3 = icmp eq i32 %10, 3
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %11 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  call void @cs_base64_emit_chunk(%struct.cs_base64_ctx* %11)
  %12 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size4 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %12, i32 0, i32 2
  store i32 0, i32* %chunk_size4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %13 = load i64, i64* %i, align 8
  %inc5 = add i64 %13, 1
  store i64 %inc5, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @cs_base64_emit_chunk(%struct.cs_base64_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8
  %0 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %chunk, i64 0, i64 0
  %1 = load i8, i8* %arrayidx, align 8
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %a, align 4
  %2 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk1 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %2, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [3 x i8], [3 x i8]* %chunk1, i64 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  store i32 %conv3, i32* %b, align 4
  %4 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk4 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %4, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [3 x i8], [3 x i8]* %chunk4, i64 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 2
  %conv6 = zext i8 %5 to i32
  store i32 %conv6, i32* %c, align 4
  %6 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %7 = load i32, i32* %a, align 4
  %shr = ashr i32 %7, 2
  call void @cs_base64_emit_code(%struct.cs_base64_ctx* %6, i32 %shr)
  %8 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %9 = load i32, i32* %a, align 4
  %and = and i32 %9, 3
  %shl = shl i32 %and, 4
  %10 = load i32, i32* %b, align 4
  %shr7 = ashr i32 %10, 4
  %or = or i32 %shl, %shr7
  call void @cs_base64_emit_code(%struct.cs_base64_ctx* %8, i32 %or)
  %11 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %11, i32 0, i32 2
  %12 = load i32, i32* %chunk_size, align 4
  %cmp = icmp sgt i32 %12, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %14 = load i32, i32* %b, align 4
  %and9 = and i32 %14, 15
  %shl10 = shl i32 %and9, 2
  %15 = load i32, i32* %c, align 4
  %shr11 = ashr i32 %15, 6
  %or12 = or i32 %shl10, %shr11
  call void @cs_base64_emit_code(%struct.cs_base64_ctx* %13, i32 %or12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %16 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size13 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %16, i32 0, i32 2
  %17 = load i32, i32* %chunk_size13, align 4
  %cmp14 = icmp sgt i32 %17, 2
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end
  %18 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %19 = load i32, i32* %c, align 4
  %and17 = and i32 %19, 63
  call void @cs_base64_emit_code(%struct.cs_base64_ctx* %18, i32 %and17)
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_base64_finish(%struct.cs_base64_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %i = alloca i32, align 4
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8
  %0 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %0, i32 0, i32 2
  %1 = load i32, i32* %chunk_size, align 4
  %cmp = icmp sgt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %2, i32 0, i32 1
  %3 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size1 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %3, i32 0, i32 2
  %4 = load i32, i32* %chunk_size1, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds [3 x i8], [3 x i8]* %chunk, i64 0, i64 %idxprom
  %5 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size2 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %5, i32 0, i32 2
  %6 = load i32, i32* %chunk_size2, align 4
  %sub = sub nsw i32 3, %6
  %conv = sext i32 %sub to i64
  %7 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk3 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %7, i32 0, i32 1
  %8 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size4 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %8, i32 0, i32 2
  %9 = load i32, i32* %chunk_size4, align 4
  %idxprom5 = sext i32 %9 to i64
  %arrayidx6 = getelementptr inbounds [3 x i8], [3 x i8]* %chunk3, i64 0, i64 %idxprom5
  %10 = call i64 @llvm.objectsize.i64.p0i8(i8* %arrayidx6, i1 false)
  %call = call i8* @__memset_chk(i8* %arrayidx, i32 0, i64 %conv, i64 %10) #5
  %11 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  call void @cs_base64_emit_chunk(%struct.cs_base64_ctx* %11)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %12 = load i32, i32* %i, align 4
  %13 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %chunk_size7 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %13, i32 0, i32 2
  %14 = load i32, i32* %chunk_size7, align 4
  %sub8 = sub nsw i32 3, %14
  %cmp9 = icmp slt i32 %12, %sub8
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %b64_putc = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %15, i32 0, i32 0
  %16 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc, align 8
  %17 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %user_data = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %17, i32 0, i32 3
  %18 = load i8*, i8** %user_data, align 8
  call void %16(i8 signext 61, i8* %18)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  ret void
}

; Function Attrs: nounwind
declare i8* @__memset_chk(i8*, i32, i64, i64) #1

; Function Attrs: nounwind readnone
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1) #2

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_base64_encode(i8* %src, i32 %src_len, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %src_len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i32 %src_len, i32* %src_len.addr, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %src_len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %src.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  store i32 %conv, i32* %a, align 4
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %5, 1
  %6 = load i32, i32* %src_len.addr, align 4
  %cmp1 = icmp sge i32 %add, %6
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %7 = load i8*, i8** %src.addr, align 8
  %8 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %8, 1
  %idxprom4 = sext i32 %add3 to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %7, i64 %idxprom4
  %9 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %9 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv6, %cond.false ]
  store i32 %cond, i32* %b, align 4
  %10 = load i32, i32* %i, align 4
  %add7 = add nsw i32 %10, 2
  %11 = load i32, i32* %src_len.addr, align 4
  %cmp8 = icmp sge i32 %add7, %11
  br i1 %cmp8, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16

cond.false11:                                     ; preds = %cond.end
  %12 = load i8*, i8** %src.addr, align 8
  %13 = load i32, i32* %i, align 4
  %add12 = add nsw i32 %13, 2
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %12, i64 %idxprom13
  %14 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %14 to i32
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi i32 [ 0, %cond.true10 ], [ %conv15, %cond.false11 ]
  store i32 %cond17, i32* %c, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end16
  %15 = load i8*, i8** @cs_base64_encode.b64, align 8
  %16 = load i32, i32* %a, align 4
  %shr = ashr i32 %16, 2
  %idxprom18 = sext i32 %shr to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %15, i64 %idxprom18
  %17 = load i8, i8* %arrayidx19, align 1
  %18 = load i8*, i8** %dst.addr, align 8
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  %idxprom20 = sext i32 %19 to i64
  %arrayidx21 = getelementptr inbounds i8, i8* %18, i64 %idxprom20
  store i8 %17, i8* %arrayidx21, align 1
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body22

do.body22:                                        ; preds = %do.end
  %20 = load i8*, i8** @cs_base64_encode.b64, align 8
  %21 = load i32, i32* %a, align 4
  %and = and i32 %21, 3
  %shl = shl i32 %and, 4
  %22 = load i32, i32* %b, align 4
  %shr23 = ashr i32 %22, 4
  %or = or i32 %shl, %shr23
  %idxprom24 = sext i32 %or to i64
  %arrayidx25 = getelementptr inbounds i8, i8* %20, i64 %idxprom24
  %23 = load i8, i8* %arrayidx25, align 1
  %24 = load i8*, i8** %dst.addr, align 8
  %25 = load i32, i32* %j, align 4
  %inc26 = add nsw i32 %25, 1
  store i32 %inc26, i32* %j, align 4
  %idxprom27 = sext i32 %25 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %24, i64 %idxprom27
  store i8 %23, i8* %arrayidx28, align 1
  br label %do.end29

do.end29:                                         ; preds = %do.body22
  %26 = load i32, i32* %i, align 4
  %add30 = add nsw i32 %26, 1
  %27 = load i32, i32* %src_len.addr, align 4
  %cmp31 = icmp slt i32 %add30, %27
  br i1 %cmp31, label %if.then, label %if.end

if.then:                                          ; preds = %do.end29
  br label %do.body33

do.body33:                                        ; preds = %if.then
  %28 = load i8*, i8** @cs_base64_encode.b64, align 8
  %29 = load i32, i32* %b, align 4
  %and34 = and i32 %29, 15
  %shl35 = shl i32 %and34, 2
  %30 = load i32, i32* %c, align 4
  %shr36 = ashr i32 %30, 6
  %or37 = or i32 %shl35, %shr36
  %idxprom38 = sext i32 %or37 to i64
  %arrayidx39 = getelementptr inbounds i8, i8* %28, i64 %idxprom38
  %31 = load i8, i8* %arrayidx39, align 1
  %32 = load i8*, i8** %dst.addr, align 8
  %33 = load i32, i32* %j, align 4
  %inc40 = add nsw i32 %33, 1
  store i32 %inc40, i32* %j, align 4
  %idxprom41 = sext i32 %33 to i64
  %arrayidx42 = getelementptr inbounds i8, i8* %32, i64 %idxprom41
  store i8 %31, i8* %arrayidx42, align 1
  br label %do.end43

do.end43:                                         ; preds = %do.body33
  br label %if.end

if.end:                                           ; preds = %do.end43, %do.end29
  %34 = load i32, i32* %i, align 4
  %add44 = add nsw i32 %34, 2
  %35 = load i32, i32* %src_len.addr, align 4
  %cmp45 = icmp slt i32 %add44, %35
  br i1 %cmp45, label %if.then47, label %if.end56

if.then47:                                        ; preds = %if.end
  br label %do.body48

do.body48:                                        ; preds = %if.then47
  %36 = load i8*, i8** @cs_base64_encode.b64, align 8
  %37 = load i32, i32* %c, align 4
  %and49 = and i32 %37, 63
  %idxprom50 = sext i32 %and49 to i64
  %arrayidx51 = getelementptr inbounds i8, i8* %36, i64 %idxprom50
  %38 = load i8, i8* %arrayidx51, align 1
  %39 = load i8*, i8** %dst.addr, align 8
  %40 = load i32, i32* %j, align 4
  %inc52 = add nsw i32 %40, 1
  store i32 %inc52, i32* %j, align 4
  %idxprom53 = sext i32 %40 to i64
  %arrayidx54 = getelementptr inbounds i8, i8* %39, i64 %idxprom53
  store i8 %38, i8* %arrayidx54, align 1
  br label %do.end55

do.end55:                                         ; preds = %do.body48
  br label %if.end56

if.end56:                                         ; preds = %do.end55, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end56
  %41 = load i32, i32* %i, align 4
  %add57 = add nsw i32 %41, 3
  store i32 %add57, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %do.end64, %for.end
  %42 = load i32, i32* %j, align 4
  %rem = srem i32 %42, 4
  %cmp58 = icmp ne i32 %rem, 0
  br i1 %cmp58, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body60

do.body60:                                        ; preds = %while.body
  %43 = load i8*, i8** %dst.addr, align 8
  %44 = load i32, i32* %j, align 4
  %inc61 = add nsw i32 %44, 1
  store i32 %inc61, i32* %j, align 4
  %idxprom62 = sext i32 %44 to i64
  %arrayidx63 = getelementptr inbounds i8, i8* %43, i64 %idxprom62
  store i8 61, i8* %arrayidx63, align 1
  br label %do.end64

do.end64:                                         ; preds = %do.body60
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body65

do.body65:                                        ; preds = %while.end
  %45 = load i8*, i8** %dst.addr, align 8
  %46 = load i32, i32* %j, align 4
  %inc66 = add nsw i32 %46, 1
  store i32 %inc66, i32* %j, align 4
  %idxprom67 = sext i32 %46 to i64
  %arrayidx68 = getelementptr inbounds i8, i8* %45, i64 %idxprom67
  store i8 0, i8* %arrayidx68, align 1
  br label %do.end69

do.end69:                                         ; preds = %do.body65
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_fprint_base64(%struct.__sFILE* %f, i8* %src, i32 %src_len) #0 {
entry:
  %f.addr = alloca %struct.__sFILE*, align 8
  %src.addr = alloca i8*, align 8
  %src_len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.__sFILE* %f, %struct.__sFILE** %f.addr, align 8
  store i8* %src, i8** %src.addr, align 8
  store i32 %src_len, i32* %src_len.addr, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %src_len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %src.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  store i32 %conv, i32* %a, align 4
  %5 = load i32, i32* %i, align 4
  %add = add nsw i32 %5, 1
  %6 = load i32, i32* %src_len.addr, align 4
  %cmp1 = icmp sge i32 %add, %6
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %7 = load i8*, i8** %src.addr, align 8
  %8 = load i32, i32* %i, align 4
  %add3 = add nsw i32 %8, 1
  %idxprom4 = sext i32 %add3 to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %7, i64 %idxprom4
  %9 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %9 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv6, %cond.false ]
  store i32 %cond, i32* %b, align 4
  %10 = load i32, i32* %i, align 4
  %add7 = add nsw i32 %10, 2
  %11 = load i32, i32* %src_len.addr, align 4
  %cmp8 = icmp sge i32 %add7, %11
  br i1 %cmp8, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %cond.end
  br label %cond.end16

cond.false11:                                     ; preds = %cond.end
  %12 = load i8*, i8** %src.addr, align 8
  %13 = load i32, i32* %i, align 4
  %add12 = add nsw i32 %13, 2
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %12, i64 %idxprom13
  %14 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %14 to i32
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false11, %cond.true10
  %cond17 = phi i32 [ 0, %cond.true10 ], [ %conv15, %cond.false11 ]
  store i32 %cond17, i32* %c, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end16
  %15 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8
  %16 = load i8*, i8** @cs_fprint_base64.b64, align 8
  %17 = load i32, i32* %a, align 4
  %shr = ashr i32 %17, 2
  %idxprom18 = sext i32 %shr to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %16, i64 %idxprom18
  %18 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %18 to i32
  %call = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %15, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv20)
  %19 = load i32, i32* %j, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %j, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body21

do.body21:                                        ; preds = %do.end
  %20 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8
  %21 = load i8*, i8** @cs_fprint_base64.b64, align 8
  %22 = load i32, i32* %a, align 4
  %and = and i32 %22, 3
  %shl = shl i32 %and, 4
  %23 = load i32, i32* %b, align 4
  %shr22 = ashr i32 %23, 4
  %or = or i32 %shl, %shr22
  %idxprom23 = sext i32 %or to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %21, i64 %idxprom23
  %24 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %24 to i32
  %call26 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv25)
  %25 = load i32, i32* %j, align 4
  %inc27 = add nsw i32 %25, 1
  store i32 %inc27, i32* %j, align 4
  br label %do.end28

do.end28:                                         ; preds = %do.body21
  %26 = load i32, i32* %i, align 4
  %add29 = add nsw i32 %26, 1
  %27 = load i32, i32* %src_len.addr, align 4
  %cmp30 = icmp slt i32 %add29, %27
  br i1 %cmp30, label %if.then, label %if.end

if.then:                                          ; preds = %do.end28
  br label %do.body32

do.body32:                                        ; preds = %if.then
  %28 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8
  %29 = load i8*, i8** @cs_fprint_base64.b64, align 8
  %30 = load i32, i32* %b, align 4
  %and33 = and i32 %30, 15
  %shl34 = shl i32 %and33, 2
  %31 = load i32, i32* %c, align 4
  %shr35 = ashr i32 %31, 6
  %or36 = or i32 %shl34, %shr35
  %idxprom37 = sext i32 %or36 to i64
  %arrayidx38 = getelementptr inbounds i8, i8* %29, i64 %idxprom37
  %32 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %32 to i32
  %call40 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv39)
  %33 = load i32, i32* %j, align 4
  %inc41 = add nsw i32 %33, 1
  store i32 %inc41, i32* %j, align 4
  br label %do.end42

do.end42:                                         ; preds = %do.body32
  br label %if.end

if.end:                                           ; preds = %do.end42, %do.end28
  %34 = load i32, i32* %i, align 4
  %add43 = add nsw i32 %34, 2
  %35 = load i32, i32* %src_len.addr, align 4
  %cmp44 = icmp slt i32 %add43, %35
  br i1 %cmp44, label %if.then46, label %if.end55

if.then46:                                        ; preds = %if.end
  br label %do.body47

do.body47:                                        ; preds = %if.then46
  %36 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8
  %37 = load i8*, i8** @cs_fprint_base64.b64, align 8
  %38 = load i32, i32* %c, align 4
  %and48 = and i32 %38, 63
  %idxprom49 = sext i32 %and48 to i64
  %arrayidx50 = getelementptr inbounds i8, i8* %37, i64 %idxprom49
  %39 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %39 to i32
  %call52 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 %conv51)
  %40 = load i32, i32* %j, align 4
  %inc53 = add nsw i32 %40, 1
  store i32 %inc53, i32* %j, align 4
  br label %do.end54

do.end54:                                         ; preds = %do.body47
  br label %if.end55

if.end55:                                         ; preds = %do.end54, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end55
  %41 = load i32, i32* %i, align 4
  %add56 = add nsw i32 %41, 3
  store i32 %add56, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %do.end62, %for.end
  %42 = load i32, i32* %j, align 4
  %rem = srem i32 %42, 4
  %cmp57 = icmp ne i32 %rem, 0
  br i1 %cmp57, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body59

do.body59:                                        ; preds = %while.body
  %43 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8
  %call60 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i32 61)
  %44 = load i32, i32* %j, align 4
  %inc61 = add nsw i32 %44, 1
  store i32 %inc61, i32* %j, align 4
  br label %do.end62

do.end62:                                         ; preds = %do.body59
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @fprintf(%struct.__sFILE*, i8*, ...) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @cs_base64_decode(i8* %s, i32 %len, i8* %dst, i32* %dec_len) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dec_len.addr = alloca i32*, align 8
  %a = alloca i8, align 1
  %b = alloca i8, align 1
  %c = alloca i8, align 1
  %d = alloca i8, align 1
  %orig_len = alloca i32, align 4
  %orig_dst = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i32* %dec_len, i32** %dec_len.addr, align 8
  %0 = load i32, i32* %len.addr, align 4
  store i32 %0, i32* %orig_len, align 4
  %1 = load i8*, i8** %dst.addr, align 8
  store i8* %1, i8** %orig_dst, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end45, %entry
  %2 = load i32, i32* %len.addr, align 4
  %cmp = icmp sge i32 %2, 4
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %3 = load i8*, i8** %s.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %call = call zeroext i8 @from_b64(i8 zeroext %4)
  store i8 %call, i8* %a, align 1
  %conv = zext i8 %call to i32
  %cmp1 = icmp ne i32 %conv, 255
  br i1 %cmp1, label %land.lhs.true3, label %land.end

land.lhs.true3:                                   ; preds = %land.lhs.true
  %5 = load i8*, i8** %s.addr, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx4, align 1
  %call5 = call zeroext i8 @from_b64(i8 zeroext %6)
  store i8 %call5, i8* %b, align 1
  %conv6 = zext i8 %call5 to i32
  %cmp7 = icmp ne i32 %conv6, 255
  br i1 %cmp7, label %land.lhs.true9, label %land.end

land.lhs.true9:                                   ; preds = %land.lhs.true3
  %7 = load i8*, i8** %s.addr, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i64 2
  %8 = load i8, i8* %arrayidx10, align 1
  %call11 = call zeroext i8 @from_b64(i8 zeroext %8)
  store i8 %call11, i8* %c, align 1
  %conv12 = zext i8 %call11 to i32
  %cmp13 = icmp ne i32 %conv12, 255
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true9
  %9 = load i8*, i8** %s.addr, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %9, i64 3
  %10 = load i8, i8* %arrayidx15, align 1
  %call16 = call zeroext i8 @from_b64(i8 zeroext %10)
  store i8 %call16, i8* %d, align 1
  %conv17 = zext i8 %call16 to i32
  %cmp18 = icmp ne i32 %conv17, 255
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true9, %land.lhs.true3, %land.lhs.true, %while.cond
  %11 = phi i1 [ false, %land.lhs.true9 ], [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp18, %land.rhs ]
  br i1 %11, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %12 = load i8*, i8** %s.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 4
  store i8* %add.ptr, i8** %s.addr, align 8
  %13 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %13, 4
  store i32 %sub, i32* %len.addr, align 4
  %14 = load i8, i8* %a, align 1
  %conv20 = zext i8 %14 to i32
  %cmp21 = icmp eq i32 %conv20, 200
  br i1 %cmp21, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %15 = load i8, i8* %b, align 1
  %conv23 = zext i8 %15 to i32
  %cmp24 = icmp eq i32 %conv23, 200
  br i1 %cmp24, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.body
  br label %while.end

if.end:                                           ; preds = %lor.lhs.false
  %16 = load i8, i8* %a, align 1
  %conv26 = zext i8 %16 to i32
  %shl = shl i32 %conv26, 2
  %17 = load i8, i8* %b, align 1
  %conv27 = zext i8 %17 to i32
  %shr = ashr i32 %conv27, 4
  %or = or i32 %shl, %shr
  %conv28 = trunc i32 %or to i8
  %18 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %dst.addr, align 8
  store i8 %conv28, i8* %18, align 1
  %19 = load i8, i8* %c, align 1
  %conv29 = zext i8 %19 to i32
  %cmp30 = icmp eq i32 %conv29, 200
  br i1 %cmp30, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end
  br label %while.end

if.end33:                                         ; preds = %if.end
  %20 = load i8, i8* %b, align 1
  %conv34 = zext i8 %20 to i32
  %shl35 = shl i32 %conv34, 4
  %21 = load i8, i8* %c, align 1
  %conv36 = zext i8 %21 to i32
  %shr37 = ashr i32 %conv36, 2
  %or38 = or i32 %shl35, %shr37
  %conv39 = trunc i32 %or38 to i8
  %22 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr40 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %incdec.ptr40, i8** %dst.addr, align 8
  store i8 %conv39, i8* %22, align 1
  %23 = load i8, i8* %d, align 1
  %conv41 = zext i8 %23 to i32
  %cmp42 = icmp eq i32 %conv41, 200
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %if.end33
  br label %while.end

if.end45:                                         ; preds = %if.end33
  %24 = load i8, i8* %c, align 1
  %conv46 = zext i8 %24 to i32
  %shl47 = shl i32 %conv46, 6
  %25 = load i8, i8* %d, align 1
  %conv48 = zext i8 %25 to i32
  %or49 = or i32 %shl47, %conv48
  %conv50 = trunc i32 %or49 to i8
  %26 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr51 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %incdec.ptr51, i8** %dst.addr, align 8
  store i8 %conv50, i8* %26, align 1
  br label %while.cond

while.end:                                        ; preds = %if.then44, %if.then32, %if.then, %land.end
  %27 = load i8*, i8** %dst.addr, align 8
  store i8 0, i8* %27, align 1
  %28 = load i32*, i32** %dec_len.addr, align 8
  %cmp52 = icmp ne i32* %28, null
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %while.end
  %29 = load i8*, i8** %dst.addr, align 8
  %30 = load i8*, i8** %orig_dst, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %29 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %30 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv55 = trunc i64 %sub.ptr.sub to i32
  %31 = load i32*, i32** %dec_len.addr, align 8
  store i32 %conv55, i32* %31, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %while.end
  %32 = load i32, i32* %orig_len, align 4
  %33 = load i32, i32* %len.addr, align 4
  %sub57 = sub nsw i32 %32, %33
  ret i32 %sub57
}

; Function Attrs: noinline nounwind ssp uwtable
define internal zeroext i8 @from_b64(i8 zeroext %ch) #0 {
entry:
  %ch.addr = alloca i8, align 1
  store i8 %ch, i8* %ch.addr, align 1
  %0 = load i8, i8* %ch.addr, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 127
  %idxprom = sext i32 %and to i64
  %arrayidx = getelementptr inbounds [128 x i8], [128 x i8]* @from_b64.tab, i64 0, i64 %idxprom
  %1 = load i8, i8* %arrayidx, align 1
  ret i8 %1
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @cs_log_set_file_level(i8* %file_level) #0 {
entry:
  %file_level.addr = alloca i8*, align 8
  %fl = alloca i8*, align 8
  store i8* %file_level, i8** %file_level.addr, align 8
  %0 = load i8*, i8** @s_file_level, align 8
  store i8* %0, i8** %fl, align 8
  %1 = load i8*, i8** %file_level.addr, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %file_level.addr, align 8
  %call = call i8* @strdup(i8* %2)
  store i8* %call, i8** @s_file_level, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store i8* null, i8** @s_file_level, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i8*, i8** %fl, align 8
  call void @free(i8* %3)
  ret void
}

declare i8* @strdup(i8*) #3

declare void @free(i8*) #3

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @cs_log_print_prefix(i32 %level, i8* %file, i32 %ln) #0 {
entry:
  %retval = alloca i32, align 4
  %level.addr = alloca i32, align 4
  %file.addr = alloca i8*, align 8
  %ln.addr = alloca i32, align 4
  %prefix = alloca [24 x i8], align 16
  %q = alloca i8*, align 8
  %p = alloca i8*, align 8
  %fl = alloca i64, align 8
  %ll = alloca i64, align 8
  %pl = alloca i64, align 8
  %c = alloca i8, align 1
  %pll = alloca i32, align 4
  %fl51 = alloca %struct.mg_str, align 8
  %ps = alloca %struct.mg_str, align 8
  %k = alloca %struct.mg_str, align 8
  %v = alloca %struct.mg_str, align 8
  %tmp = alloca %struct.mg_str, align 8
  %coerce = alloca %struct.mg_str, align 8
  %yes = alloca i8, align 1
  store i32 %level, i32* %level.addr, align 4
  store i8* %file, i8** %file.addr, align 8
  store i32 %ln, i32* %ln.addr, align 4
  store i64 0, i64* %fl, align 8
  store i64 0, i64* %ll, align 8
  store i64 0, i64* %pl, align 8
  %0 = load i32, i32* %level.addr, align 4
  %1 = load i32, i32* @cs_log_level, align 4
  %cmp = icmp sgt i32 %0, %1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** @s_file_level, align 8
  %cmp1 = icmp eq i8* %2, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8*, i8** %file.addr, align 8
  %4 = load i8*, i8** %file.addr, align 8
  %call = call i64 @strlen(i8* %4)
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %call
  store i8* %add.ptr, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %if.end
  %5 = load i8*, i8** %p, align 8
  %6 = load i8*, i8** %file.addr, align 8
  %cmp2 = icmp ne i8* %5, %6
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i8*, i8** %p, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i64 -1
  %8 = load i8, i8* %add.ptr3, align 1
  store i8 %8, i8* %c, align 1
  %9 = load i8, i8* %c, align 1
  %conv = sext i8 %9 to i32
  %cmp4 = icmp eq i32 %conv, 47
  br i1 %cmp4, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %10 = load i8, i8* %c, align 1
  %conv6 = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv6, 92
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false, %while.body
  br label %while.end

if.end10:                                         ; preds = %lor.lhs.false
  %11 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 -1
  store i8* %incdec.ptr, i8** %p, align 8
  %12 = load i64, i64* %fl, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %fl, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then9, %while.cond
  %13 = load i32, i32* %ln.addr, align 4
  %cmp11 = icmp slt i32 %13, 10000
  br i1 %cmp11, label %cond.true, label %cond.false25

cond.true:                                        ; preds = %while.end
  %14 = load i32, i32* %ln.addr, align 4
  %cmp13 = icmp slt i32 %14, 1000
  br i1 %cmp13, label %cond.true15, label %cond.false22

cond.true15:                                      ; preds = %cond.true
  %15 = load i32, i32* %ln.addr, align 4
  %cmp16 = icmp slt i32 %15, 100
  br i1 %cmp16, label %cond.true18, label %cond.false

cond.true18:                                      ; preds = %cond.true15
  %16 = load i32, i32* %ln.addr, align 4
  %cmp19 = icmp slt i32 %16, 10
  %cond = select i1 %cmp19, i32 1, i32 2
  br label %cond.end

cond.false:                                       ; preds = %cond.true15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true18
  %cond21 = phi i32 [ %cond, %cond.true18 ], [ 3, %cond.false ]
  br label %cond.end23

cond.false22:                                     ; preds = %cond.true
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %cond.end
  %cond24 = phi i32 [ %cond21, %cond.end ], [ 4, %cond.false22 ]
  br label %cond.end26

cond.false25:                                     ; preds = %while.end
  br label %cond.end26

cond.end26:                                       ; preds = %cond.false25, %cond.end23
  %cond27 = phi i32 [ %cond24, %cond.end23 ], [ 5, %cond.false25 ]
  %conv28 = sext i32 %cond27 to i64
  store i64 %conv28, i64* %ll, align 8
  %17 = load i64, i64* %fl, align 8
  %18 = load i64, i64* %ll, align 8
  %sub = sub i64 24, %18
  %sub29 = sub i64 %sub, 2
  %cmp30 = icmp ugt i64 %17, %sub29
  br i1 %cmp30, label %if.then32, label %if.end35

if.then32:                                        ; preds = %cond.end26
  %19 = load i64, i64* %ll, align 8
  %sub33 = sub i64 24, %19
  %sub34 = sub i64 %sub33, 2
  store i64 %sub34, i64* %fl, align 8
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %cond.end26
  %20 = load i64, i64* %fl, align 8
  %add = add i64 %20, 1
  %21 = load i64, i64* %ll, align 8
  %add36 = add i64 %add, %21
  store i64 %add36, i64* %pl, align 8
  %arraydecay = getelementptr inbounds [24 x i8], [24 x i8]* %prefix, i32 0, i32 0
  %22 = load i8*, i8** %p, align 8
  %23 = load i64, i64* %fl, align 8
  %call37 = call i8* @__memcpy_chk(i8* %arraydecay, i8* %22, i64 %23, i64 24) #5
  %arraydecay38 = getelementptr inbounds [24 x i8], [24 x i8]* %prefix, i32 0, i32 0
  %24 = load i64, i64* %pl, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %arraydecay38, i64 %24
  store i8* %add.ptr39, i8** %q, align 8
  %25 = load i8*, i8** %q, align 8
  %26 = load i64, i64* %pl, align 8
  %sub40 = sub i64 24, %26
  %27 = load i8*, i8** %q, align 8
  %28 = call i64 @llvm.objectsize.i64.p0i8(i8* %27, i1 false)
  %call41 = call i8* @__memset_chk(i8* %25, i32 32, i64 %sub40, i64 %28) #5
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end35
  %29 = load i32, i32* %ln.addr, align 4
  %rem = srem i32 %29, 10
  %add42 = add nsw i32 48, %rem
  %conv43 = trunc i32 %add42 to i8
  %30 = load i8*, i8** %q, align 8
  %incdec.ptr44 = getelementptr inbounds i8, i8* %30, i32 -1
  store i8* %incdec.ptr44, i8** %q, align 8
  store i8 %conv43, i8* %incdec.ptr44, align 1
  %31 = load i32, i32* %ln.addr, align 4
  %div = sdiv i32 %31, 10
  store i32 %div, i32* %ln.addr, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %32 = load i32, i32* %ln.addr, align 4
  %cmp45 = icmp sgt i32 %32, 0
  br i1 %cmp45, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %33 = load i8*, i8** %q, align 8
  %incdec.ptr47 = getelementptr inbounds i8, i8* %33, i32 -1
  store i8* %incdec.ptr47, i8** %q, align 8
  store i8 58, i8* %incdec.ptr47, align 1
  %34 = load i8*, i8** @s_file_level, align 8
  %cmp48 = icmp ne i8* %34, null
  br i1 %cmp48, label %if.then50, label %if.end77

if.then50:                                        ; preds = %do.end
  %35 = load i32, i32* @cs_log_level, align 4
  store i32 %35, i32* %pll, align 4
  %36 = load i8*, i8** @s_file_level, align 8
  %call52 = call { i8*, i64 } @mg_mk_str(i8* %36)
  %37 = bitcast %struct.mg_str* %fl51 to { i8*, i64 }*
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 0
  %39 = extractvalue { i8*, i64 } %call52, 0
  store i8* %39, i8** %38, align 8
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 1
  %41 = extractvalue { i8*, i64 } %call52, 1
  store i64 %41, i64* %40, align 8
  %p53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ps, i32 0, i32 0
  %arraydecay54 = getelementptr inbounds [24 x i8], [24 x i8]* %prefix, i32 0, i32 0
  store i8* %arraydecay54, i8** %p53, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ps, i32 0, i32 1
  %42 = load i64, i64* %pl, align 8
  store i64 %42, i64* %len, align 8
  br label %while.cond55

while.cond55:                                     ; preds = %if.then67, %if.then50
  %43 = bitcast %struct.mg_str* %fl51 to { i8*, i64 }*
  %44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %call56 = call { i8*, i64 } @mg_next_comma_list_entry_n(i8* %45, i64 %47, %struct.mg_str* %k, %struct.mg_str* %v)
  %48 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %48, i32 0, i32 0
  %50 = extractvalue { i8*, i64 } %call56, 0
  store i8* %50, i8** %49, align 8
  %51 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %48, i32 0, i32 1
  %52 = extractvalue { i8*, i64 } %call56, 1
  store i64 %52, i64* %51, align 8
  %53 = bitcast %struct.mg_str* %fl51 to i8*
  %54 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 16, i32 8, i1 false)
  %55 = bitcast %struct.mg_str* %tmp to i8*
  %56 = bitcast %struct.mg_str* %fl51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* %56, i64 16, i32 8, i1 false)
  %p57 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %tmp, i32 0, i32 0
  %57 = load i8*, i8** %p57, align 8
  %cmp58 = icmp ne i8* %57, null
  br i1 %cmp58, label %while.body60, label %while.end72

while.body60:                                     ; preds = %while.cond55
  %58 = bitcast %struct.mg_str* %ps to { i8*, i64 }*
  %59 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %58, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %58, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %struct.mg_str* %k to { i8*, i64 }*
  %64 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %63, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %63, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %call62 = call i32 @mg_str_starts_with(i8* %60, i64 %62, i8* %65, i64 %67)
  %tobool = icmp ne i32 %call62, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %while.body60
  %len63 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %v, i32 0, i32 1
  %68 = load i64, i64* %len63, align 8
  %cmp64 = icmp eq i64 %68, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.body60
  %69 = phi i1 [ true, %while.body60 ], [ %cmp64, %lor.rhs ]
  %lnot = xor i1 %69, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %yes, align 1
  %70 = load i8, i8* %yes, align 1
  %tobool66 = trunc i8 %70 to i1
  br i1 %tobool66, label %if.end68, label %if.then67

if.then67:                                        ; preds = %lor.end
  br label %while.cond55

if.end68:                                         ; preds = %lor.end
  %p69 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %v, i32 0, i32 0
  %71 = load i8*, i8** %p69, align 8
  %72 = load i8, i8* %71, align 1
  %conv70 = sext i8 %72 to i32
  %sub71 = sub nsw i32 %conv70, 48
  store i32 %sub71, i32* %pll, align 4
  br label %while.end72

while.end72:                                      ; preds = %if.end68, %while.cond55
  %73 = load i32, i32* %level.addr, align 4
  %74 = load i32, i32* %pll, align 4
  %cmp73 = icmp sgt i32 %73, %74
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %while.end72
  store i32 0, i32* %retval, align 4
  br label %return

if.end76:                                         ; preds = %while.end72
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %do.end
  %75 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8
  %cmp78 = icmp eq %struct.__sFILE* %75, null
  br i1 %cmp78, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.end77
  %76 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  store %struct.__sFILE* %76, %struct.__sFILE** @cs_log_file, align 8
  br label %if.end81

if.end81:                                         ; preds = %if.then80, %if.end77
  %77 = load i32, i32* %level.addr, align 4
  store i32 %77, i32* @cs_log_cur_msg_level, align 4
  %arraydecay82 = getelementptr inbounds [24 x i8], [24 x i8]* %prefix, i32 0, i32 0
  %78 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8
  %call83 = call i64 @"\01_fwrite"(i8* %arraydecay82, i64 1, i64 24, %struct.__sFILE* %78)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end81, %if.then75, %if.then
  %79 = load i32, i32* %retval, align 4
  ret i32 %79
}

declare i64 @strlen(i8*) #3

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #1

; Function Attrs: noinline nounwind ssp uwtable
define weak { i8*, i64 } @mg_mk_str(i8* %s) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s.addr = alloca i8*, align 8
  %ret = alloca %struct.mg_str, align 8
  store i8* %s, i8** %s.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ret, i32 0, i32 0
  %0 = load i8*, i8** %s.addr, align 8
  store i8* %0, i8** %p, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ret, i32 0, i32 1
  store i64 0, i64* %len, align 8
  %1 = load i8*, i8** %s.addr, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %s.addr, align 8
  %call = call i64 @strlen(i8* %2)
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ret, i32 0, i32 1
  store i64 %call, i64* %len1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = bitcast %struct.mg_str* %retval to i8*
  %4 = bitcast %struct.mg_str* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 16, i32 8, i1 false)
  %5 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %6 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  ret { i8*, i64 } %6
}

; Function Attrs: noinline nounwind ssp uwtable
define weak { i8*, i64 } @mg_next_comma_list_entry_n(i8* %list.coerce0, i64 %list.coerce1, %struct.mg_str* %val, %struct.mg_str* %eq_val) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %list = alloca %struct.mg_str, align 8
  %val.addr = alloca %struct.mg_str*, align 8
  %eq_val.addr = alloca %struct.mg_str*, align 8
  %coerce = alloca %struct.mg_str, align 8
  %chr = alloca i8*, align 8
  %coerce15 = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %list to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %list.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %list.coerce1, i64* %2, align 8
  store %struct.mg_str* %val, %struct.mg_str** %val.addr, align 8
  store %struct.mg_str* %eq_val, %struct.mg_str** %eq_val.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 1
  %3 = load i64, i64* %len, align 8
  %cmp = icmp eq i64 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call { i8*, i64 } @mg_mk_str(i8* null)
  %4 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %6 = extractvalue { i8*, i64 } %call, 0
  store i8* %6, i8** %5, align 8
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  %8 = extractvalue { i8*, i64 } %call, 1
  store i64 %8, i64* %7, align 8
  %9 = bitcast %struct.mg_str* %list to i8*
  %10 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 16, i32 8, i1 false)
  br label %if.end45

if.else:                                          ; preds = %entry
  store i8* null, i8** %chr, align 8
  %11 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %12 = bitcast %struct.mg_str* %11 to i8*
  %13 = bitcast %struct.mg_str* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  %14 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %15 = bitcast %struct.mg_str* %14 to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %call1 = call i8* @mg_strchr(i8* %17, i64 %19, i32 44)
  store i8* %call1, i8** %chr, align 8
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %if.then3, label %if.else11

if.then3:                                         ; preds = %if.else
  %20 = load i8*, i8** %chr, align 8
  %21 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %21, i32 0, i32 0
  %22 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %23 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %23, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len4, align 8
  %24 = load i8*, i8** %chr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %incdec.ptr, i8** %chr, align 8
  %25 = load i8*, i8** %chr, align 8
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 0
  %26 = load i8*, i8** %p5, align 8
  %sub.ptr.lhs.cast6 = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast7 = ptrtoint i8* %26 to i64
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast6, %sub.ptr.rhs.cast7
  %len9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 1
  %27 = load i64, i64* %len9, align 8
  %sub = sub i64 %27, %sub.ptr.sub8
  store i64 %sub, i64* %len9, align 8
  %28 = load i8*, i8** %chr, align 8
  %p10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 0
  store i8* %28, i8** %p10, align 8
  br label %if.end

if.else11:                                        ; preds = %if.else
  %p12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 0
  %29 = load i8*, i8** %p12, align 8
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %list, i32 0, i32 1
  %30 = load i64, i64* %len13, align 8
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %30
  %call14 = call { i8*, i64 } @mg_mk_str_n(i8* %add.ptr, i64 0)
  %31 = bitcast %struct.mg_str* %coerce15 to { i8*, i64 }*
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 0
  %33 = extractvalue { i8*, i64 } %call14, 0
  store i8* %33, i8** %32, align 8
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 1
  %35 = extractvalue { i8*, i64 } %call14, 1
  store i64 %35, i64* %34, align 8
  %36 = bitcast %struct.mg_str* %list to i8*
  %37 = bitcast %struct.mg_str* %coerce15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 16, i32 8, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then3
  %38 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %cmp16 = icmp ne %struct.mg_str* %38, null
  br i1 %cmp16, label %if.then17, label %if.end44

if.then17:                                        ; preds = %if.end
  %39 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %39, i32 0, i32 1
  store i64 0, i64* %len18, align 8
  %40 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %40, i32 0, i32 0
  %41 = load i8*, i8** %p19, align 8
  %42 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %42, i32 0, i32 1
  %43 = load i64, i64* %len20, align 8
  %call21 = call i8* @memchr(i8* %41, i32 61, i64 %43)
  %44 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %44, i32 0, i32 0
  store i8* %call21, i8** %p22, align 8
  %45 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %p23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %45, i32 0, i32 0
  %46 = load i8*, i8** %p23, align 8
  %cmp24 = icmp ne i8* %46, null
  br i1 %cmp24, label %if.then25, label %if.end43

if.then25:                                        ; preds = %if.then17
  %47 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %p26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %47, i32 0, i32 0
  %48 = load i8*, i8** %p26, align 8
  %incdec.ptr27 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr27, i8** %p26, align 8
  %49 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %p28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %49, i32 0, i32 0
  %50 = load i8*, i8** %p28, align 8
  %51 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %len29 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %51, i32 0, i32 1
  %52 = load i64, i64* %len29, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %50, i64 %52
  %53 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %53, i32 0, i32 0
  %54 = load i8*, i8** %p31, align 8
  %sub.ptr.lhs.cast32 = ptrtoint i8* %add.ptr30 to i64
  %sub.ptr.rhs.cast33 = ptrtoint i8* %54 to i64
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33
  %55 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %len35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %55, i32 0, i32 1
  store i64 %sub.ptr.sub34, i64* %len35, align 8
  %56 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %p36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %56, i32 0, i32 0
  %57 = load i8*, i8** %p36, align 8
  %58 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %58, i32 0, i32 0
  %59 = load i8*, i8** %p37, align 8
  %sub.ptr.lhs.cast38 = ptrtoint i8* %57 to i64
  %sub.ptr.rhs.cast39 = ptrtoint i8* %59 to i64
  %sub.ptr.sub40 = sub i64 %sub.ptr.lhs.cast38, %sub.ptr.rhs.cast39
  %sub41 = sub nsw i64 %sub.ptr.sub40, 1
  %60 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %len42 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %60, i32 0, i32 1
  store i64 %sub41, i64* %len42, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.then25, %if.then17
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then
  %61 = bitcast %struct.mg_str* %retval to i8*
  %62 = bitcast %struct.mg_str* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 16, i32 8, i1 false)
  %63 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %64 = load { i8*, i64 }, { i8*, i64 }* %63, align 8
  ret { i8*, i64 } %64
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_str_starts_with(i8* %s.coerce0, i64 %s.coerce1, i8* %prefix.coerce0, i64 %prefix.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %s = alloca %struct.mg_str, align 8
  %prefix = alloca %struct.mg_str, align 8
  %sp = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %prefix to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %prefix.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %prefix.coerce1, i64* %5, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %sp, i32 0, i32 0
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %6 = load i8*, i8** %p1, align 8
  store i8* %6, i8** %p, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %sp, i32 0, i32 1
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %prefix, i32 0, i32 1
  %7 = load i64, i64* %len2, align 8
  store i64 %7, i64* %len, align 8
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %8 = load i64, i64* %len3, align 8
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %prefix, i32 0, i32 1
  %9 = load i64, i64* %len4, align 8
  %cmp = icmp ult i64 %8, %9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %10 = bitcast %struct.mg_str* %sp to { i8*, i64 }*
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %struct.mg_str* %prefix to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %call = call i32 @mg_strcmp(i8* %12, i64 %14, i8* %17, i64 %19)
  %cmp5 = icmp eq i32 %call, 0
  %conv = zext i1 %cmp5 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

declare i64 @"\01_fwrite"(i8*, i64, i64, %struct.__sFILE*) #3

; Function Attrs: noinline nounwind ssp uwtable
define weak void @cs_log_printf(i8* %fmt, ...) #0 {
entry:
  %fmt.addr = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %fmt, i8** %fmt.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8
  %1 = load i8*, i8** %fmt.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @vfprintf(%struct.__sFILE* %0, i8* %1, %struct.__va_list_tag* %arraydecay2)
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %2 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8
  %call5 = call i32 @fputc(i32 10, %struct.__sFILE* %2)
  %3 = load %struct.__sFILE*, %struct.__sFILE** @cs_log_file, align 8
  %call6 = call i32 @fflush(%struct.__sFILE* %3)
  store i32 -1, i32* @cs_log_cur_msg_level, align 4
  ret void
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #5

declare i32 @vfprintf(%struct.__sFILE*, i8*, %struct.__va_list_tag*) #3

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #5

declare i32 @fputc(i32, %struct.__sFILE*) #3

declare i32 @fflush(%struct.__sFILE*) #3

; Function Attrs: noinline nounwind ssp uwtable
define weak void @cs_log_set_file(%struct.__sFILE* %file) #0 {
entry:
  %file.addr = alloca %struct.__sFILE*, align 8
  store %struct.__sFILE* %file, %struct.__sFILE** %file.addr, align 8
  %0 = load %struct.__sFILE*, %struct.__sFILE** %file.addr, align 8
  store %struct.__sFILE* %0, %struct.__sFILE** @cs_log_file, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @cs_log_set_level(i32 %level) #0 {
entry:
  %level.addr = alloca i32, align 4
  store i32 %level, i32* %level.addr, align 4
  %0 = load i32, i32* %level.addr, align 4
  store i32 %0, i32* @cs_log_level, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak double @cs_time() #0 {
entry:
  %retval = alloca double, align 8
  %now = alloca double, align 8
  %tv = alloca %struct.timeval, align 8
  %call = call i32 @gettimeofday(%struct.timeval* %tv, i8* null)
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store double 0.000000e+00, double* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0
  %0 = load i64, i64* %tv_sec, align 8
  %conv = sitofp i64 %0 to double
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1
  %1 = load i32, i32* %tv_usec, align 8
  %conv1 = sitofp i32 %1 to double
  %div = fdiv double %conv1, 1.000000e+06
  %add = fadd double %conv, %div
  store double %add, double* %now, align 8
  %2 = load double, double* %now, align 8
  store double %2, double* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load double, double* %retval, align 8
  ret double %3
}

declare i32 @gettimeofday(%struct.timeval*, i8*) #3

; Function Attrs: noinline nounwind ssp uwtable
define double @cs_timegm(%struct.tm* %tm) #0 {
entry:
  %tm.addr = alloca %struct.tm*, align 8
  %month = alloca i32, align 4
  %year = alloca i32, align 4
  %year_for_leap = alloca i32, align 4
  %rt = alloca i64, align 8
  store %struct.tm* %tm, %struct.tm** %tm.addr, align 8
  %0 = load %struct.tm*, %struct.tm** %tm.addr, align 8
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %0, i32 0, i32 4
  %1 = load i32, i32* %tm_mon, align 8
  %rem = srem i32 %1, 12
  store i32 %rem, i32* %month, align 4
  %2 = load %struct.tm*, %struct.tm** %tm.addr, align 8
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %2, i32 0, i32 5
  %3 = load i32, i32* %tm_year, align 4
  %4 = load %struct.tm*, %struct.tm** %tm.addr, align 8
  %tm_mon1 = getelementptr inbounds %struct.tm, %struct.tm* %4, i32 0, i32 4
  %5 = load i32, i32* %tm_mon1, align 8
  %div = sdiv i32 %5, 12
  %add = add nsw i32 %3, %div
  store i32 %add, i32* %year, align 4
  %6 = load i32, i32* %month, align 4
  %cmp = icmp slt i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %month, align 4
  %add2 = add nsw i32 %7, 12
  store i32 %add2, i32* %month, align 4
  %8 = load i32, i32* %year, align 4
  %dec = add nsw i32 %8, -1
  store i32 %dec, i32* %year, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i32, i32* %month, align 4
  %cmp3 = icmp sgt i32 %9, 1
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %10 = load i32, i32* %year, align 4
  %add4 = add nsw i32 %10, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load i32, i32* %year, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add4, %cond.true ], [ %11, %cond.false ]
  store i32 %cond, i32* %year_for_leap, align 4
  %12 = load %struct.tm*, %struct.tm** %tm.addr, align 8
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %12, i32 0, i32 0
  %13 = load i32, i32* %tm_sec, align 8
  %14 = load %struct.tm*, %struct.tm** %tm.addr, align 8
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %14, i32 0, i32 1
  %15 = load i32, i32* %tm_min, align 4
  %16 = load %struct.tm*, %struct.tm** %tm.addr, align 8
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %16, i32 0, i32 2
  %17 = load i32, i32* %tm_hour, align 8
  %18 = load i32, i32* %month, align 4
  %idxprom = sext i32 %18 to i64
  %arrayidx = getelementptr inbounds [12 x i32], [12 x i32]* @cs_timegm.month_day, i64 0, i64 %idxprom
  %19 = load i32, i32* %arrayidx, align 4
  %20 = load %struct.tm*, %struct.tm** %tm.addr, align 8
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %20, i32 0, i32 3
  %21 = load i32, i32* %tm_mday, align 4
  %add5 = add nsw i32 %19, %21
  %sub = sub nsw i32 %add5, 1
  %22 = load i32, i32* %year, align 4
  %sub6 = sub nsw i32 %22, 70
  %mul = mul nsw i32 365, %sub6
  %add7 = add nsw i32 %sub, %mul
  %23 = load i32, i32* %year_for_leap, align 4
  %sub8 = sub nsw i32 %23, 69
  %div9 = sdiv i32 %sub8, 4
  %add10 = add nsw i32 %add7, %div9
  %24 = load i32, i32* %year_for_leap, align 4
  %sub11 = sub nsw i32 %24, 1
  %div12 = sdiv i32 %sub11, 100
  %sub13 = sub nsw i32 %add10, %div12
  %25 = load i32, i32* %year_for_leap, align 4
  %add14 = add nsw i32 %25, 299
  %div15 = sdiv i32 %add14, 400
  %add16 = add nsw i32 %sub13, %div15
  %mul17 = mul nsw i32 24, %add16
  %add18 = add nsw i32 %17, %mul17
  %mul19 = mul nsw i32 60, %add18
  %add20 = add nsw i32 %15, %mul19
  %mul21 = mul nsw i32 60, %add20
  %add22 = add nsw i32 %13, %mul21
  %conv = sext i32 %add22 to i64
  store i64 %conv, i64* %rt, align 8
  %26 = load i64, i64* %rt, align 8
  %cmp23 = icmp slt i64 %26, 0
  br i1 %cmp23, label %cond.true25, label %cond.false26

cond.true25:                                      ; preds = %cond.end
  br label %cond.end28

cond.false26:                                     ; preds = %cond.end
  %27 = load i64, i64* %rt, align 8
  %conv27 = sitofp i64 %27 to double
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false26, %cond.true25
  %cond29 = phi double [ -1.000000e+00, %cond.true25 ], [ %conv27, %cond.false26 ]
  ret double %cond29
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_md5_init(%struct.cs_md5_ctx* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.cs_md5_ctx*, align 8
  store %struct.cs_md5_ctx* %ctx, %struct.cs_md5_ctx** %ctx.addr, align 8
  %0 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %buf, i64 0, i64 0
  store i32 1732584193, i32* %arrayidx, align 4
  %1 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf1 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %1, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %buf1, i64 0, i64 1
  store i32 -271733879, i32* %arrayidx2, align 4
  %2 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf3 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %2, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %buf3, i64 0, i64 2
  store i32 -1732584194, i32* %arrayidx4, align 4
  %3 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf5 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %3, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %buf5, i64 0, i64 3
  store i32 271733878, i32* %arrayidx6, align 4
  %4 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %4, i32 0, i32 1
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i64 0, i64 0
  store i32 0, i32* %arrayidx7, align 4
  %5 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits8 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %5, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %bits8, i64 0, i64 1
  store i32 0, i32* %arrayidx9, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_md5_update(%struct.cs_md5_ctx* %ctx, i8* %buf, i64 %len) #0 {
entry:
  %ctx.addr = alloca %struct.cs_md5_ctx*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %t = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.cs_md5_ctx* %ctx, %struct.cs_md5_ctx** %ctx.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i64 0, i64 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %t, align 4
  %2 = load i32, i32* %t, align 4
  %3 = load i64, i64* %len.addr, align 8
  %conv = trunc i64 %3 to i32
  %shl = shl i32 %conv, 3
  %add = add i32 %2, %shl
  %4 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits1 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %4, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %bits1, i64 0, i64 0
  store i32 %add, i32* %arrayidx2, align 4
  %5 = load i32, i32* %t, align 4
  %cmp = icmp ult i32 %add, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits4 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %6, i32 0, i32 1
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %bits4, i64 0, i64 1
  %7 = load i32, i32* %arrayidx5, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %arrayidx5, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i64, i64* %len.addr, align 8
  %conv6 = trunc i64 %8 to i32
  %shr = lshr i32 %conv6, 29
  %9 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits7 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %9, i32 0, i32 1
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %bits7, i64 0, i64 1
  %10 = load i32, i32* %arrayidx8, align 4
  %add9 = add i32 %10, %shr
  store i32 %add9, i32* %arrayidx8, align 4
  %11 = load i32, i32* %t, align 4
  %shr10 = lshr i32 %11, 3
  %and = and i32 %shr10, 63
  store i32 %and, i32* %t, align 4
  %12 = load i32, i32* %t, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.then11, label %if.end29

if.then11:                                        ; preds = %if.end
  %13 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %13, i32 0, i32 2
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %in, i32 0, i32 0
  %14 = load i32, i32* %t, align 4
  %idx.ext = zext i32 %14 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8
  %15 = load i32, i32* %t, align 4
  %sub = sub i32 64, %15
  store i32 %sub, i32* %t, align 4
  %16 = load i64, i64* %len.addr, align 8
  %17 = load i32, i32* %t, align 4
  %conv12 = zext i32 %17 to i64
  %cmp13 = icmp ult i64 %16, %conv12
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.then11
  %18 = load i8*, i8** %p, align 8
  %19 = load i8*, i8** %buf.addr, align 8
  %20 = load i64, i64* %len.addr, align 8
  %21 = load i8*, i8** %p, align 8
  %22 = call i64 @llvm.objectsize.i64.p0i8(i8* %21, i1 false)
  %call = call i8* @__memcpy_chk(i8* %18, i8* %19, i64 %20, i64 %22) #5
  br label %return

if.end16:                                         ; preds = %if.then11
  %23 = load i8*, i8** %p, align 8
  %24 = load i8*, i8** %buf.addr, align 8
  %25 = load i32, i32* %t, align 4
  %conv17 = zext i32 %25 to i64
  %26 = load i8*, i8** %p, align 8
  %27 = call i64 @llvm.objectsize.i64.p0i8(i8* %26, i1 false)
  %call18 = call i8* @__memcpy_chk(i8* %23, i8* %24, i64 %conv17, i64 %27) #5
  %28 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in19 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %28, i32 0, i32 2
  %arraydecay20 = getelementptr inbounds [64 x i8], [64 x i8]* %in19, i32 0, i32 0
  call void @byteReverse(i8* %arraydecay20, i32 16)
  %29 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf21 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %29, i32 0, i32 0
  %arraydecay22 = getelementptr inbounds [4 x i32], [4 x i32]* %buf21, i32 0, i32 0
  %30 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in23 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %30, i32 0, i32 2
  %arraydecay24 = getelementptr inbounds [64 x i8], [64 x i8]* %in23, i32 0, i32 0
  %31 = bitcast i8* %arraydecay24 to i32*
  call void @cs_md5_transform(i32* %arraydecay22, i32* %31)
  %32 = load i32, i32* %t, align 4
  %33 = load i8*, i8** %buf.addr, align 8
  %idx.ext25 = zext i32 %32 to i64
  %add.ptr26 = getelementptr inbounds i8, i8* %33, i64 %idx.ext25
  store i8* %add.ptr26, i8** %buf.addr, align 8
  %34 = load i32, i32* %t, align 4
  %conv27 = zext i32 %34 to i64
  %35 = load i64, i64* %len.addr, align 8
  %sub28 = sub i64 %35, %conv27
  store i64 %sub28, i64* %len.addr, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.end16, %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end29
  %36 = load i64, i64* %len.addr, align 8
  %cmp30 = icmp uge i64 %36, 64
  br i1 %cmp30, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %37 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in32 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %37, i32 0, i32 2
  %arraydecay33 = getelementptr inbounds [64 x i8], [64 x i8]* %in32, i32 0, i32 0
  %38 = load i8*, i8** %buf.addr, align 8
  %39 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in34 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %39, i32 0, i32 2
  %arraydecay35 = getelementptr inbounds [64 x i8], [64 x i8]* %in34, i32 0, i32 0
  %40 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay35, i1 false)
  %call36 = call i8* @__memcpy_chk(i8* %arraydecay33, i8* %38, i64 64, i64 %40) #5
  %41 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in37 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %41, i32 0, i32 2
  %arraydecay38 = getelementptr inbounds [64 x i8], [64 x i8]* %in37, i32 0, i32 0
  call void @byteReverse(i8* %arraydecay38, i32 16)
  %42 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf39 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %42, i32 0, i32 0
  %arraydecay40 = getelementptr inbounds [4 x i32], [4 x i32]* %buf39, i32 0, i32 0
  %43 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in41 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %43, i32 0, i32 2
  %arraydecay42 = getelementptr inbounds [64 x i8], [64 x i8]* %in41, i32 0, i32 0
  %44 = bitcast i8* %arraydecay42 to i32*
  call void @cs_md5_transform(i32* %arraydecay40, i32* %44)
  %45 = load i8*, i8** %buf.addr, align 8
  %add.ptr43 = getelementptr inbounds i8, i8* %45, i64 64
  store i8* %add.ptr43, i8** %buf.addr, align 8
  %46 = load i64, i64* %len.addr, align 8
  %sub44 = sub i64 %46, 64
  store i64 %sub44, i64* %len.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %47 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in45 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %47, i32 0, i32 2
  %arraydecay46 = getelementptr inbounds [64 x i8], [64 x i8]* %in45, i32 0, i32 0
  %48 = load i8*, i8** %buf.addr, align 8
  %49 = load i64, i64* %len.addr, align 8
  %50 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in47 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %50, i32 0, i32 2
  %arraydecay48 = getelementptr inbounds [64 x i8], [64 x i8]* %in47, i32 0, i32 0
  %51 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay48, i1 false)
  %call49 = call i8* @__memcpy_chk(i8* %arraydecay46, i8* %48, i64 %49, i64 %51) #5
  br label %return

return:                                           ; preds = %while.end, %if.then15
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @byteReverse(i8* %buf, i32 %longs) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %longs.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %longs, i32* %longs.addr, align 4
  %0 = load i8*, i8** %buf.addr, align 8
  %1 = load i32, i32* %longs.addr, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @cs_md5_transform(i32* %buf, i32* %in) #0 {
entry:
  %buf.addr = alloca i32*, align 8
  %in.addr = alloca i32*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  store i32* %buf, i32** %buf.addr, align 8
  store i32* %in, i32** %in.addr, align 8
  %0 = load i32*, i32** %buf.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %a, align 4
  %2 = load i32*, i32** %buf.addr, align 8
  %arrayidx1 = getelementptr inbounds i32, i32* %2, i64 1
  %3 = load i32, i32* %arrayidx1, align 4
  store i32 %3, i32* %b, align 4
  %4 = load i32*, i32** %buf.addr, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %4, i64 2
  %5 = load i32, i32* %arrayidx2, align 4
  store i32 %5, i32* %c, align 4
  %6 = load i32*, i32** %buf.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %6, i64 3
  %7 = load i32, i32* %arrayidx3, align 4
  store i32 %7, i32* %d, align 4
  %8 = load i32, i32* %d, align 4
  %9 = load i32, i32* %b, align 4
  %10 = load i32, i32* %c, align 4
  %11 = load i32, i32* %d, align 4
  %xor = xor i32 %10, %11
  %and = and i32 %9, %xor
  %xor4 = xor i32 %8, %and
  %12 = load i32*, i32** %in.addr, align 8
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i64 0
  %13 = load i32, i32* %arrayidx5, align 4
  %add = add i32 %xor4, %13
  %add6 = add i32 %add, -680876936
  %14 = load i32, i32* %a, align 4
  %add7 = add i32 %14, %add6
  store i32 %add7, i32* %a, align 4
  %15 = load i32, i32* %a, align 4
  %shl = shl i32 %15, 7
  %16 = load i32, i32* %a, align 4
  %shr = lshr i32 %16, 25
  %or = or i32 %shl, %shr
  store i32 %or, i32* %a, align 4
  %17 = load i32, i32* %b, align 4
  %18 = load i32, i32* %a, align 4
  %add8 = add i32 %18, %17
  store i32 %add8, i32* %a, align 4
  %19 = load i32, i32* %c, align 4
  %20 = load i32, i32* %a, align 4
  %21 = load i32, i32* %b, align 4
  %22 = load i32, i32* %c, align 4
  %xor9 = xor i32 %21, %22
  %and10 = and i32 %20, %xor9
  %xor11 = xor i32 %19, %and10
  %23 = load i32*, i32** %in.addr, align 8
  %arrayidx12 = getelementptr inbounds i32, i32* %23, i64 1
  %24 = load i32, i32* %arrayidx12, align 4
  %add13 = add i32 %xor11, %24
  %add14 = add i32 %add13, -389564586
  %25 = load i32, i32* %d, align 4
  %add15 = add i32 %25, %add14
  store i32 %add15, i32* %d, align 4
  %26 = load i32, i32* %d, align 4
  %shl16 = shl i32 %26, 12
  %27 = load i32, i32* %d, align 4
  %shr17 = lshr i32 %27, 20
  %or18 = or i32 %shl16, %shr17
  store i32 %or18, i32* %d, align 4
  %28 = load i32, i32* %a, align 4
  %29 = load i32, i32* %d, align 4
  %add19 = add i32 %29, %28
  store i32 %add19, i32* %d, align 4
  %30 = load i32, i32* %b, align 4
  %31 = load i32, i32* %d, align 4
  %32 = load i32, i32* %a, align 4
  %33 = load i32, i32* %b, align 4
  %xor20 = xor i32 %32, %33
  %and21 = and i32 %31, %xor20
  %xor22 = xor i32 %30, %and21
  %34 = load i32*, i32** %in.addr, align 8
  %arrayidx23 = getelementptr inbounds i32, i32* %34, i64 2
  %35 = load i32, i32* %arrayidx23, align 4
  %add24 = add i32 %xor22, %35
  %add25 = add i32 %add24, 606105819
  %36 = load i32, i32* %c, align 4
  %add26 = add i32 %36, %add25
  store i32 %add26, i32* %c, align 4
  %37 = load i32, i32* %c, align 4
  %shl27 = shl i32 %37, 17
  %38 = load i32, i32* %c, align 4
  %shr28 = lshr i32 %38, 15
  %or29 = or i32 %shl27, %shr28
  store i32 %or29, i32* %c, align 4
  %39 = load i32, i32* %d, align 4
  %40 = load i32, i32* %c, align 4
  %add30 = add i32 %40, %39
  store i32 %add30, i32* %c, align 4
  %41 = load i32, i32* %a, align 4
  %42 = load i32, i32* %c, align 4
  %43 = load i32, i32* %d, align 4
  %44 = load i32, i32* %a, align 4
  %xor31 = xor i32 %43, %44
  %and32 = and i32 %42, %xor31
  %xor33 = xor i32 %41, %and32
  %45 = load i32*, i32** %in.addr, align 8
  %arrayidx34 = getelementptr inbounds i32, i32* %45, i64 3
  %46 = load i32, i32* %arrayidx34, align 4
  %add35 = add i32 %xor33, %46
  %add36 = add i32 %add35, -1044525330
  %47 = load i32, i32* %b, align 4
  %add37 = add i32 %47, %add36
  store i32 %add37, i32* %b, align 4
  %48 = load i32, i32* %b, align 4
  %shl38 = shl i32 %48, 22
  %49 = load i32, i32* %b, align 4
  %shr39 = lshr i32 %49, 10
  %or40 = or i32 %shl38, %shr39
  store i32 %or40, i32* %b, align 4
  %50 = load i32, i32* %c, align 4
  %51 = load i32, i32* %b, align 4
  %add41 = add i32 %51, %50
  store i32 %add41, i32* %b, align 4
  %52 = load i32, i32* %d, align 4
  %53 = load i32, i32* %b, align 4
  %54 = load i32, i32* %c, align 4
  %55 = load i32, i32* %d, align 4
  %xor42 = xor i32 %54, %55
  %and43 = and i32 %53, %xor42
  %xor44 = xor i32 %52, %and43
  %56 = load i32*, i32** %in.addr, align 8
  %arrayidx45 = getelementptr inbounds i32, i32* %56, i64 4
  %57 = load i32, i32* %arrayidx45, align 4
  %add46 = add i32 %xor44, %57
  %add47 = add i32 %add46, -176418897
  %58 = load i32, i32* %a, align 4
  %add48 = add i32 %58, %add47
  store i32 %add48, i32* %a, align 4
  %59 = load i32, i32* %a, align 4
  %shl49 = shl i32 %59, 7
  %60 = load i32, i32* %a, align 4
  %shr50 = lshr i32 %60, 25
  %or51 = or i32 %shl49, %shr50
  store i32 %or51, i32* %a, align 4
  %61 = load i32, i32* %b, align 4
  %62 = load i32, i32* %a, align 4
  %add52 = add i32 %62, %61
  store i32 %add52, i32* %a, align 4
  %63 = load i32, i32* %c, align 4
  %64 = load i32, i32* %a, align 4
  %65 = load i32, i32* %b, align 4
  %66 = load i32, i32* %c, align 4
  %xor53 = xor i32 %65, %66
  %and54 = and i32 %64, %xor53
  %xor55 = xor i32 %63, %and54
  %67 = load i32*, i32** %in.addr, align 8
  %arrayidx56 = getelementptr inbounds i32, i32* %67, i64 5
  %68 = load i32, i32* %arrayidx56, align 4
  %add57 = add i32 %xor55, %68
  %add58 = add i32 %add57, 1200080426
  %69 = load i32, i32* %d, align 4
  %add59 = add i32 %69, %add58
  store i32 %add59, i32* %d, align 4
  %70 = load i32, i32* %d, align 4
  %shl60 = shl i32 %70, 12
  %71 = load i32, i32* %d, align 4
  %shr61 = lshr i32 %71, 20
  %or62 = or i32 %shl60, %shr61
  store i32 %or62, i32* %d, align 4
  %72 = load i32, i32* %a, align 4
  %73 = load i32, i32* %d, align 4
  %add63 = add i32 %73, %72
  store i32 %add63, i32* %d, align 4
  %74 = load i32, i32* %b, align 4
  %75 = load i32, i32* %d, align 4
  %76 = load i32, i32* %a, align 4
  %77 = load i32, i32* %b, align 4
  %xor64 = xor i32 %76, %77
  %and65 = and i32 %75, %xor64
  %xor66 = xor i32 %74, %and65
  %78 = load i32*, i32** %in.addr, align 8
  %arrayidx67 = getelementptr inbounds i32, i32* %78, i64 6
  %79 = load i32, i32* %arrayidx67, align 4
  %add68 = add i32 %xor66, %79
  %add69 = add i32 %add68, -1473231341
  %80 = load i32, i32* %c, align 4
  %add70 = add i32 %80, %add69
  store i32 %add70, i32* %c, align 4
  %81 = load i32, i32* %c, align 4
  %shl71 = shl i32 %81, 17
  %82 = load i32, i32* %c, align 4
  %shr72 = lshr i32 %82, 15
  %or73 = or i32 %shl71, %shr72
  store i32 %or73, i32* %c, align 4
  %83 = load i32, i32* %d, align 4
  %84 = load i32, i32* %c, align 4
  %add74 = add i32 %84, %83
  store i32 %add74, i32* %c, align 4
  %85 = load i32, i32* %a, align 4
  %86 = load i32, i32* %c, align 4
  %87 = load i32, i32* %d, align 4
  %88 = load i32, i32* %a, align 4
  %xor75 = xor i32 %87, %88
  %and76 = and i32 %86, %xor75
  %xor77 = xor i32 %85, %and76
  %89 = load i32*, i32** %in.addr, align 8
  %arrayidx78 = getelementptr inbounds i32, i32* %89, i64 7
  %90 = load i32, i32* %arrayidx78, align 4
  %add79 = add i32 %xor77, %90
  %add80 = add i32 %add79, -45705983
  %91 = load i32, i32* %b, align 4
  %add81 = add i32 %91, %add80
  store i32 %add81, i32* %b, align 4
  %92 = load i32, i32* %b, align 4
  %shl82 = shl i32 %92, 22
  %93 = load i32, i32* %b, align 4
  %shr83 = lshr i32 %93, 10
  %or84 = or i32 %shl82, %shr83
  store i32 %or84, i32* %b, align 4
  %94 = load i32, i32* %c, align 4
  %95 = load i32, i32* %b, align 4
  %add85 = add i32 %95, %94
  store i32 %add85, i32* %b, align 4
  %96 = load i32, i32* %d, align 4
  %97 = load i32, i32* %b, align 4
  %98 = load i32, i32* %c, align 4
  %99 = load i32, i32* %d, align 4
  %xor86 = xor i32 %98, %99
  %and87 = and i32 %97, %xor86
  %xor88 = xor i32 %96, %and87
  %100 = load i32*, i32** %in.addr, align 8
  %arrayidx89 = getelementptr inbounds i32, i32* %100, i64 8
  %101 = load i32, i32* %arrayidx89, align 4
  %add90 = add i32 %xor88, %101
  %add91 = add i32 %add90, 1770035416
  %102 = load i32, i32* %a, align 4
  %add92 = add i32 %102, %add91
  store i32 %add92, i32* %a, align 4
  %103 = load i32, i32* %a, align 4
  %shl93 = shl i32 %103, 7
  %104 = load i32, i32* %a, align 4
  %shr94 = lshr i32 %104, 25
  %or95 = or i32 %shl93, %shr94
  store i32 %or95, i32* %a, align 4
  %105 = load i32, i32* %b, align 4
  %106 = load i32, i32* %a, align 4
  %add96 = add i32 %106, %105
  store i32 %add96, i32* %a, align 4
  %107 = load i32, i32* %c, align 4
  %108 = load i32, i32* %a, align 4
  %109 = load i32, i32* %b, align 4
  %110 = load i32, i32* %c, align 4
  %xor97 = xor i32 %109, %110
  %and98 = and i32 %108, %xor97
  %xor99 = xor i32 %107, %and98
  %111 = load i32*, i32** %in.addr, align 8
  %arrayidx100 = getelementptr inbounds i32, i32* %111, i64 9
  %112 = load i32, i32* %arrayidx100, align 4
  %add101 = add i32 %xor99, %112
  %add102 = add i32 %add101, -1958414417
  %113 = load i32, i32* %d, align 4
  %add103 = add i32 %113, %add102
  store i32 %add103, i32* %d, align 4
  %114 = load i32, i32* %d, align 4
  %shl104 = shl i32 %114, 12
  %115 = load i32, i32* %d, align 4
  %shr105 = lshr i32 %115, 20
  %or106 = or i32 %shl104, %shr105
  store i32 %or106, i32* %d, align 4
  %116 = load i32, i32* %a, align 4
  %117 = load i32, i32* %d, align 4
  %add107 = add i32 %117, %116
  store i32 %add107, i32* %d, align 4
  %118 = load i32, i32* %b, align 4
  %119 = load i32, i32* %d, align 4
  %120 = load i32, i32* %a, align 4
  %121 = load i32, i32* %b, align 4
  %xor108 = xor i32 %120, %121
  %and109 = and i32 %119, %xor108
  %xor110 = xor i32 %118, %and109
  %122 = load i32*, i32** %in.addr, align 8
  %arrayidx111 = getelementptr inbounds i32, i32* %122, i64 10
  %123 = load i32, i32* %arrayidx111, align 4
  %add112 = add i32 %xor110, %123
  %add113 = add i32 %add112, -42063
  %124 = load i32, i32* %c, align 4
  %add114 = add i32 %124, %add113
  store i32 %add114, i32* %c, align 4
  %125 = load i32, i32* %c, align 4
  %shl115 = shl i32 %125, 17
  %126 = load i32, i32* %c, align 4
  %shr116 = lshr i32 %126, 15
  %or117 = or i32 %shl115, %shr116
  store i32 %or117, i32* %c, align 4
  %127 = load i32, i32* %d, align 4
  %128 = load i32, i32* %c, align 4
  %add118 = add i32 %128, %127
  store i32 %add118, i32* %c, align 4
  %129 = load i32, i32* %a, align 4
  %130 = load i32, i32* %c, align 4
  %131 = load i32, i32* %d, align 4
  %132 = load i32, i32* %a, align 4
  %xor119 = xor i32 %131, %132
  %and120 = and i32 %130, %xor119
  %xor121 = xor i32 %129, %and120
  %133 = load i32*, i32** %in.addr, align 8
  %arrayidx122 = getelementptr inbounds i32, i32* %133, i64 11
  %134 = load i32, i32* %arrayidx122, align 4
  %add123 = add i32 %xor121, %134
  %add124 = add i32 %add123, -1990404162
  %135 = load i32, i32* %b, align 4
  %add125 = add i32 %135, %add124
  store i32 %add125, i32* %b, align 4
  %136 = load i32, i32* %b, align 4
  %shl126 = shl i32 %136, 22
  %137 = load i32, i32* %b, align 4
  %shr127 = lshr i32 %137, 10
  %or128 = or i32 %shl126, %shr127
  store i32 %or128, i32* %b, align 4
  %138 = load i32, i32* %c, align 4
  %139 = load i32, i32* %b, align 4
  %add129 = add i32 %139, %138
  store i32 %add129, i32* %b, align 4
  %140 = load i32, i32* %d, align 4
  %141 = load i32, i32* %b, align 4
  %142 = load i32, i32* %c, align 4
  %143 = load i32, i32* %d, align 4
  %xor130 = xor i32 %142, %143
  %and131 = and i32 %141, %xor130
  %xor132 = xor i32 %140, %and131
  %144 = load i32*, i32** %in.addr, align 8
  %arrayidx133 = getelementptr inbounds i32, i32* %144, i64 12
  %145 = load i32, i32* %arrayidx133, align 4
  %add134 = add i32 %xor132, %145
  %add135 = add i32 %add134, 1804603682
  %146 = load i32, i32* %a, align 4
  %add136 = add i32 %146, %add135
  store i32 %add136, i32* %a, align 4
  %147 = load i32, i32* %a, align 4
  %shl137 = shl i32 %147, 7
  %148 = load i32, i32* %a, align 4
  %shr138 = lshr i32 %148, 25
  %or139 = or i32 %shl137, %shr138
  store i32 %or139, i32* %a, align 4
  %149 = load i32, i32* %b, align 4
  %150 = load i32, i32* %a, align 4
  %add140 = add i32 %150, %149
  store i32 %add140, i32* %a, align 4
  %151 = load i32, i32* %c, align 4
  %152 = load i32, i32* %a, align 4
  %153 = load i32, i32* %b, align 4
  %154 = load i32, i32* %c, align 4
  %xor141 = xor i32 %153, %154
  %and142 = and i32 %152, %xor141
  %xor143 = xor i32 %151, %and142
  %155 = load i32*, i32** %in.addr, align 8
  %arrayidx144 = getelementptr inbounds i32, i32* %155, i64 13
  %156 = load i32, i32* %arrayidx144, align 4
  %add145 = add i32 %xor143, %156
  %add146 = add i32 %add145, -40341101
  %157 = load i32, i32* %d, align 4
  %add147 = add i32 %157, %add146
  store i32 %add147, i32* %d, align 4
  %158 = load i32, i32* %d, align 4
  %shl148 = shl i32 %158, 12
  %159 = load i32, i32* %d, align 4
  %shr149 = lshr i32 %159, 20
  %or150 = or i32 %shl148, %shr149
  store i32 %or150, i32* %d, align 4
  %160 = load i32, i32* %a, align 4
  %161 = load i32, i32* %d, align 4
  %add151 = add i32 %161, %160
  store i32 %add151, i32* %d, align 4
  %162 = load i32, i32* %b, align 4
  %163 = load i32, i32* %d, align 4
  %164 = load i32, i32* %a, align 4
  %165 = load i32, i32* %b, align 4
  %xor152 = xor i32 %164, %165
  %and153 = and i32 %163, %xor152
  %xor154 = xor i32 %162, %and153
  %166 = load i32*, i32** %in.addr, align 8
  %arrayidx155 = getelementptr inbounds i32, i32* %166, i64 14
  %167 = load i32, i32* %arrayidx155, align 4
  %add156 = add i32 %xor154, %167
  %add157 = add i32 %add156, -1502002290
  %168 = load i32, i32* %c, align 4
  %add158 = add i32 %168, %add157
  store i32 %add158, i32* %c, align 4
  %169 = load i32, i32* %c, align 4
  %shl159 = shl i32 %169, 17
  %170 = load i32, i32* %c, align 4
  %shr160 = lshr i32 %170, 15
  %or161 = or i32 %shl159, %shr160
  store i32 %or161, i32* %c, align 4
  %171 = load i32, i32* %d, align 4
  %172 = load i32, i32* %c, align 4
  %add162 = add i32 %172, %171
  store i32 %add162, i32* %c, align 4
  %173 = load i32, i32* %a, align 4
  %174 = load i32, i32* %c, align 4
  %175 = load i32, i32* %d, align 4
  %176 = load i32, i32* %a, align 4
  %xor163 = xor i32 %175, %176
  %and164 = and i32 %174, %xor163
  %xor165 = xor i32 %173, %and164
  %177 = load i32*, i32** %in.addr, align 8
  %arrayidx166 = getelementptr inbounds i32, i32* %177, i64 15
  %178 = load i32, i32* %arrayidx166, align 4
  %add167 = add i32 %xor165, %178
  %add168 = add i32 %add167, 1236535329
  %179 = load i32, i32* %b, align 4
  %add169 = add i32 %179, %add168
  store i32 %add169, i32* %b, align 4
  %180 = load i32, i32* %b, align 4
  %shl170 = shl i32 %180, 22
  %181 = load i32, i32* %b, align 4
  %shr171 = lshr i32 %181, 10
  %or172 = or i32 %shl170, %shr171
  store i32 %or172, i32* %b, align 4
  %182 = load i32, i32* %c, align 4
  %183 = load i32, i32* %b, align 4
  %add173 = add i32 %183, %182
  store i32 %add173, i32* %b, align 4
  %184 = load i32, i32* %c, align 4
  %185 = load i32, i32* %d, align 4
  %186 = load i32, i32* %b, align 4
  %187 = load i32, i32* %c, align 4
  %xor174 = xor i32 %186, %187
  %and175 = and i32 %185, %xor174
  %xor176 = xor i32 %184, %and175
  %188 = load i32*, i32** %in.addr, align 8
  %arrayidx177 = getelementptr inbounds i32, i32* %188, i64 1
  %189 = load i32, i32* %arrayidx177, align 4
  %add178 = add i32 %xor176, %189
  %add179 = add i32 %add178, -165796510
  %190 = load i32, i32* %a, align 4
  %add180 = add i32 %190, %add179
  store i32 %add180, i32* %a, align 4
  %191 = load i32, i32* %a, align 4
  %shl181 = shl i32 %191, 5
  %192 = load i32, i32* %a, align 4
  %shr182 = lshr i32 %192, 27
  %or183 = or i32 %shl181, %shr182
  store i32 %or183, i32* %a, align 4
  %193 = load i32, i32* %b, align 4
  %194 = load i32, i32* %a, align 4
  %add184 = add i32 %194, %193
  store i32 %add184, i32* %a, align 4
  %195 = load i32, i32* %b, align 4
  %196 = load i32, i32* %c, align 4
  %197 = load i32, i32* %a, align 4
  %198 = load i32, i32* %b, align 4
  %xor185 = xor i32 %197, %198
  %and186 = and i32 %196, %xor185
  %xor187 = xor i32 %195, %and186
  %199 = load i32*, i32** %in.addr, align 8
  %arrayidx188 = getelementptr inbounds i32, i32* %199, i64 6
  %200 = load i32, i32* %arrayidx188, align 4
  %add189 = add i32 %xor187, %200
  %add190 = add i32 %add189, -1069501632
  %201 = load i32, i32* %d, align 4
  %add191 = add i32 %201, %add190
  store i32 %add191, i32* %d, align 4
  %202 = load i32, i32* %d, align 4
  %shl192 = shl i32 %202, 9
  %203 = load i32, i32* %d, align 4
  %shr193 = lshr i32 %203, 23
  %or194 = or i32 %shl192, %shr193
  store i32 %or194, i32* %d, align 4
  %204 = load i32, i32* %a, align 4
  %205 = load i32, i32* %d, align 4
  %add195 = add i32 %205, %204
  store i32 %add195, i32* %d, align 4
  %206 = load i32, i32* %a, align 4
  %207 = load i32, i32* %b, align 4
  %208 = load i32, i32* %d, align 4
  %209 = load i32, i32* %a, align 4
  %xor196 = xor i32 %208, %209
  %and197 = and i32 %207, %xor196
  %xor198 = xor i32 %206, %and197
  %210 = load i32*, i32** %in.addr, align 8
  %arrayidx199 = getelementptr inbounds i32, i32* %210, i64 11
  %211 = load i32, i32* %arrayidx199, align 4
  %add200 = add i32 %xor198, %211
  %add201 = add i32 %add200, 643717713
  %212 = load i32, i32* %c, align 4
  %add202 = add i32 %212, %add201
  store i32 %add202, i32* %c, align 4
  %213 = load i32, i32* %c, align 4
  %shl203 = shl i32 %213, 14
  %214 = load i32, i32* %c, align 4
  %shr204 = lshr i32 %214, 18
  %or205 = or i32 %shl203, %shr204
  store i32 %or205, i32* %c, align 4
  %215 = load i32, i32* %d, align 4
  %216 = load i32, i32* %c, align 4
  %add206 = add i32 %216, %215
  store i32 %add206, i32* %c, align 4
  %217 = load i32, i32* %d, align 4
  %218 = load i32, i32* %a, align 4
  %219 = load i32, i32* %c, align 4
  %220 = load i32, i32* %d, align 4
  %xor207 = xor i32 %219, %220
  %and208 = and i32 %218, %xor207
  %xor209 = xor i32 %217, %and208
  %221 = load i32*, i32** %in.addr, align 8
  %arrayidx210 = getelementptr inbounds i32, i32* %221, i64 0
  %222 = load i32, i32* %arrayidx210, align 4
  %add211 = add i32 %xor209, %222
  %add212 = add i32 %add211, -373897302
  %223 = load i32, i32* %b, align 4
  %add213 = add i32 %223, %add212
  store i32 %add213, i32* %b, align 4
  %224 = load i32, i32* %b, align 4
  %shl214 = shl i32 %224, 20
  %225 = load i32, i32* %b, align 4
  %shr215 = lshr i32 %225, 12
  %or216 = or i32 %shl214, %shr215
  store i32 %or216, i32* %b, align 4
  %226 = load i32, i32* %c, align 4
  %227 = load i32, i32* %b, align 4
  %add217 = add i32 %227, %226
  store i32 %add217, i32* %b, align 4
  %228 = load i32, i32* %c, align 4
  %229 = load i32, i32* %d, align 4
  %230 = load i32, i32* %b, align 4
  %231 = load i32, i32* %c, align 4
  %xor218 = xor i32 %230, %231
  %and219 = and i32 %229, %xor218
  %xor220 = xor i32 %228, %and219
  %232 = load i32*, i32** %in.addr, align 8
  %arrayidx221 = getelementptr inbounds i32, i32* %232, i64 5
  %233 = load i32, i32* %arrayidx221, align 4
  %add222 = add i32 %xor220, %233
  %add223 = add i32 %add222, -701558691
  %234 = load i32, i32* %a, align 4
  %add224 = add i32 %234, %add223
  store i32 %add224, i32* %a, align 4
  %235 = load i32, i32* %a, align 4
  %shl225 = shl i32 %235, 5
  %236 = load i32, i32* %a, align 4
  %shr226 = lshr i32 %236, 27
  %or227 = or i32 %shl225, %shr226
  store i32 %or227, i32* %a, align 4
  %237 = load i32, i32* %b, align 4
  %238 = load i32, i32* %a, align 4
  %add228 = add i32 %238, %237
  store i32 %add228, i32* %a, align 4
  %239 = load i32, i32* %b, align 4
  %240 = load i32, i32* %c, align 4
  %241 = load i32, i32* %a, align 4
  %242 = load i32, i32* %b, align 4
  %xor229 = xor i32 %241, %242
  %and230 = and i32 %240, %xor229
  %xor231 = xor i32 %239, %and230
  %243 = load i32*, i32** %in.addr, align 8
  %arrayidx232 = getelementptr inbounds i32, i32* %243, i64 10
  %244 = load i32, i32* %arrayidx232, align 4
  %add233 = add i32 %xor231, %244
  %add234 = add i32 %add233, 38016083
  %245 = load i32, i32* %d, align 4
  %add235 = add i32 %245, %add234
  store i32 %add235, i32* %d, align 4
  %246 = load i32, i32* %d, align 4
  %shl236 = shl i32 %246, 9
  %247 = load i32, i32* %d, align 4
  %shr237 = lshr i32 %247, 23
  %or238 = or i32 %shl236, %shr237
  store i32 %or238, i32* %d, align 4
  %248 = load i32, i32* %a, align 4
  %249 = load i32, i32* %d, align 4
  %add239 = add i32 %249, %248
  store i32 %add239, i32* %d, align 4
  %250 = load i32, i32* %a, align 4
  %251 = load i32, i32* %b, align 4
  %252 = load i32, i32* %d, align 4
  %253 = load i32, i32* %a, align 4
  %xor240 = xor i32 %252, %253
  %and241 = and i32 %251, %xor240
  %xor242 = xor i32 %250, %and241
  %254 = load i32*, i32** %in.addr, align 8
  %arrayidx243 = getelementptr inbounds i32, i32* %254, i64 15
  %255 = load i32, i32* %arrayidx243, align 4
  %add244 = add i32 %xor242, %255
  %add245 = add i32 %add244, -660478335
  %256 = load i32, i32* %c, align 4
  %add246 = add i32 %256, %add245
  store i32 %add246, i32* %c, align 4
  %257 = load i32, i32* %c, align 4
  %shl247 = shl i32 %257, 14
  %258 = load i32, i32* %c, align 4
  %shr248 = lshr i32 %258, 18
  %or249 = or i32 %shl247, %shr248
  store i32 %or249, i32* %c, align 4
  %259 = load i32, i32* %d, align 4
  %260 = load i32, i32* %c, align 4
  %add250 = add i32 %260, %259
  store i32 %add250, i32* %c, align 4
  %261 = load i32, i32* %d, align 4
  %262 = load i32, i32* %a, align 4
  %263 = load i32, i32* %c, align 4
  %264 = load i32, i32* %d, align 4
  %xor251 = xor i32 %263, %264
  %and252 = and i32 %262, %xor251
  %xor253 = xor i32 %261, %and252
  %265 = load i32*, i32** %in.addr, align 8
  %arrayidx254 = getelementptr inbounds i32, i32* %265, i64 4
  %266 = load i32, i32* %arrayidx254, align 4
  %add255 = add i32 %xor253, %266
  %add256 = add i32 %add255, -405537848
  %267 = load i32, i32* %b, align 4
  %add257 = add i32 %267, %add256
  store i32 %add257, i32* %b, align 4
  %268 = load i32, i32* %b, align 4
  %shl258 = shl i32 %268, 20
  %269 = load i32, i32* %b, align 4
  %shr259 = lshr i32 %269, 12
  %or260 = or i32 %shl258, %shr259
  store i32 %or260, i32* %b, align 4
  %270 = load i32, i32* %c, align 4
  %271 = load i32, i32* %b, align 4
  %add261 = add i32 %271, %270
  store i32 %add261, i32* %b, align 4
  %272 = load i32, i32* %c, align 4
  %273 = load i32, i32* %d, align 4
  %274 = load i32, i32* %b, align 4
  %275 = load i32, i32* %c, align 4
  %xor262 = xor i32 %274, %275
  %and263 = and i32 %273, %xor262
  %xor264 = xor i32 %272, %and263
  %276 = load i32*, i32** %in.addr, align 8
  %arrayidx265 = getelementptr inbounds i32, i32* %276, i64 9
  %277 = load i32, i32* %arrayidx265, align 4
  %add266 = add i32 %xor264, %277
  %add267 = add i32 %add266, 568446438
  %278 = load i32, i32* %a, align 4
  %add268 = add i32 %278, %add267
  store i32 %add268, i32* %a, align 4
  %279 = load i32, i32* %a, align 4
  %shl269 = shl i32 %279, 5
  %280 = load i32, i32* %a, align 4
  %shr270 = lshr i32 %280, 27
  %or271 = or i32 %shl269, %shr270
  store i32 %or271, i32* %a, align 4
  %281 = load i32, i32* %b, align 4
  %282 = load i32, i32* %a, align 4
  %add272 = add i32 %282, %281
  store i32 %add272, i32* %a, align 4
  %283 = load i32, i32* %b, align 4
  %284 = load i32, i32* %c, align 4
  %285 = load i32, i32* %a, align 4
  %286 = load i32, i32* %b, align 4
  %xor273 = xor i32 %285, %286
  %and274 = and i32 %284, %xor273
  %xor275 = xor i32 %283, %and274
  %287 = load i32*, i32** %in.addr, align 8
  %arrayidx276 = getelementptr inbounds i32, i32* %287, i64 14
  %288 = load i32, i32* %arrayidx276, align 4
  %add277 = add i32 %xor275, %288
  %add278 = add i32 %add277, -1019803690
  %289 = load i32, i32* %d, align 4
  %add279 = add i32 %289, %add278
  store i32 %add279, i32* %d, align 4
  %290 = load i32, i32* %d, align 4
  %shl280 = shl i32 %290, 9
  %291 = load i32, i32* %d, align 4
  %shr281 = lshr i32 %291, 23
  %or282 = or i32 %shl280, %shr281
  store i32 %or282, i32* %d, align 4
  %292 = load i32, i32* %a, align 4
  %293 = load i32, i32* %d, align 4
  %add283 = add i32 %293, %292
  store i32 %add283, i32* %d, align 4
  %294 = load i32, i32* %a, align 4
  %295 = load i32, i32* %b, align 4
  %296 = load i32, i32* %d, align 4
  %297 = load i32, i32* %a, align 4
  %xor284 = xor i32 %296, %297
  %and285 = and i32 %295, %xor284
  %xor286 = xor i32 %294, %and285
  %298 = load i32*, i32** %in.addr, align 8
  %arrayidx287 = getelementptr inbounds i32, i32* %298, i64 3
  %299 = load i32, i32* %arrayidx287, align 4
  %add288 = add i32 %xor286, %299
  %add289 = add i32 %add288, -187363961
  %300 = load i32, i32* %c, align 4
  %add290 = add i32 %300, %add289
  store i32 %add290, i32* %c, align 4
  %301 = load i32, i32* %c, align 4
  %shl291 = shl i32 %301, 14
  %302 = load i32, i32* %c, align 4
  %shr292 = lshr i32 %302, 18
  %or293 = or i32 %shl291, %shr292
  store i32 %or293, i32* %c, align 4
  %303 = load i32, i32* %d, align 4
  %304 = load i32, i32* %c, align 4
  %add294 = add i32 %304, %303
  store i32 %add294, i32* %c, align 4
  %305 = load i32, i32* %d, align 4
  %306 = load i32, i32* %a, align 4
  %307 = load i32, i32* %c, align 4
  %308 = load i32, i32* %d, align 4
  %xor295 = xor i32 %307, %308
  %and296 = and i32 %306, %xor295
  %xor297 = xor i32 %305, %and296
  %309 = load i32*, i32** %in.addr, align 8
  %arrayidx298 = getelementptr inbounds i32, i32* %309, i64 8
  %310 = load i32, i32* %arrayidx298, align 4
  %add299 = add i32 %xor297, %310
  %add300 = add i32 %add299, 1163531501
  %311 = load i32, i32* %b, align 4
  %add301 = add i32 %311, %add300
  store i32 %add301, i32* %b, align 4
  %312 = load i32, i32* %b, align 4
  %shl302 = shl i32 %312, 20
  %313 = load i32, i32* %b, align 4
  %shr303 = lshr i32 %313, 12
  %or304 = or i32 %shl302, %shr303
  store i32 %or304, i32* %b, align 4
  %314 = load i32, i32* %c, align 4
  %315 = load i32, i32* %b, align 4
  %add305 = add i32 %315, %314
  store i32 %add305, i32* %b, align 4
  %316 = load i32, i32* %c, align 4
  %317 = load i32, i32* %d, align 4
  %318 = load i32, i32* %b, align 4
  %319 = load i32, i32* %c, align 4
  %xor306 = xor i32 %318, %319
  %and307 = and i32 %317, %xor306
  %xor308 = xor i32 %316, %and307
  %320 = load i32*, i32** %in.addr, align 8
  %arrayidx309 = getelementptr inbounds i32, i32* %320, i64 13
  %321 = load i32, i32* %arrayidx309, align 4
  %add310 = add i32 %xor308, %321
  %add311 = add i32 %add310, -1444681467
  %322 = load i32, i32* %a, align 4
  %add312 = add i32 %322, %add311
  store i32 %add312, i32* %a, align 4
  %323 = load i32, i32* %a, align 4
  %shl313 = shl i32 %323, 5
  %324 = load i32, i32* %a, align 4
  %shr314 = lshr i32 %324, 27
  %or315 = or i32 %shl313, %shr314
  store i32 %or315, i32* %a, align 4
  %325 = load i32, i32* %b, align 4
  %326 = load i32, i32* %a, align 4
  %add316 = add i32 %326, %325
  store i32 %add316, i32* %a, align 4
  %327 = load i32, i32* %b, align 4
  %328 = load i32, i32* %c, align 4
  %329 = load i32, i32* %a, align 4
  %330 = load i32, i32* %b, align 4
  %xor317 = xor i32 %329, %330
  %and318 = and i32 %328, %xor317
  %xor319 = xor i32 %327, %and318
  %331 = load i32*, i32** %in.addr, align 8
  %arrayidx320 = getelementptr inbounds i32, i32* %331, i64 2
  %332 = load i32, i32* %arrayidx320, align 4
  %add321 = add i32 %xor319, %332
  %add322 = add i32 %add321, -51403784
  %333 = load i32, i32* %d, align 4
  %add323 = add i32 %333, %add322
  store i32 %add323, i32* %d, align 4
  %334 = load i32, i32* %d, align 4
  %shl324 = shl i32 %334, 9
  %335 = load i32, i32* %d, align 4
  %shr325 = lshr i32 %335, 23
  %or326 = or i32 %shl324, %shr325
  store i32 %or326, i32* %d, align 4
  %336 = load i32, i32* %a, align 4
  %337 = load i32, i32* %d, align 4
  %add327 = add i32 %337, %336
  store i32 %add327, i32* %d, align 4
  %338 = load i32, i32* %a, align 4
  %339 = load i32, i32* %b, align 4
  %340 = load i32, i32* %d, align 4
  %341 = load i32, i32* %a, align 4
  %xor328 = xor i32 %340, %341
  %and329 = and i32 %339, %xor328
  %xor330 = xor i32 %338, %and329
  %342 = load i32*, i32** %in.addr, align 8
  %arrayidx331 = getelementptr inbounds i32, i32* %342, i64 7
  %343 = load i32, i32* %arrayidx331, align 4
  %add332 = add i32 %xor330, %343
  %add333 = add i32 %add332, 1735328473
  %344 = load i32, i32* %c, align 4
  %add334 = add i32 %344, %add333
  store i32 %add334, i32* %c, align 4
  %345 = load i32, i32* %c, align 4
  %shl335 = shl i32 %345, 14
  %346 = load i32, i32* %c, align 4
  %shr336 = lshr i32 %346, 18
  %or337 = or i32 %shl335, %shr336
  store i32 %or337, i32* %c, align 4
  %347 = load i32, i32* %d, align 4
  %348 = load i32, i32* %c, align 4
  %add338 = add i32 %348, %347
  store i32 %add338, i32* %c, align 4
  %349 = load i32, i32* %d, align 4
  %350 = load i32, i32* %a, align 4
  %351 = load i32, i32* %c, align 4
  %352 = load i32, i32* %d, align 4
  %xor339 = xor i32 %351, %352
  %and340 = and i32 %350, %xor339
  %xor341 = xor i32 %349, %and340
  %353 = load i32*, i32** %in.addr, align 8
  %arrayidx342 = getelementptr inbounds i32, i32* %353, i64 12
  %354 = load i32, i32* %arrayidx342, align 4
  %add343 = add i32 %xor341, %354
  %add344 = add i32 %add343, -1926607734
  %355 = load i32, i32* %b, align 4
  %add345 = add i32 %355, %add344
  store i32 %add345, i32* %b, align 4
  %356 = load i32, i32* %b, align 4
  %shl346 = shl i32 %356, 20
  %357 = load i32, i32* %b, align 4
  %shr347 = lshr i32 %357, 12
  %or348 = or i32 %shl346, %shr347
  store i32 %or348, i32* %b, align 4
  %358 = load i32, i32* %c, align 4
  %359 = load i32, i32* %b, align 4
  %add349 = add i32 %359, %358
  store i32 %add349, i32* %b, align 4
  %360 = load i32, i32* %b, align 4
  %361 = load i32, i32* %c, align 4
  %xor350 = xor i32 %360, %361
  %362 = load i32, i32* %d, align 4
  %xor351 = xor i32 %xor350, %362
  %363 = load i32*, i32** %in.addr, align 8
  %arrayidx352 = getelementptr inbounds i32, i32* %363, i64 5
  %364 = load i32, i32* %arrayidx352, align 4
  %add353 = add i32 %xor351, %364
  %add354 = add i32 %add353, -378558
  %365 = load i32, i32* %a, align 4
  %add355 = add i32 %365, %add354
  store i32 %add355, i32* %a, align 4
  %366 = load i32, i32* %a, align 4
  %shl356 = shl i32 %366, 4
  %367 = load i32, i32* %a, align 4
  %shr357 = lshr i32 %367, 28
  %or358 = or i32 %shl356, %shr357
  store i32 %or358, i32* %a, align 4
  %368 = load i32, i32* %b, align 4
  %369 = load i32, i32* %a, align 4
  %add359 = add i32 %369, %368
  store i32 %add359, i32* %a, align 4
  %370 = load i32, i32* %a, align 4
  %371 = load i32, i32* %b, align 4
  %xor360 = xor i32 %370, %371
  %372 = load i32, i32* %c, align 4
  %xor361 = xor i32 %xor360, %372
  %373 = load i32*, i32** %in.addr, align 8
  %arrayidx362 = getelementptr inbounds i32, i32* %373, i64 8
  %374 = load i32, i32* %arrayidx362, align 4
  %add363 = add i32 %xor361, %374
  %add364 = add i32 %add363, -2022574463
  %375 = load i32, i32* %d, align 4
  %add365 = add i32 %375, %add364
  store i32 %add365, i32* %d, align 4
  %376 = load i32, i32* %d, align 4
  %shl366 = shl i32 %376, 11
  %377 = load i32, i32* %d, align 4
  %shr367 = lshr i32 %377, 21
  %or368 = or i32 %shl366, %shr367
  store i32 %or368, i32* %d, align 4
  %378 = load i32, i32* %a, align 4
  %379 = load i32, i32* %d, align 4
  %add369 = add i32 %379, %378
  store i32 %add369, i32* %d, align 4
  %380 = load i32, i32* %d, align 4
  %381 = load i32, i32* %a, align 4
  %xor370 = xor i32 %380, %381
  %382 = load i32, i32* %b, align 4
  %xor371 = xor i32 %xor370, %382
  %383 = load i32*, i32** %in.addr, align 8
  %arrayidx372 = getelementptr inbounds i32, i32* %383, i64 11
  %384 = load i32, i32* %arrayidx372, align 4
  %add373 = add i32 %xor371, %384
  %add374 = add i32 %add373, 1839030562
  %385 = load i32, i32* %c, align 4
  %add375 = add i32 %385, %add374
  store i32 %add375, i32* %c, align 4
  %386 = load i32, i32* %c, align 4
  %shl376 = shl i32 %386, 16
  %387 = load i32, i32* %c, align 4
  %shr377 = lshr i32 %387, 16
  %or378 = or i32 %shl376, %shr377
  store i32 %or378, i32* %c, align 4
  %388 = load i32, i32* %d, align 4
  %389 = load i32, i32* %c, align 4
  %add379 = add i32 %389, %388
  store i32 %add379, i32* %c, align 4
  %390 = load i32, i32* %c, align 4
  %391 = load i32, i32* %d, align 4
  %xor380 = xor i32 %390, %391
  %392 = load i32, i32* %a, align 4
  %xor381 = xor i32 %xor380, %392
  %393 = load i32*, i32** %in.addr, align 8
  %arrayidx382 = getelementptr inbounds i32, i32* %393, i64 14
  %394 = load i32, i32* %arrayidx382, align 4
  %add383 = add i32 %xor381, %394
  %add384 = add i32 %add383, -35309556
  %395 = load i32, i32* %b, align 4
  %add385 = add i32 %395, %add384
  store i32 %add385, i32* %b, align 4
  %396 = load i32, i32* %b, align 4
  %shl386 = shl i32 %396, 23
  %397 = load i32, i32* %b, align 4
  %shr387 = lshr i32 %397, 9
  %or388 = or i32 %shl386, %shr387
  store i32 %or388, i32* %b, align 4
  %398 = load i32, i32* %c, align 4
  %399 = load i32, i32* %b, align 4
  %add389 = add i32 %399, %398
  store i32 %add389, i32* %b, align 4
  %400 = load i32, i32* %b, align 4
  %401 = load i32, i32* %c, align 4
  %xor390 = xor i32 %400, %401
  %402 = load i32, i32* %d, align 4
  %xor391 = xor i32 %xor390, %402
  %403 = load i32*, i32** %in.addr, align 8
  %arrayidx392 = getelementptr inbounds i32, i32* %403, i64 1
  %404 = load i32, i32* %arrayidx392, align 4
  %add393 = add i32 %xor391, %404
  %add394 = add i32 %add393, -1530992060
  %405 = load i32, i32* %a, align 4
  %add395 = add i32 %405, %add394
  store i32 %add395, i32* %a, align 4
  %406 = load i32, i32* %a, align 4
  %shl396 = shl i32 %406, 4
  %407 = load i32, i32* %a, align 4
  %shr397 = lshr i32 %407, 28
  %or398 = or i32 %shl396, %shr397
  store i32 %or398, i32* %a, align 4
  %408 = load i32, i32* %b, align 4
  %409 = load i32, i32* %a, align 4
  %add399 = add i32 %409, %408
  store i32 %add399, i32* %a, align 4
  %410 = load i32, i32* %a, align 4
  %411 = load i32, i32* %b, align 4
  %xor400 = xor i32 %410, %411
  %412 = load i32, i32* %c, align 4
  %xor401 = xor i32 %xor400, %412
  %413 = load i32*, i32** %in.addr, align 8
  %arrayidx402 = getelementptr inbounds i32, i32* %413, i64 4
  %414 = load i32, i32* %arrayidx402, align 4
  %add403 = add i32 %xor401, %414
  %add404 = add i32 %add403, 1272893353
  %415 = load i32, i32* %d, align 4
  %add405 = add i32 %415, %add404
  store i32 %add405, i32* %d, align 4
  %416 = load i32, i32* %d, align 4
  %shl406 = shl i32 %416, 11
  %417 = load i32, i32* %d, align 4
  %shr407 = lshr i32 %417, 21
  %or408 = or i32 %shl406, %shr407
  store i32 %or408, i32* %d, align 4
  %418 = load i32, i32* %a, align 4
  %419 = load i32, i32* %d, align 4
  %add409 = add i32 %419, %418
  store i32 %add409, i32* %d, align 4
  %420 = load i32, i32* %d, align 4
  %421 = load i32, i32* %a, align 4
  %xor410 = xor i32 %420, %421
  %422 = load i32, i32* %b, align 4
  %xor411 = xor i32 %xor410, %422
  %423 = load i32*, i32** %in.addr, align 8
  %arrayidx412 = getelementptr inbounds i32, i32* %423, i64 7
  %424 = load i32, i32* %arrayidx412, align 4
  %add413 = add i32 %xor411, %424
  %add414 = add i32 %add413, -155497632
  %425 = load i32, i32* %c, align 4
  %add415 = add i32 %425, %add414
  store i32 %add415, i32* %c, align 4
  %426 = load i32, i32* %c, align 4
  %shl416 = shl i32 %426, 16
  %427 = load i32, i32* %c, align 4
  %shr417 = lshr i32 %427, 16
  %or418 = or i32 %shl416, %shr417
  store i32 %or418, i32* %c, align 4
  %428 = load i32, i32* %d, align 4
  %429 = load i32, i32* %c, align 4
  %add419 = add i32 %429, %428
  store i32 %add419, i32* %c, align 4
  %430 = load i32, i32* %c, align 4
  %431 = load i32, i32* %d, align 4
  %xor420 = xor i32 %430, %431
  %432 = load i32, i32* %a, align 4
  %xor421 = xor i32 %xor420, %432
  %433 = load i32*, i32** %in.addr, align 8
  %arrayidx422 = getelementptr inbounds i32, i32* %433, i64 10
  %434 = load i32, i32* %arrayidx422, align 4
  %add423 = add i32 %xor421, %434
  %add424 = add i32 %add423, -1094730640
  %435 = load i32, i32* %b, align 4
  %add425 = add i32 %435, %add424
  store i32 %add425, i32* %b, align 4
  %436 = load i32, i32* %b, align 4
  %shl426 = shl i32 %436, 23
  %437 = load i32, i32* %b, align 4
  %shr427 = lshr i32 %437, 9
  %or428 = or i32 %shl426, %shr427
  store i32 %or428, i32* %b, align 4
  %438 = load i32, i32* %c, align 4
  %439 = load i32, i32* %b, align 4
  %add429 = add i32 %439, %438
  store i32 %add429, i32* %b, align 4
  %440 = load i32, i32* %b, align 4
  %441 = load i32, i32* %c, align 4
  %xor430 = xor i32 %440, %441
  %442 = load i32, i32* %d, align 4
  %xor431 = xor i32 %xor430, %442
  %443 = load i32*, i32** %in.addr, align 8
  %arrayidx432 = getelementptr inbounds i32, i32* %443, i64 13
  %444 = load i32, i32* %arrayidx432, align 4
  %add433 = add i32 %xor431, %444
  %add434 = add i32 %add433, 681279174
  %445 = load i32, i32* %a, align 4
  %add435 = add i32 %445, %add434
  store i32 %add435, i32* %a, align 4
  %446 = load i32, i32* %a, align 4
  %shl436 = shl i32 %446, 4
  %447 = load i32, i32* %a, align 4
  %shr437 = lshr i32 %447, 28
  %or438 = or i32 %shl436, %shr437
  store i32 %or438, i32* %a, align 4
  %448 = load i32, i32* %b, align 4
  %449 = load i32, i32* %a, align 4
  %add439 = add i32 %449, %448
  store i32 %add439, i32* %a, align 4
  %450 = load i32, i32* %a, align 4
  %451 = load i32, i32* %b, align 4
  %xor440 = xor i32 %450, %451
  %452 = load i32, i32* %c, align 4
  %xor441 = xor i32 %xor440, %452
  %453 = load i32*, i32** %in.addr, align 8
  %arrayidx442 = getelementptr inbounds i32, i32* %453, i64 0
  %454 = load i32, i32* %arrayidx442, align 4
  %add443 = add i32 %xor441, %454
  %add444 = add i32 %add443, -358537222
  %455 = load i32, i32* %d, align 4
  %add445 = add i32 %455, %add444
  store i32 %add445, i32* %d, align 4
  %456 = load i32, i32* %d, align 4
  %shl446 = shl i32 %456, 11
  %457 = load i32, i32* %d, align 4
  %shr447 = lshr i32 %457, 21
  %or448 = or i32 %shl446, %shr447
  store i32 %or448, i32* %d, align 4
  %458 = load i32, i32* %a, align 4
  %459 = load i32, i32* %d, align 4
  %add449 = add i32 %459, %458
  store i32 %add449, i32* %d, align 4
  %460 = load i32, i32* %d, align 4
  %461 = load i32, i32* %a, align 4
  %xor450 = xor i32 %460, %461
  %462 = load i32, i32* %b, align 4
  %xor451 = xor i32 %xor450, %462
  %463 = load i32*, i32** %in.addr, align 8
  %arrayidx452 = getelementptr inbounds i32, i32* %463, i64 3
  %464 = load i32, i32* %arrayidx452, align 4
  %add453 = add i32 %xor451, %464
  %add454 = add i32 %add453, -722521979
  %465 = load i32, i32* %c, align 4
  %add455 = add i32 %465, %add454
  store i32 %add455, i32* %c, align 4
  %466 = load i32, i32* %c, align 4
  %shl456 = shl i32 %466, 16
  %467 = load i32, i32* %c, align 4
  %shr457 = lshr i32 %467, 16
  %or458 = or i32 %shl456, %shr457
  store i32 %or458, i32* %c, align 4
  %468 = load i32, i32* %d, align 4
  %469 = load i32, i32* %c, align 4
  %add459 = add i32 %469, %468
  store i32 %add459, i32* %c, align 4
  %470 = load i32, i32* %c, align 4
  %471 = load i32, i32* %d, align 4
  %xor460 = xor i32 %470, %471
  %472 = load i32, i32* %a, align 4
  %xor461 = xor i32 %xor460, %472
  %473 = load i32*, i32** %in.addr, align 8
  %arrayidx462 = getelementptr inbounds i32, i32* %473, i64 6
  %474 = load i32, i32* %arrayidx462, align 4
  %add463 = add i32 %xor461, %474
  %add464 = add i32 %add463, 76029189
  %475 = load i32, i32* %b, align 4
  %add465 = add i32 %475, %add464
  store i32 %add465, i32* %b, align 4
  %476 = load i32, i32* %b, align 4
  %shl466 = shl i32 %476, 23
  %477 = load i32, i32* %b, align 4
  %shr467 = lshr i32 %477, 9
  %or468 = or i32 %shl466, %shr467
  store i32 %or468, i32* %b, align 4
  %478 = load i32, i32* %c, align 4
  %479 = load i32, i32* %b, align 4
  %add469 = add i32 %479, %478
  store i32 %add469, i32* %b, align 4
  %480 = load i32, i32* %b, align 4
  %481 = load i32, i32* %c, align 4
  %xor470 = xor i32 %480, %481
  %482 = load i32, i32* %d, align 4
  %xor471 = xor i32 %xor470, %482
  %483 = load i32*, i32** %in.addr, align 8
  %arrayidx472 = getelementptr inbounds i32, i32* %483, i64 9
  %484 = load i32, i32* %arrayidx472, align 4
  %add473 = add i32 %xor471, %484
  %add474 = add i32 %add473, -640364487
  %485 = load i32, i32* %a, align 4
  %add475 = add i32 %485, %add474
  store i32 %add475, i32* %a, align 4
  %486 = load i32, i32* %a, align 4
  %shl476 = shl i32 %486, 4
  %487 = load i32, i32* %a, align 4
  %shr477 = lshr i32 %487, 28
  %or478 = or i32 %shl476, %shr477
  store i32 %or478, i32* %a, align 4
  %488 = load i32, i32* %b, align 4
  %489 = load i32, i32* %a, align 4
  %add479 = add i32 %489, %488
  store i32 %add479, i32* %a, align 4
  %490 = load i32, i32* %a, align 4
  %491 = load i32, i32* %b, align 4
  %xor480 = xor i32 %490, %491
  %492 = load i32, i32* %c, align 4
  %xor481 = xor i32 %xor480, %492
  %493 = load i32*, i32** %in.addr, align 8
  %arrayidx482 = getelementptr inbounds i32, i32* %493, i64 12
  %494 = load i32, i32* %arrayidx482, align 4
  %add483 = add i32 %xor481, %494
  %add484 = add i32 %add483, -421815835
  %495 = load i32, i32* %d, align 4
  %add485 = add i32 %495, %add484
  store i32 %add485, i32* %d, align 4
  %496 = load i32, i32* %d, align 4
  %shl486 = shl i32 %496, 11
  %497 = load i32, i32* %d, align 4
  %shr487 = lshr i32 %497, 21
  %or488 = or i32 %shl486, %shr487
  store i32 %or488, i32* %d, align 4
  %498 = load i32, i32* %a, align 4
  %499 = load i32, i32* %d, align 4
  %add489 = add i32 %499, %498
  store i32 %add489, i32* %d, align 4
  %500 = load i32, i32* %d, align 4
  %501 = load i32, i32* %a, align 4
  %xor490 = xor i32 %500, %501
  %502 = load i32, i32* %b, align 4
  %xor491 = xor i32 %xor490, %502
  %503 = load i32*, i32** %in.addr, align 8
  %arrayidx492 = getelementptr inbounds i32, i32* %503, i64 15
  %504 = load i32, i32* %arrayidx492, align 4
  %add493 = add i32 %xor491, %504
  %add494 = add i32 %add493, 530742520
  %505 = load i32, i32* %c, align 4
  %add495 = add i32 %505, %add494
  store i32 %add495, i32* %c, align 4
  %506 = load i32, i32* %c, align 4
  %shl496 = shl i32 %506, 16
  %507 = load i32, i32* %c, align 4
  %shr497 = lshr i32 %507, 16
  %or498 = or i32 %shl496, %shr497
  store i32 %or498, i32* %c, align 4
  %508 = load i32, i32* %d, align 4
  %509 = load i32, i32* %c, align 4
  %add499 = add i32 %509, %508
  store i32 %add499, i32* %c, align 4
  %510 = load i32, i32* %c, align 4
  %511 = load i32, i32* %d, align 4
  %xor500 = xor i32 %510, %511
  %512 = load i32, i32* %a, align 4
  %xor501 = xor i32 %xor500, %512
  %513 = load i32*, i32** %in.addr, align 8
  %arrayidx502 = getelementptr inbounds i32, i32* %513, i64 2
  %514 = load i32, i32* %arrayidx502, align 4
  %add503 = add i32 %xor501, %514
  %add504 = add i32 %add503, -995338651
  %515 = load i32, i32* %b, align 4
  %add505 = add i32 %515, %add504
  store i32 %add505, i32* %b, align 4
  %516 = load i32, i32* %b, align 4
  %shl506 = shl i32 %516, 23
  %517 = load i32, i32* %b, align 4
  %shr507 = lshr i32 %517, 9
  %or508 = or i32 %shl506, %shr507
  store i32 %or508, i32* %b, align 4
  %518 = load i32, i32* %c, align 4
  %519 = load i32, i32* %b, align 4
  %add509 = add i32 %519, %518
  store i32 %add509, i32* %b, align 4
  %520 = load i32, i32* %c, align 4
  %521 = load i32, i32* %b, align 4
  %522 = load i32, i32* %d, align 4
  %neg = xor i32 %522, -1
  %or510 = or i32 %521, %neg
  %xor511 = xor i32 %520, %or510
  %523 = load i32*, i32** %in.addr, align 8
  %arrayidx512 = getelementptr inbounds i32, i32* %523, i64 0
  %524 = load i32, i32* %arrayidx512, align 4
  %add513 = add i32 %xor511, %524
  %add514 = add i32 %add513, -198630844
  %525 = load i32, i32* %a, align 4
  %add515 = add i32 %525, %add514
  store i32 %add515, i32* %a, align 4
  %526 = load i32, i32* %a, align 4
  %shl516 = shl i32 %526, 6
  %527 = load i32, i32* %a, align 4
  %shr517 = lshr i32 %527, 26
  %or518 = or i32 %shl516, %shr517
  store i32 %or518, i32* %a, align 4
  %528 = load i32, i32* %b, align 4
  %529 = load i32, i32* %a, align 4
  %add519 = add i32 %529, %528
  store i32 %add519, i32* %a, align 4
  %530 = load i32, i32* %b, align 4
  %531 = load i32, i32* %a, align 4
  %532 = load i32, i32* %c, align 4
  %neg520 = xor i32 %532, -1
  %or521 = or i32 %531, %neg520
  %xor522 = xor i32 %530, %or521
  %533 = load i32*, i32** %in.addr, align 8
  %arrayidx523 = getelementptr inbounds i32, i32* %533, i64 7
  %534 = load i32, i32* %arrayidx523, align 4
  %add524 = add i32 %xor522, %534
  %add525 = add i32 %add524, 1126891415
  %535 = load i32, i32* %d, align 4
  %add526 = add i32 %535, %add525
  store i32 %add526, i32* %d, align 4
  %536 = load i32, i32* %d, align 4
  %shl527 = shl i32 %536, 10
  %537 = load i32, i32* %d, align 4
  %shr528 = lshr i32 %537, 22
  %or529 = or i32 %shl527, %shr528
  store i32 %or529, i32* %d, align 4
  %538 = load i32, i32* %a, align 4
  %539 = load i32, i32* %d, align 4
  %add530 = add i32 %539, %538
  store i32 %add530, i32* %d, align 4
  %540 = load i32, i32* %a, align 4
  %541 = load i32, i32* %d, align 4
  %542 = load i32, i32* %b, align 4
  %neg531 = xor i32 %542, -1
  %or532 = or i32 %541, %neg531
  %xor533 = xor i32 %540, %or532
  %543 = load i32*, i32** %in.addr, align 8
  %arrayidx534 = getelementptr inbounds i32, i32* %543, i64 14
  %544 = load i32, i32* %arrayidx534, align 4
  %add535 = add i32 %xor533, %544
  %add536 = add i32 %add535, -1416354905
  %545 = load i32, i32* %c, align 4
  %add537 = add i32 %545, %add536
  store i32 %add537, i32* %c, align 4
  %546 = load i32, i32* %c, align 4
  %shl538 = shl i32 %546, 15
  %547 = load i32, i32* %c, align 4
  %shr539 = lshr i32 %547, 17
  %or540 = or i32 %shl538, %shr539
  store i32 %or540, i32* %c, align 4
  %548 = load i32, i32* %d, align 4
  %549 = load i32, i32* %c, align 4
  %add541 = add i32 %549, %548
  store i32 %add541, i32* %c, align 4
  %550 = load i32, i32* %d, align 4
  %551 = load i32, i32* %c, align 4
  %552 = load i32, i32* %a, align 4
  %neg542 = xor i32 %552, -1
  %or543 = or i32 %551, %neg542
  %xor544 = xor i32 %550, %or543
  %553 = load i32*, i32** %in.addr, align 8
  %arrayidx545 = getelementptr inbounds i32, i32* %553, i64 5
  %554 = load i32, i32* %arrayidx545, align 4
  %add546 = add i32 %xor544, %554
  %add547 = add i32 %add546, -57434055
  %555 = load i32, i32* %b, align 4
  %add548 = add i32 %555, %add547
  store i32 %add548, i32* %b, align 4
  %556 = load i32, i32* %b, align 4
  %shl549 = shl i32 %556, 21
  %557 = load i32, i32* %b, align 4
  %shr550 = lshr i32 %557, 11
  %or551 = or i32 %shl549, %shr550
  store i32 %or551, i32* %b, align 4
  %558 = load i32, i32* %c, align 4
  %559 = load i32, i32* %b, align 4
  %add552 = add i32 %559, %558
  store i32 %add552, i32* %b, align 4
  %560 = load i32, i32* %c, align 4
  %561 = load i32, i32* %b, align 4
  %562 = load i32, i32* %d, align 4
  %neg553 = xor i32 %562, -1
  %or554 = or i32 %561, %neg553
  %xor555 = xor i32 %560, %or554
  %563 = load i32*, i32** %in.addr, align 8
  %arrayidx556 = getelementptr inbounds i32, i32* %563, i64 12
  %564 = load i32, i32* %arrayidx556, align 4
  %add557 = add i32 %xor555, %564
  %add558 = add i32 %add557, 1700485571
  %565 = load i32, i32* %a, align 4
  %add559 = add i32 %565, %add558
  store i32 %add559, i32* %a, align 4
  %566 = load i32, i32* %a, align 4
  %shl560 = shl i32 %566, 6
  %567 = load i32, i32* %a, align 4
  %shr561 = lshr i32 %567, 26
  %or562 = or i32 %shl560, %shr561
  store i32 %or562, i32* %a, align 4
  %568 = load i32, i32* %b, align 4
  %569 = load i32, i32* %a, align 4
  %add563 = add i32 %569, %568
  store i32 %add563, i32* %a, align 4
  %570 = load i32, i32* %b, align 4
  %571 = load i32, i32* %a, align 4
  %572 = load i32, i32* %c, align 4
  %neg564 = xor i32 %572, -1
  %or565 = or i32 %571, %neg564
  %xor566 = xor i32 %570, %or565
  %573 = load i32*, i32** %in.addr, align 8
  %arrayidx567 = getelementptr inbounds i32, i32* %573, i64 3
  %574 = load i32, i32* %arrayidx567, align 4
  %add568 = add i32 %xor566, %574
  %add569 = add i32 %add568, -1894986606
  %575 = load i32, i32* %d, align 4
  %add570 = add i32 %575, %add569
  store i32 %add570, i32* %d, align 4
  %576 = load i32, i32* %d, align 4
  %shl571 = shl i32 %576, 10
  %577 = load i32, i32* %d, align 4
  %shr572 = lshr i32 %577, 22
  %or573 = or i32 %shl571, %shr572
  store i32 %or573, i32* %d, align 4
  %578 = load i32, i32* %a, align 4
  %579 = load i32, i32* %d, align 4
  %add574 = add i32 %579, %578
  store i32 %add574, i32* %d, align 4
  %580 = load i32, i32* %a, align 4
  %581 = load i32, i32* %d, align 4
  %582 = load i32, i32* %b, align 4
  %neg575 = xor i32 %582, -1
  %or576 = or i32 %581, %neg575
  %xor577 = xor i32 %580, %or576
  %583 = load i32*, i32** %in.addr, align 8
  %arrayidx578 = getelementptr inbounds i32, i32* %583, i64 10
  %584 = load i32, i32* %arrayidx578, align 4
  %add579 = add i32 %xor577, %584
  %add580 = add i32 %add579, -1051523
  %585 = load i32, i32* %c, align 4
  %add581 = add i32 %585, %add580
  store i32 %add581, i32* %c, align 4
  %586 = load i32, i32* %c, align 4
  %shl582 = shl i32 %586, 15
  %587 = load i32, i32* %c, align 4
  %shr583 = lshr i32 %587, 17
  %or584 = or i32 %shl582, %shr583
  store i32 %or584, i32* %c, align 4
  %588 = load i32, i32* %d, align 4
  %589 = load i32, i32* %c, align 4
  %add585 = add i32 %589, %588
  store i32 %add585, i32* %c, align 4
  %590 = load i32, i32* %d, align 4
  %591 = load i32, i32* %c, align 4
  %592 = load i32, i32* %a, align 4
  %neg586 = xor i32 %592, -1
  %or587 = or i32 %591, %neg586
  %xor588 = xor i32 %590, %or587
  %593 = load i32*, i32** %in.addr, align 8
  %arrayidx589 = getelementptr inbounds i32, i32* %593, i64 1
  %594 = load i32, i32* %arrayidx589, align 4
  %add590 = add i32 %xor588, %594
  %add591 = add i32 %add590, -2054922799
  %595 = load i32, i32* %b, align 4
  %add592 = add i32 %595, %add591
  store i32 %add592, i32* %b, align 4
  %596 = load i32, i32* %b, align 4
  %shl593 = shl i32 %596, 21
  %597 = load i32, i32* %b, align 4
  %shr594 = lshr i32 %597, 11
  %or595 = or i32 %shl593, %shr594
  store i32 %or595, i32* %b, align 4
  %598 = load i32, i32* %c, align 4
  %599 = load i32, i32* %b, align 4
  %add596 = add i32 %599, %598
  store i32 %add596, i32* %b, align 4
  %600 = load i32, i32* %c, align 4
  %601 = load i32, i32* %b, align 4
  %602 = load i32, i32* %d, align 4
  %neg597 = xor i32 %602, -1
  %or598 = or i32 %601, %neg597
  %xor599 = xor i32 %600, %or598
  %603 = load i32*, i32** %in.addr, align 8
  %arrayidx600 = getelementptr inbounds i32, i32* %603, i64 8
  %604 = load i32, i32* %arrayidx600, align 4
  %add601 = add i32 %xor599, %604
  %add602 = add i32 %add601, 1873313359
  %605 = load i32, i32* %a, align 4
  %add603 = add i32 %605, %add602
  store i32 %add603, i32* %a, align 4
  %606 = load i32, i32* %a, align 4
  %shl604 = shl i32 %606, 6
  %607 = load i32, i32* %a, align 4
  %shr605 = lshr i32 %607, 26
  %or606 = or i32 %shl604, %shr605
  store i32 %or606, i32* %a, align 4
  %608 = load i32, i32* %b, align 4
  %609 = load i32, i32* %a, align 4
  %add607 = add i32 %609, %608
  store i32 %add607, i32* %a, align 4
  %610 = load i32, i32* %b, align 4
  %611 = load i32, i32* %a, align 4
  %612 = load i32, i32* %c, align 4
  %neg608 = xor i32 %612, -1
  %or609 = or i32 %611, %neg608
  %xor610 = xor i32 %610, %or609
  %613 = load i32*, i32** %in.addr, align 8
  %arrayidx611 = getelementptr inbounds i32, i32* %613, i64 15
  %614 = load i32, i32* %arrayidx611, align 4
  %add612 = add i32 %xor610, %614
  %add613 = add i32 %add612, -30611744
  %615 = load i32, i32* %d, align 4
  %add614 = add i32 %615, %add613
  store i32 %add614, i32* %d, align 4
  %616 = load i32, i32* %d, align 4
  %shl615 = shl i32 %616, 10
  %617 = load i32, i32* %d, align 4
  %shr616 = lshr i32 %617, 22
  %or617 = or i32 %shl615, %shr616
  store i32 %or617, i32* %d, align 4
  %618 = load i32, i32* %a, align 4
  %619 = load i32, i32* %d, align 4
  %add618 = add i32 %619, %618
  store i32 %add618, i32* %d, align 4
  %620 = load i32, i32* %a, align 4
  %621 = load i32, i32* %d, align 4
  %622 = load i32, i32* %b, align 4
  %neg619 = xor i32 %622, -1
  %or620 = or i32 %621, %neg619
  %xor621 = xor i32 %620, %or620
  %623 = load i32*, i32** %in.addr, align 8
  %arrayidx622 = getelementptr inbounds i32, i32* %623, i64 6
  %624 = load i32, i32* %arrayidx622, align 4
  %add623 = add i32 %xor621, %624
  %add624 = add i32 %add623, -1560198380
  %625 = load i32, i32* %c, align 4
  %add625 = add i32 %625, %add624
  store i32 %add625, i32* %c, align 4
  %626 = load i32, i32* %c, align 4
  %shl626 = shl i32 %626, 15
  %627 = load i32, i32* %c, align 4
  %shr627 = lshr i32 %627, 17
  %or628 = or i32 %shl626, %shr627
  store i32 %or628, i32* %c, align 4
  %628 = load i32, i32* %d, align 4
  %629 = load i32, i32* %c, align 4
  %add629 = add i32 %629, %628
  store i32 %add629, i32* %c, align 4
  %630 = load i32, i32* %d, align 4
  %631 = load i32, i32* %c, align 4
  %632 = load i32, i32* %a, align 4
  %neg630 = xor i32 %632, -1
  %or631 = or i32 %631, %neg630
  %xor632 = xor i32 %630, %or631
  %633 = load i32*, i32** %in.addr, align 8
  %arrayidx633 = getelementptr inbounds i32, i32* %633, i64 13
  %634 = load i32, i32* %arrayidx633, align 4
  %add634 = add i32 %xor632, %634
  %add635 = add i32 %add634, 1309151649
  %635 = load i32, i32* %b, align 4
  %add636 = add i32 %635, %add635
  store i32 %add636, i32* %b, align 4
  %636 = load i32, i32* %b, align 4
  %shl637 = shl i32 %636, 21
  %637 = load i32, i32* %b, align 4
  %shr638 = lshr i32 %637, 11
  %or639 = or i32 %shl637, %shr638
  store i32 %or639, i32* %b, align 4
  %638 = load i32, i32* %c, align 4
  %639 = load i32, i32* %b, align 4
  %add640 = add i32 %639, %638
  store i32 %add640, i32* %b, align 4
  %640 = load i32, i32* %c, align 4
  %641 = load i32, i32* %b, align 4
  %642 = load i32, i32* %d, align 4
  %neg641 = xor i32 %642, -1
  %or642 = or i32 %641, %neg641
  %xor643 = xor i32 %640, %or642
  %643 = load i32*, i32** %in.addr, align 8
  %arrayidx644 = getelementptr inbounds i32, i32* %643, i64 4
  %644 = load i32, i32* %arrayidx644, align 4
  %add645 = add i32 %xor643, %644
  %add646 = add i32 %add645, -145523070
  %645 = load i32, i32* %a, align 4
  %add647 = add i32 %645, %add646
  store i32 %add647, i32* %a, align 4
  %646 = load i32, i32* %a, align 4
  %shl648 = shl i32 %646, 6
  %647 = load i32, i32* %a, align 4
  %shr649 = lshr i32 %647, 26
  %or650 = or i32 %shl648, %shr649
  store i32 %or650, i32* %a, align 4
  %648 = load i32, i32* %b, align 4
  %649 = load i32, i32* %a, align 4
  %add651 = add i32 %649, %648
  store i32 %add651, i32* %a, align 4
  %650 = load i32, i32* %b, align 4
  %651 = load i32, i32* %a, align 4
  %652 = load i32, i32* %c, align 4
  %neg652 = xor i32 %652, -1
  %or653 = or i32 %651, %neg652
  %xor654 = xor i32 %650, %or653
  %653 = load i32*, i32** %in.addr, align 8
  %arrayidx655 = getelementptr inbounds i32, i32* %653, i64 11
  %654 = load i32, i32* %arrayidx655, align 4
  %add656 = add i32 %xor654, %654
  %add657 = add i32 %add656, -1120210379
  %655 = load i32, i32* %d, align 4
  %add658 = add i32 %655, %add657
  store i32 %add658, i32* %d, align 4
  %656 = load i32, i32* %d, align 4
  %shl659 = shl i32 %656, 10
  %657 = load i32, i32* %d, align 4
  %shr660 = lshr i32 %657, 22
  %or661 = or i32 %shl659, %shr660
  store i32 %or661, i32* %d, align 4
  %658 = load i32, i32* %a, align 4
  %659 = load i32, i32* %d, align 4
  %add662 = add i32 %659, %658
  store i32 %add662, i32* %d, align 4
  %660 = load i32, i32* %a, align 4
  %661 = load i32, i32* %d, align 4
  %662 = load i32, i32* %b, align 4
  %neg663 = xor i32 %662, -1
  %or664 = or i32 %661, %neg663
  %xor665 = xor i32 %660, %or664
  %663 = load i32*, i32** %in.addr, align 8
  %arrayidx666 = getelementptr inbounds i32, i32* %663, i64 2
  %664 = load i32, i32* %arrayidx666, align 4
  %add667 = add i32 %xor665, %664
  %add668 = add i32 %add667, 718787259
  %665 = load i32, i32* %c, align 4
  %add669 = add i32 %665, %add668
  store i32 %add669, i32* %c, align 4
  %666 = load i32, i32* %c, align 4
  %shl670 = shl i32 %666, 15
  %667 = load i32, i32* %c, align 4
  %shr671 = lshr i32 %667, 17
  %or672 = or i32 %shl670, %shr671
  store i32 %or672, i32* %c, align 4
  %668 = load i32, i32* %d, align 4
  %669 = load i32, i32* %c, align 4
  %add673 = add i32 %669, %668
  store i32 %add673, i32* %c, align 4
  %670 = load i32, i32* %d, align 4
  %671 = load i32, i32* %c, align 4
  %672 = load i32, i32* %a, align 4
  %neg674 = xor i32 %672, -1
  %or675 = or i32 %671, %neg674
  %xor676 = xor i32 %670, %or675
  %673 = load i32*, i32** %in.addr, align 8
  %arrayidx677 = getelementptr inbounds i32, i32* %673, i64 9
  %674 = load i32, i32* %arrayidx677, align 4
  %add678 = add i32 %xor676, %674
  %add679 = add i32 %add678, -343485551
  %675 = load i32, i32* %b, align 4
  %add680 = add i32 %675, %add679
  store i32 %add680, i32* %b, align 4
  %676 = load i32, i32* %b, align 4
  %shl681 = shl i32 %676, 21
  %677 = load i32, i32* %b, align 4
  %shr682 = lshr i32 %677, 11
  %or683 = or i32 %shl681, %shr682
  store i32 %or683, i32* %b, align 4
  %678 = load i32, i32* %c, align 4
  %679 = load i32, i32* %b, align 4
  %add684 = add i32 %679, %678
  store i32 %add684, i32* %b, align 4
  %680 = load i32, i32* %a, align 4
  %681 = load i32*, i32** %buf.addr, align 8
  %arrayidx685 = getelementptr inbounds i32, i32* %681, i64 0
  %682 = load i32, i32* %arrayidx685, align 4
  %add686 = add i32 %682, %680
  store i32 %add686, i32* %arrayidx685, align 4
  %683 = load i32, i32* %b, align 4
  %684 = load i32*, i32** %buf.addr, align 8
  %arrayidx687 = getelementptr inbounds i32, i32* %684, i64 1
  %685 = load i32, i32* %arrayidx687, align 4
  %add688 = add i32 %685, %683
  store i32 %add688, i32* %arrayidx687, align 4
  %686 = load i32, i32* %c, align 4
  %687 = load i32*, i32** %buf.addr, align 8
  %arrayidx689 = getelementptr inbounds i32, i32* %687, i64 2
  %688 = load i32, i32* %arrayidx689, align 4
  %add690 = add i32 %688, %686
  store i32 %add690, i32* %arrayidx689, align 4
  %689 = load i32, i32* %d, align 4
  %690 = load i32*, i32** %buf.addr, align 8
  %arrayidx691 = getelementptr inbounds i32, i32* %690, i64 3
  %691 = load i32, i32* %arrayidx691, align 4
  %add692 = add i32 %691, %689
  store i32 %add692, i32* %arrayidx691, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_md5_final(i8* %digest, %struct.cs_md5_ctx* %ctx) #0 {
entry:
  %digest.addr = alloca i8*, align 8
  %ctx.addr = alloca %struct.cs_md5_ctx*, align 8
  %count = alloca i32, align 4
  %p = alloca i8*, align 8
  %a = alloca i32*, align 8
  store i8* %digest, i8** %digest.addr, align 8
  store %struct.cs_md5_ctx* %ctx, %struct.cs_md5_ctx** %ctx.addr, align 8
  %0 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i64 0, i64 0
  %1 = load i32, i32* %arrayidx, align 4
  %shr = lshr i32 %1, 3
  %and = and i32 %shr, 63
  store i32 %and, i32* %count, align 4
  %2 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %2, i32 0, i32 2
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %in, i32 0, i32 0
  %3 = load i32, i32* %count, align 4
  %idx.ext = zext i32 %3 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8
  %4 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  store i8 -128, i8* %4, align 1
  %5 = load i32, i32* %count, align 4
  %sub = sub i32 63, %5
  store i32 %sub, i32* %count, align 4
  %6 = load i32, i32* %count, align 4
  %cmp = icmp ult i32 %6, 8
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i8*, i8** %p, align 8
  %8 = load i32, i32* %count, align 4
  %conv = zext i32 %8 to i64
  %9 = load i8*, i8** %p, align 8
  %10 = call i64 @llvm.objectsize.i64.p0i8(i8* %9, i1 false)
  %call = call i8* @__memset_chk(i8* %7, i32 0, i64 %conv, i64 %10) #5
  %11 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in1 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %11, i32 0, i32 2
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %in1, i32 0, i32 0
  call void @byteReverse(i8* %arraydecay2, i32 16)
  %12 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %12, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [4 x i32], [4 x i32]* %buf, i32 0, i32 0
  %13 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in4 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %13, i32 0, i32 2
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %in4, i32 0, i32 0
  %14 = bitcast i8* %arraydecay5 to i32*
  call void @cs_md5_transform(i32* %arraydecay3, i32* %14)
  %15 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in6 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %15, i32 0, i32 2
  %arraydecay7 = getelementptr inbounds [64 x i8], [64 x i8]* %in6, i32 0, i32 0
  %16 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in8 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %16, i32 0, i32 2
  %arraydecay9 = getelementptr inbounds [64 x i8], [64 x i8]* %in8, i32 0, i32 0
  %17 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay9, i1 false)
  %call10 = call i8* @__memset_chk(i8* %arraydecay7, i32 0, i64 56, i64 %17) #5
  br label %if.end

if.else:                                          ; preds = %entry
  %18 = load i8*, i8** %p, align 8
  %19 = load i32, i32* %count, align 4
  %sub11 = sub i32 %19, 8
  %conv12 = zext i32 %sub11 to i64
  %20 = load i8*, i8** %p, align 8
  %21 = call i64 @llvm.objectsize.i64.p0i8(i8* %20, i1 false)
  %call13 = call i8* @__memset_chk(i8* %18, i32 0, i64 %conv12, i64 %21) #5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %22 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in14 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %22, i32 0, i32 2
  %arraydecay15 = getelementptr inbounds [64 x i8], [64 x i8]* %in14, i32 0, i32 0
  call void @byteReverse(i8* %arraydecay15, i32 14)
  %23 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in16 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %23, i32 0, i32 2
  %arraydecay17 = getelementptr inbounds [64 x i8], [64 x i8]* %in16, i32 0, i32 0
  %24 = bitcast i8* %arraydecay17 to i32*
  store i32* %24, i32** %a, align 8
  %25 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits18 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %25, i32 0, i32 1
  %arrayidx19 = getelementptr inbounds [2 x i32], [2 x i32]* %bits18, i64 0, i64 0
  %26 = load i32, i32* %arrayidx19, align 4
  %27 = load i32*, i32** %a, align 8
  %arrayidx20 = getelementptr inbounds i32, i32* %27, i64 14
  store i32 %26, i32* %arrayidx20, align 4
  %28 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %bits21 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %28, i32 0, i32 1
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %bits21, i64 0, i64 1
  %29 = load i32, i32* %arrayidx22, align 4
  %30 = load i32*, i32** %a, align 8
  %arrayidx23 = getelementptr inbounds i32, i32* %30, i64 15
  store i32 %29, i32* %arrayidx23, align 4
  %31 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf24 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %31, i32 0, i32 0
  %arraydecay25 = getelementptr inbounds [4 x i32], [4 x i32]* %buf24, i32 0, i32 0
  %32 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %in26 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %32, i32 0, i32 2
  %arraydecay27 = getelementptr inbounds [64 x i8], [64 x i8]* %in26, i32 0, i32 0
  %33 = bitcast i8* %arraydecay27 to i32*
  call void @cs_md5_transform(i32* %arraydecay25, i32* %33)
  %34 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf28 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %34, i32 0, i32 0
  %arraydecay29 = getelementptr inbounds [4 x i32], [4 x i32]* %buf28, i32 0, i32 0
  %35 = bitcast i32* %arraydecay29 to i8*
  call void @byteReverse(i8* %35, i32 4)
  %36 = load i8*, i8** %digest.addr, align 8
  %37 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %buf30 = getelementptr inbounds %struct.cs_md5_ctx, %struct.cs_md5_ctx* %37, i32 0, i32 0
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %buf30, i32 0, i32 0
  %38 = bitcast i32* %arraydecay31 to i8*
  %39 = load i8*, i8** %digest.addr, align 8
  %40 = call i64 @llvm.objectsize.i64.p0i8(i8* %39, i1 false)
  %call32 = call i8* @__memcpy_chk(i8* %36, i8* %38, i64 16, i64 %40) #5
  %41 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %42 = bitcast %struct.cs_md5_ctx* %41 to i8*
  %43 = load %struct.cs_md5_ctx*, %struct.cs_md5_ctx** %ctx.addr, align 8
  %44 = bitcast %struct.cs_md5_ctx* %43 to i8*
  %45 = call i64 @llvm.objectsize.i64.p0i8(i8* %44, i1 false)
  %call33 = call i8* @__memset_chk(i8* %42, i32 0, i64 88, i64 %45) #5
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_sha1_transform(i32* %state, i8* %buffer) #0 {
entry:
  %state.addr = alloca i32*, align 8
  %buffer.addr = alloca i8*, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %e = alloca i32, align 4
  %block = alloca [1 x %union.char64long16], align 16
  store i32* %state, i32** %state.addr, align 8
  store i8* %buffer, i8** %buffer.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %0 = bitcast %union.char64long16* %arraydecay to i8*
  %1 = load i8*, i8** %buffer.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 64, i32 1, i1 false)
  %2 = load i32*, i32** %state.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 0
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %a, align 4
  %4 = load i32*, i32** %state.addr, align 8
  %arrayidx1 = getelementptr inbounds i32, i32* %4, i64 1
  %5 = load i32, i32* %arrayidx1, align 4
  store i32 %5, i32* %b, align 4
  %6 = load i32*, i32** %state.addr, align 8
  %arrayidx2 = getelementptr inbounds i32, i32* %6, i64 2
  %7 = load i32, i32* %arrayidx2, align 4
  store i32 %7, i32* %c, align 4
  %8 = load i32*, i32** %state.addr, align 8
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i64 3
  %9 = load i32, i32* %arrayidx3, align 4
  store i32 %9, i32* %d, align 4
  %10 = load i32*, i32** %state.addr, align 8
  %arrayidx4 = getelementptr inbounds i32, i32* %10, i64 4
  %11 = load i32, i32* %arrayidx4, align 4
  store i32 %11, i32* %e, align 4
  %12 = load i32, i32* %b, align 4
  %13 = load i32, i32* %c, align 4
  %14 = load i32, i32* %d, align 4
  %xor = xor i32 %13, %14
  %and = and i32 %12, %xor
  %15 = load i32, i32* %d, align 4
  %xor5 = xor i32 %and, %15
  %arraydecay6 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call = call i32 @blk0(%union.char64long16* %arraydecay6, i32 0)
  %add = add i32 %xor5, %call
  %add7 = add i32 %add, 1518500249
  %16 = load i32, i32* %a, align 4
  %shl = shl i32 %16, 5
  %17 = load i32, i32* %a, align 4
  %shr = lshr i32 %17, 27
  %or = or i32 %shl, %shr
  %add8 = add i32 %add7, %or
  %18 = load i32, i32* %e, align 4
  %add9 = add i32 %18, %add8
  store i32 %add9, i32* %e, align 4
  %19 = load i32, i32* %b, align 4
  %shl10 = shl i32 %19, 30
  %20 = load i32, i32* %b, align 4
  %shr11 = lshr i32 %20, 2
  %or12 = or i32 %shl10, %shr11
  store i32 %or12, i32* %b, align 4
  %21 = load i32, i32* %a, align 4
  %22 = load i32, i32* %b, align 4
  %23 = load i32, i32* %c, align 4
  %xor13 = xor i32 %22, %23
  %and14 = and i32 %21, %xor13
  %24 = load i32, i32* %c, align 4
  %xor15 = xor i32 %and14, %24
  %arraydecay16 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call17 = call i32 @blk0(%union.char64long16* %arraydecay16, i32 1)
  %add18 = add i32 %xor15, %call17
  %add19 = add i32 %add18, 1518500249
  %25 = load i32, i32* %e, align 4
  %shl20 = shl i32 %25, 5
  %26 = load i32, i32* %e, align 4
  %shr21 = lshr i32 %26, 27
  %or22 = or i32 %shl20, %shr21
  %add23 = add i32 %add19, %or22
  %27 = load i32, i32* %d, align 4
  %add24 = add i32 %27, %add23
  store i32 %add24, i32* %d, align 4
  %28 = load i32, i32* %a, align 4
  %shl25 = shl i32 %28, 30
  %29 = load i32, i32* %a, align 4
  %shr26 = lshr i32 %29, 2
  %or27 = or i32 %shl25, %shr26
  store i32 %or27, i32* %a, align 4
  %30 = load i32, i32* %e, align 4
  %31 = load i32, i32* %a, align 4
  %32 = load i32, i32* %b, align 4
  %xor28 = xor i32 %31, %32
  %and29 = and i32 %30, %xor28
  %33 = load i32, i32* %b, align 4
  %xor30 = xor i32 %and29, %33
  %arraydecay31 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call32 = call i32 @blk0(%union.char64long16* %arraydecay31, i32 2)
  %add33 = add i32 %xor30, %call32
  %add34 = add i32 %add33, 1518500249
  %34 = load i32, i32* %d, align 4
  %shl35 = shl i32 %34, 5
  %35 = load i32, i32* %d, align 4
  %shr36 = lshr i32 %35, 27
  %or37 = or i32 %shl35, %shr36
  %add38 = add i32 %add34, %or37
  %36 = load i32, i32* %c, align 4
  %add39 = add i32 %36, %add38
  store i32 %add39, i32* %c, align 4
  %37 = load i32, i32* %e, align 4
  %shl40 = shl i32 %37, 30
  %38 = load i32, i32* %e, align 4
  %shr41 = lshr i32 %38, 2
  %or42 = or i32 %shl40, %shr41
  store i32 %or42, i32* %e, align 4
  %39 = load i32, i32* %d, align 4
  %40 = load i32, i32* %e, align 4
  %41 = load i32, i32* %a, align 4
  %xor43 = xor i32 %40, %41
  %and44 = and i32 %39, %xor43
  %42 = load i32, i32* %a, align 4
  %xor45 = xor i32 %and44, %42
  %arraydecay46 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call47 = call i32 @blk0(%union.char64long16* %arraydecay46, i32 3)
  %add48 = add i32 %xor45, %call47
  %add49 = add i32 %add48, 1518500249
  %43 = load i32, i32* %c, align 4
  %shl50 = shl i32 %43, 5
  %44 = load i32, i32* %c, align 4
  %shr51 = lshr i32 %44, 27
  %or52 = or i32 %shl50, %shr51
  %add53 = add i32 %add49, %or52
  %45 = load i32, i32* %b, align 4
  %add54 = add i32 %45, %add53
  store i32 %add54, i32* %b, align 4
  %46 = load i32, i32* %d, align 4
  %shl55 = shl i32 %46, 30
  %47 = load i32, i32* %d, align 4
  %shr56 = lshr i32 %47, 2
  %or57 = or i32 %shl55, %shr56
  store i32 %or57, i32* %d, align 4
  %48 = load i32, i32* %c, align 4
  %49 = load i32, i32* %d, align 4
  %50 = load i32, i32* %e, align 4
  %xor58 = xor i32 %49, %50
  %and59 = and i32 %48, %xor58
  %51 = load i32, i32* %e, align 4
  %xor60 = xor i32 %and59, %51
  %arraydecay61 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call62 = call i32 @blk0(%union.char64long16* %arraydecay61, i32 4)
  %add63 = add i32 %xor60, %call62
  %add64 = add i32 %add63, 1518500249
  %52 = load i32, i32* %b, align 4
  %shl65 = shl i32 %52, 5
  %53 = load i32, i32* %b, align 4
  %shr66 = lshr i32 %53, 27
  %or67 = or i32 %shl65, %shr66
  %add68 = add i32 %add64, %or67
  %54 = load i32, i32* %a, align 4
  %add69 = add i32 %54, %add68
  store i32 %add69, i32* %a, align 4
  %55 = load i32, i32* %c, align 4
  %shl70 = shl i32 %55, 30
  %56 = load i32, i32* %c, align 4
  %shr71 = lshr i32 %56, 2
  %or72 = or i32 %shl70, %shr71
  store i32 %or72, i32* %c, align 4
  %57 = load i32, i32* %b, align 4
  %58 = load i32, i32* %c, align 4
  %59 = load i32, i32* %d, align 4
  %xor73 = xor i32 %58, %59
  %and74 = and i32 %57, %xor73
  %60 = load i32, i32* %d, align 4
  %xor75 = xor i32 %and74, %60
  %arraydecay76 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call77 = call i32 @blk0(%union.char64long16* %arraydecay76, i32 5)
  %add78 = add i32 %xor75, %call77
  %add79 = add i32 %add78, 1518500249
  %61 = load i32, i32* %a, align 4
  %shl80 = shl i32 %61, 5
  %62 = load i32, i32* %a, align 4
  %shr81 = lshr i32 %62, 27
  %or82 = or i32 %shl80, %shr81
  %add83 = add i32 %add79, %or82
  %63 = load i32, i32* %e, align 4
  %add84 = add i32 %63, %add83
  store i32 %add84, i32* %e, align 4
  %64 = load i32, i32* %b, align 4
  %shl85 = shl i32 %64, 30
  %65 = load i32, i32* %b, align 4
  %shr86 = lshr i32 %65, 2
  %or87 = or i32 %shl85, %shr86
  store i32 %or87, i32* %b, align 4
  %66 = load i32, i32* %a, align 4
  %67 = load i32, i32* %b, align 4
  %68 = load i32, i32* %c, align 4
  %xor88 = xor i32 %67, %68
  %and89 = and i32 %66, %xor88
  %69 = load i32, i32* %c, align 4
  %xor90 = xor i32 %and89, %69
  %arraydecay91 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call92 = call i32 @blk0(%union.char64long16* %arraydecay91, i32 6)
  %add93 = add i32 %xor90, %call92
  %add94 = add i32 %add93, 1518500249
  %70 = load i32, i32* %e, align 4
  %shl95 = shl i32 %70, 5
  %71 = load i32, i32* %e, align 4
  %shr96 = lshr i32 %71, 27
  %or97 = or i32 %shl95, %shr96
  %add98 = add i32 %add94, %or97
  %72 = load i32, i32* %d, align 4
  %add99 = add i32 %72, %add98
  store i32 %add99, i32* %d, align 4
  %73 = load i32, i32* %a, align 4
  %shl100 = shl i32 %73, 30
  %74 = load i32, i32* %a, align 4
  %shr101 = lshr i32 %74, 2
  %or102 = or i32 %shl100, %shr101
  store i32 %or102, i32* %a, align 4
  %75 = load i32, i32* %e, align 4
  %76 = load i32, i32* %a, align 4
  %77 = load i32, i32* %b, align 4
  %xor103 = xor i32 %76, %77
  %and104 = and i32 %75, %xor103
  %78 = load i32, i32* %b, align 4
  %xor105 = xor i32 %and104, %78
  %arraydecay106 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call107 = call i32 @blk0(%union.char64long16* %arraydecay106, i32 7)
  %add108 = add i32 %xor105, %call107
  %add109 = add i32 %add108, 1518500249
  %79 = load i32, i32* %d, align 4
  %shl110 = shl i32 %79, 5
  %80 = load i32, i32* %d, align 4
  %shr111 = lshr i32 %80, 27
  %or112 = or i32 %shl110, %shr111
  %add113 = add i32 %add109, %or112
  %81 = load i32, i32* %c, align 4
  %add114 = add i32 %81, %add113
  store i32 %add114, i32* %c, align 4
  %82 = load i32, i32* %e, align 4
  %shl115 = shl i32 %82, 30
  %83 = load i32, i32* %e, align 4
  %shr116 = lshr i32 %83, 2
  %or117 = or i32 %shl115, %shr116
  store i32 %or117, i32* %e, align 4
  %84 = load i32, i32* %d, align 4
  %85 = load i32, i32* %e, align 4
  %86 = load i32, i32* %a, align 4
  %xor118 = xor i32 %85, %86
  %and119 = and i32 %84, %xor118
  %87 = load i32, i32* %a, align 4
  %xor120 = xor i32 %and119, %87
  %arraydecay121 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call122 = call i32 @blk0(%union.char64long16* %arraydecay121, i32 8)
  %add123 = add i32 %xor120, %call122
  %add124 = add i32 %add123, 1518500249
  %88 = load i32, i32* %c, align 4
  %shl125 = shl i32 %88, 5
  %89 = load i32, i32* %c, align 4
  %shr126 = lshr i32 %89, 27
  %or127 = or i32 %shl125, %shr126
  %add128 = add i32 %add124, %or127
  %90 = load i32, i32* %b, align 4
  %add129 = add i32 %90, %add128
  store i32 %add129, i32* %b, align 4
  %91 = load i32, i32* %d, align 4
  %shl130 = shl i32 %91, 30
  %92 = load i32, i32* %d, align 4
  %shr131 = lshr i32 %92, 2
  %or132 = or i32 %shl130, %shr131
  store i32 %or132, i32* %d, align 4
  %93 = load i32, i32* %c, align 4
  %94 = load i32, i32* %d, align 4
  %95 = load i32, i32* %e, align 4
  %xor133 = xor i32 %94, %95
  %and134 = and i32 %93, %xor133
  %96 = load i32, i32* %e, align 4
  %xor135 = xor i32 %and134, %96
  %arraydecay136 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call137 = call i32 @blk0(%union.char64long16* %arraydecay136, i32 9)
  %add138 = add i32 %xor135, %call137
  %add139 = add i32 %add138, 1518500249
  %97 = load i32, i32* %b, align 4
  %shl140 = shl i32 %97, 5
  %98 = load i32, i32* %b, align 4
  %shr141 = lshr i32 %98, 27
  %or142 = or i32 %shl140, %shr141
  %add143 = add i32 %add139, %or142
  %99 = load i32, i32* %a, align 4
  %add144 = add i32 %99, %add143
  store i32 %add144, i32* %a, align 4
  %100 = load i32, i32* %c, align 4
  %shl145 = shl i32 %100, 30
  %101 = load i32, i32* %c, align 4
  %shr146 = lshr i32 %101, 2
  %or147 = or i32 %shl145, %shr146
  store i32 %or147, i32* %c, align 4
  %102 = load i32, i32* %b, align 4
  %103 = load i32, i32* %c, align 4
  %104 = load i32, i32* %d, align 4
  %xor148 = xor i32 %103, %104
  %and149 = and i32 %102, %xor148
  %105 = load i32, i32* %d, align 4
  %xor150 = xor i32 %and149, %105
  %arraydecay151 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call152 = call i32 @blk0(%union.char64long16* %arraydecay151, i32 10)
  %add153 = add i32 %xor150, %call152
  %add154 = add i32 %add153, 1518500249
  %106 = load i32, i32* %a, align 4
  %shl155 = shl i32 %106, 5
  %107 = load i32, i32* %a, align 4
  %shr156 = lshr i32 %107, 27
  %or157 = or i32 %shl155, %shr156
  %add158 = add i32 %add154, %or157
  %108 = load i32, i32* %e, align 4
  %add159 = add i32 %108, %add158
  store i32 %add159, i32* %e, align 4
  %109 = load i32, i32* %b, align 4
  %shl160 = shl i32 %109, 30
  %110 = load i32, i32* %b, align 4
  %shr161 = lshr i32 %110, 2
  %or162 = or i32 %shl160, %shr161
  store i32 %or162, i32* %b, align 4
  %111 = load i32, i32* %a, align 4
  %112 = load i32, i32* %b, align 4
  %113 = load i32, i32* %c, align 4
  %xor163 = xor i32 %112, %113
  %and164 = and i32 %111, %xor163
  %114 = load i32, i32* %c, align 4
  %xor165 = xor i32 %and164, %114
  %arraydecay166 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call167 = call i32 @blk0(%union.char64long16* %arraydecay166, i32 11)
  %add168 = add i32 %xor165, %call167
  %add169 = add i32 %add168, 1518500249
  %115 = load i32, i32* %e, align 4
  %shl170 = shl i32 %115, 5
  %116 = load i32, i32* %e, align 4
  %shr171 = lshr i32 %116, 27
  %or172 = or i32 %shl170, %shr171
  %add173 = add i32 %add169, %or172
  %117 = load i32, i32* %d, align 4
  %add174 = add i32 %117, %add173
  store i32 %add174, i32* %d, align 4
  %118 = load i32, i32* %a, align 4
  %shl175 = shl i32 %118, 30
  %119 = load i32, i32* %a, align 4
  %shr176 = lshr i32 %119, 2
  %or177 = or i32 %shl175, %shr176
  store i32 %or177, i32* %a, align 4
  %120 = load i32, i32* %e, align 4
  %121 = load i32, i32* %a, align 4
  %122 = load i32, i32* %b, align 4
  %xor178 = xor i32 %121, %122
  %and179 = and i32 %120, %xor178
  %123 = load i32, i32* %b, align 4
  %xor180 = xor i32 %and179, %123
  %arraydecay181 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call182 = call i32 @blk0(%union.char64long16* %arraydecay181, i32 12)
  %add183 = add i32 %xor180, %call182
  %add184 = add i32 %add183, 1518500249
  %124 = load i32, i32* %d, align 4
  %shl185 = shl i32 %124, 5
  %125 = load i32, i32* %d, align 4
  %shr186 = lshr i32 %125, 27
  %or187 = or i32 %shl185, %shr186
  %add188 = add i32 %add184, %or187
  %126 = load i32, i32* %c, align 4
  %add189 = add i32 %126, %add188
  store i32 %add189, i32* %c, align 4
  %127 = load i32, i32* %e, align 4
  %shl190 = shl i32 %127, 30
  %128 = load i32, i32* %e, align 4
  %shr191 = lshr i32 %128, 2
  %or192 = or i32 %shl190, %shr191
  store i32 %or192, i32* %e, align 4
  %129 = load i32, i32* %d, align 4
  %130 = load i32, i32* %e, align 4
  %131 = load i32, i32* %a, align 4
  %xor193 = xor i32 %130, %131
  %and194 = and i32 %129, %xor193
  %132 = load i32, i32* %a, align 4
  %xor195 = xor i32 %and194, %132
  %arraydecay196 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call197 = call i32 @blk0(%union.char64long16* %arraydecay196, i32 13)
  %add198 = add i32 %xor195, %call197
  %add199 = add i32 %add198, 1518500249
  %133 = load i32, i32* %c, align 4
  %shl200 = shl i32 %133, 5
  %134 = load i32, i32* %c, align 4
  %shr201 = lshr i32 %134, 27
  %or202 = or i32 %shl200, %shr201
  %add203 = add i32 %add199, %or202
  %135 = load i32, i32* %b, align 4
  %add204 = add i32 %135, %add203
  store i32 %add204, i32* %b, align 4
  %136 = load i32, i32* %d, align 4
  %shl205 = shl i32 %136, 30
  %137 = load i32, i32* %d, align 4
  %shr206 = lshr i32 %137, 2
  %or207 = or i32 %shl205, %shr206
  store i32 %or207, i32* %d, align 4
  %138 = load i32, i32* %c, align 4
  %139 = load i32, i32* %d, align 4
  %140 = load i32, i32* %e, align 4
  %xor208 = xor i32 %139, %140
  %and209 = and i32 %138, %xor208
  %141 = load i32, i32* %e, align 4
  %xor210 = xor i32 %and209, %141
  %arraydecay211 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call212 = call i32 @blk0(%union.char64long16* %arraydecay211, i32 14)
  %add213 = add i32 %xor210, %call212
  %add214 = add i32 %add213, 1518500249
  %142 = load i32, i32* %b, align 4
  %shl215 = shl i32 %142, 5
  %143 = load i32, i32* %b, align 4
  %shr216 = lshr i32 %143, 27
  %or217 = or i32 %shl215, %shr216
  %add218 = add i32 %add214, %or217
  %144 = load i32, i32* %a, align 4
  %add219 = add i32 %144, %add218
  store i32 %add219, i32* %a, align 4
  %145 = load i32, i32* %c, align 4
  %shl220 = shl i32 %145, 30
  %146 = load i32, i32* %c, align 4
  %shr221 = lshr i32 %146, 2
  %or222 = or i32 %shl220, %shr221
  store i32 %or222, i32* %c, align 4
  %147 = load i32, i32* %b, align 4
  %148 = load i32, i32* %c, align 4
  %149 = load i32, i32* %d, align 4
  %xor223 = xor i32 %148, %149
  %and224 = and i32 %147, %xor223
  %150 = load i32, i32* %d, align 4
  %xor225 = xor i32 %and224, %150
  %arraydecay226 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %call227 = call i32 @blk0(%union.char64long16* %arraydecay226, i32 15)
  %add228 = add i32 %xor225, %call227
  %add229 = add i32 %add228, 1518500249
  %151 = load i32, i32* %a, align 4
  %shl230 = shl i32 %151, 5
  %152 = load i32, i32* %a, align 4
  %shr231 = lshr i32 %152, 27
  %or232 = or i32 %shl230, %shr231
  %add233 = add i32 %add229, %or232
  %153 = load i32, i32* %e, align 4
  %add234 = add i32 %153, %add233
  store i32 %add234, i32* %e, align 4
  %154 = load i32, i32* %b, align 4
  %shl235 = shl i32 %154, 30
  %155 = load i32, i32* %b, align 4
  %shr236 = lshr i32 %155, 2
  %or237 = or i32 %shl235, %shr236
  store i32 %or237, i32* %b, align 4
  %156 = load i32, i32* %a, align 4
  %157 = load i32, i32* %b, align 4
  %158 = load i32, i32* %c, align 4
  %xor238 = xor i32 %157, %158
  %and239 = and i32 %156, %xor238
  %159 = load i32, i32* %c, align 4
  %xor240 = xor i32 %and239, %159
  %arraydecay241 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l = bitcast %union.char64long16* %arraydecay241 to [16 x i32]*
  %arrayidx242 = getelementptr inbounds [16 x i32], [16 x i32]* %l, i64 0, i64 13
  %160 = load i32, i32* %arrayidx242, align 4
  %arraydecay243 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l244 = bitcast %union.char64long16* %arraydecay243 to [16 x i32]*
  %arrayidx245 = getelementptr inbounds [16 x i32], [16 x i32]* %l244, i64 0, i64 8
  %161 = load i32, i32* %arrayidx245, align 16
  %xor246 = xor i32 %160, %161
  %arraydecay247 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l248 = bitcast %union.char64long16* %arraydecay247 to [16 x i32]*
  %arrayidx249 = getelementptr inbounds [16 x i32], [16 x i32]* %l248, i64 0, i64 2
  %162 = load i32, i32* %arrayidx249, align 8
  %xor250 = xor i32 %xor246, %162
  %arraydecay251 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l252 = bitcast %union.char64long16* %arraydecay251 to [16 x i32]*
  %arrayidx253 = getelementptr inbounds [16 x i32], [16 x i32]* %l252, i64 0, i64 0
  %163 = load i32, i32* %arrayidx253, align 16
  %xor254 = xor i32 %xor250, %163
  %shl255 = shl i32 %xor254, 1
  %arraydecay256 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l257 = bitcast %union.char64long16* %arraydecay256 to [16 x i32]*
  %arrayidx258 = getelementptr inbounds [16 x i32], [16 x i32]* %l257, i64 0, i64 13
  %164 = load i32, i32* %arrayidx258, align 4
  %arraydecay259 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l260 = bitcast %union.char64long16* %arraydecay259 to [16 x i32]*
  %arrayidx261 = getelementptr inbounds [16 x i32], [16 x i32]* %l260, i64 0, i64 8
  %165 = load i32, i32* %arrayidx261, align 16
  %xor262 = xor i32 %164, %165
  %arraydecay263 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l264 = bitcast %union.char64long16* %arraydecay263 to [16 x i32]*
  %arrayidx265 = getelementptr inbounds [16 x i32], [16 x i32]* %l264, i64 0, i64 2
  %166 = load i32, i32* %arrayidx265, align 8
  %xor266 = xor i32 %xor262, %166
  %arraydecay267 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l268 = bitcast %union.char64long16* %arraydecay267 to [16 x i32]*
  %arrayidx269 = getelementptr inbounds [16 x i32], [16 x i32]* %l268, i64 0, i64 0
  %167 = load i32, i32* %arrayidx269, align 16
  %xor270 = xor i32 %xor266, %167
  %shr271 = lshr i32 %xor270, 31
  %or272 = or i32 %shl255, %shr271
  %arraydecay273 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l274 = bitcast %union.char64long16* %arraydecay273 to [16 x i32]*
  %arrayidx275 = getelementptr inbounds [16 x i32], [16 x i32]* %l274, i64 0, i64 0
  store i32 %or272, i32* %arrayidx275, align 16
  %add276 = add i32 %xor240, %or272
  %add277 = add i32 %add276, 1518500249
  %168 = load i32, i32* %e, align 4
  %shl278 = shl i32 %168, 5
  %169 = load i32, i32* %e, align 4
  %shr279 = lshr i32 %169, 27
  %or280 = or i32 %shl278, %shr279
  %add281 = add i32 %add277, %or280
  %170 = load i32, i32* %d, align 4
  %add282 = add i32 %170, %add281
  store i32 %add282, i32* %d, align 4
  %171 = load i32, i32* %a, align 4
  %shl283 = shl i32 %171, 30
  %172 = load i32, i32* %a, align 4
  %shr284 = lshr i32 %172, 2
  %or285 = or i32 %shl283, %shr284
  store i32 %or285, i32* %a, align 4
  %173 = load i32, i32* %e, align 4
  %174 = load i32, i32* %a, align 4
  %175 = load i32, i32* %b, align 4
  %xor286 = xor i32 %174, %175
  %and287 = and i32 %173, %xor286
  %176 = load i32, i32* %b, align 4
  %xor288 = xor i32 %and287, %176
  %arraydecay289 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l290 = bitcast %union.char64long16* %arraydecay289 to [16 x i32]*
  %arrayidx291 = getelementptr inbounds [16 x i32], [16 x i32]* %l290, i64 0, i64 14
  %177 = load i32, i32* %arrayidx291, align 8
  %arraydecay292 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l293 = bitcast %union.char64long16* %arraydecay292 to [16 x i32]*
  %arrayidx294 = getelementptr inbounds [16 x i32], [16 x i32]* %l293, i64 0, i64 9
  %178 = load i32, i32* %arrayidx294, align 4
  %xor295 = xor i32 %177, %178
  %arraydecay296 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l297 = bitcast %union.char64long16* %arraydecay296 to [16 x i32]*
  %arrayidx298 = getelementptr inbounds [16 x i32], [16 x i32]* %l297, i64 0, i64 3
  %179 = load i32, i32* %arrayidx298, align 4
  %xor299 = xor i32 %xor295, %179
  %arraydecay300 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l301 = bitcast %union.char64long16* %arraydecay300 to [16 x i32]*
  %arrayidx302 = getelementptr inbounds [16 x i32], [16 x i32]* %l301, i64 0, i64 1
  %180 = load i32, i32* %arrayidx302, align 4
  %xor303 = xor i32 %xor299, %180
  %shl304 = shl i32 %xor303, 1
  %arraydecay305 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l306 = bitcast %union.char64long16* %arraydecay305 to [16 x i32]*
  %arrayidx307 = getelementptr inbounds [16 x i32], [16 x i32]* %l306, i64 0, i64 14
  %181 = load i32, i32* %arrayidx307, align 8
  %arraydecay308 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l309 = bitcast %union.char64long16* %arraydecay308 to [16 x i32]*
  %arrayidx310 = getelementptr inbounds [16 x i32], [16 x i32]* %l309, i64 0, i64 9
  %182 = load i32, i32* %arrayidx310, align 4
  %xor311 = xor i32 %181, %182
  %arraydecay312 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l313 = bitcast %union.char64long16* %arraydecay312 to [16 x i32]*
  %arrayidx314 = getelementptr inbounds [16 x i32], [16 x i32]* %l313, i64 0, i64 3
  %183 = load i32, i32* %arrayidx314, align 4
  %xor315 = xor i32 %xor311, %183
  %arraydecay316 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l317 = bitcast %union.char64long16* %arraydecay316 to [16 x i32]*
  %arrayidx318 = getelementptr inbounds [16 x i32], [16 x i32]* %l317, i64 0, i64 1
  %184 = load i32, i32* %arrayidx318, align 4
  %xor319 = xor i32 %xor315, %184
  %shr320 = lshr i32 %xor319, 31
  %or321 = or i32 %shl304, %shr320
  %arraydecay322 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l323 = bitcast %union.char64long16* %arraydecay322 to [16 x i32]*
  %arrayidx324 = getelementptr inbounds [16 x i32], [16 x i32]* %l323, i64 0, i64 1
  store i32 %or321, i32* %arrayidx324, align 4
  %add325 = add i32 %xor288, %or321
  %add326 = add i32 %add325, 1518500249
  %185 = load i32, i32* %d, align 4
  %shl327 = shl i32 %185, 5
  %186 = load i32, i32* %d, align 4
  %shr328 = lshr i32 %186, 27
  %or329 = or i32 %shl327, %shr328
  %add330 = add i32 %add326, %or329
  %187 = load i32, i32* %c, align 4
  %add331 = add i32 %187, %add330
  store i32 %add331, i32* %c, align 4
  %188 = load i32, i32* %e, align 4
  %shl332 = shl i32 %188, 30
  %189 = load i32, i32* %e, align 4
  %shr333 = lshr i32 %189, 2
  %or334 = or i32 %shl332, %shr333
  store i32 %or334, i32* %e, align 4
  %190 = load i32, i32* %d, align 4
  %191 = load i32, i32* %e, align 4
  %192 = load i32, i32* %a, align 4
  %xor335 = xor i32 %191, %192
  %and336 = and i32 %190, %xor335
  %193 = load i32, i32* %a, align 4
  %xor337 = xor i32 %and336, %193
  %arraydecay338 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l339 = bitcast %union.char64long16* %arraydecay338 to [16 x i32]*
  %arrayidx340 = getelementptr inbounds [16 x i32], [16 x i32]* %l339, i64 0, i64 15
  %194 = load i32, i32* %arrayidx340, align 4
  %arraydecay341 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l342 = bitcast %union.char64long16* %arraydecay341 to [16 x i32]*
  %arrayidx343 = getelementptr inbounds [16 x i32], [16 x i32]* %l342, i64 0, i64 10
  %195 = load i32, i32* %arrayidx343, align 8
  %xor344 = xor i32 %194, %195
  %arraydecay345 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l346 = bitcast %union.char64long16* %arraydecay345 to [16 x i32]*
  %arrayidx347 = getelementptr inbounds [16 x i32], [16 x i32]* %l346, i64 0, i64 4
  %196 = load i32, i32* %arrayidx347, align 16
  %xor348 = xor i32 %xor344, %196
  %arraydecay349 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l350 = bitcast %union.char64long16* %arraydecay349 to [16 x i32]*
  %arrayidx351 = getelementptr inbounds [16 x i32], [16 x i32]* %l350, i64 0, i64 2
  %197 = load i32, i32* %arrayidx351, align 8
  %xor352 = xor i32 %xor348, %197
  %shl353 = shl i32 %xor352, 1
  %arraydecay354 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l355 = bitcast %union.char64long16* %arraydecay354 to [16 x i32]*
  %arrayidx356 = getelementptr inbounds [16 x i32], [16 x i32]* %l355, i64 0, i64 15
  %198 = load i32, i32* %arrayidx356, align 4
  %arraydecay357 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l358 = bitcast %union.char64long16* %arraydecay357 to [16 x i32]*
  %arrayidx359 = getelementptr inbounds [16 x i32], [16 x i32]* %l358, i64 0, i64 10
  %199 = load i32, i32* %arrayidx359, align 8
  %xor360 = xor i32 %198, %199
  %arraydecay361 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l362 = bitcast %union.char64long16* %arraydecay361 to [16 x i32]*
  %arrayidx363 = getelementptr inbounds [16 x i32], [16 x i32]* %l362, i64 0, i64 4
  %200 = load i32, i32* %arrayidx363, align 16
  %xor364 = xor i32 %xor360, %200
  %arraydecay365 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l366 = bitcast %union.char64long16* %arraydecay365 to [16 x i32]*
  %arrayidx367 = getelementptr inbounds [16 x i32], [16 x i32]* %l366, i64 0, i64 2
  %201 = load i32, i32* %arrayidx367, align 8
  %xor368 = xor i32 %xor364, %201
  %shr369 = lshr i32 %xor368, 31
  %or370 = or i32 %shl353, %shr369
  %arraydecay371 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l372 = bitcast %union.char64long16* %arraydecay371 to [16 x i32]*
  %arrayidx373 = getelementptr inbounds [16 x i32], [16 x i32]* %l372, i64 0, i64 2
  store i32 %or370, i32* %arrayidx373, align 8
  %add374 = add i32 %xor337, %or370
  %add375 = add i32 %add374, 1518500249
  %202 = load i32, i32* %c, align 4
  %shl376 = shl i32 %202, 5
  %203 = load i32, i32* %c, align 4
  %shr377 = lshr i32 %203, 27
  %or378 = or i32 %shl376, %shr377
  %add379 = add i32 %add375, %or378
  %204 = load i32, i32* %b, align 4
  %add380 = add i32 %204, %add379
  store i32 %add380, i32* %b, align 4
  %205 = load i32, i32* %d, align 4
  %shl381 = shl i32 %205, 30
  %206 = load i32, i32* %d, align 4
  %shr382 = lshr i32 %206, 2
  %or383 = or i32 %shl381, %shr382
  store i32 %or383, i32* %d, align 4
  %207 = load i32, i32* %c, align 4
  %208 = load i32, i32* %d, align 4
  %209 = load i32, i32* %e, align 4
  %xor384 = xor i32 %208, %209
  %and385 = and i32 %207, %xor384
  %210 = load i32, i32* %e, align 4
  %xor386 = xor i32 %and385, %210
  %arraydecay387 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l388 = bitcast %union.char64long16* %arraydecay387 to [16 x i32]*
  %arrayidx389 = getelementptr inbounds [16 x i32], [16 x i32]* %l388, i64 0, i64 0
  %211 = load i32, i32* %arrayidx389, align 16
  %arraydecay390 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l391 = bitcast %union.char64long16* %arraydecay390 to [16 x i32]*
  %arrayidx392 = getelementptr inbounds [16 x i32], [16 x i32]* %l391, i64 0, i64 11
  %212 = load i32, i32* %arrayidx392, align 4
  %xor393 = xor i32 %211, %212
  %arraydecay394 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l395 = bitcast %union.char64long16* %arraydecay394 to [16 x i32]*
  %arrayidx396 = getelementptr inbounds [16 x i32], [16 x i32]* %l395, i64 0, i64 5
  %213 = load i32, i32* %arrayidx396, align 4
  %xor397 = xor i32 %xor393, %213
  %arraydecay398 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l399 = bitcast %union.char64long16* %arraydecay398 to [16 x i32]*
  %arrayidx400 = getelementptr inbounds [16 x i32], [16 x i32]* %l399, i64 0, i64 3
  %214 = load i32, i32* %arrayidx400, align 4
  %xor401 = xor i32 %xor397, %214
  %shl402 = shl i32 %xor401, 1
  %arraydecay403 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l404 = bitcast %union.char64long16* %arraydecay403 to [16 x i32]*
  %arrayidx405 = getelementptr inbounds [16 x i32], [16 x i32]* %l404, i64 0, i64 0
  %215 = load i32, i32* %arrayidx405, align 16
  %arraydecay406 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l407 = bitcast %union.char64long16* %arraydecay406 to [16 x i32]*
  %arrayidx408 = getelementptr inbounds [16 x i32], [16 x i32]* %l407, i64 0, i64 11
  %216 = load i32, i32* %arrayidx408, align 4
  %xor409 = xor i32 %215, %216
  %arraydecay410 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l411 = bitcast %union.char64long16* %arraydecay410 to [16 x i32]*
  %arrayidx412 = getelementptr inbounds [16 x i32], [16 x i32]* %l411, i64 0, i64 5
  %217 = load i32, i32* %arrayidx412, align 4
  %xor413 = xor i32 %xor409, %217
  %arraydecay414 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l415 = bitcast %union.char64long16* %arraydecay414 to [16 x i32]*
  %arrayidx416 = getelementptr inbounds [16 x i32], [16 x i32]* %l415, i64 0, i64 3
  %218 = load i32, i32* %arrayidx416, align 4
  %xor417 = xor i32 %xor413, %218
  %shr418 = lshr i32 %xor417, 31
  %or419 = or i32 %shl402, %shr418
  %arraydecay420 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l421 = bitcast %union.char64long16* %arraydecay420 to [16 x i32]*
  %arrayidx422 = getelementptr inbounds [16 x i32], [16 x i32]* %l421, i64 0, i64 3
  store i32 %or419, i32* %arrayidx422, align 4
  %add423 = add i32 %xor386, %or419
  %add424 = add i32 %add423, 1518500249
  %219 = load i32, i32* %b, align 4
  %shl425 = shl i32 %219, 5
  %220 = load i32, i32* %b, align 4
  %shr426 = lshr i32 %220, 27
  %or427 = or i32 %shl425, %shr426
  %add428 = add i32 %add424, %or427
  %221 = load i32, i32* %a, align 4
  %add429 = add i32 %221, %add428
  store i32 %add429, i32* %a, align 4
  %222 = load i32, i32* %c, align 4
  %shl430 = shl i32 %222, 30
  %223 = load i32, i32* %c, align 4
  %shr431 = lshr i32 %223, 2
  %or432 = or i32 %shl430, %shr431
  store i32 %or432, i32* %c, align 4
  %224 = load i32, i32* %b, align 4
  %225 = load i32, i32* %c, align 4
  %xor433 = xor i32 %224, %225
  %226 = load i32, i32* %d, align 4
  %xor434 = xor i32 %xor433, %226
  %arraydecay435 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l436 = bitcast %union.char64long16* %arraydecay435 to [16 x i32]*
  %arrayidx437 = getelementptr inbounds [16 x i32], [16 x i32]* %l436, i64 0, i64 1
  %227 = load i32, i32* %arrayidx437, align 4
  %arraydecay438 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l439 = bitcast %union.char64long16* %arraydecay438 to [16 x i32]*
  %arrayidx440 = getelementptr inbounds [16 x i32], [16 x i32]* %l439, i64 0, i64 12
  %228 = load i32, i32* %arrayidx440, align 16
  %xor441 = xor i32 %227, %228
  %arraydecay442 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l443 = bitcast %union.char64long16* %arraydecay442 to [16 x i32]*
  %arrayidx444 = getelementptr inbounds [16 x i32], [16 x i32]* %l443, i64 0, i64 6
  %229 = load i32, i32* %arrayidx444, align 8
  %xor445 = xor i32 %xor441, %229
  %arraydecay446 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l447 = bitcast %union.char64long16* %arraydecay446 to [16 x i32]*
  %arrayidx448 = getelementptr inbounds [16 x i32], [16 x i32]* %l447, i64 0, i64 4
  %230 = load i32, i32* %arrayidx448, align 16
  %xor449 = xor i32 %xor445, %230
  %shl450 = shl i32 %xor449, 1
  %arraydecay451 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l452 = bitcast %union.char64long16* %arraydecay451 to [16 x i32]*
  %arrayidx453 = getelementptr inbounds [16 x i32], [16 x i32]* %l452, i64 0, i64 1
  %231 = load i32, i32* %arrayidx453, align 4
  %arraydecay454 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l455 = bitcast %union.char64long16* %arraydecay454 to [16 x i32]*
  %arrayidx456 = getelementptr inbounds [16 x i32], [16 x i32]* %l455, i64 0, i64 12
  %232 = load i32, i32* %arrayidx456, align 16
  %xor457 = xor i32 %231, %232
  %arraydecay458 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l459 = bitcast %union.char64long16* %arraydecay458 to [16 x i32]*
  %arrayidx460 = getelementptr inbounds [16 x i32], [16 x i32]* %l459, i64 0, i64 6
  %233 = load i32, i32* %arrayidx460, align 8
  %xor461 = xor i32 %xor457, %233
  %arraydecay462 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l463 = bitcast %union.char64long16* %arraydecay462 to [16 x i32]*
  %arrayidx464 = getelementptr inbounds [16 x i32], [16 x i32]* %l463, i64 0, i64 4
  %234 = load i32, i32* %arrayidx464, align 16
  %xor465 = xor i32 %xor461, %234
  %shr466 = lshr i32 %xor465, 31
  %or467 = or i32 %shl450, %shr466
  %arraydecay468 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l469 = bitcast %union.char64long16* %arraydecay468 to [16 x i32]*
  %arrayidx470 = getelementptr inbounds [16 x i32], [16 x i32]* %l469, i64 0, i64 4
  store i32 %or467, i32* %arrayidx470, align 16
  %add471 = add i32 %xor434, %or467
  %add472 = add i32 %add471, 1859775393
  %235 = load i32, i32* %a, align 4
  %shl473 = shl i32 %235, 5
  %236 = load i32, i32* %a, align 4
  %shr474 = lshr i32 %236, 27
  %or475 = or i32 %shl473, %shr474
  %add476 = add i32 %add472, %or475
  %237 = load i32, i32* %e, align 4
  %add477 = add i32 %237, %add476
  store i32 %add477, i32* %e, align 4
  %238 = load i32, i32* %b, align 4
  %shl478 = shl i32 %238, 30
  %239 = load i32, i32* %b, align 4
  %shr479 = lshr i32 %239, 2
  %or480 = or i32 %shl478, %shr479
  store i32 %or480, i32* %b, align 4
  %240 = load i32, i32* %a, align 4
  %241 = load i32, i32* %b, align 4
  %xor481 = xor i32 %240, %241
  %242 = load i32, i32* %c, align 4
  %xor482 = xor i32 %xor481, %242
  %arraydecay483 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l484 = bitcast %union.char64long16* %arraydecay483 to [16 x i32]*
  %arrayidx485 = getelementptr inbounds [16 x i32], [16 x i32]* %l484, i64 0, i64 2
  %243 = load i32, i32* %arrayidx485, align 8
  %arraydecay486 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l487 = bitcast %union.char64long16* %arraydecay486 to [16 x i32]*
  %arrayidx488 = getelementptr inbounds [16 x i32], [16 x i32]* %l487, i64 0, i64 13
  %244 = load i32, i32* %arrayidx488, align 4
  %xor489 = xor i32 %243, %244
  %arraydecay490 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l491 = bitcast %union.char64long16* %arraydecay490 to [16 x i32]*
  %arrayidx492 = getelementptr inbounds [16 x i32], [16 x i32]* %l491, i64 0, i64 7
  %245 = load i32, i32* %arrayidx492, align 4
  %xor493 = xor i32 %xor489, %245
  %arraydecay494 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l495 = bitcast %union.char64long16* %arraydecay494 to [16 x i32]*
  %arrayidx496 = getelementptr inbounds [16 x i32], [16 x i32]* %l495, i64 0, i64 5
  %246 = load i32, i32* %arrayidx496, align 4
  %xor497 = xor i32 %xor493, %246
  %shl498 = shl i32 %xor497, 1
  %arraydecay499 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l500 = bitcast %union.char64long16* %arraydecay499 to [16 x i32]*
  %arrayidx501 = getelementptr inbounds [16 x i32], [16 x i32]* %l500, i64 0, i64 2
  %247 = load i32, i32* %arrayidx501, align 8
  %arraydecay502 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l503 = bitcast %union.char64long16* %arraydecay502 to [16 x i32]*
  %arrayidx504 = getelementptr inbounds [16 x i32], [16 x i32]* %l503, i64 0, i64 13
  %248 = load i32, i32* %arrayidx504, align 4
  %xor505 = xor i32 %247, %248
  %arraydecay506 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l507 = bitcast %union.char64long16* %arraydecay506 to [16 x i32]*
  %arrayidx508 = getelementptr inbounds [16 x i32], [16 x i32]* %l507, i64 0, i64 7
  %249 = load i32, i32* %arrayidx508, align 4
  %xor509 = xor i32 %xor505, %249
  %arraydecay510 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l511 = bitcast %union.char64long16* %arraydecay510 to [16 x i32]*
  %arrayidx512 = getelementptr inbounds [16 x i32], [16 x i32]* %l511, i64 0, i64 5
  %250 = load i32, i32* %arrayidx512, align 4
  %xor513 = xor i32 %xor509, %250
  %shr514 = lshr i32 %xor513, 31
  %or515 = or i32 %shl498, %shr514
  %arraydecay516 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l517 = bitcast %union.char64long16* %arraydecay516 to [16 x i32]*
  %arrayidx518 = getelementptr inbounds [16 x i32], [16 x i32]* %l517, i64 0, i64 5
  store i32 %or515, i32* %arrayidx518, align 4
  %add519 = add i32 %xor482, %or515
  %add520 = add i32 %add519, 1859775393
  %251 = load i32, i32* %e, align 4
  %shl521 = shl i32 %251, 5
  %252 = load i32, i32* %e, align 4
  %shr522 = lshr i32 %252, 27
  %or523 = or i32 %shl521, %shr522
  %add524 = add i32 %add520, %or523
  %253 = load i32, i32* %d, align 4
  %add525 = add i32 %253, %add524
  store i32 %add525, i32* %d, align 4
  %254 = load i32, i32* %a, align 4
  %shl526 = shl i32 %254, 30
  %255 = load i32, i32* %a, align 4
  %shr527 = lshr i32 %255, 2
  %or528 = or i32 %shl526, %shr527
  store i32 %or528, i32* %a, align 4
  %256 = load i32, i32* %e, align 4
  %257 = load i32, i32* %a, align 4
  %xor529 = xor i32 %256, %257
  %258 = load i32, i32* %b, align 4
  %xor530 = xor i32 %xor529, %258
  %arraydecay531 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l532 = bitcast %union.char64long16* %arraydecay531 to [16 x i32]*
  %arrayidx533 = getelementptr inbounds [16 x i32], [16 x i32]* %l532, i64 0, i64 3
  %259 = load i32, i32* %arrayidx533, align 4
  %arraydecay534 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l535 = bitcast %union.char64long16* %arraydecay534 to [16 x i32]*
  %arrayidx536 = getelementptr inbounds [16 x i32], [16 x i32]* %l535, i64 0, i64 14
  %260 = load i32, i32* %arrayidx536, align 8
  %xor537 = xor i32 %259, %260
  %arraydecay538 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l539 = bitcast %union.char64long16* %arraydecay538 to [16 x i32]*
  %arrayidx540 = getelementptr inbounds [16 x i32], [16 x i32]* %l539, i64 0, i64 8
  %261 = load i32, i32* %arrayidx540, align 16
  %xor541 = xor i32 %xor537, %261
  %arraydecay542 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l543 = bitcast %union.char64long16* %arraydecay542 to [16 x i32]*
  %arrayidx544 = getelementptr inbounds [16 x i32], [16 x i32]* %l543, i64 0, i64 6
  %262 = load i32, i32* %arrayidx544, align 8
  %xor545 = xor i32 %xor541, %262
  %shl546 = shl i32 %xor545, 1
  %arraydecay547 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l548 = bitcast %union.char64long16* %arraydecay547 to [16 x i32]*
  %arrayidx549 = getelementptr inbounds [16 x i32], [16 x i32]* %l548, i64 0, i64 3
  %263 = load i32, i32* %arrayidx549, align 4
  %arraydecay550 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l551 = bitcast %union.char64long16* %arraydecay550 to [16 x i32]*
  %arrayidx552 = getelementptr inbounds [16 x i32], [16 x i32]* %l551, i64 0, i64 14
  %264 = load i32, i32* %arrayidx552, align 8
  %xor553 = xor i32 %263, %264
  %arraydecay554 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l555 = bitcast %union.char64long16* %arraydecay554 to [16 x i32]*
  %arrayidx556 = getelementptr inbounds [16 x i32], [16 x i32]* %l555, i64 0, i64 8
  %265 = load i32, i32* %arrayidx556, align 16
  %xor557 = xor i32 %xor553, %265
  %arraydecay558 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l559 = bitcast %union.char64long16* %arraydecay558 to [16 x i32]*
  %arrayidx560 = getelementptr inbounds [16 x i32], [16 x i32]* %l559, i64 0, i64 6
  %266 = load i32, i32* %arrayidx560, align 8
  %xor561 = xor i32 %xor557, %266
  %shr562 = lshr i32 %xor561, 31
  %or563 = or i32 %shl546, %shr562
  %arraydecay564 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l565 = bitcast %union.char64long16* %arraydecay564 to [16 x i32]*
  %arrayidx566 = getelementptr inbounds [16 x i32], [16 x i32]* %l565, i64 0, i64 6
  store i32 %or563, i32* %arrayidx566, align 8
  %add567 = add i32 %xor530, %or563
  %add568 = add i32 %add567, 1859775393
  %267 = load i32, i32* %d, align 4
  %shl569 = shl i32 %267, 5
  %268 = load i32, i32* %d, align 4
  %shr570 = lshr i32 %268, 27
  %or571 = or i32 %shl569, %shr570
  %add572 = add i32 %add568, %or571
  %269 = load i32, i32* %c, align 4
  %add573 = add i32 %269, %add572
  store i32 %add573, i32* %c, align 4
  %270 = load i32, i32* %e, align 4
  %shl574 = shl i32 %270, 30
  %271 = load i32, i32* %e, align 4
  %shr575 = lshr i32 %271, 2
  %or576 = or i32 %shl574, %shr575
  store i32 %or576, i32* %e, align 4
  %272 = load i32, i32* %d, align 4
  %273 = load i32, i32* %e, align 4
  %xor577 = xor i32 %272, %273
  %274 = load i32, i32* %a, align 4
  %xor578 = xor i32 %xor577, %274
  %arraydecay579 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l580 = bitcast %union.char64long16* %arraydecay579 to [16 x i32]*
  %arrayidx581 = getelementptr inbounds [16 x i32], [16 x i32]* %l580, i64 0, i64 4
  %275 = load i32, i32* %arrayidx581, align 16
  %arraydecay582 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l583 = bitcast %union.char64long16* %arraydecay582 to [16 x i32]*
  %arrayidx584 = getelementptr inbounds [16 x i32], [16 x i32]* %l583, i64 0, i64 15
  %276 = load i32, i32* %arrayidx584, align 4
  %xor585 = xor i32 %275, %276
  %arraydecay586 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l587 = bitcast %union.char64long16* %arraydecay586 to [16 x i32]*
  %arrayidx588 = getelementptr inbounds [16 x i32], [16 x i32]* %l587, i64 0, i64 9
  %277 = load i32, i32* %arrayidx588, align 4
  %xor589 = xor i32 %xor585, %277
  %arraydecay590 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l591 = bitcast %union.char64long16* %arraydecay590 to [16 x i32]*
  %arrayidx592 = getelementptr inbounds [16 x i32], [16 x i32]* %l591, i64 0, i64 7
  %278 = load i32, i32* %arrayidx592, align 4
  %xor593 = xor i32 %xor589, %278
  %shl594 = shl i32 %xor593, 1
  %arraydecay595 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l596 = bitcast %union.char64long16* %arraydecay595 to [16 x i32]*
  %arrayidx597 = getelementptr inbounds [16 x i32], [16 x i32]* %l596, i64 0, i64 4
  %279 = load i32, i32* %arrayidx597, align 16
  %arraydecay598 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l599 = bitcast %union.char64long16* %arraydecay598 to [16 x i32]*
  %arrayidx600 = getelementptr inbounds [16 x i32], [16 x i32]* %l599, i64 0, i64 15
  %280 = load i32, i32* %arrayidx600, align 4
  %xor601 = xor i32 %279, %280
  %arraydecay602 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l603 = bitcast %union.char64long16* %arraydecay602 to [16 x i32]*
  %arrayidx604 = getelementptr inbounds [16 x i32], [16 x i32]* %l603, i64 0, i64 9
  %281 = load i32, i32* %arrayidx604, align 4
  %xor605 = xor i32 %xor601, %281
  %arraydecay606 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l607 = bitcast %union.char64long16* %arraydecay606 to [16 x i32]*
  %arrayidx608 = getelementptr inbounds [16 x i32], [16 x i32]* %l607, i64 0, i64 7
  %282 = load i32, i32* %arrayidx608, align 4
  %xor609 = xor i32 %xor605, %282
  %shr610 = lshr i32 %xor609, 31
  %or611 = or i32 %shl594, %shr610
  %arraydecay612 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l613 = bitcast %union.char64long16* %arraydecay612 to [16 x i32]*
  %arrayidx614 = getelementptr inbounds [16 x i32], [16 x i32]* %l613, i64 0, i64 7
  store i32 %or611, i32* %arrayidx614, align 4
  %add615 = add i32 %xor578, %or611
  %add616 = add i32 %add615, 1859775393
  %283 = load i32, i32* %c, align 4
  %shl617 = shl i32 %283, 5
  %284 = load i32, i32* %c, align 4
  %shr618 = lshr i32 %284, 27
  %or619 = or i32 %shl617, %shr618
  %add620 = add i32 %add616, %or619
  %285 = load i32, i32* %b, align 4
  %add621 = add i32 %285, %add620
  store i32 %add621, i32* %b, align 4
  %286 = load i32, i32* %d, align 4
  %shl622 = shl i32 %286, 30
  %287 = load i32, i32* %d, align 4
  %shr623 = lshr i32 %287, 2
  %or624 = or i32 %shl622, %shr623
  store i32 %or624, i32* %d, align 4
  %288 = load i32, i32* %c, align 4
  %289 = load i32, i32* %d, align 4
  %xor625 = xor i32 %288, %289
  %290 = load i32, i32* %e, align 4
  %xor626 = xor i32 %xor625, %290
  %arraydecay627 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l628 = bitcast %union.char64long16* %arraydecay627 to [16 x i32]*
  %arrayidx629 = getelementptr inbounds [16 x i32], [16 x i32]* %l628, i64 0, i64 5
  %291 = load i32, i32* %arrayidx629, align 4
  %arraydecay630 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l631 = bitcast %union.char64long16* %arraydecay630 to [16 x i32]*
  %arrayidx632 = getelementptr inbounds [16 x i32], [16 x i32]* %l631, i64 0, i64 0
  %292 = load i32, i32* %arrayidx632, align 16
  %xor633 = xor i32 %291, %292
  %arraydecay634 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l635 = bitcast %union.char64long16* %arraydecay634 to [16 x i32]*
  %arrayidx636 = getelementptr inbounds [16 x i32], [16 x i32]* %l635, i64 0, i64 10
  %293 = load i32, i32* %arrayidx636, align 8
  %xor637 = xor i32 %xor633, %293
  %arraydecay638 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l639 = bitcast %union.char64long16* %arraydecay638 to [16 x i32]*
  %arrayidx640 = getelementptr inbounds [16 x i32], [16 x i32]* %l639, i64 0, i64 8
  %294 = load i32, i32* %arrayidx640, align 16
  %xor641 = xor i32 %xor637, %294
  %shl642 = shl i32 %xor641, 1
  %arraydecay643 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l644 = bitcast %union.char64long16* %arraydecay643 to [16 x i32]*
  %arrayidx645 = getelementptr inbounds [16 x i32], [16 x i32]* %l644, i64 0, i64 5
  %295 = load i32, i32* %arrayidx645, align 4
  %arraydecay646 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l647 = bitcast %union.char64long16* %arraydecay646 to [16 x i32]*
  %arrayidx648 = getelementptr inbounds [16 x i32], [16 x i32]* %l647, i64 0, i64 0
  %296 = load i32, i32* %arrayidx648, align 16
  %xor649 = xor i32 %295, %296
  %arraydecay650 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l651 = bitcast %union.char64long16* %arraydecay650 to [16 x i32]*
  %arrayidx652 = getelementptr inbounds [16 x i32], [16 x i32]* %l651, i64 0, i64 10
  %297 = load i32, i32* %arrayidx652, align 8
  %xor653 = xor i32 %xor649, %297
  %arraydecay654 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l655 = bitcast %union.char64long16* %arraydecay654 to [16 x i32]*
  %arrayidx656 = getelementptr inbounds [16 x i32], [16 x i32]* %l655, i64 0, i64 8
  %298 = load i32, i32* %arrayidx656, align 16
  %xor657 = xor i32 %xor653, %298
  %shr658 = lshr i32 %xor657, 31
  %or659 = or i32 %shl642, %shr658
  %arraydecay660 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l661 = bitcast %union.char64long16* %arraydecay660 to [16 x i32]*
  %arrayidx662 = getelementptr inbounds [16 x i32], [16 x i32]* %l661, i64 0, i64 8
  store i32 %or659, i32* %arrayidx662, align 16
  %add663 = add i32 %xor626, %or659
  %add664 = add i32 %add663, 1859775393
  %299 = load i32, i32* %b, align 4
  %shl665 = shl i32 %299, 5
  %300 = load i32, i32* %b, align 4
  %shr666 = lshr i32 %300, 27
  %or667 = or i32 %shl665, %shr666
  %add668 = add i32 %add664, %or667
  %301 = load i32, i32* %a, align 4
  %add669 = add i32 %301, %add668
  store i32 %add669, i32* %a, align 4
  %302 = load i32, i32* %c, align 4
  %shl670 = shl i32 %302, 30
  %303 = load i32, i32* %c, align 4
  %shr671 = lshr i32 %303, 2
  %or672 = or i32 %shl670, %shr671
  store i32 %or672, i32* %c, align 4
  %304 = load i32, i32* %b, align 4
  %305 = load i32, i32* %c, align 4
  %xor673 = xor i32 %304, %305
  %306 = load i32, i32* %d, align 4
  %xor674 = xor i32 %xor673, %306
  %arraydecay675 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l676 = bitcast %union.char64long16* %arraydecay675 to [16 x i32]*
  %arrayidx677 = getelementptr inbounds [16 x i32], [16 x i32]* %l676, i64 0, i64 6
  %307 = load i32, i32* %arrayidx677, align 8
  %arraydecay678 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l679 = bitcast %union.char64long16* %arraydecay678 to [16 x i32]*
  %arrayidx680 = getelementptr inbounds [16 x i32], [16 x i32]* %l679, i64 0, i64 1
  %308 = load i32, i32* %arrayidx680, align 4
  %xor681 = xor i32 %307, %308
  %arraydecay682 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l683 = bitcast %union.char64long16* %arraydecay682 to [16 x i32]*
  %arrayidx684 = getelementptr inbounds [16 x i32], [16 x i32]* %l683, i64 0, i64 11
  %309 = load i32, i32* %arrayidx684, align 4
  %xor685 = xor i32 %xor681, %309
  %arraydecay686 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l687 = bitcast %union.char64long16* %arraydecay686 to [16 x i32]*
  %arrayidx688 = getelementptr inbounds [16 x i32], [16 x i32]* %l687, i64 0, i64 9
  %310 = load i32, i32* %arrayidx688, align 4
  %xor689 = xor i32 %xor685, %310
  %shl690 = shl i32 %xor689, 1
  %arraydecay691 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l692 = bitcast %union.char64long16* %arraydecay691 to [16 x i32]*
  %arrayidx693 = getelementptr inbounds [16 x i32], [16 x i32]* %l692, i64 0, i64 6
  %311 = load i32, i32* %arrayidx693, align 8
  %arraydecay694 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l695 = bitcast %union.char64long16* %arraydecay694 to [16 x i32]*
  %arrayidx696 = getelementptr inbounds [16 x i32], [16 x i32]* %l695, i64 0, i64 1
  %312 = load i32, i32* %arrayidx696, align 4
  %xor697 = xor i32 %311, %312
  %arraydecay698 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l699 = bitcast %union.char64long16* %arraydecay698 to [16 x i32]*
  %arrayidx700 = getelementptr inbounds [16 x i32], [16 x i32]* %l699, i64 0, i64 11
  %313 = load i32, i32* %arrayidx700, align 4
  %xor701 = xor i32 %xor697, %313
  %arraydecay702 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l703 = bitcast %union.char64long16* %arraydecay702 to [16 x i32]*
  %arrayidx704 = getelementptr inbounds [16 x i32], [16 x i32]* %l703, i64 0, i64 9
  %314 = load i32, i32* %arrayidx704, align 4
  %xor705 = xor i32 %xor701, %314
  %shr706 = lshr i32 %xor705, 31
  %or707 = or i32 %shl690, %shr706
  %arraydecay708 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l709 = bitcast %union.char64long16* %arraydecay708 to [16 x i32]*
  %arrayidx710 = getelementptr inbounds [16 x i32], [16 x i32]* %l709, i64 0, i64 9
  store i32 %or707, i32* %arrayidx710, align 4
  %add711 = add i32 %xor674, %or707
  %add712 = add i32 %add711, 1859775393
  %315 = load i32, i32* %a, align 4
  %shl713 = shl i32 %315, 5
  %316 = load i32, i32* %a, align 4
  %shr714 = lshr i32 %316, 27
  %or715 = or i32 %shl713, %shr714
  %add716 = add i32 %add712, %or715
  %317 = load i32, i32* %e, align 4
  %add717 = add i32 %317, %add716
  store i32 %add717, i32* %e, align 4
  %318 = load i32, i32* %b, align 4
  %shl718 = shl i32 %318, 30
  %319 = load i32, i32* %b, align 4
  %shr719 = lshr i32 %319, 2
  %or720 = or i32 %shl718, %shr719
  store i32 %or720, i32* %b, align 4
  %320 = load i32, i32* %a, align 4
  %321 = load i32, i32* %b, align 4
  %xor721 = xor i32 %320, %321
  %322 = load i32, i32* %c, align 4
  %xor722 = xor i32 %xor721, %322
  %arraydecay723 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l724 = bitcast %union.char64long16* %arraydecay723 to [16 x i32]*
  %arrayidx725 = getelementptr inbounds [16 x i32], [16 x i32]* %l724, i64 0, i64 7
  %323 = load i32, i32* %arrayidx725, align 4
  %arraydecay726 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l727 = bitcast %union.char64long16* %arraydecay726 to [16 x i32]*
  %arrayidx728 = getelementptr inbounds [16 x i32], [16 x i32]* %l727, i64 0, i64 2
  %324 = load i32, i32* %arrayidx728, align 8
  %xor729 = xor i32 %323, %324
  %arraydecay730 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l731 = bitcast %union.char64long16* %arraydecay730 to [16 x i32]*
  %arrayidx732 = getelementptr inbounds [16 x i32], [16 x i32]* %l731, i64 0, i64 12
  %325 = load i32, i32* %arrayidx732, align 16
  %xor733 = xor i32 %xor729, %325
  %arraydecay734 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l735 = bitcast %union.char64long16* %arraydecay734 to [16 x i32]*
  %arrayidx736 = getelementptr inbounds [16 x i32], [16 x i32]* %l735, i64 0, i64 10
  %326 = load i32, i32* %arrayidx736, align 8
  %xor737 = xor i32 %xor733, %326
  %shl738 = shl i32 %xor737, 1
  %arraydecay739 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l740 = bitcast %union.char64long16* %arraydecay739 to [16 x i32]*
  %arrayidx741 = getelementptr inbounds [16 x i32], [16 x i32]* %l740, i64 0, i64 7
  %327 = load i32, i32* %arrayidx741, align 4
  %arraydecay742 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l743 = bitcast %union.char64long16* %arraydecay742 to [16 x i32]*
  %arrayidx744 = getelementptr inbounds [16 x i32], [16 x i32]* %l743, i64 0, i64 2
  %328 = load i32, i32* %arrayidx744, align 8
  %xor745 = xor i32 %327, %328
  %arraydecay746 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l747 = bitcast %union.char64long16* %arraydecay746 to [16 x i32]*
  %arrayidx748 = getelementptr inbounds [16 x i32], [16 x i32]* %l747, i64 0, i64 12
  %329 = load i32, i32* %arrayidx748, align 16
  %xor749 = xor i32 %xor745, %329
  %arraydecay750 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l751 = bitcast %union.char64long16* %arraydecay750 to [16 x i32]*
  %arrayidx752 = getelementptr inbounds [16 x i32], [16 x i32]* %l751, i64 0, i64 10
  %330 = load i32, i32* %arrayidx752, align 8
  %xor753 = xor i32 %xor749, %330
  %shr754 = lshr i32 %xor753, 31
  %or755 = or i32 %shl738, %shr754
  %arraydecay756 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l757 = bitcast %union.char64long16* %arraydecay756 to [16 x i32]*
  %arrayidx758 = getelementptr inbounds [16 x i32], [16 x i32]* %l757, i64 0, i64 10
  store i32 %or755, i32* %arrayidx758, align 8
  %add759 = add i32 %xor722, %or755
  %add760 = add i32 %add759, 1859775393
  %331 = load i32, i32* %e, align 4
  %shl761 = shl i32 %331, 5
  %332 = load i32, i32* %e, align 4
  %shr762 = lshr i32 %332, 27
  %or763 = or i32 %shl761, %shr762
  %add764 = add i32 %add760, %or763
  %333 = load i32, i32* %d, align 4
  %add765 = add i32 %333, %add764
  store i32 %add765, i32* %d, align 4
  %334 = load i32, i32* %a, align 4
  %shl766 = shl i32 %334, 30
  %335 = load i32, i32* %a, align 4
  %shr767 = lshr i32 %335, 2
  %or768 = or i32 %shl766, %shr767
  store i32 %or768, i32* %a, align 4
  %336 = load i32, i32* %e, align 4
  %337 = load i32, i32* %a, align 4
  %xor769 = xor i32 %336, %337
  %338 = load i32, i32* %b, align 4
  %xor770 = xor i32 %xor769, %338
  %arraydecay771 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l772 = bitcast %union.char64long16* %arraydecay771 to [16 x i32]*
  %arrayidx773 = getelementptr inbounds [16 x i32], [16 x i32]* %l772, i64 0, i64 8
  %339 = load i32, i32* %arrayidx773, align 16
  %arraydecay774 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l775 = bitcast %union.char64long16* %arraydecay774 to [16 x i32]*
  %arrayidx776 = getelementptr inbounds [16 x i32], [16 x i32]* %l775, i64 0, i64 3
  %340 = load i32, i32* %arrayidx776, align 4
  %xor777 = xor i32 %339, %340
  %arraydecay778 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l779 = bitcast %union.char64long16* %arraydecay778 to [16 x i32]*
  %arrayidx780 = getelementptr inbounds [16 x i32], [16 x i32]* %l779, i64 0, i64 13
  %341 = load i32, i32* %arrayidx780, align 4
  %xor781 = xor i32 %xor777, %341
  %arraydecay782 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l783 = bitcast %union.char64long16* %arraydecay782 to [16 x i32]*
  %arrayidx784 = getelementptr inbounds [16 x i32], [16 x i32]* %l783, i64 0, i64 11
  %342 = load i32, i32* %arrayidx784, align 4
  %xor785 = xor i32 %xor781, %342
  %shl786 = shl i32 %xor785, 1
  %arraydecay787 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l788 = bitcast %union.char64long16* %arraydecay787 to [16 x i32]*
  %arrayidx789 = getelementptr inbounds [16 x i32], [16 x i32]* %l788, i64 0, i64 8
  %343 = load i32, i32* %arrayidx789, align 16
  %arraydecay790 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l791 = bitcast %union.char64long16* %arraydecay790 to [16 x i32]*
  %arrayidx792 = getelementptr inbounds [16 x i32], [16 x i32]* %l791, i64 0, i64 3
  %344 = load i32, i32* %arrayidx792, align 4
  %xor793 = xor i32 %343, %344
  %arraydecay794 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l795 = bitcast %union.char64long16* %arraydecay794 to [16 x i32]*
  %arrayidx796 = getelementptr inbounds [16 x i32], [16 x i32]* %l795, i64 0, i64 13
  %345 = load i32, i32* %arrayidx796, align 4
  %xor797 = xor i32 %xor793, %345
  %arraydecay798 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l799 = bitcast %union.char64long16* %arraydecay798 to [16 x i32]*
  %arrayidx800 = getelementptr inbounds [16 x i32], [16 x i32]* %l799, i64 0, i64 11
  %346 = load i32, i32* %arrayidx800, align 4
  %xor801 = xor i32 %xor797, %346
  %shr802 = lshr i32 %xor801, 31
  %or803 = or i32 %shl786, %shr802
  %arraydecay804 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l805 = bitcast %union.char64long16* %arraydecay804 to [16 x i32]*
  %arrayidx806 = getelementptr inbounds [16 x i32], [16 x i32]* %l805, i64 0, i64 11
  store i32 %or803, i32* %arrayidx806, align 4
  %add807 = add i32 %xor770, %or803
  %add808 = add i32 %add807, 1859775393
  %347 = load i32, i32* %d, align 4
  %shl809 = shl i32 %347, 5
  %348 = load i32, i32* %d, align 4
  %shr810 = lshr i32 %348, 27
  %or811 = or i32 %shl809, %shr810
  %add812 = add i32 %add808, %or811
  %349 = load i32, i32* %c, align 4
  %add813 = add i32 %349, %add812
  store i32 %add813, i32* %c, align 4
  %350 = load i32, i32* %e, align 4
  %shl814 = shl i32 %350, 30
  %351 = load i32, i32* %e, align 4
  %shr815 = lshr i32 %351, 2
  %or816 = or i32 %shl814, %shr815
  store i32 %or816, i32* %e, align 4
  %352 = load i32, i32* %d, align 4
  %353 = load i32, i32* %e, align 4
  %xor817 = xor i32 %352, %353
  %354 = load i32, i32* %a, align 4
  %xor818 = xor i32 %xor817, %354
  %arraydecay819 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l820 = bitcast %union.char64long16* %arraydecay819 to [16 x i32]*
  %arrayidx821 = getelementptr inbounds [16 x i32], [16 x i32]* %l820, i64 0, i64 9
  %355 = load i32, i32* %arrayidx821, align 4
  %arraydecay822 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l823 = bitcast %union.char64long16* %arraydecay822 to [16 x i32]*
  %arrayidx824 = getelementptr inbounds [16 x i32], [16 x i32]* %l823, i64 0, i64 4
  %356 = load i32, i32* %arrayidx824, align 16
  %xor825 = xor i32 %355, %356
  %arraydecay826 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l827 = bitcast %union.char64long16* %arraydecay826 to [16 x i32]*
  %arrayidx828 = getelementptr inbounds [16 x i32], [16 x i32]* %l827, i64 0, i64 14
  %357 = load i32, i32* %arrayidx828, align 8
  %xor829 = xor i32 %xor825, %357
  %arraydecay830 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l831 = bitcast %union.char64long16* %arraydecay830 to [16 x i32]*
  %arrayidx832 = getelementptr inbounds [16 x i32], [16 x i32]* %l831, i64 0, i64 12
  %358 = load i32, i32* %arrayidx832, align 16
  %xor833 = xor i32 %xor829, %358
  %shl834 = shl i32 %xor833, 1
  %arraydecay835 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l836 = bitcast %union.char64long16* %arraydecay835 to [16 x i32]*
  %arrayidx837 = getelementptr inbounds [16 x i32], [16 x i32]* %l836, i64 0, i64 9
  %359 = load i32, i32* %arrayidx837, align 4
  %arraydecay838 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l839 = bitcast %union.char64long16* %arraydecay838 to [16 x i32]*
  %arrayidx840 = getelementptr inbounds [16 x i32], [16 x i32]* %l839, i64 0, i64 4
  %360 = load i32, i32* %arrayidx840, align 16
  %xor841 = xor i32 %359, %360
  %arraydecay842 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l843 = bitcast %union.char64long16* %arraydecay842 to [16 x i32]*
  %arrayidx844 = getelementptr inbounds [16 x i32], [16 x i32]* %l843, i64 0, i64 14
  %361 = load i32, i32* %arrayidx844, align 8
  %xor845 = xor i32 %xor841, %361
  %arraydecay846 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l847 = bitcast %union.char64long16* %arraydecay846 to [16 x i32]*
  %arrayidx848 = getelementptr inbounds [16 x i32], [16 x i32]* %l847, i64 0, i64 12
  %362 = load i32, i32* %arrayidx848, align 16
  %xor849 = xor i32 %xor845, %362
  %shr850 = lshr i32 %xor849, 31
  %or851 = or i32 %shl834, %shr850
  %arraydecay852 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l853 = bitcast %union.char64long16* %arraydecay852 to [16 x i32]*
  %arrayidx854 = getelementptr inbounds [16 x i32], [16 x i32]* %l853, i64 0, i64 12
  store i32 %or851, i32* %arrayidx854, align 16
  %add855 = add i32 %xor818, %or851
  %add856 = add i32 %add855, 1859775393
  %363 = load i32, i32* %c, align 4
  %shl857 = shl i32 %363, 5
  %364 = load i32, i32* %c, align 4
  %shr858 = lshr i32 %364, 27
  %or859 = or i32 %shl857, %shr858
  %add860 = add i32 %add856, %or859
  %365 = load i32, i32* %b, align 4
  %add861 = add i32 %365, %add860
  store i32 %add861, i32* %b, align 4
  %366 = load i32, i32* %d, align 4
  %shl862 = shl i32 %366, 30
  %367 = load i32, i32* %d, align 4
  %shr863 = lshr i32 %367, 2
  %or864 = or i32 %shl862, %shr863
  store i32 %or864, i32* %d, align 4
  %368 = load i32, i32* %c, align 4
  %369 = load i32, i32* %d, align 4
  %xor865 = xor i32 %368, %369
  %370 = load i32, i32* %e, align 4
  %xor866 = xor i32 %xor865, %370
  %arraydecay867 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l868 = bitcast %union.char64long16* %arraydecay867 to [16 x i32]*
  %arrayidx869 = getelementptr inbounds [16 x i32], [16 x i32]* %l868, i64 0, i64 10
  %371 = load i32, i32* %arrayidx869, align 8
  %arraydecay870 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l871 = bitcast %union.char64long16* %arraydecay870 to [16 x i32]*
  %arrayidx872 = getelementptr inbounds [16 x i32], [16 x i32]* %l871, i64 0, i64 5
  %372 = load i32, i32* %arrayidx872, align 4
  %xor873 = xor i32 %371, %372
  %arraydecay874 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l875 = bitcast %union.char64long16* %arraydecay874 to [16 x i32]*
  %arrayidx876 = getelementptr inbounds [16 x i32], [16 x i32]* %l875, i64 0, i64 15
  %373 = load i32, i32* %arrayidx876, align 4
  %xor877 = xor i32 %xor873, %373
  %arraydecay878 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l879 = bitcast %union.char64long16* %arraydecay878 to [16 x i32]*
  %arrayidx880 = getelementptr inbounds [16 x i32], [16 x i32]* %l879, i64 0, i64 13
  %374 = load i32, i32* %arrayidx880, align 4
  %xor881 = xor i32 %xor877, %374
  %shl882 = shl i32 %xor881, 1
  %arraydecay883 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l884 = bitcast %union.char64long16* %arraydecay883 to [16 x i32]*
  %arrayidx885 = getelementptr inbounds [16 x i32], [16 x i32]* %l884, i64 0, i64 10
  %375 = load i32, i32* %arrayidx885, align 8
  %arraydecay886 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l887 = bitcast %union.char64long16* %arraydecay886 to [16 x i32]*
  %arrayidx888 = getelementptr inbounds [16 x i32], [16 x i32]* %l887, i64 0, i64 5
  %376 = load i32, i32* %arrayidx888, align 4
  %xor889 = xor i32 %375, %376
  %arraydecay890 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l891 = bitcast %union.char64long16* %arraydecay890 to [16 x i32]*
  %arrayidx892 = getelementptr inbounds [16 x i32], [16 x i32]* %l891, i64 0, i64 15
  %377 = load i32, i32* %arrayidx892, align 4
  %xor893 = xor i32 %xor889, %377
  %arraydecay894 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l895 = bitcast %union.char64long16* %arraydecay894 to [16 x i32]*
  %arrayidx896 = getelementptr inbounds [16 x i32], [16 x i32]* %l895, i64 0, i64 13
  %378 = load i32, i32* %arrayidx896, align 4
  %xor897 = xor i32 %xor893, %378
  %shr898 = lshr i32 %xor897, 31
  %or899 = or i32 %shl882, %shr898
  %arraydecay900 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l901 = bitcast %union.char64long16* %arraydecay900 to [16 x i32]*
  %arrayidx902 = getelementptr inbounds [16 x i32], [16 x i32]* %l901, i64 0, i64 13
  store i32 %or899, i32* %arrayidx902, align 4
  %add903 = add i32 %xor866, %or899
  %add904 = add i32 %add903, 1859775393
  %379 = load i32, i32* %b, align 4
  %shl905 = shl i32 %379, 5
  %380 = load i32, i32* %b, align 4
  %shr906 = lshr i32 %380, 27
  %or907 = or i32 %shl905, %shr906
  %add908 = add i32 %add904, %or907
  %381 = load i32, i32* %a, align 4
  %add909 = add i32 %381, %add908
  store i32 %add909, i32* %a, align 4
  %382 = load i32, i32* %c, align 4
  %shl910 = shl i32 %382, 30
  %383 = load i32, i32* %c, align 4
  %shr911 = lshr i32 %383, 2
  %or912 = or i32 %shl910, %shr911
  store i32 %or912, i32* %c, align 4
  %384 = load i32, i32* %b, align 4
  %385 = load i32, i32* %c, align 4
  %xor913 = xor i32 %384, %385
  %386 = load i32, i32* %d, align 4
  %xor914 = xor i32 %xor913, %386
  %arraydecay915 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l916 = bitcast %union.char64long16* %arraydecay915 to [16 x i32]*
  %arrayidx917 = getelementptr inbounds [16 x i32], [16 x i32]* %l916, i64 0, i64 11
  %387 = load i32, i32* %arrayidx917, align 4
  %arraydecay918 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l919 = bitcast %union.char64long16* %arraydecay918 to [16 x i32]*
  %arrayidx920 = getelementptr inbounds [16 x i32], [16 x i32]* %l919, i64 0, i64 6
  %388 = load i32, i32* %arrayidx920, align 8
  %xor921 = xor i32 %387, %388
  %arraydecay922 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l923 = bitcast %union.char64long16* %arraydecay922 to [16 x i32]*
  %arrayidx924 = getelementptr inbounds [16 x i32], [16 x i32]* %l923, i64 0, i64 0
  %389 = load i32, i32* %arrayidx924, align 16
  %xor925 = xor i32 %xor921, %389
  %arraydecay926 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l927 = bitcast %union.char64long16* %arraydecay926 to [16 x i32]*
  %arrayidx928 = getelementptr inbounds [16 x i32], [16 x i32]* %l927, i64 0, i64 14
  %390 = load i32, i32* %arrayidx928, align 8
  %xor929 = xor i32 %xor925, %390
  %shl930 = shl i32 %xor929, 1
  %arraydecay931 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l932 = bitcast %union.char64long16* %arraydecay931 to [16 x i32]*
  %arrayidx933 = getelementptr inbounds [16 x i32], [16 x i32]* %l932, i64 0, i64 11
  %391 = load i32, i32* %arrayidx933, align 4
  %arraydecay934 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l935 = bitcast %union.char64long16* %arraydecay934 to [16 x i32]*
  %arrayidx936 = getelementptr inbounds [16 x i32], [16 x i32]* %l935, i64 0, i64 6
  %392 = load i32, i32* %arrayidx936, align 8
  %xor937 = xor i32 %391, %392
  %arraydecay938 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l939 = bitcast %union.char64long16* %arraydecay938 to [16 x i32]*
  %arrayidx940 = getelementptr inbounds [16 x i32], [16 x i32]* %l939, i64 0, i64 0
  %393 = load i32, i32* %arrayidx940, align 16
  %xor941 = xor i32 %xor937, %393
  %arraydecay942 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l943 = bitcast %union.char64long16* %arraydecay942 to [16 x i32]*
  %arrayidx944 = getelementptr inbounds [16 x i32], [16 x i32]* %l943, i64 0, i64 14
  %394 = load i32, i32* %arrayidx944, align 8
  %xor945 = xor i32 %xor941, %394
  %shr946 = lshr i32 %xor945, 31
  %or947 = or i32 %shl930, %shr946
  %arraydecay948 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l949 = bitcast %union.char64long16* %arraydecay948 to [16 x i32]*
  %arrayidx950 = getelementptr inbounds [16 x i32], [16 x i32]* %l949, i64 0, i64 14
  store i32 %or947, i32* %arrayidx950, align 8
  %add951 = add i32 %xor914, %or947
  %add952 = add i32 %add951, 1859775393
  %395 = load i32, i32* %a, align 4
  %shl953 = shl i32 %395, 5
  %396 = load i32, i32* %a, align 4
  %shr954 = lshr i32 %396, 27
  %or955 = or i32 %shl953, %shr954
  %add956 = add i32 %add952, %or955
  %397 = load i32, i32* %e, align 4
  %add957 = add i32 %397, %add956
  store i32 %add957, i32* %e, align 4
  %398 = load i32, i32* %b, align 4
  %shl958 = shl i32 %398, 30
  %399 = load i32, i32* %b, align 4
  %shr959 = lshr i32 %399, 2
  %or960 = or i32 %shl958, %shr959
  store i32 %or960, i32* %b, align 4
  %400 = load i32, i32* %a, align 4
  %401 = load i32, i32* %b, align 4
  %xor961 = xor i32 %400, %401
  %402 = load i32, i32* %c, align 4
  %xor962 = xor i32 %xor961, %402
  %arraydecay963 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l964 = bitcast %union.char64long16* %arraydecay963 to [16 x i32]*
  %arrayidx965 = getelementptr inbounds [16 x i32], [16 x i32]* %l964, i64 0, i64 12
  %403 = load i32, i32* %arrayidx965, align 16
  %arraydecay966 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l967 = bitcast %union.char64long16* %arraydecay966 to [16 x i32]*
  %arrayidx968 = getelementptr inbounds [16 x i32], [16 x i32]* %l967, i64 0, i64 7
  %404 = load i32, i32* %arrayidx968, align 4
  %xor969 = xor i32 %403, %404
  %arraydecay970 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l971 = bitcast %union.char64long16* %arraydecay970 to [16 x i32]*
  %arrayidx972 = getelementptr inbounds [16 x i32], [16 x i32]* %l971, i64 0, i64 1
  %405 = load i32, i32* %arrayidx972, align 4
  %xor973 = xor i32 %xor969, %405
  %arraydecay974 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l975 = bitcast %union.char64long16* %arraydecay974 to [16 x i32]*
  %arrayidx976 = getelementptr inbounds [16 x i32], [16 x i32]* %l975, i64 0, i64 15
  %406 = load i32, i32* %arrayidx976, align 4
  %xor977 = xor i32 %xor973, %406
  %shl978 = shl i32 %xor977, 1
  %arraydecay979 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l980 = bitcast %union.char64long16* %arraydecay979 to [16 x i32]*
  %arrayidx981 = getelementptr inbounds [16 x i32], [16 x i32]* %l980, i64 0, i64 12
  %407 = load i32, i32* %arrayidx981, align 16
  %arraydecay982 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l983 = bitcast %union.char64long16* %arraydecay982 to [16 x i32]*
  %arrayidx984 = getelementptr inbounds [16 x i32], [16 x i32]* %l983, i64 0, i64 7
  %408 = load i32, i32* %arrayidx984, align 4
  %xor985 = xor i32 %407, %408
  %arraydecay986 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l987 = bitcast %union.char64long16* %arraydecay986 to [16 x i32]*
  %arrayidx988 = getelementptr inbounds [16 x i32], [16 x i32]* %l987, i64 0, i64 1
  %409 = load i32, i32* %arrayidx988, align 4
  %xor989 = xor i32 %xor985, %409
  %arraydecay990 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l991 = bitcast %union.char64long16* %arraydecay990 to [16 x i32]*
  %arrayidx992 = getelementptr inbounds [16 x i32], [16 x i32]* %l991, i64 0, i64 15
  %410 = load i32, i32* %arrayidx992, align 4
  %xor993 = xor i32 %xor989, %410
  %shr994 = lshr i32 %xor993, 31
  %or995 = or i32 %shl978, %shr994
  %arraydecay996 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l997 = bitcast %union.char64long16* %arraydecay996 to [16 x i32]*
  %arrayidx998 = getelementptr inbounds [16 x i32], [16 x i32]* %l997, i64 0, i64 15
  store i32 %or995, i32* %arrayidx998, align 4
  %add999 = add i32 %xor962, %or995
  %add1000 = add i32 %add999, 1859775393
  %411 = load i32, i32* %e, align 4
  %shl1001 = shl i32 %411, 5
  %412 = load i32, i32* %e, align 4
  %shr1002 = lshr i32 %412, 27
  %or1003 = or i32 %shl1001, %shr1002
  %add1004 = add i32 %add1000, %or1003
  %413 = load i32, i32* %d, align 4
  %add1005 = add i32 %413, %add1004
  store i32 %add1005, i32* %d, align 4
  %414 = load i32, i32* %a, align 4
  %shl1006 = shl i32 %414, 30
  %415 = load i32, i32* %a, align 4
  %shr1007 = lshr i32 %415, 2
  %or1008 = or i32 %shl1006, %shr1007
  store i32 %or1008, i32* %a, align 4
  %416 = load i32, i32* %e, align 4
  %417 = load i32, i32* %a, align 4
  %xor1009 = xor i32 %416, %417
  %418 = load i32, i32* %b, align 4
  %xor1010 = xor i32 %xor1009, %418
  %arraydecay1011 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1012 = bitcast %union.char64long16* %arraydecay1011 to [16 x i32]*
  %arrayidx1013 = getelementptr inbounds [16 x i32], [16 x i32]* %l1012, i64 0, i64 13
  %419 = load i32, i32* %arrayidx1013, align 4
  %arraydecay1014 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1015 = bitcast %union.char64long16* %arraydecay1014 to [16 x i32]*
  %arrayidx1016 = getelementptr inbounds [16 x i32], [16 x i32]* %l1015, i64 0, i64 8
  %420 = load i32, i32* %arrayidx1016, align 16
  %xor1017 = xor i32 %419, %420
  %arraydecay1018 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1019 = bitcast %union.char64long16* %arraydecay1018 to [16 x i32]*
  %arrayidx1020 = getelementptr inbounds [16 x i32], [16 x i32]* %l1019, i64 0, i64 2
  %421 = load i32, i32* %arrayidx1020, align 8
  %xor1021 = xor i32 %xor1017, %421
  %arraydecay1022 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1023 = bitcast %union.char64long16* %arraydecay1022 to [16 x i32]*
  %arrayidx1024 = getelementptr inbounds [16 x i32], [16 x i32]* %l1023, i64 0, i64 0
  %422 = load i32, i32* %arrayidx1024, align 16
  %xor1025 = xor i32 %xor1021, %422
  %shl1026 = shl i32 %xor1025, 1
  %arraydecay1027 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1028 = bitcast %union.char64long16* %arraydecay1027 to [16 x i32]*
  %arrayidx1029 = getelementptr inbounds [16 x i32], [16 x i32]* %l1028, i64 0, i64 13
  %423 = load i32, i32* %arrayidx1029, align 4
  %arraydecay1030 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1031 = bitcast %union.char64long16* %arraydecay1030 to [16 x i32]*
  %arrayidx1032 = getelementptr inbounds [16 x i32], [16 x i32]* %l1031, i64 0, i64 8
  %424 = load i32, i32* %arrayidx1032, align 16
  %xor1033 = xor i32 %423, %424
  %arraydecay1034 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1035 = bitcast %union.char64long16* %arraydecay1034 to [16 x i32]*
  %arrayidx1036 = getelementptr inbounds [16 x i32], [16 x i32]* %l1035, i64 0, i64 2
  %425 = load i32, i32* %arrayidx1036, align 8
  %xor1037 = xor i32 %xor1033, %425
  %arraydecay1038 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1039 = bitcast %union.char64long16* %arraydecay1038 to [16 x i32]*
  %arrayidx1040 = getelementptr inbounds [16 x i32], [16 x i32]* %l1039, i64 0, i64 0
  %426 = load i32, i32* %arrayidx1040, align 16
  %xor1041 = xor i32 %xor1037, %426
  %shr1042 = lshr i32 %xor1041, 31
  %or1043 = or i32 %shl1026, %shr1042
  %arraydecay1044 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1045 = bitcast %union.char64long16* %arraydecay1044 to [16 x i32]*
  %arrayidx1046 = getelementptr inbounds [16 x i32], [16 x i32]* %l1045, i64 0, i64 0
  store i32 %or1043, i32* %arrayidx1046, align 16
  %add1047 = add i32 %xor1010, %or1043
  %add1048 = add i32 %add1047, 1859775393
  %427 = load i32, i32* %d, align 4
  %shl1049 = shl i32 %427, 5
  %428 = load i32, i32* %d, align 4
  %shr1050 = lshr i32 %428, 27
  %or1051 = or i32 %shl1049, %shr1050
  %add1052 = add i32 %add1048, %or1051
  %429 = load i32, i32* %c, align 4
  %add1053 = add i32 %429, %add1052
  store i32 %add1053, i32* %c, align 4
  %430 = load i32, i32* %e, align 4
  %shl1054 = shl i32 %430, 30
  %431 = load i32, i32* %e, align 4
  %shr1055 = lshr i32 %431, 2
  %or1056 = or i32 %shl1054, %shr1055
  store i32 %or1056, i32* %e, align 4
  %432 = load i32, i32* %d, align 4
  %433 = load i32, i32* %e, align 4
  %xor1057 = xor i32 %432, %433
  %434 = load i32, i32* %a, align 4
  %xor1058 = xor i32 %xor1057, %434
  %arraydecay1059 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1060 = bitcast %union.char64long16* %arraydecay1059 to [16 x i32]*
  %arrayidx1061 = getelementptr inbounds [16 x i32], [16 x i32]* %l1060, i64 0, i64 14
  %435 = load i32, i32* %arrayidx1061, align 8
  %arraydecay1062 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1063 = bitcast %union.char64long16* %arraydecay1062 to [16 x i32]*
  %arrayidx1064 = getelementptr inbounds [16 x i32], [16 x i32]* %l1063, i64 0, i64 9
  %436 = load i32, i32* %arrayidx1064, align 4
  %xor1065 = xor i32 %435, %436
  %arraydecay1066 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1067 = bitcast %union.char64long16* %arraydecay1066 to [16 x i32]*
  %arrayidx1068 = getelementptr inbounds [16 x i32], [16 x i32]* %l1067, i64 0, i64 3
  %437 = load i32, i32* %arrayidx1068, align 4
  %xor1069 = xor i32 %xor1065, %437
  %arraydecay1070 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1071 = bitcast %union.char64long16* %arraydecay1070 to [16 x i32]*
  %arrayidx1072 = getelementptr inbounds [16 x i32], [16 x i32]* %l1071, i64 0, i64 1
  %438 = load i32, i32* %arrayidx1072, align 4
  %xor1073 = xor i32 %xor1069, %438
  %shl1074 = shl i32 %xor1073, 1
  %arraydecay1075 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1076 = bitcast %union.char64long16* %arraydecay1075 to [16 x i32]*
  %arrayidx1077 = getelementptr inbounds [16 x i32], [16 x i32]* %l1076, i64 0, i64 14
  %439 = load i32, i32* %arrayidx1077, align 8
  %arraydecay1078 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1079 = bitcast %union.char64long16* %arraydecay1078 to [16 x i32]*
  %arrayidx1080 = getelementptr inbounds [16 x i32], [16 x i32]* %l1079, i64 0, i64 9
  %440 = load i32, i32* %arrayidx1080, align 4
  %xor1081 = xor i32 %439, %440
  %arraydecay1082 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1083 = bitcast %union.char64long16* %arraydecay1082 to [16 x i32]*
  %arrayidx1084 = getelementptr inbounds [16 x i32], [16 x i32]* %l1083, i64 0, i64 3
  %441 = load i32, i32* %arrayidx1084, align 4
  %xor1085 = xor i32 %xor1081, %441
  %arraydecay1086 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1087 = bitcast %union.char64long16* %arraydecay1086 to [16 x i32]*
  %arrayidx1088 = getelementptr inbounds [16 x i32], [16 x i32]* %l1087, i64 0, i64 1
  %442 = load i32, i32* %arrayidx1088, align 4
  %xor1089 = xor i32 %xor1085, %442
  %shr1090 = lshr i32 %xor1089, 31
  %or1091 = or i32 %shl1074, %shr1090
  %arraydecay1092 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1093 = bitcast %union.char64long16* %arraydecay1092 to [16 x i32]*
  %arrayidx1094 = getelementptr inbounds [16 x i32], [16 x i32]* %l1093, i64 0, i64 1
  store i32 %or1091, i32* %arrayidx1094, align 4
  %add1095 = add i32 %xor1058, %or1091
  %add1096 = add i32 %add1095, 1859775393
  %443 = load i32, i32* %c, align 4
  %shl1097 = shl i32 %443, 5
  %444 = load i32, i32* %c, align 4
  %shr1098 = lshr i32 %444, 27
  %or1099 = or i32 %shl1097, %shr1098
  %add1100 = add i32 %add1096, %or1099
  %445 = load i32, i32* %b, align 4
  %add1101 = add i32 %445, %add1100
  store i32 %add1101, i32* %b, align 4
  %446 = load i32, i32* %d, align 4
  %shl1102 = shl i32 %446, 30
  %447 = load i32, i32* %d, align 4
  %shr1103 = lshr i32 %447, 2
  %or1104 = or i32 %shl1102, %shr1103
  store i32 %or1104, i32* %d, align 4
  %448 = load i32, i32* %c, align 4
  %449 = load i32, i32* %d, align 4
  %xor1105 = xor i32 %448, %449
  %450 = load i32, i32* %e, align 4
  %xor1106 = xor i32 %xor1105, %450
  %arraydecay1107 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1108 = bitcast %union.char64long16* %arraydecay1107 to [16 x i32]*
  %arrayidx1109 = getelementptr inbounds [16 x i32], [16 x i32]* %l1108, i64 0, i64 15
  %451 = load i32, i32* %arrayidx1109, align 4
  %arraydecay1110 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1111 = bitcast %union.char64long16* %arraydecay1110 to [16 x i32]*
  %arrayidx1112 = getelementptr inbounds [16 x i32], [16 x i32]* %l1111, i64 0, i64 10
  %452 = load i32, i32* %arrayidx1112, align 8
  %xor1113 = xor i32 %451, %452
  %arraydecay1114 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1115 = bitcast %union.char64long16* %arraydecay1114 to [16 x i32]*
  %arrayidx1116 = getelementptr inbounds [16 x i32], [16 x i32]* %l1115, i64 0, i64 4
  %453 = load i32, i32* %arrayidx1116, align 16
  %xor1117 = xor i32 %xor1113, %453
  %arraydecay1118 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1119 = bitcast %union.char64long16* %arraydecay1118 to [16 x i32]*
  %arrayidx1120 = getelementptr inbounds [16 x i32], [16 x i32]* %l1119, i64 0, i64 2
  %454 = load i32, i32* %arrayidx1120, align 8
  %xor1121 = xor i32 %xor1117, %454
  %shl1122 = shl i32 %xor1121, 1
  %arraydecay1123 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1124 = bitcast %union.char64long16* %arraydecay1123 to [16 x i32]*
  %arrayidx1125 = getelementptr inbounds [16 x i32], [16 x i32]* %l1124, i64 0, i64 15
  %455 = load i32, i32* %arrayidx1125, align 4
  %arraydecay1126 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1127 = bitcast %union.char64long16* %arraydecay1126 to [16 x i32]*
  %arrayidx1128 = getelementptr inbounds [16 x i32], [16 x i32]* %l1127, i64 0, i64 10
  %456 = load i32, i32* %arrayidx1128, align 8
  %xor1129 = xor i32 %455, %456
  %arraydecay1130 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1131 = bitcast %union.char64long16* %arraydecay1130 to [16 x i32]*
  %arrayidx1132 = getelementptr inbounds [16 x i32], [16 x i32]* %l1131, i64 0, i64 4
  %457 = load i32, i32* %arrayidx1132, align 16
  %xor1133 = xor i32 %xor1129, %457
  %arraydecay1134 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1135 = bitcast %union.char64long16* %arraydecay1134 to [16 x i32]*
  %arrayidx1136 = getelementptr inbounds [16 x i32], [16 x i32]* %l1135, i64 0, i64 2
  %458 = load i32, i32* %arrayidx1136, align 8
  %xor1137 = xor i32 %xor1133, %458
  %shr1138 = lshr i32 %xor1137, 31
  %or1139 = or i32 %shl1122, %shr1138
  %arraydecay1140 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1141 = bitcast %union.char64long16* %arraydecay1140 to [16 x i32]*
  %arrayidx1142 = getelementptr inbounds [16 x i32], [16 x i32]* %l1141, i64 0, i64 2
  store i32 %or1139, i32* %arrayidx1142, align 8
  %add1143 = add i32 %xor1106, %or1139
  %add1144 = add i32 %add1143, 1859775393
  %459 = load i32, i32* %b, align 4
  %shl1145 = shl i32 %459, 5
  %460 = load i32, i32* %b, align 4
  %shr1146 = lshr i32 %460, 27
  %or1147 = or i32 %shl1145, %shr1146
  %add1148 = add i32 %add1144, %or1147
  %461 = load i32, i32* %a, align 4
  %add1149 = add i32 %461, %add1148
  store i32 %add1149, i32* %a, align 4
  %462 = load i32, i32* %c, align 4
  %shl1150 = shl i32 %462, 30
  %463 = load i32, i32* %c, align 4
  %shr1151 = lshr i32 %463, 2
  %or1152 = or i32 %shl1150, %shr1151
  store i32 %or1152, i32* %c, align 4
  %464 = load i32, i32* %b, align 4
  %465 = load i32, i32* %c, align 4
  %xor1153 = xor i32 %464, %465
  %466 = load i32, i32* %d, align 4
  %xor1154 = xor i32 %xor1153, %466
  %arraydecay1155 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1156 = bitcast %union.char64long16* %arraydecay1155 to [16 x i32]*
  %arrayidx1157 = getelementptr inbounds [16 x i32], [16 x i32]* %l1156, i64 0, i64 0
  %467 = load i32, i32* %arrayidx1157, align 16
  %arraydecay1158 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1159 = bitcast %union.char64long16* %arraydecay1158 to [16 x i32]*
  %arrayidx1160 = getelementptr inbounds [16 x i32], [16 x i32]* %l1159, i64 0, i64 11
  %468 = load i32, i32* %arrayidx1160, align 4
  %xor1161 = xor i32 %467, %468
  %arraydecay1162 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1163 = bitcast %union.char64long16* %arraydecay1162 to [16 x i32]*
  %arrayidx1164 = getelementptr inbounds [16 x i32], [16 x i32]* %l1163, i64 0, i64 5
  %469 = load i32, i32* %arrayidx1164, align 4
  %xor1165 = xor i32 %xor1161, %469
  %arraydecay1166 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1167 = bitcast %union.char64long16* %arraydecay1166 to [16 x i32]*
  %arrayidx1168 = getelementptr inbounds [16 x i32], [16 x i32]* %l1167, i64 0, i64 3
  %470 = load i32, i32* %arrayidx1168, align 4
  %xor1169 = xor i32 %xor1165, %470
  %shl1170 = shl i32 %xor1169, 1
  %arraydecay1171 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1172 = bitcast %union.char64long16* %arraydecay1171 to [16 x i32]*
  %arrayidx1173 = getelementptr inbounds [16 x i32], [16 x i32]* %l1172, i64 0, i64 0
  %471 = load i32, i32* %arrayidx1173, align 16
  %arraydecay1174 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1175 = bitcast %union.char64long16* %arraydecay1174 to [16 x i32]*
  %arrayidx1176 = getelementptr inbounds [16 x i32], [16 x i32]* %l1175, i64 0, i64 11
  %472 = load i32, i32* %arrayidx1176, align 4
  %xor1177 = xor i32 %471, %472
  %arraydecay1178 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1179 = bitcast %union.char64long16* %arraydecay1178 to [16 x i32]*
  %arrayidx1180 = getelementptr inbounds [16 x i32], [16 x i32]* %l1179, i64 0, i64 5
  %473 = load i32, i32* %arrayidx1180, align 4
  %xor1181 = xor i32 %xor1177, %473
  %arraydecay1182 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1183 = bitcast %union.char64long16* %arraydecay1182 to [16 x i32]*
  %arrayidx1184 = getelementptr inbounds [16 x i32], [16 x i32]* %l1183, i64 0, i64 3
  %474 = load i32, i32* %arrayidx1184, align 4
  %xor1185 = xor i32 %xor1181, %474
  %shr1186 = lshr i32 %xor1185, 31
  %or1187 = or i32 %shl1170, %shr1186
  %arraydecay1188 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1189 = bitcast %union.char64long16* %arraydecay1188 to [16 x i32]*
  %arrayidx1190 = getelementptr inbounds [16 x i32], [16 x i32]* %l1189, i64 0, i64 3
  store i32 %or1187, i32* %arrayidx1190, align 4
  %add1191 = add i32 %xor1154, %or1187
  %add1192 = add i32 %add1191, 1859775393
  %475 = load i32, i32* %a, align 4
  %shl1193 = shl i32 %475, 5
  %476 = load i32, i32* %a, align 4
  %shr1194 = lshr i32 %476, 27
  %or1195 = or i32 %shl1193, %shr1194
  %add1196 = add i32 %add1192, %or1195
  %477 = load i32, i32* %e, align 4
  %add1197 = add i32 %477, %add1196
  store i32 %add1197, i32* %e, align 4
  %478 = load i32, i32* %b, align 4
  %shl1198 = shl i32 %478, 30
  %479 = load i32, i32* %b, align 4
  %shr1199 = lshr i32 %479, 2
  %or1200 = or i32 %shl1198, %shr1199
  store i32 %or1200, i32* %b, align 4
  %480 = load i32, i32* %a, align 4
  %481 = load i32, i32* %b, align 4
  %xor1201 = xor i32 %480, %481
  %482 = load i32, i32* %c, align 4
  %xor1202 = xor i32 %xor1201, %482
  %arraydecay1203 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1204 = bitcast %union.char64long16* %arraydecay1203 to [16 x i32]*
  %arrayidx1205 = getelementptr inbounds [16 x i32], [16 x i32]* %l1204, i64 0, i64 1
  %483 = load i32, i32* %arrayidx1205, align 4
  %arraydecay1206 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1207 = bitcast %union.char64long16* %arraydecay1206 to [16 x i32]*
  %arrayidx1208 = getelementptr inbounds [16 x i32], [16 x i32]* %l1207, i64 0, i64 12
  %484 = load i32, i32* %arrayidx1208, align 16
  %xor1209 = xor i32 %483, %484
  %arraydecay1210 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1211 = bitcast %union.char64long16* %arraydecay1210 to [16 x i32]*
  %arrayidx1212 = getelementptr inbounds [16 x i32], [16 x i32]* %l1211, i64 0, i64 6
  %485 = load i32, i32* %arrayidx1212, align 8
  %xor1213 = xor i32 %xor1209, %485
  %arraydecay1214 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1215 = bitcast %union.char64long16* %arraydecay1214 to [16 x i32]*
  %arrayidx1216 = getelementptr inbounds [16 x i32], [16 x i32]* %l1215, i64 0, i64 4
  %486 = load i32, i32* %arrayidx1216, align 16
  %xor1217 = xor i32 %xor1213, %486
  %shl1218 = shl i32 %xor1217, 1
  %arraydecay1219 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1220 = bitcast %union.char64long16* %arraydecay1219 to [16 x i32]*
  %arrayidx1221 = getelementptr inbounds [16 x i32], [16 x i32]* %l1220, i64 0, i64 1
  %487 = load i32, i32* %arrayidx1221, align 4
  %arraydecay1222 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1223 = bitcast %union.char64long16* %arraydecay1222 to [16 x i32]*
  %arrayidx1224 = getelementptr inbounds [16 x i32], [16 x i32]* %l1223, i64 0, i64 12
  %488 = load i32, i32* %arrayidx1224, align 16
  %xor1225 = xor i32 %487, %488
  %arraydecay1226 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1227 = bitcast %union.char64long16* %arraydecay1226 to [16 x i32]*
  %arrayidx1228 = getelementptr inbounds [16 x i32], [16 x i32]* %l1227, i64 0, i64 6
  %489 = load i32, i32* %arrayidx1228, align 8
  %xor1229 = xor i32 %xor1225, %489
  %arraydecay1230 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1231 = bitcast %union.char64long16* %arraydecay1230 to [16 x i32]*
  %arrayidx1232 = getelementptr inbounds [16 x i32], [16 x i32]* %l1231, i64 0, i64 4
  %490 = load i32, i32* %arrayidx1232, align 16
  %xor1233 = xor i32 %xor1229, %490
  %shr1234 = lshr i32 %xor1233, 31
  %or1235 = or i32 %shl1218, %shr1234
  %arraydecay1236 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1237 = bitcast %union.char64long16* %arraydecay1236 to [16 x i32]*
  %arrayidx1238 = getelementptr inbounds [16 x i32], [16 x i32]* %l1237, i64 0, i64 4
  store i32 %or1235, i32* %arrayidx1238, align 16
  %add1239 = add i32 %xor1202, %or1235
  %add1240 = add i32 %add1239, 1859775393
  %491 = load i32, i32* %e, align 4
  %shl1241 = shl i32 %491, 5
  %492 = load i32, i32* %e, align 4
  %shr1242 = lshr i32 %492, 27
  %or1243 = or i32 %shl1241, %shr1242
  %add1244 = add i32 %add1240, %or1243
  %493 = load i32, i32* %d, align 4
  %add1245 = add i32 %493, %add1244
  store i32 %add1245, i32* %d, align 4
  %494 = load i32, i32* %a, align 4
  %shl1246 = shl i32 %494, 30
  %495 = load i32, i32* %a, align 4
  %shr1247 = lshr i32 %495, 2
  %or1248 = or i32 %shl1246, %shr1247
  store i32 %or1248, i32* %a, align 4
  %496 = load i32, i32* %e, align 4
  %497 = load i32, i32* %a, align 4
  %xor1249 = xor i32 %496, %497
  %498 = load i32, i32* %b, align 4
  %xor1250 = xor i32 %xor1249, %498
  %arraydecay1251 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1252 = bitcast %union.char64long16* %arraydecay1251 to [16 x i32]*
  %arrayidx1253 = getelementptr inbounds [16 x i32], [16 x i32]* %l1252, i64 0, i64 2
  %499 = load i32, i32* %arrayidx1253, align 8
  %arraydecay1254 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1255 = bitcast %union.char64long16* %arraydecay1254 to [16 x i32]*
  %arrayidx1256 = getelementptr inbounds [16 x i32], [16 x i32]* %l1255, i64 0, i64 13
  %500 = load i32, i32* %arrayidx1256, align 4
  %xor1257 = xor i32 %499, %500
  %arraydecay1258 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1259 = bitcast %union.char64long16* %arraydecay1258 to [16 x i32]*
  %arrayidx1260 = getelementptr inbounds [16 x i32], [16 x i32]* %l1259, i64 0, i64 7
  %501 = load i32, i32* %arrayidx1260, align 4
  %xor1261 = xor i32 %xor1257, %501
  %arraydecay1262 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1263 = bitcast %union.char64long16* %arraydecay1262 to [16 x i32]*
  %arrayidx1264 = getelementptr inbounds [16 x i32], [16 x i32]* %l1263, i64 0, i64 5
  %502 = load i32, i32* %arrayidx1264, align 4
  %xor1265 = xor i32 %xor1261, %502
  %shl1266 = shl i32 %xor1265, 1
  %arraydecay1267 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1268 = bitcast %union.char64long16* %arraydecay1267 to [16 x i32]*
  %arrayidx1269 = getelementptr inbounds [16 x i32], [16 x i32]* %l1268, i64 0, i64 2
  %503 = load i32, i32* %arrayidx1269, align 8
  %arraydecay1270 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1271 = bitcast %union.char64long16* %arraydecay1270 to [16 x i32]*
  %arrayidx1272 = getelementptr inbounds [16 x i32], [16 x i32]* %l1271, i64 0, i64 13
  %504 = load i32, i32* %arrayidx1272, align 4
  %xor1273 = xor i32 %503, %504
  %arraydecay1274 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1275 = bitcast %union.char64long16* %arraydecay1274 to [16 x i32]*
  %arrayidx1276 = getelementptr inbounds [16 x i32], [16 x i32]* %l1275, i64 0, i64 7
  %505 = load i32, i32* %arrayidx1276, align 4
  %xor1277 = xor i32 %xor1273, %505
  %arraydecay1278 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1279 = bitcast %union.char64long16* %arraydecay1278 to [16 x i32]*
  %arrayidx1280 = getelementptr inbounds [16 x i32], [16 x i32]* %l1279, i64 0, i64 5
  %506 = load i32, i32* %arrayidx1280, align 4
  %xor1281 = xor i32 %xor1277, %506
  %shr1282 = lshr i32 %xor1281, 31
  %or1283 = or i32 %shl1266, %shr1282
  %arraydecay1284 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1285 = bitcast %union.char64long16* %arraydecay1284 to [16 x i32]*
  %arrayidx1286 = getelementptr inbounds [16 x i32], [16 x i32]* %l1285, i64 0, i64 5
  store i32 %or1283, i32* %arrayidx1286, align 4
  %add1287 = add i32 %xor1250, %or1283
  %add1288 = add i32 %add1287, 1859775393
  %507 = load i32, i32* %d, align 4
  %shl1289 = shl i32 %507, 5
  %508 = load i32, i32* %d, align 4
  %shr1290 = lshr i32 %508, 27
  %or1291 = or i32 %shl1289, %shr1290
  %add1292 = add i32 %add1288, %or1291
  %509 = load i32, i32* %c, align 4
  %add1293 = add i32 %509, %add1292
  store i32 %add1293, i32* %c, align 4
  %510 = load i32, i32* %e, align 4
  %shl1294 = shl i32 %510, 30
  %511 = load i32, i32* %e, align 4
  %shr1295 = lshr i32 %511, 2
  %or1296 = or i32 %shl1294, %shr1295
  store i32 %or1296, i32* %e, align 4
  %512 = load i32, i32* %d, align 4
  %513 = load i32, i32* %e, align 4
  %xor1297 = xor i32 %512, %513
  %514 = load i32, i32* %a, align 4
  %xor1298 = xor i32 %xor1297, %514
  %arraydecay1299 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1300 = bitcast %union.char64long16* %arraydecay1299 to [16 x i32]*
  %arrayidx1301 = getelementptr inbounds [16 x i32], [16 x i32]* %l1300, i64 0, i64 3
  %515 = load i32, i32* %arrayidx1301, align 4
  %arraydecay1302 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1303 = bitcast %union.char64long16* %arraydecay1302 to [16 x i32]*
  %arrayidx1304 = getelementptr inbounds [16 x i32], [16 x i32]* %l1303, i64 0, i64 14
  %516 = load i32, i32* %arrayidx1304, align 8
  %xor1305 = xor i32 %515, %516
  %arraydecay1306 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1307 = bitcast %union.char64long16* %arraydecay1306 to [16 x i32]*
  %arrayidx1308 = getelementptr inbounds [16 x i32], [16 x i32]* %l1307, i64 0, i64 8
  %517 = load i32, i32* %arrayidx1308, align 16
  %xor1309 = xor i32 %xor1305, %517
  %arraydecay1310 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1311 = bitcast %union.char64long16* %arraydecay1310 to [16 x i32]*
  %arrayidx1312 = getelementptr inbounds [16 x i32], [16 x i32]* %l1311, i64 0, i64 6
  %518 = load i32, i32* %arrayidx1312, align 8
  %xor1313 = xor i32 %xor1309, %518
  %shl1314 = shl i32 %xor1313, 1
  %arraydecay1315 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1316 = bitcast %union.char64long16* %arraydecay1315 to [16 x i32]*
  %arrayidx1317 = getelementptr inbounds [16 x i32], [16 x i32]* %l1316, i64 0, i64 3
  %519 = load i32, i32* %arrayidx1317, align 4
  %arraydecay1318 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1319 = bitcast %union.char64long16* %arraydecay1318 to [16 x i32]*
  %arrayidx1320 = getelementptr inbounds [16 x i32], [16 x i32]* %l1319, i64 0, i64 14
  %520 = load i32, i32* %arrayidx1320, align 8
  %xor1321 = xor i32 %519, %520
  %arraydecay1322 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1323 = bitcast %union.char64long16* %arraydecay1322 to [16 x i32]*
  %arrayidx1324 = getelementptr inbounds [16 x i32], [16 x i32]* %l1323, i64 0, i64 8
  %521 = load i32, i32* %arrayidx1324, align 16
  %xor1325 = xor i32 %xor1321, %521
  %arraydecay1326 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1327 = bitcast %union.char64long16* %arraydecay1326 to [16 x i32]*
  %arrayidx1328 = getelementptr inbounds [16 x i32], [16 x i32]* %l1327, i64 0, i64 6
  %522 = load i32, i32* %arrayidx1328, align 8
  %xor1329 = xor i32 %xor1325, %522
  %shr1330 = lshr i32 %xor1329, 31
  %or1331 = or i32 %shl1314, %shr1330
  %arraydecay1332 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1333 = bitcast %union.char64long16* %arraydecay1332 to [16 x i32]*
  %arrayidx1334 = getelementptr inbounds [16 x i32], [16 x i32]* %l1333, i64 0, i64 6
  store i32 %or1331, i32* %arrayidx1334, align 8
  %add1335 = add i32 %xor1298, %or1331
  %add1336 = add i32 %add1335, 1859775393
  %523 = load i32, i32* %c, align 4
  %shl1337 = shl i32 %523, 5
  %524 = load i32, i32* %c, align 4
  %shr1338 = lshr i32 %524, 27
  %or1339 = or i32 %shl1337, %shr1338
  %add1340 = add i32 %add1336, %or1339
  %525 = load i32, i32* %b, align 4
  %add1341 = add i32 %525, %add1340
  store i32 %add1341, i32* %b, align 4
  %526 = load i32, i32* %d, align 4
  %shl1342 = shl i32 %526, 30
  %527 = load i32, i32* %d, align 4
  %shr1343 = lshr i32 %527, 2
  %or1344 = or i32 %shl1342, %shr1343
  store i32 %or1344, i32* %d, align 4
  %528 = load i32, i32* %c, align 4
  %529 = load i32, i32* %d, align 4
  %xor1345 = xor i32 %528, %529
  %530 = load i32, i32* %e, align 4
  %xor1346 = xor i32 %xor1345, %530
  %arraydecay1347 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1348 = bitcast %union.char64long16* %arraydecay1347 to [16 x i32]*
  %arrayidx1349 = getelementptr inbounds [16 x i32], [16 x i32]* %l1348, i64 0, i64 4
  %531 = load i32, i32* %arrayidx1349, align 16
  %arraydecay1350 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1351 = bitcast %union.char64long16* %arraydecay1350 to [16 x i32]*
  %arrayidx1352 = getelementptr inbounds [16 x i32], [16 x i32]* %l1351, i64 0, i64 15
  %532 = load i32, i32* %arrayidx1352, align 4
  %xor1353 = xor i32 %531, %532
  %arraydecay1354 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1355 = bitcast %union.char64long16* %arraydecay1354 to [16 x i32]*
  %arrayidx1356 = getelementptr inbounds [16 x i32], [16 x i32]* %l1355, i64 0, i64 9
  %533 = load i32, i32* %arrayidx1356, align 4
  %xor1357 = xor i32 %xor1353, %533
  %arraydecay1358 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1359 = bitcast %union.char64long16* %arraydecay1358 to [16 x i32]*
  %arrayidx1360 = getelementptr inbounds [16 x i32], [16 x i32]* %l1359, i64 0, i64 7
  %534 = load i32, i32* %arrayidx1360, align 4
  %xor1361 = xor i32 %xor1357, %534
  %shl1362 = shl i32 %xor1361, 1
  %arraydecay1363 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1364 = bitcast %union.char64long16* %arraydecay1363 to [16 x i32]*
  %arrayidx1365 = getelementptr inbounds [16 x i32], [16 x i32]* %l1364, i64 0, i64 4
  %535 = load i32, i32* %arrayidx1365, align 16
  %arraydecay1366 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1367 = bitcast %union.char64long16* %arraydecay1366 to [16 x i32]*
  %arrayidx1368 = getelementptr inbounds [16 x i32], [16 x i32]* %l1367, i64 0, i64 15
  %536 = load i32, i32* %arrayidx1368, align 4
  %xor1369 = xor i32 %535, %536
  %arraydecay1370 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1371 = bitcast %union.char64long16* %arraydecay1370 to [16 x i32]*
  %arrayidx1372 = getelementptr inbounds [16 x i32], [16 x i32]* %l1371, i64 0, i64 9
  %537 = load i32, i32* %arrayidx1372, align 4
  %xor1373 = xor i32 %xor1369, %537
  %arraydecay1374 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1375 = bitcast %union.char64long16* %arraydecay1374 to [16 x i32]*
  %arrayidx1376 = getelementptr inbounds [16 x i32], [16 x i32]* %l1375, i64 0, i64 7
  %538 = load i32, i32* %arrayidx1376, align 4
  %xor1377 = xor i32 %xor1373, %538
  %shr1378 = lshr i32 %xor1377, 31
  %or1379 = or i32 %shl1362, %shr1378
  %arraydecay1380 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1381 = bitcast %union.char64long16* %arraydecay1380 to [16 x i32]*
  %arrayidx1382 = getelementptr inbounds [16 x i32], [16 x i32]* %l1381, i64 0, i64 7
  store i32 %or1379, i32* %arrayidx1382, align 4
  %add1383 = add i32 %xor1346, %or1379
  %add1384 = add i32 %add1383, 1859775393
  %539 = load i32, i32* %b, align 4
  %shl1385 = shl i32 %539, 5
  %540 = load i32, i32* %b, align 4
  %shr1386 = lshr i32 %540, 27
  %or1387 = or i32 %shl1385, %shr1386
  %add1388 = add i32 %add1384, %or1387
  %541 = load i32, i32* %a, align 4
  %add1389 = add i32 %541, %add1388
  store i32 %add1389, i32* %a, align 4
  %542 = load i32, i32* %c, align 4
  %shl1390 = shl i32 %542, 30
  %543 = load i32, i32* %c, align 4
  %shr1391 = lshr i32 %543, 2
  %or1392 = or i32 %shl1390, %shr1391
  store i32 %or1392, i32* %c, align 4
  %544 = load i32, i32* %b, align 4
  %545 = load i32, i32* %c, align 4
  %or1393 = or i32 %544, %545
  %546 = load i32, i32* %d, align 4
  %and1394 = and i32 %or1393, %546
  %547 = load i32, i32* %b, align 4
  %548 = load i32, i32* %c, align 4
  %and1395 = and i32 %547, %548
  %or1396 = or i32 %and1394, %and1395
  %arraydecay1397 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1398 = bitcast %union.char64long16* %arraydecay1397 to [16 x i32]*
  %arrayidx1399 = getelementptr inbounds [16 x i32], [16 x i32]* %l1398, i64 0, i64 5
  %549 = load i32, i32* %arrayidx1399, align 4
  %arraydecay1400 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1401 = bitcast %union.char64long16* %arraydecay1400 to [16 x i32]*
  %arrayidx1402 = getelementptr inbounds [16 x i32], [16 x i32]* %l1401, i64 0, i64 0
  %550 = load i32, i32* %arrayidx1402, align 16
  %xor1403 = xor i32 %549, %550
  %arraydecay1404 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1405 = bitcast %union.char64long16* %arraydecay1404 to [16 x i32]*
  %arrayidx1406 = getelementptr inbounds [16 x i32], [16 x i32]* %l1405, i64 0, i64 10
  %551 = load i32, i32* %arrayidx1406, align 8
  %xor1407 = xor i32 %xor1403, %551
  %arraydecay1408 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1409 = bitcast %union.char64long16* %arraydecay1408 to [16 x i32]*
  %arrayidx1410 = getelementptr inbounds [16 x i32], [16 x i32]* %l1409, i64 0, i64 8
  %552 = load i32, i32* %arrayidx1410, align 16
  %xor1411 = xor i32 %xor1407, %552
  %shl1412 = shl i32 %xor1411, 1
  %arraydecay1413 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1414 = bitcast %union.char64long16* %arraydecay1413 to [16 x i32]*
  %arrayidx1415 = getelementptr inbounds [16 x i32], [16 x i32]* %l1414, i64 0, i64 5
  %553 = load i32, i32* %arrayidx1415, align 4
  %arraydecay1416 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1417 = bitcast %union.char64long16* %arraydecay1416 to [16 x i32]*
  %arrayidx1418 = getelementptr inbounds [16 x i32], [16 x i32]* %l1417, i64 0, i64 0
  %554 = load i32, i32* %arrayidx1418, align 16
  %xor1419 = xor i32 %553, %554
  %arraydecay1420 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1421 = bitcast %union.char64long16* %arraydecay1420 to [16 x i32]*
  %arrayidx1422 = getelementptr inbounds [16 x i32], [16 x i32]* %l1421, i64 0, i64 10
  %555 = load i32, i32* %arrayidx1422, align 8
  %xor1423 = xor i32 %xor1419, %555
  %arraydecay1424 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1425 = bitcast %union.char64long16* %arraydecay1424 to [16 x i32]*
  %arrayidx1426 = getelementptr inbounds [16 x i32], [16 x i32]* %l1425, i64 0, i64 8
  %556 = load i32, i32* %arrayidx1426, align 16
  %xor1427 = xor i32 %xor1423, %556
  %shr1428 = lshr i32 %xor1427, 31
  %or1429 = or i32 %shl1412, %shr1428
  %arraydecay1430 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1431 = bitcast %union.char64long16* %arraydecay1430 to [16 x i32]*
  %arrayidx1432 = getelementptr inbounds [16 x i32], [16 x i32]* %l1431, i64 0, i64 8
  store i32 %or1429, i32* %arrayidx1432, align 16
  %add1433 = add i32 %or1396, %or1429
  %add1434 = add i32 %add1433, -1894007588
  %557 = load i32, i32* %a, align 4
  %shl1435 = shl i32 %557, 5
  %558 = load i32, i32* %a, align 4
  %shr1436 = lshr i32 %558, 27
  %or1437 = or i32 %shl1435, %shr1436
  %add1438 = add i32 %add1434, %or1437
  %559 = load i32, i32* %e, align 4
  %add1439 = add i32 %559, %add1438
  store i32 %add1439, i32* %e, align 4
  %560 = load i32, i32* %b, align 4
  %shl1440 = shl i32 %560, 30
  %561 = load i32, i32* %b, align 4
  %shr1441 = lshr i32 %561, 2
  %or1442 = or i32 %shl1440, %shr1441
  store i32 %or1442, i32* %b, align 4
  %562 = load i32, i32* %a, align 4
  %563 = load i32, i32* %b, align 4
  %or1443 = or i32 %562, %563
  %564 = load i32, i32* %c, align 4
  %and1444 = and i32 %or1443, %564
  %565 = load i32, i32* %a, align 4
  %566 = load i32, i32* %b, align 4
  %and1445 = and i32 %565, %566
  %or1446 = or i32 %and1444, %and1445
  %arraydecay1447 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1448 = bitcast %union.char64long16* %arraydecay1447 to [16 x i32]*
  %arrayidx1449 = getelementptr inbounds [16 x i32], [16 x i32]* %l1448, i64 0, i64 6
  %567 = load i32, i32* %arrayidx1449, align 8
  %arraydecay1450 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1451 = bitcast %union.char64long16* %arraydecay1450 to [16 x i32]*
  %arrayidx1452 = getelementptr inbounds [16 x i32], [16 x i32]* %l1451, i64 0, i64 1
  %568 = load i32, i32* %arrayidx1452, align 4
  %xor1453 = xor i32 %567, %568
  %arraydecay1454 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1455 = bitcast %union.char64long16* %arraydecay1454 to [16 x i32]*
  %arrayidx1456 = getelementptr inbounds [16 x i32], [16 x i32]* %l1455, i64 0, i64 11
  %569 = load i32, i32* %arrayidx1456, align 4
  %xor1457 = xor i32 %xor1453, %569
  %arraydecay1458 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1459 = bitcast %union.char64long16* %arraydecay1458 to [16 x i32]*
  %arrayidx1460 = getelementptr inbounds [16 x i32], [16 x i32]* %l1459, i64 0, i64 9
  %570 = load i32, i32* %arrayidx1460, align 4
  %xor1461 = xor i32 %xor1457, %570
  %shl1462 = shl i32 %xor1461, 1
  %arraydecay1463 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1464 = bitcast %union.char64long16* %arraydecay1463 to [16 x i32]*
  %arrayidx1465 = getelementptr inbounds [16 x i32], [16 x i32]* %l1464, i64 0, i64 6
  %571 = load i32, i32* %arrayidx1465, align 8
  %arraydecay1466 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1467 = bitcast %union.char64long16* %arraydecay1466 to [16 x i32]*
  %arrayidx1468 = getelementptr inbounds [16 x i32], [16 x i32]* %l1467, i64 0, i64 1
  %572 = load i32, i32* %arrayidx1468, align 4
  %xor1469 = xor i32 %571, %572
  %arraydecay1470 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1471 = bitcast %union.char64long16* %arraydecay1470 to [16 x i32]*
  %arrayidx1472 = getelementptr inbounds [16 x i32], [16 x i32]* %l1471, i64 0, i64 11
  %573 = load i32, i32* %arrayidx1472, align 4
  %xor1473 = xor i32 %xor1469, %573
  %arraydecay1474 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1475 = bitcast %union.char64long16* %arraydecay1474 to [16 x i32]*
  %arrayidx1476 = getelementptr inbounds [16 x i32], [16 x i32]* %l1475, i64 0, i64 9
  %574 = load i32, i32* %arrayidx1476, align 4
  %xor1477 = xor i32 %xor1473, %574
  %shr1478 = lshr i32 %xor1477, 31
  %or1479 = or i32 %shl1462, %shr1478
  %arraydecay1480 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1481 = bitcast %union.char64long16* %arraydecay1480 to [16 x i32]*
  %arrayidx1482 = getelementptr inbounds [16 x i32], [16 x i32]* %l1481, i64 0, i64 9
  store i32 %or1479, i32* %arrayidx1482, align 4
  %add1483 = add i32 %or1446, %or1479
  %add1484 = add i32 %add1483, -1894007588
  %575 = load i32, i32* %e, align 4
  %shl1485 = shl i32 %575, 5
  %576 = load i32, i32* %e, align 4
  %shr1486 = lshr i32 %576, 27
  %or1487 = or i32 %shl1485, %shr1486
  %add1488 = add i32 %add1484, %or1487
  %577 = load i32, i32* %d, align 4
  %add1489 = add i32 %577, %add1488
  store i32 %add1489, i32* %d, align 4
  %578 = load i32, i32* %a, align 4
  %shl1490 = shl i32 %578, 30
  %579 = load i32, i32* %a, align 4
  %shr1491 = lshr i32 %579, 2
  %or1492 = or i32 %shl1490, %shr1491
  store i32 %or1492, i32* %a, align 4
  %580 = load i32, i32* %e, align 4
  %581 = load i32, i32* %a, align 4
  %or1493 = or i32 %580, %581
  %582 = load i32, i32* %b, align 4
  %and1494 = and i32 %or1493, %582
  %583 = load i32, i32* %e, align 4
  %584 = load i32, i32* %a, align 4
  %and1495 = and i32 %583, %584
  %or1496 = or i32 %and1494, %and1495
  %arraydecay1497 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1498 = bitcast %union.char64long16* %arraydecay1497 to [16 x i32]*
  %arrayidx1499 = getelementptr inbounds [16 x i32], [16 x i32]* %l1498, i64 0, i64 7
  %585 = load i32, i32* %arrayidx1499, align 4
  %arraydecay1500 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1501 = bitcast %union.char64long16* %arraydecay1500 to [16 x i32]*
  %arrayidx1502 = getelementptr inbounds [16 x i32], [16 x i32]* %l1501, i64 0, i64 2
  %586 = load i32, i32* %arrayidx1502, align 8
  %xor1503 = xor i32 %585, %586
  %arraydecay1504 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1505 = bitcast %union.char64long16* %arraydecay1504 to [16 x i32]*
  %arrayidx1506 = getelementptr inbounds [16 x i32], [16 x i32]* %l1505, i64 0, i64 12
  %587 = load i32, i32* %arrayidx1506, align 16
  %xor1507 = xor i32 %xor1503, %587
  %arraydecay1508 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1509 = bitcast %union.char64long16* %arraydecay1508 to [16 x i32]*
  %arrayidx1510 = getelementptr inbounds [16 x i32], [16 x i32]* %l1509, i64 0, i64 10
  %588 = load i32, i32* %arrayidx1510, align 8
  %xor1511 = xor i32 %xor1507, %588
  %shl1512 = shl i32 %xor1511, 1
  %arraydecay1513 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1514 = bitcast %union.char64long16* %arraydecay1513 to [16 x i32]*
  %arrayidx1515 = getelementptr inbounds [16 x i32], [16 x i32]* %l1514, i64 0, i64 7
  %589 = load i32, i32* %arrayidx1515, align 4
  %arraydecay1516 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1517 = bitcast %union.char64long16* %arraydecay1516 to [16 x i32]*
  %arrayidx1518 = getelementptr inbounds [16 x i32], [16 x i32]* %l1517, i64 0, i64 2
  %590 = load i32, i32* %arrayidx1518, align 8
  %xor1519 = xor i32 %589, %590
  %arraydecay1520 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1521 = bitcast %union.char64long16* %arraydecay1520 to [16 x i32]*
  %arrayidx1522 = getelementptr inbounds [16 x i32], [16 x i32]* %l1521, i64 0, i64 12
  %591 = load i32, i32* %arrayidx1522, align 16
  %xor1523 = xor i32 %xor1519, %591
  %arraydecay1524 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1525 = bitcast %union.char64long16* %arraydecay1524 to [16 x i32]*
  %arrayidx1526 = getelementptr inbounds [16 x i32], [16 x i32]* %l1525, i64 0, i64 10
  %592 = load i32, i32* %arrayidx1526, align 8
  %xor1527 = xor i32 %xor1523, %592
  %shr1528 = lshr i32 %xor1527, 31
  %or1529 = or i32 %shl1512, %shr1528
  %arraydecay1530 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1531 = bitcast %union.char64long16* %arraydecay1530 to [16 x i32]*
  %arrayidx1532 = getelementptr inbounds [16 x i32], [16 x i32]* %l1531, i64 0, i64 10
  store i32 %or1529, i32* %arrayidx1532, align 8
  %add1533 = add i32 %or1496, %or1529
  %add1534 = add i32 %add1533, -1894007588
  %593 = load i32, i32* %d, align 4
  %shl1535 = shl i32 %593, 5
  %594 = load i32, i32* %d, align 4
  %shr1536 = lshr i32 %594, 27
  %or1537 = or i32 %shl1535, %shr1536
  %add1538 = add i32 %add1534, %or1537
  %595 = load i32, i32* %c, align 4
  %add1539 = add i32 %595, %add1538
  store i32 %add1539, i32* %c, align 4
  %596 = load i32, i32* %e, align 4
  %shl1540 = shl i32 %596, 30
  %597 = load i32, i32* %e, align 4
  %shr1541 = lshr i32 %597, 2
  %or1542 = or i32 %shl1540, %shr1541
  store i32 %or1542, i32* %e, align 4
  %598 = load i32, i32* %d, align 4
  %599 = load i32, i32* %e, align 4
  %or1543 = or i32 %598, %599
  %600 = load i32, i32* %a, align 4
  %and1544 = and i32 %or1543, %600
  %601 = load i32, i32* %d, align 4
  %602 = load i32, i32* %e, align 4
  %and1545 = and i32 %601, %602
  %or1546 = or i32 %and1544, %and1545
  %arraydecay1547 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1548 = bitcast %union.char64long16* %arraydecay1547 to [16 x i32]*
  %arrayidx1549 = getelementptr inbounds [16 x i32], [16 x i32]* %l1548, i64 0, i64 8
  %603 = load i32, i32* %arrayidx1549, align 16
  %arraydecay1550 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1551 = bitcast %union.char64long16* %arraydecay1550 to [16 x i32]*
  %arrayidx1552 = getelementptr inbounds [16 x i32], [16 x i32]* %l1551, i64 0, i64 3
  %604 = load i32, i32* %arrayidx1552, align 4
  %xor1553 = xor i32 %603, %604
  %arraydecay1554 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1555 = bitcast %union.char64long16* %arraydecay1554 to [16 x i32]*
  %arrayidx1556 = getelementptr inbounds [16 x i32], [16 x i32]* %l1555, i64 0, i64 13
  %605 = load i32, i32* %arrayidx1556, align 4
  %xor1557 = xor i32 %xor1553, %605
  %arraydecay1558 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1559 = bitcast %union.char64long16* %arraydecay1558 to [16 x i32]*
  %arrayidx1560 = getelementptr inbounds [16 x i32], [16 x i32]* %l1559, i64 0, i64 11
  %606 = load i32, i32* %arrayidx1560, align 4
  %xor1561 = xor i32 %xor1557, %606
  %shl1562 = shl i32 %xor1561, 1
  %arraydecay1563 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1564 = bitcast %union.char64long16* %arraydecay1563 to [16 x i32]*
  %arrayidx1565 = getelementptr inbounds [16 x i32], [16 x i32]* %l1564, i64 0, i64 8
  %607 = load i32, i32* %arrayidx1565, align 16
  %arraydecay1566 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1567 = bitcast %union.char64long16* %arraydecay1566 to [16 x i32]*
  %arrayidx1568 = getelementptr inbounds [16 x i32], [16 x i32]* %l1567, i64 0, i64 3
  %608 = load i32, i32* %arrayidx1568, align 4
  %xor1569 = xor i32 %607, %608
  %arraydecay1570 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1571 = bitcast %union.char64long16* %arraydecay1570 to [16 x i32]*
  %arrayidx1572 = getelementptr inbounds [16 x i32], [16 x i32]* %l1571, i64 0, i64 13
  %609 = load i32, i32* %arrayidx1572, align 4
  %xor1573 = xor i32 %xor1569, %609
  %arraydecay1574 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1575 = bitcast %union.char64long16* %arraydecay1574 to [16 x i32]*
  %arrayidx1576 = getelementptr inbounds [16 x i32], [16 x i32]* %l1575, i64 0, i64 11
  %610 = load i32, i32* %arrayidx1576, align 4
  %xor1577 = xor i32 %xor1573, %610
  %shr1578 = lshr i32 %xor1577, 31
  %or1579 = or i32 %shl1562, %shr1578
  %arraydecay1580 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1581 = bitcast %union.char64long16* %arraydecay1580 to [16 x i32]*
  %arrayidx1582 = getelementptr inbounds [16 x i32], [16 x i32]* %l1581, i64 0, i64 11
  store i32 %or1579, i32* %arrayidx1582, align 4
  %add1583 = add i32 %or1546, %or1579
  %add1584 = add i32 %add1583, -1894007588
  %611 = load i32, i32* %c, align 4
  %shl1585 = shl i32 %611, 5
  %612 = load i32, i32* %c, align 4
  %shr1586 = lshr i32 %612, 27
  %or1587 = or i32 %shl1585, %shr1586
  %add1588 = add i32 %add1584, %or1587
  %613 = load i32, i32* %b, align 4
  %add1589 = add i32 %613, %add1588
  store i32 %add1589, i32* %b, align 4
  %614 = load i32, i32* %d, align 4
  %shl1590 = shl i32 %614, 30
  %615 = load i32, i32* %d, align 4
  %shr1591 = lshr i32 %615, 2
  %or1592 = or i32 %shl1590, %shr1591
  store i32 %or1592, i32* %d, align 4
  %616 = load i32, i32* %c, align 4
  %617 = load i32, i32* %d, align 4
  %or1593 = or i32 %616, %617
  %618 = load i32, i32* %e, align 4
  %and1594 = and i32 %or1593, %618
  %619 = load i32, i32* %c, align 4
  %620 = load i32, i32* %d, align 4
  %and1595 = and i32 %619, %620
  %or1596 = or i32 %and1594, %and1595
  %arraydecay1597 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1598 = bitcast %union.char64long16* %arraydecay1597 to [16 x i32]*
  %arrayidx1599 = getelementptr inbounds [16 x i32], [16 x i32]* %l1598, i64 0, i64 9
  %621 = load i32, i32* %arrayidx1599, align 4
  %arraydecay1600 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1601 = bitcast %union.char64long16* %arraydecay1600 to [16 x i32]*
  %arrayidx1602 = getelementptr inbounds [16 x i32], [16 x i32]* %l1601, i64 0, i64 4
  %622 = load i32, i32* %arrayidx1602, align 16
  %xor1603 = xor i32 %621, %622
  %arraydecay1604 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1605 = bitcast %union.char64long16* %arraydecay1604 to [16 x i32]*
  %arrayidx1606 = getelementptr inbounds [16 x i32], [16 x i32]* %l1605, i64 0, i64 14
  %623 = load i32, i32* %arrayidx1606, align 8
  %xor1607 = xor i32 %xor1603, %623
  %arraydecay1608 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1609 = bitcast %union.char64long16* %arraydecay1608 to [16 x i32]*
  %arrayidx1610 = getelementptr inbounds [16 x i32], [16 x i32]* %l1609, i64 0, i64 12
  %624 = load i32, i32* %arrayidx1610, align 16
  %xor1611 = xor i32 %xor1607, %624
  %shl1612 = shl i32 %xor1611, 1
  %arraydecay1613 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1614 = bitcast %union.char64long16* %arraydecay1613 to [16 x i32]*
  %arrayidx1615 = getelementptr inbounds [16 x i32], [16 x i32]* %l1614, i64 0, i64 9
  %625 = load i32, i32* %arrayidx1615, align 4
  %arraydecay1616 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1617 = bitcast %union.char64long16* %arraydecay1616 to [16 x i32]*
  %arrayidx1618 = getelementptr inbounds [16 x i32], [16 x i32]* %l1617, i64 0, i64 4
  %626 = load i32, i32* %arrayidx1618, align 16
  %xor1619 = xor i32 %625, %626
  %arraydecay1620 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1621 = bitcast %union.char64long16* %arraydecay1620 to [16 x i32]*
  %arrayidx1622 = getelementptr inbounds [16 x i32], [16 x i32]* %l1621, i64 0, i64 14
  %627 = load i32, i32* %arrayidx1622, align 8
  %xor1623 = xor i32 %xor1619, %627
  %arraydecay1624 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1625 = bitcast %union.char64long16* %arraydecay1624 to [16 x i32]*
  %arrayidx1626 = getelementptr inbounds [16 x i32], [16 x i32]* %l1625, i64 0, i64 12
  %628 = load i32, i32* %arrayidx1626, align 16
  %xor1627 = xor i32 %xor1623, %628
  %shr1628 = lshr i32 %xor1627, 31
  %or1629 = or i32 %shl1612, %shr1628
  %arraydecay1630 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1631 = bitcast %union.char64long16* %arraydecay1630 to [16 x i32]*
  %arrayidx1632 = getelementptr inbounds [16 x i32], [16 x i32]* %l1631, i64 0, i64 12
  store i32 %or1629, i32* %arrayidx1632, align 16
  %add1633 = add i32 %or1596, %or1629
  %add1634 = add i32 %add1633, -1894007588
  %629 = load i32, i32* %b, align 4
  %shl1635 = shl i32 %629, 5
  %630 = load i32, i32* %b, align 4
  %shr1636 = lshr i32 %630, 27
  %or1637 = or i32 %shl1635, %shr1636
  %add1638 = add i32 %add1634, %or1637
  %631 = load i32, i32* %a, align 4
  %add1639 = add i32 %631, %add1638
  store i32 %add1639, i32* %a, align 4
  %632 = load i32, i32* %c, align 4
  %shl1640 = shl i32 %632, 30
  %633 = load i32, i32* %c, align 4
  %shr1641 = lshr i32 %633, 2
  %or1642 = or i32 %shl1640, %shr1641
  store i32 %or1642, i32* %c, align 4
  %634 = load i32, i32* %b, align 4
  %635 = load i32, i32* %c, align 4
  %or1643 = or i32 %634, %635
  %636 = load i32, i32* %d, align 4
  %and1644 = and i32 %or1643, %636
  %637 = load i32, i32* %b, align 4
  %638 = load i32, i32* %c, align 4
  %and1645 = and i32 %637, %638
  %or1646 = or i32 %and1644, %and1645
  %arraydecay1647 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1648 = bitcast %union.char64long16* %arraydecay1647 to [16 x i32]*
  %arrayidx1649 = getelementptr inbounds [16 x i32], [16 x i32]* %l1648, i64 0, i64 10
  %639 = load i32, i32* %arrayidx1649, align 8
  %arraydecay1650 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1651 = bitcast %union.char64long16* %arraydecay1650 to [16 x i32]*
  %arrayidx1652 = getelementptr inbounds [16 x i32], [16 x i32]* %l1651, i64 0, i64 5
  %640 = load i32, i32* %arrayidx1652, align 4
  %xor1653 = xor i32 %639, %640
  %arraydecay1654 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1655 = bitcast %union.char64long16* %arraydecay1654 to [16 x i32]*
  %arrayidx1656 = getelementptr inbounds [16 x i32], [16 x i32]* %l1655, i64 0, i64 15
  %641 = load i32, i32* %arrayidx1656, align 4
  %xor1657 = xor i32 %xor1653, %641
  %arraydecay1658 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1659 = bitcast %union.char64long16* %arraydecay1658 to [16 x i32]*
  %arrayidx1660 = getelementptr inbounds [16 x i32], [16 x i32]* %l1659, i64 0, i64 13
  %642 = load i32, i32* %arrayidx1660, align 4
  %xor1661 = xor i32 %xor1657, %642
  %shl1662 = shl i32 %xor1661, 1
  %arraydecay1663 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1664 = bitcast %union.char64long16* %arraydecay1663 to [16 x i32]*
  %arrayidx1665 = getelementptr inbounds [16 x i32], [16 x i32]* %l1664, i64 0, i64 10
  %643 = load i32, i32* %arrayidx1665, align 8
  %arraydecay1666 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1667 = bitcast %union.char64long16* %arraydecay1666 to [16 x i32]*
  %arrayidx1668 = getelementptr inbounds [16 x i32], [16 x i32]* %l1667, i64 0, i64 5
  %644 = load i32, i32* %arrayidx1668, align 4
  %xor1669 = xor i32 %643, %644
  %arraydecay1670 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1671 = bitcast %union.char64long16* %arraydecay1670 to [16 x i32]*
  %arrayidx1672 = getelementptr inbounds [16 x i32], [16 x i32]* %l1671, i64 0, i64 15
  %645 = load i32, i32* %arrayidx1672, align 4
  %xor1673 = xor i32 %xor1669, %645
  %arraydecay1674 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1675 = bitcast %union.char64long16* %arraydecay1674 to [16 x i32]*
  %arrayidx1676 = getelementptr inbounds [16 x i32], [16 x i32]* %l1675, i64 0, i64 13
  %646 = load i32, i32* %arrayidx1676, align 4
  %xor1677 = xor i32 %xor1673, %646
  %shr1678 = lshr i32 %xor1677, 31
  %or1679 = or i32 %shl1662, %shr1678
  %arraydecay1680 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1681 = bitcast %union.char64long16* %arraydecay1680 to [16 x i32]*
  %arrayidx1682 = getelementptr inbounds [16 x i32], [16 x i32]* %l1681, i64 0, i64 13
  store i32 %or1679, i32* %arrayidx1682, align 4
  %add1683 = add i32 %or1646, %or1679
  %add1684 = add i32 %add1683, -1894007588
  %647 = load i32, i32* %a, align 4
  %shl1685 = shl i32 %647, 5
  %648 = load i32, i32* %a, align 4
  %shr1686 = lshr i32 %648, 27
  %or1687 = or i32 %shl1685, %shr1686
  %add1688 = add i32 %add1684, %or1687
  %649 = load i32, i32* %e, align 4
  %add1689 = add i32 %649, %add1688
  store i32 %add1689, i32* %e, align 4
  %650 = load i32, i32* %b, align 4
  %shl1690 = shl i32 %650, 30
  %651 = load i32, i32* %b, align 4
  %shr1691 = lshr i32 %651, 2
  %or1692 = or i32 %shl1690, %shr1691
  store i32 %or1692, i32* %b, align 4
  %652 = load i32, i32* %a, align 4
  %653 = load i32, i32* %b, align 4
  %or1693 = or i32 %652, %653
  %654 = load i32, i32* %c, align 4
  %and1694 = and i32 %or1693, %654
  %655 = load i32, i32* %a, align 4
  %656 = load i32, i32* %b, align 4
  %and1695 = and i32 %655, %656
  %or1696 = or i32 %and1694, %and1695
  %arraydecay1697 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1698 = bitcast %union.char64long16* %arraydecay1697 to [16 x i32]*
  %arrayidx1699 = getelementptr inbounds [16 x i32], [16 x i32]* %l1698, i64 0, i64 11
  %657 = load i32, i32* %arrayidx1699, align 4
  %arraydecay1700 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1701 = bitcast %union.char64long16* %arraydecay1700 to [16 x i32]*
  %arrayidx1702 = getelementptr inbounds [16 x i32], [16 x i32]* %l1701, i64 0, i64 6
  %658 = load i32, i32* %arrayidx1702, align 8
  %xor1703 = xor i32 %657, %658
  %arraydecay1704 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1705 = bitcast %union.char64long16* %arraydecay1704 to [16 x i32]*
  %arrayidx1706 = getelementptr inbounds [16 x i32], [16 x i32]* %l1705, i64 0, i64 0
  %659 = load i32, i32* %arrayidx1706, align 16
  %xor1707 = xor i32 %xor1703, %659
  %arraydecay1708 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1709 = bitcast %union.char64long16* %arraydecay1708 to [16 x i32]*
  %arrayidx1710 = getelementptr inbounds [16 x i32], [16 x i32]* %l1709, i64 0, i64 14
  %660 = load i32, i32* %arrayidx1710, align 8
  %xor1711 = xor i32 %xor1707, %660
  %shl1712 = shl i32 %xor1711, 1
  %arraydecay1713 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1714 = bitcast %union.char64long16* %arraydecay1713 to [16 x i32]*
  %arrayidx1715 = getelementptr inbounds [16 x i32], [16 x i32]* %l1714, i64 0, i64 11
  %661 = load i32, i32* %arrayidx1715, align 4
  %arraydecay1716 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1717 = bitcast %union.char64long16* %arraydecay1716 to [16 x i32]*
  %arrayidx1718 = getelementptr inbounds [16 x i32], [16 x i32]* %l1717, i64 0, i64 6
  %662 = load i32, i32* %arrayidx1718, align 8
  %xor1719 = xor i32 %661, %662
  %arraydecay1720 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1721 = bitcast %union.char64long16* %arraydecay1720 to [16 x i32]*
  %arrayidx1722 = getelementptr inbounds [16 x i32], [16 x i32]* %l1721, i64 0, i64 0
  %663 = load i32, i32* %arrayidx1722, align 16
  %xor1723 = xor i32 %xor1719, %663
  %arraydecay1724 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1725 = bitcast %union.char64long16* %arraydecay1724 to [16 x i32]*
  %arrayidx1726 = getelementptr inbounds [16 x i32], [16 x i32]* %l1725, i64 0, i64 14
  %664 = load i32, i32* %arrayidx1726, align 8
  %xor1727 = xor i32 %xor1723, %664
  %shr1728 = lshr i32 %xor1727, 31
  %or1729 = or i32 %shl1712, %shr1728
  %arraydecay1730 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1731 = bitcast %union.char64long16* %arraydecay1730 to [16 x i32]*
  %arrayidx1732 = getelementptr inbounds [16 x i32], [16 x i32]* %l1731, i64 0, i64 14
  store i32 %or1729, i32* %arrayidx1732, align 8
  %add1733 = add i32 %or1696, %or1729
  %add1734 = add i32 %add1733, -1894007588
  %665 = load i32, i32* %e, align 4
  %shl1735 = shl i32 %665, 5
  %666 = load i32, i32* %e, align 4
  %shr1736 = lshr i32 %666, 27
  %or1737 = or i32 %shl1735, %shr1736
  %add1738 = add i32 %add1734, %or1737
  %667 = load i32, i32* %d, align 4
  %add1739 = add i32 %667, %add1738
  store i32 %add1739, i32* %d, align 4
  %668 = load i32, i32* %a, align 4
  %shl1740 = shl i32 %668, 30
  %669 = load i32, i32* %a, align 4
  %shr1741 = lshr i32 %669, 2
  %or1742 = or i32 %shl1740, %shr1741
  store i32 %or1742, i32* %a, align 4
  %670 = load i32, i32* %e, align 4
  %671 = load i32, i32* %a, align 4
  %or1743 = or i32 %670, %671
  %672 = load i32, i32* %b, align 4
  %and1744 = and i32 %or1743, %672
  %673 = load i32, i32* %e, align 4
  %674 = load i32, i32* %a, align 4
  %and1745 = and i32 %673, %674
  %or1746 = or i32 %and1744, %and1745
  %arraydecay1747 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1748 = bitcast %union.char64long16* %arraydecay1747 to [16 x i32]*
  %arrayidx1749 = getelementptr inbounds [16 x i32], [16 x i32]* %l1748, i64 0, i64 12
  %675 = load i32, i32* %arrayidx1749, align 16
  %arraydecay1750 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1751 = bitcast %union.char64long16* %arraydecay1750 to [16 x i32]*
  %arrayidx1752 = getelementptr inbounds [16 x i32], [16 x i32]* %l1751, i64 0, i64 7
  %676 = load i32, i32* %arrayidx1752, align 4
  %xor1753 = xor i32 %675, %676
  %arraydecay1754 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1755 = bitcast %union.char64long16* %arraydecay1754 to [16 x i32]*
  %arrayidx1756 = getelementptr inbounds [16 x i32], [16 x i32]* %l1755, i64 0, i64 1
  %677 = load i32, i32* %arrayidx1756, align 4
  %xor1757 = xor i32 %xor1753, %677
  %arraydecay1758 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1759 = bitcast %union.char64long16* %arraydecay1758 to [16 x i32]*
  %arrayidx1760 = getelementptr inbounds [16 x i32], [16 x i32]* %l1759, i64 0, i64 15
  %678 = load i32, i32* %arrayidx1760, align 4
  %xor1761 = xor i32 %xor1757, %678
  %shl1762 = shl i32 %xor1761, 1
  %arraydecay1763 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1764 = bitcast %union.char64long16* %arraydecay1763 to [16 x i32]*
  %arrayidx1765 = getelementptr inbounds [16 x i32], [16 x i32]* %l1764, i64 0, i64 12
  %679 = load i32, i32* %arrayidx1765, align 16
  %arraydecay1766 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1767 = bitcast %union.char64long16* %arraydecay1766 to [16 x i32]*
  %arrayidx1768 = getelementptr inbounds [16 x i32], [16 x i32]* %l1767, i64 0, i64 7
  %680 = load i32, i32* %arrayidx1768, align 4
  %xor1769 = xor i32 %679, %680
  %arraydecay1770 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1771 = bitcast %union.char64long16* %arraydecay1770 to [16 x i32]*
  %arrayidx1772 = getelementptr inbounds [16 x i32], [16 x i32]* %l1771, i64 0, i64 1
  %681 = load i32, i32* %arrayidx1772, align 4
  %xor1773 = xor i32 %xor1769, %681
  %arraydecay1774 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1775 = bitcast %union.char64long16* %arraydecay1774 to [16 x i32]*
  %arrayidx1776 = getelementptr inbounds [16 x i32], [16 x i32]* %l1775, i64 0, i64 15
  %682 = load i32, i32* %arrayidx1776, align 4
  %xor1777 = xor i32 %xor1773, %682
  %shr1778 = lshr i32 %xor1777, 31
  %or1779 = or i32 %shl1762, %shr1778
  %arraydecay1780 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1781 = bitcast %union.char64long16* %arraydecay1780 to [16 x i32]*
  %arrayidx1782 = getelementptr inbounds [16 x i32], [16 x i32]* %l1781, i64 0, i64 15
  store i32 %or1779, i32* %arrayidx1782, align 4
  %add1783 = add i32 %or1746, %or1779
  %add1784 = add i32 %add1783, -1894007588
  %683 = load i32, i32* %d, align 4
  %shl1785 = shl i32 %683, 5
  %684 = load i32, i32* %d, align 4
  %shr1786 = lshr i32 %684, 27
  %or1787 = or i32 %shl1785, %shr1786
  %add1788 = add i32 %add1784, %or1787
  %685 = load i32, i32* %c, align 4
  %add1789 = add i32 %685, %add1788
  store i32 %add1789, i32* %c, align 4
  %686 = load i32, i32* %e, align 4
  %shl1790 = shl i32 %686, 30
  %687 = load i32, i32* %e, align 4
  %shr1791 = lshr i32 %687, 2
  %or1792 = or i32 %shl1790, %shr1791
  store i32 %or1792, i32* %e, align 4
  %688 = load i32, i32* %d, align 4
  %689 = load i32, i32* %e, align 4
  %or1793 = or i32 %688, %689
  %690 = load i32, i32* %a, align 4
  %and1794 = and i32 %or1793, %690
  %691 = load i32, i32* %d, align 4
  %692 = load i32, i32* %e, align 4
  %and1795 = and i32 %691, %692
  %or1796 = or i32 %and1794, %and1795
  %arraydecay1797 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1798 = bitcast %union.char64long16* %arraydecay1797 to [16 x i32]*
  %arrayidx1799 = getelementptr inbounds [16 x i32], [16 x i32]* %l1798, i64 0, i64 13
  %693 = load i32, i32* %arrayidx1799, align 4
  %arraydecay1800 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1801 = bitcast %union.char64long16* %arraydecay1800 to [16 x i32]*
  %arrayidx1802 = getelementptr inbounds [16 x i32], [16 x i32]* %l1801, i64 0, i64 8
  %694 = load i32, i32* %arrayidx1802, align 16
  %xor1803 = xor i32 %693, %694
  %arraydecay1804 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1805 = bitcast %union.char64long16* %arraydecay1804 to [16 x i32]*
  %arrayidx1806 = getelementptr inbounds [16 x i32], [16 x i32]* %l1805, i64 0, i64 2
  %695 = load i32, i32* %arrayidx1806, align 8
  %xor1807 = xor i32 %xor1803, %695
  %arraydecay1808 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1809 = bitcast %union.char64long16* %arraydecay1808 to [16 x i32]*
  %arrayidx1810 = getelementptr inbounds [16 x i32], [16 x i32]* %l1809, i64 0, i64 0
  %696 = load i32, i32* %arrayidx1810, align 16
  %xor1811 = xor i32 %xor1807, %696
  %shl1812 = shl i32 %xor1811, 1
  %arraydecay1813 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1814 = bitcast %union.char64long16* %arraydecay1813 to [16 x i32]*
  %arrayidx1815 = getelementptr inbounds [16 x i32], [16 x i32]* %l1814, i64 0, i64 13
  %697 = load i32, i32* %arrayidx1815, align 4
  %arraydecay1816 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1817 = bitcast %union.char64long16* %arraydecay1816 to [16 x i32]*
  %arrayidx1818 = getelementptr inbounds [16 x i32], [16 x i32]* %l1817, i64 0, i64 8
  %698 = load i32, i32* %arrayidx1818, align 16
  %xor1819 = xor i32 %697, %698
  %arraydecay1820 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1821 = bitcast %union.char64long16* %arraydecay1820 to [16 x i32]*
  %arrayidx1822 = getelementptr inbounds [16 x i32], [16 x i32]* %l1821, i64 0, i64 2
  %699 = load i32, i32* %arrayidx1822, align 8
  %xor1823 = xor i32 %xor1819, %699
  %arraydecay1824 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1825 = bitcast %union.char64long16* %arraydecay1824 to [16 x i32]*
  %arrayidx1826 = getelementptr inbounds [16 x i32], [16 x i32]* %l1825, i64 0, i64 0
  %700 = load i32, i32* %arrayidx1826, align 16
  %xor1827 = xor i32 %xor1823, %700
  %shr1828 = lshr i32 %xor1827, 31
  %or1829 = or i32 %shl1812, %shr1828
  %arraydecay1830 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1831 = bitcast %union.char64long16* %arraydecay1830 to [16 x i32]*
  %arrayidx1832 = getelementptr inbounds [16 x i32], [16 x i32]* %l1831, i64 0, i64 0
  store i32 %or1829, i32* %arrayidx1832, align 16
  %add1833 = add i32 %or1796, %or1829
  %add1834 = add i32 %add1833, -1894007588
  %701 = load i32, i32* %c, align 4
  %shl1835 = shl i32 %701, 5
  %702 = load i32, i32* %c, align 4
  %shr1836 = lshr i32 %702, 27
  %or1837 = or i32 %shl1835, %shr1836
  %add1838 = add i32 %add1834, %or1837
  %703 = load i32, i32* %b, align 4
  %add1839 = add i32 %703, %add1838
  store i32 %add1839, i32* %b, align 4
  %704 = load i32, i32* %d, align 4
  %shl1840 = shl i32 %704, 30
  %705 = load i32, i32* %d, align 4
  %shr1841 = lshr i32 %705, 2
  %or1842 = or i32 %shl1840, %shr1841
  store i32 %or1842, i32* %d, align 4
  %706 = load i32, i32* %c, align 4
  %707 = load i32, i32* %d, align 4
  %or1843 = or i32 %706, %707
  %708 = load i32, i32* %e, align 4
  %and1844 = and i32 %or1843, %708
  %709 = load i32, i32* %c, align 4
  %710 = load i32, i32* %d, align 4
  %and1845 = and i32 %709, %710
  %or1846 = or i32 %and1844, %and1845
  %arraydecay1847 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1848 = bitcast %union.char64long16* %arraydecay1847 to [16 x i32]*
  %arrayidx1849 = getelementptr inbounds [16 x i32], [16 x i32]* %l1848, i64 0, i64 14
  %711 = load i32, i32* %arrayidx1849, align 8
  %arraydecay1850 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1851 = bitcast %union.char64long16* %arraydecay1850 to [16 x i32]*
  %arrayidx1852 = getelementptr inbounds [16 x i32], [16 x i32]* %l1851, i64 0, i64 9
  %712 = load i32, i32* %arrayidx1852, align 4
  %xor1853 = xor i32 %711, %712
  %arraydecay1854 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1855 = bitcast %union.char64long16* %arraydecay1854 to [16 x i32]*
  %arrayidx1856 = getelementptr inbounds [16 x i32], [16 x i32]* %l1855, i64 0, i64 3
  %713 = load i32, i32* %arrayidx1856, align 4
  %xor1857 = xor i32 %xor1853, %713
  %arraydecay1858 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1859 = bitcast %union.char64long16* %arraydecay1858 to [16 x i32]*
  %arrayidx1860 = getelementptr inbounds [16 x i32], [16 x i32]* %l1859, i64 0, i64 1
  %714 = load i32, i32* %arrayidx1860, align 4
  %xor1861 = xor i32 %xor1857, %714
  %shl1862 = shl i32 %xor1861, 1
  %arraydecay1863 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1864 = bitcast %union.char64long16* %arraydecay1863 to [16 x i32]*
  %arrayidx1865 = getelementptr inbounds [16 x i32], [16 x i32]* %l1864, i64 0, i64 14
  %715 = load i32, i32* %arrayidx1865, align 8
  %arraydecay1866 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1867 = bitcast %union.char64long16* %arraydecay1866 to [16 x i32]*
  %arrayidx1868 = getelementptr inbounds [16 x i32], [16 x i32]* %l1867, i64 0, i64 9
  %716 = load i32, i32* %arrayidx1868, align 4
  %xor1869 = xor i32 %715, %716
  %arraydecay1870 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1871 = bitcast %union.char64long16* %arraydecay1870 to [16 x i32]*
  %arrayidx1872 = getelementptr inbounds [16 x i32], [16 x i32]* %l1871, i64 0, i64 3
  %717 = load i32, i32* %arrayidx1872, align 4
  %xor1873 = xor i32 %xor1869, %717
  %arraydecay1874 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1875 = bitcast %union.char64long16* %arraydecay1874 to [16 x i32]*
  %arrayidx1876 = getelementptr inbounds [16 x i32], [16 x i32]* %l1875, i64 0, i64 1
  %718 = load i32, i32* %arrayidx1876, align 4
  %xor1877 = xor i32 %xor1873, %718
  %shr1878 = lshr i32 %xor1877, 31
  %or1879 = or i32 %shl1862, %shr1878
  %arraydecay1880 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1881 = bitcast %union.char64long16* %arraydecay1880 to [16 x i32]*
  %arrayidx1882 = getelementptr inbounds [16 x i32], [16 x i32]* %l1881, i64 0, i64 1
  store i32 %or1879, i32* %arrayidx1882, align 4
  %add1883 = add i32 %or1846, %or1879
  %add1884 = add i32 %add1883, -1894007588
  %719 = load i32, i32* %b, align 4
  %shl1885 = shl i32 %719, 5
  %720 = load i32, i32* %b, align 4
  %shr1886 = lshr i32 %720, 27
  %or1887 = or i32 %shl1885, %shr1886
  %add1888 = add i32 %add1884, %or1887
  %721 = load i32, i32* %a, align 4
  %add1889 = add i32 %721, %add1888
  store i32 %add1889, i32* %a, align 4
  %722 = load i32, i32* %c, align 4
  %shl1890 = shl i32 %722, 30
  %723 = load i32, i32* %c, align 4
  %shr1891 = lshr i32 %723, 2
  %or1892 = or i32 %shl1890, %shr1891
  store i32 %or1892, i32* %c, align 4
  %724 = load i32, i32* %b, align 4
  %725 = load i32, i32* %c, align 4
  %or1893 = or i32 %724, %725
  %726 = load i32, i32* %d, align 4
  %and1894 = and i32 %or1893, %726
  %727 = load i32, i32* %b, align 4
  %728 = load i32, i32* %c, align 4
  %and1895 = and i32 %727, %728
  %or1896 = or i32 %and1894, %and1895
  %arraydecay1897 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1898 = bitcast %union.char64long16* %arraydecay1897 to [16 x i32]*
  %arrayidx1899 = getelementptr inbounds [16 x i32], [16 x i32]* %l1898, i64 0, i64 15
  %729 = load i32, i32* %arrayidx1899, align 4
  %arraydecay1900 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1901 = bitcast %union.char64long16* %arraydecay1900 to [16 x i32]*
  %arrayidx1902 = getelementptr inbounds [16 x i32], [16 x i32]* %l1901, i64 0, i64 10
  %730 = load i32, i32* %arrayidx1902, align 8
  %xor1903 = xor i32 %729, %730
  %arraydecay1904 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1905 = bitcast %union.char64long16* %arraydecay1904 to [16 x i32]*
  %arrayidx1906 = getelementptr inbounds [16 x i32], [16 x i32]* %l1905, i64 0, i64 4
  %731 = load i32, i32* %arrayidx1906, align 16
  %xor1907 = xor i32 %xor1903, %731
  %arraydecay1908 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1909 = bitcast %union.char64long16* %arraydecay1908 to [16 x i32]*
  %arrayidx1910 = getelementptr inbounds [16 x i32], [16 x i32]* %l1909, i64 0, i64 2
  %732 = load i32, i32* %arrayidx1910, align 8
  %xor1911 = xor i32 %xor1907, %732
  %shl1912 = shl i32 %xor1911, 1
  %arraydecay1913 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1914 = bitcast %union.char64long16* %arraydecay1913 to [16 x i32]*
  %arrayidx1915 = getelementptr inbounds [16 x i32], [16 x i32]* %l1914, i64 0, i64 15
  %733 = load i32, i32* %arrayidx1915, align 4
  %arraydecay1916 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1917 = bitcast %union.char64long16* %arraydecay1916 to [16 x i32]*
  %arrayidx1918 = getelementptr inbounds [16 x i32], [16 x i32]* %l1917, i64 0, i64 10
  %734 = load i32, i32* %arrayidx1918, align 8
  %xor1919 = xor i32 %733, %734
  %arraydecay1920 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1921 = bitcast %union.char64long16* %arraydecay1920 to [16 x i32]*
  %arrayidx1922 = getelementptr inbounds [16 x i32], [16 x i32]* %l1921, i64 0, i64 4
  %735 = load i32, i32* %arrayidx1922, align 16
  %xor1923 = xor i32 %xor1919, %735
  %arraydecay1924 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1925 = bitcast %union.char64long16* %arraydecay1924 to [16 x i32]*
  %arrayidx1926 = getelementptr inbounds [16 x i32], [16 x i32]* %l1925, i64 0, i64 2
  %736 = load i32, i32* %arrayidx1926, align 8
  %xor1927 = xor i32 %xor1923, %736
  %shr1928 = lshr i32 %xor1927, 31
  %or1929 = or i32 %shl1912, %shr1928
  %arraydecay1930 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1931 = bitcast %union.char64long16* %arraydecay1930 to [16 x i32]*
  %arrayidx1932 = getelementptr inbounds [16 x i32], [16 x i32]* %l1931, i64 0, i64 2
  store i32 %or1929, i32* %arrayidx1932, align 8
  %add1933 = add i32 %or1896, %or1929
  %add1934 = add i32 %add1933, -1894007588
  %737 = load i32, i32* %a, align 4
  %shl1935 = shl i32 %737, 5
  %738 = load i32, i32* %a, align 4
  %shr1936 = lshr i32 %738, 27
  %or1937 = or i32 %shl1935, %shr1936
  %add1938 = add i32 %add1934, %or1937
  %739 = load i32, i32* %e, align 4
  %add1939 = add i32 %739, %add1938
  store i32 %add1939, i32* %e, align 4
  %740 = load i32, i32* %b, align 4
  %shl1940 = shl i32 %740, 30
  %741 = load i32, i32* %b, align 4
  %shr1941 = lshr i32 %741, 2
  %or1942 = or i32 %shl1940, %shr1941
  store i32 %or1942, i32* %b, align 4
  %742 = load i32, i32* %a, align 4
  %743 = load i32, i32* %b, align 4
  %or1943 = or i32 %742, %743
  %744 = load i32, i32* %c, align 4
  %and1944 = and i32 %or1943, %744
  %745 = load i32, i32* %a, align 4
  %746 = load i32, i32* %b, align 4
  %and1945 = and i32 %745, %746
  %or1946 = or i32 %and1944, %and1945
  %arraydecay1947 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1948 = bitcast %union.char64long16* %arraydecay1947 to [16 x i32]*
  %arrayidx1949 = getelementptr inbounds [16 x i32], [16 x i32]* %l1948, i64 0, i64 0
  %747 = load i32, i32* %arrayidx1949, align 16
  %arraydecay1950 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1951 = bitcast %union.char64long16* %arraydecay1950 to [16 x i32]*
  %arrayidx1952 = getelementptr inbounds [16 x i32], [16 x i32]* %l1951, i64 0, i64 11
  %748 = load i32, i32* %arrayidx1952, align 4
  %xor1953 = xor i32 %747, %748
  %arraydecay1954 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1955 = bitcast %union.char64long16* %arraydecay1954 to [16 x i32]*
  %arrayidx1956 = getelementptr inbounds [16 x i32], [16 x i32]* %l1955, i64 0, i64 5
  %749 = load i32, i32* %arrayidx1956, align 4
  %xor1957 = xor i32 %xor1953, %749
  %arraydecay1958 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1959 = bitcast %union.char64long16* %arraydecay1958 to [16 x i32]*
  %arrayidx1960 = getelementptr inbounds [16 x i32], [16 x i32]* %l1959, i64 0, i64 3
  %750 = load i32, i32* %arrayidx1960, align 4
  %xor1961 = xor i32 %xor1957, %750
  %shl1962 = shl i32 %xor1961, 1
  %arraydecay1963 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1964 = bitcast %union.char64long16* %arraydecay1963 to [16 x i32]*
  %arrayidx1965 = getelementptr inbounds [16 x i32], [16 x i32]* %l1964, i64 0, i64 0
  %751 = load i32, i32* %arrayidx1965, align 16
  %arraydecay1966 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1967 = bitcast %union.char64long16* %arraydecay1966 to [16 x i32]*
  %arrayidx1968 = getelementptr inbounds [16 x i32], [16 x i32]* %l1967, i64 0, i64 11
  %752 = load i32, i32* %arrayidx1968, align 4
  %xor1969 = xor i32 %751, %752
  %arraydecay1970 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1971 = bitcast %union.char64long16* %arraydecay1970 to [16 x i32]*
  %arrayidx1972 = getelementptr inbounds [16 x i32], [16 x i32]* %l1971, i64 0, i64 5
  %753 = load i32, i32* %arrayidx1972, align 4
  %xor1973 = xor i32 %xor1969, %753
  %arraydecay1974 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1975 = bitcast %union.char64long16* %arraydecay1974 to [16 x i32]*
  %arrayidx1976 = getelementptr inbounds [16 x i32], [16 x i32]* %l1975, i64 0, i64 3
  %754 = load i32, i32* %arrayidx1976, align 4
  %xor1977 = xor i32 %xor1973, %754
  %shr1978 = lshr i32 %xor1977, 31
  %or1979 = or i32 %shl1962, %shr1978
  %arraydecay1980 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1981 = bitcast %union.char64long16* %arraydecay1980 to [16 x i32]*
  %arrayidx1982 = getelementptr inbounds [16 x i32], [16 x i32]* %l1981, i64 0, i64 3
  store i32 %or1979, i32* %arrayidx1982, align 4
  %add1983 = add i32 %or1946, %or1979
  %add1984 = add i32 %add1983, -1894007588
  %755 = load i32, i32* %e, align 4
  %shl1985 = shl i32 %755, 5
  %756 = load i32, i32* %e, align 4
  %shr1986 = lshr i32 %756, 27
  %or1987 = or i32 %shl1985, %shr1986
  %add1988 = add i32 %add1984, %or1987
  %757 = load i32, i32* %d, align 4
  %add1989 = add i32 %757, %add1988
  store i32 %add1989, i32* %d, align 4
  %758 = load i32, i32* %a, align 4
  %shl1990 = shl i32 %758, 30
  %759 = load i32, i32* %a, align 4
  %shr1991 = lshr i32 %759, 2
  %or1992 = or i32 %shl1990, %shr1991
  store i32 %or1992, i32* %a, align 4
  %760 = load i32, i32* %e, align 4
  %761 = load i32, i32* %a, align 4
  %or1993 = or i32 %760, %761
  %762 = load i32, i32* %b, align 4
  %and1994 = and i32 %or1993, %762
  %763 = load i32, i32* %e, align 4
  %764 = load i32, i32* %a, align 4
  %and1995 = and i32 %763, %764
  %or1996 = or i32 %and1994, %and1995
  %arraydecay1997 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l1998 = bitcast %union.char64long16* %arraydecay1997 to [16 x i32]*
  %arrayidx1999 = getelementptr inbounds [16 x i32], [16 x i32]* %l1998, i64 0, i64 1
  %765 = load i32, i32* %arrayidx1999, align 4
  %arraydecay2000 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2001 = bitcast %union.char64long16* %arraydecay2000 to [16 x i32]*
  %arrayidx2002 = getelementptr inbounds [16 x i32], [16 x i32]* %l2001, i64 0, i64 12
  %766 = load i32, i32* %arrayidx2002, align 16
  %xor2003 = xor i32 %765, %766
  %arraydecay2004 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2005 = bitcast %union.char64long16* %arraydecay2004 to [16 x i32]*
  %arrayidx2006 = getelementptr inbounds [16 x i32], [16 x i32]* %l2005, i64 0, i64 6
  %767 = load i32, i32* %arrayidx2006, align 8
  %xor2007 = xor i32 %xor2003, %767
  %arraydecay2008 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2009 = bitcast %union.char64long16* %arraydecay2008 to [16 x i32]*
  %arrayidx2010 = getelementptr inbounds [16 x i32], [16 x i32]* %l2009, i64 0, i64 4
  %768 = load i32, i32* %arrayidx2010, align 16
  %xor2011 = xor i32 %xor2007, %768
  %shl2012 = shl i32 %xor2011, 1
  %arraydecay2013 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2014 = bitcast %union.char64long16* %arraydecay2013 to [16 x i32]*
  %arrayidx2015 = getelementptr inbounds [16 x i32], [16 x i32]* %l2014, i64 0, i64 1
  %769 = load i32, i32* %arrayidx2015, align 4
  %arraydecay2016 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2017 = bitcast %union.char64long16* %arraydecay2016 to [16 x i32]*
  %arrayidx2018 = getelementptr inbounds [16 x i32], [16 x i32]* %l2017, i64 0, i64 12
  %770 = load i32, i32* %arrayidx2018, align 16
  %xor2019 = xor i32 %769, %770
  %arraydecay2020 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2021 = bitcast %union.char64long16* %arraydecay2020 to [16 x i32]*
  %arrayidx2022 = getelementptr inbounds [16 x i32], [16 x i32]* %l2021, i64 0, i64 6
  %771 = load i32, i32* %arrayidx2022, align 8
  %xor2023 = xor i32 %xor2019, %771
  %arraydecay2024 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2025 = bitcast %union.char64long16* %arraydecay2024 to [16 x i32]*
  %arrayidx2026 = getelementptr inbounds [16 x i32], [16 x i32]* %l2025, i64 0, i64 4
  %772 = load i32, i32* %arrayidx2026, align 16
  %xor2027 = xor i32 %xor2023, %772
  %shr2028 = lshr i32 %xor2027, 31
  %or2029 = or i32 %shl2012, %shr2028
  %arraydecay2030 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2031 = bitcast %union.char64long16* %arraydecay2030 to [16 x i32]*
  %arrayidx2032 = getelementptr inbounds [16 x i32], [16 x i32]* %l2031, i64 0, i64 4
  store i32 %or2029, i32* %arrayidx2032, align 16
  %add2033 = add i32 %or1996, %or2029
  %add2034 = add i32 %add2033, -1894007588
  %773 = load i32, i32* %d, align 4
  %shl2035 = shl i32 %773, 5
  %774 = load i32, i32* %d, align 4
  %shr2036 = lshr i32 %774, 27
  %or2037 = or i32 %shl2035, %shr2036
  %add2038 = add i32 %add2034, %or2037
  %775 = load i32, i32* %c, align 4
  %add2039 = add i32 %775, %add2038
  store i32 %add2039, i32* %c, align 4
  %776 = load i32, i32* %e, align 4
  %shl2040 = shl i32 %776, 30
  %777 = load i32, i32* %e, align 4
  %shr2041 = lshr i32 %777, 2
  %or2042 = or i32 %shl2040, %shr2041
  store i32 %or2042, i32* %e, align 4
  %778 = load i32, i32* %d, align 4
  %779 = load i32, i32* %e, align 4
  %or2043 = or i32 %778, %779
  %780 = load i32, i32* %a, align 4
  %and2044 = and i32 %or2043, %780
  %781 = load i32, i32* %d, align 4
  %782 = load i32, i32* %e, align 4
  %and2045 = and i32 %781, %782
  %or2046 = or i32 %and2044, %and2045
  %arraydecay2047 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2048 = bitcast %union.char64long16* %arraydecay2047 to [16 x i32]*
  %arrayidx2049 = getelementptr inbounds [16 x i32], [16 x i32]* %l2048, i64 0, i64 2
  %783 = load i32, i32* %arrayidx2049, align 8
  %arraydecay2050 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2051 = bitcast %union.char64long16* %arraydecay2050 to [16 x i32]*
  %arrayidx2052 = getelementptr inbounds [16 x i32], [16 x i32]* %l2051, i64 0, i64 13
  %784 = load i32, i32* %arrayidx2052, align 4
  %xor2053 = xor i32 %783, %784
  %arraydecay2054 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2055 = bitcast %union.char64long16* %arraydecay2054 to [16 x i32]*
  %arrayidx2056 = getelementptr inbounds [16 x i32], [16 x i32]* %l2055, i64 0, i64 7
  %785 = load i32, i32* %arrayidx2056, align 4
  %xor2057 = xor i32 %xor2053, %785
  %arraydecay2058 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2059 = bitcast %union.char64long16* %arraydecay2058 to [16 x i32]*
  %arrayidx2060 = getelementptr inbounds [16 x i32], [16 x i32]* %l2059, i64 0, i64 5
  %786 = load i32, i32* %arrayidx2060, align 4
  %xor2061 = xor i32 %xor2057, %786
  %shl2062 = shl i32 %xor2061, 1
  %arraydecay2063 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2064 = bitcast %union.char64long16* %arraydecay2063 to [16 x i32]*
  %arrayidx2065 = getelementptr inbounds [16 x i32], [16 x i32]* %l2064, i64 0, i64 2
  %787 = load i32, i32* %arrayidx2065, align 8
  %arraydecay2066 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2067 = bitcast %union.char64long16* %arraydecay2066 to [16 x i32]*
  %arrayidx2068 = getelementptr inbounds [16 x i32], [16 x i32]* %l2067, i64 0, i64 13
  %788 = load i32, i32* %arrayidx2068, align 4
  %xor2069 = xor i32 %787, %788
  %arraydecay2070 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2071 = bitcast %union.char64long16* %arraydecay2070 to [16 x i32]*
  %arrayidx2072 = getelementptr inbounds [16 x i32], [16 x i32]* %l2071, i64 0, i64 7
  %789 = load i32, i32* %arrayidx2072, align 4
  %xor2073 = xor i32 %xor2069, %789
  %arraydecay2074 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2075 = bitcast %union.char64long16* %arraydecay2074 to [16 x i32]*
  %arrayidx2076 = getelementptr inbounds [16 x i32], [16 x i32]* %l2075, i64 0, i64 5
  %790 = load i32, i32* %arrayidx2076, align 4
  %xor2077 = xor i32 %xor2073, %790
  %shr2078 = lshr i32 %xor2077, 31
  %or2079 = or i32 %shl2062, %shr2078
  %arraydecay2080 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2081 = bitcast %union.char64long16* %arraydecay2080 to [16 x i32]*
  %arrayidx2082 = getelementptr inbounds [16 x i32], [16 x i32]* %l2081, i64 0, i64 5
  store i32 %or2079, i32* %arrayidx2082, align 4
  %add2083 = add i32 %or2046, %or2079
  %add2084 = add i32 %add2083, -1894007588
  %791 = load i32, i32* %c, align 4
  %shl2085 = shl i32 %791, 5
  %792 = load i32, i32* %c, align 4
  %shr2086 = lshr i32 %792, 27
  %or2087 = or i32 %shl2085, %shr2086
  %add2088 = add i32 %add2084, %or2087
  %793 = load i32, i32* %b, align 4
  %add2089 = add i32 %793, %add2088
  store i32 %add2089, i32* %b, align 4
  %794 = load i32, i32* %d, align 4
  %shl2090 = shl i32 %794, 30
  %795 = load i32, i32* %d, align 4
  %shr2091 = lshr i32 %795, 2
  %or2092 = or i32 %shl2090, %shr2091
  store i32 %or2092, i32* %d, align 4
  %796 = load i32, i32* %c, align 4
  %797 = load i32, i32* %d, align 4
  %or2093 = or i32 %796, %797
  %798 = load i32, i32* %e, align 4
  %and2094 = and i32 %or2093, %798
  %799 = load i32, i32* %c, align 4
  %800 = load i32, i32* %d, align 4
  %and2095 = and i32 %799, %800
  %or2096 = or i32 %and2094, %and2095
  %arraydecay2097 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2098 = bitcast %union.char64long16* %arraydecay2097 to [16 x i32]*
  %arrayidx2099 = getelementptr inbounds [16 x i32], [16 x i32]* %l2098, i64 0, i64 3
  %801 = load i32, i32* %arrayidx2099, align 4
  %arraydecay2100 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2101 = bitcast %union.char64long16* %arraydecay2100 to [16 x i32]*
  %arrayidx2102 = getelementptr inbounds [16 x i32], [16 x i32]* %l2101, i64 0, i64 14
  %802 = load i32, i32* %arrayidx2102, align 8
  %xor2103 = xor i32 %801, %802
  %arraydecay2104 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2105 = bitcast %union.char64long16* %arraydecay2104 to [16 x i32]*
  %arrayidx2106 = getelementptr inbounds [16 x i32], [16 x i32]* %l2105, i64 0, i64 8
  %803 = load i32, i32* %arrayidx2106, align 16
  %xor2107 = xor i32 %xor2103, %803
  %arraydecay2108 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2109 = bitcast %union.char64long16* %arraydecay2108 to [16 x i32]*
  %arrayidx2110 = getelementptr inbounds [16 x i32], [16 x i32]* %l2109, i64 0, i64 6
  %804 = load i32, i32* %arrayidx2110, align 8
  %xor2111 = xor i32 %xor2107, %804
  %shl2112 = shl i32 %xor2111, 1
  %arraydecay2113 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2114 = bitcast %union.char64long16* %arraydecay2113 to [16 x i32]*
  %arrayidx2115 = getelementptr inbounds [16 x i32], [16 x i32]* %l2114, i64 0, i64 3
  %805 = load i32, i32* %arrayidx2115, align 4
  %arraydecay2116 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2117 = bitcast %union.char64long16* %arraydecay2116 to [16 x i32]*
  %arrayidx2118 = getelementptr inbounds [16 x i32], [16 x i32]* %l2117, i64 0, i64 14
  %806 = load i32, i32* %arrayidx2118, align 8
  %xor2119 = xor i32 %805, %806
  %arraydecay2120 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2121 = bitcast %union.char64long16* %arraydecay2120 to [16 x i32]*
  %arrayidx2122 = getelementptr inbounds [16 x i32], [16 x i32]* %l2121, i64 0, i64 8
  %807 = load i32, i32* %arrayidx2122, align 16
  %xor2123 = xor i32 %xor2119, %807
  %arraydecay2124 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2125 = bitcast %union.char64long16* %arraydecay2124 to [16 x i32]*
  %arrayidx2126 = getelementptr inbounds [16 x i32], [16 x i32]* %l2125, i64 0, i64 6
  %808 = load i32, i32* %arrayidx2126, align 8
  %xor2127 = xor i32 %xor2123, %808
  %shr2128 = lshr i32 %xor2127, 31
  %or2129 = or i32 %shl2112, %shr2128
  %arraydecay2130 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2131 = bitcast %union.char64long16* %arraydecay2130 to [16 x i32]*
  %arrayidx2132 = getelementptr inbounds [16 x i32], [16 x i32]* %l2131, i64 0, i64 6
  store i32 %or2129, i32* %arrayidx2132, align 8
  %add2133 = add i32 %or2096, %or2129
  %add2134 = add i32 %add2133, -1894007588
  %809 = load i32, i32* %b, align 4
  %shl2135 = shl i32 %809, 5
  %810 = load i32, i32* %b, align 4
  %shr2136 = lshr i32 %810, 27
  %or2137 = or i32 %shl2135, %shr2136
  %add2138 = add i32 %add2134, %or2137
  %811 = load i32, i32* %a, align 4
  %add2139 = add i32 %811, %add2138
  store i32 %add2139, i32* %a, align 4
  %812 = load i32, i32* %c, align 4
  %shl2140 = shl i32 %812, 30
  %813 = load i32, i32* %c, align 4
  %shr2141 = lshr i32 %813, 2
  %or2142 = or i32 %shl2140, %shr2141
  store i32 %or2142, i32* %c, align 4
  %814 = load i32, i32* %b, align 4
  %815 = load i32, i32* %c, align 4
  %or2143 = or i32 %814, %815
  %816 = load i32, i32* %d, align 4
  %and2144 = and i32 %or2143, %816
  %817 = load i32, i32* %b, align 4
  %818 = load i32, i32* %c, align 4
  %and2145 = and i32 %817, %818
  %or2146 = or i32 %and2144, %and2145
  %arraydecay2147 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2148 = bitcast %union.char64long16* %arraydecay2147 to [16 x i32]*
  %arrayidx2149 = getelementptr inbounds [16 x i32], [16 x i32]* %l2148, i64 0, i64 4
  %819 = load i32, i32* %arrayidx2149, align 16
  %arraydecay2150 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2151 = bitcast %union.char64long16* %arraydecay2150 to [16 x i32]*
  %arrayidx2152 = getelementptr inbounds [16 x i32], [16 x i32]* %l2151, i64 0, i64 15
  %820 = load i32, i32* %arrayidx2152, align 4
  %xor2153 = xor i32 %819, %820
  %arraydecay2154 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2155 = bitcast %union.char64long16* %arraydecay2154 to [16 x i32]*
  %arrayidx2156 = getelementptr inbounds [16 x i32], [16 x i32]* %l2155, i64 0, i64 9
  %821 = load i32, i32* %arrayidx2156, align 4
  %xor2157 = xor i32 %xor2153, %821
  %arraydecay2158 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2159 = bitcast %union.char64long16* %arraydecay2158 to [16 x i32]*
  %arrayidx2160 = getelementptr inbounds [16 x i32], [16 x i32]* %l2159, i64 0, i64 7
  %822 = load i32, i32* %arrayidx2160, align 4
  %xor2161 = xor i32 %xor2157, %822
  %shl2162 = shl i32 %xor2161, 1
  %arraydecay2163 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2164 = bitcast %union.char64long16* %arraydecay2163 to [16 x i32]*
  %arrayidx2165 = getelementptr inbounds [16 x i32], [16 x i32]* %l2164, i64 0, i64 4
  %823 = load i32, i32* %arrayidx2165, align 16
  %arraydecay2166 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2167 = bitcast %union.char64long16* %arraydecay2166 to [16 x i32]*
  %arrayidx2168 = getelementptr inbounds [16 x i32], [16 x i32]* %l2167, i64 0, i64 15
  %824 = load i32, i32* %arrayidx2168, align 4
  %xor2169 = xor i32 %823, %824
  %arraydecay2170 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2171 = bitcast %union.char64long16* %arraydecay2170 to [16 x i32]*
  %arrayidx2172 = getelementptr inbounds [16 x i32], [16 x i32]* %l2171, i64 0, i64 9
  %825 = load i32, i32* %arrayidx2172, align 4
  %xor2173 = xor i32 %xor2169, %825
  %arraydecay2174 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2175 = bitcast %union.char64long16* %arraydecay2174 to [16 x i32]*
  %arrayidx2176 = getelementptr inbounds [16 x i32], [16 x i32]* %l2175, i64 0, i64 7
  %826 = load i32, i32* %arrayidx2176, align 4
  %xor2177 = xor i32 %xor2173, %826
  %shr2178 = lshr i32 %xor2177, 31
  %or2179 = or i32 %shl2162, %shr2178
  %arraydecay2180 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2181 = bitcast %union.char64long16* %arraydecay2180 to [16 x i32]*
  %arrayidx2182 = getelementptr inbounds [16 x i32], [16 x i32]* %l2181, i64 0, i64 7
  store i32 %or2179, i32* %arrayidx2182, align 4
  %add2183 = add i32 %or2146, %or2179
  %add2184 = add i32 %add2183, -1894007588
  %827 = load i32, i32* %a, align 4
  %shl2185 = shl i32 %827, 5
  %828 = load i32, i32* %a, align 4
  %shr2186 = lshr i32 %828, 27
  %or2187 = or i32 %shl2185, %shr2186
  %add2188 = add i32 %add2184, %or2187
  %829 = load i32, i32* %e, align 4
  %add2189 = add i32 %829, %add2188
  store i32 %add2189, i32* %e, align 4
  %830 = load i32, i32* %b, align 4
  %shl2190 = shl i32 %830, 30
  %831 = load i32, i32* %b, align 4
  %shr2191 = lshr i32 %831, 2
  %or2192 = or i32 %shl2190, %shr2191
  store i32 %or2192, i32* %b, align 4
  %832 = load i32, i32* %a, align 4
  %833 = load i32, i32* %b, align 4
  %or2193 = or i32 %832, %833
  %834 = load i32, i32* %c, align 4
  %and2194 = and i32 %or2193, %834
  %835 = load i32, i32* %a, align 4
  %836 = load i32, i32* %b, align 4
  %and2195 = and i32 %835, %836
  %or2196 = or i32 %and2194, %and2195
  %arraydecay2197 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2198 = bitcast %union.char64long16* %arraydecay2197 to [16 x i32]*
  %arrayidx2199 = getelementptr inbounds [16 x i32], [16 x i32]* %l2198, i64 0, i64 5
  %837 = load i32, i32* %arrayidx2199, align 4
  %arraydecay2200 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2201 = bitcast %union.char64long16* %arraydecay2200 to [16 x i32]*
  %arrayidx2202 = getelementptr inbounds [16 x i32], [16 x i32]* %l2201, i64 0, i64 0
  %838 = load i32, i32* %arrayidx2202, align 16
  %xor2203 = xor i32 %837, %838
  %arraydecay2204 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2205 = bitcast %union.char64long16* %arraydecay2204 to [16 x i32]*
  %arrayidx2206 = getelementptr inbounds [16 x i32], [16 x i32]* %l2205, i64 0, i64 10
  %839 = load i32, i32* %arrayidx2206, align 8
  %xor2207 = xor i32 %xor2203, %839
  %arraydecay2208 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2209 = bitcast %union.char64long16* %arraydecay2208 to [16 x i32]*
  %arrayidx2210 = getelementptr inbounds [16 x i32], [16 x i32]* %l2209, i64 0, i64 8
  %840 = load i32, i32* %arrayidx2210, align 16
  %xor2211 = xor i32 %xor2207, %840
  %shl2212 = shl i32 %xor2211, 1
  %arraydecay2213 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2214 = bitcast %union.char64long16* %arraydecay2213 to [16 x i32]*
  %arrayidx2215 = getelementptr inbounds [16 x i32], [16 x i32]* %l2214, i64 0, i64 5
  %841 = load i32, i32* %arrayidx2215, align 4
  %arraydecay2216 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2217 = bitcast %union.char64long16* %arraydecay2216 to [16 x i32]*
  %arrayidx2218 = getelementptr inbounds [16 x i32], [16 x i32]* %l2217, i64 0, i64 0
  %842 = load i32, i32* %arrayidx2218, align 16
  %xor2219 = xor i32 %841, %842
  %arraydecay2220 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2221 = bitcast %union.char64long16* %arraydecay2220 to [16 x i32]*
  %arrayidx2222 = getelementptr inbounds [16 x i32], [16 x i32]* %l2221, i64 0, i64 10
  %843 = load i32, i32* %arrayidx2222, align 8
  %xor2223 = xor i32 %xor2219, %843
  %arraydecay2224 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2225 = bitcast %union.char64long16* %arraydecay2224 to [16 x i32]*
  %arrayidx2226 = getelementptr inbounds [16 x i32], [16 x i32]* %l2225, i64 0, i64 8
  %844 = load i32, i32* %arrayidx2226, align 16
  %xor2227 = xor i32 %xor2223, %844
  %shr2228 = lshr i32 %xor2227, 31
  %or2229 = or i32 %shl2212, %shr2228
  %arraydecay2230 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2231 = bitcast %union.char64long16* %arraydecay2230 to [16 x i32]*
  %arrayidx2232 = getelementptr inbounds [16 x i32], [16 x i32]* %l2231, i64 0, i64 8
  store i32 %or2229, i32* %arrayidx2232, align 16
  %add2233 = add i32 %or2196, %or2229
  %add2234 = add i32 %add2233, -1894007588
  %845 = load i32, i32* %e, align 4
  %shl2235 = shl i32 %845, 5
  %846 = load i32, i32* %e, align 4
  %shr2236 = lshr i32 %846, 27
  %or2237 = or i32 %shl2235, %shr2236
  %add2238 = add i32 %add2234, %or2237
  %847 = load i32, i32* %d, align 4
  %add2239 = add i32 %847, %add2238
  store i32 %add2239, i32* %d, align 4
  %848 = load i32, i32* %a, align 4
  %shl2240 = shl i32 %848, 30
  %849 = load i32, i32* %a, align 4
  %shr2241 = lshr i32 %849, 2
  %or2242 = or i32 %shl2240, %shr2241
  store i32 %or2242, i32* %a, align 4
  %850 = load i32, i32* %e, align 4
  %851 = load i32, i32* %a, align 4
  %or2243 = or i32 %850, %851
  %852 = load i32, i32* %b, align 4
  %and2244 = and i32 %or2243, %852
  %853 = load i32, i32* %e, align 4
  %854 = load i32, i32* %a, align 4
  %and2245 = and i32 %853, %854
  %or2246 = or i32 %and2244, %and2245
  %arraydecay2247 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2248 = bitcast %union.char64long16* %arraydecay2247 to [16 x i32]*
  %arrayidx2249 = getelementptr inbounds [16 x i32], [16 x i32]* %l2248, i64 0, i64 6
  %855 = load i32, i32* %arrayidx2249, align 8
  %arraydecay2250 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2251 = bitcast %union.char64long16* %arraydecay2250 to [16 x i32]*
  %arrayidx2252 = getelementptr inbounds [16 x i32], [16 x i32]* %l2251, i64 0, i64 1
  %856 = load i32, i32* %arrayidx2252, align 4
  %xor2253 = xor i32 %855, %856
  %arraydecay2254 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2255 = bitcast %union.char64long16* %arraydecay2254 to [16 x i32]*
  %arrayidx2256 = getelementptr inbounds [16 x i32], [16 x i32]* %l2255, i64 0, i64 11
  %857 = load i32, i32* %arrayidx2256, align 4
  %xor2257 = xor i32 %xor2253, %857
  %arraydecay2258 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2259 = bitcast %union.char64long16* %arraydecay2258 to [16 x i32]*
  %arrayidx2260 = getelementptr inbounds [16 x i32], [16 x i32]* %l2259, i64 0, i64 9
  %858 = load i32, i32* %arrayidx2260, align 4
  %xor2261 = xor i32 %xor2257, %858
  %shl2262 = shl i32 %xor2261, 1
  %arraydecay2263 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2264 = bitcast %union.char64long16* %arraydecay2263 to [16 x i32]*
  %arrayidx2265 = getelementptr inbounds [16 x i32], [16 x i32]* %l2264, i64 0, i64 6
  %859 = load i32, i32* %arrayidx2265, align 8
  %arraydecay2266 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2267 = bitcast %union.char64long16* %arraydecay2266 to [16 x i32]*
  %arrayidx2268 = getelementptr inbounds [16 x i32], [16 x i32]* %l2267, i64 0, i64 1
  %860 = load i32, i32* %arrayidx2268, align 4
  %xor2269 = xor i32 %859, %860
  %arraydecay2270 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2271 = bitcast %union.char64long16* %arraydecay2270 to [16 x i32]*
  %arrayidx2272 = getelementptr inbounds [16 x i32], [16 x i32]* %l2271, i64 0, i64 11
  %861 = load i32, i32* %arrayidx2272, align 4
  %xor2273 = xor i32 %xor2269, %861
  %arraydecay2274 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2275 = bitcast %union.char64long16* %arraydecay2274 to [16 x i32]*
  %arrayidx2276 = getelementptr inbounds [16 x i32], [16 x i32]* %l2275, i64 0, i64 9
  %862 = load i32, i32* %arrayidx2276, align 4
  %xor2277 = xor i32 %xor2273, %862
  %shr2278 = lshr i32 %xor2277, 31
  %or2279 = or i32 %shl2262, %shr2278
  %arraydecay2280 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2281 = bitcast %union.char64long16* %arraydecay2280 to [16 x i32]*
  %arrayidx2282 = getelementptr inbounds [16 x i32], [16 x i32]* %l2281, i64 0, i64 9
  store i32 %or2279, i32* %arrayidx2282, align 4
  %add2283 = add i32 %or2246, %or2279
  %add2284 = add i32 %add2283, -1894007588
  %863 = load i32, i32* %d, align 4
  %shl2285 = shl i32 %863, 5
  %864 = load i32, i32* %d, align 4
  %shr2286 = lshr i32 %864, 27
  %or2287 = or i32 %shl2285, %shr2286
  %add2288 = add i32 %add2284, %or2287
  %865 = load i32, i32* %c, align 4
  %add2289 = add i32 %865, %add2288
  store i32 %add2289, i32* %c, align 4
  %866 = load i32, i32* %e, align 4
  %shl2290 = shl i32 %866, 30
  %867 = load i32, i32* %e, align 4
  %shr2291 = lshr i32 %867, 2
  %or2292 = or i32 %shl2290, %shr2291
  store i32 %or2292, i32* %e, align 4
  %868 = load i32, i32* %d, align 4
  %869 = load i32, i32* %e, align 4
  %or2293 = or i32 %868, %869
  %870 = load i32, i32* %a, align 4
  %and2294 = and i32 %or2293, %870
  %871 = load i32, i32* %d, align 4
  %872 = load i32, i32* %e, align 4
  %and2295 = and i32 %871, %872
  %or2296 = or i32 %and2294, %and2295
  %arraydecay2297 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2298 = bitcast %union.char64long16* %arraydecay2297 to [16 x i32]*
  %arrayidx2299 = getelementptr inbounds [16 x i32], [16 x i32]* %l2298, i64 0, i64 7
  %873 = load i32, i32* %arrayidx2299, align 4
  %arraydecay2300 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2301 = bitcast %union.char64long16* %arraydecay2300 to [16 x i32]*
  %arrayidx2302 = getelementptr inbounds [16 x i32], [16 x i32]* %l2301, i64 0, i64 2
  %874 = load i32, i32* %arrayidx2302, align 8
  %xor2303 = xor i32 %873, %874
  %arraydecay2304 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2305 = bitcast %union.char64long16* %arraydecay2304 to [16 x i32]*
  %arrayidx2306 = getelementptr inbounds [16 x i32], [16 x i32]* %l2305, i64 0, i64 12
  %875 = load i32, i32* %arrayidx2306, align 16
  %xor2307 = xor i32 %xor2303, %875
  %arraydecay2308 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2309 = bitcast %union.char64long16* %arraydecay2308 to [16 x i32]*
  %arrayidx2310 = getelementptr inbounds [16 x i32], [16 x i32]* %l2309, i64 0, i64 10
  %876 = load i32, i32* %arrayidx2310, align 8
  %xor2311 = xor i32 %xor2307, %876
  %shl2312 = shl i32 %xor2311, 1
  %arraydecay2313 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2314 = bitcast %union.char64long16* %arraydecay2313 to [16 x i32]*
  %arrayidx2315 = getelementptr inbounds [16 x i32], [16 x i32]* %l2314, i64 0, i64 7
  %877 = load i32, i32* %arrayidx2315, align 4
  %arraydecay2316 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2317 = bitcast %union.char64long16* %arraydecay2316 to [16 x i32]*
  %arrayidx2318 = getelementptr inbounds [16 x i32], [16 x i32]* %l2317, i64 0, i64 2
  %878 = load i32, i32* %arrayidx2318, align 8
  %xor2319 = xor i32 %877, %878
  %arraydecay2320 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2321 = bitcast %union.char64long16* %arraydecay2320 to [16 x i32]*
  %arrayidx2322 = getelementptr inbounds [16 x i32], [16 x i32]* %l2321, i64 0, i64 12
  %879 = load i32, i32* %arrayidx2322, align 16
  %xor2323 = xor i32 %xor2319, %879
  %arraydecay2324 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2325 = bitcast %union.char64long16* %arraydecay2324 to [16 x i32]*
  %arrayidx2326 = getelementptr inbounds [16 x i32], [16 x i32]* %l2325, i64 0, i64 10
  %880 = load i32, i32* %arrayidx2326, align 8
  %xor2327 = xor i32 %xor2323, %880
  %shr2328 = lshr i32 %xor2327, 31
  %or2329 = or i32 %shl2312, %shr2328
  %arraydecay2330 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2331 = bitcast %union.char64long16* %arraydecay2330 to [16 x i32]*
  %arrayidx2332 = getelementptr inbounds [16 x i32], [16 x i32]* %l2331, i64 0, i64 10
  store i32 %or2329, i32* %arrayidx2332, align 8
  %add2333 = add i32 %or2296, %or2329
  %add2334 = add i32 %add2333, -1894007588
  %881 = load i32, i32* %c, align 4
  %shl2335 = shl i32 %881, 5
  %882 = load i32, i32* %c, align 4
  %shr2336 = lshr i32 %882, 27
  %or2337 = or i32 %shl2335, %shr2336
  %add2338 = add i32 %add2334, %or2337
  %883 = load i32, i32* %b, align 4
  %add2339 = add i32 %883, %add2338
  store i32 %add2339, i32* %b, align 4
  %884 = load i32, i32* %d, align 4
  %shl2340 = shl i32 %884, 30
  %885 = load i32, i32* %d, align 4
  %shr2341 = lshr i32 %885, 2
  %or2342 = or i32 %shl2340, %shr2341
  store i32 %or2342, i32* %d, align 4
  %886 = load i32, i32* %c, align 4
  %887 = load i32, i32* %d, align 4
  %or2343 = or i32 %886, %887
  %888 = load i32, i32* %e, align 4
  %and2344 = and i32 %or2343, %888
  %889 = load i32, i32* %c, align 4
  %890 = load i32, i32* %d, align 4
  %and2345 = and i32 %889, %890
  %or2346 = or i32 %and2344, %and2345
  %arraydecay2347 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2348 = bitcast %union.char64long16* %arraydecay2347 to [16 x i32]*
  %arrayidx2349 = getelementptr inbounds [16 x i32], [16 x i32]* %l2348, i64 0, i64 8
  %891 = load i32, i32* %arrayidx2349, align 16
  %arraydecay2350 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2351 = bitcast %union.char64long16* %arraydecay2350 to [16 x i32]*
  %arrayidx2352 = getelementptr inbounds [16 x i32], [16 x i32]* %l2351, i64 0, i64 3
  %892 = load i32, i32* %arrayidx2352, align 4
  %xor2353 = xor i32 %891, %892
  %arraydecay2354 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2355 = bitcast %union.char64long16* %arraydecay2354 to [16 x i32]*
  %arrayidx2356 = getelementptr inbounds [16 x i32], [16 x i32]* %l2355, i64 0, i64 13
  %893 = load i32, i32* %arrayidx2356, align 4
  %xor2357 = xor i32 %xor2353, %893
  %arraydecay2358 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2359 = bitcast %union.char64long16* %arraydecay2358 to [16 x i32]*
  %arrayidx2360 = getelementptr inbounds [16 x i32], [16 x i32]* %l2359, i64 0, i64 11
  %894 = load i32, i32* %arrayidx2360, align 4
  %xor2361 = xor i32 %xor2357, %894
  %shl2362 = shl i32 %xor2361, 1
  %arraydecay2363 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2364 = bitcast %union.char64long16* %arraydecay2363 to [16 x i32]*
  %arrayidx2365 = getelementptr inbounds [16 x i32], [16 x i32]* %l2364, i64 0, i64 8
  %895 = load i32, i32* %arrayidx2365, align 16
  %arraydecay2366 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2367 = bitcast %union.char64long16* %arraydecay2366 to [16 x i32]*
  %arrayidx2368 = getelementptr inbounds [16 x i32], [16 x i32]* %l2367, i64 0, i64 3
  %896 = load i32, i32* %arrayidx2368, align 4
  %xor2369 = xor i32 %895, %896
  %arraydecay2370 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2371 = bitcast %union.char64long16* %arraydecay2370 to [16 x i32]*
  %arrayidx2372 = getelementptr inbounds [16 x i32], [16 x i32]* %l2371, i64 0, i64 13
  %897 = load i32, i32* %arrayidx2372, align 4
  %xor2373 = xor i32 %xor2369, %897
  %arraydecay2374 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2375 = bitcast %union.char64long16* %arraydecay2374 to [16 x i32]*
  %arrayidx2376 = getelementptr inbounds [16 x i32], [16 x i32]* %l2375, i64 0, i64 11
  %898 = load i32, i32* %arrayidx2376, align 4
  %xor2377 = xor i32 %xor2373, %898
  %shr2378 = lshr i32 %xor2377, 31
  %or2379 = or i32 %shl2362, %shr2378
  %arraydecay2380 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2381 = bitcast %union.char64long16* %arraydecay2380 to [16 x i32]*
  %arrayidx2382 = getelementptr inbounds [16 x i32], [16 x i32]* %l2381, i64 0, i64 11
  store i32 %or2379, i32* %arrayidx2382, align 4
  %add2383 = add i32 %or2346, %or2379
  %add2384 = add i32 %add2383, -1894007588
  %899 = load i32, i32* %b, align 4
  %shl2385 = shl i32 %899, 5
  %900 = load i32, i32* %b, align 4
  %shr2386 = lshr i32 %900, 27
  %or2387 = or i32 %shl2385, %shr2386
  %add2388 = add i32 %add2384, %or2387
  %901 = load i32, i32* %a, align 4
  %add2389 = add i32 %901, %add2388
  store i32 %add2389, i32* %a, align 4
  %902 = load i32, i32* %c, align 4
  %shl2390 = shl i32 %902, 30
  %903 = load i32, i32* %c, align 4
  %shr2391 = lshr i32 %903, 2
  %or2392 = or i32 %shl2390, %shr2391
  store i32 %or2392, i32* %c, align 4
  %904 = load i32, i32* %b, align 4
  %905 = load i32, i32* %c, align 4
  %xor2393 = xor i32 %904, %905
  %906 = load i32, i32* %d, align 4
  %xor2394 = xor i32 %xor2393, %906
  %arraydecay2395 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2396 = bitcast %union.char64long16* %arraydecay2395 to [16 x i32]*
  %arrayidx2397 = getelementptr inbounds [16 x i32], [16 x i32]* %l2396, i64 0, i64 9
  %907 = load i32, i32* %arrayidx2397, align 4
  %arraydecay2398 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2399 = bitcast %union.char64long16* %arraydecay2398 to [16 x i32]*
  %arrayidx2400 = getelementptr inbounds [16 x i32], [16 x i32]* %l2399, i64 0, i64 4
  %908 = load i32, i32* %arrayidx2400, align 16
  %xor2401 = xor i32 %907, %908
  %arraydecay2402 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2403 = bitcast %union.char64long16* %arraydecay2402 to [16 x i32]*
  %arrayidx2404 = getelementptr inbounds [16 x i32], [16 x i32]* %l2403, i64 0, i64 14
  %909 = load i32, i32* %arrayidx2404, align 8
  %xor2405 = xor i32 %xor2401, %909
  %arraydecay2406 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2407 = bitcast %union.char64long16* %arraydecay2406 to [16 x i32]*
  %arrayidx2408 = getelementptr inbounds [16 x i32], [16 x i32]* %l2407, i64 0, i64 12
  %910 = load i32, i32* %arrayidx2408, align 16
  %xor2409 = xor i32 %xor2405, %910
  %shl2410 = shl i32 %xor2409, 1
  %arraydecay2411 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2412 = bitcast %union.char64long16* %arraydecay2411 to [16 x i32]*
  %arrayidx2413 = getelementptr inbounds [16 x i32], [16 x i32]* %l2412, i64 0, i64 9
  %911 = load i32, i32* %arrayidx2413, align 4
  %arraydecay2414 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2415 = bitcast %union.char64long16* %arraydecay2414 to [16 x i32]*
  %arrayidx2416 = getelementptr inbounds [16 x i32], [16 x i32]* %l2415, i64 0, i64 4
  %912 = load i32, i32* %arrayidx2416, align 16
  %xor2417 = xor i32 %911, %912
  %arraydecay2418 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2419 = bitcast %union.char64long16* %arraydecay2418 to [16 x i32]*
  %arrayidx2420 = getelementptr inbounds [16 x i32], [16 x i32]* %l2419, i64 0, i64 14
  %913 = load i32, i32* %arrayidx2420, align 8
  %xor2421 = xor i32 %xor2417, %913
  %arraydecay2422 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2423 = bitcast %union.char64long16* %arraydecay2422 to [16 x i32]*
  %arrayidx2424 = getelementptr inbounds [16 x i32], [16 x i32]* %l2423, i64 0, i64 12
  %914 = load i32, i32* %arrayidx2424, align 16
  %xor2425 = xor i32 %xor2421, %914
  %shr2426 = lshr i32 %xor2425, 31
  %or2427 = or i32 %shl2410, %shr2426
  %arraydecay2428 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2429 = bitcast %union.char64long16* %arraydecay2428 to [16 x i32]*
  %arrayidx2430 = getelementptr inbounds [16 x i32], [16 x i32]* %l2429, i64 0, i64 12
  store i32 %or2427, i32* %arrayidx2430, align 16
  %add2431 = add i32 %xor2394, %or2427
  %add2432 = add i32 %add2431, -899497514
  %915 = load i32, i32* %a, align 4
  %shl2433 = shl i32 %915, 5
  %916 = load i32, i32* %a, align 4
  %shr2434 = lshr i32 %916, 27
  %or2435 = or i32 %shl2433, %shr2434
  %add2436 = add i32 %add2432, %or2435
  %917 = load i32, i32* %e, align 4
  %add2437 = add i32 %917, %add2436
  store i32 %add2437, i32* %e, align 4
  %918 = load i32, i32* %b, align 4
  %shl2438 = shl i32 %918, 30
  %919 = load i32, i32* %b, align 4
  %shr2439 = lshr i32 %919, 2
  %or2440 = or i32 %shl2438, %shr2439
  store i32 %or2440, i32* %b, align 4
  %920 = load i32, i32* %a, align 4
  %921 = load i32, i32* %b, align 4
  %xor2441 = xor i32 %920, %921
  %922 = load i32, i32* %c, align 4
  %xor2442 = xor i32 %xor2441, %922
  %arraydecay2443 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2444 = bitcast %union.char64long16* %arraydecay2443 to [16 x i32]*
  %arrayidx2445 = getelementptr inbounds [16 x i32], [16 x i32]* %l2444, i64 0, i64 10
  %923 = load i32, i32* %arrayidx2445, align 8
  %arraydecay2446 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2447 = bitcast %union.char64long16* %arraydecay2446 to [16 x i32]*
  %arrayidx2448 = getelementptr inbounds [16 x i32], [16 x i32]* %l2447, i64 0, i64 5
  %924 = load i32, i32* %arrayidx2448, align 4
  %xor2449 = xor i32 %923, %924
  %arraydecay2450 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2451 = bitcast %union.char64long16* %arraydecay2450 to [16 x i32]*
  %arrayidx2452 = getelementptr inbounds [16 x i32], [16 x i32]* %l2451, i64 0, i64 15
  %925 = load i32, i32* %arrayidx2452, align 4
  %xor2453 = xor i32 %xor2449, %925
  %arraydecay2454 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2455 = bitcast %union.char64long16* %arraydecay2454 to [16 x i32]*
  %arrayidx2456 = getelementptr inbounds [16 x i32], [16 x i32]* %l2455, i64 0, i64 13
  %926 = load i32, i32* %arrayidx2456, align 4
  %xor2457 = xor i32 %xor2453, %926
  %shl2458 = shl i32 %xor2457, 1
  %arraydecay2459 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2460 = bitcast %union.char64long16* %arraydecay2459 to [16 x i32]*
  %arrayidx2461 = getelementptr inbounds [16 x i32], [16 x i32]* %l2460, i64 0, i64 10
  %927 = load i32, i32* %arrayidx2461, align 8
  %arraydecay2462 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2463 = bitcast %union.char64long16* %arraydecay2462 to [16 x i32]*
  %arrayidx2464 = getelementptr inbounds [16 x i32], [16 x i32]* %l2463, i64 0, i64 5
  %928 = load i32, i32* %arrayidx2464, align 4
  %xor2465 = xor i32 %927, %928
  %arraydecay2466 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2467 = bitcast %union.char64long16* %arraydecay2466 to [16 x i32]*
  %arrayidx2468 = getelementptr inbounds [16 x i32], [16 x i32]* %l2467, i64 0, i64 15
  %929 = load i32, i32* %arrayidx2468, align 4
  %xor2469 = xor i32 %xor2465, %929
  %arraydecay2470 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2471 = bitcast %union.char64long16* %arraydecay2470 to [16 x i32]*
  %arrayidx2472 = getelementptr inbounds [16 x i32], [16 x i32]* %l2471, i64 0, i64 13
  %930 = load i32, i32* %arrayidx2472, align 4
  %xor2473 = xor i32 %xor2469, %930
  %shr2474 = lshr i32 %xor2473, 31
  %or2475 = or i32 %shl2458, %shr2474
  %arraydecay2476 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2477 = bitcast %union.char64long16* %arraydecay2476 to [16 x i32]*
  %arrayidx2478 = getelementptr inbounds [16 x i32], [16 x i32]* %l2477, i64 0, i64 13
  store i32 %or2475, i32* %arrayidx2478, align 4
  %add2479 = add i32 %xor2442, %or2475
  %add2480 = add i32 %add2479, -899497514
  %931 = load i32, i32* %e, align 4
  %shl2481 = shl i32 %931, 5
  %932 = load i32, i32* %e, align 4
  %shr2482 = lshr i32 %932, 27
  %or2483 = or i32 %shl2481, %shr2482
  %add2484 = add i32 %add2480, %or2483
  %933 = load i32, i32* %d, align 4
  %add2485 = add i32 %933, %add2484
  store i32 %add2485, i32* %d, align 4
  %934 = load i32, i32* %a, align 4
  %shl2486 = shl i32 %934, 30
  %935 = load i32, i32* %a, align 4
  %shr2487 = lshr i32 %935, 2
  %or2488 = or i32 %shl2486, %shr2487
  store i32 %or2488, i32* %a, align 4
  %936 = load i32, i32* %e, align 4
  %937 = load i32, i32* %a, align 4
  %xor2489 = xor i32 %936, %937
  %938 = load i32, i32* %b, align 4
  %xor2490 = xor i32 %xor2489, %938
  %arraydecay2491 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2492 = bitcast %union.char64long16* %arraydecay2491 to [16 x i32]*
  %arrayidx2493 = getelementptr inbounds [16 x i32], [16 x i32]* %l2492, i64 0, i64 11
  %939 = load i32, i32* %arrayidx2493, align 4
  %arraydecay2494 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2495 = bitcast %union.char64long16* %arraydecay2494 to [16 x i32]*
  %arrayidx2496 = getelementptr inbounds [16 x i32], [16 x i32]* %l2495, i64 0, i64 6
  %940 = load i32, i32* %arrayidx2496, align 8
  %xor2497 = xor i32 %939, %940
  %arraydecay2498 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2499 = bitcast %union.char64long16* %arraydecay2498 to [16 x i32]*
  %arrayidx2500 = getelementptr inbounds [16 x i32], [16 x i32]* %l2499, i64 0, i64 0
  %941 = load i32, i32* %arrayidx2500, align 16
  %xor2501 = xor i32 %xor2497, %941
  %arraydecay2502 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2503 = bitcast %union.char64long16* %arraydecay2502 to [16 x i32]*
  %arrayidx2504 = getelementptr inbounds [16 x i32], [16 x i32]* %l2503, i64 0, i64 14
  %942 = load i32, i32* %arrayidx2504, align 8
  %xor2505 = xor i32 %xor2501, %942
  %shl2506 = shl i32 %xor2505, 1
  %arraydecay2507 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2508 = bitcast %union.char64long16* %arraydecay2507 to [16 x i32]*
  %arrayidx2509 = getelementptr inbounds [16 x i32], [16 x i32]* %l2508, i64 0, i64 11
  %943 = load i32, i32* %arrayidx2509, align 4
  %arraydecay2510 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2511 = bitcast %union.char64long16* %arraydecay2510 to [16 x i32]*
  %arrayidx2512 = getelementptr inbounds [16 x i32], [16 x i32]* %l2511, i64 0, i64 6
  %944 = load i32, i32* %arrayidx2512, align 8
  %xor2513 = xor i32 %943, %944
  %arraydecay2514 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2515 = bitcast %union.char64long16* %arraydecay2514 to [16 x i32]*
  %arrayidx2516 = getelementptr inbounds [16 x i32], [16 x i32]* %l2515, i64 0, i64 0
  %945 = load i32, i32* %arrayidx2516, align 16
  %xor2517 = xor i32 %xor2513, %945
  %arraydecay2518 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2519 = bitcast %union.char64long16* %arraydecay2518 to [16 x i32]*
  %arrayidx2520 = getelementptr inbounds [16 x i32], [16 x i32]* %l2519, i64 0, i64 14
  %946 = load i32, i32* %arrayidx2520, align 8
  %xor2521 = xor i32 %xor2517, %946
  %shr2522 = lshr i32 %xor2521, 31
  %or2523 = or i32 %shl2506, %shr2522
  %arraydecay2524 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2525 = bitcast %union.char64long16* %arraydecay2524 to [16 x i32]*
  %arrayidx2526 = getelementptr inbounds [16 x i32], [16 x i32]* %l2525, i64 0, i64 14
  store i32 %or2523, i32* %arrayidx2526, align 8
  %add2527 = add i32 %xor2490, %or2523
  %add2528 = add i32 %add2527, -899497514
  %947 = load i32, i32* %d, align 4
  %shl2529 = shl i32 %947, 5
  %948 = load i32, i32* %d, align 4
  %shr2530 = lshr i32 %948, 27
  %or2531 = or i32 %shl2529, %shr2530
  %add2532 = add i32 %add2528, %or2531
  %949 = load i32, i32* %c, align 4
  %add2533 = add i32 %949, %add2532
  store i32 %add2533, i32* %c, align 4
  %950 = load i32, i32* %e, align 4
  %shl2534 = shl i32 %950, 30
  %951 = load i32, i32* %e, align 4
  %shr2535 = lshr i32 %951, 2
  %or2536 = or i32 %shl2534, %shr2535
  store i32 %or2536, i32* %e, align 4
  %952 = load i32, i32* %d, align 4
  %953 = load i32, i32* %e, align 4
  %xor2537 = xor i32 %952, %953
  %954 = load i32, i32* %a, align 4
  %xor2538 = xor i32 %xor2537, %954
  %arraydecay2539 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2540 = bitcast %union.char64long16* %arraydecay2539 to [16 x i32]*
  %arrayidx2541 = getelementptr inbounds [16 x i32], [16 x i32]* %l2540, i64 0, i64 12
  %955 = load i32, i32* %arrayidx2541, align 16
  %arraydecay2542 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2543 = bitcast %union.char64long16* %arraydecay2542 to [16 x i32]*
  %arrayidx2544 = getelementptr inbounds [16 x i32], [16 x i32]* %l2543, i64 0, i64 7
  %956 = load i32, i32* %arrayidx2544, align 4
  %xor2545 = xor i32 %955, %956
  %arraydecay2546 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2547 = bitcast %union.char64long16* %arraydecay2546 to [16 x i32]*
  %arrayidx2548 = getelementptr inbounds [16 x i32], [16 x i32]* %l2547, i64 0, i64 1
  %957 = load i32, i32* %arrayidx2548, align 4
  %xor2549 = xor i32 %xor2545, %957
  %arraydecay2550 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2551 = bitcast %union.char64long16* %arraydecay2550 to [16 x i32]*
  %arrayidx2552 = getelementptr inbounds [16 x i32], [16 x i32]* %l2551, i64 0, i64 15
  %958 = load i32, i32* %arrayidx2552, align 4
  %xor2553 = xor i32 %xor2549, %958
  %shl2554 = shl i32 %xor2553, 1
  %arraydecay2555 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2556 = bitcast %union.char64long16* %arraydecay2555 to [16 x i32]*
  %arrayidx2557 = getelementptr inbounds [16 x i32], [16 x i32]* %l2556, i64 0, i64 12
  %959 = load i32, i32* %arrayidx2557, align 16
  %arraydecay2558 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2559 = bitcast %union.char64long16* %arraydecay2558 to [16 x i32]*
  %arrayidx2560 = getelementptr inbounds [16 x i32], [16 x i32]* %l2559, i64 0, i64 7
  %960 = load i32, i32* %arrayidx2560, align 4
  %xor2561 = xor i32 %959, %960
  %arraydecay2562 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2563 = bitcast %union.char64long16* %arraydecay2562 to [16 x i32]*
  %arrayidx2564 = getelementptr inbounds [16 x i32], [16 x i32]* %l2563, i64 0, i64 1
  %961 = load i32, i32* %arrayidx2564, align 4
  %xor2565 = xor i32 %xor2561, %961
  %arraydecay2566 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2567 = bitcast %union.char64long16* %arraydecay2566 to [16 x i32]*
  %arrayidx2568 = getelementptr inbounds [16 x i32], [16 x i32]* %l2567, i64 0, i64 15
  %962 = load i32, i32* %arrayidx2568, align 4
  %xor2569 = xor i32 %xor2565, %962
  %shr2570 = lshr i32 %xor2569, 31
  %or2571 = or i32 %shl2554, %shr2570
  %arraydecay2572 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2573 = bitcast %union.char64long16* %arraydecay2572 to [16 x i32]*
  %arrayidx2574 = getelementptr inbounds [16 x i32], [16 x i32]* %l2573, i64 0, i64 15
  store i32 %or2571, i32* %arrayidx2574, align 4
  %add2575 = add i32 %xor2538, %or2571
  %add2576 = add i32 %add2575, -899497514
  %963 = load i32, i32* %c, align 4
  %shl2577 = shl i32 %963, 5
  %964 = load i32, i32* %c, align 4
  %shr2578 = lshr i32 %964, 27
  %or2579 = or i32 %shl2577, %shr2578
  %add2580 = add i32 %add2576, %or2579
  %965 = load i32, i32* %b, align 4
  %add2581 = add i32 %965, %add2580
  store i32 %add2581, i32* %b, align 4
  %966 = load i32, i32* %d, align 4
  %shl2582 = shl i32 %966, 30
  %967 = load i32, i32* %d, align 4
  %shr2583 = lshr i32 %967, 2
  %or2584 = or i32 %shl2582, %shr2583
  store i32 %or2584, i32* %d, align 4
  %968 = load i32, i32* %c, align 4
  %969 = load i32, i32* %d, align 4
  %xor2585 = xor i32 %968, %969
  %970 = load i32, i32* %e, align 4
  %xor2586 = xor i32 %xor2585, %970
  %arraydecay2587 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2588 = bitcast %union.char64long16* %arraydecay2587 to [16 x i32]*
  %arrayidx2589 = getelementptr inbounds [16 x i32], [16 x i32]* %l2588, i64 0, i64 13
  %971 = load i32, i32* %arrayidx2589, align 4
  %arraydecay2590 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2591 = bitcast %union.char64long16* %arraydecay2590 to [16 x i32]*
  %arrayidx2592 = getelementptr inbounds [16 x i32], [16 x i32]* %l2591, i64 0, i64 8
  %972 = load i32, i32* %arrayidx2592, align 16
  %xor2593 = xor i32 %971, %972
  %arraydecay2594 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2595 = bitcast %union.char64long16* %arraydecay2594 to [16 x i32]*
  %arrayidx2596 = getelementptr inbounds [16 x i32], [16 x i32]* %l2595, i64 0, i64 2
  %973 = load i32, i32* %arrayidx2596, align 8
  %xor2597 = xor i32 %xor2593, %973
  %arraydecay2598 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2599 = bitcast %union.char64long16* %arraydecay2598 to [16 x i32]*
  %arrayidx2600 = getelementptr inbounds [16 x i32], [16 x i32]* %l2599, i64 0, i64 0
  %974 = load i32, i32* %arrayidx2600, align 16
  %xor2601 = xor i32 %xor2597, %974
  %shl2602 = shl i32 %xor2601, 1
  %arraydecay2603 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2604 = bitcast %union.char64long16* %arraydecay2603 to [16 x i32]*
  %arrayidx2605 = getelementptr inbounds [16 x i32], [16 x i32]* %l2604, i64 0, i64 13
  %975 = load i32, i32* %arrayidx2605, align 4
  %arraydecay2606 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2607 = bitcast %union.char64long16* %arraydecay2606 to [16 x i32]*
  %arrayidx2608 = getelementptr inbounds [16 x i32], [16 x i32]* %l2607, i64 0, i64 8
  %976 = load i32, i32* %arrayidx2608, align 16
  %xor2609 = xor i32 %975, %976
  %arraydecay2610 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2611 = bitcast %union.char64long16* %arraydecay2610 to [16 x i32]*
  %arrayidx2612 = getelementptr inbounds [16 x i32], [16 x i32]* %l2611, i64 0, i64 2
  %977 = load i32, i32* %arrayidx2612, align 8
  %xor2613 = xor i32 %xor2609, %977
  %arraydecay2614 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2615 = bitcast %union.char64long16* %arraydecay2614 to [16 x i32]*
  %arrayidx2616 = getelementptr inbounds [16 x i32], [16 x i32]* %l2615, i64 0, i64 0
  %978 = load i32, i32* %arrayidx2616, align 16
  %xor2617 = xor i32 %xor2613, %978
  %shr2618 = lshr i32 %xor2617, 31
  %or2619 = or i32 %shl2602, %shr2618
  %arraydecay2620 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2621 = bitcast %union.char64long16* %arraydecay2620 to [16 x i32]*
  %arrayidx2622 = getelementptr inbounds [16 x i32], [16 x i32]* %l2621, i64 0, i64 0
  store i32 %or2619, i32* %arrayidx2622, align 16
  %add2623 = add i32 %xor2586, %or2619
  %add2624 = add i32 %add2623, -899497514
  %979 = load i32, i32* %b, align 4
  %shl2625 = shl i32 %979, 5
  %980 = load i32, i32* %b, align 4
  %shr2626 = lshr i32 %980, 27
  %or2627 = or i32 %shl2625, %shr2626
  %add2628 = add i32 %add2624, %or2627
  %981 = load i32, i32* %a, align 4
  %add2629 = add i32 %981, %add2628
  store i32 %add2629, i32* %a, align 4
  %982 = load i32, i32* %c, align 4
  %shl2630 = shl i32 %982, 30
  %983 = load i32, i32* %c, align 4
  %shr2631 = lshr i32 %983, 2
  %or2632 = or i32 %shl2630, %shr2631
  store i32 %or2632, i32* %c, align 4
  %984 = load i32, i32* %b, align 4
  %985 = load i32, i32* %c, align 4
  %xor2633 = xor i32 %984, %985
  %986 = load i32, i32* %d, align 4
  %xor2634 = xor i32 %xor2633, %986
  %arraydecay2635 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2636 = bitcast %union.char64long16* %arraydecay2635 to [16 x i32]*
  %arrayidx2637 = getelementptr inbounds [16 x i32], [16 x i32]* %l2636, i64 0, i64 14
  %987 = load i32, i32* %arrayidx2637, align 8
  %arraydecay2638 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2639 = bitcast %union.char64long16* %arraydecay2638 to [16 x i32]*
  %arrayidx2640 = getelementptr inbounds [16 x i32], [16 x i32]* %l2639, i64 0, i64 9
  %988 = load i32, i32* %arrayidx2640, align 4
  %xor2641 = xor i32 %987, %988
  %arraydecay2642 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2643 = bitcast %union.char64long16* %arraydecay2642 to [16 x i32]*
  %arrayidx2644 = getelementptr inbounds [16 x i32], [16 x i32]* %l2643, i64 0, i64 3
  %989 = load i32, i32* %arrayidx2644, align 4
  %xor2645 = xor i32 %xor2641, %989
  %arraydecay2646 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2647 = bitcast %union.char64long16* %arraydecay2646 to [16 x i32]*
  %arrayidx2648 = getelementptr inbounds [16 x i32], [16 x i32]* %l2647, i64 0, i64 1
  %990 = load i32, i32* %arrayidx2648, align 4
  %xor2649 = xor i32 %xor2645, %990
  %shl2650 = shl i32 %xor2649, 1
  %arraydecay2651 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2652 = bitcast %union.char64long16* %arraydecay2651 to [16 x i32]*
  %arrayidx2653 = getelementptr inbounds [16 x i32], [16 x i32]* %l2652, i64 0, i64 14
  %991 = load i32, i32* %arrayidx2653, align 8
  %arraydecay2654 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2655 = bitcast %union.char64long16* %arraydecay2654 to [16 x i32]*
  %arrayidx2656 = getelementptr inbounds [16 x i32], [16 x i32]* %l2655, i64 0, i64 9
  %992 = load i32, i32* %arrayidx2656, align 4
  %xor2657 = xor i32 %991, %992
  %arraydecay2658 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2659 = bitcast %union.char64long16* %arraydecay2658 to [16 x i32]*
  %arrayidx2660 = getelementptr inbounds [16 x i32], [16 x i32]* %l2659, i64 0, i64 3
  %993 = load i32, i32* %arrayidx2660, align 4
  %xor2661 = xor i32 %xor2657, %993
  %arraydecay2662 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2663 = bitcast %union.char64long16* %arraydecay2662 to [16 x i32]*
  %arrayidx2664 = getelementptr inbounds [16 x i32], [16 x i32]* %l2663, i64 0, i64 1
  %994 = load i32, i32* %arrayidx2664, align 4
  %xor2665 = xor i32 %xor2661, %994
  %shr2666 = lshr i32 %xor2665, 31
  %or2667 = or i32 %shl2650, %shr2666
  %arraydecay2668 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2669 = bitcast %union.char64long16* %arraydecay2668 to [16 x i32]*
  %arrayidx2670 = getelementptr inbounds [16 x i32], [16 x i32]* %l2669, i64 0, i64 1
  store i32 %or2667, i32* %arrayidx2670, align 4
  %add2671 = add i32 %xor2634, %or2667
  %add2672 = add i32 %add2671, -899497514
  %995 = load i32, i32* %a, align 4
  %shl2673 = shl i32 %995, 5
  %996 = load i32, i32* %a, align 4
  %shr2674 = lshr i32 %996, 27
  %or2675 = or i32 %shl2673, %shr2674
  %add2676 = add i32 %add2672, %or2675
  %997 = load i32, i32* %e, align 4
  %add2677 = add i32 %997, %add2676
  store i32 %add2677, i32* %e, align 4
  %998 = load i32, i32* %b, align 4
  %shl2678 = shl i32 %998, 30
  %999 = load i32, i32* %b, align 4
  %shr2679 = lshr i32 %999, 2
  %or2680 = or i32 %shl2678, %shr2679
  store i32 %or2680, i32* %b, align 4
  %1000 = load i32, i32* %a, align 4
  %1001 = load i32, i32* %b, align 4
  %xor2681 = xor i32 %1000, %1001
  %1002 = load i32, i32* %c, align 4
  %xor2682 = xor i32 %xor2681, %1002
  %arraydecay2683 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2684 = bitcast %union.char64long16* %arraydecay2683 to [16 x i32]*
  %arrayidx2685 = getelementptr inbounds [16 x i32], [16 x i32]* %l2684, i64 0, i64 15
  %1003 = load i32, i32* %arrayidx2685, align 4
  %arraydecay2686 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2687 = bitcast %union.char64long16* %arraydecay2686 to [16 x i32]*
  %arrayidx2688 = getelementptr inbounds [16 x i32], [16 x i32]* %l2687, i64 0, i64 10
  %1004 = load i32, i32* %arrayidx2688, align 8
  %xor2689 = xor i32 %1003, %1004
  %arraydecay2690 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2691 = bitcast %union.char64long16* %arraydecay2690 to [16 x i32]*
  %arrayidx2692 = getelementptr inbounds [16 x i32], [16 x i32]* %l2691, i64 0, i64 4
  %1005 = load i32, i32* %arrayidx2692, align 16
  %xor2693 = xor i32 %xor2689, %1005
  %arraydecay2694 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2695 = bitcast %union.char64long16* %arraydecay2694 to [16 x i32]*
  %arrayidx2696 = getelementptr inbounds [16 x i32], [16 x i32]* %l2695, i64 0, i64 2
  %1006 = load i32, i32* %arrayidx2696, align 8
  %xor2697 = xor i32 %xor2693, %1006
  %shl2698 = shl i32 %xor2697, 1
  %arraydecay2699 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2700 = bitcast %union.char64long16* %arraydecay2699 to [16 x i32]*
  %arrayidx2701 = getelementptr inbounds [16 x i32], [16 x i32]* %l2700, i64 0, i64 15
  %1007 = load i32, i32* %arrayidx2701, align 4
  %arraydecay2702 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2703 = bitcast %union.char64long16* %arraydecay2702 to [16 x i32]*
  %arrayidx2704 = getelementptr inbounds [16 x i32], [16 x i32]* %l2703, i64 0, i64 10
  %1008 = load i32, i32* %arrayidx2704, align 8
  %xor2705 = xor i32 %1007, %1008
  %arraydecay2706 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2707 = bitcast %union.char64long16* %arraydecay2706 to [16 x i32]*
  %arrayidx2708 = getelementptr inbounds [16 x i32], [16 x i32]* %l2707, i64 0, i64 4
  %1009 = load i32, i32* %arrayidx2708, align 16
  %xor2709 = xor i32 %xor2705, %1009
  %arraydecay2710 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2711 = bitcast %union.char64long16* %arraydecay2710 to [16 x i32]*
  %arrayidx2712 = getelementptr inbounds [16 x i32], [16 x i32]* %l2711, i64 0, i64 2
  %1010 = load i32, i32* %arrayidx2712, align 8
  %xor2713 = xor i32 %xor2709, %1010
  %shr2714 = lshr i32 %xor2713, 31
  %or2715 = or i32 %shl2698, %shr2714
  %arraydecay2716 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2717 = bitcast %union.char64long16* %arraydecay2716 to [16 x i32]*
  %arrayidx2718 = getelementptr inbounds [16 x i32], [16 x i32]* %l2717, i64 0, i64 2
  store i32 %or2715, i32* %arrayidx2718, align 8
  %add2719 = add i32 %xor2682, %or2715
  %add2720 = add i32 %add2719, -899497514
  %1011 = load i32, i32* %e, align 4
  %shl2721 = shl i32 %1011, 5
  %1012 = load i32, i32* %e, align 4
  %shr2722 = lshr i32 %1012, 27
  %or2723 = or i32 %shl2721, %shr2722
  %add2724 = add i32 %add2720, %or2723
  %1013 = load i32, i32* %d, align 4
  %add2725 = add i32 %1013, %add2724
  store i32 %add2725, i32* %d, align 4
  %1014 = load i32, i32* %a, align 4
  %shl2726 = shl i32 %1014, 30
  %1015 = load i32, i32* %a, align 4
  %shr2727 = lshr i32 %1015, 2
  %or2728 = or i32 %shl2726, %shr2727
  store i32 %or2728, i32* %a, align 4
  %1016 = load i32, i32* %e, align 4
  %1017 = load i32, i32* %a, align 4
  %xor2729 = xor i32 %1016, %1017
  %1018 = load i32, i32* %b, align 4
  %xor2730 = xor i32 %xor2729, %1018
  %arraydecay2731 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2732 = bitcast %union.char64long16* %arraydecay2731 to [16 x i32]*
  %arrayidx2733 = getelementptr inbounds [16 x i32], [16 x i32]* %l2732, i64 0, i64 0
  %1019 = load i32, i32* %arrayidx2733, align 16
  %arraydecay2734 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2735 = bitcast %union.char64long16* %arraydecay2734 to [16 x i32]*
  %arrayidx2736 = getelementptr inbounds [16 x i32], [16 x i32]* %l2735, i64 0, i64 11
  %1020 = load i32, i32* %arrayidx2736, align 4
  %xor2737 = xor i32 %1019, %1020
  %arraydecay2738 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2739 = bitcast %union.char64long16* %arraydecay2738 to [16 x i32]*
  %arrayidx2740 = getelementptr inbounds [16 x i32], [16 x i32]* %l2739, i64 0, i64 5
  %1021 = load i32, i32* %arrayidx2740, align 4
  %xor2741 = xor i32 %xor2737, %1021
  %arraydecay2742 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2743 = bitcast %union.char64long16* %arraydecay2742 to [16 x i32]*
  %arrayidx2744 = getelementptr inbounds [16 x i32], [16 x i32]* %l2743, i64 0, i64 3
  %1022 = load i32, i32* %arrayidx2744, align 4
  %xor2745 = xor i32 %xor2741, %1022
  %shl2746 = shl i32 %xor2745, 1
  %arraydecay2747 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2748 = bitcast %union.char64long16* %arraydecay2747 to [16 x i32]*
  %arrayidx2749 = getelementptr inbounds [16 x i32], [16 x i32]* %l2748, i64 0, i64 0
  %1023 = load i32, i32* %arrayidx2749, align 16
  %arraydecay2750 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2751 = bitcast %union.char64long16* %arraydecay2750 to [16 x i32]*
  %arrayidx2752 = getelementptr inbounds [16 x i32], [16 x i32]* %l2751, i64 0, i64 11
  %1024 = load i32, i32* %arrayidx2752, align 4
  %xor2753 = xor i32 %1023, %1024
  %arraydecay2754 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2755 = bitcast %union.char64long16* %arraydecay2754 to [16 x i32]*
  %arrayidx2756 = getelementptr inbounds [16 x i32], [16 x i32]* %l2755, i64 0, i64 5
  %1025 = load i32, i32* %arrayidx2756, align 4
  %xor2757 = xor i32 %xor2753, %1025
  %arraydecay2758 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2759 = bitcast %union.char64long16* %arraydecay2758 to [16 x i32]*
  %arrayidx2760 = getelementptr inbounds [16 x i32], [16 x i32]* %l2759, i64 0, i64 3
  %1026 = load i32, i32* %arrayidx2760, align 4
  %xor2761 = xor i32 %xor2757, %1026
  %shr2762 = lshr i32 %xor2761, 31
  %or2763 = or i32 %shl2746, %shr2762
  %arraydecay2764 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2765 = bitcast %union.char64long16* %arraydecay2764 to [16 x i32]*
  %arrayidx2766 = getelementptr inbounds [16 x i32], [16 x i32]* %l2765, i64 0, i64 3
  store i32 %or2763, i32* %arrayidx2766, align 4
  %add2767 = add i32 %xor2730, %or2763
  %add2768 = add i32 %add2767, -899497514
  %1027 = load i32, i32* %d, align 4
  %shl2769 = shl i32 %1027, 5
  %1028 = load i32, i32* %d, align 4
  %shr2770 = lshr i32 %1028, 27
  %or2771 = or i32 %shl2769, %shr2770
  %add2772 = add i32 %add2768, %or2771
  %1029 = load i32, i32* %c, align 4
  %add2773 = add i32 %1029, %add2772
  store i32 %add2773, i32* %c, align 4
  %1030 = load i32, i32* %e, align 4
  %shl2774 = shl i32 %1030, 30
  %1031 = load i32, i32* %e, align 4
  %shr2775 = lshr i32 %1031, 2
  %or2776 = or i32 %shl2774, %shr2775
  store i32 %or2776, i32* %e, align 4
  %1032 = load i32, i32* %d, align 4
  %1033 = load i32, i32* %e, align 4
  %xor2777 = xor i32 %1032, %1033
  %1034 = load i32, i32* %a, align 4
  %xor2778 = xor i32 %xor2777, %1034
  %arraydecay2779 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2780 = bitcast %union.char64long16* %arraydecay2779 to [16 x i32]*
  %arrayidx2781 = getelementptr inbounds [16 x i32], [16 x i32]* %l2780, i64 0, i64 1
  %1035 = load i32, i32* %arrayidx2781, align 4
  %arraydecay2782 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2783 = bitcast %union.char64long16* %arraydecay2782 to [16 x i32]*
  %arrayidx2784 = getelementptr inbounds [16 x i32], [16 x i32]* %l2783, i64 0, i64 12
  %1036 = load i32, i32* %arrayidx2784, align 16
  %xor2785 = xor i32 %1035, %1036
  %arraydecay2786 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2787 = bitcast %union.char64long16* %arraydecay2786 to [16 x i32]*
  %arrayidx2788 = getelementptr inbounds [16 x i32], [16 x i32]* %l2787, i64 0, i64 6
  %1037 = load i32, i32* %arrayidx2788, align 8
  %xor2789 = xor i32 %xor2785, %1037
  %arraydecay2790 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2791 = bitcast %union.char64long16* %arraydecay2790 to [16 x i32]*
  %arrayidx2792 = getelementptr inbounds [16 x i32], [16 x i32]* %l2791, i64 0, i64 4
  %1038 = load i32, i32* %arrayidx2792, align 16
  %xor2793 = xor i32 %xor2789, %1038
  %shl2794 = shl i32 %xor2793, 1
  %arraydecay2795 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2796 = bitcast %union.char64long16* %arraydecay2795 to [16 x i32]*
  %arrayidx2797 = getelementptr inbounds [16 x i32], [16 x i32]* %l2796, i64 0, i64 1
  %1039 = load i32, i32* %arrayidx2797, align 4
  %arraydecay2798 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2799 = bitcast %union.char64long16* %arraydecay2798 to [16 x i32]*
  %arrayidx2800 = getelementptr inbounds [16 x i32], [16 x i32]* %l2799, i64 0, i64 12
  %1040 = load i32, i32* %arrayidx2800, align 16
  %xor2801 = xor i32 %1039, %1040
  %arraydecay2802 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2803 = bitcast %union.char64long16* %arraydecay2802 to [16 x i32]*
  %arrayidx2804 = getelementptr inbounds [16 x i32], [16 x i32]* %l2803, i64 0, i64 6
  %1041 = load i32, i32* %arrayidx2804, align 8
  %xor2805 = xor i32 %xor2801, %1041
  %arraydecay2806 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2807 = bitcast %union.char64long16* %arraydecay2806 to [16 x i32]*
  %arrayidx2808 = getelementptr inbounds [16 x i32], [16 x i32]* %l2807, i64 0, i64 4
  %1042 = load i32, i32* %arrayidx2808, align 16
  %xor2809 = xor i32 %xor2805, %1042
  %shr2810 = lshr i32 %xor2809, 31
  %or2811 = or i32 %shl2794, %shr2810
  %arraydecay2812 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2813 = bitcast %union.char64long16* %arraydecay2812 to [16 x i32]*
  %arrayidx2814 = getelementptr inbounds [16 x i32], [16 x i32]* %l2813, i64 0, i64 4
  store i32 %or2811, i32* %arrayidx2814, align 16
  %add2815 = add i32 %xor2778, %or2811
  %add2816 = add i32 %add2815, -899497514
  %1043 = load i32, i32* %c, align 4
  %shl2817 = shl i32 %1043, 5
  %1044 = load i32, i32* %c, align 4
  %shr2818 = lshr i32 %1044, 27
  %or2819 = or i32 %shl2817, %shr2818
  %add2820 = add i32 %add2816, %or2819
  %1045 = load i32, i32* %b, align 4
  %add2821 = add i32 %1045, %add2820
  store i32 %add2821, i32* %b, align 4
  %1046 = load i32, i32* %d, align 4
  %shl2822 = shl i32 %1046, 30
  %1047 = load i32, i32* %d, align 4
  %shr2823 = lshr i32 %1047, 2
  %or2824 = or i32 %shl2822, %shr2823
  store i32 %or2824, i32* %d, align 4
  %1048 = load i32, i32* %c, align 4
  %1049 = load i32, i32* %d, align 4
  %xor2825 = xor i32 %1048, %1049
  %1050 = load i32, i32* %e, align 4
  %xor2826 = xor i32 %xor2825, %1050
  %arraydecay2827 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2828 = bitcast %union.char64long16* %arraydecay2827 to [16 x i32]*
  %arrayidx2829 = getelementptr inbounds [16 x i32], [16 x i32]* %l2828, i64 0, i64 2
  %1051 = load i32, i32* %arrayidx2829, align 8
  %arraydecay2830 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2831 = bitcast %union.char64long16* %arraydecay2830 to [16 x i32]*
  %arrayidx2832 = getelementptr inbounds [16 x i32], [16 x i32]* %l2831, i64 0, i64 13
  %1052 = load i32, i32* %arrayidx2832, align 4
  %xor2833 = xor i32 %1051, %1052
  %arraydecay2834 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2835 = bitcast %union.char64long16* %arraydecay2834 to [16 x i32]*
  %arrayidx2836 = getelementptr inbounds [16 x i32], [16 x i32]* %l2835, i64 0, i64 7
  %1053 = load i32, i32* %arrayidx2836, align 4
  %xor2837 = xor i32 %xor2833, %1053
  %arraydecay2838 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2839 = bitcast %union.char64long16* %arraydecay2838 to [16 x i32]*
  %arrayidx2840 = getelementptr inbounds [16 x i32], [16 x i32]* %l2839, i64 0, i64 5
  %1054 = load i32, i32* %arrayidx2840, align 4
  %xor2841 = xor i32 %xor2837, %1054
  %shl2842 = shl i32 %xor2841, 1
  %arraydecay2843 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2844 = bitcast %union.char64long16* %arraydecay2843 to [16 x i32]*
  %arrayidx2845 = getelementptr inbounds [16 x i32], [16 x i32]* %l2844, i64 0, i64 2
  %1055 = load i32, i32* %arrayidx2845, align 8
  %arraydecay2846 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2847 = bitcast %union.char64long16* %arraydecay2846 to [16 x i32]*
  %arrayidx2848 = getelementptr inbounds [16 x i32], [16 x i32]* %l2847, i64 0, i64 13
  %1056 = load i32, i32* %arrayidx2848, align 4
  %xor2849 = xor i32 %1055, %1056
  %arraydecay2850 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2851 = bitcast %union.char64long16* %arraydecay2850 to [16 x i32]*
  %arrayidx2852 = getelementptr inbounds [16 x i32], [16 x i32]* %l2851, i64 0, i64 7
  %1057 = load i32, i32* %arrayidx2852, align 4
  %xor2853 = xor i32 %xor2849, %1057
  %arraydecay2854 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2855 = bitcast %union.char64long16* %arraydecay2854 to [16 x i32]*
  %arrayidx2856 = getelementptr inbounds [16 x i32], [16 x i32]* %l2855, i64 0, i64 5
  %1058 = load i32, i32* %arrayidx2856, align 4
  %xor2857 = xor i32 %xor2853, %1058
  %shr2858 = lshr i32 %xor2857, 31
  %or2859 = or i32 %shl2842, %shr2858
  %arraydecay2860 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2861 = bitcast %union.char64long16* %arraydecay2860 to [16 x i32]*
  %arrayidx2862 = getelementptr inbounds [16 x i32], [16 x i32]* %l2861, i64 0, i64 5
  store i32 %or2859, i32* %arrayidx2862, align 4
  %add2863 = add i32 %xor2826, %or2859
  %add2864 = add i32 %add2863, -899497514
  %1059 = load i32, i32* %b, align 4
  %shl2865 = shl i32 %1059, 5
  %1060 = load i32, i32* %b, align 4
  %shr2866 = lshr i32 %1060, 27
  %or2867 = or i32 %shl2865, %shr2866
  %add2868 = add i32 %add2864, %or2867
  %1061 = load i32, i32* %a, align 4
  %add2869 = add i32 %1061, %add2868
  store i32 %add2869, i32* %a, align 4
  %1062 = load i32, i32* %c, align 4
  %shl2870 = shl i32 %1062, 30
  %1063 = load i32, i32* %c, align 4
  %shr2871 = lshr i32 %1063, 2
  %or2872 = or i32 %shl2870, %shr2871
  store i32 %or2872, i32* %c, align 4
  %1064 = load i32, i32* %b, align 4
  %1065 = load i32, i32* %c, align 4
  %xor2873 = xor i32 %1064, %1065
  %1066 = load i32, i32* %d, align 4
  %xor2874 = xor i32 %xor2873, %1066
  %arraydecay2875 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2876 = bitcast %union.char64long16* %arraydecay2875 to [16 x i32]*
  %arrayidx2877 = getelementptr inbounds [16 x i32], [16 x i32]* %l2876, i64 0, i64 3
  %1067 = load i32, i32* %arrayidx2877, align 4
  %arraydecay2878 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2879 = bitcast %union.char64long16* %arraydecay2878 to [16 x i32]*
  %arrayidx2880 = getelementptr inbounds [16 x i32], [16 x i32]* %l2879, i64 0, i64 14
  %1068 = load i32, i32* %arrayidx2880, align 8
  %xor2881 = xor i32 %1067, %1068
  %arraydecay2882 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2883 = bitcast %union.char64long16* %arraydecay2882 to [16 x i32]*
  %arrayidx2884 = getelementptr inbounds [16 x i32], [16 x i32]* %l2883, i64 0, i64 8
  %1069 = load i32, i32* %arrayidx2884, align 16
  %xor2885 = xor i32 %xor2881, %1069
  %arraydecay2886 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2887 = bitcast %union.char64long16* %arraydecay2886 to [16 x i32]*
  %arrayidx2888 = getelementptr inbounds [16 x i32], [16 x i32]* %l2887, i64 0, i64 6
  %1070 = load i32, i32* %arrayidx2888, align 8
  %xor2889 = xor i32 %xor2885, %1070
  %shl2890 = shl i32 %xor2889, 1
  %arraydecay2891 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2892 = bitcast %union.char64long16* %arraydecay2891 to [16 x i32]*
  %arrayidx2893 = getelementptr inbounds [16 x i32], [16 x i32]* %l2892, i64 0, i64 3
  %1071 = load i32, i32* %arrayidx2893, align 4
  %arraydecay2894 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2895 = bitcast %union.char64long16* %arraydecay2894 to [16 x i32]*
  %arrayidx2896 = getelementptr inbounds [16 x i32], [16 x i32]* %l2895, i64 0, i64 14
  %1072 = load i32, i32* %arrayidx2896, align 8
  %xor2897 = xor i32 %1071, %1072
  %arraydecay2898 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2899 = bitcast %union.char64long16* %arraydecay2898 to [16 x i32]*
  %arrayidx2900 = getelementptr inbounds [16 x i32], [16 x i32]* %l2899, i64 0, i64 8
  %1073 = load i32, i32* %arrayidx2900, align 16
  %xor2901 = xor i32 %xor2897, %1073
  %arraydecay2902 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2903 = bitcast %union.char64long16* %arraydecay2902 to [16 x i32]*
  %arrayidx2904 = getelementptr inbounds [16 x i32], [16 x i32]* %l2903, i64 0, i64 6
  %1074 = load i32, i32* %arrayidx2904, align 8
  %xor2905 = xor i32 %xor2901, %1074
  %shr2906 = lshr i32 %xor2905, 31
  %or2907 = or i32 %shl2890, %shr2906
  %arraydecay2908 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2909 = bitcast %union.char64long16* %arraydecay2908 to [16 x i32]*
  %arrayidx2910 = getelementptr inbounds [16 x i32], [16 x i32]* %l2909, i64 0, i64 6
  store i32 %or2907, i32* %arrayidx2910, align 8
  %add2911 = add i32 %xor2874, %or2907
  %add2912 = add i32 %add2911, -899497514
  %1075 = load i32, i32* %a, align 4
  %shl2913 = shl i32 %1075, 5
  %1076 = load i32, i32* %a, align 4
  %shr2914 = lshr i32 %1076, 27
  %or2915 = or i32 %shl2913, %shr2914
  %add2916 = add i32 %add2912, %or2915
  %1077 = load i32, i32* %e, align 4
  %add2917 = add i32 %1077, %add2916
  store i32 %add2917, i32* %e, align 4
  %1078 = load i32, i32* %b, align 4
  %shl2918 = shl i32 %1078, 30
  %1079 = load i32, i32* %b, align 4
  %shr2919 = lshr i32 %1079, 2
  %or2920 = or i32 %shl2918, %shr2919
  store i32 %or2920, i32* %b, align 4
  %1080 = load i32, i32* %a, align 4
  %1081 = load i32, i32* %b, align 4
  %xor2921 = xor i32 %1080, %1081
  %1082 = load i32, i32* %c, align 4
  %xor2922 = xor i32 %xor2921, %1082
  %arraydecay2923 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2924 = bitcast %union.char64long16* %arraydecay2923 to [16 x i32]*
  %arrayidx2925 = getelementptr inbounds [16 x i32], [16 x i32]* %l2924, i64 0, i64 4
  %1083 = load i32, i32* %arrayidx2925, align 16
  %arraydecay2926 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2927 = bitcast %union.char64long16* %arraydecay2926 to [16 x i32]*
  %arrayidx2928 = getelementptr inbounds [16 x i32], [16 x i32]* %l2927, i64 0, i64 15
  %1084 = load i32, i32* %arrayidx2928, align 4
  %xor2929 = xor i32 %1083, %1084
  %arraydecay2930 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2931 = bitcast %union.char64long16* %arraydecay2930 to [16 x i32]*
  %arrayidx2932 = getelementptr inbounds [16 x i32], [16 x i32]* %l2931, i64 0, i64 9
  %1085 = load i32, i32* %arrayidx2932, align 4
  %xor2933 = xor i32 %xor2929, %1085
  %arraydecay2934 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2935 = bitcast %union.char64long16* %arraydecay2934 to [16 x i32]*
  %arrayidx2936 = getelementptr inbounds [16 x i32], [16 x i32]* %l2935, i64 0, i64 7
  %1086 = load i32, i32* %arrayidx2936, align 4
  %xor2937 = xor i32 %xor2933, %1086
  %shl2938 = shl i32 %xor2937, 1
  %arraydecay2939 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2940 = bitcast %union.char64long16* %arraydecay2939 to [16 x i32]*
  %arrayidx2941 = getelementptr inbounds [16 x i32], [16 x i32]* %l2940, i64 0, i64 4
  %1087 = load i32, i32* %arrayidx2941, align 16
  %arraydecay2942 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2943 = bitcast %union.char64long16* %arraydecay2942 to [16 x i32]*
  %arrayidx2944 = getelementptr inbounds [16 x i32], [16 x i32]* %l2943, i64 0, i64 15
  %1088 = load i32, i32* %arrayidx2944, align 4
  %xor2945 = xor i32 %1087, %1088
  %arraydecay2946 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2947 = bitcast %union.char64long16* %arraydecay2946 to [16 x i32]*
  %arrayidx2948 = getelementptr inbounds [16 x i32], [16 x i32]* %l2947, i64 0, i64 9
  %1089 = load i32, i32* %arrayidx2948, align 4
  %xor2949 = xor i32 %xor2945, %1089
  %arraydecay2950 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2951 = bitcast %union.char64long16* %arraydecay2950 to [16 x i32]*
  %arrayidx2952 = getelementptr inbounds [16 x i32], [16 x i32]* %l2951, i64 0, i64 7
  %1090 = load i32, i32* %arrayidx2952, align 4
  %xor2953 = xor i32 %xor2949, %1090
  %shr2954 = lshr i32 %xor2953, 31
  %or2955 = or i32 %shl2938, %shr2954
  %arraydecay2956 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2957 = bitcast %union.char64long16* %arraydecay2956 to [16 x i32]*
  %arrayidx2958 = getelementptr inbounds [16 x i32], [16 x i32]* %l2957, i64 0, i64 7
  store i32 %or2955, i32* %arrayidx2958, align 4
  %add2959 = add i32 %xor2922, %or2955
  %add2960 = add i32 %add2959, -899497514
  %1091 = load i32, i32* %e, align 4
  %shl2961 = shl i32 %1091, 5
  %1092 = load i32, i32* %e, align 4
  %shr2962 = lshr i32 %1092, 27
  %or2963 = or i32 %shl2961, %shr2962
  %add2964 = add i32 %add2960, %or2963
  %1093 = load i32, i32* %d, align 4
  %add2965 = add i32 %1093, %add2964
  store i32 %add2965, i32* %d, align 4
  %1094 = load i32, i32* %a, align 4
  %shl2966 = shl i32 %1094, 30
  %1095 = load i32, i32* %a, align 4
  %shr2967 = lshr i32 %1095, 2
  %or2968 = or i32 %shl2966, %shr2967
  store i32 %or2968, i32* %a, align 4
  %1096 = load i32, i32* %e, align 4
  %1097 = load i32, i32* %a, align 4
  %xor2969 = xor i32 %1096, %1097
  %1098 = load i32, i32* %b, align 4
  %xor2970 = xor i32 %xor2969, %1098
  %arraydecay2971 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2972 = bitcast %union.char64long16* %arraydecay2971 to [16 x i32]*
  %arrayidx2973 = getelementptr inbounds [16 x i32], [16 x i32]* %l2972, i64 0, i64 5
  %1099 = load i32, i32* %arrayidx2973, align 4
  %arraydecay2974 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2975 = bitcast %union.char64long16* %arraydecay2974 to [16 x i32]*
  %arrayidx2976 = getelementptr inbounds [16 x i32], [16 x i32]* %l2975, i64 0, i64 0
  %1100 = load i32, i32* %arrayidx2976, align 16
  %xor2977 = xor i32 %1099, %1100
  %arraydecay2978 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2979 = bitcast %union.char64long16* %arraydecay2978 to [16 x i32]*
  %arrayidx2980 = getelementptr inbounds [16 x i32], [16 x i32]* %l2979, i64 0, i64 10
  %1101 = load i32, i32* %arrayidx2980, align 8
  %xor2981 = xor i32 %xor2977, %1101
  %arraydecay2982 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2983 = bitcast %union.char64long16* %arraydecay2982 to [16 x i32]*
  %arrayidx2984 = getelementptr inbounds [16 x i32], [16 x i32]* %l2983, i64 0, i64 8
  %1102 = load i32, i32* %arrayidx2984, align 16
  %xor2985 = xor i32 %xor2981, %1102
  %shl2986 = shl i32 %xor2985, 1
  %arraydecay2987 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2988 = bitcast %union.char64long16* %arraydecay2987 to [16 x i32]*
  %arrayidx2989 = getelementptr inbounds [16 x i32], [16 x i32]* %l2988, i64 0, i64 5
  %1103 = load i32, i32* %arrayidx2989, align 4
  %arraydecay2990 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2991 = bitcast %union.char64long16* %arraydecay2990 to [16 x i32]*
  %arrayidx2992 = getelementptr inbounds [16 x i32], [16 x i32]* %l2991, i64 0, i64 0
  %1104 = load i32, i32* %arrayidx2992, align 16
  %xor2993 = xor i32 %1103, %1104
  %arraydecay2994 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2995 = bitcast %union.char64long16* %arraydecay2994 to [16 x i32]*
  %arrayidx2996 = getelementptr inbounds [16 x i32], [16 x i32]* %l2995, i64 0, i64 10
  %1105 = load i32, i32* %arrayidx2996, align 8
  %xor2997 = xor i32 %xor2993, %1105
  %arraydecay2998 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l2999 = bitcast %union.char64long16* %arraydecay2998 to [16 x i32]*
  %arrayidx3000 = getelementptr inbounds [16 x i32], [16 x i32]* %l2999, i64 0, i64 8
  %1106 = load i32, i32* %arrayidx3000, align 16
  %xor3001 = xor i32 %xor2997, %1106
  %shr3002 = lshr i32 %xor3001, 31
  %or3003 = or i32 %shl2986, %shr3002
  %arraydecay3004 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3005 = bitcast %union.char64long16* %arraydecay3004 to [16 x i32]*
  %arrayidx3006 = getelementptr inbounds [16 x i32], [16 x i32]* %l3005, i64 0, i64 8
  store i32 %or3003, i32* %arrayidx3006, align 16
  %add3007 = add i32 %xor2970, %or3003
  %add3008 = add i32 %add3007, -899497514
  %1107 = load i32, i32* %d, align 4
  %shl3009 = shl i32 %1107, 5
  %1108 = load i32, i32* %d, align 4
  %shr3010 = lshr i32 %1108, 27
  %or3011 = or i32 %shl3009, %shr3010
  %add3012 = add i32 %add3008, %or3011
  %1109 = load i32, i32* %c, align 4
  %add3013 = add i32 %1109, %add3012
  store i32 %add3013, i32* %c, align 4
  %1110 = load i32, i32* %e, align 4
  %shl3014 = shl i32 %1110, 30
  %1111 = load i32, i32* %e, align 4
  %shr3015 = lshr i32 %1111, 2
  %or3016 = or i32 %shl3014, %shr3015
  store i32 %or3016, i32* %e, align 4
  %1112 = load i32, i32* %d, align 4
  %1113 = load i32, i32* %e, align 4
  %xor3017 = xor i32 %1112, %1113
  %1114 = load i32, i32* %a, align 4
  %xor3018 = xor i32 %xor3017, %1114
  %arraydecay3019 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3020 = bitcast %union.char64long16* %arraydecay3019 to [16 x i32]*
  %arrayidx3021 = getelementptr inbounds [16 x i32], [16 x i32]* %l3020, i64 0, i64 6
  %1115 = load i32, i32* %arrayidx3021, align 8
  %arraydecay3022 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3023 = bitcast %union.char64long16* %arraydecay3022 to [16 x i32]*
  %arrayidx3024 = getelementptr inbounds [16 x i32], [16 x i32]* %l3023, i64 0, i64 1
  %1116 = load i32, i32* %arrayidx3024, align 4
  %xor3025 = xor i32 %1115, %1116
  %arraydecay3026 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3027 = bitcast %union.char64long16* %arraydecay3026 to [16 x i32]*
  %arrayidx3028 = getelementptr inbounds [16 x i32], [16 x i32]* %l3027, i64 0, i64 11
  %1117 = load i32, i32* %arrayidx3028, align 4
  %xor3029 = xor i32 %xor3025, %1117
  %arraydecay3030 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3031 = bitcast %union.char64long16* %arraydecay3030 to [16 x i32]*
  %arrayidx3032 = getelementptr inbounds [16 x i32], [16 x i32]* %l3031, i64 0, i64 9
  %1118 = load i32, i32* %arrayidx3032, align 4
  %xor3033 = xor i32 %xor3029, %1118
  %shl3034 = shl i32 %xor3033, 1
  %arraydecay3035 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3036 = bitcast %union.char64long16* %arraydecay3035 to [16 x i32]*
  %arrayidx3037 = getelementptr inbounds [16 x i32], [16 x i32]* %l3036, i64 0, i64 6
  %1119 = load i32, i32* %arrayidx3037, align 8
  %arraydecay3038 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3039 = bitcast %union.char64long16* %arraydecay3038 to [16 x i32]*
  %arrayidx3040 = getelementptr inbounds [16 x i32], [16 x i32]* %l3039, i64 0, i64 1
  %1120 = load i32, i32* %arrayidx3040, align 4
  %xor3041 = xor i32 %1119, %1120
  %arraydecay3042 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3043 = bitcast %union.char64long16* %arraydecay3042 to [16 x i32]*
  %arrayidx3044 = getelementptr inbounds [16 x i32], [16 x i32]* %l3043, i64 0, i64 11
  %1121 = load i32, i32* %arrayidx3044, align 4
  %xor3045 = xor i32 %xor3041, %1121
  %arraydecay3046 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3047 = bitcast %union.char64long16* %arraydecay3046 to [16 x i32]*
  %arrayidx3048 = getelementptr inbounds [16 x i32], [16 x i32]* %l3047, i64 0, i64 9
  %1122 = load i32, i32* %arrayidx3048, align 4
  %xor3049 = xor i32 %xor3045, %1122
  %shr3050 = lshr i32 %xor3049, 31
  %or3051 = or i32 %shl3034, %shr3050
  %arraydecay3052 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3053 = bitcast %union.char64long16* %arraydecay3052 to [16 x i32]*
  %arrayidx3054 = getelementptr inbounds [16 x i32], [16 x i32]* %l3053, i64 0, i64 9
  store i32 %or3051, i32* %arrayidx3054, align 4
  %add3055 = add i32 %xor3018, %or3051
  %add3056 = add i32 %add3055, -899497514
  %1123 = load i32, i32* %c, align 4
  %shl3057 = shl i32 %1123, 5
  %1124 = load i32, i32* %c, align 4
  %shr3058 = lshr i32 %1124, 27
  %or3059 = or i32 %shl3057, %shr3058
  %add3060 = add i32 %add3056, %or3059
  %1125 = load i32, i32* %b, align 4
  %add3061 = add i32 %1125, %add3060
  store i32 %add3061, i32* %b, align 4
  %1126 = load i32, i32* %d, align 4
  %shl3062 = shl i32 %1126, 30
  %1127 = load i32, i32* %d, align 4
  %shr3063 = lshr i32 %1127, 2
  %or3064 = or i32 %shl3062, %shr3063
  store i32 %or3064, i32* %d, align 4
  %1128 = load i32, i32* %c, align 4
  %1129 = load i32, i32* %d, align 4
  %xor3065 = xor i32 %1128, %1129
  %1130 = load i32, i32* %e, align 4
  %xor3066 = xor i32 %xor3065, %1130
  %arraydecay3067 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3068 = bitcast %union.char64long16* %arraydecay3067 to [16 x i32]*
  %arrayidx3069 = getelementptr inbounds [16 x i32], [16 x i32]* %l3068, i64 0, i64 7
  %1131 = load i32, i32* %arrayidx3069, align 4
  %arraydecay3070 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3071 = bitcast %union.char64long16* %arraydecay3070 to [16 x i32]*
  %arrayidx3072 = getelementptr inbounds [16 x i32], [16 x i32]* %l3071, i64 0, i64 2
  %1132 = load i32, i32* %arrayidx3072, align 8
  %xor3073 = xor i32 %1131, %1132
  %arraydecay3074 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3075 = bitcast %union.char64long16* %arraydecay3074 to [16 x i32]*
  %arrayidx3076 = getelementptr inbounds [16 x i32], [16 x i32]* %l3075, i64 0, i64 12
  %1133 = load i32, i32* %arrayidx3076, align 16
  %xor3077 = xor i32 %xor3073, %1133
  %arraydecay3078 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3079 = bitcast %union.char64long16* %arraydecay3078 to [16 x i32]*
  %arrayidx3080 = getelementptr inbounds [16 x i32], [16 x i32]* %l3079, i64 0, i64 10
  %1134 = load i32, i32* %arrayidx3080, align 8
  %xor3081 = xor i32 %xor3077, %1134
  %shl3082 = shl i32 %xor3081, 1
  %arraydecay3083 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3084 = bitcast %union.char64long16* %arraydecay3083 to [16 x i32]*
  %arrayidx3085 = getelementptr inbounds [16 x i32], [16 x i32]* %l3084, i64 0, i64 7
  %1135 = load i32, i32* %arrayidx3085, align 4
  %arraydecay3086 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3087 = bitcast %union.char64long16* %arraydecay3086 to [16 x i32]*
  %arrayidx3088 = getelementptr inbounds [16 x i32], [16 x i32]* %l3087, i64 0, i64 2
  %1136 = load i32, i32* %arrayidx3088, align 8
  %xor3089 = xor i32 %1135, %1136
  %arraydecay3090 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3091 = bitcast %union.char64long16* %arraydecay3090 to [16 x i32]*
  %arrayidx3092 = getelementptr inbounds [16 x i32], [16 x i32]* %l3091, i64 0, i64 12
  %1137 = load i32, i32* %arrayidx3092, align 16
  %xor3093 = xor i32 %xor3089, %1137
  %arraydecay3094 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3095 = bitcast %union.char64long16* %arraydecay3094 to [16 x i32]*
  %arrayidx3096 = getelementptr inbounds [16 x i32], [16 x i32]* %l3095, i64 0, i64 10
  %1138 = load i32, i32* %arrayidx3096, align 8
  %xor3097 = xor i32 %xor3093, %1138
  %shr3098 = lshr i32 %xor3097, 31
  %or3099 = or i32 %shl3082, %shr3098
  %arraydecay3100 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3101 = bitcast %union.char64long16* %arraydecay3100 to [16 x i32]*
  %arrayidx3102 = getelementptr inbounds [16 x i32], [16 x i32]* %l3101, i64 0, i64 10
  store i32 %or3099, i32* %arrayidx3102, align 8
  %add3103 = add i32 %xor3066, %or3099
  %add3104 = add i32 %add3103, -899497514
  %1139 = load i32, i32* %b, align 4
  %shl3105 = shl i32 %1139, 5
  %1140 = load i32, i32* %b, align 4
  %shr3106 = lshr i32 %1140, 27
  %or3107 = or i32 %shl3105, %shr3106
  %add3108 = add i32 %add3104, %or3107
  %1141 = load i32, i32* %a, align 4
  %add3109 = add i32 %1141, %add3108
  store i32 %add3109, i32* %a, align 4
  %1142 = load i32, i32* %c, align 4
  %shl3110 = shl i32 %1142, 30
  %1143 = load i32, i32* %c, align 4
  %shr3111 = lshr i32 %1143, 2
  %or3112 = or i32 %shl3110, %shr3111
  store i32 %or3112, i32* %c, align 4
  %1144 = load i32, i32* %b, align 4
  %1145 = load i32, i32* %c, align 4
  %xor3113 = xor i32 %1144, %1145
  %1146 = load i32, i32* %d, align 4
  %xor3114 = xor i32 %xor3113, %1146
  %arraydecay3115 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3116 = bitcast %union.char64long16* %arraydecay3115 to [16 x i32]*
  %arrayidx3117 = getelementptr inbounds [16 x i32], [16 x i32]* %l3116, i64 0, i64 8
  %1147 = load i32, i32* %arrayidx3117, align 16
  %arraydecay3118 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3119 = bitcast %union.char64long16* %arraydecay3118 to [16 x i32]*
  %arrayidx3120 = getelementptr inbounds [16 x i32], [16 x i32]* %l3119, i64 0, i64 3
  %1148 = load i32, i32* %arrayidx3120, align 4
  %xor3121 = xor i32 %1147, %1148
  %arraydecay3122 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3123 = bitcast %union.char64long16* %arraydecay3122 to [16 x i32]*
  %arrayidx3124 = getelementptr inbounds [16 x i32], [16 x i32]* %l3123, i64 0, i64 13
  %1149 = load i32, i32* %arrayidx3124, align 4
  %xor3125 = xor i32 %xor3121, %1149
  %arraydecay3126 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3127 = bitcast %union.char64long16* %arraydecay3126 to [16 x i32]*
  %arrayidx3128 = getelementptr inbounds [16 x i32], [16 x i32]* %l3127, i64 0, i64 11
  %1150 = load i32, i32* %arrayidx3128, align 4
  %xor3129 = xor i32 %xor3125, %1150
  %shl3130 = shl i32 %xor3129, 1
  %arraydecay3131 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3132 = bitcast %union.char64long16* %arraydecay3131 to [16 x i32]*
  %arrayidx3133 = getelementptr inbounds [16 x i32], [16 x i32]* %l3132, i64 0, i64 8
  %1151 = load i32, i32* %arrayidx3133, align 16
  %arraydecay3134 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3135 = bitcast %union.char64long16* %arraydecay3134 to [16 x i32]*
  %arrayidx3136 = getelementptr inbounds [16 x i32], [16 x i32]* %l3135, i64 0, i64 3
  %1152 = load i32, i32* %arrayidx3136, align 4
  %xor3137 = xor i32 %1151, %1152
  %arraydecay3138 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3139 = bitcast %union.char64long16* %arraydecay3138 to [16 x i32]*
  %arrayidx3140 = getelementptr inbounds [16 x i32], [16 x i32]* %l3139, i64 0, i64 13
  %1153 = load i32, i32* %arrayidx3140, align 4
  %xor3141 = xor i32 %xor3137, %1153
  %arraydecay3142 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3143 = bitcast %union.char64long16* %arraydecay3142 to [16 x i32]*
  %arrayidx3144 = getelementptr inbounds [16 x i32], [16 x i32]* %l3143, i64 0, i64 11
  %1154 = load i32, i32* %arrayidx3144, align 4
  %xor3145 = xor i32 %xor3141, %1154
  %shr3146 = lshr i32 %xor3145, 31
  %or3147 = or i32 %shl3130, %shr3146
  %arraydecay3148 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3149 = bitcast %union.char64long16* %arraydecay3148 to [16 x i32]*
  %arrayidx3150 = getelementptr inbounds [16 x i32], [16 x i32]* %l3149, i64 0, i64 11
  store i32 %or3147, i32* %arrayidx3150, align 4
  %add3151 = add i32 %xor3114, %or3147
  %add3152 = add i32 %add3151, -899497514
  %1155 = load i32, i32* %a, align 4
  %shl3153 = shl i32 %1155, 5
  %1156 = load i32, i32* %a, align 4
  %shr3154 = lshr i32 %1156, 27
  %or3155 = or i32 %shl3153, %shr3154
  %add3156 = add i32 %add3152, %or3155
  %1157 = load i32, i32* %e, align 4
  %add3157 = add i32 %1157, %add3156
  store i32 %add3157, i32* %e, align 4
  %1158 = load i32, i32* %b, align 4
  %shl3158 = shl i32 %1158, 30
  %1159 = load i32, i32* %b, align 4
  %shr3159 = lshr i32 %1159, 2
  %or3160 = or i32 %shl3158, %shr3159
  store i32 %or3160, i32* %b, align 4
  %1160 = load i32, i32* %a, align 4
  %1161 = load i32, i32* %b, align 4
  %xor3161 = xor i32 %1160, %1161
  %1162 = load i32, i32* %c, align 4
  %xor3162 = xor i32 %xor3161, %1162
  %arraydecay3163 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3164 = bitcast %union.char64long16* %arraydecay3163 to [16 x i32]*
  %arrayidx3165 = getelementptr inbounds [16 x i32], [16 x i32]* %l3164, i64 0, i64 9
  %1163 = load i32, i32* %arrayidx3165, align 4
  %arraydecay3166 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3167 = bitcast %union.char64long16* %arraydecay3166 to [16 x i32]*
  %arrayidx3168 = getelementptr inbounds [16 x i32], [16 x i32]* %l3167, i64 0, i64 4
  %1164 = load i32, i32* %arrayidx3168, align 16
  %xor3169 = xor i32 %1163, %1164
  %arraydecay3170 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3171 = bitcast %union.char64long16* %arraydecay3170 to [16 x i32]*
  %arrayidx3172 = getelementptr inbounds [16 x i32], [16 x i32]* %l3171, i64 0, i64 14
  %1165 = load i32, i32* %arrayidx3172, align 8
  %xor3173 = xor i32 %xor3169, %1165
  %arraydecay3174 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3175 = bitcast %union.char64long16* %arraydecay3174 to [16 x i32]*
  %arrayidx3176 = getelementptr inbounds [16 x i32], [16 x i32]* %l3175, i64 0, i64 12
  %1166 = load i32, i32* %arrayidx3176, align 16
  %xor3177 = xor i32 %xor3173, %1166
  %shl3178 = shl i32 %xor3177, 1
  %arraydecay3179 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3180 = bitcast %union.char64long16* %arraydecay3179 to [16 x i32]*
  %arrayidx3181 = getelementptr inbounds [16 x i32], [16 x i32]* %l3180, i64 0, i64 9
  %1167 = load i32, i32* %arrayidx3181, align 4
  %arraydecay3182 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3183 = bitcast %union.char64long16* %arraydecay3182 to [16 x i32]*
  %arrayidx3184 = getelementptr inbounds [16 x i32], [16 x i32]* %l3183, i64 0, i64 4
  %1168 = load i32, i32* %arrayidx3184, align 16
  %xor3185 = xor i32 %1167, %1168
  %arraydecay3186 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3187 = bitcast %union.char64long16* %arraydecay3186 to [16 x i32]*
  %arrayidx3188 = getelementptr inbounds [16 x i32], [16 x i32]* %l3187, i64 0, i64 14
  %1169 = load i32, i32* %arrayidx3188, align 8
  %xor3189 = xor i32 %xor3185, %1169
  %arraydecay3190 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3191 = bitcast %union.char64long16* %arraydecay3190 to [16 x i32]*
  %arrayidx3192 = getelementptr inbounds [16 x i32], [16 x i32]* %l3191, i64 0, i64 12
  %1170 = load i32, i32* %arrayidx3192, align 16
  %xor3193 = xor i32 %xor3189, %1170
  %shr3194 = lshr i32 %xor3193, 31
  %or3195 = or i32 %shl3178, %shr3194
  %arraydecay3196 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3197 = bitcast %union.char64long16* %arraydecay3196 to [16 x i32]*
  %arrayidx3198 = getelementptr inbounds [16 x i32], [16 x i32]* %l3197, i64 0, i64 12
  store i32 %or3195, i32* %arrayidx3198, align 16
  %add3199 = add i32 %xor3162, %or3195
  %add3200 = add i32 %add3199, -899497514
  %1171 = load i32, i32* %e, align 4
  %shl3201 = shl i32 %1171, 5
  %1172 = load i32, i32* %e, align 4
  %shr3202 = lshr i32 %1172, 27
  %or3203 = or i32 %shl3201, %shr3202
  %add3204 = add i32 %add3200, %or3203
  %1173 = load i32, i32* %d, align 4
  %add3205 = add i32 %1173, %add3204
  store i32 %add3205, i32* %d, align 4
  %1174 = load i32, i32* %a, align 4
  %shl3206 = shl i32 %1174, 30
  %1175 = load i32, i32* %a, align 4
  %shr3207 = lshr i32 %1175, 2
  %or3208 = or i32 %shl3206, %shr3207
  store i32 %or3208, i32* %a, align 4
  %1176 = load i32, i32* %e, align 4
  %1177 = load i32, i32* %a, align 4
  %xor3209 = xor i32 %1176, %1177
  %1178 = load i32, i32* %b, align 4
  %xor3210 = xor i32 %xor3209, %1178
  %arraydecay3211 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3212 = bitcast %union.char64long16* %arraydecay3211 to [16 x i32]*
  %arrayidx3213 = getelementptr inbounds [16 x i32], [16 x i32]* %l3212, i64 0, i64 10
  %1179 = load i32, i32* %arrayidx3213, align 8
  %arraydecay3214 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3215 = bitcast %union.char64long16* %arraydecay3214 to [16 x i32]*
  %arrayidx3216 = getelementptr inbounds [16 x i32], [16 x i32]* %l3215, i64 0, i64 5
  %1180 = load i32, i32* %arrayidx3216, align 4
  %xor3217 = xor i32 %1179, %1180
  %arraydecay3218 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3219 = bitcast %union.char64long16* %arraydecay3218 to [16 x i32]*
  %arrayidx3220 = getelementptr inbounds [16 x i32], [16 x i32]* %l3219, i64 0, i64 15
  %1181 = load i32, i32* %arrayidx3220, align 4
  %xor3221 = xor i32 %xor3217, %1181
  %arraydecay3222 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3223 = bitcast %union.char64long16* %arraydecay3222 to [16 x i32]*
  %arrayidx3224 = getelementptr inbounds [16 x i32], [16 x i32]* %l3223, i64 0, i64 13
  %1182 = load i32, i32* %arrayidx3224, align 4
  %xor3225 = xor i32 %xor3221, %1182
  %shl3226 = shl i32 %xor3225, 1
  %arraydecay3227 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3228 = bitcast %union.char64long16* %arraydecay3227 to [16 x i32]*
  %arrayidx3229 = getelementptr inbounds [16 x i32], [16 x i32]* %l3228, i64 0, i64 10
  %1183 = load i32, i32* %arrayidx3229, align 8
  %arraydecay3230 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3231 = bitcast %union.char64long16* %arraydecay3230 to [16 x i32]*
  %arrayidx3232 = getelementptr inbounds [16 x i32], [16 x i32]* %l3231, i64 0, i64 5
  %1184 = load i32, i32* %arrayidx3232, align 4
  %xor3233 = xor i32 %1183, %1184
  %arraydecay3234 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3235 = bitcast %union.char64long16* %arraydecay3234 to [16 x i32]*
  %arrayidx3236 = getelementptr inbounds [16 x i32], [16 x i32]* %l3235, i64 0, i64 15
  %1185 = load i32, i32* %arrayidx3236, align 4
  %xor3237 = xor i32 %xor3233, %1185
  %arraydecay3238 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3239 = bitcast %union.char64long16* %arraydecay3238 to [16 x i32]*
  %arrayidx3240 = getelementptr inbounds [16 x i32], [16 x i32]* %l3239, i64 0, i64 13
  %1186 = load i32, i32* %arrayidx3240, align 4
  %xor3241 = xor i32 %xor3237, %1186
  %shr3242 = lshr i32 %xor3241, 31
  %or3243 = or i32 %shl3226, %shr3242
  %arraydecay3244 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3245 = bitcast %union.char64long16* %arraydecay3244 to [16 x i32]*
  %arrayidx3246 = getelementptr inbounds [16 x i32], [16 x i32]* %l3245, i64 0, i64 13
  store i32 %or3243, i32* %arrayidx3246, align 4
  %add3247 = add i32 %xor3210, %or3243
  %add3248 = add i32 %add3247, -899497514
  %1187 = load i32, i32* %d, align 4
  %shl3249 = shl i32 %1187, 5
  %1188 = load i32, i32* %d, align 4
  %shr3250 = lshr i32 %1188, 27
  %or3251 = or i32 %shl3249, %shr3250
  %add3252 = add i32 %add3248, %or3251
  %1189 = load i32, i32* %c, align 4
  %add3253 = add i32 %1189, %add3252
  store i32 %add3253, i32* %c, align 4
  %1190 = load i32, i32* %e, align 4
  %shl3254 = shl i32 %1190, 30
  %1191 = load i32, i32* %e, align 4
  %shr3255 = lshr i32 %1191, 2
  %or3256 = or i32 %shl3254, %shr3255
  store i32 %or3256, i32* %e, align 4
  %1192 = load i32, i32* %d, align 4
  %1193 = load i32, i32* %e, align 4
  %xor3257 = xor i32 %1192, %1193
  %1194 = load i32, i32* %a, align 4
  %xor3258 = xor i32 %xor3257, %1194
  %arraydecay3259 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3260 = bitcast %union.char64long16* %arraydecay3259 to [16 x i32]*
  %arrayidx3261 = getelementptr inbounds [16 x i32], [16 x i32]* %l3260, i64 0, i64 11
  %1195 = load i32, i32* %arrayidx3261, align 4
  %arraydecay3262 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3263 = bitcast %union.char64long16* %arraydecay3262 to [16 x i32]*
  %arrayidx3264 = getelementptr inbounds [16 x i32], [16 x i32]* %l3263, i64 0, i64 6
  %1196 = load i32, i32* %arrayidx3264, align 8
  %xor3265 = xor i32 %1195, %1196
  %arraydecay3266 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3267 = bitcast %union.char64long16* %arraydecay3266 to [16 x i32]*
  %arrayidx3268 = getelementptr inbounds [16 x i32], [16 x i32]* %l3267, i64 0, i64 0
  %1197 = load i32, i32* %arrayidx3268, align 16
  %xor3269 = xor i32 %xor3265, %1197
  %arraydecay3270 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3271 = bitcast %union.char64long16* %arraydecay3270 to [16 x i32]*
  %arrayidx3272 = getelementptr inbounds [16 x i32], [16 x i32]* %l3271, i64 0, i64 14
  %1198 = load i32, i32* %arrayidx3272, align 8
  %xor3273 = xor i32 %xor3269, %1198
  %shl3274 = shl i32 %xor3273, 1
  %arraydecay3275 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3276 = bitcast %union.char64long16* %arraydecay3275 to [16 x i32]*
  %arrayidx3277 = getelementptr inbounds [16 x i32], [16 x i32]* %l3276, i64 0, i64 11
  %1199 = load i32, i32* %arrayidx3277, align 4
  %arraydecay3278 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3279 = bitcast %union.char64long16* %arraydecay3278 to [16 x i32]*
  %arrayidx3280 = getelementptr inbounds [16 x i32], [16 x i32]* %l3279, i64 0, i64 6
  %1200 = load i32, i32* %arrayidx3280, align 8
  %xor3281 = xor i32 %1199, %1200
  %arraydecay3282 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3283 = bitcast %union.char64long16* %arraydecay3282 to [16 x i32]*
  %arrayidx3284 = getelementptr inbounds [16 x i32], [16 x i32]* %l3283, i64 0, i64 0
  %1201 = load i32, i32* %arrayidx3284, align 16
  %xor3285 = xor i32 %xor3281, %1201
  %arraydecay3286 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3287 = bitcast %union.char64long16* %arraydecay3286 to [16 x i32]*
  %arrayidx3288 = getelementptr inbounds [16 x i32], [16 x i32]* %l3287, i64 0, i64 14
  %1202 = load i32, i32* %arrayidx3288, align 8
  %xor3289 = xor i32 %xor3285, %1202
  %shr3290 = lshr i32 %xor3289, 31
  %or3291 = or i32 %shl3274, %shr3290
  %arraydecay3292 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3293 = bitcast %union.char64long16* %arraydecay3292 to [16 x i32]*
  %arrayidx3294 = getelementptr inbounds [16 x i32], [16 x i32]* %l3293, i64 0, i64 14
  store i32 %or3291, i32* %arrayidx3294, align 8
  %add3295 = add i32 %xor3258, %or3291
  %add3296 = add i32 %add3295, -899497514
  %1203 = load i32, i32* %c, align 4
  %shl3297 = shl i32 %1203, 5
  %1204 = load i32, i32* %c, align 4
  %shr3298 = lshr i32 %1204, 27
  %or3299 = or i32 %shl3297, %shr3298
  %add3300 = add i32 %add3296, %or3299
  %1205 = load i32, i32* %b, align 4
  %add3301 = add i32 %1205, %add3300
  store i32 %add3301, i32* %b, align 4
  %1206 = load i32, i32* %d, align 4
  %shl3302 = shl i32 %1206, 30
  %1207 = load i32, i32* %d, align 4
  %shr3303 = lshr i32 %1207, 2
  %or3304 = or i32 %shl3302, %shr3303
  store i32 %or3304, i32* %d, align 4
  %1208 = load i32, i32* %c, align 4
  %1209 = load i32, i32* %d, align 4
  %xor3305 = xor i32 %1208, %1209
  %1210 = load i32, i32* %e, align 4
  %xor3306 = xor i32 %xor3305, %1210
  %arraydecay3307 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3308 = bitcast %union.char64long16* %arraydecay3307 to [16 x i32]*
  %arrayidx3309 = getelementptr inbounds [16 x i32], [16 x i32]* %l3308, i64 0, i64 12
  %1211 = load i32, i32* %arrayidx3309, align 16
  %arraydecay3310 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3311 = bitcast %union.char64long16* %arraydecay3310 to [16 x i32]*
  %arrayidx3312 = getelementptr inbounds [16 x i32], [16 x i32]* %l3311, i64 0, i64 7
  %1212 = load i32, i32* %arrayidx3312, align 4
  %xor3313 = xor i32 %1211, %1212
  %arraydecay3314 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3315 = bitcast %union.char64long16* %arraydecay3314 to [16 x i32]*
  %arrayidx3316 = getelementptr inbounds [16 x i32], [16 x i32]* %l3315, i64 0, i64 1
  %1213 = load i32, i32* %arrayidx3316, align 4
  %xor3317 = xor i32 %xor3313, %1213
  %arraydecay3318 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3319 = bitcast %union.char64long16* %arraydecay3318 to [16 x i32]*
  %arrayidx3320 = getelementptr inbounds [16 x i32], [16 x i32]* %l3319, i64 0, i64 15
  %1214 = load i32, i32* %arrayidx3320, align 4
  %xor3321 = xor i32 %xor3317, %1214
  %shl3322 = shl i32 %xor3321, 1
  %arraydecay3323 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3324 = bitcast %union.char64long16* %arraydecay3323 to [16 x i32]*
  %arrayidx3325 = getelementptr inbounds [16 x i32], [16 x i32]* %l3324, i64 0, i64 12
  %1215 = load i32, i32* %arrayidx3325, align 16
  %arraydecay3326 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3327 = bitcast %union.char64long16* %arraydecay3326 to [16 x i32]*
  %arrayidx3328 = getelementptr inbounds [16 x i32], [16 x i32]* %l3327, i64 0, i64 7
  %1216 = load i32, i32* %arrayidx3328, align 4
  %xor3329 = xor i32 %1215, %1216
  %arraydecay3330 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3331 = bitcast %union.char64long16* %arraydecay3330 to [16 x i32]*
  %arrayidx3332 = getelementptr inbounds [16 x i32], [16 x i32]* %l3331, i64 0, i64 1
  %1217 = load i32, i32* %arrayidx3332, align 4
  %xor3333 = xor i32 %xor3329, %1217
  %arraydecay3334 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3335 = bitcast %union.char64long16* %arraydecay3334 to [16 x i32]*
  %arrayidx3336 = getelementptr inbounds [16 x i32], [16 x i32]* %l3335, i64 0, i64 15
  %1218 = load i32, i32* %arrayidx3336, align 4
  %xor3337 = xor i32 %xor3333, %1218
  %shr3338 = lshr i32 %xor3337, 31
  %or3339 = or i32 %shl3322, %shr3338
  %arraydecay3340 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %l3341 = bitcast %union.char64long16* %arraydecay3340 to [16 x i32]*
  %arrayidx3342 = getelementptr inbounds [16 x i32], [16 x i32]* %l3341, i64 0, i64 15
  store i32 %or3339, i32* %arrayidx3342, align 4
  %add3343 = add i32 %xor3306, %or3339
  %add3344 = add i32 %add3343, -899497514
  %1219 = load i32, i32* %b, align 4
  %shl3345 = shl i32 %1219, 5
  %1220 = load i32, i32* %b, align 4
  %shr3346 = lshr i32 %1220, 27
  %or3347 = or i32 %shl3345, %shr3346
  %add3348 = add i32 %add3344, %or3347
  %1221 = load i32, i32* %a, align 4
  %add3349 = add i32 %1221, %add3348
  store i32 %add3349, i32* %a, align 4
  %1222 = load i32, i32* %c, align 4
  %shl3350 = shl i32 %1222, 30
  %1223 = load i32, i32* %c, align 4
  %shr3351 = lshr i32 %1223, 2
  %or3352 = or i32 %shl3350, %shr3351
  store i32 %or3352, i32* %c, align 4
  %1224 = load i32, i32* %a, align 4
  %1225 = load i32*, i32** %state.addr, align 8
  %arrayidx3353 = getelementptr inbounds i32, i32* %1225, i64 0
  %1226 = load i32, i32* %arrayidx3353, align 4
  %add3354 = add i32 %1226, %1224
  store i32 %add3354, i32* %arrayidx3353, align 4
  %1227 = load i32, i32* %b, align 4
  %1228 = load i32*, i32** %state.addr, align 8
  %arrayidx3355 = getelementptr inbounds i32, i32* %1228, i64 1
  %1229 = load i32, i32* %arrayidx3355, align 4
  %add3356 = add i32 %1229, %1227
  store i32 %add3356, i32* %arrayidx3355, align 4
  %1230 = load i32, i32* %c, align 4
  %1231 = load i32*, i32** %state.addr, align 8
  %arrayidx3357 = getelementptr inbounds i32, i32* %1231, i64 2
  %1232 = load i32, i32* %arrayidx3357, align 4
  %add3358 = add i32 %1232, %1230
  store i32 %add3358, i32* %arrayidx3357, align 4
  %1233 = load i32, i32* %d, align 4
  %1234 = load i32*, i32** %state.addr, align 8
  %arrayidx3359 = getelementptr inbounds i32, i32* %1234, i64 3
  %1235 = load i32, i32* %arrayidx3359, align 4
  %add3360 = add i32 %1235, %1233
  store i32 %add3360, i32* %arrayidx3359, align 4
  %1236 = load i32, i32* %e, align 4
  %1237 = load i32*, i32** %state.addr, align 8
  %arrayidx3361 = getelementptr inbounds i32, i32* %1237, i64 4
  %1238 = load i32, i32* %arrayidx3361, align 4
  %add3362 = add i32 %1238, %1236
  store i32 %add3362, i32* %arrayidx3361, align 4
  %arraydecay3363 = getelementptr inbounds [1 x %union.char64long16], [1 x %union.char64long16]* %block, i32 0, i32 0
  %1239 = bitcast %union.char64long16* %arraydecay3363 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1239, i8 0, i64 64, i32 16, i1 false)
  store i32 0, i32* %e, align 4
  store i32 0, i32* %d, align 4
  store i32 0, i32* %c, align 4
  store i32 0, i32* %b, align 4
  store i32 0, i32* %a, align 4
  %1240 = load i32, i32* %a, align 4
  %1241 = load i32, i32* %b, align 4
  %1242 = load i32, i32* %c, align 4
  %1243 = load i32, i32* %d, align 4
  %1244 = load i32, i32* %e, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @blk0(%union.char64long16* %block, i32 %i) #0 {
entry:
  %block.addr = alloca %union.char64long16*, align 8
  %i.addr = alloca i32, align 4
  store %union.char64long16* %block, %union.char64long16** %block.addr, align 8
  store i32 %i, i32* %i.addr, align 4
  %0 = load %union.char64long16*, %union.char64long16** %block.addr, align 8
  %l = bitcast %union.char64long16* %0 to [16 x i32]*
  %1 = load i32, i32* %i.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* %l, i64 0, i64 %idxprom
  %2 = load i32, i32* %arrayidx, align 4
  %shl = shl i32 %2, 24
  %3 = load %union.char64long16*, %union.char64long16** %block.addr, align 8
  %l1 = bitcast %union.char64long16* %3 to [16 x i32]*
  %4 = load i32, i32* %i.addr, align 4
  %idxprom2 = sext i32 %4 to i64
  %arrayidx3 = getelementptr inbounds [16 x i32], [16 x i32]* %l1, i64 0, i64 %idxprom2
  %5 = load i32, i32* %arrayidx3, align 4
  %shr = lshr i32 %5, 8
  %or = or i32 %shl, %shr
  %and = and i32 %or, -16711936
  %6 = load %union.char64long16*, %union.char64long16** %block.addr, align 8
  %l4 = bitcast %union.char64long16* %6 to [16 x i32]*
  %7 = load i32, i32* %i.addr, align 4
  %idxprom5 = sext i32 %7 to i64
  %arrayidx6 = getelementptr inbounds [16 x i32], [16 x i32]* %l4, i64 0, i64 %idxprom5
  %8 = load i32, i32* %arrayidx6, align 4
  %shl7 = shl i32 %8, 8
  %9 = load %union.char64long16*, %union.char64long16** %block.addr, align 8
  %l8 = bitcast %union.char64long16* %9 to [16 x i32]*
  %10 = load i32, i32* %i.addr, align 4
  %idxprom9 = sext i32 %10 to i64
  %arrayidx10 = getelementptr inbounds [16 x i32], [16 x i32]* %l8, i64 0, i64 %idxprom9
  %11 = load i32, i32* %arrayidx10, align 4
  %shr11 = lshr i32 %11, 24
  %or12 = or i32 %shl7, %shr11
  %and13 = and i32 %or12, 16711935
  %or14 = or i32 %and, %and13
  %12 = load %union.char64long16*, %union.char64long16** %block.addr, align 8
  %l15 = bitcast %union.char64long16* %12 to [16 x i32]*
  %13 = load i32, i32* %i.addr, align 4
  %idxprom16 = sext i32 %13 to i64
  %arrayidx17 = getelementptr inbounds [16 x i32], [16 x i32]* %l15, i64 0, i64 %idxprom16
  store i32 %or14, i32* %arrayidx17, align 4
  %14 = load %union.char64long16*, %union.char64long16** %block.addr, align 8
  %l18 = bitcast %union.char64long16* %14 to [16 x i32]*
  %15 = load i32, i32* %i.addr, align 4
  %idxprom19 = sext i32 %15 to i64
  %arrayidx20 = getelementptr inbounds [16 x i32], [16 x i32]* %l18, i64 0, i64 %idxprom19
  %16 = load i32, i32* %arrayidx20, align 4
  ret i32 %16
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #4

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_sha1_init(%struct.cs_sha1_ctx* %context) #0 {
entry:
  %context.addr = alloca %struct.cs_sha1_ctx*, align 8
  store %struct.cs_sha1_ctx* %context, %struct.cs_sha1_ctx** %context.addr, align 8
  %0 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %state = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %0, i32 0, i32 0
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* %state, i64 0, i64 0
  store i32 1732584193, i32* %arrayidx, align 4
  %1 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %state1 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %1, i32 0, i32 0
  %arrayidx2 = getelementptr inbounds [5 x i32], [5 x i32]* %state1, i64 0, i64 1
  store i32 -271733879, i32* %arrayidx2, align 4
  %2 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %state3 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %2, i32 0, i32 0
  %arrayidx4 = getelementptr inbounds [5 x i32], [5 x i32]* %state3, i64 0, i64 2
  store i32 -1732584194, i32* %arrayidx4, align 4
  %3 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %state5 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %3, i32 0, i32 0
  %arrayidx6 = getelementptr inbounds [5 x i32], [5 x i32]* %state5, i64 0, i64 3
  store i32 271733878, i32* %arrayidx6, align 4
  %4 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %state7 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %4, i32 0, i32 0
  %arrayidx8 = getelementptr inbounds [5 x i32], [5 x i32]* %state7, i64 0, i64 4
  store i32 -1009589776, i32* %arrayidx8, align 4
  %5 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %count = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %5, i32 0, i32 1
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %count, i64 0, i64 1
  store i32 0, i32* %arrayidx9, align 4
  %6 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %count10 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %6, i32 0, i32 1
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %count10, i64 0, i64 0
  store i32 0, i32* %arrayidx11, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_sha1_update(%struct.cs_sha1_ctx* %context, i8* %data, i32 %len) #0 {
entry:
  %context.addr = alloca %struct.cs_sha1_ctx*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.cs_sha1_ctx* %context, %struct.cs_sha1_ctx** %context.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %count = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %0, i32 0, i32 1
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %count, i64 0, i64 0
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %j, align 4
  %2 = load i32, i32* %len.addr, align 4
  %shl = shl i32 %2, 3
  %3 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %count1 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %3, i32 0, i32 1
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %count1, i64 0, i64 0
  %4 = load i32, i32* %arrayidx2, align 4
  %add = add i32 %4, %shl
  store i32 %add, i32* %arrayidx2, align 4
  %5 = load i32, i32* %j, align 4
  %cmp = icmp ult i32 %add, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %count3 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %6, i32 0, i32 1
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %count3, i64 0, i64 1
  %7 = load i32, i32* %arrayidx4, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %arrayidx4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %len.addr, align 4
  %shr = lshr i32 %8, 29
  %9 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %count5 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %9, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %count5, i64 0, i64 1
  %10 = load i32, i32* %arrayidx6, align 4
  %add7 = add i32 %10, %shr
  store i32 %add7, i32* %arrayidx6, align 4
  %11 = load i32, i32* %j, align 4
  %shr8 = lshr i32 %11, 3
  %and = and i32 %shr8, 63
  store i32 %and, i32* %j, align 4
  %12 = load i32, i32* %j, align 4
  %13 = load i32, i32* %len.addr, align 4
  %add9 = add i32 %12, %13
  %cmp10 = icmp ugt i32 %add9, 63
  br i1 %cmp10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.end
  %14 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %buffer = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %14, i32 0, i32 2
  %15 = load i32, i32* %j, align 4
  %idxprom = zext i32 %15 to i64
  %arrayidx12 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer, i64 0, i64 %idxprom
  %16 = load i8*, i8** %data.addr, align 8
  %17 = load i32, i32* %j, align 4
  %sub = sub i32 64, %17
  store i32 %sub, i32* %i, align 4
  %conv = zext i32 %sub to i64
  %18 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %buffer13 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %18, i32 0, i32 2
  %19 = load i32, i32* %j, align 4
  %idxprom14 = zext i32 %19 to i64
  %arrayidx15 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer13, i64 0, i64 %idxprom14
  %20 = call i64 @llvm.objectsize.i64.p0i8(i8* %arrayidx15, i1 false)
  %call = call i8* @__memcpy_chk(i8* %arrayidx12, i8* %16, i64 %conv, i64 %20) #5
  %21 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %state = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %21, i32 0, i32 0
  %arraydecay = getelementptr inbounds [5 x i32], [5 x i32]* %state, i32 0, i32 0
  %22 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %buffer16 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %22, i32 0, i32 2
  %arraydecay17 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer16, i32 0, i32 0
  call void @cs_sha1_transform(i32* %arraydecay, i8* %arraydecay17)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then11
  %23 = load i32, i32* %i, align 4
  %add18 = add i32 %23, 63
  %24 = load i32, i32* %len.addr, align 4
  %cmp19 = icmp ult i32 %add18, %24
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %state21 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %25, i32 0, i32 0
  %arraydecay22 = getelementptr inbounds [5 x i32], [5 x i32]* %state21, i32 0, i32 0
  %26 = load i8*, i8** %data.addr, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom23 = zext i32 %27 to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %26, i64 %idxprom23
  call void @cs_sha1_transform(i32* %arraydecay22, i8* %arrayidx24)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %28 = load i32, i32* %i, align 4
  %add25 = add i32 %28, 64
  store i32 %add25, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %j, align 4
  br label %if.end26

if.else:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else, %for.end
  %29 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %buffer27 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %29, i32 0, i32 2
  %30 = load i32, i32* %j, align 4
  %idxprom28 = zext i32 %30 to i64
  %arrayidx29 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer27, i64 0, i64 %idxprom28
  %31 = load i8*, i8** %data.addr, align 8
  %32 = load i32, i32* %i, align 4
  %idxprom30 = zext i32 %32 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %31, i64 %idxprom30
  %33 = load i32, i32* %len.addr, align 4
  %34 = load i32, i32* %i, align 4
  %sub32 = sub i32 %33, %34
  %conv33 = zext i32 %sub32 to i64
  %35 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %buffer34 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %35, i32 0, i32 2
  %36 = load i32, i32* %j, align 4
  %idxprom35 = zext i32 %36 to i64
  %arrayidx36 = getelementptr inbounds [64 x i8], [64 x i8]* %buffer34, i64 0, i64 %idxprom35
  %37 = call i64 @llvm.objectsize.i64.p0i8(i8* %arrayidx36, i1 false)
  %call37 = call i8* @__memcpy_chk(i8* %arrayidx29, i8* %arrayidx31, i64 %conv33, i64 %37) #5
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_sha1_final(i8* %digest, %struct.cs_sha1_ctx* %context) #0 {
entry:
  %digest.addr = alloca i8*, align 8
  %context.addr = alloca %struct.cs_sha1_ctx*, align 8
  %i = alloca i32, align 4
  %finalcount = alloca [8 x i8], align 1
  %c = alloca i8, align 1
  store i8* %digest, i8** %digest.addr, align 8
  store %struct.cs_sha1_ctx* %context, %struct.cs_sha1_ctx** %context.addr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %count = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %1, i32 0, i32 1
  %2 = load i32, i32* %i, align 4
  %cmp1 = icmp uge i32 %2, 4
  %cond = select i1 %cmp1, i32 0, i32 1
  %idxprom = sext i32 %cond to i64
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %count, i64 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  %4 = load i32, i32* %i, align 4
  %and = and i32 %4, 3
  %sub = sub i32 3, %and
  %mul = mul i32 %sub, 8
  %shr = lshr i32 %3, %mul
  %and2 = and i32 %shr, 255
  %conv = trunc i32 %and2 to i8
  %5 = load i32, i32* %i, align 4
  %idxprom3 = zext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds [8 x i8], [8 x i8]* %finalcount, i64 0, i64 %idxprom3
  store i8 %conv, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8 -128, i8* %c, align 1
  %7 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %7, i8* %c, i32 1)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %8 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %count5 = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %8, i32 0, i32 1
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %count5, i64 0, i64 0
  %9 = load i32, i32* %arrayidx6, align 4
  %and7 = and i32 %9, 504
  %cmp8 = icmp ne i32 %and7, 448
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i8 0, i8* %c, align 1
  %10 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %10, i8* %c, i32 1)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %finalcount, i32 0, i32 0
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %11, i8* %arraydecay, i32 8)
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc25, %while.end
  %12 = load i32, i32* %i, align 4
  %cmp11 = icmp ult i32 %12, 20
  br i1 %cmp11, label %for.body13, label %for.end27

for.body13:                                       ; preds = %for.cond10
  %13 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %state = getelementptr inbounds %struct.cs_sha1_ctx, %struct.cs_sha1_ctx* %13, i32 0, i32 0
  %14 = load i32, i32* %i, align 4
  %shr14 = lshr i32 %14, 2
  %idxprom15 = zext i32 %shr14 to i64
  %arrayidx16 = getelementptr inbounds [5 x i32], [5 x i32]* %state, i64 0, i64 %idxprom15
  %15 = load i32, i32* %arrayidx16, align 4
  %16 = load i32, i32* %i, align 4
  %and17 = and i32 %16, 3
  %sub18 = sub i32 3, %and17
  %mul19 = mul i32 %sub18, 8
  %shr20 = lshr i32 %15, %mul19
  %and21 = and i32 %shr20, 255
  %conv22 = trunc i32 %and21 to i8
  %17 = load i8*, i8** %digest.addr, align 8
  %18 = load i32, i32* %i, align 4
  %idxprom23 = zext i32 %18 to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %17, i64 %idxprom23
  store i8 %conv22, i8* %arrayidx24, align 1
  br label %for.inc25

for.inc25:                                        ; preds = %for.body13
  %19 = load i32, i32* %i, align 4
  %inc26 = add i32 %19, 1
  store i32 %inc26, i32* %i, align 4
  br label %for.cond10

for.end27:                                        ; preds = %for.cond10
  %20 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %21 = bitcast %struct.cs_sha1_ctx* %20 to i8*
  %22 = load %struct.cs_sha1_ctx*, %struct.cs_sha1_ctx** %context.addr, align 8
  %23 = bitcast %struct.cs_sha1_ctx* %22 to i8*
  %24 = call i64 @llvm.objectsize.i64.p0i8(i8* %23, i1 false)
  %call = call i8* @__memset_chk(i8* %21, i32 0, i64 92, i64 %24) #5
  %25 = bitcast [8 x i8]* %finalcount to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 8, i32 1, i1 false)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_hmac_sha1(i8* %key, i64 %keylen, i8* %data, i64 %datalen, i8* %out) #0 {
entry:
  %key.addr = alloca i8*, align 8
  %keylen.addr = alloca i64, align 8
  %data.addr = alloca i8*, align 8
  %datalen.addr = alloca i64, align 8
  %out.addr = alloca i8*, align 8
  %ctx = alloca %struct.cs_sha1_ctx, align 4
  %buf1 = alloca [64 x i8], align 16
  %buf2 = alloca [64 x i8], align 16
  %tmp_key = alloca [20 x i8], align 16
  %i = alloca i8, align 1
  store i8* %key, i8** %key.addr, align 8
  store i64 %keylen, i64* %keylen.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %datalen, i64* %datalen.addr, align 8
  store i8* %out, i8** %out.addr, align 8
  %0 = load i64, i64* %keylen.addr, align 8
  %cmp = icmp ugt i64 %0, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @cs_sha1_init(%struct.cs_sha1_ctx* %ctx)
  %1 = load i8*, i8** %key.addr, align 8
  %2 = load i64, i64* %keylen.addr, align 8
  %conv = trunc i64 %2 to i32
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %1, i32 %conv)
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %tmp_key, i32 0, i32 0
  call void @cs_sha1_final(i8* %arraydecay, %struct.cs_sha1_ctx* %ctx)
  %arraydecay1 = getelementptr inbounds [20 x i8], [20 x i8]* %tmp_key, i32 0, i32 0
  store i8* %arraydecay1, i8** %key.addr, align 8
  store i64 20, i64* %keylen.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arraydecay2 = getelementptr inbounds [64 x i8], [64 x i8]* %buf1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay2, i8 0, i64 64, i32 16, i1 false)
  %arraydecay3 = getelementptr inbounds [64 x i8], [64 x i8]* %buf2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* %arraydecay3, i8 0, i64 64, i32 16, i1 false)
  %arraydecay4 = getelementptr inbounds [64 x i8], [64 x i8]* %buf1, i32 0, i32 0
  %3 = load i8*, i8** %key.addr, align 8
  %4 = load i64, i64* %keylen.addr, align 8
  %call = call i8* @__memcpy_chk(i8* %arraydecay4, i8* %3, i64 %4, i64 64) #5
  %arraydecay5 = getelementptr inbounds [64 x i8], [64 x i8]* %buf2, i32 0, i32 0
  %5 = load i8*, i8** %key.addr, align 8
  %6 = load i64, i64* %keylen.addr, align 8
  %call6 = call i8* @__memcpy_chk(i8* %arraydecay5, i8* %5, i64 %6, i64 64) #5
  store i8 0, i8* %i, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i8, i8* %i, align 1
  %conv7 = zext i8 %7 to i64
  %cmp8 = icmp ult i64 %conv7, 64
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i8, i8* %i, align 1
  %idxprom = zext i8 %8 to i64
  %arrayidx = getelementptr inbounds [64 x i8], [64 x i8]* %buf1, i64 0, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1
  %conv10 = zext i8 %9 to i32
  %xor = xor i32 %conv10, 54
  %conv11 = trunc i32 %xor to i8
  store i8 %conv11, i8* %arrayidx, align 1
  %10 = load i8, i8* %i, align 1
  %idxprom12 = zext i8 %10 to i64
  %arrayidx13 = getelementptr inbounds [64 x i8], [64 x i8]* %buf2, i64 0, i64 %idxprom12
  %11 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %11 to i32
  %xor15 = xor i32 %conv14, 92
  %conv16 = trunc i32 %xor15 to i8
  store i8 %conv16, i8* %arrayidx13, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i8, i8* %i, align 1
  %inc = add i8 %12, 1
  store i8 %inc, i8* %i, align 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @cs_sha1_init(%struct.cs_sha1_ctx* %ctx)
  %arraydecay17 = getelementptr inbounds [64 x i8], [64 x i8]* %buf1, i32 0, i32 0
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %arraydecay17, i32 64)
  %13 = load i8*, i8** %data.addr, align 8
  %14 = load i64, i64* %datalen.addr, align 8
  %conv18 = trunc i64 %14 to i32
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %13, i32 %conv18)
  %15 = load i8*, i8** %out.addr, align 8
  call void @cs_sha1_final(i8* %15, %struct.cs_sha1_ctx* %ctx)
  call void @cs_sha1_init(%struct.cs_sha1_ctx* %ctx)
  %arraydecay19 = getelementptr inbounds [64 x i8], [64 x i8]* %buf2, i32 0, i32 0
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %arraydecay19, i32 64)
  %16 = load i8*, i8** %out.addr, align 8
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %ctx, i8* %16, i32 20)
  %17 = load i8*, i8** %out.addr, align 8
  call void @cs_sha1_final(i8* %17, %struct.cs_sha1_ctx* %ctx)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @mbuf_init(%struct.mbuf* %mbuf, i64 %initial_size) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  %initial_size.addr = alloca i64, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8
  store i64 %initial_size, i64* %initial_size.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 2
  store i64 0, i64* %size, align 8
  %1 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 1
  store i64 0, i64* %len, align 8
  %2 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 0
  store i8* null, i8** %buf, align 8
  %3 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %4 = load i64, i64* %initial_size.addr, align 8
  call void @mbuf_resize(%struct.mbuf* %3, i64 %4)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @mbuf_resize(%struct.mbuf* %a, i64 %new_size) #0 {
entry:
  %a.addr = alloca %struct.mbuf*, align 8
  %new_size.addr = alloca i64, align 8
  %buf = alloca i8*, align 8
  store %struct.mbuf* %a, %struct.mbuf** %a.addr, align 8
  store i64 %new_size, i64* %new_size.addr, align 8
  %0 = load i64, i64* %new_size.addr, align 8
  %1 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 2
  %2 = load i64, i64* %size, align 8
  %cmp = icmp ugt i64 %0, %2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i64, i64* %new_size.addr, align 8
  %4 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %size1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %4, i32 0, i32 2
  %5 = load i64, i64* %size1, align 8
  %cmp2 = icmp ult i64 %3, %5
  br i1 %cmp2, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i64, i64* %new_size.addr, align 8
  %7 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %7, i32 0, i32 1
  %8 = load i64, i64* %len, align 8
  %cmp3 = icmp uge i64 %6, %8
  br i1 %cmp3, label %if.then, label %if.end11

if.then:                                          ; preds = %land.lhs.true, %entry
  %9 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %9, i32 0, i32 0
  %10 = load i8*, i8** %buf4, align 8
  %11 = load i64, i64* %new_size.addr, align 8
  %call = call i8* @realloc(i8* %10, i64 %11) #12
  store i8* %call, i8** %buf, align 8
  %12 = load i8*, i8** %buf, align 8
  %cmp5 = icmp eq i8* %12, null
  br i1 %cmp5, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %if.then
  %13 = load i64, i64* %new_size.addr, align 8
  %cmp7 = icmp ne i64 %13, 0
  br i1 %cmp7, label %if.then8, label %if.end

if.then8:                                         ; preds = %land.lhs.true6
  br label %if.end11

if.end:                                           ; preds = %land.lhs.true6, %if.then
  %14 = load i8*, i8** %buf, align 8
  %15 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf9 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %15, i32 0, i32 0
  store i8* %14, i8** %buf9, align 8
  %16 = load i64, i64* %new_size.addr, align 8
  %17 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %size10 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %17, i32 0, i32 2
  store i64 %16, i64* %size10, align 8
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.end, %land.lhs.true, %lor.lhs.false
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @mbuf_free(%struct.mbuf* %mbuf) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 0
  %1 = load i8*, i8** %buf, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %buf1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 0
  %3 = load i8*, i8** %buf1, align 8
  call void @free(i8* %3)
  %4 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  call void @mbuf_init(%struct.mbuf* %4, i64 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: allocsize(1)
declare i8* @realloc(i8*, i64) #6

; Function Attrs: noinline nounwind ssp uwtable
define weak void @mbuf_trim(%struct.mbuf* %mbuf) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %1 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 1
  %2 = load i64, i64* %len, align 8
  call void @mbuf_resize(%struct.mbuf* %0, i64 %2)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i64 @mbuf_insert(%struct.mbuf* %a, i64 %off, i8* %buf, i64 %len) #0 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca %struct.mbuf*, align 8
  %off.addr = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %min_size = alloca i64, align 8
  %new_size = alloca i64, align 8
  store %struct.mbuf* %a, %struct.mbuf** %a.addr, align 8
  store i64 %off, i64* %off.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i8* null, i8** %p, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %cmp = icmp ne %struct.mbuf* %0, null
  %lnot = xor i1 %cmp, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.mbuf_insert, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 1456, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0)) #13
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %1
  %2 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 1
  %3 = load i64, i64* %len1, align 8
  %4 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %4, i32 0, i32 2
  %5 = load i64, i64* %size, align 8
  %cmp2 = icmp ule i64 %3, %5
  %lnot4 = xor i1 %cmp2, true
  %lnot.ext5 = zext i1 %lnot4 to i32
  %conv6 = sext i32 %lnot.ext5 to i64
  %tobool7 = icmp ne i64 %conv6, 0
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %cond.end
  call void @__assert_rtn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.mbuf_insert, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 1457, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i32 0, i32 0)) #13
  unreachable
                                                  ; No predecessors!
  br label %cond.end10

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false9, %6
  %7 = load i64, i64* %off.addr, align 8
  %8 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len11 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %8, i32 0, i32 1
  %9 = load i64, i64* %len11, align 8
  %cmp12 = icmp ule i64 %7, %9
  %lnot14 = xor i1 %cmp12, true
  %lnot.ext15 = zext i1 %lnot14 to i32
  %conv16 = sext i32 %lnot.ext15 to i64
  %tobool17 = icmp ne i64 %conv16, 0
  br i1 %tobool17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %cond.end10
  call void @__assert_rtn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.mbuf_insert, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 1458, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0)) #13
  unreachable
                                                  ; No predecessors!
  br label %cond.end20

cond.false19:                                     ; preds = %cond.end10
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false19, %10
  %11 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf21 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %11, i32 0, i32 0
  %12 = load i8*, i8** %buf21, align 8
  %13 = ptrtoint i8* %12 to i64
  %sub = sub i64 -1, %13
  %14 = load i64, i64* %len.addr, align 8
  %cmp22 = icmp ult i64 %sub, %14
  br i1 %cmp22, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end20
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end20
  %15 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len24 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %15, i32 0, i32 1
  %16 = load i64, i64* %len24, align 8
  %17 = load i64, i64* %len.addr, align 8
  %add = add i64 %16, %17
  %18 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %size25 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %18, i32 0, i32 2
  %19 = load i64, i64* %size25, align 8
  %cmp26 = icmp ule i64 %add, %19
  br i1 %cmp26, label %if.then28, label %if.else

if.then28:                                        ; preds = %if.end
  %20 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf29 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %20, i32 0, i32 0
  %21 = load i8*, i8** %buf29, align 8
  %22 = load i64, i64* %off.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %22
  %23 = load i64, i64* %len.addr, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %add.ptr, i64 %23
  %24 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf31 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %24, i32 0, i32 0
  %25 = load i8*, i8** %buf31, align 8
  %26 = load i64, i64* %off.addr, align 8
  %add.ptr32 = getelementptr inbounds i8, i8* %25, i64 %26
  %27 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len33 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %27, i32 0, i32 1
  %28 = load i64, i64* %len33, align 8
  %29 = load i64, i64* %off.addr, align 8
  %sub34 = sub i64 %28, %29
  %30 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf35 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %30, i32 0, i32 0
  %31 = load i8*, i8** %buf35, align 8
  %32 = load i64, i64* %off.addr, align 8
  %add.ptr36 = getelementptr inbounds i8, i8* %31, i64 %32
  %33 = load i64, i64* %len.addr, align 8
  %add.ptr37 = getelementptr inbounds i8, i8* %add.ptr36, i64 %33
  %34 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr37, i1 false)
  %call = call i8* @__memmove_chk(i8* %add.ptr30, i8* %add.ptr32, i64 %sub34, i64 %34) #5
  %35 = load i8*, i8** %buf.addr, align 8
  %cmp38 = icmp ne i8* %35, null
  br i1 %cmp38, label %if.then40, label %if.end46

if.then40:                                        ; preds = %if.then28
  %36 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf41 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %36, i32 0, i32 0
  %37 = load i8*, i8** %buf41, align 8
  %38 = load i64, i64* %off.addr, align 8
  %add.ptr42 = getelementptr inbounds i8, i8* %37, i64 %38
  %39 = load i8*, i8** %buf.addr, align 8
  %40 = load i64, i64* %len.addr, align 8
  %41 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf43 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %41, i32 0, i32 0
  %42 = load i8*, i8** %buf43, align 8
  %43 = load i64, i64* %off.addr, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %42, i64 %43
  %44 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr44, i1 false)
  %call45 = call i8* @__memcpy_chk(i8* %add.ptr42, i8* %39, i64 %40, i64 %44) #5
  br label %if.end46

if.end46:                                         ; preds = %if.then40, %if.then28
  %45 = load i64, i64* %len.addr, align 8
  %46 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len47 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %46, i32 0, i32 1
  %47 = load i64, i64* %len47, align 8
  %add48 = add i64 %47, %45
  store i64 %add48, i64* %len47, align 8
  br label %if.end103

if.else:                                          ; preds = %if.end
  %48 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len49 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %48, i32 0, i32 1
  %49 = load i64, i64* %len49, align 8
  %50 = load i64, i64* %len.addr, align 8
  %add50 = add i64 %49, %50
  store i64 %add50, i64* %min_size, align 8
  %51 = load i64, i64* %min_size, align 8
  %conv51 = uitofp i64 %51 to double
  %mul = fmul double %conv51, 1.500000e+00
  %conv52 = fptoui double %mul to i64
  store i64 %conv52, i64* %new_size, align 8
  %52 = load i64, i64* %new_size, align 8
  %53 = load i64, i64* %min_size, align 8
  %sub53 = sub i64 %52, %53
  %cmp54 = icmp ugt i64 %sub53, 1024
  br i1 %cmp54, label %if.then56, label %if.end58

if.then56:                                        ; preds = %if.else
  %54 = load i64, i64* %min_size, align 8
  %add57 = add i64 %54, 1024
  store i64 %add57, i64* %new_size, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %if.else
  %55 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf59 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %55, i32 0, i32 0
  %56 = load i8*, i8** %buf59, align 8
  %57 = load i64, i64* %new_size, align 8
  %call60 = call i8* @realloc(i8* %56, i64 %57) #12
  store i8* %call60, i8** %p, align 8
  %58 = load i8*, i8** %p, align 8
  %cmp61 = icmp eq i8* %58, null
  br i1 %cmp61, label %land.lhs.true, label %if.end68

land.lhs.true:                                    ; preds = %if.end58
  %59 = load i64, i64* %new_size, align 8
  %60 = load i64, i64* %min_size, align 8
  %cmp63 = icmp ne i64 %59, %60
  br i1 %cmp63, label %if.then65, label %if.end68

if.then65:                                        ; preds = %land.lhs.true
  %61 = load i64, i64* %min_size, align 8
  store i64 %61, i64* %new_size, align 8
  %62 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf66 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %62, i32 0, i32 0
  %63 = load i8*, i8** %buf66, align 8
  %64 = load i64, i64* %new_size, align 8
  %call67 = call i8* @realloc(i8* %63, i64 %64) #12
  store i8* %call67, i8** %p, align 8
  br label %if.end68

if.end68:                                         ; preds = %if.then65, %land.lhs.true, %if.end58
  %65 = load i8*, i8** %p, align 8
  %cmp69 = icmp ne i8* %65, null
  br i1 %cmp69, label %if.then71, label %if.else101

if.then71:                                        ; preds = %if.end68
  %66 = load i8*, i8** %p, align 8
  %67 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf72 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %67, i32 0, i32 0
  store i8* %66, i8** %buf72, align 8
  %68 = load i64, i64* %off.addr, align 8
  %69 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len73 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %69, i32 0, i32 1
  %70 = load i64, i64* %len73, align 8
  %cmp74 = icmp ne i64 %68, %70
  br i1 %cmp74, label %if.then76, label %if.end88

if.then76:                                        ; preds = %if.then71
  %71 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf77 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %71, i32 0, i32 0
  %72 = load i8*, i8** %buf77, align 8
  %73 = load i64, i64* %off.addr, align 8
  %add.ptr78 = getelementptr inbounds i8, i8* %72, i64 %73
  %74 = load i64, i64* %len.addr, align 8
  %add.ptr79 = getelementptr inbounds i8, i8* %add.ptr78, i64 %74
  %75 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf80 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %75, i32 0, i32 0
  %76 = load i8*, i8** %buf80, align 8
  %77 = load i64, i64* %off.addr, align 8
  %add.ptr81 = getelementptr inbounds i8, i8* %76, i64 %77
  %78 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len82 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %78, i32 0, i32 1
  %79 = load i64, i64* %len82, align 8
  %80 = load i64, i64* %off.addr, align 8
  %sub83 = sub i64 %79, %80
  %81 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf84 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %81, i32 0, i32 0
  %82 = load i8*, i8** %buf84, align 8
  %83 = load i64, i64* %off.addr, align 8
  %add.ptr85 = getelementptr inbounds i8, i8* %82, i64 %83
  %84 = load i64, i64* %len.addr, align 8
  %add.ptr86 = getelementptr inbounds i8, i8* %add.ptr85, i64 %84
  %85 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr86, i1 false)
  %call87 = call i8* @__memmove_chk(i8* %add.ptr79, i8* %add.ptr81, i64 %sub83, i64 %85) #5
  br label %if.end88

if.end88:                                         ; preds = %if.then76, %if.then71
  %86 = load i8*, i8** %buf.addr, align 8
  %cmp89 = icmp ne i8* %86, null
  br i1 %cmp89, label %if.then91, label %if.end97

if.then91:                                        ; preds = %if.end88
  %87 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf92 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %87, i32 0, i32 0
  %88 = load i8*, i8** %buf92, align 8
  %89 = load i64, i64* %off.addr, align 8
  %add.ptr93 = getelementptr inbounds i8, i8* %88, i64 %89
  %90 = load i8*, i8** %buf.addr, align 8
  %91 = load i64, i64* %len.addr, align 8
  %92 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf94 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %92, i32 0, i32 0
  %93 = load i8*, i8** %buf94, align 8
  %94 = load i64, i64* %off.addr, align 8
  %add.ptr95 = getelementptr inbounds i8, i8* %93, i64 %94
  %95 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr95, i1 false)
  %call96 = call i8* @__memcpy_chk(i8* %add.ptr93, i8* %90, i64 %91, i64 %95) #5
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %if.end88
  %96 = load i64, i64* %len.addr, align 8
  %97 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len98 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %97, i32 0, i32 1
  %98 = load i64, i64* %len98, align 8
  %add99 = add i64 %98, %96
  store i64 %add99, i64* %len98, align 8
  %99 = load i64, i64* %new_size, align 8
  %100 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %size100 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %100, i32 0, i32 2
  store i64 %99, i64* %size100, align 8
  br label %if.end102

if.else101:                                       ; preds = %if.end68
  store i64 0, i64* %len.addr, align 8
  br label %if.end102

if.end102:                                        ; preds = %if.else101, %if.end97
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.end46
  %101 = load i64, i64* %len.addr, align 8
  store i64 %101, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end103, %if.then
  %102 = load i64, i64* %retval, align 8
  ret i64 %102
}

; Function Attrs: noreturn
declare void @__assert_rtn(i8*, i8*, i32, i8*) #7

; Function Attrs: nounwind
declare i8* @__memmove_chk(i8*, i8*, i64, i64) #1

; Function Attrs: noinline nounwind ssp uwtable
define weak i64 @mbuf_append(%struct.mbuf* %a, i8* %buf, i64 %len) #0 {
entry:
  %a.addr = alloca %struct.mbuf*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mbuf* %a, %struct.mbuf** %a.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %1 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %1, i32 0, i32 1
  %2 = load i64, i64* %len1, align 8
  %3 = load i8*, i8** %buf.addr, align 8
  %4 = load i64, i64* %len.addr, align 8
  %call = call i64 @mbuf_insert(%struct.mbuf* %0, i64 %2, i8* %3, i64 %4)
  ret i64 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i64 @mbuf_append_and_free(%struct.mbuf* %a, i8* %data, i64 %len) #0 {
entry:
  %retval = alloca i64, align 8
  %a.addr = alloca %struct.mbuf*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ret = alloca i64, align 8
  store %struct.mbuf* %a, %struct.mbuf** %a.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 1
  %1 = load i64, i64* %len1, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %entry
  %2 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 0
  %3 = load i8*, i8** %buf, align 8
  %cmp2 = icmp ne i8* %3, null
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %4 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %4, i32 0, i32 0
  %5 = load i8*, i8** %buf4, align 8
  call void @free(i8* %5)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  %6 = load i8*, i8** %data.addr, align 8
  %7 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %buf5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %7, i32 0, i32 0
  store i8* %6, i8** %buf5, align 8
  %8 = load i64, i64* %len.addr, align 8
  %9 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %9, i32 0, i32 2
  store i64 %8, i64* %size, align 8
  %10 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len6 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %10, i32 0, i32 1
  store i64 %8, i64* %len6, align 8
  %11 = load i64, i64* %len.addr, align 8
  store i64 %11, i64* %retval, align 8
  br label %return

if.end7:                                          ; preds = %entry
  %12 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %13 = load %struct.mbuf*, %struct.mbuf** %a.addr, align 8
  %len8 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %13, i32 0, i32 1
  %14 = load i64, i64* %len8, align 8
  %15 = load i8*, i8** %data.addr, align 8
  %16 = load i64, i64* %len.addr, align 8
  %call = call i64 @mbuf_insert(%struct.mbuf* %12, i64 %14, i8* %15, i64 %16)
  store i64 %call, i64* %ret, align 8
  %17 = load i8*, i8** %data.addr, align 8
  call void @free(i8* %17)
  %18 = load i64, i64* %ret, align 8
  store i64 %18, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end7, %if.end
  %19 = load i64, i64* %retval, align 8
  ret i64 %19
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @mbuf_remove(%struct.mbuf* %mb, i64 %n) #0 {
entry:
  %mb.addr = alloca %struct.mbuf*, align 8
  %n.addr = alloca i64, align 8
  store %struct.mbuf* %mb, %struct.mbuf** %mb.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  %0 = load i64, i64* %n.addr, align 8
  %cmp = icmp ugt i64 %0, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8
  %2 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 1
  %3 = load i64, i64* %len, align 8
  %cmp1 = icmp ule i64 %1, %3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %4, i32 0, i32 0
  %5 = load i8*, i8** %buf, align 8
  %6 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8
  %buf2 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %6, i32 0, i32 0
  %7 = load i8*, i8** %buf2, align 8
  %8 = load i64, i64* %n.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  %9 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8
  %len3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %9, i32 0, i32 1
  %10 = load i64, i64* %len3, align 8
  %11 = load i64, i64* %n.addr, align 8
  %sub = sub i64 %10, %11
  %12 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8
  %buf4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %12, i32 0, i32 0
  %13 = load i8*, i8** %buf4, align 8
  %14 = call i64 @llvm.objectsize.i64.p0i8(i8* %13, i1 false)
  %call = call i8* @__memmove_chk(i8* %5, i8* %add.ptr, i64 %sub, i64 %14) #5
  %15 = load i64, i64* %n.addr, align 8
  %16 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8
  %len5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %16, i32 0, i32 1
  %17 = load i64, i64* %len5, align 8
  %sub6 = sub i64 %17, %15
  store i64 %sub6, i64* %len5, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @mbuf_clear(%struct.mbuf* %mb) #0 {
entry:
  %mb.addr = alloca %struct.mbuf*, align 8
  store %struct.mbuf* %mb, %struct.mbuf** %mb.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %mb.addr, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 1
  store i64 0, i64* %len, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @mbuf_move(%struct.mbuf* %from, %struct.mbuf* %to) #0 {
entry:
  %from.addr = alloca %struct.mbuf*, align 8
  %to.addr = alloca %struct.mbuf*, align 8
  store %struct.mbuf* %from, %struct.mbuf** %from.addr, align 8
  store %struct.mbuf* %to, %struct.mbuf** %to.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %to.addr, align 8
  %1 = bitcast %struct.mbuf* %0 to i8*
  %2 = load %struct.mbuf*, %struct.mbuf** %from.addr, align 8
  %3 = bitcast %struct.mbuf* %2 to i8*
  %4 = load %struct.mbuf*, %struct.mbuf** %to.addr, align 8
  %5 = bitcast %struct.mbuf* %4 to i8*
  %6 = call i64 @llvm.objectsize.i64.p0i8(i8* %5, i1 false)
  %call = call i8* @__memcpy_chk(i8* %1, i8* %3, i64 24, i64 %6) #5
  %7 = load %struct.mbuf*, %struct.mbuf** %from.addr, align 8
  %8 = bitcast %struct.mbuf* %7 to i8*
  %9 = load %struct.mbuf*, %struct.mbuf** %from.addr, align 8
  %10 = bitcast %struct.mbuf* %9 to i8*
  %11 = call i64 @llvm.objectsize.i64.p0i8(i8* %10, i1 false)
  %call1 = call i8* @__memset_chk(i8* %8, i32 0, i64 24, i64 %11) #5
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak { i8*, i64 } @mg_mk_str_n(i8* %s, i64 %len) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ret = alloca %struct.mg_str, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ret, i32 0, i32 0
  %0 = load i8*, i8** %s.addr, align 8
  store i8* %0, i8** %p, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ret, i32 0, i32 1
  %1 = load i64, i64* %len.addr, align 8
  store i64 %1, i64* %len1, align 8
  %2 = bitcast %struct.mg_str* %retval to i8*
  %3 = bitcast %struct.mg_str* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 16, i32 8, i1 false)
  %4 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %5 = load { i8*, i64 }, { i8*, i64 }* %4, align 8
  ret { i8*, i64 } %5
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_vcmp(%struct.mg_str* %str1, i8* %str2) #0 {
entry:
  %retval = alloca i32, align 4
  %str1.addr = alloca %struct.mg_str*, align 8
  %str2.addr = alloca i8*, align 8
  %n2 = alloca i64, align 8
  %n1 = alloca i64, align 8
  %r = alloca i32, align 4
  store %struct.mg_str* %str1, %struct.mg_str** %str1.addr, align 8
  store i8* %str2, i8** %str2.addr, align 8
  %0 = load i8*, i8** %str2.addr, align 8
  %call = call i64 @strlen(i8* %0)
  store i64 %call, i64* %n2, align 8
  %1 = load %struct.mg_str*, %struct.mg_str** %str1.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 1
  %2 = load i64, i64* %len, align 8
  store i64 %2, i64* %n1, align 8
  %3 = load %struct.mg_str*, %struct.mg_str** %str1.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 0
  %4 = load i8*, i8** %p, align 8
  %5 = load i8*, i8** %str2.addr, align 8
  %6 = load i64, i64* %n1, align 8
  %7 = load i64, i64* %n2, align 8
  %cmp = icmp ult i64 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i64, i64* %n1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load i64, i64* %n2, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %9, %cond.false ]
  %call1 = call i32 @strncmp(i8* %4, i8* %5, i64 %cond)
  store i32 %call1, i32* %r, align 4
  %10 = load i32, i32* %r, align 4
  %cmp2 = icmp eq i32 %10, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %11 = load i64, i64* %n1, align 8
  %12 = load i64, i64* %n2, align 8
  %sub = sub i64 %11, %12
  %conv = trunc i64 %sub to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end
  %13 = load i32, i32* %r, align 4
  store i32 %13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

declare i32 @strncmp(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_vcasecmp(%struct.mg_str* %str1, i8* %str2) #0 {
entry:
  %retval = alloca i32, align 4
  %str1.addr = alloca %struct.mg_str*, align 8
  %str2.addr = alloca i8*, align 8
  %n2 = alloca i64, align 8
  %n1 = alloca i64, align 8
  %r = alloca i32, align 4
  store %struct.mg_str* %str1, %struct.mg_str** %str1.addr, align 8
  store i8* %str2, i8** %str2.addr, align 8
  %0 = load i8*, i8** %str2.addr, align 8
  %call = call i64 @strlen(i8* %0)
  store i64 %call, i64* %n2, align 8
  %1 = load %struct.mg_str*, %struct.mg_str** %str1.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 1
  %2 = load i64, i64* %len, align 8
  store i64 %2, i64* %n1, align 8
  %3 = load %struct.mg_str*, %struct.mg_str** %str1.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 0
  %4 = load i8*, i8** %p, align 8
  %5 = load i8*, i8** %str2.addr, align 8
  %6 = load i64, i64* %n1, align 8
  %7 = load i64, i64* %n2, align 8
  %cmp = icmp ult i64 %6, %7
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load i64, i64* %n1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load i64, i64* %n2, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %9, %cond.false ]
  %call1 = call i32 @mg_ncasecmp(i8* %4, i8* %5, i64 %cond)
  store i32 %call1, i32* %r, align 4
  %10 = load i32, i32* %r, align 4
  %cmp2 = icmp eq i32 %10, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %11 = load i64, i64* %n1, align 8
  %12 = load i64, i64* %n2, align 8
  %sub = sub i64 %11, %12
  %conv = trunc i64 %sub to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end
  %13 = load i32, i32* %r, align 4
  store i32 %13, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_ncasecmp(i8* %s1, i8* %s2, i64 %len) #0 {
entry:
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %diff = alloca i32, align 4
  store i8* %s1, i8** %s1.addr, align 8
  store i8* %s2, i8** %s2.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 0, i32* %diff, align 4
  %0 = load i64, i64* %len.addr, align 8
  %cmp = icmp ugt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %land.end, %if.then
  %1 = load i8*, i8** %s1.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i32 1
  store i8* %incdec.ptr, i8** %s1.addr, align 8
  %call = call i32 @str_util_lowercase(i8* %1)
  %2 = load i8*, i8** %s2.addr, align 8
  %incdec.ptr1 = getelementptr inbounds i8, i8* %2, i32 1
  store i8* %incdec.ptr1, i8** %s2.addr, align 8
  %call2 = call i32 @str_util_lowercase(i8* %2)
  %sub = sub nsw i32 %call, %call2
  store i32 %sub, i32* %diff, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %3 = load i32, i32* %diff, align 4
  %cmp3 = icmp eq i32 %3, 0
  br i1 %cmp3, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %do.cond
  %4 = load i8*, i8** %s1.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 -1
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp4 = icmp ne i32 %conv, 0
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %6 = load i64, i64* %len.addr, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %len.addr, align 8
  %cmp6 = icmp ugt i64 %dec, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %do.cond
  %7 = phi i1 [ false, %land.lhs.true ], [ false, %do.cond ], [ %cmp6, %land.rhs ]
  br i1 %7, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %8 = load i32, i32* %diff, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind ssp uwtable
define weak { i8*, i64 } @mg_strdup(i8* %s.coerce0, i64 %s.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %call = call { i8*, i64 } @mg_strdup_common(i8* %5, i64 %7, i32 0)
  %8 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = extractvalue { i8*, i64 } %call, 0
  store i8* %10, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = extractvalue { i8*, i64 } %call, 1
  store i64 %12, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %14 = load { i8*, i64 }, { i8*, i64 }* %13, align 8
  ret { i8*, i64 } %14
}

; Function Attrs: noinline nounwind ssp uwtable
define internal { i8*, i64 } @mg_strdup_common(i8* %s.coerce0, i64 %s.coerce1, i32 %nul_terminate) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  %nul_terminate.addr = alloca i32, align 4
  %r = alloca %struct.mg_str, align 8
  %sc = alloca i8*, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  store i32 %nul_terminate, i32* %nul_terminate.addr, align 4
  %3 = bitcast %struct.mg_str* %r to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %4 = load i64, i64* %len, align 8
  %cmp = icmp ugt i64 %4, 0
  br i1 %cmp, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %entry
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %5 = load i8*, i8** %p, align 8
  %cmp1 = icmp ne i8* %5, null
  br i1 %cmp1, label %if.then, label %if.end16

if.then:                                          ; preds = %land.lhs.true
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %6 = load i64, i64* %len2, align 8
  %7 = load i32, i32* %nul_terminate.addr, align 4
  %tobool = icmp ne i32 %7, 0
  %cond = select i1 %tobool, i32 1, i32 0
  %conv = sext i32 %cond to i64
  %add = add i64 %6, %conv
  %call = call i8* @malloc(i64 %add) #14
  store i8* %call, i8** %sc, align 8
  %8 = load i8*, i8** %sc, align 8
  %cmp3 = icmp ne i8* %8, null
  br i1 %cmp3, label %if.then5, label %if.end15

if.then5:                                         ; preds = %if.then
  %9 = load i8*, i8** %sc, align 8
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %10 = load i8*, i8** %p6, align 8
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %11 = load i64, i64* %len7, align 8
  %12 = load i8*, i8** %sc, align 8
  %13 = call i64 @llvm.objectsize.i64.p0i8(i8* %12, i1 false)
  %call8 = call i8* @__memcpy_chk(i8* %9, i8* %10, i64 %11, i64 %13) #5
  %14 = load i32, i32* %nul_terminate.addr, align 4
  %tobool9 = icmp ne i32 %14, 0
  br i1 %tobool9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then5
  %15 = load i8*, i8** %sc, align 8
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %16 = load i64, i64* %len11, align 8
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %16
  store i8 0, i8* %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then5
  %17 = load i8*, i8** %sc, align 8
  %p12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %r, i32 0, i32 0
  store i8* %17, i8** %p12, align 8
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %18 = load i64, i64* %len13, align 8
  %len14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %r, i32 0, i32 1
  store i64 %18, i64* %len14, align 8
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %land.lhs.true, %entry
  %19 = bitcast %struct.mg_str* %retval to i8*
  %20 = bitcast %struct.mg_str* %r to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 16, i32 8, i1 false)
  %21 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %22 = load { i8*, i64 }, { i8*, i64 }* %21, align 8
  ret { i8*, i64 } %22
}

; Function Attrs: noinline nounwind ssp uwtable
define weak { i8*, i64 } @mg_strdup_nul(i8* %s.coerce0, i64 %s.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %call = call { i8*, i64 } @mg_strdup_common(i8* %5, i64 %7, i32 1)
  %8 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = extractvalue { i8*, i64 } %call, 0
  store i8* %10, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = extractvalue { i8*, i64 } %call, 1
  store i64 %12, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %14 = load { i8*, i64 }, { i8*, i64 }* %13, align 8
  ret { i8*, i64 } %14
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i8* @mg_strchr(i8* %s.coerce0, i64 %s.coerce1, i32 %c) #0 {
entry:
  %retval = alloca i8*, align 8
  %s = alloca %struct.mg_str, align 8
  %c.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  store i32 %c, i32* %c.addr, align 4
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %4 = load i64, i64* %len, align 8
  %cmp = icmp ult i64 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %5 = load i8*, i8** %p, align 8
  %6 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %6
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %8 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp eq i32 %conv, %8
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %9 = load i8*, i8** %p3, align 8
  %10 = load i64, i64* %i, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i64 %10
  store i8* %arrayidx4, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i64, i64* %i, align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %12 = load i8*, i8** %retval, align 8
  ret i8* %12
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_strcmp(i8* %str1.coerce0, i64 %str1.coerce1, i8* %str2.coerce0, i64 %str2.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %str1 = alloca %struct.mg_str, align 8
  %str2 = alloca %struct.mg_str, align 8
  %i = alloca i64, align 8
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %str1 to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %str1.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %str1.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %str2 to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %str2.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %str2.coerce1, i64* %5, align 8
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end11, %entry
  %6 = load i64, i64* %i, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 1
  %7 = load i64, i64* %len, align 8
  %cmp = icmp ult i64 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i64, i64* %i, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 1
  %9 = load i64, i64* %len1, align 8
  %cmp2 = icmp ult i64 %8, %9
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8
  %12 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %12
  %13 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %13 to i32
  store i32 %conv, i32* %c1, align 4
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 0
  %14 = load i8*, i8** %p3, align 8
  %15 = load i64, i64* %i, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %14, i64 %15
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %16 to i32
  store i32 %conv5, i32* %c2, align 4
  %17 = load i32, i32* %c1, align 4
  %18 = load i32, i32* %c2, align 4
  %cmp6 = icmp slt i32 %17, %18
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %19 = load i32, i32* %c1, align 4
  %20 = load i32, i32* %c2, align 4
  %cmp8 = icmp sgt i32 %19, %20
  br i1 %cmp8, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.end
  %21 = load i64, i64* %i, align 8
  %inc = add i64 %21, 1
  store i64 %inc, i64* %i, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %22 = load i64, i64* %i, align 8
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 1
  %23 = load i64, i64* %len12, align 8
  %cmp13 = icmp ult i64 %22, %23
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %while.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end16:                                         ; preds = %while.end
  %24 = load i64, i64* %i, align 8
  %len17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 1
  %25 = load i64, i64* %len17, align 8
  %cmp18 = icmp ult i64 %24, %25
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end16
  store i32 -1, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end16
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end21, %if.then20, %if.then15, %if.then10, %if.then
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_strncmp(i8* %str1.coerce0, i64 %str1.coerce1, i8* %str2.coerce0, i64 %str2.coerce1, i64 %n) #0 {
entry:
  %str1 = alloca %struct.mg_str, align 8
  %str2 = alloca %struct.mg_str, align 8
  %n.addr = alloca i64, align 8
  %s1 = alloca %struct.mg_str, align 8
  %s2 = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %str1 to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %str1.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %str1.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %str2 to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %str2.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %str2.coerce1, i64* %5, align 8
  store i64 %n, i64* %n.addr, align 8
  %6 = bitcast %struct.mg_str* %s1 to i8*
  %7 = bitcast %struct.mg_str* %str1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 16, i32 8, i1 false)
  %8 = bitcast %struct.mg_str* %s2 to i8*
  %9 = bitcast %struct.mg_str* %str2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 16, i32 8, i1 false)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s1, i32 0, i32 1
  %10 = load i64, i64* %len, align 8
  %11 = load i64, i64* %n.addr, align 8
  %cmp = icmp ugt i64 %10, %11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load i64, i64* %n.addr, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s1, i32 0, i32 1
  store i64 %12, i64* %len1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s2, i32 0, i32 1
  %13 = load i64, i64* %len2, align 8
  %14 = load i64, i64* %n.addr, align 8
  %cmp3 = icmp ugt i64 %13, %14
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %15 = load i64, i64* %n.addr, align 8
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s2, i32 0, i32 1
  store i64 %15, i64* %len5, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %16 = bitcast %struct.mg_str* %s1 to { i8*, i64 }*
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %struct.mg_str* %s2 to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %call = call i32 @mg_strcmp(i8* %18, i64 %20, i8* %23, i64 %25)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_strcasecmp(i8* %str1.coerce0, i64 %str1.coerce1, i8* %str2.coerce0, i64 %str2.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %str1 = alloca %struct.mg_str, align 8
  %str2 = alloca %struct.mg_str, align 8
  %i = alloca i64, align 8
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %str1 to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %str1.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %str1.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %str2 to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %str2.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %str2.coerce1, i64* %5, align 8
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %entry
  %6 = load i64, i64* %i, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 1
  %7 = load i64, i64* %len, align 8
  %cmp = icmp ult i64 %6, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %8 = load i64, i64* %i, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 1
  %9 = load i64, i64* %len1, align 8
  %cmp2 = icmp ult i64 %8, %9
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %10, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8
  %12 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %12
  %13 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %13 to i32
  %call = call i32 @tolower(i32 %conv) #15
  store i32 %call, i32* %c1, align 4
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 0
  %14 = load i8*, i8** %p3, align 8
  %15 = load i64, i64* %i, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %14, i64 %15
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %16 to i32
  %call6 = call i32 @tolower(i32 %conv5) #15
  store i32 %call6, i32* %c2, align 4
  %17 = load i32, i32* %c1, align 4
  %18 = load i32, i32* %c2, align 4
  %cmp7 = icmp slt i32 %17, %18
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  %19 = load i32, i32* %c1, align 4
  %20 = load i32, i32* %c2, align 4
  %cmp9 = icmp sgt i32 %19, %20
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.end
  %21 = load i64, i64* %i, align 8
  %inc = add i64 %21, 1
  store i64 %inc, i64* %i, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %22 = load i64, i64* %i, align 8
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str1, i32 0, i32 1
  %23 = load i64, i64* %len13, align 8
  %cmp14 = icmp ult i64 %22, %23
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %while.end
  store i32 1, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %while.end
  %24 = load i64, i64* %i, align 8
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str2, i32 0, i32 1
  %25 = load i64, i64* %len18, align 8
  %cmp19 = icmp ult i64 %24, %25
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end17
  store i32 -1, i32* %retval, align 4
  br label %return

if.end22:                                         ; preds = %if.end17
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end22, %if.then21, %if.then16, %if.then11, %if.then
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

; Function Attrs: nounwind readonly
declare i32 @tolower(i32) #8

; Function Attrs: noinline nounwind ssp uwtable
define weak void @mg_strfree(%struct.mg_str* %s) #0 {
entry:
  %s.addr = alloca %struct.mg_str*, align 8
  %sp = alloca i8*, align 8
  store %struct.mg_str* %s, %struct.mg_str** %s.addr, align 8
  %0 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %0, i32 0, i32 0
  %1 = load i8*, i8** %p, align 8
  store i8* %1, i8** %sp, align 8
  %2 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %2, i32 0, i32 0
  store i8* null, i8** %p1, align 8
  %3 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 1
  store i64 0, i64* %len, align 8
  %4 = load i8*, i8** %sp, align 8
  %cmp = icmp ne i8* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i8*, i8** %sp, align 8
  call void @free(i8* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i8* @mg_strstr(i8* %haystack.coerce0, i64 %haystack.coerce1, i8* %needle.coerce0, i64 %needle.coerce1) #0 {
entry:
  %retval = alloca i8*, align 8
  %haystack = alloca %struct.mg_str, align 8
  %needle = alloca %struct.mg_str, align 8
  %i = alloca i64, align 8
  %0 = bitcast %struct.mg_str* %haystack to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %haystack.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %haystack.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %needle to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %needle.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %needle.coerce1, i64* %5, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %needle, i32 0, i32 1
  %6 = load i64, i64* %len, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %haystack, i32 0, i32 1
  %7 = load i64, i64* %len1, align 8
  %cmp = icmp ugt i64 %6, %7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i64, i64* %i, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %haystack, i32 0, i32 1
  %9 = load i64, i64* %len2, align 8
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %needle, i32 0, i32 1
  %10 = load i64, i64* %len3, align 8
  %sub = sub i64 %9, %10
  %cmp4 = icmp ule i64 %8, %sub
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %haystack, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8
  %12 = load i64, i64* %i, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %12
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %needle, i32 0, i32 0
  %13 = load i8*, i8** %p5, align 8
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %needle, i32 0, i32 1
  %14 = load i64, i64* %len6, align 8
  %call = call i32 @memcmp(i8* %add.ptr, i8* %13, i64 %14)
  %cmp7 = icmp eq i32 %call, 0
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %for.body
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %haystack, i32 0, i32 0
  %15 = load i8*, i8** %p9, align 8
  %16 = load i64, i64* %i, align 8
  %add.ptr10 = getelementptr inbounds i8, i8* %15, i64 %16
  store i8* %add.ptr10, i8** %retval, align 8
  br label %return

if.end11:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end11
  %17 = load i64, i64* %i, align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then8, %if.then
  %18 = load i8*, i8** %retval, align 8
  ret i8* %18
}

declare i32 @memcmp(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind ssp uwtable
define weak { i8*, i64 } @mg_strstrip(i8* %s.coerce0, i64 %s.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %s.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %s.coerce1, i64* %2, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %3 = load i64, i64* %len, align 8
  %cmp = icmp ugt i64 %3, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %4 = load i8*, i8** %p, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %call = call i32 @isspace(i32 %conv) #15
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %7 = load i8*, i8** %p1, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %p1, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %8 = load i64, i64* %len2, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %len2, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond3

while.cond3:                                      ; preds = %while.body15, %while.end
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %9 = load i64, i64* %len4, align 8
  %cmp5 = icmp ugt i64 %9, 0
  br i1 %cmp5, label %land.rhs7, label %land.end14

land.rhs7:                                        ; preds = %while.cond3
  %p8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %10 = load i8*, i8** %p8, align 8
  %len9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %11 = load i64, i64* %len9, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %11
  %add.ptr10 = getelementptr inbounds i8, i8* %add.ptr, i64 -1
  %12 = load i8, i8* %add.ptr10, align 1
  %conv11 = sext i8 %12 to i32
  %call12 = call i32 @isspace(i32 %conv11) #15
  %tobool13 = icmp ne i32 %call12, 0
  br label %land.end14

land.end14:                                       ; preds = %land.rhs7, %while.cond3
  %13 = phi i1 [ false, %while.cond3 ], [ %tobool13, %land.rhs7 ]
  br i1 %13, label %while.body15, label %while.end18

while.body15:                                     ; preds = %land.end14
  %len16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  %14 = load i64, i64* %len16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %len16, align 8
  br label %while.cond3

while.end18:                                      ; preds = %land.end14
  %15 = bitcast %struct.mg_str* %retval to i8*
  %16 = bitcast %struct.mg_str* %s to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 16, i32 8, i1 false)
  %17 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %18 = load { i8*, i64 }, { i8*, i64 }* %17, align 8
  ret { i8*, i64 } %18
}

; Function Attrs: nounwind readonly
declare i32 @isspace(i32) #8

; Function Attrs: noinline nounwind ssp uwtable
define weak i64 @c_strnlen(i8* %s, i64 %maxlen) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %maxlen.addr = alloca i64, align 8
  %l = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %maxlen, i64* %maxlen.addr, align 8
  store i64 0, i64* %l, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %l, align 8
  %1 = load i64, i64* %maxlen.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i8*, i8** %s.addr, align 8
  %3 = load i64, i64* %l, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %5 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %5, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i64, i64* %l, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %l, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %7 = load i64, i64* %l, align 8
  ret i64 %7
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @c_vsnprintf(i8* %buf, i64 %buf_size, i8* %fmt, %struct.__va_list_tag* %ap) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %fmt.addr = alloca i8*, align 8
  %ap.addr = alloca %struct.__va_list_tag*, align 8
  %ch = alloca i32, align 4
  %i = alloca i32, align 4
  %len_mod = alloca i32, align 4
  %flags = alloca i32, align 4
  %precision = alloca i32, align 4
  %field_width = alloca i32, align 4
  %s = alloca i8*, align 8
  %j = alloca i32, align 4
  %pad = alloca i32, align 4
  %num = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %ap.addr, align 8
  store i32 0, i32* %i, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end415, %entry
  %0 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %fmt.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  store i32 %conv, i32* %ch, align 4
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end416

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %ch, align 4
  %cmp2 = icmp ne i32 %2, 37
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load i32, i32* %i, align 4
  %4 = load i64, i64* %buf_size.addr, align 8
  %conv4 = trunc i64 %4 to i32
  %cmp5 = icmp slt i32 %3, %conv4
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %do.body
  %5 = load i32, i32* %ch, align 4
  %conv8 = trunc i32 %5 to i8
  %6 = load i8*, i8** %buf.addr, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom
  store i8 %conv8, i8* %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then7, %do.body
  %8 = load i32, i32* %i, align 4
  %inc = add nsw i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end415

if.else:                                          ; preds = %while.body
  store i32 0, i32* %len_mod, align 4
  store i32 0, i32* %precision, align 4
  store i32 0, i32* %field_width, align 4
  store i32 0, i32* %flags, align 4
  %9 = load i8*, i8** %fmt.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv9 = sext i8 %10 to i32
  %cmp10 = icmp eq i32 %conv9, 48
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.else
  %11 = load i32, i32* %flags, align 4
  %or = or i32 %11, 1
  store i32 %or, i32* %flags, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.else
  br label %while.cond14

while.cond14:                                     ; preds = %while.body21, %if.end13
  %12 = load i8*, i8** %fmt.addr, align 8
  %13 = load i8, i8* %12, align 1
  %conv15 = sext i8 %13 to i32
  %cmp16 = icmp sge i32 %conv15, 48
  br i1 %cmp16, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond14
  %14 = load i8*, i8** %fmt.addr, align 8
  %15 = load i8, i8* %14, align 1
  %conv18 = sext i8 %15 to i32
  %cmp19 = icmp sle i32 %conv18, 57
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond14
  %16 = phi i1 [ false, %while.cond14 ], [ %cmp19, %land.rhs ]
  br i1 %16, label %while.body21, label %while.end

while.body21:                                     ; preds = %land.end
  %17 = load i32, i32* %field_width, align 4
  %mul = mul nsw i32 %17, 10
  store i32 %mul, i32* %field_width, align 4
  %18 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr22 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr22, i8** %fmt.addr, align 8
  %19 = load i8, i8* %18, align 1
  %conv23 = sext i8 %19 to i32
  %sub = sub nsw i32 %conv23, 48
  %20 = load i32, i32* %field_width, align 4
  %add = add nsw i32 %20, %sub
  store i32 %add, i32* %field_width, align 4
  br label %while.cond14

while.end:                                        ; preds = %land.end
  %21 = load i8*, i8** %fmt.addr, align 8
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp eq i32 %conv24, 42
  br i1 %cmp25, label %if.then27, label %if.end29

if.then27:                                        ; preds = %while.end
  %23 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %23, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 8
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %if.then27
  %24 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %23, i32 0, i32 3
  %reg_save_area = load i8*, i8** %24, align 8
  %25 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %26 = bitcast i8* %25 to i32*
  %27 = add i32 %gp_offset, 8
  store i32 %27, i32* %gp_offset_p, align 8
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %if.then27
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %23, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %28 = bitcast i8* %overflow_arg_area to i32*
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i32* [ %26, %vaarg.in_reg ], [ %28, %vaarg.in_mem ]
  %29 = load i32, i32* %vaarg.addr, align 4
  store i32 %29, i32* %field_width, align 4
  %30 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr28 = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr28, i8** %fmt.addr, align 8
  br label %if.end29

if.end29:                                         ; preds = %vaarg.end, %while.end
  %31 = load i8*, i8** %fmt.addr, align 8
  %32 = load i8, i8* %31, align 1
  %conv30 = sext i8 %32 to i32
  %cmp31 = icmp eq i32 %conv30, 46
  br i1 %cmp31, label %if.then33, label %if.end69

if.then33:                                        ; preds = %if.end29
  %33 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr34 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr34, i8** %fmt.addr, align 8
  %34 = load i8*, i8** %fmt.addr, align 8
  %35 = load i8, i8* %34, align 1
  %conv35 = sext i8 %35 to i32
  %cmp36 = icmp eq i32 %conv35, 42
  br i1 %cmp36, label %if.then38, label %if.else51

if.then38:                                        ; preds = %if.then33
  %36 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p39 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %36, i32 0, i32 0
  %gp_offset40 = load i32, i32* %gp_offset_p39, align 8
  %fits_in_gp41 = icmp ule i32 %gp_offset40, 40
  br i1 %fits_in_gp41, label %vaarg.in_reg42, label %vaarg.in_mem44

vaarg.in_reg42:                                   ; preds = %if.then38
  %37 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %36, i32 0, i32 3
  %reg_save_area43 = load i8*, i8** %37, align 8
  %38 = getelementptr i8, i8* %reg_save_area43, i32 %gp_offset40
  %39 = bitcast i8* %38 to i32*
  %40 = add i32 %gp_offset40, 8
  store i32 %40, i32* %gp_offset_p39, align 8
  br label %vaarg.end48

vaarg.in_mem44:                                   ; preds = %if.then38
  %overflow_arg_area_p45 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %36, i32 0, i32 2
  %overflow_arg_area46 = load i8*, i8** %overflow_arg_area_p45, align 8
  %41 = bitcast i8* %overflow_arg_area46 to i32*
  %overflow_arg_area.next47 = getelementptr i8, i8* %overflow_arg_area46, i32 8
  store i8* %overflow_arg_area.next47, i8** %overflow_arg_area_p45, align 8
  br label %vaarg.end48

vaarg.end48:                                      ; preds = %vaarg.in_mem44, %vaarg.in_reg42
  %vaarg.addr49 = phi i32* [ %39, %vaarg.in_reg42 ], [ %41, %vaarg.in_mem44 ]
  %42 = load i32, i32* %vaarg.addr49, align 4
  store i32 %42, i32* %precision, align 4
  %43 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr50 = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr50, i8** %fmt.addr, align 8
  br label %if.end68

if.else51:                                        ; preds = %if.then33
  br label %while.cond52

while.cond52:                                     ; preds = %while.body61, %if.else51
  %44 = load i8*, i8** %fmt.addr, align 8
  %45 = load i8, i8* %44, align 1
  %conv53 = sext i8 %45 to i32
  %cmp54 = icmp sge i32 %conv53, 48
  br i1 %cmp54, label %land.rhs56, label %land.end60

land.rhs56:                                       ; preds = %while.cond52
  %46 = load i8*, i8** %fmt.addr, align 8
  %47 = load i8, i8* %46, align 1
  %conv57 = sext i8 %47 to i32
  %cmp58 = icmp sle i32 %conv57, 57
  br label %land.end60

land.end60:                                       ; preds = %land.rhs56, %while.cond52
  %48 = phi i1 [ false, %while.cond52 ], [ %cmp58, %land.rhs56 ]
  br i1 %48, label %while.body61, label %while.end67

while.body61:                                     ; preds = %land.end60
  %49 = load i32, i32* %precision, align 4
  %mul62 = mul nsw i32 %49, 10
  store i32 %mul62, i32* %precision, align 4
  %50 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr63 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr63, i8** %fmt.addr, align 8
  %51 = load i8, i8* %50, align 1
  %conv64 = sext i8 %51 to i32
  %sub65 = sub nsw i32 %conv64, 48
  %52 = load i32, i32* %precision, align 4
  %add66 = add nsw i32 %52, %sub65
  store i32 %add66, i32* %precision, align 4
  br label %while.cond52

while.end67:                                      ; preds = %land.end60
  br label %if.end68

if.end68:                                         ; preds = %while.end67, %vaarg.end48
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end29
  %53 = load i8*, i8** %fmt.addr, align 8
  %54 = load i8, i8* %53, align 1
  %conv70 = sext i8 %54 to i32
  switch i32 %conv70, label %sw.epilog [
    i32 104, label %sw.bb
    i32 108, label %sw.bb
    i32 76, label %sw.bb
    i32 73, label %sw.bb
    i32 113, label %sw.bb
    i32 106, label %sw.bb
    i32 122, label %sw.bb
    i32 116, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end69, %if.end69, %if.end69, %if.end69, %if.end69, %if.end69, %if.end69, %if.end69
  %55 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr71 = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %incdec.ptr71, i8** %fmt.addr, align 8
  %56 = load i8, i8* %55, align 1
  %conv72 = sext i8 %56 to i32
  store i32 %conv72, i32* %len_mod, align 4
  %57 = load i8*, i8** %fmt.addr, align 8
  %58 = load i8, i8* %57, align 1
  %conv73 = sext i8 %58 to i32
  %cmp74 = icmp eq i32 %conv73, 104
  br i1 %cmp74, label %if.then76, label %if.end78

if.then76:                                        ; preds = %sw.bb
  store i32 72, i32* %len_mod, align 4
  %59 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr77 = getelementptr inbounds i8, i8* %59, i32 1
  store i8* %incdec.ptr77, i8** %fmt.addr, align 8
  br label %if.end78

if.end78:                                         ; preds = %if.then76, %sw.bb
  %60 = load i8*, i8** %fmt.addr, align 8
  %61 = load i8, i8* %60, align 1
  %conv79 = sext i8 %61 to i32
  %cmp80 = icmp eq i32 %conv79, 108
  br i1 %cmp80, label %if.then82, label %if.end84

if.then82:                                        ; preds = %if.end78
  store i32 113, i32* %len_mod, align 4
  %62 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr83 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr83, i8** %fmt.addr, align 8
  br label %if.end84

if.end84:                                         ; preds = %if.then82, %if.end78
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end69, %if.end84
  %63 = load i8*, i8** %fmt.addr, align 8
  %incdec.ptr85 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr85, i8** %fmt.addr, align 8
  %64 = load i8, i8* %63, align 1
  %conv86 = sext i8 %64 to i32
  store i32 %conv86, i32* %ch, align 4
  %65 = load i32, i32* %ch, align 4
  %cmp87 = icmp eq i32 %65, 115
  br i1 %cmp87, label %if.then89, label %if.else152

if.then89:                                        ; preds = %sw.epilog
  %66 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p90 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %66, i32 0, i32 0
  %gp_offset91 = load i32, i32* %gp_offset_p90, align 8
  %fits_in_gp92 = icmp ule i32 %gp_offset91, 40
  br i1 %fits_in_gp92, label %vaarg.in_reg93, label %vaarg.in_mem95

vaarg.in_reg93:                                   ; preds = %if.then89
  %67 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %66, i32 0, i32 3
  %reg_save_area94 = load i8*, i8** %67, align 8
  %68 = getelementptr i8, i8* %reg_save_area94, i32 %gp_offset91
  %69 = bitcast i8* %68 to i8**
  %70 = add i32 %gp_offset91, 8
  store i32 %70, i32* %gp_offset_p90, align 8
  br label %vaarg.end99

vaarg.in_mem95:                                   ; preds = %if.then89
  %overflow_arg_area_p96 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %66, i32 0, i32 2
  %overflow_arg_area97 = load i8*, i8** %overflow_arg_area_p96, align 8
  %71 = bitcast i8* %overflow_arg_area97 to i8**
  %overflow_arg_area.next98 = getelementptr i8, i8* %overflow_arg_area97, i32 8
  store i8* %overflow_arg_area.next98, i8** %overflow_arg_area_p96, align 8
  br label %vaarg.end99

vaarg.end99:                                      ; preds = %vaarg.in_mem95, %vaarg.in_reg93
  %vaarg.addr100 = phi i8** [ %69, %vaarg.in_reg93 ], [ %71, %vaarg.in_mem95 ]
  %72 = load i8*, i8** %vaarg.addr100, align 8
  store i8* %72, i8** %s, align 8
  %73 = load i32, i32* %field_width, align 4
  %conv101 = sext i32 %73 to i64
  %74 = load i32, i32* %precision, align 4
  %cmp102 = icmp sge i32 %74, 0
  br i1 %cmp102, label %cond.true, label %cond.false

cond.true:                                        ; preds = %vaarg.end99
  %75 = load i8*, i8** %s, align 8
  %76 = load i32, i32* %precision, align 4
  %conv104 = sext i32 %76 to i64
  %call = call i64 @c_strnlen(i8* %75, i64 %conv104)
  br label %cond.end

cond.false:                                       ; preds = %vaarg.end99
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call, %cond.true ], [ 0, %cond.false ]
  %sub105 = sub i64 %conv101, %cond
  %conv106 = trunc i64 %sub105 to i32
  store i32 %conv106, i32* %pad, align 4
  store i32 0, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %77 = load i32, i32* %j, align 4
  %78 = load i32, i32* %pad, align 4
  %cmp107 = icmp slt i32 %77, %78
  br i1 %cmp107, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body109

do.body109:                                       ; preds = %for.body
  %79 = load i32, i32* %i, align 4
  %80 = load i64, i64* %buf_size.addr, align 8
  %conv110 = trunc i64 %80 to i32
  %cmp111 = icmp slt i32 %79, %conv110
  br i1 %cmp111, label %if.then113, label %if.end116

if.then113:                                       ; preds = %do.body109
  %81 = load i8*, i8** %buf.addr, align 8
  %82 = load i32, i32* %i, align 4
  %idxprom114 = sext i32 %82 to i64
  %arrayidx115 = getelementptr inbounds i8, i8* %81, i64 %idxprom114
  store i8 32, i8* %arrayidx115, align 1
  br label %if.end116

if.end116:                                        ; preds = %if.then113, %do.body109
  %83 = load i32, i32* %i, align 4
  %inc117 = add nsw i32 %83, 1
  store i32 %inc117, i32* %i, align 4
  br label %do.end118

do.end118:                                        ; preds = %if.end116
  br label %for.inc

for.inc:                                          ; preds = %do.end118
  %84 = load i32, i32* %j, align 4
  %inc119 = add nsw i32 %84, 1
  store i32 %inc119, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %85 = load i8*, i8** %s, align 8
  %cmp120 = icmp ne i8* %85, null
  br i1 %cmp120, label %if.then122, label %if.end151

if.then122:                                       ; preds = %for.end
  store i32 0, i32* %j, align 4
  br label %for.cond123

for.cond123:                                      ; preds = %for.inc148, %if.then122
  %86 = load i32, i32* %precision, align 4
  %cmp124 = icmp sle i32 %86, 0
  br i1 %cmp124, label %land.rhs128, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond123
  %87 = load i32, i32* %j, align 4
  %88 = load i32, i32* %precision, align 4
  %cmp126 = icmp slt i32 %87, %88
  br i1 %cmp126, label %land.rhs128, label %land.end134

land.rhs128:                                      ; preds = %lor.lhs.false, %for.cond123
  %89 = load i8*, i8** %s, align 8
  %90 = load i32, i32* %j, align 4
  %idxprom129 = sext i32 %90 to i64
  %arrayidx130 = getelementptr inbounds i8, i8* %89, i64 %idxprom129
  %91 = load i8, i8* %arrayidx130, align 1
  %conv131 = sext i8 %91 to i32
  %cmp132 = icmp ne i32 %conv131, 0
  br label %land.end134

land.end134:                                      ; preds = %land.rhs128, %lor.lhs.false
  %92 = phi i1 [ false, %lor.lhs.false ], [ %cmp132, %land.rhs128 ]
  br i1 %92, label %for.body135, label %for.end150

for.body135:                                      ; preds = %land.end134
  br label %do.body136

do.body136:                                       ; preds = %for.body135
  %93 = load i32, i32* %i, align 4
  %94 = load i64, i64* %buf_size.addr, align 8
  %conv137 = trunc i64 %94 to i32
  %cmp138 = icmp slt i32 %93, %conv137
  br i1 %cmp138, label %if.then140, label %if.end145

if.then140:                                       ; preds = %do.body136
  %95 = load i8*, i8** %s, align 8
  %96 = load i32, i32* %j, align 4
  %idxprom141 = sext i32 %96 to i64
  %arrayidx142 = getelementptr inbounds i8, i8* %95, i64 %idxprom141
  %97 = load i8, i8* %arrayidx142, align 1
  %98 = load i8*, i8** %buf.addr, align 8
  %99 = load i32, i32* %i, align 4
  %idxprom143 = sext i32 %99 to i64
  %arrayidx144 = getelementptr inbounds i8, i8* %98, i64 %idxprom143
  store i8 %97, i8* %arrayidx144, align 1
  br label %if.end145

if.end145:                                        ; preds = %if.then140, %do.body136
  %100 = load i32, i32* %i, align 4
  %inc146 = add nsw i32 %100, 1
  store i32 %inc146, i32* %i, align 4
  br label %do.end147

do.end147:                                        ; preds = %if.end145
  br label %for.inc148

for.inc148:                                       ; preds = %do.end147
  %101 = load i32, i32* %j, align 4
  %inc149 = add nsw i32 %101, 1
  store i32 %inc149, i32* %j, align 4
  br label %for.cond123

for.end150:                                       ; preds = %land.end134
  br label %if.end151

if.end151:                                        ; preds = %for.end150, %for.end
  br label %if.end414

if.else152:                                       ; preds = %sw.epilog
  %102 = load i32, i32* %ch, align 4
  %cmp153 = icmp eq i32 %102, 99
  br i1 %cmp153, label %if.then155, label %if.else178

if.then155:                                       ; preds = %if.else152
  %103 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p156 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %103, i32 0, i32 0
  %gp_offset157 = load i32, i32* %gp_offset_p156, align 8
  %fits_in_gp158 = icmp ule i32 %gp_offset157, 40
  br i1 %fits_in_gp158, label %vaarg.in_reg159, label %vaarg.in_mem161

vaarg.in_reg159:                                  ; preds = %if.then155
  %104 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %103, i32 0, i32 3
  %reg_save_area160 = load i8*, i8** %104, align 8
  %105 = getelementptr i8, i8* %reg_save_area160, i32 %gp_offset157
  %106 = bitcast i8* %105 to i32*
  %107 = add i32 %gp_offset157, 8
  store i32 %107, i32* %gp_offset_p156, align 8
  br label %vaarg.end165

vaarg.in_mem161:                                  ; preds = %if.then155
  %overflow_arg_area_p162 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %103, i32 0, i32 2
  %overflow_arg_area163 = load i8*, i8** %overflow_arg_area_p162, align 8
  %108 = bitcast i8* %overflow_arg_area163 to i32*
  %overflow_arg_area.next164 = getelementptr i8, i8* %overflow_arg_area163, i32 8
  store i8* %overflow_arg_area.next164, i8** %overflow_arg_area_p162, align 8
  br label %vaarg.end165

vaarg.end165:                                     ; preds = %vaarg.in_mem161, %vaarg.in_reg159
  %vaarg.addr166 = phi i32* [ %106, %vaarg.in_reg159 ], [ %108, %vaarg.in_mem161 ]
  %109 = load i32, i32* %vaarg.addr166, align 4
  store i32 %109, i32* %ch, align 4
  br label %do.body167

do.body167:                                       ; preds = %vaarg.end165
  %110 = load i32, i32* %i, align 4
  %111 = load i64, i64* %buf_size.addr, align 8
  %conv168 = trunc i64 %111 to i32
  %cmp169 = icmp slt i32 %110, %conv168
  br i1 %cmp169, label %if.then171, label %if.end175

if.then171:                                       ; preds = %do.body167
  %112 = load i32, i32* %ch, align 4
  %conv172 = trunc i32 %112 to i8
  %113 = load i8*, i8** %buf.addr, align 8
  %114 = load i32, i32* %i, align 4
  %idxprom173 = sext i32 %114 to i64
  %arrayidx174 = getelementptr inbounds i8, i8* %113, i64 %idxprom173
  store i8 %conv172, i8* %arrayidx174, align 1
  br label %if.end175

if.end175:                                        ; preds = %if.then171, %do.body167
  %115 = load i32, i32* %i, align 4
  %inc176 = add nsw i32 %115, 1
  store i32 %inc176, i32* %i, align 4
  br label %do.end177

do.end177:                                        ; preds = %if.end175
  br label %if.end413

if.else178:                                       ; preds = %if.else152
  %116 = load i32, i32* %ch, align 4
  %cmp179 = icmp eq i32 %116, 100
  br i1 %cmp179, label %land.lhs.true, label %if.else200

land.lhs.true:                                    ; preds = %if.else178
  %117 = load i32, i32* %len_mod, align 4
  %cmp181 = icmp eq i32 %117, 0
  br i1 %cmp181, label %if.then183, label %if.else200

if.then183:                                       ; preds = %land.lhs.true
  %118 = load i8*, i8** %buf.addr, align 8
  %119 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %119 to i64
  %add.ptr = getelementptr inbounds i8, i8* %118, i64 %idx.ext
  %120 = load i64, i64* %buf_size.addr, align 8
  %121 = load i32, i32* %i, align 4
  %conv184 = sext i32 %121 to i64
  %sub185 = sub i64 %120, %conv184
  %122 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p186 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %122, i32 0, i32 0
  %gp_offset187 = load i32, i32* %gp_offset_p186, align 8
  %fits_in_gp188 = icmp ule i32 %gp_offset187, 40
  br i1 %fits_in_gp188, label %vaarg.in_reg189, label %vaarg.in_mem191

vaarg.in_reg189:                                  ; preds = %if.then183
  %123 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %122, i32 0, i32 3
  %reg_save_area190 = load i8*, i8** %123, align 8
  %124 = getelementptr i8, i8* %reg_save_area190, i32 %gp_offset187
  %125 = bitcast i8* %124 to i32*
  %126 = add i32 %gp_offset187, 8
  store i32 %126, i32* %gp_offset_p186, align 8
  br label %vaarg.end195

vaarg.in_mem191:                                  ; preds = %if.then183
  %overflow_arg_area_p192 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %122, i32 0, i32 2
  %overflow_arg_area193 = load i8*, i8** %overflow_arg_area_p192, align 8
  %127 = bitcast i8* %overflow_arg_area193 to i32*
  %overflow_arg_area.next194 = getelementptr i8, i8* %overflow_arg_area193, i32 8
  store i8* %overflow_arg_area.next194, i8** %overflow_arg_area_p192, align 8
  br label %vaarg.end195

vaarg.end195:                                     ; preds = %vaarg.in_mem191, %vaarg.in_reg189
  %vaarg.addr196 = phi i32* [ %125, %vaarg.in_reg189 ], [ %127, %vaarg.in_mem191 ]
  %128 = load i32, i32* %vaarg.addr196, align 4
  %conv197 = sext i32 %128 to i64
  %129 = load i32, i32* %flags, align 4
  %130 = load i32, i32* %field_width, align 4
  %call198 = call i32 @c_itoa(i8* %add.ptr, i64 %sub185, i64 %conv197, i32 10, i32 %129, i32 %130)
  %131 = load i32, i32* %i, align 4
  %add199 = add nsw i32 %131, %call198
  store i32 %add199, i32* %i, align 4
  br label %if.end412

if.else200:                                       ; preds = %land.lhs.true, %if.else178
  %132 = load i32, i32* %ch, align 4
  %cmp201 = icmp eq i32 %132, 100
  br i1 %cmp201, label %land.lhs.true203, label %if.else224

land.lhs.true203:                                 ; preds = %if.else200
  %133 = load i32, i32* %len_mod, align 4
  %cmp204 = icmp eq i32 %133, 108
  br i1 %cmp204, label %if.then206, label %if.else224

if.then206:                                       ; preds = %land.lhs.true203
  %134 = load i8*, i8** %buf.addr, align 8
  %135 = load i32, i32* %i, align 4
  %idx.ext207 = sext i32 %135 to i64
  %add.ptr208 = getelementptr inbounds i8, i8* %134, i64 %idx.ext207
  %136 = load i64, i64* %buf_size.addr, align 8
  %137 = load i32, i32* %i, align 4
  %conv209 = sext i32 %137 to i64
  %sub210 = sub i64 %136, %conv209
  %138 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p211 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %138, i32 0, i32 0
  %gp_offset212 = load i32, i32* %gp_offset_p211, align 8
  %fits_in_gp213 = icmp ule i32 %gp_offset212, 40
  br i1 %fits_in_gp213, label %vaarg.in_reg214, label %vaarg.in_mem216

vaarg.in_reg214:                                  ; preds = %if.then206
  %139 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %138, i32 0, i32 3
  %reg_save_area215 = load i8*, i8** %139, align 8
  %140 = getelementptr i8, i8* %reg_save_area215, i32 %gp_offset212
  %141 = bitcast i8* %140 to i64*
  %142 = add i32 %gp_offset212, 8
  store i32 %142, i32* %gp_offset_p211, align 8
  br label %vaarg.end220

vaarg.in_mem216:                                  ; preds = %if.then206
  %overflow_arg_area_p217 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %138, i32 0, i32 2
  %overflow_arg_area218 = load i8*, i8** %overflow_arg_area_p217, align 8
  %143 = bitcast i8* %overflow_arg_area218 to i64*
  %overflow_arg_area.next219 = getelementptr i8, i8* %overflow_arg_area218, i32 8
  store i8* %overflow_arg_area.next219, i8** %overflow_arg_area_p217, align 8
  br label %vaarg.end220

vaarg.end220:                                     ; preds = %vaarg.in_mem216, %vaarg.in_reg214
  %vaarg.addr221 = phi i64* [ %141, %vaarg.in_reg214 ], [ %143, %vaarg.in_mem216 ]
  %144 = load i64, i64* %vaarg.addr221, align 8
  %145 = load i32, i32* %flags, align 4
  %146 = load i32, i32* %field_width, align 4
  %call222 = call i32 @c_itoa(i8* %add.ptr208, i64 %sub210, i64 %144, i32 10, i32 %145, i32 %146)
  %147 = load i32, i32* %i, align 4
  %add223 = add nsw i32 %147, %call222
  store i32 %add223, i32* %i, align 4
  br label %if.end411

if.else224:                                       ; preds = %land.lhs.true203, %if.else200
  %148 = load i32, i32* %ch, align 4
  %cmp225 = icmp eq i32 %148, 100
  br i1 %cmp225, label %land.lhs.true227, label %if.else248

land.lhs.true227:                                 ; preds = %if.else224
  %149 = load i32, i32* %len_mod, align 4
  %cmp228 = icmp eq i32 %149, 122
  br i1 %cmp228, label %if.then230, label %if.else248

if.then230:                                       ; preds = %land.lhs.true227
  %150 = load i8*, i8** %buf.addr, align 8
  %151 = load i32, i32* %i, align 4
  %idx.ext231 = sext i32 %151 to i64
  %add.ptr232 = getelementptr inbounds i8, i8* %150, i64 %idx.ext231
  %152 = load i64, i64* %buf_size.addr, align 8
  %153 = load i32, i32* %i, align 4
  %conv233 = sext i32 %153 to i64
  %sub234 = sub i64 %152, %conv233
  %154 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p235 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %154, i32 0, i32 0
  %gp_offset236 = load i32, i32* %gp_offset_p235, align 8
  %fits_in_gp237 = icmp ule i32 %gp_offset236, 40
  br i1 %fits_in_gp237, label %vaarg.in_reg238, label %vaarg.in_mem240

vaarg.in_reg238:                                  ; preds = %if.then230
  %155 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %154, i32 0, i32 3
  %reg_save_area239 = load i8*, i8** %155, align 8
  %156 = getelementptr i8, i8* %reg_save_area239, i32 %gp_offset236
  %157 = bitcast i8* %156 to i64*
  %158 = add i32 %gp_offset236, 8
  store i32 %158, i32* %gp_offset_p235, align 8
  br label %vaarg.end244

vaarg.in_mem240:                                  ; preds = %if.then230
  %overflow_arg_area_p241 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %154, i32 0, i32 2
  %overflow_arg_area242 = load i8*, i8** %overflow_arg_area_p241, align 8
  %159 = bitcast i8* %overflow_arg_area242 to i64*
  %overflow_arg_area.next243 = getelementptr i8, i8* %overflow_arg_area242, i32 8
  store i8* %overflow_arg_area.next243, i8** %overflow_arg_area_p241, align 8
  br label %vaarg.end244

vaarg.end244:                                     ; preds = %vaarg.in_mem240, %vaarg.in_reg238
  %vaarg.addr245 = phi i64* [ %157, %vaarg.in_reg238 ], [ %159, %vaarg.in_mem240 ]
  %160 = load i64, i64* %vaarg.addr245, align 8
  %161 = load i32, i32* %flags, align 4
  %162 = load i32, i32* %field_width, align 4
  %call246 = call i32 @c_itoa(i8* %add.ptr232, i64 %sub234, i64 %160, i32 10, i32 %161, i32 %162)
  %163 = load i32, i32* %i, align 4
  %add247 = add nsw i32 %163, %call246
  store i32 %add247, i32* %i, align 4
  br label %if.end410

if.else248:                                       ; preds = %land.lhs.true227, %if.else224
  %164 = load i32, i32* %ch, align 4
  %cmp249 = icmp eq i32 %164, 100
  br i1 %cmp249, label %land.lhs.true251, label %if.else272

land.lhs.true251:                                 ; preds = %if.else248
  %165 = load i32, i32* %len_mod, align 4
  %cmp252 = icmp eq i32 %165, 113
  br i1 %cmp252, label %if.then254, label %if.else272

if.then254:                                       ; preds = %land.lhs.true251
  %166 = load i8*, i8** %buf.addr, align 8
  %167 = load i32, i32* %i, align 4
  %idx.ext255 = sext i32 %167 to i64
  %add.ptr256 = getelementptr inbounds i8, i8* %166, i64 %idx.ext255
  %168 = load i64, i64* %buf_size.addr, align 8
  %169 = load i32, i32* %i, align 4
  %conv257 = sext i32 %169 to i64
  %sub258 = sub i64 %168, %conv257
  %170 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p259 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %170, i32 0, i32 0
  %gp_offset260 = load i32, i32* %gp_offset_p259, align 8
  %fits_in_gp261 = icmp ule i32 %gp_offset260, 40
  br i1 %fits_in_gp261, label %vaarg.in_reg262, label %vaarg.in_mem264

vaarg.in_reg262:                                  ; preds = %if.then254
  %171 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %170, i32 0, i32 3
  %reg_save_area263 = load i8*, i8** %171, align 8
  %172 = getelementptr i8, i8* %reg_save_area263, i32 %gp_offset260
  %173 = bitcast i8* %172 to i64*
  %174 = add i32 %gp_offset260, 8
  store i32 %174, i32* %gp_offset_p259, align 8
  br label %vaarg.end268

vaarg.in_mem264:                                  ; preds = %if.then254
  %overflow_arg_area_p265 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %170, i32 0, i32 2
  %overflow_arg_area266 = load i8*, i8** %overflow_arg_area_p265, align 8
  %175 = bitcast i8* %overflow_arg_area266 to i64*
  %overflow_arg_area.next267 = getelementptr i8, i8* %overflow_arg_area266, i32 8
  store i8* %overflow_arg_area.next267, i8** %overflow_arg_area_p265, align 8
  br label %vaarg.end268

vaarg.end268:                                     ; preds = %vaarg.in_mem264, %vaarg.in_reg262
  %vaarg.addr269 = phi i64* [ %173, %vaarg.in_reg262 ], [ %175, %vaarg.in_mem264 ]
  %176 = load i64, i64* %vaarg.addr269, align 8
  %177 = load i32, i32* %flags, align 4
  %178 = load i32, i32* %field_width, align 4
  %call270 = call i32 @c_itoa(i8* %add.ptr256, i64 %sub258, i64 %176, i32 10, i32 %177, i32 %178)
  %179 = load i32, i32* %i, align 4
  %add271 = add nsw i32 %179, %call270
  store i32 %add271, i32* %i, align 4
  br label %if.end409

if.else272:                                       ; preds = %land.lhs.true251, %if.else248
  %180 = load i32, i32* %ch, align 4
  %cmp273 = icmp eq i32 %180, 120
  br i1 %cmp273, label %land.lhs.true278, label %lor.lhs.false275

lor.lhs.false275:                                 ; preds = %if.else272
  %181 = load i32, i32* %ch, align 4
  %cmp276 = icmp eq i32 %181, 117
  br i1 %cmp276, label %land.lhs.true278, label %if.else303

land.lhs.true278:                                 ; preds = %lor.lhs.false275, %if.else272
  %182 = load i32, i32* %len_mod, align 4
  %cmp279 = icmp eq i32 %182, 0
  br i1 %cmp279, label %if.then281, label %if.else303

if.then281:                                       ; preds = %land.lhs.true278
  %183 = load i8*, i8** %buf.addr, align 8
  %184 = load i32, i32* %i, align 4
  %idx.ext282 = sext i32 %184 to i64
  %add.ptr283 = getelementptr inbounds i8, i8* %183, i64 %idx.ext282
  %185 = load i64, i64* %buf_size.addr, align 8
  %186 = load i32, i32* %i, align 4
  %conv284 = sext i32 %186 to i64
  %sub285 = sub i64 %185, %conv284
  %187 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p286 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %187, i32 0, i32 0
  %gp_offset287 = load i32, i32* %gp_offset_p286, align 8
  %fits_in_gp288 = icmp ule i32 %gp_offset287, 40
  br i1 %fits_in_gp288, label %vaarg.in_reg289, label %vaarg.in_mem291

vaarg.in_reg289:                                  ; preds = %if.then281
  %188 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %187, i32 0, i32 3
  %reg_save_area290 = load i8*, i8** %188, align 8
  %189 = getelementptr i8, i8* %reg_save_area290, i32 %gp_offset287
  %190 = bitcast i8* %189 to i32*
  %191 = add i32 %gp_offset287, 8
  store i32 %191, i32* %gp_offset_p286, align 8
  br label %vaarg.end295

vaarg.in_mem291:                                  ; preds = %if.then281
  %overflow_arg_area_p292 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %187, i32 0, i32 2
  %overflow_arg_area293 = load i8*, i8** %overflow_arg_area_p292, align 8
  %192 = bitcast i8* %overflow_arg_area293 to i32*
  %overflow_arg_area.next294 = getelementptr i8, i8* %overflow_arg_area293, i32 8
  store i8* %overflow_arg_area.next294, i8** %overflow_arg_area_p292, align 8
  br label %vaarg.end295

vaarg.end295:                                     ; preds = %vaarg.in_mem291, %vaarg.in_reg289
  %vaarg.addr296 = phi i32* [ %190, %vaarg.in_reg289 ], [ %192, %vaarg.in_mem291 ]
  %193 = load i32, i32* %vaarg.addr296, align 4
  %conv297 = zext i32 %193 to i64
  %194 = load i32, i32* %ch, align 4
  %cmp298 = icmp eq i32 %194, 120
  %cond300 = select i1 %cmp298, i32 16, i32 10
  %195 = load i32, i32* %flags, align 4
  %196 = load i32, i32* %field_width, align 4
  %call301 = call i32 @c_itoa(i8* %add.ptr283, i64 %sub285, i64 %conv297, i32 %cond300, i32 %195, i32 %196)
  %197 = load i32, i32* %i, align 4
  %add302 = add nsw i32 %197, %call301
  store i32 %add302, i32* %i, align 4
  br label %if.end408

if.else303:                                       ; preds = %land.lhs.true278, %lor.lhs.false275
  %198 = load i32, i32* %ch, align 4
  %cmp304 = icmp eq i32 %198, 120
  br i1 %cmp304, label %land.lhs.true309, label %lor.lhs.false306

lor.lhs.false306:                                 ; preds = %if.else303
  %199 = load i32, i32* %ch, align 4
  %cmp307 = icmp eq i32 %199, 117
  br i1 %cmp307, label %land.lhs.true309, label %if.else333

land.lhs.true309:                                 ; preds = %lor.lhs.false306, %if.else303
  %200 = load i32, i32* %len_mod, align 4
  %cmp310 = icmp eq i32 %200, 108
  br i1 %cmp310, label %if.then312, label %if.else333

if.then312:                                       ; preds = %land.lhs.true309
  %201 = load i8*, i8** %buf.addr, align 8
  %202 = load i32, i32* %i, align 4
  %idx.ext313 = sext i32 %202 to i64
  %add.ptr314 = getelementptr inbounds i8, i8* %201, i64 %idx.ext313
  %203 = load i64, i64* %buf_size.addr, align 8
  %204 = load i32, i32* %i, align 4
  %conv315 = sext i32 %204 to i64
  %sub316 = sub i64 %203, %conv315
  %205 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p317 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %205, i32 0, i32 0
  %gp_offset318 = load i32, i32* %gp_offset_p317, align 8
  %fits_in_gp319 = icmp ule i32 %gp_offset318, 40
  br i1 %fits_in_gp319, label %vaarg.in_reg320, label %vaarg.in_mem322

vaarg.in_reg320:                                  ; preds = %if.then312
  %206 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %205, i32 0, i32 3
  %reg_save_area321 = load i8*, i8** %206, align 8
  %207 = getelementptr i8, i8* %reg_save_area321, i32 %gp_offset318
  %208 = bitcast i8* %207 to i64*
  %209 = add i32 %gp_offset318, 8
  store i32 %209, i32* %gp_offset_p317, align 8
  br label %vaarg.end326

vaarg.in_mem322:                                  ; preds = %if.then312
  %overflow_arg_area_p323 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %205, i32 0, i32 2
  %overflow_arg_area324 = load i8*, i8** %overflow_arg_area_p323, align 8
  %210 = bitcast i8* %overflow_arg_area324 to i64*
  %overflow_arg_area.next325 = getelementptr i8, i8* %overflow_arg_area324, i32 8
  store i8* %overflow_arg_area.next325, i8** %overflow_arg_area_p323, align 8
  br label %vaarg.end326

vaarg.end326:                                     ; preds = %vaarg.in_mem322, %vaarg.in_reg320
  %vaarg.addr327 = phi i64* [ %208, %vaarg.in_reg320 ], [ %210, %vaarg.in_mem322 ]
  %211 = load i64, i64* %vaarg.addr327, align 8
  %212 = load i32, i32* %ch, align 4
  %cmp328 = icmp eq i32 %212, 120
  %cond330 = select i1 %cmp328, i32 16, i32 10
  %213 = load i32, i32* %flags, align 4
  %214 = load i32, i32* %field_width, align 4
  %call331 = call i32 @c_itoa(i8* %add.ptr314, i64 %sub316, i64 %211, i32 %cond330, i32 %213, i32 %214)
  %215 = load i32, i32* %i, align 4
  %add332 = add nsw i32 %215, %call331
  store i32 %add332, i32* %i, align 4
  br label %if.end407

if.else333:                                       ; preds = %land.lhs.true309, %lor.lhs.false306
  %216 = load i32, i32* %ch, align 4
  %cmp334 = icmp eq i32 %216, 120
  br i1 %cmp334, label %land.lhs.true339, label %lor.lhs.false336

lor.lhs.false336:                                 ; preds = %if.else333
  %217 = load i32, i32* %ch, align 4
  %cmp337 = icmp eq i32 %217, 117
  br i1 %cmp337, label %land.lhs.true339, label %if.else363

land.lhs.true339:                                 ; preds = %lor.lhs.false336, %if.else333
  %218 = load i32, i32* %len_mod, align 4
  %cmp340 = icmp eq i32 %218, 122
  br i1 %cmp340, label %if.then342, label %if.else363

if.then342:                                       ; preds = %land.lhs.true339
  %219 = load i8*, i8** %buf.addr, align 8
  %220 = load i32, i32* %i, align 4
  %idx.ext343 = sext i32 %220 to i64
  %add.ptr344 = getelementptr inbounds i8, i8* %219, i64 %idx.ext343
  %221 = load i64, i64* %buf_size.addr, align 8
  %222 = load i32, i32* %i, align 4
  %conv345 = sext i32 %222 to i64
  %sub346 = sub i64 %221, %conv345
  %223 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p347 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %223, i32 0, i32 0
  %gp_offset348 = load i32, i32* %gp_offset_p347, align 8
  %fits_in_gp349 = icmp ule i32 %gp_offset348, 40
  br i1 %fits_in_gp349, label %vaarg.in_reg350, label %vaarg.in_mem352

vaarg.in_reg350:                                  ; preds = %if.then342
  %224 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %223, i32 0, i32 3
  %reg_save_area351 = load i8*, i8** %224, align 8
  %225 = getelementptr i8, i8* %reg_save_area351, i32 %gp_offset348
  %226 = bitcast i8* %225 to i64*
  %227 = add i32 %gp_offset348, 8
  store i32 %227, i32* %gp_offset_p347, align 8
  br label %vaarg.end356

vaarg.in_mem352:                                  ; preds = %if.then342
  %overflow_arg_area_p353 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %223, i32 0, i32 2
  %overflow_arg_area354 = load i8*, i8** %overflow_arg_area_p353, align 8
  %228 = bitcast i8* %overflow_arg_area354 to i64*
  %overflow_arg_area.next355 = getelementptr i8, i8* %overflow_arg_area354, i32 8
  store i8* %overflow_arg_area.next355, i8** %overflow_arg_area_p353, align 8
  br label %vaarg.end356

vaarg.end356:                                     ; preds = %vaarg.in_mem352, %vaarg.in_reg350
  %vaarg.addr357 = phi i64* [ %226, %vaarg.in_reg350 ], [ %228, %vaarg.in_mem352 ]
  %229 = load i64, i64* %vaarg.addr357, align 8
  %230 = load i32, i32* %ch, align 4
  %cmp358 = icmp eq i32 %230, 120
  %cond360 = select i1 %cmp358, i32 16, i32 10
  %231 = load i32, i32* %flags, align 4
  %232 = load i32, i32* %field_width, align 4
  %call361 = call i32 @c_itoa(i8* %add.ptr344, i64 %sub346, i64 %229, i32 %cond360, i32 %231, i32 %232)
  %233 = load i32, i32* %i, align 4
  %add362 = add nsw i32 %233, %call361
  store i32 %add362, i32* %i, align 4
  br label %if.end406

if.else363:                                       ; preds = %land.lhs.true339, %lor.lhs.false336
  %234 = load i32, i32* %ch, align 4
  %cmp364 = icmp eq i32 %234, 112
  br i1 %cmp364, label %if.then366, label %if.else404

if.then366:                                       ; preds = %if.else363
  %235 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %gp_offset_p367 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %235, i32 0, i32 0
  %gp_offset368 = load i32, i32* %gp_offset_p367, align 8
  %fits_in_gp369 = icmp ule i32 %gp_offset368, 40
  br i1 %fits_in_gp369, label %vaarg.in_reg370, label %vaarg.in_mem372

vaarg.in_reg370:                                  ; preds = %if.then366
  %236 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %235, i32 0, i32 3
  %reg_save_area371 = load i8*, i8** %236, align 8
  %237 = getelementptr i8, i8* %reg_save_area371, i32 %gp_offset368
  %238 = bitcast i8* %237 to i8**
  %239 = add i32 %gp_offset368, 8
  store i32 %239, i32* %gp_offset_p367, align 8
  br label %vaarg.end376

vaarg.in_mem372:                                  ; preds = %if.then366
  %overflow_arg_area_p373 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %235, i32 0, i32 2
  %overflow_arg_area374 = load i8*, i8** %overflow_arg_area_p373, align 8
  %240 = bitcast i8* %overflow_arg_area374 to i8**
  %overflow_arg_area.next375 = getelementptr i8, i8* %overflow_arg_area374, i32 8
  store i8* %overflow_arg_area.next375, i8** %overflow_arg_area_p373, align 8
  br label %vaarg.end376

vaarg.end376:                                     ; preds = %vaarg.in_mem372, %vaarg.in_reg370
  %vaarg.addr377 = phi i8** [ %238, %vaarg.in_reg370 ], [ %240, %vaarg.in_mem372 ]
  %241 = load i8*, i8** %vaarg.addr377, align 8
  %242 = ptrtoint i8* %241 to i64
  store i64 %242, i64* %num, align 8
  br label %do.body378

do.body378:                                       ; preds = %vaarg.end376
  %243 = load i32, i32* %i, align 4
  %244 = load i64, i64* %buf_size.addr, align 8
  %conv379 = trunc i64 %244 to i32
  %cmp380 = icmp slt i32 %243, %conv379
  br i1 %cmp380, label %if.then382, label %if.end385

if.then382:                                       ; preds = %do.body378
  %245 = load i8*, i8** %buf.addr, align 8
  %246 = load i32, i32* %i, align 4
  %idxprom383 = sext i32 %246 to i64
  %arrayidx384 = getelementptr inbounds i8, i8* %245, i64 %idxprom383
  store i8 48, i8* %arrayidx384, align 1
  br label %if.end385

if.end385:                                        ; preds = %if.then382, %do.body378
  %247 = load i32, i32* %i, align 4
  %inc386 = add nsw i32 %247, 1
  store i32 %inc386, i32* %i, align 4
  br label %do.end387

do.end387:                                        ; preds = %if.end385
  br label %do.body388

do.body388:                                       ; preds = %do.end387
  %248 = load i32, i32* %i, align 4
  %249 = load i64, i64* %buf_size.addr, align 8
  %conv389 = trunc i64 %249 to i32
  %cmp390 = icmp slt i32 %248, %conv389
  br i1 %cmp390, label %if.then392, label %if.end395

if.then392:                                       ; preds = %do.body388
  %250 = load i8*, i8** %buf.addr, align 8
  %251 = load i32, i32* %i, align 4
  %idxprom393 = sext i32 %251 to i64
  %arrayidx394 = getelementptr inbounds i8, i8* %250, i64 %idxprom393
  store i8 120, i8* %arrayidx394, align 1
  br label %if.end395

if.end395:                                        ; preds = %if.then392, %do.body388
  %252 = load i32, i32* %i, align 4
  %inc396 = add nsw i32 %252, 1
  store i32 %inc396, i32* %i, align 4
  br label %do.end397

do.end397:                                        ; preds = %if.end395
  %253 = load i8*, i8** %buf.addr, align 8
  %254 = load i32, i32* %i, align 4
  %idx.ext398 = sext i32 %254 to i64
  %add.ptr399 = getelementptr inbounds i8, i8* %253, i64 %idx.ext398
  %255 = load i64, i64* %buf_size.addr, align 8
  %256 = load i32, i32* %i, align 4
  %conv400 = sext i32 %256 to i64
  %sub401 = sub i64 %255, %conv400
  %257 = load i64, i64* %num, align 8
  %258 = load i32, i32* %flags, align 4
  %call402 = call i32 @c_itoa(i8* %add.ptr399, i64 %sub401, i64 %257, i32 16, i32 %258, i32 0)
  %259 = load i32, i32* %i, align 4
  %add403 = add nsw i32 %259, %call402
  store i32 %add403, i32* %i, align 4
  br label %if.end405

if.else404:                                       ; preds = %if.else363
  call void @abort() #13
  unreachable

if.end405:                                        ; preds = %do.end397
  br label %if.end406

if.end406:                                        ; preds = %if.end405, %vaarg.end356
  br label %if.end407

if.end407:                                        ; preds = %if.end406, %vaarg.end326
  br label %if.end408

if.end408:                                        ; preds = %if.end407, %vaarg.end295
  br label %if.end409

if.end409:                                        ; preds = %if.end408, %vaarg.end268
  br label %if.end410

if.end410:                                        ; preds = %if.end409, %vaarg.end244
  br label %if.end411

if.end411:                                        ; preds = %if.end410, %vaarg.end220
  br label %if.end412

if.end412:                                        ; preds = %if.end411, %vaarg.end195
  br label %if.end413

if.end413:                                        ; preds = %if.end412, %do.end177
  br label %if.end414

if.end414:                                        ; preds = %if.end413, %if.end151
  br label %if.end415

if.end415:                                        ; preds = %if.end414, %do.end
  br label %while.cond

while.end416:                                     ; preds = %while.cond
  %260 = load i64, i64* %buf_size.addr, align 8
  %cmp417 = icmp ugt i64 %260, 0
  br i1 %cmp417, label %if.then419, label %if.end431

if.then419:                                       ; preds = %while.end416
  %261 = load i8*, i8** %buf.addr, align 8
  %262 = load i32, i32* %i, align 4
  %263 = load i64, i64* %buf_size.addr, align 8
  %conv420 = trunc i64 %263 to i32
  %cmp421 = icmp slt i32 %262, %conv420
  br i1 %cmp421, label %cond.true423, label %cond.false424

cond.true423:                                     ; preds = %if.then419
  %264 = load i32, i32* %i, align 4
  br label %cond.end427

cond.false424:                                    ; preds = %if.then419
  %265 = load i64, i64* %buf_size.addr, align 8
  %conv425 = trunc i64 %265 to i32
  %sub426 = sub nsw i32 %conv425, 1
  br label %cond.end427

cond.end427:                                      ; preds = %cond.false424, %cond.true423
  %cond428 = phi i32 [ %264, %cond.true423 ], [ %sub426, %cond.false424 ]
  %idxprom429 = sext i32 %cond428 to i64
  %arrayidx430 = getelementptr inbounds i8, i8* %261, i64 %idxprom429
  store i8 0, i8* %arrayidx430, align 1
  br label %if.end431

if.end431:                                        ; preds = %cond.end427, %while.end416
  %266 = load i32, i32* %i, align 4
  ret i32 %266
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @c_itoa(i8* %buf, i64 %buf_size, i64 %num, i32 %base, i32 %flags, i32 %field_width) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %num.addr = alloca i64, align 8
  %base.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %field_width.addr = alloca i32, align 4
  %tmp = alloca [40 x i8], align 16
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %neg = alloca i32, align 4
  %rem = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i64 %num, i64* %num.addr, align 8
  store i32 %base, i32* %base.addr, align 4
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %field_width, i32* %field_width.addr, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %k, align 4
  store i32 0, i32* %neg, align 4
  %0 = load i64, i64* %num.addr, align 8
  %cmp = icmp slt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %neg, align 4
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %neg, align 4
  %2 = load i64, i64* %num.addr, align 8
  %sub = sub nsw i64 0, %2
  store i64 %sub, i64* %num.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %3 = load i64, i64* %num.addr, align 8
  %4 = load i32, i32* %base.addr, align 4
  %conv = sext i32 %4 to i64
  %rem5 = srem i64 %3, %conv
  %conv6 = trunc i64 %rem5 to i32
  store i32 %conv6, i32* %rem, align 4
  %5 = load i32, i32* %rem, align 4
  %cmp7 = icmp slt i32 %5, 10
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %do.body
  %6 = load i32, i32* %rem, align 4
  %add = add nsw i32 48, %6
  %conv10 = trunc i32 %add to i8
  %7 = load i32, i32* %k, align 4
  %inc11 = add nsw i32 %7, 1
  store i32 %inc11, i32* %k, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom
  store i8 %conv10, i8* %arrayidx, align 1
  br label %if.end18

if.else:                                          ; preds = %do.body
  %8 = load i32, i32* %rem, align 4
  %sub12 = sub nsw i32 %8, 10
  %add13 = add nsw i32 97, %sub12
  %conv14 = trunc i32 %add13 to i8
  %9 = load i32, i32* %k, align 4
  %inc15 = add nsw i32 %9, 1
  store i32 %inc15, i32* %k, align 4
  %idxprom16 = sext i32 %9 to i64
  %arrayidx17 = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom16
  store i8 %conv14, i8* %arrayidx17, align 1
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then9
  %10 = load i32, i32* %base.addr, align 4
  %conv19 = sext i32 %10 to i64
  %11 = load i64, i64* %num.addr, align 8
  %div = sdiv i64 %11, %conv19
  store i64 %div, i64* %num.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end18
  %12 = load i64, i64* %num.addr, align 8
  %cmp20 = icmp sgt i64 %12, 0
  br i1 %cmp20, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %13 = load i32, i32* %flags.addr, align 4
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %if.then22, label %if.end30

if.then22:                                        ; preds = %do.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then22
  %14 = load i32, i32* %k, align 4
  %15 = load i32, i32* %field_width.addr, align 4
  %cmp23 = icmp slt i32 %14, %15
  br i1 %cmp23, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %16 = load i32, i32* %k, align 4
  %cmp25 = icmp slt i32 %16, 39
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %cmp25, %land.rhs ]
  br i1 %17, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %18 = load i32, i32* %k, align 4
  %inc27 = add nsw i32 %18, 1
  store i32 %inc27, i32* %k, align 4
  %idxprom28 = sext i32 %18 to i64
  %arrayidx29 = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom28
  store i8 48, i8* %arrayidx29, align 1
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %if.end30

if.end30:                                         ; preds = %while.end, %do.end
  %19 = load i32, i32* %neg, align 4
  %tobool31 = icmp ne i32 %19, 0
  br i1 %tobool31, label %if.then32, label %if.end36

if.then32:                                        ; preds = %if.end30
  %20 = load i32, i32* %k, align 4
  %inc33 = add nsw i32 %20, 1
  store i32 %inc33, i32* %k, align 4
  %idxprom34 = sext i32 %20 to i64
  %arrayidx35 = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom34
  store i8 45, i8* %arrayidx35, align 1
  br label %if.end36

if.end36:                                         ; preds = %if.then32, %if.end30
  br label %while.cond37

while.cond37:                                     ; preds = %do.end53, %if.end36
  %21 = load i32, i32* %k, align 4
  %dec = add nsw i32 %21, -1
  store i32 %dec, i32* %k, align 4
  %cmp38 = icmp sge i32 %dec, 0
  br i1 %cmp38, label %while.body40, label %while.end54

while.body40:                                     ; preds = %while.cond37
  br label %do.body41

do.body41:                                        ; preds = %while.body40
  %22 = load i32, i32* %i, align 4
  %23 = load i64, i64* %buf_size.addr, align 8
  %conv42 = trunc i64 %23 to i32
  %cmp43 = icmp slt i32 %22, %conv42
  br i1 %cmp43, label %if.then45, label %if.end50

if.then45:                                        ; preds = %do.body41
  %24 = load i32, i32* %k, align 4
  %idxprom46 = sext i32 %24 to i64
  %arrayidx47 = getelementptr inbounds [40 x i8], [40 x i8]* %tmp, i64 0, i64 %idxprom46
  %25 = load i8, i8* %arrayidx47, align 1
  %26 = load i8*, i8** %buf.addr, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom48 = sext i32 %27 to i64
  %arrayidx49 = getelementptr inbounds i8, i8* %26, i64 %idxprom48
  store i8 %25, i8* %arrayidx49, align 1
  br label %if.end50

if.end50:                                         ; preds = %if.then45, %do.body41
  %28 = load i32, i32* %i, align 4
  %inc51 = add nsw i32 %28, 1
  store i32 %inc51, i32* %i, align 4
  br label %do.end53

do.end53:                                         ; preds = %if.end50
  br label %while.cond37

while.end54:                                      ; preds = %while.cond37
  %29 = load i32, i32* %i, align 4
  ret i32 %29
}

; Function Attrs: noreturn
declare void @abort() #9

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @c_snprintf(i8* %buf, i64 %buf_size, i8* %fmt, ...) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %fmt.addr = alloca i8*, align 8
  %result = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8*, i8** %buf.addr, align 8
  %1 = load i64, i64* %buf_size.addr, align 8
  %2 = load i8*, i8** %fmt.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @c_vsnprintf(i8* %0, i64 %1, i8* %2, %struct.__va_list_tag* %arraydecay2)
  store i32 %call, i32* %result, align 4
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %3 = load i32, i32* %result, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i8* @c_strnstr(i8* %s, i8* %find, i64 %slen) #0 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca i8*, align 8
  %find.addr = alloca i8*, align 8
  %slen.addr = alloca i64, align 8
  %find_length = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  store i8* %find, i8** %find.addr, align 8
  store i64 %slen, i64* %slen.addr, align 8
  %0 = load i8*, i8** %find.addr, align 8
  %call = call i64 @strlen(i8* %0)
  store i64 %call, i64* %find_length, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8
  %2 = load i64, i64* %slen.addr, align 8
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %i, align 8
  %4 = load i64, i64* %find_length, align 8
  %add = add i64 %3, %4
  %5 = load i64, i64* %slen.addr, align 8
  %cmp1 = icmp ugt i64 %add, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  %6 = load i8*, i8** %s.addr, align 8
  %7 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %7
  %8 = load i8*, i8** %find.addr, align 8
  %9 = load i64, i64* %find_length, align 8
  %call2 = call i32 @strncmp(i8* %arrayidx, i8* %8, i64 %9)
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %10 = load i8*, i8** %s.addr, align 8
  %11 = load i64, i64* %i, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %10, i64 %11
  store i8* %arrayidx5, i8** %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %12 = load i64, i64* %i, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then4, %if.then
  %13 = load i8*, i8** %retval, align 8
  ret i8* %13
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @cs_to_hex(i8* %to, i8* %p, i64 %len) #0 {
entry:
  %to.addr = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store i8* %to, i8** %to.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %len.addr, align 8
  %dec = add i64 %0, -1
  store i64 %dec, i64* %len.addr, align 8
  %tobool = icmp ne i64 %0, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** @cs_to_hex.hex, align 8
  %2 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %shr = ashr i32 %conv, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx1 = getelementptr inbounds i8, i8* %1, i64 %idxprom
  %4 = load i8, i8* %arrayidx1, align 1
  %5 = load i8*, i8** %to.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %to.addr, align 8
  store i8 %4, i8* %5, align 1
  %6 = load i8*, i8** @cs_to_hex.hex, align 8
  %7 = load i8*, i8** %p.addr, align 8
  %arrayidx2 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %and = and i32 %conv3, 15
  %idxprom4 = sext i32 %and to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %6, i64 %idxprom4
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %to.addr, align 8
  %incdec.ptr6 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr6, i8** %to.addr, align 8
  store i8 %9, i8* %10, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i8*, i8** %p.addr, align 8
  %incdec.ptr7 = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr7, i8** %p.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %to.addr, align 8
  store i8 0, i8* %12, align 1
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define weak void @cs_from_hex(i8* %to, i8* %p, i64 %len) #0 {
entry:
  %to.addr = alloca i8*, align 8
  %p.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %to, i8** %to.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %len.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %p.addr, align 8
  %3 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %call = call i32 @fourbit(i32 %conv)
  %shl = shl i32 %call, 4
  %5 = load i8*, i8** %p.addr, align 8
  %6 = load i64, i64* %i, align 8
  %add = add i64 %6, 1
  %arrayidx1 = getelementptr inbounds i8, i8* %5, i64 %add
  %7 = load i8, i8* %arrayidx1, align 1
  %conv2 = sext i8 %7 to i32
  %call3 = call i32 @fourbit(i32 %conv2)
  %add4 = add nsw i32 %shl, %call3
  %conv5 = trunc i32 %add4 to i8
  %8 = load i8*, i8** %to.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %to.addr, align 8
  store i8 %conv5, i8* %8, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i64, i64* %i, align 8
  %add6 = add i64 %9, 2
  store i64 %add6, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8*, i8** %to.addr, align 8
  store i8 0, i8* %10, align 1
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @fourbit(i32 %ch) #0 {
entry:
  %retval = alloca i32, align 4
  %ch.addr = alloca i32, align 4
  store i32 %ch, i32* %ch.addr, align 4
  %0 = load i32, i32* %ch.addr, align 4
  %cmp = icmp sge i32 %0, 48
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ch.addr, align 4
  %cmp1 = icmp sle i32 %1, 57
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %ch.addr, align 4
  %sub = sub nsw i32 %2, 48
  store i32 %sub, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %ch.addr, align 4
  %cmp2 = icmp sge i32 %3, 97
  br i1 %cmp2, label %land.lhs.true3, label %if.else7

land.lhs.true3:                                   ; preds = %if.else
  %4 = load i32, i32* %ch.addr, align 4
  %cmp4 = icmp sle i32 %4, 102
  br i1 %cmp4, label %if.then5, label %if.else7

if.then5:                                         ; preds = %land.lhs.true3
  %5 = load i32, i32* %ch.addr, align 4
  %sub6 = sub nsw i32 %5, 97
  %add = add nsw i32 %sub6, 10
  store i32 %add, i32* %retval, align 4
  br label %return

if.else7:                                         ; preds = %land.lhs.true3, %if.else
  %6 = load i32, i32* %ch.addr, align 4
  %cmp8 = icmp sge i32 %6, 65
  br i1 %cmp8, label %land.lhs.true9, label %if.end

land.lhs.true9:                                   ; preds = %if.else7
  %7 = load i32, i32* %ch.addr, align 4
  %cmp10 = icmp sle i32 %7, 70
  br i1 %cmp10, label %if.then11, label %if.end

if.then11:                                        ; preds = %land.lhs.true9
  %8 = load i32, i32* %ch.addr, align 4
  %sub12 = sub nsw i32 %8, 65
  %add13 = add nsw i32 %sub12, 10
  store i32 %add13, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true9, %if.else7
  br label %if.end14

if.end14:                                         ; preds = %if.end
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end15, %if.then11, %if.then5, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @str_util_lowercase(i8* %s) #0 {
entry:
  %s.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = zext i8 %1 to i32
  %call = call i32 @tolower(i32 %conv) #15
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_casecmp(i8* %s1, i8* %s2) #0 {
entry:
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  store i8* %s1, i8** %s1.addr, align 8
  store i8* %s2, i8** %s2.addr, align 8
  %0 = load i8*, i8** %s1.addr, align 8
  %1 = load i8*, i8** %s2.addr, align 8
  %call = call i32 @mg_ncasecmp(i8* %0, i8* %1, i64 -1)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_asprintf(i8** %buf, i64 %size, i8* %fmt, ...) #0 {
entry:
  %buf.addr = alloca i8**, align 8
  %size.addr = alloca i64, align 8
  %fmt.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8** %buf, i8*** %buf.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load i8**, i8*** %buf.addr, align 8
  %1 = load i64, i64* %size.addr, align 8
  %2 = load i8*, i8** %fmt.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_avprintf(i8** %0, i64 %1, i8* %2, %struct.__va_list_tag* %arraydecay2)
  store i32 %call, i32* %ret, align 4
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %3 = load i32, i32* %ret, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i32 @mg_avprintf(i8** %buf, i64 %size, i8* %fmt, %struct.__va_list_tag* %ap) #0 {
entry:
  %buf.addr = alloca i8**, align 8
  %size.addr = alloca i64, align 8
  %fmt.addr = alloca i8*, align 8
  %ap.addr = alloca %struct.__va_list_tag*, align 8
  %ap_copy = alloca [1 x %struct.__va_list_tag], align 16
  %len = alloca i32, align 4
  store i8** %buf, i8*** %buf.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %ap.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %0 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  %2 = bitcast %struct.__va_list_tag* %0 to i8*
  call void @llvm.va_copy(i8* %1, i8* %2)
  %3 = load i8**, i8*** %buf.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %5 = load i64, i64* %size.addr, align 8
  %6 = load i8**, i8*** %buf.addr, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = call i64 @llvm.objectsize.i64.p0i8(i8* %7, i1 false)
  %9 = load i8*, i8** %fmt.addr, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %call = call i32 @__vsnprintf_chk(i8* %4, i64 %5, i32 0, i64 %8, i8* %9, %struct.__va_list_tag* %arraydecay1)
  store i32 %call, i32* %len, align 4
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %arraydecay23 = bitcast %struct.__va_list_tag* %arraydecay2 to i8*
  call void @llvm.va_end(i8* %arraydecay23)
  %10 = load i32, i32* %len, align 4
  %cmp = icmp slt i32 %10, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %11 = load i8**, i8*** %buf.addr, align 8
  store i8* null, i8** %11, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %if.then
  %12 = load i32, i32* %len, align 4
  %cmp4 = icmp slt i32 %12, 0
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load i8**, i8*** %buf.addr, align 8
  %14 = load i8*, i8** %13, align 8
  call void @free(i8* %14)
  %15 = load i64, i64* %size.addr, align 8
  %cmp5 = icmp eq i64 %15, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %while.body
  store i64 5, i64* %size.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then6, %while.body
  %16 = load i64, i64* %size.addr, align 8
  %mul = mul i64 %16, 2
  store i64 %mul, i64* %size.addr, align 8
  %17 = load i64, i64* %size.addr, align 8
  %call7 = call i8* @malloc(i64 %17) #14
  %18 = load i8**, i8*** %buf.addr, align 8
  store i8* %call7, i8** %18, align 8
  %cmp8 = icmp eq i8* %call7, null
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i32 -1, i32* %len, align 4
  br label %while.end

if.end10:                                         ; preds = %if.end
  %arraydecay11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %19 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %20 = bitcast %struct.__va_list_tag* %arraydecay11 to i8*
  %21 = bitcast %struct.__va_list_tag* %19 to i8*
  call void @llvm.va_copy(i8* %20, i8* %21)
  %22 = load i8**, i8*** %buf.addr, align 8
  %23 = load i8*, i8** %22, align 8
  %24 = load i64, i64* %size.addr, align 8
  %sub = sub i64 %24, 1
  %25 = load i8**, i8*** %buf.addr, align 8
  %26 = load i8*, i8** %25, align 8
  %27 = call i64 @llvm.objectsize.i64.p0i8(i8* %26, i1 false)
  %28 = load i8*, i8** %fmt.addr, align 8
  %arraydecay12 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %call13 = call i32 @__vsnprintf_chk(i8* %23, i64 %sub, i32 0, i64 %27, i8* %28, %struct.__va_list_tag* %arraydecay12)
  store i32 %call13, i32* %len, align 4
  %arraydecay14 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %arraydecay1415 = bitcast %struct.__va_list_tag* %arraydecay14 to i8*
  call void @llvm.va_end(i8* %arraydecay1415)
  br label %while.cond

while.end:                                        ; preds = %if.then9, %while.cond
  %29 = load i8**, i8*** %buf.addr, align 8
  %30 = load i8*, i8** %29, align 8
  %31 = load i32, i32* %len, align 4
  %idxprom = sext i32 %31 to i64
  %arrayidx = getelementptr inbounds i8, i8* %30, i64 %idxprom
  store i8 0, i8* %arrayidx, align 1
  br label %if.end34

if.else:                                          ; preds = %entry
  %32 = load i32, i32* %len, align 4
  %33 = load i64, i64* %size.addr, align 8
  %conv = trunc i64 %33 to i32
  %cmp16 = icmp sge i32 %32, %conv
  br i1 %cmp16, label %if.then18, label %if.end33

if.then18:                                        ; preds = %if.else
  %34 = load i32, i32* %len, align 4
  %add = add nsw i32 %34, 1
  %conv19 = sext i32 %add to i64
  %call20 = call i8* @malloc(i64 %conv19) #14
  %35 = load i8**, i8*** %buf.addr, align 8
  store i8* %call20, i8** %35, align 8
  %cmp21 = icmp eq i8* %call20, null
  br i1 %cmp21, label %if.then23, label %if.else24

if.then23:                                        ; preds = %if.then18
  store i32 -1, i32* %len, align 4
  br label %if.end32

if.else24:                                        ; preds = %if.then18
  %arraydecay25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %36 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %37 = bitcast %struct.__va_list_tag* %arraydecay25 to i8*
  %38 = bitcast %struct.__va_list_tag* %36 to i8*
  call void @llvm.va_copy(i8* %37, i8* %38)
  %39 = load i8**, i8*** %buf.addr, align 8
  %40 = load i8*, i8** %39, align 8
  %41 = load i32, i32* %len, align 4
  %add26 = add nsw i32 %41, 1
  %conv27 = sext i32 %add26 to i64
  %42 = load i8**, i8*** %buf.addr, align 8
  %43 = load i8*, i8** %42, align 8
  %44 = call i64 @llvm.objectsize.i64.p0i8(i8* %43, i1 false)
  %45 = load i8*, i8** %fmt.addr, align 8
  %arraydecay28 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %call29 = call i32 @__vsnprintf_chk(i8* %40, i64 %conv27, i32 0, i64 %44, i8* %45, %struct.__va_list_tag* %arraydecay28)
  store i32 %call29, i32* %len, align 4
  %arraydecay30 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap_copy, i32 0, i32 0
  %arraydecay3031 = bitcast %struct.__va_list_tag* %arraydecay30 to i8*
  call void @llvm.va_end(i8* %arraydecay3031)
  br label %if.end32

if.end32:                                         ; preds = %if.else24, %if.then23
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.else
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %while.end
  %46 = load i32, i32* %len, align 4
  ret i32 %46
}

; Function Attrs: nounwind
declare void @llvm.va_copy(i8*, i8*) #5

declare i32 @__vsnprintf_chk(i8*, i64, i32, i64, i8*, %struct.__va_list_tag*) #3

; Function Attrs: allocsize(0)
declare i8* @malloc(i64) #10

; Function Attrs: noinline nounwind ssp uwtable
define weak i8* @mg_next_comma_list_entry(i8* %list, %struct.mg_str* %val, %struct.mg_str* %eq_val) #0 {
entry:
  %list.addr = alloca i8*, align 8
  %val.addr = alloca %struct.mg_str*, align 8
  %eq_val.addr = alloca %struct.mg_str*, align 8
  %ret = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store i8* %list, i8** %list.addr, align 8
  store %struct.mg_str* %val, %struct.mg_str** %val.addr, align 8
  store %struct.mg_str* %eq_val, %struct.mg_str** %eq_val.addr, align 8
  %0 = load i8*, i8** %list.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* %0)
  %1 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %3 = extractvalue { i8*, i64 } %call, 0
  store i8* %3, i8** %2, align 8
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %5 = extractvalue { i8*, i64 } %call, 1
  store i64 %5, i64* %4, align 8
  %6 = load %struct.mg_str*, %struct.mg_str** %val.addr, align 8
  %7 = load %struct.mg_str*, %struct.mg_str** %eq_val.addr, align 8
  %8 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %call1 = call { i8*, i64 } @mg_next_comma_list_entry_n(i8* %10, i64 %12, %struct.mg_str* %6, %struct.mg_str* %7)
  %13 = bitcast %struct.mg_str* %ret to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %15 = extractvalue { i8*, i64 } %call1, 0
  store i8* %15, i8** %14, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %17 = extractvalue { i8*, i64 } %call1, 1
  store i64 %17, i64* %16, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ret, i32 0, i32 0
  %18 = load i8*, i8** %p, align 8
  ret i8* %18
}

declare i8* @memchr(i8*, i32, i64) #3

; Function Attrs: noinline nounwind ssp uwtable
define weak i64 @mg_match_prefix_n(i8* %pattern.coerce0, i64 %pattern.coerce1, i8* %str.coerce0, i64 %str.coerce1) #0 {
entry:
  %retval = alloca i64, align 8
  %pattern = alloca %struct.mg_str, align 8
  %str = alloca %struct.mg_str, align 8
  %or_str = alloca i8*, align 8
  %res = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %pstr = alloca %struct.mg_str, align 8
  %pstr80 = alloca %struct.mg_str, align 8
  %sstr = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %pattern to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %pattern.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %pattern.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %str to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %str.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %str.coerce1, i64* %5, align 8
  store i64 0, i64* %res, align 8
  store i64 0, i64* %len, align 8
  store i64 0, i64* %i, align 8
  store i64 0, i64* %j, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %6 = load i8*, i8** %p, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %7 = load i64, i64* %len1, align 8
  %call = call i8* @memchr(i8* %6, i32 124, i64 %7)
  store i8* %call, i8** %or_str, align 8
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %8 = load i8*, i8** %p2, align 8
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %9 = load i64, i64* %len3, align 8
  %call4 = call i8* @memchr(i8* %8, i32 44, i64 %9)
  store i8* %call4, i8** %or_str, align 8
  %cmp5 = icmp ne i8* %call4, null
  br i1 %cmp5, label %if.then, label %if.end23

if.then:                                          ; preds = %lor.lhs.false, %entry
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 0
  %p7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %10 = load i8*, i8** %p7, align 8
  store i8* %10, i8** %p6, align 8
  %len8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 1
  %11 = load i8*, i8** %or_str, align 8
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %12 = load i8*, i8** %p9, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len8, align 8
  %13 = bitcast %struct.mg_str* %pstr to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %struct.mg_str* %str to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %call10 = call i64 @mg_match_prefix_n(i8* %15, i64 %17, i8* %20, i64 %22)
  store i64 %call10, i64* %res, align 8
  %23 = load i64, i64* %res, align 8
  %cmp11 = icmp ugt i64 %23, 0
  br i1 %cmp11, label %if.then12, label %if.end

if.then12:                                        ; preds = %if.then
  %24 = load i64, i64* %res, align 8
  store i64 %24, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  %25 = load i8*, i8** %or_str, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 1
  %p13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 0
  store i8* %add.ptr, i8** %p13, align 8
  %p14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %26 = load i8*, i8** %p14, align 8
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %27 = load i64, i64* %len15, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %26, i64 %27
  %28 = load i8*, i8** %or_str, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %28, i64 1
  %sub.ptr.lhs.cast18 = ptrtoint i8* %add.ptr16 to i64
  %sub.ptr.rhs.cast19 = ptrtoint i8* %add.ptr17 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  %len21 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 1
  store i64 %sub.ptr.sub20, i64* %len21, align 8
  %29 = bitcast %struct.mg_str* %pstr to { i8*, i64 }*
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %struct.mg_str* %str to { i8*, i64 }*
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %call22 = call i64 @mg_match_prefix_n(i8* %31, i64 %33, i8* %36, i64 %38)
  store i64 %call22, i64* %retval, align 8
  br label %return

if.end23:                                         ; preds = %lor.lhs.false
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end23
  %39 = load i64, i64* %i, align 8
  %len24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %40 = load i64, i64* %len24, align 8
  %cmp25 = icmp ult i64 %39, %40
  br i1 %cmp25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %41 = load i64, i64* %j, align 8
  %len26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %42 = load i64, i64* %len26, align 8
  %cmp27 = icmp ult i64 %41, %42
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %43 = phi i1 [ false, %for.cond ], [ %cmp27, %land.rhs ]
  br i1 %43, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %p28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %44 = load i8*, i8** %p28, align 8
  %45 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %44, i64 %45
  %46 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %46 to i32
  %cmp29 = icmp eq i32 %conv, 63
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %for.body
  br label %for.inc

if.else:                                          ; preds = %for.body
  %p32 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %47 = load i8*, i8** %p32, align 8
  %48 = load i64, i64* %i, align 8
  %arrayidx33 = getelementptr inbounds i8, i8* %47, i64 %48
  %49 = load i8, i8* %arrayidx33, align 1
  %conv34 = sext i8 %49 to i32
  %cmp35 = icmp eq i32 %conv34, 42
  br i1 %cmp35, label %if.then37, label %if.else109

if.then37:                                        ; preds = %if.else
  %50 = load i64, i64* %i, align 8
  %inc = add i64 %50, 1
  store i64 %inc, i64* %i, align 8
  %51 = load i64, i64* %i, align 8
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %52 = load i64, i64* %len38, align 8
  %cmp39 = icmp ult i64 %51, %52
  br i1 %cmp39, label %land.lhs.true, label %if.else49

land.lhs.true:                                    ; preds = %if.then37
  %p41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %53 = load i8*, i8** %p41, align 8
  %54 = load i64, i64* %i, align 8
  %arrayidx42 = getelementptr inbounds i8, i8* %53, i64 %54
  %55 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %55 to i32
  %cmp44 = icmp eq i32 %conv43, 42
  br i1 %cmp44, label %if.then46, label %if.else49

if.then46:                                        ; preds = %land.lhs.true
  %56 = load i64, i64* %i, align 8
  %inc47 = add i64 %56, 1
  store i64 %inc47, i64* %i, align 8
  %len48 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %57 = load i64, i64* %len48, align 8
  %58 = load i64, i64* %j, align 8
  %sub = sub i64 %57, %58
  store i64 %sub, i64* %len, align 8
  br label %if.end62

if.else49:                                        ; preds = %land.lhs.true, %if.then37
  store i64 0, i64* %len, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else49
  %59 = load i64, i64* %j, align 8
  %60 = load i64, i64* %len, align 8
  %add = add i64 %59, %60
  %len50 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %61 = load i64, i64* %len50, align 8
  %cmp51 = icmp ult i64 %add, %61
  br i1 %cmp51, label %land.rhs53, label %land.end60

land.rhs53:                                       ; preds = %while.cond
  %p54 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 0
  %62 = load i8*, i8** %p54, align 8
  %63 = load i64, i64* %j, align 8
  %64 = load i64, i64* %len, align 8
  %add55 = add i64 %63, %64
  %arrayidx56 = getelementptr inbounds i8, i8* %62, i64 %add55
  %65 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %65 to i32
  %cmp58 = icmp ne i32 %conv57, 47
  br label %land.end60

land.end60:                                       ; preds = %land.rhs53, %while.cond
  %66 = phi i1 [ false, %while.cond ], [ %cmp58, %land.rhs53 ]
  br i1 %66, label %while.body, label %while.end

while.body:                                       ; preds = %land.end60
  %67 = load i64, i64* %len, align 8
  %inc61 = add i64 %67, 1
  store i64 %inc61, i64* %len, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end60
  br label %if.end62

if.end62:                                         ; preds = %while.end, %if.then46
  %68 = load i64, i64* %i, align 8
  %len63 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %69 = load i64, i64* %len63, align 8
  %cmp64 = icmp eq i64 %68, %69
  br i1 %cmp64, label %if.then77, label %lor.lhs.false66

lor.lhs.false66:                                  ; preds = %if.end62
  %p67 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %70 = load i8*, i8** %p67, align 8
  %71 = load i64, i64* %i, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %70, i64 %71
  %72 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %72 to i32
  %cmp70 = icmp eq i32 %conv69, 36
  br i1 %cmp70, label %land.lhs.true72, label %if.end79

land.lhs.true72:                                  ; preds = %lor.lhs.false66
  %73 = load i64, i64* %i, align 8
  %len73 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %74 = load i64, i64* %len73, align 8
  %sub74 = sub i64 %74, 1
  %cmp75 = icmp eq i64 %73, %sub74
  br i1 %cmp75, label %if.then77, label %if.end79

if.then77:                                        ; preds = %land.lhs.true72, %if.end62
  %75 = load i64, i64* %j, align 8
  %76 = load i64, i64* %len, align 8
  %add78 = add i64 %75, %76
  store i64 %add78, i64* %retval, align 8
  br label %return

if.end79:                                         ; preds = %land.lhs.true72, %lor.lhs.false66
  br label %do.body

do.body:                                          ; preds = %land.end104, %if.end79
  %p81 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr80, i32 0, i32 0
  %p82 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %77 = load i8*, i8** %p82, align 8
  %78 = load i64, i64* %i, align 8
  %add.ptr83 = getelementptr inbounds i8, i8* %77, i64 %78
  store i8* %add.ptr83, i8** %p81, align 8
  %len84 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr80, i32 0, i32 1
  %len85 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %79 = load i64, i64* %len85, align 8
  %80 = load i64, i64* %i, align 8
  %sub86 = sub i64 %79, %80
  store i64 %sub86, i64* %len84, align 8
  %p87 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %sstr, i32 0, i32 0
  %p88 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 0
  %81 = load i8*, i8** %p88, align 8
  %82 = load i64, i64* %j, align 8
  %add.ptr89 = getelementptr inbounds i8, i8* %81, i64 %82
  %83 = load i64, i64* %len, align 8
  %add.ptr90 = getelementptr inbounds i8, i8* %add.ptr89, i64 %83
  store i8* %add.ptr90, i8** %p87, align 8
  %len91 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %sstr, i32 0, i32 1
  %len92 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %84 = load i64, i64* %len92, align 8
  %85 = load i64, i64* %j, align 8
  %sub93 = sub i64 %84, %85
  %86 = load i64, i64* %len, align 8
  %sub94 = sub i64 %sub93, %86
  store i64 %sub94, i64* %len91, align 8
  %87 = bitcast %struct.mg_str* %pstr80 to { i8*, i64 }*
  %88 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %87, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %87, i32 0, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = bitcast %struct.mg_str* %sstr to { i8*, i64 }*
  %93 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %92, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %92, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  %call95 = call i64 @mg_match_prefix_n(i8* %89, i64 %91, i8* %94, i64 %96)
  store i64 %call95, i64* %res, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %97 = load i64, i64* %res, align 8
  %cmp96 = icmp eq i64 %97, 0
  br i1 %cmp96, label %land.lhs.true98, label %land.end104

land.lhs.true98:                                  ; preds = %do.cond
  %98 = load i64, i64* %len, align 8
  %cmp99 = icmp ne i64 %98, 0
  br i1 %cmp99, label %land.rhs101, label %land.end104

land.rhs101:                                      ; preds = %land.lhs.true98
  %99 = load i64, i64* %len, align 8
  %dec = add i64 %99, -1
  store i64 %dec, i64* %len, align 8
  %cmp102 = icmp ugt i64 %99, 0
  br label %land.end104

land.end104:                                      ; preds = %land.rhs101, %land.lhs.true98, %do.cond
  %100 = phi i1 [ false, %land.lhs.true98 ], [ false, %do.cond ], [ %cmp102, %land.rhs101 ]
  br i1 %100, label %do.body, label %do.end

do.end:                                           ; preds = %land.end104
  %101 = load i64, i64* %res, align 8
  %cmp105 = icmp eq i64 %101, 0
  br i1 %cmp105, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %102 = load i64, i64* %j, align 8
  %103 = load i64, i64* %res, align 8
  %add107 = add i64 %102, %103
  %104 = load i64, i64* %len, align 8
  %add108 = add i64 %add107, %104
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %add108, %cond.false ]
  store i64 %cond, i64* %retval, align 8
  br label %return

if.else109:                                       ; preds = %if.else
  %p110 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %105 = load i8*, i8** %p110, align 8
  %106 = load i64, i64* %i, align 8
  %arrayidx111 = getelementptr inbounds i8, i8* %105, i64 %106
  %call112 = call i32 @str_util_lowercase(i8* %arrayidx111)
  %p113 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 0
  %107 = load i8*, i8** %p113, align 8
  %108 = load i64, i64* %j, align 8
  %arrayidx114 = getelementptr inbounds i8, i8* %107, i64 %108
  %call115 = call i32 @str_util_lowercase(i8* %arrayidx114)
  %cmp116 = icmp ne i32 %call112, %call115
  br i1 %cmp116, label %if.then118, label %if.end119

if.then118:                                       ; preds = %if.else109
  br label %for.end

if.end119:                                        ; preds = %if.else109
  br label %if.end120

if.end120:                                        ; preds = %if.end119
  br label %if.end121

if.end121:                                        ; preds = %if.end120
  br label %for.inc

for.inc:                                          ; preds = %if.end121, %if.then31
  %109 = load i64, i64* %i, align 8
  %inc122 = add i64 %109, 1
  store i64 %inc122, i64* %i, align 8
  %110 = load i64, i64* %j, align 8
  %inc123 = add i64 %110, 1
  store i64 %inc123, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then118, %land.end
  %111 = load i64, i64* %i, align 8
  %len124 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %112 = load i64, i64* %len124, align 8
  %cmp125 = icmp ult i64 %111, %112
  br i1 %cmp125, label %land.lhs.true127, label %if.end142

land.lhs.true127:                                 ; preds = %for.end
  %p128 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 0
  %113 = load i8*, i8** %p128, align 8
  %114 = load i64, i64* %i, align 8
  %arrayidx129 = getelementptr inbounds i8, i8* %113, i64 %114
  %115 = load i8, i8* %arrayidx129, align 1
  %conv130 = sext i8 %115 to i32
  %cmp131 = icmp eq i32 %conv130, 36
  br i1 %cmp131, label %if.then133, label %if.end142

if.then133:                                       ; preds = %land.lhs.true127
  %116 = load i64, i64* %j, align 8
  %len134 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %117 = load i64, i64* %len134, align 8
  %cmp135 = icmp eq i64 %116, %117
  br i1 %cmp135, label %cond.true137, label %cond.false139

cond.true137:                                     ; preds = %if.then133
  %len138 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %str, i32 0, i32 1
  %118 = load i64, i64* %len138, align 8
  br label %cond.end140

cond.false139:                                    ; preds = %if.then133
  br label %cond.end140

cond.end140:                                      ; preds = %cond.false139, %cond.true137
  %cond141 = phi i64 [ %118, %cond.true137 ], [ 0, %cond.false139 ]
  store i64 %cond141, i64* %retval, align 8
  br label %return

if.end142:                                        ; preds = %land.lhs.true127, %for.end
  %119 = load i64, i64* %i, align 8
  %len143 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pattern, i32 0, i32 1
  %120 = load i64, i64* %len143, align 8
  %cmp144 = icmp eq i64 %119, %120
  br i1 %cmp144, label %cond.true146, label %cond.false147

cond.true146:                                     ; preds = %if.end142
  %121 = load i64, i64* %j, align 8
  br label %cond.end148

cond.false147:                                    ; preds = %if.end142
  br label %cond.end148

cond.end148:                                      ; preds = %cond.false147, %cond.true146
  %cond149 = phi i64 [ %121, %cond.true146 ], [ 0, %cond.false147 ]
  store i64 %cond149, i64* %retval, align 8
  br label %return

return:                                           ; preds = %cond.end148, %cond.end140, %cond.end, %if.then77, %if.end, %if.then12
  %122 = load i64, i64* %retval, align 8
  ret i64 %122
}

; Function Attrs: noinline nounwind ssp uwtable
define weak i64 @mg_match_prefix(i8* %pattern, i32 %pattern_len, i8* %str) #0 {
entry:
  %pattern.addr = alloca i8*, align 8
  %pattern_len.addr = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %pstr = alloca %struct.mg_str, align 8
  %s = alloca %struct.mg_str, align 8
  store i8* %pattern, i8** %pattern.addr, align 8
  store i32 %pattern_len, i32* %pattern_len.addr, align 4
  store i8* %str, i8** %str.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 0
  %0 = load i8*, i8** %pattern.addr, align 8
  store i8* %0, i8** %p, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pstr, i32 0, i32 1
  %1 = load i32, i32* %pattern_len.addr, align 4
  %conv = sext i32 %1 to i64
  store i64 %conv, i64* %len, align 8
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 0
  %2 = load i8*, i8** %str.addr, align 8
  store i8* %2, i8** %p1, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  store i64 0, i64* %len2, align 8
  %3 = load i8*, i8** %str.addr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %str.addr, align 8
  %call = call i64 @strlen(i8* %4)
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %s, i32 0, i32 1
  store i64 %call, i64* %len4, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = bitcast %struct.mg_str* %pstr to { i8*, i64 }*
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %struct.mg_str* %s to { i8*, i64 }*
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %call5 = call i64 @mg_match_prefix_n(i8* %7, i64 %9, i8* %12, i64 %14)
  ret i64 %call5
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_if_poll(%struct.mg_connection* %nc, double %now) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %now.addr = alloca double, align 8
  %now_t = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store double %now, double* %now.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8
  %and = and i64 %1, 2048
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_close_conn(%struct.mg_connection* %2)
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 21
  %4 = load i64, i64* %flags1, align 8
  %and2 = and i64 %4, 1024
  %tobool3 = icmp ne i64 %and2, 0
  br i1 %tobool3, label %if.then4, label %if.else7

if.then4:                                         ; preds = %if.else
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 9
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %6 = load i64, i64* %len, align 8
  %cmp = icmp eq i64 %6, 0
  br i1 %cmp, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then4
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 21
  %8 = load i64, i64* %flags6, align 8
  %or = or i64 %8, 2048
  store i64 %or, i64* %flags6, align 8
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_close_conn(%struct.mg_connection* %9)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then4
  br label %if.end13

if.else7:                                         ; preds = %if.else
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 21
  %11 = load i64, i64* %flags8, align 8
  %and9 = and i64 %11, 512
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.else7
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_close_conn(%struct.mg_connection* %12)
  store i32 0, i32* %retval, align 4
  br label %return

if.end12:                                         ; preds = %if.else7
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %if.end14

if.end14:                                         ; preds = %if.end13
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %14 = load double, double* %now.addr, align 8
  call void @mg_timer(%struct.mg_connection* %13, double %14)
  %15 = load double, double* %now.addr, align 8
  %conv = fptosi double %15 to i64
  store i64 %conv, i64* %now_t, align 8
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 16
  %18 = load i8*, i8** %user_data, align 8
  %19 = bitcast i64* %now_t to i8*
  call void @mg_call(%struct.mg_connection* %16, void (%struct.mg_connection*, i32, i8*)* null, i8* %18, i32 0, i8* %19)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end14, %if.then11, %if.then5, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_close_conn(%struct.mg_connection* %conn) #0 {
entry:
  %conn.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %call = call i32 @mg_do_recv(%struct.mg_connection* %2)
  %cmp1 = icmp eq i32 %call, -2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 21
  %4 = load i64, i64* %flags, align 8
  %or = or i64 %4, 512
  store i64 %or, i64* %flags, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %flags2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 21
  %6 = load i64, i64* %flags2, align 8
  %or3 = or i64 %6, 2048
  store i64 %or3, i64* %flags2, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  call void @mg_remove_conn(%struct.mg_connection* %7)
  %8 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 20
  %9 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %9, i32 0, i32 2
  %10 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %destroy_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %10, i32 0, i32 14
  %11 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %destroy_conn, align 8
  %12 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  call void %11(%struct.mg_connection* %12)
  %13 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 16
  %15 = load i8*, i8** %user_data, align 8
  call void @mg_call(%struct.mg_connection* %13, void (%struct.mg_connection*, i32, i8*)* null, i8* %15, i32 5, i8* null)
  %16 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  call void @mg_destroy_conn(%struct.mg_connection* %16, i32 0)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_timer(%struct.mg_connection* %c, double %now) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %now.addr = alloca double, align 8
  %old_value = alloca double, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store double %now, double* %now.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %ev_timer_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 11
  %1 = load double, double* %ev_timer_time, align 8
  %cmp = fcmp ogt double %1, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load double, double* %now.addr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %ev_timer_time1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 11
  %4 = load double, double* %ev_timer_time1, align 8
  %cmp2 = fcmp oge double %2, %4
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %ev_timer_time3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 11
  %6 = load double, double* %ev_timer_time3, align 8
  store double %6, double* %old_value, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %ev_timer_time4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 11
  store double 0.000000e+00, double* %ev_timer_time4, align 8
  %8 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %9 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 16
  %10 = load i8*, i8** %user_data, align 8
  %11 = bitcast double* %old_value to i8*
  call void @mg_call(%struct.mg_connection* %8, void (%struct.mg_connection*, i32, i8*)* null, i8* %10, i32 6, i8* %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_call(%struct.mg_connection* %nc, void (%struct.mg_connection*, i32, i8*)* %ev_handler, i8* %user_data, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %user_data.addr = alloca i8*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %flags_before = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %ev_data, i8** %ev_data.addr, align 8
  %0 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %cmp = icmp eq void (%struct.mg_connection*, i32, i8*)* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 12
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8
  %tobool = icmp ne void (%struct.mg_connection*, i32, i8*)* %2, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_handler1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 12
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %proto_handler1, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 15
  %6 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi void (%struct.mg_connection*, i32, i8*)* [ %4, %cond.true ], [ %6, %cond.false ]
  store void (%struct.mg_connection*, i32, i8*)* %cond, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %7 = load i32, i32* %ev.addr, align 4
  %cmp2 = icmp ne i32 %7, 0
  br i1 %cmp2, label %if.then3, label %if.end12

if.then3:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then3
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2290)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %do.body
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %9 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 15
  %11 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler6, align 8
  %cmp7 = icmp eq void (%struct.mg_connection*, i32, i8*)* %9, %11
  %cond8 = select i1 %cmp7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.170, i32 0, i32 0)
  %12 = load i32, i32* %ev.addr, align 4
  %13 = load i8*, i8** %ev_data.addr, align 8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 21
  %15 = load i64, i64* %flags, align 8
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %17 = load i64, i64* %len, align 8
  %conv = trunc i64 %17 to i32
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 9
  %len9 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %19 = load i64, i64* %len9, align 8
  %conv10 = trunc i64 %19 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.168, i32 0, i32 0), %struct.mg_connection* %8, i8* %cond8, i32 %12, i8* %13, i64 %15, i32 %conv, i32 %conv10)
  br label %if.end11

if.end11:                                         ; preds = %if.then5, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end11
  br label %if.end12

if.end12:                                         ; preds = %do.end, %if.end
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 3
  %21 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %hexdump_file = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %21, i32 0, i32 1
  %22 = load i8*, i8** %hexdump_file, align 8
  %cmp13 = icmp ne i8* %22, null
  br i1 %cmp13, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %if.end12
  %23 = load i32, i32* %ev.addr, align 4
  %cmp15 = icmp ne i32 %23, 0
  br i1 %cmp15, label %land.lhs.true17, label %if.end26

land.lhs.true17:                                  ; preds = %land.lhs.true
  %24 = load i32, i32* %ev.addr, align 4
  %cmp18 = icmp ne i32 %24, 3
  br i1 %cmp18, label %land.lhs.true20, label %if.end26

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %25 = load i32, i32* %ev.addr, align 4
  %cmp21 = icmp ne i32 %25, 4
  br i1 %cmp21, label %if.then23, label %if.end26

if.then23:                                        ; preds = %land.lhs.true20
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr24 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 3
  %28 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr24, align 8
  %hexdump_file25 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %28, i32 0, i32 1
  %29 = load i8*, i8** %hexdump_file25, align 8
  %30 = load i32, i32* %ev.addr, align 4
  call void @mg_hexdump_connection(%struct.mg_connection* %26, i8* %29, i8* null, i32 0, i32 %30)
  br label %if.end26

if.end26:                                         ; preds = %if.then23, %land.lhs.true20, %land.lhs.true17, %land.lhs.true, %if.end12
  %31 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %cmp27 = icmp ne void (%struct.mg_connection*, i32, i8*)* %31, null
  br i1 %cmp27, label %if.then29, label %if.end43

if.then29:                                        ; preds = %if.end26
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags30 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %32, i32 0, i32 21
  %33 = load i64, i64* %flags30, align 8
  store i64 %33, i64* %flags_before, align 8
  %34 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %36 = load i32, i32* %ev.addr, align 4
  %37 = load i8*, i8** %ev_data.addr, align 8
  call void %34(%struct.mg_connection* %35, i32 %36, i8* %37)
  %38 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler31 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %39, i32 0, i32 15
  %40 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler31, align 8
  %cmp32 = icmp eq void (%struct.mg_connection*, i32, i8*)* %38, %40
  br i1 %cmp32, label %land.lhs.true34, label %if.end42

land.lhs.true34:                                  ; preds = %if.then29
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags35 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %41, i32 0, i32 21
  %42 = load i64, i64* %flags35, align 8
  %43 = load i64, i64* %flags_before, align 8
  %cmp36 = icmp ne i64 %42, %43
  br i1 %cmp36, label %if.then38, label %if.end42

if.then38:                                        ; preds = %land.lhs.true34
  %44 = load i64, i64* %flags_before, align 8
  %and = and i64 %44, -66075905
  %45 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags39 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %45, i32 0, i32 21
  %46 = load i64, i64* %flags39, align 8
  %and40 = and i64 %46, 66075904
  %or = or i64 %and, %and40
  %47 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags41 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %47, i32 0, i32 21
  store i64 %or, i64* %flags41, align 8
  br label %if.end42

if.end42:                                         ; preds = %if.then38, %land.lhs.true34, %if.then29
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end26
  %48 = load i32, i32* %ev.addr, align 4
  %cmp44 = icmp ne i32 %48, 0
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %if.end43
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr47 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %49, i32 0, i32 3
  %50 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr47, align 8
  %num_calls = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %50, i32 0, i32 5
  %51 = load i32, i32* %num_calls, align 4
  %inc = add nsw i32 %51, 1
  store i32 %inc, i32* %num_calls, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %if.end43
  %52 = load i32, i32* %ev.addr, align 4
  %cmp49 = icmp ne i32 %52, 0
  br i1 %cmp49, label %if.then51, label %if.end69

if.then51:                                        ; preds = %if.end48
  br label %do.body52

do.body52:                                        ; preds = %if.then51
  %call53 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2312)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.then55, label %if.end67

if.then55:                                        ; preds = %do.body52
  %53 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %54 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %55 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler56 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %55, i32 0, i32 15
  %56 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler56, align 8
  %cmp57 = icmp eq void (%struct.mg_connection*, i32, i8*)* %54, %56
  %cond59 = select i1 %cmp57, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.170, i32 0, i32 0)
  %57 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags60 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %57, i32 0, i32 21
  %58 = load i64, i64* %flags60, align 8
  %59 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf61 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %59, i32 0, i32 8
  %len62 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf61, i32 0, i32 1
  %60 = load i64, i64* %len62, align 8
  %conv63 = trunc i64 %60 to i32
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf64 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %61, i32 0, i32 9
  %len65 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf64, i32 0, i32 1
  %62 = load i64, i64* %len65, align 8
  %conv66 = trunc i64 %62 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.171, i32 0, i32 0), %struct.mg_connection* %53, i8* %cond59, i64 %58, i32 %conv63, i32 %conv66)
  br label %if.end67

if.end67:                                         ; preds = %if.then55, %do.body52
  br label %do.end68

do.end68:                                         ; preds = %if.end67
  br label %if.end69

if.end69:                                         ; preds = %do.end68, %if.end48
  %63 = load i8*, i8** %user_data.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_destroy_conn(%struct.mg_connection* %conn, i32 %destroy_if) #0 {
entry:
  %conn.addr = alloca %struct.mg_connection*, align 8
  %destroy_if.addr = alloca i32, align 4
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8
  store i32 %destroy_if, i32* %destroy_if.addr, align 4
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2372)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then1, label %if.end

if.then1:                                         ; preds = %do.body
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 21
  %4 = load i64, i64* %flags, align 8
  %5 = load i32, i32* %destroy_if.addr, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0), %struct.mg_connection* %2, i64 %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then1, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end2

if.end2:                                          ; preds = %do.end, %entry
  %6 = load i32, i32* %destroy_if.addr, align 4
  %tobool3 = icmp ne i32 %6, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end2
  %7 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 20
  %8 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %8, i32 0, i32 2
  %9 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %destroy_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %9, i32 0, i32 14
  %10 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %destroy_conn, align 8
  %11 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  call void %10(%struct.mg_connection* %11)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end2
  %12 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 13
  %13 = load i8*, i8** %proto_data, align 8
  %cmp6 = icmp ne i8* %13, null
  br i1 %cmp6, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %if.end5
  %14 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %proto_data_destructor = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 14
  %15 = load void (i8*)*, void (i8*)** %proto_data_destructor, align 8
  %cmp7 = icmp ne void (i8*)* %15, null
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %land.lhs.true
  %16 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %proto_data_destructor9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 14
  %17 = load void (i8*)*, void (i8*)** %proto_data_destructor9, align 8
  %18 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %proto_data10 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 13
  %19 = load i8*, i8** %proto_data10, align 8
  call void %17(i8* %19)
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %land.lhs.true, %if.end5
  %20 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 8
  call void @mbuf_free(%struct.mbuf* %recv_mbuf)
  %21 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 9
  call void @mbuf_free(%struct.mbuf* %send_mbuf)
  %22 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %23 = bitcast %struct.mg_connection* %22 to i8*
  %24 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %25 = bitcast %struct.mg_connection* %24 to i8*
  %26 = call i64 @llvm.objectsize.i64.p0i8(i8* %25, i1 false)
  %call12 = call i8* @__memset_chk(i8* %23, i32 0, i64 216, i64 %26) #5
  %27 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %28 = bitcast %struct.mg_connection* %27 to i8*
  call void @free(i8* %28)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mgr_init(%struct.mg_mgr* %m, i8* %user_data) #0 {
entry:
  %m.addr = alloca %struct.mg_mgr*, align 8
  %user_data.addr = alloca i8*, align 8
  %opts = alloca %struct.mg_mgr_init_opts, align 8
  store %struct.mg_mgr* %m, %struct.mg_mgr** %m.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = bitcast %struct.mg_mgr_init_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %2 = load i8*, i8** %user_data.addr, align 8
  call void @mg_mgr_init_opt(%struct.mg_mgr* %1, i8* %2, %struct.mg_mgr_init_opts* byval align 8 %opts)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mgr_init_opt(%struct.mg_mgr* %m, i8* %user_data, %struct.mg_mgr_init_opts* byval align 8 %opts) #0 {
entry:
  %m.addr = alloca %struct.mg_mgr*, align 8
  %user_data.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.mg_mgr* %m, %struct.mg_mgr** %m.addr, align 8
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %1 = bitcast %struct.mg_mgr* %0 to i8*
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %3 = bitcast %struct.mg_mgr* %2 to i8*
  %4 = call i64 @llvm.objectsize.i64.p0i8(i8* %3, i1 false)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 56, i64 %4) #5
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 1
  store i32 -1, i32* %arrayidx, align 4
  %6 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ctl1 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %6, i32 0, i32 2
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl1, i64 0, i64 0
  store i32 -1, i32* %arrayidx2, align 8
  %7 = load i8*, i8** %user_data.addr, align 8
  %8 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %user_data3 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %8, i32 0, i32 3
  store i8* %7, i8** %user_data3, align 8
  %num_ifaces = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  %9 = load i32, i32* %num_ifaces, align 8
  %cmp = icmp eq i32 %9, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load i32, i32* @mg_num_ifaces, align 4
  %num_ifaces4 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  store i32 %10, i32* %num_ifaces4, align 8
  %ifaces = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 2
  store %struct.mg_iface_vtable** getelementptr inbounds ([1 x %struct.mg_iface_vtable*], [1 x %struct.mg_iface_vtable*]* @mg_ifaces, i32 0, i32 0), %struct.mg_iface_vtable*** %ifaces, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %main_iface = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 0
  %11 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %main_iface, align 8
  %cmp5 = icmp ne %struct.mg_iface_vtable* %11, null
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end
  %main_iface7 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 0
  %12 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %main_iface7, align 8
  %ifaces8 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 2
  %13 = load %struct.mg_iface_vtable**, %struct.mg_iface_vtable*** %ifaces8, align 8
  %arrayidx9 = getelementptr inbounds %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %13, i64 0
  store %struct.mg_iface_vtable* %12, %struct.mg_iface_vtable** %arrayidx9, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end
  %num_ifaces11 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  %14 = load i32, i32* %num_ifaces11, align 8
  %15 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %num_ifaces12 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %15, i32 0, i32 4
  store i32 %14, i32* %num_ifaces12, align 8
  %num_ifaces13 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  %16 = load i32, i32* %num_ifaces13, align 8
  %conv = sext i32 %16 to i64
  %mul = mul i64 8, %conv
  %call14 = call i8* @malloc(i64 %mul) #14
  %17 = bitcast i8* %call14 to %struct.mg_iface**
  %18 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces15 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %18, i32 0, i32 6
  store %struct.mg_iface** %17, %struct.mg_iface*** %ifaces15, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end10
  %19 = load i32, i32* %i, align 4
  %num_ifaces16 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 1
  %20 = load i32, i32* %num_ifaces16, align 8
  %cmp17 = icmp slt i32 %19, %20
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %ifaces19 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 2
  %21 = load %struct.mg_iface_vtable**, %struct.mg_iface_vtable*** %ifaces19, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom = sext i32 %22 to i64
  %arrayidx20 = getelementptr inbounds %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %21, i64 %idxprom
  %23 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %arrayidx20, align 8
  %24 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %call21 = call %struct.mg_iface* @mg_if_create_iface(%struct.mg_iface_vtable* %23, %struct.mg_mgr* %24)
  %25 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces22 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %25, i32 0, i32 6
  %26 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces22, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom23 = sext i32 %27 to i64
  %arrayidx24 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %26, i64 %idxprom23
  store %struct.mg_iface* %call21, %struct.mg_iface** %arrayidx24, align 8
  %28 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces25 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %28, i32 0, i32 6
  %29 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces25, align 8
  %30 = load i32, i32* %i, align 4
  %idxprom26 = sext i32 %30 to i64
  %arrayidx27 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %29, i64 %idxprom26
  %31 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx27, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %31, i32 0, i32 2
  %32 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %init = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %32, i32 0, i32 0
  %33 = load void (%struct.mg_iface*)*, void (%struct.mg_iface*)** %init, align 8
  %34 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces28 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %34, i32 0, i32 6
  %35 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces28, align 8
  %36 = load i32, i32* %i, align 4
  %idxprom29 = sext i32 %36 to i64
  %arrayidx30 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %35, i64 %idxprom29
  %37 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx30, align 8
  call void %33(%struct.mg_iface* %37)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %38 = load i32, i32* %i, align 4
  %inc = add nsw i32 %38, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %nameserver = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 3
  %39 = load i8*, i8** %nameserver, align 8
  %cmp31 = icmp ne i8* %39, null
  br i1 %cmp31, label %if.then33, label %if.end37

if.then33:                                        ; preds = %for.end
  %nameserver34 = getelementptr inbounds %struct.mg_mgr_init_opts, %struct.mg_mgr_init_opts* %opts, i32 0, i32 3
  %40 = load i8*, i8** %nameserver34, align 8
  %call35 = call i8* @strdup(i8* %40)
  %41 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %nameserver36 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %41, i32 0, i32 7
  store i8* %call35, i8** %nameserver36, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %for.end
  br label %do.body

do.body:                                          ; preds = %if.end37
  %call38 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2457)
  %tobool = icmp ne i32 %call38, 0
  br i1 %tobool, label %if.then39, label %if.end40

if.then39:                                        ; preds = %do.body
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i32 0, i32 0))
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end40
  br label %do.body41

do.body41:                                        ; preds = %do.end
  %call42 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2458)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %do.body41
  %42 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i32 0, i32 0), %struct.mg_mgr* %42)
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %do.body41
  br label %do.end46

do.end46:                                         ; preds = %if.end45
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_iface* @mg_if_create_iface(%struct.mg_iface_vtable* %vtable, %struct.mg_mgr* %mgr) #0 {
entry:
  %vtable.addr = alloca %struct.mg_iface_vtable*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %iface = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface_vtable* %vtable, %struct.mg_iface_vtable** %vtable.addr, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  %call = call i8* @calloc(i64 1, i64 24) #16
  %0 = bitcast i8* %call to %struct.mg_iface*
  store %struct.mg_iface* %0, %struct.mg_iface** %iface, align 8
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %2 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %mgr1 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %2, i32 0, i32 0
  store %struct.mg_mgr* %1, %struct.mg_mgr** %mgr1, align 8
  %3 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %data = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %3, i32 0, i32 1
  store i8* null, i8** %data, align 8
  %4 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable.addr, align 8
  %5 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable2 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %5, i32 0, i32 2
  store %struct.mg_iface_vtable* %4, %struct.mg_iface_vtable** %vtable2, align 8
  %6 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  ret %struct.mg_iface* %6
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mgr_free(%struct.mg_mgr* %m) #0 {
entry:
  %m.addr = alloca %struct.mg_mgr*, align 8
  %conn = alloca %struct.mg_connection*, align 8
  %tmp_conn = alloca %struct.mg_connection*, align 8
  %i = alloca i32, align 4
  store %struct.mg_mgr* %m, %struct.mg_mgr** %m.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2473)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i32 0, i32 0), %struct.mg_mgr* %0)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %cmp = icmp eq %struct.mg_mgr* %1, null
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %do.end
  br label %return

if.end2:                                          ; preds = %do.end
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %call3 = call i32 @mg_mgr_poll(%struct.mg_mgr* %2, i32 0)
  %3 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %3, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 0
  %4 = load i32, i32* %arrayidx, align 8
  %cmp4 = icmp ne i32 %4, -1
  br i1 %cmp4, label %if.then5, label %if.end9

if.then5:                                         ; preds = %if.end2
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ctl6 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 2
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl6, i64 0, i64 0
  %6 = load i32, i32* %arrayidx7, align 8
  %call8 = call i32 @"\01_close"(i32 %6)
  br label %if.end9

if.end9:                                          ; preds = %if.then5, %if.end2
  %7 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ctl10 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %7, i32 0, i32 2
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl10, i64 0, i64 1
  %8 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp ne i32 %8, -1
  br i1 %cmp12, label %if.then13, label %if.end17

if.then13:                                        ; preds = %if.end9
  %9 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ctl14 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %9, i32 0, i32 2
  %arrayidx15 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl14, i64 0, i64 1
  %10 = load i32, i32* %arrayidx15, align 4
  %call16 = call i32 @"\01_close"(i32 %10)
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.end9
  %11 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ctl18 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %11, i32 0, i32 2
  %arrayidx19 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl18, i64 0, i64 1
  store i32 -1, i32* %arrayidx19, align 4
  %12 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ctl20 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %12, i32 0, i32 2
  %arrayidx21 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl20, i64 0, i64 0
  store i32 -1, i32* %arrayidx21, align 8
  %13 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %13, i32 0, i32 0
  %14 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8
  store %struct.mg_connection* %14, %struct.mg_connection** %conn, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end17
  %15 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %cmp22 = icmp ne %struct.mg_connection* %15, null
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 0
  %17 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8
  store %struct.mg_connection* %17, %struct.mg_connection** %tmp_conn, align 8
  %18 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 21
  %19 = load i64, i64* %flags, align 8
  %or = or i64 %19, 2048
  store i64 %or, i64* %flags, align 8
  %20 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  call void @mg_close_conn(%struct.mg_connection* %20)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load %struct.mg_connection*, %struct.mg_connection** %tmp_conn, align 8
  store %struct.mg_connection* %21, %struct.mg_connection** %conn, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc33, %for.end
  %22 = load i32, i32* %i, align 4
  %23 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %num_ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %23, i32 0, i32 4
  %24 = load i32, i32* %num_ifaces, align 8
  %cmp24 = icmp slt i32 %22, %24
  br i1 %cmp24, label %for.body25, label %for.end34

for.body25:                                       ; preds = %for.cond23
  %25 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %25, i32 0, i32 6
  %26 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces, align 8
  %27 = load i32, i32* %i, align 4
  %idxprom = sext i32 %27 to i64
  %arrayidx26 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %26, i64 %idxprom
  %28 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx26, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %28, i32 0, i32 2
  %29 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %free = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %29, i32 0, i32 1
  %30 = load void (%struct.mg_iface*)*, void (%struct.mg_iface*)** %free, align 8
  %31 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces27 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %31, i32 0, i32 6
  %32 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces27, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %33 to i64
  %arrayidx29 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %32, i64 %idxprom28
  %34 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx29, align 8
  call void %30(%struct.mg_iface* %34)
  %35 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces30 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %35, i32 0, i32 6
  %36 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces30, align 8
  %37 = load i32, i32* %i, align 4
  %idxprom31 = sext i32 %37 to i64
  %arrayidx32 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %36, i64 %idxprom31
  %38 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx32, align 8
  %39 = bitcast %struct.mg_iface* %38 to i8*
  call void @free(i8* %39)
  br label %for.inc33

for.inc33:                                        ; preds = %for.body25
  %40 = load i32, i32* %i, align 4
  %inc = add nsw i32 %40, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond23

for.end34:                                        ; preds = %for.cond23
  %41 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces35 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %41, i32 0, i32 6
  %42 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces35, align 8
  %43 = bitcast %struct.mg_iface** %42 to i8*
  call void @free(i8* %43)
  %44 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %nameserver = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %44, i32 0, i32 7
  %45 = load i8*, i8** %nameserver, align 8
  call void @free(i8* %45)
  br label %return

return:                                           ; preds = %for.end34, %if.then1
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_mgr_poll(%struct.mg_mgr* %m, i32 %timeout_ms) #0 {
entry:
  %m.addr = alloca %struct.mg_mgr*, align 8
  %timeout_ms.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %num_calls_before = alloca i32, align 4
  store %struct.mg_mgr* %m, %struct.mg_mgr** %m.addr, align 8
  store i32 %timeout_ms, i32* %timeout_ms.addr, align 4
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %num_calls = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %0, i32 0, i32 5
  %1 = load i32, i32* %num_calls, align 4
  store i32 %1, i32* %num_calls_before, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %num_ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %3, i32 0, i32 4
  %4 = load i32, i32* %num_ifaces, align 8
  %cmp = icmp slt i32 %2, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 6
  %6 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %6, i64 %idxprom
  %8 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %8, i32 0, i32 2
  %9 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %poll = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %9, i32 0, i32 4
  %10 = load i64 (%struct.mg_iface*, i32)*, i64 (%struct.mg_iface*, i32)** %poll, align 8
  %11 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %ifaces1 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %11, i32 0, i32 6
  %12 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces1, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom2 = sext i32 %13 to i64
  %arrayidx3 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %12, i64 %idxprom2
  %14 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx3, align 8
  %15 = load i32, i32* %timeout_ms.addr, align 4
  %call = call i64 %10(%struct.mg_iface* %14, i32 %15)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.mg_mgr*, %struct.mg_mgr** %m.addr, align 8
  %num_calls4 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %17, i32 0, i32 5
  %18 = load i32, i32* %num_calls4, align 4
  %19 = load i32, i32* %num_calls_before, align 4
  %sub = sub nsw i32 %18, %19
  ret i32 %sub
}

declare i32 @"\01_close"(i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_vprintf(%struct.mg_connection* %nc, i8* %fmt, %struct.__va_list_tag* %ap) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fmt.addr = alloca i8*, align 8
  %ap.addr = alloca %struct.__va_list_tag*, align 8
  %mem = alloca [100 x i8], align 16
  %buf = alloca i8*, align 8
  %len = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %ap.addr, align 8
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  store i8* %arraydecay, i8** %buf, align 8
  %0 = load i8*, i8** %fmt.addr, align 8
  %1 = load %struct.__va_list_tag*, %struct.__va_list_tag** %ap.addr, align 8
  %call = call i32 @mg_avprintf(i8** %buf, i64 100, i8* %0, %struct.__va_list_tag* %1)
  store i32 %call, i32* %len, align 4
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load i8*, i8** %buf, align 8
  %4 = load i32, i32* %len, align 4
  call void @mg_send(%struct.mg_connection* %2, i8* %3, i32 %4)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8*, i8** %buf, align 8
  %arraydecay1 = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  %cmp2 = icmp ne i8* %5, %arraydecay1
  br i1 %cmp2, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %if.end
  %6 = load i8*, i8** %buf, align 8
  %cmp3 = icmp ne i8* %6, null
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %land.lhs.true
  %7 = load i8*, i8** %buf, align 8
  call void @free(i8* %7)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  %8 = load i32, i32* %len, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send(%struct.mg_connection* %nc, i8* %buf, i32 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %call = call double @mg_time()
  %conv = fptosi double %call to i64
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 10
  store i64 %conv, i64* %last_io_time, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 9
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i32, i32* %len.addr, align 4
  %conv1 = sext i32 %3 to i64
  %call2 = call i64 @mbuf_append(%struct.mbuf* %send_mbuf, i8* %2, i64 %conv1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_printf(%struct.mg_connection* %conn, i8* %fmt, ...) #0 {
entry:
  %conn.addr = alloca %struct.mg_connection*, align 8
  %fmt.addr = alloca i8*, align 8
  %len = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %1 = load i8*, i8** %fmt.addr, align 8
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_vprintf(%struct.mg_connection* %0, i8* %1, %struct.__va_list_tag* %arraydecay2)
  store i32 %call, i32* %len, align 4
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %2 = load i32, i32* %len, align 4
  ret i32 %2
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_if_accept_new_conn(%struct.mg_connection* %lc) #0 {
entry:
  %retval = alloca %struct.mg_connection*, align 8
  %lc.addr = alloca %struct.mg_connection*, align 8
  %opts = alloca %struct.mg_add_sock_opts, align 8
  %nc = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %lc, %struct.mg_connection** %lc.addr, align 8
  %0 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 3
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 15
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %call = call %struct.mg_connection* @mg_create_connection(%struct.mg_mgr* %2, void (%struct.mg_connection*, i32, i8*)* %4, %struct.mg_add_sock_opts* byval align 8 %opts)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp = icmp eq %struct.mg_connection* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 2
  store %struct.mg_connection* %6, %struct.mg_connection** %listener, align 8
  %8 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 12
  %9 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %proto_handler1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* %9, void (%struct.mg_connection*, i32, i8*)** %proto_handler1, align 8
  %11 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 16
  %12 = load i8*, i8** %user_data, align 8
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %user_data2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 16
  store i8* %12, i8** %user_data2, align 8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 7
  %15 = load i64, i64* %recv_mbuf_limit, align 8
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %recv_mbuf_limit3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 7
  store i64 %15, i64* %recv_mbuf_limit3, align 8
  %17 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 20
  %18 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %iface4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 20
  store %struct.mg_iface* %18, %struct.mg_iface** %iface4, align 8
  %20 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 21
  %21 = load i64, i64* %flags, align 8
  %and = and i64 %21, 16
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 21
  %23 = load i64, i64* %flags6, align 8
  %or = or i64 %23, 16
  store i64 %or, i64* %flags6, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %mgr8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 3
  %25 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr8, align 8
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_add_conn(%struct.mg_mgr* %25, %struct.mg_connection* %26)
  br label %do.body

do.body:                                          ; preds = %if.end7
  %call9 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2749)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %do.body
  %27 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %29, i32 0, i32 4
  %30 = load i32, i32* %sock, align 8
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags12 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 21
  %32 = load i64, i64* %flags12, align 8
  %conv = trunc i64 %32 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), %struct.mg_connection* %27, %struct.mg_connection* %28, i32 %30, i32 %conv)
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end13
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  store %struct.mg_connection* %33, %struct.mg_connection** %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then
  %34 = load %struct.mg_connection*, %struct.mg_connection** %retval, align 8
  ret %struct.mg_connection* %34
}

; Function Attrs: noinline nounwind ssp uwtable
define internal %struct.mg_connection* @mg_create_connection(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_add_sock_opts* byval align 8 %opts) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %conn = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %1 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %call = call %struct.mg_connection* @mg_create_connection_base(%struct.mg_mgr* %0, void (%struct.mg_connection*, i32, i8*)* %1, %struct.mg_add_sock_opts* byval align 8 %opts)
  store %struct.mg_connection* %call, %struct.mg_connection** %conn, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %cmp = icmp ne %struct.mg_connection* %2, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 20
  %4 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %4, i32 0, i32 2
  %5 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %create_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %5, i32 0, i32 13
  %6 = load i32 (%struct.mg_connection*)*, i32 (%struct.mg_connection*)** %create_conn, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %call1 = call i32 %6(%struct.mg_connection* %7)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %9 = bitcast %struct.mg_connection* %8 to i8*
  call void @free(i8* %9)
  store %struct.mg_connection* null, %struct.mg_connection** %conn, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %cmp2 = icmp eq %struct.mg_connection* %10, null
  br i1 %cmp2, label %if.then3, label %if.end8

if.then3:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then3
  %error_string = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 2
  %11 = load i8**, i8*** %error_string, align 8
  %tobool4 = icmp ne i8** %11, null
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %do.body
  %error_string6 = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 2
  %12 = load i8**, i8*** %error_string6, align 8
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.172, i32 0, i32 0), i8** %12, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end7
  br label %if.end8

if.end8:                                          ; preds = %do.end, %if.end
  %13 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  ret %struct.mg_connection* %13
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_add_conn(%struct.mg_mgr* %mgr, %struct.mg_connection* %c) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2258)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.173, i32 0, i32 0), %struct.mg_mgr* %0, %struct.mg_connection* %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %mgr1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 3
  store %struct.mg_mgr* %2, %struct.mg_mgr** %mgr1, align 8
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %4, i32 0, i32 0
  %5 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8
  %6 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 0
  store %struct.mg_connection* %5, %struct.mg_connection** %next, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %8 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %active_connections2 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %8, i32 0, i32 0
  store %struct.mg_connection* %7, %struct.mg_connection** %active_connections2, align 8
  %9 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %prev = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 1
  store %struct.mg_connection* null, %struct.mg_connection** %prev, align 8
  %10 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %next3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 0
  %11 = load %struct.mg_connection*, %struct.mg_connection** %next3, align 8
  %cmp = icmp ne %struct.mg_connection* %11, null
  br i1 %cmp, label %if.then4, label %if.end7

if.then4:                                         ; preds = %do.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %13 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %next5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 0
  %14 = load %struct.mg_connection*, %struct.mg_connection** %next5, align 8
  %prev6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 1
  store %struct.mg_connection* %12, %struct.mg_connection** %prev6, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %do.end
  %15 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 4
  %16 = load i32, i32* %sock, align 8
  %cmp8 = icmp ne i32 %16, -1
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  %17 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 20
  %18 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %18, i32 0, i32 2
  %19 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %add_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %19, i32 0, i32 2
  %20 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %add_conn, align 8
  %21 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  call void %20(%struct.mg_connection* %21)
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_if_accept_tcp_cb(%struct.mg_connection* %nc, %union.socket_address* %sa, i64 %sa_len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %sa_len.addr = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i64 %sa_len, i64* %sa_len.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2756)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 21
  %2 = load i64, i64* %flags, align 8
  %and = and i64 %2, 2
  %tobool1 = icmp ne i64 %and, 0
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0)
  %3 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin = bitcast %union.socket_address* %3 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %4 = load i32, i32* %coerce.dive, align 4
  %call2 = call i8* @inet_ntoa(i32 %4)
  %5 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin3 = bitcast %union.socket_address* %5 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin3, i32 0, i32 2
  %6 = load i16, i16* %sin_port, align 2
  %call4 = call zeroext i16 @_OSSwapInt16(i16 zeroext %6)
  %conv = zext i16 %call4 to i32
  %conv5 = trunc i32 %conv to i16
  %conv6 = zext i16 %conv5 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), %struct.mg_connection* %0, i8* %cond, i8* %call2, i32 %conv6)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 6
  %8 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %9 = bitcast %union.socket_address* %sa7 to i8*
  %10 = bitcast %union.socket_address* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 16, i32 4, i1 false)
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 16
  %13 = load i8*, i8** %user_data, align 8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 6
  %15 = bitcast %union.socket_address* %sa8 to i8*
  call void @mg_call(%struct.mg_connection* %11, void (%struct.mg_connection*, i32, i8*)* null, i8* %13, i32 1, i8* %15)
  %16 = load i64, i64* %sa_len.addr, align 8
  ret void
}

declare i8* @inet_ntoa(i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal zeroext i16 @_OSSwapInt16(i16 zeroext %_data) #0 {
entry:
  %_data.addr = alloca i16, align 2
  store i16 %_data, i16* %_data.addr, align 2
  %0 = load i16, i16* %_data.addr, align 2
  %conv = zext i16 %0 to i32
  %shl = shl i32 %conv, 8
  %1 = load i16, i16* %_data.addr, align 2
  %conv1 = zext i16 %1 to i32
  %shr = ashr i32 %conv1, 8
  %or = or i32 %shl, %shr
  %conv2 = trunc i32 %or to i16
  ret i16 %conv2
}

; Function Attrs: noinline nounwind ssp uwtable
define double @mg_time() #0 {
entry:
  %call = call double @cs_time()
  ret double %call
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_if_can_recv_cb(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call i32 @mg_do_recv(%struct.mg_connection* %0)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_do_recv(%struct.mg_connection* %nc) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %res = alloca i32, align 4
  %buf = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 0, i32* %res, align 4
  store i8* null, i8** %buf, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8
  %and = and i64 %1, 2
  %tobool = icmp ne i64 %and, 0
  %cond = select i1 %tobool, i32 1460, i32 1460
  %conv = sext i32 %cond to i64
  store i64 %conv, i64* %len, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 21
  %3 = load i64, i64* %flags1, align 8
  %and2 = and i64 %3, 2056
  %tobool3 = icmp ne i64 %and2, 0
  br i1 %tobool3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 21
  %5 = load i64, i64* %flags4, align 8
  %and5 = and i64 %5, 1
  %tobool6 = icmp ne i64 %and5, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 21
  %7 = load i64, i64* %flags7, align 8
  %and8 = and i64 %7, 2
  %tobool9 = icmp ne i64 %and8, 0
  br i1 %tobool9, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %land.end, %if.end
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %9 = load i64, i64* %len, align 8
  %call = call i64 @recv_avail_size(%struct.mg_connection* %8, i64 %9)
  store i64 %call, i64* %len, align 8
  %10 = load i64, i64* %len, align 8
  %cmp = icmp eq i64 %10, 0
  br i1 %cmp, label %if.then11, label %if.end12

if.then11:                                        ; preds = %do.body
  store i32 -2, i32* %res, align 4
  br label %do.end

if.end12:                                         ; preds = %do.body
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 8
  %size = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 2
  %12 = load i64, i64* %size, align 8
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf13 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 8
  %len14 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf13, i32 0, i32 1
  %14 = load i64, i64* %len14, align 8
  %15 = load i64, i64* %len, align 8
  %add = add i64 %14, %15
  %cmp15 = icmp ult i64 %12, %add
  br i1 %cmp15, label %if.then17, label %if.end22

if.then17:                                        ; preds = %if.end12
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf18 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 8
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf19 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 8
  %len20 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf19, i32 0, i32 1
  %18 = load i64, i64* %len20, align 8
  %19 = load i64, i64* %len, align 8
  %add21 = add i64 %18, %19
  call void @mbuf_resize(%struct.mbuf* %recv_mbuf18, i64 %add21)
  br label %if.end22

if.end22:                                         ; preds = %if.then17, %if.end12
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 8
  %buf24 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf23, i32 0, i32 0
  %21 = load i8*, i8** %buf24, align 8
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf25 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 8
  %len26 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf25, i32 0, i32 1
  %23 = load i64, i64* %len26, align 8
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %23
  store i8* %add.ptr, i8** %buf, align 8
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf27 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 8
  %size28 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf27, i32 0, i32 2
  %25 = load i64, i64* %size28, align 8
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf29 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %26, i32 0, i32 8
  %len30 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf29, i32 0, i32 1
  %27 = load i64, i64* %len30, align 8
  %sub = sub i64 %25, %27
  store i64 %sub, i64* %len, align 8
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags31 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 21
  %29 = load i64, i64* %flags31, align 8
  %and32 = and i64 %29, 2
  %tobool33 = icmp ne i64 %and32, 0
  br i1 %tobool33, label %if.then34, label %if.else

if.then34:                                        ; preds = %if.end22
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %31 = load i8*, i8** %buf, align 8
  %32 = load i64, i64* %len, align 8
  %call35 = call i32 @mg_recv_udp(%struct.mg_connection* %30, i8* %31, i64 %32)
  store i32 %call35, i32* %res, align 4
  br label %if.end37

if.else:                                          ; preds = %if.end22
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %34 = load i8*, i8** %buf, align 8
  %35 = load i64, i64* %len, align 8
  %call36 = call i32 @mg_recv_tcp(%struct.mg_connection* %33, i8* %34, i64 %35)
  store i32 %call36, i32* %res, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.else, %if.then34
  br label %do.cond

do.cond:                                          ; preds = %if.end37
  %36 = load i32, i32* %res, align 4
  %cmp38 = icmp sgt i32 %36, 0
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags40 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %37, i32 0, i32 21
  %38 = load i64, i64* %flags40, align 8
  %and41 = and i64 %38, 2050
  %tobool42 = icmp ne i64 %and41, 0
  %lnot = xor i1 %tobool42, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %39 = phi i1 [ false, %do.cond ], [ %lnot, %land.rhs ]
  br i1 %39, label %do.body, label %do.end

do.end:                                           ; preds = %land.end, %if.then11
  %40 = load i32, i32* %res, align 4
  store i32 %40, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_if_can_send_cb(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %n = alloca i32, align 4
  %buf = alloca i8*, align 8
  %len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 0, i32* %n, align 4
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 9
  %buf1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 0
  %1 = load i8*, i8** %buf1, align 8
  store i8* %1, i8** %buf, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 9
  %len3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf2, i32 0, i32 1
  %3 = load i64, i64* %len3, align 8
  store i64 %3, i64* %len, align 8
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 21
  %5 = load i64, i64* %flags, align 8
  %and = and i64 %5, 2056
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end55

if.end:                                           ; preds = %entry
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 21
  %7 = load i64, i64* %flags4, align 8
  %and5 = and i64 %7, 2
  %tobool6 = icmp ne i64 %and5, 0
  br i1 %tobool6, label %if.end15, label %if.then7

if.then7:                                         ; preds = %if.end
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 21
  %9 = load i64, i64* %flags8, align 8
  %and9 = and i64 %9, 1
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then7
  br label %if.end55

if.end12:                                         ; preds = %if.then7
  %10 = load i64, i64* %len, align 8
  %cmp = icmp ugt i64 %10, 1460
  br i1 %cmp, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end12
  store i64 1460, i64* %len, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end12
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end
  %11 = load i64, i64* %len, align 8
  %cmp16 = icmp ugt i64 %11, 0
  br i1 %cmp16, label %if.then17, label %if.end30

if.then17:                                        ; preds = %if.end15
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags18 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 21
  %13 = load i64, i64* %flags18, align 8
  %and19 = and i64 %13, 2
  %tobool20 = icmp ne i64 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.else

if.then21:                                        ; preds = %if.then17
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 20
  %15 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %15, i32 0, i32 2
  %16 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %udp_send = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %16, i32 0, i32 10
  %17 = load i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)** %udp_send, align 8
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %19 = load i8*, i8** %buf, align 8
  %20 = load i64, i64* %len, align 8
  %call = call i32 %17(%struct.mg_connection* %18, i8* %19, i64 %20)
  store i32 %call, i32* %n, align 4
  br label %if.end25

if.else:                                          ; preds = %if.then17
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %iface22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 20
  %22 = load %struct.mg_iface*, %struct.mg_iface** %iface22, align 8
  %vtable23 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %22, i32 0, i32 2
  %23 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable23, align 8
  %tcp_send = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %23, i32 0, i32 9
  %24 = load i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)** %tcp_send, align 8
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %26 = load i8*, i8** %buf, align 8
  %27 = load i64, i64* %len, align 8
  %call24 = call i32 %24(%struct.mg_connection* %25, i8* %26, i64 %27)
  store i32 %call24, i32* %n, align 4
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then21
  br label %do.body

do.body:                                          ; preds = %if.end25
  %call26 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2973)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %do.body
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %29 = load i32, i32* %n, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0), %struct.mg_connection* %28, i32 %29)
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end29
  br label %if.end30

if.end30:                                         ; preds = %do.end, %if.end15
  %30 = load i32, i32* %n, align 4
  %cmp31 = icmp sgt i32 %30, 0
  br i1 %cmp31, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %if.end30
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 3
  %32 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %tobool32 = icmp ne %struct.mg_mgr* %32, null
  br i1 %tobool32, label %land.lhs.true33, label %if.end39

land.lhs.true33:                                  ; preds = %land.lhs.true
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr34 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %33, i32 0, i32 3
  %34 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr34, align 8
  %hexdump_file = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %34, i32 0, i32 1
  %35 = load i8*, i8** %hexdump_file, align 8
  %cmp35 = icmp ne i8* %35, null
  br i1 %cmp35, label %if.then36, label %if.end39

if.then36:                                        ; preds = %land.lhs.true33
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr37 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %37, i32 0, i32 3
  %38 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr37, align 8
  %hexdump_file38 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %38, i32 0, i32 1
  %39 = load i8*, i8** %hexdump_file38, align 8
  %40 = load i8*, i8** %buf, align 8
  %41 = load i32, i32* %n, align 4
  call void @mg_hexdump_connection(%struct.mg_connection* %36, i8* %39, i8* %40, i32 %41, i32 4)
  br label %if.end39

if.end39:                                         ; preds = %if.then36, %land.lhs.true33, %land.lhs.true, %if.end30
  %42 = load i32, i32* %n, align 4
  %cmp40 = icmp slt i32 %42, 0
  br i1 %cmp40, label %if.then41, label %if.else43

if.then41:                                        ; preds = %if.end39
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags42 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %43, i32 0, i32 21
  %44 = load i64, i64* %flags42, align 8
  %or = or i64 %44, 2048
  store i64 %or, i64* %flags42, align 8
  br label %if.end51

if.else43:                                        ; preds = %if.end39
  %45 = load i32, i32* %n, align 4
  %cmp44 = icmp sgt i32 %45, 0
  br i1 %cmp44, label %if.then45, label %if.end50

if.then45:                                        ; preds = %if.else43
  %call46 = call double @mg_time()
  %conv = fptosi double %call46 to i64
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 10
  store i64 %conv, i64* %last_io_time, align 8
  %47 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf47 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %47, i32 0, i32 9
  %48 = load i32, i32* %n, align 4
  %conv48 = sext i32 %48 to i64
  call void @mbuf_remove(%struct.mbuf* %send_mbuf47, i64 %conv48)
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf49 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %49, i32 0, i32 9
  call void @mbuf_trim(%struct.mbuf* %send_mbuf49)
  br label %if.end50

if.end50:                                         ; preds = %if.then45, %if.else43
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then41
  %50 = load i32, i32* %n, align 4
  %cmp52 = icmp ne i32 %50, 0
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end51
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %52 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %52, i32 0, i32 16
  %53 = load i8*, i8** %user_data, align 8
  %54 = bitcast i32* %n to i8*
  call void @mg_call(%struct.mg_connection* %51, void (%struct.mg_connection*, i32, i8*)* null, i8* %53, i32 4, i8* %54)
  br label %if.end55

if.end55:                                         ; preds = %if.then, %if.then11, %if.then54, %if.end51
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_hexdump_connection(%struct.mg_connection* %nc, i8* %path, i8* %buf, i32 %num_bytes, i32 %ev) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %num_bytes.addr = alloca i32, align 4
  %ev.addr = alloca i32, align 4
  %fp = alloca %struct.__sFILE*, align 8
  %src = alloca [60 x i8], align 16
  %dst = alloca [60 x i8], align 16
  %tag = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %num_bytes, i32* %num_bytes.addr, align 4
  store i32 %ev, i32* %ev.addr, align 4
  store %struct.__sFILE* null, %struct.__sFILE** %fp, align 8
  store i8* null, i8** %tag, align 8
  %0 = load i32, i32* %ev.addr, align 4
  switch i32 %0, label %sw.epilog [
    i32 3, label %sw.bb
    i32 4, label %sw.bb1
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
    i32 5, label %sw.bb4
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.144, i32 0, i32 0), i8** %tag, align 8
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.145, i32 0, i32 0), i8** %tag, align 8
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.146, i32 0, i32 0), i8** %tag, align 8
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.147, i32 0, i32 0), i8** %tag, align 8
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.148, i32 0, i32 0), i8** %tag, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %tag, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  br label %if.end34

if.end:                                           ; preds = %sw.epilog
  %2 = load i8*, i8** %path.addr, align 8
  %call = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.149, i32 0, i32 0))
  %cmp5 = icmp eq i32 %call, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %3 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  store %struct.__sFILE* %3, %struct.__sFILE** %fp, align 8
  br label %if.end13

if.else:                                          ; preds = %if.end
  %4 = load i8*, i8** %path.addr, align 8
  %call7 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.150, i32 0, i32 0))
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.else
  %5 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  store %struct.__sFILE* %5, %struct.__sFILE** %fp, align 8
  br label %if.end12

if.else10:                                        ; preds = %if.else
  %6 = load i8*, i8** %path.addr, align 8
  %call11 = call %struct.__sFILE* @mg_fopen(i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.151, i32 0, i32 0))
  store %struct.__sFILE* %call11, %struct.__sFILE** %fp, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.else10, %if.then9
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then6
  %7 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %cmp14 = icmp eq %struct.__sFILE* %7, null
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end13
  br label %if.end34

if.end16:                                         ; preds = %if.end13
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay = getelementptr inbounds [60 x i8], [60 x i8]* %src, i32 0, i32 0
  %call17 = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %8, i8* %arraydecay, i64 60, i32 3)
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay18 = getelementptr inbounds [60 x i8], [60 x i8]* %dst, i32 0, i32 0
  %call19 = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %9, i8* %arraydecay18, i64 60, i32 7)
  %10 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call20 = call double @mg_time()
  %conv = fptoui double %call20 to i64
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %12 = bitcast %struct.mg_connection* %11 to i8*
  %arraydecay21 = getelementptr inbounds [60 x i8], [60 x i8]* %src, i32 0, i32 0
  %13 = load i8*, i8** %tag, align 8
  %arraydecay22 = getelementptr inbounds [60 x i8], [60 x i8]* %dst, i32 0, i32 0
  %14 = load i32, i32* %num_bytes.addr, align 4
  %call23 = call i32 (%struct.__sFILE*, i8*, ...) @fprintf(%struct.__sFILE* %10, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.152, i32 0, i32 0), i64 %conv, i8* %12, i8* %arraydecay21, i8* %13, i8* %arraydecay22, i32 %14)
  %15 = load i32, i32* %num_bytes.addr, align 4
  %cmp24 = icmp sgt i32 %15, 0
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end16
  %16 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %17 = load i8*, i8** %buf.addr, align 8
  %18 = load i32, i32* %num_bytes.addr, align 4
  call void @mg_hexdumpf(%struct.__sFILE* %16, i8* %17, i32 %18)
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end16
  %19 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %20 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  %cmp28 = icmp ne %struct.__sFILE* %19, %20
  br i1 %cmp28, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %if.end27
  %21 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %22 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %cmp30 = icmp ne %struct.__sFILE* %21, %22
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %land.lhs.true
  %23 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call33 = call i32 @fclose(%struct.__sFILE* %23)
  br label %if.end34

if.end34:                                         ; preds = %if.then, %if.then15, %if.then32, %land.lhs.true, %if.end27
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_if_connect_cb(%struct.mg_connection* %nc, i32 %err) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %err.addr = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %err, i32* %err.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3016)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 21
  %2 = load i64, i64* %flags, align 8
  %and = and i64 %2, 2
  %tobool1 = icmp ne i64 %and, 0
  %cond = select i1 %tobool1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 6
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %4 = load i32, i32* %coerce.dive, align 4
  %call2 = call i8* @inet_ntoa(i32 %4)
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 6
  %sin4 = bitcast %union.socket_address* %sa3 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin4, i32 0, i32 2
  %6 = load i16, i16* %sin_port, align 2
  %call5 = call zeroext i16 @_OSSwapInt16(i16 zeroext %6)
  %conv = zext i16 %call5 to i32
  %conv6 = trunc i32 %conv to i16
  %conv7 = zext i16 %conv6 to i32
  %7 = load i32, i32* %err.addr, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0), %struct.mg_connection* %0, i8* %cond, i8* %call2, i32 %conv7, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 21
  %9 = load i64, i64* %flags8, align 8
  %and9 = and i64 %9, -9
  store i64 %and9, i64* %flags8, align 8
  %10 = load i32, i32* %err.addr, align 4
  %cmp = icmp ne i32 %10, 0
  br i1 %cmp, label %if.then11, label %if.end13

if.then11:                                        ; preds = %do.end
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags12 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags12, align 8
  %or = or i64 %12, 2048
  store i64 %or, i64* %flags12, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %do.end
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 16
  %15 = load i8*, i8** %user_data, align 8
  %16 = bitcast i32* %err.addr to i8*
  call void @mg_call(%struct.mg_connection* %13, void (%struct.mg_connection*, i32, i8*)* null, i8* %15, i32 2, i8* %16)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_connect(%struct.mg_mgr* %mgr, i8* %address, void (%struct.mg_connection*, i32, i8*)* %callback) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %address.addr = alloca i8*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %opts = alloca %struct.mg_connect_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store i8* %address, i8** %address.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %0 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 40, i32 8, i1 false)
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %2 = load i8*, i8** %address.addr, align 8
  %3 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %call = call %struct.mg_connection* @mg_connect_opt(%struct.mg_mgr* %1, i8* %2, void (%struct.mg_connection*, i32, i8*)* %3, %struct.mg_connect_opts* byval align 8 %opts)
  ret %struct.mg_connection* %call
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_opt(%struct.mg_mgr* %mgr, i8* %address, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_connect_opts* byval align 8 %opts) #0 {
entry:
  %retval = alloca %struct.mg_connection*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %address.addr = alloca i8*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %proto = alloca i32, align 4
  %rc = alloca i32, align 4
  %add_sock_opts = alloca %struct.mg_add_sock_opts, align 8
  %host = alloca [200 x i8], align 16
  %dns_conn = alloca %struct.mg_connection*, align 8
  %o = alloca %struct.mg_resolve_async_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store i8* %address, i8** %address.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  store %struct.mg_connection* null, %struct.mg_connection** %nc, align 8
  %0 = bitcast %struct.mg_add_sock_opts* %add_sock_opts to i8*
  %1 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 32, i32 8, i1 false)
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %cmp = icmp eq void (%struct.mg_connection*, i32, i8*)* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store void (%struct.mg_connection*, i32, i8*)* @mg_ev_handler_empty, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %call = call %struct.mg_connection* @mg_create_connection(%struct.mg_mgr* %3, void (%struct.mg_connection*, i32, i8*)* %4, %struct.mg_add_sock_opts* byval align 8 %add_sock_opts)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8
  %cmp1 = icmp eq %struct.mg_connection* %call, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %5 = load i8*, i8** %address.addr, align 8
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 6
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %host, i32 0, i32 0
  %call4 = call i32 @mg_parse_address(i8* %5, %union.socket_address* %sa, i32* %proto, i8* %arraydecay, i64 200)
  store i32 %call4, i32* %rc, align 4
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end3
  br label %do.body

do.body:                                          ; preds = %if.then6
  %error_string = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %7 = load i8**, i8*** %error_string, align 8
  %tobool = icmp ne i8** %7, null
  br i1 %tobool, label %if.then7, label %if.end9

if.then7:                                         ; preds = %do.body
  %error_string8 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %8 = load i8**, i8*** %error_string8, align 8
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i32 0, i32 0), i8** %8, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end9
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_destroy_conn(%struct.mg_connection* %9, i32 1)
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  br label %return

if.end10:                                         ; preds = %if.end3
  %flags = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 1
  %10 = load i32, i32* %flags, align 8
  %and = and i32 %10, 66080768
  %conv = zext i32 %and to i64
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags11, align 8
  %or = or i64 %12, %conv
  store i64 %or, i64* %flags11, align 8
  %13 = load i32, i32* %proto, align 4
  %cmp12 = icmp eq i32 %13, 2
  %cond = select i1 %cmp12, i32 2, i32 0
  %conv14 = sext i32 %cond to i64
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags15 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 21
  %15 = load i64, i64* %flags15, align 8
  %or16 = or i64 %15, %conv14
  store i64 %or16, i64* %flags15, align 8
  %user_data = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 0
  %16 = load i8*, i8** %user_data, align 8
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %user_data17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 16
  store i8* %16, i8** %user_data17, align 8
  %18 = load i32, i32* %rc, align 4
  %cmp18 = icmp eq i32 %18, 0
  br i1 %cmp18, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.end10
  store %struct.mg_connection* null, %struct.mg_connection** %dns_conn, align 8
  %19 = bitcast %struct.mg_resolve_async_opts* %o to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 32, i32 8, i1 false)
  %dns_conn21 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %o, i32 0, i32 5
  store %struct.mg_connection** %dns_conn, %struct.mg_connection*** %dns_conn21, align 8
  %nameserver = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 4
  %20 = load i8*, i8** %nameserver, align 8
  %nameserver22 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %o, i32 0, i32 0
  store i8* %20, i8** %nameserver22, align 8
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %mgr23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 3
  %22 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr23, align 8
  %arraydecay24 = getelementptr inbounds [200 x i8], [200 x i8]* %host, i32 0, i32 0
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %24 = bitcast %struct.mg_connection* %23 to i8*
  %call25 = call i32 @mg_resolve_async_opt(%struct.mg_mgr* %22, i8* %arraydecay24, i32 1, void (%struct.mg_dns_message*, i8*, i32)* @resolve_cb, i8* %24, %struct.mg_resolve_async_opts* byval align 8 %o)
  %cmp26 = icmp ne i32 %call25, 0
  br i1 %cmp26, label %if.then28, label %if.end36

if.then28:                                        ; preds = %if.then20
  br label %do.body29

do.body29:                                        ; preds = %if.then28
  %error_string30 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %25 = load i8**, i8*** %error_string30, align 8
  %tobool31 = icmp ne i8** %25, null
  br i1 %tobool31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %do.body29
  %error_string33 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %26 = load i8**, i8*** %error_string33, align 8
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i32 0, i32 0), i8** %26, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %do.body29
  br label %do.end35

do.end35:                                         ; preds = %if.end34
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_destroy_conn(%struct.mg_connection* %27, i32 1)
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  br label %return

if.end36:                                         ; preds = %if.then20
  %28 = load %struct.mg_connection*, %struct.mg_connection** %dns_conn, align 8
  %29 = bitcast %struct.mg_connection* %28 to i8*
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %priv_2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %30, i32 0, i32 18
  store i8* %29, i8** %priv_2, align 8
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags37 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 21
  %32 = load i64, i64* %flags37, align 8
  %or38 = or i64 %32, 4
  store i64 %or38, i64* %flags37, align 8
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  store %struct.mg_connection* %33, %struct.mg_connection** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end10
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %35 = load i32, i32* %proto, align 4
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sa39 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %36, i32 0, i32 6
  %call40 = call %struct.mg_connection* @mg_do_connect(%struct.mg_connection* %34, i32 %35, %union.socket_address* %sa39)
  store %struct.mg_connection* %call40, %struct.mg_connection** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.end36, %do.end35, %do.end, %if.then2
  %37 = load %struct.mg_connection*, %struct.mg_connection** %retval, align 8
  ret %struct.mg_connection* %37
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_ev_handler_empty(%struct.mg_connection* %c, i32 %ev, i8* %ev_data) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %ev_data, i8** %ev_data.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i32, i32* %ev.addr, align 4
  %2 = load i8*, i8** %ev_data.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_parse_address(i8* %str, %union.socket_address* %sa, i32* %proto, i8* %host, i64 %host_len) #0 {
entry:
  %retval = alloca i32, align 4
  %str.addr = alloca i8*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %proto.addr = alloca i32*, align 8
  %host.addr = alloca i8*, align 8
  %host_len.addr = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %port = alloca i32, align 4
  %ch = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %str, i8** %str.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i32* %proto, i32** %proto.addr, align 8
  store i8* %host, i8** %host.addr, align 8
  store i64 %host_len, i64* %host_len.addr, align 8
  store i32 0, i32* %port, align 4
  store i32 0, i32* %len, align 4
  %0 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %1 = bitcast %union.socket_address* %0 to i8*
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %3 = bitcast %union.socket_address* %2 to i8*
  %4 = call i64 @llvm.objectsize.i64.p0i8(i8* %3, i1 false)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 16, i64 %4) #5
  %5 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin = bitcast %union.socket_address* %5 to %struct.sockaddr_in*
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 1
  store i8 2, i8* %sin_family, align 1
  %6 = load i32*, i32** %proto.addr, align 8
  store i32 1, i32* %6, align 4
  %7 = load i8*, i8** %str.addr, align 8
  %call1 = call i32 @strncmp(i8* %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.176, i32 0, i32 0), i64 6)
  %cmp = icmp eq i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load i8*, i8** %str.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 6
  store i8* %add.ptr, i8** %str.addr, align 8
  %9 = load i32*, i32** %proto.addr, align 8
  store i32 2, i32* %9, align 4
  br label %if.end6

if.else:                                          ; preds = %entry
  %10 = load i8*, i8** %str.addr, align 8
  %call2 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.177, i32 0, i32 0), i64 6)
  %cmp3 = icmp eq i32 %call2, 0
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  %11 = load i8*, i8** %str.addr, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %add.ptr5, i8** %str.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %12 = load i8*, i8** %str.addr, align 8
  %call7 = call i32 (i8*, i8*, ...) @sscanf(i8* %12, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.178, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d, i32* %port, i32* %len)
  %cmp8 = icmp eq i32 %call7, 5
  br i1 %cmp8, label %if.then9, label %if.else20

if.then9:                                         ; preds = %if.end6
  %13 = load i32, i32* %a, align 4
  %shl = shl i32 %13, 24
  %14 = load i32, i32* %b, align 4
  %shl10 = shl i32 %14, 16
  %or = or i32 %shl, %shl10
  %15 = load i32, i32* %c, align 4
  %shl11 = shl i32 %15, 8
  %or12 = or i32 %or, %shl11
  %16 = load i32, i32* %d, align 4
  %or13 = or i32 %or12, %16
  %call14 = call i32 @_OSSwapInt32(i32 %or13)
  %17 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin15 = bitcast %union.socket_address* %17 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin15, i32 0, i32 3
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  store i32 %call14, i32* %s_addr, align 4
  %18 = load i32, i32* %port, align 4
  %conv = trunc i32 %18 to i16
  %call16 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv)
  %conv17 = zext i16 %call16 to i32
  %conv18 = trunc i32 %conv17 to i16
  %19 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin19 = bitcast %union.socket_address* %19 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin19, i32 0, i32 2
  store i16 %conv18, i16* %sin_port, align 2
  br label %if.end61

if.else20:                                        ; preds = %if.end6
  %20 = load i8*, i8** %str.addr, align 8
  %call21 = call i64 @strlen(i8* %20)
  %21 = load i64, i64* %host_len.addr, align 8
  %cmp22 = icmp ult i64 %call21, %21
  br i1 %cmp22, label %land.lhs.true, label %if.else44

land.lhs.true:                                    ; preds = %if.else20
  %22 = load i8*, i8** %str.addr, align 8
  %23 = load i8*, i8** %host.addr, align 8
  %call24 = call i32 (i8*, i8*, ...) @sscanf(i8* %22, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.179, i32 0, i32 0), i8* %23, i32* %port, i32* %len)
  %cmp25 = icmp eq i32 %call24, 2
  br i1 %cmp25, label %if.then27, label %if.else44

if.then27:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* %port, align 4
  %conv28 = trunc i32 %24 to i16
  %call29 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv28)
  %conv30 = zext i16 %call29 to i32
  %conv31 = trunc i32 %conv30 to i16
  %25 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin32 = bitcast %union.socket_address* %25 to %struct.sockaddr_in*
  %sin_port33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin32, i32 0, i32 2
  store i16 %conv31, i16* %sin_port33, align 2
  %26 = load i8*, i8** %host.addr, align 8
  %27 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %call34 = call i32 @mg_resolve_from_hosts_file(i8* %26, %union.socket_address* %27)
  %cmp35 = icmp ne i32 %call34, 0
  br i1 %cmp35, label %if.then37, label %if.end43

if.then37:                                        ; preds = %if.then27
  %28 = load i8*, i8** %host.addr, align 8
  %call38 = call i32 @mg_ncasecmp(i8* %28, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.180, i32 0, i32 0), i64 9)
  %cmp39 = icmp ne i32 %call38, 0
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.then37
  store i32 0, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.then37
  store i32 -1, i32* %retval, align 4
  br label %return

if.end43:                                         ; preds = %if.then27
  br label %if.end60

if.else44:                                        ; preds = %land.lhs.true, %if.else20
  %29 = load i8*, i8** %str.addr, align 8
  %call45 = call i32 (i8*, i8*, ...) @sscanf(i8* %29, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.181, i32 0, i32 0), i32* %port, i32* %len)
  %cmp46 = icmp eq i32 %call45, 1
  br i1 %cmp46, label %if.then51, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else44
  %30 = load i8*, i8** %str.addr, align 8
  %call48 = call i32 (i8*, i8*, ...) @sscanf(i8* %30, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.182, i32 0, i32 0), i32* %port, i32* %len)
  %cmp49 = icmp eq i32 %call48, 1
  br i1 %cmp49, label %if.then51, label %if.else58

if.then51:                                        ; preds = %lor.lhs.false, %if.else44
  %31 = load i32, i32* %port, align 4
  %conv52 = trunc i32 %31 to i16
  %call53 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv52)
  %conv54 = zext i16 %call53 to i32
  %conv55 = trunc i32 %conv54 to i16
  %32 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin56 = bitcast %union.socket_address* %32 to %struct.sockaddr_in*
  %sin_port57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin56, i32 0, i32 2
  store i16 %conv55, i16* %sin_port57, align 2
  br label %if.end59

if.else58:                                        ; preds = %lor.lhs.false
  store i32 -1, i32* %retval, align 4
  br label %return

if.end59:                                         ; preds = %if.then51
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end43
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then9
  %33 = load i8*, i8** %host.addr, align 8
  %34 = load i64, i64* %host_len.addr, align 8
  %35 = load i8*, i8** %str.addr, align 8
  %36 = load i32, i32* %len, align 4
  %idxprom = sext i32 %36 to i64
  %arrayidx = getelementptr inbounds i8, i8* %35, i64 %idxprom
  %37 = load i8, i8* %arrayidx, align 1
  %conv62 = sext i8 %37 to i32
  store i32 %conv62, i32* %ch, align 4
  %38 = load i32, i32* %port, align 4
  %conv63 = zext i32 %38 to i64
  %cmp64 = icmp ult i64 %conv63, 65535
  br i1 %cmp64, label %land.lhs.true66, label %cond.false

land.lhs.true66:                                  ; preds = %if.end61
  %39 = load i32, i32* %ch, align 4
  %cmp67 = icmp eq i32 %39, 0
  br i1 %cmp67, label %cond.true, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %land.lhs.true66
  %40 = load i32, i32* %ch, align 4
  %cmp70 = icmp eq i32 %40, 44
  br i1 %cmp70, label %cond.true, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %lor.lhs.false69
  %41 = load i32, i32* %ch, align 4
  %call73 = call i32 @isspace(i32 %41) #15
  %tobool = icmp ne i32 %call73, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false72, %lor.lhs.false69, %land.lhs.true66
  %42 = load i32, i32* %len, align 4
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false72, %if.end61
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %42, %cond.true ], [ -1, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.else58, %if.end42, %if.then41
  %43 = load i32, i32* %retval, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_resolve_async_opt(%struct.mg_mgr* %mgr, i8* %name, i32 %query, void (%struct.mg_dns_message*, i8*, i32)* %cb, i8* %data, %struct.mg_resolve_async_opts* byval align 8 %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %name.addr = alloca i8*, align 8
  %query.addr = alloca i32, align 4
  %cb.addr = alloca void (%struct.mg_dns_message*, i8*, i32)*, align 8
  %data.addr = alloca i8*, align 8
  %req = alloca %struct.mg_resolve_async_request*, align 8
  %dns_nc = alloca %struct.mg_connection*, align 8
  %nameserver = alloca i8*, align 8
  %dns_server_buff = alloca [17 x i8], align 16
  %nameserver_url = alloca [26 x i8], align 16
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %query, i32* %query.addr, align 4
  store void (%struct.mg_dns_message*, i8*, i32)* %cb, void (%struct.mg_dns_message*, i8*, i32)** %cb.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %nameserver1 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 0
  %0 = load i8*, i8** %nameserver1, align 8
  store i8* %0, i8** %nameserver, align 8
  %1 = load i8*, i8** %nameserver, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %nameserver2 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %2, i32 0, i32 7
  %3 = load i8*, i8** %nameserver2, align 8
  store i8* %3, i8** %nameserver, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 12095)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.body
  %4 = load i8*, i8** %name.addr, align 8
  %5 = load i32, i32* %query.addr, align 4
  %dns_conn = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 5
  %6 = load %struct.mg_connection**, %struct.mg_connection*** %dns_conn, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.165, i32 0, i32 0), i8* %4, i32 %5, %struct.mg_connection** %6)
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end4
  %call5 = call i8* @calloc(i64 1, i64 1080) #16
  %7 = bitcast i8* %call5 to %struct.mg_resolve_async_request*
  store %struct.mg_resolve_async_request* %7, %struct.mg_resolve_async_request** %req, align 8
  %8 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %cmp6 = icmp eq %struct.mg_resolve_async_request* %8, null
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %do.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %do.end
  %9 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %name9 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %9, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %name9, i32 0, i32 0
  %10 = load i8*, i8** %name.addr, align 8
  %call10 = call i8* @__strncpy_chk(i8* %arraydecay, i8* %10, i64 1024, i64 1024) #5
  %11 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %name11 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %11, i32 0, i32 0
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %name11, i64 0, i64 1023
  store i8 0, i8* %arrayidx, align 1
  %12 = load i32, i32* %query.addr, align 4
  %13 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %query12 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %13, i32 0, i32 1
  store i32 %12, i32* %query12, align 8
  %14 = load void (%struct.mg_dns_message*, i8*, i32)*, void (%struct.mg_dns_message*, i8*, i32)** %cb.addr, align 8
  %15 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %callback = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %15, i32 0, i32 2
  store void (%struct.mg_dns_message*, i8*, i32)* %14, void (%struct.mg_dns_message*, i8*, i32)** %callback, align 8
  %16 = load i8*, i8** %data.addr, align 8
  %17 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %data13 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %17, i32 0, i32 3
  store i8* %16, i8** %data13, align 8
  %max_retries = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 1
  %18 = load i32, i32* %max_retries, align 8
  %tobool14 = icmp ne i32 %18, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end8
  %max_retries15 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 1
  %19 = load i32, i32* %max_retries15, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %19, %cond.true ], [ 2, %cond.false ]
  %20 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %max_retries16 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %20, i32 0, i32 5
  store i32 %cond, i32* %max_retries16, align 8
  %timeout = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 2
  %21 = load i32, i32* %timeout, align 4
  %tobool17 = icmp ne i32 %21, 0
  br i1 %tobool17, label %cond.true18, label %cond.false20

cond.true18:                                      ; preds = %cond.end
  %timeout19 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 2
  %22 = load i32, i32* %timeout19, align 4
  br label %cond.end21

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi i32 [ %22, %cond.true18 ], [ 5, %cond.false20 ]
  %conv = sext i32 %cond22 to i64
  %23 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %timeout23 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %23, i32 0, i32 4
  store i64 %conv, i64* %timeout23, align 8
  %24 = load i8*, i8** %nameserver, align 8
  %cmp24 = icmp eq i8* %24, null
  br i1 %cmp24, label %if.then26, label %if.end34

if.then26:                                        ; preds = %cond.end21
  %arraydecay27 = getelementptr inbounds [17 x i8], [17 x i8]* %dns_server_buff, i32 0, i32 0
  %call28 = call i32 @mg_get_ip_address_of_nameserver(i8* %arraydecay27, i64 17)
  %cmp29 = icmp ne i32 %call28, -1
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %if.then26
  %arraydecay32 = getelementptr inbounds [17 x i8], [17 x i8]* %dns_server_buff, i32 0, i32 0
  store i8* %arraydecay32, i8** %nameserver, align 8
  br label %if.end33

if.else:                                          ; preds = %if.then26
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.166, i32 0, i32 0), i8** %nameserver, align 8
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then31
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %cond.end21
  %arraydecay35 = getelementptr inbounds [26 x i8], [26 x i8]* %nameserver_url, i32 0, i32 0
  %25 = load i8*, i8** %nameserver, align 8
  %call36 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay35, i64 26, i32 0, i64 26, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.167, i32 0, i32 0), i8* %25)
  %26 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %arraydecay37 = getelementptr inbounds [26 x i8], [26 x i8]* %nameserver_url, i32 0, i32 0
  %call38 = call %struct.mg_connection* @mg_connect(%struct.mg_mgr* %26, i8* %arraydecay37, void (%struct.mg_connection*, i32, i8*)* @mg_resolve_async_eh)
  store %struct.mg_connection* %call38, %struct.mg_connection** %dns_nc, align 8
  %27 = load %struct.mg_connection*, %struct.mg_connection** %dns_nc, align 8
  %cmp39 = icmp eq %struct.mg_connection* %27, null
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end34
  %28 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %29 = bitcast %struct.mg_resolve_async_request* %28 to i8*
  call void @free(i8* %29)
  store i32 -1, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end34
  %30 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %31 = bitcast %struct.mg_resolve_async_request* %30 to i8*
  %32 = load %struct.mg_connection*, %struct.mg_connection** %dns_nc, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %32, i32 0, i32 16
  store i8* %31, i8** %user_data, align 8
  %dns_conn43 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 5
  %33 = load %struct.mg_connection**, %struct.mg_connection*** %dns_conn43, align 8
  %cmp44 = icmp ne %struct.mg_connection** %33, null
  br i1 %cmp44, label %if.then46, label %if.end48

if.then46:                                        ; preds = %if.end42
  %34 = load %struct.mg_connection*, %struct.mg_connection** %dns_nc, align 8
  %dns_conn47 = getelementptr inbounds %struct.mg_resolve_async_opts, %struct.mg_resolve_async_opts* %opts, i32 0, i32 5
  %35 = load %struct.mg_connection**, %struct.mg_connection*** %dns_conn47, align 8
  store %struct.mg_connection* %34, %struct.mg_connection** %35, align 8
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %if.end42
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end48, %if.then41, %if.then7
  %36 = load i32, i32* %retval, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @resolve_cb(%struct.mg_dns_message* %msg, i8* %data, i32 %e) #0 {
entry:
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %data.addr = alloca i8*, align 8
  %e.addr = alloca i32, align 4
  %nc = alloca %struct.mg_connection*, align 8
  %i = alloca i32, align 4
  %failure = alloca i32, align 4
  %now = alloca double, align 8
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i32 %e, i32* %e.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.mg_connection*
  store %struct.mg_connection* %1, %struct.mg_connection** %nc, align 8
  store i32 -1, i32* %failure, align 4
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 21
  %3 = load i64, i64* %flags, align 8
  %and = and i64 %3, -5
  store i64 %and, i64* %flags, align 8
  %4 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %cmp = icmp ne %struct.mg_dns_message* %4, null
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load i32, i32* %i, align 4
  %6 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %6, i32 0, i32 4
  %7 = load i32, i32* %num_answers, align 8
  %cmp1 = icmp slt i32 %5, %7
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %8, i32 0, i32 6
  %9 = load i32, i32* %i, align 4
  %idxprom = sext i32 %9 to i64
  %arrayidx = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers, i64 0, i64 %idxprom
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %arrayidx, i32 0, i32 1
  %10 = load i32, i32* %rtype, align 8
  %cmp2 = icmp eq i32 %10, 1
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %for.body
  %11 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %12 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %answers4 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %12, i32 0, i32 6
  %13 = load i32, i32* %i, align 4
  %idxprom5 = sext i32 %13 to i64
  %arrayidx6 = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers4, i64 0, i64 %idxprom5
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 6
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %15 = bitcast %struct.in_addr* %sin_addr to i8*
  %call = call i32 @mg_dns_parse_record_data(%struct.mg_dns_message* %11, %struct.mg_dns_resource_record* %arrayidx6, i8* %15, i64 4)
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 21
  %18 = load i64, i64* %flags7, align 8
  %and8 = and i64 %18, 2
  %tobool = icmp ne i64 %and8, 0
  %cond = select i1 %tobool, i32 2, i32 1
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sa9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 6
  %call10 = call %struct.mg_connection* @mg_do_connect(%struct.mg_connection* %16, i32 %cond, %union.socket_address* %sa9)
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end11

if.end11:                                         ; preds = %for.end, %entry
  %21 = load i32, i32* %e.addr, align 4
  %cmp12 = icmp eq i32 %21, 3
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end11
  %call14 = call double @mg_time()
  store double %call14, double* %now, align 8
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %23, i32 0, i32 16
  %24 = load i8*, i8** %user_data, align 8
  %25 = bitcast double* %now to i8*
  call void @mg_call(%struct.mg_connection* %22, void (%struct.mg_connection*, i32, i8*)* null, i8* %24, i32 6, i8* %25)
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end11
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %user_data16 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 16
  %28 = load i8*, i8** %user_data16, align 8
  %29 = bitcast i32* %failure to i8*
  call void @mg_call(%struct.mg_connection* %26, void (%struct.mg_connection*, i32, i8*)* null, i8* %28, i32 2, i8* %29)
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %user_data17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 16
  %32 = load i8*, i8** %user_data17, align 8
  call void @mg_call(%struct.mg_connection* %30, void (%struct.mg_connection*, i32, i8*)* null, i8* %32, i32 5, i8* null)
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_destroy_conn(%struct.mg_connection* %33, i32 1)
  br label %return

return:                                           ; preds = %if.end15, %if.then3
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal %struct.mg_connection* @mg_do_connect(%struct.mg_connection* %nc, i32 %proto, %union.socket_address* %sa) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %proto.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %proto, i32* %proto.addr, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3001)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i32, i32* %proto.addr, align 4
  %cmp = icmp eq i32 %1, 2
  %cond = select i1 %cmp, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i32 0, i32 0)
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin = bitcast %union.socket_address* %2 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %3 = load i32, i32* %coerce.dive, align 4
  %call1 = call i8* @inet_ntoa(i32 %3)
  %4 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin2 = bitcast %union.socket_address* %4 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin2, i32 0, i32 2
  %5 = load i16, i16* %sin_port, align 2
  %call3 = call zeroext i16 @_OSSwapInt16(i16 zeroext %5)
  %conv = zext i16 %call3 to i32
  %conv4 = trunc i32 %conv to i16
  %conv5 = zext i16 %conv4 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0), %struct.mg_connection* %0, i8* %cond, i8* %call1, i32 %conv5)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 21
  %7 = load i64, i64* %flags, align 8
  %or = or i64 %7, 8
  store i64 %or, i64* %flags, align 8
  %8 = load i32, i32* %proto.addr, align 4
  %cmp6 = icmp eq i32 %8, 2
  br i1 %cmp6, label %if.then8, label %if.else

if.then8:                                         ; preds = %do.end
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 20
  %10 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %10, i32 0, i32 2
  %11 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %connect_udp = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %11, i32 0, i32 8
  %12 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %connect_udp, align 8
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void %12(%struct.mg_connection* %13)
  br label %if.end11

if.else:                                          ; preds = %do.end
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %iface9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 20
  %15 = load %struct.mg_iface*, %struct.mg_iface** %iface9, align 8
  %vtable10 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %15, i32 0, i32 2
  %16 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable10, align 8
  %connect_tcp = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %16, i32 0, i32 7
  %17 = load void (%struct.mg_connection*, %union.socket_address*)*, void (%struct.mg_connection*, %union.socket_address*)** %connect_tcp, align 8
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %19 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  call void %17(%struct.mg_connection* %18, %union.socket_address* %19)
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then8
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 3
  %21 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_add_conn(%struct.mg_mgr* %21, %struct.mg_connection* %22)
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  ret %struct.mg_connection* %23
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_bind(%struct.mg_mgr* %srv, i8* %address, void (%struct.mg_connection*, i32, i8*)* %event_handler) #0 {
entry:
  %srv.addr = alloca %struct.mg_mgr*, align 8
  %address.addr = alloca i8*, align 8
  %event_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %opts = alloca %struct.mg_bind_opts, align 8
  store %struct.mg_mgr* %srv, %struct.mg_mgr** %srv.addr, align 8
  store i8* %address, i8** %address.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %event_handler, void (%struct.mg_connection*, i32, i8*)** %event_handler.addr, align 8
  %0 = bitcast %struct.mg_bind_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %srv.addr, align 8
  %2 = load i8*, i8** %address.addr, align 8
  %3 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %event_handler.addr, align 8
  %call = call %struct.mg_connection* @mg_bind_opt(%struct.mg_mgr* %1, i8* %2, void (%struct.mg_connection*, i32, i8*)* %3, %struct.mg_bind_opts* byval align 8 %opts)
  ret %struct.mg_connection* %call
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_bind_opt(%struct.mg_mgr* %mgr, i8* %address, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_bind_opts* byval align 8 %opts) #0 {
entry:
  %retval = alloca %struct.mg_connection*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %address.addr = alloca i8*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %sa = alloca %union.socket_address, align 4
  %nc = alloca %struct.mg_connection*, align 8
  %proto = alloca i32, align 4
  %rc = alloca i32, align 4
  %add_sock_opts = alloca %struct.mg_add_sock_opts, align 8
  %host = alloca [200 x i8], align 16
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store i8* %address, i8** %address.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  store %struct.mg_connection* null, %struct.mg_connection** %nc, align 8
  %0 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %cmp = icmp eq void (%struct.mg_connection*, i32, i8*)* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store void (%struct.mg_connection*, i32, i8*)* @mg_ev_handler_empty, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = bitcast %struct.mg_add_sock_opts* %add_sock_opts to i8*
  %2 = bitcast %struct.mg_bind_opts* %opts to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 32, i32 8, i1 false)
  %3 = load i8*, i8** %address.addr, align 8
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %host, i32 0, i32 0
  %call = call i32 @mg_parse_address(i8* %3, %union.socket_address* %sa, i32* %proto, i8* %arraydecay, i64 200)
  %cmp1 = icmp sle i32 %call, 0
  br i1 %cmp1, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then2
  %error_string = getelementptr inbounds %struct.mg_bind_opts, %struct.mg_bind_opts* %opts, i32 0, i32 2
  %4 = load i8**, i8*** %error_string, align 8
  %tobool = icmp ne i8** %4, null
  br i1 %tobool, label %if.then3, label %if.end5

if.then3:                                         ; preds = %do.body
  %error_string4 = getelementptr inbounds %struct.mg_bind_opts, %struct.mg_bind_opts* %opts, i32 0, i32 2
  %5 = load i8**, i8*** %error_string4, align 8
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17, i32 0, i32 0), i8** %5, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then3, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end5
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end
  %6 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %7 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %call7 = call %struct.mg_connection* @mg_create_connection(%struct.mg_mgr* %6, void (%struct.mg_connection*, i32, i8*)* %7, %struct.mg_add_sock_opts* byval align 8 %add_sock_opts)
  store %struct.mg_connection* %call7, %struct.mg_connection** %nc, align 8
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp8 = icmp eq %struct.mg_connection* %8, null
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  br label %return

if.end10:                                         ; preds = %if.end6
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sa11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 6
  %10 = bitcast %union.socket_address* %sa11 to i8*
  %11 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 4, i1 false)
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 21
  %13 = load i64, i64* %flags, align 8
  %or = or i64 %13, 1
  store i64 %or, i64* %flags, align 8
  %14 = load i32, i32* %proto, align 4
  %cmp12 = icmp eq i32 %14, 2
  br i1 %cmp12, label %if.then13, label %if.end16

if.then13:                                        ; preds = %if.end10
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 21
  %16 = load i64, i64* %flags14, align 8
  %or15 = or i64 %16, 2
  store i64 %or15, i64* %flags14, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then13, %if.end10
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 21
  %18 = load i64, i64* %flags17, align 8
  %and = and i64 %18, 2
  %tobool18 = icmp ne i64 %and, 0
  br i1 %tobool18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.end16
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 20
  %20 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %20, i32 0, i32 2
  %21 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %listen_udp = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %21, i32 0, i32 6
  %22 = load i32 (%struct.mg_connection*, %union.socket_address*)*, i32 (%struct.mg_connection*, %union.socket_address*)** %listen_udp, align 8
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sa20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 6
  %call21 = call i32 %22(%struct.mg_connection* %23, %union.socket_address* %sa20)
  store i32 %call21, i32* %rc, align 4
  br label %if.end26

if.else:                                          ; preds = %if.end16
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %iface22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %25, i32 0, i32 20
  %26 = load %struct.mg_iface*, %struct.mg_iface** %iface22, align 8
  %vtable23 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %26, i32 0, i32 2
  %27 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable23, align 8
  %listen_tcp = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %27, i32 0, i32 5
  %28 = load i32 (%struct.mg_connection*, %union.socket_address*)*, i32 (%struct.mg_connection*, %union.socket_address*)** %listen_tcp, align 8
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sa24 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %30, i32 0, i32 6
  %call25 = call i32 %28(%struct.mg_connection* %29, %union.socket_address* %sa24)
  store i32 %call25, i32* %rc, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then19
  %31 = load i32, i32* %rc, align 4
  %cmp27 = icmp ne i32 %31, 0
  br i1 %cmp27, label %if.then28, label %if.end42

if.then28:                                        ; preds = %if.end26
  br label %do.body29

do.body29:                                        ; preds = %if.then28
  %call30 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3273)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %do.body29
  %32 = load i32, i32* %rc, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.19, i32 0, i32 0), i32 %32)
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %do.body29
  br label %do.end34

do.end34:                                         ; preds = %if.end33
  br label %do.body35

do.body35:                                        ; preds = %do.end34
  %error_string36 = getelementptr inbounds %struct.mg_bind_opts, %struct.mg_bind_opts* %opts, i32 0, i32 2
  %33 = load i8**, i8*** %error_string36, align 8
  %tobool37 = icmp ne i8** %33, null
  br i1 %tobool37, label %if.then38, label %if.end40

if.then38:                                        ; preds = %do.body35
  %error_string39 = getelementptr inbounds %struct.mg_bind_opts, %struct.mg_bind_opts* %opts, i32 0, i32 2
  %34 = load i8**, i8*** %error_string39, align 8
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0), i8** %34, align 8
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %do.body35
  br label %do.end41

do.end41:                                         ; preds = %if.end40
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_destroy_conn(%struct.mg_connection* %35, i32 1)
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  br label %return

if.end42:                                         ; preds = %if.end26
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %mgr43 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %36, i32 0, i32 3
  %37 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr43, align 8
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_add_conn(%struct.mg_mgr* %37, %struct.mg_connection* %38)
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  store %struct.mg_connection* %39, %struct.mg_connection** %retval, align 8
  br label %return

return:                                           ; preds = %if.end42, %do.end41, %if.then9, %do.end
  %40 = load %struct.mg_connection*, %struct.mg_connection** %retval, align 8
  ret %struct.mg_connection* %40
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_next(%struct.mg_mgr* %s, %struct.mg_connection* %conn) #0 {
entry:
  %s.addr = alloca %struct.mg_mgr*, align 8
  %conn.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %s, %struct.mg_mgr** %s.addr, align 8
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %cmp = icmp eq %struct.mg_connection* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %s.addr, align 8
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %1, i32 0, i32 0
  %2 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 0
  %4 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mg_connection* [ %2, %cond.true ], [ %4, %cond.false ]
  ret %struct.mg_connection* %cond
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_broadcast(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %cb, i8* %data, i64 %len) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %cb.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctl_msg = alloca %struct.ctl_msg, align 8
  %dummy = alloca i64, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %cb, void (%struct.mg_connection*, i32, i8*)** %cb.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %0, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 0
  %1 = load i32, i32* %arrayidx, align 8
  %cmp = icmp ne i32 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %data.addr, align 8
  %cmp1 = icmp ne i8* %2, null
  br i1 %cmp1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load i64, i64* %len.addr, align 8
  %cmp3 = icmp ult i64 %3, 8192
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %cb.addr, align 8
  %callback = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 0
  store void (%struct.mg_connection*, i32, i8*)* %4, void (%struct.mg_connection*, i32, i8*)** %callback, align 8
  %message = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %message, i32 0, i32 0
  %5 = load i8*, i8** %data.addr, align 8
  %6 = load i64, i64* %len.addr, align 8
  %call = call i8* @__memcpy_chk(i8* %arraydecay, i8* %5, i64 %6, i64 8192) #5
  %7 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ctl4 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %7, i32 0, i32 2
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl4, i64 0, i64 0
  %8 = load i32, i32* %arrayidx5, align 8
  %9 = bitcast %struct.ctl_msg* %ctl_msg to i8*
  %10 = load i64, i64* %len.addr, align 8
  %add = add i64 8, %10
  %call6 = call i64 @"\01_send"(i32 %8, i8* %9, i64 %add, i32 0)
  store i64 %call6, i64* %dummy, align 8
  %11 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ctl7 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %11, i32 0, i32 2
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl7, i64 0, i64 0
  %12 = load i32, i32* %arrayidx8, align 8
  %13 = bitcast i64* %len.addr to i8*
  %call9 = call i64 @"\01_recv"(i32 %12, i8* %13, i64 1, i32 0)
  store i64 %call9, i64* %dummy, align 8
  %14 = load i64, i64* %dummy, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true2, %land.lhs.true, %entry
  ret void
}

declare i64 @"\01_send"(i32, i8*, i64, i32) #3

declare i64 @"\01_recv"(i32, i8*, i64, i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_check_ip_acl(i8* %acl, i32 %remote_ip) #0 {
entry:
  %retval = alloca i32, align 4
  %acl.addr = alloca i8*, align 8
  %remote_ip.addr = alloca i32, align 4
  %allowed = alloca i32, align 4
  %flag = alloca i32, align 4
  %net = alloca i32, align 4
  %mask = alloca i32, align 4
  %vec = alloca %struct.mg_str, align 8
  store i8* %acl, i8** %acl.addr, align 8
  store i32 %remote_ip, i32* %remote_ip.addr, align 4
  %0 = load i8*, i8** %acl.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i8*, i8** %acl.addr, align 8
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %cond = select i1 %3, i32 43, i32 45
  store i32 %cond, i32* %allowed, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end18, %lor.end
  %4 = load i8*, i8** %acl.addr, align 8
  %call = call i8* @mg_next_comma_list_entry(i8* %4, %struct.mg_str* %vec, %struct.mg_str* null)
  store i8* %call, i8** %acl.addr, align 8
  %cmp3 = icmp ne i8* %call, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 0
  %5 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %conv5 = sext i8 %6 to i32
  store i32 %conv5, i32* %flag, align 4
  %7 = load i32, i32* %flag, align 4
  %cmp6 = icmp ne i32 %7, 43
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %while.body
  %8 = load i32, i32* %flag, align 4
  %cmp8 = icmp ne i32 %8, 45
  br i1 %cmp8, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %while.body
  %p10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 0
  %9 = load i8*, i8** %p10, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %9, i64 1
  %call12 = call i32 @parse_net(i8* %arrayidx11, i32* %net, i32* %mask)
  %cmp13 = icmp eq i32 %call12, 0
  br i1 %cmp13, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %10 = load i32, i32* %net, align 4
  %11 = load i32, i32* %remote_ip.addr, align 4
  %12 = load i32, i32* %mask, align 4
  %and = and i32 %11, %12
  %cmp15 = icmp eq i32 %10, %and
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end
  %13 = load i32, i32* %flag, align 4
  store i32 %13, i32* %allowed, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %do.body

do.body:                                          ; preds = %while.end
  %call19 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3353)
  %tobool = icmp ne i32 %call19, 0
  br i1 %tobool, label %if.then20, label %if.end21

if.then20:                                        ; preds = %do.body
  %14 = load i32, i32* %remote_ip.addr, align 4
  %15 = load i32, i32* %allowed, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21, i32 0, i32 0), i32 %14, i32 %15)
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end21
  %16 = load i32, i32* %allowed, align 4
  %cmp22 = icmp eq i32 %16, 43
  %conv23 = zext i1 %cmp22 to i32
  store i32 %conv23, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @parse_net(i8* %spec, i32* %net, i32* %mask) #0 {
entry:
  %spec.addr = alloca i8*, align 8
  %net.addr = alloca i32*, align 8
  %mask.addr = alloca i32*, align 8
  %n = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %slash = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %spec, i8** %spec.addr, align 8
  store i32* %net, i32** %net.addr, align 8
  store i32* %mask, i32** %mask.addr, align 8
  store i32 32, i32* %slash, align 4
  store i32 0, i32* %len, align 4
  %0 = load i8*, i8** %spec.addr, align 8
  %call = call i32 (i8*, i8*, ...) @sscanf(i8* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.183, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d, i32* %slash, i32* %n)
  %cmp = icmp eq i32 %call, 5
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %spec.addr, align 8
  %call1 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.184, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d, i32* %n)
  %cmp2 = icmp eq i32 %call1, 4
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %a, align 4
  %call3 = call i32 @isbyte(i32 %2)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %land.lhs.true4, label %if.end

land.lhs.true4:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %b, align 4
  %call5 = call i32 @isbyte(i32 %3)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %land.lhs.true7, label %if.end

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %4 = load i32, i32* %c, align 4
  %call8 = call i32 @isbyte(i32 %4)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %5 = load i32, i32* %d, align 4
  %call11 = call i32 @isbyte(i32 %5)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %land.lhs.true13, label %if.end

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %6 = load i32, i32* %slash, align 4
  %cmp14 = icmp sge i32 %6, 0
  br i1 %cmp14, label %land.lhs.true15, label %if.end

land.lhs.true15:                                  ; preds = %land.lhs.true13
  %7 = load i32, i32* %slash, align 4
  %cmp16 = icmp slt i32 %7, 33
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true15
  %8 = load i32, i32* %n, align 4
  store i32 %8, i32* %len, align 4
  %9 = load i32, i32* %a, align 4
  %shl = shl i32 %9, 24
  %10 = load i32, i32* %b, align 4
  %shl17 = shl i32 %10, 16
  %or = or i32 %shl, %shl17
  %11 = load i32, i32* %c, align 4
  %shl18 = shl i32 %11, 8
  %or19 = or i32 %or, %shl18
  %12 = load i32, i32* %d, align 4
  %or20 = or i32 %or19, %12
  %13 = load i32*, i32** %net.addr, align 8
  store i32 %or20, i32* %13, align 4
  %14 = load i32, i32* %slash, align 4
  %tobool21 = icmp ne i32 %14, 0
  br i1 %tobool21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %15 = load i32, i32* %slash, align 4
  %sub = sub nsw i32 32, %15
  %shl22 = shl i32 -1, %sub
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %shl22, %cond.true ], [ 0, %cond.false ]
  %16 = load i32*, i32** %mask.addr, align 8
  store i32 %cond, i32* %16, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.lhs.true15, %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %lor.lhs.false
  %17 = load i32, i32* %len, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_forward(%struct.mg_connection* %from, %struct.mg_connection* %to) #0 {
entry:
  %from.addr = alloca %struct.mg_connection*, align 8
  %to.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %from, %struct.mg_connection** %from.addr, align 8
  store %struct.mg_connection* %to, %struct.mg_connection** %to.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %to.addr, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %from.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 0
  %2 = load i8*, i8** %buf, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %from.addr, align 8
  %recv_mbuf1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf1, i32 0, i32 1
  %4 = load i64, i64* %len, align 8
  %conv = trunc i64 %4 to i32
  call void @mg_send(%struct.mg_connection* %0, i8* %2, i32 %conv)
  %5 = load %struct.mg_connection*, %struct.mg_connection** %from.addr, align 8
  %recv_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 8
  %6 = load %struct.mg_connection*, %struct.mg_connection** %from.addr, align 8
  %recv_mbuf3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 8
  %len4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf3, i32 0, i32 1
  %7 = load i64, i64* %len4, align 8
  call void @mbuf_remove(%struct.mbuf* %recv_mbuf2, i64 %7)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define double @mg_set_timer(%struct.mg_connection* %c, double %timestamp) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %timestamp.addr = alloca double, align 8
  %result = alloca double, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store double %timestamp, double* %timestamp.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %ev_timer_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 11
  %1 = load double, double* %ev_timer_time, align 8
  store double %1, double* %result, align 8
  %2 = load double, double* %timestamp.addr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %ev_timer_time1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 11
  store double %2, double* %ev_timer_time1, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3372)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %priv_2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 18
  %6 = load i8*, i8** %priv_2, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 21
  %8 = load i64, i64* %flags, align 8
  %and = and i64 %8, 4
  %tobool2 = icmp ne i64 %and, 0
  %cond = select i1 %tobool2, i32 1, i32 0
  %9 = load double, double* %timestamp.addr, align 8
  %conv = fptoui double %9 to i64
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.22, i32 0, i32 0), %struct.mg_connection* %4, i8* %6, i32 %cond, i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %flags3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 21
  %11 = load i64, i64* %flags3, align 8
  %and4 = and i64 %11, 4
  %tobool5 = icmp ne i64 %and4, 0
  br i1 %tobool5, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %do.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %priv_26 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 18
  %13 = load i8*, i8** %priv_26, align 8
  %cmp = icmp ne i8* %13, null
  br i1 %cmp, label %if.then8, label %if.end11

if.then8:                                         ; preds = %land.lhs.true
  %14 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %priv_29 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 18
  %15 = load i8*, i8** %priv_29, align 8
  %16 = bitcast i8* %15 to %struct.mg_connection*
  %17 = load double, double* %timestamp.addr, align 8
  %call10 = call double @mg_set_timer(%struct.mg_connection* %16, double %17)
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %land.lhs.true, %do.end
  %18 = load double, double* %result, align 8
  ret double %18
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_sock_set(%struct.mg_connection* %nc, i32 %sock) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sock.addr = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %sock, i32* %sock.addr, align 4
  %0 = load i32, i32* %sock.addr, align 4
  %cmp = icmp ne i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 20
  %2 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %2, i32 0, i32 2
  %3 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %sock_set = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %3, i32 0, i32 15
  %4 = load void (%struct.mg_connection*, i32)*, void (%struct.mg_connection*, i32)** %sock_set, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %6 = load i32, i32* %sock.addr, align 4
  call void %4(%struct.mg_connection* %5, i32 %6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_if_get_conn_addr(%struct.mg_connection* %nc, i32 %remote, %union.socket_address* %sa) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %remote.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %remote, i32* %remote.addr, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 20
  %1 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %1, i32 0, i32 2
  %2 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %get_conn_addr = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %2, i32 0, i32 16
  %3 = load void (%struct.mg_connection*, i32, %union.socket_address*)*, void (%struct.mg_connection*, i32, %union.socket_address*)** %get_conn_addr, align 8
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %5 = load i32, i32* %remote.addr, align 4
  %6 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  call void %3(%struct.mg_connection* %4, i32 %5, %union.socket_address* %6)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_add_sock_opt(%struct.mg_mgr* %s, i32 %sock, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_add_sock_opts* byval align 8 %opts) #0 {
entry:
  %s.addr = alloca %struct.mg_mgr*, align 8
  %sock.addr = alloca i32, align 4
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %s, %struct.mg_mgr** %s.addr, align 8
  store i32 %sock, i32* %sock.addr, align 4
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %s.addr, align 8
  %1 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %call = call %struct.mg_connection* @mg_create_connection_base(%struct.mg_mgr* %0, void (%struct.mg_connection*, i32, i8*)* %1, %struct.mg_add_sock_opts* byval align 8 %opts)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp = icmp ne %struct.mg_connection* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %4 = load i32, i32* %sock.addr, align 4
  call void @mg_sock_set(%struct.mg_connection* %3, i32 %4)
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 3
  %6 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_add_conn(%struct.mg_mgr* %6, %struct.mg_connection* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  ret %struct.mg_connection* %8
}

; Function Attrs: noinline nounwind ssp uwtable
define internal %struct.mg_connection* @mg_create_connection_base(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %callback, %struct.mg_add_sock_opts* byval align 8 %opts) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %conn = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %call = call i8* @calloc(i64 1, i64 216) #16
  %0 = bitcast i8* %call to %struct.mg_connection*
  store %struct.mg_connection* %0, %struct.mg_connection** %conn, align 8
  %cmp = icmp ne %struct.mg_connection* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 4
  store i32 -1, i32* %sock, align 8
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 15
  store void (%struct.mg_connection*, i32, i8*)* %2, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %mgr1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 3
  store %struct.mg_mgr* %4, %struct.mg_mgr** %mgr1, align 8
  %call2 = call double @mg_time()
  %conv = fptosi double %call2 to i64
  %6 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 10
  store i64 %conv, i64* %last_io_time, align 8
  %iface = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 3
  %7 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %cmp3 = icmp ne %struct.mg_iface* %7, null
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %iface5 = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 3
  %8 = load %struct.mg_iface*, %struct.mg_iface** %iface5, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %9, i32 0, i32 6
  %10 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces, align 8
  %arrayidx = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %10, i64 0
  %11 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mg_iface* [ %8, %cond.true ], [ %11, %cond.false ]
  %12 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %iface6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 20
  store %struct.mg_iface* %cond, %struct.mg_iface** %iface6, align 8
  %flags = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 1
  %13 = load i32, i32* %flags, align 8
  %and = and i32 %13, 66080768
  %conv7 = zext i32 %and to i64
  %14 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 21
  store i64 %conv7, i64* %flags8, align 8
  %user_data = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 0
  %15 = load i8*, i8** %user_data, align 8
  %16 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %user_data9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 16
  store i8* %15, i8** %user_data9, align 8
  %17 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 7
  store i64 -1, i64* %recv_mbuf_limit, align 8
  br label %if.end12

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %error_string = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 2
  %18 = load i8**, i8*** %error_string, align 8
  %tobool = icmp ne i8** %18, null
  br i1 %tobool, label %if.then10, label %if.end

if.then10:                                        ; preds = %do.body
  %error_string11 = getelementptr inbounds %struct.mg_add_sock_opts, %struct.mg_add_sock_opts* %opts, i32 0, i32 2
  %19 = load i8**, i8*** %error_string11, align 8
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.185, i32 0, i32 0), i8** %19, align 8
  br label %if.end

if.end:                                           ; preds = %if.then10, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end12

if.end12:                                         ; preds = %do.end, %cond.end
  %20 = load %struct.mg_connection*, %struct.mg_connection** %conn, align 8
  ret %struct.mg_connection* %20
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_add_sock(%struct.mg_mgr* %s, i32 %sock, void (%struct.mg_connection*, i32, i8*)* %callback) #0 {
entry:
  %s.addr = alloca %struct.mg_mgr*, align 8
  %sock.addr = alloca i32, align 4
  %callback.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %opts = alloca %struct.mg_add_sock_opts, align 8
  store %struct.mg_mgr* %s, %struct.mg_mgr** %s.addr, align 8
  store i32 %sock, i32* %sock.addr, align 4
  store void (%struct.mg_connection*, i32, i8*)* %callback, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %0 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %s.addr, align 8
  %2 = load i32, i32* %sock.addr, align 4
  %3 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback.addr, align 8
  %call = call %struct.mg_connection* @mg_add_sock_opt(%struct.mg_mgr* %1, i32 %2, void (%struct.mg_connection*, i32, i8*)* %3, %struct.mg_add_sock_opts* byval align 8 %opts)
  ret %struct.mg_connection* %call
}

; Function Attrs: allocsize(0,1)
declare i8* @calloc(i64, i64) #11

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_iface* @mg_find_iface(%struct.mg_mgr* %mgr, %struct.mg_iface_vtable* %vtable, %struct.mg_iface* %from) #0 {
entry:
  %retval = alloca %struct.mg_iface*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %vtable.addr = alloca %struct.mg_iface_vtable*, align 8
  %from.addr = alloca %struct.mg_iface*, align 8
  %i = alloca i32, align 4
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store %struct.mg_iface_vtable* %vtable, %struct.mg_iface_vtable** %vtable.addr, align 8
  store %struct.mg_iface* %from, %struct.mg_iface** %from.addr, align 8
  store i32 0, i32* %i, align 4
  %0 = load %struct.mg_iface*, %struct.mg_iface** %from.addr, align 8
  %cmp = icmp ne %struct.mg_iface* %0, null
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %num_ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %2, i32 0, i32 4
  %3 = load i32, i32* %num_ifaces, align 8
  %cmp1 = icmp slt i32 %1, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ifaces = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %4, i32 0, i32 6
  %5 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %5, i64 %idxprom
  %7 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx, align 8
  %8 = load %struct.mg_iface*, %struct.mg_iface** %from.addr, align 8
  %cmp2 = icmp eq %struct.mg_iface* %7, %8
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %for.body
  %9 = load i32, i32* %i, align 4
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %i, align 4
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4
  %inc4 = add nsw i32 %10, 1
  store i32 %inc4, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then3, %for.cond
  br label %if.end5

if.end5:                                          ; preds = %for.end, %entry
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc20, %if.end5
  %11 = load i32, i32* %i, align 4
  %12 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %num_ifaces7 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %12, i32 0, i32 4
  %13 = load i32, i32* %num_ifaces7, align 8
  %cmp8 = icmp slt i32 %11, %13
  br i1 %cmp8, label %for.body9, label %for.end22

for.body9:                                        ; preds = %for.cond6
  %14 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ifaces10 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %14, i32 0, i32 6
  %15 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces10, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom11 = sext i32 %16 to i64
  %arrayidx12 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %15, i64 %idxprom11
  %17 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx12, align 8
  %vtable13 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %17, i32 0, i32 2
  %18 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable13, align 8
  %19 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable.addr, align 8
  %cmp14 = icmp eq %struct.mg_iface_vtable* %18, %19
  br i1 %cmp14, label %if.then15, label %if.end19

if.then15:                                        ; preds = %for.body9
  %20 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ifaces16 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %20, i32 0, i32 6
  %21 = load %struct.mg_iface**, %struct.mg_iface*** %ifaces16, align 8
  %22 = load i32, i32* %i, align 4
  %idxprom17 = sext i32 %22 to i64
  %arrayidx18 = getelementptr inbounds %struct.mg_iface*, %struct.mg_iface** %21, i64 %idxprom17
  %23 = load %struct.mg_iface*, %struct.mg_iface** %arrayidx18, align 8
  store %struct.mg_iface* %23, %struct.mg_iface** %retval, align 8
  br label %return

if.end19:                                         ; preds = %for.body9
  br label %for.inc20

for.inc20:                                        ; preds = %if.end19
  %24 = load i32, i32* %i, align 4
  %inc21 = add nsw i32 %24, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond6

for.end22:                                        ; preds = %for.cond6
  store %struct.mg_iface* null, %struct.mg_iface** %retval, align 8
  br label %return

return:                                           ; preds = %for.end22, %if.then15
  %25 = load %struct.mg_iface*, %struct.mg_iface** %retval, align 8
  ret %struct.mg_iface* %25
}

; Function Attrs: noinline nounwind ssp uwtable
define double @mg_mgr_min_timer(%struct.mg_mgr* %mgr) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %min_timer = alloca double, align 8
  %nc = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store double 0.000000e+00, double* %min_timer, align 8
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %0, i32 0, i32 0
  %1 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8
  store %struct.mg_connection* %1, %struct.mg_connection** %nc, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp = icmp ne %struct.mg_connection* %2, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %ev_timer_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 11
  %4 = load double, double* %ev_timer_time, align 8
  %cmp1 = fcmp ole double %4, 0.000000e+00
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %5 = load double, double* %min_timer, align 8
  %cmp2 = fcmp oeq double %5, 0.000000e+00
  br i1 %cmp2, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %ev_timer_time3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 11
  %7 = load double, double* %ev_timer_time3, align 8
  %8 = load double, double* %min_timer, align 8
  %cmp4 = fcmp olt double %7, %8
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %ev_timer_time6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 11
  %10 = load double, double* %ev_timer_time6, align 8
  store double %10, double* %min_timer, align 8
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end7, %if.then
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 0
  %12 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8
  store %struct.mg_connection* %12, %struct.mg_connection** %nc, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load double, double* %min_timer, align 8
  ret double %13
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_null_if_tcp_recv(%struct.mg_connection* %c, i8* %buf, i64 %len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i8*, i8** %buf.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_null_if_udp_recv(%struct.mg_connection* %c, i8* %buf, i64 %len, %union.socket_address* %sa, i64* %sa_len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %sa_len.addr = alloca i64*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i64* %sa_len, i64** %sa_len.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i8*, i8** %buf.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  %3 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %4 = load i64*, i64** %sa_len.addr, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_init(%struct.mg_iface* %iface) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_free(%struct.mg_iface* %iface) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_add_conn(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  store i32 -1, i32* %sock, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 21
  %2 = load i64, i64* %flags, align 8
  %or = or i64 %2, 2048
  store i64 %or, i64* %flags, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_remove_conn(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mg_null_if_poll(%struct.mg_iface* %iface, i32 %timeout_ms) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  %timeout_ms.addr = alloca i32, align 4
  %mgr = alloca %struct.mg_mgr*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %tmp = alloca %struct.mg_connection*, align 8
  %now = alloca double, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8
  store i32 %timeout_ms, i32* %timeout_ms.addr, align 4
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8
  %mgr1 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %0, i32 0, i32 0
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr1, align 8
  store %struct.mg_mgr* %1, %struct.mg_mgr** %mgr, align 8
  %call = call double @mg_time()
  store double %call, double* %now, align 8
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %2, i32 0, i32 0
  %3 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8
  store %struct.mg_connection* %3, %struct.mg_connection** %nc, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp = icmp ne %struct.mg_connection* %4, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 0
  %6 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8
  store %struct.mg_connection* %6, %struct.mg_connection** %tmp, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %8 = load double, double* %now, align 8
  %call3 = call i32 @mg_if_poll(%struct.mg_connection* %7, double %8)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load %struct.mg_connection*, %struct.mg_connection** %tmp, align 8
  store %struct.mg_connection* %9, %struct.mg_connection** %nc, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %timeout_ms.addr, align 4
  %11 = load double, double* %now, align 8
  %conv = fptosi double %11 to i64
  ret i64 %conv
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_null_if_listen_tcp(%struct.mg_connection* %c, %union.socket_address* %sa) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_null_if_listen_udp(%struct.mg_connection* %c, %union.socket_address* %sa) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_connect_tcp(%struct.mg_connection* %c, %union.socket_address* %sa) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8
  %or = or i64 %1, 2048
  store i64 %or, i64* %flags, align 8
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_connect_udp(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8
  %or = or i64 %1, 2048
  store i64 %or, i64* %flags, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_null_if_tcp_send(%struct.mg_connection* %c, i8* %buf, i64 %len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i8*, i8** %buf.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_null_if_udp_send(%struct.mg_connection* %c, i8* %buf, i64 %len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i8*, i8** %buf.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_null_if_create_conn(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  ret i32 1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_destroy_conn(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_sock_set(%struct.mg_connection* %c, i32 %sock) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %sock.addr = alloca i32, align 4
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i32 %sock, i32* %sock.addr, align 4
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i32, i32* %sock.addr, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_null_if_get_conn_addr(%struct.mg_connection* %c, i32 %remote, %union.socket_address* %sa) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %remote.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i32 %remote, i32* %remote.addr, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i32, i32* %remote.addr, align 4
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_set_non_blocking_mode(i32 %sock) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %flags = alloca i32, align 4
  store i32 %sock, i32* %sock.addr, align 4
  %0 = load i32, i32* %sock.addr, align 4
  %call = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %0, i32 3, i32 0)
  store i32 %call, i32* %flags, align 4
  %1 = load i32, i32* %sock.addr, align 4
  %2 = load i32, i32* %flags, align 4
  %or = or i32 %2, 4
  %call1 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %1, i32 4, i32 %or)
  ret void
}

declare i32 @"\01_fcntl"(i32, i32, ...) #3

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_connect_tcp(%struct.mg_connection* %nc, %union.socket_address* %sa) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %rc = alloca i32, align 4
  %proto = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i32 0, i32* %proto, align 4
  %0 = load i32, i32* %proto, align 4
  %call = call i32 @socket(i32 2, i32 1, i32 %0)
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 4
  store i32 %call, i32* %sock, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 4
  %3 = load i32, i32* %sock1, align 8
  %cmp = icmp eq i32 %3, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call i32 @mg_get_errno()
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call3 = call i32 @mg_get_errno()
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ 1, %cond.false ]
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %err = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 5
  store i32 %cond, i32* %err, align 4
  br label %do.end

if.end:                                           ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 4
  %6 = load i32, i32* %sock4, align 8
  call void @mg_set_non_blocking_mode(i32 %6)
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 4
  %8 = load i32, i32* %sock5, align 8
  %9 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa6 = bitcast %union.socket_address* %9 to %struct.sockaddr*
  %call7 = call i32 @"\01_connect"(i32 %8, %struct.sockaddr* %sa6, i32 16)
  store i32 %call7, i32* %rc, align 4
  %10 = load i32, i32* %rc, align 4
  %cmp8 = icmp slt i32 %10, 0
  br i1 %cmp8, label %land.lhs.true, label %cond.false13

land.lhs.true:                                    ; preds = %if.end
  %call9 = call i32 @mg_is_error()
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false13

cond.true11:                                      ; preds = %land.lhs.true
  %call12 = call i32 @mg_get_errno()
  br label %cond.end14

cond.false13:                                     ; preds = %land.lhs.true, %if.end
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi i32 [ %call12, %cond.true11 ], [ 0, %cond.false13 ]
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %err16 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 5
  store i32 %cond15, i32* %err16, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end14
  %call17 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3694)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %if.end23

if.then19:                                        ; preds = %do.body
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 4
  %14 = load i32, i32* %sock20, align 8
  %15 = load i32, i32* %rc, align 4
  %call21 = call i32 @mg_get_errno()
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %err22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 5
  %17 = load i32, i32* %err22, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i32 0, i32 0), %struct.mg_connection* %12, i32 %14, i32 %15, i32 %call21, i32 %17)
  br label %if.end23

if.end23:                                         ; preds = %if.then19, %do.body
  br label %do.end

do.end:                                           ; preds = %cond.end, %if.end23
  ret void
}

declare i32 @socket(i32, i32, i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_get_errno() #0 {
entry:
  %call = call i32* @__error()
  %0 = load i32, i32* %call, align 4
  ret i32 %0
}

declare i32 @"\01_connect"(i32, %struct.sockaddr*, i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_is_error() #0 {
entry:
  %err = alloca i32, align 4
  %call = call i32 @mg_get_errno()
  store i32 %call, i32* %err, align 4
  %0 = load i32, i32* %err, align 4
  %cmp = icmp ne i32 %0, 36
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %err, align 4
  %cmp1 = icmp ne i32 %1, 35
  br i1 %cmp1, label %land.lhs.true2, label %land.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32, i32* %err, align 4
  %cmp3 = icmp ne i32 %2, 35
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true2
  %3 = load i32, i32* %err, align 4
  %cmp4 = icmp ne i32 %3, 4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true2, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true2 ], [ false, %land.lhs.true ], [ false, %entry ], [ %cmp4, %land.rhs ]
  %land.ext = zext i1 %4 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_connect_udp(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %optval = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %call = call i32 @socket(i32 2, i32 2, i32 0)
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  store i32 %call, i32* %sock, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 4
  %2 = load i32, i32* %sock1, align 8
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call i32 @mg_get_errno()
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call3 = call i32 @mg_get_errno()
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ 1, %cond.false ]
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %err = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 5
  store i32 %cond, i32* %err, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 21
  %5 = load i64, i64* %flags, align 8
  %and = and i64 %5, 16384
  %tobool4 = icmp ne i64 %and, 0
  br i1 %tobool4, label %if.then5, label %if.end19

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %optval, align 4
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock6 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 4
  %7 = load i32, i32* %sock6, align 8
  %8 = bitcast i32* %optval to i8*
  %call7 = call i32 @setsockopt(i32 %7, i32 65535, i32 32, i8* %8, i32 4)
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.end18

if.then9:                                         ; preds = %if.then5
  %call10 = call i32 @mg_get_errno()
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %if.then9
  %call13 = call i32 @mg_get_errno()
  br label %cond.end15

cond.false14:                                     ; preds = %if.then9
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi i32 [ %call13, %cond.true12 ], [ 1, %cond.false14 ]
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %err17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 5
  store i32 %cond16, i32* %err17, align 4
  br label %return

if.end18:                                         ; preds = %if.then5
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %err20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 5
  store i32 0, i32* %err20, align 4
  br label %return

return:                                           ; preds = %if.end19, %cond.end15, %cond.end
  ret void
}

declare i32 @setsockopt(i32, i32, i32, i8*, i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_socket_if_listen_tcp(%struct.mg_connection* %nc, %union.socket_address* %sa) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %proto = alloca i32, align 4
  %sock = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i32 0, i32* %proto, align 4
  %0 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %1 = load i32, i32* %proto, align 4
  %call = call i32 @mg_open_listening_socket(%union.socket_address* %0, i32 1, i32 %1)
  store i32 %call, i32* %sock, align 4
  %2 = load i32, i32* %sock, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @mg_get_errno()
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call2 = call i32 @mg_get_errno()
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call2, %cond.true ], [ 1, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %4 = load i32, i32* %sock, align 4
  call void @mg_sock_set(%struct.mg_connection* %3, i32 %4)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %cond.end
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_open_listening_socket(%union.socket_address* %sa, i32 %type, i32 %proto) #0 {
entry:
  %sa.addr = alloca %union.socket_address*, align 8
  %type.addr = alloca i32, align 4
  %proto.addr = alloca i32, align 4
  %sa_len = alloca i32, align 4
  %sock = alloca i32, align 4
  %on = alloca i32, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store i32 %proto, i32* %proto.addr, align 4
  %0 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa1 = bitcast %union.socket_address* %0 to %struct.sockaddr*
  %sa_family = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %sa1, i32 0, i32 1
  %1 = load i8, i8* %sa_family, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 2
  %cond = select i1 %cmp, i64 16, i64 16
  %conv3 = trunc i64 %cond to i32
  store i32 %conv3, i32* %sa_len, align 4
  store i32 -1, i32* %sock, align 4
  store i32 1, i32* %on, align 4
  %2 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa4 = bitcast %union.socket_address* %2 to %struct.sockaddr*
  %sa_family5 = getelementptr inbounds %struct.sockaddr, %struct.sockaddr* %sa4, i32 0, i32 1
  %3 = load i8, i8* %sa_family5, align 1
  %conv6 = zext i8 %3 to i32
  %4 = load i32, i32* %type.addr, align 4
  %5 = load i32, i32* %proto.addr, align 4
  %call = call i32 @socket(i32 %conv6, i32 %4, i32 %5)
  store i32 %call, i32* %sock, align 4
  %cmp7 = icmp ne i32 %call, -1
  br i1 %cmp7, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* %sock, align 4
  %7 = bitcast i32* %on to i8*
  %call9 = call i32 @setsockopt(i32 %6, i32 65535, i32 4, i8* %7, i32 4)
  %tobool = icmp ne i32 %call9, 0
  br i1 %tobool, label %if.else, label %land.lhs.true10

land.lhs.true10:                                  ; preds = %land.lhs.true
  %8 = load i32, i32* %sock, align 4
  %9 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa11 = bitcast %union.socket_address* %9 to %struct.sockaddr*
  %10 = load i32, i32* %sa_len, align 4
  %call12 = call i32 @"\01_bind"(i32 %8, %struct.sockaddr* %sa11, i32 %10)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.else, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %11 = load i32, i32* %type.addr, align 4
  %cmp15 = icmp eq i32 %11, 2
  br i1 %cmp15, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true14
  %12 = load i32, i32* %sock, align 4
  %call17 = call i32 @"\01_listen"(i32 %12, i32 128)
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true14
  %13 = load i32, i32* %sock, align 4
  call void @mg_set_non_blocking_mode(i32 %13)
  %14 = load i32, i32* %sock, align 4
  %15 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa20 = bitcast %union.socket_address* %15 to %struct.sockaddr*
  %call21 = call i32 @"\01_getsockname"(i32 %14, %struct.sockaddr* %sa20, i32* %sa_len)
  br label %if.end26

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true10, %land.lhs.true, %entry
  %16 = load i32, i32* %sock, align 4
  %cmp22 = icmp ne i32 %16, -1
  br i1 %cmp22, label %if.then24, label %if.end

if.then24:                                        ; preds = %if.else
  %17 = load i32, i32* %sock, align 4
  %call25 = call i32 @"\01_close"(i32 %17)
  store i32 -1, i32* %sock, align 4
  br label %if.end

if.end:                                           ; preds = %if.then24, %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  %18 = load i32, i32* %sock, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_socket_if_create_conn(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  ret i32 1
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_destroy_conn(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 21
  %3 = load i64, i64* %flags, align 8
  %and = and i64 %3, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.end
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 4
  %5 = load i32, i32* %sock2, align 8
  %call = call i32 @"\01_close"(i32 %5)
  br label %if.end8

if.else:                                          ; preds = %if.end
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 2
  %7 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8
  %cmp3 = icmp eq %struct.mg_connection* %7, null
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.else
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 4
  %9 = load i32, i32* %sock5, align 8
  %call6 = call i32 @"\01_close"(i32 %9)
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %if.else
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then1
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 4
  store i32 -1, i32* %sock9, align 8
  br label %return

return:                                           ; preds = %if.end8, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mgr_handle_conn(%struct.mg_connection* %nc, i32 %fd_flags, double %now) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fd_flags.addr = alloca i32, align 4
  %now.addr = alloca double, align 8
  %worth_logging = alloca i32, align 4
  %err = alloca i32, align 4
  %len23 = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %fd_flags, i32* %fd_flags.addr, align 4
  store double %now, double* %now.addr, align 8
  %0 = load i32, i32* %fd_flags.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 21
  %2 = load i64, i64* %flags, align 8
  %and = and i64 %2, 192
  %tobool = icmp ne i64 %and, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %tobool, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32
  store i32 %lor.ext, i32* %worth_logging, align 4
  %4 = load i32, i32* %worth_logging, align 4
  %tobool1 = icmp ne i32 %4, 0
  br i1 %tobool1, label %if.then, label %if.end7

if.then:                                          ; preds = %lor.end
  br label %do.body

do.body:                                          ; preds = %if.then
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3866)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %do.body
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 4
  %7 = load i32, i32* %sock, align 8
  %8 = load i32, i32* %fd_flags.addr, align 4
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 21
  %10 = load i64, i64* %flags4, align 8
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %12 = load i64, i64* %len, align 8
  %conv = trunc i64 %12 to i32
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 9
  %len5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %14 = load i64, i64* %len5, align 8
  %conv6 = trunc i64 %14 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.25, i32 0, i32 0), %struct.mg_connection* %5, i32 %7, i32 %8, i64 %10, i32 %conv, i32 %conv6)
  br label %if.end

if.end:                                           ; preds = %if.then3, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end7

if.end7:                                          ; preds = %do.end, %lor.end
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %16 = load double, double* %now.addr, align 8
  %call8 = call i32 @mg_if_poll(%struct.mg_connection* %15, double %16)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end7
  br label %if.end83

if.end11:                                         ; preds = %if.end7
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags12 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 21
  %18 = load i64, i64* %flags12, align 8
  %and13 = and i64 %18, 8
  %tobool14 = icmp ne i64 %and13, 0
  br i1 %tobool14, label %if.then15, label %if.end45

if.then15:                                        ; preds = %if.end11
  %19 = load i32, i32* %fd_flags.addr, align 4
  %cmp16 = icmp ne i32 %19, 0
  br i1 %cmp16, label %if.then18, label %if.else37

if.then18:                                        ; preds = %if.then15
  store i32 0, i32* %err, align 4
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags19 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 21
  %21 = load i64, i64* %flags19, align 8
  %and20 = and i64 %21, 2
  %tobool21 = icmp ne i64 %and20, 0
  br i1 %tobool21, label %if.end36, label %if.then22

if.then22:                                        ; preds = %if.then18
  store i32 4, i32* %len23, align 4
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock24 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 4
  %23 = load i32, i32* %sock24, align 8
  %24 = bitcast i32* %err to i8*
  %call25 = call i32 @getsockopt(i32 %23, i32 65535, i32 4103, i8* %24, i32* %len23)
  store i32 %call25, i32* %ret, align 4
  %25 = load i32, i32* %ret, align 4
  %cmp26 = icmp ne i32 %25, 0
  br i1 %cmp26, label %if.then28, label %if.else

if.then28:                                        ; preds = %if.then22
  store i32 1, i32* %err, align 4
  br label %if.end35

if.else:                                          ; preds = %if.then22
  %26 = load i32, i32* %err, align 4
  %cmp29 = icmp eq i32 %26, 35
  br i1 %cmp29, label %if.then33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %27 = load i32, i32* %err, align 4
  %cmp31 = icmp eq i32 %27, 35
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %lor.lhs.false, %if.else
  store i32 0, i32* %err, align 4
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %lor.lhs.false
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then28
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then18
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %29 = load i32, i32* %err, align 4
  call void @mg_if_connect_cb(%struct.mg_connection* %28, i32 %29)
  br label %if.end44

if.else37:                                        ; preds = %if.then15
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %err38 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %30, i32 0, i32 5
  %31 = load i32, i32* %err38, align 4
  %cmp39 = icmp ne i32 %31, 0
  br i1 %cmp39, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.else37
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %err42 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %33, i32 0, i32 5
  %34 = load i32, i32* %err42, align 4
  call void @mg_if_connect_cb(%struct.mg_connection* %32, i32 %34)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %if.else37
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end36
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end11
  %35 = load i32, i32* %fd_flags.addr, align 4
  %and46 = and i32 %35, 1
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.end62

if.then48:                                        ; preds = %if.end45
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags49 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %36, i32 0, i32 21
  %37 = load i64, i64* %flags49, align 8
  %and50 = and i64 %37, 2
  %tobool51 = icmp ne i64 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.else53

if.then52:                                        ; preds = %if.then48
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_if_can_recv_cb(%struct.mg_connection* %38)
  br label %if.end61

if.else53:                                        ; preds = %if.then48
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags54 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %39, i32 0, i32 21
  %40 = load i64, i64* %flags54, align 8
  %and55 = and i64 %40, 1
  %tobool56 = icmp ne i64 %and55, 0
  br i1 %tobool56, label %if.then57, label %if.else59

if.then57:                                        ; preds = %if.else53
  %41 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call58 = call i32 @mg_accept_conn(%struct.mg_connection* %41)
  br label %if.end60

if.else59:                                        ; preds = %if.else53
  %42 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_if_can_recv_cb(%struct.mg_connection* %42)
  br label %if.end60

if.end60:                                         ; preds = %if.else59, %if.then57
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then52
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end45
  %43 = load i32, i32* %fd_flags.addr, align 4
  %and63 = and i32 %43, 2
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then65, label %if.end66

if.then65:                                        ; preds = %if.end62
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_if_can_send_cb(%struct.mg_connection* %44)
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %if.end62
  %45 = load i32, i32* %worth_logging, align 4
  %tobool67 = icmp ne i32 %45, 0
  br i1 %tobool67, label %if.then68, label %if.end83

if.then68:                                        ; preds = %if.end66
  br label %do.body69

do.body69:                                        ; preds = %if.then68
  %call70 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3918)
  %tobool71 = icmp ne i32 %call70, 0
  br i1 %tobool71, label %if.then72, label %if.end81

if.then72:                                        ; preds = %do.body69
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %47 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock73 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %47, i32 0, i32 4
  %48 = load i32, i32* %sock73, align 8
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags74 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %49, i32 0, i32 21
  %50 = load i64, i64* %flags74, align 8
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf75 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %51, i32 0, i32 8
  %len76 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf75, i32 0, i32 1
  %52 = load i64, i64* %len76, align 8
  %conv77 = trunc i64 %52 to i32
  %53 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf78 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %53, i32 0, i32 9
  %len79 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf78, i32 0, i32 1
  %54 = load i64, i64* %len79, align 8
  %conv80 = trunc i64 %54 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.26, i32 0, i32 0), %struct.mg_connection* %46, i32 %48, i64 %50, i32 %conv77, i32 %conv80)
  br label %if.end81

if.end81:                                         ; preds = %if.then72, %do.body69
  br label %do.end82

do.end82:                                         ; preds = %if.end81
  br label %if.end83

if.end83:                                         ; preds = %if.then10, %do.end82, %if.end66
  ret void
}

declare i32 @getsockopt(i32, i32, i32, i8*, i32*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_accept_conn(%struct.mg_connection* %lc) #0 {
entry:
  %retval = alloca i32, align 4
  %lc.addr = alloca %struct.mg_connection*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %sa = alloca %union.socket_address, align 4
  %sa_len = alloca i32, align 4
  %sock = alloca i32, align 4
  store %struct.mg_connection* %lc, %struct.mg_connection** %lc.addr, align 8
  store i32 16, i32* %sa_len, align 4
  %0 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %sock1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock1, align 8
  %sa2 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %call = call i32 @"\01_accept"(i32 %1, %struct.sockaddr* %sa2, i32* %sa_len)
  store i32 %call, i32* %sock, align 4
  %2 = load i32, i32* %sock, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %call3 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.then4
  %call5 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3793)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end

if.then7:                                         ; preds = %do.body
  %3 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %call8 = call i32 @mg_get_errno()
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.186, i32 0, i32 0), %struct.mg_connection* %3, i32 %call8)
  br label %if.end

if.end:                                           ; preds = %if.then7, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end9

if.end9:                                          ; preds = %do.end, %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %lc.addr, align 8
  %call11 = call %struct.mg_connection* @mg_if_accept_new_conn(%struct.mg_connection* %4)
  store %struct.mg_connection* %call11, %struct.mg_connection** %nc, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp12 = icmp eq %struct.mg_connection* %5, null
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %if.end10
  %6 = load i32, i32* %sock, align 4
  %call14 = call i32 @"\01_close"(i32 %6)
  store i32 0, i32* %retval, align 4
  br label %return

if.end15:                                         ; preds = %if.end10
  br label %do.body16

do.body16:                                        ; preds = %if.end15
  %call17 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3803)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then19, label %if.end25

if.then19:                                        ; preds = %do.body16
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %8 = load i32, i32* %coerce.dive, align 4
  %call20 = call i8* @inet_ntoa(i32 %8)
  %sin21 = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin21, i32 0, i32 2
  %9 = load i16, i16* %sin_port, align 2
  %call22 = call zeroext i16 @_OSSwapInt16(i16 zeroext %9)
  %conv = zext i16 %call22 to i32
  %conv23 = trunc i32 %conv to i16
  %conv24 = zext i16 %conv23 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.187, i32 0, i32 0), %struct.mg_connection* %7, i8* %call20, i32 %conv24)
  br label %if.end25

if.end25:                                         ; preds = %if.then19, %do.body16
  br label %do.end26

do.end26:                                         ; preds = %if.end25
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %11 = load i32, i32* %sock, align 4
  call void @mg_sock_set(%struct.mg_connection* %10, i32 %11)
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %13 = load i32, i32* %sa_len, align 4
  %conv27 = zext i32 %13 to i64
  call void @mg_if_accept_tcp_cb(%struct.mg_connection* %12, %union.socket_address* %sa, i64 %conv27)
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end26, %if.then13, %if.end9
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_sock_set(%struct.mg_connection* %nc, i32 %sock) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sock.addr = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %sock, i32* %sock.addr, align 4
  %0 = load i32, i32* %sock.addr, align 4
  call void @mg_set_non_blocking_mode(i32 %0)
  %1 = load i32, i32* %sock.addr, align 4
  call void @mg_set_close_on_exec(i32 %1)
  %2 = load i32, i32* %sock.addr, align 4
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 4
  store i32 %2, i32* %sock1, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3944)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %5 = load i32, i32* %sock.addr, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), %struct.mg_connection* %4, i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_set_close_on_exec(i32 %sock) #0 {
entry:
  %sock.addr = alloca i32, align 4
  store i32 %sock, i32* %sock.addr, align 4
  %0 = load i32, i32* %sock.addr, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_init(%struct.mg_iface* %iface) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3949)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %1 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %1, i32 0, i32 0
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i32 0, i32 0), %struct.mg_mgr* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %3 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8
  %mgr1 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %3, i32 0, i32 0
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr1, align 8
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %4, i32 0, i32 2
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i32 0, i32 0
  %call2 = call i32 @mg_socketpair(i32* %arraydecay, i32 2)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_socketpair(i32* %sp, i32 %sock_type) #0 {
entry:
  %sp.addr = alloca i32*, align 8
  %sock_type.addr = alloca i32, align 4
  %sa = alloca %union.socket_address, align 4
  %sa2 = alloca %union.socket_address, align 4
  %sock = alloca i32, align 4
  %len = alloca i32, align 4
  %ret = alloca i32, align 4
  store i32* %sp, i32** %sp.addr, align 8
  store i32 %sock_type, i32* %sock_type.addr, align 4
  store i32 16, i32* %len, align 4
  store i32 0, i32* %ret, align 4
  %0 = load i32*, i32** %sp.addr, align 8
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 1
  store i32 -1, i32* %arrayidx, align 4
  %1 = load i32*, i32** %sp.addr, align 8
  %arrayidx1 = getelementptr inbounds i32, i32* %1, i64 0
  store i32 -1, i32* %arrayidx1, align 4
  store i32 -1, i32* %sock, align 4
  %2 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 16, i32 4, i1 false)
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_family = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 1
  store i8 2, i8* %sin_family, align 1
  %sin2 = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin2, i32 0, i32 3
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  store i32 16777343, i32* %s_addr, align 4
  %3 = bitcast %union.socket_address* %sa2 to i8*
  %4 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 16, i32 4, i1 false)
  %5 = load i32, i32* %sock_type.addr, align 4
  %call = call i32 @socket(i32 2, i32 %5, i32 0)
  store i32 %call, i32* %sock, align 4
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.end69

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %sock, align 4
  %sa3 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %7 = load i32, i32* %len, align 4
  %call4 = call i32 @"\01_bind"(i32 %6, %struct.sockaddr* %sa3, i32 %7)
  %cmp5 = icmp ne i32 %call4, 0
  br i1 %cmp5, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.else
  br label %if.end68

if.else7:                                         ; preds = %if.else
  %8 = load i32, i32* %sock_type.addr, align 4
  %cmp8 = icmp eq i32 %8, 1
  br i1 %cmp8, label %land.lhs.true, label %if.else12

land.lhs.true:                                    ; preds = %if.else7
  %9 = load i32, i32* %sock, align 4
  %call9 = call i32 @"\01_listen"(i32 %9, i32 1)
  %cmp10 = icmp ne i32 %call9, 0
  br i1 %cmp10, label %if.then11, label %if.else12

if.then11:                                        ; preds = %land.lhs.true
  br label %if.end67

if.else12:                                        ; preds = %land.lhs.true, %if.else7
  %10 = load i32, i32* %sock, align 4
  %sa13 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %call14 = call i32 @"\01_getsockname"(i32 %10, %struct.sockaddr* %sa13, i32* %len)
  %cmp15 = icmp ne i32 %call14, 0
  br i1 %cmp15, label %if.then16, label %if.else17

if.then16:                                        ; preds = %if.else12
  br label %if.end66

if.else17:                                        ; preds = %if.else12
  %11 = load i32, i32* %sock_type.addr, align 4
  %call18 = call i32 @socket(i32 2, i32 %11, i32 0)
  %12 = load i32*, i32** %sp.addr, align 8
  %arrayidx19 = getelementptr inbounds i32, i32* %12, i64 0
  store i32 %call18, i32* %arrayidx19, align 4
  %cmp20 = icmp eq i32 %call18, -1
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.else17
  br label %if.end65

if.else22:                                        ; preds = %if.else17
  %13 = load i32, i32* %sock_type.addr, align 4
  %cmp23 = icmp eq i32 %13, 1
  br i1 %cmp23, label %land.lhs.true24, label %if.else30

land.lhs.true24:                                  ; preds = %if.else22
  %14 = load i32*, i32** %sp.addr, align 8
  %arrayidx25 = getelementptr inbounds i32, i32* %14, i64 0
  %15 = load i32, i32* %arrayidx25, align 4
  %sa26 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %16 = load i32, i32* %len, align 4
  %call27 = call i32 @"\01_connect"(i32 %15, %struct.sockaddr* %sa26, i32 %16)
  %cmp28 = icmp ne i32 %call27, 0
  br i1 %cmp28, label %if.then29, label %if.else30

if.then29:                                        ; preds = %land.lhs.true24
  br label %if.end64

if.else30:                                        ; preds = %land.lhs.true24, %if.else22
  %17 = load i32, i32* %sock_type.addr, align 4
  %cmp31 = icmp eq i32 %17, 2
  br i1 %cmp31, label %land.lhs.true32, label %if.else51

land.lhs.true32:                                  ; preds = %if.else30
  %18 = load i32*, i32** %sp.addr, align 8
  %arrayidx33 = getelementptr inbounds i32, i32* %18, i64 0
  %19 = load i32, i32* %arrayidx33, align 4
  %sa34 = bitcast %union.socket_address* %sa2 to %struct.sockaddr*
  %20 = load i32, i32* %len, align 4
  %call35 = call i32 @"\01_bind"(i32 %19, %struct.sockaddr* %sa34, i32 %20)
  %cmp36 = icmp ne i32 %call35, 0
  br i1 %cmp36, label %if.then50, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true32
  %21 = load i32*, i32** %sp.addr, align 8
  %arrayidx37 = getelementptr inbounds i32, i32* %21, i64 0
  %22 = load i32, i32* %arrayidx37, align 4
  %sa38 = bitcast %union.socket_address* %sa2 to %struct.sockaddr*
  %call39 = call i32 @"\01_getsockname"(i32 %22, %struct.sockaddr* %sa38, i32* %len)
  %cmp40 = icmp ne i32 %call39, 0
  br i1 %cmp40, label %if.then50, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %lor.lhs.false
  %23 = load i32*, i32** %sp.addr, align 8
  %arrayidx42 = getelementptr inbounds i32, i32* %23, i64 0
  %24 = load i32, i32* %arrayidx42, align 4
  %sa43 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %25 = load i32, i32* %len, align 4
  %call44 = call i32 @"\01_connect"(i32 %24, %struct.sockaddr* %sa43, i32 %25)
  %cmp45 = icmp ne i32 %call44, 0
  br i1 %cmp45, label %if.then50, label %lor.lhs.false46

lor.lhs.false46:                                  ; preds = %lor.lhs.false41
  %26 = load i32, i32* %sock, align 4
  %sa47 = bitcast %union.socket_address* %sa2 to %struct.sockaddr*
  %27 = load i32, i32* %len, align 4
  %call48 = call i32 @"\01_connect"(i32 %26, %struct.sockaddr* %sa47, i32 %27)
  %cmp49 = icmp ne i32 %call48, 0
  br i1 %cmp49, label %if.then50, label %if.else51

if.then50:                                        ; preds = %lor.lhs.false46, %lor.lhs.false41, %lor.lhs.false, %land.lhs.true32
  br label %if.end63

if.else51:                                        ; preds = %lor.lhs.false46, %if.else30
  %28 = load i32, i32* %sock_type.addr, align 4
  %cmp52 = icmp eq i32 %28, 2
  br i1 %cmp52, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else51
  %29 = load i32, i32* %sock, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else51
  %30 = load i32, i32* %sock, align 4
  %31 = load i32, i32* %len, align 4
  %call53 = call i32 @mg_socketpair_accept(i32 %30, %union.socket_address* %sa, i32 %31)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %29, %cond.true ], [ %call53, %cond.false ]
  %32 = load i32*, i32** %sp.addr, align 8
  %arrayidx54 = getelementptr inbounds i32, i32* %32, i64 1
  store i32 %cond, i32* %arrayidx54, align 4
  %cmp55 = icmp eq i32 %cond, -1
  br i1 %cmp55, label %if.then56, label %if.else57

if.then56:                                        ; preds = %cond.end
  br label %if.end62

if.else57:                                        ; preds = %cond.end
  %33 = load i32*, i32** %sp.addr, align 8
  %arrayidx58 = getelementptr inbounds i32, i32* %33, i64 0
  %34 = load i32, i32* %arrayidx58, align 4
  call void @mg_set_close_on_exec(i32 %34)
  %35 = load i32*, i32** %sp.addr, align 8
  %arrayidx59 = getelementptr inbounds i32, i32* %35, i64 1
  %36 = load i32, i32* %arrayidx59, align 4
  call void @mg_set_close_on_exec(i32 %36)
  %37 = load i32, i32* %sock_type.addr, align 4
  %cmp60 = icmp eq i32 %37, 1
  br i1 %cmp60, label %if.then61, label %if.end

if.then61:                                        ; preds = %if.else57
  call void @mg_socketpair_close(i32* %sock)
  br label %if.end

if.end:                                           ; preds = %if.then61, %if.else57
  store i32 1, i32* %ret, align 4
  br label %if.end62

if.end62:                                         ; preds = %if.end, %if.then56
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then50
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then29
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then21
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then16
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then11
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then6
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then
  %38 = load i32, i32* %ret, align 4
  %tobool = icmp ne i32 %38, 0
  br i1 %tobool, label %if.end84, label %if.then70

if.then70:                                        ; preds = %if.end69
  %39 = load i32*, i32** %sp.addr, align 8
  %arrayidx71 = getelementptr inbounds i32, i32* %39, i64 0
  %40 = load i32, i32* %arrayidx71, align 4
  %cmp72 = icmp ne i32 %40, -1
  br i1 %cmp72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %if.then70
  %41 = load i32*, i32** %sp.addr, align 8
  %arrayidx74 = getelementptr inbounds i32, i32* %41, i64 0
  call void @mg_socketpair_close(i32* %arrayidx74)
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %if.then70
  %42 = load i32*, i32** %sp.addr, align 8
  %arrayidx76 = getelementptr inbounds i32, i32* %42, i64 1
  %43 = load i32, i32* %arrayidx76, align 4
  %cmp77 = icmp ne i32 %43, -1
  br i1 %cmp77, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.end75
  %44 = load i32*, i32** %sp.addr, align 8
  %arrayidx79 = getelementptr inbounds i32, i32* %44, i64 1
  call void @mg_socketpair_close(i32* %arrayidx79)
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %if.end75
  %45 = load i32, i32* %sock, align 4
  %cmp81 = icmp ne i32 %45, -1
  br i1 %cmp81, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end80
  call void @mg_socketpair_close(i32* %sock)
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %if.end80
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end69
  %46 = load i32, i32* %ret, align 4
  ret i32 %46
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_free(%struct.mg_iface* %iface) #0 {
entry:
  %iface.addr = alloca %struct.mg_iface*, align 8
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_add_conn(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_remove_conn(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_add_to_set(i32 %sock, %struct.fd_set* %set, i32* %max_fd) #0 {
entry:
  %retval.i.i = alloca i32, align 4
  %_a.addr.i.i = alloca i32, align 4
  %_b.addr.i.i = alloca i8*, align 8
  %_fd.addr.i = alloca i32, align 4
  %_p.addr.i = alloca %struct.fd_set*, align 8
  %sock.addr = alloca i32, align 4
  %set.addr = alloca %struct.fd_set*, align 8
  %max_fd.addr = alloca i32*, align 8
  store i32 %sock, i32* %sock.addr, align 4
  store %struct.fd_set* %set, %struct.fd_set** %set.addr, align 8
  store i32* %max_fd, i32** %max_fd.addr, align 8
  %0 = load i32, i32* %sock.addr, align 4
  %cmp = icmp ne i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %sock.addr, align 4
  %2 = load %struct.fd_set*, %struct.fd_set** %set.addr, align 8
  store i32 %1, i32* %_fd.addr.i, align 4
  store %struct.fd_set* %2, %struct.fd_set** %_p.addr.i, align 8
  %3 = load i32, i32* %_fd.addr.i, align 4
  %4 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i, align 8
  %5 = bitcast %struct.fd_set* %4 to i8*
  store i32 %3, i32* %_a.addr.i.i, align 4
  store i8* %5, i8** %_b.addr.i.i, align 8
  br i1 icmp ne (i64 ptrtoint (i32 (i32, i8*, i32)* @__darwin_check_fd_set_overflow to i64), i64 0), label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %if.then
  %6 = load i32, i32* %_a.addr.i.i, align 4
  %7 = load i8*, i8** %_b.addr.i.i, align 8
  %call.i.i = call i32 @__darwin_check_fd_set_overflow(i32 %6, i8* %7, i32 0) #5
  store i32 %call.i.i, i32* %retval.i.i, align 4
  br label %__darwin_check_fd_set.exit.i

if.else.i.i:                                      ; preds = %if.then
  store i32 1, i32* %retval.i.i, align 4
  br label %__darwin_check_fd_set.exit.i

__darwin_check_fd_set.exit.i:                     ; preds = %if.else.i.i, %if.then.i.i
  %8 = load i32, i32* %retval.i.i, align 4
  %tobool.i = icmp ne i32 %8, 0
  br i1 %tobool.i, label %if.then.i, label %__darwin_fd_set.exit

if.then.i:                                        ; preds = %__darwin_check_fd_set.exit.i
  %9 = load i32, i32* %_fd.addr.i, align 4
  %conv.i = sext i32 %9 to i64
  %rem.i = urem i64 %conv.i, 32
  %shl.i = shl i64 1, %rem.i
  %conv1.i = trunc i64 %shl.i to i32
  %10 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i, align 8
  %fds_bits.i = getelementptr inbounds %struct.fd_set, %struct.fd_set* %10, i32 0, i32 0
  %11 = load i32, i32* %_fd.addr.i, align 4
  %conv2.i = sext i32 %11 to i64
  %div.i = udiv i64 %conv2.i, 32
  %arrayidx.i = getelementptr inbounds [32 x i32], [32 x i32]* %fds_bits.i, i64 0, i64 %div.i
  %12 = load i32, i32* %arrayidx.i, align 4
  %or.i = or i32 %12, %conv1.i
  store i32 %or.i, i32* %arrayidx.i, align 4
  br label %__darwin_fd_set.exit

__darwin_fd_set.exit:                             ; preds = %__darwin_check_fd_set.exit.i, %if.then.i
  %13 = load i32*, i32** %max_fd.addr, align 8
  %14 = load i32, i32* %13, align 4
  %cmp1 = icmp eq i32 %14, -1
  br i1 %cmp1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %__darwin_fd_set.exit
  %15 = load i32, i32* %sock.addr, align 4
  %16 = load i32*, i32** %max_fd.addr, align 8
  %17 = load i32, i32* %16, align 4
  %cmp2 = icmp sgt i32 %15, %17
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %lor.lhs.false, %__darwin_fd_set.exit
  %18 = load i32, i32* %sock.addr, align 4
  %19 = load i32*, i32** %max_fd.addr, align 8
  store i32 %18, i32* %19, align 4
  br label %if.end

if.end:                                           ; preds = %if.then3, %lor.lhs.false
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mg_socket_if_poll(%struct.mg_iface* %iface, i32 %timeout_ms) #0 {
entry:
  %retval.i.i161 = alloca i32, align 4
  %_a.addr.i.i162 = alloca i32, align 4
  %_b.addr.i.i163 = alloca i8*, align 8
  %retval.i164 = alloca i32, align 4
  %_fd.addr.i165 = alloca i32, align 4
  %_p.addr.i166 = alloca %struct.fd_set*, align 8
  %retval.i.i138 = alloca i32, align 4
  %_a.addr.i.i139 = alloca i32, align 4
  %_b.addr.i.i140 = alloca i8*, align 8
  %retval.i141 = alloca i32, align 4
  %_fd.addr.i142 = alloca i32, align 4
  %_p.addr.i143 = alloca %struct.fd_set*, align 8
  %retval.i.i115 = alloca i32, align 4
  %_a.addr.i.i116 = alloca i32, align 4
  %_b.addr.i.i117 = alloca i8*, align 8
  %retval.i118 = alloca i32, align 4
  %_fd.addr.i119 = alloca i32, align 4
  %_p.addr.i120 = alloca %struct.fd_set*, align 8
  %retval.i.i = alloca i32, align 4
  %_a.addr.i.i = alloca i32, align 4
  %_b.addr.i.i = alloca i8*, align 8
  %retval.i = alloca i32, align 4
  %_fd.addr.i = alloca i32, align 4
  %_p.addr.i = alloca %struct.fd_set*, align 8
  %iface.addr = alloca %struct.mg_iface*, align 8
  %timeout_ms.addr = alloca i32, align 4
  %mgr = alloca %struct.mg_mgr*, align 8
  %now = alloca double, align 8
  %min_timer = alloca double, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %tmp = alloca %struct.mg_connection*, align 8
  %tv = alloca %struct.timeval, align 8
  %read_set = alloca %struct.fd_set, align 4
  %write_set = alloca %struct.fd_set, align 4
  %err_set = alloca %struct.fd_set, align 4
  %max_fd = alloca i32, align 4
  %num_fds = alloca i32, align 4
  %num_ev = alloca i32, align 4
  %num_timers = alloca i32, align 4
  %timer_timeout_ms = alloca double, align 8
  %fd_flags = alloca i32, align 4
  store %struct.mg_iface* %iface, %struct.mg_iface** %iface.addr, align 8
  store i32 %timeout_ms, i32* %timeout_ms.addr, align 4
  %0 = load %struct.mg_iface*, %struct.mg_iface** %iface.addr, align 8
  %mgr1 = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %0, i32 0, i32 0
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr1, align 8
  store %struct.mg_mgr* %1, %struct.mg_mgr** %mgr, align 8
  %call = call double @mg_time()
  store double %call, double* %now, align 8
  store i32 -1, i32* %max_fd, align 4
  store i32 0, i32* %num_timers, align 4
  %2 = bitcast %struct.fd_set* %read_set to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 128, i32 4, i1 false)
  %3 = bitcast %struct.fd_set* %write_set to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 128, i32 4, i1 false)
  %4 = bitcast %struct.fd_set* %err_set to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 128, i32 4, i1 false)
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 1
  %6 = load i32, i32* %arrayidx, align 4
  call void @mg_add_to_set(i32 %6, %struct.fd_set* %read_set, i32* %max_fd)
  store double 0.000000e+00, double* %min_timer, align 8
  %7 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %7, i32 0, i32 0
  %8 = load %struct.mg_connection*, %struct.mg_connection** %active_connections, align 8
  store %struct.mg_connection* %8, %struct.mg_connection** %nc, align 8
  store i32 0, i32* %num_fds, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp = icmp ne %struct.mg_connection* %9, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 0
  %11 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8
  store %struct.mg_connection* %11, %struct.mg_connection** %tmp, align 8
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 4
  %13 = load i32, i32* %sock, align 8
  %cmp10 = icmp ne i32 %13, -1
  br i1 %cmp10, label %if.then, label %if.end33

if.then:                                          ; preds = %for.body
  %14 = load i32, i32* %num_fds, align 4
  %inc = add nsw i32 %14, 1
  store i32 %inc, i32* %num_fds, align 4
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %16 = load i64, i64* %len, align 8
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 7
  %18 = load i64, i64* %recv_mbuf_limit, align 8
  %cmp11 = icmp ult i64 %16, %18
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 21
  %20 = load i64, i64* %flags, align 8
  %and = and i64 %20, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then13

lor.lhs.false:                                    ; preds = %land.lhs.true
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 2
  %22 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8
  %cmp12 = icmp eq %struct.mg_connection* %22, null
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %23, i32 0, i32 4
  %24 = load i32, i32* %sock14, align 8
  call void @mg_add_to_set(i32 %24, %struct.fd_set* %read_set, i32* %max_fd)
  br label %if.end

if.end:                                           ; preds = %if.then13, %lor.lhs.false, %if.then
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags15 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %25, i32 0, i32 21
  %26 = load i64, i64* %flags15, align 8
  %and16 = and i64 %26, 8
  %tobool17 = icmp ne i64 %and16, 0
  br i1 %tobool17, label %land.lhs.true18, label %lor.lhs.false22

land.lhs.true18:                                  ; preds = %if.end
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags19 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 21
  %28 = load i64, i64* %flags19, align 8
  %and20 = and i64 %28, 64
  %tobool21 = icmp ne i64 %and20, 0
  br i1 %tobool21, label %lor.lhs.false22, label %if.then29

lor.lhs.false22:                                  ; preds = %land.lhs.true18, %if.end
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %29, i32 0, i32 9
  %len23 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %30 = load i64, i64* %len23, align 8
  %cmp24 = icmp ugt i64 %30, 0
  br i1 %cmp24, label %land.lhs.true25, label %if.end32

land.lhs.true25:                                  ; preds = %lor.lhs.false22
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags26 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 21
  %32 = load i64, i64* %flags26, align 8
  %and27 = and i64 %32, 8
  %tobool28 = icmp ne i64 %and27, 0
  br i1 %tobool28, label %if.end32, label %if.then29

if.then29:                                        ; preds = %land.lhs.true25, %land.lhs.true18
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock30 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %33, i32 0, i32 4
  %34 = load i32, i32* %sock30, align 8
  call void @mg_add_to_set(i32 %34, %struct.fd_set* %write_set, i32* %max_fd)
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock31 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %35, i32 0, i32 4
  %36 = load i32, i32* %sock31, align 8
  call void @mg_add_to_set(i32 %36, %struct.fd_set* %err_set, i32* %max_fd)
  br label %if.end32

if.end32:                                         ; preds = %if.then29, %land.lhs.true25, %lor.lhs.false22
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %for.body
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %ev_timer_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %37, i32 0, i32 11
  %38 = load double, double* %ev_timer_time, align 8
  %cmp34 = fcmp ogt double %38, 0.000000e+00
  br i1 %cmp34, label %if.then35, label %if.end44

if.then35:                                        ; preds = %if.end33
  %39 = load i32, i32* %num_timers, align 4
  %cmp36 = icmp eq i32 %39, 0
  br i1 %cmp36, label %if.then40, label %lor.lhs.false37

lor.lhs.false37:                                  ; preds = %if.then35
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %ev_timer_time38 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %40, i32 0, i32 11
  %41 = load double, double* %ev_timer_time38, align 8
  %42 = load double, double* %min_timer, align 8
  %cmp39 = fcmp olt double %41, %42
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %lor.lhs.false37, %if.then35
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %ev_timer_time41 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %43, i32 0, i32 11
  %44 = load double, double* %ev_timer_time41, align 8
  store double %44, double* %min_timer, align 8
  br label %if.end42

if.end42:                                         ; preds = %if.then40, %lor.lhs.false37
  %45 = load i32, i32* %num_timers, align 4
  %inc43 = add nsw i32 %45, 1
  store i32 %inc43, i32* %num_timers, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.end42, %if.end33
  br label %for.inc

for.inc:                                          ; preds = %if.end44
  %46 = load %struct.mg_connection*, %struct.mg_connection** %tmp, align 8
  store %struct.mg_connection* %46, %struct.mg_connection** %nc, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %47 = load i32, i32* %num_timers, align 4
  %cmp45 = icmp sgt i32 %47, 0
  br i1 %cmp45, label %if.then46, label %if.end54

if.then46:                                        ; preds = %for.end
  %48 = load double, double* %min_timer, align 8
  %call48 = call double @mg_time()
  %sub = fsub double %48, %call48
  %mul = fmul double %sub, 1.000000e+03
  %add = fadd double %mul, 1.000000e+00
  store double %add, double* %timer_timeout_ms, align 8
  %49 = load double, double* %timer_timeout_ms, align 8
  %50 = load i32, i32* %timeout_ms.addr, align 4
  %conv = sitofp i32 %50 to double
  %cmp49 = fcmp olt double %49, %conv
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then46
  %51 = load double, double* %timer_timeout_ms, align 8
  %conv52 = fptosi double %51 to i32
  store i32 %conv52, i32* %timeout_ms.addr, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then46
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %for.end
  %52 = load i32, i32* %timeout_ms.addr, align 4
  %cmp55 = icmp slt i32 %52, 0
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %if.end54
  store i32 0, i32* %timeout_ms.addr, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then57, %if.end54
  %53 = load i32, i32* %timeout_ms.addr, align 4
  %div = sdiv i32 %53, 1000
  %conv59 = sext i32 %div to i64
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 0
  store i64 %conv59, i64* %tv_sec, align 8
  %54 = load i32, i32* %timeout_ms.addr, align 4
  %rem = srem i32 %54, 1000
  %mul60 = mul nsw i32 %rem, 1000
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %tv, i32 0, i32 1
  store i32 %mul60, i32* %tv_usec, align 8
  %55 = load i32, i32* %max_fd, align 4
  %add61 = add nsw i32 %55, 1
  %call62 = call i32 @"\01_select$1050"(i32 %add61, %struct.fd_set* %read_set, %struct.fd_set* %write_set, %struct.fd_set* %err_set, %struct.timeval* %tv)
  store i32 %call62, i32* %num_ev, align 4
  %call63 = call double @mg_time()
  store double %call63, double* %now, align 8
  %56 = load i32, i32* %num_ev, align 4
  %cmp64 = icmp sgt i32 %56, 0
  br i1 %cmp64, label %land.lhs.true66, label %if.end77

land.lhs.true66:                                  ; preds = %if.end58
  %57 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %ctl67 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %57, i32 0, i32 2
  %arrayidx68 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl67, i64 0, i64 1
  %58 = load i32, i32* %arrayidx68, align 4
  %cmp69 = icmp ne i32 %58, -1
  br i1 %cmp69, label %land.lhs.true71, label %if.end77

land.lhs.true71:                                  ; preds = %land.lhs.true66
  %59 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %ctl72 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %59, i32 0, i32 2
  %arrayidx73 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl72, i64 0, i64 1
  %60 = load i32, i32* %arrayidx73, align 4
  store i32 %60, i32* %_fd.addr.i, align 4
  store %struct.fd_set* %read_set, %struct.fd_set** %_p.addr.i, align 8
  %61 = load i32, i32* %_fd.addr.i, align 4
  %62 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i, align 8
  %63 = bitcast %struct.fd_set* %62 to i8*
  store i32 %61, i32* %_a.addr.i.i, align 4
  store i8* %63, i8** %_b.addr.i.i, align 8
  br i1 icmp ne (i64 ptrtoint (i32 (i32, i8*, i32)* @__darwin_check_fd_set_overflow to i64), i64 0), label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %land.lhs.true71
  %64 = load i32, i32* %_a.addr.i.i, align 4
  %65 = load i8*, i8** %_b.addr.i.i, align 8
  %call.i.i = call i32 @__darwin_check_fd_set_overflow(i32 %64, i8* %65, i32 0) #5
  store i32 %call.i.i, i32* %retval.i.i, align 4
  br label %__darwin_check_fd_set.exit.i

if.else.i.i:                                      ; preds = %land.lhs.true71
  store i32 1, i32* %retval.i.i, align 4
  br label %__darwin_check_fd_set.exit.i

__darwin_check_fd_set.exit.i:                     ; preds = %if.else.i.i, %if.then.i.i
  %66 = load i32, i32* %retval.i.i, align 4
  %tobool.i = icmp ne i32 %66, 0
  br i1 %tobool.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %__darwin_check_fd_set.exit.i
  %67 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i, align 8
  %fds_bits.i = getelementptr inbounds %struct.fd_set, %struct.fd_set* %67, i32 0, i32 0
  %68 = load i32, i32* %_fd.addr.i, align 4
  %conv.i = sext i32 %68 to i64
  %div.i = udiv i64 %conv.i, 32
  %arrayidx.i = getelementptr inbounds [32 x i32], [32 x i32]* %fds_bits.i, i64 0, i64 %div.i
  %69 = load i32, i32* %arrayidx.i, align 4
  %70 = load i32, i32* %_fd.addr.i, align 4
  %conv1.i = sext i32 %70 to i64
  %rem.i = urem i64 %conv1.i, 32
  %shl.i = shl i64 1, %rem.i
  %conv2.i = trunc i64 %shl.i to i32
  %and.i = and i32 %69, %conv2.i
  store i32 %and.i, i32* %retval.i, align 4
  br label %__darwin_fd_isset.exit

if.end.i:                                         ; preds = %__darwin_check_fd_set.exit.i
  store i32 0, i32* %retval.i, align 4
  br label %__darwin_fd_isset.exit

__darwin_fd_isset.exit:                           ; preds = %if.then.i, %if.end.i
  %71 = load i32, i32* %retval.i, align 4
  %tobool75 = icmp ne i32 %71, 0
  br i1 %tobool75, label %if.then76, label %if.end77

if.then76:                                        ; preds = %__darwin_fd_isset.exit
  %72 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  call void @mg_mgr_handle_ctl_sock(%struct.mg_mgr* %72)
  br label %if.end77

if.end77:                                         ; preds = %if.then76, %__darwin_fd_isset.exit, %land.lhs.true66, %if.end58
  %73 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %active_connections78 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %73, i32 0, i32 0
  %74 = load %struct.mg_connection*, %struct.mg_connection** %active_connections78, align 8
  store %struct.mg_connection* %74, %struct.mg_connection** %nc, align 8
  br label %for.cond79

for.cond79:                                       ; preds = %for.inc112, %if.end77
  %75 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp80 = icmp ne %struct.mg_connection* %75, null
  br i1 %cmp80, label %for.body82, label %for.end113

for.body82:                                       ; preds = %for.cond79
  store i32 0, i32* %fd_flags, align 4
  %76 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock84 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %76, i32 0, i32 4
  %77 = load i32, i32* %sock84, align 8
  %cmp85 = icmp ne i32 %77, -1
  br i1 %cmp85, label %if.then87, label %if.end110

if.then87:                                        ; preds = %for.body82
  %78 = load i32, i32* %num_ev, align 4
  %cmp88 = icmp sgt i32 %78, 0
  br i1 %cmp88, label %if.then90, label %if.end109

if.then90:                                        ; preds = %if.then87
  %79 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock91 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %79, i32 0, i32 4
  %80 = load i32, i32* %sock91, align 8
  store i32 %80, i32* %_fd.addr.i119, align 4
  store %struct.fd_set* %read_set, %struct.fd_set** %_p.addr.i120, align 8
  %81 = load i32, i32* %_fd.addr.i119, align 4
  %82 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i120, align 8
  %83 = bitcast %struct.fd_set* %82 to i8*
  store i32 %81, i32* %_a.addr.i.i116, align 4
  store i8* %83, i8** %_b.addr.i.i117, align 8
  br i1 icmp ne (i64 ptrtoint (i32 (i32, i8*, i32)* @__darwin_check_fd_set_overflow to i64), i64 0), label %if.then.i.i122, label %if.else.i.i123

if.then.i.i122:                                   ; preds = %if.then90
  %84 = load i32, i32* %_a.addr.i.i116, align 4
  %85 = load i8*, i8** %_b.addr.i.i117, align 8
  %call.i.i121 = call i32 @__darwin_check_fd_set_overflow(i32 %84, i8* %85, i32 0) #5
  store i32 %call.i.i121, i32* %retval.i.i115, align 4
  br label %__darwin_check_fd_set.exit.i125

if.else.i.i123:                                   ; preds = %if.then90
  store i32 1, i32* %retval.i.i115, align 4
  br label %__darwin_check_fd_set.exit.i125

__darwin_check_fd_set.exit.i125:                  ; preds = %if.else.i.i123, %if.then.i.i122
  %86 = load i32, i32* %retval.i.i115, align 4
  %tobool.i124 = icmp ne i32 %86, 0
  br i1 %tobool.i124, label %if.then.i135, label %if.end.i136

if.then.i135:                                     ; preds = %__darwin_check_fd_set.exit.i125
  %87 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i120, align 8
  %fds_bits.i126 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %87, i32 0, i32 0
  %88 = load i32, i32* %_fd.addr.i119, align 4
  %conv.i127 = sext i32 %88 to i64
  %div.i128 = udiv i64 %conv.i127, 32
  %arrayidx.i129 = getelementptr inbounds [32 x i32], [32 x i32]* %fds_bits.i126, i64 0, i64 %div.i128
  %89 = load i32, i32* %arrayidx.i129, align 4
  %90 = load i32, i32* %_fd.addr.i119, align 4
  %conv1.i130 = sext i32 %90 to i64
  %rem.i131 = urem i64 %conv1.i130, 32
  %shl.i132 = shl i64 1, %rem.i131
  %conv2.i133 = trunc i64 %shl.i132 to i32
  %and.i134 = and i32 %89, %conv2.i133
  store i32 %and.i134, i32* %retval.i118, align 4
  br label %__darwin_fd_isset.exit137

if.end.i136:                                      ; preds = %__darwin_check_fd_set.exit.i125
  store i32 0, i32* %retval.i118, align 4
  br label %__darwin_fd_isset.exit137

__darwin_fd_isset.exit137:                        ; preds = %if.then.i135, %if.end.i136
  %91 = load i32, i32* %retval.i118, align 4
  %tobool93 = icmp ne i32 %91, 0
  br i1 %tobool93, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %__darwin_fd_isset.exit137
  %92 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags94 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %92, i32 0, i32 21
  %93 = load i64, i64* %flags94, align 8
  %and95 = and i64 %93, 2
  %tobool96 = icmp ne i64 %and95, 0
  br i1 %tobool96, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.rhs
  %94 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %listener97 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %94, i32 0, i32 2
  %95 = load %struct.mg_connection*, %struct.mg_connection** %listener97, align 8
  %cmp98 = icmp eq %struct.mg_connection* %95, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %96 = phi i1 [ true, %land.rhs ], [ %cmp98, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %__darwin_fd_isset.exit137
  %97 = phi i1 [ false, %__darwin_fd_isset.exit137 ], [ %96, %lor.end ]
  %cond = select i1 %97, i32 1, i32 0
  %98 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock100 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %98, i32 0, i32 4
  %99 = load i32, i32* %sock100, align 8
  store i32 %99, i32* %_fd.addr.i142, align 4
  store %struct.fd_set* %write_set, %struct.fd_set** %_p.addr.i143, align 8
  %100 = load i32, i32* %_fd.addr.i142, align 4
  %101 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i143, align 8
  %102 = bitcast %struct.fd_set* %101 to i8*
  store i32 %100, i32* %_a.addr.i.i139, align 4
  store i8* %102, i8** %_b.addr.i.i140, align 8
  br i1 icmp ne (i64 ptrtoint (i32 (i32, i8*, i32)* @__darwin_check_fd_set_overflow to i64), i64 0), label %if.then.i.i145, label %if.else.i.i146

if.then.i.i145:                                   ; preds = %land.end
  %103 = load i32, i32* %_a.addr.i.i139, align 4
  %104 = load i8*, i8** %_b.addr.i.i140, align 8
  %call.i.i144 = call i32 @__darwin_check_fd_set_overflow(i32 %103, i8* %104, i32 0) #5
  store i32 %call.i.i144, i32* %retval.i.i138, align 4
  br label %__darwin_check_fd_set.exit.i148

if.else.i.i146:                                   ; preds = %land.end
  store i32 1, i32* %retval.i.i138, align 4
  br label %__darwin_check_fd_set.exit.i148

__darwin_check_fd_set.exit.i148:                  ; preds = %if.else.i.i146, %if.then.i.i145
  %105 = load i32, i32* %retval.i.i138, align 4
  %tobool.i147 = icmp ne i32 %105, 0
  br i1 %tobool.i147, label %if.then.i158, label %if.end.i159

if.then.i158:                                     ; preds = %__darwin_check_fd_set.exit.i148
  %106 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i143, align 8
  %fds_bits.i149 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %106, i32 0, i32 0
  %107 = load i32, i32* %_fd.addr.i142, align 4
  %conv.i150 = sext i32 %107 to i64
  %div.i151 = udiv i64 %conv.i150, 32
  %arrayidx.i152 = getelementptr inbounds [32 x i32], [32 x i32]* %fds_bits.i149, i64 0, i64 %div.i151
  %108 = load i32, i32* %arrayidx.i152, align 4
  %109 = load i32, i32* %_fd.addr.i142, align 4
  %conv1.i153 = sext i32 %109 to i64
  %rem.i154 = urem i64 %conv1.i153, 32
  %shl.i155 = shl i64 1, %rem.i154
  %conv2.i156 = trunc i64 %shl.i155 to i32
  %and.i157 = and i32 %108, %conv2.i156
  store i32 %and.i157, i32* %retval.i141, align 4
  br label %__darwin_fd_isset.exit160

if.end.i159:                                      ; preds = %__darwin_check_fd_set.exit.i148
  store i32 0, i32* %retval.i141, align 4
  br label %__darwin_fd_isset.exit160

__darwin_fd_isset.exit160:                        ; preds = %if.then.i158, %if.end.i159
  %110 = load i32, i32* %retval.i141, align 4
  %tobool102 = icmp ne i32 %110, 0
  %cond103 = select i1 %tobool102, i32 2, i32 0
  %or = or i32 %cond, %cond103
  %111 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %sock104 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %111, i32 0, i32 4
  %112 = load i32, i32* %sock104, align 8
  store i32 %112, i32* %_fd.addr.i165, align 4
  store %struct.fd_set* %err_set, %struct.fd_set** %_p.addr.i166, align 8
  %113 = load i32, i32* %_fd.addr.i165, align 4
  %114 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i166, align 8
  %115 = bitcast %struct.fd_set* %114 to i8*
  store i32 %113, i32* %_a.addr.i.i162, align 4
  store i8* %115, i8** %_b.addr.i.i163, align 8
  br i1 icmp ne (i64 ptrtoint (i32 (i32, i8*, i32)* @__darwin_check_fd_set_overflow to i64), i64 0), label %if.then.i.i168, label %if.else.i.i169

if.then.i.i168:                                   ; preds = %__darwin_fd_isset.exit160
  %116 = load i32, i32* %_a.addr.i.i162, align 4
  %117 = load i8*, i8** %_b.addr.i.i163, align 8
  %call.i.i167 = call i32 @__darwin_check_fd_set_overflow(i32 %116, i8* %117, i32 0) #5
  store i32 %call.i.i167, i32* %retval.i.i161, align 4
  br label %__darwin_check_fd_set.exit.i171

if.else.i.i169:                                   ; preds = %__darwin_fd_isset.exit160
  store i32 1, i32* %retval.i.i161, align 4
  br label %__darwin_check_fd_set.exit.i171

__darwin_check_fd_set.exit.i171:                  ; preds = %if.else.i.i169, %if.then.i.i168
  %118 = load i32, i32* %retval.i.i161, align 4
  %tobool.i170 = icmp ne i32 %118, 0
  br i1 %tobool.i170, label %if.then.i181, label %if.end.i182

if.then.i181:                                     ; preds = %__darwin_check_fd_set.exit.i171
  %119 = load %struct.fd_set*, %struct.fd_set** %_p.addr.i166, align 8
  %fds_bits.i172 = getelementptr inbounds %struct.fd_set, %struct.fd_set* %119, i32 0, i32 0
  %120 = load i32, i32* %_fd.addr.i165, align 4
  %conv.i173 = sext i32 %120 to i64
  %div.i174 = udiv i64 %conv.i173, 32
  %arrayidx.i175 = getelementptr inbounds [32 x i32], [32 x i32]* %fds_bits.i172, i64 0, i64 %div.i174
  %121 = load i32, i32* %arrayidx.i175, align 4
  %122 = load i32, i32* %_fd.addr.i165, align 4
  %conv1.i176 = sext i32 %122 to i64
  %rem.i177 = urem i64 %conv1.i176, 32
  %shl.i178 = shl i64 1, %rem.i177
  %conv2.i179 = trunc i64 %shl.i178 to i32
  %and.i180 = and i32 %121, %conv2.i179
  store i32 %and.i180, i32* %retval.i164, align 4
  br label %__darwin_fd_isset.exit183

if.end.i182:                                      ; preds = %__darwin_check_fd_set.exit.i171
  store i32 0, i32* %retval.i164, align 4
  br label %__darwin_fd_isset.exit183

__darwin_fd_isset.exit183:                        ; preds = %if.then.i181, %if.end.i182
  %123 = load i32, i32* %retval.i164, align 4
  %tobool106 = icmp ne i32 %123, 0
  %cond107 = select i1 %tobool106, i32 4, i32 0
  %or108 = or i32 %or, %cond107
  store i32 %or108, i32* %fd_flags, align 4
  br label %if.end109

if.end109:                                        ; preds = %__darwin_fd_isset.exit183, %if.then87
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %for.body82
  %124 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %next111 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %124, i32 0, i32 0
  %125 = load %struct.mg_connection*, %struct.mg_connection** %next111, align 8
  store %struct.mg_connection* %125, %struct.mg_connection** %tmp, align 8
  %126 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %127 = load i32, i32* %fd_flags, align 4
  %128 = load double, double* %now, align 8
  call void @mg_mgr_handle_conn(%struct.mg_connection* %126, i32 %127, double %128)
  br label %for.inc112

for.inc112:                                       ; preds = %if.end110
  %129 = load %struct.mg_connection*, %struct.mg_connection** %tmp, align 8
  store %struct.mg_connection* %129, %struct.mg_connection** %nc, align 8
  br label %for.cond79

for.end113:                                       ; preds = %for.cond79
  %130 = load double, double* %now, align 8
  %conv114 = fptosi double %130 to i64
  ret i64 %conv114
}

declare i32 @"\01_select$1050"(i32, %struct.fd_set*, %struct.fd_set*, %struct.fd_set*, %struct.timeval*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_mgr_handle_ctl_sock(%struct.mg_mgr* %mgr) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ctl_msg = alloca %struct.ctl_msg, align 8
  %len = alloca i32, align 4
  %dummy = alloca i64, align 8
  %nc = alloca %struct.mg_connection*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ctl = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %0, i32 0, i32 2
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %ctl, i64 0, i64 1
  %1 = load i32, i32* %arrayidx, align 4
  %2 = bitcast %struct.ctl_msg* %ctl_msg to i8*
  %call = call i64 @"\01_recv"(i32 %1, i8* %2, i64 8200, i32 0)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %len, align 4
  %3 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %ctl1 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %3, i32 0, i32 2
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %ctl1, i64 0, i64 1
  %4 = load i32, i32* %arrayidx2, align 4
  %message = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %message, i32 0, i32 0
  %call3 = call i64 @"\01_send"(i32 %4, i8* %arraydecay, i64 1, i32 0)
  store i64 %call3, i64* %dummy, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call4 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 3927)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %5 = load i32, i32* %len, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.188, i32 0, i32 0), i32 %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load i64, i64* %dummy, align 8
  %7 = load i32, i32* %len, align 4
  %cmp = icmp sge i32 %7, 8
  br i1 %cmp, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %do.end
  %callback = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 0
  %8 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback, align 8
  %cmp6 = icmp ne void (%struct.mg_connection*, i32, i8*)* %8, null
  br i1 %cmp6, label %if.then8, label %if.end16

if.then8:                                         ; preds = %land.lhs.true
  %9 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %call9 = call %struct.mg_connection* @mg_next(%struct.mg_mgr* %9, %struct.mg_connection* null)
  store %struct.mg_connection* %call9, %struct.mg_connection** %nc, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then8
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp10 = icmp ne %struct.mg_connection* %10, null
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %callback12 = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 0
  %11 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %callback12, align 8
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %message13 = getelementptr inbounds %struct.ctl_msg, %struct.ctl_msg* %ctl_msg, i32 0, i32 1
  %arraydecay14 = getelementptr inbounds [8192 x i8], [8192 x i8]* %message13, i32 0, i32 0
  call void %11(%struct.mg_connection* %12, i32 0, i8* %arraydecay14)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %call15 = call %struct.mg_connection* @mg_next(%struct.mg_mgr* %13, %struct.mg_connection* %14)
  store %struct.mg_connection* %call15, %struct.mg_connection** %nc, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end16

if.end16:                                         ; preds = %for.end, %land.lhs.true, %do.end
  ret void
}

declare i32 @"\01_bind"(i32, %struct.sockaddr*, i32) #3

declare i32 @"\01_listen"(i32, i32) #3

declare i32 @"\01_getsockname"(i32, %struct.sockaddr*, i32*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_socketpair_accept(i32 %sock, %union.socket_address* %sa, i32 %sa_len) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  %sa_len.addr = alloca i32, align 4
  %rc = alloca i32, align 4
  store i32 %sock, i32* %sock.addr, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i32 %sa_len, i32* %sa_len.addr, align 4
  br label %while.body

while.body:                                       ; preds = %entry, %if.then
  %0 = load i32, i32* %sock.addr, align 4
  %1 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa1 = bitcast %union.socket_address* %1 to %struct.sockaddr*
  %call = call i32 @"\01_accept"(i32 %0, %struct.sockaddr* %sa1, i32* %sa_len.addr)
  store i32 %call, i32* %rc, align 4
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %call2 = call i32* @__error()
  %2 = load i32, i32* %call2, align 4
  %cmp3 = icmp eq i32 %2, 4
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %while.body

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.end

while.end:                                        ; preds = %if.end
  %3 = load i32, i32* %rc, align 4
  ret i32 %3
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_socketpair_close(i32* %sock) #0 {
entry:
  %sock.addr = alloca i32*, align 8
  store i32* %sock, i32** %sock.addr, align 8
  br label %while.body

while.body:                                       ; preds = %entry, %if.then
  %0 = load i32*, i32** %sock.addr, align 8
  %1 = load i32, i32* %0, align 4
  %call = call i32 @"\01_close"(i32 %1)
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %call1 = call i32* @__error()
  %2 = load i32, i32* %call1, align 4
  %cmp2 = icmp eq i32 %2, 4
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %while.body

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.end

while.end:                                        ; preds = %if.end
  %3 = load i32*, i32** %sock.addr, align 8
  store i32 -1, i32* %3, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_sock_to_str(i32 %sock, i8* %buf, i64 %len, i32 %flags) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %sa = alloca %union.socket_address, align 4
  store i32 %sock, i32* %sock.addr, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %sock.addr, align 4
  %1 = load i32, i32* %flags.addr, align 4
  %and = and i32 %1, 4
  call void @mg_sock_get_addr(i32 %0, i32 %and, %union.socket_address* %sa)
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i64, i64* %len.addr, align 8
  %4 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %2, i64 %3, i32 %4)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_sock_get_addr(i32 %sock, i32 %remote, %union.socket_address* %sa) #0 {
entry:
  %sock.addr = alloca i32, align 4
  %remote.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  %slen = alloca i32, align 4
  store i32 %sock, i32* %sock.addr, align 4
  store i32 %remote, i32* %remote.addr, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i32 16, i32* %slen, align 4
  %0 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %1 = bitcast %union.socket_address* %0 to i8*
  %2 = load i32, i32* %slen, align 4
  %conv = zext i32 %2 to i64
  %3 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %4 = bitcast %union.socket_address* %3 to i8*
  %5 = call i64 @llvm.objectsize.i64.p0i8(i8* %4, i1 false)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 %conv, i64 %5) #5
  %6 = load i32, i32* %remote.addr, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %sock.addr, align 4
  %8 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa1 = bitcast %union.socket_address* %8 to %struct.sockaddr*
  %call2 = call i32 @"\01_getpeername"(i32 %7, %struct.sockaddr* %sa1, i32* %slen)
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load i32, i32* %sock.addr, align 4
  %10 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa3 = bitcast %union.socket_address* %10 to %struct.sockaddr*
  %call4 = call i32 @"\01_getsockname"(i32 %9, %struct.sockaddr* %sa3, i32* %slen)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %buf, i64 %len, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %is_v6 = alloca i32, align 4
  %port = alloca i32, align 4
  %buf_len = alloca i32, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i8*, i8** %buf.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %len.addr, align 8
  %cmp1 = icmp ule i64 %1, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i64, i64* %len.addr, align 8
  %4 = load i8*, i8** %buf.addr, align 8
  %5 = call i64 @llvm.objectsize.i64.p0i8(i8* %4, i1 false)
  %call = call i8* @__memset_chk(i8* %2, i32 0, i64 %3, i64 %5) #5
  store i32 0, i32* %is_v6, align 4
  %6 = load i32, i32* %flags.addr, align 4
  %and = and i32 %6, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then2, label %if.end8

if.then2:                                         ; preds = %if.end
  %7 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin = bitcast %union.socket_address* %7 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %8 = bitcast %struct.in_addr* %sin_addr to i8*
  %9 = load i8*, i8** %buf.addr, align 8
  %10 = load i64, i64* %len.addr, align 8
  %conv = trunc i64 %10 to i32
  %call3 = call i8* @inet_ntop(i32 2, i8* %8, i8* %9, i32 %conv)
  %cmp4 = icmp eq i8* %call3, null
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then2
  br label %cleanup

if.end7:                                          ; preds = %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.end
  %11 = load i32, i32* %flags.addr, align 4
  %and9 = and i32 %11, 2
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then11, label %if.end29

if.then11:                                        ; preds = %if.end8
  %12 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sin12 = bitcast %union.socket_address* %12 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin12, i32 0, i32 2
  %13 = load i16, i16* %sin_port, align 2
  %call13 = call zeroext i16 @_OSSwapInt16(i16 zeroext %13)
  %conv14 = zext i16 %call13 to i32
  %conv15 = trunc i32 %conv14 to i16
  %conv16 = zext i16 %conv15 to i32
  store i32 %conv16, i32* %port, align 4
  %14 = load i32, i32* %flags.addr, align 4
  %and17 = and i32 %14, 1
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then11
  %15 = load i8*, i8** %buf.addr, align 8
  %call20 = call i64 @strlen(i8* %15)
  %conv21 = trunc i64 %call20 to i32
  store i32 %conv21, i32* %buf_len, align 4
  %16 = load i8*, i8** %buf.addr, align 8
  %17 = load i32, i32* %buf_len, align 4
  %idx.ext = sext i32 %17 to i64
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %idx.ext
  %18 = load i64, i64* %len.addr, align 8
  %19 = load i32, i32* %buf_len, align 4
  %add = add nsw i32 %19, 1
  %conv22 = sext i32 %add to i64
  %sub = sub i64 %18, %conv22
  %20 = load i8*, i8** %buf.addr, align 8
  %21 = load i32, i32* %buf_len, align 4
  %idx.ext23 = sext i32 %21 to i64
  %add.ptr24 = getelementptr inbounds i8, i8* %20, i64 %idx.ext23
  %22 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr24, i1 false)
  %23 = load i32, i32* %is_v6, align 4
  %tobool25 = icmp ne i32 %23, 0
  %cond = select i1 %tobool25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0)
  %24 = load i32, i32* %port, align 4
  %call26 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr, i64 %sub, i32 0, i64 %22, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.141, i32 0, i32 0), i8* %cond, i32 %24)
  br label %if.end28

if.else:                                          ; preds = %if.then11
  %25 = load i8*, i8** %buf.addr, align 8
  %26 = load i64, i64* %len.addr, align 8
  %27 = load i8*, i8** %buf.addr, align 8
  %28 = call i64 @llvm.objectsize.i64.p0i8(i8* %27, i1 false)
  %29 = load i32, i32* %port, align 4
  %call27 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %25, i64 %26, i32 0, i64 %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), i32 %29)
  br label %if.end28

if.end28:                                         ; preds = %if.else, %if.then19
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end8
  %30 = load i8*, i8** %buf.addr, align 8
  %call30 = call i64 @strlen(i8* %30)
  %conv31 = trunc i64 %call30 to i32
  store i32 %conv31, i32* %retval, align 4
  br label %return

cleanup:                                          ; preds = %if.then6
  %31 = load i8*, i8** %buf.addr, align 8
  store i8 0, i8* %31, align 1
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cleanup, %if.end29, %if.then
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_socket_if_get_conn_addr(%struct.mg_connection* %nc, i32 %remote, %union.socket_address* %sa) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %remote.addr = alloca i32, align 4
  %sa.addr = alloca %union.socket_address*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %remote, i32* %remote.addr, align 4
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 21
  %1 = load i64, i64* %flags, align 8
  %and = and i64 %1, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %remote.addr, align 4
  %tobool1 = icmp ne i32 %2, 0
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %4 = bitcast %union.socket_address* %3 to i8*
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 6
  %6 = bitcast %union.socket_address* %sa2 to i8*
  %7 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %8 = bitcast %union.socket_address* %7 to i8*
  %9 = call i64 @llvm.objectsize.i64.p0i8(i8* %8, i1 false)
  %call = call i8* @__memcpy_chk(i8* %4, i8* %6, i64 16, i64 %9) #5
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 4
  %11 = load i32, i32* %sock, align 8
  %12 = load i32, i32* %remote.addr, align 4
  %13 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  call void @mg_sock_get_addr(i32 %11, i32 %12, %union.socket_address* %13)
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_socket_if_listen_udp(%struct.mg_connection* %nc, %union.socket_address* %sa) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %sock = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  %0 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %call = call i32 @mg_open_listening_socket(%union.socket_address* %0, i32 2, i32 0)
  store i32 %call, i32* %sock, align 4
  %1 = load i32, i32* %sock, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call i32 @mg_get_errno()
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call2 = call i32 @mg_get_errno()
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call2, %cond.true ], [ 1, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load i32, i32* %sock, align 4
  call void @mg_sock_set(%struct.mg_connection* %2, i32 %3)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %cond.end
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_socket_if_tcp_send(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i64, i64* %len.addr, align 8
  %call = call i64 @"\01_send"(i32 %1, i8* %2, i64 %3, i32 0)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %n, align 4
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call2 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i32, i32* %n, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_socket_if_udp_send(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i64, i64* %len.addr, align 8
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 6
  %sa1 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %call = call i64 @"\01_sendto"(i32 %1, i8* %2, i64 %3, i32 0, %struct.sockaddr* %sa1, i32 16)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call3 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load i32, i32* %n, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_socket_if_tcp_recv(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 4
  %1 = load i32, i32* %sock, align 8
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i64, i64* %len.addr, align 8
  %call = call i64 @"\01_recv"(i32 %1, i8* %2, i64 %3, i32 0)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %n, align 4
  %4 = load i32, i32* %n, align 4
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 21
  %6 = load i64, i64* %flags, align 8
  %or = or i64 %6, 1024
  store i64 %or, i64* %flags, align 8
  br label %if.end6

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %n, align 4
  %cmp2 = icmp slt i32 %7, 0
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %call4 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %if.end, label %if.then5

if.then5:                                         ; preds = %land.lhs.true
  store i32 0, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %8 = load i32, i32* %n, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_socket_if_udp_recv(%struct.mg_connection* %nc, i8* %buf, i64 %len, %union.socket_address* %sa, i64* %sa_len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %sa.addr = alloca %union.socket_address*, align 8
  %sa_len.addr = alloca i64*, align 8
  %sa_len_st = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store %union.socket_address* %sa, %union.socket_address** %sa.addr, align 8
  store i64* %sa_len, i64** %sa_len.addr, align 8
  %0 = load i64*, i64** %sa_len.addr, align 8
  %1 = load i64, i64* %0, align 8
  %conv = trunc i64 %1 to i32
  store i32 %conv, i32* %sa_len_st, align 4
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 4
  %3 = load i32, i32* %sock, align 8
  %4 = load i8*, i8** %buf.addr, align 8
  %5 = load i64, i64* %len.addr, align 8
  %6 = load %union.socket_address*, %union.socket_address** %sa.addr, align 8
  %sa1 = bitcast %union.socket_address* %6 to %struct.sockaddr*
  %call = call i64 @"\01_recvfrom"(i32 %3, i8* %4, i64 %5, i32 0, %struct.sockaddr* %sa1, i32* %sa_len_st)
  %conv2 = trunc i64 %call to i32
  store i32 %conv2, i32* %n, align 4
  %7 = load i32, i32* %sa_len_st, align 4
  %conv3 = zext i32 %7 to i64
  %8 = load i64*, i64** %sa_len.addr, align 8
  store i64 %conv3, i64* %8, align 8
  %9 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %9, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call5 = call i32 @mg_is_error()
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %10 = load i32, i32* %n, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_parse_uri(i8* %uri.coerce0, i64 %uri.coerce1, %struct.mg_str* %scheme, %struct.mg_str* %user_info, %struct.mg_str* %host, i32* %port, %struct.mg_str* %path, %struct.mg_str* %query, %struct.mg_str* %fragment) #0 {
entry:
  %retval = alloca i32, align 4
  %uri = alloca %struct.mg_str, align 8
  %scheme.addr = alloca %struct.mg_str*, align 8
  %user_info.addr = alloca %struct.mg_str*, align 8
  %host.addr = alloca %struct.mg_str*, align 8
  %port.addr = alloca i32*, align 8
  %path.addr = alloca %struct.mg_str*, align 8
  %query.addr = alloca %struct.mg_str*, align 8
  %fragment.addr = alloca %struct.mg_str*, align 8
  %rscheme = alloca %struct.mg_str, align 8
  %ruser_info = alloca %struct.mg_str, align 8
  %rhost = alloca %struct.mg_str, align 8
  %rpath = alloca %struct.mg_str, align 8
  %rquery = alloca %struct.mg_str, align 8
  %rfragment = alloca %struct.mg_str, align 8
  %rport = alloca i32, align 4
  %state = alloca i32, align 4
  %p = alloca i8*, align 8
  %end = alloca i8*, align 8
  %found = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %uri to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %uri.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %uri.coerce1, i64* %2, align 8
  store %struct.mg_str* %scheme, %struct.mg_str** %scheme.addr, align 8
  store %struct.mg_str* %user_info, %struct.mg_str** %user_info.addr, align 8
  store %struct.mg_str* %host, %struct.mg_str** %host.addr, align 8
  store i32* %port, i32** %port.addr, align 8
  store %struct.mg_str* %path, %struct.mg_str** %path.addr, align 8
  store %struct.mg_str* %query, %struct.mg_str** %query.addr, align 8
  store %struct.mg_str* %fragment, %struct.mg_str** %fragment.addr, align 8
  %3 = bitcast %struct.mg_str* %rscheme to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false)
  %4 = bitcast %struct.mg_str* %ruser_info to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 16, i32 8, i1 false)
  %5 = bitcast %struct.mg_str* %rhost to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i32 8, i1 false)
  %6 = bitcast %struct.mg_str* %rpath to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i32 8, i1 false)
  %7 = bitcast %struct.mg_str* %rquery to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 16, i32 8, i1 false)
  %8 = bitcast %struct.mg_str* %rfragment to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 16, i32 8, i1 false)
  store i32 0, i32* %rport, align 4
  store i32 0, i32* %state, align 4
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %9 = load i8*, i8** %p1, align 8
  store i8* %9, i8** %p, align 8
  %10 = load i8*, i8** %p, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %11 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %11
  store i8* %add.ptr, i8** %end, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %12 = load i8*, i8** %p, align 8
  %13 = load i8*, i8** %end, align 8
  %cmp = icmp ult i8* %12, %13
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i32, i32* %state, align 4
  switch i32 %14, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb26
    i32 2, label %sw.bb52
    i32 3, label %sw.bb92
    i32 4, label %sw.bb155
    i32 5, label %sw.bb170
  ]

sw.bb:                                            ; preds = %while.body
  %15 = load i8*, i8** %p, align 8
  %16 = load i8, i8* %15, align 1
  %conv = sext i8 %16 to i32
  %cmp2 = icmp eq i32 %conv, 91
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 3, i32* %state, align 4
  br label %sw.epilog

if.end:                                           ; preds = %sw.bb
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load i8*, i8** %p, align 8
  %18 = load i8*, i8** %end, align 8
  %cmp4 = icmp ult i8* %17, %18
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i8*, i8** %p, align 8
  %20 = load i8, i8* %19, align 1
  %conv6 = sext i8 %20 to i32
  %cmp7 = icmp eq i32 %conv6, 58
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %for.body
  store i32 1, i32* %state, align 4
  br label %for.end

if.else:                                          ; preds = %for.body
  %21 = load i8*, i8** %p, align 8
  %22 = load i8, i8* %21, align 1
  %conv10 = sext i8 %22 to i32
  %cmp11 = icmp eq i32 %conv10, 47
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.else
  store i32 5, i32* %state, align 4
  br label %for.end

if.end14:                                         ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  br label %for.inc

for.inc:                                          ; preds = %if.end15
  %23 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then13, %if.then9, %for.cond
  %24 = load i32, i32* %state, align 4
  %cmp16 = icmp eq i32 %24, 0
  br i1 %cmp16, label %if.then20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %25 = load i32, i32* %state, align 4
  %cmp18 = icmp eq i32 %25, 5
  br i1 %cmp18, label %if.then20, label %if.end25

if.then20:                                        ; preds = %lor.lhs.false, %for.end
  %p21 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %26 = load i8*, i8** %p21, align 8
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 0
  store i8* %26, i8** %p22, align 8
  %27 = load i8*, i8** %p, align 8
  %p23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %28 = load i8*, i8** %p23, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %27 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %28 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %len24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len24, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.then20, %lor.lhs.false
  br label %sw.epilog

sw.bb26:                                          ; preds = %while.body
  %29 = load i8*, i8** %end, align 8
  %30 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast27 = ptrtoint i8* %29 to i64
  %sub.ptr.rhs.cast28 = ptrtoint i8* %30 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28
  %cmp30 = icmp sge i64 %sub.ptr.sub29, 3
  br i1 %cmp30, label %land.lhs.true, label %if.else43

land.lhs.true:                                    ; preds = %sw.bb26
  %31 = load i8*, i8** %p, align 8
  %call = call i32 @strncmp(i8* %31, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0), i64 3)
  %cmp32 = icmp eq i32 %call, 0
  br i1 %cmp32, label %if.then34, label %if.else43

if.then34:                                        ; preds = %land.lhs.true
  %p35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %32 = load i8*, i8** %p35, align 8
  %p36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rscheme, i32 0, i32 0
  store i8* %32, i8** %p36, align 8
  %33 = load i8*, i8** %p, align 8
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %34 = load i8*, i8** %p37, align 8
  %sub.ptr.lhs.cast38 = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast39 = ptrtoint i8* %34 to i64
  %sub.ptr.sub40 = sub i64 %sub.ptr.lhs.cast38, %sub.ptr.rhs.cast39
  %len41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rscheme, i32 0, i32 1
  store i64 %sub.ptr.sub40, i64* %len41, align 8
  store i32 2, i32* %state, align 4
  %35 = load i8*, i8** %p, align 8
  %add.ptr42 = getelementptr inbounds i8, i8* %35, i64 3
  store i8* %add.ptr42, i8** %p, align 8
  br label %if.end51

if.else43:                                        ; preds = %land.lhs.true, %sw.bb26
  %p44 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %36 = load i8*, i8** %p44, align 8
  %p45 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 0
  store i8* %36, i8** %p45, align 8
  %37 = load i8*, i8** %p, align 8
  %p46 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %38 = load i8*, i8** %p46, align 8
  %sub.ptr.lhs.cast47 = ptrtoint i8* %37 to i64
  %sub.ptr.rhs.cast48 = ptrtoint i8* %38 to i64
  %sub.ptr.sub49 = sub i64 %sub.ptr.lhs.cast47, %sub.ptr.rhs.cast48
  %len50 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 1
  store i64 %sub.ptr.sub49, i64* %len50, align 8
  store i32 4, i32* %state, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.else43, %if.then34
  br label %sw.epilog

sw.bb52:                                          ; preds = %while.body
  %39 = load i8*, i8** %p, align 8
  %p53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ruser_info, i32 0, i32 0
  store i8* %39, i8** %p53, align 8
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc71, %sw.bb52
  %40 = load i8*, i8** %p, align 8
  %41 = load i8*, i8** %end, align 8
  %cmp55 = icmp ult i8* %40, %41
  br i1 %cmp55, label %for.body57, label %for.end73

for.body57:                                       ; preds = %for.cond54
  %42 = load i8*, i8** %p, align 8
  %43 = load i8, i8* %42, align 1
  %conv58 = sext i8 %43 to i32
  %cmp59 = icmp eq i32 %conv58, 64
  br i1 %cmp59, label %if.then69, label %lor.lhs.false61

lor.lhs.false61:                                  ; preds = %for.body57
  %44 = load i8*, i8** %p, align 8
  %45 = load i8, i8* %44, align 1
  %conv62 = sext i8 %45 to i32
  %cmp63 = icmp eq i32 %conv62, 91
  br i1 %cmp63, label %if.then69, label %lor.lhs.false65

lor.lhs.false65:                                  ; preds = %lor.lhs.false61
  %46 = load i8*, i8** %p, align 8
  %47 = load i8, i8* %46, align 1
  %conv66 = sext i8 %47 to i32
  %cmp67 = icmp eq i32 %conv66, 47
  br i1 %cmp67, label %if.then69, label %if.end70

if.then69:                                        ; preds = %lor.lhs.false65, %lor.lhs.false61, %for.body57
  br label %for.end73

if.end70:                                         ; preds = %lor.lhs.false65
  br label %for.inc71

for.inc71:                                        ; preds = %if.end70
  %48 = load i8*, i8** %p, align 8
  %incdec.ptr72 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %incdec.ptr72, i8** %p, align 8
  br label %for.cond54

for.end73:                                        ; preds = %if.then69, %for.cond54
  %49 = load i8*, i8** %p, align 8
  %50 = load i8*, i8** %end, align 8
  %cmp74 = icmp eq i8* %49, %50
  br i1 %cmp74, label %if.then84, label %lor.lhs.false76

lor.lhs.false76:                                  ; preds = %for.end73
  %51 = load i8*, i8** %p, align 8
  %52 = load i8, i8* %51, align 1
  %conv77 = sext i8 %52 to i32
  %cmp78 = icmp eq i32 %conv77, 47
  br i1 %cmp78, label %if.then84, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %lor.lhs.false76
  %53 = load i8*, i8** %p, align 8
  %54 = load i8, i8* %53, align 1
  %conv81 = sext i8 %54 to i32
  %cmp82 = icmp eq i32 %conv81, 91
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %lor.lhs.false80, %lor.lhs.false76, %for.end73
  %p85 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ruser_info, i32 0, i32 0
  %55 = load i8*, i8** %p85, align 8
  store i8* %55, i8** %p, align 8
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %lor.lhs.false80
  %56 = load i8*, i8** %p, align 8
  %p87 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ruser_info, i32 0, i32 0
  %57 = load i8*, i8** %p87, align 8
  %sub.ptr.lhs.cast88 = ptrtoint i8* %56 to i64
  %sub.ptr.rhs.cast89 = ptrtoint i8* %57 to i64
  %sub.ptr.sub90 = sub i64 %sub.ptr.lhs.cast88, %sub.ptr.rhs.cast89
  %len91 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ruser_info, i32 0, i32 1
  store i64 %sub.ptr.sub90, i64* %len91, align 8
  store i32 3, i32* %state, align 4
  br label %sw.epilog

sw.bb92:                                          ; preds = %while.body
  %58 = load i8*, i8** %p, align 8
  %59 = load i8, i8* %58, align 1
  %conv93 = sext i8 %59 to i32
  %cmp94 = icmp eq i32 %conv93, 64
  br i1 %cmp94, label %if.then96, label %if.end98

if.then96:                                        ; preds = %sw.bb92
  %60 = load i8*, i8** %p, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %60, i32 1
  store i8* %incdec.ptr97, i8** %p, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.then96, %sw.bb92
  %61 = load i8*, i8** %p, align 8
  %p99 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 0
  store i8* %61, i8** %p99, align 8
  %62 = load i8*, i8** %p, align 8
  %63 = load i8, i8* %62, align 1
  %conv100 = sext i8 %63 to i32
  %cmp101 = icmp eq i32 %conv100, 91
  br i1 %cmp101, label %if.then103, label %if.else117

if.then103:                                       ; preds = %if.end98
  store i32 0, i32* %found, align 4
  br label %for.cond104

for.cond104:                                      ; preds = %for.inc111, %if.then103
  %64 = load i32, i32* %found, align 4
  %tobool = icmp ne i32 %64, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %for.cond104
  %65 = load i8*, i8** %p, align 8
  %66 = load i8*, i8** %end, align 8
  %cmp105 = icmp ult i8* %65, %66
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond104
  %67 = phi i1 [ false, %for.cond104 ], [ %cmp105, %land.rhs ]
  br i1 %67, label %for.body107, label %for.end113

for.body107:                                      ; preds = %land.end
  %68 = load i8*, i8** %p, align 8
  %69 = load i8, i8* %68, align 1
  %conv108 = sext i8 %69 to i32
  %cmp109 = icmp eq i32 %conv108, 93
  %conv110 = zext i1 %cmp109 to i32
  store i32 %conv110, i32* %found, align 4
  br label %for.inc111

for.inc111:                                       ; preds = %for.body107
  %70 = load i8*, i8** %p, align 8
  %incdec.ptr112 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %incdec.ptr112, i8** %p, align 8
  br label %for.cond104

for.end113:                                       ; preds = %land.end
  %71 = load i32, i32* %found, align 4
  %tobool114 = icmp ne i32 %71, 0
  br i1 %tobool114, label %if.end116, label %if.then115

if.then115:                                       ; preds = %for.end113
  store i32 -1, i32* %retval, align 4
  br label %return

if.end116:                                        ; preds = %for.end113
  br label %if.end134

if.else117:                                       ; preds = %if.end98
  br label %for.cond118

for.cond118:                                      ; preds = %for.inc131, %if.else117
  %72 = load i8*, i8** %p, align 8
  %73 = load i8*, i8** %end, align 8
  %cmp119 = icmp ult i8* %72, %73
  br i1 %cmp119, label %for.body121, label %for.end133

for.body121:                                      ; preds = %for.cond118
  %74 = load i8*, i8** %p, align 8
  %75 = load i8, i8* %74, align 1
  %conv122 = sext i8 %75 to i32
  %cmp123 = icmp eq i32 %conv122, 58
  br i1 %cmp123, label %if.then129, label %lor.lhs.false125

lor.lhs.false125:                                 ; preds = %for.body121
  %76 = load i8*, i8** %p, align 8
  %77 = load i8, i8* %76, align 1
  %conv126 = sext i8 %77 to i32
  %cmp127 = icmp eq i32 %conv126, 47
  br i1 %cmp127, label %if.then129, label %if.end130

if.then129:                                       ; preds = %lor.lhs.false125, %for.body121
  br label %for.end133

if.end130:                                        ; preds = %lor.lhs.false125
  br label %for.inc131

for.inc131:                                       ; preds = %if.end130
  %78 = load i8*, i8** %p, align 8
  %incdec.ptr132 = getelementptr inbounds i8, i8* %78, i32 1
  store i8* %incdec.ptr132, i8** %p, align 8
  br label %for.cond118

for.end133:                                       ; preds = %if.then129, %for.cond118
  br label %if.end134

if.end134:                                        ; preds = %for.end133, %if.end116
  %79 = load i8*, i8** %p, align 8
  %p135 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 0
  %80 = load i8*, i8** %p135, align 8
  %sub.ptr.lhs.cast136 = ptrtoint i8* %79 to i64
  %sub.ptr.rhs.cast137 = ptrtoint i8* %80 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  %len139 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rhost, i32 0, i32 1
  store i64 %sub.ptr.sub138, i64* %len139, align 8
  %81 = load i8*, i8** %p, align 8
  %82 = load i8*, i8** %end, align 8
  %cmp140 = icmp ult i8* %81, %82
  br i1 %cmp140, label %if.then142, label %if.end154

if.then142:                                       ; preds = %if.end134
  %83 = load i8*, i8** %p, align 8
  %84 = load i8, i8* %83, align 1
  %conv143 = sext i8 %84 to i32
  %cmp144 = icmp eq i32 %conv143, 58
  br i1 %cmp144, label %if.then146, label %if.else147

if.then146:                                       ; preds = %if.then142
  store i32 4, i32* %state, align 4
  br label %sw.epilog

if.else147:                                       ; preds = %if.then142
  %85 = load i8*, i8** %p, align 8
  %86 = load i8, i8* %85, align 1
  %conv148 = sext i8 %86 to i32
  %cmp149 = icmp eq i32 %conv148, 47
  br i1 %cmp149, label %if.then151, label %if.end152

if.then151:                                       ; preds = %if.else147
  store i32 5, i32* %state, align 4
  br label %sw.epilog

if.end152:                                        ; preds = %if.else147
  br label %if.end153

if.end153:                                        ; preds = %if.end152
  br label %if.end154

if.end154:                                        ; preds = %if.end153, %if.end134
  br label %sw.epilog

sw.bb155:                                         ; preds = %while.body
  %87 = load i8*, i8** %p, align 8
  %incdec.ptr156 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %incdec.ptr156, i8** %p, align 8
  br label %for.cond157

for.cond157:                                      ; preds = %for.inc167, %sw.bb155
  %88 = load i8*, i8** %p, align 8
  %89 = load i8*, i8** %end, align 8
  %cmp158 = icmp ult i8* %88, %89
  br i1 %cmp158, label %for.body160, label %for.end169

for.body160:                                      ; preds = %for.cond157
  %90 = load i8*, i8** %p, align 8
  %91 = load i8, i8* %90, align 1
  %conv161 = sext i8 %91 to i32
  %cmp162 = icmp eq i32 %conv161, 47
  br i1 %cmp162, label %if.then164, label %if.end165

if.then164:                                       ; preds = %for.body160
  store i32 5, i32* %state, align 4
  br label %for.end169

if.end165:                                        ; preds = %for.body160
  %92 = load i32, i32* %rport, align 4
  %mul = mul i32 %92, 10
  store i32 %mul, i32* %rport, align 4
  %93 = load i8*, i8** %p, align 8
  %94 = load i8, i8* %93, align 1
  %conv166 = sext i8 %94 to i32
  %sub = sub nsw i32 %conv166, 48
  %95 = load i32, i32* %rport, align 4
  %add = add i32 %95, %sub
  store i32 %add, i32* %rport, align 4
  br label %for.inc167

for.inc167:                                       ; preds = %if.end165
  %96 = load i8*, i8** %p, align 8
  %incdec.ptr168 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr168, i8** %p, align 8
  br label %for.cond157

for.end169:                                       ; preds = %if.then164, %for.cond157
  br label %sw.epilog

sw.bb170:                                         ; preds = %while.body
  %97 = load i8*, i8** %end, align 8
  call void @parse_uri_component(i8** %p, i8* %97, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), %struct.mg_str* %rpath)
  %98 = load i8*, i8** %p, align 8
  %99 = load i8*, i8** %end, align 8
  %cmp171 = icmp ult i8* %98, %99
  br i1 %cmp171, label %land.lhs.true173, label %if.end179

land.lhs.true173:                                 ; preds = %sw.bb170
  %100 = load i8*, i8** %p, align 8
  %add.ptr174 = getelementptr inbounds i8, i8* %100, i64 -1
  %101 = load i8, i8* %add.ptr174, align 1
  %conv175 = sext i8 %101 to i32
  %cmp176 = icmp eq i32 %conv175, 63
  br i1 %cmp176, label %if.then178, label %if.end179

if.then178:                                       ; preds = %land.lhs.true173
  %102 = load i8*, i8** %end, align 8
  call void @parse_uri_component(i8** %p, i8* %102, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i32 0, i32 0), %struct.mg_str* %rquery)
  br label %if.end179

if.end179:                                        ; preds = %if.then178, %land.lhs.true173, %sw.bb170
  %103 = load i8*, i8** %end, align 8
  call void @parse_uri_component(i8** %p, i8* %103, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %struct.mg_str* %rfragment)
  br label %sw.epilog

sw.epilog:                                        ; preds = %while.body, %if.end179, %for.end169, %if.end154, %if.then151, %if.then146, %if.end86, %if.end51, %if.end25, %if.then
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %104 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8
  %cmp180 = icmp ne %struct.mg_str* %104, null
  br i1 %cmp180, label %if.then182, label %if.end183

if.then182:                                       ; preds = %while.end
  %105 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8
  %106 = bitcast %struct.mg_str* %105 to i8*
  %107 = bitcast %struct.mg_str* %rscheme to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %106, i8* %107, i64 16, i32 8, i1 false)
  br label %if.end183

if.end183:                                        ; preds = %if.then182, %while.end
  %108 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8
  %cmp184 = icmp ne %struct.mg_str* %108, null
  br i1 %cmp184, label %if.then186, label %if.end187

if.then186:                                       ; preds = %if.end183
  %109 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8
  %110 = bitcast %struct.mg_str* %109 to i8*
  %111 = bitcast %struct.mg_str* %ruser_info to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %110, i8* %111, i64 16, i32 8, i1 false)
  br label %if.end187

if.end187:                                        ; preds = %if.then186, %if.end183
  %112 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %cmp188 = icmp ne %struct.mg_str* %112, null
  br i1 %cmp188, label %if.then190, label %if.end191

if.then190:                                       ; preds = %if.end187
  %113 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %114 = bitcast %struct.mg_str* %113 to i8*
  %115 = bitcast %struct.mg_str* %rhost to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %114, i8* %115, i64 16, i32 8, i1 false)
  br label %if.end191

if.end191:                                        ; preds = %if.then190, %if.end187
  %116 = load i32*, i32** %port.addr, align 8
  %cmp192 = icmp ne i32* %116, null
  br i1 %cmp192, label %if.then194, label %if.end195

if.then194:                                       ; preds = %if.end191
  %117 = load i32, i32* %rport, align 4
  %118 = load i32*, i32** %port.addr, align 8
  store i32 %117, i32* %118, align 4
  br label %if.end195

if.end195:                                        ; preds = %if.then194, %if.end191
  %119 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %cmp196 = icmp ne %struct.mg_str* %119, null
  br i1 %cmp196, label %if.then198, label %if.end199

if.then198:                                       ; preds = %if.end195
  %120 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %121 = bitcast %struct.mg_str* %120 to i8*
  %122 = bitcast %struct.mg_str* %rpath to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %122, i64 16, i32 8, i1 false)
  br label %if.end199

if.end199:                                        ; preds = %if.then198, %if.end195
  %123 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8
  %cmp200 = icmp ne %struct.mg_str* %123, null
  br i1 %cmp200, label %if.then202, label %if.end203

if.then202:                                       ; preds = %if.end199
  %124 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8
  %125 = bitcast %struct.mg_str* %124 to i8*
  %126 = bitcast %struct.mg_str* %rquery to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %125, i8* %126, i64 16, i32 8, i1 false)
  br label %if.end203

if.end203:                                        ; preds = %if.then202, %if.end199
  %127 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8
  %cmp204 = icmp ne %struct.mg_str* %127, null
  br i1 %cmp204, label %if.then206, label %if.end207

if.then206:                                       ; preds = %if.end203
  %128 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8
  %129 = bitcast %struct.mg_str* %128 to i8*
  %130 = bitcast %struct.mg_str* %rfragment to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %129, i8* %130, i64 16, i32 8, i1 false)
  br label %if.end207

if.end207:                                        ; preds = %if.then206, %if.end203
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end207, %if.then115
  %131 = load i32, i32* %retval, align 4
  ret i32 %131
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @parse_uri_component(i8** %p, i8* %end, i8* %seps, %struct.mg_str* %res) #0 {
entry:
  %p.addr = alloca i8**, align 8
  %end.addr = alloca i8*, align 8
  %seps.addr = alloca i8*, align 8
  %res.addr = alloca %struct.mg_str*, align 8
  %q = alloca i8*, align 8
  store i8** %p, i8*** %p.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8* %seps, i8** %seps.addr, align 8
  store %struct.mg_str* %res, %struct.mg_str** %res.addr, align 8
  %0 = load i8**, i8*** %p.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load %struct.mg_str*, %struct.mg_str** %res.addr, align 8
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %2, i32 0, i32 0
  store i8* %1, i8** %p1, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc15, %entry
  %3 = load i8**, i8*** %p.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %5 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %4, %5
  br i1 %cmp, label %for.body, label %for.end17

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %seps.addr, align 8
  store i8* %6, i8** %q, align 8
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %7 = load i8*, i8** %q, align 8
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %cmp3 = icmp ne i32 %conv, 0
  br i1 %cmp3, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond2
  %9 = load i8**, i8*** %p.addr, align 8
  %10 = load i8*, i8** %9, align 8
  %11 = load i8, i8* %10, align 1
  %conv6 = sext i8 %11 to i32
  %12 = load i8*, i8** %q, align 8
  %13 = load i8, i8* %12, align 1
  %conv7 = sext i8 %13 to i32
  %cmp8 = icmp eq i32 %conv6, %conv7
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body5
  br label %for.end

if.end:                                           ; preds = %for.body5
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i8*, i8** %q, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %q, align 8
  br label %for.cond2

for.end:                                          ; preds = %if.then, %for.cond2
  %15 = load i8*, i8** %q, align 8
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  %cmp11 = icmp ne i32 %conv10, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.end
  br label %for.end17

if.end14:                                         ; preds = %for.end
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %17 = load i8**, i8*** %p.addr, align 8
  %18 = load i8*, i8** %17, align 8
  %incdec.ptr16 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr16, i8** %17, align 8
  br label %for.cond

for.end17:                                        ; preds = %if.then13, %for.cond
  %19 = load i8**, i8*** %p.addr, align 8
  %20 = load i8*, i8** %19, align 8
  %21 = load %struct.mg_str*, %struct.mg_str** %res.addr, align 8
  %p18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %21, i32 0, i32 0
  %22 = load i8*, i8** %p18, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %23 = load %struct.mg_str*, %struct.mg_str** %res.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %23, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len, align 8
  %24 = load i8**, i8*** %p.addr, align 8
  %25 = load i8*, i8** %24, align 8
  %26 = load i8*, i8** %end.addr, align 8
  %cmp19 = icmp ult i8* %25, %26
  br i1 %cmp19, label %if.then21, label %if.end23

if.then21:                                        ; preds = %for.end17
  %27 = load i8**, i8*** %p.addr, align 8
  %28 = load i8*, i8** %27, align 8
  %incdec.ptr22 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %incdec.ptr22, i8** %27, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %for.end17
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_normalize_uri_path(%struct.mg_str* %in, %struct.mg_str* %out) #0 {
entry:
  %retval = alloca i32, align 4
  %in.addr = alloca %struct.mg_str*, align 8
  %out.addr = alloca %struct.mg_str*, align 8
  %s = alloca i8*, align 8
  %se = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %d = alloca i8*, align 8
  %next = alloca i8*, align 8
  %component = alloca %struct.mg_str, align 8
  store %struct.mg_str* %in, %struct.mg_str** %in.addr, align 8
  store %struct.mg_str* %out, %struct.mg_str** %out.addr, align 8
  %0 = load %struct.mg_str*, %struct.mg_str** %in.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %0, i32 0, i32 0
  %1 = load i8*, i8** %p, align 8
  store i8* %1, i8** %s, align 8
  %2 = load i8*, i8** %s, align 8
  %3 = load %struct.mg_str*, %struct.mg_str** %in.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 1
  %4 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %4
  store i8* %add.ptr, i8** %se, align 8
  %5 = load %struct.mg_str*, %struct.mg_str** %out.addr, align 8
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %5, i32 0, i32 0
  %6 = load i8*, i8** %p1, align 8
  store i8* %6, i8** %cp, align 8
  %7 = load %struct.mg_str*, %struct.mg_str** %in.addr, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %7, i32 0, i32 1
  %8 = load i64, i64* %len2, align 8
  %cmp = icmp eq i64 %8, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %9 = load i8*, i8** %s, align 8
  %10 = load i8, i8* %9, align 1
  %conv = sext i8 %10 to i32
  %cmp3 = icmp ne i32 %conv, 47
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %11 = load %struct.mg_str*, %struct.mg_str** %out.addr, align 8
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %11, i32 0, i32 1
  store i64 0, i64* %len5, align 8
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %12 = load i8*, i8** %cp, align 8
  store i8* %12, i8** %d, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end40, %if.end
  %13 = load i8*, i8** %s, align 8
  %14 = load i8*, i8** %se, align 8
  %cmp6 = icmp ult i8* %13, %14
  br i1 %cmp6, label %while.body, label %while.end41

while.body:                                       ; preds = %while.cond
  %15 = load i8*, i8** %s, align 8
  store i8* %15, i8** %next, align 8
  %16 = load i8*, i8** %se, align 8
  call void @parse_uri_component(i8** %next, i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), %struct.mg_str* %component)
  %call = call i32 @mg_vcmp(%struct.mg_str* %component, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  %cmp8 = icmp eq i32 %call, 0
  br i1 %cmp8, label %if.then10, label %if.else

if.then10:                                        ; preds = %while.body
  br label %if.end40

if.else:                                          ; preds = %while.body
  %call11 = call i32 @mg_vcmp(%struct.mg_str* %component, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0))
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %if.then14, label %if.else33

if.then14:                                        ; preds = %if.else
  %17 = load i8*, i8** %d, align 8
  %18 = load i8*, i8** %cp, align 8
  %add.ptr15 = getelementptr inbounds i8, i8* %18, i64 1
  %cmp16 = icmp ugt i8* %17, %add.ptr15
  br i1 %cmp16, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.then14
  %19 = load i8*, i8** %d, align 8
  %add.ptr18 = getelementptr inbounds i8, i8* %19, i64 -1
  %20 = load i8, i8* %add.ptr18, align 1
  %conv19 = sext i8 %20 to i32
  %cmp20 = icmp eq i32 %conv19, 47
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %land.lhs.true
  %21 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 -1
  store i8* %incdec.ptr, i8** %d, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %land.lhs.true, %if.then14
  br label %while.cond24

while.cond24:                                     ; preds = %while.body31, %if.end23
  %22 = load i8*, i8** %d, align 8
  %23 = load i8*, i8** %cp, align 8
  %cmp25 = icmp ugt i8* %22, %23
  br i1 %cmp25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond24
  %24 = load i8*, i8** %d, align 8
  %add.ptr27 = getelementptr inbounds i8, i8* %24, i64 -1
  %25 = load i8, i8* %add.ptr27, align 1
  %conv28 = sext i8 %25 to i32
  %cmp29 = icmp ne i32 %conv28, 47
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond24
  %26 = phi i1 [ false, %while.cond24 ], [ %cmp29, %land.rhs ]
  br i1 %26, label %while.body31, label %while.end

while.body31:                                     ; preds = %land.end
  %27 = load i8*, i8** %d, align 8
  %incdec.ptr32 = getelementptr inbounds i8, i8* %27, i32 -1
  store i8* %incdec.ptr32, i8** %d, align 8
  br label %while.cond24

while.end:                                        ; preds = %land.end
  br label %if.end39

if.else33:                                        ; preds = %if.else
  %28 = load i8*, i8** %d, align 8
  %29 = load i8*, i8** %s, align 8
  %30 = load i8*, i8** %next, align 8
  %31 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %31 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %32 = load i8*, i8** %d, align 8
  %33 = call i64 @llvm.objectsize.i64.p0i8(i8* %32, i1 false)
  %call34 = call i8* @__memmove_chk(i8* %28, i8* %29, i64 %sub.ptr.sub, i64 %33) #5
  %34 = load i8*, i8** %next, align 8
  %35 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast35 = ptrtoint i8* %34 to i64
  %sub.ptr.rhs.cast36 = ptrtoint i8* %35 to i64
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36
  %36 = load i8*, i8** %d, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %36, i64 %sub.ptr.sub37
  store i8* %add.ptr38, i8** %d, align 8
  br label %if.end39

if.end39:                                         ; preds = %if.else33, %while.end
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then10
  %37 = load i8*, i8** %next, align 8
  store i8* %37, i8** %s, align 8
  br label %while.cond

while.end41:                                      ; preds = %while.cond
  %38 = load i8*, i8** %d, align 8
  %39 = load i8*, i8** %cp, align 8
  %cmp42 = icmp eq i8* %38, %39
  br i1 %cmp42, label %if.then44, label %if.end46

if.then44:                                        ; preds = %while.end41
  %40 = load i8*, i8** %d, align 8
  %incdec.ptr45 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %incdec.ptr45, i8** %d, align 8
  store i8 47, i8* %40, align 1
  br label %if.end46

if.end46:                                         ; preds = %if.then44, %while.end41
  %41 = load i8*, i8** %cp, align 8
  %42 = load %struct.mg_str*, %struct.mg_str** %out.addr, align 8
  %p47 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %42, i32 0, i32 0
  store i8* %41, i8** %p47, align 8
  %43 = load i8*, i8** %d, align 8
  %44 = load i8*, i8** %cp, align 8
  %sub.ptr.lhs.cast48 = ptrtoint i8* %43 to i64
  %sub.ptr.rhs.cast49 = ptrtoint i8* %44 to i64
  %sub.ptr.sub50 = sub i64 %sub.ptr.lhs.cast48, %sub.ptr.rhs.cast49
  %45 = load %struct.mg_str*, %struct.mg_str** %out.addr, align 8
  %len51 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %45, i32 0, i32 1
  store i64 %sub.ptr.sub50, i64* %len51, align 8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end46, %if.then
  %46 = load i32, i32* %retval, align 4
  ret i32 %46
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_assemble_uri(%struct.mg_str* %scheme, %struct.mg_str* %user_info, %struct.mg_str* %host, i32 %port, %struct.mg_str* %path, %struct.mg_str* %query, %struct.mg_str* %fragment, i32 %normalize_path, %struct.mg_str* %uri) #0 {
entry:
  %scheme.addr = alloca %struct.mg_str*, align 8
  %user_info.addr = alloca %struct.mg_str*, align 8
  %host.addr = alloca %struct.mg_str*, align 8
  %port.addr = alloca i32, align 4
  %path.addr = alloca %struct.mg_str*, align 8
  %query.addr = alloca %struct.mg_str*, align 8
  %fragment.addr = alloca %struct.mg_str*, align 8
  %normalize_path.addr = alloca i32, align 4
  %uri.addr = alloca %struct.mg_str*, align 8
  %result = alloca i32, align 4
  %out = alloca %struct.mbuf, align 8
  %port_str = alloca [20 x i8], align 16
  %port_str_len = alloca i32, align 4
  %npath = alloca %struct.mg_str, align 8
  store %struct.mg_str* %scheme, %struct.mg_str** %scheme.addr, align 8
  store %struct.mg_str* %user_info, %struct.mg_str** %user_info.addr, align 8
  store %struct.mg_str* %host, %struct.mg_str** %host.addr, align 8
  store i32 %port, i32* %port.addr, align 4
  store %struct.mg_str* %path, %struct.mg_str** %path.addr, align 8
  store %struct.mg_str* %query, %struct.mg_str** %query.addr, align 8
  store %struct.mg_str* %fragment, %struct.mg_str** %fragment.addr, align 8
  store i32 %normalize_path, i32* %normalize_path.addr, align 4
  store %struct.mg_str* %uri, %struct.mg_str** %uri.addr, align 8
  store i32 -1, i32* %result, align 4
  call void @mbuf_init(%struct.mbuf* %out, i64 0)
  %0 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8
  %cmp = icmp ne %struct.mg_str* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 1
  %2 = load i64, i64* %len, align 8
  %cmp1 = icmp ugt i64 %2, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 0
  %4 = load i8*, i8** %p, align 8
  %5 = load %struct.mg_str*, %struct.mg_str** %scheme.addr, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %5, i32 0, i32 1
  %6 = load i64, i64* %len2, align 8
  %call = call i64 @mbuf_append(%struct.mbuf* %out, i8* %4, i64 %6)
  %call3 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0), i64 3)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8
  %cmp4 = icmp ne %struct.mg_str* %7, null
  br i1 %cmp4, label %land.lhs.true5, label %if.end13

land.lhs.true5:                                   ; preds = %if.end
  %8 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %8, i32 0, i32 1
  %9 = load i64, i64* %len6, align 8
  %cmp7 = icmp ugt i64 %9, 0
  br i1 %cmp7, label %if.then8, label %if.end13

if.then8:                                         ; preds = %land.lhs.true5
  %10 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 0
  %11 = load i8*, i8** %p9, align 8
  %12 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 1
  %13 = load i64, i64* %len10, align 8
  %call11 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %11, i64 %13)
  %call12 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i32 0, i32 0), i64 1)
  br label %if.end13

if.end13:                                         ; preds = %if.then8, %land.lhs.true5, %if.end
  %14 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %cmp14 = icmp ne %struct.mg_str* %14, null
  br i1 %cmp14, label %land.lhs.true15, label %if.end22

land.lhs.true15:                                  ; preds = %if.end13
  %15 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %len16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %15, i32 0, i32 1
  %16 = load i64, i64* %len16, align 8
  %cmp17 = icmp ugt i64 %16, 0
  br i1 %cmp17, label %if.then18, label %if.end22

if.then18:                                        ; preds = %land.lhs.true15
  %17 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %17, i32 0, i32 0
  %18 = load i8*, i8** %p19, align 8
  %19 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %19, i32 0, i32 1
  %20 = load i64, i64* %len20, align 8
  %call21 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %18, i64 %20)
  br label %if.end22

if.end22:                                         ; preds = %if.then18, %land.lhs.true15, %if.end13
  %21 = load i32, i32* %port.addr, align 4
  %cmp23 = icmp ne i32 %21, 0
  br i1 %cmp23, label %if.then24, label %if.end28

if.then24:                                        ; preds = %if.end22
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %port_str, i32 0, i32 0
  %22 = load i32, i32* %port.addr, align 4
  %call25 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %arraydecay, i32 0, i64 20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i32 0, i32 0), i32 %22)
  store i32 %call25, i32* %port_str_len, align 4
  %arraydecay26 = getelementptr inbounds [20 x i8], [20 x i8]* %port_str, i32 0, i32 0
  %23 = load i32, i32* %port_str_len, align 4
  %conv = sext i32 %23 to i64
  %call27 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %arraydecay26, i64 %conv)
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %if.end22
  %24 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %cmp29 = icmp ne %struct.mg_str* %24, null
  br i1 %cmp29, label %land.lhs.true31, label %if.else57

land.lhs.true31:                                  ; preds = %if.end28
  %25 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %len32 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %25, i32 0, i32 1
  %26 = load i64, i64* %len32, align 8
  %cmp33 = icmp ugt i64 %26, 0
  br i1 %cmp33, label %if.then35, label %if.else57

if.then35:                                        ; preds = %land.lhs.true31
  %27 = load i32, i32* %normalize_path.addr, align 4
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.then36, label %if.else

if.then36:                                        ; preds = %if.then35
  %28 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %29 = bitcast %struct.mg_str* %28 to { i8*, i64 }*
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %call37 = call { i8*, i64 } @mg_strdup(i8* %31, i64 %33)
  %34 = bitcast %struct.mg_str* %npath to { i8*, i64 }*
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 0
  %36 = extractvalue { i8*, i64 } %call37, 0
  store i8* %36, i8** %35, align 8
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 1
  %38 = extractvalue { i8*, i64 } %call37, 1
  store i64 %38, i64* %37, align 8
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 1
  %39 = load i64, i64* %len38, align 8
  %40 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %len39 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %40, i32 0, i32 1
  %41 = load i64, i64* %len39, align 8
  %cmp40 = icmp ne i64 %39, %41
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.then36
  br label %out87

if.end43:                                         ; preds = %if.then36
  %42 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %call44 = call i32 @mg_normalize_uri_path(%struct.mg_str* %42, %struct.mg_str* %npath)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.end48, label %if.then46

if.then46:                                        ; preds = %if.end43
  %p47 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 0
  %43 = load i8*, i8** %p47, align 8
  call void @free(i8* %43)
  br label %out87

if.end48:                                         ; preds = %if.end43
  %p49 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 0
  %44 = load i8*, i8** %p49, align 8
  %len50 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 1
  %45 = load i64, i64* %len50, align 8
  %call51 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %44, i64 %45)
  %p52 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %npath, i32 0, i32 0
  %46 = load i8*, i8** %p52, align 8
  call void @free(i8* %46)
  br label %if.end56

if.else:                                          ; preds = %if.then35
  %47 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %p53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %47, i32 0, i32 0
  %48 = load i8*, i8** %p53, align 8
  %49 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %len54 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %49, i32 0, i32 1
  %50 = load i64, i64* %len54, align 8
  %call55 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %48, i64 %50)
  br label %if.end56

if.end56:                                         ; preds = %if.else, %if.end48
  br label %if.end62

if.else57:                                        ; preds = %land.lhs.true31, %if.end28
  %51 = load i32, i32* %normalize_path.addr, align 4
  %tobool58 = icmp ne i32 %51, 0
  br i1 %tobool58, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.else57
  %call60 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i64 1)
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %if.else57
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end56
  %52 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8
  %cmp63 = icmp ne %struct.mg_str* %52, null
  br i1 %cmp63, label %land.lhs.true65, label %if.end74

land.lhs.true65:                                  ; preds = %if.end62
  %53 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8
  %len66 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %53, i32 0, i32 1
  %54 = load i64, i64* %len66, align 8
  %cmp67 = icmp ugt i64 %54, 0
  br i1 %cmp67, label %if.then69, label %if.end74

if.then69:                                        ; preds = %land.lhs.true65
  %call70 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i32 0, i32 0), i64 1)
  %55 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8
  %p71 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %55, i32 0, i32 0
  %56 = load i8*, i8** %p71, align 8
  %57 = load %struct.mg_str*, %struct.mg_str** %query.addr, align 8
  %len72 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %57, i32 0, i32 1
  %58 = load i64, i64* %len72, align 8
  %call73 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %56, i64 %58)
  br label %if.end74

if.end74:                                         ; preds = %if.then69, %land.lhs.true65, %if.end62
  %59 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8
  %cmp75 = icmp ne %struct.mg_str* %59, null
  br i1 %cmp75, label %land.lhs.true77, label %if.end86

land.lhs.true77:                                  ; preds = %if.end74
  %60 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8
  %len78 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %60, i32 0, i32 1
  %61 = load i64, i64* %len78, align 8
  %cmp79 = icmp ugt i64 %61, 0
  br i1 %cmp79, label %if.then81, label %if.end86

if.then81:                                        ; preds = %land.lhs.true77
  %call82 = call i64 @mbuf_append(%struct.mbuf* %out, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i32 0, i32 0), i64 1)
  %62 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8
  %p83 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %62, i32 0, i32 0
  %63 = load i8*, i8** %p83, align 8
  %64 = load %struct.mg_str*, %struct.mg_str** %fragment.addr, align 8
  %len84 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %64, i32 0, i32 1
  %65 = load i64, i64* %len84, align 8
  %call85 = call i64 @mbuf_append(%struct.mbuf* %out, i8* %63, i64 %65)
  br label %if.end86

if.end86:                                         ; preds = %if.then81, %land.lhs.true77, %if.end74
  store i32 0, i32* %result, align 4
  br label %out87

out87:                                            ; preds = %if.end86, %if.then46, %if.then42
  %66 = load i32, i32* %result, align 4
  %cmp88 = icmp eq i32 %66, 0
  br i1 %cmp88, label %if.then90, label %if.else94

if.then90:                                        ; preds = %out87
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %out, i32 0, i32 0
  %67 = load i8*, i8** %buf, align 8
  %68 = load %struct.mg_str*, %struct.mg_str** %uri.addr, align 8
  %p91 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %68, i32 0, i32 0
  store i8* %67, i8** %p91, align 8
  %len92 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %out, i32 0, i32 1
  %69 = load i64, i64* %len92, align 8
  %70 = load %struct.mg_str*, %struct.mg_str** %uri.addr, align 8
  %len93 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %70, i32 0, i32 1
  store i64 %69, i64* %len93, align 8
  br label %if.end97

if.else94:                                        ; preds = %out87
  call void @mbuf_free(%struct.mbuf* %out)
  %71 = load %struct.mg_str*, %struct.mg_str** %uri.addr, align 8
  %p95 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %71, i32 0, i32 0
  store i8* null, i8** %p95, align 8
  %72 = load %struct.mg_str*, %struct.mg_str** %uri.addr, align 8
  %len96 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %72, i32 0, i32 1
  store i64 0, i64* %len96, align 8
  br label %if.end97

if.end97:                                         ; preds = %if.else94, %if.then90
  %73 = load i32, i32* %result, align 4
  ret i32 %73
}

declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_parse_http(i8* %s, i32 %n, %struct.http_message* %hm, i32 %is_req) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %n.addr = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %is_req.addr = alloca i32, align 4
  %end = alloca i8*, align 8
  %qs = alloca i8*, align 8
  %len = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i32 %is_req, i32* %is_req.addr, align 4
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i32, i32* %n.addr, align 4
  %call = call i32 @mg_http_get_request_len(i8* %0, i32 %1)
  store i32 %call, i32* %len, align 4
  %2 = load i32, i32* %len, align 4
  %cmp = icmp sle i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %len, align 4
  store i32 %3, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %5 = bitcast %struct.http_message* %4 to i8*
  %6 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %7 = bitcast %struct.http_message* %6 to i8*
  %8 = call i64 @llvm.objectsize.i64.p0i8(i8* %7, i1 false)
  %call1 = call i8* @__memset_chk(i8* %5, i32 0, i64 1408, i64 %8) #5
  %9 = load i8*, i8** %s.addr, align 8
  %10 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %10, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 0
  store i8* %9, i8** %p, align 8
  %11 = load i8*, i8** %s.addr, align 8
  %12 = load i32, i32* %len, align 4
  %idx.ext = sext i32 %12 to i64
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  %13 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %13, i32 0, i32 1
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 0
  store i8* %add.ptr, i8** %p2, align 8
  %14 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body3 = getelementptr inbounds %struct.http_message, %struct.http_message* %14, i32 0, i32 1
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body3, i32 0, i32 1
  store i64 -1, i64* %len4, align 8
  %15 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %message5 = getelementptr inbounds %struct.http_message, %struct.http_message* %15, i32 0, i32 0
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message5, i32 0, i32 1
  store i64 -1, i64* %len6, align 8
  %16 = load i8*, i8** %s.addr, align 8
  %17 = load i32, i32* %len, align 4
  %idx.ext7 = sext i32 %17 to i64
  %add.ptr8 = getelementptr inbounds i8, i8* %16, i64 %idx.ext7
  store i8* %add.ptr8, i8** %end, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %18 = load i8*, i8** %s.addr, align 8
  %19 = load i8*, i8** %end, align 8
  %cmp9 = icmp ult i8* %18, %19
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %20 = load i8*, i8** %s.addr, align 8
  %21 = load i8, i8* %20, align 1
  %conv = zext i8 %21 to i32
  %call10 = call i32 @isspace(i32 %conv) #15
  %tobool = icmp ne i32 %call10, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %22 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %22, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %23 = load i8*, i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %24 = load i32, i32* %is_req.addr, align 4
  %tobool11 = icmp ne i32 %24, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %while.end
  %25 = load i8*, i8** %s.addr, align 8
  %26 = load i8*, i8** %end, align 8
  %27 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %27, i32 0, i32 2
  %call13 = call i8* @mg_skip(i8* %25, i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0), %struct.mg_str* %method)
  store i8* %call13, i8** %s.addr, align 8
  %28 = load i8*, i8** %s.addr, align 8
  %29 = load i8*, i8** %end, align 8
  %30 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %30, i32 0, i32 3
  %call14 = call i8* @mg_skip(i8* %28, i8* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0), %struct.mg_str* %uri)
  store i8* %call14, i8** %s.addr, align 8
  %31 = load i8*, i8** %s.addr, align 8
  %32 = load i8*, i8** %end, align 8
  %33 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %proto = getelementptr inbounds %struct.http_message, %struct.http_message* %33, i32 0, i32 4
  %call15 = call i8* @mg_skip(i8* %31, i8* %32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), %struct.mg_str* %proto)
  store i8* %call15, i8** %s.addr, align 8
  %34 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri16 = getelementptr inbounds %struct.http_message, %struct.http_message* %34, i32 0, i32 3
  %p17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri16, i32 0, i32 0
  %35 = load i8*, i8** %p17, align 8
  %36 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method18 = getelementptr inbounds %struct.http_message, %struct.http_message* %36, i32 0, i32 2
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method18, i32 0, i32 0
  %37 = load i8*, i8** %p19, align 8
  %cmp20 = icmp ule i8* %35, %37
  br i1 %cmp20, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then12
  %38 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %proto22 = getelementptr inbounds %struct.http_message, %struct.http_message* %38, i32 0, i32 4
  %p23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %proto22, i32 0, i32 0
  %39 = load i8*, i8** %p23, align 8
  %40 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri24 = getelementptr inbounds %struct.http_message, %struct.http_message* %40, i32 0, i32 3
  %p25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri24, i32 0, i32 0
  %41 = load i8*, i8** %p25, align 8
  %cmp26 = icmp ule i8* %39, %41
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %lor.lhs.false, %if.then12
  store i32 -1, i32* %retval, align 4
  br label %return

if.end29:                                         ; preds = %lor.lhs.false
  %42 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri30 = getelementptr inbounds %struct.http_message, %struct.http_message* %42, i32 0, i32 3
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri30, i32 0, i32 0
  %43 = load i8*, i8** %p31, align 8
  %44 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri32 = getelementptr inbounds %struct.http_message, %struct.http_message* %44, i32 0, i32 3
  %len33 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri32, i32 0, i32 1
  %45 = load i64, i64* %len33, align 8
  %call34 = call i8* @memchr(i8* %43, i32 63, i64 %45)
  store i8* %call34, i8** %qs, align 8
  %cmp35 = icmp ne i8* %call34, null
  br i1 %cmp35, label %if.then37, label %if.end54

if.then37:                                        ; preds = %if.end29
  %46 = load i8*, i8** %qs, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %46, i64 1
  %47 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string = getelementptr inbounds %struct.http_message, %struct.http_message* %47, i32 0, i32 7
  %p39 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string, i32 0, i32 0
  store i8* %add.ptr38, i8** %p39, align 8
  %48 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri40 = getelementptr inbounds %struct.http_message, %struct.http_message* %48, i32 0, i32 3
  %p41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri40, i32 0, i32 0
  %49 = load i8*, i8** %p41, align 8
  %50 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri42 = getelementptr inbounds %struct.http_message, %struct.http_message* %50, i32 0, i32 3
  %len43 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri42, i32 0, i32 1
  %51 = load i64, i64* %len43, align 8
  %arrayidx = getelementptr inbounds i8, i8* %49, i64 %51
  %52 = load i8*, i8** %qs, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %52, i64 1
  %sub.ptr.lhs.cast = ptrtoint i8* %arrayidx to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr44 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %53 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string45 = getelementptr inbounds %struct.http_message, %struct.http_message* %53, i32 0, i32 7
  %len46 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string45, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len46, align 8
  %54 = load i8*, i8** %qs, align 8
  %55 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri47 = getelementptr inbounds %struct.http_message, %struct.http_message* %55, i32 0, i32 3
  %p48 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri47, i32 0, i32 0
  %56 = load i8*, i8** %p48, align 8
  %sub.ptr.lhs.cast49 = ptrtoint i8* %54 to i64
  %sub.ptr.rhs.cast50 = ptrtoint i8* %56 to i64
  %sub.ptr.sub51 = sub i64 %sub.ptr.lhs.cast49, %sub.ptr.rhs.cast50
  %57 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri52 = getelementptr inbounds %struct.http_message, %struct.http_message* %57, i32 0, i32 3
  %len53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri52, i32 0, i32 1
  store i64 %sub.ptr.sub51, i64* %len53, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.then37, %if.end29
  br label %if.end91

if.else:                                          ; preds = %while.end
  %58 = load i8*, i8** %s.addr, align 8
  %59 = load i8*, i8** %end, align 8
  %60 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %proto55 = getelementptr inbounds %struct.http_message, %struct.http_message* %60, i32 0, i32 4
  %call56 = call i8* @mg_skip(i8* %58, i8* %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0), %struct.mg_str* %proto55)
  store i8* %call56, i8** %s.addr, align 8
  %61 = load i8*, i8** %end, align 8
  %62 = load i8*, i8** %s.addr, align 8
  %sub.ptr.lhs.cast57 = ptrtoint i8* %61 to i64
  %sub.ptr.rhs.cast58 = ptrtoint i8* %62 to i64
  %sub.ptr.sub59 = sub i64 %sub.ptr.lhs.cast57, %sub.ptr.rhs.cast58
  %cmp60 = icmp slt i64 %sub.ptr.sub59, 4
  br i1 %cmp60, label %if.then77, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %if.else
  %63 = load i8*, i8** %s.addr, align 8
  %arrayidx63 = getelementptr inbounds i8, i8* %63, i64 0
  %64 = load i8, i8* %arrayidx63, align 1
  %conv64 = sext i8 %64 to i32
  %cmp65 = icmp slt i32 %conv64, 48
  br i1 %cmp65, label %if.then77, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %lor.lhs.false62
  %65 = load i8*, i8** %s.addr, align 8
  %arrayidx68 = getelementptr inbounds i8, i8* %65, i64 0
  %66 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %66 to i32
  %cmp70 = icmp sgt i32 %conv69, 57
  br i1 %cmp70, label %if.then77, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %lor.lhs.false67
  %67 = load i8*, i8** %s.addr, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %67, i64 3
  %68 = load i8, i8* %arrayidx73, align 1
  %conv74 = sext i8 %68 to i32
  %cmp75 = icmp ne i32 %conv74, 32
  br i1 %cmp75, label %if.then77, label %if.end78

if.then77:                                        ; preds = %lor.lhs.false72, %lor.lhs.false67, %lor.lhs.false62, %if.else
  store i32 -1, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %lor.lhs.false72
  %69 = load i8*, i8** %s.addr, align 8
  %call79 = call i32 @atoi(i8* %69)
  %70 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %resp_code = getelementptr inbounds %struct.http_message, %struct.http_message* %70, i32 0, i32 5
  store i32 %call79, i32* %resp_code, align 8
  %71 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %resp_code80 = getelementptr inbounds %struct.http_message, %struct.http_message* %71, i32 0, i32 5
  %72 = load i32, i32* %resp_code80, align 8
  %cmp81 = icmp slt i32 %72, 100
  br i1 %cmp81, label %if.then87, label %lor.lhs.false83

lor.lhs.false83:                                  ; preds = %if.end78
  %73 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %resp_code84 = getelementptr inbounds %struct.http_message, %struct.http_message* %73, i32 0, i32 5
  %74 = load i32, i32* %resp_code84, align 8
  %cmp85 = icmp sge i32 %74, 600
  br i1 %cmp85, label %if.then87, label %if.end88

if.then87:                                        ; preds = %lor.lhs.false83, %if.end78
  store i32 -1, i32* %retval, align 4
  br label %return

if.end88:                                         ; preds = %lor.lhs.false83
  %75 = load i8*, i8** %s.addr, align 8
  %add.ptr89 = getelementptr inbounds i8, i8* %75, i64 4
  store i8* %add.ptr89, i8** %s.addr, align 8
  %76 = load i8*, i8** %s.addr, align 8
  %77 = load i8*, i8** %end, align 8
  %78 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %resp_status_msg = getelementptr inbounds %struct.http_message, %struct.http_message* %78, i32 0, i32 6
  %call90 = call i8* @mg_skip(i8* %76, i8* %77, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), %struct.mg_str* %resp_status_msg)
  store i8* %call90, i8** %s.addr, align 8
  br label %if.end91

if.end91:                                         ; preds = %if.end88, %if.end54
  %79 = load i8*, i8** %s.addr, align 8
  %80 = load i8*, i8** %end, align 8
  %81 = load i32, i32* %len, align 4
  %82 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call92 = call i8* @mg_http_parse_headers(i8* %79, i8* %80, i32 %81, %struct.http_message* %82)
  store i8* %call92, i8** %s.addr, align 8
  %83 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body93 = getelementptr inbounds %struct.http_message, %struct.http_message* %83, i32 0, i32 1
  %len94 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body93, i32 0, i32 1
  %84 = load i64, i64* %len94, align 8
  %cmp95 = icmp eq i64 %84, -1
  br i1 %cmp95, label %land.lhs.true, label %if.end114

land.lhs.true:                                    ; preds = %if.end91
  %85 = load i32, i32* %is_req.addr, align 4
  %tobool97 = icmp ne i32 %85, 0
  br i1 %tobool97, label %land.lhs.true98, label %if.end114

land.lhs.true98:                                  ; preds = %land.lhs.true
  %86 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method99 = getelementptr inbounds %struct.http_message, %struct.http_message* %86, i32 0, i32 2
  %call100 = call i32 @mg_vcasecmp(%struct.mg_str* %method99, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0))
  %cmp101 = icmp ne i32 %call100, 0
  br i1 %cmp101, label %land.lhs.true103, label %if.end114

land.lhs.true103:                                 ; preds = %land.lhs.true98
  %87 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method104 = getelementptr inbounds %struct.http_message, %struct.http_message* %87, i32 0, i32 2
  %call105 = call i32 @mg_vcasecmp(%struct.mg_str* %method104, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0))
  %cmp106 = icmp ne i32 %call105, 0
  br i1 %cmp106, label %if.then108, label %if.end114

if.then108:                                       ; preds = %land.lhs.true103
  %88 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body109 = getelementptr inbounds %struct.http_message, %struct.http_message* %88, i32 0, i32 1
  %len110 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body109, i32 0, i32 1
  store i64 0, i64* %len110, align 8
  %89 = load i32, i32* %len, align 4
  %conv111 = sext i32 %89 to i64
  %90 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %message112 = getelementptr inbounds %struct.http_message, %struct.http_message* %90, i32 0, i32 0
  %len113 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message112, i32 0, i32 1
  store i64 %conv111, i64* %len113, align 8
  br label %if.end114

if.end114:                                        ; preds = %if.then108, %land.lhs.true103, %land.lhs.true98, %land.lhs.true, %if.end91
  %91 = load i32, i32* %len, align 4
  store i32 %91, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end114, %if.then87, %if.then77, %if.then28, %if.then
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_http_get_request_len(i8* %s, i32 %buf_len) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %buf_len.addr = alloca i32, align 4
  %buf = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %s, i8** %s.addr, align 8
  store i32 %buf_len, i32* %buf_len.addr, align 4
  %0 = load i8*, i8** %s.addr, align 8
  store i8* %0, i8** %buf, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4
  %2 = load i32, i32* %buf_len.addr, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %buf, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  %call = call i32 @isprint(i32 %conv) #15
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %6 = load i8*, i8** %buf, align 8
  %7 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %7 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 %idxprom1
  %8 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %8 to i32
  %cmp4 = icmp ne i32 %conv3, 13
  br i1 %cmp4, label %land.lhs.true6, label %if.else

land.lhs.true6:                                   ; preds = %land.lhs.true
  %9 = load i8*, i8** %buf, align 8
  %10 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %10 to i64
  %arrayidx8 = getelementptr inbounds i8, i8* %9, i64 %idxprom7
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %11 to i32
  %cmp10 = icmp ne i32 %conv9, 10
  br i1 %cmp10, label %land.lhs.true12, label %if.else

land.lhs.true12:                                  ; preds = %land.lhs.true6
  %12 = load i8*, i8** %buf, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %13 to i64
  %arrayidx14 = getelementptr inbounds i8, i8* %12, i64 %idxprom13
  %14 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %14 to i32
  %cmp16 = icmp slt i32 %conv15, 128
  br i1 %cmp16, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true12
  store i32 -1, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true12, %land.lhs.true6, %land.lhs.true, %for.body
  %15 = load i8*, i8** %buf, align 8
  %16 = load i32, i32* %i, align 4
  %idxprom18 = sext i32 %16 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %15, i64 %idxprom18
  %17 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %17 to i32
  %cmp21 = icmp eq i32 %conv20, 10
  br i1 %cmp21, label %land.lhs.true23, label %if.else35

land.lhs.true23:                                  ; preds = %if.else
  %18 = load i32, i32* %i, align 4
  %add = add nsw i32 %18, 1
  %19 = load i32, i32* %buf_len.addr, align 4
  %cmp24 = icmp slt i32 %add, %19
  br i1 %cmp24, label %land.lhs.true26, label %if.else35

land.lhs.true26:                                  ; preds = %land.lhs.true23
  %20 = load i8*, i8** %buf, align 8
  %21 = load i32, i32* %i, align 4
  %add27 = add nsw i32 %21, 1
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds i8, i8* %20, i64 %idxprom28
  %22 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %22 to i32
  %cmp31 = icmp eq i32 %conv30, 10
  br i1 %cmp31, label %if.then33, label %if.else35

if.then33:                                        ; preds = %land.lhs.true26
  %23 = load i32, i32* %i, align 4
  %add34 = add nsw i32 %23, 2
  store i32 %add34, i32* %retval, align 4
  br label %return

if.else35:                                        ; preds = %land.lhs.true26, %land.lhs.true23, %if.else
  %24 = load i8*, i8** %buf, align 8
  %25 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %25 to i64
  %arrayidx37 = getelementptr inbounds i8, i8* %24, i64 %idxprom36
  %26 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %26 to i32
  %cmp39 = icmp eq i32 %conv38, 10
  br i1 %cmp39, label %land.lhs.true41, label %if.end

land.lhs.true41:                                  ; preds = %if.else35
  %27 = load i32, i32* %i, align 4
  %add42 = add nsw i32 %27, 2
  %28 = load i32, i32* %buf_len.addr, align 4
  %cmp43 = icmp slt i32 %add42, %28
  br i1 %cmp43, label %land.lhs.true45, label %if.end

land.lhs.true45:                                  ; preds = %land.lhs.true41
  %29 = load i8*, i8** %buf, align 8
  %30 = load i32, i32* %i, align 4
  %add46 = add nsw i32 %30, 1
  %idxprom47 = sext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds i8, i8* %29, i64 %idxprom47
  %31 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %31 to i32
  %cmp50 = icmp eq i32 %conv49, 13
  br i1 %cmp50, label %land.lhs.true52, label %if.end

land.lhs.true52:                                  ; preds = %land.lhs.true45
  %32 = load i8*, i8** %buf, align 8
  %33 = load i32, i32* %i, align 4
  %add53 = add nsw i32 %33, 2
  %idxprom54 = sext i32 %add53 to i64
  %arrayidx55 = getelementptr inbounds i8, i8* %32, i64 %idxprom54
  %34 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %34 to i32
  %cmp57 = icmp eq i32 %conv56, 10
  br i1 %cmp57, label %if.then59, label %if.end

if.then59:                                        ; preds = %land.lhs.true52
  %35 = load i32, i32* %i, align 4
  %add60 = add nsw i32 %35, 3
  store i32 %add60, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true52, %land.lhs.true45, %land.lhs.true41, %if.else35
  br label %if.end61

if.end61:                                         ; preds = %if.end
  br label %if.end62

if.end62:                                         ; preds = %if.end61
  br label %for.inc

for.inc:                                          ; preds = %if.end62
  %36 = load i32, i32* %i, align 4
  %inc = add nsw i32 %36, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then59, %if.then33, %if.then
  %37 = load i32, i32* %retval, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mg_skip(i8* %s, i8* %end, i8* %delims, %struct.mg_str* %v) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %delims.addr = alloca i8*, align 8
  %v.addr = alloca %struct.mg_str*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8* %delims, i8** %delims.addr, align 8
  store %struct.mg_str* %v, %struct.mg_str** %v.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load %struct.mg_str*, %struct.mg_str** %v.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 0
  store i8* %0, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %s.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %2, %3
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %4 = load i8*, i8** %delims.addr, align 8
  %5 = load i8*, i8** %s.addr, align 8
  %6 = load i8, i8* %5, align 1
  %conv = zext i8 %6 to i32
  %call = call i8* @strchr(i8* %4, i32 %conv)
  %cmp1 = icmp eq i8* %call, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %7, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %8 = load i8*, i8** %s.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %s.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %9 = load i8*, i8** %s.addr, align 8
  %10 = load %struct.mg_str*, %struct.mg_str** %v.addr, align 8
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 0
  %11 = load i8*, i8** %p3, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %12 = load %struct.mg_str*, %struct.mg_str** %v.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len, align 8
  br label %while.cond4

while.cond4:                                      ; preds = %while.body13, %while.end
  %13 = load i8*, i8** %s.addr, align 8
  %14 = load i8*, i8** %end.addr, align 8
  %cmp5 = icmp ult i8* %13, %14
  br i1 %cmp5, label %land.rhs7, label %land.end12

land.rhs7:                                        ; preds = %while.cond4
  %15 = load i8*, i8** %delims.addr, align 8
  %16 = load i8*, i8** %s.addr, align 8
  %17 = load i8, i8* %16, align 1
  %conv8 = zext i8 %17 to i32
  %call9 = call i8* @strchr(i8* %15, i32 %conv8)
  %cmp10 = icmp ne i8* %call9, null
  br label %land.end12

land.end12:                                       ; preds = %land.rhs7, %while.cond4
  %18 = phi i1 [ false, %while.cond4 ], [ %cmp10, %land.rhs7 ]
  br i1 %18, label %while.body13, label %while.end15

while.body13:                                     ; preds = %land.end12
  %19 = load i8*, i8** %s.addr, align 8
  %incdec.ptr14 = getelementptr inbounds i8, i8* %19, i32 1
  store i8* %incdec.ptr14, i8** %s.addr, align 8
  br label %while.cond4

while.end15:                                      ; preds = %land.end12
  %20 = load i8*, i8** %s.addr, align 8
  ret i8* %20
}

declare i32 @atoi(i8*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal i8* @mg_http_parse_headers(i8* %s, i8* %end, i32 %len, %struct.http_message* %req) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %req.addr = alloca %struct.http_message*, align 8
  %i = alloca i32, align 4
  %k = alloca %struct.mg_str*, align 8
  %v = alloca %struct.mg_str*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store %struct.http_message* %req, %struct.http_message** %req.addr, align 8
  store i32 0, i32* %i, align 4
  %0 = load %struct.http_message*, %struct.http_message** %req.addr, align 8
  %content_length = getelementptr inbounds %struct.http_message, %struct.http_message* %0, i32 0, i32 10
  store i64 -1, i64* %content_length, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end46, %if.then, %entry
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 39
  br i1 %cmp, label %while.body, label %while.end47

while.body:                                       ; preds = %while.cond
  %2 = load %struct.http_message*, %struct.http_message** %req.addr, align 8
  %header_names = getelementptr inbounds %struct.http_message, %struct.http_message* %2, i32 0, i32 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names, i64 0, i64 %idxprom
  store %struct.mg_str* %arrayidx, %struct.mg_str** %k, align 8
  %4 = load %struct.http_message*, %struct.http_message** %req.addr, align 8
  %header_values = getelementptr inbounds %struct.http_message, %struct.http_message* %4, i32 0, i32 9
  %5 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values, i64 0, i64 %idxprom1
  store %struct.mg_str* %arrayidx2, %struct.mg_str** %v, align 8
  %6 = load i8*, i8** %s.addr, align 8
  %7 = load i8*, i8** %end.addr, align 8
  %8 = load %struct.mg_str*, %struct.mg_str** %k, align 8
  %call = call i8* @mg_skip(i8* %6, i8* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.189, i32 0, i32 0), %struct.mg_str* %8)
  store i8* %call, i8** %s.addr, align 8
  %9 = load i8*, i8** %s.addr, align 8
  %10 = load i8*, i8** %end.addr, align 8
  %11 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %call3 = call i8* @mg_skip(i8* %9, i8* %10, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), %struct.mg_str* %11)
  store i8* %call3, i8** %s.addr, align 8
  br label %while.cond4

while.cond4:                                      ; preds = %while.body11, %while.body
  %12 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 1
  %13 = load i64, i64* %len5, align 8
  %cmp6 = icmp ugt i64 %13, 0
  br i1 %cmp6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond4
  %14 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 0
  %15 = load i8*, i8** %p, align 8
  %16 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %16, i32 0, i32 1
  %17 = load i64, i64* %len7, align 8
  %sub = sub i64 %17, 1
  %arrayidx8 = getelementptr inbounds i8, i8* %15, i64 %sub
  %18 = load i8, i8* %arrayidx8, align 1
  %conv = sext i8 %18 to i32
  %cmp9 = icmp eq i32 %conv, 32
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond4
  %19 = phi i1 [ false, %while.cond4 ], [ %cmp9, %land.rhs ]
  br i1 %19, label %while.body11, label %while.end

while.body11:                                     ; preds = %land.end
  %20 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %20, i32 0, i32 1
  %21 = load i64, i64* %len12, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %len12, align 8
  br label %while.cond4

while.end:                                        ; preds = %land.end
  %22 = load %struct.mg_str*, %struct.mg_str** %k, align 8
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %22, i32 0, i32 1
  %23 = load i64, i64* %len13, align 8
  %cmp14 = icmp ne i64 %23, 0
  br i1 %cmp14, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.end
  %24 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %len16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %24, i32 0, i32 1
  %25 = load i64, i64* %len16, align 8
  %cmp17 = icmp eq i64 %25, 0
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %while.cond

if.end:                                           ; preds = %land.lhs.true, %while.end
  %26 = load %struct.mg_str*, %struct.mg_str** %k, align 8
  %len19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %26, i32 0, i32 1
  %27 = load i64, i64* %len19, align 8
  %cmp20 = icmp eq i64 %27, 0
  br i1 %cmp20, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %28 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %28, i32 0, i32 1
  %29 = load i64, i64* %len22, align 8
  %cmp23 = icmp eq i64 %29, 0
  br i1 %cmp23, label %if.then25, label %if.end30

if.then25:                                        ; preds = %lor.lhs.false, %if.end
  %30 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %p26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %30, i32 0, i32 0
  store i8* null, i8** %p26, align 8
  %31 = load %struct.mg_str*, %struct.mg_str** %k, align 8
  %p27 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %31, i32 0, i32 0
  store i8* null, i8** %p27, align 8
  %32 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %len28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %32, i32 0, i32 1
  store i64 0, i64* %len28, align 8
  %33 = load %struct.mg_str*, %struct.mg_str** %k, align 8
  %len29 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %33, i32 0, i32 1
  store i64 0, i64* %len29, align 8
  br label %while.end47

if.end30:                                         ; preds = %lor.lhs.false
  %34 = load %struct.mg_str*, %struct.mg_str** %k, align 8
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %34, i32 0, i32 0
  %35 = load i8*, i8** %p31, align 8
  %call32 = call i32 @mg_ncasecmp(i8* %35, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.190, i32 0, i32 0), i64 14)
  %cmp33 = icmp eq i32 %call32, 0
  br i1 %cmp33, label %if.then35, label %if.end46

if.then35:                                        ; preds = %if.end30
  %36 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  %p36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %36, i32 0, i32 0
  %37 = load i8*, i8** %p36, align 8
  %call37 = call i64 @strtoll(i8* %37, i8** null, i32 10)
  %38 = load %struct.http_message*, %struct.http_message** %req.addr, align 8
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %38, i32 0, i32 1
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  store i64 %call37, i64* %len38, align 8
  %39 = load i32, i32* %len.addr, align 4
  %conv39 = sext i32 %39 to i64
  %40 = load %struct.http_message*, %struct.http_message** %req.addr, align 8
  %body40 = getelementptr inbounds %struct.http_message, %struct.http_message* %40, i32 0, i32 1
  %len41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body40, i32 0, i32 1
  %41 = load i64, i64* %len41, align 8
  %add = add i64 %conv39, %41
  %42 = load %struct.http_message*, %struct.http_message** %req.addr, align 8
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %42, i32 0, i32 0
  %len42 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 1
  store i64 %add, i64* %len42, align 8
  %43 = load %struct.http_message*, %struct.http_message** %req.addr, align 8
  %body43 = getelementptr inbounds %struct.http_message, %struct.http_message* %43, i32 0, i32 1
  %len44 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body43, i32 0, i32 1
  %44 = load i64, i64* %len44, align 8
  %45 = load %struct.http_message*, %struct.http_message** %req.addr, align 8
  %content_length45 = getelementptr inbounds %struct.http_message, %struct.http_message* %45, i32 0, i32 10
  store i64 %44, i64* %content_length45, align 8
  br label %if.end46

if.end46:                                         ; preds = %if.then35, %if.end30
  %46 = load i32, i32* %i, align 4
  %inc = add nsw i32 %46, 1
  store i32 %inc, i32* %i, align 4
  br label %while.cond

while.end47:                                      ; preds = %if.then25, %while.cond
  %47 = load i8*, i8** %s.addr, align 8
  ret i8* %47
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_str* @mg_get_http_header(%struct.http_message* %hm, i8* %name) #0 {
entry:
  %retval = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %name.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %h = alloca %struct.mg_str*, align 8
  %v = alloca %struct.mg_str*, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %call = call i64 @strlen(i8* %0)
  store i64 %call, i64* %len, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_names = getelementptr inbounds %struct.http_message, %struct.http_message* %1, i32 0, i32 8
  %2 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names, i64 0, i64 %2
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx, i32 0, i32 1
  %3 = load i64, i64* %len1, align 8
  %cmp = icmp ugt i64 %3, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_names2 = getelementptr inbounds %struct.http_message, %struct.http_message* %4, i32 0, i32 8
  %5 = load i64, i64* %i, align 8
  %arrayidx3 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names2, i64 0, i64 %5
  store %struct.mg_str* %arrayidx3, %struct.mg_str** %h, align 8
  %6 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_values = getelementptr inbounds %struct.http_message, %struct.http_message* %6, i32 0, i32 9
  %7 = load i64, i64* %i, align 8
  %arrayidx4 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values, i64 0, i64 %7
  store %struct.mg_str* %arrayidx4, %struct.mg_str** %v, align 8
  %8 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %8, i32 0, i32 0
  %9 = load i8*, i8** %p, align 8
  %cmp5 = icmp ne i8* %9, null
  br i1 %cmp5, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %10 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 1
  %11 = load i64, i64* %len6, align 8
  %12 = load i64, i64* %len, align 8
  %cmp7 = icmp eq i64 %11, %12
  br i1 %cmp7, label %land.lhs.true8, label %if.end

land.lhs.true8:                                   ; preds = %land.lhs.true
  %13 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %13, i32 0, i32 0
  %14 = load i8*, i8** %p9, align 8
  %15 = load i8*, i8** %name.addr, align 8
  %16 = load i64, i64* %len, align 8
  %call10 = call i32 @mg_ncasecmp(i8* %14, i8* %15, i64 %16)
  %tobool = icmp ne i32 %call10, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true8
  %17 = load %struct.mg_str*, %struct.mg_str** %v, align 8
  store %struct.mg_str* %17, %struct.mg_str** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true8, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i64, i64* %i, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.mg_str* null, %struct.mg_str** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %19 = load %struct.mg_str*, %struct.mg_str** %retval, align 8
  ret %struct.mg_str* %19
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_http_endpoint* @mg_http_get_endpoint_handler(%struct.mg_connection* %nc, %struct.mg_str* %uri_path) #0 {
entry:
  %retval = alloca %struct.mg_http_endpoint*, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %uri_path.addr = alloca %struct.mg_str*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %ret = alloca %struct.mg_http_endpoint*, align 8
  %matched = alloca i32, align 4
  %matched_max = alloca i32, align 4
  %ep = alloca %struct.mg_http_endpoint*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.mg_str* %uri_path, %struct.mg_str** %uri_path.addr, align 8
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %ret, align 8
  store i32 0, i32* %matched_max, align 4
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %cmp = icmp eq %struct.mg_connection* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %1)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8
  %2 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cmp1 = icmp eq %struct.mg_http_proto_data* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %3 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoints = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %3, i32 0, i32 4
  %4 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %endpoints, align 8
  store %struct.mg_http_endpoint* %4, %struct.mg_http_endpoint** %ep, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end13, %if.end3
  %5 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %cmp4 = icmp ne %struct.mg_http_endpoint* %5, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %uri_pattern = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %6, i32 0, i32 1
  %7 = load %struct.mg_str*, %struct.mg_str** %uri_path.addr, align 8
  %8 = bitcast %struct.mg_str* %uri_pattern to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %7 to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %call5 = call i64 @mg_match_prefix_n(i8* %10, i64 %12, i8* %15, i64 %17)
  %conv = trunc i64 %call5 to i32
  store i32 %conv, i32* %matched, align 4
  %cmp6 = icmp sgt i32 %conv, 0
  br i1 %cmp6, label %if.then8, label %if.end13

if.then8:                                         ; preds = %while.body
  %18 = load i32, i32* %matched, align 4
  %19 = load i32, i32* %matched_max, align 4
  %cmp9 = icmp sgt i32 %18, %19
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then8
  %20 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  store %struct.mg_http_endpoint* %20, %struct.mg_http_endpoint** %ret, align 8
  %21 = load i32, i32* %matched, align 4
  store i32 %21, i32* %matched_max, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then8
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %while.body
  %22 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %next = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %22, i32 0, i32 0
  %23 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %next, align 8
  store %struct.mg_http_endpoint* %23, %struct.mg_http_endpoint** %ep, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %24 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ret, align 8
  store %struct.mg_http_endpoint* %24, %struct.mg_http_endpoint** %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %if.then2, %if.then
  %25 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %retval, align 8
  ret %struct.mg_http_endpoint* %25
}

; Function Attrs: noinline nounwind ssp uwtable
define internal %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 13
  %1 = load i8*, i8** %proto_data, align 8
  %2 = bitcast i8* %1 to %struct.mg_http_proto_data*
  ret %struct.mg_http_proto_data* %2
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_http_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %shm = alloca %struct.http_message, align 8
  %hm = alloca %struct.http_message*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %io = alloca %struct.mbuf*, align 8
  %req_len = alloca i32, align 4
  %is_req = alloca i32, align 4
  %vec = alloca %struct.mg_str*, align 8
  %ev2 = alloca i32, align 4
  %s = alloca %struct.mg_str*, align 8
  %ep = alloca %struct.mg_http_endpoint*, align 8
  %request_done = alloca i32, align 4
  %trigger_ev = alloca i32, align 4
  %addr = alloca [32 x i8], align 16
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %ev_data, i8** %ev_data.addr, align 8
  store %struct.http_message* %shm, %struct.http_message** %hm, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %0)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 2
  %3 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8
  %cmp = icmp ne %struct.mg_connection* %3, null
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %is_req, align 4
  %4 = load i32, i32* %ev.addr, align 4
  %cmp1 = icmp eq i32 %4, 5
  br i1 %cmp1, label %if.then, label %if.end41

if.then:                                          ; preds = %entry
  %5 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cmp3 = icmp ne %struct.mg_http_proto_data* %5, null
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %6 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %6, i32 0, i32 1
  %cgi_nc = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi, i32 0, i32 0
  %7 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc, align 8
  %cmp5 = icmp ne %struct.mg_connection* %7, null
  br i1 %cmp5, label %if.then7, label %if.end

if.then7:                                         ; preds = %land.lhs.true
  %8 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cgi8 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %8, i32 0, i32 1
  %cgi_nc9 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi8, i32 0, i32 0
  %9 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc9, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 16
  store i8* null, i8** %user_data, align 8
  %10 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cgi10 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %10, i32 0, i32 1
  %cgi_nc11 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi10, i32 0, i32 0
  %11 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc11, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags, align 8
  %or = or i64 %12, 2048
  store i64 %or, i64* %flags, align 8
  br label %if.end

if.end:                                           ; preds = %if.then7, %land.lhs.true, %if.then
  %13 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %13, i32 0, i32 1
  %14 = load i64, i64* %len, align 8
  %cmp12 = icmp ugt i64 %14, 0
  br i1 %cmp12, label %land.lhs.true14, label %if.end27

land.lhs.true14:                                  ; preds = %if.end
  %15 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %15, i32 0, i32 0
  %16 = load i8*, i8** %buf, align 8
  %17 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len15 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %17, i32 0, i32 1
  %18 = load i64, i64* %len15, align 8
  %conv16 = trunc i64 %18 to i32
  %19 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %20 = load i32, i32* %is_req, align 4
  %call17 = call i32 @mg_parse_http(i8* %16, i32 %conv16, %struct.http_message* %19, i32 %20)
  store i32 %call17, i32* %req_len, align 4
  %cmp18 = icmp sgt i32 %call17, 0
  br i1 %cmp18, label %if.then20, label %if.end27

if.then20:                                        ; preds = %land.lhs.true14
  %21 = load i32, i32* %is_req, align 4
  %tobool = icmp ne i32 %21, 0
  %cond = select i1 %tobool, i32 100, i32 101
  store i32 %cond, i32* %ev2, align 4
  %22 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len21 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %22, i32 0, i32 1
  %23 = load i64, i64* %len21, align 8
  %24 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %24, i32 0, i32 0
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 1
  store i64 %23, i64* %len22, align 8
  %25 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %buf23 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %25, i32 0, i32 0
  %26 = load i8*, i8** %buf23, align 8
  %27 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len24 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %27, i32 0, i32 1
  %28 = load i64, i64* %len24, align 8
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 %28
  %29 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %29, i32 0, i32 1
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 0
  %30 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %30 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %31 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %body25 = getelementptr inbounds %struct.http_message, %struct.http_message* %31, i32 0, i32 1
  %len26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body25, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len26, align 8
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %33 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %34 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %35 = load i32, i32* %req_len, align 4
  call void @deliver_chunk(%struct.mg_connection* %32, %struct.http_message* %33, %struct.mg_http_proto_data* %34, i32 %35)
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %37 = load i32, i32* %ev2, align 4
  %38 = load %struct.http_message*, %struct.http_message** %hm, align 8
  call void @mg_http_call_endpoint_handler(%struct.mg_connection* %36, i32 %37, %struct.http_message* %38)
  br label %if.end27

if.end27:                                         ; preds = %if.then20, %land.lhs.true14, %if.end
  %39 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cmp28 = icmp ne %struct.mg_http_proto_data* %39, null
  br i1 %cmp28, label %land.lhs.true30, label %if.end40

land.lhs.true30:                                  ; preds = %if.end27
  %40 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoint_handler = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %40, i32 0, i32 5
  %41 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler, align 8
  %cmp31 = icmp ne void (%struct.mg_connection*, i32, i8*)* %41, null
  br i1 %cmp31, label %land.lhs.true33, label %if.end40

land.lhs.true33:                                  ; preds = %land.lhs.true30
  %42 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoint_handler34 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %42, i32 0, i32 5
  %43 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler34, align 8
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %44, i32 0, i32 15
  %45 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %cmp35 = icmp ne void (%struct.mg_connection*, i32, i8*)* %43, %45
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %land.lhs.true33
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %47 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoint_handler38 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %47, i32 0, i32 5
  %48 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler38, align 8
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data39 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %49, i32 0, i32 16
  %50 = load i8*, i8** %user_data39, align 8
  %51 = load i32, i32* %ev.addr, align 4
  call void @mg_call(%struct.mg_connection* %46, void (%struct.mg_connection*, i32, i8*)* %48, i8* %50, i32 %51, i8* null)
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %land.lhs.true33, %land.lhs.true30, %if.end27
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %entry
  %52 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cmp42 = icmp ne %struct.mg_http_proto_data* %52, null
  br i1 %cmp42, label %land.lhs.true44, label %if.end51

land.lhs.true44:                                  ; preds = %if.end41
  %53 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %53, i32 0, i32 0
  %fp = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file, i32 0, i32 0
  %54 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %cmp45 = icmp ne %struct.__sFILE* %54, null
  br i1 %cmp45, label %if.then47, label %if.end51

if.then47:                                        ; preds = %land.lhs.true44
  %55 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_transfer_file_data(%struct.mg_connection* %55)
  %56 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %finished = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %56, i32 0, i32 10
  %57 = load i32, i32* %finished, align 8
  %tobool48 = icmp ne i32 %57, 0
  br i1 %tobool48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.then47
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %if.then47
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %land.lhs.true44, %if.end41
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %59 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler52 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %59, i32 0, i32 15
  %60 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler52, align 8
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data53 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %61, i32 0, i32 16
  %62 = load i8*, i8** %user_data53, align 8
  %63 = load i32, i32* %ev.addr, align 4
  %64 = load i8*, i8** %ev_data.addr, align 8
  call void @mg_call(%struct.mg_connection* %58, void (%struct.mg_connection*, i32, i8*)* %60, i8* %62, i32 %63, i8* %64)
  %65 = load i32, i32* %ev.addr, align 4
  %cmp54 = icmp eq i32 %65, 3
  br i1 %cmp54, label %if.then56, label %if.end276

if.then56:                                        ; preds = %if.end51
  br label %again

again:                                            ; preds = %if.then269, %if.then56
  %66 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %buf57 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %66, i32 0, i32 0
  %67 = load i8*, i8** %buf57, align 8
  %68 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len58 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %68, i32 0, i32 1
  %69 = load i64, i64* %len58, align 8
  %conv59 = trunc i64 %69 to i32
  %70 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %71 = load i32, i32* %is_req, align 4
  %call60 = call i32 @mg_parse_http(i8* %67, i32 %conv59, %struct.http_message* %70, i32 %71)
  store i32 %call60, i32* %req_len, align 4
  %72 = load i32, i32* %req_len, align 4
  %cmp61 = icmp sgt i32 %72, 0
  br i1 %cmp61, label %land.lhs.true63, label %if.end71

land.lhs.true63:                                  ; preds = %again
  %73 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cmp64 = icmp eq %struct.mg_http_proto_data* %73, null
  br i1 %cmp64, label %if.then68, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true63
  %74 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %finished66 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %74, i32 0, i32 10
  %75 = load i32, i32* %finished66, align 8
  %tobool67 = icmp ne i32 %75, 0
  br i1 %tobool67, label %if.then68, label %if.end71

if.then68:                                        ; preds = %lor.lhs.false, %land.lhs.true63
  %76 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call69 = call %struct.mg_http_proto_data* @mg_http_create_proto_data(%struct.mg_connection* %76)
  store %struct.mg_http_proto_data* %call69, %struct.mg_http_proto_data** %pd, align 8
  %77 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len70 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %77, i32 0, i32 1
  %78 = load i64, i64* %len70, align 8
  %79 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %rcvd = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %79, i32 0, i32 7
  store i64 %78, i64* %rcvd, align 8
  br label %if.end71

if.end71:                                         ; preds = %if.then68, %lor.lhs.false, %again
  %80 = load i32, i32* %req_len, align 4
  %cmp72 = icmp sgt i32 %80, 0
  br i1 %cmp72, label %land.lhs.true74, label %if.end88

land.lhs.true74:                                  ; preds = %if.end71
  %81 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %call75 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %81, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.43, i32 0, i32 0))
  store %struct.mg_str* %call75, %struct.mg_str** %s, align 8
  %cmp76 = icmp ne %struct.mg_str* %call75, null
  br i1 %cmp76, label %land.lhs.true78, label %if.end88

land.lhs.true78:                                  ; preds = %land.lhs.true74
  %82 = load %struct.mg_str*, %struct.mg_str** %s, align 8
  %call79 = call i32 @mg_vcasecmp(%struct.mg_str* %82, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0))
  %cmp80 = icmp eq i32 %call79, 0
  br i1 %cmp80, label %if.then82, label %if.end88

if.then82:                                        ; preds = %land.lhs.true78
  %83 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %84 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %85 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %buf83 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %85, i32 0, i32 0
  %86 = load i8*, i8** %buf83, align 8
  %87 = load i32, i32* %req_len, align 4
  %idx.ext = sext i32 %87 to i64
  %add.ptr84 = getelementptr inbounds i8, i8* %86, i64 %idx.ext
  %88 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len85 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %88, i32 0, i32 1
  %89 = load i64, i64* %len85, align 8
  %90 = load i32, i32* %req_len, align 4
  %conv86 = sext i32 %90 to i64
  %sub = sub i64 %89, %conv86
  %call87 = call i64 @mg_handle_chunked(%struct.mg_connection* %83, %struct.http_message* %84, i8* %add.ptr84, i64 %sub)
  br label %if.end88

if.end88:                                         ; preds = %if.then82, %land.lhs.true78, %land.lhs.true74, %if.end71
  %91 = load i32, i32* %req_len, align 4
  %cmp89 = icmp slt i32 %91, 0
  br i1 %cmp89, label %if.then98, label %lor.lhs.false91

lor.lhs.false91:                                  ; preds = %if.end88
  %92 = load i32, i32* %req_len, align 4
  %cmp92 = icmp eq i32 %92, 0
  br i1 %cmp92, label %land.lhs.true94, label %if.else

land.lhs.true94:                                  ; preds = %lor.lhs.false91
  %93 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len95 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %93, i32 0, i32 1
  %94 = load i64, i64* %len95, align 8
  %cmp96 = icmp uge i64 %94, 8192
  br i1 %cmp96, label %if.then98, label %if.else

if.then98:                                        ; preds = %land.lhs.true94, %if.end88
  br label %do.body

do.body:                                          ; preds = %if.then98
  %call99 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6524)
  %tobool100 = icmp ne i32 %call99, 0
  br i1 %tobool100, label %if.then101, label %if.end102

if.then101:                                       ; preds = %do.body
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.45, i32 0, i32 0))
  br label %if.end102

if.end102:                                        ; preds = %if.then101, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end102
  %95 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags103 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %95, i32 0, i32 21
  %96 = load i64, i64* %flags103, align 8
  %or104 = or i64 %96, 2048
  store i64 %or104, i64* %flags103, align 8
  br label %if.end275

if.else:                                          ; preds = %land.lhs.true94, %lor.lhs.false91
  %97 = load i32, i32* %req_len, align 4
  %cmp105 = icmp eq i32 %97, 0
  br i1 %cmp105, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.else
  br label %if.end274

if.else108:                                       ; preds = %if.else
  %98 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener109 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %98, i32 0, i32 2
  %99 = load %struct.mg_connection*, %struct.mg_connection** %listener109, align 8
  %cmp110 = icmp eq %struct.mg_connection* %99, null
  br i1 %cmp110, label %land.lhs.true112, label %if.else139

land.lhs.true112:                                 ; preds = %if.else108
  %100 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags113 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %100, i32 0, i32 21
  %101 = load i64, i64* %flags113, align 8
  %and = and i64 %101, 256
  %tobool114 = icmp ne i64 %and, 0
  br i1 %tobool114, label %if.then115, label %if.else139

if.then115:                                       ; preds = %land.lhs.true112
  br label %do.body116

do.body116:                                       ; preds = %if.then115
  %call117 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6532)
  %tobool118 = icmp ne i32 %call117, 0
  br i1 %tobool118, label %if.then119, label %if.end120

if.then119:                                       ; preds = %do.body116
  %102 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %103 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %resp_code = getelementptr inbounds %struct.http_message, %struct.http_message* %103, i32 0, i32 5
  %104 = load i32, i32* %resp_code, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.46, i32 0, i32 0), %struct.mg_connection* %102, i32 %104)
  br label %if.end120

if.end120:                                        ; preds = %if.then119, %do.body116
  br label %do.end121

do.end121:                                        ; preds = %if.end120
  %105 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %resp_code122 = getelementptr inbounds %struct.http_message, %struct.http_message* %105, i32 0, i32 5
  %106 = load i32, i32* %resp_code122, align 8
  %cmp123 = icmp eq i32 %106, 101
  br i1 %cmp123, label %land.lhs.true125, label %if.else132

land.lhs.true125:                                 ; preds = %do.end121
  %107 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %call126 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %107, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.47, i32 0, i32 0))
  %tobool127 = icmp ne %struct.mg_str* %call126, null
  br i1 %tobool127, label %if.then128, label %if.else132

if.then128:                                       ; preds = %land.lhs.true125
  %108 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %109 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler129 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %109, i32 0, i32 15
  %110 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler129, align 8
  %111 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data130 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %111, i32 0, i32 16
  %112 = load i8*, i8** %user_data130, align 8
  %113 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %114 = bitcast %struct.http_message* %113 to i8*
  call void @mg_call(%struct.mg_connection* %108, void (%struct.mg_connection*, i32, i8*)* %110, i8* %112, i32 112, i8* %114)
  %115 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %116 = load i32, i32* %req_len, align 4
  %conv131 = sext i32 %116 to i64
  call void @mbuf_remove(%struct.mbuf* %115, i64 %conv131)
  %117 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %117, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @mg_ws_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8
  %118 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %119 = load i8*, i8** %ev_data.addr, align 8
  call void @mg_ws_handler(%struct.mg_connection* %118, i32 3, i8* %119)
  br label %if.end138

if.else132:                                       ; preds = %land.lhs.true125, %do.end121
  %120 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %121 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler133 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %121, i32 0, i32 15
  %122 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler133, align 8
  %123 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data134 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %123, i32 0, i32 16
  %124 = load i8*, i8** %user_data134, align 8
  %125 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %126 = bitcast %struct.http_message* %125 to i8*
  call void @mg_call(%struct.mg_connection* %120, void (%struct.mg_connection*, i32, i8*)* %122, i8* %124, i32 112, i8* %126)
  %127 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags135 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %127, i32 0, i32 21
  %128 = load i64, i64* %flags135, align 8
  %or136 = or i64 %128, 2048
  store i64 %or136, i64* %flags135, align 8
  %129 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %130 = load i32, i32* %req_len, align 4
  %conv137 = sext i32 %130 to i64
  call void @mbuf_remove(%struct.mbuf* %129, i64 %conv137)
  br label %if.end138

if.end138:                                        ; preds = %if.else132, %if.then128
  br label %if.end273

if.else139:                                       ; preds = %land.lhs.true112, %if.else108
  %131 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener140 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %131, i32 0, i32 2
  %132 = load %struct.mg_connection*, %struct.mg_connection** %listener140, align 8
  %cmp141 = icmp ne %struct.mg_connection* %132, null
  br i1 %cmp141, label %land.lhs.true143, label %if.else174

land.lhs.true143:                                 ; preds = %if.else139
  %133 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %call144 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %133, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.48, i32 0, i32 0))
  store %struct.mg_str* %call144, %struct.mg_str** %vec, align 8
  %cmp145 = icmp ne %struct.mg_str* %call144, null
  br i1 %cmp145, label %if.then147, label %if.else174

if.then147:                                       ; preds = %land.lhs.true143
  %134 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %135 = load i32, i32* %req_len, align 4
  %conv148 = sext i32 %135 to i64
  call void @mbuf_remove(%struct.mbuf* %134, i64 %conv148)
  %136 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_handler149 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %136, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @mg_ws_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler149, align 8
  %137 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags150 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %137, i32 0, i32 21
  %138 = load i64, i64* %flags150, align 8
  %or151 = or i64 %138, 256
  store i64 %or151, i64* %flags150, align 8
  %139 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener152 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %139, i32 0, i32 2
  %140 = load %struct.mg_connection*, %struct.mg_connection** %listener152, align 8
  %141 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %141, i32 0, i32 3
  %call153 = call %struct.mg_http_endpoint* @mg_http_get_endpoint_handler(%struct.mg_connection* %140, %struct.mg_str* %uri)
  store %struct.mg_http_endpoint* %call153, %struct.mg_http_endpoint** %ep, align 8
  %142 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %cmp154 = icmp ne %struct.mg_http_endpoint* %142, null
  br i1 %cmp154, label %if.then156, label %if.end159

if.then156:                                       ; preds = %if.then147
  %143 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %handler157 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %143, i32 0, i32 4
  %144 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler157, align 8
  %145 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler158 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %145, i32 0, i32 15
  store void (%struct.mg_connection*, i32, i8*)* %144, void (%struct.mg_connection*, i32, i8*)** %handler158, align 8
  br label %if.end159

if.end159:                                        ; preds = %if.then156, %if.then147
  %146 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %147 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler160 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %147, i32 0, i32 15
  %148 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler160, align 8
  %149 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data161 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %149, i32 0, i32 16
  %150 = load i8*, i8** %user_data161, align 8
  %151 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %152 = bitcast %struct.http_message* %151 to i8*
  call void @mg_call(%struct.mg_connection* %146, void (%struct.mg_connection*, i32, i8*)* %148, i8* %150, i32 111, i8* %152)
  %153 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags162 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %153, i32 0, i32 21
  %154 = load i64, i64* %flags162, align 8
  %and163 = and i64 %154, 3072
  %tobool164 = icmp ne i64 %and163, 0
  br i1 %tobool164, label %if.end173, label %if.then165

if.then165:                                       ; preds = %if.end159
  %155 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %155, i32 0, i32 9
  %len166 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %156 = load i64, i64* %len166, align 8
  %cmp167 = icmp eq i64 %156, 0
  br i1 %cmp167, label %if.then169, label %if.end170

if.then169:                                       ; preds = %if.then165
  %157 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %158 = load %struct.mg_str*, %struct.mg_str** %vec, align 8
  %159 = load %struct.http_message*, %struct.http_message** %hm, align 8
  call void @mg_ws_handshake(%struct.mg_connection* %157, %struct.mg_str* %158, %struct.http_message* %159)
  br label %if.end170

if.end170:                                        ; preds = %if.then169, %if.then165
  %160 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %161 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler171 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %161, i32 0, i32 15
  %162 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler171, align 8
  %163 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data172 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %163, i32 0, i32 16
  %164 = load i8*, i8** %user_data172, align 8
  %165 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %166 = bitcast %struct.http_message* %165 to i8*
  call void @mg_call(%struct.mg_connection* %160, void (%struct.mg_connection*, i32, i8*)* %162, i8* %164, i32 112, i8* %166)
  %167 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %168 = load i8*, i8** %ev_data.addr, align 8
  call void @mg_ws_handler(%struct.mg_connection* %167, i32 3, i8* %168)
  br label %if.end173

if.end173:                                        ; preds = %if.end170, %if.end159
  br label %if.end272

if.else174:                                       ; preds = %land.lhs.true143, %if.else139
  %169 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %170 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %171 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %172 = load i32, i32* %req_len, align 4
  call void @deliver_chunk(%struct.mg_connection* %169, %struct.http_message* %170, %struct.mg_http_proto_data* %171, i32 %172)
  %173 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %message175 = getelementptr inbounds %struct.http_message, %struct.http_message* %173, i32 0, i32 0
  %len176 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message175, i32 0, i32 1
  %174 = load i64, i64* %len176, align 8
  %175 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %rcvd177 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %175, i32 0, i32 7
  %176 = load i64, i64* %rcvd177, align 8
  %cmp178 = icmp ugt i64 %174, %176
  br i1 %cmp178, label %land.lhs.true180, label %if.else209

land.lhs.true180:                                 ; preds = %if.else174
  %177 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %content_length = getelementptr inbounds %struct.http_message, %struct.http_message* %177, i32 0, i32 10
  %178 = load i64, i64* %content_length, align 8
  %cmp181 = icmp eq i64 %178, -1
  br i1 %cmp181, label %if.then187, label %lor.lhs.false183

lor.lhs.false183:                                 ; preds = %land.lhs.true180
  %179 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %body_rcvd = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %179, i32 0, i32 8
  %180 = load i64, i64* %body_rcvd, align 8
  %181 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %content_length184 = getelementptr inbounds %struct.http_message, %struct.http_message* %181, i32 0, i32 10
  %182 = load i64, i64* %content_length184, align 8
  %cmp185 = icmp ult i64 %180, %182
  br i1 %cmp185, label %if.then187, label %if.else209

if.then187:                                       ; preds = %lor.lhs.false183, %land.lhs.true180
  %183 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %183, i32 0, i32 7
  %184 = load i64, i64* %recv_mbuf_limit, align 8
  %cmp188 = icmp ugt i64 %184, 0
  br i1 %cmp188, label %land.lhs.true190, label %if.end208

land.lhs.true190:                                 ; preds = %if.then187
  %185 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf191 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %185, i32 0, i32 8
  %len192 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf191, i32 0, i32 1
  %186 = load i64, i64* %len192, align 8
  %187 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf_limit193 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %187, i32 0, i32 7
  %188 = load i64, i64* %recv_mbuf_limit193, align 8
  %cmp194 = icmp uge i64 %186, %188
  br i1 %cmp194, label %if.then196, label %if.end208

if.then196:                                       ; preds = %land.lhs.true190
  br label %do.body197

do.body197:                                       ; preds = %if.then196
  %call198 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6593)
  %tobool199 = icmp ne i32 %call198, 0
  br i1 %tobool199, label %if.then200, label %if.end204

if.then200:                                       ; preds = %do.body197
  %189 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %190 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf201 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %190, i32 0, i32 8
  %len202 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf201, i32 0, i32 1
  %191 = load i64, i64* %len202, align 8
  %192 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf_limit203 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %192, i32 0, i32 7
  %193 = load i64, i64* %recv_mbuf_limit203, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i32 0, i32 0), %struct.mg_connection* %189, i64 %191, i64 %193)
  br label %if.end204

if.end204:                                        ; preds = %if.then200, %do.body197
  br label %do.end205

do.end205:                                        ; preds = %if.end204
  %194 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags206 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %194, i32 0, i32 21
  %195 = load i64, i64* %flags206, align 8
  %or207 = or i64 %195, 2048
  store i64 %or207, i64* %flags206, align 8
  br label %if.end208

if.end208:                                        ; preds = %do.end205, %land.lhs.true190, %if.then187
  br label %if.end271

if.else209:                                       ; preds = %lor.lhs.false183, %if.else174
  store i32 1, i32* %request_done, align 4
  %196 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener210 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %196, i32 0, i32 2
  %197 = load %struct.mg_connection*, %struct.mg_connection** %listener210, align 8
  %tobool211 = icmp ne %struct.mg_connection* %197, null
  %cond212 = select i1 %tobool211, i32 100, i32 101
  store i32 %cond212, i32* %trigger_ev, align 4
  %198 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %198, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %addr, i32 0, i32 0
  %call213 = call i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %arraydecay, i64 32, i32 3)
  br label %do.body214

do.body214:                                       ; preds = %if.else209
  %call215 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6604)
  %tobool216 = icmp ne i32 %call215, 0
  br i1 %tobool216, label %if.then217, label %if.end228

if.then217:                                       ; preds = %do.body214
  %199 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay218 = getelementptr inbounds [32 x i8], [32 x i8]* %addr, i32 0, i32 0
  %200 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %200, i32 0, i32 2
  %len219 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %201 = load i64, i64* %len219, align 8
  %conv220 = trunc i64 %201 to i32
  %202 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %method221 = getelementptr inbounds %struct.http_message, %struct.http_message* %202, i32 0, i32 2
  %p222 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method221, i32 0, i32 0
  %203 = load i8*, i8** %p222, align 8
  %204 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %uri223 = getelementptr inbounds %struct.http_message, %struct.http_message* %204, i32 0, i32 3
  %len224 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri223, i32 0, i32 1
  %205 = load i64, i64* %len224, align 8
  %conv225 = trunc i64 %205 to i32
  %206 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %uri226 = getelementptr inbounds %struct.http_message, %struct.http_message* %206, i32 0, i32 3
  %p227 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri226, i32 0, i32 0
  %207 = load i8*, i8** %p227, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.50, i32 0, i32 0), %struct.mg_connection* %199, i8* %arraydecay218, i32 %conv220, i8* %203, i32 %conv225, i8* %207)
  br label %if.end228

if.end228:                                        ; preds = %if.then217, %do.body214
  br label %do.end229

do.end229:                                        ; preds = %if.end228
  %208 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %209 = load i32, i32* %trigger_ev, align 4
  %210 = load %struct.http_message*, %struct.http_message** %hm, align 8
  call void @mg_http_call_endpoint_handler(%struct.mg_connection* %208, i32 %209, %struct.http_message* %210)
  %211 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %212 = load i32, i32* %req_len, align 4
  %conv230 = sext i32 %212 to i64
  %213 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %body231 = getelementptr inbounds %struct.http_message, %struct.http_message* %213, i32 0, i32 1
  %len232 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body231, i32 0, i32 1
  %214 = load i64, i64* %len232, align 8
  %add = add i64 %conv230, %214
  call void @mbuf_remove(%struct.mbuf* %211, i64 %add)
  %215 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %message233 = getelementptr inbounds %struct.http_message, %struct.http_message* %215, i32 0, i32 0
  %len234 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message233, i32 0, i32 1
  %216 = load i64, i64* %len234, align 8
  %217 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %rcvd235 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %217, i32 0, i32 7
  %218 = load i64, i64* %rcvd235, align 8
  %sub236 = sub i64 %218, %216
  store i64 %sub236, i64* %rcvd235, align 8
  %219 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %body_rcvd237 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %219, i32 0, i32 8
  store i64 0, i64* %body_rcvd237, align 8
  %220 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file238 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %220, i32 0, i32 0
  %fp239 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file238, i32 0, i32 0
  %221 = load %struct.__sFILE*, %struct.__sFILE** %fp239, align 8
  %cmp240 = icmp ne %struct.__sFILE* %221, null
  br i1 %cmp240, label %if.then242, label %if.end243

if.then242:                                       ; preds = %do.end229
  store i32 0, i32* %request_done, align 4
  br label %if.end243

if.end243:                                        ; preds = %if.then242, %do.end229
  %222 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cgi244 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %222, i32 0, i32 1
  %cgi_nc245 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi244, i32 0, i32 0
  %223 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc245, align 8
  %cmp246 = icmp ne %struct.mg_connection* %223, null
  br i1 %cmp246, label %if.then248, label %if.end249

if.then248:                                       ; preds = %if.end243
  store i32 0, i32* %request_done, align 4
  br label %if.end249

if.end249:                                        ; preds = %if.then248, %if.end243
  %224 = load i32, i32* %request_done, align 4
  %225 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %finished250 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %225, i32 0, i32 10
  store i32 %224, i32* %finished250, align 8
  br label %do.body251

do.body251:                                       ; preds = %if.end249
  %call252 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6623)
  %tobool253 = icmp ne i32 %call252, 0
  br i1 %tobool253, label %if.then254, label %if.end262

if.then254:                                       ; preds = %do.body251
  %226 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %227 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %finished255 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %227, i32 0, i32 10
  %228 = load i32, i32* %finished255, align 8
  %229 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %message256 = getelementptr inbounds %struct.http_message, %struct.http_message* %229, i32 0, i32 0
  %len257 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message256, i32 0, i32 1
  %230 = load i64, i64* %len257, align 8
  %conv258 = trunc i64 %230 to i32
  %231 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %body259 = getelementptr inbounds %struct.http_message, %struct.http_message* %231, i32 0, i32 1
  %len260 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body259, i32 0, i32 1
  %232 = load i64, i64* %len260, align 8
  %conv261 = trunc i64 %232 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.51, i32 0, i32 0), %struct.mg_connection* %226, i32 %228, i32 %conv258, i32 %conv261)
  br label %if.end262

if.end262:                                        ; preds = %if.then254, %do.body251
  br label %do.end263

do.end263:                                        ; preds = %if.end262
  %233 = load i32, i32* %request_done, align 4
  %tobool264 = icmp ne i32 %233, 0
  br i1 %tobool264, label %land.lhs.true265, label %if.end270

land.lhs.true265:                                 ; preds = %do.end263
  %234 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len266 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %234, i32 0, i32 1
  %235 = load i64, i64* %len266, align 8
  %cmp267 = icmp ugt i64 %235, 0
  br i1 %cmp267, label %if.then269, label %if.end270

if.then269:                                       ; preds = %land.lhs.true265
  br label %again

if.end270:                                        ; preds = %land.lhs.true265, %do.end263
  br label %if.end271

if.end271:                                        ; preds = %if.end270, %if.end208
  br label %if.end272

if.end272:                                        ; preds = %if.end271, %if.end173
  br label %if.end273

if.end273:                                        ; preds = %if.end272, %if.end138
  br label %if.end274

if.end274:                                        ; preds = %if.end273, %if.then107
  br label %if.end275

if.end275:                                        ; preds = %if.end274, %do.end
  br label %if.end276

if.end276:                                        ; preds = %if.end275, %if.end51
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @deliver_chunk(%struct.mg_connection* %c, %struct.http_message* %hm, %struct.mg_http_proto_data* %pd, i32 %req_len) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %pd.addr = alloca %struct.mg_http_proto_data*, align 8
  %req_len.addr = alloca i32, align 4
  %body_remain = alloca i64, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_http_proto_data* %pd, %struct.mg_http_proto_data** %pd.addr, align 8
  store i32 %req_len, i32* %req_len.addr, align 4
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %1 = load i64, i64* %len, align 8
  %2 = load i32, i32* %req_len.addr, align 4
  %conv = sext i32 %2 to i64
  %sub = sub i64 %1, %conv
  %3 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %3, i32 0, i32 1
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  store i64 %sub, i64* %len1, align 8
  %4 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %content_length = getelementptr inbounds %struct.http_message, %struct.http_message* %4, i32 0, i32 10
  %5 = load i64, i64* %content_length, align 8
  %cmp = icmp ne i64 %5, -1
  br i1 %cmp, label %if.then, label %if.end12

if.then:                                          ; preds = %entry
  %6 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %content_length3 = getelementptr inbounds %struct.http_message, %struct.http_message* %6, i32 0, i32 10
  %7 = load i64, i64* %content_length3, align 8
  %8 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8
  %body_processed = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %8, i32 0, i32 9
  %9 = load i64, i64* %body_processed, align 8
  %sub4 = sub i64 %7, %9
  store i64 %sub4, i64* %body_remain, align 8
  %10 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body5 = getelementptr inbounds %struct.http_message, %struct.http_message* %10, i32 0, i32 1
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body5, i32 0, i32 1
  %11 = load i64, i64* %len6, align 8
  %12 = load i64, i64* %body_remain, align 8
  %cmp7 = icmp ugt i64 %11, %12
  br i1 %cmp7, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.then
  %13 = load i64, i64* %body_remain, align 8
  %14 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body10 = getelementptr inbounds %struct.http_message, %struct.http_message* %14, i32 0, i32 1
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body10, i32 0, i32 1
  store i64 %13, i64* %len11, align 8
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.then
  br label %if.end12

if.end12:                                         ; preds = %if.end, %entry
  %15 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8
  %cmp13 = icmp ne %struct.mg_http_proto_data* %15, null
  br i1 %cmp13, label %if.then15, label %if.end19

if.then15:                                        ; preds = %if.end12
  %16 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8
  %body_processed16 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %16, i32 0, i32 9
  %17 = load i64, i64* %body_processed16, align 8
  %18 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body17 = getelementptr inbounds %struct.http_message, %struct.http_message* %18, i32 0, i32 1
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body17, i32 0, i32 1
  %19 = load i64, i64* %len18, align 8
  %add = add i64 %17, %19
  %20 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8
  %body_rcvd = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %20, i32 0, i32 8
  store i64 %add, i64* %body_rcvd, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then15, %if.end12
  %21 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 21
  %22 = load i64, i64* %flags, align 8
  %and = and i64 %22, -8193
  store i64 %and, i64* %flags, align 8
  %23 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %24 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 15
  %25 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %26 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %26, i32 0, i32 16
  %27 = load i8*, i8** %user_data, align 8
  %28 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %29 = bitcast %struct.http_message* %28 to i8*
  call void @mg_call(%struct.mg_connection* %23, void (%struct.mg_connection*, i32, i8*)* %25, i8* %27, i32 102, i8* %29)
  %30 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %flags20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %30, i32 0, i32 21
  %31 = load i64, i64* %flags20, align 8
  %and21 = and i64 %31, 8192
  %tobool = icmp ne i64 %and21, 0
  br i1 %tobool, label %if.then22, label %if.end32

if.then22:                                        ; preds = %if.end19
  %32 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body23 = getelementptr inbounds %struct.http_message, %struct.http_message* %32, i32 0, i32 1
  %len24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body23, i32 0, i32 1
  %33 = load i64, i64* %len24, align 8
  %34 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd.addr, align 8
  %body_processed25 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %34, i32 0, i32 9
  %35 = load i64, i64* %body_processed25, align 8
  %add26 = add i64 %35, %33
  store i64 %add26, i64* %body_processed25, align 8
  %36 = load i32, i32* %req_len.addr, align 4
  %conv27 = sext i32 %36 to i64
  %37 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %recv_mbuf28 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %37, i32 0, i32 8
  %len29 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf28, i32 0, i32 1
  store i64 %conv27, i64* %len29, align 8
  %38 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body30 = getelementptr inbounds %struct.http_message, %struct.http_message* %38, i32 0, i32 1
  %len31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body30, i32 0, i32 1
  store i64 0, i64* %len31, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then22, %if.end19
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_call_endpoint_handler(%struct.mg_connection* %nc, i32 %ev, %struct.http_message* %hm) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %user_data = alloca i8*, align 8
  %ep = alloca %struct.mg_http_endpoint*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %0)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 16
  %2 = load i8*, i8** %user_data1, align 8
  store i8* %2, i8** %user_data, align 8
  %3 = load i32, i32* %ev.addr, align 4
  %cmp = icmp eq i32 %3, 100
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 2
  %5 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8
  %6 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %6, i32 0, i32 3
  %call2 = call %struct.mg_http_endpoint* @mg_http_get_endpoint_handler(%struct.mg_connection* %5, %struct.mg_str* %uri)
  store %struct.mg_http_endpoint* %call2, %struct.mg_http_endpoint** %ep, align 8
  %7 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %cmp3 = icmp ne %struct.mg_http_endpoint* %7, null
  br i1 %cmp3, label %if.then4, label %if.end9

if.then4:                                         ; preds = %if.then
  %8 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %9 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri5 = getelementptr inbounds %struct.http_message, %struct.http_message* %9, i32 0, i32 3
  %10 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %auth_domain = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %10, i32 0, i32 2
  %11 = load i8*, i8** %auth_domain, align 8
  %12 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %auth_file = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %12, i32 0, i32 3
  %13 = load i8*, i8** %auth_file, align 8
  %14 = bitcast %struct.mg_str* %uri5 to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %call6 = call i32 @mg_http_is_authorized(%struct.http_message* %8, i8* %16, i64 %18, i8* %11, i8* %13, i32 2)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.end, label %if.then7

if.then7:                                         ; preds = %if.then4
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %20 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %auth_domain8 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %20, i32 0, i32 2
  %21 = load i8*, i8** %auth_domain8, align 8
  call void @mg_http_send_digest_auth_request(%struct.mg_connection* %19, i8* %21)
  br label %return

if.end:                                           ; preds = %if.then4
  %22 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %ep, align 8
  %handler = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %22, i32 0, i32 4
  %23 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %24 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoint_handler = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %24, i32 0, i32 5
  store void (%struct.mg_connection*, i32, i8*)* %23, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %entry
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %26 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoint_handler11 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %26, i32 0, i32 5
  %27 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler11, align 8
  %tobool12 = icmp ne void (%struct.mg_connection*, i32, i8*)* %27, null
  br i1 %tobool12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end10
  %28 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoint_handler13 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %28, i32 0, i32 5
  %29 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %endpoint_handler13, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end10
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %30, i32 0, i32 15
  %31 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler14, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi void (%struct.mg_connection*, i32, i8*)* [ %29, %cond.true ], [ %31, %cond.false ]
  %32 = load i8*, i8** %user_data, align 8
  %33 = load i32, i32* %ev.addr, align 4
  %34 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %35 = bitcast %struct.http_message* %34 to i8*
  call void @mg_call(%struct.mg_connection* %25, void (%struct.mg_connection*, i32, i8*)* %cond, i8* %32, i32 %33, i8* %35)
  br label %return

return:                                           ; preds = %cond.end, %if.then7
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_transfer_file_data(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %buf = alloca [4096 x i8], align 16
  %n = alloca i64, align 8
  %to_read = alloca i64, align 8
  %left = alloca i64, align 8
  %io = alloca %struct.mbuf*, align 8
  %io59 = alloca %struct.mbuf*, align 8
  %to_write = alloca i64, align 8
  %n70 = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %0)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8
  store i64 0, i64* %n, align 8
  store i64 0, i64* %to_read, align 8
  %1 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %1, i32 0, i32 0
  %cl = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file, i32 0, i32 1
  %2 = load i64, i64* %cl, align 8
  %3 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file1 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %3, i32 0, i32 0
  %sent = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file1, i32 0, i32 2
  %4 = load i64, i64* %sent, align 8
  %sub = sub nsw i64 %2, %4
  store i64 %sub, i64* %left, align 8
  %5 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file2 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %5, i32 0, i32 0
  %type = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file2, i32 0, i32 4
  %6 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %6, 1
  br i1 %cmp, label %if.then, label %if.else53

if.then:                                          ; preds = %entry
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 9
  store %struct.mbuf* %send_mbuf, %struct.mbuf** %io, align 8
  %8 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %8, i32 0, i32 1
  %9 = load i64, i64* %len, align 8
  %cmp3 = icmp uge i64 %9, 4096
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  store i64 0, i64* %to_read, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %10 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %10, i32 0, i32 1
  %11 = load i64, i64* %len5, align 8
  %sub6 = sub i64 4096, %11
  store i64 %sub6, i64* %to_read, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  %12 = load i64, i64* %to_read, align 8
  %13 = load i64, i64* %left, align 8
  %cmp7 = icmp ugt i64 %12, %13
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  %14 = load i64, i64* %left, align 8
  store i64 %14, i64* %to_read, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end
  %15 = load i64, i64* %to_read, align 8
  %cmp10 = icmp ugt i64 %15, 0
  br i1 %cmp10, label %if.then11, label %if.else27

if.then11:                                        ; preds = %if.end9
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i32 0, i32 0
  %16 = load i64, i64* %to_read, align 8
  %17 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file12 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %17, i32 0, i32 0
  %fp = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file12, i32 0, i32 0
  %18 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call13 = call i64 @mg_fread(i8* %arraydecay, i64 1, i64 %16, %struct.__sFILE* %18)
  store i64 %call13, i64* %n, align 8
  %19 = load i64, i64* %n, align 8
  %cmp14 = icmp ugt i64 %19, 0
  br i1 %cmp14, label %if.then15, label %if.end26

if.then15:                                        ; preds = %if.then11
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay16 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i32 0, i32 0
  %21 = load i64, i64* %n, align 8
  %conv = trunc i64 %21 to i32
  call void @mg_send(%struct.mg_connection* %20, i8* %arraydecay16, i32 %conv)
  %22 = load i64, i64* %n, align 8
  %23 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file17 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %23, i32 0, i32 0
  %sent18 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file17, i32 0, i32 2
  %24 = load i64, i64* %sent18, align 8
  %add = add i64 %24, %22
  store i64 %add, i64* %sent18, align 8
  br label %do.body

do.body:                                          ; preds = %if.then15
  %call19 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6193)
  %tobool = icmp ne i32 %call19, 0
  br i1 %tobool, label %if.then20, label %if.end25

if.then20:                                        ; preds = %do.body
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %26 = load i64, i64* %n, align 8
  %conv21 = trunc i64 %26 to i32
  %27 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file22 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %27, i32 0, i32 0
  %sent23 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file22, i32 0, i32 2
  %28 = load i64, i64* %sent23, align 8
  %conv24 = trunc i64 %28 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.191, i32 0, i32 0), %struct.mg_connection* %25, i32 %conv21, i32 %conv24)
  br label %if.end25

if.end25:                                         ; preds = %if.then20, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end25
  br label %if.end26

if.end26:                                         ; preds = %do.end, %if.then11
  br label %if.end28

if.else27:                                        ; preds = %if.end9
  br label %if.end28

if.end28:                                         ; preds = %if.else27, %if.end26
  %29 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file29 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %29, i32 0, i32 0
  %sent30 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file29, i32 0, i32 2
  %30 = load i64, i64* %sent30, align 8
  %31 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file31 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %31, i32 0, i32 0
  %cl32 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file31, i32 0, i32 1
  %32 = load i64, i64* %cl32, align 8
  %cmp33 = icmp sge i64 %30, %32
  br i1 %cmp33, label %if.then35, label %if.end52

if.then35:                                        ; preds = %if.end28
  br label %do.body36

do.body36:                                        ; preds = %if.then35
  %call37 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6200)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then39, label %if.end44

if.then39:                                        ; preds = %do.body36
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %34 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file40 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %34, i32 0, i32 0
  %sent41 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file40, i32 0, i32 2
  %35 = load i64, i64* %sent41, align 8
  %conv42 = trunc i64 %35 to i32
  %36 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file43 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %36, i32 0, i32 0
  %keepalive = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file43, i32 0, i32 3
  %37 = load i32, i32* %keepalive, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.192, i32 0, i32 0), %struct.mg_connection* %33, i32 %conv42, i32 %37)
  br label %if.end44

if.end44:                                         ; preds = %if.then39, %do.body36
  br label %do.end45

do.end45:                                         ; preds = %if.end44
  %38 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file46 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %38, i32 0, i32 0
  %keepalive47 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file46, i32 0, i32 3
  %39 = load i32, i32* %keepalive47, align 8
  %tobool48 = icmp ne i32 %39, 0
  br i1 %tobool48, label %if.end50, label %if.then49

if.then49:                                        ; preds = %do.end45
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %40, i32 0, i32 21
  %41 = load i64, i64* %flags, align 8
  %or = or i64 %41, 1024
  store i64 %or, i64* %flags, align 8
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %do.end45
  %42 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file51 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %42, i32 0, i32 0
  call void @mg_http_free_proto_data_file(%struct.mg_http_proto_data_file* %file51)
  %43 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %finished = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %43, i32 0, i32 10
  store i32 1, i32* %finished, align 8
  br label %if.end52

if.end52:                                         ; preds = %if.end50, %if.end28
  br label %if.end118

if.else53:                                        ; preds = %entry
  %44 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file54 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %44, i32 0, i32 0
  %type55 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file54, i32 0, i32 4
  %45 = load i32, i32* %type55, align 4
  %cmp56 = icmp eq i32 %45, 2
  br i1 %cmp56, label %if.then58, label %if.else101

if.then58:                                        ; preds = %if.else53
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io59, align 8
  %47 = load i64, i64* %left, align 8
  %cmp60 = icmp ule i64 %47, 0
  br i1 %cmp60, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then58
  br label %cond.end68

cond.false:                                       ; preds = %if.then58
  %48 = load i64, i64* %left, align 8
  %49 = load %struct.mbuf*, %struct.mbuf** %io59, align 8
  %len62 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %49, i32 0, i32 1
  %50 = load i64, i64* %len62, align 8
  %cmp63 = icmp ult i64 %48, %50
  br i1 %cmp63, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %cond.false
  %51 = load i64, i64* %left, align 8
  br label %cond.end

cond.false66:                                     ; preds = %cond.false
  %52 = load %struct.mbuf*, %struct.mbuf** %io59, align 8
  %len67 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %52, i32 0, i32 1
  %53 = load i64, i64* %len67, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false66, %cond.true65
  %cond = phi i64 [ %51, %cond.true65 ], [ %53, %cond.false66 ]
  br label %cond.end68

cond.end68:                                       ; preds = %cond.end, %cond.true
  %cond69 = phi i64 [ 0, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond69, i64* %to_write, align 8
  %54 = load %struct.mbuf*, %struct.mbuf** %io59, align 8
  %buf71 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %54, i32 0, i32 0
  %55 = load i8*, i8** %buf71, align 8
  %56 = load i64, i64* %to_write, align 8
  %57 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file72 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %57, i32 0, i32 0
  %fp73 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file72, i32 0, i32 0
  %58 = load %struct.__sFILE*, %struct.__sFILE** %fp73, align 8
  %call74 = call i64 @mg_fwrite(i8* %55, i64 1, i64 %56, %struct.__sFILE* %58)
  store i64 %call74, i64* %n70, align 8
  %59 = load i64, i64* %n70, align 8
  %cmp75 = icmp ugt i64 %59, 0
  br i1 %cmp75, label %if.then77, label %if.end81

if.then77:                                        ; preds = %cond.end68
  %60 = load %struct.mbuf*, %struct.mbuf** %io59, align 8
  %61 = load i64, i64* %n70, align 8
  call void @mbuf_remove(%struct.mbuf* %60, i64 %61)
  %62 = load i64, i64* %n70, align 8
  %63 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file78 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %63, i32 0, i32 0
  %sent79 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file78, i32 0, i32 2
  %64 = load i64, i64* %sent79, align 8
  %add80 = add i64 %64, %62
  store i64 %add80, i64* %sent79, align 8
  br label %if.end81

if.end81:                                         ; preds = %if.then77, %cond.end68
  %65 = load i64, i64* %n70, align 8
  %cmp82 = icmp eq i64 %65, 0
  br i1 %cmp82, label %if.then90, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end81
  %66 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file84 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %66, i32 0, i32 0
  %sent85 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file84, i32 0, i32 2
  %67 = load i64, i64* %sent85, align 8
  %68 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file86 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %68, i32 0, i32 0
  %cl87 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file86, i32 0, i32 1
  %69 = load i64, i64* %cl87, align 8
  %cmp88 = icmp sge i64 %67, %69
  br i1 %cmp88, label %if.then90, label %if.end100

if.then90:                                        ; preds = %lor.lhs.false, %if.end81
  %70 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file91 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %70, i32 0, i32 0
  %keepalive92 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file91, i32 0, i32 3
  %71 = load i32, i32* %keepalive92, align 8
  %tobool93 = icmp ne i32 %71, 0
  br i1 %tobool93, label %if.end97, label %if.then94

if.then94:                                        ; preds = %if.then90
  %72 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags95 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %72, i32 0, i32 21
  %73 = load i64, i64* %flags95, align 8
  %or96 = or i64 %73, 1024
  store i64 %or96, i64* %flags95, align 8
  br label %if.end97

if.end97:                                         ; preds = %if.then94, %if.then90
  %74 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file98 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %74, i32 0, i32 0
  call void @mg_http_free_proto_data_file(%struct.mg_http_proto_data_file* %file98)
  %75 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %finished99 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %75, i32 0, i32 10
  store i32 1, i32* %finished99, align 8
  br label %if.end100

if.end100:                                        ; preds = %if.end97, %lor.lhs.false
  br label %if.end117

if.else101:                                       ; preds = %if.else53
  %76 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %76, i32 0, i32 1
  %cgi_nc = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi, i32 0, i32 0
  %77 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc, align 8
  %cmp102 = icmp ne %struct.mg_connection* %77, null
  br i1 %cmp102, label %if.then104, label %if.end116

if.then104:                                       ; preds = %if.else101
  %78 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cgi105 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %78, i32 0, i32 1
  %cgi_nc106 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi105, i32 0, i32 0
  %79 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc106, align 8
  %cmp107 = icmp ne %struct.mg_connection* %79, null
  br i1 %cmp107, label %if.then109, label %if.else112

if.then109:                                       ; preds = %if.then104
  %80 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %81 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cgi110 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %81, i32 0, i32 1
  %cgi_nc111 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi110, i32 0, i32 0
  %82 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc111, align 8
  call void @mg_forward(%struct.mg_connection* %80, %struct.mg_connection* %82)
  br label %if.end115

if.else112:                                       ; preds = %if.then104
  %83 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags113 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %83, i32 0, i32 21
  %84 = load i64, i64* %flags113, align 8
  %or114 = or i64 %84, 1024
  store i64 %or114, i64* %flags113, align 8
  br label %if.end115

if.end115:                                        ; preds = %if.else112, %if.then109
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.else101
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.end100
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.end52
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal %struct.mg_http_proto_data* @mg_http_create_proto_data(%struct.mg_connection* %c) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %pd = alloca i8*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 13
  %1 = load i8*, i8** %proto_data, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %proto_data1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 13
  %3 = load i8*, i8** %proto_data1, align 8
  store i8* %3, i8** %pd, align 8
  %4 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %proto_data2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 13
  store i8* null, i8** %proto_data2, align 8
  %5 = load i8*, i8** %pd, align 8
  call void @mg_http_proto_data_destructor(i8* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call = call i8* @calloc(i64 1, i64 112) #16
  %6 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %proto_data3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 13
  store i8* %call, i8** %proto_data3, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %proto_data_destructor = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 14
  store void (i8*)* @mg_http_proto_data_destructor, void (i8*)** %proto_data_destructor, align 8
  %8 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %proto_data4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 13
  %9 = load i8*, i8** %proto_data4, align 8
  %10 = bitcast i8* %9 to %struct.mg_http_proto_data*
  ret %struct.mg_http_proto_data* %10
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mg_handle_chunked(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %buf, i64 %blen) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %buf.addr = alloca i8*, align 8
  %blen.addr = alloca i64, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %data = alloca i8*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %data_len = alloca i64, align 8
  %body_len = alloca i64, align 8
  %zero_chunk_received = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %blen, i64* %blen.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %0)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8
  store i64 0, i64* %zero_chunk_received, align 8
  %1 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %chunk = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %1, i32 0, i32 3
  %body_len1 = getelementptr inbounds %struct.mg_http_proto_data_chuncked, %struct.mg_http_proto_data_chuncked* %chunk, i32 0, i32 0
  %2 = load i64, i64* %body_len1, align 8
  store i64 %2, i64* %body_len, align 8
  %3 = load i64, i64* %blen.addr, align 8
  %4 = load i64, i64* %body_len, align 8
  %cmp = icmp uge i64 %3, %4
  %lnot = xor i1 %cmp, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.mg_handle_chunked, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6282, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.193, i32 0, i32 0)) #13
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %5
  %6 = load i64, i64* %body_len, align 8
  store i64 %6, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load i8*, i8** %buf.addr, align 8
  %8 = load i64, i64* %i, align 8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  %9 = load i64, i64* %blen.addr, align 8
  %10 = load i64, i64* %i, align 8
  %sub = sub i64 %9, %10
  %call2 = call i64 @mg_http_parse_chunk(i8* %add.ptr, i64 %sub, i8** %data, i64* %data_len)
  store i64 %call2, i64* %n, align 8
  %cmp3 = icmp ugt i64 %call2, 0
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8*, i8** %buf.addr, align 8
  %12 = load i64, i64* %body_len, align 8
  %add.ptr5 = getelementptr inbounds i8, i8* %11, i64 %12
  %13 = load i8*, i8** %data, align 8
  %14 = load i64, i64* %data_len, align 8
  %15 = load i8*, i8** %buf.addr, align 8
  %16 = load i64, i64* %body_len, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %15, i64 %16
  %17 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr6, i1 false)
  %call7 = call i8* @__memmove_chk(i8* %add.ptr5, i8* %13, i64 %14, i64 %17) #5
  %18 = load i64, i64* %data_len, align 8
  %19 = load i64, i64* %body_len, align 8
  %add = add i64 %19, %18
  store i64 %add, i64* %body_len, align 8
  %20 = load i64, i64* %body_len, align 8
  %21 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %21, i32 0, i32 1
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  store i64 %20, i64* %len, align 8
  %22 = load i64, i64* %data_len, align 8
  %cmp8 = icmp eq i64 %22, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i64 1, i64* %zero_chunk_received, align 8
  %23 = load i64, i64* %n, align 8
  %24 = load i64, i64* %i, align 8
  %add10 = add i64 %24, %23
  store i64 %add10, i64* %i, align 8
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %25 = load i64, i64* %n, align 8
  %26 = load i64, i64* %i, align 8
  %add11 = add i64 %26, %25
  store i64 %add11, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %27 = load i64, i64* %i, align 8
  %28 = load i64, i64* %body_len, align 8
  %cmp12 = icmp ugt i64 %27, %28
  br i1 %cmp12, label %if.then14, label %if.end71

if.then14:                                        ; preds = %for.end
  %29 = load i64, i64* %i, align 8
  %30 = load i64, i64* %blen.addr, align 8
  %cmp15 = icmp ule i64 %29, %30
  %lnot17 = xor i1 %cmp15, true
  %lnot.ext18 = zext i1 %lnot17 to i32
  %conv19 = sext i32 %lnot.ext18 to i64
  %tobool20 = icmp ne i64 %conv19, 0
  br i1 %tobool20, label %cond.true21, label %cond.false22

cond.true21:                                      ; preds = %if.then14
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.mg_handle_chunked, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6302, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.194, i32 0, i32 0)) #13
  unreachable
                                                  ; No predecessors!
  br label %cond.end23

cond.false22:                                     ; preds = %if.then14
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %31
  %32 = load i8*, i8** %buf.addr, align 8
  %33 = load i64, i64* %body_len, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %32, i64 %33
  %34 = load i8*, i8** %buf.addr, align 8
  %35 = load i64, i64* %i, align 8
  %add.ptr25 = getelementptr inbounds i8, i8* %34, i64 %35
  %36 = load i64, i64* %blen.addr, align 8
  %37 = load i64, i64* %i, align 8
  %sub26 = sub i64 %36, %37
  %38 = load i8*, i8** %buf.addr, align 8
  %39 = load i64, i64* %body_len, align 8
  %add.ptr27 = getelementptr inbounds i8, i8* %38, i64 %39
  %40 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr27, i1 false)
  %call28 = call i8* @__memmove_chk(i8* %add.ptr24, i8* %add.ptr25, i64 %sub26, i64 %40) #5
  %41 = load i8*, i8** %buf.addr, align 8
  %42 = load i64, i64* %body_len, align 8
  %add.ptr29 = getelementptr inbounds i8, i8* %41, i64 %42
  %43 = load i64, i64* %blen.addr, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %add.ptr29, i64 %43
  %44 = load i64, i64* %i, align 8
  %idx.neg = sub i64 0, %44
  %add.ptr31 = getelementptr inbounds i8, i8* %add.ptr30, i64 %idx.neg
  %45 = load i64, i64* %i, align 8
  %46 = load i64, i64* %body_len, align 8
  %sub32 = sub i64 %45, %46
  %47 = load i8*, i8** %buf.addr, align 8
  %48 = load i64, i64* %body_len, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %47, i64 %48
  %49 = load i64, i64* %blen.addr, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr33, i64 %49
  %50 = load i64, i64* %i, align 8
  %idx.neg35 = sub i64 0, %50
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr34, i64 %idx.neg35
  %51 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr36, i1 false)
  %call37 = call i8* @__memset_chk(i8* %add.ptr31, i32 0, i64 %sub32, i64 %51) #5
  %52 = load i64, i64* %i, align 8
  %53 = load i64, i64* %body_len, align 8
  %sub38 = sub i64 %52, %53
  %54 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %54, i32 0, i32 8
  %len39 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %55 = load i64, i64* %len39, align 8
  %sub40 = sub i64 %55, %sub38
  store i64 %sub40, i64* %len39, align 8
  %56 = load i64, i64* %body_len, align 8
  %57 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %chunk41 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %57, i32 0, i32 3
  %body_len42 = getelementptr inbounds %struct.mg_http_proto_data_chuncked, %struct.mg_http_proto_data_chuncked* %chunk41, i32 0, i32 0
  store i64 %56, i64* %body_len42, align 8
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %58, i32 0, i32 21
  %59 = load i64, i64* %flags, align 8
  %and = and i64 %59, -8193
  store i64 %and, i64* %flags, align 8
  %60 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %61, i32 0, i32 15
  %62 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %63 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %63, i32 0, i32 16
  %64 = load i8*, i8** %user_data, align 8
  %65 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %66 = bitcast %struct.http_message* %65 to i8*
  call void @mg_call(%struct.mg_connection* %60, void (%struct.mg_connection*, i32, i8*)* %62, i8* %64, i32 102, i8* %66)
  %67 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags43 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %67, i32 0, i32 21
  %68 = load i64, i64* %flags43, align 8
  %and44 = and i64 %68, 8192
  %tobool45 = icmp ne i64 %and44, 0
  br i1 %tobool45, label %if.then46, label %if.end58

if.then46:                                        ; preds = %cond.end23
  %69 = load i8*, i8** %buf.addr, align 8
  %70 = load i64, i64* %body_len, align 8
  %71 = load i8*, i8** %buf.addr, align 8
  %72 = call i64 @llvm.objectsize.i64.p0i8(i8* %71, i1 false)
  %call47 = call i8* @__memset_chk(i8* %69, i32 0, i64 %70, i64 %72) #5
  %73 = load i8*, i8** %buf.addr, align 8
  %74 = load i8*, i8** %buf.addr, align 8
  %75 = load i64, i64* %body_len, align 8
  %add.ptr48 = getelementptr inbounds i8, i8* %74, i64 %75
  %76 = load i64, i64* %blen.addr, align 8
  %77 = load i64, i64* %i, align 8
  %sub49 = sub i64 %76, %77
  %78 = load i8*, i8** %buf.addr, align 8
  %79 = call i64 @llvm.objectsize.i64.p0i8(i8* %78, i1 false)
  %call50 = call i8* @__memmove_chk(i8* %73, i8* %add.ptr48, i64 %sub49, i64 %79) #5
  %80 = load i64, i64* %body_len, align 8
  %81 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf51 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %81, i32 0, i32 8
  %len52 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf51, i32 0, i32 1
  %82 = load i64, i64* %len52, align 8
  %sub53 = sub i64 %82, %80
  store i64 %sub53, i64* %len52, align 8
  %83 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body54 = getelementptr inbounds %struct.http_message, %struct.http_message* %83, i32 0, i32 1
  %len55 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body54, i32 0, i32 1
  store i64 0, i64* %len55, align 8
  %84 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %chunk56 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %84, i32 0, i32 3
  %body_len57 = getelementptr inbounds %struct.mg_http_proto_data_chuncked, %struct.mg_http_proto_data_chuncked* %chunk56, i32 0, i32 0
  store i64 0, i64* %body_len57, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then46, %cond.end23
  %85 = load i64, i64* %zero_chunk_received, align 8
  %tobool59 = icmp ne i64 %85, 0
  br i1 %tobool59, label %if.then60, label %if.end70

if.then60:                                        ; preds = %if.end58
  %86 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %chunk61 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %86, i32 0, i32 3
  %body_len62 = getelementptr inbounds %struct.mg_http_proto_data_chuncked, %struct.mg_http_proto_data_chuncked* %chunk61, i32 0, i32 0
  %87 = load i64, i64* %body_len62, align 8
  %88 = load i64, i64* %blen.addr, align 8
  %add63 = add i64 %87, %88
  %89 = load i64, i64* %i, align 8
  %sub64 = sub i64 %add63, %89
  %90 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body65 = getelementptr inbounds %struct.http_message, %struct.http_message* %90, i32 0, i32 1
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body65, i32 0, i32 0
  %91 = load i8*, i8** %p, align 8
  %92 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %92, i32 0, i32 0
  %p66 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 0
  %93 = load i8*, i8** %p66, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %91 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %93 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add67 = add i64 %sub64, %sub.ptr.sub
  %94 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %message68 = getelementptr inbounds %struct.http_message, %struct.http_message* %94, i32 0, i32 0
  %len69 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message68, i32 0, i32 1
  store i64 %add67, i64* %len69, align 8
  br label %if.end70

if.end70:                                         ; preds = %if.then60, %if.end58
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %for.end
  %95 = load i64, i64* %body_len, align 8
  ret i64 %95
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_ws_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %now = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %ev_data, i8** %ev_data.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 15
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 16
  %4 = load i8*, i8** %user_data, align 8
  %5 = load i32, i32* %ev.addr, align 4
  %6 = load i8*, i8** %ev_data.addr, align 8
  call void @mg_call(%struct.mg_connection* %0, void (%struct.mg_connection*, i32, i8*)* %2, i8* %4, i32 %5, i8* %6)
  %7 = load i32, i32* %ev.addr, align 4
  switch i32 %7, label %sw.default [
    i32 3, label %sw.bb
    i32 0, label %sw.bb1
  ]

sw.bb:                                            ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %sw.bb
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call i32 @mg_deliver_websocket_data(%struct.mg_connection* %8)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  %9 = load i8*, i8** %ev_data.addr, align 8
  %10 = bitcast i8* %9 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %now, align 8
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 21
  %13 = load i64, i64* %flags, align 8
  %and = and i64 %13, 256
  %tobool2 = icmp ne i64 %and, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb1
  %14 = load i64, i64* %now, align 8
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %15, i32 0, i32 10
  %16 = load i64, i64* %last_io_time, align 8
  %add = add nsw i64 %16, 5
  %cmp = icmp sgt i64 %14, %add
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send_websocket_frame(%struct.mg_connection* %17, i32 9, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i64 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb1
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end, %do.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_ws_handshake(%struct.mg_connection* %nc, %struct.mg_str* %key, %struct.http_message* %hm) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %key.addr = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %msgs = alloca [2 x i8*], align 16
  %msg_lens = alloca [2 x i64], align 16
  %sha = alloca [20 x i8], align 16
  %b64_sha = alloca [30 x i8], align 16
  %s = alloca %struct.mg_str*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.mg_str* %key, %struct.mg_str** %key.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  %arrayinit.begin = getelementptr inbounds [2 x i8*], [2 x i8*]* %msgs, i64 0, i64 0
  %0 = load %struct.mg_str*, %struct.mg_str** %key.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %0, i32 0, i32 0
  %1 = load i8*, i8** %p, align 8
  store i8* %1, i8** %arrayinit.begin, align 8
  %arrayinit.element = getelementptr inbounds i8*, i8** %arrayinit.begin, i64 1
  %2 = load i8*, i8** @mg_ws_handshake.magic, align 8
  store i8* %2, i8** %arrayinit.element, align 8
  %arrayinit.begin1 = getelementptr inbounds [2 x i64], [2 x i64]* %msg_lens, i64 0, i64 0
  %3 = load %struct.mg_str*, %struct.mg_str** %key.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 1
  %4 = load i64, i64* %len, align 8
  store i64 %4, i64* %arrayinit.begin1, align 8
  %arrayinit.element2 = getelementptr inbounds i64, i64* %arrayinit.begin1, i64 1
  store i64 36, i64* %arrayinit.element2, align 8
  %arraydecay = getelementptr inbounds [2 x i8*], [2 x i8*]* %msgs, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [2 x i64], [2 x i64]* %msg_lens, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [20 x i8], [20 x i8]* %sha, i32 0, i32 0
  call void @mg_hash_sha1_v(i64 2, i8** %arraydecay, i64* %arraydecay3, i8* %arraydecay4)
  %arraydecay5 = getelementptr inbounds [20 x i8], [20 x i8]* %sha, i32 0, i32 0
  %arraydecay6 = getelementptr inbounds [30 x i8], [30 x i8]* %b64_sha, i32 0, i32 0
  call void @mg_base64_encode(i8* %arraydecay5, i32 20, i8* %arraydecay6)
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %5, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.394, i32 0, i32 0))
  %6 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call7 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %6, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.395, i32 0, i32 0))
  store %struct.mg_str* %call7, %struct.mg_str** %s, align 8
  %7 = load %struct.mg_str*, %struct.mg_str** %s, align 8
  %cmp = icmp ne %struct.mg_str* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %9 = load %struct.mg_str*, %struct.mg_str** %s, align 8
  %len8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %9, i32 0, i32 1
  %10 = load i64, i64* %len8, align 8
  %conv = trunc i64 %10 to i32
  %11 = load %struct.mg_str*, %struct.mg_str** %s, align 8
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %11, i32 0, i32 0
  %12 = load i8*, i8** %p9, align 8
  %call10 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %8, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.137, i32 0, i32 0), i32 %conv, i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay11 = getelementptr inbounds [30 x i8], [30 x i8]* %b64_sha, i32 0, i32 0
  %call12 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %13, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.396, i32 0, i32 0), i8* %arraydecay11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.397, i32 0, i32 0))
  br label %do.body

do.body:                                          ; preds = %if.end
  %call13 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10229)
  %tobool = icmp ne i32 %call13, 0
  br i1 %tobool, label %if.then14, label %if.end19

if.then14:                                        ; preds = %do.body
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %15 = load %struct.mg_str*, %struct.mg_str** %key.addr, align 8
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %15, i32 0, i32 1
  %16 = load i64, i64* %len15, align 8
  %conv16 = trunc i64 %16 to i32
  %17 = load %struct.mg_str*, %struct.mg_str** %key.addr, align 8
  %p17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %17, i32 0, i32 0
  %18 = load i8*, i8** %p17, align 8
  %arraydecay18 = getelementptr inbounds [30 x i8], [30 x i8]* %b64_sha, i32 0, i32 0
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.398, i32 0, i32 0), %struct.mg_connection* %14, i32 %conv16, i8* %18, i8* %arraydecay18)
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end19
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_set_protocol_http_websocket(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @mg_http_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i8* @mg_status_message(i32 %status_code) #0 {
entry:
  %retval = alloca i8*, align 8
  %status_code.addr = alloca i32, align 4
  store i32 %status_code, i32* %status_code.addr, align 4
  %0 = load i32, i32* %status_code.addr, align 4
  switch i32 %0, label %sw.default [
    i32 206, label %sw.bb
    i32 301, label %sw.bb1
    i32 302, label %sw.bb2
    i32 400, label %sw.bb3
    i32 401, label %sw.bb4
    i32 403, label %sw.bb5
    i32 404, label %sw.bb6
    i32 416, label %sw.bb7
    i32 418, label %sw.bb8
    i32 500, label %sw.bb9
    i32 502, label %sw.bb10
    i32 503, label %sw.bb11
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.52, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.56, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.58, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb7:                                           ; preds = %entry
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.59, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb8:                                           ; preds = %entry
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.60, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb9:                                           ; preds = %entry
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.61, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb10:                                          ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.62, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb11:                                          ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.63, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.default:                                       ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64, i32 0, i32 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.default, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8
  ret i8* %1
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_response_line_s(%struct.mg_connection* %nc, i32 %status_code, i8* %extra_headers.coerce0, i64 %extra_headers.coerce1) #0 {
entry:
  %extra_headers = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %status_code.addr = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %extra_headers to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %extra_headers.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %extra_headers.coerce1, i64* %2, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %status_code, i32* %status_code.addr, align 4
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %4 = load i32, i32* %status_code.addr, align 4
  %5 = load i32, i32* %status_code.addr, align 4
  %call = call i8* @mg_status_message(i32 %5)
  %call1 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.65, i32 0, i32 0), i32 %4, i8* %call)
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %7 = load i8*, i8** @mg_version_header, align 8
  %call2 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.66, i32 0, i32 0), i8* %7)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %8 = load i64, i64* %len, align 8
  %cmp = icmp ugt i64 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %10 = load i64, i64* %len3, align 8
  %conv = trunc i64 %10 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8
  %call4 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i32 0, i32 0), i32 %conv, i8* %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_response_line(%struct.mg_connection* %nc, i32 %status_code, i8* %extra_headers) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %status_code.addr = alloca i32, align 4
  %extra_headers.addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %status_code, i32* %status_code.addr, align 4
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i32, i32* %status_code.addr, align 4
  %2 = load i8*, i8** %extra_headers.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* %2)
  %3 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = extractvalue { i8*, i64 } %call, 0
  store i8* %5, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = extractvalue { i8*, i64 } %call, 1
  store i64 %7, i64* %6, align 8
  %8 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  call void @mg_send_response_line_s(%struct.mg_connection* %0, i32 %1, i8* %10, i64 %12)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_http_send_redirect(%struct.mg_connection* %nc, i32 %status_code, i8* %location.coerce0, i64 %location.coerce1, i8* %extra_headers.coerce0, i64 %extra_headers.coerce1) #0 {
entry:
  %location = alloca %struct.mg_str, align 8
  %extra_headers = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %status_code.addr = alloca i32, align 4
  %bbody = alloca [100 x i8], align 16
  %pbody = alloca i8*, align 8
  %bl = alloca i32, align 4
  %bhead = alloca [150 x i8], align 16
  %phead = alloca i8*, align 8
  %0 = bitcast %struct.mg_str* %location to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %location.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %location.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %extra_headers to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %extra_headers.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %extra_headers.coerce1, i64* %5, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %status_code, i32* %status_code.addr, align 4
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %bbody, i32 0, i32 0
  store i8* %arraydecay, i8** %pbody, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %location, i32 0, i32 1
  %6 = load i64, i64* %len, align 8
  %conv = trunc i64 %6 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %location, i32 0, i32 0
  %7 = load i8*, i8** %p, align 8
  %call = call i32 (i8**, i64, i8*, ...) @mg_asprintf(i8** %pbody, i64 100, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.68, i32 0, i32 0), i32 %conv, i8* %7)
  store i32 %call, i32* %bl, align 4
  %arraydecay1 = getelementptr inbounds [150 x i8], [150 x i8]* %bhead, i32 0, i32 0
  store i8* %arraydecay1, i8** %phead, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %location, i32 0, i32 1
  %8 = load i64, i64* %len2, align 8
  %conv3 = trunc i64 %8 to i32
  %p4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %location, i32 0, i32 0
  %9 = load i8*, i8** %p4, align 8
  %10 = load i32, i32* %bl, align 4
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %11 = load i64, i64* %len5, align 8
  %conv6 = trunc i64 %11 to i32
  %p7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 0
  %12 = load i8*, i8** %p7, align 8
  %len8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %13 = load i64, i64* %len8, align 8
  %cmp = icmp ugt i64 %13, 0
  %cond = select i1 %cmp, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0)
  %call10 = call i32 (i8**, i64, i8*, ...) @mg_asprintf(i8** %phead, i64 150, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.69, i32 0, i32 0), i32 %conv3, i8* %9, i32 %10, i32 %conv6, i8* %12, i8* %cond)
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %15 = load i32, i32* %status_code.addr, align 4
  %16 = load i8*, i8** %phead, align 8
  call void @mg_send_response_line(%struct.mg_connection* %14, i32 %15, i8* %16)
  %17 = load i8*, i8** %phead, align 8
  %arraydecay11 = getelementptr inbounds [150 x i8], [150 x i8]* %bhead, i32 0, i32 0
  %cmp12 = icmp ne i8* %17, %arraydecay11
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %18 = load i8*, i8** %phead, align 8
  call void @free(i8* %18)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %20 = load i8*, i8** %pbody, align 8
  %21 = load i32, i32* %bl, align 4
  call void @mg_send(%struct.mg_connection* %19, i8* %20, i32 %21)
  %22 = load i8*, i8** %pbody, align 8
  %arraydecay14 = getelementptr inbounds [100 x i8], [100 x i8]* %bbody, i32 0, i32 0
  %cmp15 = icmp ne i8* %22, %arraydecay14
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end
  %23 = load i8*, i8** %pbody, align 8
  call void @free(i8* %23)
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_head(%struct.mg_connection* %c, i32 %status_code, i64 %content_length, i8* %extra_headers) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %status_code.addr = alloca i32, align 4
  %content_length.addr = alloca i64, align 8
  %extra_headers.addr = alloca i8*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i32 %status_code, i32* %status_code.addr, align 4
  store i64 %content_length, i64* %content_length.addr, align 8
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i32, i32* %status_code.addr, align 4
  %2 = load i8*, i8** %extra_headers.addr, align 8
  call void @mg_send_response_line(%struct.mg_connection* %0, i32 %1, i8* %2)
  %3 = load i64, i64* %content_length.addr, align 8
  %cmp = icmp slt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.71, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %6 = load i64, i64* %content_length.addr, align 8
  %call1 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.72, i32 0, i32 0), i64 %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  call void @mg_send(%struct.mg_connection* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_http_send_error(%struct.mg_connection* %nc, i32 %code, i8* %reason) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %code.addr = alloca i32, align 4
  %reason.addr = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %code, i32* %code.addr, align 4
  store i8* %reason, i8** %reason.addr, align 8
  %0 = load i8*, i8** %reason.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %code.addr, align 4
  %call = call i8* @mg_status_message(i32 %1)
  store i8* %call, i8** %reason.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %call1 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7114)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.body
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load i32, i32* %code.addr, align 4
  %4 = load i8*, i8** %reason.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.73, i32 0, i32 0), %struct.mg_connection* %2, i32 %3, i8* %4)
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end4
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %6 = load i32, i32* %code.addr, align 4
  %7 = load i8*, i8** %reason.addr, align 8
  %call5 = call i64 @strlen(i8* %7)
  call void @mg_send_head(%struct.mg_connection* %5, i32 %6, i64 %call5, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.74, i32 0, i32 0))
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %9 = load i8*, i8** %reason.addr, align 8
  %10 = load i8*, i8** %reason.addr, align 8
  %call6 = call i64 @strlen(i8* %10)
  %conv = trunc i64 %call6 to i32
  call void @mg_send(%struct.mg_connection* %8, i8* %9, i32 %conv)
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags, align 8
  %or = or i64 %12, 1024
  store i64 %or, i64* %flags, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_http_serve_file_internal(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %path, i8* %mime_type.coerce0, i64 %mime_type.coerce1, %struct.mg_str* byval align 8 %encoding, %struct.mg_str* byval align 8 %extra_headers) #0 {
entry:
  %mime_type = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path.addr = alloca i8*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %st = alloca %struct.stat, align 8
  %code = alloca i32, align 4
  %err = alloca i32, align 4
  %etag = alloca [50 x i8], align 16
  %current_time = alloca [50 x i8], align 16
  %last_modified = alloca [50 x i8], align 16
  %range = alloca [70 x i8], align 16
  %t = alloca i64, align 8
  %r1 = alloca i64, align 8
  %r2 = alloca i64, align 8
  %cl = alloca i64, align 8
  %range_hdr = alloca %struct.mg_str*, align 8
  %n = alloca i32, align 4
  %status_code = alloca i32, align 4
  %conn_hdr = alloca %struct.mg_str*, align 8
  %0 = bitcast %struct.mg_str* %mime_type to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %mime_type.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %mime_type.coerce1, i64* %2, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %3)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7161)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %5 = load i8*, i8** %path.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 1
  %6 = load i64, i64* %len, align 8
  %conv = trunc i64 %6 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 0
  %7 = load i8*, i8** %p, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %8 = load i64, i64* %len2, align 8
  %conv3 = trunc i64 %8 to i32
  %p4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 0
  %9 = load i8*, i8** %p4, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.75, i32 0, i32 0), %struct.mg_connection* %4, i8* %5, i32 %conv, i8* %7, i32 %conv3, i8* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load i8*, i8** %path.addr, align 8
  %call5 = call i32 @mg_stat(i8* %10, %struct.stat* %st)
  %cmp = icmp ne i32 %call5, 0
  br i1 %cmp, label %if.then10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %11 = load i8*, i8** %path.addr, align 8
  %call7 = call %struct.__sFILE* @mg_fopen(i8* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0))
  %12 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %12, i32 0, i32 0
  %fp = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file, i32 0, i32 0
  store %struct.__sFILE* %call7, %struct.__sFILE** %fp, align 8
  %cmp8 = icmp eq %struct.__sFILE* %call7, null
  br i1 %cmp8, label %if.then10, label %if.else

if.then10:                                        ; preds = %lor.lhs.false, %do.end
  %call11 = call i32 @mg_get_errno()
  store i32 %call11, i32* %err, align 4
  %13 = load i32, i32* %err, align 4
  switch i32 %13, label %sw.default [
    i32 13, label %sw.bb
    i32 2, label %sw.bb12
  ]

sw.bb:                                            ; preds = %if.then10
  store i32 403, i32* %code, align 4
  br label %sw.epilog

sw.bb12:                                          ; preds = %if.then10
  store i32 404, i32* %code, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.then10
  store i32 500, i32* %code, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb12, %sw.bb
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %15 = load i32, i32* %code, align 4
  call void @mg_http_send_error(%struct.mg_connection* %14, i32 %15, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.77, i32 0, i32 0))
  br label %if.end93

if.else:                                          ; preds = %lor.lhs.false
  %call13 = call double @mg_time()
  %conv14 = fptosi double %call13 to i64
  store i64 %conv14, i64* %t, align 8
  store i64 0, i64* %r1, align 8
  store i64 0, i64* %r2, align 8
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 15
  %16 = load i64, i64* %st_size, align 8
  store i64 %16, i64* %cl, align 8
  %17 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call15 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i32 0, i32 0))
  store %struct.mg_str* %call15, %struct.mg_str** %range_hdr, align 8
  store i32 200, i32* %status_code, align 4
  %arrayidx = getelementptr inbounds [70 x i8], [70 x i8]* %range, i64 0, i64 0
  store i8 0, i8* %arrayidx, align 16
  %18 = load %struct.mg_str*, %struct.mg_str** %range_hdr, align 8
  %cmp16 = icmp ne %struct.mg_str* %18, null
  br i1 %cmp16, label %land.lhs.true, label %if.end51

land.lhs.true:                                    ; preds = %if.else
  %19 = load %struct.mg_str*, %struct.mg_str** %range_hdr, align 8
  %call18 = call i32 @mg_http_parse_range_header(%struct.mg_str* %19, i64* %r1, i64* %r2)
  store i32 %call18, i32* %n, align 4
  %cmp19 = icmp sgt i32 %call18, 0
  br i1 %cmp19, label %land.lhs.true21, label %if.end51

land.lhs.true21:                                  ; preds = %land.lhs.true
  %20 = load i64, i64* %r1, align 8
  %cmp22 = icmp sge i64 %20, 0
  br i1 %cmp22, label %land.lhs.true24, label %if.end51

land.lhs.true24:                                  ; preds = %land.lhs.true21
  %21 = load i64, i64* %r2, align 8
  %cmp25 = icmp sge i64 %21, 0
  br i1 %cmp25, label %if.then27, label %if.end51

if.then27:                                        ; preds = %land.lhs.true24
  %22 = load i32, i32* %n, align 4
  %cmp28 = icmp eq i32 %22, 1
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.then27
  %23 = load i64, i64* %cl, align 8
  %sub = sub nsw i64 %23, 1
  store i64 %sub, i64* %r2, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %if.then27
  %24 = load i64, i64* %r1, align 8
  %25 = load i64, i64* %r2, align 8
  %cmp32 = icmp sgt i64 %24, %25
  br i1 %cmp32, label %if.then37, label %lor.lhs.false34

lor.lhs.false34:                                  ; preds = %if.end31
  %26 = load i64, i64* %r2, align 8
  %27 = load i64, i64* %cl, align 8
  %cmp35 = icmp sge i64 %26, %27
  br i1 %cmp35, label %if.then37, label %if.else40

if.then37:                                        ; preds = %lor.lhs.false34, %if.end31
  store i32 416, i32* %status_code, align 4
  store i64 0, i64* %cl, align 8
  %arraydecay = getelementptr inbounds [70 x i8], [70 x i8]* %range, i32 0, i32 0
  %st_size38 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 15
  %28 = load i64, i64* %st_size38, align 8
  %call39 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 70, i32 0, i64 70, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.79, i32 0, i32 0), i64 %28)
  br label %if.end50

if.else40:                                        ; preds = %lor.lhs.false34
  store i32 206, i32* %status_code, align 4
  %29 = load i64, i64* %r2, align 8
  %30 = load i64, i64* %r1, align 8
  %sub41 = sub nsw i64 %29, %30
  %add = add nsw i64 %sub41, 1
  store i64 %add, i64* %cl, align 8
  %arraydecay42 = getelementptr inbounds [70 x i8], [70 x i8]* %range, i32 0, i32 0
  %31 = load i64, i64* %r1, align 8
  %32 = load i64, i64* %r1, align 8
  %33 = load i64, i64* %cl, align 8
  %add43 = add nsw i64 %32, %33
  %sub44 = sub nsw i64 %add43, 1
  %st_size45 = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 15
  %34 = load i64, i64* %st_size45, align 8
  %call46 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay42, i64 70, i32 0, i64 70, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.80, i32 0, i32 0), i64 %31, i64 %sub44, i64 %34)
  %35 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file47 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %35, i32 0, i32 0
  %fp48 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file47, i32 0, i32 0
  %36 = load %struct.__sFILE*, %struct.__sFILE** %fp48, align 8
  %37 = load i64, i64* %r1, align 8
  %call49 = call i32 @fseeko(%struct.__sFILE* %36, i64 %37, i32 0)
  br label %if.end50

if.end50:                                         ; preds = %if.else40, %if.then37
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %land.lhs.true24, %land.lhs.true21, %land.lhs.true, %if.else
  %38 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call52 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %38, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i32 0, i32 0))
  store %struct.mg_str* %call52, %struct.mg_str** %conn_hdr, align 8
  %39 = load %struct.mg_str*, %struct.mg_str** %conn_hdr, align 8
  %cmp53 = icmp ne %struct.mg_str* %39, null
  br i1 %cmp53, label %if.then55, label %if.else60

if.then55:                                        ; preds = %if.end51
  %40 = load %struct.mg_str*, %struct.mg_str** %conn_hdr, align 8
  %call56 = call i32 @mg_vcasecmp(%struct.mg_str* %40, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0))
  %cmp57 = icmp eq i32 %call56, 0
  %conv58 = zext i1 %cmp57 to i32
  %41 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file59 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %41, i32 0, i32 0
  %keepalive = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file59, i32 0, i32 3
  store i32 %conv58, i32* %keepalive, align 8
  br label %if.end66

if.else60:                                        ; preds = %if.end51
  %42 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %proto = getelementptr inbounds %struct.http_message, %struct.http_message* %42, i32 0, i32 4
  %call61 = call i32 @mg_vcmp(%struct.mg_str* %proto, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.83, i32 0, i32 0))
  %cmp62 = icmp eq i32 %call61, 0
  %conv63 = zext i1 %cmp62 to i32
  %43 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file64 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %43, i32 0, i32 0
  %keepalive65 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file64, i32 0, i32 3
  store i32 %conv63, i32* %keepalive65, align 8
  br label %if.end66

if.end66:                                         ; preds = %if.else60, %if.then55
  %arraydecay67 = getelementptr inbounds [50 x i8], [50 x i8]* %etag, i32 0, i32 0
  call void @mg_http_construct_etag(i8* %arraydecay67, i64 50, %struct.stat* %st)
  %arraydecay68 = getelementptr inbounds [50 x i8], [50 x i8]* %current_time, i32 0, i32 0
  call void @mg_gmt_time_string(i8* %arraydecay68, i64 50, i64* %t)
  %arraydecay69 = getelementptr inbounds [50 x i8], [50 x i8]* %last_modified, i32 0, i32 0
  %st_mtime = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 9
  call void @mg_gmt_time_string(i8* %arraydecay69, i64 50, i64* %st_mtime)
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %45 = load i32, i32* %status_code, align 4
  %46 = bitcast %struct.mg_str* %extra_headers to { i8*, i64 }*
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  call void @mg_send_response_line_s(%struct.mg_connection* %44, i32 %45, i8* %48, i64 %50)
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay70 = getelementptr inbounds [50 x i8], [50 x i8]* %current_time, i32 0, i32 0
  %arraydecay71 = getelementptr inbounds [50 x i8], [50 x i8]* %last_modified, i32 0, i32 0
  %len72 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 1
  %52 = load i64, i64* %len72, align 8
  %conv73 = trunc i64 %52 to i32
  %p74 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 0
  %53 = load i8*, i8** %p74, align 8
  %54 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file75 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %54, i32 0, i32 0
  %keepalive76 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file75, i32 0, i32 3
  %55 = load i32, i32* %keepalive76, align 8
  %tobool77 = icmp ne i32 %55, 0
  %cond = select i1 %tobool77, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0)
  %56 = load i64, i64* %cl, align 8
  %arraydecay78 = getelementptr inbounds [70 x i8], [70 x i8]* %range, i32 0, i32 0
  %arraydecay79 = getelementptr inbounds [50 x i8], [50 x i8]* %etag, i32 0, i32 0
  %call80 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %51, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.84, i32 0, i32 0), i8* %arraydecay70, i8* %arraydecay71, i32 %conv73, i8* %53, i8* %cond, i64 %56, i8* %arraydecay78, i8* %arraydecay79)
  %len81 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %57 = load i64, i64* %len81, align 8
  %cmp82 = icmp ugt i64 %57, 0
  br i1 %cmp82, label %if.then84, label %if.end89

if.then84:                                        ; preds = %if.end66
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %len85 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %59 = load i64, i64* %len85, align 8
  %conv86 = trunc i64 %59 to i32
  %p87 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 0
  %60 = load i8*, i8** %p87, align 8
  %call88 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %58, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.86, i32 0, i32 0), i32 %conv86, i8* %60)
  br label %if.end89

if.end89:                                         ; preds = %if.then84, %if.end66
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send(%struct.mg_connection* %61, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %62 = load i64, i64* %cl, align 8
  %63 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file90 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %63, i32 0, i32 0
  %cl91 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file90, i32 0, i32 1
  store i64 %62, i64* %cl91, align 8
  %64 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file92 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %64, i32 0, i32 0
  %type = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %file92, i32 0, i32 4
  store i32 1, i32* %type, align 4
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_transfer_file_data(%struct.mg_connection* %65)
  br label %if.end93

if.end93:                                         ; preds = %if.end89, %sw.epilog
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_stat(i8* %path, %struct.stat* %st) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %st.addr = alloca %struct.stat*, align 8
  store i8* %path, i8** %path.addr, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  %0 = load i8*, i8** %path.addr, align 8
  %1 = load %struct.stat*, %struct.stat** %st.addr, align 8
  %call = call i32 @"\01_stat$INODE64"(i8* %0, %struct.stat* %1)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.__sFILE* @mg_fopen(i8* %path, i8* %mode) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %mode.addr = alloca i8*, align 8
  store i8* %path, i8** %path.addr, align 8
  store i8* %mode, i8** %mode.addr, align 8
  %0 = load i8*, i8** %path.addr, align 8
  %1 = load i8*, i8** %mode.addr, align 8
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %0, i8* %1)
  ret %struct.__sFILE* %call
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_http_parse_range_header(%struct.mg_str* %header, i64* %a, i64* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %header.addr = alloca %struct.mg_str*, align 8
  %a.addr = alloca i64*, align 8
  %b.addr = alloca i64*, align 8
  %result = alloca i32, align 4
  %p = alloca i8*, align 8
  store %struct.mg_str* %header, %struct.mg_str** %header.addr, align 8
  store i64* %a, i64** %a.addr, align 8
  store i64* %b, i64** %b.addr, align 8
  %0 = load %struct.mg_str*, %struct.mg_str** %header.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %0, i32 0, i32 1
  %1 = load i64, i64* %len, align 8
  %add = add i64 %1, 1
  %call = call i8* @malloc(i64 %add) #14
  store i8* %call, i8** %p, align 8
  %2 = load i8*, i8** %p, align 8
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %p, align 8
  %4 = load %struct.mg_str*, %struct.mg_str** %header.addr, align 8
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %4, i32 0, i32 0
  %5 = load i8*, i8** %p1, align 8
  %6 = load %struct.mg_str*, %struct.mg_str** %header.addr, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %6, i32 0, i32 1
  %7 = load i64, i64* %len2, align 8
  %8 = load i8*, i8** %p, align 8
  %9 = call i64 @llvm.objectsize.i64.p0i8(i8* %8, i1 false)
  %call3 = call i8* @__memcpy_chk(i8* %3, i8* %5, i64 %7, i64 %9) #5
  %10 = load i8*, i8** %p, align 8
  %11 = load %struct.mg_str*, %struct.mg_str** %header.addr, align 8
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %11, i32 0, i32 1
  %12 = load i64, i64* %len4, align 8
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %12
  store i8 0, i8* %arrayidx, align 1
  %13 = load i8*, i8** %p, align 8
  %14 = load i64*, i64** %a.addr, align 8
  %15 = load i64*, i64** %b.addr, align 8
  %call5 = call i32 (i8*, i8*, ...) @sscanf(i8* %13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.196, i32 0, i32 0), i64* %14, i64* %15)
  store i32 %call5, i32* %result, align 4
  %16 = load i8*, i8** %p, align 8
  call void @free(i8* %16)
  %17 = load i32, i32* %result, align 4
  store i32 %17, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

declare i32 @__snprintf_chk(i8*, i64, i32, i64, i8*, ...) #3

declare i32 @fseeko(%struct.__sFILE*, i64, i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_construct_etag(i8* %buf, i64 %buf_len, %struct.stat* %st) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %st.addr = alloca %struct.stat*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  %1 = load i64, i64* %buf_len.addr, align 8
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = call i64 @llvm.objectsize.i64.p0i8(i8* %2, i1 false)
  %4 = load %struct.stat*, %struct.stat** %st.addr, align 8
  %st_mtime = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 9
  %5 = load i64, i64* %st_mtime, align 8
  %6 = load %struct.stat*, %struct.stat** %st.addr, align 8
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 15
  %7 = load i64, i64* %st_size, align 8
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %0, i64 %1, i32 0, i64 %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.197, i32 0, i32 0), i64 %5, i64 %7)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_gmt_time_string(i8* %buf, i64 %buf_len, i64* %t) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %t.addr = alloca i64*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  store i64* %t, i64** %t.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  %1 = load i64, i64* %buf_len.addr, align 8
  %2 = load i64*, i64** %t.addr, align 8
  %call = call %struct.tm* @gmtime(i64* %2)
  %call1 = call i64 @"\01_strftime"(i8* %0, i64 %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.198, i32 0, i32 0), %struct.tm* %call)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_http_serve_file(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %path, i8* %mime_type.coerce0, i64 %mime_type.coerce1, %struct.mg_str* byval align 8 %extra_headers) #0 {
entry:
  %mime_type = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path.addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %mime_type to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %mime_type.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %mime_type.coerce1, i64* %2, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %4 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %5 = load i8*, i8** %path.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* null)
  %6 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  %8 = extractvalue { i8*, i64 } %call, 0
  store i8* %8, i8** %7, align 8
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  %10 = extractvalue { i8*, i64 } %call, 1
  store i64 %10, i64* %9, align 8
  %11 = bitcast %struct.mg_str* %mime_type to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  call void @mg_http_serve_file_internal(%struct.mg_connection* %3, %struct.http_message* %4, i8* %5, i8* %13, i64 %15, %struct.mg_str* byval align 8 %agg.tmp, %struct.mg_str* byval align 8 %extra_headers)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_url_decode(i8* %src, i32 %src_len, i8* %dst, i32 %dst_len, i32 %is_form_url_encoded) #0 {
entry:
  %retval = alloca i32, align 4
  %src.addr = alloca i8*, align 8
  %src_len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i32, align 4
  %is_form_url_encoded.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  store i32 %src_len, i32* %src_len.addr, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i32 %dst_len, i32* %dst_len.addr, align 4
  store i32 %is_form_url_encoded, i32* %is_form_url_encoded.addr, align 4
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %src_len.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %2 = load i32, i32* %j, align 4
  %3 = load i32, i32* %dst_len.addr, align 4
  %sub = sub nsw i32 %3, 1
  %cmp1 = icmp slt i32 %2, %sub
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %4 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %5 = load i8*, i8** %src.addr, align 8
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %7 to i32
  %cmp2 = icmp eq i32 %conv, 37
  br i1 %cmp2, label %if.then, label %if.else42

if.then:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %src_len.addr, align 4
  %sub4 = sub nsw i32 %9, 2
  %cmp5 = icmp slt i32 %8, %sub4
  br i1 %cmp5, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %10 = load i8*, i8** %src.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %11 to i64
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  %add.ptr7 = getelementptr inbounds i8, i8* %add.ptr, i64 1
  %12 = load i8, i8* %add.ptr7, align 1
  %conv8 = zext i8 %12 to i32
  %call = call i32 @isxdigit(i32 %conv8) #15
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true9, label %if.else

land.lhs.true9:                                   ; preds = %land.lhs.true
  %13 = load i8*, i8** %src.addr, align 8
  %14 = load i32, i32* %i, align 4
  %idx.ext10 = sext i32 %14 to i64
  %add.ptr11 = getelementptr inbounds i8, i8* %13, i64 %idx.ext10
  %add.ptr12 = getelementptr inbounds i8, i8* %add.ptr11, i64 2
  %15 = load i8, i8* %add.ptr12, align 1
  %conv13 = zext i8 %15 to i32
  %call14 = call i32 @isxdigit(i32 %conv13) #15
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.else

if.then16:                                        ; preds = %land.lhs.true9
  %16 = load i8*, i8** %src.addr, align 8
  %17 = load i32, i32* %i, align 4
  %idx.ext17 = sext i32 %17 to i64
  %add.ptr18 = getelementptr inbounds i8, i8* %16, i64 %idx.ext17
  %add.ptr19 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  %18 = load i8, i8* %add.ptr19, align 1
  %conv20 = zext i8 %18 to i32
  %call21 = call i32 @tolower(i32 %conv20) #15
  store i32 %call21, i32* %a, align 4
  %19 = load i8*, i8** %src.addr, align 8
  %20 = load i32, i32* %i, align 4
  %idx.ext22 = sext i32 %20 to i64
  %add.ptr23 = getelementptr inbounds i8, i8* %19, i64 %idx.ext22
  %add.ptr24 = getelementptr inbounds i8, i8* %add.ptr23, i64 2
  %21 = load i8, i8* %add.ptr24, align 1
  %conv25 = zext i8 %21 to i32
  %call26 = call i32 @tolower(i32 %conv25) #15
  store i32 %call26, i32* %b, align 4
  %22 = load i32, i32* %a, align 4
  %call27 = call i32 @isdigit(i32 %22) #15
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then16
  %23 = load i32, i32* %a, align 4
  %sub29 = sub nsw i32 %23, 48
  br label %cond.end

cond.false:                                       ; preds = %if.then16
  %24 = load i32, i32* %a, align 4
  %sub30 = sub nsw i32 %24, 87
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub29, %cond.true ], [ %sub30, %cond.false ]
  %shl = shl i32 %cond, 4
  %25 = load i32, i32* %b, align 4
  %call31 = call i32 @isdigit(i32 %25) #15
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %cond.true33, label %cond.false35

cond.true33:                                      ; preds = %cond.end
  %26 = load i32, i32* %b, align 4
  %sub34 = sub nsw i32 %26, 48
  br label %cond.end37

cond.false35:                                     ; preds = %cond.end
  %27 = load i32, i32* %b, align 4
  %sub36 = sub nsw i32 %27, 87
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false35, %cond.true33
  %cond38 = phi i32 [ %sub34, %cond.true33 ], [ %sub36, %cond.false35 ]
  %or = or i32 %shl, %cond38
  %conv39 = trunc i32 %or to i8
  %28 = load i8*, i8** %dst.addr, align 8
  %29 = load i32, i32* %j, align 4
  %idxprom40 = sext i32 %29 to i64
  %arrayidx41 = getelementptr inbounds i8, i8* %28, i64 %idxprom40
  store i8 %conv39, i8* %arrayidx41, align 1
  %30 = load i32, i32* %i, align 4
  %add = add nsw i32 %30, 2
  store i32 %add, i32* %i, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true9, %land.lhs.true, %if.then
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %cond.end37
  br label %if.end59

if.else42:                                        ; preds = %for.body
  %31 = load i32, i32* %is_form_url_encoded.addr, align 4
  %tobool43 = icmp ne i32 %31, 0
  br i1 %tobool43, label %land.lhs.true44, label %if.else53

land.lhs.true44:                                  ; preds = %if.else42
  %32 = load i8*, i8** %src.addr, align 8
  %33 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %33 to i64
  %arrayidx46 = getelementptr inbounds i8, i8* %32, i64 %idxprom45
  %34 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %34 to i32
  %cmp48 = icmp eq i32 %conv47, 43
  br i1 %cmp48, label %if.then50, label %if.else53

if.then50:                                        ; preds = %land.lhs.true44
  %35 = load i8*, i8** %dst.addr, align 8
  %36 = load i32, i32* %j, align 4
  %idxprom51 = sext i32 %36 to i64
  %arrayidx52 = getelementptr inbounds i8, i8* %35, i64 %idxprom51
  store i8 32, i8* %arrayidx52, align 1
  br label %if.end58

if.else53:                                        ; preds = %land.lhs.true44, %if.else42
  %37 = load i8*, i8** %src.addr, align 8
  %38 = load i32, i32* %i, align 4
  %idxprom54 = sext i32 %38 to i64
  %arrayidx55 = getelementptr inbounds i8, i8* %37, i64 %idxprom54
  %39 = load i8, i8* %arrayidx55, align 1
  %40 = load i8*, i8** %dst.addr, align 8
  %41 = load i32, i32* %j, align 4
  %idxprom56 = sext i32 %41 to i64
  %arrayidx57 = getelementptr inbounds i8, i8* %40, i64 %idxprom56
  store i8 %39, i8* %arrayidx57, align 1
  br label %if.end58

if.end58:                                         ; preds = %if.else53, %if.then50
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end59
  %42 = load i32, i32* %i, align 4
  %inc = add nsw i32 %42, 1
  store i32 %inc, i32* %i, align 4
  %43 = load i32, i32* %j, align 4
  %inc60 = add nsw i32 %43, 1
  store i32 %inc60, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %44 = load i8*, i8** %dst.addr, align 8
  %45 = load i32, i32* %j, align 4
  %idxprom61 = sext i32 %45 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %44, i64 %idxprom61
  store i8 0, i8* %arrayidx62, align 1
  %46 = load i32, i32* %i, align 4
  %47 = load i32, i32* %src_len.addr, align 4
  %cmp63 = icmp sge i32 %46, %47
  br i1 %cmp63, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %for.end
  %48 = load i32, i32* %j, align 4
  br label %cond.end67

cond.false66:                                     ; preds = %for.end
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false66, %cond.true65
  %cond68 = phi i32 [ %48, %cond.true65 ], [ -1, %cond.false66 ]
  store i32 %cond68, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end67, %if.else
  %49 = load i32, i32* %retval, align 4
  ret i32 %49
}

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32) #8

; Function Attrs: nounwind readonly
declare i32 @isdigit(i32) #8

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_get_http_var(%struct.mg_str* %buf, i8* %name, i8* %dst, i64 %dst_len) #0 {
entry:
  %buf.addr = alloca %struct.mg_str*, align 8
  %name.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i64, align 8
  %p = alloca i8*, align 8
  %e = alloca i8*, align 8
  %s = alloca i8*, align 8
  %name_len = alloca i64, align 8
  %len = alloca i32, align 4
  store %struct.mg_str* %buf, %struct.mg_str** %buf.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dst_len, i64* %dst_len.addr, align 8
  %0 = load i8*, i8** %dst.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %dst_len.addr, align 8
  %cmp1 = icmp eq i64 %1, 0
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -2, i32* %len, align 4
  br label %if.end47

if.else:                                          ; preds = %lor.lhs.false
  %2 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %2, i32 0, i32 0
  %3 = load i8*, i8** %p2, align 8
  %cmp3 = icmp eq i8* %3, null
  br i1 %cmp3, label %if.then9, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %if.else
  %4 = load i8*, i8** %name.addr, align 8
  %cmp5 = icmp eq i8* %4, null
  br i1 %cmp5, label %if.then9, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %5 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %5, i32 0, i32 1
  %6 = load i64, i64* %len7, align 8
  %cmp8 = icmp eq i64 %6, 0
  br i1 %cmp8, label %if.then9, label %if.else10

if.then9:                                         ; preds = %lor.lhs.false6, %lor.lhs.false4, %if.else
  store i32 -1, i32* %len, align 4
  %7 = load i8*, i8** %dst.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  store i8 0, i8* %arrayidx, align 1
  br label %if.end46

if.else10:                                        ; preds = %lor.lhs.false6
  %8 = load i8*, i8** %name.addr, align 8
  %call = call i64 @strlen(i8* %8)
  store i64 %call, i64* %name_len, align 8
  %9 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8
  %p11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %9, i32 0, i32 0
  %10 = load i8*, i8** %p11, align 8
  %11 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %11, i32 0, i32 1
  %12 = load i64, i64* %len12, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %12
  store i8* %add.ptr, i8** %e, align 8
  store i32 -4, i32* %len, align 4
  %13 = load i8*, i8** %dst.addr, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %13, i64 0
  store i8 0, i8* %arrayidx13, align 1
  %14 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8
  %p14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 0
  %15 = load i8*, i8** %p14, align 8
  store i8* %15, i8** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else10
  %16 = load i8*, i8** %p, align 8
  %17 = load i64, i64* %name_len, align 8
  %add.ptr15 = getelementptr inbounds i8, i8* %16, i64 %17
  %18 = load i8*, i8** %e, align 8
  %cmp16 = icmp ult i8* %add.ptr15, %18
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %19 = load i8*, i8** %p, align 8
  %20 = load %struct.mg_str*, %struct.mg_str** %buf.addr, align 8
  %p17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %20, i32 0, i32 0
  %21 = load i8*, i8** %p17, align 8
  %cmp18 = icmp eq i8* %19, %21
  br i1 %cmp18, label %land.lhs.true, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %for.body
  %22 = load i8*, i8** %p, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %22, i64 -1
  %23 = load i8, i8* %arrayidx20, align 1
  %conv = sext i8 %23 to i32
  %cmp21 = icmp eq i32 %conv, 38
  br i1 %cmp21, label %land.lhs.true, label %if.end45

land.lhs.true:                                    ; preds = %lor.lhs.false19, %for.body
  %24 = load i8*, i8** %p, align 8
  %25 = load i64, i64* %name_len, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %24, i64 %25
  %26 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %26 to i32
  %cmp25 = icmp eq i32 %conv24, 61
  br i1 %cmp25, label %land.lhs.true27, label %if.end45

land.lhs.true27:                                  ; preds = %land.lhs.true
  %27 = load i8*, i8** %name.addr, align 8
  %28 = load i8*, i8** %p, align 8
  %29 = load i64, i64* %name_len, align 8
  %call28 = call i32 @mg_ncasecmp(i8* %27, i8* %28, i64 %29)
  %tobool = icmp ne i32 %call28, 0
  br i1 %tobool, label %if.end45, label %if.then29

if.then29:                                        ; preds = %land.lhs.true27
  %30 = load i64, i64* %name_len, align 8
  %add = add i64 %30, 1
  %31 = load i8*, i8** %p, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %31, i64 %add
  store i8* %add.ptr30, i8** %p, align 8
  %32 = load i8*, i8** %p, align 8
  %33 = load i8*, i8** %e, align 8
  %34 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %34 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call31 = call i8* @memchr(i8* %32, i32 38, i64 %sub.ptr.sub)
  store i8* %call31, i8** %s, align 8
  %35 = load i8*, i8** %s, align 8
  %cmp32 = icmp eq i8* %35, null
  br i1 %cmp32, label %if.then34, label %if.end

if.then34:                                        ; preds = %if.then29
  %36 = load i8*, i8** %e, align 8
  store i8* %36, i8** %s, align 8
  br label %if.end

if.end:                                           ; preds = %if.then34, %if.then29
  %37 = load i8*, i8** %p, align 8
  %38 = load i8*, i8** %s, align 8
  %39 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast35 = ptrtoint i8* %38 to i64
  %sub.ptr.rhs.cast36 = ptrtoint i8* %39 to i64
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36
  %conv38 = trunc i64 %sub.ptr.sub37 to i32
  %40 = load i8*, i8** %dst.addr, align 8
  %41 = load i64, i64* %dst_len.addr, align 8
  %conv39 = trunc i64 %41 to i32
  %call40 = call i32 @mg_url_decode(i8* %37, i32 %conv38, i8* %40, i32 %conv39, i32 1)
  store i32 %call40, i32* %len, align 4
  %42 = load i32, i32* %len, align 4
  %cmp41 = icmp eq i32 %42, -1
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end
  store i32 -3, i32* %len, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %if.end
  br label %for.end

if.end45:                                         ; preds = %land.lhs.true27, %land.lhs.true, %lor.lhs.false19
  br label %for.inc

for.inc:                                          ; preds = %if.end45
  %43 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %43, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end44, %for.cond
  br label %if.end46

if.end46:                                         ; preds = %for.end, %if.then9
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then
  %44 = load i32, i32* %len, align 4
  ret i32 %44
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_http_chunk(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %chunk_size = alloca [50 x i8], align 16
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %arraydecay = getelementptr inbounds [50 x i8], [50 x i8]* %chunk_size, i32 0, i32 0
  %0 = load i64, i64* %len.addr, align 8
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 50, i32 0, i64 50, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0), i64 %0)
  store i32 %call, i32* %n, align 4
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay1 = getelementptr inbounds [50 x i8], [50 x i8]* %chunk_size, i32 0, i32 0
  %2 = load i32, i32* %n, align 4
  call void @mg_send(%struct.mg_connection* %1, i8* %arraydecay1, i32 %2)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %4 = load i8*, i8** %buf.addr, align 8
  %5 = load i64, i64* %len.addr, align 8
  %conv = trunc i64 %5 to i32
  call void @mg_send(%struct.mg_connection* %3, i8* %4, i32 %conv)
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send(%struct.mg_connection* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_printf_http_chunk(%struct.mg_connection* %nc, i8* %fmt, ...) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fmt.addr = alloca i8*, align 8
  %mem = alloca [100 x i8], align 16
  %buf = alloca i8*, align 8
  %len = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  store i8* %arraydecay, i8** %buf, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay1 to i8*
  call void @llvm.va_start(i8* %arraydecay12)
  %0 = load i8*, i8** %fmt.addr, align 8
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_avprintf(i8** %buf, i64 100, i8* %0, %struct.__va_list_tag* %arraydecay3)
  store i32 %call, i32* %len, align 4
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_end(i8* %arraydecay45)
  %1 = load i32, i32* %len, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load i8*, i8** %buf, align 8
  %4 = load i32, i32* %len, align 4
  %conv = sext i32 %4 to i64
  call void @mg_send_http_chunk(%struct.mg_connection* %2, i8* %3, i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8*, i8** %buf, align 8
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  %cmp7 = icmp ne i8* %5, %arraydecay6
  br i1 %cmp7, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end
  %6 = load i8*, i8** %buf, align 8
  %cmp9 = icmp ne i8* %6, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  %7 = load i8*, i8** %buf, align 8
  call void @free(i8* %7)
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_printf_html_escape(%struct.mg_connection* %nc, i8* %fmt, ...) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fmt.addr = alloca i8*, align 8
  %mem = alloca [100 x i8], align 16
  %buf = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  store i8* %arraydecay, i8** %buf, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay1 to i8*
  call void @llvm.va_start(i8* %arraydecay12)
  %0 = load i8*, i8** %fmt.addr, align 8
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_avprintf(i8** %buf, i64 100, i8* %0, %struct.__va_list_tag* %arraydecay3)
  store i32 %call, i32* %len, align 4
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_end(i8* %arraydecay45)
  %1 = load i32, i32* %len, align 4
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end23

if.then:                                          ; preds = %entry
  store i32 0, i32* %j, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len, align 4
  %cmp6 = icmp slt i32 %2, %3
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %buf, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp7 = icmp eq i32 %conv, 60
  br i1 %cmp7, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %7 = load i8*, i8** %buf, align 8
  %8 = load i32, i32* %i, align 4
  %idxprom9 = sext i32 %8 to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %7, i64 %idxprom9
  %9 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %9 to i32
  %cmp12 = icmp eq i32 %conv11, 62
  br i1 %cmp12, label %if.then14, label %if.end

if.then14:                                        ; preds = %lor.lhs.false, %for.body
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %11 = load i8*, i8** %buf, align 8
  %12 = load i32, i32* %j, align 4
  %idx.ext = sext i32 %12 to i64
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext
  %13 = load i32, i32* %i, align 4
  %14 = load i32, i32* %j, align 4
  %sub = sub nsw i32 %13, %14
  call void @mg_send(%struct.mg_connection* %10, i8* %add.ptr, i32 %sub)
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %16 = load i8*, i8** %buf, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom15 = sext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i64 %idxprom15
  %18 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %18 to i32
  %cmp18 = icmp eq i32 %conv17, 60
  %cond = select i1 %cmp18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i32 0, i32 0)
  call void @mg_send(%struct.mg_connection* %15, i8* %cond, i32 4)
  %19 = load i32, i32* %i, align 4
  %add = add nsw i32 %19, 1
  store i32 %add, i32* %j, align 4
  br label %if.end

if.end:                                           ; preds = %if.then14, %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %i, align 4
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %22 = load i8*, i8** %buf, align 8
  %23 = load i32, i32* %j, align 4
  %idx.ext20 = sext i32 %23 to i64
  %add.ptr21 = getelementptr inbounds i8, i8* %22, i64 %idx.ext20
  %24 = load i32, i32* %i, align 4
  %25 = load i32, i32* %j, align 4
  %sub22 = sub nsw i32 %24, %25
  call void @mg_send(%struct.mg_connection* %21, i8* %add.ptr21, i32 %sub22)
  br label %if.end23

if.end23:                                         ; preds = %for.end, %entry
  %26 = load i8*, i8** %buf, align 8
  %arraydecay24 = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  %cmp25 = icmp ne i8* %26, %arraydecay24
  br i1 %cmp25, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.end23
  %27 = load i8*, i8** %buf, align 8
  %cmp27 = icmp ne i8* %27, null
  br i1 %cmp27, label %if.then29, label %if.end30

if.then29:                                        ; preds = %land.lhs.true
  %28 = load i8*, i8** %buf, align 8
  call void @free(i8* %28)
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %land.lhs.true, %if.end23
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_http_parse_header2(%struct.mg_str* %hdr, i8* %var_name, i8** %buf, i64 %buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %hdr.addr = alloca %struct.mg_str*, align 8
  %var_name.addr = alloca i8*, align 8
  %buf.addr = alloca i8**, align 8
  %buf_size.addr = alloca i64, align 8
  %ab = alloca %struct.altbuf, align 8
  store %struct.mg_str* %hdr, %struct.mg_str** %hdr.addr, align 8
  store i8* %var_name, i8** %var_name.addr, align 8
  store i8** %buf, i8*** %buf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  %0 = load i8**, i8*** %buf.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i64, i64* %buf_size.addr, align 8
  call void @altbuf_init(%struct.altbuf* %ab, i8* %1, i64 %2)
  %3 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %cmp = icmp eq %struct.mg_str* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8**, i8*** %buf.addr, align 8
  %5 = load i8*, i8** %4, align 8
  %cmp1 = icmp ne i8* %5, null
  br i1 %cmp1, label %land.lhs.true, label %if.end4

land.lhs.true:                                    ; preds = %if.end
  %6 = load i64, i64* %buf_size.addr, align 8
  %cmp2 = icmp ugt i64 %6, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %land.lhs.true
  %7 = load i8**, i8*** %buf.addr, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %7, i64 0
  %8 = load i8*, i8** %arrayidx, align 8
  store i8 0, i8* %8, align 1
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %land.lhs.true, %if.end
  %9 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %10 = load i8*, i8** %var_name.addr, align 8
  call void @mg_http_parse_header_internal(%struct.mg_str* %9, i8* %10, %struct.altbuf* %ab)
  %call = call i8* @altbuf_get_buf(%struct.altbuf* %ab, i32 1)
  %11 = load i8**, i8*** %buf.addr, align 8
  store i8* %call, i8** %11, align 8
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %ab, i32 0, i32 2
  %12 = load i64, i64* %len, align 8
  %cmp5 = icmp ugt i64 %12, 0
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %len6 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %ab, i32 0, i32 2
  %13 = load i64, i64* %len6, align 8
  %sub = sub i64 %13, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub, %cond.true ], [ 0, %cond.false ]
  %conv = trunc i64 %cond to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @altbuf_init(%struct.altbuf* %ab, i8* %buf, i64 %buf_size) #0 {
entry:
  %ab.addr = alloca %struct.altbuf*, align 8
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %m = getelementptr inbounds %struct.altbuf, %struct.altbuf* %0, i32 0, i32 0
  call void @mbuf_init(%struct.mbuf* %m, i64 0)
  %1 = load i8*, i8** %buf.addr, align 8
  %2 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %user_buf = getelementptr inbounds %struct.altbuf, %struct.altbuf* %2, i32 0, i32 1
  store i8* %1, i8** %user_buf, align 8
  %3 = load i64, i64* %buf_size.addr, align 8
  %4 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %user_buf_size = getelementptr inbounds %struct.altbuf, %struct.altbuf* %4, i32 0, i32 3
  store i64 %3, i64* %user_buf_size, align 8
  %5 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %5, i32 0, i32 2
  store i64 0, i64* %len, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_parse_header_internal(%struct.mg_str* %hdr, i8* %var_name, %struct.altbuf* %ab) #0 {
entry:
  %hdr.addr = alloca %struct.mg_str*, align 8
  %var_name.addr = alloca i8*, align 8
  %ab.addr = alloca %struct.altbuf*, align 8
  %ch = alloca i32, align 4
  %ch1 = alloca i32, align 4
  %ch2 = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  %end = alloca i8*, align 8
  %s = alloca i8*, align 8
  store %struct.mg_str* %hdr, %struct.mg_str** %hdr.addr, align 8
  store i8* %var_name, i8** %var_name.addr, align 8
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8
  store i32 32, i32* %ch, align 4
  store i32 44, i32* %ch1, align 4
  store i32 59, i32* %ch2, align 4
  %0 = load i8*, i8** %var_name.addr, align 8
  %call = call i64 @strlen(i8* %0)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %n, align 4
  %1 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %tobool = icmp ne %struct.mg_str* %1, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %2, i32 0, i32 0
  %3 = load i8*, i8** %p1, align 8
  %4 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %4, i32 0, i32 1
  %5 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ null, %cond.false ]
  store i8* %cond, i8** %end, align 8
  store i8* null, i8** %s, align 8
  %6 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %6, i32 0, i32 0
  %7 = load i8*, i8** %p2, align 8
  store i8* %7, i8** %s, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %8 = load i8*, i8** %s, align 8
  %cmp = icmp ne i8* %8, null
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i8*, i8** %s, align 8
  %10 = load i32, i32* %n, align 4
  %idx.ext = sext i32 %10 to i64
  %add.ptr4 = getelementptr inbounds i8, i8* %9, i64 %idx.ext
  %11 = load i8*, i8** %end, align 8
  %cmp5 = icmp ult i8* %add.ptr4, %11
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %12 = phi i1 [ false, %for.cond ], [ %cmp5, %land.rhs ]
  br i1 %12, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %13 = load i8*, i8** %s, align 8
  %14 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %p7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 0
  %15 = load i8*, i8** %p7, align 8
  %cmp8 = icmp eq i8* %13, %15
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %16 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 -1
  %17 = load i8, i8* %arrayidx, align 1
  %conv10 = sext i8 %17 to i32
  %18 = load i32, i32* %ch, align 4
  %cmp11 = icmp eq i32 %conv10, %18
  br i1 %cmp11, label %land.lhs.true, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %19 = load i8*, i8** %s, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %19, i64 -1
  %20 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %20 to i32
  %21 = load i32, i32* %ch1, align 4
  %cmp16 = icmp eq i32 %conv15, %21
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false13
  %22 = load i8*, i8** %s, align 8
  %arrayidx19 = getelementptr inbounds i8, i8* %22, i64 -1
  %23 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %23 to i32
  %cmp21 = icmp eq i32 %conv20, 59
  br i1 %cmp21, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false18, %lor.lhs.false13, %lor.lhs.false, %for.body
  %24 = load i8*, i8** %s, align 8
  %25 = load i32, i32* %n, align 4
  %idxprom = sext i32 %25 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %24, i64 %idxprom
  %26 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %26 to i32
  %cmp25 = icmp eq i32 %conv24, 61
  br i1 %cmp25, label %land.lhs.true27, label %if.end

land.lhs.true27:                                  ; preds = %land.lhs.true
  %27 = load i8*, i8** %s, align 8
  %28 = load i8*, i8** %var_name.addr, align 8
  %29 = load i32, i32* %n, align 4
  %conv28 = sext i32 %29 to i64
  %call29 = call i32 @strncmp(i8* %27, i8* %28, i64 %conv28)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true27
  br label %for.end

if.end:                                           ; preds = %land.lhs.true27, %land.lhs.true, %lor.lhs.false18
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %30 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %land.end
  %31 = load i8*, i8** %s, align 8
  %cmp31 = icmp ne i8* %31, null
  br i1 %cmp31, label %land.lhs.true33, label %if.end95

land.lhs.true33:                                  ; preds = %for.end
  %32 = load i8*, i8** %s, align 8
  %33 = load i32, i32* %n, align 4
  %add = add nsw i32 %33, 1
  %idxprom34 = sext i32 %add to i64
  %arrayidx35 = getelementptr inbounds i8, i8* %32, i64 %idxprom34
  %34 = load i8*, i8** %end, align 8
  %cmp36 = icmp ult i8* %arrayidx35, %34
  br i1 %cmp36, label %if.then38, label %if.end95

if.then38:                                        ; preds = %land.lhs.true33
  %35 = load i32, i32* %n, align 4
  %add39 = add nsw i32 %35, 1
  %36 = load i8*, i8** %s, align 8
  %idx.ext40 = sext i32 %add39 to i64
  %add.ptr41 = getelementptr inbounds i8, i8* %36, i64 %idx.ext40
  store i8* %add.ptr41, i8** %s, align 8
  %37 = load i8*, i8** %s, align 8
  %38 = load i8, i8* %37, align 1
  %conv42 = sext i8 %38 to i32
  %cmp43 = icmp eq i32 %conv42, 34
  br i1 %cmp43, label %if.then49, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.then38
  %39 = load i8*, i8** %s, align 8
  %40 = load i8, i8* %39, align 1
  %conv46 = sext i8 %40 to i32
  %cmp47 = icmp eq i32 %conv46, 39
  br i1 %cmp47, label %if.then49, label %if.end52

if.then49:                                        ; preds = %lor.lhs.false45, %if.then38
  %41 = load i8*, i8** %s, align 8
  %incdec.ptr50 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr50, i8** %s, align 8
  %42 = load i8, i8* %41, align 1
  %conv51 = sext i8 %42 to i32
  store i32 %conv51, i32* %ch2, align 4
  store i32 %conv51, i32* %ch1, align 4
  store i32 %conv51, i32* %ch, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.then49, %lor.lhs.false45
  %43 = load i8*, i8** %s, align 8
  store i8* %43, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end85, %if.end52
  %44 = load i8*, i8** %p, align 8
  %45 = load i8*, i8** %end, align 8
  %cmp53 = icmp ult i8* %44, %45
  br i1 %cmp53, label %land.lhs.true55, label %land.end70

land.lhs.true55:                                  ; preds = %while.cond
  %46 = load i8*, i8** %p, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %46, i64 0
  %47 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %47 to i32
  %48 = load i32, i32* %ch, align 4
  %cmp58 = icmp ne i32 %conv57, %48
  br i1 %cmp58, label %land.lhs.true60, label %land.end70

land.lhs.true60:                                  ; preds = %land.lhs.true55
  %49 = load i8*, i8** %p, align 8
  %arrayidx61 = getelementptr inbounds i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx61, align 1
  %conv62 = sext i8 %50 to i32
  %51 = load i32, i32* %ch1, align 4
  %cmp63 = icmp ne i32 %conv62, %51
  br i1 %cmp63, label %land.rhs65, label %land.end70

land.rhs65:                                       ; preds = %land.lhs.true60
  %52 = load i8*, i8** %p, align 8
  %arrayidx66 = getelementptr inbounds i8, i8* %52, i64 0
  %53 = load i8, i8* %arrayidx66, align 1
  %conv67 = sext i8 %53 to i32
  %54 = load i32, i32* %ch2, align 4
  %cmp68 = icmp ne i32 %conv67, %54
  br label %land.end70

land.end70:                                       ; preds = %land.rhs65, %land.lhs.true60, %land.lhs.true55, %while.cond
  %55 = phi i1 [ false, %land.lhs.true60 ], [ false, %land.lhs.true55 ], [ false, %while.cond ], [ %cmp68, %land.rhs65 ]
  br i1 %55, label %while.body, label %while.end

while.body:                                       ; preds = %land.end70
  %56 = load i32, i32* %ch, align 4
  %cmp71 = icmp ne i32 %56, 32
  br i1 %cmp71, label %land.lhs.true73, label %if.end85

land.lhs.true73:                                  ; preds = %while.body
  %57 = load i8*, i8** %p, align 8
  %arrayidx74 = getelementptr inbounds i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx74, align 1
  %conv75 = sext i8 %58 to i32
  %cmp76 = icmp eq i32 %conv75, 92
  br i1 %cmp76, label %land.lhs.true78, label %if.end85

land.lhs.true78:                                  ; preds = %land.lhs.true73
  %59 = load i8*, i8** %p, align 8
  %arrayidx79 = getelementptr inbounds i8, i8* %59, i64 1
  %60 = load i8, i8* %arrayidx79, align 1
  %conv80 = sext i8 %60 to i32
  %61 = load i32, i32* %ch, align 4
  %cmp81 = icmp eq i32 %conv80, %61
  br i1 %cmp81, label %if.then83, label %if.end85

if.then83:                                        ; preds = %land.lhs.true78
  %62 = load i8*, i8** %p, align 8
  %incdec.ptr84 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %incdec.ptr84, i8** %p, align 8
  br label %if.end85

if.end85:                                         ; preds = %if.then83, %land.lhs.true78, %land.lhs.true73, %while.body
  %63 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %64 = load i8*, i8** %p, align 8
  %incdec.ptr86 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %incdec.ptr86, i8** %p, align 8
  %65 = load i8, i8* %64, align 1
  call void @altbuf_append(%struct.altbuf* %63, i8 signext %65)
  br label %while.cond

while.end:                                        ; preds = %land.end70
  %66 = load i32, i32* %ch, align 4
  %cmp87 = icmp ne i32 %66, 32
  br i1 %cmp87, label %land.lhs.true89, label %if.end94

land.lhs.true89:                                  ; preds = %while.end
  %67 = load i8*, i8** %p, align 8
  %68 = load i8, i8* %67, align 1
  %conv90 = sext i8 %68 to i32
  %69 = load i32, i32* %ch, align 4
  %cmp91 = icmp ne i32 %conv90, %69
  br i1 %cmp91, label %if.then93, label %if.end94

if.then93:                                        ; preds = %land.lhs.true89
  %70 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  call void @altbuf_reset(%struct.altbuf* %70)
  br label %if.end94

if.end94:                                         ; preds = %if.then93, %land.lhs.true89, %while.end
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %land.lhs.true33, %for.end
  %71 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len96 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %71, i32 0, i32 2
  %72 = load i64, i64* %len96, align 8
  %cmp97 = icmp ugt i64 %72, 0
  br i1 %cmp97, label %if.then99, label %if.end100

if.then99:                                        ; preds = %if.end95
  %73 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  call void @altbuf_append(%struct.altbuf* %73, i8 signext 0)
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %if.end95
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i8* @altbuf_get_buf(%struct.altbuf* %ab, i32 %trim) #0 {
entry:
  %retval = alloca i8*, align 8
  %ab.addr = alloca %struct.altbuf*, align 8
  %trim.addr = alloca i32, align 4
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8
  store i32 %trim, i32* %trim.addr, align 4
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %call = call i32 @altbuf_reallocated(%struct.altbuf* %0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %trim.addr, align 4
  %tobool1 = icmp ne i32 %1, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %m = getelementptr inbounds %struct.altbuf, %struct.altbuf* %2, i32 0, i32 0
  call void @mbuf_trim(%struct.mbuf* %m)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %3 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %m3 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %3, i32 0, i32 0
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %m3, i32 0, i32 0
  %4 = load i8*, i8** %buf, align 8
  store i8* %4, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %entry
  %5 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %user_buf = getelementptr inbounds %struct.altbuf, %struct.altbuf* %5, i32 0, i32 1
  %6 = load i8*, i8** %user_buf, align 8
  store i8* %6, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.else, %if.end
  %7 = load i8*, i8** %retval, align 8
  ret i8* %7
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_http_parse_header(%struct.mg_str* %hdr, i8* %var_name, i8* %buf, i64 %buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %hdr.addr = alloca %struct.mg_str*, align 8
  %var_name.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %buf2 = alloca i8*, align 8
  %len = alloca i32, align 4
  store %struct.mg_str* %hdr, %struct.mg_str** %hdr.addr, align 8
  store i8* %var_name, i8** %var_name.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_size, i64* %buf_size.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  store i8* %0, i8** %buf2, align 8
  %1 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %2 = load i8*, i8** %var_name.addr, align 8
  %3 = load i64, i64* %buf_size.addr, align 8
  %call = call i32 @mg_http_parse_header2(%struct.mg_str* %1, i8* %2, i8** %buf2, i64 %3)
  store i32 %call, i32* %len, align 4
  %4 = load i8*, i8** %buf2, align 8
  %5 = load i8*, i8** %buf.addr, align 8
  %cmp = icmp ne i8* %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %buf2, align 8
  call void @free(i8* %6)
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i32, i32* %len, align 4
  store i32 %7, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_get_http_basic_auth(%struct.http_message* %hm, i8* %user, i64 %user_len, i8* %pass, i64 %pass_len) #0 {
entry:
  %retval = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %user.addr = alloca i8*, align 8
  %user_len.addr = alloca i64, align 8
  %pass.addr = alloca i8*, align 8
  %pass_len.addr = alloca i64, align 8
  %hdr = alloca %struct.mg_str*, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i64 %user_len, i64* %user_len.addr, align 8
  store i8* %pass, i8** %pass.addr, align 8
  store i64 %pass_len, i64* %pass_len.addr, align 8
  %0 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.90, i32 0, i32 0))
  store %struct.mg_str* %call, %struct.mg_str** %hdr, align 8
  %1 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %cmp = icmp eq %struct.mg_str* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %3 = load i8*, i8** %user.addr, align 8
  %4 = load i64, i64* %user_len.addr, align 8
  %5 = load i8*, i8** %pass.addr, align 8
  %6 = load i64, i64* %pass_len.addr, align 8
  %call1 = call i32 @mg_parse_http_basic_auth(%struct.mg_str* %2, i8* %3, i64 %4, i8* %5, i64 %6)
  store i32 %call1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_parse_http_basic_auth(%struct.mg_str* %hdr, i8* %user, i64 %user_len, i8* %pass, i64 %pass_len) #0 {
entry:
  %retval = alloca i32, align 4
  %hdr.addr = alloca %struct.mg_str*, align 8
  %user.addr = alloca i8*, align 8
  %user_len.addr = alloca i64, align 8
  %pass.addr = alloca i8*, align 8
  %pass_len.addr = alloca i64, align 8
  %buf = alloca i8*, align 8
  %fmt = alloca [64 x i8], align 16
  %res = alloca i32, align 4
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mg_str* %hdr, %struct.mg_str** %hdr.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i64 %user_len, i64* %user_len.addr, align 8
  store i8* %pass, i8** %pass.addr, align 8
  store i64 %pass_len, i64* %pass_len.addr, align 8
  store i8* null, i8** %buf, align 8
  store i32 0, i32* %res, align 4
  %0 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.91, i32 0, i32 0))
  %1 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %3 = extractvalue { i8*, i64 } %call, 0
  store i8* %3, i8** %2, align 8
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %5 = extractvalue { i8*, i64 } %call, 1
  store i64 %5, i64* %4, align 8
  %6 = bitcast %struct.mg_str* %0 to { i8*, i64 }*
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %call1 = call i32 @mg_strncmp(i8* %8, i64 %10, i8* %13, i64 %15, i64 6)
  %cmp = icmp ne i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %16 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %16, i32 0, i32 1
  %17 = load i64, i64* %len, align 8
  %call2 = call i8* @malloc(i64 %17) #14
  store i8* %call2, i8** %buf, align 8
  %18 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %18, i32 0, i32 0
  %19 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 6
  %20 = load %struct.mg_str*, %struct.mg_str** %hdr.addr, align 8
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %20, i32 0, i32 1
  %21 = load i64, i64* %len3, align 8
  %conv = trunc i64 %21 to i32
  %22 = load i8*, i8** %buf, align 8
  %call4 = call i32 @cs_base64_decode(i8* %add.ptr, i32 %conv, i8* %22, i32* null)
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %fmt, i32 0, i32 0
  %23 = load i64, i64* %user_len.addr, align 8
  %sub = sub i64 %23, 1
  %24 = load i64, i64* %pass_len.addr, align 8
  %sub5 = sub i64 %24, 1
  %call6 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.92, i32 0, i32 0), i64 %sub, i64 %sub5)
  %25 = load i8*, i8** %buf, align 8
  %arraydecay7 = getelementptr inbounds [64 x i8], [64 x i8]* %fmt, i32 0, i32 0
  %26 = load i8*, i8** %user.addr, align 8
  %27 = load i8*, i8** %pass.addr, align 8
  %call8 = call i32 (i8*, i8*, ...) @sscanf(i8* %25, i8* %arraydecay7, i8* %26, i8* %27)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end
  store i32 -1, i32* %res, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end
  %28 = load i8*, i8** %buf, align 8
  call void @free(i8* %28)
  %29 = load i32, i32* %res, align 4
  store i32 %29, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end12, %if.then
  %30 = load i32, i32* %retval, align 4
  ret i32 %30
}

declare i32 @sscanf(i8*, i8*, ...) #3

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_hash_md5_v(i64 %num_msgs, i8** %msgs, i64* %msg_lens, i8* %digest) #0 {
entry:
  %num_msgs.addr = alloca i64, align 8
  %msgs.addr = alloca i8**, align 8
  %msg_lens.addr = alloca i64*, align 8
  %digest.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %md5_ctx = alloca %struct.cs_md5_ctx, align 4
  store i64 %num_msgs, i64* %num_msgs.addr, align 8
  store i8** %msgs, i8*** %msgs.addr, align 8
  store i64* %msg_lens, i64** %msg_lens.addr, align 8
  store i8* %digest, i8** %digest.addr, align 8
  call void @cs_md5_init(%struct.cs_md5_ctx* %md5_ctx)
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %num_msgs.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %msgs.addr, align 8
  %3 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %3
  %4 = load i8*, i8** %arrayidx, align 8
  %5 = load i64*, i64** %msg_lens.addr, align 8
  %6 = load i64, i64* %i, align 8
  %arrayidx1 = getelementptr inbounds i64, i64* %5, i64 %6
  %7 = load i64, i64* %arrayidx1, align 8
  call void @cs_md5_update(%struct.cs_md5_ctx* %md5_ctx, i8* %4, i64 %7)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i64, i64* %i, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i8*, i8** %digest.addr, align 8
  call void @cs_md5_final(i8* %9, %struct.cs_md5_ctx* %md5_ctx)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @cs_md5(i8* %buf, ...) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %hash = alloca [16 x i8], align 16
  %msgs = alloca [20 x i8*], align 16
  %p = alloca i8*, align 8
  %msg_lens = alloca [20 x i64], align 16
  %num_msgs = alloca i64, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %buf, i8** %buf.addr, align 8
  store i64 0, i64* %num_msgs, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  br label %while.cond

while.cond:                                       ; preds = %vaarg.end13, %entry
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 0
  %gp_offset = load i32, i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ule i32 %gp_offset, 40
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %while.cond
  %0 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 3
  %reg_save_area = load i8*, i8** %0, align 16
  %1 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset
  %2 = bitcast i8* %1 to i8**
  %3 = add i32 %gp_offset, 8
  store i32 %3, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %while.cond
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay2, i32 0, i32 2
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8
  %4 = bitcast i8* %overflow_arg_area to i8**
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi i8** [ %2, %vaarg.in_reg ], [ %4, %vaarg.in_mem ]
  %5 = load i8*, i8** %vaarg.addr, align 8
  store i8* %5, i8** %p, align 8
  %cmp = icmp ne i8* %5, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %vaarg.end
  %6 = load i8*, i8** %p, align 8
  %7 = load i64, i64* %num_msgs, align 8
  %arrayidx = getelementptr inbounds [20 x i8*], [20 x i8*]* %msgs, i64 0, i64 %7
  store i8* %6, i8** %arrayidx, align 8
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %gp_offset_p4 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 0
  %gp_offset5 = load i32, i32* %gp_offset_p4, align 16
  %fits_in_gp6 = icmp ule i32 %gp_offset5, 40
  br i1 %fits_in_gp6, label %vaarg.in_reg7, label %vaarg.in_mem9

vaarg.in_reg7:                                    ; preds = %while.body
  %8 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 3
  %reg_save_area8 = load i8*, i8** %8, align 16
  %9 = getelementptr i8, i8* %reg_save_area8, i32 %gp_offset5
  %10 = bitcast i8* %9 to i64*
  %11 = add i32 %gp_offset5, 8
  store i32 %11, i32* %gp_offset_p4, align 16
  br label %vaarg.end13

vaarg.in_mem9:                                    ; preds = %while.body
  %overflow_arg_area_p10 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %arraydecay3, i32 0, i32 2
  %overflow_arg_area11 = load i8*, i8** %overflow_arg_area_p10, align 8
  %12 = bitcast i8* %overflow_arg_area11 to i64*
  %overflow_arg_area.next12 = getelementptr i8, i8* %overflow_arg_area11, i32 8
  store i8* %overflow_arg_area.next12, i8** %overflow_arg_area_p10, align 8
  br label %vaarg.end13

vaarg.end13:                                      ; preds = %vaarg.in_mem9, %vaarg.in_reg7
  %vaarg.addr14 = phi i64* [ %10, %vaarg.in_reg7 ], [ %12, %vaarg.in_mem9 ]
  %13 = load i64, i64* %vaarg.addr14, align 8
  %14 = load i64, i64* %num_msgs, align 8
  %arrayidx15 = getelementptr inbounds [20 x i64], [20 x i64]* %msg_lens, i64 0, i64 %14
  store i64 %13, i64* %arrayidx15, align 8
  %15 = load i64, i64* %num_msgs, align 8
  %inc = add i64 %15, 1
  store i64 %inc, i64* %num_msgs, align 8
  br label %while.cond

while.end:                                        ; preds = %vaarg.end
  %arraydecay16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay1617 = bitcast %struct.__va_list_tag* %arraydecay16 to i8*
  call void @llvm.va_end(i8* %arraydecay1617)
  %16 = load i64, i64* %num_msgs, align 8
  %arraydecay18 = getelementptr inbounds [20 x i8*], [20 x i8*]* %msgs, i32 0, i32 0
  %arraydecay19 = getelementptr inbounds [20 x i64], [20 x i64]* %msg_lens, i32 0, i32 0
  %arraydecay20 = getelementptr inbounds [16 x i8], [16 x i8]* %hash, i32 0, i32 0
  call void @mg_hash_md5_v(i64 %16, i8** %arraydecay18, i64* %arraydecay19, i8* %arraydecay20)
  %17 = load i8*, i8** %buf.addr, align 8
  %arraydecay21 = getelementptr inbounds [16 x i8], [16 x i8]* %hash, i32 0, i32 0
  call void @cs_to_hex(i8* %17, i8* %arraydecay21, i64 16)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_http_create_digest_auth_header(i8* %buf, i64 %buf_len, i8* %method, i8* %uri, i8* %auth_domain, i8* %user, i8* %passwd, i8* %nonce) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %method.addr = alloca i8*, align 8
  %uri.addr = alloca i8*, align 8
  %auth_domain.addr = alloca i8*, align 8
  %user.addr = alloca i8*, align 8
  %passwd.addr = alloca i8*, align 8
  %nonce.addr = alloca i8*, align 8
  %ha1 = alloca [33 x i8], align 16
  %resp = alloca [33 x i8], align 16
  %cnonce = alloca [40 x i8], align 16
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  store i8* %method, i8** %method.addr, align 8
  store i8* %uri, i8** %uri.addr, align 8
  store i8* %auth_domain, i8** %auth_domain.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i8* %passwd, i8** %passwd.addr, align 8
  store i8* %nonce, i8** %nonce.addr, align 8
  %arraydecay = getelementptr inbounds [40 x i8], [40 x i8]* %cnonce, i32 0, i32 0
  %call = call double @mg_time()
  %conv = fptoui double %call to i64
  %call1 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 40, i32 0, i64 40, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.93, i32 0, i32 0), i64 %conv)
  %arraydecay2 = getelementptr inbounds [33 x i8], [33 x i8]* %ha1, i32 0, i32 0
  %0 = load i8*, i8** %user.addr, align 8
  %1 = load i8*, i8** %user.addr, align 8
  %call3 = call i64 @strlen(i8* %1)
  %2 = load i8*, i8** %auth_domain.addr, align 8
  %3 = load i8*, i8** %auth_domain.addr, align 8
  %call4 = call i64 @strlen(i8* %3)
  %4 = load i8*, i8** %passwd.addr, align 8
  %5 = load i8*, i8** %passwd.addr, align 8
  %call5 = call i64 @strlen(i8* %5)
  call void (i8*, ...) @cs_md5(i8* %arraydecay2, i8* %0, i64 %call3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_http_create_digest_auth_header.colon, i32 0, i32 0), i64 1, i8* %2, i64 %call4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_http_create_digest_auth_header.colon, i32 0, i32 0), i64 1, i8* %4, i64 %call5, i8* null)
  %6 = load i8*, i8** %method.addr, align 8
  %7 = load i8*, i8** %method.addr, align 8
  %call6 = call i64 @strlen(i8* %7)
  %8 = load i8*, i8** %uri.addr, align 8
  %9 = load i8*, i8** %uri.addr, align 8
  %call7 = call i64 @strlen(i8* %9)
  %arraydecay8 = getelementptr inbounds [33 x i8], [33 x i8]* %ha1, i32 0, i32 0
  %10 = load i8*, i8** %nonce.addr, align 8
  %11 = load i8*, i8** %nonce.addr, align 8
  %call9 = call i64 @strlen(i8* %11)
  %arraydecay10 = getelementptr inbounds [40 x i8], [40 x i8]* %cnonce, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [40 x i8], [40 x i8]* %cnonce, i32 0, i32 0
  %call12 = call i64 @strlen(i8* %arraydecay11)
  %arraydecay13 = getelementptr inbounds [33 x i8], [33 x i8]* %resp, i32 0, i32 0
  call void @mg_mkmd5resp(i8* %6, i64 %call6, i8* %8, i64 %call7, i8* %arraydecay8, i64 32, i8* %10, i64 %call9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i64 1, i8* %arraydecay10, i64 %call12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @mg_http_create_digest_auth_header.qop, i32 0, i32 0), i64 4, i8* %arraydecay13)
  %12 = load i8*, i8** %buf.addr, align 8
  %13 = load i64, i64* %buf_len.addr, align 8
  %14 = load i8*, i8** %buf.addr, align 8
  %15 = call i64 @llvm.objectsize.i64.p0i8(i8* %14, i1 false)
  %16 = load i8*, i8** %user.addr, align 8
  %17 = load i8*, i8** %auth_domain.addr, align 8
  %18 = load i8*, i8** %uri.addr, align 8
  %arraydecay14 = getelementptr inbounds [40 x i8], [40 x i8]* %cnonce, i32 0, i32 0
  %19 = load i8*, i8** %nonce.addr, align 8
  %arraydecay15 = getelementptr inbounds [33 x i8], [33 x i8]* %resp, i32 0, i32 0
  %call16 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %12, i64 %13, i32 0, i64 %15, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.95, i32 0, i32 0), i8* %16, i8* %17, i8* %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @mg_http_create_digest_auth_header.qop, i32 0, i32 0), i8* %arraydecay14, i8* %19, i8* %arraydecay15)
  ret i32 %call16
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_mkmd5resp(i8* %method, i64 %method_len, i8* %uri, i64 %uri_len, i8* %ha1, i64 %ha1_len, i8* %nonce, i64 %nonce_len, i8* %nc, i64 %nc_len, i8* %cnonce, i64 %cnonce_len, i8* %qop, i64 %qop_len, i8* %resp) #0 {
entry:
  %method.addr = alloca i8*, align 8
  %method_len.addr = alloca i64, align 8
  %uri.addr = alloca i8*, align 8
  %uri_len.addr = alloca i64, align 8
  %ha1.addr = alloca i8*, align 8
  %ha1_len.addr = alloca i64, align 8
  %nonce.addr = alloca i8*, align 8
  %nonce_len.addr = alloca i64, align 8
  %nc.addr = alloca i8*, align 8
  %nc_len.addr = alloca i64, align 8
  %cnonce.addr = alloca i8*, align 8
  %cnonce_len.addr = alloca i64, align 8
  %qop.addr = alloca i8*, align 8
  %qop_len.addr = alloca i64, align 8
  %resp.addr = alloca i8*, align 8
  %ha2 = alloca [33 x i8], align 16
  store i8* %method, i8** %method.addr, align 8
  store i64 %method_len, i64* %method_len.addr, align 8
  store i8* %uri, i8** %uri.addr, align 8
  store i64 %uri_len, i64* %uri_len.addr, align 8
  store i8* %ha1, i8** %ha1.addr, align 8
  store i64 %ha1_len, i64* %ha1_len.addr, align 8
  store i8* %nonce, i8** %nonce.addr, align 8
  store i64 %nonce_len, i64* %nonce_len.addr, align 8
  store i8* %nc, i8** %nc.addr, align 8
  store i64 %nc_len, i64* %nc_len.addr, align 8
  store i8* %cnonce, i8** %cnonce.addr, align 8
  store i64 %cnonce_len, i64* %cnonce_len.addr, align 8
  store i8* %qop, i8** %qop.addr, align 8
  store i64 %qop_len, i64* %qop_len.addr, align 8
  store i8* %resp, i8** %resp.addr, align 8
  %arraydecay = getelementptr inbounds [33 x i8], [33 x i8]* %ha2, i32 0, i32 0
  %0 = load i8*, i8** %method.addr, align 8
  %1 = load i64, i64* %method_len.addr, align 8
  %2 = load i8*, i8** %uri.addr, align 8
  %3 = load i64, i64* %uri_len.addr, align 8
  call void (i8*, ...) @cs_md5(i8* %arraydecay, i8* %0, i64 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %2, i64 %3, i8* null)
  %4 = load i8*, i8** %resp.addr, align 8
  %5 = load i8*, i8** %ha1.addr, align 8
  %6 = load i64, i64* %ha1_len.addr, align 8
  %7 = load i8*, i8** %nonce.addr, align 8
  %8 = load i64, i64* %nonce_len.addr, align 8
  %9 = load i8*, i8** %nc.addr, align 8
  %10 = load i64, i64* %nc_len.addr, align 8
  %11 = load i8*, i8** %cnonce.addr, align 8
  %12 = load i64, i64* %cnonce_len.addr, align 8
  %13 = load i8*, i8** %qop.addr, align 8
  %14 = load i64, i64* %qop_len.addr, align 8
  %arraydecay1 = getelementptr inbounds [33 x i8], [33 x i8]* %ha2, i32 0, i32 0
  call void (i8*, ...) @cs_md5(i8* %4, i8* %5, i64 %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %7, i64 %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %9, i64 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %11, i64 %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %13, i64 %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @mg_mkmd5resp.colon, i32 0, i32 0), i64 1, i8* %arraydecay1, i64 32, i8* null)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_http_check_digest_auth(%struct.http_message* %hm, i8* %auth_domain, %struct.__sFILE* %fp) #0 {
entry:
  %hm.addr = alloca %struct.http_message*, align 8
  %auth_domain.addr = alloca i8*, align 8
  %fp.addr = alloca %struct.__sFILE*, align 8
  %ret = alloca i32, align 4
  %hdr = alloca %struct.mg_str*, align 8
  %username_buf = alloca [50 x i8], align 16
  %cnonce_buf = alloca [64 x i8], align 16
  %response_buf = alloca [40 x i8], align 16
  %uri_buf = alloca [200 x i8], align 16
  %qop_buf = alloca [20 x i8], align 16
  %nc_buf = alloca [20 x i8], align 16
  %nonce_buf = alloca [16 x i8], align 16
  %username = alloca i8*, align 8
  %cnonce = alloca i8*, align 8
  %response = alloca i8*, align 8
  %uri = alloca i8*, align 8
  %qop = alloca i8*, align 8
  %nc = alloca i8*, align 8
  %nonce = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp41 = alloca %struct.mg_str, align 8
  %agg.tmp43 = alloca %struct.mg_str, align 8
  %agg.tmp45 = alloca %struct.mg_str, align 8
  %agg.tmp47 = alloca %struct.mg_str, align 8
  %agg.tmp49 = alloca %struct.mg_str, align 8
  %agg.tmp51 = alloca %struct.mg_str, align 8
  %agg.tmp53 = alloca %struct.mg_str, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %auth_domain, i8** %auth_domain.addr, align 8
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8
  store i32 0, i32* %ret, align 4
  %arraydecay = getelementptr inbounds [50 x i8], [50 x i8]* %username_buf, i32 0, i32 0
  store i8* %arraydecay, i8** %username, align 8
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %cnonce_buf, i32 0, i32 0
  store i8* %arraydecay1, i8** %cnonce, align 8
  %arraydecay2 = getelementptr inbounds [40 x i8], [40 x i8]* %response_buf, i32 0, i32 0
  store i8* %arraydecay2, i8** %response, align 8
  %arraydecay3 = getelementptr inbounds [200 x i8], [200 x i8]* %uri_buf, i32 0, i32 0
  store i8* %arraydecay3, i8** %uri, align 8
  %arraydecay4 = getelementptr inbounds [20 x i8], [20 x i8]* %qop_buf, i32 0, i32 0
  store i8* %arraydecay4, i8** %qop, align 8
  %arraydecay5 = getelementptr inbounds [20 x i8], [20 x i8]* %nc_buf, i32 0, i32 0
  store i8* %arraydecay5, i8** %nc, align 8
  %arraydecay6 = getelementptr inbounds [16 x i8], [16 x i8]* %nonce_buf, i32 0, i32 0
  store i8* %arraydecay6, i8** %nonce, align 8
  %0 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %cmp = icmp eq %struct.http_message* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8
  %cmp7 = icmp eq %struct.__sFILE* %1, null
  br i1 %cmp7, label %if.then, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %2 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.90, i32 0, i32 0))
  store %struct.mg_str* %call, %struct.mg_str** %hdr, align 8
  %cmp9 = icmp eq %struct.mg_str* %call, null
  br i1 %cmp9, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false8
  %3 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %call11 = call i32 @mg_http_parse_header2(%struct.mg_str* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i32 0, i32 0), i8** %username, i64 50)
  %cmp12 = icmp eq i32 %call11, 0
  br i1 %cmp12, label %if.then, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %lor.lhs.false10
  %4 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %call14 = call i32 @mg_http_parse_header2(%struct.mg_str* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.97, i32 0, i32 0), i8** %cnonce, i64 64)
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false13
  %5 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %call17 = call i32 @mg_http_parse_header2(%struct.mg_str* %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.98, i32 0, i32 0), i8** %response, i64 40)
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.then, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %6 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %call20 = call i32 @mg_http_parse_header2(%struct.mg_str* %6, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.99, i32 0, i32 0), i8** %uri, i64 200)
  %cmp21 = icmp eq i32 %call20, 0
  br i1 %cmp21, label %if.then, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %lor.lhs.false19
  %7 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %call23 = call i32 @mg_http_parse_header2(%struct.mg_str* %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.100, i32 0, i32 0), i8** %qop, i64 20)
  %cmp24 = icmp eq i32 %call23, 0
  br i1 %cmp24, label %if.then, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false22
  %8 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %call26 = call i32 @mg_http_parse_header2(%struct.mg_str* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.101, i32 0, i32 0), i8** %nc, i64 20)
  %cmp27 = icmp eq i32 %call26, 0
  br i1 %cmp27, label %if.then, label %lor.lhs.false28

lor.lhs.false28:                                  ; preds = %lor.lhs.false25
  %9 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %call29 = call i32 @mg_http_parse_header2(%struct.mg_str* %9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.102, i32 0, i32 0), i8** %nonce, i64 16)
  %cmp30 = icmp eq i32 %call29, 0
  br i1 %cmp30, label %if.then, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %lor.lhs.false28
  %10 = load i8*, i8** %nonce, align 8
  %call32 = call i32 @mg_check_nonce(i8* %10)
  %cmp33 = icmp eq i32 %call32, 0
  br i1 %cmp33, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false31, %lor.lhs.false28, %lor.lhs.false25, %lor.lhs.false22, %lor.lhs.false19, %lor.lhs.false16, %lor.lhs.false13, %lor.lhs.false10, %lor.lhs.false8, %lor.lhs.false, %entry
  store i32 0, i32* %ret, align 4
  br label %clean

if.end:                                           ; preds = %lor.lhs.false31
  %11 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %11, i32 0, i32 2
  %12 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri34 = getelementptr inbounds %struct.http_message, %struct.http_message* %12, i32 0, i32 3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri34, i32 0, i32 0
  %13 = load i8*, i8** %p, align 8
  %14 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri35 = getelementptr inbounds %struct.http_message, %struct.http_message* %14, i32 0, i32 3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri35, i32 0, i32 1
  %15 = load i64, i64* %len, align 8
  %16 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string = getelementptr inbounds %struct.http_message, %struct.http_message* %16, i32 0, i32 7
  %len36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string, i32 0, i32 1
  %17 = load i64, i64* %len36, align 8
  %tobool = icmp ne i64 %17, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %18 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string37 = getelementptr inbounds %struct.http_message, %struct.http_message* %18, i32 0, i32 7
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string37, i32 0, i32 1
  %19 = load i64, i64* %len38, align 8
  %add = add i64 %19, 1
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add, %cond.true ], [ 0, %cond.false ]
  %add39 = add i64 %15, %cond
  %call40 = call { i8*, i64 } @mg_mk_str_n(i8* %13, i64 %add39)
  %20 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  %22 = extractvalue { i8*, i64 } %call40, 0
  store i8* %22, i8** %21, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  %24 = extractvalue { i8*, i64 } %call40, 1
  store i64 %24, i64* %23, align 8
  %25 = load i8*, i8** %username, align 8
  %call42 = call { i8*, i64 } @mg_mk_str(i8* %25)
  %26 = bitcast %struct.mg_str* %agg.tmp41 to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = extractvalue { i8*, i64 } %call42, 0
  store i8* %28, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = extractvalue { i8*, i64 } %call42, 1
  store i64 %30, i64* %29, align 8
  %31 = load i8*, i8** %cnonce, align 8
  %call44 = call { i8*, i64 } @mg_mk_str(i8* %31)
  %32 = bitcast %struct.mg_str* %agg.tmp43 to { i8*, i64 }*
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %32, i32 0, i32 0
  %34 = extractvalue { i8*, i64 } %call44, 0
  store i8* %34, i8** %33, align 8
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %32, i32 0, i32 1
  %36 = extractvalue { i8*, i64 } %call44, 1
  store i64 %36, i64* %35, align 8
  %37 = load i8*, i8** %response, align 8
  %call46 = call { i8*, i64 } @mg_mk_str(i8* %37)
  %38 = bitcast %struct.mg_str* %agg.tmp45 to { i8*, i64 }*
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 0
  %40 = extractvalue { i8*, i64 } %call46, 0
  store i8* %40, i8** %39, align 8
  %41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 1
  %42 = extractvalue { i8*, i64 } %call46, 1
  store i64 %42, i64* %41, align 8
  %43 = load i8*, i8** %qop, align 8
  %call48 = call { i8*, i64 } @mg_mk_str(i8* %43)
  %44 = bitcast %struct.mg_str* %agg.tmp47 to { i8*, i64 }*
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %44, i32 0, i32 0
  %46 = extractvalue { i8*, i64 } %call48, 0
  store i8* %46, i8** %45, align 8
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %44, i32 0, i32 1
  %48 = extractvalue { i8*, i64 } %call48, 1
  store i64 %48, i64* %47, align 8
  %49 = load i8*, i8** %nc, align 8
  %call50 = call { i8*, i64 } @mg_mk_str(i8* %49)
  %50 = bitcast %struct.mg_str* %agg.tmp49 to { i8*, i64 }*
  %51 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %50, i32 0, i32 0
  %52 = extractvalue { i8*, i64 } %call50, 0
  store i8* %52, i8** %51, align 8
  %53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %50, i32 0, i32 1
  %54 = extractvalue { i8*, i64 } %call50, 1
  store i64 %54, i64* %53, align 8
  %55 = load i8*, i8** %nonce, align 8
  %call52 = call { i8*, i64 } @mg_mk_str(i8* %55)
  %56 = bitcast %struct.mg_str* %agg.tmp51 to { i8*, i64 }*
  %57 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %56, i32 0, i32 0
  %58 = extractvalue { i8*, i64 } %call52, 0
  store i8* %58, i8** %57, align 8
  %59 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %56, i32 0, i32 1
  %60 = extractvalue { i8*, i64 } %call52, 1
  store i64 %60, i64* %59, align 8
  %61 = load i8*, i8** %auth_domain.addr, align 8
  %call54 = call { i8*, i64 } @mg_mk_str(i8* %61)
  %62 = bitcast %struct.mg_str* %agg.tmp53 to { i8*, i64 }*
  %63 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %62, i32 0, i32 0
  %64 = extractvalue { i8*, i64 } %call54, 0
  store i8* %64, i8** %63, align 8
  %65 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %62, i32 0, i32 1
  %66 = extractvalue { i8*, i64 } %call54, 1
  store i64 %66, i64* %65, align 8
  %67 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8
  %68 = bitcast %struct.mg_str* %method to { i8*, i64 }*
  %69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %68, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %68, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %74 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %73, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %73, i32 0, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = bitcast %struct.mg_str* %agg.tmp41 to { i8*, i64 }*
  %79 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %78, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %78, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  %call55 = call i32 @mg_check_digest_auth(i8* %70, i64 %72, i8* %75, i64 %77, i8* %80, i64 %82, %struct.mg_str* byval align 8 %agg.tmp43, %struct.mg_str* byval align 8 %agg.tmp45, %struct.mg_str* byval align 8 %agg.tmp47, %struct.mg_str* byval align 8 %agg.tmp49, %struct.mg_str* byval align 8 %agg.tmp51, %struct.mg_str* byval align 8 %agg.tmp53, %struct.__sFILE* %67)
  store i32 %call55, i32* %ret, align 4
  br label %clean

clean:                                            ; preds = %cond.end, %if.then
  %83 = load i8*, i8** %username, align 8
  %arraydecay56 = getelementptr inbounds [50 x i8], [50 x i8]* %username_buf, i32 0, i32 0
  %cmp57 = icmp ne i8* %83, %arraydecay56
  br i1 %cmp57, label %if.then58, label %if.end59

if.then58:                                        ; preds = %clean
  %84 = load i8*, i8** %username, align 8
  call void @free(i8* %84)
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %clean
  %85 = load i8*, i8** %cnonce, align 8
  %arraydecay60 = getelementptr inbounds [64 x i8], [64 x i8]* %cnonce_buf, i32 0, i32 0
  %cmp61 = icmp ne i8* %85, %arraydecay60
  br i1 %cmp61, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.end59
  %86 = load i8*, i8** %cnonce, align 8
  call void @free(i8* %86)
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %if.end59
  %87 = load i8*, i8** %response, align 8
  %arraydecay64 = getelementptr inbounds [40 x i8], [40 x i8]* %response_buf, i32 0, i32 0
  %cmp65 = icmp ne i8* %87, %arraydecay64
  br i1 %cmp65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.end63
  %88 = load i8*, i8** %response, align 8
  call void @free(i8* %88)
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %if.end63
  %89 = load i8*, i8** %uri, align 8
  %arraydecay68 = getelementptr inbounds [200 x i8], [200 x i8]* %uri_buf, i32 0, i32 0
  %cmp69 = icmp ne i8* %89, %arraydecay68
  br i1 %cmp69, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end67
  %90 = load i8*, i8** %uri, align 8
  call void @free(i8* %90)
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.end67
  %91 = load i8*, i8** %qop, align 8
  %arraydecay72 = getelementptr inbounds [20 x i8], [20 x i8]* %qop_buf, i32 0, i32 0
  %cmp73 = icmp ne i8* %91, %arraydecay72
  br i1 %cmp73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.end71
  %92 = load i8*, i8** %qop, align 8
  call void @free(i8* %92)
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %if.end71
  %93 = load i8*, i8** %nc, align 8
  %arraydecay76 = getelementptr inbounds [20 x i8], [20 x i8]* %nc_buf, i32 0, i32 0
  %cmp77 = icmp ne i8* %93, %arraydecay76
  br i1 %cmp77, label %if.then78, label %if.end79

if.then78:                                        ; preds = %if.end75
  %94 = load i8*, i8** %nc, align 8
  call void @free(i8* %94)
  br label %if.end79

if.end79:                                         ; preds = %if.then78, %if.end75
  %95 = load i8*, i8** %nonce, align 8
  %arraydecay80 = getelementptr inbounds [16 x i8], [16 x i8]* %nonce_buf, i32 0, i32 0
  %cmp81 = icmp ne i8* %95, %arraydecay80
  br i1 %cmp81, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end79
  %96 = load i8*, i8** %nonce, align 8
  call void @free(i8* %96)
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %if.end79
  %97 = load i32, i32* %ret, align 4
  ret i32 %97
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_check_nonce(i8* %nonce) #0 {
entry:
  %nonce.addr = alloca i8*, align 8
  %now = alloca i64, align 8
  %val = alloca i64, align 8
  store i8* %nonce, i8** %nonce.addr, align 8
  %call = call double @mg_time()
  %conv = fptoui double %call to i64
  store i64 %conv, i64* %now, align 8
  %0 = load i8*, i8** %nonce.addr, align 8
  %call1 = call i64 @strtoul(i8* %0, i8** null, i32 16)
  store i64 %call1, i64* %val, align 8
  %1 = load i64, i64* %now, align 8
  %2 = load i64, i64* %val, align 8
  %cmp = icmp uge i64 %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %3 = load i64, i64* %now, align 8
  %4 = load i64, i64* %val, align 8
  %sub = sub i64 %3, %4
  %cmp3 = icmp ult i64 %sub, 3600
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_check_digest_auth(i8* %method.coerce0, i64 %method.coerce1, i8* %uri.coerce0, i64 %uri.coerce1, i8* %username.coerce0, i64 %username.coerce1, %struct.mg_str* byval align 8 %cnonce, %struct.mg_str* byval align 8 %response, %struct.mg_str* byval align 8 %qop, %struct.mg_str* byval align 8 %nc, %struct.mg_str* byval align 8 %nonce, %struct.mg_str* byval align 8 %auth_domain, %struct.__sFILE* %fp) #0 {
entry:
  %retval = alloca i32, align 4
  %method = alloca %struct.mg_str, align 8
  %uri = alloca %struct.mg_str, align 8
  %username = alloca %struct.mg_str, align 8
  %fp.addr = alloca %struct.__sFILE*, align 8
  %buf = alloca [128 x i8], align 16
  %f_user = alloca [128 x i8], align 16
  %f_ha1 = alloca [128 x i8], align 16
  %f_domain = alloca [128 x i8], align 16
  %exp_resp = alloca [33 x i8], align 16
  %0 = bitcast %struct.mg_str* %method to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %method.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %method.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %uri to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %uri.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %uri.coerce1, i64* %5, align 8
  %6 = bitcast %struct.mg_str* %username to { i8*, i64 }*
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  store i8* %username.coerce0, i8** %7, align 8
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  store i64 %username.coerce1, i64* %8, align 8
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end44, %entry
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  %9 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8
  %call = call i8* @fgets(i8* %arraydecay, i32 128, %struct.__sFILE* %9)
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %f_user, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [128 x i8], [128 x i8]* %f_domain, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [128 x i8], [128 x i8]* %f_ha1, i32 0, i32 0
  %call5 = call i32 (i8*, i8*, ...) @sscanf(i8* %arraydecay1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.103, i32 0, i32 0), i8* %arraydecay2, i8* %arraydecay3, i8* %arraydecay4)
  %cmp6 = icmp eq i32 %call5, 3
  br i1 %cmp6, label %land.lhs.true, label %if.end44

land.lhs.true:                                    ; preds = %while.body
  %arraydecay7 = getelementptr inbounds [128 x i8], [128 x i8]* %f_user, i32 0, i32 0
  %call8 = call i32 @mg_vcmp(%struct.mg_str* %username, i8* %arraydecay7)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %land.lhs.true10, label %if.end44

land.lhs.true10:                                  ; preds = %land.lhs.true
  %arraydecay11 = getelementptr inbounds [128 x i8], [128 x i8]* %f_domain, i32 0, i32 0
  %call12 = call i32 @mg_vcmp(%struct.mg_str* %auth_domain, i8* %arraydecay11)
  %cmp13 = icmp eq i32 %call12, 0
  br i1 %cmp13, label %if.then, label %if.end44

if.then:                                          ; preds = %land.lhs.true10
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 0
  %10 = load i8*, i8** %p, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %11 = load i64, i64* %len, align 8
  %p14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %12 = load i8*, i8** %p14, align 8
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %13 = load i64, i64* %len15, align 8
  %arraydecay16 = getelementptr inbounds [128 x i8], [128 x i8]* %f_ha1, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [128 x i8], [128 x i8]* %f_ha1, i32 0, i32 0
  %call18 = call i64 @strlen(i8* %arraydecay17)
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %nonce, i32 0, i32 0
  %14 = load i8*, i8** %p19, align 8
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %nonce, i32 0, i32 1
  %15 = load i64, i64* %len20, align 8
  %p21 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %nc, i32 0, i32 0
  %16 = load i8*, i8** %p21, align 8
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %nc, i32 0, i32 1
  %17 = load i64, i64* %len22, align 8
  %p23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %cnonce, i32 0, i32 0
  %18 = load i8*, i8** %p23, align 8
  %len24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %cnonce, i32 0, i32 1
  %19 = load i64, i64* %len24, align 8
  %p25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %qop, i32 0, i32 0
  %20 = load i8*, i8** %p25, align 8
  %len26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %qop, i32 0, i32 1
  %21 = load i64, i64* %len26, align 8
  %arraydecay27 = getelementptr inbounds [33 x i8], [33 x i8]* %exp_resp, i32 0, i32 0
  call void @mg_mkmd5resp(i8* %10, i64 %11, i8* %12, i64 %13, i8* %arraydecay16, i64 %call18, i8* %14, i64 %15, i8* %16, i64 %17, i8* %18, i64 %19, i8* %20, i64 %21, i8* %arraydecay27)
  br label %do.body

do.body:                                          ; preds = %if.then
  %call28 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7680)
  %tobool = icmp ne i32 %call28, 0
  br i1 %tobool, label %if.then29, label %if.end

if.then29:                                        ; preds = %do.body
  %len30 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %username, i32 0, i32 1
  %22 = load i64, i64* %len30, align 8
  %conv = trunc i64 %22 to i32
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %username, i32 0, i32 0
  %23 = load i8*, i8** %p31, align 8
  %arraydecay32 = getelementptr inbounds [128 x i8], [128 x i8]* %f_domain, i32 0, i32 0
  %len33 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %response, i32 0, i32 1
  %24 = load i64, i64* %len33, align 8
  %conv34 = trunc i64 %24 to i32
  %p35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %response, i32 0, i32 0
  %25 = load i8*, i8** %p35, align 8
  %arraydecay36 = getelementptr inbounds [33 x i8], [33 x i8]* %exp_resp, i32 0, i32 0
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.104, i32 0, i32 0), i32 %conv, i8* %23, i8* %arraydecay32, i32 %conv34, i8* %25, i8* %arraydecay36)
  br label %if.end

if.end:                                           ; preds = %if.then29, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %response, i32 0, i32 0
  %26 = load i8*, i8** %p37, align 8
  %arraydecay38 = getelementptr inbounds [33 x i8], [33 x i8]* %exp_resp, i32 0, i32 0
  %arraydecay39 = getelementptr inbounds [33 x i8], [33 x i8]* %exp_resp, i32 0, i32 0
  %call40 = call i64 @strlen(i8* %arraydecay39)
  %call41 = call i32 @mg_ncasecmp(i8* %26, i8* %arraydecay38, i64 %call40)
  %cmp42 = icmp eq i32 %call41, 0
  %conv43 = zext i1 %cmp42 to i32
  store i32 %conv43, i32* %retval, align 4
  br label %return

if.end44:                                         ; preds = %land.lhs.true10, %land.lhs.true, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %do.end
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

declare i8* @fgets(i8*, i32, %struct.__sFILE*) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_http_is_authorized(%struct.http_message* %hm, i8* %path.coerce0, i64 %path.coerce1, i8* %domain, i8* %passwords_file, i32 %flags) #0 {
entry:
  %path = alloca %struct.mg_str, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %domain.addr = alloca i8*, align 8
  %passwords_file.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %buf = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  %authorized = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %path.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %path.coerce1, i64* %2, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %domain, i8** %domain.addr, align 8
  store i8* %passwords_file, i8** %passwords_file.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 1, i32* %authorized, align 4
  %3 = load i8*, i8** %domain.addr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end37

land.lhs.true:                                    ; preds = %entry
  %4 = load i8*, i8** %passwords_file.addr, align 8
  %cmp1 = icmp ne i8* %4, null
  br i1 %cmp1, label %if.then, label %if.end37

if.then:                                          ; preds = %land.lhs.true
  %5 = load i32, i32* %flags.addr, align 4
  %and = and i32 %5, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %6 = load i8*, i8** %passwords_file.addr, align 8
  %call = call %struct.__sFILE* @mg_fopen(i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8
  br label %if.end25

if.else:                                          ; preds = %if.then
  %7 = load i32, i32* %flags.addr, align 4
  %and3 = and i32 %7, 1
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %8 = load i64, i64* %len, align 8
  %conv = trunc i64 %8 to i32
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %9 = load i8*, i8** %p6, align 8
  %10 = load i8*, i8** %passwords_file.addr, align 8
  %call7 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106, i32 0, i32 0), i32 %conv, i8* %9, i32 47, i8* %10)
  %arraydecay8 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %call9 = call %struct.__sFILE* @mg_fopen(i8* %arraydecay8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call9, %struct.__sFILE** %fp, align 8
  br label %if.end24

if.else10:                                        ; preds = %if.else
  %p11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %11 = load i8*, i8** %p11, align 8
  %call12 = call i8* @strrchr(i8* %11, i32 47)
  store i8* %call12, i8** %p, align 8
  %12 = load i8*, i8** %p, align 8
  %cmp13 = icmp eq i8* %12, null
  br i1 %cmp13, label %if.then15, label %if.end

if.then15:                                        ; preds = %if.else10
  %p16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %13 = load i8*, i8** %p16, align 8
  store i8* %13, i8** %p, align 8
  br label %if.end

if.end:                                           ; preds = %if.then15, %if.else10
  %arraydecay17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %14 = load i8*, i8** %p, align 8
  %p18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %15 = load i8*, i8** %p18, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv19 = trunc i64 %sub.ptr.sub to i32
  %p20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %16 = load i8*, i8** %p20, align 8
  %17 = load i8*, i8** %passwords_file.addr, align 8
  %call21 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay17, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.106, i32 0, i32 0), i32 %conv19, i8* %16, i32 47, i8* %17)
  %arraydecay22 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %call23 = call %struct.__sFILE* @mg_fopen(i8* %arraydecay22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call23, %struct.__sFILE** %fp, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then5
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then2
  %18 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %cmp26 = icmp ne %struct.__sFILE* %18, null
  br i1 %cmp26, label %if.then28, label %if.else31

if.then28:                                        ; preds = %if.end25
  %19 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %20 = load i8*, i8** %domain.addr, align 8
  %21 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call29 = call i32 @mg_http_check_digest_auth(%struct.http_message* %19, i8* %20, %struct.__sFILE* %21)
  store i32 %call29, i32* %authorized, align 4
  %22 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call30 = call i32 @fclose(%struct.__sFILE* %22)
  br label %if.end36

if.else31:                                        ; preds = %if.end25
  %23 = load i32, i32* %flags.addr, align 4
  %and32 = and i32 %23, 4
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %if.else31
  store i32 0, i32* %authorized, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.else31
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then28
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.end37
  %call38 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7721)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then40, label %if.end45

if.then40:                                        ; preds = %do.body
  %len41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %24 = load i64, i64* %len41, align 8
  %conv42 = trunc i64 %24 to i32
  %p43 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %25 = load i8*, i8** %p43, align 8
  %26 = load i8*, i8** %passwords_file.addr, align 8
  %tobool44 = icmp ne i8* %26, null
  br i1 %tobool44, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then40
  %27 = load i8*, i8** %passwords_file.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then40
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %27, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.false ]
  %28 = load i32, i32* %flags.addr, align 4
  %29 = load i32, i32* %authorized, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i32 0, i32 0), i32 %conv42, i8* %25, i8* %cond, i32 %28, i32 %29)
  br label %if.end45

if.end45:                                         ; preds = %cond.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end45
  %30 = load i32, i32* %authorized, align 4
  ret i32 %30
}

declare i8* @strrchr(i8*, i32) #3

declare i32 @fclose(%struct.__sFILE*) #3

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_http_reverse_proxy(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %mount.coerce0, i64 %mount.coerce1, i8* %upstream.coerce0, i64 %upstream.coerce1) #0 {
entry:
  %mount = alloca %struct.mg_str, align 8
  %upstream = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %be = alloca %struct.mg_connection*, align 8
  %burl = alloca [256 x i8], align 16
  %purl = alloca i8*, align 8
  %i = alloca i32, align 4
  %error = alloca i8*, align 8
  %opts = alloca %struct.mg_connect_opts, align 8
  %path = alloca %struct.mg_str, align 8
  %user_info = alloca %struct.mg_str, align 8
  %host = alloca %struct.mg_str, align 8
  %hn = alloca %struct.mg_str, align 8
  %hv = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %mount to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %mount.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %mount.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %upstream to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %upstream.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %upstream.coerce1, i64* %5, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %burl, i32 0, i32 0
  store i8* %arraydecay, i8** %purl, align 8
  %6 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i32 8, i1 false)
  %7 = bitcast %struct.mg_str* %user_info to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 16, i32 8, i1 false)
  %8 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 16, i32 8, i1 false)
  %9 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 40, i32 8, i1 false)
  %error_string = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  store i8** %error, i8*** %error_string, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %upstream, i32 0, i32 1
  %10 = load i64, i64* %len, align 8
  %conv = trunc i64 %10 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %upstream, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8
  %12 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %12, i32 0, i32 3
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %13 = load i64, i64* %len1, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mount, i32 0, i32 1
  %14 = load i64, i64* %len2, align 8
  %sub = sub i64 %13, %14
  %conv3 = trunc i64 %sub to i32
  %15 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri4 = getelementptr inbounds %struct.http_message, %struct.http_message* %15, i32 0, i32 3
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri4, i32 0, i32 0
  %16 = load i8*, i8** %p5, align 8
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mount, i32 0, i32 1
  %17 = load i64, i64* %len6, align 8
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %17
  %call = call i32 (i8**, i64, i8*, ...) @mg_asprintf(i8** %purl, i64 256, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), i32 %conv, i8* %11, i32 %conv3, i8* %add.ptr)
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 3
  %19 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %20 = load i8*, i8** %purl, align 8
  %call7 = call %struct.mg_connection* @mg_connect_http_base(%struct.mg_mgr* %19, void (%struct.mg_connection*, i32, i8*)* @mg_reverse_proxy_handler, %struct.mg_connect_opts* byval align 8 %opts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.110, i32 0, i32 0), i8* null, i8* %20, %struct.mg_str* %path, %struct.mg_str* %user_info, %struct.mg_str* %host)
  store %struct.mg_connection* %call7, %struct.mg_connection** %be, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call8 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7987)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %21 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri9 = getelementptr inbounds %struct.http_message, %struct.http_message* %21, i32 0, i32 3
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri9, i32 0, i32 1
  %22 = load i64, i64* %len10, align 8
  %conv11 = trunc i64 %22 to i32
  %23 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri12 = getelementptr inbounds %struct.http_message, %struct.http_message* %23, i32 0, i32 3
  %p13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri12, i32 0, i32 0
  %24 = load i8*, i8** %p13, align 8
  %25 = load i8*, i8** %purl, align 8
  %len14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mount, i32 0, i32 1
  %26 = load i64, i64* %len14, align 8
  %conv15 = trunc i64 %26 to i32
  %p16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mount, i32 0, i32 0
  %27 = load i8*, i8** %p16, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.111, i32 0, i32 0), i32 %conv11, i8* %24, i8* %25, i32 %conv15, i8* %27)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %28 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  %cmp = icmp eq %struct.mg_connection* %28, null
  br i1 %cmp, label %if.then18, label %if.end25

if.then18:                                        ; preds = %do.end
  br label %do.body19

do.body19:                                        ; preds = %if.then18
  %call20 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7990)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %do.body19
  %29 = load i8*, i8** %purl, align 8
  %30 = load i8*, i8** %error, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.112, i32 0, i32 0), i8* %29, i8* %30)
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %do.body19
  br label %do.end24

do.end24:                                         ; preds = %if.end23
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %31, i32 502, i8* null)
  br label %cleanup

if.end25:                                         ; preds = %do.end
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %33 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  %call26 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %33)
  %reverse_proxy_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %call26, i32 0, i32 6
  %linked_conn = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data, i32 0, i32 0
  store %struct.mg_connection* %32, %struct.mg_connection** %linked_conn, align 8
  %34 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call27 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %35)
  %reverse_proxy_data28 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %call27, i32 0, i32 6
  %linked_conn29 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data28, i32 0, i32 0
  store %struct.mg_connection* %34, %struct.mg_connection** %linked_conn29, align 8
  %36 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  %37 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %37, i32 0, i32 2
  %len30 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %38 = load i64, i64* %len30, align 8
  %conv31 = trunc i64 %38 to i32
  %39 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method32 = getelementptr inbounds %struct.http_message, %struct.http_message* %39, i32 0, i32 2
  %p33 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method32, i32 0, i32 0
  %40 = load i8*, i8** %p33, align 8
  %len34 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %41 = load i64, i64* %len34, align 8
  %conv35 = trunc i64 %41 to i32
  %p36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %42 = load i8*, i8** %p36, align 8
  %call37 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %36, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.113, i32 0, i32 0), i32 %conv31, i8* %40, i32 %conv35, i8* %42)
  %43 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 1
  %44 = load i64, i64* %len38, align 8
  %conv39 = trunc i64 %44 to i32
  %p40 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %45 = load i8*, i8** %p40, align 8
  %call41 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %43, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.114, i32 0, i32 0), i32 %conv39, i8* %45)
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end25
  %46 = load i32, i32* %i, align 4
  %cmp42 = icmp slt i32 %46, 40
  br i1 %cmp42, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %47 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_names = getelementptr inbounds %struct.http_message, %struct.http_message* %47, i32 0, i32 8
  %48 = load i32, i32* %i, align 4
  %idxprom = sext i32 %48 to i64
  %arrayidx = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names, i64 0, i64 %idxprom
  %len44 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx, i32 0, i32 1
  %49 = load i64, i64* %len44, align 8
  %cmp45 = icmp ugt i64 %49, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %50 = phi i1 [ false, %for.cond ], [ %cmp45, %land.rhs ]
  br i1 %50, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %51 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_names47 = getelementptr inbounds %struct.http_message, %struct.http_message* %51, i32 0, i32 8
  %52 = load i32, i32* %i, align 4
  %idxprom48 = sext i32 %52 to i64
  %arrayidx49 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names47, i64 0, i64 %idxprom48
  %53 = bitcast %struct.mg_str* %hn to i8*
  %54 = bitcast %struct.mg_str* %arrayidx49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 16, i32 8, i1 false)
  %55 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_values = getelementptr inbounds %struct.http_message, %struct.http_message* %55, i32 0, i32 9
  %56 = load i32, i32* %i, align 4
  %idxprom50 = sext i32 %56 to i64
  %arrayidx51 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values, i64 0, i64 %idxprom50
  %57 = bitcast %struct.mg_str* %hv to i8*
  %58 = bitcast %struct.mg_str* %arrayidx51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 16, i32 8, i1 false)
  %call52 = call i32 @mg_vcasecmp(%struct.mg_str* %hn, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0))
  %cmp53 = icmp eq i32 %call52, 0
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %for.body
  br label %for.inc

if.end56:                                         ; preds = %for.body
  %call57 = call i32 @mg_vcasecmp(%struct.mg_str* %hn, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.116, i32 0, i32 0))
  %cmp58 = icmp eq i32 %call57, 0
  br i1 %cmp58, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %if.end56
  %call60 = call i32 @mg_vcasecmp(%struct.mg_str* %hv, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0))
  %cmp61 = icmp eq i32 %call60, 0
  br i1 %cmp61, label %if.then63, label %if.end66

if.then63:                                        ; preds = %land.lhs.true
  %59 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  %60 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %60, i32 0, i32 1
  %len64 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  %61 = load i64, i64* %len64, align 8
  %call65 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %59, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.117, i32 0, i32 0), i64 %61)
  br label %for.inc

if.end66:                                         ; preds = %land.lhs.true, %if.end56
  %call67 = call i32 @mg_vcasecmp(%struct.mg_str* %hn, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.118, i32 0, i32 0))
  %cmp68 = icmp eq i32 %call67, 0
  br i1 %cmp68, label %land.lhs.true70, label %if.end75

land.lhs.true70:                                  ; preds = %if.end66
  %call71 = call i32 @mg_vcasecmp(%struct.mg_str* %hv, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.119, i32 0, i32 0))
  %cmp72 = icmp eq i32 %call71, 0
  br i1 %cmp72, label %if.then74, label %if.end75

if.then74:                                        ; preds = %land.lhs.true70
  br label %for.inc

if.end75:                                         ; preds = %land.lhs.true70, %if.end66
  %62 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  %len76 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %hn, i32 0, i32 1
  %63 = load i64, i64* %len76, align 8
  %conv77 = trunc i64 %63 to i32
  %p78 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %hn, i32 0, i32 0
  %64 = load i8*, i8** %p78, align 8
  %len79 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %hv, i32 0, i32 1
  %65 = load i64, i64* %len79, align 8
  %conv80 = trunc i64 %65 to i32
  %p81 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %hv, i32 0, i32 0
  %66 = load i8*, i8** %p81, align 8
  %call82 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %62, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.120, i32 0, i32 0), i32 %conv77, i8* %64, i32 %conv80, i8* %66)
  br label %for.inc

for.inc:                                          ; preds = %if.end75, %if.then74, %if.then63, %if.then55
  %67 = load i32, i32* %i, align 4
  %inc = add nsw i32 %67, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %68 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  call void @mg_send(%struct.mg_connection* %68, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %69 = load %struct.mg_connection*, %struct.mg_connection** %be, align 8
  %70 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body83 = getelementptr inbounds %struct.http_message, %struct.http_message* %70, i32 0, i32 1
  %p84 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body83, i32 0, i32 0
  %71 = load i8*, i8** %p84, align 8
  %72 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body85 = getelementptr inbounds %struct.http_message, %struct.http_message* %72, i32 0, i32 1
  %len86 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body85, i32 0, i32 1
  %73 = load i64, i64* %len86, align 8
  %conv87 = trunc i64 %73 to i32
  call void @mg_send(%struct.mg_connection* %69, i8* %71, i32 %conv87)
  br label %cleanup

cleanup:                                          ; preds = %for.end, %do.end24
  %74 = load i8*, i8** %purl, align 8
  %arraydecay88 = getelementptr inbounds [256 x i8], [256 x i8]* %burl, i32 0, i32 0
  %cmp89 = icmp ne i8* %74, %arraydecay88
  br i1 %cmp89, label %if.then91, label %if.end92

if.then91:                                        ; preds = %cleanup
  %75 = load i8*, i8** %purl, align 8
  call void @free(i8* %75)
  br label %if.end92

if.end92:                                         ; preds = %if.then91, %cleanup
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_http_base(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, %struct.mg_connect_opts* byval align 8 %opts, i8* %scheme1, i8* %scheme2, i8* %scheme_ssl1, i8* %scheme_ssl2, i8* %url, %struct.mg_str* %path, %struct.mg_str* %user_info, %struct.mg_str* %host) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %scheme1.addr = alloca i8*, align 8
  %scheme2.addr = alloca i8*, align 8
  %scheme_ssl1.addr = alloca i8*, align 8
  %scheme_ssl2.addr = alloca i8*, align 8
  %url.addr = alloca i8*, align 8
  %path.addr = alloca %struct.mg_str*, align 8
  %user_info.addr = alloca %struct.mg_str*, align 8
  %host.addr = alloca %struct.mg_str*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %port_i = alloca i32, align 4
  %use_ssl = alloca i32, align 4
  %scheme = alloca %struct.mg_str, align 8
  %query = alloca %struct.mg_str, align 8
  %fragment = alloca %struct.mg_str, align 8
  %conn_addr_buf = alloca [2 x i8], align 1
  %conn_addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  store i8* %scheme1, i8** %scheme1.addr, align 8
  store i8* %scheme2, i8** %scheme2.addr, align 8
  store i8* %scheme_ssl1, i8** %scheme_ssl1.addr, align 8
  store i8* %scheme_ssl2, i8** %scheme_ssl2.addr, align 8
  store i8* %url, i8** %url.addr, align 8
  store %struct.mg_str* %path, %struct.mg_str** %path.addr, align 8
  store %struct.mg_str* %user_info, %struct.mg_str** %user_info.addr, align 8
  store %struct.mg_str* %host, %struct.mg_str** %host.addr, align 8
  store %struct.mg_connection* null, %struct.mg_connection** %nc, align 8
  store i32 0, i32* %port_i, align 4
  store i32 0, i32* %use_ssl, align 4
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %conn_addr_buf, i32 0, i32 0
  store i8* %arraydecay, i8** %conn_addr, align 8
  %0 = load i8*, i8** %url.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* %0)
  %1 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %3 = extractvalue { i8*, i64 } %call, 0
  store i8* %3, i8** %2, align 8
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %5 = extractvalue { i8*, i64 } %call, 1
  store i64 %5, i64* %4, align 8
  %6 = load %struct.mg_str*, %struct.mg_str** %user_info.addr, align 8
  %7 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %8 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %9 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %call1 = call i32 @mg_parse_uri(i8* %11, i64 %13, %struct.mg_str* %scheme, %struct.mg_str* %6, %struct.mg_str* %7, i32* %port_i, %struct.mg_str* %8, %struct.mg_str* %query, %struct.mg_str* %fragment)
  %cmp = icmp ne i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %error_string = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %14 = load i8**, i8*** %error_string, align 8
  %tobool = icmp ne i8** %14, null
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %do.body
  %error_string3 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %15 = load i8**, i8*** %error_string3, align 8
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.127, i32 0, i32 0), i8** %15, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %out

if.end4:                                          ; preds = %entry
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query, i32 0, i32 1
  %16 = load i64, i64* %len, align 8
  %cmp5 = icmp ugt i64 %16, 0
  br i1 %cmp5, label %if.then6, label %if.end10

if.then6:                                         ; preds = %if.end4
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query, i32 0, i32 1
  %17 = load i64, i64* %len7, align 8
  %add = add i64 %17, 1
  %18 = load %struct.mg_str*, %struct.mg_str** %path.addr, align 8
  %len8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %18, i32 0, i32 1
  %19 = load i64, i64* %len8, align 8
  %add9 = add i64 %19, %add
  store i64 %add9, i64* %len8, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.then6, %if.end4
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %scheme, i32 0, i32 1
  %20 = load i64, i64* %len11, align 8
  %cmp12 = icmp eq i64 %20, 0
  br i1 %cmp12, label %if.then19, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end10
  %21 = load i8*, i8** %scheme1.addr, align 8
  %call13 = call i32 @mg_vcmp(%struct.mg_str* %scheme, i8* %21)
  %cmp14 = icmp eq i32 %call13, 0
  br i1 %cmp14, label %if.then19, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %22 = load i8*, i8** %scheme2.addr, align 8
  %cmp16 = icmp ne i8* %22, null
  br i1 %cmp16, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false15
  %23 = load i8*, i8** %scheme2.addr, align 8
  %call17 = call i32 @mg_vcmp(%struct.mg_str* %scheme, i8* %23)
  %cmp18 = icmp eq i32 %call17, 0
  br i1 %cmp18, label %if.then19, label %if.else

if.then19:                                        ; preds = %land.lhs.true, %lor.lhs.false, %if.end10
  store i32 0, i32* %use_ssl, align 4
  %24 = load i32, i32* %port_i, align 4
  %cmp20 = icmp eq i32 %24, 0
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.then19
  store i32 80, i32* %port_i, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %if.then19
  br label %if.end36

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false15
  %25 = load i8*, i8** %scheme_ssl1.addr, align 8
  %call23 = call i32 @mg_vcmp(%struct.mg_str* %scheme, i8* %25)
  %cmp24 = icmp eq i32 %call23, 0
  br i1 %cmp24, label %if.then30, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %if.else
  %26 = load i8*, i8** %scheme2.addr, align 8
  %cmp26 = icmp ne i8* %26, null
  br i1 %cmp26, label %land.lhs.true27, label %if.else34

land.lhs.true27:                                  ; preds = %lor.lhs.false25
  %27 = load i8*, i8** %scheme_ssl2.addr, align 8
  %call28 = call i32 @mg_vcmp(%struct.mg_str* %scheme, i8* %27)
  %cmp29 = icmp eq i32 %call28, 0
  br i1 %cmp29, label %if.then30, label %if.else34

if.then30:                                        ; preds = %land.lhs.true27, %if.else
  store i32 1, i32* %use_ssl, align 4
  %28 = load i32, i32* %port_i, align 4
  %cmp31 = icmp eq i32 %28, 0
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.then30
  store i32 443, i32* %port_i, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %if.then30
  br label %if.end35

if.else34:                                        ; preds = %land.lhs.true27, %lor.lhs.false25
  br label %out

if.end35:                                         ; preds = %if.end33
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end22
  %29 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %len37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %29, i32 0, i32 1
  %30 = load i64, i64* %len37, align 8
  %conv = trunc i64 %30 to i32
  %31 = load %struct.mg_str*, %struct.mg_str** %host.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %31, i32 0, i32 0
  %32 = load i8*, i8** %p, align 8
  %33 = load i32, i32* %port_i, align 4
  %call38 = call i32 (i8**, i64, i8*, ...) @mg_asprintf(i8** %conn_addr, i64 2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.128, i32 0, i32 0), i32 %conv, i8* %32, i32 %33)
  %34 = load i8*, i8** %conn_addr, align 8
  %cmp39 = icmp eq i8* %34, null
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end36
  br label %out

if.end42:                                         ; preds = %if.end36
  br label %do.body43

do.body43:                                        ; preds = %if.end42
  %call44 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 8642)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %do.body43
  %35 = load i8*, i8** %url.addr, align 8
  %36 = load i32, i32* %use_ssl, align 4
  %37 = load i8*, i8** %conn_addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.129, i32 0, i32 0), i8* %35, i32 %36, i8* %37)
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %do.body43
  br label %do.end48

do.end48:                                         ; preds = %if.end47
  %38 = load i32, i32* %use_ssl, align 4
  %tobool49 = icmp ne i32 %38, 0
  br i1 %tobool49, label %if.then50, label %if.end58

if.then50:                                        ; preds = %do.end48
  br label %do.body51

do.body51:                                        ; preds = %if.then50
  %error_string52 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %39 = load i8**, i8*** %error_string52, align 8
  %tobool53 = icmp ne i8** %39, null
  br i1 %tobool53, label %if.then54, label %if.end56

if.then54:                                        ; preds = %do.body51
  %error_string55 = getelementptr inbounds %struct.mg_connect_opts, %struct.mg_connect_opts* %opts, i32 0, i32 2
  %40 = load i8**, i8*** %error_string55, align 8
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.130, i32 0, i32 0), i8** %40, align 8
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.body51
  br label %do.end57

do.end57:                                         ; preds = %if.end56
  br label %out

if.end58:                                         ; preds = %do.end48
  %41 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %42 = load i8*, i8** %conn_addr, align 8
  %43 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %call59 = call %struct.mg_connection* @mg_connect_opt(%struct.mg_mgr* %41, i8* %42, void (%struct.mg_connection*, i32, i8*)* %43, %struct.mg_connect_opts* byval align 8 %opts)
  store %struct.mg_connection* %call59, %struct.mg_connection** %nc, align 8
  %cmp60 = icmp ne %struct.mg_connection* %call59, null
  br i1 %cmp60, label %if.then62, label %if.end63

if.then62:                                        ; preds = %if.end58
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_set_protocol_http_websocket(%struct.mg_connection* %44)
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %if.end58
  br label %out

out:                                              ; preds = %if.end63, %do.end57, %if.then41, %if.else34, %do.end
  %45 = load i8*, i8** %conn_addr, align 8
  %cmp64 = icmp ne i8* %45, null
  br i1 %cmp64, label %land.lhs.true66, label %if.end71

land.lhs.true66:                                  ; preds = %out
  %46 = load i8*, i8** %conn_addr, align 8
  %arraydecay67 = getelementptr inbounds [2 x i8], [2 x i8]* %conn_addr_buf, i32 0, i32 0
  %cmp68 = icmp ne i8* %46, %arraydecay67
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %land.lhs.true66
  %47 = load i8*, i8** %conn_addr, align 8
  call void @free(i8* %47)
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %land.lhs.true66, %out
  %48 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  ret %struct.mg_connection* %48
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_reverse_proxy_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %hm = alloca %struct.http_message*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %ev_data, i8** %ev_data.addr, align 8
  %0 = load i8*, i8** %ev_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.http_message*
  store %struct.http_message* %1, %struct.http_message** %hm, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %2)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8
  %3 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cmp = icmp eq %struct.mg_http_proto_data* %3, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %4, i32 0, i32 6
  %linked_conn = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data, i32 0, i32 0
  %5 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn, align 8
  %cmp1 = icmp eq %struct.mg_connection* %5, null
  br i1 %cmp1, label %if.then, label %if.end4

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %call2 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7941)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then3, label %if.end

if.then3:                                         ; preds = %do.body
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.199, i32 0, i32 0), %struct.mg_connection* %6)
  br label %if.end

if.end:                                           ; preds = %if.then3, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %sw.epilog

if.end4:                                          ; preds = %lor.lhs.false
  %7 = load i32, i32* %ev.addr, align 4
  switch i32 %7, label %sw.epilog [
    i32 2, label %sw.bb
    i32 101, label %sw.bb10
    i32 5, label %sw.bb18
  ]

sw.bb:                                            ; preds = %if.end4
  %8 = load i8*, i8** %ev_data.addr, align 8
  %9 = bitcast i8* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %cmp5 = icmp ne i32 %10, 0
  br i1 %cmp5, label %if.then6, label %if.end9

if.then6:                                         ; preds = %sw.bb
  %11 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data7 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %11, i32 0, i32 6
  %linked_conn8 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data7, i32 0, i32 0
  %12 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn8, align 8
  call void @mg_http_send_error(%struct.mg_connection* %12, i32 502, i8* null)
  br label %if.end9

if.end9:                                          ; preds = %if.then6, %sw.bb
  br label %sw.epilog

sw.bb10:                                          ; preds = %if.end4
  %13 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data11 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %13, i32 0, i32 6
  %linked_conn12 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data11, i32 0, i32 0
  %14 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn12, align 8
  %15 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %message = getelementptr inbounds %struct.http_message, %struct.http_message* %15, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message, i32 0, i32 0
  %16 = load i8*, i8** %p, align 8
  %17 = load %struct.http_message*, %struct.http_message** %hm, align 8
  %message13 = getelementptr inbounds %struct.http_message, %struct.http_message* %17, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %message13, i32 0, i32 1
  %18 = load i64, i64* %len, align 8
  %conv = trunc i64 %18 to i32
  call void @mg_send(%struct.mg_connection* %14, i8* %16, i32 %conv)
  %19 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data14 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %19, i32 0, i32 6
  %linked_conn15 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data14, i32 0, i32 0
  %20 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn15, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 21
  %21 = load i64, i64* %flags, align 8
  %or = or i64 %21, 1024
  store i64 %or, i64* %flags, align 8
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags16 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 21
  %23 = load i64, i64* %flags16, align 8
  %or17 = or i64 %23, 2048
  store i64 %or17, i64* %flags16, align 8
  br label %sw.epilog

sw.bb18:                                          ; preds = %if.end4
  %24 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data19 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %24, i32 0, i32 6
  %linked_conn20 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data19, i32 0, i32 0
  %25 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn20, align 8
  %flags21 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %25, i32 0, i32 21
  %26 = load i64, i64* %flags21, align 8
  %or22 = or i64 %26, 1024
  store i64 %or22, i64* %flags21, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end, %if.end4, %sw.bb18, %sw.bb10, %if.end9
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_http_send_digest_auth_request(%struct.mg_connection* %c, i8* %domain) #0 {
entry:
  %c.addr = alloca %struct.mg_connection*, align 8
  %domain.addr = alloca i8*, align 8
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store i8* %domain, i8** %domain.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %1 = load i8*, i8** %domain.addr, align 8
  %call = call double @mg_time()
  %conv = fptoui double %call to i64
  %call1 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %0, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.121, i32 0, i32 0), i8* %1, i64 %conv)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_serve_http(%struct.mg_connection* %nc, %struct.http_message* %hm, %struct.mg_serve_http_opts* byval align 8 %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path = alloca i8*, align 8
  %hdr = alloca %struct.mg_str*, align 8
  %path_info = alloca %struct.mg_str, align 8
  %remote_ip = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* null, i8** %path, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 6
  %sin = bitcast %union.socket_address* %sa to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %1 = bitcast %struct.in_addr* %sin_addr to i32*
  %2 = load i32, i32* %1, align 4
  %call = call i32 @_OSSwapInt32(i32 %2)
  store i32 %call, i32* %remote_ip, align 4
  %ip_acl = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 7
  %3 = load i8*, i8** %ip_acl, align 8
  %4 = load i32, i32* %remote_ip, align 4
  %call1 = call i32 @mg_check_ip_acl(i8* %3, i32 %4)
  %cmp = icmp ne i32 %call1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %5, i32 403, i8* null)
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 21
  %7 = load i64, i64* %flags, align 8
  %or = or i64 %7, 1024
  store i64 %or, i64* %flags, align 8
  br label %if.end49

if.end:                                           ; preds = %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %9 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call2 = call i32 @mg_http_handle_forwarding(%struct.mg_connection* %8, %struct.http_message* %9, %struct.mg_serve_http_opts* %opts)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  br label %if.end49

if.end4:                                          ; preds = %if.end
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %11 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call5 = call i32 @mg_http_send_port_based_redirect(%struct.mg_connection* %10, %struct.http_message* %11, %struct.mg_serve_http_opts* %opts)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  br label %if.end49

if.end8:                                          ; preds = %if.end4
  %document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 0
  %12 = load i8*, i8** %document_root, align 8
  %cmp9 = icmp eq i8* %12, null
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end8
  %document_root11 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0), i8** %document_root11, align 8
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %per_directory_auth_file = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 2
  %13 = load i8*, i8** %per_directory_auth_file, align 8
  %cmp13 = icmp eq i8* %13, null
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end12
  %per_directory_auth_file15 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 2
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8** %per_directory_auth_file15, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end12
  %enable_directory_listing = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 5
  %14 = load i8*, i8** %enable_directory_listing, align 8
  %cmp17 = icmp eq i8* %14, null
  br i1 %cmp17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end16
  %enable_directory_listing19 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 5
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123, i32 0, i32 0), i8** %enable_directory_listing19, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %cgi_file_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 12
  %15 = load i8*, i8** %cgi_file_pattern, align 8
  %cmp21 = icmp eq i8* %15, null
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end20
  %cgi_file_pattern23 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 12
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i32 0, i32 0), i8** %cgi_file_pattern23, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end20
  %ssi_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 6
  %16 = load i8*, i8** %ssi_pattern, align 8
  %cmp25 = icmp eq i8* %16, null
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end24
  %ssi_pattern27 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 6
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.125, i32 0, i32 0), i8** %ssi_pattern27, align 8
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %index_files = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 1
  %17 = load i8*, i8** %index_files, align 8
  %cmp29 = icmp eq i8* %17, null
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  %index_files31 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %opts, i32 0, i32 1
  store i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.126, i32 0, i32 0), i8** %index_files31, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %18 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %18, i32 0, i32 3
  %19 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri33 = getelementptr inbounds %struct.http_message, %struct.http_message* %19, i32 0, i32 3
  %call34 = call i32 @mg_normalize_uri_path(%struct.mg_str* %uri, %struct.mg_str* %uri33)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end37, label %if.then36

if.then36:                                        ; preds = %if.end32
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %20, i32 400, i8* null)
  br label %if.end49

if.end37:                                         ; preds = %if.end32
  %21 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call38 = call i32 @mg_uri_to_local_path(%struct.http_message* %21, %struct.mg_serve_http_opts* %opts, i8** %path, %struct.mg_str* %path_info)
  %cmp39 = icmp eq i32 %call38, 0
  br i1 %cmp39, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.end37
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %22, i32 404, i8* null)
  br label %if.end49

if.end41:                                         ; preds = %if.end37
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %24 = load i8*, i8** %path, align 8
  %25 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  call void @mg_send_http_file(%struct.mg_connection* %23, i8* %24, %struct.mg_str* %path_info, %struct.http_message* %25, %struct.mg_serve_http_opts* %opts)
  %26 = load i8*, i8** %path, align 8
  call void @free(i8* %26)
  store i8* null, i8** %path, align 8
  %27 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %proto = getelementptr inbounds %struct.http_message, %struct.http_message* %27, i32 0, i32 4
  %call42 = call i32 @mg_vcmp(%struct.mg_str* %proto, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.83, i32 0, i32 0))
  %cmp43 = icmp ne i32 %call42, 0
  br i1 %cmp43, label %if.then48, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end41
  %28 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call44 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %28, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.81, i32 0, i32 0))
  store %struct.mg_str* %call44, %struct.mg_str** %hdr, align 8
  %cmp45 = icmp ne %struct.mg_str* %call44, null
  br i1 %cmp45, label %land.lhs.true, label %if.end49

land.lhs.true:                                    ; preds = %lor.lhs.false
  %29 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %call46 = call i32 @mg_vcmp(%struct.mg_str* %29, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0))
  %cmp47 = icmp ne i32 %call46, 0
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %land.lhs.true, %if.end41
  br label %if.end49

if.end49:                                         ; preds = %if.then, %if.then3, %if.then7, %if.then36, %if.then40, %if.then48, %land.lhs.true, %lor.lhs.false
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @_OSSwapInt32(i32 %_data) #0 {
entry:
  %_data.addr = alloca i32, align 4
  store i32 %_data, i32* %_data.addr, align 4
  %0 = load i32, i32* %_data.addr, align 4
  %1 = call i32 @llvm.bswap.i32(i32 %0)
  ret i32 %1
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_http_handle_forwarding(%struct.mg_connection* %nc, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %rewrites = alloca i8*, align 8
  %a = alloca %struct.mg_str, align 8
  %b = alloca %struct.mg_str, align 8
  %p1 = alloca %struct.mg_str, align 8
  %p2 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %0 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %url_rewrites = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %0, i32 0, i32 8
  %1 = load i8*, i8** %url_rewrites, align 8
  store i8* %1, i8** %rewrites, align 8
  %2 = bitcast %struct.mg_str* %p1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast (%struct.mg_str* @mg_http_handle_forwarding.p1 to i8*), i64 16, i32 8, i1 false)
  %3 = bitcast %struct.mg_str* %p2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast (%struct.mg_str* @mg_http_handle_forwarding.p2 to i8*), i64 16, i32 8, i1 false)
  br label %while.cond

while.cond:                                       ; preds = %if.end10, %entry
  %4 = load i8*, i8** %rewrites, align 8
  %call = call i8* @mg_next_comma_list_entry(i8* %4, %struct.mg_str* %a, %struct.mg_str* %b)
  store i8* %call, i8** %rewrites, align 8
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %5, i32 0, i32 3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 1
  %6 = load i64, i64* %len, align 8
  %7 = bitcast %struct.mg_str* %a to { i8*, i64 }*
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %struct.mg_str* %uri to { i8*, i64 }*
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %call1 = call i32 @mg_strncmp(i8* %9, i64 %11, i8* %14, i64 %16, i64 %6)
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then, label %if.end10

if.then:                                          ; preds = %while.body
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %p1, i32 0, i32 1
  %17 = load i64, i64* %len3, align 8
  %18 = bitcast %struct.mg_str* %b to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %struct.mg_str* %p1 to { i8*, i64 }*
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %call4 = call i32 @mg_strncmp(i8* %20, i64 %22, i8* %25, i64 %27, i64 %17)
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %p2, i32 0, i32 1
  %28 = load i64, i64* %len6, align 8
  %29 = bitcast %struct.mg_str* %b to { i8*, i64 }*
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %struct.mg_str* %p2 to { i8*, i64 }*
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %call7 = call i32 @mg_strncmp(i8* %31, i64 %33, i8* %36, i64 %38, i64 %28)
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %lor.lhs.false, %if.then
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %40 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %41 = bitcast %struct.mg_str* %a to { i8*, i64 }*
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = bitcast %struct.mg_str* %b to { i8*, i64 }*
  %47 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  call void @mg_http_reverse_proxy(%struct.mg_connection* %39, %struct.http_message* %40, i8* %43, i64 %45, i8* %48, i64 %50)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end10

if.end10:                                         ; preds = %if.end, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then9
  %51 = load i32, i32* %retval, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_http_send_port_based_redirect(%struct.mg_connection* %c, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %rewrites = alloca i8*, align 8
  %a = alloca %struct.mg_str, align 8
  %b = alloca %struct.mg_str, align 8
  %local_port = alloca [20 x i8], align 16
  store %struct.mg_connection* %c, %struct.mg_connection** %c.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %0 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %url_rewrites = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %0, i32 0, i32 8
  %1 = load i8*, i8** %url_rewrites, align 8
  store i8* %1, i8** %rewrites, align 8
  %2 = bitcast [20 x i8]* %local_port to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @mg_http_send_port_based_redirect.local_port, i32 0, i32 0), i64 20, i32 16, i1 false)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %local_port, i32 0, i32 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 1
  %call = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %3, i8* %add.ptr, i64 19, i32 2)
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %4 = load i8*, i8** %rewrites, align 8
  %call1 = call i8* @mg_next_comma_list_entry(i8* %4, %struct.mg_str* %a, %struct.mg_str* %b)
  store i8* %call1, i8** %rewrites, align 8
  %cmp = icmp ne i8* %call1, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay2 = getelementptr inbounds [20 x i8], [20 x i8]* %local_port, i32 0, i32 0
  %call3 = call i32 @mg_vcmp(%struct.mg_str* %a, i8* %arraydecay2)
  %cmp4 = icmp eq i32 %call3, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %5 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  call void @mg_send_response_line(%struct.mg_connection* %5, i32 301, i8* null)
  %6 = load %struct.mg_connection*, %struct.mg_connection** %c.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %b, i32 0, i32 1
  %7 = load i64, i64* %len, align 8
  %conv = trunc i64 %7 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %b, i32 0, i32 0
  %8 = load i8*, i8** %p, align 8
  %9 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %proto = getelementptr inbounds %struct.http_message, %struct.http_message* %9, i32 0, i32 4
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %proto, i32 0, i32 0
  %10 = load i8*, i8** %p5, align 8
  %11 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %11, i32 0, i32 3
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %12 = load i8*, i8** %p6, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %sub.ptr.sub, 1
  %conv7 = trunc i64 %sub to i32
  %13 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri8 = getelementptr inbounds %struct.http_message, %struct.http_message* %13, i32 0, i32 3
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri8, i32 0, i32 0
  %14 = load i8*, i8** %p9, align 8
  %call10 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %6, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.202, i32 0, i32 0), i32 %conv, i8* %8, i32 %conv7, i8* %14)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %while.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_uri_to_local_path(%struct.http_message* %hm, %struct.mg_serve_http_opts* %opts, i8** %local_path, %struct.mg_str* %remainder) #0 {
entry:
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %local_path.addr = alloca i8**, align 8
  %remainder.addr = alloca %struct.mg_str*, align 8
  %ok = alloca i32, align 4
  %cp = alloca i8*, align 8
  %cp_end = alloca i8*, align 8
  %root = alloca %struct.mg_str, align 8
  %file_uri_start = alloca i8*, align 8
  %rewrites = alloca i8*, align 8
  %hh = alloca %struct.mg_str*, align 8
  %a = alloca %struct.mg_str, align 8
  %b = alloca %struct.mg_str, align 8
  %match_len = alloca i64, align 8
  %u = alloca i8*, align 8
  %lp = alloca i8*, align 8
  %lp_end = alloca i8*, align 8
  %p82 = alloca i8*, align 8
  %ps = alloca i8*, align 8
  %exists = alloca i32, align 4
  %next = alloca i8*, align 8
  %component = alloca %struct.mg_str, align 8
  %st = alloca %struct.stat, align 8
  %len131 = alloca i32, align 4
  %i = alloca i64, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  store i8** %local_path, i8*** %local_path.addr, align 8
  store %struct.mg_str* %remainder, %struct.mg_str** %remainder.addr, align 8
  store i32 1, i32* %ok, align 4
  %0 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %0, i32 0, i32 3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %1 = load i8*, i8** %p, align 8
  store i8* %1, i8** %cp, align 8
  %2 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri1 = getelementptr inbounds %struct.http_message, %struct.http_message* %2, i32 0, i32 3
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri1, i32 0, i32 0
  %3 = load i8*, i8** %p2, align 8
  %4 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri3 = getelementptr inbounds %struct.http_message, %struct.http_message* %4, i32 0, i32 3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri3, i32 0, i32 1
  %5 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %5
  store i8* %add.ptr, i8** %cp_end, align 8
  %6 = bitcast %struct.mg_str* %root to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i32 8, i1 false)
  %7 = load i8*, i8** %cp, align 8
  store i8* %7, i8** %file_uri_start, align 8
  %8 = load i8**, i8*** %local_path.addr, align 8
  store i8* null, i8** %8, align 8
  %9 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8
  %p4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %9, i32 0, i32 0
  store i8* null, i8** %p4, align 8
  %10 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 1
  store i64 0, i64* %len5, align 8
  %11 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %url_rewrites = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %11, i32 0, i32 8
  %12 = load i8*, i8** %url_rewrites, align 8
  store i8* %12, i8** %rewrites, align 8
  %13 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0))
  store %struct.mg_str* %call, %struct.mg_str** %hh, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end53, %if.else49, %entry
  %14 = load i8*, i8** %rewrites, align 8
  %call6 = call i8* @mg_next_comma_list_entry(i8* %14, %struct.mg_str* %a, %struct.mg_str* %b)
  store i8* %call6, i8** %rewrites, align 8
  %cmp = icmp ne i8* %call6, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 1
  %15 = load i64, i64* %len7, align 8
  %cmp8 = icmp ugt i64 %15, 1
  br i1 %cmp8, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 0
  %16 = load i8*, i8** %p9, align 8
  %arrayidx = getelementptr inbounds i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %17 to i32
  %cmp10 = icmp eq i32 %conv, 64
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %18 = load %struct.mg_str*, %struct.mg_str** %hh, align 8
  %cmp12 = icmp ne %struct.mg_str* %18, null
  br i1 %cmp12, label %land.lhs.true14, label %if.end

land.lhs.true14:                                  ; preds = %if.then
  %19 = load %struct.mg_str*, %struct.mg_str** %hh, align 8
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %19, i32 0, i32 1
  %20 = load i64, i64* %len15, align 8
  %len16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 1
  %21 = load i64, i64* %len16, align 8
  %sub = sub i64 %21, 1
  %cmp17 = icmp eq i64 %20, %sub
  br i1 %cmp17, label %land.lhs.true19, label %if.end

land.lhs.true19:                                  ; preds = %land.lhs.true14
  %p20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 0
  %22 = load i8*, i8** %p20, align 8
  %add.ptr21 = getelementptr inbounds i8, i8* %22, i64 1
  %23 = load %struct.mg_str*, %struct.mg_str** %hh, align 8
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %23, i32 0, i32 0
  %24 = load i8*, i8** %p22, align 8
  %len23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %a, i32 0, i32 1
  %25 = load i64, i64* %len23, align 8
  %sub24 = sub i64 %25, 1
  %call25 = call i32 @mg_ncasecmp(i8* %add.ptr21, i8* %24, i64 %sub24)
  %cmp26 = icmp eq i32 %call25, 0
  br i1 %cmp26, label %if.then28, label %if.end

if.then28:                                        ; preds = %land.lhs.true19
  %26 = bitcast %struct.mg_str* %root to i8*
  %27 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %while.end

if.end:                                           ; preds = %land.lhs.true19, %land.lhs.true14, %if.then
  br label %if.end53

if.else:                                          ; preds = %land.lhs.true, %while.body
  %28 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri29 = getelementptr inbounds %struct.http_message, %struct.http_message* %28, i32 0, i32 3
  %29 = bitcast %struct.mg_str* %a to { i8*, i64 }*
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %struct.mg_str* %uri29 to { i8*, i64 }*
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %call30 = call i64 @mg_match_prefix_n(i8* %31, i64 %33, i8* %36, i64 %38)
  store i64 %call30, i64* %match_len, align 8
  %39 = load i64, i64* %match_len, align 8
  %cmp31 = icmp ugt i64 %39, 0
  br i1 %cmp31, label %if.then33, label %if.end52

if.then33:                                        ; preds = %if.else
  %40 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri34 = getelementptr inbounds %struct.http_message, %struct.http_message* %40, i32 0, i32 3
  %p35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri34, i32 0, i32 0
  %41 = load i8*, i8** %p35, align 8
  %42 = load i64, i64* %match_len, align 8
  %add.ptr36 = getelementptr inbounds i8, i8* %41, i64 %42
  store i8* %add.ptr36, i8** %file_uri_start, align 8
  %43 = load i8*, i8** %file_uri_start, align 8
  %44 = load i8, i8* %43, align 1
  %conv37 = sext i8 %44 to i32
  %cmp38 = icmp eq i32 %conv37, 47
  br i1 %cmp38, label %if.then42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then33
  %45 = load i8*, i8** %file_uri_start, align 8
  %46 = load i8*, i8** %cp_end, align 8
  %cmp40 = icmp eq i8* %45, %46
  br i1 %cmp40, label %if.then42, label %if.else43

if.then42:                                        ; preds = %lor.lhs.false, %if.then33
  br label %if.end51

if.else43:                                        ; preds = %lor.lhs.false
  %47 = load i8*, i8** %file_uri_start, align 8
  %add.ptr44 = getelementptr inbounds i8, i8* %47, i64 -1
  %48 = load i8, i8* %add.ptr44, align 1
  %conv45 = sext i8 %48 to i32
  %cmp46 = icmp eq i32 %conv45, 47
  br i1 %cmp46, label %if.then48, label %if.else49

if.then48:                                        ; preds = %if.else43
  %49 = load i8*, i8** %file_uri_start, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %49, i32 -1
  store i8* %incdec.ptr, i8** %file_uri_start, align 8
  br label %if.end50

if.else49:                                        ; preds = %if.else43
  br label %while.cond

if.end50:                                         ; preds = %if.then48
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.then42
  %50 = bitcast %struct.mg_str* %root to i8*
  %51 = bitcast %struct.mg_str* %b to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 16, i32 8, i1 false)
  br label %while.end

if.end52:                                         ; preds = %if.else
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.end
  br label %while.cond

while.end:                                        ; preds = %if.end51, %if.then28, %while.cond
  %p54 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 0
  %52 = load i8*, i8** %p54, align 8
  %cmp55 = icmp eq i8* %52, null
  br i1 %cmp55, label %if.then57, label %if.end62

if.then57:                                        ; preds = %while.end
  %53 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %53, i32 0, i32 0
  %54 = load i8*, i8** %document_root, align 8
  %p58 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 0
  store i8* %54, i8** %p58, align 8
  %55 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %document_root59 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %55, i32 0, i32 0
  %56 = load i8*, i8** %document_root59, align 8
  %call60 = call i64 @strlen(i8* %56)
  %len61 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  store i64 %call60, i64* %len61, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then57, %while.end
  %p63 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 0
  %57 = load i8*, i8** %p63, align 8
  %cmp64 = icmp ne i8* %57, null
  br i1 %cmp64, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end62
  %len66 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %58 = load i64, i64* %len66, align 8
  %cmp67 = icmp ugt i64 %58, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end62
  %59 = phi i1 [ false, %if.end62 ], [ %cmp67, %land.rhs ]
  %lnot = xor i1 %59, true
  %lnot.ext = zext i1 %lnot to i32
  %conv69 = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv69, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.end
  call void @__assert_rtn(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__func__.mg_uri_to_local_path, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 8117, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.203, i32 0, i32 0)) #13
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %land.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %60
  %61 = load i8*, i8** %file_uri_start, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %61, i64 1
  store i8* %add.ptr70, i8** %u, align 8
  %len71 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %62 = load i64, i64* %len71, align 8
  %63 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri72 = getelementptr inbounds %struct.http_message, %struct.http_message* %63, i32 0, i32 3
  %len73 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri72, i32 0, i32 1
  %64 = load i64, i64* %len73, align 8
  %add = add i64 %62, %64
  %add74 = add i64 %add, 1
  %call75 = call i8* @malloc(i64 %add74) #14
  store i8* %call75, i8** %lp, align 8
  %65 = load i8*, i8** %lp, align 8
  %len76 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %66 = load i64, i64* %len76, align 8
  %add.ptr77 = getelementptr inbounds i8, i8* %65, i64 %66
  %67 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri78 = getelementptr inbounds %struct.http_message, %struct.http_message* %67, i32 0, i32 3
  %len79 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri78, i32 0, i32 1
  %68 = load i64, i64* %len79, align 8
  %add.ptr80 = getelementptr inbounds i8, i8* %add.ptr77, i64 %68
  %add.ptr81 = getelementptr inbounds i8, i8* %add.ptr80, i64 1
  store i8* %add.ptr81, i8** %lp_end, align 8
  %69 = load i8*, i8** %lp, align 8
  store i8* %69, i8** %p82, align 8
  store i32 1, i32* %exists, align 4
  %70 = load i8*, i8** %lp, align 8
  %cmp83 = icmp eq i8* %70, null
  br i1 %cmp83, label %if.then85, label %if.end86

if.then85:                                        ; preds = %cond.end
  store i32 0, i32* %ok, align 4
  br label %out

if.end86:                                         ; preds = %cond.end
  %71 = load i8*, i8** %p82, align 8
  %p87 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 0
  %72 = load i8*, i8** %p87, align 8
  %len88 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %73 = load i64, i64* %len88, align 8
  %74 = load i8*, i8** %p82, align 8
  %75 = call i64 @llvm.objectsize.i64.p0i8(i8* %74, i1 false)
  %call89 = call i8* @__memcpy_chk(i8* %71, i8* %72, i64 %73, i64 %75) #5
  %len90 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %root, i32 0, i32 1
  %76 = load i64, i64* %len90, align 8
  %77 = load i8*, i8** %p82, align 8
  %add.ptr91 = getelementptr inbounds i8, i8* %77, i64 %76
  store i8* %add.ptr91, i8** %p82, align 8
  %78 = load i8*, i8** %p82, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %78, i64 -1
  %79 = load i8, i8* %add.ptr92, align 1
  %conv93 = sext i8 %79 to i32
  %cmp94 = icmp eq i32 %conv93, 47
  br i1 %cmp94, label %if.then96, label %if.end98

if.then96:                                        ; preds = %if.end86
  %80 = load i8*, i8** %p82, align 8
  %incdec.ptr97 = getelementptr inbounds i8, i8* %80, i32 -1
  store i8* %incdec.ptr97, i8** %p82, align 8
  br label %if.end98

if.end98:                                         ; preds = %if.then96, %if.end86
  %81 = load i8*, i8** %p82, align 8
  store i8 0, i8* %81, align 1
  %82 = load i8*, i8** %p82, align 8
  store i8* %82, i8** %ps, align 8
  br label %while.cond99

while.cond99:                                     ; preds = %if.end189, %if.end98
  %83 = load i8*, i8** %u, align 8
  %84 = load i8*, i8** %cp_end, align 8
  %cmp100 = icmp ule i8* %83, %84
  br i1 %cmp100, label %while.body102, label %while.end190

while.body102:                                    ; preds = %while.cond99
  %85 = load i8*, i8** %u, align 8
  store i8* %85, i8** %next, align 8
  %86 = load i32, i32* %exists, align 4
  %tobool103 = icmp ne i32 %86, 0
  br i1 %tobool103, label %if.then104, label %if.end122

if.then104:                                       ; preds = %while.body102
  %87 = load i8*, i8** %lp, align 8
  %call105 = call i32 @mg_stat(i8* %87, %struct.stat* %st)
  %cmp106 = icmp eq i32 %call105, 0
  %conv107 = zext i1 %cmp106 to i32
  store i32 %conv107, i32* %exists, align 4
  %88 = load i32, i32* %exists, align 4
  %tobool108 = icmp ne i32 %88, 0
  br i1 %tobool108, label %land.lhs.true109, label %if.end121

land.lhs.true109:                                 ; preds = %if.then104
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 1
  %89 = load i16, i16* %st_mode, align 4
  %conv110 = zext i16 %89 to i32
  %and = and i32 %conv110, 61440
  %cmp111 = icmp eq i32 %and, 32768
  br i1 %cmp111, label %if.then113, label %if.end121

if.then113:                                       ; preds = %land.lhs.true109
  %90 = load i8*, i8** %u, align 8
  %add.ptr114 = getelementptr inbounds i8, i8* %90, i64 -1
  %91 = load i8, i8* %add.ptr114, align 1
  %conv115 = sext i8 %91 to i32
  %cmp116 = icmp eq i32 %conv115, 47
  br i1 %cmp116, label %if.then118, label %if.end120

if.then118:                                       ; preds = %if.then113
  %92 = load i8*, i8** %u, align 8
  %incdec.ptr119 = getelementptr inbounds i8, i8* %92, i32 -1
  store i8* %incdec.ptr119, i8** %u, align 8
  br label %if.end120

if.end120:                                        ; preds = %if.then118, %if.then113
  br label %while.end190

if.end121:                                        ; preds = %land.lhs.true109, %if.then104
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %while.body102
  %93 = load i8*, i8** %u, align 8
  %94 = load i8*, i8** %cp_end, align 8
  %cmp123 = icmp uge i8* %93, %94
  br i1 %cmp123, label %if.then125, label %if.end126

if.then125:                                       ; preds = %if.end122
  br label %while.end190

if.end126:                                        ; preds = %if.end122
  %95 = load i8*, i8** %cp_end, align 8
  call void @parse_uri_component(i8** %next, i8* %95, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), %struct.mg_str* %component)
  %len127 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  %96 = load i64, i64* %len127, align 8
  %cmp128 = icmp ugt i64 %96, 0
  br i1 %cmp128, label %if.then130, label %if.end189

if.then130:                                       ; preds = %if.end126
  %97 = load i8*, i8** %p82, align 8
  %add.ptr132 = getelementptr inbounds i8, i8* %97, i64 1
  %p133 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 0
  %98 = load i8*, i8** %p133, align 8
  %len134 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  %99 = load i64, i64* %len134, align 8
  %100 = load i8*, i8** %p82, align 8
  %add.ptr135 = getelementptr inbounds i8, i8* %100, i64 1
  %101 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr135, i1 false)
  %call136 = call i8* @__memmove_chk(i8* %add.ptr132, i8* %98, i64 %99, i64 %101) #5
  %102 = load i8*, i8** %p82, align 8
  %add.ptr137 = getelementptr inbounds i8, i8* %102, i64 1
  %len138 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  %103 = load i64, i64* %len138, align 8
  %conv139 = trunc i64 %103 to i32
  %104 = load i8*, i8** %p82, align 8
  %add.ptr140 = getelementptr inbounds i8, i8* %104, i64 1
  %105 = load i8*, i8** %lp_end, align 8
  %106 = load i8*, i8** %p82, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %105 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %106 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub141 = sub nsw i64 %sub.ptr.sub, 1
  %conv142 = trunc i64 %sub141 to i32
  %call143 = call i32 @mg_url_decode(i8* %add.ptr137, i32 %conv139, i8* %add.ptr140, i32 %conv142, i32 0)
  store i32 %call143, i32* %len131, align 4
  %107 = load i32, i32* %len131, align 4
  %cmp144 = icmp sle i32 %107, 0
  br i1 %cmp144, label %if.then146, label %if.end147

if.then146:                                       ; preds = %if.then130
  store i32 0, i32* %ok, align 4
  br label %while.end190

if.end147:                                        ; preds = %if.then130
  %108 = load i8*, i8** %p82, align 8
  %add.ptr148 = getelementptr inbounds i8, i8* %108, i64 1
  %p149 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 0
  store i8* %add.ptr148, i8** %p149, align 8
  %109 = load i32, i32* %len131, align 4
  %conv150 = sext i32 %109 to i64
  %len151 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  store i64 %conv150, i64* %len151, align 8
  %call152 = call i32 @mg_vcmp(%struct.mg_str* %component, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  %cmp153 = icmp eq i32 %call152, 0
  br i1 %cmp153, label %if.then155, label %if.else156

if.then155:                                       ; preds = %if.end147
  br label %if.end188

if.else156:                                       ; preds = %if.end147
  %call157 = call i32 @mg_vcmp(%struct.mg_str* %component, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0))
  %cmp158 = icmp eq i32 %call157, 0
  br i1 %cmp158, label %if.then160, label %if.else172

if.then160:                                       ; preds = %if.else156
  br label %while.cond161

while.cond161:                                    ; preds = %while.body169, %if.then160
  %110 = load i8*, i8** %p82, align 8
  %111 = load i8*, i8** %ps, align 8
  %cmp162 = icmp ugt i8* %110, %111
  br i1 %cmp162, label %land.rhs164, label %land.end168

land.rhs164:                                      ; preds = %while.cond161
  %112 = load i8*, i8** %p82, align 8
  %113 = load i8, i8* %112, align 1
  %conv165 = sext i8 %113 to i32
  %cmp166 = icmp ne i32 %conv165, 47
  br label %land.end168

land.end168:                                      ; preds = %land.rhs164, %while.cond161
  %114 = phi i1 [ false, %while.cond161 ], [ %cmp166, %land.rhs164 ]
  br i1 %114, label %while.body169, label %while.end171

while.body169:                                    ; preds = %land.end168
  %115 = load i8*, i8** %p82, align 8
  %incdec.ptr170 = getelementptr inbounds i8, i8* %115, i32 -1
  store i8* %incdec.ptr170, i8** %p82, align 8
  br label %while.cond161

while.end171:                                     ; preds = %land.end168
  %116 = load i8*, i8** %p82, align 8
  store i8 0, i8* %116, align 1
  br label %if.end187

if.else172:                                       ; preds = %if.else156
  %117 = load i8*, i8** %p82, align 8
  %incdec.ptr173 = getelementptr inbounds i8, i8* %117, i32 1
  store i8* %incdec.ptr173, i8** %p82, align 8
  store i8 47, i8* %117, align 1
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else172
  %118 = load i64, i64* %i, align 8
  %len174 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %component, i32 0, i32 1
  %119 = load i64, i64* %len174, align 8
  %cmp175 = icmp ult i64 %118, %119
  br i1 %cmp175, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %120 = load i8*, i8** %p82, align 8
  %121 = load i8, i8* %120, align 1
  %conv177 = sext i8 %121 to i32
  %cmp178 = icmp eq i32 %conv177, 0
  br i1 %cmp178, label %if.then184, label %lor.lhs.false180

lor.lhs.false180:                                 ; preds = %for.body
  %122 = load i8*, i8** %p82, align 8
  %123 = load i8, i8* %122, align 1
  %conv181 = sext i8 %123 to i32
  %cmp182 = icmp eq i32 %conv181, 47
  br i1 %cmp182, label %if.then184, label %if.end185

if.then184:                                       ; preds = %lor.lhs.false180, %for.body
  store i32 0, i32* %ok, align 4
  br label %for.end

if.end185:                                        ; preds = %lor.lhs.false180
  br label %for.inc

for.inc:                                          ; preds = %if.end185
  %124 = load i64, i64* %i, align 8
  %inc = add i64 %124, 1
  store i64 %inc, i64* %i, align 8
  %125 = load i8*, i8** %p82, align 8
  %incdec.ptr186 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %incdec.ptr186, i8** %p82, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then184, %for.cond
  br label %if.end187

if.end187:                                        ; preds = %for.end, %while.end171
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then155
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.end126
  %126 = load i8*, i8** %next, align 8
  store i8* %126, i8** %u, align 8
  br label %while.cond99

while.end190:                                     ; preds = %if.then146, %if.then125, %if.end120, %while.cond99
  %127 = load i32, i32* %ok, align 4
  %tobool191 = icmp ne i32 %127, 0
  br i1 %tobool191, label %if.then192, label %if.else202

if.then192:                                       ; preds = %while.end190
  %128 = load i8*, i8** %lp, align 8
  %129 = load i8**, i8*** %local_path.addr, align 8
  store i8* %128, i8** %129, align 8
  %130 = load i8*, i8** %u, align 8
  %131 = load i8*, i8** %cp_end, align 8
  %cmp193 = icmp ugt i8* %130, %131
  br i1 %cmp193, label %if.then195, label %if.end196

if.then195:                                       ; preds = %if.then192
  %132 = load i8*, i8** %cp_end, align 8
  store i8* %132, i8** %u, align 8
  br label %if.end196

if.end196:                                        ; preds = %if.then195, %if.then192
  %133 = load i8*, i8** %u, align 8
  %134 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8
  %p197 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %134, i32 0, i32 0
  store i8* %133, i8** %p197, align 8
  %135 = load i8*, i8** %cp_end, align 8
  %136 = load i8*, i8** %u, align 8
  %sub.ptr.lhs.cast198 = ptrtoint i8* %135 to i64
  %sub.ptr.rhs.cast199 = ptrtoint i8* %136 to i64
  %sub.ptr.sub200 = sub i64 %sub.ptr.lhs.cast198, %sub.ptr.rhs.cast199
  %137 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8
  %len201 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %137, i32 0, i32 1
  store i64 %sub.ptr.sub200, i64* %len201, align 8
  br label %if.end203

if.else202:                                       ; preds = %while.end190
  %138 = load i8*, i8** %lp, align 8
  call void @free(i8* %138)
  br label %if.end203

if.end203:                                        ; preds = %if.else202, %if.end196
  br label %out

out:                                              ; preds = %if.end203, %if.then85
  br label %do.body

do.body:                                          ; preds = %out
  %call204 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 8209)
  %tobool205 = icmp ne i32 %call204, 0
  br i1 %tobool205, label %if.then206, label %if.end219

if.then206:                                       ; preds = %do.body
  %139 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri207 = getelementptr inbounds %struct.http_message, %struct.http_message* %139, i32 0, i32 3
  %len208 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri207, i32 0, i32 1
  %140 = load i64, i64* %len208, align 8
  %conv209 = trunc i64 %140 to i32
  %141 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri210 = getelementptr inbounds %struct.http_message, %struct.http_message* %141, i32 0, i32 3
  %p211 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri210, i32 0, i32 0
  %142 = load i8*, i8** %p211, align 8
  %143 = load i8**, i8*** %local_path.addr, align 8
  %144 = load i8*, i8** %143, align 8
  %tobool212 = icmp ne i8* %144, null
  br i1 %tobool212, label %cond.true213, label %cond.false214

cond.true213:                                     ; preds = %if.then206
  %145 = load i8**, i8*** %local_path.addr, align 8
  %146 = load i8*, i8** %145, align 8
  br label %cond.end215

cond.false214:                                    ; preds = %if.then206
  br label %cond.end215

cond.end215:                                      ; preds = %cond.false214, %cond.true213
  %cond = phi i8* [ %146, %cond.true213 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.false214 ]
  %147 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8
  %len216 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %147, i32 0, i32 1
  %148 = load i64, i64* %len216, align 8
  %conv217 = trunc i64 %148 to i32
  %149 = load %struct.mg_str*, %struct.mg_str** %remainder.addr, align 8
  %p218 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %149, i32 0, i32 0
  %150 = load i8*, i8** %p218, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.204, i32 0, i32 0), i32 %conv209, i8* %142, i8* %cond, i32 %conv217, i8* %150)
  br label %if.end219

if.end219:                                        ; preds = %cond.end215, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end219
  %151 = load i32, i32* %ok, align 4
  ret i32 %151
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_send_http_file(%struct.mg_connection* %nc, i8* %path, %struct.mg_str* %path_info, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %path_info.addr = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %exists = alloca i32, align 4
  %is_directory = alloca i32, align 4
  %is_cgi = alloca i32, align 4
  %is_dav = alloca i32, align 4
  %index_file = alloca i8*, align 8
  %st = alloca %struct.stat, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp58 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  store %struct.mg_str* %path_info, %struct.mg_str** %path_info.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  store i32 0, i32* %is_dav, align 4
  store i8* null, i8** %index_file, align 8
  %0 = load i8*, i8** %path.addr, align 8
  %call = call i32 @mg_stat(i8* %0, %struct.stat* %st)
  %cmp = icmp eq i32 %call, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %exists, align 4
  %1 = load i32, i32* %exists, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 1
  %2 = load i16, i16* %st_mode, align 4
  %conv1 = zext i16 %2 to i32
  %and = and i32 %conv1, 61440
  %cmp2 = icmp eq i32 %and, 16384
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ]
  %land.ext = zext i1 %3 to i32
  store i32 %land.ext, i32* %is_directory, align 4
  %4 = load i32, i32* %is_directory, align 4
  %tobool4 = icmp ne i32 %4, 0
  br i1 %tobool4, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  %5 = load i8*, i8** %path.addr, align 8
  %6 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %index_files = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %6, i32 0, i32 1
  %7 = load i8*, i8** %index_files, align 8
  call void @mg_find_index_file(i8* %5, i8* %7, i8** %index_file, %struct.stat* %st)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.end
  %8 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %cgi_file_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %8, i32 0, i32 12
  %9 = load i8*, i8** %cgi_file_pattern, align 8
  %10 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %cgi_file_pattern5 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %10, i32 0, i32 12
  %11 = load i8*, i8** %cgi_file_pattern5, align 8
  %call6 = call i64 @strlen(i8* %11)
  %conv7 = trunc i64 %call6 to i32
  %12 = load i8*, i8** %index_file, align 8
  %tobool8 = icmp ne i8* %12, null
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %13 = load i8*, i8** %index_file, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %14 = load i8*, i8** %path.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ %14, %cond.false ]
  %call9 = call i64 @mg_match_prefix(i8* %9, i32 %conv7, i8* %cond)
  %cmp10 = icmp ugt i64 %call9, 0
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %is_cgi, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end
  %call12 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 8319)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then14, label %if.end22

if.then14:                                        ; preds = %do.body
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %16 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %16, i32 0, i32 2
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %17 = load i64, i64* %len, align 8
  %conv15 = trunc i64 %17 to i32
  %18 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method16 = getelementptr inbounds %struct.http_message, %struct.http_message* %18, i32 0, i32 2
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method16, i32 0, i32 0
  %19 = load i8*, i8** %p, align 8
  %20 = load i8*, i8** %path.addr, align 8
  %21 = load i32, i32* %exists, align 4
  %22 = load i32, i32* %is_directory, align 4
  %23 = load i32, i32* %is_dav, align 4
  %24 = load i32, i32* %is_cgi, align 4
  %25 = load i8*, i8** %index_file, align 8
  %tobool17 = icmp ne i8* %25, null
  br i1 %tobool17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %if.then14
  %26 = load i8*, i8** %index_file, align 8
  br label %cond.end20

cond.false19:                                     ; preds = %if.then14
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i8* [ %26, %cond.true18 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.false19 ]
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.205, i32 0, i32 0), %struct.mg_connection* %15, i32 %conv15, i8* %19, i8* %20, i32 %21, i32 %22, i32 %23, i32 %24, i8* %cond21)
  br label %if.end22

if.end22:                                         ; preds = %cond.end20, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end22
  %27 = load i32, i32* %is_directory, align 4
  %tobool23 = icmp ne i32 %27, 0
  br i1 %tobool23, label %land.lhs.true, label %if.end39

land.lhs.true:                                    ; preds = %do.end
  %28 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %28, i32 0, i32 3
  %p24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 0
  %29 = load i8*, i8** %p24, align 8
  %30 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri25 = getelementptr inbounds %struct.http_message, %struct.http_message* %30, i32 0, i32 3
  %len26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri25, i32 0, i32 1
  %31 = load i64, i64* %len26, align 8
  %sub = sub i64 %31, 1
  %arrayidx = getelementptr inbounds i8, i8* %29, i64 %sub
  %32 = load i8, i8* %arrayidx, align 1
  %conv27 = sext i8 %32 to i32
  %cmp28 = icmp ne i32 %conv27, 47
  br i1 %cmp28, label %land.lhs.true30, label %if.end39

land.lhs.true30:                                  ; preds = %land.lhs.true
  %33 = load i32, i32* %is_dav, align 4
  %tobool31 = icmp ne i32 %33, 0
  br i1 %tobool31, label %if.end39, label %if.then32

if.then32:                                        ; preds = %land.lhs.true30
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %35 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri33 = getelementptr inbounds %struct.http_message, %struct.http_message* %35, i32 0, i32 3
  %len34 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri33, i32 0, i32 1
  %36 = load i64, i64* %len34, align 8
  %conv35 = trunc i64 %36 to i32
  %37 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri36 = getelementptr inbounds %struct.http_message, %struct.http_message* %37, i32 0, i32 3
  %p37 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri36, i32 0, i32 0
  %38 = load i8*, i8** %p37, align 8
  %call38 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %34, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.206, i32 0, i32 0), i32 %conv35, i8* %38)
  %39 = load i8*, i8** %index_file, align 8
  call void @free(i8* %39)
  br label %return

if.end39:                                         ; preds = %land.lhs.true30, %land.lhs.true, %do.end
  %40 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %len40 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %40, i32 0, i32 1
  %41 = load i64, i64* %len40, align 8
  %cmp41 = icmp ugt i64 %41, 0
  br i1 %cmp41, label %land.lhs.true43, label %if.end46

land.lhs.true43:                                  ; preds = %if.end39
  %42 = load i32, i32* %is_cgi, align 4
  %tobool44 = icmp ne i32 %42, 0
  br i1 %tobool44, label %if.end46, label %if.then45

if.then45:                                        ; preds = %land.lhs.true43
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %43, i32 501, i8* null)
  %44 = load i8*, i8** %index_file, align 8
  call void @free(i8* %44)
  br label %return

if.end46:                                         ; preds = %land.lhs.true43, %if.end39
  %45 = load i32, i32* %is_dav, align 4
  %tobool47 = icmp ne i32 %45, 0
  br i1 %tobool47, label %land.lhs.true48, label %if.else

land.lhs.true48:                                  ; preds = %if.end46
  %46 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %dav_document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %46, i32 0, i32 9
  %47 = load i8*, i8** %dav_document_root, align 8
  %cmp49 = icmp eq i8* %47, null
  br i1 %cmp49, label %if.then51, label %if.else

if.then51:                                        ; preds = %land.lhs.true48
  %48 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %48, i32 501, i8* null)
  br label %if.end118

if.else:                                          ; preds = %land.lhs.true48, %if.end46
  %49 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %50 = load i8*, i8** %path.addr, align 8
  %call52 = call { i8*, i64 } @mg_mk_str(i8* %50)
  %51 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %51, i32 0, i32 0
  %53 = extractvalue { i8*, i64 } %call52, 0
  store i8* %53, i8** %52, align 8
  %54 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %51, i32 0, i32 1
  %55 = extractvalue { i8*, i64 } %call52, 1
  store i64 %55, i64* %54, align 8
  %56 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %auth_domain = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %56, i32 0, i32 3
  %57 = load i8*, i8** %auth_domain, align 8
  %58 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %global_auth_file = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %58, i32 0, i32 4
  %59 = load i8*, i8** %global_auth_file, align 8
  %60 = load i32, i32* %is_directory, align 4
  %tobool53 = icmp ne i32 %60, 0
  %cond54 = select i1 %tobool53, i32 1, i32 0
  %or = or i32 %cond54, 2
  %or55 = or i32 %or, 4
  %61 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %62 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %61, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %call56 = call i32 @mg_http_is_authorized(%struct.http_message* %49, i8* %63, i64 %65, i8* %57, i8* %59, i32 %or55)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %lor.lhs.false, label %if.then66

lor.lhs.false:                                    ; preds = %if.else
  %66 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %67 = load i8*, i8** %path.addr, align 8
  %call59 = call { i8*, i64 } @mg_mk_str(i8* %67)
  %68 = bitcast %struct.mg_str* %agg.tmp58 to { i8*, i64 }*
  %69 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %68, i32 0, i32 0
  %70 = extractvalue { i8*, i64 } %call59, 0
  store i8* %70, i8** %69, align 8
  %71 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %68, i32 0, i32 1
  %72 = extractvalue { i8*, i64 } %call59, 1
  store i64 %72, i64* %71, align 8
  %73 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %auth_domain60 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %73, i32 0, i32 3
  %74 = load i8*, i8** %auth_domain60, align 8
  %75 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %per_directory_auth_file = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %75, i32 0, i32 2
  %76 = load i8*, i8** %per_directory_auth_file, align 8
  %77 = load i32, i32* %is_directory, align 4
  %tobool61 = icmp ne i32 %77, 0
  %cond62 = select i1 %tobool61, i32 1, i32 0
  %or63 = or i32 %cond62, 4
  %78 = bitcast %struct.mg_str* %agg.tmp58 to { i8*, i64 }*
  %79 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %78, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %78, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  %call64 = call i32 @mg_http_is_authorized(%struct.http_message* %66, i8* %80, i64 %82, i8* %74, i8* %76, i32 %or63)
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.else68, label %if.then66

if.then66:                                        ; preds = %lor.lhs.false, %if.else
  %83 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %84 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %auth_domain67 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %84, i32 0, i32 3
  %85 = load i8*, i8** %auth_domain67, align 8
  call void @mg_http_send_digest_auth_request(%struct.mg_connection* %83, i8* %85)
  br label %if.end117

if.else68:                                        ; preds = %lor.lhs.false
  %86 = load i32, i32* %is_cgi, align 4
  %tobool69 = icmp ne i32 %86, 0
  br i1 %tobool69, label %if.then70, label %if.else76

if.then70:                                        ; preds = %if.else68
  %87 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %88 = load i8*, i8** %index_file, align 8
  %tobool71 = icmp ne i8* %88, null
  br i1 %tobool71, label %cond.true72, label %cond.false73

cond.true72:                                      ; preds = %if.then70
  %89 = load i8*, i8** %index_file, align 8
  br label %cond.end74

cond.false73:                                     ; preds = %if.then70
  %90 = load i8*, i8** %path.addr, align 8
  br label %cond.end74

cond.end74:                                       ; preds = %cond.false73, %cond.true72
  %cond75 = phi i8* [ %89, %cond.true72 ], [ %90, %cond.false73 ]
  %91 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %92 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %93 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_handle_cgi(%struct.mg_connection* %87, i8* %cond75, %struct.mg_str* %91, %struct.http_message* %92, %struct.mg_serve_http_opts* %93)
  br label %if.end116

if.else76:                                        ; preds = %if.else68
  %94 = load i32, i32* %exists, align 4
  %tobool77 = icmp ne i32 %94, 0
  br i1 %tobool77, label %lor.lhs.false78, label %land.lhs.true81

lor.lhs.false78:                                  ; preds = %if.else76
  %95 = load i8*, i8** %path.addr, align 8
  %96 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %call79 = call i32 @mg_is_file_hidden(i8* %95, %struct.mg_serve_http_opts* %96, i32 0)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %land.lhs.true81, label %if.else85

land.lhs.true81:                                  ; preds = %lor.lhs.false78, %if.else76
  %97 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call82 = call i32 @mg_is_creation_request(%struct.http_message* %97)
  %tobool83 = icmp ne i32 %call82, 0
  br i1 %tobool83, label %if.else85, label %if.then84

if.then84:                                        ; preds = %land.lhs.true81
  %98 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %98, i32 404, i8* null)
  br label %if.end115

if.else85:                                        ; preds = %land.lhs.true81, %lor.lhs.false78
  %99 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method86 = getelementptr inbounds %struct.http_message, %struct.http_message* %99, i32 0, i32 2
  %call87 = call i32 @mg_vcmp(%struct.mg_str* %method86, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.207, i32 0, i32 0))
  %tobool88 = icmp ne i32 %call87, 0
  br i1 %tobool88, label %if.else90, label %if.then89

if.then89:                                        ; preds = %if.else85
  %100 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %101 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_http_send_options(%struct.mg_connection* %100, %struct.mg_serve_http_opts* %101)
  br label %if.end114

if.else90:                                        ; preds = %if.else85
  %102 = load i32, i32* %is_directory, align 4
  %tobool91 = icmp ne i32 %102, 0
  br i1 %tobool91, label %land.lhs.true92, label %if.else102

land.lhs.true92:                                  ; preds = %if.else90
  %103 = load i8*, i8** %index_file, align 8
  %cmp93 = icmp eq i8* %103, null
  br i1 %cmp93, label %if.then95, label %if.else102

if.then95:                                        ; preds = %land.lhs.true92
  %104 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %enable_directory_listing = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %104, i32 0, i32 5
  %105 = load i8*, i8** %enable_directory_listing, align 8
  %call96 = call i32 @strcmp(i8* %105, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.123, i32 0, i32 0))
  %cmp97 = icmp eq i32 %call96, 0
  br i1 %cmp97, label %if.then99, label %if.else100

if.then99:                                        ; preds = %if.then95
  %106 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %107 = load i8*, i8** %path.addr, align 8
  %108 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %109 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_send_directory_listing(%struct.mg_connection* %106, i8* %107, %struct.http_message* %108, %struct.mg_serve_http_opts* %109)
  br label %if.end101

if.else100:                                       ; preds = %if.then95
  %110 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %110, i32 403, i8* null)
  br label %if.end101

if.end101:                                        ; preds = %if.else100, %if.then99
  br label %if.end113

if.else102:                                       ; preds = %land.lhs.true92, %if.else90
  %111 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call103 = call i32 @mg_is_not_modified(%struct.http_message* %111, %struct.stat* %st)
  %tobool104 = icmp ne i32 %call103, 0
  br i1 %tobool104, label %if.then105, label %if.else106

if.then105:                                       ; preds = %if.else102
  %112 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %113 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %113, i32 0, i32 15
  %114 = load i8*, i8** %extra_headers, align 8
  call void @mg_send_head(%struct.mg_connection* %112, i32 304, i64 0, i8* %114)
  br label %if.end112

if.else106:                                       ; preds = %if.else102
  %115 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %116 = load i8*, i8** %index_file, align 8
  %tobool107 = icmp ne i8* %116, null
  br i1 %tobool107, label %cond.true108, label %cond.false109

cond.true108:                                     ; preds = %if.else106
  %117 = load i8*, i8** %index_file, align 8
  br label %cond.end110

cond.false109:                                    ; preds = %if.else106
  %118 = load i8*, i8** %path.addr, align 8
  br label %cond.end110

cond.end110:                                      ; preds = %cond.false109, %cond.true108
  %cond111 = phi i8* [ %117, %cond.true108 ], [ %118, %cond.false109 ]
  %119 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %120 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_http_serve_file2(%struct.mg_connection* %115, i8* %cond111, %struct.http_message* %119, %struct.mg_serve_http_opts* %120)
  br label %if.end112

if.end112:                                        ; preds = %cond.end110, %if.then105
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.end101
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.then89
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.then84
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %cond.end74
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.then66
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then51
  %121 = load i8*, i8** %index_file, align 8
  call void @free(i8* %121)
  br label %return

return:                                           ; preds = %if.end118, %if.then45, %if.then32
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_http_opt(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, %struct.mg_connect_opts* byval align 8 %opts, i8* %url, i8* %extra_headers, i8* %post_data) #0 {
entry:
  %retval = alloca %struct.mg_connection*, align 8
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %url.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %post_data.addr = alloca i8*, align 8
  %user = alloca %struct.mg_str, align 8
  %null_str = alloca %struct.mg_str, align 8
  %host = alloca %struct.mg_str, align 8
  %path = alloca %struct.mg_str, align 8
  %auth = alloca %struct.mbuf, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %coerce = alloca %struct.mg_str, align 8
  %coerce19 = alloca %struct.mg_str, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  store i8* %url, i8** %url.addr, align 8
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  store i8* %post_data, i8** %post_data.addr, align 8
  %0 = bitcast %struct.mg_str* %user to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 8, i1 false)
  %1 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 8, i1 false)
  %2 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 16, i32 8, i1 false)
  %3 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false)
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %5 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %6 = load i8*, i8** %url.addr, align 8
  %call = call %struct.mg_connection* @mg_connect_http_base(%struct.mg_mgr* %4, void (%struct.mg_connection*, i32, i8*)* %5, %struct.mg_connect_opts* byval align 8 %opts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.110, i32 0, i32 0), i8* null, i8* %6, %struct.mg_str* %path, %struct.mg_str* %user, %struct.mg_str* %host)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp = icmp eq %struct.mg_connection* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.mg_connection* null, %struct.mg_connection** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  call void @mbuf_init(%struct.mbuf* %auth, i64 0)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user, i32 0, i32 1
  %8 = load i64, i64* %len, align 8
  %cmp1 = icmp ugt i64 %8, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %9 = bitcast %struct.mg_str* %user to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.mg_str* %null_str to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  call void @mg_basic_auth_header(i8* %11, i64 %13, i8* %16, i64 %18, %struct.mbuf* %auth)
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %19 = load i8*, i8** %post_data.addr, align 8
  %cmp4 = icmp eq i8* %19, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i8** %post_data.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.end3
  %20 = load i8*, i8** %extra_headers.addr, align 8
  %cmp7 = icmp eq i8* %20, null
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i8** %extra_headers.addr, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end6
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %21 = load i64, i64* %len10, align 8
  %cmp11 = icmp eq i64 %21, 0
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end9
  %call13 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0))
  %22 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %22, i32 0, i32 0
  %24 = extractvalue { i8*, i64 } %call13, 0
  store i8* %24, i8** %23, align 8
  %25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %22, i32 0, i32 1
  %26 = extractvalue { i8*, i64 } %call13, 1
  store i64 %26, i64* %25, align 8
  %27 = bitcast %struct.mg_str* %path to i8*
  %28 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end9
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 1
  %29 = load i64, i64* %len15, align 8
  %cmp16 = icmp eq i64 %29, 0
  br i1 %cmp16, label %if.then17, label %if.end20

if.then17:                                        ; preds = %if.end14
  %call18 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0))
  %30 = bitcast %struct.mg_str* %coerce19 to { i8*, i64 }*
  %31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 0
  %32 = extractvalue { i8*, i64 } %call18, 0
  store i8* %32, i8** %31, align 8
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 1
  %34 = extractvalue { i8*, i64 } %call18, 1
  store i64 %34, i64* %33, align 8
  %35 = bitcast %struct.mg_str* %host to i8*
  %36 = bitcast %struct.mg_str* %coerce19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  br label %if.end20

if.end20:                                         ; preds = %if.then17, %if.end14
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %38 = load i8*, i8** %post_data.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %38, i64 0
  %39 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %39 to i32
  %cmp21 = icmp eq i32 %conv, 0
  %cond = select i1 %cmp21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.42, i32 0, i32 0)
  %len23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %40 = load i64, i64* %len23, align 8
  %conv24 = trunc i64 %40 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %41 = load i8*, i8** %p, align 8
  %p25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %42 = load i8*, i8** %p25, align 8
  %p26 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %43 = load i8*, i8** %p26, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %42 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %43 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv27 = trunc i64 %sub.ptr.sub to i32
  %p28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %44 = load i8*, i8** %p28, align 8
  %45 = load i8*, i8** %post_data.addr, align 8
  %call29 = call i64 @strlen(i8* %45)
  %len30 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 1
  %46 = load i64, i64* %len30, align 8
  %conv31 = trunc i64 %46 to i32
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 0
  %47 = load i8*, i8** %buf, align 8
  %cmp32 = icmp eq i8* %47, null
  br i1 %cmp32, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end20
  br label %cond.end

cond.false:                                       ; preds = %if.end20
  %buf34 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 0
  %48 = load i8*, i8** %buf34, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond35 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %48, %cond.false ]
  %49 = load i8*, i8** %extra_headers.addr, align 8
  %50 = load i8*, i8** %post_data.addr, align 8
  %call36 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %37, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.131, i32 0, i32 0), i8* %cond, i32 %conv24, i8* %41, i32 %conv27, i8* %44, i64 %call29, i32 %conv31, i8* %cond35, i8* %49, i8* %50)
  call void @mbuf_free(%struct.mbuf* %auth)
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  store %struct.mg_connection* %51, %struct.mg_connection** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %52 = load %struct.mg_connection*, %struct.mg_connection** %retval, align 8
  ret %struct.mg_connection* %52
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_basic_auth_header(i8* %user.coerce0, i64 %user.coerce1, i8* %pass.coerce0, i64 %pass.coerce1, %struct.mbuf* %buf) #0 {
entry:
  %user = alloca %struct.mg_str, align 8
  %pass = alloca %struct.mg_str, align 8
  %buf.addr = alloca %struct.mbuf*, align 8
  %header_prefix = alloca i8*, align 8
  %header_suffix = alloca i8*, align 8
  %ctx = alloca %struct.cs_base64_ctx, align 8
  %0 = bitcast %struct.mg_str* %user to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %user.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %user.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %pass to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %pass.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %pass.coerce1, i64* %5, align 8
  store %struct.mbuf* %buf, %struct.mbuf** %buf.addr, align 8
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.153, i32 0, i32 0), i8** %header_prefix, align 8
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i8** %header_suffix, align 8
  %6 = load %struct.mbuf*, %struct.mbuf** %buf.addr, align 8
  %7 = bitcast %struct.mbuf* %6 to i8*
  call void @cs_base64_init(%struct.cs_base64_ctx* %ctx, void (i8, i8*)* @mg_mbuf_append_base64_putc, i8* %7)
  %8 = load %struct.mbuf*, %struct.mbuf** %buf.addr, align 8
  %9 = load i8*, i8** %header_prefix, align 8
  %10 = load i8*, i8** %header_prefix, align 8
  %call = call i64 @strlen(i8* %10)
  %call1 = call i64 @mbuf_append(%struct.mbuf* %8, i8* %9, i64 %call)
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user, i32 0, i32 0
  %11 = load i8*, i8** %p, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user, i32 0, i32 1
  %12 = load i64, i64* %len, align 8
  call void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* %11, i64 %12)
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pass, i32 0, i32 1
  %13 = load i64, i64* %len2, align 8
  %cmp = icmp ugt i64 %13, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.154, i32 0, i32 0), i64 1)
  %p3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pass, i32 0, i32 0
  %14 = load i8*, i8** %p3, align 8
  %len4 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pass, i32 0, i32 1
  %15 = load i64, i64* %len4, align 8
  call void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* %14, i64 %15)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @cs_base64_finish(%struct.cs_base64_ctx* %ctx)
  %16 = load %struct.mbuf*, %struct.mbuf** %buf.addr, align 8
  %17 = load i8*, i8** %header_suffix, align 8
  %18 = load i8*, i8** %header_suffix, align 8
  %call5 = call i64 @strlen(i8* %18)
  %call6 = call i64 @mbuf_append(%struct.mbuf* %16, i8* %17, i64 %call5)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_http(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, i8* %url, i8* %extra_headers, i8* %post_data) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %url.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %post_data.addr = alloca i8*, align 8
  %opts = alloca %struct.mg_connect_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  store i8* %url, i8** %url.addr, align 8
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  store i8* %post_data, i8** %post_data.addr, align 8
  %0 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 40, i32 8, i1 false)
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %3 = load i8*, i8** %url.addr, align 8
  %4 = load i8*, i8** %extra_headers.addr, align 8
  %5 = load i8*, i8** %post_data.addr, align 8
  %call = call %struct.mg_connection* @mg_connect_http_opt(%struct.mg_mgr* %1, void (%struct.mg_connection*, i32, i8*)* %2, %struct.mg_connect_opts* byval align 8 %opts, i8* %3, i8* %4, i8* %5)
  ret %struct.mg_connection* %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mg_parse_multipart(i8* %buf, i64 %buf_len, i8* %var_name, i64 %var_name_len, i8* %file_name, i64 %file_name_len, i8** %data, i64* %data_len) #0 {
entry:
  %retval = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %var_name.addr = alloca i8*, align 8
  %var_name_len.addr = alloca i64, align 8
  %file_name.addr = alloca i8*, align 8
  %file_name_len.addr = alloca i64, align 8
  %data.addr = alloca i8**, align 8
  %data_len.addr = alloca i64*, align 8
  %hl = alloca i64, align 8
  %bl = alloca i64, align 8
  %n = alloca i64, align 8
  %ll = alloca i64, align 8
  %pos = alloca i64, align 8
  %cdl = alloca i64, align 8
  %shl = alloca i32, align 4
  %header = alloca %struct.mg_str, align 8
  %var_name2 = alloca i8*, align 8
  %file_name2 = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  store i8* %var_name, i8** %var_name.addr, align 8
  store i64 %var_name_len, i64* %var_name_len.addr, align 8
  store i8* %file_name, i8** %file_name.addr, align 8
  store i64 %file_name_len, i64* %file_name_len.addr, align 8
  store i8** %data, i8*** %data.addr, align 8
  store i64* %data_len, i64** %data_len.addr, align 8
  store i64 21, i64* %cdl, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64, i64* %buf_len.addr, align 8
  %cmp1 = icmp ule i64 %1, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i64, i64* %buf_len.addr, align 8
  %conv = trunc i64 %3 to i32
  %call = call i32 @mg_http_get_request_len(i8* %2, i32 %conv)
  store i32 %call, i32* %shl, align 4
  %cmp2 = icmp sle i32 %call, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i64 0, i64* %retval, align 8
  br label %return

if.end5:                                          ; preds = %if.end
  %4 = load i32, i32* %shl, align 4
  %conv6 = sext i32 %4 to i64
  store i64 %conv6, i64* %hl, align 8
  %5 = load i8*, i8** %buf.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %conv7 = sext i8 %6 to i32
  %cmp8 = icmp ne i32 %conv7, 45
  br i1 %cmp8, label %if.then20, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end5
  %7 = load i8*, i8** %buf.addr, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp ne i32 %conv12, 45
  br i1 %cmp13, label %if.then20, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false10
  %9 = load i8*, i8** %buf.addr, align 8
  %arrayidx16 = getelementptr inbounds i8, i8* %9, i64 2
  %10 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %10 to i32
  %cmp18 = icmp eq i32 %conv17, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %lor.lhs.false15, %lor.lhs.false10, %if.end5
  store i64 0, i64* %retval, align 8
  br label %return

if.end21:                                         ; preds = %lor.lhs.false15
  %11 = load i8*, i8** %buf.addr, align 8
  %12 = load i64, i64* %buf_len.addr, align 8
  %call22 = call i64 @mg_get_line_len(i8* %11, i64 %12)
  store i64 %call22, i64* %bl, align 8
  %13 = load i8*, i8** %file_name.addr, align 8
  %arrayidx23 = getelementptr inbounds i8, i8* %13, i64 0
  store i8 0, i8* %arrayidx23, align 1
  %14 = load i8*, i8** %var_name.addr, align 8
  %arrayidx24 = getelementptr inbounds i8, i8* %14, i64 0
  store i8 0, i8* %arrayidx24, align 1
  %15 = load i64, i64* %bl, align 8
  store i64 %15, i64* %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end21
  %16 = load i8*, i8** %buf.addr, align 8
  %17 = load i64, i64* %n, align 8
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %17
  %18 = load i64, i64* %hl, align 8
  %19 = load i64, i64* %n, align 8
  %sub = sub i64 %18, %19
  %call25 = call i64 @mg_get_line_len(i8* %add.ptr, i64 %sub)
  store i64 %call25, i64* %ll, align 8
  %cmp26 = icmp ugt i64 %call25, 0
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i8*, i8** %buf.addr, align 8
  %21 = load i64, i64* %n, align 8
  %add.ptr28 = getelementptr inbounds i8, i8* %20, i64 %21
  %22 = load i64, i64* %cdl, align 8
  %call29 = call i32 @mg_ncasecmp(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @mg_parse_multipart.cd, i32 0, i32 0), i8* %add.ptr28, i64 %22)
  %cmp30 = icmp eq i32 %call29, 0
  br i1 %cmp30, label %if.then32, label %if.end48

if.then32:                                        ; preds = %for.body
  %23 = load i8*, i8** %buf.addr, align 8
  %24 = load i64, i64* %n, align 8
  %add.ptr33 = getelementptr inbounds i8, i8* %23, i64 %24
  %25 = load i64, i64* %cdl, align 8
  %add.ptr34 = getelementptr inbounds i8, i8* %add.ptr33, i64 %25
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %header, i32 0, i32 0
  store i8* %add.ptr34, i8** %p, align 8
  %26 = load i64, i64* %ll, align 8
  %27 = load i64, i64* %cdl, align 8
  %add = add i64 %27, 2
  %sub35 = sub i64 %26, %add
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %header, i32 0, i32 1
  store i64 %sub35, i64* %len, align 8
  %28 = load i8*, i8** %var_name.addr, align 8
  store i8* %28, i8** %var_name2, align 8
  %29 = load i64, i64* %var_name_len.addr, align 8
  %call36 = call i32 @mg_http_parse_header2(%struct.mg_str* %header, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.133, i32 0, i32 0), i8** %var_name2, i64 %29)
  %30 = load i8*, i8** %var_name2, align 8
  %31 = load i8*, i8** %var_name.addr, align 8
  %cmp37 = icmp ne i8* %30, %31
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.then32
  %32 = load i8*, i8** %var_name2, align 8
  call void @free(i8* %32)
  %33 = load i8*, i8** %var_name.addr, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %33, i64 0
  store i8 0, i8* %arrayidx40, align 1
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %if.then32
  %34 = load i8*, i8** %file_name.addr, align 8
  store i8* %34, i8** %file_name2, align 8
  %35 = load i64, i64* %file_name_len.addr, align 8
  %call42 = call i32 @mg_http_parse_header2(%struct.mg_str* %header, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.134, i32 0, i32 0), i8** %file_name2, i64 %35)
  %36 = load i8*, i8** %file_name2, align 8
  %37 = load i8*, i8** %file_name.addr, align 8
  %cmp43 = icmp ne i8* %36, %37
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end41
  %38 = load i8*, i8** %file_name2, align 8
  call void @free(i8* %38)
  %39 = load i8*, i8** %file_name.addr, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %39, i64 0
  store i8 0, i8* %arrayidx46, align 1
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end41
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end48
  %40 = load i64, i64* %ll, align 8
  %41 = load i64, i64* %n, align 8
  %add49 = add i64 %41, %40
  store i64 %add49, i64* %n, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %42 = load i64, i64* %hl, align 8
  store i64 %42, i64* %pos, align 8
  br label %for.cond50

for.cond50:                                       ; preds = %for.inc76, %for.end
  %43 = load i64, i64* %pos, align 8
  %44 = load i64, i64* %bl, align 8
  %sub51 = sub i64 %44, 2
  %add52 = add i64 %43, %sub51
  %45 = load i64, i64* %buf_len.addr, align 8
  %cmp53 = icmp ult i64 %add52, %45
  br i1 %cmp53, label %for.body55, label %for.end77

for.body55:                                       ; preds = %for.cond50
  %46 = load i8*, i8** %buf.addr, align 8
  %47 = load i64, i64* %pos, align 8
  %arrayidx56 = getelementptr inbounds i8, i8* %46, i64 %47
  %48 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %48 to i32
  %cmp58 = icmp eq i32 %conv57, 45
  br i1 %cmp58, label %land.lhs.true, label %if.end75

land.lhs.true:                                    ; preds = %for.body55
  %49 = load i8*, i8** %buf.addr, align 8
  %50 = load i8*, i8** %buf.addr, align 8
  %51 = load i64, i64* %pos, align 8
  %arrayidx60 = getelementptr inbounds i8, i8* %50, i64 %51
  %52 = load i64, i64* %bl, align 8
  %sub61 = sub i64 %52, 2
  %call62 = call i32 @strncmp(i8* %49, i8* %arrayidx60, i64 %sub61)
  %tobool = icmp ne i32 %call62, 0
  br i1 %tobool, label %if.end75, label %if.then63

if.then63:                                        ; preds = %land.lhs.true
  %53 = load i64*, i64** %data_len.addr, align 8
  %cmp64 = icmp ne i64* %53, null
  br i1 %cmp64, label %if.then66, label %if.end69

if.then66:                                        ; preds = %if.then63
  %54 = load i64, i64* %pos, align 8
  %sub67 = sub i64 %54, 2
  %55 = load i64, i64* %hl, align 8
  %sub68 = sub i64 %sub67, %55
  %56 = load i64*, i64** %data_len.addr, align 8
  store i64 %sub68, i64* %56, align 8
  br label %if.end69

if.end69:                                         ; preds = %if.then66, %if.then63
  %57 = load i8**, i8*** %data.addr, align 8
  %cmp70 = icmp ne i8** %57, null
  br i1 %cmp70, label %if.then72, label %if.end74

if.then72:                                        ; preds = %if.end69
  %58 = load i8*, i8** %buf.addr, align 8
  %59 = load i64, i64* %hl, align 8
  %add.ptr73 = getelementptr inbounds i8, i8* %58, i64 %59
  %60 = load i8**, i8*** %data.addr, align 8
  store i8* %add.ptr73, i8** %60, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.then72, %if.end69
  %61 = load i64, i64* %pos, align 8
  store i64 %61, i64* %retval, align 8
  br label %return

if.end75:                                         ; preds = %land.lhs.true, %for.body55
  br label %for.inc76

for.inc76:                                        ; preds = %if.end75
  %62 = load i64, i64* %pos, align 8
  %inc = add i64 %62, 1
  store i64 %inc, i64* %pos, align 8
  br label %for.cond50

for.end77:                                        ; preds = %for.cond50
  store i64 0, i64* %retval, align 8
  br label %return

return:                                           ; preds = %for.end77, %if.end74, %if.then20, %if.then4, %if.then
  %63 = load i64, i64* %retval, align 8
  ret i64 %63
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mg_get_line_len(i8* %buf, i64 %buf_len) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %len = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buf_len, i64* %buf_len.addr, align 8
  store i64 0, i64* %len, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i64, i64* %len, align 8
  %1 = load i64, i64* %buf_len.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i8*, i8** %buf.addr, align 8
  %3 = load i64, i64* %len, align 8
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %3
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp ne i32 %conv, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load i64, i64* %len, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %len, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %7 = load i64, i64* %len, align 8
  %8 = load i64, i64* %buf_len.addr, align 8
  %cmp3 = icmp eq i64 %7, %8
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  br label %cond.end

cond.false:                                       ; preds = %while.end
  %9 = load i64, i64* %len, align 8
  %add = add i64 %9, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %add, %cond.false ]
  ret i64 %cond
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_register_http_endpoint_opt(%struct.mg_connection* %nc, i8* %uri_path, void (%struct.mg_connection*, i32, i8*)* %handler, %struct.mg_http_endpoint_opts* byval align 8 %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %uri_path.addr = alloca i8*, align 8
  %handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  %new_ep = alloca %struct.mg_http_endpoint*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %coerce = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %uri_path, i8** %uri_path.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %handler, void (%struct.mg_connection*, i32, i8*)** %handler.addr, align 8
  store %struct.mg_http_proto_data* null, %struct.mg_http_proto_data** %pd, align 8
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %new_ep, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %cmp = icmp eq %struct.mg_connection* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %call = call i8* @calloc(i64 1, i64 48) #16
  %1 = bitcast i8* %call to %struct.mg_http_endpoint*
  store %struct.mg_http_endpoint* %1, %struct.mg_http_endpoint** %new_ep, align 8
  %2 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8
  %cmp1 = icmp eq %struct.mg_http_endpoint* %2, null
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  br label %return

if.end3:                                          ; preds = %if.end
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call4 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %3)
  store %struct.mg_http_proto_data* %call4, %struct.mg_http_proto_data** %pd, align 8
  %4 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cmp5 = icmp eq %struct.mg_http_proto_data* %4, null
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end3
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call7 = call %struct.mg_http_proto_data* @mg_http_create_proto_data(%struct.mg_connection* %5)
  store %struct.mg_http_proto_data* %call7, %struct.mg_http_proto_data** %pd, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end3
  %6 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8
  %uri_pattern = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %6, i32 0, i32 1
  %7 = load i8*, i8** %uri_path.addr, align 8
  %call9 = call { i8*, i64 } @mg_mk_str(i8* %7)
  %8 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = extractvalue { i8*, i64 } %call9, 0
  store i8* %10, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = extractvalue { i8*, i64 } %call9, 1
  store i64 %12, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %call10 = call { i8*, i64 } @mg_strdup(i8* %15, i64 %17)
  %18 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = extractvalue { i8*, i64 } %call10, 0
  store i8* %20, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = extractvalue { i8*, i64 } %call10, 1
  store i64 %22, i64* %21, align 8
  %23 = bitcast %struct.mg_str* %uri_pattern to i8*
  %24 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 16, i32 8, i1 false)
  %auth_domain = getelementptr inbounds %struct.mg_http_endpoint_opts, %struct.mg_http_endpoint_opts* %opts, i32 0, i32 1
  %25 = load i8*, i8** %auth_domain, align 8
  %cmp11 = icmp ne i8* %25, null
  br i1 %cmp11, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.end8
  %auth_file = getelementptr inbounds %struct.mg_http_endpoint_opts, %struct.mg_http_endpoint_opts* %opts, i32 0, i32 2
  %26 = load i8*, i8** %auth_file, align 8
  %cmp12 = icmp ne i8* %26, null
  br i1 %cmp12, label %if.then13, label %if.end20

if.then13:                                        ; preds = %land.lhs.true
  %auth_domain14 = getelementptr inbounds %struct.mg_http_endpoint_opts, %struct.mg_http_endpoint_opts* %opts, i32 0, i32 1
  %27 = load i8*, i8** %auth_domain14, align 8
  %call15 = call i8* @strdup(i8* %27)
  %28 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8
  %auth_domain16 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %28, i32 0, i32 2
  store i8* %call15, i8** %auth_domain16, align 8
  %auth_file17 = getelementptr inbounds %struct.mg_http_endpoint_opts, %struct.mg_http_endpoint_opts* %opts, i32 0, i32 2
  %29 = load i8*, i8** %auth_file17, align 8
  %call18 = call i8* @strdup(i8* %29)
  %30 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8
  %auth_file19 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %30, i32 0, i32 3
  store i8* %call18, i8** %auth_file19, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then13, %land.lhs.true, %if.end8
  %31 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler.addr, align 8
  %32 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8
  %handler21 = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %32, i32 0, i32 4
  store void (%struct.mg_connection*, i32, i8*)* %31, void (%struct.mg_connection*, i32, i8*)** %handler21, align 8
  %33 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoints = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %33, i32 0, i32 4
  %34 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %endpoints, align 8
  %35 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8
  %next = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %35, i32 0, i32 0
  store %struct.mg_http_endpoint* %34, %struct.mg_http_endpoint** %next, align 8
  %36 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %new_ep, align 8
  %37 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoints22 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %37, i32 0, i32 4
  store %struct.mg_http_endpoint* %36, %struct.mg_http_endpoint** %endpoints22, align 8
  br label %return

return:                                           ; preds = %if.end20, %if.then2, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_register_http_endpoint(%struct.mg_connection* %nc, i8* %uri_path, void (%struct.mg_connection*, i32, i8*)* %handler) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %uri_path.addr = alloca i8*, align 8
  %handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %opts = alloca %struct.mg_http_endpoint_opts, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %uri_path, i8** %uri_path.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %handler, void (%struct.mg_connection*, i32, i8*)** %handler.addr, align 8
  %0 = bitcast %struct.mg_http_endpoint_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 24, i32 8, i1 false)
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %2 = load i8*, i8** %uri_path.addr, align 8
  %3 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler.addr, align 8
  call void @mg_register_http_endpoint_opt(%struct.mg_connection* %1, i8* %2, void (%struct.mg_connection*, i32, i8*)* %3, %struct.mg_http_endpoint_opts* byval align 8 %opts)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_websocket_frame(%struct.mg_connection* %nc, i32 %op, i8* %data, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %op.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctx = alloca %struct.ws_mask_ctx, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10113)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i32, i32* %op.addr, align 4
  %2 = load i64, i64* %len.addr, align 8
  %conv = trunc i64 %2 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.135, i32 0, i32 0), %struct.mg_connection* %0, i32 %1, i32 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %4 = load i32, i32* %op.addr, align 4
  %5 = load i64, i64* %len.addr, align 8
  call void @mg_send_ws_header(%struct.mg_connection* %3, i32 %4, i64 %5, %struct.ws_mask_ctx* %ctx)
  %6 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %7 = load i8*, i8** %data.addr, align 8
  %8 = load i64, i64* %len.addr, align 8
  %conv1 = trunc i64 %8 to i32
  call void @mg_send(%struct.mg_connection* %6, i8* %7, i32 %conv1)
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 9
  call void @mg_ws_mask_frame(%struct.mbuf* %send_mbuf, %struct.ws_mask_ctx* %ctx)
  %10 = load i32, i32* %op.addr, align 4
  %cmp = icmp eq i32 %10, 8
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %do.end
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags, align 8
  %or = or i64 %12, 1024
  store i64 %or, i64* %flags, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %do.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_send_ws_header(%struct.mg_connection* %nc, i32 %op, i64 %len, %struct.ws_mask_ctx* %ctx) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %op.addr = alloca i32, align 4
  %len.addr = alloca i64, align 8
  %ctx.addr = alloca %struct.ws_mask_ctx*, align 8
  %header_len = alloca i32, align 4
  %header = alloca [10 x i8], align 1
  %tmp = alloca i16, align 2
  %tmp15 = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store i64 %len, i64* %len.addr, align 8
  store %struct.ws_mask_ctx* %ctx, %struct.ws_mask_ctx** %ctx.addr, align 8
  %0 = load i32, i32* %op.addr, align 4
  %and = and i32 %0, 256
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i32 0, i32 128
  %1 = load i32, i32* %op.addr, align 4
  %and1 = and i32 %1, 15
  %or = or i32 %cond, %and1
  %conv = trunc i32 %or to i8
  %arrayidx = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 0
  store i8 %conv, i8* %arrayidx, align 1
  %2 = load i64, i64* %len.addr, align 8
  %cmp = icmp ult i64 %2, 126
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %len.addr, align 8
  %conv3 = trunc i64 %3 to i8
  %arrayidx4 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 1
  store i8 %conv3, i8* %arrayidx4, align 1
  store i32 2, i32* %header_len, align 4
  br label %if.end24

if.else:                                          ; preds = %entry
  %4 = load i64, i64* %len.addr, align 8
  %cmp5 = icmp ult i64 %4, 65535
  br i1 %cmp5, label %if.then7, label %if.else13

if.then7:                                         ; preds = %if.else
  %5 = load i64, i64* %len.addr, align 8
  %conv8 = trunc i64 %5 to i16
  %call = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv8)
  %conv9 = zext i16 %call to i32
  %conv10 = trunc i32 %conv9 to i16
  store i16 %conv10, i16* %tmp, align 2
  %arrayidx11 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 1
  store i8 126, i8* %arrayidx11, align 1
  %arrayidx12 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 2
  %6 = bitcast i16* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arrayidx12, i8* %6, i64 2, i32 1, i1 false)
  store i32 4, i32* %header_len, align 4
  br label %if.end

if.else13:                                        ; preds = %if.else
  %arrayidx16 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 1
  store i8 127, i8* %arrayidx16, align 1
  %7 = load i64, i64* %len.addr, align 8
  %shr = lshr i64 %7, 32
  %conv17 = trunc i64 %shr to i32
  %call18 = call i32 @_OSSwapInt32(i32 %conv17)
  store i32 %call18, i32* %tmp15, align 4
  %arrayidx19 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 2
  %8 = bitcast i32* %tmp15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arrayidx19, i8* %8, i64 4, i32 1, i1 false)
  %9 = load i64, i64* %len.addr, align 8
  %and20 = and i64 %9, 4294967295
  %conv21 = trunc i64 %and20 to i32
  %call22 = call i32 @_OSSwapInt32(i32 %conv21)
  store i32 %call22, i32* %tmp15, align 4
  %arrayidx23 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 6
  %10 = bitcast i32* %tmp15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %arrayidx23, i8* %10, i64 4, i32 1, i1 false)
  store i32 10, i32* %header_len, align 4
  br label %if.end

if.end:                                           ; preds = %if.else13, %if.then7
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 2
  %12 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8
  %cmp25 = icmp eq %struct.mg_connection* %12, null
  br i1 %cmp25, label %if.then27, label %if.else35

if.then27:                                        ; preds = %if.end24
  %arrayidx28 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i64 0, i64 1
  %13 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %13 to i32
  %or30 = or i32 %conv29, 128
  %conv31 = trunc i32 %or30 to i8
  store i8 %conv31, i8* %arrayidx28, align 1
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %header, i32 0, i32 0
  %15 = load i32, i32* %header_len, align 4
  call void @mg_send(%struct.mg_connection* %14, i8* %arraydecay, i32 %15)
  %call32 = call i32 @mg_ws_random_mask()
  %16 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8
  %mask = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %16, i32 0, i32 1
  store i32 %call32, i32* %mask, align 8
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %18 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8
  %mask33 = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %18, i32 0, i32 1
  %19 = bitcast i32* %mask33 to i8*
  call void @mg_send(%struct.mg_connection* %17, i8* %19, i32 4)
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 9
  %len34 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf, i32 0, i32 1
  %21 = load i64, i64* %len34, align 8
  %22 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8
  %pos = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %22, i32 0, i32 0
  store i64 %21, i64* %pos, align 8
  br label %if.end38

if.else35:                                        ; preds = %if.end24
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay36 = getelementptr inbounds [10 x i8], [10 x i8]* %header, i32 0, i32 0
  %24 = load i32, i32* %header_len, align 4
  call void @mg_send(%struct.mg_connection* %23, i8* %arraydecay36, i32 %24)
  %25 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8
  %pos37 = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %25, i32 0, i32 0
  store i64 0, i64* %pos37, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.else35, %if.then27
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_ws_mask_frame(%struct.mbuf* %mbuf, %struct.ws_mask_ctx* %ctx) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  %ctx.addr = alloca %struct.ws_mask_ctx*, align 8
  %i = alloca i64, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8
  store %struct.ws_mask_ctx* %ctx, %struct.ws_mask_ctx** %ctx.addr, align 8
  %0 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8
  %pos = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %0, i32 0, i32 0
  %1 = load i64, i64* %pos, align 8
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %for.end

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i64, i64* %i, align 8
  %3 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %3, i32 0, i32 1
  %4 = load i64, i64* %len, align 8
  %5 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8
  %pos1 = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %5, i32 0, i32 0
  %6 = load i64, i64* %pos1, align 8
  %sub = sub i64 %4, %6
  %cmp2 = icmp ult i64 %2, %sub
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8
  %mask = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %7, i32 0, i32 1
  %8 = bitcast i32* %mask to i8*
  %9 = load i64, i64* %i, align 8
  %rem = urem i64 %9, 4
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %rem
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %11 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %11, i32 0, i32 0
  %12 = load i8*, i8** %buf, align 8
  %13 = load %struct.ws_mask_ctx*, %struct.ws_mask_ctx** %ctx.addr, align 8
  %pos3 = getelementptr inbounds %struct.ws_mask_ctx, %struct.ws_mask_ctx* %13, i32 0, i32 0
  %14 = load i64, i64* %pos3, align 8
  %15 = load i64, i64* %i, align 8
  %add = add i64 %14, %15
  %arrayidx4 = getelementptr inbounds i8, i8* %12, i64 %add
  %16 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %16 to i32
  %xor = xor i32 %conv5, %conv
  %conv6 = trunc i32 %xor to i8
  store i8 %conv6, i8* %arrayidx4, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i64, i64* %i, align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_websocket_framev(%struct.mg_connection* %nc, i32 %op, %struct.mg_str* %strv, i32 %strvcnt) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %op.addr = alloca i32, align 4
  %strv.addr = alloca %struct.mg_str*, align 8
  %strvcnt.addr = alloca i32, align 4
  %ctx = alloca %struct.ws_mask_ctx, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store %struct.mg_str* %strv, %struct.mg_str** %strv.addr, align 8
  store i32 %strvcnt, i32* %strvcnt.addr, align 4
  store i32 0, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %1 = load i32, i32* %strvcnt.addr, align 4
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.mg_str*, %struct.mg_str** %strv.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds %struct.mg_str, %struct.mg_str* %2, i64 %idxprom
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx, i32 0, i32 1
  %4 = load i64, i64* %len1, align 8
  %5 = load i32, i32* %len, align 4
  %conv = sext i32 %5 to i64
  %add = add i64 %conv, %4
  %conv2 = trunc i64 %add to i32
  store i32 %conv2, i32* %len, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %8 = load i32, i32* %op.addr, align 4
  %9 = load i32, i32* %len, align 4
  %conv3 = sext i32 %9 to i64
  call void @mg_send_ws_header(%struct.mg_connection* %7, i32 %8, i64 %conv3, %struct.ws_mask_ctx* %ctx)
  store i32 0, i32* %i, align 4
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc14, %for.end
  %10 = load i32, i32* %i, align 4
  %11 = load i32, i32* %strvcnt.addr, align 4
  %cmp5 = icmp slt i32 %10, %11
  br i1 %cmp5, label %for.body7, label %for.end16

for.body7:                                        ; preds = %for.cond4
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %13 = load %struct.mg_str*, %struct.mg_str** %strv.addr, align 8
  %14 = load i32, i32* %i, align 4
  %idxprom8 = sext i32 %14 to i64
  %arrayidx9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %13, i64 %idxprom8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx9, i32 0, i32 0
  %15 = load i8*, i8** %p, align 8
  %16 = load %struct.mg_str*, %struct.mg_str** %strv.addr, align 8
  %17 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %17 to i64
  %arrayidx11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %16, i64 %idxprom10
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx11, i32 0, i32 1
  %18 = load i64, i64* %len12, align 8
  %conv13 = trunc i64 %18 to i32
  call void @mg_send(%struct.mg_connection* %12, i8* %15, i32 %conv13)
  br label %for.inc14

for.inc14:                                        ; preds = %for.body7
  %19 = load i32, i32* %i, align 4
  %inc15 = add nsw i32 %19, 1
  store i32 %inc15, i32* %i, align 4
  br label %for.cond4

for.end16:                                        ; preds = %for.cond4
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 9
  call void @mg_ws_mask_frame(%struct.mbuf* %send_mbuf, %struct.ws_mask_ctx* %ctx)
  %21 = load i32, i32* %op.addr, align 4
  %cmp17 = icmp eq i32 %21, 8
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %for.end16
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %22, i32 0, i32 21
  %23 = load i64, i64* %flags, align 8
  %or = or i64 %23, 1024
  store i64 %or, i64* %flags, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.end16
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_printf_websocket_frame(%struct.mg_connection* %nc, i32 %op, i8* %fmt, ...) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %op.addr = alloca i32, align 4
  %fmt.addr = alloca i8*, align 8
  %mem = alloca [100 x i8], align 16
  %buf = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %len = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store i8* %fmt, i8** %fmt.addr, align 8
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  store i8* %arraydecay, i8** %buf, align 8
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay12 = bitcast %struct.__va_list_tag* %arraydecay1 to i8*
  call void @llvm.va_start(i8* %arraydecay12)
  %0 = load i8*, i8** %fmt.addr, align 8
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @mg_avprintf(i8** %buf, i64 100, i8* %0, %struct.__va_list_tag* %arraydecay3)
  store i32 %call, i32* %len, align 4
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %2 = load i32, i32* %op.addr, align 4
  %3 = load i8*, i8** %buf, align 8
  %4 = load i32, i32* %len, align 4
  %conv = sext i32 %4 to i64
  call void @mg_send_websocket_frame(%struct.mg_connection* %1, i32 %2, i8* %3, i64 %conv)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_end(i8* %arraydecay45)
  %5 = load i8*, i8** %buf, align 8
  %arraydecay6 = getelementptr inbounds [100 x i8], [100 x i8]* %mem, i32 0, i32 0
  %cmp7 = icmp ne i8* %5, %arraydecay6
  br i1 %cmp7, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end
  %6 = load i8*, i8** %buf, align 8
  %cmp9 = icmp ne i8* %6, null
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  %7 = load i8*, i8** %buf, align 8
  call void @free(i8* %7)
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_hash_sha1_v(i64 %num_msgs, i8** %msgs, i64* %msg_lens, i8* %digest) #0 {
entry:
  %num_msgs.addr = alloca i64, align 8
  %msgs.addr = alloca i8**, align 8
  %msg_lens.addr = alloca i64*, align 8
  %digest.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %sha_ctx = alloca %struct.cs_sha1_ctx, align 4
  store i64 %num_msgs, i64* %num_msgs.addr, align 8
  store i8** %msgs, i8*** %msgs.addr, align 8
  store i64* %msg_lens, i64** %msg_lens.addr, align 8
  store i8* %digest, i8** %digest.addr, align 8
  call void @cs_sha1_init(%struct.cs_sha1_ctx* %sha_ctx)
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %num_msgs.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %msgs.addr, align 8
  %3 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %3
  %4 = load i8*, i8** %arrayidx, align 8
  %5 = load i64*, i64** %msg_lens.addr, align 8
  %6 = load i64, i64* %i, align 8
  %arrayidx1 = getelementptr inbounds i64, i64* %5, i64 %6
  %7 = load i64, i64* %arrayidx1, align 8
  %conv = trunc i64 %7 to i32
  call void @cs_sha1_update(%struct.cs_sha1_ctx* %sha_ctx, i8* %4, i32 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i64, i64* %i, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i8*, i8** %digest.addr, align 8
  call void @cs_sha1_final(i8* %9, %struct.cs_sha1_ctx* %sha_ctx)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_websocket_handshake2(%struct.mg_connection* %nc, i8* %path, i8* %host, i8* %protocol, i8* %extra_headers) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %host.addr = alloca i8*, align 8
  %protocol.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  store i8* %host, i8** %host.addr, align 8
  store i8* %protocol, i8** %protocol.addr, align 8
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i8*, i8** %path.addr, align 8
  %2 = load i8*, i8** %host.addr, align 8
  %3 = load i8*, i8** %protocol.addr, align 8
  %4 = load i8*, i8** %extra_headers.addr, align 8
  call void @mg_send_websocket_handshake3(%struct.mg_connection* %0, i8* %1, i8* %2, i8* %3, i8* %4, i8* null, i8* null)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_websocket_handshake3(%struct.mg_connection* %nc, i8* %path, i8* %host, i8* %protocol, i8* %extra_headers, i8* %user, i8* %pass) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %host.addr = alloca i8*, align 8
  %protocol.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %user.addr = alloca i8*, align 8
  %pass.addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp1 = alloca %struct.mg_str, align 8
  %agg.tmp3 = alloca %struct.mg_str, align 8
  %agg.tmp5 = alloca %struct.mg_str, align 8
  %agg.tmp7 = alloca %struct.mg_str, align 8
  %agg.tmp9 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  store i8* %host, i8** %host.addr, align 8
  store i8* %protocol, i8** %protocol.addr, align 8
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  store i8* %user, i8** %user.addr, align 8
  store i8* %pass, i8** %pass.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i8*, i8** %path.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* %1)
  %2 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %3 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 0
  %4 = extractvalue { i8*, i64 } %call, 0
  store i8* %4, i8** %3, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 1
  %6 = extractvalue { i8*, i64 } %call, 1
  store i64 %6, i64* %5, align 8
  %7 = load i8*, i8** %host.addr, align 8
  %call2 = call { i8*, i64 } @mg_mk_str(i8* %7)
  %8 = bitcast %struct.mg_str* %agg.tmp1 to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = extractvalue { i8*, i64 } %call2, 0
  store i8* %10, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = extractvalue { i8*, i64 } %call2, 1
  store i64 %12, i64* %11, align 8
  %13 = load i8*, i8** %protocol.addr, align 8
  %call4 = call { i8*, i64 } @mg_mk_str(i8* %13)
  %14 = bitcast %struct.mg_str* %agg.tmp3 to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = extractvalue { i8*, i64 } %call4, 0
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = extractvalue { i8*, i64 } %call4, 1
  store i64 %18, i64* %17, align 8
  %19 = load i8*, i8** %extra_headers.addr, align 8
  %call6 = call { i8*, i64 } @mg_mk_str(i8* %19)
  %20 = bitcast %struct.mg_str* %agg.tmp5 to { i8*, i64 }*
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  %22 = extractvalue { i8*, i64 } %call6, 0
  store i8* %22, i8** %21, align 8
  %23 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  %24 = extractvalue { i8*, i64 } %call6, 1
  store i64 %24, i64* %23, align 8
  %25 = load i8*, i8** %user.addr, align 8
  %call8 = call { i8*, i64 } @mg_mk_str(i8* %25)
  %26 = bitcast %struct.mg_str* %agg.tmp7 to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = extractvalue { i8*, i64 } %call8, 0
  store i8* %28, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = extractvalue { i8*, i64 } %call8, 1
  store i64 %30, i64* %29, align 8
  %31 = load i8*, i8** %pass.addr, align 8
  %call10 = call { i8*, i64 } @mg_mk_str(i8* %31)
  %32 = bitcast %struct.mg_str* %agg.tmp9 to { i8*, i64 }*
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %32, i32 0, i32 0
  %34 = extractvalue { i8*, i64 } %call10, 0
  store i8* %34, i8** %33, align 8
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %32, i32 0, i32 1
  %36 = extractvalue { i8*, i64 } %call10, 1
  store i64 %36, i64* %35, align 8
  %37 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %struct.mg_str* %agg.tmp1 to { i8*, i64 }*
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  call void @mg_send_websocket_handshake3v(%struct.mg_connection* %0, i8* %39, i64 %41, i8* %44, i64 %46, %struct.mg_str* byval align 8 %agg.tmp3, %struct.mg_str* byval align 8 %agg.tmp5, %struct.mg_str* byval align 8 %agg.tmp7, %struct.mg_str* byval align 8 %agg.tmp9)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_websocket_handshake3v(%struct.mg_connection* %nc, i8* %path.coerce0, i64 %path.coerce1, i8* %host.coerce0, i64 %host.coerce1, %struct.mg_str* byval align 8 %protocol, %struct.mg_str* byval align 8 %extra_headers, %struct.mg_str* byval align 8 %user, %struct.mg_str* byval align 8 %pass) #0 {
entry:
  %path = alloca %struct.mg_str, align 8
  %host = alloca %struct.mg_str, align 8
  %nc.addr = alloca %struct.mg_connection*, align 8
  %auth = alloca %struct.mbuf, align 8
  %key = alloca [25 x i8], align 16
  %nonce = alloca [4 x i32], align 16
  %host_len = alloca i32, align 4
  %0 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %path.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %path.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %host to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %host.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %host.coerce1, i64* %5, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %call = call i32 @mg_ws_random_mask()
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %nonce, i64 0, i64 0
  store i32 %call, i32* %arrayidx, align 16
  %call1 = call i32 @mg_ws_random_mask()
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %nonce, i64 0, i64 1
  store i32 %call1, i32* %arrayidx2, align 4
  %call3 = call i32 @mg_ws_random_mask()
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %nonce, i64 0, i64 2
  store i32 %call3, i32* %arrayidx4, align 8
  %call5 = call i32 @mg_ws_random_mask()
  %arrayidx6 = getelementptr inbounds [4 x i32], [4 x i32]* %nonce, i64 0, i64 3
  store i32 %call5, i32* %arrayidx6, align 4
  %6 = bitcast [4 x i32]* %nonce to i8*
  %arraydecay = getelementptr inbounds [25 x i8], [25 x i8]* %key, i32 0, i32 0
  call void @mg_base64_encode(i8* %6, i32 16, i8* %arraydecay)
  call void @mbuf_init(%struct.mbuf* %auth, i64 0)
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user, i32 0, i32 1
  %7 = load i64, i64* %len, align 8
  %cmp = icmp ugt i64 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.mg_str* %user to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %pass to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  call void @mg_basic_auth_header(i8* %10, i64 %12, i8* %15, i64 %17, %struct.mbuf* %auth)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %19 = load i64, i64* %len7, align 8
  %conv = trunc i64 %19 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %20 = load i8*, i8** %p, align 8
  %len8 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 1
  %21 = load i64, i64* %len8, align 8
  %conv9 = trunc i64 %21 to i32
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 0
  %22 = load i8*, i8** %buf, align 8
  %cmp10 = icmp eq i8* %22, null
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %buf12 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %auth, i32 0, i32 0
  %23 = load i8*, i8** %buf12, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %23, %cond.false ]
  %arraydecay13 = getelementptr inbounds [25 x i8], [25 x i8]* %key, i32 0, i32 0
  %call14 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %18, i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.136, i32 0, i32 0), i32 %conv, i8* %20, i32 %conv9, i8* %cond, i8* %arraydecay13)
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 1
  %24 = load i64, i64* %len15, align 8
  %cmp16 = icmp ugt i64 %24, 0
  br i1 %cmp16, label %if.then18, label %if.end24

if.then18:                                        ; preds = %cond.end
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %25 = load i8*, i8** %p19, align 8
  %p20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %26 = load i8*, i8** %p20, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %26 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv21 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv21, i32* %host_len, align 4
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %28 = load i32, i32* %host_len, align 4
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %host, i32 0, i32 0
  %29 = load i8*, i8** %p22, align 8
  %call23 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %27, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.114, i32 0, i32 0), i32 %28, i8* %29)
  br label %if.end24

if.end24:                                         ; preds = %if.then18, %cond.end
  %len25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol, i32 0, i32 1
  %30 = load i64, i64* %len25, align 8
  %cmp26 = icmp ugt i64 %30, 0
  br i1 %cmp26, label %if.then28, label %if.end33

if.then28:                                        ; preds = %if.end24
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %len29 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol, i32 0, i32 1
  %32 = load i64, i64* %len29, align 8
  %conv30 = trunc i64 %32 to i32
  %p31 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol, i32 0, i32 0
  %33 = load i8*, i8** %p31, align 8
  %call32 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %31, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.137, i32 0, i32 0), i32 %conv30, i8* %33)
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end24
  %len34 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %34 = load i64, i64* %len34, align 8
  %cmp35 = icmp ugt i64 %34, 0
  br i1 %cmp35, label %if.then37, label %if.end42

if.then37:                                        ; preds = %if.end33
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %len38 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 1
  %36 = load i64, i64* %len38, align 8
  %conv39 = trunc i64 %36 to i32
  %p40 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %extra_headers, i32 0, i32 0
  %37 = load i8*, i8** %p40, align 8
  %call41 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138, i32 0, i32 0), i32 %conv39, i8* %37)
  br label %if.end42

if.end42:                                         ; preds = %if.then37, %if.end33
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call43 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0))
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %39, i32 0, i32 21
  %40 = load i64, i64* %flags, align 8
  %or = or i64 %40, 256
  store i64 %or, i64* %flags, align 8
  call void @mbuf_free(%struct.mbuf* %auth)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_ws_random_mask() #0 {
entry:
  %mask = alloca i32, align 4
  %call = call i32 @rand()
  store i32 %call, i32* %mask, align 4
  %0 = load i32, i32* %mask, align 4
  ret i32 %0
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_base64_encode(i8* %src, i32 %src_len, i8* %dst) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %src_len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8
  store i32 %src_len, i32* %src_len.addr, align 4
  store i8* %dst, i8** %dst.addr, align 8
  %0 = load i8*, i8** %src.addr, align 8
  %1 = load i32, i32* %src_len.addr, align 4
  %2 = load i8*, i8** %dst.addr, align 8
  call void @cs_base64_encode(i8* %0, i32 %1, i8* %2)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_websocket_handshake(%struct.mg_connection* %nc, i8* %path, i8* %extra_headers) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %null_str = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp1 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  %0 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 8, i1 false)
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %2 = load i8*, i8** %path.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* %2)
  %3 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = extractvalue { i8*, i64 } %call, 0
  store i8* %5, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = extractvalue { i8*, i64 } %call, 1
  store i64 %7, i64* %6, align 8
  %8 = load i8*, i8** %extra_headers.addr, align 8
  %call2 = call { i8*, i64 } @mg_mk_str(i8* %8)
  %9 = bitcast %struct.mg_str* %agg.tmp1 to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %11 = extractvalue { i8*, i64 } %call2, 0
  store i8* %11, i8** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %13 = extractvalue { i8*, i64 } %call2, 1
  store i64 %13, i64* %12, align 8
  %14 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = bitcast %struct.mg_str* %null_str to { i8*, i64 }*
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  call void @mg_send_websocket_handshake3v(%struct.mg_connection* %1, i8* %16, i64 %18, i8* %21, i64 %23, %struct.mg_str* byval align 8 %null_str, %struct.mg_str* byval align 8 %agg.tmp1, %struct.mg_str* byval align 8 %null_str, %struct.mg_str* byval align 8 %null_str)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_ws_opt(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, %struct.mg_connect_opts* byval align 8 %opts, i8* %url, i8* %protocol, i8* %extra_headers) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %url.addr = alloca i8*, align 8
  %protocol.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %null_str = alloca %struct.mg_str, align 8
  %host = alloca %struct.mg_str, align 8
  %path = alloca %struct.mg_str, align 8
  %user_info = alloca %struct.mg_str, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %agg.tmp2 = alloca %struct.mg_str, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  store i8* %url, i8** %url.addr, align 8
  store i8* %protocol, i8** %protocol.addr, align 8
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  %0 = bitcast %struct.mg_str* %null_str to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 8, i1 false)
  %1 = bitcast %struct.mg_str* %host to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 8, i1 false)
  %2 = bitcast %struct.mg_str* %path to i8*
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 16, i32 8, i1 false)
  %3 = bitcast %struct.mg_str* %user_info to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 8, i1 false)
  %4 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %5 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %6 = load i8*, i8** %url.addr, align 8
  %call = call %struct.mg_connection* @mg_connect_http_base(%struct.mg_mgr* %4, void (%struct.mg_connection*, i32, i8*)* %5, %struct.mg_connect_opts* byval align 8 %opts, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.140, i32 0, i32 0), i8* %6, %struct.mg_str* %path, %struct.mg_str* %user_info, %struct.mg_str* %host)
  store %struct.mg_connection* %call, %struct.mg_connection** %nc, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp = icmp ne %struct.mg_connection* %7, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %9 = load i8*, i8** %protocol.addr, align 8
  %call1 = call { i8*, i64 } @mg_mk_str(i8* %9)
  %10 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 0
  %12 = extractvalue { i8*, i64 } %call1, 0
  store i8* %12, i8** %11, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 1
  %14 = extractvalue { i8*, i64 } %call1, 1
  store i64 %14, i64* %13, align 8
  %15 = load i8*, i8** %extra_headers.addr, align 8
  %call3 = call { i8*, i64 } @mg_mk_str(i8* %15)
  %16 = bitcast %struct.mg_str* %agg.tmp2 to { i8*, i64 }*
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  %18 = extractvalue { i8*, i64 } %call3, 0
  store i8* %18, i8** %17, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  %20 = extractvalue { i8*, i64 } %call3, 1
  store i64 %20, i64* %19, align 8
  %21 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %struct.mg_str* %host to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  call void @mg_send_websocket_handshake3v(%struct.mg_connection* %8, i8* %23, i64 %25, i8* %28, i64 %30, %struct.mg_str* byval align 8 %agg.tmp, %struct.mg_str* byval align 8 %agg.tmp2, %struct.mg_str* byval align 8 %user_info, %struct.mg_str* byval align 8 %null_str)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  ret %struct.mg_connection* %31
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_connection* @mg_connect_ws(%struct.mg_mgr* %mgr, void (%struct.mg_connection*, i32, i8*)* %ev_handler, i8* %url, i8* %protocol, i8* %extra_headers) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %ev_handler.addr = alloca void (%struct.mg_connection*, i32, i8*)*, align 8
  %url.addr = alloca i8*, align 8
  %protocol.addr = alloca i8*, align 8
  %extra_headers.addr = alloca i8*, align 8
  %opts = alloca %struct.mg_connect_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store void (%struct.mg_connection*, i32, i8*)* %ev_handler, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  store i8* %url, i8** %url.addr, align 8
  store i8* %protocol, i8** %protocol.addr, align 8
  store i8* %extra_headers, i8** %extra_headers.addr, align 8
  %0 = bitcast %struct.mg_connect_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 40, i32 8, i1 false)
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %ev_handler.addr, align 8
  %3 = load i8*, i8** %url.addr, align 8
  %4 = load i8*, i8** %protocol.addr, align 8
  %5 = load i8*, i8** %extra_headers.addr, align 8
  %call = call %struct.mg_connection* @mg_connect_ws_opt(%struct.mg_mgr* %1, void (%struct.mg_connection*, i32, i8*)* %2, %struct.mg_connect_opts* byval align 8 %opts, i8* %3, i8* %4, i8* %5)
  ret %struct.mg_connection* %call
}

declare i8* @strchr(i8*, i32) #3

declare i32 @"\01_stat$INODE64"(i8*, %struct.stat*) #3

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_open(i8* %path, i32 %flag, i32 %mode) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %flag.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  store i8* %path, i8** %path.addr, align 8
  store i32 %flag, i32* %flag.addr, align 4
  store i32 %mode, i32* %mode.addr, align 4
  %0 = load i8*, i8** %path.addr, align 8
  %1 = load i32, i32* %flag.addr, align 4
  %2 = load i32, i32* %mode.addr, align 4
  %call = call i32 (i8*, i32, ...) @"\01_open"(i8* %0, i32 %1, i32 %2)
  ret i32 %call
}

declare i32 @"\01_open"(i8*, i32, ...) #3

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mg_fread(i8* %ptr, i64 %size, i64 %count, %struct.__sFILE* %f) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %f.addr = alloca %struct.__sFILE*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store %struct.__sFILE* %f, %struct.__sFILE** %f.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i64, i64* %size.addr, align 8
  %2 = load i64, i64* %count.addr, align 8
  %3 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8
  %call = call i64 @fread(i8* %0, i64 %1, i64 %2, %struct.__sFILE* %3)
  ret i64 %call
}

declare i64 @fread(i8*, i64, i64, %struct.__sFILE*) #3

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mg_fwrite(i8* %ptr, i64 %size, i64 %count, %struct.__sFILE* %f) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %count.addr = alloca i64, align 8
  %f.addr = alloca %struct.__sFILE*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i64 %count, i64* %count.addr, align 8
  store %struct.__sFILE* %f, %struct.__sFILE** %f.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i64, i64* %size.addr, align 8
  %2 = load i64, i64* %count.addr, align 8
  %3 = load %struct.__sFILE*, %struct.__sFILE** %f.addr, align 8
  %call = call i64 @"\01_fwrite"(i8* %0, i64 %1, i64 %2, %struct.__sFILE* %3)
  ret i64 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_base64_decode(i8* %s, i32 %len, i8* %dst) #0 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %dst, i8** %dst.addr, align 8
  %0 = load i8*, i8** %s.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  %2 = load i8*, i8** %dst.addr, align 8
  %call = call i32 @cs_base64_decode(i8* %0, i32 %1, i8* %2, i32* null)
  ret i32 %call
}

declare i8* @inet_ntop(i32, i8*, i8*, i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_conn_addr_to_str(%struct.mg_connection* %nc, i8* %buf, i64 %len, i32 %flags) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %sa = alloca %union.socket_address, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 4, i1 false)
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %2 = load i32, i32* %flags.addr, align 4
  %and = and i32 %2, 4
  call void @mg_if_get_conn_addr(%struct.mg_connection* %1, i32 %and, %union.socket_address* %sa)
  %3 = load i8*, i8** %buf.addr, align 8
  %4 = load i64, i64* %len.addr, align 8
  %5 = load i32, i32* %flags.addr, align 4
  %call = call i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %3, i64 %4, i32 %5)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_hexdump(i8* %buf, i32 %len, i8* %dst, i32 %dst_len) #0 {
entry:
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i32 %dst_len, i32* %dst_len.addr, align 4
  %0 = load i8*, i8** %buf.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  %2 = load i8*, i8** %dst.addr, align 8
  %3 = load i32, i32* %dst_len.addr, align 4
  %call = call i32 @mg_hexdump_n(i8* %0, i32 %1, i8* %2, i32 %3, i32 0)
  ret i32 %call
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_hexdump_n(i8* %buf, i32 %len, i8* %dst, i32 %dst_len, i32 %offset) #0 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i32, align 4
  %offset.addr = alloca i32, align 4
  %p = alloca i8*, align 8
  %ascii = alloca [17 x i8], align 16
  %i = alloca i32, align 4
  %idx = alloca i32, align 4
  %n = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i8* %dst, i8** %dst.addr, align 8
  store i32 %dst_len, i32* %dst_len.addr, align 4
  store i32 %offset, i32* %offset.addr, align 4
  %0 = load i8*, i8** %buf.addr, align 8
  store i8* %0, i8** %p, align 8
  %1 = bitcast [17 x i8]* %ascii to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 17, i32 16, i1 false)
  store i32 0, i32* %n, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4
  %rem = srem i32 %4, 16
  store i32 %rem, i32* %idx, align 4
  %5 = load i32, i32* %idx, align 4
  %cmp1 = icmp eq i32 %5, 0
  br i1 %cmp1, label %if.then, label %if.end24

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %cmp2 = icmp sgt i32 %6, 0
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %7 = load i8*, i8** %dst.addr, align 8
  %8 = load i32, i32* %n, align 4
  %idx.ext = sext i32 %8 to i64
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.ext
  %9 = load i32, i32* %dst_len.addr, align 4
  %10 = load i32, i32* %n, align 4
  %sub = sub nsw i32 %9, %10
  %cmp4 = icmp sgt i32 %sub, 0
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  %11 = load i32, i32* %dst_len.addr, align 4
  %12 = load i32, i32* %n, align 4
  %sub5 = sub nsw i32 %11, %12
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub5, %cond.true ], [ 0, %cond.false ]
  %conv = sext i32 %cond to i64
  %13 = load i8*, i8** %dst.addr, align 8
  %14 = load i32, i32* %n, align 4
  %idx.ext6 = sext i32 %14 to i64
  %add.ptr7 = getelementptr inbounds i8, i8* %13, i64 %idx.ext6
  %15 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr7, i1 false)
  %arraydecay = getelementptr inbounds [17 x i8], [17 x i8]* %ascii, i32 0, i32 0
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr, i64 %conv, i32 0, i64 %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.399, i32 0, i32 0), i8* %arraydecay)
  %16 = load i32, i32* %n, align 4
  %add = add nsw i32 %16, %call
  store i32 %add, i32* %n, align 4
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %17 = load i8*, i8** %dst.addr, align 8
  %18 = load i32, i32* %n, align 4
  %idx.ext8 = sext i32 %18 to i64
  %add.ptr9 = getelementptr inbounds i8, i8* %17, i64 %idx.ext8
  %19 = load i32, i32* %dst_len.addr, align 4
  %20 = load i32, i32* %n, align 4
  %sub10 = sub nsw i32 %19, %20
  %cmp11 = icmp sgt i32 %sub10, 0
  br i1 %cmp11, label %cond.true13, label %cond.false15

cond.true13:                                      ; preds = %if.end
  %21 = load i32, i32* %dst_len.addr, align 4
  %22 = load i32, i32* %n, align 4
  %sub14 = sub nsw i32 %21, %22
  br label %cond.end16

cond.false15:                                     ; preds = %if.end
  br label %cond.end16

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi i32 [ %sub14, %cond.true13 ], [ 0, %cond.false15 ]
  %conv18 = sext i32 %cond17 to i64
  %23 = load i8*, i8** %dst.addr, align 8
  %24 = load i32, i32* %n, align 4
  %idx.ext19 = sext i32 %24 to i64
  %add.ptr20 = getelementptr inbounds i8, i8* %23, i64 %idx.ext19
  %25 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr20, i1 false)
  %26 = load i32, i32* %i, align 4
  %27 = load i32, i32* %offset.addr, align 4
  %add21 = add nsw i32 %26, %27
  %call22 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr9, i64 %conv18, i32 0, i64 %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.400, i32 0, i32 0), i32 %add21)
  %28 = load i32, i32* %n, align 4
  %add23 = add nsw i32 %28, %call22
  store i32 %add23, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %cond.end16, %for.body
  %29 = load i32, i32* %dst_len.addr, align 4
  %30 = load i32, i32* %n, align 4
  %sub25 = sub nsw i32 %29, %30
  %cmp26 = icmp slt i32 %sub25, 0
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end24
  %31 = load i32, i32* %n, align 4
  store i32 %31, i32* %retval, align 4
  br label %return

if.end29:                                         ; preds = %if.end24
  %32 = load i8*, i8** %dst.addr, align 8
  %33 = load i32, i32* %n, align 4
  %idx.ext30 = sext i32 %33 to i64
  %add.ptr31 = getelementptr inbounds i8, i8* %32, i64 %idx.ext30
  %34 = load i32, i32* %dst_len.addr, align 4
  %35 = load i32, i32* %n, align 4
  %sub32 = sub nsw i32 %34, %35
  %cmp33 = icmp sgt i32 %sub32, 0
  br i1 %cmp33, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %if.end29
  %36 = load i32, i32* %dst_len.addr, align 4
  %37 = load i32, i32* %n, align 4
  %sub36 = sub nsw i32 %36, %37
  br label %cond.end38

cond.false37:                                     ; preds = %if.end29
  br label %cond.end38

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi i32 [ %sub36, %cond.true35 ], [ 0, %cond.false37 ]
  %conv40 = sext i32 %cond39 to i64
  %38 = load i8*, i8** %dst.addr, align 8
  %39 = load i32, i32* %n, align 4
  %idx.ext41 = sext i32 %39 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %38, i64 %idx.ext41
  %40 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr42, i1 false)
  %41 = load i8*, i8** %p, align 8
  %42 = load i32, i32* %i, align 4
  %idxprom = sext i32 %42 to i64
  %arrayidx = getelementptr inbounds i8, i8* %41, i64 %idxprom
  %43 = load i8, i8* %arrayidx, align 1
  %conv43 = zext i8 %43 to i32
  %call44 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr31, i64 %conv40, i32 0, i64 %40, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.401, i32 0, i32 0), i32 %conv43)
  %44 = load i32, i32* %n, align 4
  %add45 = add nsw i32 %44, %call44
  store i32 %add45, i32* %n, align 4
  %45 = load i8*, i8** %p, align 8
  %46 = load i32, i32* %i, align 4
  %idxprom46 = sext i32 %46 to i64
  %arrayidx47 = getelementptr inbounds i8, i8* %45, i64 %idxprom46
  %47 = load i8, i8* %arrayidx47, align 1
  %conv48 = zext i8 %47 to i32
  %cmp49 = icmp slt i32 %conv48, 32
  br i1 %cmp49, label %cond.true56, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end38
  %48 = load i8*, i8** %p, align 8
  %49 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %49 to i64
  %arrayidx52 = getelementptr inbounds i8, i8* %48, i64 %idxprom51
  %50 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %50 to i32
  %cmp54 = icmp sgt i32 %conv53, 126
  br i1 %cmp54, label %cond.true56, label %cond.false57

cond.true56:                                      ; preds = %lor.lhs.false, %cond.end38
  br label %cond.end61

cond.false57:                                     ; preds = %lor.lhs.false
  %51 = load i8*, i8** %p, align 8
  %52 = load i32, i32* %i, align 4
  %idxprom58 = sext i32 %52 to i64
  %arrayidx59 = getelementptr inbounds i8, i8* %51, i64 %idxprom58
  %53 = load i8, i8* %arrayidx59, align 1
  %conv60 = zext i8 %53 to i32
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false57, %cond.true56
  %cond62 = phi i32 [ 46, %cond.true56 ], [ %conv60, %cond.false57 ]
  %conv63 = trunc i32 %cond62 to i8
  %54 = load i32, i32* %idx, align 4
  %idxprom64 = sext i32 %54 to i64
  %arrayidx65 = getelementptr inbounds [17 x i8], [17 x i8]* %ascii, i64 0, i64 %idxprom64
  store i8 %conv63, i8* %arrayidx65, align 1
  %55 = load i32, i32* %idx, align 4
  %add66 = add nsw i32 %55, 1
  %idxprom67 = sext i32 %add66 to i64
  %arrayidx68 = getelementptr inbounds [17 x i8], [17 x i8]* %ascii, i64 0, i64 %idxprom67
  store i8 0, i8* %arrayidx68, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end61
  %56 = load i32, i32* %i, align 4
  %inc = add nsw i32 %56, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %cond.end79, %for.end
  %57 = load i32, i32* %i, align 4
  %inc69 = add nsw i32 %57, 1
  store i32 %inc69, i32* %i, align 4
  %rem70 = srem i32 %57, 16
  %tobool = icmp ne i32 %rem70, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %58 = load i8*, i8** %dst.addr, align 8
  %59 = load i32, i32* %n, align 4
  %idx.ext71 = sext i32 %59 to i64
  %add.ptr72 = getelementptr inbounds i8, i8* %58, i64 %idx.ext71
  %60 = load i32, i32* %dst_len.addr, align 4
  %61 = load i32, i32* %n, align 4
  %sub73 = sub nsw i32 %60, %61
  %cmp74 = icmp sgt i32 %sub73, 0
  br i1 %cmp74, label %cond.true76, label %cond.false78

cond.true76:                                      ; preds = %while.body
  %62 = load i32, i32* %dst_len.addr, align 4
  %63 = load i32, i32* %n, align 4
  %sub77 = sub nsw i32 %62, %63
  br label %cond.end79

cond.false78:                                     ; preds = %while.body
  br label %cond.end79

cond.end79:                                       ; preds = %cond.false78, %cond.true76
  %cond80 = phi i32 [ %sub77, %cond.true76 ], [ 0, %cond.false78 ]
  %conv81 = sext i32 %cond80 to i64
  %64 = load i8*, i8** %dst.addr, align 8
  %65 = load i32, i32* %n, align 4
  %idx.ext82 = sext i32 %65 to i64
  %add.ptr83 = getelementptr inbounds i8, i8* %64, i64 %idx.ext82
  %66 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr83, i1 false)
  %call84 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr72, i64 %conv81, i32 0, i64 %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.402, i32 0, i32 0))
  %67 = load i32, i32* %n, align 4
  %add85 = add nsw i32 %67, %call84
  store i32 %add85, i32* %n, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %68 = load i8*, i8** %dst.addr, align 8
  %69 = load i32, i32* %n, align 4
  %idx.ext86 = sext i32 %69 to i64
  %add.ptr87 = getelementptr inbounds i8, i8* %68, i64 %idx.ext86
  %70 = load i32, i32* %dst_len.addr, align 4
  %71 = load i32, i32* %n, align 4
  %sub88 = sub nsw i32 %70, %71
  %cmp89 = icmp sgt i32 %sub88, 0
  br i1 %cmp89, label %cond.true91, label %cond.false93

cond.true91:                                      ; preds = %while.end
  %72 = load i32, i32* %dst_len.addr, align 4
  %73 = load i32, i32* %n, align 4
  %sub92 = sub nsw i32 %72, %73
  br label %cond.end94

cond.false93:                                     ; preds = %while.end
  br label %cond.end94

cond.end94:                                       ; preds = %cond.false93, %cond.true91
  %cond95 = phi i32 [ %sub92, %cond.true91 ], [ 0, %cond.false93 ]
  %conv96 = sext i32 %cond95 to i64
  %74 = load i8*, i8** %dst.addr, align 8
  %75 = load i32, i32* %n, align 4
  %idx.ext97 = sext i32 %75 to i64
  %add.ptr98 = getelementptr inbounds i8, i8* %74, i64 %idx.ext97
  %76 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr98, i1 false)
  %arraydecay99 = getelementptr inbounds [17 x i8], [17 x i8]* %ascii, i32 0, i32 0
  %call100 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr87, i64 %conv96, i32 0, i64 %76, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.399, i32 0, i32 0), i8* %arraydecay99)
  %77 = load i32, i32* %n, align 4
  %add101 = add nsw i32 %77, %call100
  store i32 %add101, i32* %n, align 4
  %78 = load i32, i32* %n, align 4
  store i32 %78, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end94, %if.then28
  %79 = load i32, i32* %retval, align 4
  ret i32 %79
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_hexdumpf(%struct.__sFILE* %fp, i8* %buf, i32 %len) #0 {
entry:
  %fp.addr = alloca %struct.__sFILE*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %tmp = alloca [80 x i8], align 16
  %offset = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store i32 0, i32* %offset, align 4
  br label %while.cond

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load i32, i32* %len.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %len.addr, align 4
  %cmp3 = icmp slt i32 %1, 16
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %2 = load i32, i32* %len.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 16, %cond.false ]
  store i32 %cond, i32* %n, align 4
  %3 = load i8*, i8** %buf.addr, align 8
  %4 = load i32, i32* %offset, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext
  %5 = load i32, i32* %n, align 4
  %arraydecay = getelementptr inbounds [80 x i8], [80 x i8]* %tmp, i32 0, i32 0
  %6 = load i32, i32* %offset, align 4
  %call = call i32 @mg_hexdump_n(i8* %add.ptr, i32 %5, i8* %arraydecay, i32 80, i32 %6)
  %arraydecay4 = getelementptr inbounds [80 x i8], [80 x i8]* %tmp, i32 0, i32 0
  %7 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8
  %call5 = call i32 @"\01_fputs"(i8* %arraydecay4, %struct.__sFILE* %7)
  %8 = load i32, i32* %n, align 4
  %9 = load i32, i32* %offset, align 4
  %add = add nsw i32 %9, %8
  store i32 %add, i32* %offset, align 4
  %10 = load i32, i32* %n, align 4
  %11 = load i32, i32* %len.addr, align 4
  %sub = sub nsw i32 %11, %10
  store i32 %sub, i32* %len.addr, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare i32 @"\01_fputs"(i8*, %struct.__sFILE*) #3

declare i32 @strcmp(i8*, i8*) #3

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_is_big_endian() #0 {
entry:
  %0 = load i8, i8* bitcast (i32* @mg_is_big_endian.n to i8*), align 4
  %conv = sext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  %conv1 = zext i1 %cmp to i32
  ret i32 %conv1
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mbuf_append_base64_putc(i8 signext %ch, i8* %user_data) #0 {
entry:
  %ch.addr = alloca i8, align 1
  %user_data.addr = alloca i8*, align 8
  %mbuf = alloca %struct.mbuf*, align 8
  store i8 %ch, i8* %ch.addr, align 1
  store i8* %user_data, i8** %user_data.addr, align 8
  %0 = load i8*, i8** %user_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.mbuf*
  store %struct.mbuf* %1, %struct.mbuf** %mbuf, align 8
  %2 = load %struct.mbuf*, %struct.mbuf** %mbuf, align 8
  %call = call i64 @mbuf_append(%struct.mbuf* %2, i8* %ch.addr, i64 1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mbuf_append_base64(%struct.mbuf* %mbuf, i8* %data, i64 %len) #0 {
entry:
  %mbuf.addr = alloca %struct.mbuf*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ctx = alloca %struct.cs_base64_ctx, align 8
  store %struct.mbuf* %mbuf, %struct.mbuf** %mbuf.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %mbuf.addr, align 8
  %1 = bitcast %struct.mbuf* %0 to i8*
  call void @cs_base64_init(%struct.cs_base64_ctx* %ctx, void (i8, i8*)* @mg_mbuf_append_base64_putc, i8* %1)
  %2 = load i8*, i8** %data.addr, align 8
  %3 = load i64, i64* %len.addr, align 8
  call void @cs_base64_update(%struct.cs_base64_ctx* %ctx, i8* %2, i64 %3)
  call void @cs_base64_finish(%struct.cs_base64_ctx* %ctx)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define { i8*, i64 } @mg_url_encode_opt(i8* %src.coerce0, i64 %src.coerce1, i8* %safe.coerce0, i64 %safe.coerce1, i32 %flags) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %src = alloca %struct.mg_str, align 8
  %safe = alloca %struct.mg_str, align 8
  %flags.addr = alloca i32, align 4
  %hex = alloca i8*, align 8
  %i = alloca i64, align 8
  %mb = alloca %struct.mbuf, align 8
  %c = alloca i8, align 1
  %0 = bitcast %struct.mg_str* %src to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %src.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %safe to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %safe.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %safe.coerce1, i64* %5, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %6 = load i32, i32* %flags.addr, align 4
  %and = and i32 %6, 2
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0)
  store i8* %cond, i8** %hex, align 8
  store i64 0, i64* %i, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %src, i32 0, i32 1
  %7 = load i64, i64* %len, align 8
  call void @mbuf_init(%struct.mbuf* %mb, i64 %7)
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i64, i64* %i, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %src, i32 0, i32 1
  %9 = load i64, i64* %len1, align 8
  %cmp = icmp ult i64 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %src, i32 0, i32 0
  %10 = load i8*, i8** %p, align 8
  %11 = load i64, i64* %i, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %11
  %12 = load i8, i8* %add.ptr, align 1
  store i8 %12, i8* %c, align 1
  %13 = load i8, i8* %c, align 1
  %conv = zext i8 %13 to i32
  %call = call i32 @isalnum(i32 %conv) #15
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %14 = load i8, i8* %c, align 1
  %conv3 = zext i8 %14 to i32
  %15 = bitcast %struct.mg_str* %safe to { i8*, i64 }*
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %call4 = call i8* @mg_strchr(i8* %17, i64 %19, i32 %conv3)
  %cmp5 = icmp ne i8* %call4, null
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %call7 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* %c, i64 1)
  br label %if.end24

if.else:                                          ; preds = %lor.lhs.false
  %20 = load i8, i8* %c, align 1
  %conv8 = zext i8 %20 to i32
  %cmp9 = icmp eq i32 %conv8, 32
  br i1 %cmp9, label %land.lhs.true, label %if.else15

land.lhs.true:                                    ; preds = %if.else
  %21 = load i32, i32* %flags.addr, align 4
  %and11 = and i32 %21, 1
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %land.lhs.true
  %call14 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.156, i32 0, i32 0), i64 1)
  br label %if.end

if.else15:                                        ; preds = %land.lhs.true, %if.else
  %call16 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.157, i32 0, i32 0), i64 1)
  %22 = load i8*, i8** %hex, align 8
  %23 = load i8, i8* %c, align 1
  %conv17 = zext i8 %23 to i32
  %shr = ashr i32 %conv17, 4
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr inbounds i8, i8* %22, i64 %idxprom
  %call18 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* %arrayidx, i64 1)
  %24 = load i8*, i8** %hex, align 8
  %25 = load i8, i8* %c, align 1
  %conv19 = zext i8 %25 to i32
  %and20 = and i32 %conv19, 15
  %idxprom21 = sext i32 %and20 to i64
  %arrayidx22 = getelementptr inbounds i8, i8* %24, i64 %idxprom21
  %call23 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* %arrayidx22, i64 1)
  br label %if.end

if.end:                                           ; preds = %if.else15, %if.then13
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end24
  %26 = load i64, i64* %i, align 8
  %inc = add i64 %26, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call25 = call i64 @mbuf_append(%struct.mbuf* %mb, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i64 1)
  call void @mbuf_trim(%struct.mbuf* %mb)
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %mb, i32 0, i32 0
  %27 = load i8*, i8** %buf, align 8
  %len26 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %mb, i32 0, i32 1
  %28 = load i64, i64* %len26, align 8
  %sub = sub i64 %28, 1
  %call27 = call { i8*, i64 } @mg_mk_str_n(i8* %27, i64 %sub)
  %29 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  %31 = extractvalue { i8*, i64 } %call27, 0
  store i8* %31, i8** %30, align 8
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  %33 = extractvalue { i8*, i64 } %call27, 1
  store i64 %33, i64* %32, align 8
  %34 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %35 = load { i8*, i64 }, { i8*, i64 }* %34, align 8
  ret { i8*, i64 } %35
}

; Function Attrs: nounwind readonly
declare i32 @isalnum(i32) #8

; Function Attrs: noinline nounwind ssp uwtable
define { i8*, i64 } @mg_url_encode(i8* %src.coerce0, i64 %src.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %src = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %src to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %src.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %src.coerce1, i64* %2, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.158, i32 0, i32 0))
  %3 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = extractvalue { i8*, i64 } %call, 0
  store i8* %5, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = extractvalue { i8*, i64 } %call, 1
  store i64 %7, i64* %6, align 8
  %8 = bitcast %struct.mg_str* %src to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %14 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %call1 = call { i8*, i64 } @mg_url_encode_opt(i8* %10, i64 %12, i8* %15, i64 %17, i32 0)
  %18 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = extractvalue { i8*, i64 } %call1, 0
  store i8* %20, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = extractvalue { i8*, i64 } %call1, 1
  store i64 %22, i64* %21, align 8
  %23 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %24 = load { i8*, i64 }, { i8*, i64 }* %23, align 8
  ret { i8*, i64 } %24
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_mqtt_match_topic_expression(i8* %exp.coerce0, i64 %exp.coerce1, i8* %topic.coerce0, i64 %topic.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %exp = alloca %struct.mg_str, align 8
  %topic = alloca %struct.mg_str, align 8
  %ec = alloca %struct.mg_str, align 8
  %tc = alloca %struct.mg_str, align 8
  %coerce = alloca %struct.mg_str, align 8
  %coerce2 = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %exp to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %exp.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %exp.coerce1, i64* %2, align 8
  %3 = bitcast %struct.mg_str* %topic to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  store i8* %topic.coerce0, i8** %4, align 8
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  store i64 %topic.coerce1, i64* %5, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %exp, i32 0, i32 1
  %6 = load i64, i64* %len, align 8
  %cmp = icmp eq i64 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %if.end, %if.end13, %if.end23, %if.end35
  %call = call { i8*, i64 } @mg_mqtt_next_topic_component(%struct.mg_str* %exp)
  %7 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  %9 = extractvalue { i8*, i64 } %call, 0
  store i8* %9, i8** %8, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  %11 = extractvalue { i8*, i64 } %call, 1
  store i64 %11, i64* %10, align 8
  %12 = bitcast %struct.mg_str* %ec to i8*
  %13 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  %call1 = call { i8*, i64 } @mg_mqtt_next_topic_component(%struct.mg_str* %topic)
  %14 = bitcast %struct.mg_str* %coerce2 to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = extractvalue { i8*, i64 } %call1, 0
  store i8* %16, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = extractvalue { i8*, i64 } %call1, 1
  store i64 %18, i64* %17, align 8
  %19 = bitcast %struct.mg_str* %tc to i8*
  %20 = bitcast %struct.mg_str* %coerce2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 16, i32 8, i1 false)
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ec, i32 0, i32 1
  %21 = load i64, i64* %len3, align 8
  %cmp4 = icmp eq i64 %21, 0
  br i1 %cmp4, label %if.then5, label %if.end14

if.then5:                                         ; preds = %while.body
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %tc, i32 0, i32 1
  %22 = load i64, i64* %len6, align 8
  %cmp7 = icmp ne i64 %22, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.then5
  store i32 0, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.then5
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %exp, i32 0, i32 1
  %23 = load i64, i64* %len10, align 8
  %cmp11 = icmp eq i64 %23, 0
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  br label %while.end

if.end13:                                         ; preds = %if.end9
  br label %while.body

if.end14:                                         ; preds = %while.body
  %call15 = call i32 @mg_vcmp(%struct.mg_str* %ec, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.156, i32 0, i32 0))
  %cmp16 = icmp eq i32 %call15, 0
  br i1 %cmp16, label %if.then17, label %if.end24

if.then17:                                        ; preds = %if.end14
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %tc, i32 0, i32 1
  %24 = load i64, i64* %len18, align 8
  %cmp19 = icmp eq i64 %24, 0
  br i1 %cmp19, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.then17
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %topic, i32 0, i32 1
  %25 = load i64, i64* %len20, align 8
  %cmp21 = icmp eq i64 %25, 0
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %land.lhs.true, %if.then17
  br label %while.body

if.end24:                                         ; preds = %if.end14
  %call25 = call i32 @mg_vcmp(%struct.mg_str* %ec, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i32 0, i32 0))
  %cmp26 = icmp eq i32 %call25, 0
  br i1 %cmp26, label %if.then27, label %if.end30

if.then27:                                        ; preds = %if.end24
  %len28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %exp, i32 0, i32 1
  %26 = load i64, i64* %len28, align 8
  %cmp29 = icmp eq i64 %26, 0
  %conv = zext i1 %cmp29 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end30:                                         ; preds = %if.end24
  %27 = bitcast %struct.mg_str* %ec to { i8*, i64 }*
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %27, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %27, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = bitcast %struct.mg_str* %tc to { i8*, i64 }*
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %32, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %32, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %call31 = call i32 @mg_strcmp(i8* %29, i64 %31, i8* %34, i64 %36)
  %cmp32 = icmp ne i32 %call31, 0
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.end30
  store i32 0, i32* %retval, align 4
  br label %return

if.end35:                                         ; preds = %if.end30
  br label %while.body

while.end:                                        ; preds = %if.then12
  %len36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %tc, i32 0, i32 1
  %37 = load i64, i64* %len36, align 8
  %cmp37 = icmp eq i64 %37, 0
  br i1 %cmp37, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.end
  %len39 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %topic, i32 0, i32 1
  %38 = load i64, i64* %len39, align 8
  %cmp40 = icmp eq i64 %38, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.end
  %39 = phi i1 [ false, %while.end ], [ %cmp40, %land.rhs ]
  %land.ext = zext i1 %39 to i32
  store i32 %land.ext, i32* %retval, align 4
  br label %return

return:                                           ; preds = %land.end, %if.then34, %if.then27, %if.then22, %if.then8, %if.then
  %40 = load i32, i32* %retval, align 4
  ret i32 %40
}

; Function Attrs: noinline nounwind ssp uwtable
define internal { i8*, i64 } @mg_mqtt_next_topic_component(%struct.mg_str* %topic) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %topic.addr = alloca %struct.mg_str*, align 8
  %res = alloca %struct.mg_str, align 8
  %c = alloca i8*, align 8
  store %struct.mg_str* %topic, %struct.mg_str** %topic.addr, align 8
  %0 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %1 = bitcast %struct.mg_str* %res to i8*
  %2 = bitcast %struct.mg_str* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %2, i64 16, i32 8, i1 false)
  %3 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %4 = bitcast %struct.mg_str* %3 to { i8*, i64 }*
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %call = call i8* @mg_strchr(i8* %6, i64 %8, i32 47)
  store i8* %call, i8** %c, align 8
  %9 = load i8*, i8** %c, align 8
  %cmp = icmp ne i8* %9, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load i8*, i8** %c, align 8
  %11 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %11, i32 0, i32 0
  %12 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %res, i32 0, i32 1
  store i64 %sub.ptr.sub, i64* %len, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %res, i32 0, i32 1
  %13 = load i64, i64* %len1, align 8
  %add = add i64 %13, 1
  %14 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 1
  %15 = load i64, i64* %len2, align 8
  %sub = sub i64 %15, %add
  store i64 %sub, i64* %len2, align 8
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %res, i32 0, i32 1
  %16 = load i64, i64* %len3, align 8
  %add4 = add i64 %16, 1
  %17 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %p5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %17, i32 0, i32 0
  %18 = load i8*, i8** %p5, align 8
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %add4
  store i8* %add.ptr, i8** %p5, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %19 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %len6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %19, i32 0, i32 1
  store i64 0, i64* %len6, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = bitcast %struct.mg_str* %retval to i8*
  %21 = bitcast %struct.mg_str* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false)
  %22 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %23 = load { i8*, i64 }, { i8*, i64 }* %22, align 8
  ret { i8*, i64 } %23
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_mqtt_vmatch_topic_expression(i8* %exp, i8* %topic.coerce0, i64 %topic.coerce1) #0 {
entry:
  %topic = alloca %struct.mg_str, align 8
  %exp.addr = alloca i8*, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %topic to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %topic.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %topic.coerce1, i64* %2, align 8
  store i8* %exp, i8** %exp.addr, align 8
  %3 = load i8*, i8** %exp.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str(i8* %3)
  %4 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %5 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %6 = extractvalue { i8*, i64 } %call, 0
  store i8* %6, i8** %5, align 8
  %7 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  %8 = extractvalue { i8*, i64 } %call, 1
  store i64 %8, i64* %7, align 8
  %9 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %9, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.mg_str* %topic to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %call1 = call i32 @mg_mqtt_match_topic_expression(i8* %11, i64 %13, i8* %16, i64 %18)
  ret i32 %call1
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_set_protocol_mqtt(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @mqtt_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8
  %call = call i8* @calloc(i64 1, i64 16) #16
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 13
  store i8* %call, i8** %proto_data, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_data_destructor = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 14
  store void (i8*)* @mg_mqtt_proto_data_destructor, void (i8*)** %proto_data_destructor, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mqtt_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %io = alloca %struct.mbuf*, align 8
  %mm = alloca %struct.mg_mqtt_message, align 8
  %len = alloca i32, align 4
  %pd = alloca %struct.mg_mqtt_proto_data*, align 8
  %now = alloca double, align 8
  %diff = alloca double, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %ev_data, i8** %ev_data.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io, align 8
  %1 = bitcast %struct.mg_mqtt_message* %mm to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 152, i32 8, i1 false)
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 15
  %3 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %5 = load i32, i32* %ev.addr, align 4
  %6 = load i8*, i8** %ev_data.addr, align 8
  call void %3(%struct.mg_connection* %4, i32 %5, i8* %6)
  %7 = load i32, i32* %ev.addr, align 4
  switch i32 %7, label %sw.epilog [
    i32 1, label %sw.bb
    i32 3, label %sw.bb1
    i32 0, label %sw.bb47
  ]

sw.bb:                                            ; preds = %entry
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 13
  %9 = load i8*, i8** %proto_data, align 8
  %cmp = icmp eq i8* %9, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_set_protocol_mqtt(%struct.mg_connection* %10)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %sw.bb1, %if.end44
  %11 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %call = call i32 @parse_mqtt(%struct.mbuf* %11, %struct.mg_mqtt_message* %mm)
  store i32 %call, i32* %len, align 4
  %12 = load i32, i32* %len, align 4
  %cmp2 = icmp slt i32 %12, 0
  br i1 %cmp2, label %if.then3, label %if.end34

if.then3:                                         ; preds = %while.body
  %13 = load i32, i32* %len, align 4
  %cmp4 = icmp eq i32 %13, -2
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then3
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 21
  %15 = load i64, i64* %flags, align 8
  %or = or i64 %15, 2048
  store i64 %or, i64* %flags, align 8
  br label %if.end33

if.else:                                          ; preds = %if.then3
  %16 = load i32, i32* %len, align 4
  %cmp6 = icmp eq i32 %16, -1
  br i1 %cmp6, label %if.then7, label %if.else23

if.then7:                                         ; preds = %if.else
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 7
  %18 = load i64, i64* %recv_mbuf_limit, align 8
  %cmp8 = icmp ugt i64 %18, 0
  br i1 %cmp8, label %land.lhs.true, label %if.end22

land.lhs.true:                                    ; preds = %if.then7
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf9 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 8
  %len10 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf9, i32 0, i32 1
  %20 = load i64, i64* %len10, align 8
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf_limit11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 7
  %22 = load i64, i64* %recv_mbuf_limit11, align 8
  %cmp12 = icmp uge i64 %20, %22
  br i1 %cmp12, label %if.then13, label %if.end22

if.then13:                                        ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then13
  %call14 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10846)
  %tobool = icmp ne i32 %call14, 0
  br i1 %tobool, label %if.then15, label %if.end19

if.then15:                                        ; preds = %do.body
  %23 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf16 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 8
  %len17 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf16, i32 0, i32 1
  %25 = load i64, i64* %len17, align 8
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf_limit18 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %26, i32 0, i32 7
  %27 = load i64, i64* %recv_mbuf_limit18, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.49, i32 0, i32 0), %struct.mg_connection* %23, i64 %25, i64 %27)
  br label %if.end19

if.end19:                                         ; preds = %if.then15, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end19
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 21
  %29 = load i64, i64* %flags20, align 8
  %or21 = or i64 %29, 2048
  store i64 %or21, i64* %flags20, align 8
  br label %if.end22

if.end22:                                         ; preds = %do.end, %land.lhs.true, %if.then7
  br label %if.end32

if.else23:                                        ; preds = %if.else
  br label %do.body24

do.body24:                                        ; preds = %if.else23
  %call25 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10851)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %do.body24
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %31 = load i32, i32* %len, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.403, i32 0, i32 0), %struct.mg_connection* %30, i32 %31)
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %do.body24
  br label %do.end29

do.end29:                                         ; preds = %if.end28
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags30 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %32, i32 0, i32 21
  %33 = load i64, i64* %flags30, align 8
  %or31 = or i64 %33, 2048
  store i64 %or31, i64* %flags30, align 8
  br label %if.end32

if.end32:                                         ; preds = %do.end29, %if.end22
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then5
  br label %while.end

if.end34:                                         ; preds = %while.body
  %cmd = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %mm, i32 0, i32 0
  %34 = load i32, i32* %cmd, align 8
  %cmp35 = icmp eq i32 %34, 13
  br i1 %cmp35, label %if.then36, label %if.end44

if.then36:                                        ; preds = %if.end34
  br label %do.body37

do.body37:                                        ; preds = %if.then36
  %call38 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10857)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then40, label %if.end41

if.then40:                                        ; preds = %do.body37
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.404, i32 0, i32 0))
  br label %if.end41

if.end41:                                         ; preds = %if.then40, %do.body37
  br label %do.end42

do.end42:                                         ; preds = %if.end41
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags43 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %35, i32 0, i32 21
  %36 = load i64, i64* %flags43, align 8
  %and = and i64 %36, -4097
  store i64 %and, i64* %flags43, align 8
  br label %if.end44

if.end44:                                         ; preds = %do.end42, %if.end34
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler45 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %37, i32 0, i32 15
  %38 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler45, align 8
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %cmd46 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %mm, i32 0, i32 0
  %40 = load i32, i32* %cmd46, align 8
  %add = add nsw i32 200, %40
  %41 = bitcast %struct.mg_mqtt_message* %mm to i8*
  call void %38(%struct.mg_connection* %39, i32 %add, i8* %41)
  %42 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %43 = load i32, i32* %len, align 4
  %conv = sext i32 %43 to i64
  call void @mbuf_remove(%struct.mbuf* %42, i64 %conv)
  br label %while.body

while.end:                                        ; preds = %if.end33
  br label %sw.epilog

sw.bb47:                                          ; preds = %entry
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_data48 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %44, i32 0, i32 13
  %45 = load i8*, i8** %proto_data48, align 8
  %46 = bitcast i8* %45 to %struct.mg_mqtt_proto_data*
  store %struct.mg_mqtt_proto_data* %46, %struct.mg_mqtt_proto_data** %pd, align 8
  %call49 = call double @mg_time()
  store double %call49, double* %now, align 8
  %47 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %keep_alive = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %47, i32 0, i32 0
  %48 = load i16, i16* %keep_alive, align 8
  %conv50 = zext i16 %48 to i32
  %cmp51 = icmp sgt i32 %conv50, 0
  br i1 %cmp51, label %land.lhs.true53, label %if.end97

land.lhs.true53:                                  ; preds = %sw.bb47
  %49 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %last_control_time = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %49, i32 0, i32 1
  %50 = load double, double* %last_control_time, align 8
  %cmp54 = fcmp ogt double %50, 0.000000e+00
  br i1 %cmp54, label %if.then56, label %if.end97

if.then56:                                        ; preds = %land.lhs.true53
  %51 = load double, double* %now, align 8
  %52 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %last_control_time57 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %52, i32 0, i32 1
  %53 = load double, double* %last_control_time57, align 8
  %sub = fsub double %51, %53
  store double %sub, double* %diff, align 8
  %54 = load double, double* %diff, align 8
  %55 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %keep_alive58 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %55, i32 0, i32 0
  %56 = load i16, i16* %keep_alive58, align 8
  %conv59 = zext i16 %56 to i32
  %conv60 = sitofp i32 %conv59 to double
  %cmp61 = fcmp ogt double %54, %conv60
  br i1 %cmp61, label %if.then63, label %if.end96

if.then63:                                        ; preds = %if.then56
  %57 = load double, double* %diff, align 8
  %cmp64 = fcmp olt double %57, 1.500000e+09
  br i1 %cmp64, label %if.then66, label %if.else89

if.then66:                                        ; preds = %if.then63
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags67 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %58, i32 0, i32 21
  %59 = load i64, i64* %flags67, align 8
  %and68 = and i64 %59, 4096
  %tobool69 = icmp ne i64 %and68, 0
  br i1 %tobool69, label %if.else79, label %if.then70

if.then70:                                        ; preds = %if.then66
  br label %do.body71

do.body71:                                        ; preds = %if.then70
  %call72 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10875)
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %do.body71
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.405, i32 0, i32 0))
  br label %if.end75

if.end75:                                         ; preds = %if.then74, %do.body71
  br label %do.end76

do.end76:                                         ; preds = %if.end75
  %60 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags77 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %60, i32 0, i32 21
  %61 = load i64, i64* %flags77, align 8
  %or78 = or i64 %61, 4096
  store i64 %or78, i64* %flags77, align 8
  %62 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_mqtt_ping(%struct.mg_connection* %62)
  br label %if.end88

if.else79:                                        ; preds = %if.then66
  br label %do.body80

do.body80:                                        ; preds = %if.else79
  %call81 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10879)
  %tobool82 = icmp ne i32 %call81, 0
  br i1 %tobool82, label %if.then83, label %if.end84

if.then83:                                        ; preds = %do.body80
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.406, i32 0, i32 0))
  br label %if.end84

if.end84:                                         ; preds = %if.then83, %do.body80
  br label %do.end85

do.end85:                                         ; preds = %if.end84
  %63 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags86 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %63, i32 0, i32 21
  %64 = load i64, i64* %flags86, align 8
  %or87 = or i64 %64, 2048
  store i64 %or87, i64* %flags86, align 8
  br label %if.end88

if.end88:                                         ; preds = %do.end85, %do.end76
  br label %if.end95

if.else89:                                        ; preds = %if.then63
  %65 = load double, double* %now, align 8
  %66 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %keep_alive90 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %66, i32 0, i32 0
  %67 = load i16, i16* %keep_alive90, align 8
  %conv91 = zext i16 %67 to i32
  %conv92 = sitofp i32 %conv91 to double
  %mul = fmul double %conv92, 6.000000e-01
  %sub93 = fsub double %65, %mul
  %68 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %last_control_time94 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %68, i32 0, i32 1
  store double %sub93, double* %last_control_time94, align 8
  br label %if.end95

if.end95:                                         ; preds = %if.else89, %if.end88
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then56
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %land.lhs.true53, %sw.bb47
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %if.end97, %while.end, %if.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_mqtt_proto_data_destructor(i8* %proto_data) #0 {
entry:
  %proto_data.addr = alloca i8*, align 8
  store i8* %proto_data, i8** %proto_data.addr, align 8
  %0 = load i8*, i8** %proto_data.addr, align 8
  call void @free(i8* %0)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_mqtt_handshake(%struct.mg_connection* %nc, i8* %client_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %client_id.addr = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %client_id, i8** %client_id.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i8*, i8** %client_id.addr, align 8
  call void @mg_send_mqtt_handshake_opt(%struct.mg_connection* %0, i8* %1, %struct.mg_send_mqtt_handshake_opts* byval align 8 @mg_send_mqtt_handshake.opts)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_mqtt_handshake_opt(%struct.mg_connection* %nc, i8* %client_id, %struct.mg_send_mqtt_handshake_opts* byval align 8 %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %client_id.addr = alloca i8*, align 8
  %pd = alloca %struct.mg_mqtt_proto_data*, align 8
  %id_len = alloca i16, align 2
  %wt_len = alloca i16, align 2
  %wm_len = alloca i16, align 2
  %user_len = alloca i16, align 2
  %pw_len = alloca i16, align 2
  %netbytes = alloca i16, align 2
  %total_len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %client_id, i8** %client_id.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 13
  %1 = load i8*, i8** %proto_data, align 8
  %2 = bitcast i8* %1 to %struct.mg_mqtt_proto_data*
  store %struct.mg_mqtt_proto_data* %2, %struct.mg_mqtt_proto_data** %pd, align 8
  store i16 0, i16* %id_len, align 2
  store i16 0, i16* %wt_len, align 2
  store i16 0, i16* %wm_len, align 2
  store i16 0, i16* %user_len, align 2
  store i16 0, i16* %pw_len, align 2
  %3 = load i8*, i8** %client_id.addr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %client_id.addr, align 8
  %call = call i64 @strlen(i8* %4)
  %conv = trunc i64 %call to i16
  store i16 %conv, i16* %id_len, align 2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i16, i16* %id_len, align 2
  %conv1 = zext i16 %5 to i32
  %add = add nsw i32 12, %conv1
  %conv2 = sext i32 %add to i64
  store i64 %conv2, i64* %total_len, align 8
  %user_name = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 4
  %6 = load i8*, i8** %user_name, align 8
  %cmp3 = icmp ne i8* %6, null
  br i1 %cmp3, label %if.then5, label %if.end8

if.then5:                                         ; preds = %if.end
  %flags = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %7 = load i8, i8* %flags, align 8
  %conv6 = zext i8 %7 to i32
  %or = or i32 %conv6, 128
  %conv7 = trunc i32 %or to i8
  store i8 %conv7, i8* %flags, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %password = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 5
  %8 = load i8*, i8** %password, align 8
  %cmp9 = icmp ne i8* %8, null
  br i1 %cmp9, label %if.then11, label %if.end16

if.then11:                                        ; preds = %if.end8
  %flags12 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %9 = load i8, i8* %flags12, align 8
  %conv13 = zext i8 %9 to i32
  %or14 = or i32 %conv13, 64
  %conv15 = trunc i32 %or14 to i8
  store i8 %conv15, i8* %flags12, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then11, %if.end8
  %will_topic = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 2
  %10 = load i8*, i8** %will_topic, align 8
  %cmp17 = icmp ne i8* %10, null
  br i1 %cmp17, label %land.lhs.true, label %if.end32

land.lhs.true:                                    ; preds = %if.end16
  %will_message = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 3
  %11 = load i8*, i8** %will_message, align 8
  %cmp19 = icmp ne i8* %11, null
  br i1 %cmp19, label %if.then21, label %if.end32

if.then21:                                        ; preds = %land.lhs.true
  %will_topic22 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 2
  %12 = load i8*, i8** %will_topic22, align 8
  %call23 = call i64 @strlen(i8* %12)
  %conv24 = trunc i64 %call23 to i16
  store i16 %conv24, i16* %wt_len, align 2
  %will_message25 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 3
  %13 = load i8*, i8** %will_message25, align 8
  %call26 = call i64 @strlen(i8* %13)
  %conv27 = trunc i64 %call26 to i16
  store i16 %conv27, i16* %wm_len, align 2
  %flags28 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %14 = load i8, i8* %flags28, align 8
  %conv29 = zext i8 %14 to i32
  %or30 = or i32 %conv29, 4
  %conv31 = trunc i32 %or30 to i8
  store i8 %conv31, i8* %flags28, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.then21, %land.lhs.true, %if.end16
  %keep_alive = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 1
  %15 = load i16, i16* %keep_alive, align 2
  %conv33 = zext i16 %15 to i32
  %cmp34 = icmp eq i32 %conv33, 0
  br i1 %cmp34, label %if.then36, label %if.end38

if.then36:                                        ; preds = %if.end32
  %keep_alive37 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 1
  store i16 60, i16* %keep_alive37, align 2
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %if.end32
  %flags39 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %16 = load i8, i8* %flags39, align 8
  %conv40 = zext i8 %16 to i32
  %and = and i32 %conv40, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then41, label %if.end49

if.then41:                                        ; preds = %if.end38
  %17 = load i16, i16* %wt_len, align 2
  %conv42 = zext i16 %17 to i32
  %add43 = add nsw i32 2, %conv42
  %add44 = add nsw i32 %add43, 2
  %18 = load i16, i16* %wm_len, align 2
  %conv45 = zext i16 %18 to i32
  %add46 = add nsw i32 %add44, %conv45
  %conv47 = sext i32 %add46 to i64
  %19 = load i64, i64* %total_len, align 8
  %add48 = add i64 %19, %conv47
  store i64 %add48, i64* %total_len, align 8
  br label %if.end49

if.end49:                                         ; preds = %if.then41, %if.end38
  %flags50 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %20 = load i8, i8* %flags50, align 8
  %conv51 = zext i8 %20 to i32
  %and52 = and i32 %conv51, 128
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %if.then54, label %if.end62

if.then54:                                        ; preds = %if.end49
  %user_name55 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 4
  %21 = load i8*, i8** %user_name55, align 8
  %call56 = call i64 @strlen(i8* %21)
  %conv57 = trunc i64 %call56 to i16
  store i16 %conv57, i16* %user_len, align 2
  %22 = load i16, i16* %user_len, align 2
  %conv58 = zext i16 %22 to i32
  %add59 = add nsw i32 2, %conv58
  %conv60 = sext i32 %add59 to i64
  %23 = load i64, i64* %total_len, align 8
  %add61 = add i64 %23, %conv60
  store i64 %add61, i64* %total_len, align 8
  br label %if.end62

if.end62:                                         ; preds = %if.then54, %if.end49
  %flags63 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %24 = load i8, i8* %flags63, align 8
  %conv64 = zext i8 %24 to i32
  %and65 = and i32 %conv64, 64
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.then67, label %if.end75

if.then67:                                        ; preds = %if.end62
  %password68 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 5
  %25 = load i8*, i8** %password68, align 8
  %call69 = call i64 @strlen(i8* %25)
  %conv70 = trunc i64 %call69 to i16
  store i16 %conv70, i16* %pw_len, align 2
  %26 = load i16, i16* %pw_len, align 2
  %conv71 = zext i16 %26 to i32
  %add72 = add nsw i32 2, %conv71
  %conv73 = sext i32 %add72 to i64
  %27 = load i64, i64* %total_len, align 8
  %add74 = add i64 %27, %conv73
  store i64 %add74, i64* %total_len, align 8
  br label %if.end75

if.end75:                                         ; preds = %if.then67, %if.end62
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %29 = load i64, i64* %total_len, align 8
  call void @mg_send_mqtt_header(%struct.mg_connection* %28, i8 zeroext 1, i8 zeroext 0, i64 %29)
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send(%struct.mg_connection* %30, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.159, i32 0, i32 0), i32 7)
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags76 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  call void @mg_send(%struct.mg_connection* %31, i8* %flags76, i32 1)
  %keep_alive77 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 1
  %32 = load i16, i16* %keep_alive77, align 2
  %call78 = call zeroext i16 @_OSSwapInt16(i16 zeroext %32)
  %conv79 = zext i16 %call78 to i32
  %conv80 = trunc i32 %conv79 to i16
  store i16 %conv80, i16* %netbytes, align 2
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %34 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %33, i8* %34, i32 2)
  %35 = load i16, i16* %id_len, align 2
  %call81 = call zeroext i16 @_OSSwapInt16(i16 zeroext %35)
  %conv82 = zext i16 %call81 to i32
  %conv83 = trunc i32 %conv82 to i16
  store i16 %conv83, i16* %netbytes, align 2
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %37 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %36, i8* %37, i32 2)
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %39 = load i8*, i8** %client_id.addr, align 8
  %40 = load i16, i16* %id_len, align 2
  %conv84 = zext i16 %40 to i32
  call void @mg_send(%struct.mg_connection* %38, i8* %39, i32 %conv84)
  %flags85 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %41 = load i8, i8* %flags85, align 8
  %conv86 = zext i8 %41 to i32
  %and87 = and i32 %conv86, 4
  %tobool88 = icmp ne i32 %and87, 0
  br i1 %tobool88, label %if.then89, label %if.end100

if.then89:                                        ; preds = %if.end75
  %42 = load i16, i16* %wt_len, align 2
  %call90 = call zeroext i16 @_OSSwapInt16(i16 zeroext %42)
  %conv91 = zext i16 %call90 to i32
  %conv92 = trunc i32 %conv91 to i16
  store i16 %conv92, i16* %netbytes, align 2
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %44 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %43, i8* %44, i32 2)
  %45 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %will_topic93 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 2
  %46 = load i8*, i8** %will_topic93, align 8
  %47 = load i16, i16* %wt_len, align 2
  %conv94 = zext i16 %47 to i32
  call void @mg_send(%struct.mg_connection* %45, i8* %46, i32 %conv94)
  %48 = load i16, i16* %wm_len, align 2
  %call95 = call zeroext i16 @_OSSwapInt16(i16 zeroext %48)
  %conv96 = zext i16 %call95 to i32
  %conv97 = trunc i32 %conv96 to i16
  store i16 %conv97, i16* %netbytes, align 2
  %49 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %50 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %49, i8* %50, i32 2)
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %will_message98 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 3
  %52 = load i8*, i8** %will_message98, align 8
  %53 = load i16, i16* %wm_len, align 2
  %conv99 = zext i16 %53 to i32
  call void @mg_send(%struct.mg_connection* %51, i8* %52, i32 %conv99)
  br label %if.end100

if.end100:                                        ; preds = %if.then89, %if.end75
  %flags101 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %54 = load i8, i8* %flags101, align 8
  %conv102 = zext i8 %54 to i32
  %and103 = and i32 %conv102, 128
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %if.then105, label %if.end111

if.then105:                                       ; preds = %if.end100
  %55 = load i16, i16* %user_len, align 2
  %call106 = call zeroext i16 @_OSSwapInt16(i16 zeroext %55)
  %conv107 = zext i16 %call106 to i32
  %conv108 = trunc i32 %conv107 to i16
  store i16 %conv108, i16* %netbytes, align 2
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %57 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %56, i8* %57, i32 2)
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_name109 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 4
  %59 = load i8*, i8** %user_name109, align 8
  %60 = load i16, i16* %user_len, align 2
  %conv110 = zext i16 %60 to i32
  call void @mg_send(%struct.mg_connection* %58, i8* %59, i32 %conv110)
  br label %if.end111

if.end111:                                        ; preds = %if.then105, %if.end100
  %flags112 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 0
  %61 = load i8, i8* %flags112, align 8
  %conv113 = zext i8 %61 to i32
  %and114 = and i32 %conv113, 64
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %if.then116, label %if.end122

if.then116:                                       ; preds = %if.end111
  %62 = load i16, i16* %pw_len, align 2
  %call117 = call zeroext i16 @_OSSwapInt16(i16 zeroext %62)
  %conv118 = zext i16 %call117 to i32
  %conv119 = trunc i32 %conv118 to i16
  store i16 %conv119, i16* %netbytes, align 2
  %63 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %64 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %63, i8* %64, i32 2)
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %password120 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 5
  %66 = load i8*, i8** %password120, align 8
  %67 = load i16, i16* %pw_len, align 2
  %conv121 = zext i16 %67 to i32
  call void @mg_send(%struct.mg_connection* %65, i8* %66, i32 %conv121)
  br label %if.end122

if.end122:                                        ; preds = %if.then116, %if.end111
  %68 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %cmp123 = icmp ne %struct.mg_mqtt_proto_data* %68, null
  br i1 %cmp123, label %if.then125, label %if.end128

if.then125:                                       ; preds = %if.end122
  %keep_alive126 = getelementptr inbounds %struct.mg_send_mqtt_handshake_opts, %struct.mg_send_mqtt_handshake_opts* %opts, i32 0, i32 1
  %69 = load i16, i16* %keep_alive126, align 2
  %70 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %keep_alive127 = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %70, i32 0, i32 0
  store i16 %69, i16* %keep_alive127, align 8
  br label %if.end128

if.end128:                                        ; preds = %if.then125, %if.end122
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_send_mqtt_header(%struct.mg_connection* %nc, i8 zeroext %cmd, i8 zeroext %flags, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %cmd.addr = alloca i8, align 1
  %flags.addr = alloca i8, align 1
  %len.addr = alloca i64, align 8
  %pd = alloca %struct.mg_mqtt_proto_data*, align 8
  %buf = alloca [9 x i8], align 1
  %vlen = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8 %cmd, i8* %cmd.addr, align 1
  store i8 %flags, i8* %flags.addr, align 1
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 13
  %1 = load i8*, i8** %proto_data, align 8
  %2 = bitcast i8* %1 to %struct.mg_mqtt_proto_data*
  store %struct.mg_mqtt_proto_data* %2, %struct.mg_mqtt_proto_data** %pd, align 8
  %arrayidx = getelementptr inbounds [9 x i8], [9 x i8]* %buf, i64 0, i64 1
  store i8* %arrayidx, i8** %vlen, align 8
  %3 = load i8, i8* %cmd.addr, align 1
  %conv = zext i8 %3 to i32
  %shl = shl i32 %conv, 4
  %4 = load i8, i8* %flags.addr, align 1
  %conv1 = zext i8 %4 to i32
  %or = or i32 %shl, %conv1
  %conv2 = trunc i32 %or to i8
  %arrayidx3 = getelementptr inbounds [9 x i8], [9 x i8]* %buf, i64 0, i64 0
  store i8 %conv2, i8* %arrayidx3, align 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %5 = load i64, i64* %len.addr, align 8
  %rem = urem i64 %5, 128
  %conv4 = trunc i64 %rem to i8
  %6 = load i8*, i8** %vlen, align 8
  store i8 %conv4, i8* %6, align 1
  %7 = load i64, i64* %len.addr, align 8
  %div = udiv i64 %7, 128
  store i64 %div, i64* %len.addr, align 8
  %8 = load i64, i64* %len.addr, align 8
  %cmp = icmp ugt i64 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %9 = load i8*, i8** %vlen, align 8
  %10 = load i8, i8* %9, align 1
  %conv6 = zext i8 %10 to i32
  %or7 = or i32 %conv6, 128
  %conv8 = trunc i32 %or7 to i8
  store i8 %conv8, i8* %9, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %11 = load i8*, i8** %vlen, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %vlen, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end
  %12 = load i64, i64* %len.addr, align 8
  %cmp9 = icmp ugt i64 %12, 0
  br i1 %cmp9, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay = getelementptr inbounds [9 x i8], [9 x i8]* %buf, i32 0, i32 0
  %14 = load i8*, i8** %vlen, align 8
  %arraydecay11 = getelementptr inbounds [9 x i8], [9 x i8]* %buf, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv12 = trunc i64 %sub.ptr.sub to i32
  call void @mg_send(%struct.mg_connection* %13, i8* %arraydecay, i32 %conv12)
  %call = call double @mg_time()
  %15 = load %struct.mg_mqtt_proto_data*, %struct.mg_mqtt_proto_data** %pd, align 8
  %last_control_time = getelementptr inbounds %struct.mg_mqtt_proto_data, %struct.mg_mqtt_proto_data* %15, i32 0, i32 1
  store double %call, double* %last_control_time, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_publish(%struct.mg_connection* %nc, i8* %topic, i16 zeroext %message_id, i32 %flags, i8* %data, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %topic.addr = alloca i8*, align 8
  %message_id.addr = alloca i16, align 2
  %flags.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %netbytes = alloca i16, align 2
  %topic_len = alloca i16, align 2
  %total_len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %topic, i8** %topic.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  store i32 %flags, i32* %flags.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i8*, i8** %topic.addr, align 8
  %call = call i64 @strlen(i8* %0)
  %conv = trunc i64 %call to i16
  store i16 %conv, i16* %topic_len, align 2
  %1 = load i16, i16* %topic_len, align 2
  %conv1 = zext i16 %1 to i32
  %add = add nsw i32 2, %conv1
  %conv2 = sext i32 %add to i64
  %2 = load i64, i64* %len.addr, align 8
  %add3 = add i64 %conv2, %2
  store i64 %add3, i64* %total_len, align 8
  %3 = load i32, i32* %flags.addr, align 4
  %and = and i32 %3, 6
  %shr = ashr i32 %and, 1
  %cmp = icmp sgt i32 %shr, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %total_len, align 8
  %add5 = add i64 %4, 2
  store i64 %add5, i64* %total_len, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %6 = load i32, i32* %flags.addr, align 4
  %conv6 = trunc i32 %6 to i8
  %7 = load i64, i64* %total_len, align 8
  call void @mg_send_mqtt_header(%struct.mg_connection* %5, i8 zeroext 3, i8 zeroext %conv6, i64 %7)
  %8 = load i16, i16* %topic_len, align 2
  %call7 = call zeroext i16 @_OSSwapInt16(i16 zeroext %8)
  %conv8 = zext i16 %call7 to i32
  %conv9 = trunc i32 %conv8 to i16
  store i16 %conv9, i16* %netbytes, align 2
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %10 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %9, i8* %10, i32 2)
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %12 = load i8*, i8** %topic.addr, align 8
  %13 = load i16, i16* %topic_len, align 2
  %conv10 = zext i16 %13 to i32
  call void @mg_send(%struct.mg_connection* %11, i8* %12, i32 %conv10)
  %14 = load i32, i32* %flags.addr, align 4
  %and11 = and i32 %14, 6
  %shr12 = ashr i32 %and11, 1
  %cmp13 = icmp sgt i32 %shr12, 0
  br i1 %cmp13, label %if.then15, label %if.end19

if.then15:                                        ; preds = %if.end
  %15 = load i16, i16* %message_id.addr, align 2
  %call16 = call zeroext i16 @_OSSwapInt16(i16 zeroext %15)
  %conv17 = zext i16 %call16 to i32
  %conv18 = trunc i32 %conv17 to i16
  store i16 %conv18, i16* %netbytes, align 2
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %17 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %16, i8* %17, i32 2)
  br label %if.end19

if.end19:                                         ; preds = %if.then15, %if.end
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %19 = load i8*, i8** %data.addr, align 8
  %20 = load i64, i64* %len.addr, align 8
  %conv20 = trunc i64 %20 to i32
  call void @mg_send(%struct.mg_connection* %18, i8* %19, i32 %conv20)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_subscribe(%struct.mg_connection* %nc, %struct.mg_mqtt_topic_expression* %topics, i64 %topics_len, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %topics.addr = alloca %struct.mg_mqtt_topic_expression*, align 8
  %topics_len.addr = alloca i64, align 8
  %message_id.addr = alloca i16, align 2
  %netbytes = alloca i16, align 2
  %i = alloca i64, align 8
  %topic_len = alloca i16, align 2
  %total_len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.mg_mqtt_topic_expression* %topics, %struct.mg_mqtt_topic_expression** %topics.addr, align 8
  store i64 %topics_len, i64* %topics_len.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  store i64 2, i64* %total_len, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %topics_len.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.mg_mqtt_topic_expression*, %struct.mg_mqtt_topic_expression** %topics.addr, align 8
  %3 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %2, i64 %3
  %topic = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %arrayidx, i32 0, i32 0
  %4 = load i8*, i8** %topic, align 8
  %call = call i64 @strlen(i8* %4)
  %add = add i64 2, %call
  %add1 = add i64 %add, 1
  %5 = load i64, i64* %total_len, align 8
  %add2 = add i64 %5, %add1
  store i64 %add2, i64* %total_len, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i64, i64* %i, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %8 = load i64, i64* %total_len, align 8
  call void @mg_send_mqtt_header(%struct.mg_connection* %7, i8 zeroext 8, i8 zeroext 2, i64 %8)
  %9 = load i16, i16* %message_id.addr, align 2
  %call3 = call zeroext i16 @_OSSwapInt16(i16 zeroext %9)
  %conv = zext i16 %call3 to i32
  %conv4 = trunc i32 %conv to i16
  store i16 %conv4, i16* %netbytes, align 2
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %11 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %10, i8* %11, i32 2)
  store i64 0, i64* %i, align 8
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc20, %for.end
  %12 = load i64, i64* %i, align 8
  %13 = load i64, i64* %topics_len.addr, align 8
  %cmp6 = icmp ult i64 %12, %13
  br i1 %cmp6, label %for.body8, label %for.end22

for.body8:                                        ; preds = %for.cond5
  %14 = load %struct.mg_mqtt_topic_expression*, %struct.mg_mqtt_topic_expression** %topics.addr, align 8
  %15 = load i64, i64* %i, align 8
  %arrayidx9 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %14, i64 %15
  %topic10 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %arrayidx9, i32 0, i32 0
  %16 = load i8*, i8** %topic10, align 8
  %call11 = call i64 @strlen(i8* %16)
  %conv12 = trunc i64 %call11 to i16
  store i16 %conv12, i16* %topic_len, align 2
  %17 = load i16, i16* %topic_len, align 2
  %call13 = call zeroext i16 @_OSSwapInt16(i16 zeroext %17)
  %conv14 = zext i16 %call13 to i32
  %conv15 = trunc i32 %conv14 to i16
  store i16 %conv15, i16* %netbytes, align 2
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %19 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %18, i8* %19, i32 2)
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %21 = load %struct.mg_mqtt_topic_expression*, %struct.mg_mqtt_topic_expression** %topics.addr, align 8
  %22 = load i64, i64* %i, align 8
  %arrayidx16 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %21, i64 %22
  %topic17 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %arrayidx16, i32 0, i32 0
  %23 = load i8*, i8** %topic17, align 8
  %24 = load i16, i16* %topic_len, align 2
  %conv18 = zext i16 %24 to i32
  call void @mg_send(%struct.mg_connection* %20, i8* %23, i32 %conv18)
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %26 = load %struct.mg_mqtt_topic_expression*, %struct.mg_mqtt_topic_expression** %topics.addr, align 8
  %27 = load i64, i64* %i, align 8
  %arrayidx19 = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %26, i64 %27
  %qos = getelementptr inbounds %struct.mg_mqtt_topic_expression, %struct.mg_mqtt_topic_expression* %arrayidx19, i32 0, i32 1
  call void @mg_send(%struct.mg_connection* %25, i8* %qos, i32 1)
  br label %for.inc20

for.inc20:                                        ; preds = %for.body8
  %28 = load i64, i64* %i, align 8
  %inc21 = add i64 %28, 1
  store i64 %inc21, i64* %i, align 8
  br label %for.cond5

for.end22:                                        ; preds = %for.cond5
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_mqtt_next_subscribe_topic(%struct.mg_mqtt_message* %msg, %struct.mg_str* %topic, i8* %qos, i32 %pos) #0 {
entry:
  %retval = alloca i32, align 4
  %msg.addr = alloca %struct.mg_mqtt_message*, align 8
  %topic.addr = alloca %struct.mg_str*, align 8
  %qos.addr = alloca i8*, align 8
  %pos.addr = alloca i32, align 4
  %buf = alloca i8*, align 8
  %new_pos = alloca i32, align 4
  store %struct.mg_mqtt_message* %msg, %struct.mg_mqtt_message** %msg.addr, align 8
  store %struct.mg_str* %topic, %struct.mg_str** %topic.addr, align 8
  store i8* %qos, i8** %qos.addr, align 8
  store i32 %pos, i32* %pos.addr, align 4
  %0 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %msg.addr, align 8
  %payload = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %0, i32 0, i32 4
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload, i32 0, i32 0
  %1 = load i8*, i8** %p, align 8
  %2 = load i32, i32* %pos.addr, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %idx.ext
  store i8* %add.ptr, i8** %buf, align 8
  %3 = load i32, i32* %pos.addr, align 4
  %conv = sext i32 %3 to i64
  %4 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %msg.addr, align 8
  %payload1 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %4, i32 0, i32 4
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload1, i32 0, i32 1
  %5 = load i64, i64* %len, align 8
  %cmp = icmp uge i64 %conv, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %buf, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  %conv3 = zext i8 %7 to i32
  %shl = shl i32 %conv3, 8
  %8 = load i8*, i8** %buf, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %9 to i32
  %or = or i32 %shl, %conv5
  %conv6 = sext i32 %or to i64
  %10 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %10, i32 0, i32 1
  store i64 %conv6, i64* %len7, align 8
  %11 = load i8*, i8** %buf, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %11, i64 2
  %12 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %12, i32 0, i32 0
  store i8* %add.ptr8, i8** %p9, align 8
  %13 = load i32, i32* %pos.addr, align 4
  %add = add nsw i32 %13, 2
  %conv10 = sext i32 %add to i64
  %14 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %14, i32 0, i32 1
  %15 = load i64, i64* %len11, align 8
  %add12 = add i64 %conv10, %15
  %add13 = add i64 %add12, 1
  %conv14 = trunc i64 %add13 to i32
  store i32 %conv14, i32* %new_pos, align 4
  %16 = load i32, i32* %new_pos, align 4
  %conv15 = sext i32 %16 to i64
  %17 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %msg.addr, align 8
  %payload16 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %17, i32 0, i32 4
  %len17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload16, i32 0, i32 1
  %18 = load i64, i64* %len17, align 8
  %cmp18 = icmp ugt i64 %conv15, %18
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end
  %19 = load i8*, i8** %buf, align 8
  %20 = load %struct.mg_str*, %struct.mg_str** %topic.addr, align 8
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %20, i32 0, i32 1
  %21 = load i64, i64* %len22, align 8
  %add23 = add i64 2, %21
  %arrayidx24 = getelementptr inbounds i8, i8* %19, i64 %add23
  %22 = load i8, i8* %arrayidx24, align 1
  %23 = load i8*, i8** %qos.addr, align 8
  store i8 %22, i8* %23, align 1
  %24 = load i32, i32* %new_pos, align 4
  store i32 %24, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end21, %if.then20, %if.then
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_unsubscribe(%struct.mg_connection* %nc, i8** %topics, i64 %topics_len, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %topics.addr = alloca i8**, align 8
  %topics_len.addr = alloca i64, align 8
  %message_id.addr = alloca i16, align 2
  %netbytes = alloca i16, align 2
  %i = alloca i64, align 8
  %topic_len = alloca i16, align 2
  %total_len = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8** %topics, i8*** %topics.addr, align 8
  store i64 %topics_len, i64* %topics_len.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  store i64 2, i64* %total_len, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %1 = load i64, i64* %topics_len.addr, align 8
  %cmp = icmp ult i64 %0, %1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8**, i8*** %topics.addr, align 8
  %3 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 %3
  %4 = load i8*, i8** %arrayidx, align 8
  %call = call i64 @strlen(i8* %4)
  %add = add i64 2, %call
  %5 = load i64, i64* %total_len, align 8
  %add1 = add i64 %5, %add
  store i64 %add1, i64* %total_len, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i64, i64* %i, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %8 = load i64, i64* %total_len, align 8
  call void @mg_send_mqtt_header(%struct.mg_connection* %7, i8 zeroext 10, i8 zeroext 2, i64 %8)
  %9 = load i16, i16* %message_id.addr, align 2
  %call2 = call zeroext i16 @_OSSwapInt16(i16 zeroext %9)
  %conv = zext i16 %call2 to i32
  %conv3 = trunc i32 %conv to i16
  store i16 %conv3, i16* %netbytes, align 2
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %11 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %10, i8* %11, i32 2)
  store i64 0, i64* %i, align 8
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc16, %for.end
  %12 = load i64, i64* %i, align 8
  %13 = load i64, i64* %topics_len.addr, align 8
  %cmp5 = icmp ult i64 %12, %13
  br i1 %cmp5, label %for.body7, label %for.end18

for.body7:                                        ; preds = %for.cond4
  %14 = load i8**, i8*** %topics.addr, align 8
  %15 = load i64, i64* %i, align 8
  %arrayidx8 = getelementptr inbounds i8*, i8** %14, i64 %15
  %16 = load i8*, i8** %arrayidx8, align 8
  %call9 = call i64 @strlen(i8* %16)
  %conv10 = trunc i64 %call9 to i16
  store i16 %conv10, i16* %topic_len, align 2
  %17 = load i16, i16* %topic_len, align 2
  %call11 = call zeroext i16 @_OSSwapInt16(i16 zeroext %17)
  %conv12 = zext i16 %call11 to i32
  %conv13 = trunc i32 %conv12 to i16
  store i16 %conv13, i16* %netbytes, align 2
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %19 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %18, i8* %19, i32 2)
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %21 = load i8**, i8*** %topics.addr, align 8
  %22 = load i64, i64* %i, align 8
  %arrayidx14 = getelementptr inbounds i8*, i8** %21, i64 %22
  %23 = load i8*, i8** %arrayidx14, align 8
  %24 = load i16, i16* %topic_len, align 2
  %conv15 = zext i16 %24 to i32
  call void @mg_send(%struct.mg_connection* %20, i8* %23, i32 %conv15)
  br label %for.inc16

for.inc16:                                        ; preds = %for.body7
  %25 = load i64, i64* %i, align 8
  %inc17 = add i64 %25, 1
  store i64 %inc17, i64* %i, align 8
  br label %for.cond4

for.end18:                                        ; preds = %for.cond4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_connack(%struct.mg_connection* %nc, i8 zeroext %return_code) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %return_code.addr = alloca i8, align 1
  %unused = alloca i8, align 1
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8 %return_code, i8* %return_code.addr, align 1
  store i8 0, i8* %unused, align 1
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 2, i8 zeroext 0, i64 2)
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send(%struct.mg_connection* %1, i8* %unused, i32 1)
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send(%struct.mg_connection* %2, i8* %return_code.addr, i32 1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_puback(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i16, i16* %message_id.addr, align 2
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 4, i16 zeroext %1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_send_mqtt_short_command(%struct.mg_connection* %nc, i8 zeroext %cmd, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %cmd.addr = alloca i8, align 1
  %message_id.addr = alloca i16, align 2
  %netbytes = alloca i16, align 2
  %flags = alloca i8, align 1
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8 %cmd, i8* %cmd.addr, align 1
  store i16 %message_id, i16* %message_id.addr, align 2
  %0 = load i8, i8* %cmd.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 6
  %cond = select i1 %cmp, i32 2, i32 0
  %conv2 = trunc i32 %cond to i8
  store i8 %conv2, i8* %flags, align 1
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %2 = load i8, i8* %cmd.addr, align 1
  %3 = load i8, i8* %flags, align 1
  call void @mg_send_mqtt_header(%struct.mg_connection* %1, i8 zeroext %2, i8 zeroext %3, i64 2)
  %4 = load i16, i16* %message_id.addr, align 2
  %call = call zeroext i16 @_OSSwapInt16(i16 zeroext %4)
  %conv3 = zext i16 %call to i32
  %conv4 = trunc i32 %conv3 to i16
  store i16 %conv4, i16* %netbytes, align 2
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %6 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %5, i8* %6, i32 2)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_pubrec(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i16, i16* %message_id.addr, align 2
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 5, i16 zeroext %1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_pubrel(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i16, i16* %message_id.addr, align 2
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 6, i16 zeroext %1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_pubcomp(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i16, i16* %message_id.addr, align 2
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 7, i16 zeroext %1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_suback(%struct.mg_connection* %nc, i8* %qoss, i64 %qoss_len, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %qoss.addr = alloca i8*, align 8
  %qoss_len.addr = alloca i64, align 8
  %message_id.addr = alloca i16, align 2
  %i = alloca i64, align 8
  %netbytes = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %qoss, i8** %qoss.addr, align 8
  store i64 %qoss_len, i64* %qoss_len.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i64, i64* %qoss_len.addr, align 8
  %add = add i64 2, %1
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 9, i8 zeroext 2, i64 %add)
  %2 = load i16, i16* %message_id.addr, align 2
  %call = call zeroext i16 @_OSSwapInt16(i16 zeroext %2)
  %conv = zext i16 %call to i32
  %conv1 = trunc i32 %conv to i16
  store i16 %conv1, i16* %netbytes, align 2
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %4 = bitcast i16* %netbytes to i8*
  call void @mg_send(%struct.mg_connection* %3, i8* %4, i32 2)
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %i, align 8
  %6 = load i64, i64* %qoss_len.addr, align 8
  %cmp = icmp ult i64 %5, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %8 = load i8*, i8** %qoss.addr, align 8
  %9 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %9
  call void @mg_send(%struct.mg_connection* %7, i8* %arrayidx, i32 1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_unsuback(%struct.mg_connection* %nc, i16 zeroext %message_id) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %message_id.addr = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i16 %message_id, i16* %message_id.addr, align 2
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i16, i16* %message_id.addr, align 2
  call void @mg_send_mqtt_short_command(%struct.mg_connection* %0, i8 zeroext 11, i16 zeroext %1)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_ping(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 12, i8 zeroext 0, i64 0)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_pong(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 13, i8 zeroext 0, i64 0)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_mqtt_disconnect(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send_mqtt_header(%struct.mg_connection* %0, i8 zeroext 14, i8 zeroext 0, i64 0)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define %struct.mg_dns_resource_record* @mg_dns_next_record(%struct.mg_dns_message* %msg, i32 %query, %struct.mg_dns_resource_record* %prev) #0 {
entry:
  %retval = alloca %struct.mg_dns_resource_record*, align 8
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %query.addr = alloca i32, align 4
  %prev.addr = alloca %struct.mg_dns_resource_record*, align 8
  %rr = alloca %struct.mg_dns_resource_record*, align 8
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8
  store i32 %query, i32* %query.addr, align 4
  store %struct.mg_dns_resource_record* %prev, %struct.mg_dns_resource_record** %prev.addr, align 8
  %0 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %prev.addr, align 8
  %cmp = icmp eq %struct.mg_dns_resource_record* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %1, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers, i32 0, i32 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %prev.addr, align 8
  %add.ptr = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %2, i64 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mg_dns_resource_record* [ %arraydecay, %cond.true ], [ %add.ptr, %cond.false ]
  store %struct.mg_dns_resource_record* %cond, %struct.mg_dns_resource_record** %rr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %3 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8
  %4 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %answers1 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %4, i32 0, i32 6
  %arraydecay2 = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers1, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint %struct.mg_dns_resource_record* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.mg_dns_resource_record* %arraydecay2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 48
  %5 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %5, i32 0, i32 4
  %6 = load i32, i32* %num_answers, align 8
  %conv = sext i32 %6 to i64
  %cmp3 = icmp slt i64 %sub.ptr.div, %conv
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %7, i32 0, i32 1
  %8 = load i32, i32* %rtype, align 8
  %9 = load i32, i32* %query.addr, align 4
  %cmp5 = icmp eq i32 %8, %9
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %10 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8
  store %struct.mg_dns_resource_record* %10, %struct.mg_dns_resource_record** %retval, align 8
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8
  %incdec.ptr = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %11, i32 1
  store %struct.mg_dns_resource_record* %incdec.ptr, %struct.mg_dns_resource_record** %rr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.mg_dns_resource_record* null, %struct.mg_dns_resource_record** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then
  %12 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %retval, align 8
  ret %struct.mg_dns_resource_record* %12
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_dns_parse_record_data(%struct.mg_dns_message* %msg, %struct.mg_dns_resource_record* %rr, i8* %data, i64 %data_len) #0 {
entry:
  %retval = alloca i32, align 4
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %rr.addr = alloca %struct.mg_dns_resource_record*, align 8
  %data.addr = alloca i8*, align 8
  %data_len.addr = alloca i64, align 8
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8
  store %struct.mg_dns_resource_record* %rr, %struct.mg_dns_resource_record** %rr.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %data_len, i64* %data_len.addr, align 8
  %0 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %0, i32 0, i32 1
  %1 = load i32, i32* %rtype, align 8
  switch i32 %1, label %sw.epilog [
    i32 1, label %sw.bb
    i32 5, label %sw.bb9
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i64, i64* %data_len.addr, align 8
  %cmp = icmp ult i64 %2, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %sw.bb
  %3 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rdata = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %3, i32 0, i32 5
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rdata, i32 0, i32 0
  %4 = load i8*, i8** %p, align 8
  %5 = load i64, i64* %data_len.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5
  %6 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %6, i32 0, i32 0
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt, i32 0, i32 0
  %7 = load i8*, i8** %p1, align 8
  %8 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt2 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %8, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt2, i32 0, i32 1
  %9 = load i64, i64* %len, align 8
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i64 %9
  %cmp4 = icmp ugt i8* %add.ptr, %add.ptr3
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %10 = load i8*, i8** %data.addr, align 8
  %11 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rdata7 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %11, i32 0, i32 5
  %p8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rdata7, i32 0, i32 0
  %12 = load i8*, i8** %p8, align 8
  %13 = load i64, i64* %data_len.addr, align 8
  %14 = load i8*, i8** %data.addr, align 8
  %15 = call i64 @llvm.objectsize.i64.p0i8(i8* %14, i1 false)
  %call = call i8* @__memcpy_chk(i8* %10, i8* %12, i64 %13, i64 %15) #5
  store i32 0, i32* %retval, align 4
  br label %return

sw.bb9:                                           ; preds = %entry
  %16 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %17 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rdata10 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %17, i32 0, i32 5
  %18 = load i8*, i8** %data.addr, align 8
  %19 = load i64, i64* %data_len.addr, align 8
  %conv = trunc i64 %19 to i32
  %call11 = call i64 @mg_dns_uncompress_name(%struct.mg_dns_message* %16, %struct.mg_str* %rdata10, i8* %18, i32 %conv)
  store i32 0, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb9, %if.end6, %if.then5, %if.then
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @mg_dns_uncompress_name(%struct.mg_dns_message* %msg, %struct.mg_str* %name, i8* %dst, i32 %dst_len) #0 {
entry:
  %retval = alloca i64, align 8
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %name.addr = alloca %struct.mg_str*, align 8
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i32, align 4
  %chunk_len = alloca i32, align 4
  %num_ptrs = alloca i32, align 4
  %old_dst = alloca i8*, align 8
  %data = alloca i8*, align 8
  %end = alloca i8*, align 8
  %leeway = alloca i32, align 4
  %off = alloca i16, align 2
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8
  store %struct.mg_str* %name, %struct.mg_str** %name.addr, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i32 %dst_len, i32* %dst_len.addr, align 4
  store i32 0, i32* %num_ptrs, align 4
  %0 = load i8*, i8** %dst.addr, align 8
  store i8* %0, i8** %old_dst, align 8
  %1 = load %struct.mg_str*, %struct.mg_str** %name.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 0
  %2 = load i8*, i8** %p, align 8
  store i8* %2, i8** %data, align 8
  %3 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %3, i32 0, i32 0
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt, i32 0, i32 0
  %4 = load i8*, i8** %p1, align 8
  %5 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt2 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %5, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt2, i32 0, i32 1
  %6 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %6
  store i8* %add.ptr, i8** %end, align 8
  %7 = load i8*, i8** %data, align 8
  %8 = load i8*, i8** %end, align 8
  %cmp = icmp uge i8* %7, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %if.end59, %if.end27, %if.end
  %9 = load i8*, i8** %data, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %data, align 8
  %10 = load i8, i8* %9, align 1
  %conv = zext i8 %10 to i32
  store i32 %conv, i32* %chunk_len, align 4
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i32, i32* %dst_len.addr, align 4
  %conv3 = sext i32 %11 to i64
  %12 = load i8*, i8** %dst.addr, align 8
  %13 = load i8*, i8** %old_dst, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub nsw i64 %conv3, %sub.ptr.sub
  %conv4 = trunc i64 %sub to i32
  store i32 %conv4, i32* %leeway, align 4
  %14 = load i8*, i8** %data, align 8
  %15 = load i8*, i8** %end, align 8
  %cmp5 = icmp uge i8* %14, %15
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  store i64 0, i64* %retval, align 8
  br label %return

if.end8:                                          ; preds = %while.body
  %16 = load i32, i32* %chunk_len, align 4
  %and = and i32 %16, 192
  %cmp9 = icmp eq i32 %and, 192
  br i1 %cmp9, label %if.then11, label %if.end32

if.then11:                                        ; preds = %if.end8
  %17 = load i8*, i8** %data, align 8
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 -1
  %18 = load i8, i8* %arrayidx, align 1
  %conv12 = zext i8 %18 to i32
  %and13 = and i32 %conv12, -193
  %shl = shl i32 %and13, 8
  %19 = load i8*, i8** %data, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %20 to i32
  %or = or i32 %shl, %conv15
  %conv16 = trunc i32 %or to i16
  store i16 %conv16, i16* %off, align 2
  %21 = load i16, i16* %off, align 2
  %conv17 = zext i16 %21 to i64
  %22 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt18 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %22, i32 0, i32 0
  %len19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt18, i32 0, i32 1
  %23 = load i64, i64* %len19, align 8
  %cmp20 = icmp uge i64 %conv17, %23
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.then11
  store i64 0, i64* %retval, align 8
  br label %return

if.end23:                                         ; preds = %if.then11
  %24 = load i32, i32* %num_ptrs, align 4
  %inc = add nsw i32 %24, 1
  store i32 %inc, i32* %num_ptrs, align 4
  %cmp24 = icmp sgt i32 %inc, 15
  br i1 %cmp24, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end23
  store i64 0, i64* %retval, align 8
  br label %return

if.end27:                                         ; preds = %if.end23
  %25 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt28 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %25, i32 0, i32 0
  %p29 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt28, i32 0, i32 0
  %26 = load i8*, i8** %p29, align 8
  %27 = load i16, i16* %off, align 2
  %conv30 = zext i16 %27 to i32
  %idx.ext = sext i32 %conv30 to i64
  %add.ptr31 = getelementptr inbounds i8, i8* %26, i64 %idx.ext
  store i8* %add.ptr31, i8** %data, align 8
  br label %while.cond

if.end32:                                         ; preds = %if.end8
  %28 = load i32, i32* %chunk_len, align 4
  %cmp33 = icmp sgt i32 %28, 63
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end32
  store i64 0, i64* %retval, align 8
  br label %return

if.end36:                                         ; preds = %if.end32
  %29 = load i32, i32* %chunk_len, align 4
  %30 = load i32, i32* %leeway, align 4
  %cmp37 = icmp sgt i32 %29, %30
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.end36
  %31 = load i32, i32* %leeway, align 4
  store i32 %31, i32* %chunk_len, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %if.end36
  %32 = load i8*, i8** %data, align 8
  %33 = load i32, i32* %chunk_len, align 4
  %idx.ext41 = sext i32 %33 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %32, i64 %idx.ext41
  %34 = load i8*, i8** %end, align 8
  %cmp43 = icmp uge i8* %add.ptr42, %34
  br i1 %cmp43, label %if.then45, label %if.end46

if.then45:                                        ; preds = %if.end40
  store i64 0, i64* %retval, align 8
  br label %return

if.end46:                                         ; preds = %if.end40
  %35 = load i8*, i8** %dst.addr, align 8
  %36 = load i8*, i8** %data, align 8
  %37 = load i32, i32* %chunk_len, align 4
  %conv47 = sext i32 %37 to i64
  %38 = load i8*, i8** %dst.addr, align 8
  %39 = call i64 @llvm.objectsize.i64.p0i8(i8* %38, i1 false)
  %call = call i8* @__memcpy_chk(i8* %35, i8* %36, i64 %conv47, i64 %39) #5
  %40 = load i32, i32* %chunk_len, align 4
  %41 = load i8*, i8** %data, align 8
  %idx.ext48 = sext i32 %40 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %41, i64 %idx.ext48
  store i8* %add.ptr49, i8** %data, align 8
  %42 = load i32, i32* %chunk_len, align 4
  %43 = load i8*, i8** %dst.addr, align 8
  %idx.ext50 = sext i32 %42 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %43, i64 %idx.ext50
  store i8* %add.ptr51, i8** %dst.addr, align 8
  %44 = load i32, i32* %chunk_len, align 4
  %45 = load i32, i32* %leeway, align 4
  %sub52 = sub nsw i32 %45, %44
  store i32 %sub52, i32* %leeway, align 4
  %46 = load i32, i32* %leeway, align 4
  %cmp53 = icmp eq i32 %46, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.end46
  %47 = load i8*, i8** %dst.addr, align 8
  %48 = load i8*, i8** %old_dst, align 8
  %sub.ptr.lhs.cast56 = ptrtoint i8* %47 to i64
  %sub.ptr.rhs.cast57 = ptrtoint i8* %48 to i64
  %sub.ptr.sub58 = sub i64 %sub.ptr.lhs.cast56, %sub.ptr.rhs.cast57
  store i64 %sub.ptr.sub58, i64* %retval, align 8
  br label %return

if.end59:                                         ; preds = %if.end46
  %49 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr60 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %incdec.ptr60, i8** %dst.addr, align 8
  store i8 46, i8* %49, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %50 = load i8*, i8** %dst.addr, align 8
  %51 = load i8*, i8** %old_dst, align 8
  %cmp61 = icmp ne i8* %50, %51
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %while.end
  %52 = load i8*, i8** %dst.addr, align 8
  %incdec.ptr64 = getelementptr inbounds i8, i8* %52, i32 -1
  store i8* %incdec.ptr64, i8** %dst.addr, align 8
  store i8 0, i8* %incdec.ptr64, align 1
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %while.end
  %53 = load i8*, i8** %dst.addr, align 8
  %54 = load i8*, i8** %old_dst, align 8
  %sub.ptr.lhs.cast66 = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast67 = ptrtoint i8* %54 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  store i64 %sub.ptr.sub68, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end65, %if.then55, %if.then45, %if.then35, %if.then26, %if.then22, %if.then7, %if.then
  %55 = load i64, i64* %retval, align 8
  ret i64 %55
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_dns_insert_header(%struct.mbuf* %io, i64 %pos, %struct.mg_dns_message* %msg) #0 {
entry:
  %io.addr = alloca %struct.mbuf*, align 8
  %pos.addr = alloca i64, align 8
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %header = alloca %struct.mg_dns_header, align 2
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8
  %0 = bitcast %struct.mg_dns_header* %header to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 12, i32 2, i1 false)
  %1 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %transaction_id = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %1, i32 0, i32 2
  %2 = load i16, i16* %transaction_id, align 2
  %transaction_id1 = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %header, i32 0, i32 0
  store i16 %2, i16* %transaction_id1, align 2
  %3 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %flags = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %3, i32 0, i32 1
  %4 = load i16, i16* %flags, align 8
  %call = call zeroext i16 @_OSSwapInt16(i16 zeroext %4)
  %conv = zext i16 %call to i32
  %conv2 = trunc i32 %conv to i16
  %flags3 = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %header, i32 0, i32 1
  store i16 %conv2, i16* %flags3, align 2
  %5 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %5, i32 0, i32 3
  %6 = load i32, i32* %num_questions, align 4
  %conv4 = trunc i32 %6 to i16
  %call5 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv4)
  %conv6 = zext i16 %call5 to i32
  %conv7 = trunc i32 %conv6 to i16
  %num_questions8 = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %header, i32 0, i32 2
  store i16 %conv7, i16* %num_questions8, align 2
  %7 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %7, i32 0, i32 4
  %8 = load i32, i32* %num_answers, align 8
  %conv9 = trunc i32 %8 to i16
  %call10 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv9)
  %conv11 = zext i16 %call10 to i32
  %conv12 = trunc i32 %conv11 to i16
  %num_answers13 = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %header, i32 0, i32 3
  store i16 %conv12, i16* %num_answers13, align 2
  %9 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %10 = load i64, i64* %pos.addr, align 8
  %11 = bitcast %struct.mg_dns_header* %header to i8*
  %call14 = call i64 @mbuf_insert(%struct.mbuf* %9, i64 %10, i8* %11, i64 12)
  %conv15 = trunc i64 %call14 to i32
  ret i32 %conv15
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_dns_copy_questions(%struct.mbuf* %io, %struct.mg_dns_message* %msg) #0 {
entry:
  %retval = alloca i32, align 4
  %io.addr = alloca %struct.mbuf*, align 8
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %begin = alloca i8*, align 8
  %end = alloca i8*, align 8
  %last_q = alloca %struct.mg_dns_resource_record*, align 8
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8
  %0 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %0, i32 0, i32 3
  %1 = load i32, i32* %num_questions, align 4
  %cmp = icmp sle i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %2, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt, i32 0, i32 0
  %3 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 12
  store i8* %add.ptr, i8** %begin, align 8
  %4 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %4, i32 0, i32 5
  %5 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_questions1 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %5, i32 0, i32 3
  %6 = load i32, i32* %num_questions1, align 4
  %sub = sub nsw i32 %6, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %questions, i64 0, i64 %idxprom
  store %struct.mg_dns_resource_record* %arrayidx, %struct.mg_dns_resource_record** %last_q, align 8
  %7 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %last_q, align 8
  %name = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %7, i32 0, i32 0
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %8 = load i8*, i8** %p2, align 8
  %9 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %last_q, align 8
  %name3 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %9, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name3, i32 0, i32 1
  %10 = load i64, i64* %len, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %8, i64 %10
  %add.ptr5 = getelementptr inbounds i8, i8* %add.ptr4, i64 4
  store i8* %add.ptr5, i8** %end, align 8
  %11 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %12 = load i8*, i8** %begin, align 8
  %13 = load i8*, i8** %end, align 8
  %14 = load i8*, i8** %begin, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call = call i64 @mbuf_append(%struct.mbuf* %11, i8* %12, i64 %sub.ptr.sub)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_dns_encode_name_s(%struct.mbuf* %io, i8* %name.coerce0, i64 %name.coerce1) #0 {
entry:
  %retval = alloca i32, align 4
  %name = alloca %struct.mg_str, align 8
  %io.addr = alloca %struct.mbuf*, align 8
  %s = alloca i8*, align 8
  %n = alloca i8, align 1
  %pos = alloca i64, align 8
  %0 = bitcast %struct.mg_str* %name to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %name.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %name.coerce1, i64* %2, align 8
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8
  %3 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %3, i32 0, i32 1
  %4 = load i64, i64* %len, align 8
  store i64 %4, i64* %pos, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %5 = bitcast %struct.mg_str* %name to { i8*, i64 }*
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %call = call i8* @mg_strchr(i8* %7, i64 %9, i32 46)
  store i8* %call, i8** %s, align 8
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %10 = load i8*, i8** %p, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 1
  %11 = load i64, i64* %len1, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %11
  store i8* %add.ptr, i8** %s, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  %12 = load i8*, i8** %s, align 8
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %13 = load i8*, i8** %p2, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp sgt i64 %sub.ptr.sub, 127
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  %14 = load i8*, i8** %s, align 8
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %15 = load i8*, i8** %p6, align 8
  %sub.ptr.lhs.cast7 = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast8 = ptrtoint i8* %15 to i64
  %sub.ptr.sub9 = sub i64 %sub.ptr.lhs.cast7, %sub.ptr.rhs.cast8
  %conv = trunc i64 %sub.ptr.sub9 to i8
  store i8 %conv, i8* %n, align 1
  %16 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %call10 = call i64 @mbuf_append(%struct.mbuf* %16, i8* %n, i64 1)
  %17 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %p11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %18 = load i8*, i8** %p11, align 8
  %19 = load i8, i8* %n, align 1
  %conv12 = zext i8 %19 to i64
  %call13 = call i64 @mbuf_append(%struct.mbuf* %17, i8* %18, i64 %conv12)
  %20 = load i8, i8* %n, align 1
  %conv14 = zext i8 %20 to i64
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 1
  %21 = load i64, i64* %len15, align 8
  %cmp16 = icmp ult i64 %conv14, %21
  br i1 %cmp16, label %land.lhs.true, label %if.end22

land.lhs.true:                                    ; preds = %if.end5
  %22 = load i8*, i8** %s, align 8
  %23 = load i8, i8* %22, align 1
  %conv18 = sext i8 %23 to i32
  %cmp19 = icmp eq i32 %conv18, 46
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true
  %24 = load i8, i8* %n, align 1
  %inc = add i8 %24, 1
  store i8 %inc, i8* %n, align 1
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %land.lhs.true, %if.end5
  %25 = load i8, i8* %n, align 1
  %conv23 = zext i8 %25 to i32
  %p24 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 0
  %26 = load i8*, i8** %p24, align 8
  %idx.ext = sext i32 %conv23 to i64
  %add.ptr25 = getelementptr inbounds i8, i8* %26, i64 %idx.ext
  store i8* %add.ptr25, i8** %p24, align 8
  %27 = load i8, i8* %n, align 1
  %conv26 = zext i8 %27 to i64
  %len27 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 1
  %28 = load i64, i64* %len27, align 8
  %sub = sub i64 %28, %conv26
  store i64 %sub, i64* %len27, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end22
  %len28 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name, i32 0, i32 1
  %29 = load i64, i64* %len28, align 8
  %cmp29 = icmp ugt i64 %29, 0
  br i1 %cmp29, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %30 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %call31 = call i64 @mbuf_append(%struct.mbuf* %30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.160, i32 0, i32 0), i64 1)
  %31 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %len32 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %31, i32 0, i32 1
  %32 = load i64, i64* %len32, align 8
  %33 = load i64, i64* %pos, align 8
  %sub33 = sub i64 %32, %33
  %conv34 = trunc i64 %sub33 to i32
  store i32 %conv34, i32* %retval, align 4
  br label %return

return:                                           ; preds = %do.end, %if.then4
  %34 = load i32, i32* %retval, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_dns_encode_name(%struct.mbuf* %io, i8* %name, i64 %len) #0 {
entry:
  %io.addr = alloca %struct.mbuf*, align 8
  %name.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %1 = load i8*, i8** %name.addr, align 8
  %2 = load i64, i64* %len.addr, align 8
  %call = call { i8*, i64 } @mg_mk_str_n(i8* %1, i64 %2)
  %3 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %4 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 0
  %5 = extractvalue { i8*, i64 } %call, 0
  store i8* %5, i8** %4, align 8
  %6 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %3, i32 0, i32 1
  %7 = extractvalue { i8*, i64 } %call, 1
  store i64 %7, i64* %6, align 8
  %8 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %call1 = call i32 @mg_dns_encode_name_s(%struct.mbuf* %0, i8* %10, i64 %12)
  ret i32 %call1
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_dns_encode_record(%struct.mbuf* %io, %struct.mg_dns_resource_record* %rr, i8* %name, i64 %nlen, i8* %rdata, i64 %rlen) #0 {
entry:
  %retval = alloca i32, align 4
  %io.addr = alloca %struct.mbuf*, align 8
  %rr.addr = alloca %struct.mg_dns_resource_record*, align 8
  %name.addr = alloca i8*, align 8
  %nlen.addr = alloca i64, align 8
  %rdata.addr = alloca i8*, align 8
  %rlen.addr = alloca i64, align 8
  %pos = alloca i64, align 8
  %u16 = alloca i16, align 2
  %u32 = alloca i32, align 4
  %clen = alloca i32, align 4
  %off = alloca i64, align 8
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8
  store %struct.mg_dns_resource_record* %rr, %struct.mg_dns_resource_record** %rr.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i64 %nlen, i64* %nlen.addr, align 8
  store i8* %rdata, i8** %rdata.addr, align 8
  store i64 %rlen, i64* %rlen.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 1
  %1 = load i64, i64* %len, align 8
  store i64 %1, i64* %pos, align 8
  %2 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %kind = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %2, i32 0, i32 4
  %3 = load i32, i32* %kind, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %5 = load i8*, i8** %name.addr, align 8
  %6 = load i64, i64* %nlen.addr, align 8
  %call = call i32 @mg_dns_encode_name(%struct.mbuf* %4, i8* %5, i64 %6)
  %cmp1 = icmp eq i32 %call, -1
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %7 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %7, i32 0, i32 1
  %8 = load i32, i32* %rtype, align 8
  %conv = trunc i32 %8 to i16
  %call4 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv)
  %conv5 = zext i16 %call4 to i32
  %conv6 = trunc i32 %conv5 to i16
  store i16 %conv6, i16* %u16, align 2
  %9 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %10 = bitcast i16* %u16 to i8*
  %call7 = call i64 @mbuf_append(%struct.mbuf* %9, i8* %10, i64 2)
  %11 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rclass = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %11, i32 0, i32 2
  %12 = load i32, i32* %rclass, align 4
  %conv8 = trunc i32 %12 to i16
  %call9 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv8)
  %conv10 = zext i16 %call9 to i32
  %conv11 = trunc i32 %conv10 to i16
  store i16 %conv11, i16* %u16, align 2
  %13 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %14 = bitcast i16* %u16 to i8*
  %call12 = call i64 @mbuf_append(%struct.mbuf* %13, i8* %14, i64 2)
  %15 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %kind13 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %15, i32 0, i32 4
  %16 = load i32, i32* %kind13, align 4
  %cmp14 = icmp eq i32 %16, 2
  br i1 %cmp14, label %if.then16, label %if.end44

if.then16:                                        ; preds = %if.end3
  %17 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %ttl = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %17, i32 0, i32 3
  %18 = load i32, i32* %ttl, align 8
  %call17 = call i32 @_OSSwapInt32(i32 %18)
  store i32 %call17, i32* %u32, align 4
  %19 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %20 = bitcast i32* %u32 to i8*
  %call18 = call i64 @mbuf_append(%struct.mbuf* %19, i8* %20, i64 4)
  %21 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rtype19 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %21, i32 0, i32 1
  %22 = load i32, i32* %rtype19, align 8
  %cmp20 = icmp eq i32 %22, 5
  br i1 %cmp20, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.then16
  %23 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %len23 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %23, i32 0, i32 1
  %24 = load i64, i64* %len23, align 8
  store i64 %24, i64* %off, align 8
  %25 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %26 = bitcast i16* %u16 to i8*
  %call24 = call i64 @mbuf_append(%struct.mbuf* %25, i8* %26, i64 2)
  %27 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %28 = load i8*, i8** %rdata.addr, align 8
  %29 = load i64, i64* %rlen.addr, align 8
  %call25 = call i32 @mg_dns_encode_name(%struct.mbuf* %27, i8* %28, i64 %29)
  store i32 %call25, i32* %clen, align 4
  %cmp26 = icmp eq i32 %call25, -1
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.then22
  store i32 -1, i32* %retval, align 4
  br label %return

if.end29:                                         ; preds = %if.then22
  %30 = load i32, i32* %clen, align 4
  %conv30 = trunc i32 %30 to i16
  store i16 %conv30, i16* %u16, align 2
  %31 = load i16, i16* %u16, align 2
  %conv31 = zext i16 %31 to i32
  %shr = ashr i32 %conv31, 8
  %conv32 = trunc i32 %shr to i8
  %32 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %32, i32 0, i32 0
  %33 = load i8*, i8** %buf, align 8
  %34 = load i64, i64* %off, align 8
  %arrayidx = getelementptr inbounds i8, i8* %33, i64 %34
  store i8 %conv32, i8* %arrayidx, align 1
  %35 = load i16, i16* %u16, align 2
  %conv33 = zext i16 %35 to i32
  %and = and i32 %conv33, 255
  %conv34 = trunc i32 %and to i8
  %36 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %buf35 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %36, i32 0, i32 0
  %37 = load i8*, i8** %buf35, align 8
  %38 = load i64, i64* %off, align 8
  %add = add i64 %38, 1
  %arrayidx36 = getelementptr inbounds i8, i8* %37, i64 %add
  store i8 %conv34, i8* %arrayidx36, align 1
  br label %if.end43

if.else:                                          ; preds = %if.then16
  %39 = load i64, i64* %rlen.addr, align 8
  %conv37 = trunc i64 %39 to i16
  %call38 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv37)
  %conv39 = zext i16 %call38 to i32
  %conv40 = trunc i32 %conv39 to i16
  store i16 %conv40, i16* %u16, align 2
  %40 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %41 = bitcast i16* %u16 to i8*
  %call41 = call i64 @mbuf_append(%struct.mbuf* %40, i8* %41, i64 2)
  %42 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %43 = load i8*, i8** %rdata.addr, align 8
  %44 = load i64, i64* %rlen.addr, align 8
  %call42 = call i64 @mbuf_append(%struct.mbuf* %42, i8* %43, i64 %44)
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.end29
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end3
  %45 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %len45 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %45, i32 0, i32 1
  %46 = load i64, i64* %len45, align 8
  %47 = load i64, i64* %pos, align 8
  %sub = sub i64 %46, %47
  %conv46 = trunc i64 %sub to i32
  store i32 %conv46, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end44, %if.then28, %if.then2, %if.then
  %48 = load i32, i32* %retval, align 4
  ret i32 %48
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_send_dns_query(%struct.mg_connection* %nc, i8* %name, i32 %query_type) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %name.addr = alloca i8*, align 8
  %query_type.addr = alloca i32, align 4
  %msg = alloca %struct.mg_dns_message*, align 8
  %pkt = alloca %struct.mbuf, align 8
  %rr = alloca %struct.mg_dns_resource_record*, align 8
  %len = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %query_type, i32* %query_type.addr, align 4
  %call = call i8* @calloc(i64 1, i64 3104) #16
  %0 = bitcast i8* %call to %struct.mg_dns_message*
  store %struct.mg_dns_message* %0, %struct.mg_dns_message** %msg, align 8
  %1 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %1, i32 0, i32 5
  %arrayidx = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %questions, i64 0, i64 0
  store %struct.mg_dns_resource_record* %arrayidx, %struct.mg_dns_resource_record** %rr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 11577)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load i8*, i8** %name.addr, align 8
  %3 = load i32, i32* %query_type.addr, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.161, i32 0, i32 0), i8* %2, i32 %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  call void @mbuf_init(%struct.mbuf* %pkt, i64 64)
  %4 = load i32, i32* @mg_dns_tid, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* @mg_dns_tid, align 4
  %conv = trunc i32 %inc to i16
  %5 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %transaction_id = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %5, i32 0, i32 2
  store i16 %conv, i16* %transaction_id, align 2
  %6 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %flags = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %6, i32 0, i32 1
  store i16 256, i16* %flags, align 8
  %7 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %num_questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %7, i32 0, i32 3
  store i32 1, i32* %num_questions, align 4
  %8 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %call2 = call i32 @mg_dns_insert_header(%struct.mbuf* %pkt, i64 0, %struct.mg_dns_message* %8)
  %9 = load i32, i32* %query_type.addr, align 4
  %10 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %10, i32 0, i32 1
  store i32 %9, i32* %rtype, align 8
  %11 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8
  %rclass = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %11, i32 0, i32 2
  store i32 1, i32* %rclass, align 4
  %12 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8
  %kind = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %12, i32 0, i32 4
  store i32 1, i32* %kind, align 4
  %13 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr, align 8
  %14 = load i8*, i8** %name.addr, align 8
  %15 = load i8*, i8** %name.addr, align 8
  %call3 = call i64 @strlen(i8* %15)
  %call4 = call i32 @mg_dns_encode_record(%struct.mbuf* %pkt, %struct.mg_dns_resource_record* %13, i8* %14, i64 %call3, i8* null, i64 0)
  %cmp = icmp eq i32 %call4, -1
  br i1 %cmp, label %if.then6, label %if.end7

if.then6:                                         ; preds = %do.end
  br label %cleanup

if.end7:                                          ; preds = %do.end
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 21
  %17 = load i64, i64* %flags8, align 8
  %and = and i64 %17, 2
  %tobool9 = icmp ne i64 %and, 0
  br i1 %tobool9, label %if.end17, label %if.then10

if.then10:                                        ; preds = %if.end7
  %len11 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %pkt, i32 0, i32 1
  %18 = load i64, i64* %len11, align 8
  %conv12 = trunc i64 %18 to i16
  %call13 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv12)
  %conv14 = zext i16 %call13 to i32
  %conv15 = trunc i32 %conv14 to i16
  store i16 %conv15, i16* %len, align 2
  %19 = bitcast i16* %len to i8*
  %call16 = call i64 @mbuf_insert(%struct.mbuf* %pkt, i64 0, i8* %19, i64 2)
  br label %if.end17

if.end17:                                         ; preds = %if.then10, %if.end7
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %pkt, i32 0, i32 0
  %21 = load i8*, i8** %buf, align 8
  %len18 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %pkt, i32 0, i32 1
  %22 = load i64, i64* %len18, align 8
  %conv19 = trunc i64 %22 to i32
  call void @mg_send(%struct.mg_connection* %20, i8* %21, i32 %conv19)
  call void @mbuf_free(%struct.mbuf* %pkt)
  br label %cleanup

cleanup:                                          ; preds = %if.end17, %if.then6
  %23 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %24 = bitcast %struct.mg_dns_message* %23 to i8*
  call void @free(i8* %24)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_parse_dns(i8* %buf, i32 %len, %struct.mg_dns_message* %msg) #0 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %msg.addr = alloca %struct.mg_dns_message*, align 8
  %header = alloca %struct.mg_dns_header*, align 8
  %data = alloca i8*, align 8
  %end = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  store %struct.mg_dns_message* %msg, %struct.mg_dns_message** %msg.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  %1 = bitcast i8* %0 to %struct.mg_dns_header*
  store %struct.mg_dns_header* %1, %struct.mg_dns_header** %header, align 8
  %2 = load i8*, i8** %buf.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 12
  store i8* %add.ptr, i8** %data, align 8
  %3 = load i8*, i8** %buf.addr, align 8
  %4 = load i32, i32* %len.addr, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %idx.ext
  store i8* %add.ptr1, i8** %end, align 8
  %5 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %6 = bitcast %struct.mg_dns_message* %5 to i8*
  %7 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %8 = bitcast %struct.mg_dns_message* %7 to i8*
  %9 = call i64 @llvm.objectsize.i64.p0i8(i8* %8, i1 false)
  %call = call i8* @__memset_chk(i8* %6, i32 0, i64 3104, i64 %9) #5
  %10 = load i8*, i8** %buf.addr, align 8
  %11 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %11, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt, i32 0, i32 0
  store i8* %10, i8** %p, align 8
  %12 = load i32, i32* %len.addr, align 4
  %conv = sext i32 %12 to i64
  %13 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %pkt2 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %13, i32 0, i32 0
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pkt2, i32 0, i32 1
  store i64 %conv, i64* %len3, align 8
  %14 = load i32, i32* %len.addr, align 4
  %cmp = icmp slt i32 %14, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %15 = load %struct.mg_dns_header*, %struct.mg_dns_header** %header, align 8
  %transaction_id = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %15, i32 0, i32 0
  %16 = load i16, i16* %transaction_id, align 2
  %17 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %transaction_id5 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %17, i32 0, i32 2
  store i16 %16, i16* %transaction_id5, align 2
  %18 = load %struct.mg_dns_header*, %struct.mg_dns_header** %header, align 8
  %flags = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %18, i32 0, i32 1
  %19 = load i16, i16* %flags, align 2
  %call6 = call zeroext i16 @_OSSwapInt16(i16 zeroext %19)
  %conv7 = zext i16 %call6 to i32
  %conv8 = trunc i32 %conv7 to i16
  %20 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %flags9 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %20, i32 0, i32 1
  store i16 %conv8, i16* %flags9, align 8
  %21 = load %struct.mg_dns_header*, %struct.mg_dns_header** %header, align 8
  %num_questions = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %21, i32 0, i32 2
  %22 = load i16, i16* %num_questions, align 2
  %call10 = call zeroext i16 @_OSSwapInt16(i16 zeroext %22)
  %conv11 = zext i16 %call10 to i32
  %conv12 = trunc i32 %conv11 to i16
  %conv13 = zext i16 %conv12 to i32
  %23 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_questions14 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %23, i32 0, i32 3
  store i32 %conv13, i32* %num_questions14, align 4
  %24 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_questions15 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %24, i32 0, i32 3
  %25 = load i32, i32* %num_questions15, align 4
  %cmp16 = icmp sgt i32 %25, 32
  br i1 %cmp16, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end
  %26 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_questions19 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %26, i32 0, i32 3
  store i32 32, i32* %num_questions19, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end
  %27 = load %struct.mg_dns_header*, %struct.mg_dns_header** %header, align 8
  %num_answers = getelementptr inbounds %struct.mg_dns_header, %struct.mg_dns_header* %27, i32 0, i32 3
  %28 = load i16, i16* %num_answers, align 2
  %call21 = call zeroext i16 @_OSSwapInt16(i16 zeroext %28)
  %conv22 = zext i16 %call21 to i32
  %conv23 = trunc i32 %conv22 to i16
  %conv24 = zext i16 %conv23 to i32
  %29 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_answers25 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %29, i32 0, i32 4
  store i32 %conv24, i32* %num_answers25, align 8
  %30 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_answers26 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %30, i32 0, i32 4
  %31 = load i32, i32* %num_answers26, align 8
  %cmp27 = icmp sgt i32 %31, 32
  br i1 %cmp27, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end20
  %32 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_answers30 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %32, i32 0, i32 4
  store i32 32, i32* %num_answers30, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %if.end20
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end31
  %33 = load i32, i32* %i, align 4
  %34 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_questions32 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %34, i32 0, i32 3
  %35 = load i32, i32* %num_questions32, align 4
  %cmp33 = icmp slt i32 %33, %35
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %36 = load i8*, i8** %data, align 8
  %37 = load i8*, i8** %end, align 8
  %38 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %questions = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %38, i32 0, i32 5
  %39 = load i32, i32* %i, align 4
  %idxprom = sext i32 %39 to i64
  %arrayidx = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %questions, i64 0, i64 %idxprom
  %call35 = call i8* @mg_parse_dns_resource_record(i8* %36, i8* %37, %struct.mg_dns_resource_record* %arrayidx, i32 0)
  store i8* %call35, i8** %data, align 8
  %40 = load i8*, i8** %data, align 8
  %cmp36 = icmp eq i8* %40, null
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  br label %return

if.end39:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end39
  %41 = load i32, i32* %i, align 4
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond40

for.cond40:                                       ; preds = %for.inc52, %for.end
  %42 = load i32, i32* %i, align 4
  %43 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %num_answers41 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %43, i32 0, i32 4
  %44 = load i32, i32* %num_answers41, align 8
  %cmp42 = icmp slt i32 %42, %44
  br i1 %cmp42, label %for.body44, label %for.end54

for.body44:                                       ; preds = %for.cond40
  %45 = load i8*, i8** %data, align 8
  %46 = load i8*, i8** %end, align 8
  %47 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg.addr, align 8
  %answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %47, i32 0, i32 6
  %48 = load i32, i32* %i, align 4
  %idxprom45 = sext i32 %48 to i64
  %arrayidx46 = getelementptr inbounds [32 x %struct.mg_dns_resource_record], [32 x %struct.mg_dns_resource_record]* %answers, i64 0, i64 %idxprom45
  %call47 = call i8* @mg_parse_dns_resource_record(i8* %45, i8* %46, %struct.mg_dns_resource_record* %arrayidx46, i32 1)
  store i8* %call47, i8** %data, align 8
  %49 = load i8*, i8** %data, align 8
  %cmp48 = icmp eq i8* %49, null
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %for.body44
  store i32 -1, i32* %retval, align 4
  br label %return

if.end51:                                         ; preds = %for.body44
  br label %for.inc52

for.inc52:                                        ; preds = %if.end51
  %50 = load i32, i32* %i, align 4
  %inc53 = add nsw i32 %50, 1
  store i32 %inc53, i32* %i, align 4
  br label %for.cond40

for.end54:                                        ; preds = %for.cond40
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end54, %if.then50, %if.then38, %if.then
  %51 = load i32, i32* %retval, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i8* @mg_parse_dns_resource_record(i8* %data, i8* %end, %struct.mg_dns_resource_record* %rr, i32 %reply) #0 {
entry:
  %retval = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %rr.addr = alloca %struct.mg_dns_resource_record*, align 8
  %reply.addr = alloca i32, align 4
  %name = alloca i8*, align 8
  %chunk_len = alloca i32, align 4
  %data_len = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store %struct.mg_dns_resource_record* %rr, %struct.mg_dns_resource_record** %rr.addr, align 8
  store i32 %reply, i32* %reply.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  store i8* %0, i8** %name, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load i8*, i8** %data.addr, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i8*, i8** %data.addr, align 8
  %4 = load i8, i8* %3, align 1
  %conv = zext i8 %4 to i32
  store i32 %conv, i32* %chunk_len, align 4
  %tobool = icmp ne i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load i8*, i8** %data.addr, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  %conv1 = zext i8 %7 to i32
  %and = and i32 %conv1, 192
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %8 = load i8*, i8** %data.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 1
  store i8* %add.ptr, i8** %data.addr, align 8
  br label %while.end

if.end:                                           ; preds = %while.body
  %9 = load i32, i32* %chunk_len, align 4
  %add = add nsw i32 %9, 1
  %10 = load i8*, i8** %data.addr, align 8
  %idx.ext = sext i32 %add to i64
  %add.ptr3 = getelementptr inbounds i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr3, i8** %data.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %if.then, %land.end
  %11 = load i8*, i8** %data.addr, align 8
  %12 = load i8*, i8** %end.addr, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %12, i64 -5
  %cmp5 = icmp ugt i8* %11, %add.ptr4
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.end
  store i8* null, i8** %retval, align 8
  br label %return

if.end8:                                          ; preds = %while.end
  %13 = load i8*, i8** %name, align 8
  %14 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %name9 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %14, i32 0, i32 0
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name9, i32 0, i32 0
  store i8* %13, i8** %p, align 8
  %15 = load i8*, i8** %data.addr, align 8
  %16 = load i8*, i8** %name, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add10 = add nsw i64 %sub.ptr.sub, 1
  %17 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %name11 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %17, i32 0, i32 0
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %name11, i32 0, i32 1
  store i64 %add10, i64* %len, align 8
  %18 = load i8*, i8** %data.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %data.addr, align 8
  %19 = load i8*, i8** %data.addr, align 8
  %arrayidx12 = getelementptr inbounds i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %20 to i32
  %shl = shl i32 %conv13, 8
  %21 = load i8*, i8** %data.addr, align 8
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %22 to i32
  %or = or i32 %shl, %conv15
  %23 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rtype = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %23, i32 0, i32 1
  store i32 %or, i32* %rtype, align 8
  %24 = load i8*, i8** %data.addr, align 8
  %add.ptr16 = getelementptr inbounds i8, i8* %24, i64 2
  store i8* %add.ptr16, i8** %data.addr, align 8
  %25 = load i8*, i8** %data.addr, align 8
  %arrayidx17 = getelementptr inbounds i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %26 to i32
  %shl19 = shl i32 %conv18, 8
  %27 = load i8*, i8** %data.addr, align 8
  %arrayidx20 = getelementptr inbounds i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %28 to i32
  %or22 = or i32 %shl19, %conv21
  %29 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rclass = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %29, i32 0, i32 2
  store i32 %or22, i32* %rclass, align 4
  %30 = load i8*, i8** %data.addr, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %30, i64 2
  store i8* %add.ptr23, i8** %data.addr, align 8
  %31 = load i32, i32* %reply.addr, align 4
  %tobool24 = icmp ne i32 %31, 0
  %cond = select i1 %tobool24, i32 2, i32 1
  %32 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %kind = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %32, i32 0, i32 4
  store i32 %cond, i32* %kind, align 4
  %33 = load i32, i32* %reply.addr, align 4
  %tobool25 = icmp ne i32 %33, 0
  br i1 %tobool25, label %if.then26, label %if.end59

if.then26:                                        ; preds = %if.end8
  %34 = load i8*, i8** %data.addr, align 8
  %35 = load i8*, i8** %end.addr, align 8
  %add.ptr27 = getelementptr inbounds i8, i8* %35, i64 -6
  %cmp28 = icmp uge i8* %34, %add.ptr27
  br i1 %cmp28, label %if.then30, label %if.end31

if.then30:                                        ; preds = %if.then26
  store i8* null, i8** %retval, align 8
  br label %return

if.end31:                                         ; preds = %if.then26
  %36 = load i8*, i8** %data.addr, align 8
  %arrayidx32 = getelementptr inbounds i8, i8* %36, i64 0
  %37 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %37 to i32
  %shl34 = shl i32 %conv33, 24
  %38 = load i8*, i8** %data.addr, align 8
  %arrayidx35 = getelementptr inbounds i8, i8* %38, i64 1
  %39 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %39 to i32
  %shl37 = shl i32 %conv36, 16
  %or38 = or i32 %shl34, %shl37
  %40 = load i8*, i8** %data.addr, align 8
  %arrayidx39 = getelementptr inbounds i8, i8* %40, i64 2
  %41 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %41 to i32
  %shl41 = shl i32 %conv40, 8
  %or42 = or i32 %or38, %shl41
  %42 = load i8*, i8** %data.addr, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %42, i64 3
  %43 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %43 to i32
  %or45 = or i32 %or42, %conv44
  %44 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %ttl = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %44, i32 0, i32 3
  store i32 %or45, i32* %ttl, align 8
  %45 = load i8*, i8** %data.addr, align 8
  %add.ptr46 = getelementptr inbounds i8, i8* %45, i64 4
  store i8* %add.ptr46, i8** %data.addr, align 8
  %46 = load i8*, i8** %data.addr, align 8
  %47 = load i8, i8* %46, align 1
  %conv47 = zext i8 %47 to i32
  %shl48 = shl i32 %conv47, 8
  %48 = load i8*, i8** %data.addr, align 8
  %add.ptr49 = getelementptr inbounds i8, i8* %48, i64 1
  %49 = load i8, i8* %add.ptr49, align 1
  %conv50 = zext i8 %49 to i32
  %or51 = or i32 %shl48, %conv50
  store i32 %or51, i32* %data_len, align 4
  %50 = load i8*, i8** %data.addr, align 8
  %add.ptr52 = getelementptr inbounds i8, i8* %50, i64 2
  store i8* %add.ptr52, i8** %data.addr, align 8
  %51 = load i8*, i8** %data.addr, align 8
  %52 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rdata = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %52, i32 0, i32 5
  %p53 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rdata, i32 0, i32 0
  store i8* %51, i8** %p53, align 8
  %53 = load i32, i32* %data_len, align 4
  %conv54 = sext i32 %53 to i64
  %54 = load %struct.mg_dns_resource_record*, %struct.mg_dns_resource_record** %rr.addr, align 8
  %rdata55 = getelementptr inbounds %struct.mg_dns_resource_record, %struct.mg_dns_resource_record* %54, i32 0, i32 5
  %len56 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %rdata55, i32 0, i32 1
  store i64 %conv54, i64* %len56, align 8
  %55 = load i32, i32* %data_len, align 4
  %56 = load i8*, i8** %data.addr, align 8
  %idx.ext57 = sext i32 %55 to i64
  %add.ptr58 = getelementptr inbounds i8, i8* %56, i64 %idx.ext57
  store i8* %add.ptr58, i8** %data.addr, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.end31, %if.end8
  %57 = load i8*, i8** %data.addr, align 8
  store i8* %57, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end59, %if.then30, %if.then7
  %58 = load i8*, i8** %retval, align 8
  ret i8* %58
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_set_protocol_dns(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* @dns_handler, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @dns_handler(%struct.mg_connection* %nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %io = alloca %struct.mbuf*, align 8
  %msg = alloca %struct.mg_dns_message, align 8
  %len12 = alloca i16, align 2
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %ev_data, i8** %ev_data.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 15
  %2 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %4 = load i32, i32* %ev.addr, align 4
  %5 = load i8*, i8** %ev_data.addr, align 8
  call void %2(%struct.mg_connection* %3, i32 %4, i8* %5)
  %6 = load i32, i32* %ev.addr, align 4
  switch i32 %6, label %sw.epilog [
    i32 3, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 21
  %8 = load i64, i64* %flags, align 8
  %and = and i64 %8, 2
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 8
  call void @mbuf_remove(%struct.mbuf* %recv_mbuf1, i64 2)
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.bb
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf2, i32 0, i32 0
  %11 = load i8*, i8** %buf, align 8
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf3, i32 0, i32 1
  %13 = load i64, i64* %len, align 8
  %conv = trunc i64 %13 to i32
  %call = call i32 @mg_parse_dns(i8* %11, i32 %conv, %struct.mg_dns_message* %msg)
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %14 = bitcast %struct.mg_dns_message* %msg to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 3104, i32 8, i1 false)
  %flags6 = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %msg, i32 0, i32 1
  store i16 -32639, i16* %flags6, align 8
  %15 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %call7 = call i32 @mg_dns_insert_header(%struct.mbuf* %15, i64 0, %struct.mg_dns_message* %msg)
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags8 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 21
  %17 = load i64, i64* %flags8, align 8
  %and9 = and i64 %17, 2
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.end19, label %if.then11

if.then11:                                        ; preds = %if.then5
  %18 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len13 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %18, i32 0, i32 1
  %19 = load i64, i64* %len13, align 8
  %conv14 = trunc i64 %19 to i16
  %call15 = call zeroext i16 @_OSSwapInt16(i16 zeroext %conv14)
  %conv16 = zext i16 %call15 to i32
  %conv17 = trunc i32 %conv16 to i16
  store i16 %conv17, i16* %len12, align 2
  %20 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %21 = bitcast i16* %len12 to i8*
  %call18 = call i64 @mbuf_insert(%struct.mbuf* %20, i64 0, i8* %21, i64 2)
  br label %if.end19

if.end19:                                         ; preds = %if.then11, %if.then5
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %23 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %buf20 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %23, i32 0, i32 0
  %24 = load i8*, i8** %buf20, align 8
  %25 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len21 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %25, i32 0, i32 1
  %26 = load i64, i64* %len21, align 8
  %conv22 = trunc i64 %26 to i32
  call void @mg_send(%struct.mg_connection* %22, i8* %24, i32 %conv22)
  br label %if.end24

if.else:                                          ; preds = %if.end
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 15
  %28 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler23, align 8
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %30 = bitcast %struct.mg_dns_message* %msg to i8*
  call void %28(%struct.mg_connection* %29, i32 100, i8* %30)
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.end19
  %31 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %32 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len25 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %32, i32 0, i32 1
  %33 = load i64, i64* %len25, align 8
  call void @mbuf_remove(%struct.mbuf* %31, i64 %33)
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %if.end24
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_resolve_from_hosts_file(i8* %name, %union.socket_address* %usa) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %usa.addr = alloca %union.socket_address*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  %line = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %alias = alloca [256 x i8], align 16
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  %len = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  store %union.socket_address* %usa, %union.socket_address** %usa.addr, align 8
  store i32 0, i32* %len, align 4
  %call = call %struct.__sFILE* @mg_fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8
  %cmp = icmp eq %struct.__sFILE* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.end, %if.then11, %if.then5, %if.end
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i32 0, i32 0
  %0 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call1 = call i8* @fgets(i8* %arraydecay, i32 1024, %struct.__sFILE* %0)
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %for.body, label %for.end34

for.body:                                         ; preds = %for.cond
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i64 0, i64 0
  %1 = load i8, i8* %arrayidx, align 16
  %conv = sext i8 %1 to i32
  %cmp3 = icmp eq i32 %conv, 35
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  br label %for.cond

if.end6:                                          ; preds = %for.body
  %arraydecay7 = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i32 0, i32 0
  %call8 = call i32 (i8*, i8*, ...) @sscanf(i8* %arraydecay7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.163, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d, i32* %len)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end6
  br label %for.cond

if.end12:                                         ; preds = %if.end6
  %arraydecay13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i32 0, i32 0
  %2 = load i32, i32* %len, align 4
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay13, i64 %idx.ext
  store i8* %add.ptr, i8** %p, align 8
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc, %if.end12
  %3 = load i8*, i8** %p, align 8
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %alias, i32 0, i32 0
  %call16 = call i32 (i8*, i8*, ...) @sscanf(i8* %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.164, i32 0, i32 0), i8* %arraydecay15, i32* %len)
  %cmp17 = icmp eq i32 %call16, 1
  br i1 %cmp17, label %for.body19, label %for.end

for.body19:                                       ; preds = %for.cond14
  %arraydecay20 = getelementptr inbounds [256 x i8], [256 x i8]* %alias, i32 0, i32 0
  %4 = load i8*, i8** %name.addr, align 8
  %call21 = call i32 @strcmp(i8* %arraydecay20, i8* %4)
  %cmp22 = icmp eq i32 %call21, 0
  br i1 %cmp22, label %if.then24, label %if.end31

if.then24:                                        ; preds = %for.body19
  %5 = load i32, i32* %a, align 4
  %shl = shl i32 %5, 24
  %6 = load i32, i32* %b, align 4
  %shl25 = shl i32 %6, 16
  %or = or i32 %shl, %shl25
  %7 = load i32, i32* %c, align 4
  %shl26 = shl i32 %7, 8
  %or27 = or i32 %or, %shl26
  %8 = load i32, i32* %d, align 4
  %or28 = or i32 %or27, %8
  %call29 = call i32 @_OSSwapInt32(i32 %or28)
  %9 = load %union.socket_address*, %union.socket_address** %usa.addr, align 8
  %sin = bitcast %union.socket_address* %9 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %s_addr = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  store i32 %call29, i32* %s_addr, align 4
  %10 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call30 = call i32 @fclose(%struct.__sFILE* %10)
  store i32 0, i32* %retval, align 4
  br label %return

if.end31:                                         ; preds = %for.body19
  br label %for.inc

for.inc:                                          ; preds = %if.end31
  %11 = load i32, i32* %len, align 4
  %12 = load i8*, i8** %p, align 8
  %idx.ext32 = sext i32 %11 to i64
  %add.ptr33 = getelementptr inbounds i8, i8* %12, i64 %idx.ext32
  store i8* %add.ptr33, i8** %p, align 8
  br label %for.cond14

for.end:                                          ; preds = %for.cond14
  br label %for.cond

for.end34:                                        ; preds = %for.cond
  %13 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call35 = call i32 @fclose(%struct.__sFILE* %13)
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end34, %if.then24, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @mg_resolve_async(%struct.mg_mgr* %mgr, i8* %name, i32 %query, void (%struct.mg_dns_message*, i8*, i32)* %cb, i8* %data) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %name.addr = alloca i8*, align 8
  %query.addr = alloca i32, align 4
  %cb.addr = alloca void (%struct.mg_dns_message*, i8*, i32)*, align 8
  %data.addr = alloca i8*, align 8
  %opts = alloca %struct.mg_resolve_async_opts, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store i32 %query, i32* %query.addr, align 4
  store void (%struct.mg_dns_message*, i8*, i32)* %cb, void (%struct.mg_dns_message*, i8*, i32)** %cb.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = bitcast %struct.mg_resolve_async_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 8, i1 false)
  %1 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %2 = load i8*, i8** %name.addr, align 8
  %3 = load i32, i32* %query.addr, align 4
  %4 = load void (%struct.mg_dns_message*, i8*, i32)*, void (%struct.mg_dns_message*, i8*, i32)** %cb.addr, align 8
  %5 = load i8*, i8** %data.addr, align 8
  %call = call i32 @mg_resolve_async_opt(%struct.mg_mgr* %1, i8* %2, i32 %3, void (%struct.mg_dns_message*, i8*, i32)* %4, i8* %5, %struct.mg_resolve_async_opts* byval align 8 %opts)
  ret i32 %call
}

; Function Attrs: nounwind
declare i8* @__strncpy_chk(i8*, i8*, i64, i64) #1

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_get_ip_address_of_nameserver(i8* %name, i64 %name_len) #0 {
entry:
  %name.addr = alloca i8*, align 8
  %name_len.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  %fp = alloca %struct.__sFILE*, align 8
  %line = alloca [512 x i8], align 16
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %c = alloca i32, align 4
  %d = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  store i64 %name_len, i64* %name_len.addr, align 8
  store i32 -1, i32* %ret, align 4
  %call = call %struct.__sFILE* @mg_fopen(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.408, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %fp, align 8
  %cmp = icmp eq %struct.__sFILE* %call, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %ret, align 4
  br label %if.end9

if.else:                                          ; preds = %entry
  store i32 -1, i32* %ret, align 4
  br label %for.cond

for.cond:                                         ; preds = %if.end, %if.else
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %line, i32 0, i32 0
  %0 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call1 = call i8* @fgets(i8* %arraydecay, i32 512, %struct.__sFILE* %0)
  %cmp2 = icmp ne i8* %call1, null
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [512 x i8], [512 x i8]* %line, i32 0, i32 0
  %call4 = call i32 (i8*, i8*, ...) @sscanf(i8* %arraydecay3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.409, i32 0, i32 0), i32* %a, i32* %b, i32* %c, i32* %d)
  %cmp5 = icmp eq i32 %call4, 4
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %for.body
  %1 = load i8*, i8** %name.addr, align 8
  %2 = load i64, i64* %name_len.addr, align 8
  %3 = load i8*, i8** %name.addr, align 8
  %4 = call i64 @llvm.objectsize.i64.p0i8(i8* %3, i1 false)
  %5 = load i32, i32* %a, align 4
  %6 = load i32, i32* %b, align 4
  %7 = load i32, i32* %c, align 4
  %8 = load i32, i32* %d, align 4
  %call7 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %1, i64 %2, i32 0, i64 %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.410, i32 0, i32 0), i32 %5, i32 %6, i32 %7, i32 %8)
  store i32 0, i32* %ret, align 4
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.cond

for.end:                                          ; preds = %if.then6, %for.cond
  %9 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call8 = call i32 @fclose(%struct.__sFILE* %9)
  br label %if.end9

if.end9:                                          ; preds = %for.end, %if.then
  %10 = load i32, i32* %ret, align 4
  ret i32 %10
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_resolve_async_eh(%struct.mg_connection* %nc, i32 %ev, i8* %data) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %now = alloca i64, align 8
  %req = alloca %struct.mg_resolve_async_request*, align 8
  %msg = alloca %struct.mg_dns_message*, align 8
  %user_data = alloca i8*, align 8
  %addr = alloca [32 x i8], align 16
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  %call = call double @mg_time()
  %conv = fptosi double %call to i64
  store i64 %conv, i64* %now, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 16
  %1 = load i8*, i8** %user_data1, align 8
  store i8* %1, i8** %user_data, align 8
  %2 = load i32, i32* %ev.addr, align 4
  %cmp = icmp ne i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %call3 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 12010)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %do.body
  %3 = load i32, i32* %ev.addr, align 4
  %4 = load i8*, i8** %user_data, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.411, i32 0, i32 0), i32 %3, i8* %4)
  br label %if.end

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end5

if.end5:                                          ; preds = %do.end, %entry
  %5 = load i8*, i8** %user_data, align 8
  %6 = bitcast i8* %5 to %struct.mg_resolve_async_request*
  store %struct.mg_resolve_async_request* %6, %struct.mg_resolve_async_request** %req, align 8
  %7 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %cmp6 = icmp eq %struct.mg_resolve_async_request* %7, null
  br i1 %cmp6, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  br label %sw.epilog

if.end9:                                          ; preds = %if.end5
  %8 = load i32, i32* %ev.addr, align 4
  switch i32 %8, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb18
    i32 3, label %sw.bb28
    i32 4, label %sw.bb42
    i32 6, label %sw.bb46
    i32 5, label %sw.bb50
  ]

sw.bb:                                            ; preds = %if.end9
  %9 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %retries = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %9, i32 0, i32 8
  %10 = load i32, i32* %retries, align 8
  %11 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %max_retries = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %11, i32 0, i32 5
  %12 = load i32, i32* %max_retries, align 8
  %cmp10 = icmp sgt i32 %10, %12
  br i1 %cmp10, label %if.then12, label %if.end13

if.then12:                                        ; preds = %sw.bb
  %13 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %err = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %13, i32 0, i32 6
  store i32 2, i32* %err, align 4
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 21
  %15 = load i64, i64* %flags, align 8
  %or = or i64 %15, 2048
  store i64 %or, i64* %flags, align 8
  br label %sw.epilog

if.end13:                                         ; preds = %sw.bb
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 21
  %17 = load i64, i64* %flags14, align 8
  %and = and i64 %17, 8
  %tobool15 = icmp ne i64 %and, 0
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end13
  br label %sw.epilog

if.end17:                                         ; preds = %if.end13
  br label %sw.bb18

sw.bb18:                                          ; preds = %if.end9, %if.end17
  %18 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %retries19 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %18, i32 0, i32 8
  %19 = load i32, i32* %retries19, align 8
  %cmp20 = icmp eq i32 %19, 0
  br i1 %cmp20, label %if.then24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb18
  %20 = load i64, i64* %now, align 8
  %21 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %last_time = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %21, i32 0, i32 7
  %22 = load i64, i64* %last_time, align 8
  %sub = sub nsw i64 %20, %22
  %23 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %timeout = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %23, i32 0, i32 4
  %24 = load i64, i64* %timeout, align 8
  %cmp22 = icmp sge i64 %sub, %24
  br i1 %cmp22, label %if.then24, label %if.end27

if.then24:                                        ; preds = %lor.lhs.false, %sw.bb18
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %26 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %name = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %26, i32 0, i32 0
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %name, i32 0, i32 0
  %27 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %query = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %27, i32 0, i32 1
  %28 = load i32, i32* %query, align 8
  call void @mg_send_dns_query(%struct.mg_connection* %25, i8* %arraydecay, i32 %28)
  %29 = load i64, i64* %now, align 8
  %30 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %last_time25 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %30, i32 0, i32 7
  store i64 %29, i64* %last_time25, align 8
  %31 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %retries26 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %31, i32 0, i32 8
  %32 = load i32, i32* %retries26, align 8
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %retries26, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.then24, %lor.lhs.false
  br label %sw.epilog

sw.bb28:                                          ; preds = %if.end9
  %call29 = call i8* @malloc(i64 3104) #14
  %33 = bitcast i8* %call29 to %struct.mg_dns_message*
  store %struct.mg_dns_message* %33, %struct.mg_dns_message** %msg, align 8
  %34 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 0
  %35 = load i8*, i8** %buf, align 8
  %36 = load i8*, i8** %data.addr, align 8
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %call30 = call i32 @mg_parse_dns(i8* %35, i32 %38, %struct.mg_dns_message* %39)
  %cmp31 = icmp eq i32 %call30, 0
  br i1 %cmp31, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %sw.bb28
  %40 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %num_answers = getelementptr inbounds %struct.mg_dns_message, %struct.mg_dns_message* %40, i32 0, i32 4
  %41 = load i32, i32* %num_answers, align 8
  %cmp33 = icmp sgt i32 %41, 0
  br i1 %cmp33, label %if.then35, label %if.else

if.then35:                                        ; preds = %land.lhs.true
  %42 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %callback = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %42, i32 0, i32 2
  %43 = load void (%struct.mg_dns_message*, i8*, i32)*, void (%struct.mg_dns_message*, i8*, i32)** %callback, align 8
  %44 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %45 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %data36 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %45, i32 0, i32 3
  %46 = load i8*, i8** %data36, align 8
  call void %43(%struct.mg_dns_message* %44, i8* %46, i32 0)
  %47 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data37 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %47, i32 0, i32 16
  store i8* null, i8** %user_data37, align 8
  %48 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %49 = bitcast %struct.mg_resolve_async_request* %48 to i8*
  call void @free(i8* %49)
  br label %if.end39

if.else:                                          ; preds = %land.lhs.true, %sw.bb28
  %50 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %err38 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %50, i32 0, i32 6
  store i32 1, i32* %err38, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then35
  %51 = load %struct.mg_dns_message*, %struct.mg_dns_message** %msg, align 8
  %52 = bitcast %struct.mg_dns_message* %51 to i8*
  call void @free(i8* %52)
  %53 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags40 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %53, i32 0, i32 21
  %54 = load i64, i64* %flags40, align 8
  %or41 = or i64 %54, 2048
  store i64 %or41, i64* %flags40, align 8
  br label %sw.epilog

sw.bb42:                                          ; preds = %if.end9
  %55 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags43 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %55, i32 0, i32 21
  %56 = load i64, i64* %flags43, align 8
  %and44 = and i64 %56, -2049
  store i64 %and44, i64* %flags43, align 8
  %57 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %57, i32 0, i32 9
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %send_mbuf45 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %58, i32 0, i32 9
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %send_mbuf45, i32 0, i32 1
  %59 = load i64, i64* %len, align 8
  call void @mbuf_remove(%struct.mbuf* %send_mbuf, i64 %59)
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.end9
  %60 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %err47 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %60, i32 0, i32 6
  store i32 3, i32* %err47, align 4
  %61 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags48 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %61, i32 0, i32 21
  %62 = load i64, i64* %flags48, align 8
  %or49 = or i64 %62, 2048
  store i64 %or49, i64* %flags48, align 8
  br label %sw.epilog

sw.bb50:                                          ; preds = %if.end9
  %63 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %cmp51 = icmp ne %struct.mg_resolve_async_request* %63, null
  br i1 %cmp51, label %if.then53, label %if.end60

if.then53:                                        ; preds = %sw.bb50
  %64 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %64, i32 0, i32 6
  %arraydecay54 = getelementptr inbounds [32 x i8], [32 x i8]* %addr, i32 0, i32 0
  %call55 = call i32 @mg_sock_addr_to_str(%union.socket_address* %sa, i8* %arraydecay54, i64 32, i32 1)
  %65 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %callback56 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %65, i32 0, i32 2
  %66 = load void (%struct.mg_dns_message*, i8*, i32)*, void (%struct.mg_dns_message*, i8*, i32)** %callback56, align 8
  %67 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %data57 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %67, i32 0, i32 3
  %68 = load i8*, i8** %data57, align 8
  %69 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %err58 = getelementptr inbounds %struct.mg_resolve_async_request, %struct.mg_resolve_async_request* %69, i32 0, i32 6
  %70 = load i32, i32* %err58, align 4
  call void %66(%struct.mg_dns_message* null, i8* %68, i32 %70)
  %71 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data59 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %71, i32 0, i32 16
  store i8* null, i8** %user_data59, align 8
  %72 = load %struct.mg_resolve_async_request*, %struct.mg_resolve_async_request** %req, align 8
  %73 = bitcast %struct.mg_resolve_async_request* %72 to i8*
  call void @free(i8* %73)
  br label %if.end60

if.end60:                                         ; preds = %if.then53, %sw.bb50
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then8, %if.end9, %if.end60, %sw.bb46, %sw.bb42, %if.end39, %if.end27, %if.then16, %if.then12
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @mg_set_nameserver(%struct.mg_mgr* %mgr, i8* %nameserver) #0 {
entry:
  %mgr.addr = alloca %struct.mg_mgr*, align 8
  %nameserver.addr = alloca i8*, align 8
  store %struct.mg_mgr* %mgr, %struct.mg_mgr** %mgr.addr, align 8
  store i8* %nameserver, i8** %nameserver.addr, align 8
  %0 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %nameserver1 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %0, i32 0, i32 7
  %1 = load i8*, i8** %nameserver1, align 8
  call void @free(i8* %1)
  %2 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %nameserver2 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %2, i32 0, i32 7
  store i8* null, i8** %nameserver2, align 8
  %3 = load i8*, i8** %nameserver.addr, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %nameserver.addr, align 8
  %call = call i8* @strdup(i8* %4)
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr.addr, align 8
  %nameserver3 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 7
  store i8* %call, i8** %nameserver3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @cs_base64_emit_code(%struct.cs_base64_ctx* %ctx, i32 %v) #0 {
entry:
  %ctx.addr = alloca %struct.cs_base64_ctx*, align 8
  %v.addr = alloca i32, align 4
  store %struct.cs_base64_ctx* %ctx, %struct.cs_base64_ctx** %ctx.addr, align 8
  store i32 %v, i32* %v.addr, align 4
  %0 = load i32, i32* %v.addr, align 4
  %cmp = icmp slt i32 %0, 26
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %b64_putc = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %1, i32 0, i32 0
  %2 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc, align 8
  %3 = load i32, i32* %v.addr, align 4
  %add = add nsw i32 %3, 65
  %conv = trunc i32 %add to i8
  %4 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %user_data = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %4, i32 0, i32 3
  %5 = load i8*, i8** %user_data, align 8
  call void %2(i8 signext %conv, i8* %5)
  br label %if.end26

if.else:                                          ; preds = %entry
  %6 = load i32, i32* %v.addr, align 4
  %cmp1 = icmp slt i32 %6, 52
  br i1 %cmp1, label %if.then3, label %if.else8

if.then3:                                         ; preds = %if.else
  %7 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %b64_putc4 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %7, i32 0, i32 0
  %8 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc4, align 8
  %9 = load i32, i32* %v.addr, align 4
  %sub = sub nsw i32 %9, 26
  %add5 = add nsw i32 %sub, 97
  %conv6 = trunc i32 %add5 to i8
  %10 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %user_data7 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %10, i32 0, i32 3
  %11 = load i8*, i8** %user_data7, align 8
  call void %8(i8 signext %conv6, i8* %11)
  br label %if.end25

if.else8:                                         ; preds = %if.else
  %12 = load i32, i32* %v.addr, align 4
  %cmp9 = icmp slt i32 %12, 62
  br i1 %cmp9, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.else8
  %13 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %b64_putc12 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %13, i32 0, i32 0
  %14 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc12, align 8
  %15 = load i32, i32* %v.addr, align 4
  %sub13 = sub nsw i32 %15, 52
  %add14 = add nsw i32 %sub13, 48
  %conv15 = trunc i32 %add14 to i8
  %16 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %user_data16 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %16, i32 0, i32 3
  %17 = load i8*, i8** %user_data16, align 8
  call void %14(i8 signext %conv15, i8* %17)
  br label %if.end

if.else17:                                        ; preds = %if.else8
  %18 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %b64_putc18 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %18, i32 0, i32 0
  %19 = load void (i8, i8*)*, void (i8, i8*)** %b64_putc18, align 8
  %20 = load i32, i32* %v.addr, align 4
  %sub19 = sub nsw i32 %20, 52
  %sub20 = sub nsw i32 %sub19, 10
  %cmp21 = icmp eq i32 %sub20, 0
  %cond = select i1 %cmp21, i32 43, i32 47
  %conv23 = trunc i32 %cond to i8
  %21 = load %struct.cs_base64_ctx*, %struct.cs_base64_ctx** %ctx.addr, align 8
  %user_data24 = getelementptr inbounds %struct.cs_base64_ctx, %struct.cs_base64_ctx* %21, i32 0, i32 3
  %22 = load i8*, i8** %user_data24, align 8
  call void %19(i8 signext %conv23, i8* %22)
  br label %if.end

if.end:                                           ; preds = %if.else17, %if.then11
  br label %if.end25

if.end25:                                         ; preds = %if.end, %if.then3
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_remove_conn(%struct.mg_connection* %conn) #0 {
entry:
  %conn.addr = alloca %struct.mg_connection*, align 8
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %prev = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 1
  %1 = load %struct.mg_connection*, %struct.mg_connection** %prev, align 8
  %cmp = icmp eq %struct.mg_connection* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %next = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 0
  %3 = load %struct.mg_connection*, %struct.mg_connection** %next, align 8
  %4 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 3
  %5 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %active_connections = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %5, i32 0, i32 0
  store %struct.mg_connection* %3, %struct.mg_connection** %active_connections, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %prev1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 1
  %7 = load %struct.mg_connection*, %struct.mg_connection** %prev1, align 8
  %tobool = icmp ne %struct.mg_connection* %7, null
  br i1 %tobool, label %if.then2, label %if.end6

if.then2:                                         ; preds = %if.end
  %8 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %next3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %8, i32 0, i32 0
  %9 = load %struct.mg_connection*, %struct.mg_connection** %next3, align 8
  %10 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %prev4 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 1
  %11 = load %struct.mg_connection*, %struct.mg_connection** %prev4, align 8
  %next5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 0
  store %struct.mg_connection* %9, %struct.mg_connection** %next5, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then2, %if.end
  %12 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %next7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 0
  %13 = load %struct.mg_connection*, %struct.mg_connection** %next7, align 8
  %tobool8 = icmp ne %struct.mg_connection* %13, null
  br i1 %tobool8, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.end6
  %14 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %prev10 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 1
  %15 = load %struct.mg_connection*, %struct.mg_connection** %prev10, align 8
  %16 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %next11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 0
  %17 = load %struct.mg_connection*, %struct.mg_connection** %next11, align 8
  %prev12 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 1
  store %struct.mg_connection* %15, %struct.mg_connection** %prev12, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.then9, %if.end6
  %18 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %next14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 0
  store %struct.mg_connection* null, %struct.mg_connection** %next14, align 8
  %19 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %prev15 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %19, i32 0, i32 1
  store %struct.mg_connection* null, %struct.mg_connection** %prev15, align 8
  %20 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 20
  %21 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %21, i32 0, i32 2
  %22 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %remove_conn = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %22, i32 0, i32 3
  %23 = load void (%struct.mg_connection*)*, void (%struct.mg_connection*)** %remove_conn, align 8
  %24 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  call void %23(%struct.mg_connection* %24)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @recv_avail_size(%struct.mg_connection* %conn, i64 %max) #0 {
entry:
  %retval = alloca i64, align 8
  %conn.addr = alloca %struct.mg_connection*, align 8
  %max.addr = alloca i64, align 8
  %avail = alloca i64, align 8
  store %struct.mg_connection* %conn, %struct.mg_connection** %conn.addr, align 8
  store i64 %max, i64* %max.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 7
  %1 = load i64, i64* %recv_mbuf_limit, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %2, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %3 = load i64, i64* %len, align 8
  %cmp = icmp ult i64 %1, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %recv_mbuf_limit1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 7
  %5 = load i64, i64* %recv_mbuf_limit1, align 8
  %6 = load %struct.mg_connection*, %struct.mg_connection** %conn.addr, align 8
  %recv_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 8
  %len3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf2, i32 0, i32 1
  %7 = load i64, i64* %len3, align 8
  %sub = sub i64 %5, %7
  store i64 %sub, i64* %avail, align 8
  %8 = load i64, i64* %avail, align 8
  %9 = load i64, i64* %max.addr, align 8
  %cmp4 = icmp ugt i64 %8, %9
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %10 = load i64, i64* %max.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %11 = load i64, i64* %avail, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %10, %cond.true ], [ %11, %cond.false ]
  store i64 %cond, i64* %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %12 = load i64, i64* %retval, align 8
  ret i64 %12
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_recv_udp(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  %lc = alloca %struct.mg_connection*, align 8
  %sa = alloca %union.socket_address, align 4
  %sa_len = alloca i64, align 8
  %opts = alloca %struct.mg_add_sock_opts, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 0, i32* %n, align 4
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  store %struct.mg_connection* %0, %struct.mg_connection** %lc, align 8
  store i64 16, i64* %sa_len, align 8
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %1, i32 0, i32 20
  %2 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %2, i32 0, i32 2
  %3 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %udp_recv = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %3, i32 0, i32 12
  %4 = load i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)*, i32 (%struct.mg_connection*, i8*, i64, %union.socket_address*, i64*)** %udp_recv, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %6 = load i8*, i8** %buf.addr, align 8
  %7 = load i64, i64* %len.addr, align 8
  %call = call i32 %4(%struct.mg_connection* %5, i8* %6, i64 %7, %union.socket_address* %sa, i64* %sa_len)
  store i32 %call, i32* %n, align 4
  %8 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 21
  %10 = load i64, i64* %flags, align 8
  %or = or i64 %10, 2048
  store i64 %or, i64* %flags, align 8
  br label %out

if.end:                                           ; preds = %entry
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 21
  %12 = load i64, i64* %flags1, align 8
  %and = and i64 %12, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then2, label %if.end35

if.then2:                                         ; preds = %if.end
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  store %struct.mg_connection* %13, %struct.mg_connection** %lc, align 8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 3
  %15 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %call3 = call %struct.mg_connection* @mg_next(%struct.mg_mgr* %15, %struct.mg_connection* null)
  store %struct.mg_connection* %call3, %struct.mg_connection** %nc.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %cmp4 = icmp ne %struct.mg_connection* %16, null
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %17, i32 0, i32 6
  %sa6 = bitcast %union.socket_address* %sa5 to %struct.sockaddr*
  %18 = bitcast %struct.sockaddr* %sa6 to i8*
  %sa7 = bitcast %union.socket_address* %sa to %struct.sockaddr*
  %19 = bitcast %struct.sockaddr* %sa7 to i8*
  %20 = load i64, i64* %sa_len, align 8
  %call8 = call i32 @memcmp(i8* %18, i8* %19, i64 %20)
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %for.body
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 2
  %22 = load %struct.mg_connection*, %struct.mg_connection** %listener, align 8
  %23 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %cmp10 = icmp eq %struct.mg_connection* %22, %23
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  br label %for.end

if.end12:                                         ; preds = %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end12
  %24 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %mgr13 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 3
  %25 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr13, align 8
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call14 = call %struct.mg_connection* @mg_next(%struct.mg_mgr* %25, %struct.mg_connection* %26)
  store %struct.mg_connection* %call14, %struct.mg_connection** %nc.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then11, %for.cond
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %cmp15 = icmp eq %struct.mg_connection* %27, null
  br i1 %cmp15, label %if.then16, label %if.end34

if.then16:                                        ; preds = %for.end
  %28 = bitcast %struct.mg_add_sock_opts* %opts to i8*
  call void @llvm.memset.p0i8.i64(i8* %28, i8 0, i64 32, i32 8, i1 false)
  %29 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %mgr17 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %29, i32 0, i32 3
  %30 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr17, align 8
  %31 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 15
  %32 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %call18 = call %struct.mg_connection* @mg_create_connection_base(%struct.mg_mgr* %30, void (%struct.mg_connection*, i32, i8*)* %32, %struct.mg_add_sock_opts* byval align 8 %opts)
  store %struct.mg_connection* %call18, %struct.mg_connection** %nc.addr, align 8
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %cmp19 = icmp ne %struct.mg_connection* %33, null
  br i1 %cmp19, label %if.then20, label %if.end33

if.then20:                                        ; preds = %if.then16
  %34 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %34, i32 0, i32 4
  %35 = load i32, i32* %sock, align 8
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock21 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %36, i32 0, i32 4
  store i32 %35, i32* %sock21, align 8
  %37 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %listener22 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %38, i32 0, i32 2
  store %struct.mg_connection* %37, %struct.mg_connection** %listener22, align 8
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa23 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %39, i32 0, i32 6
  %40 = bitcast %union.socket_address* %sa23 to i8*
  %41 = bitcast %union.socket_address* %sa to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 16, i32 4, i1 false)
  %42 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %proto_handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %42, i32 0, i32 12
  %43 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %proto_handler, align 8
  %44 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %proto_handler24 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %44, i32 0, i32 12
  store void (%struct.mg_connection*, i32, i8*)* %43, void (%struct.mg_connection*, i32, i8*)** %proto_handler24, align 8
  %45 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %45, i32 0, i32 16
  %46 = load i8*, i8** %user_data, align 8
  %47 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data25 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %47, i32 0, i32 16
  store i8* %46, i8** %user_data25, align 8
  %48 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %recv_mbuf_limit = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %48, i32 0, i32 7
  %49 = load i64, i64* %recv_mbuf_limit, align 8
  %50 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf_limit26 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %50, i32 0, i32 7
  store i64 %49, i64* %recv_mbuf_limit26, align 8
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags27 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %51, i32 0, i32 21
  store i64 2, i64* %flags27, align 8
  %52 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags28 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %52, i32 0, i32 21
  %53 = load i64, i64* %flags28, align 8
  %or29 = or i64 %53, 1024
  store i64 %or29, i64* %flags28, align 8
  %54 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %mgr30 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %54, i32 0, i32 3
  %55 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr30, align 8
  %56 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_add_conn(%struct.mg_mgr* %55, %struct.mg_connection* %56)
  %57 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %58 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data31 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %58, i32 0, i32 16
  %59 = load i8*, i8** %user_data31, align 8
  %60 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa32 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %60, i32 0, i32 6
  %61 = bitcast %union.socket_address* %sa32 to i8*
  call void @mg_call(%struct.mg_connection* %57, void (%struct.mg_connection*, i32, i8*)* null, i8* %59, i32 1, i8* %61)
  br label %if.end33

if.end33:                                         ; preds = %if.then20, %if.then16
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %for.end
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.end
  %62 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %cmp36 = icmp ne %struct.mg_connection* %62, null
  br i1 %cmp36, label %if.then37, label %if.end77

if.then37:                                        ; preds = %if.end35
  br label %do.body

do.body:                                          ; preds = %if.then37
  %call38 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2910)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then40, label %if.end48

if.then40:                                        ; preds = %do.body
  %63 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %64 = load i32, i32* %n, align 4
  %65 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa41 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %65, i32 0, i32 6
  %sin = bitcast %union.socket_address* %sa41 to %struct.sockaddr_in*
  %sin_addr = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin, i32 0, i32 3
  %coerce.dive = getelementptr inbounds %struct.in_addr, %struct.in_addr* %sin_addr, i32 0, i32 0
  %66 = load i32, i32* %coerce.dive, align 4
  %call42 = call i8* @inet_ntoa(i32 %66)
  %67 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sa43 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %67, i32 0, i32 6
  %sin44 = bitcast %union.socket_address* %sa43 to %struct.sockaddr_in*
  %sin_port = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %sin44, i32 0, i32 2
  %68 = load i16, i16* %sin_port, align 2
  %call45 = call zeroext i16 @_OSSwapInt16(i16 zeroext %68)
  %conv = zext i16 %call45 to i32
  %conv46 = trunc i32 %conv to i16
  %conv47 = zext i16 %conv46 to i32
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.174, i32 0, i32 0), %struct.mg_connection* %63, i32 %64, i8* %call42, i32 %conv47)
  br label %if.end48

if.end48:                                         ; preds = %if.then40, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end48
  %69 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %70 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %cmp49 = icmp eq %struct.mg_connection* %69, %70
  br i1 %cmp49, label %if.then51, label %if.else

if.then51:                                        ; preds = %do.end
  %71 = load i32, i32* %n, align 4
  %conv52 = sext i32 %71 to i64
  %72 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %72, i32 0, i32 8
  %len53 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %73 = load i64, i64* %len53, align 8
  %add = add i64 %73, %conv52
  store i64 %add, i64* %len53, align 8
  br label %if.end57

if.else:                                          ; preds = %do.end
  %74 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf54 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %74, i32 0, i32 8
  %75 = load i8*, i8** %buf.addr, align 8
  %76 = load i32, i32* %n, align 4
  %conv55 = sext i32 %76 to i64
  %call56 = call i64 @mbuf_append(%struct.mbuf* %recv_mbuf54, i8* %75, i64 %conv55)
  br label %if.end57

if.end57:                                         ; preds = %if.else, %if.then51
  %call58 = call double @mg_time()
  %conv59 = fptosi double %call58 to i64
  %77 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %77, i32 0, i32 10
  store i64 %conv59, i64* %last_io_time, align 8
  %78 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %last_io_time60 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %78, i32 0, i32 10
  store i64 %conv59, i64* %last_io_time60, align 8
  %79 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr61 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %79, i32 0, i32 3
  %80 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr61, align 8
  %tobool62 = icmp ne %struct.mg_mgr* %80, null
  br i1 %tobool62, label %land.lhs.true63, label %if.end70

land.lhs.true63:                                  ; preds = %if.end57
  %81 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr64 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %81, i32 0, i32 3
  %82 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr64, align 8
  %hexdump_file = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %82, i32 0, i32 1
  %83 = load i8*, i8** %hexdump_file, align 8
  %cmp65 = icmp ne i8* %83, null
  br i1 %cmp65, label %if.then67, label %if.end70

if.then67:                                        ; preds = %land.lhs.true63
  %84 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %85 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr68 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %85, i32 0, i32 3
  %86 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr68, align 8
  %hexdump_file69 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %86, i32 0, i32 1
  %87 = load i8*, i8** %hexdump_file69, align 8
  %88 = load i8*, i8** %buf.addr, align 8
  %89 = load i32, i32* %n, align 4
  call void @mg_hexdump_connection(%struct.mg_connection* %84, i8* %87, i8* %88, i32 %89, i32 3)
  br label %if.end70

if.end70:                                         ; preds = %if.then67, %land.lhs.true63, %if.end57
  %90 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %recv_mbuf71 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %90, i32 0, i32 8
  call void @mbuf_trim(%struct.mbuf* %recv_mbuf71)
  %91 = load i32, i32* %n, align 4
  %cmp72 = icmp ne i32 %91, 0
  br i1 %cmp72, label %if.then74, label %if.end76

if.then74:                                        ; preds = %if.end70
  %92 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %93 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data75 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %93, i32 0, i32 16
  %94 = load i8*, i8** %user_data75, align 8
  %95 = bitcast i32* %n to i8*
  call void @mg_call(%struct.mg_connection* %92, void (%struct.mg_connection*, i32, i8*)* null, i8* %94, i32 3, i8* %95)
  br label %if.end76

if.end76:                                         ; preds = %if.then74, %if.end70
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.end35
  br label %out

out:                                              ; preds = %if.end77, %if.then
  %96 = load %struct.mg_connection*, %struct.mg_connection** %lc, align 8
  %recv_mbuf78 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %96, i32 0, i32 8
  call void @mbuf_free(%struct.mbuf* %recv_mbuf78)
  %97 = load i32, i32* %n, align 4
  ret i32 %97
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_recv_tcp(%struct.mg_connection* %nc, i8* %buf, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %n = alloca i32, align 4
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i32 0, i32* %n, align 4
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %iface = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 20
  %1 = load %struct.mg_iface*, %struct.mg_iface** %iface, align 8
  %vtable = getelementptr inbounds %struct.mg_iface, %struct.mg_iface* %1, i32 0, i32 2
  %2 = load %struct.mg_iface_vtable*, %struct.mg_iface_vtable** %vtable, align 8
  %tcp_recv = getelementptr inbounds %struct.mg_iface_vtable, %struct.mg_iface_vtable* %2, i32 0, i32 11
  %3 = load i32 (%struct.mg_connection*, i8*, i64)*, i32 (%struct.mg_connection*, i8*, i64)** %tcp_recv, align 8
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %5 = load i8*, i8** %buf.addr, align 8
  %6 = load i64, i64* %len.addr, align 8
  %call = call i32 %3(%struct.mg_connection* %4, i8* %5, i64 %6)
  store i32 %call, i32* %n, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %call1 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 2838)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %8 = load i32, i32* %n, align 4
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.175, i32 0, i32 0), %struct.mg_connection* %7, i32 %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load i32, i32* %n, align 4
  %cmp = icmp sgt i32 %9, 0
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.end
  %10 = load i32, i32* %n, align 4
  %conv = sext i32 %10 to i64
  %11 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 8
  %len3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %12 = load i64, i64* %len3, align 8
  %add = add i64 %12, %conv
  store i64 %add, i64* %len3, align 8
  %call4 = call double @mg_time()
  %conv5 = fptosi double %call4 to i64
  %13 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %last_io_time = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %13, i32 0, i32 10
  store i64 %conv5, i64* %last_io_time, align 8
  %14 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %14, i32 0, i32 3
  %15 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %tobool6 = icmp ne %struct.mg_mgr* %15, null
  br i1 %tobool6, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.then2
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr7 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %16, i32 0, i32 3
  %17 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr7, align 8
  %hexdump_file = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %17, i32 0, i32 1
  %18 = load i8*, i8** %hexdump_file, align 8
  %cmp8 = icmp ne i8* %18, null
  br i1 %cmp8, label %if.then10, label %if.end13

if.then10:                                        ; preds = %land.lhs.true
  %19 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr11 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 3
  %21 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr11, align 8
  %hexdump_file12 = getelementptr inbounds %struct.mg_mgr, %struct.mg_mgr* %21, i32 0, i32 1
  %22 = load i8*, i8** %hexdump_file12, align 8
  %23 = load i8*, i8** %buf.addr, align 8
  %24 = load i32, i32* %n, align 4
  call void @mg_hexdump_connection(%struct.mg_connection* %19, i8* %22, i8* %23, i32 %24, i32 3)
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %land.lhs.true, %if.then2
  %25 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %25, i32 0, i32 8
  call void @mbuf_trim(%struct.mbuf* %recv_mbuf14)
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %27 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 16
  %28 = load i8*, i8** %user_data, align 8
  %29 = bitcast i32* %n to i8*
  call void @mg_call(%struct.mg_connection* %26, void (%struct.mg_connection*, i32, i8*)* null, i8* %28, i32 3, i8* %29)
  br label %if.end19

if.else:                                          ; preds = %do.end
  %30 = load i32, i32* %n, align 4
  %cmp15 = icmp slt i32 %30, 0
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.else
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %31, i32 0, i32 21
  %32 = load i64, i64* %flags, align 8
  %or = or i64 %32, 2048
  store i64 %or, i64* %flags, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end13
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf20 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %33, i32 0, i32 8
  call void @mbuf_trim(%struct.mbuf* %recv_mbuf20)
  %34 = load i32, i32* %n, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @isbyte(i32 %n) #0 {
entry:
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i32, i32* %n.addr, align 4
  %cmp = icmp sge i32 %0, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp sle i32 %1, 255
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

declare i32 @"\01_accept"(i32, %struct.sockaddr*, i32*) #3

declare extern_weak i32 @__darwin_check_fd_set_overflow(i32, i8*, i32) #3

declare i32* @__error() #3

declare i32 @"\01_getpeername"(i32, %struct.sockaddr*, i32*) #3

declare i64 @"\01_sendto"(i32, i8*, i64, i32, %struct.sockaddr*, i32) #3

declare i64 @"\01_recvfrom"(i32, i8*, i64, i32, %struct.sockaddr*, i32*) #3

; Function Attrs: nounwind readonly
declare i32 @isprint(i32) #8

declare i64 @strtoll(i8*, i8**, i32) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_free_proto_data_file(%struct.mg_http_proto_data_file* %d) #0 {
entry:
  %d.addr = alloca %struct.mg_http_proto_data_file*, align 8
  store %struct.mg_http_proto_data_file* %d, %struct.mg_http_proto_data_file** %d.addr, align 8
  %0 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8
  %cmp = icmp ne %struct.mg_http_proto_data_file* %0, null
  br i1 %cmp, label %if.then, label %if.end5

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8
  %fp = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %1, i32 0, i32 0
  %2 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %cmp1 = icmp ne %struct.__sFILE* %2, null
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %3 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8
  %fp3 = getelementptr inbounds %struct.mg_http_proto_data_file, %struct.mg_http_proto_data_file* %3, i32 0, i32 0
  %4 = load %struct.__sFILE*, %struct.__sFILE** %fp3, align 8
  %call = call i32 @fclose(%struct.__sFILE* %4)
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %5 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8
  %6 = bitcast %struct.mg_http_proto_data_file* %5 to i8*
  %7 = load %struct.mg_http_proto_data_file*, %struct.mg_http_proto_data_file** %d.addr, align 8
  %8 = bitcast %struct.mg_http_proto_data_file* %7 to i8*
  %9 = call i64 @llvm.objectsize.i64.p0i8(i8* %8, i1 false)
  %call4 = call i8* @__memset_chk(i8* %6, i32 0, i64 32, i64 %9) #5
  br label %if.end5

if.end5:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_proto_data_destructor(i8* %proto_data) #0 {
entry:
  %proto_data.addr = alloca i8*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  store i8* %proto_data, i8** %proto_data.addr, align 8
  %0 = load i8*, i8** %proto_data.addr, align 8
  %1 = bitcast i8* %0 to %struct.mg_http_proto_data*
  store %struct.mg_http_proto_data* %1, %struct.mg_http_proto_data** %pd, align 8
  %2 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %file = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %2, i32 0, i32 0
  call void @mg_http_free_proto_data_file(%struct.mg_http_proto_data_file* %file)
  %3 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %3, i32 0, i32 1
  call void @mg_http_free_proto_data_cgi(%struct.mg_http_proto_data_cgi* %cgi)
  %4 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %endpoints = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %4, i32 0, i32 4
  call void @mg_http_free_proto_data_endpoints(%struct.mg_http_endpoint** %endpoints)
  %5 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %5, i32 0, i32 6
  call void @mg_http_free_reverse_proxy_data(%struct.mg_reverse_proxy_data* %reverse_proxy_data)
  %6 = load i8*, i8** %proto_data.addr, align 8
  call void @free(i8* %6)
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_free_proto_data_cgi(%struct.mg_http_proto_data_cgi* %d) #0 {
entry:
  %d.addr = alloca %struct.mg_http_proto_data_cgi*, align 8
  store %struct.mg_http_proto_data_cgi* %d, %struct.mg_http_proto_data_cgi** %d.addr, align 8
  %0 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8
  %cmp = icmp eq %struct.mg_http_proto_data_cgi* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8
  %cgi_nc = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %1, i32 0, i32 0
  %2 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc, align 8
  %cmp1 = icmp ne %struct.mg_connection* %2, null
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8
  %cgi_nc3 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %3, i32 0, i32 0
  %4 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc3, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 21
  %5 = load i64, i64* %flags, align 8
  %or = or i64 %5, 2048
  store i64 %or, i64* %flags, align 8
  %6 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8
  %cgi_nc4 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %6, i32 0, i32 0
  %7 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc4, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 16
  store i8* null, i8** %user_data, align 8
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %8 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8
  %9 = bitcast %struct.mg_http_proto_data_cgi* %8 to i8*
  %10 = load %struct.mg_http_proto_data_cgi*, %struct.mg_http_proto_data_cgi** %d.addr, align 8
  %11 = bitcast %struct.mg_http_proto_data_cgi* %10 to i8*
  %12 = call i64 @llvm.objectsize.i64.p0i8(i8* %11, i1 false)
  %call = call i8* @__memset_chk(i8* %9, i32 0, i64 8, i64 %12) #5
  br label %return

return:                                           ; preds = %if.end5, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_free_proto_data_endpoints(%struct.mg_http_endpoint** %ep) #0 {
entry:
  %ep.addr = alloca %struct.mg_http_endpoint**, align 8
  %current = alloca %struct.mg_http_endpoint*, align 8
  %tmp = alloca %struct.mg_http_endpoint*, align 8
  store %struct.mg_http_endpoint** %ep, %struct.mg_http_endpoint*** %ep.addr, align 8
  %0 = load %struct.mg_http_endpoint**, %struct.mg_http_endpoint*** %ep.addr, align 8
  %1 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %0, align 8
  store %struct.mg_http_endpoint* %1, %struct.mg_http_endpoint** %current, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8
  %cmp = icmp ne %struct.mg_http_endpoint* %2, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8
  %next = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %3, i32 0, i32 0
  %4 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %next, align 8
  store %struct.mg_http_endpoint* %4, %struct.mg_http_endpoint** %tmp, align 8
  %5 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8
  %uri_pattern = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %5, i32 0, i32 1
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri_pattern, i32 0, i32 0
  %6 = load i8*, i8** %p, align 8
  call void @free(i8* %6)
  %7 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8
  %auth_domain = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %7, i32 0, i32 2
  %8 = load i8*, i8** %auth_domain, align 8
  call void @free(i8* %8)
  %9 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8
  %auth_file = getelementptr inbounds %struct.mg_http_endpoint, %struct.mg_http_endpoint* %9, i32 0, i32 3
  %10 = load i8*, i8** %auth_file, align 8
  call void @free(i8* %10)
  %11 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %current, align 8
  %12 = bitcast %struct.mg_http_endpoint* %11 to i8*
  call void @free(i8* %12)
  %13 = load %struct.mg_http_endpoint*, %struct.mg_http_endpoint** %tmp, align 8
  store %struct.mg_http_endpoint* %13, %struct.mg_http_endpoint** %current, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %14 = load %struct.mg_http_endpoint**, %struct.mg_http_endpoint*** %ep.addr, align 8
  store %struct.mg_http_endpoint* null, %struct.mg_http_endpoint** %14, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_free_reverse_proxy_data(%struct.mg_reverse_proxy_data* %rpd) #0 {
entry:
  %rpd.addr = alloca %struct.mg_reverse_proxy_data*, align 8
  %pd = alloca %struct.mg_http_proto_data*, align 8
  store %struct.mg_reverse_proxy_data* %rpd, %struct.mg_reverse_proxy_data** %rpd.addr, align 8
  %0 = load %struct.mg_reverse_proxy_data*, %struct.mg_reverse_proxy_data** %rpd.addr, align 8
  %linked_conn = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %0, i32 0, i32 0
  %1 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn, align 8
  %cmp = icmp ne %struct.mg_connection* %1, null
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_reverse_proxy_data*, %struct.mg_reverse_proxy_data** %rpd.addr, align 8
  %linked_conn1 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %2, i32 0, i32 0
  %3 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn1, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %3)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %pd, align 8
  %4 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %4, i32 0, i32 6
  %linked_conn2 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data, i32 0, i32 0
  %5 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn2, align 8
  %cmp3 = icmp ne %struct.mg_connection* %5, null
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %6 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data5 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %6, i32 0, i32 6
  %linked_conn6 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data5, i32 0, i32 0
  %7 = load %struct.mg_connection*, %struct.mg_connection** %linked_conn6, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 21
  %8 = load i64, i64* %flags, align 8
  %or = or i64 %8, 1024
  store i64 %or, i64* %flags, align 8
  %9 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %pd, align 8
  %reverse_proxy_data7 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %9, i32 0, i32 6
  %linked_conn8 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %reverse_proxy_data7, i32 0, i32 0
  store %struct.mg_connection* null, %struct.mg_connection** %linked_conn8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %10 = load %struct.mg_reverse_proxy_data*, %struct.mg_reverse_proxy_data** %rpd.addr, align 8
  %linked_conn9 = getelementptr inbounds %struct.mg_reverse_proxy_data, %struct.mg_reverse_proxy_data* %10, i32 0, i32 0
  store %struct.mg_connection* null, %struct.mg_connection** %linked_conn9, align 8
  br label %if.end10

if.end10:                                         ; preds = %if.end, %entry
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mg_http_parse_chunk(i8* %buf, i64 %len, i8** %chunk_data, i64* %chunk_len) #0 {
entry:
  %retval = alloca i64, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %chunk_data.addr = alloca i8**, align 8
  %chunk_len.addr = alloca i64*, align 8
  %s = alloca i8*, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  store i8** %chunk_data, i8*** %chunk_data.addr, align 8
  store i64* %chunk_len, i64** %chunk_len.addr, align 8
  %0 = load i8*, i8** %buf.addr, align 8
  store i8* %0, i8** %s, align 8
  store i64 0, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %1 = load i64, i64* %i, align 8
  %2 = load i64, i64* %len.addr, align 8
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i8*, i8** %s, align 8
  %4 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  %call = call i32 @isxdigit(i32 %conv) #15
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %tobool, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load i64, i64* %n, align 8
  %mul = mul i64 %7, 16
  store i64 %mul, i64* %n, align 8
  %8 = load i8*, i8** %s, align 8
  %9 = load i64, i64* %i, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %8, i64 %9
  %10 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %10 to i32
  %cmp3 = icmp sge i32 %conv2, 48
  br i1 %cmp3, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %while.body
  %11 = load i8*, i8** %s, align 8
  %12 = load i64, i64* %i, align 8
  %arrayidx5 = getelementptr inbounds i8, i8* %11, i64 %12
  %13 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %13 to i32
  %cmp7 = icmp sle i32 %conv6, 57
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %14 = load i8*, i8** %s, align 8
  %15 = load i64, i64* %i, align 8
  %arrayidx9 = getelementptr inbounds i8, i8* %14, i64 %15
  %16 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %16 to i32
  %sub = sub nsw i32 %conv10, 48
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %while.body
  %17 = load i8*, i8** %s, align 8
  %18 = load i64, i64* %i, align 8
  %arrayidx11 = getelementptr inbounds i8, i8* %17, i64 %18
  %19 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %19 to i32
  %call13 = call i32 @tolower(i32 %conv12) #15
  %sub14 = sub nsw i32 %call13, 97
  %add = add nsw i32 %sub14, 10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %add, %cond.false ]
  %conv15 = sext i32 %cond to i64
  %20 = load i64, i64* %n, align 8
  %add16 = add i64 %20, %conv15
  store i64 %add16, i64* %n, align 8
  %21 = load i64, i64* %i, align 8
  %inc = add i64 %21, 1
  store i64 %inc, i64* %i, align 8
  %22 = load i64, i64* %i, align 8
  %cmp17 = icmp ugt i64 %22, 6
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end
  br label %while.cond

while.end:                                        ; preds = %land.end
  %23 = load i64, i64* %i, align 8
  %cmp19 = icmp eq i64 %23, 0
  br i1 %cmp19, label %if.then35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %24 = load i64, i64* %i, align 8
  %add21 = add i64 %24, 2
  %25 = load i64, i64* %len.addr, align 8
  %cmp22 = icmp ugt i64 %add21, %25
  br i1 %cmp22, label %if.then35, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %26 = load i8*, i8** %s, align 8
  %27 = load i64, i64* %i, align 8
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i64 %27
  %28 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %28 to i32
  %cmp27 = icmp ne i32 %conv26, 13
  br i1 %cmp27, label %if.then35, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %lor.lhs.false24
  %29 = load i8*, i8** %s, align 8
  %30 = load i64, i64* %i, align 8
  %add30 = add i64 %30, 1
  %arrayidx31 = getelementptr inbounds i8, i8* %29, i64 %add30
  %31 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %31 to i32
  %cmp33 = icmp ne i32 %conv32, 10
  br i1 %cmp33, label %if.then35, label %if.end36

if.then35:                                        ; preds = %lor.lhs.false29, %lor.lhs.false24, %lor.lhs.false, %while.end
  store i64 0, i64* %retval, align 8
  br label %return

if.end36:                                         ; preds = %lor.lhs.false29
  %32 = load i64, i64* %i, align 8
  %add37 = add i64 %32, 2
  store i64 %add37, i64* %i, align 8
  %33 = load i8*, i8** %s, align 8
  %34 = load i64, i64* %i, align 8
  %add.ptr = getelementptr inbounds i8, i8* %33, i64 %34
  %35 = load i8**, i8*** %chunk_data.addr, align 8
  store i8* %add.ptr, i8** %35, align 8
  %36 = load i64, i64* %n, align 8
  %37 = load i64*, i64** %chunk_len.addr, align 8
  store i64 %36, i64* %37, align 8
  %38 = load i64, i64* %n, align 8
  %39 = load i64, i64* %i, align 8
  %add38 = add i64 %39, %38
  store i64 %add38, i64* %i, align 8
  %40 = load i64, i64* %i, align 8
  %cmp39 = icmp eq i64 %40, 0
  br i1 %cmp39, label %if.then56, label %lor.lhs.false41

lor.lhs.false41:                                  ; preds = %if.end36
  %41 = load i64, i64* %i, align 8
  %add42 = add i64 %41, 2
  %42 = load i64, i64* %len.addr, align 8
  %cmp43 = icmp ugt i64 %add42, %42
  br i1 %cmp43, label %if.then56, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false41
  %43 = load i8*, i8** %s, align 8
  %44 = load i64, i64* %i, align 8
  %arrayidx46 = getelementptr inbounds i8, i8* %43, i64 %44
  %45 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %45 to i32
  %cmp48 = icmp ne i32 %conv47, 13
  br i1 %cmp48, label %if.then56, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %lor.lhs.false45
  %46 = load i8*, i8** %s, align 8
  %47 = load i64, i64* %i, align 8
  %add51 = add i64 %47, 1
  %arrayidx52 = getelementptr inbounds i8, i8* %46, i64 %add51
  %48 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %48 to i32
  %cmp54 = icmp ne i32 %conv53, 10
  br i1 %cmp54, label %if.then56, label %if.end57

if.then56:                                        ; preds = %lor.lhs.false50, %lor.lhs.false45, %lor.lhs.false41, %if.end36
  store i64 0, i64* %retval, align 8
  br label %return

if.end57:                                         ; preds = %lor.lhs.false50
  %49 = load i64, i64* %i, align 8
  %add58 = add i64 %49, 2
  store i64 %add58, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end57, %if.then56, %if.then35, %if.then
  %50 = load i64, i64* %retval, align 8
  ret i64 %50
}

declare i64 @"\01_strftime"(i8*, i64, i8*, %struct.tm*) #3

declare %struct.tm* @gmtime(i64*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal void @altbuf_append(%struct.altbuf* %ab, i8 signext %c) #0 {
entry:
  %ab.addr = alloca %struct.altbuf*, align 8
  %c.addr = alloca i8, align 1
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8
  store i8 %c, i8* %c.addr, align 1
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %0, i32 0, i32 2
  %1 = load i64, i64* %len, align 8
  %2 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %user_buf_size = getelementptr inbounds %struct.altbuf, %struct.altbuf* %2, i32 0, i32 3
  %3 = load i64, i64* %user_buf_size, align 8
  %cmp = icmp ult i64 %1, %3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load i8, i8* %c.addr, align 1
  %5 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %user_buf = getelementptr inbounds %struct.altbuf, %struct.altbuf* %5, i32 0, i32 1
  %6 = load i8*, i8** %user_buf, align 8
  %7 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len1 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %7, i32 0, i32 2
  %8 = load i64, i64* %len1, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %len1, align 8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %8
  store i8 %4, i8* %arrayidx, align 1
  br label %if.end15

if.else:                                          ; preds = %entry
  %9 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len2 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %9, i32 0, i32 2
  %10 = load i64, i64* %len2, align 8
  %cmp3 = icmp ugt i64 %10, 0
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %11 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %m = getelementptr inbounds %struct.altbuf, %struct.altbuf* %11, i32 0, i32 0
  %len4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %m, i32 0, i32 1
  %12 = load i64, i64* %len4, align 8
  %cmp5 = icmp eq i64 %12, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %land.lhs.true
  %13 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %m7 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %13, i32 0, i32 0
  %14 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %user_buf8 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %14, i32 0, i32 1
  %15 = load i8*, i8** %user_buf8, align 8
  %16 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len9 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %16, i32 0, i32 2
  %17 = load i64, i64* %len9, align 8
  %call = call i64 @mbuf_append(%struct.mbuf* %m7, i8* %15, i64 %17)
  br label %if.end

if.end:                                           ; preds = %if.then6, %land.lhs.true, %if.else
  %18 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %m10 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %18, i32 0, i32 0
  %call11 = call i64 @mbuf_append(%struct.mbuf* %m10, i8* %c.addr, i64 1)
  %19 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %m12 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %19, i32 0, i32 0
  %len13 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %m12, i32 0, i32 1
  %20 = load i64, i64* %len13, align 8
  %21 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len14 = getelementptr inbounds %struct.altbuf, %struct.altbuf* %21, i32 0, i32 2
  store i64 %20, i64* %len14, align 8
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @altbuf_reset(%struct.altbuf* %ab) #0 {
entry:
  %ab.addr = alloca %struct.altbuf*, align 8
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %m = getelementptr inbounds %struct.altbuf, %struct.altbuf* %0, i32 0, i32 0
  call void @mbuf_free(%struct.mbuf* %m)
  %1 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %1, i32 0, i32 2
  store i64 0, i64* %len, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @altbuf_reallocated(%struct.altbuf* %ab) #0 {
entry:
  %ab.addr = alloca %struct.altbuf*, align 8
  store %struct.altbuf* %ab, %struct.altbuf** %ab.addr, align 8
  %0 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %len = getelementptr inbounds %struct.altbuf, %struct.altbuf* %0, i32 0, i32 2
  %1 = load i64, i64* %len, align 8
  %2 = load %struct.altbuf*, %struct.altbuf** %ab.addr, align 8
  %user_buf_size = getelementptr inbounds %struct.altbuf, %struct.altbuf* %2, i32 0, i32 3
  %3 = load i64, i64* %user_buf_size, align 8
  %cmp = icmp ugt i64 %1, %3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

declare i64 @strtoul(i8*, i8**, i32) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #2

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_find_index_file(i8* %path, i8* %list, i8** %index_file, %struct.stat* %stp) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %list.addr = alloca i8*, align 8
  %index_file.addr = alloca i8**, align 8
  %stp.addr = alloca %struct.stat*, align 8
  %vec = alloca %struct.mg_str, align 8
  %path_len = alloca i64, align 8
  %found = alloca i32, align 4
  %st = alloca %struct.stat, align 8
  %len = alloca i64, align 8
  store i8* %path, i8** %path.addr, align 8
  store i8* %list, i8** %list.addr, align 8
  store i8** %index_file, i8*** %index_file.addr, align 8
  store %struct.stat* %stp, %struct.stat** %stp.addr, align 8
  %0 = load i8*, i8** %path.addr, align 8
  %call = call i64 @strlen(i8* %0)
  store i64 %call, i64* %path_len, align 8
  store i32 0, i32* %found, align 4
  %1 = load i8**, i8*** %index_file.addr, align 8
  store i8* null, i8** %1, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end16, %entry
  %2 = load i8*, i8** %list.addr, align 8
  %call1 = call i8* @mg_next_comma_list_entry(i8* %2, %struct.mg_str* %vec, %struct.mg_str* null)
  store i8* %call1, i8** %list.addr, align 8
  %cmp = icmp ne i8* %call1, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i64, i64* %path_len, align 8
  %add = add i64 %3, 1
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 1
  %4 = load i64, i64* %len2, align 8
  %add3 = add i64 %add, %4
  %add4 = add i64 %add3, 1
  store i64 %add4, i64* %len, align 8
  %5 = load i8**, i8*** %index_file.addr, align 8
  %6 = load i8*, i8** %5, align 8
  %7 = load i64, i64* %len, align 8
  %call5 = call i8* @realloc(i8* %6, i64 %7) #12
  %8 = load i8**, i8*** %index_file.addr, align 8
  store i8* %call5, i8** %8, align 8
  %9 = load i8**, i8*** %index_file.addr, align 8
  %10 = load i8*, i8** %9, align 8
  %cmp6 = icmp eq i8* %10, null
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %while.end

if.end:                                           ; preds = %while.body
  %11 = load i8**, i8*** %index_file.addr, align 8
  %12 = load i8*, i8** %11, align 8
  %13 = load i64, i64* %len, align 8
  %14 = load i8**, i8*** %index_file.addr, align 8
  %15 = load i8*, i8** %14, align 8
  %16 = call i64 @llvm.objectsize.i64.p0i8(i8* %15, i1 false)
  %17 = load i8*, i8** %path.addr, align 8
  %len7 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 1
  %18 = load i64, i64* %len7, align 8
  %conv = trunc i64 %18 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %vec, i32 0, i32 0
  %19 = load i8*, i8** %p, align 8
  %call8 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %12, i64 %13, i32 0, i64 %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.208, i32 0, i32 0), i8* %17, i32 47, i32 %conv, i8* %19)
  %20 = load i8**, i8*** %index_file.addr, align 8
  %21 = load i8*, i8** %20, align 8
  %call9 = call i32 @mg_stat(i8* %21, %struct.stat* %st)
  %cmp10 = icmp eq i32 %call9, 0
  br i1 %cmp10, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %if.end
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %st, i32 0, i32 1
  %22 = load i16, i16* %st_mode, align 4
  %conv12 = zext i16 %22 to i32
  %and = and i32 %conv12, 61440
  %cmp13 = icmp eq i32 %and, 32768
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true
  %23 = load %struct.stat*, %struct.stat** %stp.addr, align 8
  %24 = bitcast %struct.stat* %23 to i8*
  %25 = bitcast %struct.stat* %st to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 144, i32 8, i1 false)
  store i32 1, i32* %found, align 4
  br label %while.end

if.end16:                                         ; preds = %land.lhs.true, %if.end
  br label %while.cond

while.end:                                        ; preds = %if.then15, %if.then, %while.cond
  %26 = load i32, i32* %found, align 4
  %tobool = icmp ne i32 %26, 0
  br i1 %tobool, label %if.end18, label %if.then17

if.then17:                                        ; preds = %while.end
  %27 = load i8**, i8*** %index_file.addr, align 8
  %28 = load i8*, i8** %27, align 8
  call void @free(i8* %28)
  %29 = load i8**, i8*** %index_file.addr, align 8
  store i8* null, i8** %29, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %while.end
  br label %do.body

do.body:                                          ; preds = %if.end18
  %call19 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7908)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %do.body
  %30 = load i8*, i8** %path.addr, align 8
  %31 = load i8**, i8*** %index_file.addr, align 8
  %32 = load i8*, i8** %31, align 8
  %tobool22 = icmp ne i8* %32, null
  br i1 %tobool22, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then21
  %33 = load i8**, i8*** %index_file.addr, align 8
  %34 = load i8*, i8** %33, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then21
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %34, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.false ]
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.209, i32 0, i32 0), i8* %30, i8* %cond)
  br label %if.end23

if.end23:                                         ; preds = %cond.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end23
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_handle_cgi(%struct.mg_connection* %nc, i8* %prog, %struct.mg_str* %path_info, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %prog.addr = alloca i8*, align 8
  %path_info.addr = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %blk = alloca %struct.mg_cgi_env_block, align 8
  %dir = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %fds = alloca [2 x i32], align 4
  %sa = alloca %struct.sigaction, align 8
  %cgi_nc = alloca %struct.mg_connection*, align 8
  %cgi_pd = alloca %struct.mg_http_proto_data*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %prog, i8** %prog.addr, align 8
  store %struct.mg_str* %path_info, %struct.mg_str** %path_info.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 9287)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i8*, i8** %prog.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.210, i32 0, i32 0), %struct.mg_connection* %0, i8* %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load i8*, i8** %prog.addr, align 8
  %4 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %5 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %6 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_prepare_cgi_environment(%struct.mg_connection* %2, i8* %3, %struct.mg_str* %4, %struct.http_message* %5, %struct.mg_serve_http_opts* %6, %struct.mg_cgi_env_block* %blk)
  %7 = load i8*, i8** %prog.addr, align 8
  %call1 = call i8* @strrchr(i8* %7, i32 47)
  store i8* %call1, i8** %p, align 8
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.end
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir, i32 0, i32 0
  %call3 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end6

if.else:                                          ; preds = %do.end
  %arraydecay4 = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir, i32 0, i32 0
  %8 = load i8*, i8** %p, align 8
  %9 = load i8*, i8** %prog.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv = trunc i64 %sub.ptr.sub to i32
  %10 = load i8*, i8** %prog.addr, align 8
  %call5 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay4, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138, i32 0, i32 0), i32 %conv, i8* %10)
  %11 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %add.ptr, i8** %prog.addr, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then2
  %arraydecay7 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i32 0, i32 0
  %call8 = call i32 @mg_socketpair(i32* %arraydecay7, i32 1)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end6
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 21
  %13 = load i64, i64* %flags, align 8
  %or = or i64 %13, 2048
  store i64 %or, i64* %flags, align 8
  br label %return

if.end11:                                         ; preds = %if.end6
  %sa_mask = getelementptr inbounds %struct.sigaction, %struct.sigaction* %sa, i32 0, i32 1
  store i32 0, i32* %sa_mask, align 8
  %__sigaction_u = getelementptr inbounds %struct.sigaction, %struct.sigaction* %sa, i32 0, i32 0
  %__sa_handler = bitcast %union.__sigaction_u* %__sigaction_u to void (i32)**
  store void (i32)* inttoptr (i64 1 to void (i32)*), void (i32)** %__sa_handler, align 8
  %sa_flags = getelementptr inbounds %struct.sigaction, %struct.sigaction* %sa, i32 0, i32 2
  store i32 0, i32* %sa_flags, align 4
  %call12 = call i32 @sigaction(i32 20, %struct.sigaction* %sa, %struct.sigaction* null)
  %14 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %cgi_interpreter = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %14, i32 0, i32 13
  %15 = load i8*, i8** %cgi_interpreter, align 8
  %16 = load i8*, i8** %prog.addr, align 8
  %buf = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %blk, i32 0, i32 1
  %arraydecay13 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %vars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %blk, i32 0, i32 2
  %arraydecay14 = getelementptr inbounds [64 x i8*], [64 x i8*]* %vars, i32 0, i32 0
  %arraydecay15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %dir, i32 0, i32 0
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i64 0, i64 1
  %17 = load i32, i32* %arrayidx, align 4
  %call16 = call i32 @mg_start_process(i8* %15, i8* %16, i8* %arraydecay13, i8** %arraydecay14, i8* %arraydecay15, i32 %17)
  %cmp17 = icmp ne i32 %call16, 0
  br i1 %cmp17, label %if.then19, label %if.else41

if.then19:                                        ; preds = %if.end11
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %mgr = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %18, i32 0, i32 3
  %19 = load %struct.mg_mgr*, %struct.mg_mgr** %mgr, align 8
  %arrayidx20 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i64 0, i64 0
  %20 = load i32, i32* %arrayidx20, align 4
  %call21 = call %struct.mg_connection* @mg_add_sock(%struct.mg_mgr* %19, i32 %20, void (%struct.mg_connection*, i32, i8*)* @mg_cgi_ev_handler)
  store %struct.mg_connection* %call21, %struct.mg_connection** %cgi_nc, align 8
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call22 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %21)
  store %struct.mg_http_proto_data* %call22, %struct.mg_http_proto_data** %cgi_pd, align 8
  %22 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc, align 8
  %23 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %cgi_pd, align 8
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %23, i32 0, i32 1
  %cgi_nc23 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi, i32 0, i32 0
  store %struct.mg_connection* %22, %struct.mg_connection** %cgi_nc23, align 8
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %25 = bitcast %struct.mg_connection* %24 to i8*
  %26 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %cgi_pd, align 8
  %cgi24 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %26, i32 0, i32 1
  %cgi_nc25 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi24, i32 0, i32 0
  %27 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc25, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %27, i32 0, i32 16
  store i8* %25, i8** %user_data, align 8
  %28 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags26 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %28, i32 0, i32 21
  %29 = load i64, i64* %flags26, align 8
  %or27 = or i64 %29, 1048576
  store i64 %or27, i64* %flags26, align 8
  %30 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body = getelementptr inbounds %struct.http_message, %struct.http_message* %30, i32 0, i32 1
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body, i32 0, i32 1
  %31 = load i64, i64* %len, align 8
  %cmp28 = icmp ugt i64 %31, 0
  br i1 %cmp28, label %if.then30, label %if.end38

if.then30:                                        ; preds = %if.then19
  %32 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %cgi_pd, align 8
  %cgi31 = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %32, i32 0, i32 1
  %cgi_nc32 = getelementptr inbounds %struct.mg_http_proto_data_cgi, %struct.mg_http_proto_data_cgi* %cgi31, i32 0, i32 0
  %33 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc32, align 8
  %34 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body33 = getelementptr inbounds %struct.http_message, %struct.http_message* %34, i32 0, i32 1
  %p34 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body33, i32 0, i32 0
  %35 = load i8*, i8** %p34, align 8
  %36 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %body35 = getelementptr inbounds %struct.http_message, %struct.http_message* %36, i32 0, i32 1
  %len36 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %body35, i32 0, i32 1
  %37 = load i64, i64* %len36, align 8
  %conv37 = trunc i64 %37 to i32
  call void @mg_send(%struct.mg_connection* %33, i8* %35, i32 %conv37)
  br label %if.end38

if.end38:                                         ; preds = %if.then30, %if.then19
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %38, i32 0, i32 8
  %39 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf39 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %39, i32 0, i32 8
  %len40 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf39, i32 0, i32 1
  %40 = load i64, i64* %len40, align 8
  call void @mbuf_remove(%struct.mbuf* %recv_mbuf, i64 %40)
  br label %if.end44

if.else41:                                        ; preds = %if.end11
  %arrayidx42 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i64 0, i64 0
  %41 = load i32, i32* %arrayidx42, align 4
  %call43 = call i32 @"\01_close"(i32 %41)
  %42 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %42, i32 500, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.211, i32 0, i32 0))
  br label %if.end44

if.end44:                                         ; preds = %if.else41, %if.end38
  %arrayidx45 = getelementptr inbounds [2 x i32], [2 x i32]* %fds, i64 0, i64 1
  %43 = load i32, i32* %arrayidx45, align 4
  %call46 = call i32 @"\01_close"(i32 %43)
  br label %return

return:                                           ; preds = %if.end44, %if.then10
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_is_file_hidden(i8* %path, %struct.mg_serve_http_opts* %opts, i32 %exclude_specials) #0 {
entry:
  %path.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %exclude_specials.addr = alloca i32, align 4
  %p1 = alloca i8*, align 8
  %p2 = alloca i8*, align 8
  %pdir = alloca i8*, align 8
  store i8* %path, i8** %path.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  store i32 %exclude_specials, i32* %exclude_specials.addr, align 4
  %0 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %per_directory_auth_file = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %0, i32 0, i32 2
  %1 = load i8*, i8** %per_directory_auth_file, align 8
  store i8* %1, i8** %p1, align 8
  %2 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %hidden_file_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %2, i32 0, i32 11
  %3 = load i8*, i8** %hidden_file_pattern, align 8
  store i8* %3, i8** %p2, align 8
  %4 = load i8*, i8** %path.addr, align 8
  %call = call i8* @strrchr(i8* %4, i32 47)
  store i8* %call, i8** %pdir, align 8
  %5 = load i8*, i8** %pdir, align 8
  %cmp = icmp ne i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %pdir, align 8
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 1
  store i8* %add.ptr, i8** %path.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %exclude_specials.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false5

land.lhs.true:                                    ; preds = %if.end
  %8 = load i8*, i8** %path.addr, align 8
  %call1 = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i32 0, i32 0))
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load i8*, i8** %path.addr, align 8
  %call3 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.35, i32 0, i32 0))
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %lor.lhs.false5, label %lor.end

lor.lhs.false5:                                   ; preds = %lor.lhs.false, %if.end
  %10 = load i8*, i8** %p1, align 8
  %cmp6 = icmp ne i8* %10, null
  br i1 %cmp6, label %land.lhs.true7, label %lor.rhs

land.lhs.true7:                                   ; preds = %lor.lhs.false5
  %11 = load i8*, i8** %p1, align 8
  %12 = load i8*, i8** %p1, align 8
  %call8 = call i64 @strlen(i8* %12)
  %conv = trunc i64 %call8 to i32
  %13 = load i8*, i8** %path.addr, align 8
  %call9 = call i64 @mg_match_prefix(i8* %11, i32 %conv, i8* %13)
  %14 = load i8*, i8** %p1, align 8
  %call10 = call i64 @strlen(i8* %14)
  %cmp11 = icmp eq i64 %call9, %call10
  br i1 %cmp11, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true7, %lor.lhs.false5
  %15 = load i8*, i8** %p2, align 8
  %cmp13 = icmp ne i8* %15, null
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %16 = load i8*, i8** %p2, align 8
  %17 = load i8*, i8** %p2, align 8
  %call15 = call i64 @strlen(i8* %17)
  %conv16 = trunc i64 %call15 to i32
  %18 = load i8*, i8** %path.addr, align 8
  %call17 = call i64 @mg_match_prefix(i8* %16, i32 %conv16, i8* %18)
  %cmp18 = icmp ugt i64 %call17, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %19 = phi i1 [ false, %lor.rhs ], [ %cmp18, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true7, %lor.lhs.false, %land.lhs.true
  %20 = phi i1 [ true, %land.lhs.true7 ], [ true, %lor.lhs.false ], [ true, %land.lhs.true ], [ %19, %land.end ]
  %lor.ext = zext i1 %20 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_is_creation_request(%struct.http_message* %hm) #0 {
entry:
  %hm.addr = alloca %struct.http_message*, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  %0 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %0, i32 0, i32 2
  %call = call i32 @mg_vcmp(%struct.mg_str* %method, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.253, i32 0, i32 0))
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method1 = getelementptr inbounds %struct.http_message, %struct.http_message* %1, i32 0, i32 2
  %call2 = call i32 @mg_vcmp(%struct.mg_str* %method1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.41, i32 0, i32 0))
  %cmp3 = icmp eq i32 %call2, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp3, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_send_options(%struct.mg_connection* %nc, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %1, i32 0, i32 15
  %2 = load i8*, i8** %extra_headers, align 8
  call void @mg_send_response_line(%struct.mg_connection* %0, i32 200, i8* %2)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.254, i32 0, i32 0))
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %4, i32 0, i32 21
  %5 = load i64, i64* %flags, align 8
  %or = or i64 %5, 1024
  store i64 %or, i64* %flags, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_send_directory_listing(%struct.mg_connection* %nc, i8* %dir, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %dir.addr = alloca i8*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %dir, i8** %dir.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %1, i32 0, i32 15
  %2 = load i8*, i8** %extra_headers, align 8
  call void @mg_send_response_line(%struct.mg_connection* %0, i32 200, i8* %2)
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.257, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.232, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.258, i32 0, i32 0))
  %4 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %5 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %5, i32 0, i32 3
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %6 = load i64, i64* %len, align 8
  %conv = trunc i64 %6 to i32
  %7 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri1 = getelementptr inbounds %struct.http_message, %struct.http_message* %7, i32 0, i32 3
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri1, i32 0, i32 0
  %8 = load i8*, i8** %p, align 8
  %9 = load i8*, i8** @mg_send_directory_listing.sort_js_code, align 8
  %10 = load i8*, i8** @mg_send_directory_listing.sort_js_code2, align 8
  %11 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri2 = getelementptr inbounds %struct.http_message, %struct.http_message* %11, i32 0, i32 3
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri2, i32 0, i32 1
  %12 = load i64, i64* %len3, align 8
  %conv4 = trunc i64 %12 to i32
  %13 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri5 = getelementptr inbounds %struct.http_message, %struct.http_message* %13, i32 0, i32 3
  %p6 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri5, i32 0, i32 0
  %14 = load i8*, i8** %p6, align 8
  call void (%struct.mg_connection*, i8*, ...) @mg_printf_http_chunk(%struct.mg_connection* %4, i8* getelementptr inbounds ([391 x i8], [391 x i8]* @.str.259, i32 0, i32 0), i32 %conv, i8* %8, i8* %9, i8* %10, i32 %conv4, i8* %14)
  %15 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %16 = load i8*, i8** %dir.addr, align 8
  %17 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_scan_directory(%struct.mg_connection* %15, i8* %16, %struct.mg_serve_http_opts* %17, void (%struct.mg_connection*, i8*, %struct.stat*)* @mg_print_dir_entry)
  %18 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %19 = load i8*, i8** @mg_version_header, align 8
  call void (%struct.mg_connection*, i8*, ...) @mg_printf_http_chunk(%struct.mg_connection* %18, i8* getelementptr inbounds ([101 x i8], [101 x i8]* @.str.260, i32 0, i32 0), i8* %19)
  %20 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send_http_chunk(%struct.mg_connection* %20, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i64 0)
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %21, i32 0, i32 21
  %22 = load i64, i64* %flags, align 8
  %or = or i64 %22, 1024
  store i64 %or, i64* %flags, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_is_not_modified(%struct.http_message* %hm, %struct.stat* %st) #0 {
entry:
  %retval = alloca i32, align 4
  %hm.addr = alloca %struct.http_message*, align 8
  %st.addr = alloca %struct.stat*, align 8
  %hdr = alloca %struct.mg_str*, align 8
  %etag = alloca [64 x i8], align 16
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.stat* %st, %struct.stat** %st.addr, align 8
  %0 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.269, i32 0, i32 0))
  store %struct.mg_str* %call, %struct.mg_str** %hdr, align 8
  %cmp = icmp ne %struct.mg_str* %call, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %etag, i32 0, i32 0
  %1 = load %struct.stat*, %struct.stat** %st.addr, align 8
  call void @mg_http_construct_etag(i8* %arraydecay, i64 64, %struct.stat* %1)
  %2 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %arraydecay1 = getelementptr inbounds [64 x i8], [64 x i8]* %etag, i32 0, i32 0
  %call2 = call i32 @mg_vcasecmp(%struct.mg_str* %2, i8* %arraydecay1)
  %cmp3 = icmp eq i32 %call2, 0
  %conv = zext i1 %cmp3 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %3 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call4 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.270, i32 0, i32 0))
  store %struct.mg_str* %call4, %struct.mg_str** %hdr, align 8
  %cmp5 = icmp ne %struct.mg_str* %call4, null
  br i1 %cmp5, label %if.then7, label %if.else11

if.then7:                                         ; preds = %if.else
  %4 = load %struct.stat*, %struct.stat** %st.addr, align 8
  %st_mtime = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 9
  %5 = load i64, i64* %st_mtime, align 8
  %6 = load %struct.mg_str*, %struct.mg_str** %hdr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %6, i32 0, i32 0
  %7 = load i8*, i8** %p, align 8
  %call8 = call i64 @mg_parse_date_string(i8* %7)
  %cmp9 = icmp sle i64 %5, %call8
  %conv10 = zext i1 %cmp9 to i32
  store i32 %conv10, i32* %retval, align 4
  br label %return

if.else11:                                        ; preds = %if.else
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else11, %if.then7, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_http_serve_file2(%struct.mg_connection* %nc, i8* %path, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %path.addr = alloca i8*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %type = alloca %struct.mg_str, align 8
  %encoding = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %coerce = alloca %struct.mg_str, align 8
  %agg.tmp9 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %0 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %ssi_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %0, i32 0, i32 6
  %1 = load i8*, i8** %ssi_pattern, align 8
  %2 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %ssi_pattern1 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %2, i32 0, i32 6
  %3 = load i8*, i8** %ssi_pattern1, align 8
  %call = call i64 @strlen(i8* %3)
  %conv = trunc i64 %call to i32
  %4 = load i8*, i8** %path.addr, align 8
  %call2 = call i64 @mg_match_prefix(i8* %1, i32 %conv, i8* %4)
  %cmp = icmp ugt i64 %call2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %6 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %7 = load i8*, i8** %path.addr, align 8
  %8 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_handle_ssi_request(%struct.mg_connection* %5, %struct.http_message* %6, i8* %7, %struct.mg_serve_http_opts* %8)
  br label %return

if.end:                                           ; preds = %entry
  %9 = bitcast %struct.mg_str* %type to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 16, i32 8, i1 false)
  %10 = bitcast %struct.mg_str* %encoding to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 16, i32 8, i1 false)
  %11 = load i8*, i8** %path.addr, align 8
  %call4 = call { i8*, i64 } @mg_mk_str(i8* %11)
  %12 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 0
  %14 = extractvalue { i8*, i64 } %call4, 0
  store i8* %14, i8** %13, align 8
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 1
  %16 = extractvalue { i8*, i64 } %call4, 1
  store i64 %16, i64* %15, align 8
  %17 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %18 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %call5 = call i32 @mg_get_mime_type_encoding(i8* %20, i64 %22, %struct.mg_str* %type, %struct.mg_str* %encoding, %struct.mg_serve_http_opts* %17)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.end
  %call7 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.287, i32 0, i32 0))
  %23 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  %25 = extractvalue { i8*, i64 } %call7, 0
  store i8* %25, i8** %24, align 8
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  %27 = extractvalue { i8*, i64 } %call7, 1
  store i64 %27, i64* %26, align 8
  %28 = bitcast %struct.mg_str* %type to i8*
  %29 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.end
  %30 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %31 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %32 = load i8*, i8** %path.addr, align 8
  %33 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %33, i32 0, i32 15
  %34 = load i8*, i8** %extra_headers, align 8
  %call10 = call { i8*, i64 } @mg_mk_str(i8* %34)
  %35 = bitcast %struct.mg_str* %agg.tmp9 to { i8*, i64 }*
  %36 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %35, i32 0, i32 0
  %37 = extractvalue { i8*, i64 } %call10, 0
  store i8* %37, i8** %36, align 8
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %35, i32 0, i32 1
  %39 = extractvalue { i8*, i64 } %call10, 1
  store i64 %39, i64* %38, align 8
  %40 = bitcast %struct.mg_str* %type to { i8*, i64 }*
  %41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  call void @mg_http_serve_file_internal(%struct.mg_connection* %30, %struct.http_message* %31, i8* %32, i8* %42, i64 %44, %struct.mg_str* byval align 8 %encoding, %struct.mg_str* byval align 8 %agg.tmp9)
  br label %return

return:                                           ; preds = %if.end8, %if.then
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_prepare_cgi_environment(%struct.mg_connection* %nc, i8* %prog, %struct.mg_str* %path_info, %struct.http_message* %hm, %struct.mg_serve_http_opts* %opts, %struct.mg_cgi_env_block* %blk) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %prog.addr = alloca i8*, align 8
  %path_info.addr = alloca %struct.mg_str*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %blk.addr = alloca %struct.mg_cgi_env_block*, align 8
  %s = alloca i8*, align 8
  %h = alloca %struct.mg_str*, align 8
  %p = alloca i8*, align 8
  %i = alloca i64, align 8
  %buf = alloca [100 x i8], align 16
  %path_info_len = alloca i64, align 8
  %base_name = alloca i8*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %prog, i8** %prog.addr, align 8
  store %struct.mg_str* %path_info, %struct.mg_str** %path_info.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  store %struct.mg_cgi_env_block* %blk, %struct.mg_cgi_env_block** %blk.addr, align 8
  %0 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %cmp = icmp ne %struct.mg_str* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 1
  %2 = load i64, i64* %len, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %path_info_len, align 8
  %3 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %nvars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %3, i32 0, i32 4
  store i32 0, i32* %nvars, align 4
  %4 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %len1 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %4, i32 0, i32 3
  store i32 0, i32* %len1, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %6 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %nc2 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %6, i32 0, i32 0
  store %struct.mg_connection* %5, %struct.mg_connection** %nc2, align 8
  %call = call i8* @getenv(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.212, i32 0, i32 0))
  store i8* %call, i8** %s, align 8
  %cmp3 = icmp ne i8* %call, null
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %7 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %8 = load i8*, i8** %s, align 8
  %call4 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %7, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.213, i32 0, i32 0), i8* %8)
  br label %if.end

if.else:                                          ; preds = %cond.end
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %sock = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 4
  %10 = load i32, i32* %sock, align 8
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  call void @mg_sock_to_str(i32 %10, i8* %arraydecay, i64 100, i32 3)
  %11 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %arraydecay5 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call6 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.213, i32 0, i32 0), i8* %arraydecay5)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %12 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %13 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %13, i32 0, i32 0
  %14 = load i8*, i8** %document_root, align 8
  %call7 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %12, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.214, i32 0, i32 0), i8* %14)
  %15 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %16 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %document_root8 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %16, i32 0, i32 0
  %17 = load i8*, i8** %document_root8, align 8
  %call9 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %15, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.215, i32 0, i32 0), i8* %17)
  %18 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %call10 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %18, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.216, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.217, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.218, i32 0, i32 0))
  %19 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %call11 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.219, i32 0, i32 0))
  %20 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %call12 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.220, i32 0, i32 0))
  %21 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %call13 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.221, i32 0, i32 0))
  %22 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %23 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method = getelementptr inbounds %struct.http_message, %struct.http_message* %23, i32 0, i32 2
  %len14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method, i32 0, i32 1
  %24 = load i64, i64* %len14, align 8
  %conv = trunc i64 %24 to i32
  %25 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %method15 = getelementptr inbounds %struct.http_message, %struct.http_message* %25, i32 0, i32 2
  %p16 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %method15, i32 0, i32 0
  %26 = load i8*, i8** %p16, align 8
  %call17 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %22, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.222, i32 0, i32 0), i32 %conv, i8* %26)
  %27 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %28 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri = getelementptr inbounds %struct.http_message, %struct.http_message* %28, i32 0, i32 3
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri, i32 0, i32 1
  %29 = load i64, i64* %len18, align 8
  %conv19 = trunc i64 %29 to i32
  %30 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri20 = getelementptr inbounds %struct.http_message, %struct.http_message* %30, i32 0, i32 3
  %p21 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri20, i32 0, i32 0
  %31 = load i8*, i8** %p21, align 8
  %32 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string = getelementptr inbounds %struct.http_message, %struct.http_message* %32, i32 0, i32 7
  %len22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string, i32 0, i32 1
  %33 = load i64, i64* %len22, align 8
  %cmp23 = icmp eq i64 %33, 0
  %cond25 = select i1 %cmp23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i32 0, i32 0)
  %34 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string26 = getelementptr inbounds %struct.http_message, %struct.http_message* %34, i32 0, i32 7
  %len27 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string26, i32 0, i32 1
  %35 = load i64, i64* %len27, align 8
  %conv28 = trunc i64 %35 to i32
  %36 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string29 = getelementptr inbounds %struct.http_message, %struct.http_message* %36, i32 0, i32 7
  %p30 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string29, i32 0, i32 0
  %37 = load i8*, i8** %p30, align 8
  %call31 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %27, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.223, i32 0, i32 0), i32 %conv19, i8* %31, i8* %cond25, i32 %conv28, i8* %37)
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay32 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call33 = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %38, i8* %arraydecay32, i64 100, i32 5)
  %39 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %arraydecay34 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call35 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %39, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.224, i32 0, i32 0), i8* %arraydecay34)
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay36 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call37 = call i32 @mg_conn_addr_to_str(%struct.mg_connection* %40, i8* %arraydecay36, i64 100, i32 2)
  %41 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %arraydecay38 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call39 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.225, i32 0, i32 0), i8* %arraydecay38)
  %42 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri40 = getelementptr inbounds %struct.http_message, %struct.http_message* %42, i32 0, i32 3
  %p41 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri40, i32 0, i32 0
  %43 = load i8*, i8** %p41, align 8
  %44 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri42 = getelementptr inbounds %struct.http_message, %struct.http_message* %44, i32 0, i32 3
  %len43 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri42, i32 0, i32 1
  %45 = load i64, i64* %len43, align 8
  %add.ptr = getelementptr inbounds i8, i8* %43, i64 %45
  %46 = load i64, i64* %path_info_len, align 8
  %idx.neg = sub i64 0, %46
  %add.ptr44 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  %add.ptr45 = getelementptr inbounds i8, i8* %add.ptr44, i64 -1
  store i8* %add.ptr45, i8** %s, align 8
  %47 = load i8*, i8** %s, align 8
  %48 = load i8, i8* %47, align 1
  %conv46 = sext i8 %48 to i32
  %cmp47 = icmp eq i32 %conv46, 47
  br i1 %cmp47, label %if.then49, label %if.else64

if.then49:                                        ; preds = %if.end
  %49 = load i8*, i8** %prog.addr, align 8
  %call50 = call i8* @strrchr(i8* %49, i32 47)
  store i8* %call50, i8** %base_name, align 8
  %50 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %51 = load i8*, i8** %s, align 8
  %52 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri51 = getelementptr inbounds %struct.http_message, %struct.http_message* %52, i32 0, i32 3
  %p52 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri51, i32 0, i32 0
  %53 = load i8*, i8** %p52, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %51 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %53 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv53 = trunc i64 %sub.ptr.sub to i32
  %54 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri54 = getelementptr inbounds %struct.http_message, %struct.http_message* %54, i32 0, i32 3
  %p55 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri54, i32 0, i32 0
  %55 = load i8*, i8** %p55, align 8
  %56 = load i8*, i8** %base_name, align 8
  %cmp56 = icmp ne i8* %56, null
  br i1 %cmp56, label %cond.true58, label %cond.false60

cond.true58:                                      ; preds = %if.then49
  %57 = load i8*, i8** %base_name, align 8
  %add.ptr59 = getelementptr inbounds i8, i8* %57, i64 1
  br label %cond.end61

cond.false60:                                     ; preds = %if.then49
  %58 = load i8*, i8** %prog.addr, align 8
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false60, %cond.true58
  %cond62 = phi i8* [ %add.ptr59, %cond.true58 ], [ %58, %cond.false60 ]
  %call63 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %50, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.226, i32 0, i32 0), i32 %conv53, i8* %55, i8* %cond62)
  br label %if.end74

if.else64:                                        ; preds = %if.end
  %59 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %60 = load i8*, i8** %s, align 8
  %61 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri65 = getelementptr inbounds %struct.http_message, %struct.http_message* %61, i32 0, i32 3
  %p66 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri65, i32 0, i32 0
  %62 = load i8*, i8** %p66, align 8
  %sub.ptr.lhs.cast67 = ptrtoint i8* %60 to i64
  %sub.ptr.rhs.cast68 = ptrtoint i8* %62 to i64
  %sub.ptr.sub69 = sub i64 %sub.ptr.lhs.cast67, %sub.ptr.rhs.cast68
  %add = add nsw i64 %sub.ptr.sub69, 1
  %conv70 = trunc i64 %add to i32
  %63 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %uri71 = getelementptr inbounds %struct.http_message, %struct.http_message* %63, i32 0, i32 3
  %p72 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %uri71, i32 0, i32 0
  %64 = load i8*, i8** %p72, align 8
  %call73 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %59, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.227, i32 0, i32 0), i32 %conv70, i8* %64)
  br label %if.end74

if.end74:                                         ; preds = %if.else64, %cond.end61
  %65 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %66 = load i8*, i8** %prog.addr, align 8
  %call75 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %65, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.228, i32 0, i32 0), i8* %66)
  %67 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %cmp76 = icmp ne %struct.mg_str* %67, null
  br i1 %cmp76, label %land.lhs.true, label %if.end90

land.lhs.true:                                    ; preds = %if.end74
  %68 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %len78 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %68, i32 0, i32 1
  %69 = load i64, i64* %len78, align 8
  %cmp79 = icmp ugt i64 %69, 0
  br i1 %cmp79, label %if.then81, label %if.end90

if.then81:                                        ; preds = %land.lhs.true
  %70 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %71 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %len82 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %71, i32 0, i32 1
  %72 = load i64, i64* %len82, align 8
  %conv83 = trunc i64 %72 to i32
  %73 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %p84 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %73, i32 0, i32 0
  %74 = load i8*, i8** %p84, align 8
  %call85 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %70, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.229, i32 0, i32 0), i32 %conv83, i8* %74)
  %75 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %76 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %len86 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %76, i32 0, i32 1
  %77 = load i64, i64* %len86, align 8
  %conv87 = trunc i64 %77 to i32
  %78 = load %struct.mg_str*, %struct.mg_str** %path_info.addr, align 8
  %p88 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %78, i32 0, i32 0
  %79 = load i8*, i8** %p88, align 8
  %call89 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.230, i32 0, i32 0), i32 %conv87, i8* %79)
  br label %if.end90

if.end90:                                         ; preds = %if.then81, %land.lhs.true, %if.end74
  %80 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %call91 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %80, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.231, i32 0, i32 0))
  %81 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call92 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %81, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.232, i32 0, i32 0))
  store %struct.mg_str* %call92, %struct.mg_str** %h, align 8
  %cmp93 = icmp ne %struct.mg_str* %call92, null
  br i1 %cmp93, label %if.then95, label %if.end100

if.then95:                                        ; preds = %if.end90
  %82 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %83 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %len96 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %83, i32 0, i32 1
  %84 = load i64, i64* %len96, align 8
  %conv97 = trunc i64 %84 to i32
  %85 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %p98 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %85, i32 0, i32 0
  %86 = load i8*, i8** %p98, align 8
  %call99 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %82, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.233, i32 0, i32 0), i32 %conv97, i8* %86)
  br label %if.end100

if.end100:                                        ; preds = %if.then95, %if.end90
  %87 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string101 = getelementptr inbounds %struct.http_message, %struct.http_message* %87, i32 0, i32 7
  %len102 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string101, i32 0, i32 1
  %88 = load i64, i64* %len102, align 8
  %cmp103 = icmp ugt i64 %88, 0
  br i1 %cmp103, label %if.then105, label %if.end112

if.then105:                                       ; preds = %if.end100
  %89 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %90 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string106 = getelementptr inbounds %struct.http_message, %struct.http_message* %90, i32 0, i32 7
  %len107 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string106, i32 0, i32 1
  %91 = load i64, i64* %len107, align 8
  %conv108 = trunc i64 %91 to i32
  %92 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %query_string109 = getelementptr inbounds %struct.http_message, %struct.http_message* %92, i32 0, i32 7
  %p110 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %query_string109, i32 0, i32 0
  %93 = load i8*, i8** %p110, align 8
  %call111 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %89, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.234, i32 0, i32 0), i32 %conv108, i8* %93)
  br label %if.end112

if.end112:                                        ; preds = %if.then105, %if.end100
  %94 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %call113 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %94, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.190, i32 0, i32 0))
  store %struct.mg_str* %call113, %struct.mg_str** %h, align 8
  %cmp114 = icmp ne %struct.mg_str* %call113, null
  br i1 %cmp114, label %if.then116, label %if.end121

if.then116:                                       ; preds = %if.end112
  %95 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %96 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %len117 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %96, i32 0, i32 1
  %97 = load i64, i64* %len117, align 8
  %conv118 = trunc i64 %97 to i32
  %98 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %p119 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %98, i32 0, i32 0
  %99 = load i8*, i8** %p119, align 8
  %call120 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %95, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.235, i32 0, i32 0), i32 %conv118, i8* %99)
  br label %if.end121

if.end121:                                        ; preds = %if.then116, %if.end112
  %100 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  call void @mg_addenv2(%struct.mg_cgi_env_block* %100, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.236, i32 0, i32 0))
  %101 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  call void @mg_addenv2(%struct.mg_cgi_env_block* %101, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.237, i32 0, i32 0))
  %102 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  call void @mg_addenv2(%struct.mg_cgi_env_block* %102, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.238, i32 0, i32 0))
  %103 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  call void @mg_addenv2(%struct.mg_cgi_env_block* %103, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.239, i32 0, i32 0))
  %104 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  call void @mg_addenv2(%struct.mg_cgi_env_block* %104, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.240, i32 0, i32 0))
  %105 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  call void @mg_addenv2(%struct.mg_cgi_env_block* %105, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.241, i32 0, i32 0))
  %106 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  call void @mg_addenv2(%struct.mg_cgi_env_block* %106, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.242, i32 0, i32 0))
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc155, %if.end121
  %107 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_names = getelementptr inbounds %struct.http_message, %struct.http_message* %107, i32 0, i32 8
  %108 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names, i64 0, i64 %108
  %len122 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx, i32 0, i32 1
  %109 = load i64, i64* %len122, align 8
  %cmp123 = icmp ugt i64 %109, 0
  br i1 %cmp123, label %for.body, label %for.end156

for.body:                                         ; preds = %for.cond
  %110 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %111 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_names125 = getelementptr inbounds %struct.http_message, %struct.http_message* %111, i32 0, i32 8
  %112 = load i64, i64* %i, align 8
  %arrayidx126 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names125, i64 0, i64 %112
  %len127 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx126, i32 0, i32 1
  %113 = load i64, i64* %len127, align 8
  %conv128 = trunc i64 %113 to i32
  %114 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_names129 = getelementptr inbounds %struct.http_message, %struct.http_message* %114, i32 0, i32 8
  %115 = load i64, i64* %i, align 8
  %arrayidx130 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_names129, i64 0, i64 %115
  %p131 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx130, i32 0, i32 0
  %116 = load i8*, i8** %p131, align 8
  %117 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_values = getelementptr inbounds %struct.http_message, %struct.http_message* %117, i32 0, i32 9
  %118 = load i64, i64* %i, align 8
  %arrayidx132 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values, i64 0, i64 %118
  %len133 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx132, i32 0, i32 1
  %119 = load i64, i64* %len133, align 8
  %conv134 = trunc i64 %119 to i32
  %120 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %header_values135 = getelementptr inbounds %struct.http_message, %struct.http_message* %120, i32 0, i32 9
  %121 = load i64, i64* %i, align 8
  %arrayidx136 = getelementptr inbounds [40 x %struct.mg_str], [40 x %struct.mg_str]* %header_values135, i64 0, i64 %121
  %p137 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arrayidx136, i32 0, i32 0
  %122 = load i8*, i8** %p137, align 8
  %call138 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %110, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.243, i32 0, i32 0), i32 %conv128, i8* %116, i32 %conv134, i8* %122)
  store i8* %call138, i8** %p, align 8
  br label %for.cond139

for.cond139:                                      ; preds = %for.inc, %for.body
  %123 = load i8*, i8** %p, align 8
  %124 = load i8, i8* %123, align 1
  %conv140 = sext i8 %124 to i32
  %cmp141 = icmp ne i32 %conv140, 61
  br i1 %cmp141, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond139
  %125 = load i8*, i8** %p, align 8
  %126 = load i8, i8* %125, align 1
  %conv143 = sext i8 %126 to i32
  %cmp144 = icmp ne i32 %conv143, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond139
  %127 = phi i1 [ false, %for.cond139 ], [ %cmp144, %land.rhs ]
  br i1 %127, label %for.body146, label %for.end

for.body146:                                      ; preds = %land.end
  %128 = load i8*, i8** %p, align 8
  %129 = load i8, i8* %128, align 1
  %conv147 = sext i8 %129 to i32
  %cmp148 = icmp eq i32 %conv147, 45
  br i1 %cmp148, label %if.then150, label %if.end151

if.then150:                                       ; preds = %for.body146
  %130 = load i8*, i8** %p, align 8
  store i8 95, i8* %130, align 1
  br label %if.end151

if.end151:                                        ; preds = %if.then150, %for.body146
  %131 = load i8*, i8** %p, align 8
  %132 = load i8, i8* %131, align 1
  %conv152 = zext i8 %132 to i32
  %call153 = call i32 @toupper(i32 %conv152) #15
  %conv154 = trunc i32 %call153 to i8
  %133 = load i8*, i8** %p, align 8
  store i8 %conv154, i8* %133, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end151
  %134 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  br label %for.cond139

for.end:                                          ; preds = %land.end
  br label %for.inc155

for.inc155:                                       ; preds = %for.end
  %135 = load i64, i64* %i, align 8
  %inc = add i64 %135, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end156:                                       ; preds = %for.cond
  %136 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %vars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %136, i32 0, i32 2
  %137 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %nvars157 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %137, i32 0, i32 4
  %138 = load i32, i32* %nvars157, align 4
  %inc158 = add nsw i32 %138, 1
  store i32 %inc158, i32* %nvars157, align 4
  %idxprom = sext i32 %138 to i64
  %arrayidx159 = getelementptr inbounds [64 x i8*], [64 x i8*]* %vars, i64 0, i64 %idxprom
  store i8* null, i8** %arrayidx159, align 8
  %139 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %buf160 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %139, i32 0, i32 1
  %140 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %len161 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %140, i32 0, i32 3
  %141 = load i32, i32* %len161, align 8
  %inc162 = add nsw i32 %141, 1
  store i32 %inc162, i32* %len161, align 8
  %idxprom163 = sext i32 %141 to i64
  %arrayidx164 = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf160, i64 0, i64 %idxprom163
  store i8 0, i8* %arrayidx164, align 1
  ret void
}

declare i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_start_process(i8* %interp, i8* %cmd, i8* %env, i8** %envp, i8* %dir, i32 %sock) #0 {
entry:
  %interp.addr = alloca i8*, align 8
  %cmd.addr = alloca i8*, align 8
  %env.addr = alloca i8*, align 8
  %envp.addr = alloca i8**, align 8
  %dir.addr = alloca i8*, align 8
  %sock.addr = alloca i32, align 4
  %buf = alloca [500 x i8], align 16
  %pid = alloca i32, align 4
  %tmp = alloca i32, align 4
  store i8* %interp, i8** %interp.addr, align 8
  store i8* %cmd, i8** %cmd.addr, align 8
  store i8* %env, i8** %env.addr, align 8
  store i8** %envp, i8*** %envp.addr, align 8
  store i8* %dir, i8** %dir.addr, align 8
  store i32 %sock, i32* %sock.addr, align 4
  %call = call i32 @fork()
  store i32 %call, i32* %pid, align 4
  %0 = load i8*, i8** %env.addr, align 8
  %1 = load i32, i32* %pid, align 4
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end20

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %dir.addr, align 8
  %call1 = call i32 @chdir(i8* %2)
  store i32 %call1, i32* %tmp, align 4
  %3 = load i32, i32* %tmp, align 4
  %4 = load i32, i32* %sock.addr, align 4
  %call2 = call i32 @dup2(i32 %4, i32 0)
  %5 = load i32, i32* %sock.addr, align 4
  %call3 = call i32 @dup2(i32 %5, i32 1)
  %6 = load i32, i32* %sock.addr, align 4
  %call4 = call i32 @"\01_close"(i32 %6)
  %call5 = call void (i32)* @signal(i32 20, void (i32)* null)
  %7 = load i8*, i8** %interp.addr, align 8
  %cmp6 = icmp eq i8* %7, null
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then
  %8 = load i8*, i8** %cmd.addr, align 8
  %9 = load i8*, i8** %cmd.addr, align 8
  %10 = load i8**, i8*** %envp.addr, align 8
  %call8 = call i32 (i8*, i8*, ...) @execle(i8* %8, i8* %9, i8* null, i8** %10)
  br label %if.end

if.else:                                          ; preds = %if.then
  %11 = load i8*, i8** %interp.addr, align 8
  %12 = load i8*, i8** %interp.addr, align 8
  %13 = load i8*, i8** %cmd.addr, align 8
  %14 = load i8**, i8*** %envp.addr, align 8
  %call9 = call i32 (i8*, i8*, ...) @execle(i8* %11, i8* %12, i8* %13, i8* null, i8** %14)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  %arraydecay = getelementptr inbounds [500 x i8], [500 x i8]* %buf, i32 0, i32 0
  %15 = load i8*, i8** %interp.addr, align 8
  %cmp10 = icmp eq i8* %15, null
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %16 = load i8*, i8** %interp.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), %cond.true ], [ %16, %cond.false ]
  %17 = load i8*, i8** %interp.addr, align 8
  %cmp11 = icmp eq i8* %17, null
  %cond12 = select i1 %cmp11, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39, i32 0, i32 0)
  %18 = load i8*, i8** %cmd.addr, align 8
  %call13 = call i32* @__error()
  %19 = load i32, i32* %call13, align 4
  %call14 = call i8* @"\01_strerror"(i32 %19)
  %call15 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 500, i32 0, i64 500, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.245, i32 0, i32 0), i8* %cond, i8* %cond12, i8* %18, i8* %call14)
  %arraydecay16 = getelementptr inbounds [500 x i8], [500 x i8]* %buf, i32 0, i32 0
  %arraydecay17 = getelementptr inbounds [500 x i8], [500 x i8]* %buf, i32 0, i32 0
  %call18 = call i64 @strlen(i8* %arraydecay17)
  %call19 = call i64 @"\01_send"(i32 1, i8* %arraydecay16, i64 %call18, i32 0)
  call void @_exit(i32 1) #13
  unreachable

if.end20:                                         ; preds = %entry
  %20 = load i32, i32* %pid, align 4
  %cmp21 = icmp ne i32 %20, 0
  %conv = zext i1 %cmp21 to i32
  ret i32 %conv
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_cgi_ev_handler(%struct.mg_connection* %cgi_nc, i32 %ev, i8* %ev_data) #0 {
entry:
  %cgi_nc.addr = alloca %struct.mg_connection*, align 8
  %ev.addr = alloca i32, align 4
  %ev_data.addr = alloca i8*, align 8
  %user_data = alloca i8*, align 8
  %nc = alloca %struct.mg_connection*, align 8
  %io = alloca %struct.mbuf*, align 8
  %len = alloca i32, align 4
  %hm = alloca %struct.http_message, align 8
  %h = alloca %struct.mg_str*, align 8
  store %struct.mg_connection* %cgi_nc, %struct.mg_connection** %cgi_nc.addr, align 8
  store i32 %ev, i32* %ev.addr, align 4
  store i8* %ev_data, i8** %ev_data.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8
  %user_data1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 16
  %1 = load i8*, i8** %user_data1, align 8
  store i8* %1, i8** %user_data, align 8
  %2 = load i8*, i8** %user_data, align 8
  %3 = bitcast i8* %2 to %struct.mg_connection*
  store %struct.mg_connection* %3, %struct.mg_connection** %nc, align 8
  %4 = load i8*, i8** %ev_data.addr, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %cmp = icmp eq %struct.mg_connection* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %6, i32 0, i32 21
  %7 = load i64, i64* %flags, align 8
  %or = or i64 %7, 2048
  store i64 %or, i64* %flags, align 8
  br label %sw.epilog

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %ev.addr, align 4
  switch i32 %8, label %sw.epilog [
    i32 3, label %sw.bb
    i32 5, label %sw.bb49
  ]

sw.bb:                                            ; preds = %if.end
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %9, i32 0, i32 21
  %10 = load i64, i64* %flags2, align 8
  %and = and i64 %10, 1048576
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then3, label %if.end43

if.then3:                                         ; preds = %sw.bb
  %11 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %11, i32 0, i32 8
  store %struct.mbuf* %recv_mbuf, %struct.mbuf** %io, align 8
  %12 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %12, i32 0, i32 0
  %13 = load i8*, i8** %buf, align 8
  %14 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %14, i32 0, i32 1
  %15 = load i64, i64* %len4, align 8
  %conv = trunc i64 %15 to i32
  %call = call i32 @mg_http_get_request_len(i8* %13, i32 %conv)
  store i32 %call, i32* %len, align 4
  %16 = load i32, i32* %len, align 4
  %cmp5 = icmp eq i32 %16, 0
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then3
  br label %sw.epilog

if.end8:                                          ; preds = %if.then3
  %17 = load i32, i32* %len, align 4
  %cmp9 = icmp slt i32 %17, 0
  br i1 %cmp9, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end8
  %18 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len11 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %18, i32 0, i32 1
  %19 = load i64, i64* %len11, align 8
  %cmp12 = icmp ugt i64 %19, 8192
  br i1 %cmp12, label %if.then14, label %if.else

if.then14:                                        ; preds = %lor.lhs.false, %if.end8
  %20 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8
  %flags15 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %20, i32 0, i32 21
  %21 = load i64, i64* %flags15, align 8
  %or16 = or i64 %21, 2048
  store i64 %or16, i64* %flags15, align 8
  %22 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_http_send_error(%struct.mg_connection* %22, i32 500, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.246, i32 0, i32 0))
  br label %if.end40

if.else:                                          ; preds = %lor.lhs.false
  %23 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %buf17 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %23, i32 0, i32 0
  %24 = load i8*, i8** %buf17, align 8
  %25 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %buf18 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %25, i32 0, i32 0
  %26 = load i8*, i8** %buf18, align 8
  %27 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len19 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %27, i32 0, i32 1
  %28 = load i64, i64* %len19, align 8
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 %28
  %29 = load %struct.mbuf*, %struct.mbuf** %io, align 8
  %len20 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %29, i32 0, i32 1
  %30 = load i64, i64* %len20, align 8
  %conv21 = trunc i64 %30 to i32
  %call22 = call i8* @mg_http_parse_headers(i8* %24, i8* %add.ptr, i32 %conv21, %struct.http_message* %hm)
  %call23 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %hm, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.247, i32 0, i32 0))
  %cmp24 = icmp ne %struct.mg_str* %call23, null
  br i1 %cmp24, label %if.then26, label %if.else28

if.then26:                                        ; preds = %if.else
  %31 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %call27 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.248, i32 0, i32 0))
  br label %if.end39

if.else28:                                        ; preds = %if.else
  %call29 = call %struct.mg_str* @mg_get_http_header(%struct.http_message* %hm, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.249, i32 0, i32 0))
  store %struct.mg_str* %call29, %struct.mg_str** %h, align 8
  %cmp30 = icmp ne %struct.mg_str* %call29, null
  br i1 %cmp30, label %if.then32, label %if.else36

if.then32:                                        ; preds = %if.else28
  %32 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %33 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %len33 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %33, i32 0, i32 1
  %34 = load i64, i64* %len33, align 8
  %conv34 = trunc i64 %34 to i32
  %35 = load %struct.mg_str*, %struct.mg_str** %h, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %35, i32 0, i32 0
  %36 = load i8*, i8** %p, align 8
  %call35 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.250, i32 0, i32 0), i32 %conv34, i8* %36)
  br label %if.end38

if.else36:                                        ; preds = %if.else28
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %call37 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.251, i32 0, i32 0))
  br label %if.end38

if.end38:                                         ; preds = %if.else36, %if.then32
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then26
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then14
  %38 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags41 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %38, i32 0, i32 21
  %39 = load i64, i64* %flags41, align 8
  %and42 = and i64 %39, -1048577
  store i64 %and42, i64* %flags41, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.end40, %sw.bb
  %40 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags44 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %40, i32 0, i32 21
  %41 = load i64, i64* %flags44, align 8
  %and45 = and i64 %41, 1048576
  %tobool46 = icmp ne i64 %and45, 0
  br i1 %tobool46, label %if.end48, label %if.then47

if.then47:                                        ; preds = %if.end43
  %42 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  call void @mg_forward(%struct.mg_connection* %42, %struct.mg_connection* %43)
  br label %if.end48

if.end48:                                         ; preds = %if.then47, %if.end43
  br label %sw.epilog

sw.bb49:                                          ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %sw.bb49
  %call50 = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 9271)
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %if.then52, label %if.end53

if.then52:                                        ; preds = %do.body
  %44 = load %struct.mg_connection*, %struct.mg_connection** %cgi_nc.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.252, i32 0, i32 0), %struct.mg_connection* %44)
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end53
  %45 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %call54 = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %45)
  %cgi = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %call54, i32 0, i32 1
  call void @mg_http_free_proto_data_cgi(%struct.mg_http_proto_data_cgi* %cgi)
  %46 = load %struct.mg_connection*, %struct.mg_connection** %nc, align 8
  %flags55 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %46, i32 0, i32 21
  %47 = load i64, i64* %flags55, align 8
  %or56 = or i64 %47, 1024
  store i64 %or56, i64* %flags55, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then, %if.end, %do.end, %if.end48, %if.then7
  ret void
}

declare i8* @getenv(i8*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal i8* @mg_addenv(%struct.mg_cgi_env_block* %block, i8* %fmt, ...) #0 {
entry:
  %block.addr = alloca %struct.mg_cgi_env_block*, align 8
  %fmt.addr = alloca i8*, align 8
  %n = alloca i32, align 4
  %space = alloca i32, align 4
  %added = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.mg_cgi_env_block* %block, %struct.mg_cgi_env_block** %block.addr, align 8
  store i8* %fmt, i8** %fmt.addr, align 8
  %0 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8
  %buf = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %0, i32 0, i32 1
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %buf, i32 0, i32 0
  %1 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8
  %len = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %1, i32 0, i32 3
  %2 = load i32, i32* %len, align 8
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  store i8* %add.ptr, i8** %added, align 8
  %3 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8
  %len1 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %3, i32 0, i32 3
  %4 = load i32, i32* %len1, align 8
  %add = add nsw i32 %4, 2
  %conv = sext i32 %add to i64
  %sub = sub i64 8192, %conv
  %conv2 = trunc i64 %sub to i32
  store i32 %conv2, i32* %space, align 4
  %5 = load i32, i32* %space, align 4
  %cmp = icmp sgt i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end23

if.then:                                          ; preds = %entry
  %arraydecay4 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay45 = bitcast %struct.__va_list_tag* %arraydecay4 to i8*
  call void @llvm.va_start(i8* %arraydecay45)
  %6 = load i8*, i8** %added, align 8
  %7 = load i32, i32* %space, align 4
  %conv6 = sext i32 %7 to i64
  %8 = load i8*, i8** %added, align 8
  %9 = call i64 @llvm.objectsize.i64.p0i8(i8* %8, i1 false)
  %10 = load i8*, i8** %fmt.addr, align 8
  %arraydecay7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %call = call i32 @__vsnprintf_chk(i8* %6, i64 %conv6, i32 0, i64 %9, i8* %10, %struct.__va_list_tag* %arraydecay7)
  store i32 %call, i32* %n, align 4
  %arraydecay8 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %arraydecay89 = bitcast %struct.__va_list_tag* %arraydecay8 to i8*
  call void @llvm.va_end(i8* %arraydecay89)
  %11 = load i32, i32* %n, align 4
  %cmp10 = icmp sgt i32 %11, 0
  br i1 %cmp10, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %12 = load i32, i32* %n, align 4
  %add12 = add nsw i32 %12, 1
  %13 = load i32, i32* %space, align 4
  %cmp13 = icmp slt i32 %add12, %13
  br i1 %cmp13, label %land.lhs.true15, label %if.end

land.lhs.true15:                                  ; preds = %land.lhs.true
  %14 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8
  %nvars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %14, i32 0, i32 4
  %15 = load i32, i32* %nvars, align 4
  %cmp16 = icmp slt i32 %15, 62
  br i1 %cmp16, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true15
  %16 = load i8*, i8** %added, align 8
  %17 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8
  %vars = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %17, i32 0, i32 2
  %18 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8
  %nvars19 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %18, i32 0, i32 4
  %19 = load i32, i32* %nvars19, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %nvars19, align 4
  %idxprom = sext i32 %19 to i64
  %arrayidx = getelementptr inbounds [64 x i8*], [64 x i8*]* %vars, i64 0, i64 %idxprom
  store i8* %16, i8** %arrayidx, align 8
  %20 = load i32, i32* %n, align 4
  %add20 = add nsw i32 %20, 1
  %21 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %block.addr, align 8
  %len21 = getelementptr inbounds %struct.mg_cgi_env_block, %struct.mg_cgi_env_block* %21, i32 0, i32 3
  %22 = load i32, i32* %len21, align 8
  %add22 = add nsw i32 %22, %add20
  store i32 %add22, i32* %len21, align 8
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true15, %land.lhs.true, %if.then
  br label %if.end23

if.end23:                                         ; preds = %if.end, %entry
  %23 = load i8*, i8** %added, align 8
  ret i8* %23
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_addenv2(%struct.mg_cgi_env_block* %blk, i8* %name) #0 {
entry:
  %blk.addr = alloca %struct.mg_cgi_env_block*, align 8
  %name.addr = alloca i8*, align 8
  %s = alloca i8*, align 8
  store %struct.mg_cgi_env_block* %blk, %struct.mg_cgi_env_block** %blk.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %call = call i8* @getenv(i8* %0)
  store i8* %call, i8** %s, align 8
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mg_cgi_env_block*, %struct.mg_cgi_env_block** %blk.addr, align 8
  %2 = load i8*, i8** %name.addr, align 8
  %3 = load i8*, i8** %s, align 8
  %call1 = call i8* (%struct.mg_cgi_env_block*, i8*, ...) @mg_addenv(%struct.mg_cgi_env_block* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.244, i32 0, i32 0), i8* %2, i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind readonly
declare i32 @toupper(i32) #8

declare i32 @fork() #3

declare i32 @chdir(i8*) #3

declare i32 @dup2(i32, i32) #3

declare void (i32)* @signal(i32, void (i32)*) #3

declare i32 @execle(i8*, i8*, ...) #3

declare i8* @"\01_strerror"(i32) #3

; Function Attrs: noreturn
declare void @_exit(i32) #9

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_scan_directory(%struct.mg_connection* %nc, i8* %dir, %struct.mg_serve_http_opts* %opts, void (%struct.mg_connection*, i8*, %struct.stat*)* %func) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %dir.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %func.addr = alloca void (%struct.mg_connection*, i8*, %struct.stat*)*, align 8
  %path = alloca [1025 x i8], align 16
  %st = alloca %struct.stat, align 8
  %dp = alloca %struct.dirent*, align 8
  %dirp = alloca %struct.DIR*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %dir, i8** %dir.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  store void (%struct.mg_connection*, i8*, %struct.stat*)* %func, void (%struct.mg_connection*, i8*, %struct.stat*)** %func.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7796)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %1 = load i8*, i8** %dir.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.210, i32 0, i32 0), %struct.mg_connection* %0, i8* %1)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %2 = load i8*, i8** %dir.addr, align 8
  %call1 = call %struct.DIR* @"\01_opendir$INODE64"(i8* %2)
  store %struct.DIR* %call1, %struct.DIR** %dirp, align 8
  %cmp = icmp ne %struct.DIR* %call1, null
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.end
  br label %while.cond

while.cond:                                       ; preds = %if.end19, %if.then7, %if.then2
  %3 = load %struct.DIR*, %struct.DIR** %dirp, align 8
  %call3 = call %struct.dirent* @"\01_readdir$INODE64"(%struct.DIR* %3)
  store %struct.dirent* %call3, %struct.dirent** %dp, align 8
  %cmp4 = icmp ne %struct.dirent* %call3, null
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct.dirent*, %struct.dirent** %dp, align 8
  %d_name = getelementptr inbounds %struct.dirent, %struct.dirent* %4, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %d_name, i32 0, i32 0
  %5 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %call5 = call i32 @mg_is_file_hidden(i8* %arraydecay, %struct.mg_serve_http_opts* %5, i32 1)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %while.body
  br label %while.cond

if.end8:                                          ; preds = %while.body
  %arraydecay9 = getelementptr inbounds [1025 x i8], [1025 x i8]* %path, i32 0, i32 0
  %6 = load i8*, i8** %dir.addr, align 8
  %7 = load %struct.dirent*, %struct.dirent** %dp, align 8
  %d_name10 = getelementptr inbounds %struct.dirent, %struct.dirent* %7, i32 0, i32 5
  %arraydecay11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %d_name10, i32 0, i32 0
  %call12 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay9, i64 1025, i32 0, i64 1025, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.261, i32 0, i32 0), i8* %6, i8* %arraydecay11)
  %arraydecay13 = getelementptr inbounds [1025 x i8], [1025 x i8]* %path, i32 0, i32 0
  %call14 = call i32 @mg_stat(i8* %arraydecay13, %struct.stat* %st)
  %cmp15 = icmp eq i32 %call14, 0
  br i1 %cmp15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.end8
  %8 = load void (%struct.mg_connection*, i8*, %struct.stat*)*, void (%struct.mg_connection*, i8*, %struct.stat*)** %func.addr, align 8
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %10 = load %struct.dirent*, %struct.dirent** %dp, align 8
  %d_name17 = getelementptr inbounds %struct.dirent, %struct.dirent* %10, i32 0, i32 5
  %arraydecay18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %d_name17, i32 0, i32 0
  call void %8(%struct.mg_connection* %9, i8* %arraydecay18, %struct.stat* %st)
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.end8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %11 = load %struct.DIR*, %struct.DIR** %dirp, align 8
  %call20 = call i32 @"\01_closedir"(%struct.DIR* %11)
  br label %if.end28

if.else:                                          ; preds = %do.end
  br label %do.body21

do.body21:                                        ; preds = %if.else
  %call22 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 7810)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %do.body21
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %13 = load i8*, i8** %dir.addr, align 8
  %call25 = call i32 @mg_get_errno()
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.262, i32 0, i32 0), %struct.mg_connection* %12, i8* %13, i32 %call25)
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %do.body21
  br label %do.end27

do.end27:                                         ; preds = %if.end26
  br label %if.end28

if.end28:                                         ; preds = %do.end27, %while.end
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_print_dir_entry(%struct.mg_connection* %nc, i8* %file_name, %struct.stat* %stp) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %file_name.addr = alloca i8*, align 8
  %stp.addr = alloca %struct.stat*, align 8
  %size = alloca [64 x i8], align 16
  %mod = alloca [64 x i8], align 16
  %path = alloca [1024 x i8], align 16
  %fsize = alloca i64, align 8
  %is_dir = alloca i32, align 4
  %slash = alloca i8*, align 8
  %href = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %coerce = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %file_name, i8** %file_name.addr, align 8
  store %struct.stat* %stp, %struct.stat** %stp.addr, align 8
  %0 = load %struct.stat*, %struct.stat** %stp.addr, align 8
  %st_size = getelementptr inbounds %struct.stat, %struct.stat* %0, i32 0, i32 15
  %1 = load i64, i64* %st_size, align 8
  store i64 %1, i64* %fsize, align 8
  %2 = load %struct.stat*, %struct.stat** %stp.addr, align 8
  %st_mode = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 1
  %3 = load i16, i16* %st_mode, align 4
  %conv = zext i16 %3 to i32
  %and = and i32 %conv, 61440
  %cmp = icmp eq i32 %and, 16384
  %conv1 = zext i1 %cmp to i32
  store i32 %conv1, i32* %is_dir, align 4
  %4 = load i32, i32* %is_dir, align 4
  %tobool = icmp ne i32 %4, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i32 0, i32 0)
  store i8* %cond, i8** %slash, align 8
  %5 = load i32, i32* %is_dir, align 4
  %tobool2 = icmp ne i32 %5, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.263, i32 0, i32 0))
  br label %if.end31

if.else:                                          ; preds = %entry
  %6 = load i64, i64* %fsize, align 8
  %cmp3 = icmp slt i64 %6, 1024
  br i1 %cmp3, label %if.then5, label %if.else9

if.then5:                                         ; preds = %if.else
  %arraydecay6 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %7 = load i64, i64* %fsize, align 8
  %conv7 = trunc i64 %7 to i32
  %call8 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay6, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0), i32 %conv7)
  br label %if.end30

if.else9:                                         ; preds = %if.else
  %8 = load i64, i64* %fsize, align 8
  %cmp10 = icmp slt i64 %8, 1048576
  br i1 %cmp10, label %if.then12, label %if.else16

if.then12:                                        ; preds = %if.else9
  %arraydecay13 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %9 = load i64, i64* %fsize, align 8
  %conv14 = sitofp i64 %9 to double
  %div = fdiv double %conv14, 1.024000e+03
  %call15 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay13, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.264, i32 0, i32 0), double %div)
  br label %if.end29

if.else16:                                        ; preds = %if.else9
  %10 = load i64, i64* %fsize, align 8
  %cmp17 = icmp slt i64 %10, 1073741824
  br i1 %cmp17, label %if.then19, label %if.else24

if.then19:                                        ; preds = %if.else16
  %arraydecay20 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %11 = load i64, i64* %fsize, align 8
  %conv21 = sitofp i64 %11 to double
  %div22 = fdiv double %conv21, 1.048576e+06
  %call23 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay20, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.265, i32 0, i32 0), double %div22)
  br label %if.end

if.else24:                                        ; preds = %if.else16
  %arraydecay25 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  %12 = load i64, i64* %fsize, align 8
  %conv26 = sitofp i64 %12 to double
  %div27 = fdiv double %conv26, 0x41D0000000000000
  %call28 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay25, i64 64, i32 0, i64 64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.266, i32 0, i32 0), double %div27)
  br label %if.end

if.end:                                           ; preds = %if.else24, %if.then19
  br label %if.end29

if.end29:                                         ; preds = %if.end, %if.then12
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then5
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then
  %arraydecay32 = getelementptr inbounds [64 x i8], [64 x i8]* %mod, i32 0, i32 0
  %13 = load %struct.stat*, %struct.stat** %stp.addr, align 8
  %st_mtime = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 9
  %call33 = call %struct.tm* @localtime(i64* %st_mtime)
  %call34 = call i64 @"\01_strftime"(i8* %arraydecay32, i64 64, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.267, i32 0, i32 0), %struct.tm* %call33)
  %14 = load i8*, i8** %file_name.addr, align 8
  %arraydecay35 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  call void @mg_escape(i8* %14, i8* %arraydecay35, i64 1024)
  %15 = load i8*, i8** %file_name.addr, align 8
  %call36 = call { i8*, i64 } @mg_mk_str(i8* %15)
  %16 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  %18 = extractvalue { i8*, i64 } %call36, 0
  store i8* %18, i8** %17, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  %20 = extractvalue { i8*, i64 } %call36, 1
  store i64 %20, i64* %19, align 8
  %21 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %call37 = call { i8*, i64 } @mg_url_encode(i8* %23, i64 %25)
  %26 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  %28 = extractvalue { i8*, i64 } %call37, 0
  store i8* %28, i8** %27, align 8
  %29 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  %30 = extractvalue { i8*, i64 } %call37, 1
  store i64 %30, i64* %29, align 8
  %31 = bitcast %struct.mg_str* %href to i8*
  %32 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 16, i32 8, i1 false)
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %href, i32 0, i32 0
  %34 = load i8*, i8** %p, align 8
  %35 = load i8*, i8** %slash, align 8
  %arraydecay38 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %36 = load i8*, i8** %slash, align 8
  %arraydecay39 = getelementptr inbounds [64 x i8], [64 x i8]* %mod, i32 0, i32 0
  %37 = load i32, i32* %is_dir, align 4
  %tobool40 = icmp ne i32 %37, 0
  br i1 %tobool40, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end31
  br label %cond.end

cond.false:                                       ; preds = %if.end31
  %38 = load i64, i64* %fsize, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond41 = phi i64 [ -1, %cond.true ], [ %38, %cond.false ]
  %arraydecay42 = getelementptr inbounds [64 x i8], [64 x i8]* %size, i32 0, i32 0
  call void (%struct.mg_connection*, i8*, ...) @mg_printf_http_chunk(%struct.mg_connection* %33, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.268, i32 0, i32 0), i8* %34, i8* %35, i8* %arraydecay38, i8* %36, i8* %arraydecay39, i64 %cond41, i8* %arraydecay42)
  %p43 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %href, i32 0, i32 0
  %39 = load i8*, i8** %p43, align 8
  call void @free(i8* %39)
  ret void
}

declare %struct.DIR* @"\01_opendir$INODE64"(i8*) #3

declare %struct.dirent* @"\01_readdir$INODE64"(%struct.DIR*) #3

declare i32 @"\01_closedir"(%struct.DIR*) #3

declare %struct.tm* @localtime(i64*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_escape(i8* %src, i8* %dst, i64 %dst_len) #0 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %dst_len.addr = alloca i64, align 8
  %n = alloca i64, align 8
  %ch = alloca i8, align 1
  store i8* %src, i8** %src.addr, align 8
  store i8* %dst, i8** %dst.addr, align 8
  store i64 %dst_len, i64* %dst_len.addr, align 8
  store i64 0, i64* %n, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %src.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %2 = load i64, i64* %n, align 8
  %add = add i64 %2, 5
  %3 = load i64, i64* %dst_len.addr, align 8
  %cmp2 = icmp ult i64 %add, %3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %cmp2, %land.rhs ]
  br i1 %4, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %5 = load i8*, i8** %src.addr, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %src.addr, align 8
  %6 = load i8, i8* %5, align 1
  store i8 %6, i8* %ch, align 1
  %7 = load i8, i8* %ch, align 1
  %conv4 = zext i8 %7 to i32
  %cmp5 = icmp eq i32 %conv4, 60
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %8 = load i8*, i8** %dst.addr, align 8
  %9 = load i64, i64* %n, align 8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %9
  %10 = load i64, i64* %dst_len.addr, align 8
  %11 = load i64, i64* %n, align 8
  %sub = sub i64 %10, %11
  %12 = load i8*, i8** %dst.addr, align 8
  %13 = load i64, i64* %n, align 8
  %add.ptr7 = getelementptr inbounds i8, i8* %12, i64 %13
  %14 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr7, i1 false)
  %call = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr, i64 %sub, i32 0, i64 %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.88, i32 0, i32 0))
  %conv8 = sext i32 %call to i64
  %15 = load i64, i64* %n, align 8
  %add9 = add i64 %15, %conv8
  store i64 %add9, i64* %n, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %16 = load i8, i8* %ch, align 1
  %17 = load i8*, i8** %dst.addr, align 8
  %18 = load i64, i64* %n, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %n, align 8
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %18
  store i8 %16, i8* %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.end:                                        ; preds = %land.end
  %19 = load i8*, i8** %dst.addr, align 8
  %20 = load i64, i64* %n, align 8
  %arrayidx10 = getelementptr inbounds i8, i8* %19, i64 %20
  store i8 0, i8* %arrayidx10, align 1
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i64 @mg_parse_date_string(i8* %datetime) #0 {
entry:
  %datetime.addr = alloca i8*, align 8
  %month_str = alloca [32 x i8], align 16
  %second = alloca i32, align 4
  %minute = alloca i32, align 4
  %hour = alloca i32, align 4
  %day = alloca i32, align 4
  %month = alloca i32, align 4
  %year = alloca i32, align 4
  %leap_days = alloca i32, align 4
  %days = alloca i32, align 4
  %result = alloca i64, align 8
  store i8* %datetime, i8** %datetime.addr, align 8
  store i64 0, i64* %result, align 8
  %0 = load i8*, i8** %datetime.addr, align 8
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call = call i32 (i8*, i8*, ...) @sscanf(i8* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.271, i32 0, i32 0), i32* %day, i8* %arraydecay, i32* %year, i32* %hour, i32* %minute, i32* %second)
  %cmp = icmp eq i32 %call, 6
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %datetime.addr, align 8
  %arraydecay1 = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call2 = call i32 (i8*, i8*, ...) @sscanf(i8* %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.272, i32 0, i32 0), i32* %day, i8* %arraydecay1, i32* %year, i32* %hour, i32* %minute, i32* %second)
  %cmp3 = icmp eq i32 %call2, 6
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %2 = load i8*, i8** %datetime.addr, align 8
  %arraydecay5 = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call6 = call i32 (i8*, i8*, ...) @sscanf(i8* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.273, i32 0, i32 0), i32* %day, i8* %arraydecay5, i32* %year, i32* %hour, i32* %minute, i32* %second)
  %cmp7 = icmp eq i32 %call6, 6
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %3 = load i8*, i8** %datetime.addr, align 8
  %arraydecay9 = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call10 = call i32 (i8*, i8*, ...) @sscanf(i8* %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.274, i32 0, i32 0), i32* %day, i8* %arraydecay9, i32* %year, i32* %hour, i32* %minute, i32* %second)
  %cmp11 = icmp eq i32 %call10, 6
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %4 = load i32, i32* %year, align 4
  %cmp12 = icmp sgt i32 %4, 1970
  br i1 %cmp12, label %land.lhs.true13, label %if.end

land.lhs.true13:                                  ; preds = %land.lhs.true
  %arraydecay14 = getelementptr inbounds [32 x i8], [32 x i8]* %month_str, i32 0, i32 0
  %call15 = call i32 @mg_get_month_index(i8* %arraydecay14)
  store i32 %call15, i32* %month, align 4
  %cmp16 = icmp ne i32 %call15, -1
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true13
  %5 = load i32, i32* %year, align 4
  %call17 = call i32 @mg_num_leap_years(i32 %5)
  %call18 = call i32 @mg_num_leap_years(i32 1970)
  %sub = sub nsw i32 %call17, %call18
  store i32 %sub, i32* %leap_days, align 4
  %6 = load i32, i32* %year, align 4
  %sub19 = sub nsw i32 %6, 1970
  store i32 %sub19, i32* %year, align 4
  %7 = load i32, i32* %year, align 4
  %mul = mul nsw i32 %7, 365
  %8 = load i32, i32* %month, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx = getelementptr inbounds [12 x i16], [12 x i16]* @mg_parse_date_string.days_before_month, i64 0, i64 %idxprom
  %9 = load i16, i16* %arrayidx, align 2
  %conv = zext i16 %9 to i32
  %add = add nsw i32 %mul, %conv
  %10 = load i32, i32* %day, align 4
  %sub20 = sub nsw i32 %10, 1
  %add21 = add nsw i32 %add, %sub20
  %11 = load i32, i32* %leap_days, align 4
  %add22 = add nsw i32 %add21, %11
  store i32 %add22, i32* %days, align 4
  %12 = load i32, i32* %days, align 4
  %mul23 = mul nsw i32 %12, 24
  %mul24 = mul nsw i32 %mul23, 3600
  %13 = load i32, i32* %hour, align 4
  %mul25 = mul nsw i32 %13, 3600
  %add26 = add nsw i32 %mul24, %mul25
  %14 = load i32, i32* %minute, align 4
  %mul27 = mul nsw i32 %14, 60
  %add28 = add nsw i32 %add26, %mul27
  %15 = load i32, i32* %second, align 4
  %add29 = add nsw i32 %add28, %15
  %conv30 = sext i32 %add29 to i64
  store i64 %conv30, i64* %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true13, %land.lhs.true, %lor.lhs.false8
  %16 = load i64, i64* %result, align 8
  ret i64 %16
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_get_month_index(i8* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i64, i64* %i, align 8
  %cmp = icmp ult i64 %0, 12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %s.addr, align 8
  %2 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds [12 x i8*], [12 x i8*]* @mg_get_month_index.month_names, i64 0, i64 %2
  %3 = load i8*, i8** %arrayidx, align 8
  %call = call i32 @strcmp(i8* %1, i8* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %4 = load i64, i64* %i, align 8
  %conv = trunc i64 %4 to i32
  store i32 %conv, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load i64, i64* %i, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_num_leap_years(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %div = sdiv i32 %0, 4
  %1 = load i32, i32* %year.addr, align 4
  %div1 = sdiv i32 %1, 100
  %sub = sub nsw i32 %div, %div1
  %2 = load i32, i32* %year.addr, align 4
  %div2 = sdiv i32 %2, 400
  %add = add nsw i32 %sub, %div2
  ret i32 %add
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_handle_ssi_request(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %path, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path.addr = alloca i8*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  %mime_type = alloca %struct.mg_str, align 8
  %encoding = alloca %struct.mg_str, align 8
  %agg.tmp = alloca %struct.mg_str, align 8
  %coerce = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %0 = bitcast %struct.mg_str* %mime_type to i8*
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 8, i1 false)
  %1 = bitcast %struct.mg_str* %encoding to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 8, i1 false)
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @cs_log_print_prefix(i32 4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 9524)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load i8*, i8** %path.addr, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.288, i32 0, i32 0), %struct.mg_connection* %2, i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %4 = load i8*, i8** %path.addr, align 8
  %call1 = call %struct.__sFILE* @mg_fopen(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0))
  store %struct.__sFILE* %call1, %struct.__sFILE** %fp, align 8
  %cmp = icmp eq %struct.__sFILE* %call1, null
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %do.end
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_http_send_error(%struct.mg_connection* %5, i32 404, i8* null)
  br label %if.end21

if.else:                                          ; preds = %do.end
  %6 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call3 = call i32 @fileno(%struct.__sFILE* %6)
  call void @mg_set_close_on_exec(i32 %call3)
  %7 = load i8*, i8** %path.addr, align 8
  %call4 = call { i8*, i64 } @mg_mk_str(i8* %7)
  %8 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 0
  %10 = extractvalue { i8*, i64 } %call4, 0
  store i8* %10, i8** %9, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %8, i32 0, i32 1
  %12 = extractvalue { i8*, i64 } %call4, 1
  store i64 %12, i64* %11, align 8
  %13 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %14 = bitcast %struct.mg_str* %agg.tmp to { i8*, i64 }*
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %call5 = call i32 @mg_get_mime_type_encoding(i8* %16, i64 %18, %struct.mg_str* %mime_type, %struct.mg_str* %encoding, %struct.mg_serve_http_opts* %13)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %if.else
  %call8 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.287, i32 0, i32 0))
  %19 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %20 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 0
  %21 = extractvalue { i8*, i64 } %call8, 0
  store i8* %21, i8** %20, align 8
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 1
  %23 = extractvalue { i8*, i64 } %call8, 1
  store i64 %23, i64* %22, align 8
  %24 = bitcast %struct.mg_str* %mime_type to i8*
  %25 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false)
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.else
  %26 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %27 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %extra_headers = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %27, i32 0, i32 15
  %28 = load i8*, i8** %extra_headers, align 8
  call void @mg_send_response_line(%struct.mg_connection* %26, i32 200, i8* %28)
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 1
  %30 = load i64, i64* %len, align 8
  %conv = trunc i64 %30 to i32
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %mime_type, i32 0, i32 0
  %31 = load i8*, i8** %p, align 8
  %call10 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %29, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.289, i32 0, i32 0), i32 %conv, i8* %31)
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %32 = load i64, i64* %len11, align 8
  %cmp12 = icmp ugt i64 %32, 0
  br i1 %cmp12, label %if.then14, label %if.end19

if.then14:                                        ; preds = %if.end9
  %33 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %len15 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 1
  %34 = load i64, i64* %len15, align 8
  %conv16 = trunc i64 %34 to i32
  %p17 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %encoding, i32 0, i32 0
  %35 = load i8*, i8** %p17, align 8
  %call18 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %33, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.86, i32 0, i32 0), i32 %conv16, i8* %35)
  br label %if.end19

if.end19:                                         ; preds = %if.then14, %if.end9
  %36 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_send(%struct.mg_connection* %36, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i32 2)
  %37 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %38 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %39 = load i8*, i8** %path.addr, align 8
  %40 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %41 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_send_ssi_file(%struct.mg_connection* %37, %struct.http_message* %38, i8* %39, %struct.__sFILE* %40, i32 0, %struct.mg_serve_http_opts* %41)
  %42 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call20 = call i32 @fclose(%struct.__sFILE* %42)
  %43 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %43, i32 0, i32 21
  %44 = load i64, i64* %flags, align 8
  %or = or i64 %44, 1024
  store i64 %or, i64* %flags, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.end19, %if.then2
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_get_mime_type_encoding(i8* %path.coerce0, i64 %path.coerce1, %struct.mg_str* %type, %struct.mg_str* %encoding, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %retval = alloca i32, align 4
  %path = alloca %struct.mg_str, align 8
  %type.addr = alloca %struct.mg_str*, align 8
  %encoding.addr = alloca %struct.mg_str*, align 8
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %ext = alloca i8*, align 8
  %overrides = alloca i8*, align 8
  %k = alloca %struct.mg_str, align 8
  %v = alloca %struct.mg_str, align 8
  %coerce = alloca %struct.mg_str, align 8
  %path2 = alloca %struct.mg_str, align 8
  %type2 = alloca %struct.mg_str, align 8
  %coerce32 = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %path.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %path.coerce1, i64* %2, align 8
  store %struct.mg_str* %type, %struct.mg_str** %type.addr, align 8
  store %struct.mg_str* %encoding, %struct.mg_str** %encoding.addr, align 8
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %3 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %custom_mime_types = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %3, i32 0, i32 14
  %4 = load i8*, i8** %custom_mime_types, align 8
  store i8* %4, i8** %overrides, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %5 = load i8*, i8** %overrides, align 8
  %call = call i8* @mg_next_comma_list_entry(i8* %5, %struct.mg_str* %k, %struct.mg_str* %v)
  store i8* %call, i8** %overrides, align 8
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %6 = load i8*, i8** %p, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %7 = load i64, i64* %len, align 8
  %len1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %k, i32 0, i32 1
  %8 = load i64, i64* %len1, align 8
  %sub = sub i64 %7, %8
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %sub
  store i8* %add.ptr, i8** %ext, align 8
  %len2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %9 = load i64, i64* %len2, align 8
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %k, i32 0, i32 1
  %10 = load i64, i64* %len3, align 8
  %cmp4 = icmp ugt i64 %9, %10
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %11 = load i8*, i8** %ext, align 8
  %call5 = call i32 @mg_vcasecmp(%struct.mg_str* %k, i8* %11)
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8
  %13 = bitcast %struct.mg_str* %12 to i8*
  %14 = bitcast %struct.mg_str* %v to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8
  %16 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %call7 = call { i8*, i64 } @mg_get_mime_types_entry(i8* %18, i64 %20)
  %21 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  %23 = extractvalue { i8*, i64 } %call7, 0
  store i8* %23, i8** %22, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  %25 = extractvalue { i8*, i64 } %call7, 1
  store i64 %25, i64* %24, align 8
  %26 = bitcast %struct.mg_str* %15 to i8*
  %27 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  %28 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8
  %call8 = call i32 @mg_vcmp(%struct.mg_str* %28, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.301, i32 0, i32 0))
  %cmp9 = icmp eq i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end34

if.then10:                                        ; preds = %while.end
  %p11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %29 = load i8*, i8** %p11, align 8
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %30 = load i64, i64* %len12, align 8
  %sub13 = sub i64 %30, 3
  %call14 = call { i8*, i64 } @mg_mk_str_n(i8* %29, i64 %sub13)
  %31 = bitcast %struct.mg_str* %path2 to { i8*, i64 }*
  %32 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 0
  %33 = extractvalue { i8*, i64 } %call14, 0
  store i8* %33, i8** %32, align 8
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 1
  %35 = extractvalue { i8*, i64 } %call14, 1
  store i64 %35, i64* %34, align 8
  %36 = bitcast %struct.mg_str* %path2 to { i8*, i64 }*
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %call15 = call { i8*, i64 } @mg_get_mime_types_entry(i8* %38, i64 %40)
  %41 = bitcast %struct.mg_str* %type2 to { i8*, i64 }*
  %42 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 0
  %43 = extractvalue { i8*, i64 } %call15, 0
  store i8* %43, i8** %42, align 8
  %44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %41, i32 0, i32 1
  %45 = extractvalue { i8*, i64 } %call15, 1
  store i64 %45, i64* %44, align 8
  br label %do.body

do.body:                                          ; preds = %if.then10
  %call16 = call i32 @cs_log_print_prefix(i32 0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 6020)
  %tobool = icmp ne i32 %call16, 0
  br i1 %tobool, label %if.then17, label %if.end26

if.then17:                                        ; preds = %do.body
  %len18 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %46 = load i64, i64* %len18, align 8
  %conv = trunc i64 %46 to i32
  %p19 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %47 = load i8*, i8** %p19, align 8
  %len20 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path2, i32 0, i32 1
  %48 = load i64, i64* %len20, align 8
  %conv21 = trunc i64 %48 to i32
  %p22 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path2, i32 0, i32 0
  %49 = load i8*, i8** %p22, align 8
  %len23 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %type2, i32 0, i32 1
  %50 = load i64, i64* %len23, align 8
  %conv24 = trunc i64 %50 to i32
  %p25 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %type2, i32 0, i32 0
  %51 = load i8*, i8** %p25, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.302, i32 0, i32 0), i32 %conv, i8* %47, i32 %conv21, i8* %49, i32 %conv24, i8* %51)
  br label %if.end26

if.end26:                                         ; preds = %if.then17, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end26
  %len27 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %type2, i32 0, i32 1
  %52 = load i64, i64* %len27, align 8
  %cmp28 = icmp ugt i64 %52, 0
  br i1 %cmp28, label %if.then30, label %if.end33

if.then30:                                        ; preds = %do.end
  %53 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8
  %54 = bitcast %struct.mg_str* %53 to i8*
  %55 = bitcast %struct.mg_str* %type2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* %55, i64 16, i32 8, i1 false)
  %56 = load %struct.mg_str*, %struct.mg_str** %encoding.addr, align 8
  %call31 = call { i8*, i64 } @mg_mk_str(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.303, i32 0, i32 0))
  %57 = bitcast %struct.mg_str* %coerce32 to { i8*, i64 }*
  %58 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %57, i32 0, i32 0
  %59 = extractvalue { i8*, i64 } %call31, 0
  store i8* %59, i8** %58, align 8
  %60 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %57, i32 0, i32 1
  %61 = extractvalue { i8*, i64 } %call31, 1
  store i64 %61, i64* %60, align 8
  %62 = bitcast %struct.mg_str* %56 to i8*
  %63 = bitcast %struct.mg_str* %coerce32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %63, i64 16, i32 8, i1 false)
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %do.end
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %while.end
  %64 = load %struct.mg_str*, %struct.mg_str** %type.addr, align 8
  %len35 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %64, i32 0, i32 1
  %65 = load i64, i64* %len35, align 8
  %cmp36 = icmp ugt i64 %65, 0
  %conv37 = zext i1 %cmp36 to i32
  store i32 %conv37, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end34, %if.then
  %66 = load i32, i32* %retval, align 4
  ret i32 %66
}

declare i32 @fileno(%struct.__sFILE*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_send_ssi_file(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %path, %struct.__sFILE* %fp, i32 %include_level, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %path.addr = alloca i8*, align 8
  %fp.addr = alloca %struct.__sFILE*, align 8
  %include_level.addr = alloca i32, align 4
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %buf = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %ch = alloca i32, align 4
  %len = alloca i32, align 4
  %in_ssi_tag = alloca i32, align 4
  %i = alloca i64, align 8
  %cctx = alloca %struct.mg_ssi_call_ctx, align 8
  %coerce = alloca %struct.mg_str, align 8
  %coerce42 = alloca %struct.mg_str, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %path, i8** %path.addr, align 8
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8
  store i32 %include_level, i32* %include_level.addr, align 4
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %0 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.btag, i32 0, i32 1), align 8
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %0
  store i8* %add.ptr, i8** %p, align 8
  %1 = load i32, i32* %include_level.addr, align 4
  %cmp = icmp sgt i32 %1, 10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load i8*, i8** %path.addr, align 8
  %call = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %2, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.293, i32 0, i32 0), i8* %3)
  br label %if.end110

if.end:                                           ; preds = %entry
  store i32 0, i32* %len, align 4
  store i32 0, i32* %in_ssi_tag, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end102, %if.end
  %4 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8
  %call1 = call i32 @fgetc(%struct.__sFILE* %4)
  store i32 %call1, i32* %ch, align 4
  %cmp2 = icmp ne i32 %call1, -1
  br i1 %cmp2, label %while.body, label %while.end103

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %in_ssi_tag, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %land.lhs.true, label %if.else49

land.lhs.true:                                    ; preds = %while.body
  %6 = load i32, i32* %ch, align 4
  %cmp3 = icmp eq i32 %6, 62
  br i1 %cmp3, label %land.lhs.true4, label %if.else49

land.lhs.true4:                                   ; preds = %land.lhs.true
  %7 = load i32, i32* %len, align 4
  %sub = sub nsw i32 %7, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %8 to i32
  %cmp5 = icmp eq i32 %conv, 45
  br i1 %cmp5, label %land.lhs.true7, label %if.else49

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %9 = load i32, i32* %len, align 4
  %sub8 = sub nsw i32 %9, 2
  %idxprom9 = sext i32 %sub8 to i64
  %arrayidx10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom9
  %10 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %10 to i32
  %cmp12 = icmp eq i32 %conv11, 45
  br i1 %cmp12, label %if.then14, label %if.else49

if.then14:                                        ; preds = %land.lhs.true7
  %11 = load i32, i32* %len, align 4
  %sub15 = sub nsw i32 %11, 2
  %conv16 = sext i32 %sub15 to i64
  store i64 %conv16, i64* %i, align 8
  store i32 0, i32* %in_ssi_tag, align 4
  %12 = load i64, i64* %i, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %i, align 8
  %arrayidx17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %12
  store i8 0, i8* %arrayidx17, align 1
  br label %while.cond18

while.cond18:                                     ; preds = %while.body25, %if.then14
  %13 = load i64, i64* %i, align 8
  %cmp19 = icmp ugt i64 %13, 0
  br i1 %cmp19, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond18
  %14 = load i64, i64* %i, align 8
  %arrayidx21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %14
  %15 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %15 to i32
  %cmp23 = icmp eq i32 %conv22, 32
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond18
  %16 = phi i1 [ false, %while.cond18 ], [ %cmp23, %land.rhs ]
  br i1 %16, label %while.body25, label %while.end

while.body25:                                     ; preds = %land.end
  %17 = load i64, i64* %i, align 8
  %dec26 = add i64 %17, -1
  store i64 %dec26, i64* %i, align 8
  %arrayidx27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %17
  store i8 0, i8* %arrayidx27, align 1
  br label %while.cond18

while.end:                                        ; preds = %land.end
  %18 = load i8*, i8** %p, align 8
  %19 = load i8*, i8** getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_include, i32 0, i32 0), align 8
  %20 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_include, i32 0, i32 1), align 8
  %call28 = call i32 @strncmp(i8* %18, i8* %19, i64 %20)
  %cmp29 = icmp eq i32 %call28, 0
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %while.end
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %22 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %23 = load i8*, i8** %path.addr, align 8
  %24 = load i8*, i8** %p, align 8
  %25 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_include, i32 0, i32 1), align 8
  %add.ptr32 = getelementptr inbounds i8, i8* %24, i64 %25
  %add.ptr33 = getelementptr inbounds i8, i8* %add.ptr32, i64 1
  %26 = load i32, i32* %include_level.addr, align 4
  %27 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_do_ssi_include(%struct.mg_connection* %21, %struct.http_message* %22, i8* %23, i8* %add.ptr33, i32 %26, %struct.mg_serve_http_opts* %27)
  br label %if.end48

if.else:                                          ; preds = %while.end
  %28 = load i8*, i8** %p, align 8
  %29 = load i8*, i8** getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_call, i32 0, i32 0), align 8
  %30 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_call, i32 0, i32 1), align 8
  %call34 = call i32 @strncmp(i8* %28, i8* %29, i64 %30)
  %cmp35 = icmp eq i32 %call34, 0
  br i1 %cmp35, label %if.then37, label %if.else46

if.then37:                                        ; preds = %if.else
  %31 = bitcast %struct.mg_ssi_call_ctx* %cctx to i8*
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 40, i32 8, i1 false)
  %32 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %req = getelementptr inbounds %struct.mg_ssi_call_ctx, %struct.mg_ssi_call_ctx* %cctx, i32 0, i32 0
  store %struct.http_message* %32, %struct.http_message** %req, align 8
  %file = getelementptr inbounds %struct.mg_ssi_call_ctx, %struct.mg_ssi_call_ctx* %cctx, i32 0, i32 1
  %33 = load i8*, i8** %path.addr, align 8
  %call38 = call { i8*, i64 } @mg_mk_str(i8* %33)
  %34 = bitcast %struct.mg_str* %coerce to { i8*, i64 }*
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 0
  %36 = extractvalue { i8*, i64 } %call38, 0
  store i8* %36, i8** %35, align 8
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 1
  %38 = extractvalue { i8*, i64 } %call38, 1
  store i64 %38, i64* %37, align 8
  %39 = bitcast %struct.mg_str* %file to i8*
  %40 = bitcast %struct.mg_str* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false)
  %arg = getelementptr inbounds %struct.mg_ssi_call_ctx, %struct.mg_ssi_call_ctx* %cctx, i32 0, i32 2
  %41 = load i8*, i8** %p, align 8
  %42 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.d_call, i32 0, i32 1), align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %41, i64 %42
  %add.ptr40 = getelementptr inbounds i8, i8* %add.ptr39, i64 1
  %call41 = call { i8*, i64 } @mg_mk_str(i8* %add.ptr40)
  %43 = bitcast %struct.mg_str* %coerce42 to { i8*, i64 }*
  %44 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 0
  %45 = extractvalue { i8*, i64 } %call41, 0
  store i8* %45, i8** %44, align 8
  %46 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 1
  %47 = extractvalue { i8*, i64 } %call41, 1
  store i64 %47, i64* %46, align 8
  %48 = bitcast %struct.mg_str* %arg to i8*
  %49 = bitcast %struct.mg_str* %coerce42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 16, i32 8, i1 false)
  %50 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %51 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %51, i32 0, i32 16
  %52 = load i8*, i8** %user_data, align 8
  %arg43 = getelementptr inbounds %struct.mg_ssi_call_ctx, %struct.mg_ssi_call_ctx* %cctx, i32 0, i32 2
  %p44 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %arg43, i32 0, i32 0
  %53 = load i8*, i8** %p44, align 8
  call void @mg_call(%struct.mg_connection* %50, void (%struct.mg_connection*, i32, i8*)* null, i8* %52, i32 105, i8* %53)
  %54 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %55 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data45 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %55, i32 0, i32 16
  %56 = load i8*, i8** %user_data45, align 8
  %57 = bitcast %struct.mg_ssi_call_ctx* %cctx to i8*
  call void @mg_call(%struct.mg_connection* %54, void (%struct.mg_connection*, i32, i8*)* null, i8* %56, i32 106, i8* %57)
  br label %if.end47

if.else46:                                        ; preds = %if.else
  br label %if.end47

if.end47:                                         ; preds = %if.else46, %if.then37
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then31
  store i32 0, i32* %len, align 4
  br label %if.end102

if.else49:                                        ; preds = %land.lhs.true7, %land.lhs.true4, %land.lhs.true, %while.body
  %58 = load i32, i32* %ch, align 4
  %cmp50 = icmp eq i32 %58, 60
  br i1 %cmp50, label %if.then52, label %if.else63

if.then52:                                        ; preds = %if.else49
  store i32 1, i32* %in_ssi_tag, align 4
  %59 = load i32, i32* %len, align 4
  %cmp53 = icmp sgt i32 %59, 0
  br i1 %cmp53, label %if.then55, label %if.end59

if.then55:                                        ; preds = %if.then52
  %60 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay56 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %61 = load i32, i32* %len, align 4
  %conv57 = sext i32 %61 to i64
  %conv58 = trunc i64 %conv57 to i32
  call void @mg_send(%struct.mg_connection* %60, i8* %arraydecay56, i32 %conv58)
  br label %if.end59

if.end59:                                         ; preds = %if.then55, %if.then52
  store i32 0, i32* %len, align 4
  %62 = load i32, i32* %ch, align 4
  %and = and i32 %62, 255
  %conv60 = trunc i32 %and to i8
  %63 = load i32, i32* %len, align 4
  %inc = add nsw i32 %63, 1
  store i32 %inc, i32* %len, align 4
  %idxprom61 = sext i32 %63 to i64
  %arrayidx62 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom61
  store i8 %conv60, i8* %arrayidx62, align 1
  br label %if.end101

if.else63:                                        ; preds = %if.else49
  %64 = load i32, i32* %in_ssi_tag, align 4
  %tobool64 = icmp ne i32 %64, 0
  br i1 %tobool64, label %if.then65, label %if.else87

if.then65:                                        ; preds = %if.else63
  %65 = load i32, i32* %len, align 4
  %66 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.btag, i32 0, i32 1), align 8
  %conv66 = trunc i64 %66 to i32
  %cmp67 = icmp eq i32 %65, %conv66
  br i1 %cmp67, label %land.lhs.true69, label %if.else75

land.lhs.true69:                                  ; preds = %if.then65
  %arraydecay70 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %67 = load i8*, i8** getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.btag, i32 0, i32 0), align 8
  %68 = load i64, i64* getelementptr inbounds (%struct.mg_str, %struct.mg_str* @mg_send_ssi_file.btag, i32 0, i32 1), align 8
  %call71 = call i32 @strncmp(i8* %arraydecay70, i8* %67, i64 %68)
  %cmp72 = icmp ne i32 %call71, 0
  br i1 %cmp72, label %if.then74, label %if.else75

if.then74:                                        ; preds = %land.lhs.true69
  store i32 0, i32* %in_ssi_tag, align 4
  br label %if.end81

if.else75:                                        ; preds = %land.lhs.true69, %if.then65
  %69 = load i32, i32* %len, align 4
  %cmp76 = icmp eq i32 %69, 1022
  br i1 %cmp76, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.else75
  %70 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %71 = load i8*, i8** %path.addr, align 8
  %call79 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %70, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.294, i32 0, i32 0), i8* %71)
  store i32 0, i32* %len, align 4
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %if.else75
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then74
  %72 = load i32, i32* %ch, align 4
  %and82 = and i32 %72, 255
  %conv83 = trunc i32 %and82 to i8
  %73 = load i32, i32* %len, align 4
  %inc84 = add nsw i32 %73, 1
  store i32 %inc84, i32* %len, align 4
  %idxprom85 = sext i32 %73 to i64
  %arrayidx86 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom85
  store i8 %conv83, i8* %arrayidx86, align 1
  br label %if.end100

if.else87:                                        ; preds = %if.else63
  %74 = load i32, i32* %ch, align 4
  %and88 = and i32 %74, 255
  %conv89 = trunc i32 %and88 to i8
  %75 = load i32, i32* %len, align 4
  %inc90 = add nsw i32 %75, 1
  store i32 %inc90, i32* %len, align 4
  %idxprom91 = sext i32 %75 to i64
  %arrayidx92 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i64 0, i64 %idxprom91
  store i8 %conv89, i8* %arrayidx92, align 1
  %76 = load i32, i32* %len, align 4
  %cmp93 = icmp eq i32 %76, 1024
  br i1 %cmp93, label %if.then95, label %if.end99

if.then95:                                        ; preds = %if.else87
  %77 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay96 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %78 = load i32, i32* %len, align 4
  %conv97 = sext i32 %78 to i64
  %conv98 = trunc i64 %conv97 to i32
  call void @mg_send(%struct.mg_connection* %77, i8* %arraydecay96, i32 %conv98)
  store i32 0, i32* %len, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.then95, %if.else87
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.end81
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.end59
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.end48
  br label %while.cond

while.end103:                                     ; preds = %while.cond
  %79 = load i32, i32* %len, align 4
  %cmp104 = icmp sgt i32 %79, 0
  br i1 %cmp104, label %if.then106, label %if.end110

if.then106:                                       ; preds = %while.end103
  %80 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay107 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %81 = load i32, i32* %len, align 4
  %conv108 = sext i32 %81 to i64
  %conv109 = trunc i64 %conv108 to i32
  call void @mg_send(%struct.mg_connection* %80, i8* %arraydecay107, i32 %conv109)
  br label %if.end110

if.end110:                                        ; preds = %if.then, %if.then106, %while.end103
  ret void
}

declare i32 @fgetc(%struct.__sFILE*) #3

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_do_ssi_include(%struct.mg_connection* %nc, %struct.http_message* %hm, i8* %ssi, i8* %tag, i32 %include_level, %struct.mg_serve_http_opts* %opts) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %hm.addr = alloca %struct.http_message*, align 8
  %ssi.addr = alloca i8*, align 8
  %tag.addr = alloca i8*, align 8
  %include_level.addr = alloca i32, align 4
  %opts.addr = alloca %struct.mg_serve_http_opts*, align 8
  %file_name = alloca [1024 x i8], align 16
  %path = alloca [1024 x i8], align 16
  %p = alloca i8*, align 8
  %fp = alloca %struct.__sFILE*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.http_message* %hm, %struct.http_message** %hm.addr, align 8
  store i8* %ssi, i8** %ssi.addr, align 8
  store i8* %tag, i8** %tag.addr, align 8
  store i32 %include_level, i32* %include_level.addr, align 4
  store %struct.mg_serve_http_opts* %opts, %struct.mg_serve_http_opts** %opts.addr, align 8
  %0 = load i8*, i8** %tag.addr, align 8
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call = call i32 (i8*, i8*, ...) @sscanf(i8* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.295, i32 0, i32 0), i8* %arraydecay)
  %cmp = icmp eq i32 %call, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %1 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %document_root = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %1, i32 0, i32 0
  %2 = load i8*, i8** %document_root, align 8
  %arraydecay2 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call3 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay1, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.261, i32 0, i32 0), i8* %2, i8* %arraydecay2)
  %cmp4 = icmp slt i32 %call3, 0
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  br label %if.end64

if.end:                                           ; preds = %if.then
  br label %if.end42

if.else:                                          ; preds = %entry
  %3 = load i8*, i8** %tag.addr, align 8
  %arraydecay6 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call7 = call i32 (i8*, i8*, ...) @sscanf(i8* %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.296, i32 0, i32 0), i8* %arraydecay6)
  %cmp8 = icmp eq i32 %call7, 1
  br i1 %cmp8, label %if.then9, label %if.else16

if.then9:                                         ; preds = %if.else
  %arraydecay10 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %arraydecay11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call12 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay10, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* %arraydecay11)
  %cmp13 = icmp slt i32 %call12, 0
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then9
  br label %if.end64

if.end15:                                         ; preds = %if.then9
  br label %if.end41

if.else16:                                        ; preds = %if.else
  %4 = load i8*, i8** %tag.addr, align 8
  %arraydecay17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call18 = call i32 (i8*, i8*, ...) @sscanf(i8* %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.297, i32 0, i32 0), i8* %arraydecay17)
  %cmp19 = icmp eq i32 %call18, 1
  br i1 %cmp19, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else16
  %5 = load i8*, i8** %tag.addr, align 8
  %arraydecay20 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call21 = call i32 (i8*, i8*, ...) @sscanf(i8* %5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.298, i32 0, i32 0), i8* %arraydecay20)
  %cmp22 = icmp eq i32 %call21, 1
  br i1 %cmp22, label %if.then23, label %if.else38

if.then23:                                        ; preds = %lor.lhs.false, %if.else16
  %arraydecay24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %6 = load i8*, i8** %ssi.addr, align 8
  %call25 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %arraydecay24, i64 1024, i32 0, i64 1024, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* %6)
  %arraydecay26 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call27 = call i8* @strrchr(i8* %arraydecay26, i32 47)
  store i8* %call27, i8** %p, align 8
  %cmp28 = icmp ne i8* %call27, null
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.then23
  %7 = load i8*, i8** %p, align 8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 1
  store i8 0, i8* %arrayidx, align 1
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %if.then23
  %arraydecay31 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %arraydecay32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call33 = call i64 @strlen(i8* %arraydecay32)
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay31, i64 %call33
  %arraydecay34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call35 = call i64 @strlen(i8* %arraydecay34)
  %sub = sub i64 1024, %call35
  %arraydecay36 = getelementptr inbounds [1024 x i8], [1024 x i8]* %file_name, i32 0, i32 0
  %call37 = call i32 (i8*, i64, i32, i64, i8*, ...) @__snprintf_chk(i8* %add.ptr, i64 %sub, i32 0, i64 -1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* %arraydecay36)
  br label %if.end40

if.else38:                                        ; preds = %lor.lhs.false
  %8 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %9 = load i8*, i8** %tag.addr, align 8
  %call39 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %8, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.299, i32 0, i32 0), i8* %9)
  br label %if.end64

if.end40:                                         ; preds = %if.end30
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end15
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end
  %arraydecay43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call44 = call %struct.__sFILE* @mg_fopen(i8* %arraydecay43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0))
  store %struct.__sFILE* %call44, %struct.__sFILE** %fp, align 8
  %cmp45 = icmp eq %struct.__sFILE* %call44, null
  br i1 %cmp45, label %if.then46, label %if.else51

if.then46:                                        ; preds = %if.end42
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call48 = call i32 @mg_get_errno()
  %call49 = call i8* @"\01_strerror"(i32 %call48)
  %call50 = call i32 (%struct.mg_connection*, i8*, ...) @mg_printf(%struct.mg_connection* %10, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.300, i32 0, i32 0), i8* %arraydecay47, i8* %call49)
  br label %if.end64

if.else51:                                        ; preds = %if.end42
  %11 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call52 = call i32 @fileno(%struct.__sFILE* %11)
  call void @mg_set_close_on_exec(i32 %call52)
  %12 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %ssi_pattern = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %12, i32 0, i32 6
  %13 = load i8*, i8** %ssi_pattern, align 8
  %14 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  %ssi_pattern53 = getelementptr inbounds %struct.mg_serve_http_opts, %struct.mg_serve_http_opts* %14, i32 0, i32 6
  %15 = load i8*, i8** %ssi_pattern53, align 8
  %call54 = call i64 @strlen(i8* %15)
  %conv = trunc i64 %call54 to i32
  %arraydecay55 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %call56 = call i64 @mg_match_prefix(i8* %13, i32 %conv, i8* %arraydecay55)
  %cmp57 = icmp ugt i64 %call56, 0
  br i1 %cmp57, label %if.then59, label %if.else61

if.then59:                                        ; preds = %if.else51
  %16 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %17 = load %struct.http_message*, %struct.http_message** %hm.addr, align 8
  %arraydecay60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i32 0, i32 0
  %18 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %19 = load i32, i32* %include_level.addr, align 4
  %add = add nsw i32 %19, 1
  %20 = load %struct.mg_serve_http_opts*, %struct.mg_serve_http_opts** %opts.addr, align 8
  call void @mg_send_ssi_file(%struct.mg_connection* %16, %struct.http_message* %17, i8* %arraydecay60, %struct.__sFILE* %18, i32 %add, %struct.mg_serve_http_opts* %20)
  br label %if.end62

if.else61:                                        ; preds = %if.else51
  %21 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %22 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  call void @mg_send_file_data(%struct.mg_connection* %21, %struct.__sFILE* %22)
  br label %if.end62

if.end62:                                         ; preds = %if.else61, %if.then59
  %23 = load %struct.__sFILE*, %struct.__sFILE** %fp, align 8
  %call63 = call i32 @fclose(%struct.__sFILE* %23)
  br label %if.end64

if.end64:                                         ; preds = %if.then5, %if.then14, %if.else38, %if.end62, %if.then46
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_send_file_data(%struct.mg_connection* %nc, %struct.__sFILE* %fp) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %fp.addr = alloca %struct.__sFILE*, align 8
  %buf = alloca [1024 x i8], align 16
  %n = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.__sFILE* %fp, %struct.__sFILE** %fp.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %0 = load %struct.__sFILE*, %struct.__sFILE** %fp.addr, align 8
  %call = call i64 @mg_fread(i8* %arraydecay, i64 1, i64 1024, %struct.__sFILE* %0)
  store i64 %call, i64* %n, align 8
  %cmp = icmp ugt i64 %call, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %arraydecay1 = getelementptr inbounds [1024 x i8], [1024 x i8]* %buf, i32 0, i32 0
  %2 = load i64, i64* %n, align 8
  %conv = trunc i64 %2 to i32
  call void @mg_send(%struct.mg_connection* %1, i8* %arraydecay1, i32 %conv)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal { i8*, i64 } @mg_get_mime_types_entry(i8* %path.coerce0, i64 %path.coerce1) #0 {
entry:
  %retval = alloca %struct.mg_str, align 8
  %path = alloca %struct.mg_str, align 8
  %i = alloca i64, align 8
  %ext = alloca %struct.mg_str, align 8
  %pext = alloca %struct.mg_str, align 8
  %0 = bitcast %struct.mg_str* %path to { i8*, i64 }*
  %1 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  store i8* %path.coerce0, i8** %1, align 8
  %2 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  store i64 %path.coerce1, i64* %2, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %3
  %extension = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0
  %4 = load i8*, i8** %extension, align 8
  %cmp = icmp ne i8* %4, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %5 = load i64, i64* %len, align 8
  %6 = load i64, i64* %i, align 8
  %arrayidx1 = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %6
  %ext_len = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx1, i32 0, i32 1
  %7 = load i64, i64* %ext_len, align 8
  %add = add i64 %7, 1
  %cmp2 = icmp ult i64 %5, %add
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %p = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ext, i32 0, i32 0
  %8 = load i64, i64* %i, align 8
  %arrayidx3 = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %8
  %extension4 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx3, i32 0, i32 0
  %9 = load i8*, i8** %extension4, align 8
  store i8* %9, i8** %p, align 8
  %len5 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ext, i32 0, i32 1
  %10 = load i64, i64* %i, align 8
  %arrayidx6 = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %10
  %ext_len7 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx6, i32 0, i32 1
  %11 = load i64, i64* %ext_len7, align 8
  store i64 %11, i64* %len5, align 8
  %p8 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pext, i32 0, i32 0
  %p9 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 0
  %12 = load i8*, i8** %p9, align 8
  %len10 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %path, i32 0, i32 1
  %13 = load i64, i64* %len10, align 8
  %len11 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ext, i32 0, i32 1
  %14 = load i64, i64* %len11, align 8
  %sub = sub i64 %13, %14
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %sub
  store i8* %add.ptr, i8** %p8, align 8
  %len12 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pext, i32 0, i32 1
  %len13 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %ext, i32 0, i32 1
  %15 = load i64, i64* %len13, align 8
  store i64 %15, i64* %len12, align 8
  %p14 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %pext, i32 0, i32 0
  %16 = load i8*, i8** %p14, align 8
  %arrayidx15 = getelementptr inbounds i8, i8* %16, i64 -1
  %17 = load i8, i8* %arrayidx15, align 1
  %conv = sext i8 %17 to i32
  %cmp16 = icmp eq i32 %conv, 46
  br i1 %cmp16, label %land.lhs.true, label %if.end23

land.lhs.true:                                    ; preds = %if.end
  %18 = bitcast %struct.mg_str* %ext to { i8*, i64 }*
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %18, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = bitcast %struct.mg_str* %pext to { i8*, i64 }*
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %call = call i32 @mg_strcasecmp(i8* %20, i64 %22, i8* %25, i64 %27)
  %cmp18 = icmp eq i32 %call, 0
  br i1 %cmp18, label %if.then20, label %if.end23

if.then20:                                        ; preds = %land.lhs.true
  %28 = load i64, i64* %i, align 8
  %arrayidx21 = getelementptr inbounds [49 x %struct.anon], [49 x %struct.anon]* @mg_static_builtin_mime_types, i64 0, i64 %28
  %mime_type = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx21, i32 0, i32 2
  %29 = load i8*, i8** %mime_type, align 8
  %call22 = call { i8*, i64 } @mg_mk_str(i8* %29)
  %30 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 0
  %32 = extractvalue { i8*, i64 } %call22, 0
  store i8* %32, i8** %31, align 8
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 1
  %34 = extractvalue { i8*, i64 } %call22, 1
  store i64 %34, i64* %33, align 8
  br label %return

if.end23:                                         ; preds = %land.lhs.true, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end23, %if.then
  %35 = load i64, i64* %i, align 8
  %inc = add i64 %35, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call24 = call { i8*, i64 } @mg_mk_str(i8* null)
  %36 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %37 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 0
  %38 = extractvalue { i8*, i64 } %call24, 0
  store i8* %38, i8** %37, align 8
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %36, i32 0, i32 1
  %40 = extractvalue { i8*, i64 } %call24, 1
  store i64 %40, i64* %39, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then20
  %41 = bitcast %struct.mg_str* %retval to { i8*, i64 }*
  %42 = load { i8*, i64 }, { i8*, i64 }* %41, align 8
  ret { i8*, i64 } %42
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_deliver_websocket_data(%struct.mg_connection* %nc) #0 {
entry:
  %retval = alloca i32, align 4
  %nc.addr = alloca %struct.mg_connection*, align 8
  %i = alloca i64, align 8
  %data_len = alloca i64, align 8
  %frame_len = alloca i64, align 8
  %new_data_len = alloca i64, align 8
  %len1 = alloca i64, align 8
  %mask_len = alloca i64, align 8
  %header_len = alloca i64, align 8
  %wsd = alloca %struct.mg_ws_proto_data*, align 8
  %new_data = alloca i8*, align 8
  %e = alloca i8*, align 8
  %flags = alloca i8, align 1
  %ok = alloca i32, align 4
  %reass = alloca i32, align 4
  %existing_len = alloca i64, align 8
  %cleanup_len = alloca i64, align 8
  %wsm = alloca %struct.websocket_message, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i64 0, i64* %data_len, align 8
  store i64 0, i64* %frame_len, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %0, i32 0, i32 8
  %len = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf, i32 0, i32 1
  %1 = load i64, i64* %len, align 8
  store i64 %1, i64* %new_data_len, align 8
  store i64 0, i64* %mask_len, align 8
  store i64 0, i64* %header_len, align 8
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_ws_proto_data* @mg_ws_get_proto_data(%struct.mg_connection* %2)
  store %struct.mg_ws_proto_data* %call, %struct.mg_ws_proto_data** %wsd, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf2, i32 0, i32 0
  %4 = load i8*, i8** %buf, align 8
  store i8* %4, i8** %new_data, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf3 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 8
  %buf4 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf3, i32 0, i32 0
  %6 = load i8*, i8** %buf4, align 8
  %7 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf5 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %7, i32 0, i32 8
  %len6 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf5, i32 0, i32 1
  %8 = load i64, i64* %len6, align 8
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %8
  store i8* %add.ptr, i8** %e, align 8
  %9 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %9, i32 0, i32 0
  %10 = load i64, i64* %reass_len, align 8
  %cmp = icmp ugt i64 %10, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len7 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %11, i32 0, i32 0
  %12 = load i64, i64* %reass_len7, align 8
  store i64 %12, i64* %existing_len, align 8
  %13 = load i64, i64* %new_data_len, align 8
  %14 = load i64, i64* %existing_len, align 8
  %cmp8 = icmp uge i64 %13, %14
  %lnot = xor i1 %cmp8, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %tobool = icmp ne i64 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.mg_deliver_websocket_data, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 9900, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.389, i32 0, i32 0)) #13
  unreachable
                                                  ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %15
  %16 = load i64, i64* %existing_len, align 8
  %17 = load i8*, i8** %new_data, align 8
  %add.ptr9 = getelementptr inbounds i8, i8* %17, i64 %16
  store i8* %add.ptr9, i8** %new_data, align 8
  %18 = load i64, i64* %existing_len, align 8
  %19 = load i64, i64* %new_data_len, align 8
  %sub = sub i64 %19, %18
  store i64 %sub, i64* %new_data_len, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %entry
  %20 = load i8*, i8** %new_data, align 8
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx, align 1
  store i8 %21, i8* %flags, align 1
  %22 = load i64, i64* %new_data_len, align 8
  %cmp10 = icmp ugt i64 %22, 0
  br i1 %cmp10, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %23 = load i8, i8* %flags, align 1
  %call12 = call i32 @mg_is_ws_fragment(i8 zeroext %23)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %24 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags14 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %24, i32 0, i32 21
  %25 = load i64, i64* %flags14, align 8
  %and = and i64 %25, 4096
  %tobool15 = icmp ne i64 %and, 0
  %lnot16 = xor i1 %tobool15, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end
  %26 = phi i1 [ false, %land.lhs.true ], [ false, %if.end ], [ %lnot16, %land.rhs ]
  %land.ext = zext i1 %26 to i32
  store i32 %land.ext, i32* %reass, align 4
  %27 = load i32, i32* %reass, align 4
  %tobool18 = icmp ne i32 %27, 0
  br i1 %tobool18, label %land.lhs.true19, label %if.else

land.lhs.true19:                                  ; preds = %land.end
  %28 = load i8, i8* %flags, align 1
  %call20 = call i32 @mg_is_ws_control_frame(i8 zeroext %28)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then22, label %if.else

if.then22:                                        ; preds = %land.lhs.true19
  %29 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_ws_close(%struct.mg_connection* %29, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.390, i32 0, i32 0), i64 -1)
  store i32 0, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true19, %land.end
  %30 = load i64, i64* %new_data_len, align 8
  %cmp23 = icmp ugt i64 %30, 0
  br i1 %cmp23, label %land.lhs.true25, label %if.end35

land.lhs.true25:                                  ; preds = %if.else
  %31 = load i32, i32* %reass, align 4
  %tobool26 = icmp ne i32 %31, 0
  br i1 %tobool26, label %if.end35, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %land.lhs.true25
  %32 = load i8, i8* %flags, align 1
  %call28 = call i32 @mg_is_ws_control_frame(i8 zeroext %32)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.end35, label %land.lhs.true30

land.lhs.true30:                                  ; preds = %land.lhs.true27
  %33 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len31 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %33, i32 0, i32 0
  %34 = load i64, i64* %reass_len31, align 8
  %cmp32 = icmp ugt i64 %34, 0
  br i1 %cmp32, label %if.then34, label %if.end35

if.then34:                                        ; preds = %land.lhs.true30
  %35 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_ws_close(%struct.mg_connection* %35, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.391, i32 0, i32 0), i64 -1)
  store i32 0, i32* %retval, align 4
  br label %return

if.end35:                                         ; preds = %land.lhs.true30, %land.lhs.true27, %land.lhs.true25, %if.else
  br label %if.end36

if.end36:                                         ; preds = %if.end35
  %36 = load i64, i64* %new_data_len, align 8
  %cmp37 = icmp uge i64 %36, 2
  br i1 %cmp37, label %if.then39, label %if.end85

if.then39:                                        ; preds = %if.end36
  %37 = load i8*, i8** %new_data, align 8
  %arrayidx40 = getelementptr inbounds i8, i8* %37, i64 1
  %38 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %38 to i32
  %and42 = and i32 %conv41, 127
  %conv43 = sext i32 %and42 to i64
  store i64 %conv43, i64* %len1, align 8
  %39 = load i8*, i8** %new_data, align 8
  %arrayidx44 = getelementptr inbounds i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %40 to i32
  %and46 = and i32 %conv45, 128
  %tobool47 = icmp ne i32 %and46, 0
  %cond = select i1 %tobool47, i32 4, i32 0
  %conv48 = sext i32 %cond to i64
  store i64 %conv48, i64* %mask_len, align 8
  %41 = load i64, i64* %len1, align 8
  %cmp49 = icmp ult i64 %41, 126
  br i1 %cmp49, label %land.lhs.true51, label %if.else55

land.lhs.true51:                                  ; preds = %if.then39
  %42 = load i64, i64* %new_data_len, align 8
  %43 = load i64, i64* %mask_len, align 8
  %cmp52 = icmp uge i64 %42, %43
  br i1 %cmp52, label %if.then54, label %if.else55

if.then54:                                        ; preds = %land.lhs.true51
  %44 = load i64, i64* %len1, align 8
  store i64 %44, i64* %data_len, align 8
  %45 = load i64, i64* %mask_len, align 8
  %add = add i64 2, %45
  store i64 %add, i64* %header_len, align 8
  br label %if.end84

if.else55:                                        ; preds = %land.lhs.true51, %if.then39
  %46 = load i64, i64* %len1, align 8
  %cmp56 = icmp eq i64 %46, 126
  br i1 %cmp56, label %land.lhs.true58, label %if.else69

land.lhs.true58:                                  ; preds = %if.else55
  %47 = load i64, i64* %new_data_len, align 8
  %48 = load i64, i64* %mask_len, align 8
  %add59 = add i64 4, %48
  %cmp60 = icmp uge i64 %47, %add59
  br i1 %cmp60, label %if.then62, label %if.else69

if.then62:                                        ; preds = %land.lhs.true58
  %49 = load i64, i64* %mask_len, align 8
  %add63 = add i64 4, %49
  store i64 %add63, i64* %header_len, align 8
  %50 = load i8*, i8** %new_data, align 8
  %arrayidx64 = getelementptr inbounds i8, i8* %50, i64 2
  %51 = bitcast i8* %arrayidx64 to i16*
  %52 = load i16, i16* %51, align 2
  %call65 = call zeroext i16 @_OSSwapInt16(i16 zeroext %52)
  %conv66 = zext i16 %call65 to i32
  %conv67 = trunc i32 %conv66 to i16
  %conv68 = zext i16 %conv67 to i64
  store i64 %conv68, i64* %data_len, align 8
  br label %if.end83

if.else69:                                        ; preds = %land.lhs.true58, %if.else55
  %53 = load i64, i64* %new_data_len, align 8
  %54 = load i64, i64* %mask_len, align 8
  %add70 = add i64 10, %54
  %cmp71 = icmp uge i64 %53, %add70
  br i1 %cmp71, label %if.then73, label %if.end82

if.then73:                                        ; preds = %if.else69
  %55 = load i64, i64* %mask_len, align 8
  %add74 = add i64 10, %55
  store i64 %add74, i64* %header_len, align 8
  %56 = load i8*, i8** %new_data, align 8
  %arrayidx75 = getelementptr inbounds i8, i8* %56, i64 2
  %57 = bitcast i8* %arrayidx75 to i32*
  %58 = load i32, i32* %57, align 4
  %call76 = call i32 @_OSSwapInt32(i32 %58)
  %conv77 = zext i32 %call76 to i64
  %shl = shl i64 %conv77, 32
  %59 = load i8*, i8** %new_data, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %59, i64 6
  %60 = bitcast i8* %arrayidx78 to i32*
  %61 = load i32, i32* %60, align 4
  %call79 = call i32 @_OSSwapInt32(i32 %61)
  %conv80 = zext i32 %call79 to i64
  %add81 = add i64 %shl, %conv80
  store i64 %add81, i64* %data_len, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.then73, %if.else69
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then62
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then54
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.end36
  %62 = load i64, i64* %header_len, align 8
  %63 = load i64, i64* %data_len, align 8
  %add86 = add i64 %62, %63
  store i64 %add86, i64* %frame_len, align 8
  %64 = load i64, i64* %frame_len, align 8
  %cmp87 = icmp ugt i64 %64, 0
  br i1 %cmp87, label %land.rhs89, label %land.end92

land.rhs89:                                       ; preds = %if.end85
  %65 = load i64, i64* %frame_len, align 8
  %66 = load i64, i64* %new_data_len, align 8
  %cmp90 = icmp ule i64 %65, %66
  br label %land.end92

land.end92:                                       ; preds = %land.rhs89, %if.end85
  %67 = phi i1 [ false, %if.end85 ], [ %cmp90, %land.rhs89 ]
  %land.ext93 = zext i1 %67 to i32
  store i32 %land.ext93, i32* %ok, align 4
  %68 = load i64, i64* %frame_len, align 8
  %69 = load i64, i64* %header_len, align 8
  %cmp94 = icmp ult i64 %68, %69
  br i1 %cmp94, label %if.then98, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end92
  %70 = load i64, i64* %frame_len, align 8
  %71 = load i64, i64* %data_len, align 8
  %cmp96 = icmp ult i64 %70, %71
  br i1 %cmp96, label %if.then98, label %if.end99

if.then98:                                        ; preds = %lor.lhs.false, %land.end92
  store i32 0, i32* %ok, align 4
  %72 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_ws_close(%struct.mg_connection* %72, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.392, i32 0, i32 0), i64 -1)
  br label %if.end99

if.end99:                                         ; preds = %if.then98, %lor.lhs.false
  %73 = load i32, i32* %ok, align 4
  %tobool100 = icmp ne i32 %73, 0
  br i1 %tobool100, label %if.then101, label %if.end191

if.then101:                                       ; preds = %if.end99
  store i64 0, i64* %cleanup_len, align 8
  %74 = load i64, i64* %data_len, align 8
  %size = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  store i64 %74, i64* %size, align 8
  %75 = load i8*, i8** %new_data, align 8
  %76 = load i64, i64* %header_len, align 8
  %add.ptr102 = getelementptr inbounds i8, i8* %75, i64 %76
  %data = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  store i8* %add.ptr102, i8** %data, align 8
  %77 = load i8, i8* %flags, align 1
  %flags103 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 2
  store i8 %77, i8* %flags103, align 8
  %78 = load i64, i64* %mask_len, align 8
  %cmp104 = icmp ugt i64 %78, 0
  br i1 %cmp104, label %if.then106, label %if.end117

if.then106:                                       ; preds = %if.then101
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then106
  %79 = load i64, i64* %i, align 8
  %80 = load i64, i64* %data_len, align 8
  %cmp107 = icmp ult i64 %79, %80
  br i1 %cmp107, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %81 = load i8*, i8** %new_data, align 8
  %82 = load i64, i64* %header_len, align 8
  %add.ptr109 = getelementptr inbounds i8, i8* %81, i64 %82
  %83 = load i64, i64* %mask_len, align 8
  %idx.neg = sub i64 0, %83
  %add.ptr110 = getelementptr inbounds i8, i8* %add.ptr109, i64 %idx.neg
  %84 = load i64, i64* %i, align 8
  %rem = urem i64 %84, 4
  %arrayidx111 = getelementptr inbounds i8, i8* %add.ptr110, i64 %rem
  %85 = load i8, i8* %arrayidx111, align 1
  %conv112 = zext i8 %85 to i32
  %86 = load i8*, i8** %new_data, align 8
  %87 = load i64, i64* %i, align 8
  %88 = load i64, i64* %header_len, align 8
  %add113 = add i64 %87, %88
  %arrayidx114 = getelementptr inbounds i8, i8* %86, i64 %add113
  %89 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %89 to i32
  %xor = xor i32 %conv115, %conv112
  %conv116 = trunc i32 %xor to i8
  store i8 %conv116, i8* %arrayidx114, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %90 = load i64, i64* %i, align 8
  %inc = add i64 %90, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end117

if.end117:                                        ; preds = %for.end, %if.then101
  %91 = load i32, i32* %reass, align 4
  %tobool118 = icmp ne i32 %91, 0
  br i1 %tobool118, label %if.then119, label %if.else160

if.then119:                                       ; preds = %if.end117
  %92 = load i8, i8* %flags, align 1
  %call120 = call i32 @mg_is_ws_first_fragment(i8 zeroext %92)
  %tobool121 = icmp ne i32 %call120, 0
  br i1 %tobool121, label %if.then122, label %if.end125

if.then122:                                       ; preds = %if.then119
  %93 = load i8*, i8** %new_data, align 8
  %add.ptr123 = getelementptr inbounds i8, i8* %93, i64 1
  store i8* %add.ptr123, i8** %new_data, align 8
  %94 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len124 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %94, i32 0, i32 0
  store i64 1, i64* %reass_len124, align 8
  br label %if.end125

if.end125:                                        ; preds = %if.then122, %if.then119
  %95 = load i8*, i8** %new_data, align 8
  %data126 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %96 = load i8*, i8** %data126, align 8
  %97 = load i8*, i8** %e, align 8
  %data127 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %98 = load i8*, i8** %data127, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %97 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %98 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %99 = load i8*, i8** %new_data, align 8
  %100 = call i64 @llvm.objectsize.i64.p0i8(i8* %99, i1 false)
  %call128 = call i8* @__memmove_chk(i8* %95, i8* %96, i64 %sub.ptr.sub, i64 %100) #5
  %size129 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  %101 = load i64, i64* %size129, align 8
  %102 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len130 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %102, i32 0, i32 0
  %103 = load i64, i64* %reass_len130, align 8
  %add131 = add i64 %103, %101
  store i64 %add131, i64* %reass_len130, align 8
  %data132 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %104 = load i8*, i8** %data132, align 8
  %105 = load i8*, i8** %new_data, align 8
  %sub.ptr.lhs.cast133 = ptrtoint i8* %104 to i64
  %sub.ptr.rhs.cast134 = ptrtoint i8* %105 to i64
  %sub.ptr.sub135 = sub i64 %sub.ptr.lhs.cast133, %sub.ptr.rhs.cast134
  %106 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf136 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %106, i32 0, i32 8
  %len137 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf136, i32 0, i32 1
  %107 = load i64, i64* %len137, align 8
  %sub138 = sub i64 %107, %sub.ptr.sub135
  store i64 %sub138, i64* %len137, align 8
  %108 = load i8, i8* %flags, align 1
  %conv139 = zext i8 %108 to i32
  %and140 = and i32 %conv139, 128
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %if.then142, label %if.end159

if.then142:                                       ; preds = %if.end125
  %109 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf143 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %109, i32 0, i32 8
  %buf144 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf143, i32 0, i32 0
  %110 = load i8*, i8** %buf144, align 8
  %arrayidx145 = getelementptr inbounds i8, i8* %110, i64 0
  %111 = load i8, i8* %arrayidx145, align 1
  %conv146 = sext i8 %111 to i32
  %or = or i32 128, %conv146
  %conv147 = trunc i32 %or to i8
  %flags148 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 2
  store i8 %conv147, i8* %flags148, align 8
  %112 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf149 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %112, i32 0, i32 8
  %buf150 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf149, i32 0, i32 0
  %113 = load i8*, i8** %buf150, align 8
  %add.ptr151 = getelementptr inbounds i8, i8* %113, i64 1
  %data152 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  store i8* %add.ptr151, i8** %data152, align 8
  %114 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len153 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %114, i32 0, i32 0
  %115 = load i64, i64* %reass_len153, align 8
  %sub154 = sub i64 %115, 1
  %size155 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  store i64 %sub154, i64* %size155, align 8
  %116 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len156 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %116, i32 0, i32 0
  %117 = load i64, i64* %reass_len156, align 8
  store i64 %117, i64* %cleanup_len, align 8
  %118 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len157 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %118, i32 0, i32 0
  store i64 0, i64* %reass_len157, align 8
  %119 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_handle_incoming_websocket_frame(%struct.mg_connection* %119, %struct.websocket_message* %wsm)
  %120 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf158 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %120, i32 0, i32 8
  %121 = load i64, i64* %cleanup_len, align 8
  call void @mbuf_remove(%struct.mbuf* %recv_mbuf158, i64 %121)
  br label %if.end159

if.end159:                                        ; preds = %if.then142, %if.end125
  br label %if.end190

if.else160:                                       ; preds = %if.end117
  %122 = load i64, i64* %frame_len, align 8
  store i64 %122, i64* %cleanup_len, align 8
  %123 = load i8, i8* %flags, align 1
  %conv161 = zext i8 %123 to i32
  %and162 = and i32 %conv161, 15
  switch i32 %and162, label %sw.epilog [
    i32 9, label %sw.bb
    i32 8, label %sw.bb165
  ]

sw.bb:                                            ; preds = %if.else160
  %124 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %data163 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %125 = load i8*, i8** %data163, align 8
  %size164 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  %126 = load i64, i64* %size164, align 8
  call void @mg_send_websocket_frame(%struct.mg_connection* %124, i32 10, i8* %125, i64 %126)
  br label %sw.epilog

sw.bb165:                                         ; preds = %if.else160
  %127 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %data166 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 0
  %128 = load i8*, i8** %data166, align 8
  %size167 = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %wsm, i32 0, i32 1
  %129 = load i64, i64* %size167, align 8
  call void @mg_ws_close(%struct.mg_connection* %127, i8* %128, i64 %129)
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else160, %sw.bb165, %sw.bb
  %130 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  call void @mg_handle_incoming_websocket_frame(%struct.mg_connection* %130, %struct.websocket_message* %wsm)
  %131 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf168 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %131, i32 0, i32 8
  %buf169 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf168, i32 0, i32 0
  %132 = load i8*, i8** %buf169, align 8
  %133 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len170 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %133, i32 0, i32 0
  %134 = load i64, i64* %reass_len170, align 8
  %add.ptr171 = getelementptr inbounds i8, i8* %132, i64 %134
  %135 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf172 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %135, i32 0, i32 8
  %buf173 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf172, i32 0, i32 0
  %136 = load i8*, i8** %buf173, align 8
  %137 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len174 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %137, i32 0, i32 0
  %138 = load i64, i64* %reass_len174, align 8
  %add.ptr175 = getelementptr inbounds i8, i8* %136, i64 %138
  %139 = load i64, i64* %cleanup_len, align 8
  %add.ptr176 = getelementptr inbounds i8, i8* %add.ptr175, i64 %139
  %140 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf177 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %140, i32 0, i32 8
  %len178 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf177, i32 0, i32 1
  %141 = load i64, i64* %len178, align 8
  %142 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len179 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %142, i32 0, i32 0
  %143 = load i64, i64* %reass_len179, align 8
  %sub180 = sub i64 %141, %143
  %144 = load i64, i64* %cleanup_len, align 8
  %sub181 = sub i64 %sub180, %144
  %145 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf182 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %145, i32 0, i32 8
  %buf183 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf182, i32 0, i32 0
  %146 = load i8*, i8** %buf183, align 8
  %147 = load %struct.mg_ws_proto_data*, %struct.mg_ws_proto_data** %wsd, align 8
  %reass_len184 = getelementptr inbounds %struct.mg_ws_proto_data, %struct.mg_ws_proto_data* %147, i32 0, i32 0
  %148 = load i64, i64* %reass_len184, align 8
  %add.ptr185 = getelementptr inbounds i8, i8* %146, i64 %148
  %149 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr185, i1 false)
  %call186 = call i8* @__memmove_chk(i8* %add.ptr171, i8* %add.ptr176, i64 %sub181, i64 %149) #5
  %150 = load i64, i64* %cleanup_len, align 8
  %151 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %recv_mbuf187 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %151, i32 0, i32 8
  %len188 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %recv_mbuf187, i32 0, i32 1
  %152 = load i64, i64* %len188, align 8
  %sub189 = sub i64 %152, %150
  store i64 %sub189, i64* %len188, align 8
  br label %if.end190

if.end190:                                        ; preds = %sw.epilog, %if.end159
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.end99
  %153 = load i32, i32* %ok, align 4
  store i32 %153, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end191, %if.then34, %if.then22
  %154 = load i32, i32* %retval, align 4
  ret i32 %154
}

; Function Attrs: noinline nounwind ssp uwtable
define internal %struct.mg_ws_proto_data* @mg_ws_get_proto_data(%struct.mg_connection* %nc) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %htd = alloca %struct.mg_http_proto_data*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  %0 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %call = call %struct.mg_http_proto_data* @mg_http_get_proto_data(%struct.mg_connection* %0)
  store %struct.mg_http_proto_data* %call, %struct.mg_http_proto_data** %htd, align 8
  %1 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %htd, align 8
  %cmp = icmp ne %struct.mg_http_proto_data* %1, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.mg_http_proto_data*, %struct.mg_http_proto_data** %htd, align 8
  %ws_data = getelementptr inbounds %struct.mg_http_proto_data, %struct.mg_http_proto_data* %2, i32 0, i32 2
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.mg_ws_proto_data* [ %ws_data, %cond.true ], [ null, %cond.false ]
  ret %struct.mg_ws_proto_data* %cond
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_is_ws_fragment(i8 zeroext %flags) #0 {
entry:
  %flags.addr = alloca i8, align 1
  store i8 %flags, i8* %flags.addr, align 1
  %0 = load i8, i8* %flags.addr, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %1 = load i8, i8* %flags.addr, align 1
  %conv2 = zext i8 %1 to i32
  %and3 = and i32 %conv2, 15
  %cmp4 = icmp eq i32 %and3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %cmp4, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_is_ws_control_frame(i8 zeroext %flags) #0 {
entry:
  %flags.addr = alloca i8, align 1
  %op = alloca i8, align 1
  store i8 %flags, i8* %flags.addr, align 1
  %0 = load i8, i8* %flags.addr, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 15
  %conv1 = trunc i32 %and to i8
  store i8 %conv1, i8* %op, align 1
  %1 = load i8, i8* %op, align 1
  %conv2 = zext i8 %1 to i32
  %cmp = icmp eq i32 %conv2, 8
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8, i8* %op, align 1
  %conv4 = zext i8 %2 to i32
  %cmp5 = icmp eq i32 %conv4, 9
  br i1 %cmp5, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %3 = load i8, i8* %op, align 1
  %conv7 = zext i8 %3 to i32
  %cmp8 = icmp eq i32 %conv7, 10
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %4 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp8, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32
  ret i32 %lor.ext
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_ws_close(%struct.mg_connection* %nc, i8* %data, i64 %len) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  store i64 %len, i64* %len.addr, align 8
  %0 = load i64, i64* %len.addr, align 8
  %conv = trunc i64 %0 to i32
  %cmp = icmp eq i32 %conv, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %data.addr, align 8
  %call = call i64 @strlen(i8* %1)
  store i64 %call, i64* %len.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load i8*, i8** %data.addr, align 8
  %4 = load i64, i64* %len.addr, align 8
  call void @mg_send_websocket_frame(%struct.mg_connection* %2, i32 8, i8* %3, i64 %4)
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %flags = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 21
  %6 = load i64, i64* %flags, align 8
  %or = or i64 %6, 1024
  store i64 %or, i64* %flags, align 8
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @mg_is_ws_first_fragment(i8 zeroext %flags) #0 {
entry:
  %flags.addr = alloca i8, align 1
  store i8 %flags, i8* %flags.addr, align 1
  %0 = load i8, i8* %flags.addr, align 1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %1 = load i8, i8* %flags.addr, align 1
  %conv2 = zext i8 %1 to i32
  %and3 = and i32 %conv2, 15
  %cmp4 = icmp ne i32 %and3, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp4, %land.rhs ]
  %land.ext = zext i1 %2 to i32
  ret i32 %land.ext
}

; Function Attrs: noinline nounwind ssp uwtable
define internal void @mg_handle_incoming_websocket_frame(%struct.mg_connection* %nc, %struct.websocket_message* %wsm) #0 {
entry:
  %nc.addr = alloca %struct.mg_connection*, align 8
  %wsm.addr = alloca %struct.websocket_message*, align 8
  store %struct.mg_connection* %nc, %struct.mg_connection** %nc.addr, align 8
  store %struct.websocket_message* %wsm, %struct.websocket_message** %wsm.addr, align 8
  %0 = load %struct.websocket_message*, %struct.websocket_message** %wsm.addr, align 8
  %flags = getelementptr inbounds %struct.websocket_message, %struct.websocket_message* %0, i32 0, i32 2
  %1 = load i8, i8* %flags, align 8
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %3 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %3, i32 0, i32 15
  %4 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler, align 8
  %5 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %5, i32 0, i32 16
  %6 = load i8*, i8** %user_data, align 8
  %7 = load %struct.websocket_message*, %struct.websocket_message** %wsm.addr, align 8
  %8 = bitcast %struct.websocket_message* %7 to i8*
  call void @mg_call(%struct.mg_connection* %2, void (%struct.mg_connection*, i32, i8*)* %4, i8* %6, i32 114, i8* %8)
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %10 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %handler1 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %10, i32 0, i32 15
  %11 = load void (%struct.mg_connection*, i32, i8*)*, void (%struct.mg_connection*, i32, i8*)** %handler1, align 8
  %12 = load %struct.mg_connection*, %struct.mg_connection** %nc.addr, align 8
  %user_data2 = getelementptr inbounds %struct.mg_connection, %struct.mg_connection* %12, i32 0, i32 16
  %13 = load i8*, i8** %user_data2, align 8
  %14 = load %struct.websocket_message*, %struct.websocket_message** %wsm.addr, align 8
  %15 = bitcast %struct.websocket_message* %14 to i8*
  call void @mg_call(%struct.mg_connection* %9, void (%struct.mg_connection*, i32, i8*)* %11, i8* %13, i32 113, i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

declare i32 @rand() #3

; Function Attrs: noinline nounwind ssp uwtable
define internal i32 @parse_mqtt(%struct.mbuf* %io, %struct.mg_mqtt_message* %mm) #0 {
entry:
  %retval = alloca i32, align 4
  %io.addr = alloca %struct.mbuf*, align 8
  %mm.addr = alloca %struct.mg_mqtt_message*, align 8
  %header = alloca i8, align 1
  %len = alloca i32, align 4
  %len_len = alloca i32, align 4
  %p = alloca i8*, align 8
  %end = alloca i8*, align 8
  %eop = alloca i8*, align 8
  %lc = alloca i8, align 1
  %cmd = alloca i32, align 4
  store %struct.mbuf* %io, %struct.mbuf** %io.addr, align 8
  store %struct.mg_mqtt_message* %mm, %struct.mg_mqtt_message** %mm.addr, align 8
  %0 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %buf = getelementptr inbounds %struct.mbuf, %struct.mbuf* %0, i32 0, i32 0
  %1 = load i8*, i8** %buf, align 8
  %2 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %len1 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %2, i32 0, i32 1
  %3 = load i64, i64* %len1, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %3
  store i8* %arrayidx, i8** %eop, align 8
  store i8 0, i8* %lc, align 1
  %4 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %len2 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %4, i32 0, i32 1
  %5 = load i64, i64* %len2, align 8
  %cmp = icmp ult i64 %5, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %buf3 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %6, i32 0, i32 0
  %7 = load i8*, i8** %buf3, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx4, align 1
  store i8 %8, i8* %header, align 1
  %9 = load i8, i8* %header, align 1
  %conv = zext i8 %9 to i32
  %shr = ashr i32 %conv, 4
  store i32 %shr, i32* %cmd, align 4
  store i32 0, i32* %len_len, align 4
  store i32 0, i32* %len, align 4
  %10 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %buf5 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %10, i32 0, i32 0
  %11 = load i8*, i8** %buf5, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %add.ptr, i8** %p, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end17, %if.end
  %12 = load i8*, i8** %p, align 8
  %13 = load i8*, i8** %eop, align 8
  %cmp6 = icmp ult i8* %12, %13
  br i1 %cmp6, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %14 = load i8*, i8** %p, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %p, align 8
  %15 = load i8, i8* %14, align 1
  store i8 %15, i8* %lc, align 1
  %16 = load i8, i8* %lc, align 1
  %conv8 = zext i8 %16 to i32
  %and = and i32 %conv8, 127
  %17 = load i32, i32* %len_len, align 4
  %mul = mul i32 7, %17
  %shl = shl i32 %and, %mul
  %18 = load i32, i32* %len, align 4
  %add = add i32 %18, %shl
  store i32 %add, i32* %len, align 4
  %19 = load i32, i32* %len_len, align 4
  %inc = add i32 %19, 1
  store i32 %inc, i32* %len_len, align 4
  %20 = load i8, i8* %lc, align 1
  %conv9 = zext i8 %20 to i32
  %and10 = and i32 %conv9, 128
  %tobool = icmp ne i32 %and10, 0
  br i1 %tobool, label %if.end12, label %if.then11

if.then11:                                        ; preds = %while.body
  br label %while.end

if.end12:                                         ; preds = %while.body
  %21 = load i32, i32* %len_len, align 4
  %conv13 = zext i32 %21 to i64
  %cmp14 = icmp ugt i64 %conv13, 4
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end12
  store i32 -2, i32* %retval, align 4
  br label %return

if.end17:                                         ; preds = %if.end12
  br label %while.cond

while.end:                                        ; preds = %if.then11, %while.cond
  %22 = load i8*, i8** %p, align 8
  %23 = load i32, i32* %len, align 4
  %idx.ext = zext i32 %23 to i64
  %add.ptr18 = getelementptr inbounds i8, i8* %22, i64 %idx.ext
  store i8* %add.ptr18, i8** %end, align 8
  %24 = load i8, i8* %lc, align 1
  %conv19 = zext i8 %24 to i32
  %and20 = and i32 %conv19, 128
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %25 = load i8*, i8** %end, align 8
  %26 = load i8*, i8** %eop, align 8
  %cmp22 = icmp ugt i8* %25, %26
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %lor.lhs.false, %while.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end25:                                         ; preds = %lor.lhs.false
  %27 = load i32, i32* %cmd, align 4
  %28 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %cmd26 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %28, i32 0, i32 0
  store i32 %27, i32* %cmd26, align 8
  %29 = load i8, i8* %header, align 1
  %conv27 = zext i8 %29 to i32
  %and28 = and i32 %conv27, 6
  %shr29 = ashr i32 %and28, 1
  %30 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %qos = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %30, i32 0, i32 1
  store i32 %shr29, i32* %qos, align 4
  %31 = load i32, i32* %cmd, align 4
  switch i32 %31, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb134
    i32 4, label %sw.bb140
    i32 5, label %sw.bb140
    i32 6, label %sw.bb140
    i32 7, label %sw.bb140
    i32 9, label %sw.bb140
    i32 3, label %sw.bb150
    i32 8, label %sw.bb177
  ]

sw.bb:                                            ; preds = %if.end25
  %32 = load i8*, i8** %p, align 8
  %33 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %protocol_name = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %33, i32 0, i32 10
  %call = call i8* @scanto(i8* %32, %struct.mg_str* %protocol_name)
  store i8* %call, i8** %p, align 8
  %34 = load i8*, i8** %p, align 8
  %35 = load i8*, i8** %end, align 8
  %add.ptr30 = getelementptr inbounds i8, i8* %35, i64 -4
  %cmp31 = icmp ugt i8* %34, %add.ptr30
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %sw.bb
  store i32 -2, i32* %retval, align 4
  br label %return

if.end34:                                         ; preds = %sw.bb
  %36 = load i8*, i8** %p, align 8
  %incdec.ptr35 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %incdec.ptr35, i8** %p, align 8
  %37 = load i8, i8* %36, align 1
  %38 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %protocol_version = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %38, i32 0, i32 7
  store i8 %37, i8* %protocol_version, align 4
  %39 = load i8*, i8** %p, align 8
  %incdec.ptr36 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %incdec.ptr36, i8** %p, align 8
  %40 = load i8, i8* %39, align 1
  %41 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %connect_flags = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %41, i32 0, i32 8
  store i8 %40, i8* %connect_flags, align 1
  %42 = load i8*, i8** %p, align 8
  %call37 = call zeroext i16 @getu16(i8* %42)
  %43 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %keep_alive_timer = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %43, i32 0, i32 9
  store i16 %call37, i16* %keep_alive_timer, align 2
  %44 = load i8*, i8** %p, align 8
  %add.ptr38 = getelementptr inbounds i8, i8* %44, i64 2
  store i8* %add.ptr38, i8** %p, align 8
  %45 = load i8*, i8** %p, align 8
  %46 = load i8*, i8** %end, align 8
  %cmp39 = icmp uge i8* %45, %46
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %if.end34
  store i32 -2, i32* %retval, align 4
  br label %return

if.end42:                                         ; preds = %if.end34
  %47 = load i8*, i8** %p, align 8
  %48 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %client_id = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %48, i32 0, i32 11
  %call43 = call i8* @scanto(i8* %47, %struct.mg_str* %client_id)
  store i8* %call43, i8** %p, align 8
  %49 = load i8*, i8** %p, align 8
  %50 = load i8*, i8** %end, align 8
  %cmp44 = icmp ugt i8* %49, %50
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end42
  store i32 -2, i32* %retval, align 4
  br label %return

if.end47:                                         ; preds = %if.end42
  %51 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %connect_flags48 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %51, i32 0, i32 8
  %52 = load i8, i8* %connect_flags48, align 1
  %conv49 = zext i8 %52 to i32
  %and50 = and i32 %conv49, 4
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.then52, label %if.end58

if.then52:                                        ; preds = %if.end47
  %53 = load i8*, i8** %p, align 8
  %54 = load i8*, i8** %end, align 8
  %cmp53 = icmp uge i8* %53, %54
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.then52
  store i32 -2, i32* %retval, align 4
  br label %return

if.end56:                                         ; preds = %if.then52
  %55 = load i8*, i8** %p, align 8
  %56 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %will_topic = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %56, i32 0, i32 12
  %call57 = call i8* @scanto(i8* %55, %struct.mg_str* %will_topic)
  store i8* %call57, i8** %p, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.end56, %if.end47
  %57 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %connect_flags59 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %57, i32 0, i32 8
  %58 = load i8, i8* %connect_flags59, align 1
  %conv60 = zext i8 %58 to i32
  %and61 = and i32 %conv60, 4
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %if.then63, label %if.end69

if.then63:                                        ; preds = %if.end58
  %59 = load i8*, i8** %p, align 8
  %60 = load i8*, i8** %end, align 8
  %cmp64 = icmp uge i8* %59, %60
  br i1 %cmp64, label %if.then66, label %if.end67

if.then66:                                        ; preds = %if.then63
  store i32 -2, i32* %retval, align 4
  br label %return

if.end67:                                         ; preds = %if.then63
  %61 = load i8*, i8** %p, align 8
  %62 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %will_message = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %62, i32 0, i32 13
  %call68 = call i8* @scanto(i8* %61, %struct.mg_str* %will_message)
  store i8* %call68, i8** %p, align 8
  br label %if.end69

if.end69:                                         ; preds = %if.end67, %if.end58
  %63 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %connect_flags70 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %63, i32 0, i32 8
  %64 = load i8, i8* %connect_flags70, align 1
  %conv71 = zext i8 %64 to i32
  %and72 = and i32 %conv71, 128
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.then74, label %if.end80

if.then74:                                        ; preds = %if.end69
  %65 = load i8*, i8** %p, align 8
  %66 = load i8*, i8** %end, align 8
  %cmp75 = icmp uge i8* %65, %66
  br i1 %cmp75, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.then74
  store i32 -2, i32* %retval, align 4
  br label %return

if.end78:                                         ; preds = %if.then74
  %67 = load i8*, i8** %p, align 8
  %68 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %user_name = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %68, i32 0, i32 14
  %call79 = call i8* @scanto(i8* %67, %struct.mg_str* %user_name)
  store i8* %call79, i8** %p, align 8
  br label %if.end80

if.end80:                                         ; preds = %if.end78, %if.end69
  %69 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %connect_flags81 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %69, i32 0, i32 8
  %70 = load i8, i8* %connect_flags81, align 1
  %conv82 = zext i8 %70 to i32
  %and83 = and i32 %conv82, 64
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.then85, label %if.end91

if.then85:                                        ; preds = %if.end80
  %71 = load i8*, i8** %p, align 8
  %72 = load i8*, i8** %end, align 8
  %cmp86 = icmp uge i8* %71, %72
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.then85
  store i32 -2, i32* %retval, align 4
  br label %return

if.end89:                                         ; preds = %if.then85
  %73 = load i8*, i8** %p, align 8
  %74 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %password = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %74, i32 0, i32 15
  %call90 = call i8* @scanto(i8* %73, %struct.mg_str* %password)
  store i8* %call90, i8** %p, align 8
  br label %if.end91

if.end91:                                         ; preds = %if.end89, %if.end80
  %75 = load i8*, i8** %p, align 8
  %76 = load i8*, i8** %end, align 8
  %cmp92 = icmp ne i8* %75, %76
  br i1 %cmp92, label %if.then94, label %if.end95

if.then94:                                        ; preds = %if.end91
  store i32 -2, i32* %retval, align 4
  br label %return

if.end95:                                         ; preds = %if.end91
  br label %do.body

do.body:                                          ; preds = %if.end95
  %call96 = call i32 @cs_log_print_prefix(i32 3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0), i32 10770)
  %tobool97 = icmp ne i32 %call96, 0
  br i1 %tobool97, label %if.then98, label %if.end133

if.then98:                                        ; preds = %do.body
  %77 = load i32, i32* %len, align 4
  %78 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %connect_flags99 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %78, i32 0, i32 8
  %79 = load i8, i8* %connect_flags99, align 1
  %conv100 = zext i8 %79 to i32
  %80 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %keep_alive_timer101 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %80, i32 0, i32 9
  %81 = load i16, i16* %keep_alive_timer101, align 2
  %conv102 = zext i16 %81 to i32
  %82 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %protocol_name103 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %82, i32 0, i32 10
  %len104 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol_name103, i32 0, i32 1
  %83 = load i64, i64* %len104, align 8
  %conv105 = trunc i64 %83 to i32
  %84 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %protocol_name106 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %84, i32 0, i32 10
  %p107 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %protocol_name106, i32 0, i32 0
  %85 = load i8*, i8** %p107, align 8
  %86 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %client_id108 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %86, i32 0, i32 11
  %len109 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %client_id108, i32 0, i32 1
  %87 = load i64, i64* %len109, align 8
  %conv110 = trunc i64 %87 to i32
  %88 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %client_id111 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %88, i32 0, i32 11
  %p112 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %client_id111, i32 0, i32 0
  %89 = load i8*, i8** %p112, align 8
  %90 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %will_topic113 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %90, i32 0, i32 12
  %len114 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %will_topic113, i32 0, i32 1
  %91 = load i64, i64* %len114, align 8
  %conv115 = trunc i64 %91 to i32
  %92 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %will_topic116 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %92, i32 0, i32 12
  %p117 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %will_topic116, i32 0, i32 0
  %93 = load i8*, i8** %p117, align 8
  %94 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %will_message118 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %94, i32 0, i32 13
  %len119 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %will_message118, i32 0, i32 1
  %95 = load i64, i64* %len119, align 8
  %conv120 = trunc i64 %95 to i32
  %96 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %will_message121 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %96, i32 0, i32 13
  %p122 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %will_message121, i32 0, i32 0
  %97 = load i8*, i8** %p122, align 8
  %98 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %user_name123 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %98, i32 0, i32 14
  %len124 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user_name123, i32 0, i32 1
  %99 = load i64, i64* %len124, align 8
  %conv125 = trunc i64 %99 to i32
  %100 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %user_name126 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %100, i32 0, i32 14
  %p127 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %user_name126, i32 0, i32 0
  %101 = load i8*, i8** %p127, align 8
  %102 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %password128 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %102, i32 0, i32 15
  %len129 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %password128, i32 0, i32 1
  %103 = load i64, i64* %len129, align 8
  %conv130 = trunc i64 %103 to i32
  %104 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %password131 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %104, i32 0, i32 15
  %p132 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %password131, i32 0, i32 0
  %105 = load i8*, i8** %p132, align 8
  call void (i8*, ...) @cs_log_printf(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.407, i32 0, i32 0), i32 %77, i32 %conv100, i32 %conv102, i32 %conv105, i8* %85, i32 %conv110, i8* %89, i32 %conv115, i8* %93, i32 %conv120, i8* %97, i32 %conv125, i8* %101, i32 %conv130, i8* %105)
  br label %if.end133

if.end133:                                        ; preds = %if.then98, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end133
  br label %sw.epilog

sw.bb134:                                         ; preds = %if.end25
  %106 = load i8*, i8** %end, align 8
  %107 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %106 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %107 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp135 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp135, label %if.then137, label %if.end138

if.then137:                                       ; preds = %sw.bb134
  store i32 -2, i32* %retval, align 4
  br label %return

if.end138:                                        ; preds = %sw.bb134
  %108 = load i8*, i8** %p, align 8
  %arrayidx139 = getelementptr inbounds i8, i8* %108, i64 1
  %109 = load i8, i8* %arrayidx139, align 1
  %110 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %connack_ret_code = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %110, i32 0, i32 5
  store i8 %109, i8* %connack_ret_code, align 8
  br label %sw.epilog

sw.bb140:                                         ; preds = %if.end25, %if.end25, %if.end25, %if.end25, %if.end25
  %111 = load i8*, i8** %end, align 8
  %112 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast141 = ptrtoint i8* %111 to i64
  %sub.ptr.rhs.cast142 = ptrtoint i8* %112 to i64
  %sub.ptr.sub143 = sub i64 %sub.ptr.lhs.cast141, %sub.ptr.rhs.cast142
  %cmp144 = icmp slt i64 %sub.ptr.sub143, 2
  br i1 %cmp144, label %if.then146, label %if.end147

if.then146:                                       ; preds = %sw.bb140
  store i32 -2, i32* %retval, align 4
  br label %return

if.end147:                                        ; preds = %sw.bb140
  %113 = load i8*, i8** %p, align 8
  %call148 = call zeroext i16 @getu16(i8* %113)
  %114 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %message_id = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %114, i32 0, i32 6
  store i16 %call148, i16* %message_id, align 2
  %115 = load i8*, i8** %p, align 8
  %add.ptr149 = getelementptr inbounds i8, i8* %115, i64 2
  store i8* %add.ptr149, i8** %p, align 8
  br label %sw.epilog

sw.bb150:                                         ; preds = %if.end25
  %116 = load i8*, i8** %p, align 8
  %117 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %topic = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %117, i32 0, i32 3
  %call151 = call i8* @scanto(i8* %116, %struct.mg_str* %topic)
  store i8* %call151, i8** %p, align 8
  %118 = load i8*, i8** %p, align 8
  %119 = load i8*, i8** %end, align 8
  %cmp152 = icmp ugt i8* %118, %119
  br i1 %cmp152, label %if.then154, label %if.end155

if.then154:                                       ; preds = %sw.bb150
  store i32 -2, i32* %retval, align 4
  br label %return

if.end155:                                        ; preds = %sw.bb150
  %120 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %qos156 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %120, i32 0, i32 1
  %121 = load i32, i32* %qos156, align 4
  %cmp157 = icmp sgt i32 %121, 0
  br i1 %cmp157, label %if.then159, label %if.end170

if.then159:                                       ; preds = %if.end155
  %122 = load i8*, i8** %end, align 8
  %123 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast160 = ptrtoint i8* %122 to i64
  %sub.ptr.rhs.cast161 = ptrtoint i8* %123 to i64
  %sub.ptr.sub162 = sub i64 %sub.ptr.lhs.cast160, %sub.ptr.rhs.cast161
  %cmp163 = icmp slt i64 %sub.ptr.sub162, 2
  br i1 %cmp163, label %if.then165, label %if.end166

if.then165:                                       ; preds = %if.then159
  store i32 -2, i32* %retval, align 4
  br label %return

if.end166:                                        ; preds = %if.then159
  %124 = load i8*, i8** %p, align 8
  %call167 = call zeroext i16 @getu16(i8* %124)
  %125 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %message_id168 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %125, i32 0, i32 6
  store i16 %call167, i16* %message_id168, align 2
  %126 = load i8*, i8** %p, align 8
  %add.ptr169 = getelementptr inbounds i8, i8* %126, i64 2
  store i8* %add.ptr169, i8** %p, align 8
  br label %if.end170

if.end170:                                        ; preds = %if.end166, %if.end155
  %127 = load i8*, i8** %p, align 8
  %128 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %payload = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %128, i32 0, i32 4
  %p171 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload, i32 0, i32 0
  store i8* %127, i8** %p171, align 8
  %129 = load i8*, i8** %end, align 8
  %130 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast172 = ptrtoint i8* %129 to i64
  %sub.ptr.rhs.cast173 = ptrtoint i8* %130 to i64
  %sub.ptr.sub174 = sub i64 %sub.ptr.lhs.cast172, %sub.ptr.rhs.cast173
  %131 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %payload175 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %131, i32 0, i32 4
  %len176 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload175, i32 0, i32 1
  store i64 %sub.ptr.sub174, i64* %len176, align 8
  br label %sw.epilog

sw.bb177:                                         ; preds = %if.end25
  %132 = load i8*, i8** %end, align 8
  %133 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast178 = ptrtoint i8* %132 to i64
  %sub.ptr.rhs.cast179 = ptrtoint i8* %133 to i64
  %sub.ptr.sub180 = sub i64 %sub.ptr.lhs.cast178, %sub.ptr.rhs.cast179
  %cmp181 = icmp slt i64 %sub.ptr.sub180, 2
  br i1 %cmp181, label %if.then183, label %if.end184

if.then183:                                       ; preds = %sw.bb177
  store i32 -2, i32* %retval, align 4
  br label %return

if.end184:                                        ; preds = %sw.bb177
  %134 = load i8*, i8** %p, align 8
  %call185 = call zeroext i16 @getu16(i8* %134)
  %135 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %message_id186 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %135, i32 0, i32 6
  store i16 %call185, i16* %message_id186, align 2
  %136 = load i8*, i8** %p, align 8
  %add.ptr187 = getelementptr inbounds i8, i8* %136, i64 2
  store i8* %add.ptr187, i8** %p, align 8
  %137 = load i8*, i8** %p, align 8
  %138 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %payload188 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %138, i32 0, i32 4
  %p189 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload188, i32 0, i32 0
  store i8* %137, i8** %p189, align 8
  %139 = load i8*, i8** %end, align 8
  %140 = load i8*, i8** %p, align 8
  %sub.ptr.lhs.cast190 = ptrtoint i8* %139 to i64
  %sub.ptr.rhs.cast191 = ptrtoint i8* %140 to i64
  %sub.ptr.sub192 = sub i64 %sub.ptr.lhs.cast190, %sub.ptr.rhs.cast191
  %141 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %payload193 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %141, i32 0, i32 4
  %len194 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %payload193, i32 0, i32 1
  store i64 %sub.ptr.sub192, i64* %len194, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end25
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end184, %if.end170, %if.end147, %if.end138, %do.end
  %142 = load i8*, i8** %end, align 8
  %143 = load %struct.mbuf*, %struct.mbuf** %io.addr, align 8
  %buf195 = getelementptr inbounds %struct.mbuf, %struct.mbuf* %143, i32 0, i32 0
  %144 = load i8*, i8** %buf195, align 8
  %sub.ptr.lhs.cast196 = ptrtoint i8* %142 to i64
  %sub.ptr.rhs.cast197 = ptrtoint i8* %144 to i64
  %sub.ptr.sub198 = sub i64 %sub.ptr.lhs.cast196, %sub.ptr.rhs.cast197
  %conv199 = trunc i64 %sub.ptr.sub198 to i32
  %145 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %len200 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %145, i32 0, i32 2
  store i32 %conv199, i32* %len200, align 8
  %146 = load %struct.mg_mqtt_message*, %struct.mg_mqtt_message** %mm.addr, align 8
  %len201 = getelementptr inbounds %struct.mg_mqtt_message, %struct.mg_mqtt_message* %146, i32 0, i32 2
  %147 = load i32, i32* %len201, align 8
  store i32 %147, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %if.then183, %if.then165, %if.then154, %if.then146, %if.then137, %if.then94, %if.then88, %if.then77, %if.then66, %if.then55, %if.then46, %if.then41, %if.then33, %if.then24, %if.then16, %if.then
  %148 = load i32, i32* %retval, align 4
  ret i32 %148
}

; Function Attrs: noinline nounwind ssp uwtable
define internal i8* @scanto(i8* %p, %struct.mg_str* %s) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %s.addr = alloca %struct.mg_str*, align 8
  store i8* %p, i8** %p.addr, align 8
  store %struct.mg_str* %s, %struct.mg_str** %s.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %call = call zeroext i16 @getu16(i8* %0)
  %conv = zext i16 %call to i64
  %1 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8
  %len = getelementptr inbounds %struct.mg_str, %struct.mg_str* %1, i32 0, i32 1
  store i64 %conv, i64* %len, align 8
  %2 = load i8*, i8** %p.addr, align 8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 2
  %3 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8
  %p1 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %3, i32 0, i32 0
  store i8* %add.ptr, i8** %p1, align 8
  %4 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8
  %p2 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %4, i32 0, i32 0
  %5 = load i8*, i8** %p2, align 8
  %6 = load %struct.mg_str*, %struct.mg_str** %s.addr, align 8
  %len3 = getelementptr inbounds %struct.mg_str, %struct.mg_str* %6, i32 0, i32 1
  %7 = load i64, i64* %len3, align 8
  %add.ptr4 = getelementptr inbounds i8, i8* %5, i64 %7
  ret i8* %add.ptr4
}

; Function Attrs: noinline nounwind ssp uwtable
define internal zeroext i16 @getu16(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %up = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  store i8* %0, i8** %up, align 8
  %1 = load i8*, i8** %up, align 8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %shl = shl i32 %conv, 8
  %3 = load i8*, i8** %up, align 8
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %4 to i32
  %add = add nsw i32 %shl, %conv2
  %conv3 = trunc i32 %add to i16
  ret i16 %conv3
}

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }
attributes #6 = { allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { allocsize(0,1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { allocsize(1) }
attributes #13 = { noreturn }
attributes #14 = { allocsize(0) }
attributes #15 = { nounwind readonly }
attributes #16 = { allocsize(0,1) }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.1 (https://github.com/llvm-mirror/clang.git 3c8961bedc65c9a15cbe67a2ef385a0938f7cfef) (https://github.com/llvm-mirror/llvm.git c8fccc53ed66d505898f8850bcc690c977a7c9a7)"}
