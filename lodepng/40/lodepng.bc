; ModuleID = 'lodepng.cpp'
source_filename = "lodepng.cpp"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%struct.LodePNGCompressSettings = type { i32, i32, i32, i32, i32, i32, {}*, {}*, i8* }
%struct.LodePNGDecompressSettings = type { i32, i32, {}*, {}*, i8* }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct.LodePNGBitReader = type { i8*, i64, i64, i64, i32 }
%struct.BPMNode = type { i32, i32, %struct.BPMNode*, i32 }
%struct.BPMLists = type { i32, %struct.BPMNode*, i32, i32, %struct.BPMNode**, i32, %struct.BPMNode**, %struct.BPMNode** }
%struct.ucvector = type { i8*, i64, i64 }
%struct.Hash = type { i32*, i16*, i32*, i32*, i16*, i16* }
%struct.LodePNGBitWriter = type { %struct.ucvector*, i8 }
%struct.LodePNGColorMode = type { i32, i32, i8*, i64, i32, i32, i32, i32 }
%struct.LodePNGInfo = type { i32, i32, i32, %struct.LodePNGColorMode, i32, i32, i32, i32, i64, i8**, i8**, i64, i8**, i8**, i8**, i8**, i32, %struct.LodePNGTime, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, [3 x i8*], [3 x i64] }
%struct.LodePNGTime = type { i32, i32, i32, i32, i32, i32 }
%struct.ColorTree = type { [16 x %struct.ColorTree*], i32 }
%struct.LodePNGColorStats = type { i32, i32, i16, i16, i16, i32, i32, [1024 x i8], i32, i64, i32, i32 }
%struct.LodePNGState = type { %struct.LodePNGDecoderSettings, %struct.LodePNGEncoderSettings, %struct.LodePNGColorMode, %struct.LodePNGInfo, i32 }
%struct.LodePNGDecoderSettings = type { %struct.LodePNGDecompressSettings, i32, i32, i32, i32, i32, i32 }
%struct.LodePNGEncoderSettings = type { %struct.LodePNGCompressSettings, i32, i32, i32, i8*, i32, i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"class.std::__1::__libcpp_compressed_pair_imp" }
%"class.std::__1::__libcpp_compressed_pair_imp" = type { i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"class.std::__1::__libcpp_compressed_pair_imp.1" }
%"class.std::__1::__libcpp_compressed_pair_imp.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i64, i64, i8* }
%"class.std::__1::__wrap_iter.5" = type { i8* }
%"class.std::__1::__wrap_iter" = type { i8* }
%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator" = type { i8 }
%"class.std::__1::allocator" = type { i8 }
%"struct.std::__1::__split_buffer" = type { i8*, i8*, i8*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"class.std::__1::__libcpp_compressed_pair_imp.7" }
%"class.std::__1::__libcpp_compressed_pair_imp.7" = type { i8*, %"class.std::__1::allocator"* }
%"class.lodepng::State" = type { %struct.LodePNGState }
%struct.HuffmanTree = type { i32*, i32*, i32, i32, i8*, i16* }
%struct.uivector = type { i32*, i64, i64 }
%"struct.std::__1::nullptr_t" = type { i8* }
%"struct.std::__1::integral_constant" = type { i8 }
%"struct.std::__1::__has_destroy" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { %union.anon.4, [23 x i8] }
%union.anon.4 = type { i8 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__less" = type { i8 }
%"struct.std::__1::integral_constant.8" = type { i8 }
%"struct.std::__1::__has_max_size" = type { i8 }
%"class.std::__1::__split_buffer_common" = type { i8 }
%"class.std::length_error" = type { %"class.std::logic_error" }
%"class.std::logic_error" = type { %"class.std::exception", %"class.std::__1::__libcpp_refstring" }
%"class.std::exception" = type { i32 (...)** }
%"class.std::__1::__libcpp_refstring" = type { i8* }
%"struct.std::__1::random_access_iterator_tag" = type { i8 }

@.str = private unnamed_addr constant [9 x i8] c"20200306\00", align 1
@LODEPNG_VERSION_STRING = global i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@lodepng_default_compress_settings = constant { i32, i32, i32, i32, i32, i32, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i8* } { i32 2, i32 1, i32 2048, i32 3, i32 128, i32 1, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* null, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* null, i8* null }, align 8
@lodepng_default_decompress_settings = constant { i32, i32, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i8* } zeroinitializer, align 8
@_ZL19lodepng_crc32_table = internal global [256 x i32] [i32 0, i32 1996959894, i32 -301047508, i32 -1727442502, i32 124634137, i32 1886057615, i32 -379345611, i32 -1637575261, i32 249268274, i32 2044508324, i32 -522852066, i32 -1747789432, i32 162941995, i32 2125561021, i32 -407360249, i32 -1866523247, i32 498536548, i32 1789927666, i32 -205950648, i32 -2067906082, i32 450548861, i32 1843258603, i32 -187386543, i32 -2083289657, i32 325883990, i32 1684777152, i32 -43845254, i32 -1973040660, i32 335633487, i32 1661365465, i32 -99664541, i32 -1928851979, i32 997073096, i32 1281953886, i32 -715111964, i32 -1570279054, i32 1006888145, i32 1258607687, i32 -770865667, i32 -1526024853, i32 901097722, i32 1119000684, i32 -608450090, i32 -1396901568, i32 853044451, i32 1172266101, i32 -589951537, i32 -1412350631, i32 651767980, i32 1373503546, i32 -925412992, i32 -1076862698, i32 565507253, i32 1454621731, i32 -809855591, i32 -1195530993, i32 671266974, i32 1594198024, i32 -972236366, i32 -1324619484, i32 795835527, i32 1483230225, i32 -1050600021, i32 -1234817731, i32 1994146192, i32 31158534, i32 -1731059524, i32 -271249366, i32 1907459465, i32 112637215, i32 -1614814043, i32 -390540237, i32 2013776290, i32 251722036, i32 -1777751922, i32 -519137256, i32 2137656763, i32 141376813, i32 -1855689577, i32 -429695999, i32 1802195444, i32 476864866, i32 -2056965928, i32 -228458418, i32 1812370925, i32 453092731, i32 -2113342271, i32 -183516073, i32 1706088902, i32 314042704, i32 -1950435094, i32 -54949764, i32 1658658271, i32 366619977, i32 -1932296973, i32 -69972891, i32 1303535960, i32 984961486, i32 -1547960204, i32 -725929758, i32 1256170817, i32 1037604311, i32 -1529756563, i32 -740887301, i32 1131014506, i32 879679996, i32 -1385723834, i32 -631195440, i32 1141124467, i32 855842277, i32 -1442165665, i32 -586318647, i32 1342533948, i32 654459306, i32 -1106571248, i32 -921952122, i32 1466479909, i32 544179635, i32 -1184443383, i32 -832445281, i32 1591671054, i32 702138776, i32 -1328506846, i32 -942167884, i32 1504918807, i32 783551873, i32 -1212326853, i32 -1061524307, i32 -306674912, i32 -1698712650, i32 62317068, i32 1957810842, i32 -355121351, i32 -1647151185, i32 81470997, i32 1943803523, i32 -480048366, i32 -1805370492, i32 225274430, i32 2053790376, i32 -468791541, i32 -1828061283, i32 167816743, i32 2097651377, i32 -267414716, i32 -2029476910, i32 503444072, i32 1762050814, i32 -144550051, i32 -2140837941, i32 426522225, i32 1852507879, i32 -19653770, i32 -1982649376, i32 282753626, i32 1742555852, i32 -105259153, i32 -1900089351, i32 397917763, i32 1622183637, i32 -690576408, i32 -1580100738, i32 953729732, i32 1340076626, i32 -776247311, i32 -1497606297, i32 1068828381, i32 1219638859, i32 -670225446, i32 -1358292148, i32 906185462, i32 1090812512, i32 -547295293, i32 -1469587627, i32 829329135, i32 1181335161, i32 -882789492, i32 -1134132454, i32 628085408, i32 1382605366, i32 -871598187, i32 -1156888829, i32 570562233, i32 1426400815, i32 -977650754, i32 -1296233688, i32 733239954, i32 1555261956, i32 -1026031705, i32 -1244606671, i32 752459403, i32 1541320221, i32 -1687895376, i32 -328994266, i32 1969922972, i32 40735498, i32 -1677130071, i32 -351390145, i32 1913087877, i32 83908371, i32 -1782625662, i32 -491226604, i32 2075208622, i32 213261112, i32 -1831694693, i32 -438977011, i32 2094854071, i32 198958881, i32 -2032938284, i32 -237706686, i32 1759359992, i32 534414190, i32 -2118248755, i32 -155638181, i32 1873836001, i32 414664567, i32 -2012718362, i32 -15766928, i32 1711684554, i32 285281116, i32 -1889165569, i32 -127750551, i32 1634467795, i32 376229701, i32 -1609899400, i32 -686959890, i32 1308918612, i32 956543938, i32 -1486412191, i32 -799009033, i32 1231636301, i32 1047427035, i32 -1362007478, i32 -640263460, i32 1088359270, i32 936918000, i32 -1447252397, i32 -558129467, i32 1202900863, i32 817233897, i32 -1111625188, i32 -893730166, i32 1404277552, i32 615818150, i32 -1160759803, i32 -841546093, i32 1423857449, i32 601450431, i32 -1285129682, i32 -1000256840, i32 1567103746, i32 711928724, i32 -1274298825, i32 -1022587231, i32 1510334235, i32 755167117], align 16
@.str.2 = private unnamed_addr constant [5 x i8] c"IHDR\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"PLTE\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"tRNS\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"bKGD\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"tEXt\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"zTXt\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"iTXt\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"tIME\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"pHYs\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"gAMA\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"cHRM\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"sRGB\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"iCCP\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"LodePNG\00", align 1
@.str.16 = private unnamed_addr constant [29 x i8] c"no error, everything went ok\00", align 1
@.str.17 = private unnamed_addr constant [17 x i8] c"nothing done yet\00", align 1
@.str.18 = private unnamed_addr constant [53 x i8] c"end of input memory reached without huffman end code\00", align 1
@.str.19 = private unnamed_addr constant [56 x i8] c"error in code tree made it jump outside of huffman tree\00", align 1
@.str.20 = private unnamed_addr constant [47 x i8] c"problem while processing dynamic deflate block\00", align 1
@.str.21 = private unnamed_addr constant [52 x i8] c"invalid code while processing dynamic deflate block\00", align 1
@.str.22 = private unnamed_addr constant [49 x i8] c"end of out buffer memory reached while inflating\00", align 1
@.str.23 = private unnamed_addr constant [38 x i8] c"invalid distance code while inflating\00", align 1
@.str.24 = private unnamed_addr constant [55 x i8] c"invalid deflate block BTYPE encountered while decoding\00", align 1
@.str.25 = private unnamed_addr constant [54 x i8] c"NLEN is not ones complement of LEN in a deflate block\00", align 1
@.str.26 = private unnamed_addr constant [48 x i8] c"end of in buffer memory reached while inflating\00", align 1
@.str.27 = private unnamed_addr constant [30 x i8] c"invalid FCHECK in zlib header\00", align 1
@.str.28 = private unnamed_addr constant [42 x i8] c"invalid compression method in zlib header\00", align 1
@.str.29 = private unnamed_addr constant [61 x i8] c"FDICT encountered in zlib header while it's not used for PNG\00", align 1
@.str.30 = private unnamed_addr constant [38 x i8] c"PNG file is smaller than a PNG header\00", align 1
@.str.31 = private unnamed_addr constant [50 x i8] c"incorrect PNG signature, it's no PNG or corrupted\00", align 1
@.str.32 = private unnamed_addr constant [36 x i8] c"first chunk is not the header chunk\00", align 1
@.str.33 = private unnamed_addr constant [56 x i8] c"chunk length too large, chunk broken off at end of file\00", align 1
@.str.34 = private unnamed_addr constant [30 x i8] c"illegal PNG color type or bpp\00", align 1
@.str.35 = private unnamed_addr constant [31 x i8] c"illegal PNG compression method\00", align 1
@.str.36 = private unnamed_addr constant [26 x i8] c"illegal PNG filter method\00", align 1
@.str.37 = private unnamed_addr constant [29 x i8] c"illegal PNG interlace method\00", align 1
@.str.38 = private unnamed_addr constant [60 x i8] c"chunk length of a chunk is too large or the chunk too small\00", align 1
@.str.39 = private unnamed_addr constant [36 x i8] c"illegal PNG filter type encountered\00", align 1
@.str.40 = private unnamed_addr constant [44 x i8] c"illegal bit depth for this color type given\00", align 1
@.str.41 = private unnamed_addr constant [36 x i8] c"the palette is too small or too big\00", align 1
@.str.42 = private unnamed_addr constant [61 x i8] c"tRNS chunk before PLTE or has more entries than palette size\00", align 1
@.str.43 = private unnamed_addr constant [46 x i8] c"tRNS chunk has wrong size for grayscale image\00", align 1
@.str.44 = private unnamed_addr constant [40 x i8] c"tRNS chunk has wrong size for RGB image\00", align 1
@.str.45 = private unnamed_addr constant [65 x i8] c"tRNS chunk appeared while it was not allowed for this color type\00", align 1
@.str.46 = private unnamed_addr constant [44 x i8] c"bKGD chunk has wrong size for palette image\00", align 1
@.str.47 = private unnamed_addr constant [46 x i8] c"bKGD chunk has wrong size for grayscale image\00", align 1
@.str.48 = private unnamed_addr constant [40 x i8] c"bKGD chunk has wrong size for RGB image\00", align 1
@.str.49 = private unnamed_addr constant [72 x i8] c"empty input buffer given to decoder. Maybe caused by non-existing file?\00", align 1
@.str.50 = private unnamed_addr constant [57 x i8] c"jumped past memory while generating dynamic huffman tree\00", align 1
@.str.51 = private unnamed_addr constant [49 x i8] c"jumped past memory while inflating huffman block\00", align 1
@.str.52 = private unnamed_addr constant [35 x i8] c"jumped past memory while inflating\00", align 1
@.str.53 = private unnamed_addr constant [28 x i8] c"size of zlib data too small\00", align 1
@.str.54 = private unnamed_addr constant [58 x i8] c"repeat symbol in tree while there was no value symbol yet\00", align 1
@.str.55 = private unnamed_addr constant [47 x i8] c"jumped past tree while generating huffman tree\00", align 1
@.str.56 = private unnamed_addr constant [76 x i8] c"given output image colortype or bitdepth not supported for color conversion\00", align 1
@.str.57 = private unnamed_addr constant [55 x i8] c"invalid CRC encountered (checking CRC can be disabled)\00", align 1
@.str.58 = private unnamed_addr constant [63 x i8] c"invalid ADLER32 encountered (checking ADLER32 can be disabled)\00", align 1
@.str.59 = private unnamed_addr constant [41 x i8] c"requested color conversion not supported\00", align 1
@.str.60 = private unnamed_addr constant [75 x i8] c"invalid window size given in the settings of the encoder (must be 0-32768)\00", align 1
@.str.61 = private unnamed_addr constant [81 x i8] c"invalid BTYPE given in the settings of the encoder (only 0, 1 and 2 are allowed)\00", align 1
@.str.62 = private unnamed_addr constant [49 x i8] c"conversion from color to grayscale not supported\00", align 1
@.str.63 = private unnamed_addr constant [78 x i8] c"length of a chunk too long, max allowed for PNG is 2147483647 bytes per chunk\00", align 1
@.str.64 = private unnamed_addr constant [58 x i8] c"the length of the END symbol 256 in the Huffman tree is 0\00", align 1
@.str.65 = private unnamed_addr constant [95 x i8] c"the length of a text chunk keyword given to the encoder is longer than the maximum of 79 bytes\00", align 1
@.str.66 = private unnamed_addr constant [94 x i8] c"the length of a text chunk keyword given to the encoder is smaller than the minimum of 1 byte\00", align 1
@.str.67 = private unnamed_addr constant [89 x i8] c"tried to encode a PLTE chunk with a palette that has less than 1 or more than 256 colors\00", align 1
@.str.68 = private unnamed_addr constant [67 x i8] c"unknown chunk type with 'critical' flag encountered by the decoder\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"invalid interlace mode given to encoder (must be 0 or 1)\00", align 1
@.str.70 = private unnamed_addr constant [93 x i8] c"while decoding, invalid compression method encountering in zTXt or iTXt chunk (it must be 0)\00", align 1
@.str.71 = private unnamed_addr constant [24 x i8] c"invalid tIME chunk size\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"invalid pHYs chunk size\00", align 1
@.str.73 = private unnamed_addr constant [57 x i8] c"no null termination char found while decoding text chunk\00", align 1
@.str.74 = private unnamed_addr constant [47 x i8] c"iTXt chunk too short to contain required bytes\00", align 1
@.str.75 = private unnamed_addr constant [32 x i8] c"integer overflow in buffer size\00", align 1
@.str.76 = private unnamed_addr constant [32 x i8] c"failed to open file for reading\00", align 1
@.str.77 = private unnamed_addr constant [32 x i8] c"failed to open file for writing\00", align 1
@.str.78 = private unnamed_addr constant [35 x i8] c"tried creating a tree of 0 symbols\00", align 1
@.str.79 = private unnamed_addr constant [37 x i8] c"lazy matching at pos 0 is impossible\00", align 1
@.str.80 = private unnamed_addr constant [93 x i8] c"color conversion to palette requested while a color isn't in palette, or index out of bounds\00", align 1
@.str.81 = private unnamed_addr constant [25 x i8] c"memory allocation failed\00", align 1
@.str.82 = private unnamed_addr constant [58 x i8] c"given image too small to contain all pixels to be encoded\00", align 1
@.str.83 = private unnamed_addr constant [50 x i8] c"impossible offset in lz77 encoding (internal bug)\00", align 1
@.str.84 = private unnamed_addr constant [81 x i8] c"must provide custom zlib function pointer if LODEPNG_COMPILE_ZLIB is not defined\00", align 1
@.str.85 = private unnamed_addr constant [73 x i8] c"invalid filter strategy given for LodePNGEncoderSettings.filter_strategy\00", align 1
@.str.86 = private unnamed_addr constant [58 x i8] c"text chunk keyword too short or long: must have size 1-79\00", align 1
@.str.87 = private unnamed_addr constant [34 x i8] c"windowsize must be a power of two\00", align 1
@.str.88 = private unnamed_addr constant [31 x i8] c"invalid decompressed idat size\00", align 1
@.str.89 = private unnamed_addr constant [40 x i8] c"integer overflow due to too many pixels\00", align 1
@.str.90 = private unnamed_addr constant [32 x i8] c"zero width or height is invalid\00", align 1
@.str.91 = private unnamed_addr constant [42 x i8] c"header chunk must have a size of 13 bytes\00", align 1
@.str.92 = private unnamed_addr constant [47 x i8] c"integer overflow with combined idat chunk size\00", align 1
@.str.93 = private unnamed_addr constant [24 x i8] c"invalid gAMA chunk size\00", align 1
@.str.94 = private unnamed_addr constant [24 x i8] c"invalid cHRM chunk size\00", align 1
@.str.95 = private unnamed_addr constant [24 x i8] c"invalid sRGB chunk size\00", align 1
@.str.96 = private unnamed_addr constant [30 x i8] c"invalid sRGB rendering intent\00", align 1
@.str.97 = private unnamed_addr constant [78 x i8] c"invalid ICC profile color type, the PNG specification only allows RGB or GRAY\00", align 1
@.str.98 = private unnamed_addr constant [84 x i8] c"PNG specification does not allow RGB ICC profile on gray color types and vice versa\00", align 1
@.str.99 = private unnamed_addr constant [82 x i8] c"not allowed to set grayscale ICC profile with colored pixels by PNG specification\00", align 1
@.str.100 = private unnamed_addr constant [70 x i8] c"invalid palette index in bKGD chunk. Maybe it came before PLTE chunk?\00", align 1
@.str.101 = private unnamed_addr constant [68 x i8] c"invalid bKGD color while encoding (e.g. palette index out of range)\00", align 1
@.str.102 = private unnamed_addr constant [28 x i8] c"integer overflow of bitsize\00", align 1
@.str.103 = private unnamed_addr constant [55 x i8] c"PNG file must have PLTE chunk if color type is palette\00", align 1
@.str.104 = private unnamed_addr constant [81 x i8] c"color convert from palette mode requested without setting the palette data in it\00", align 1
@.str.105 = private unnamed_addr constant [47 x i8] c"tried to add more than 256 values to a palette\00", align 1
@.str.106 = private unnamed_addr constant [19 x i8] c"unknown error code\00", align 1
@.str.107 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@_ZL10LENGTHBASE = internal constant [29 x i32] [i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 13, i32 15, i32 17, i32 19, i32 23, i32 27, i32 31, i32 35, i32 43, i32 51, i32 59, i32 67, i32 83, i32 99, i32 115, i32 131, i32 163, i32 195, i32 227, i32 258], align 16
@_ZL11LENGTHEXTRA = internal constant [29 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0], align 16
@_ZL12DISTANCEBASE = internal constant [30 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 9, i32 13, i32 17, i32 25, i32 33, i32 49, i32 65, i32 97, i32 129, i32 193, i32 257, i32 385, i32 513, i32 769, i32 1025, i32 1537, i32 2049, i32 3073, i32 4097, i32 6145, i32 8193, i32 12289, i32 16385, i32 24577], align 16
@_ZL13DISTANCEEXTRA = internal constant [30 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13], align 16
@_ZZL21HuffmanTree_makeTableP11HuffmanTreeE8headsize = internal constant i32 512, align 4
@_ZZL21HuffmanTree_makeTableP11HuffmanTreeE4mask = internal constant i32 511, align 4
@_ZL10CLCL_ORDER = internal constant [19 x i32] [i32 16, i32 17, i32 18, i32 0, i32 8, i32 7, i32 9, i32 6, i32 10, i32 5, i32 11, i32 4, i32 12, i32 3, i32 13, i32 2, i32 14, i32 1, i32 15], align 16
@.str.108 = private unnamed_addr constant [5 x i8] c"IDAT\00", align 1
@.str.109 = private unnamed_addr constant [5 x i8] c"IEND\00", align 1
@_ZL8ADAM7_DX = internal constant [7 x i32] [i32 8, i32 8, i32 4, i32 4, i32 2, i32 2, i32 1], align 16
@_ZL8ADAM7_IX = internal constant [7 x i32] [i32 0, i32 4, i32 0, i32 2, i32 0, i32 1, i32 0], align 16
@_ZL8ADAM7_DY = internal constant [7 x i32] [i32 8, i32 8, i32 8, i32 4, i32 4, i32 2, i32 2], align 16
@_ZL8ADAM7_IY = internal constant [7 x i32] [i32 0, i32 0, i32 4, i32 0, i32 2, i32 0, i32 1], align 16
@_ZZL14writeSignatureP8ucvectorE9signature = internal constant [8 x i8] c"\89PNG\0D\0A\1A\0A", align 1
@.str.110 = private unnamed_addr constant [68 x i8] c"allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size\00", align 1
@_ZTISt12length_error = external constant i8*
@_ZTVSt12length_error = available_externally unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* bitcast (i8** @_ZTISt12length_error to i8*), i8* bitcast (void (%"class.std::length_error"*)* @_ZNSt12length_errorD1Ev to i8*), i8* bitcast (void (%"class.std::length_error"*)* @_ZNSt12length_errorD0Ev to i8*), i8* bitcast (i8* (%"class.std::logic_error"*)* @_ZNKSt11logic_error4whatEv to i8*)] }, align 8

; Function Attrs: ssp uwtable
define i32 @_Z17lodepng_load_filePPhPmPKc(i8** %out, i64* %outsize, i8* %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %filename.addr = alloca i8*, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  %0 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call = call i64 @_ZL16lodepng_filesizePKc(i8* %1)
  store i64 %call, i64* %size, align 8, !tbaa !6
  %2 = load i64, i64* %size, align 8, !tbaa !6
  %cmp = icmp slt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 78, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %size, align 8, !tbaa !6
  %4 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %3, i64* %4, align 8, !tbaa !6
  %5 = load i64, i64* %size, align 8, !tbaa !6
  %call1 = call i8* @_ZL14lodepng_mallocm(i64 %5)
  %6 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %call1, i8** %6, align 8, !tbaa !2
  %7 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %8 = load i8*, i8** %7, align 8, !tbaa !2
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %if.end4, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %9 = load i64, i64* %size, align 8, !tbaa !6
  %cmp2 = icmp sgt i64 %9, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %land.lhs.true
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %land.lhs.true, %if.end
  %10 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %11 = load i8*, i8** %10, align 8, !tbaa !2
  %12 = load i64, i64* %size, align 8, !tbaa !6
  %13 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call5 = call i32 @_ZL19lodepng_buffer_filePhmPKc(i8* %11, i64 %12, i8* %13)
  store i32 %call5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end4, %if.then3, %if.then
  %14 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #16
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #1

; Function Attrs: ssp uwtable
define internal i64 @_ZL16lodepng_filesizePKc(i8* %filename) #0 {
entry:
  %retval = alloca i64, align 8
  %filename.addr = alloca i8*, align 8
  %file = alloca %struct.__sFILE*, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  %0 = bitcast %struct.__sFILE** %file to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.107, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %file, align 8, !tbaa !2
  %3 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %tobool = icmp ne %struct.__sFILE* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %call1 = call i32 @fseek(%struct.__sFILE* %4, i64 0, i32 2)
  %cmp = icmp ne i32 %call1, 0
  br i1 %cmp, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %5 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %call3 = call i32 @fclose(%struct.__sFILE* %5)
  store i64 -1, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %6 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %call5 = call i64 @ftell(%struct.__sFILE* %6)
  store i64 %call5, i64* %size, align 8, !tbaa !6
  %7 = load i64, i64* %size, align 8, !tbaa !6
  %cmp6 = icmp eq i64 %7, 9223372036854775807
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end4
  store i64 -1, i64* %size, align 8, !tbaa !6
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end4
  %8 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %call9 = call i32 @fclose(%struct.__sFILE* %8)
  %9 = load i64, i64* %size, align 8, !tbaa !6
  store i64 %9, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then2, %if.then
  %10 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #16
  %11 = bitcast %struct.__sFILE** %file to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #16
  %12 = load i64, i64* %retval, align 8
  ret i64 %12
}

; Function Attrs: ssp uwtable
define internal i8* @_ZL14lodepng_mallocm(i64 %size) #0 {
entry:
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  %0 = load i64, i64* %size.addr, align 8, !tbaa !6
  %call = call i8* @malloc(i64 %0) #17
  ret i8* %call
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL19lodepng_buffer_filePhmPKc(i8* %out, i64 %size, i8* %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %filename.addr = alloca i8*, align 8
  %file = alloca %struct.__sFILE*, align 8
  %readsize = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  %0 = bitcast %struct.__sFILE** %file to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %readsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.107, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %file, align 8, !tbaa !2
  %3 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %tobool = icmp ne %struct.__sFILE* %3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 78, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %5 = load i64, i64* %size.addr, align 8, !tbaa !6
  %6 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %call1 = call i64 @fread(i8* %4, i64 1, i64 %5, %struct.__sFILE* %6)
  store i64 %call1, i64* %readsize, align 8, !tbaa !6
  %7 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %call2 = call i32 @fclose(%struct.__sFILE* %7)
  %8 = load i64, i64* %readsize, align 8, !tbaa !6
  %9 = load i64, i64* %size.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %8, %9
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 78, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end4, %if.then3, %if.then
  %10 = bitcast i64* %readsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #16
  %11 = bitcast %struct.__sFILE** %file to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #16
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #1

; Function Attrs: ssp uwtable
define i32 @_Z17lodepng_save_filePKhmPKc(i8* %buffer, i64 %buffersize, i8* %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %buffer.addr = alloca i8*, align 8
  %buffersize.addr = alloca i64, align 8
  %filename.addr = alloca i8*, align 8
  %file = alloca %struct.__sFILE*, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !2
  store i64 %buffersize, i64* %buffersize.addr, align 8, !tbaa !6
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  %0 = bitcast %struct.__sFILE** %file to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call = call %struct.__sFILE* @"\01_fopen"(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  store %struct.__sFILE* %call, %struct.__sFILE** %file, align 8, !tbaa !2
  %2 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %tobool = icmp ne %struct.__sFILE* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 79, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %4 = load i64, i64* %buffersize.addr, align 8, !tbaa !6
  %5 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %call1 = call i64 @"\01_fwrite"(i8* %3, i64 1, i64 %4, %struct.__sFILE* %5)
  %6 = load %struct.__sFILE*, %struct.__sFILE** %file, align 8, !tbaa !2
  %call2 = call i32 @fclose(%struct.__sFILE* %6)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %7 = bitcast %struct.__sFILE** %file to i8*
  call void @llvm.lifetime.end(i64 8, i8* %7) #16
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #2

declare i64 @"\01_fwrite"(i8*, i64, i64, %struct.__sFILE*) #2

declare i32 @fclose(%struct.__sFILE*) #2

; Function Attrs: ssp uwtable
define i32 @_Z23lode_png_test_bitreaderPKhmmPKmPj(i8* %data, i64 %size, i64 %numsteps, i64* %steps, i32* %result) #0 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %numsteps.addr = alloca i64, align 8
  %steps.addr = alloca i64*, align 8
  %result.addr = alloca i32*, align 8
  %i = alloca i64, align 8
  %reader = alloca %struct.LodePNGBitReader, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %step = alloca i64, align 8
  %ok = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  store i64 %numsteps, i64* %numsteps.addr, align 8, !tbaa !6
  store i64* %steps, i64** %steps.addr, align 8, !tbaa !2
  store i32* %result, i32** %result.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast %struct.LodePNGBitReader* %reader to i8*
  call void @llvm.lifetime.start(i64 40, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %4 = load i64, i64* %size.addr, align 8, !tbaa !6
  %call = call i32 @_ZL21LodePNGBitReader_initP16LodePNGBitReaderPKhm(%struct.LodePNGBitReader* %reader, i8* %3, i64 %4)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %5 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup22

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %7 = load i64, i64* %numsteps.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %6, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = bitcast i64* %step to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  %9 = load i64*, i64** %steps.addr, align 8, !tbaa !2
  %10 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i64, i64* %9, i64 %10
  %11 = load i64, i64* %arrayidx, align 8, !tbaa !6
  store i64 %11, i64* %step, align 8, !tbaa !6
  %12 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #16
  %13 = load i64, i64* %step, align 8, !tbaa !6
  %cmp1 = icmp ugt i64 %13, 25
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %for.body
  %14 = load i64, i64* %step, align 8, !tbaa !6
  %call3 = call i32 @_ZL12ensureBits32P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %14)
  store i32 %call3, i32* %ok, align 4, !tbaa !8
  br label %if.end15

if.else:                                          ; preds = %for.body
  %15 = load i64, i64* %step, align 8, !tbaa !6
  %cmp4 = icmp ugt i64 %15, 17
  br i1 %cmp4, label %if.then5, label %if.else7

if.then5:                                         ; preds = %if.else
  %16 = load i64, i64* %step, align 8, !tbaa !6
  %call6 = call i32 @_ZL12ensureBits25P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %16)
  store i32 %call6, i32* %ok, align 4, !tbaa !8
  br label %if.end14

if.else7:                                         ; preds = %if.else
  %17 = load i64, i64* %step, align 8, !tbaa !6
  %cmp8 = icmp ugt i64 %17, 9
  br i1 %cmp8, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else7
  %18 = load i64, i64* %step, align 8, !tbaa !6
  %call10 = call i32 @_ZL12ensureBits17P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %18)
  store i32 %call10, i32* %ok, align 4, !tbaa !8
  br label %if.end13

if.else11:                                        ; preds = %if.else7
  %19 = load i64, i64* %step, align 8, !tbaa !6
  %call12 = call i32 @_ZL11ensureBits9P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %19)
  store i32 %call12, i32* %ok, align 4, !tbaa !8
  br label %if.end13

if.end13:                                         ; preds = %if.else11, %if.then9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then5
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then2
  %20 = load i32, i32* %ok, align 4, !tbaa !8
  %tobool16 = icmp ne i32 %20, 0
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.end15
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end18:                                         ; preds = %if.end15
  %21 = load i64, i64* %step, align 8, !tbaa !6
  %call19 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %21)
  %22 = load i32*, i32** %result.addr, align 8, !tbaa !2
  %23 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx20 = getelementptr inbounds i32, i32* %22, i64 %23
  store i32 %call19, i32* %arrayidx20, align 4, !tbaa !8
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end18, %if.then17
  %24 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #16
  %25 = bitcast i64* %step to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup22 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %26 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %26, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup22

cleanup22:                                        ; preds = %for.end, %cleanup, %if.then
  %27 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #16
  %28 = bitcast %struct.LodePNGBitReader* %reader to i8*
  call void @llvm.lifetime.end(i64 40, i8* %28) #16
  %29 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #16
  %30 = load i32, i32* %retval, align 4
  ret i32 %30
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL21LodePNGBitReader_initP16LodePNGBitReaderPKhm(%struct.LodePNGBitReader* %reader, i8* %data, i64 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %temp = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  %0 = bitcast i64* %temp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %2 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data1 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %2, i32 0, i32 0
  store i8* %1, i8** %data1, align 8, !tbaa !10
  %3 = load i64, i64* %size.addr, align 8, !tbaa !6
  %4 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %size2 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %4, i32 0, i32 1
  store i64 %3, i64* %size2, align 8, !tbaa !12
  %5 = load i64, i64* %size.addr, align 8, !tbaa !6
  %6 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %6, i32 0, i32 2
  %call = call i32 @_ZL14lodepng_muloflmmPm(i64 %5, i64 8, i64* %bitsize)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 105, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize3 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %7, i32 0, i32 2
  %8 = load i64, i64* %bitsize3, align 8, !tbaa !13
  %call4 = call i32 @_ZL14lodepng_addoflmmPm(i64 %8, i64 64, i64* %temp)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 105, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end7:                                          ; preds = %if.end
  %9 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %9, i32 0, i32 3
  store i64 0, i64* %bp, align 8, !tbaa !14
  %10 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %10, i32 0, i32 4
  store i32 0, i32* %buffer, align 8, !tbaa !15
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then
  %11 = bitcast i64* %temp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #16
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @_ZL12ensureBits32P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %nbits) #3 {
entry:
  %retval = alloca i32, align 4
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %nbits.addr = alloca i64, align 8
  %start = alloca i64, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = bitcast i64* %start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %1, i32 0, i32 3
  %2 = load i64, i64* %bp, align 8, !tbaa !14
  %shr = lshr i64 %2, 3
  store i64 %shr, i64* %start, align 8, !tbaa !6
  %3 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %size1 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %4, i32 0, i32 1
  %5 = load i64, i64* %size1, align 8, !tbaa !12
  store i64 %5, i64* %size, align 8, !tbaa !6
  %6 = load i64, i64* %start, align 8, !tbaa !6
  %add = add i64 %6, 4
  %7 = load i64, i64* %size, align 8, !tbaa !6
  %cmp = icmp ult i64 %add, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !10
  %10 = load i64, i64* %start, align 8, !tbaa !6
  %add2 = add i64 %10, 0
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %add2
  %11 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %11 to i32
  %12 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data3 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %12, i32 0, i32 0
  %13 = load i8*, i8** %data3, align 8, !tbaa !10
  %14 = load i64, i64* %start, align 8, !tbaa !6
  %add4 = add i64 %14, 1
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i64 %add4
  %15 = load i8, i8* %arrayidx5, align 1, !tbaa !16
  %conv6 = zext i8 %15 to i32
  %shl = shl i32 %conv6, 8
  %or = or i32 %conv, %shl
  %16 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data7 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %16, i32 0, i32 0
  %17 = load i8*, i8** %data7, align 8, !tbaa !10
  %18 = load i64, i64* %start, align 8, !tbaa !6
  %add8 = add i64 %18, 2
  %arrayidx9 = getelementptr inbounds i8, i8* %17, i64 %add8
  %19 = load i8, i8* %arrayidx9, align 1, !tbaa !16
  %conv10 = zext i8 %19 to i32
  %shl11 = shl i32 %conv10, 16
  %or12 = or i32 %or, %shl11
  %20 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data13 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %20, i32 0, i32 0
  %21 = load i8*, i8** %data13, align 8, !tbaa !10
  %22 = load i64, i64* %start, align 8, !tbaa !6
  %add14 = add i64 %22, 3
  %arrayidx15 = getelementptr inbounds i8, i8* %21, i64 %add14
  %23 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %23 to i32
  %shl17 = shl i32 %conv16, 24
  %or18 = or i32 %or12, %shl17
  %24 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %24, i32 0, i32 4
  store i32 %or18, i32* %buffer, align 8, !tbaa !15
  %25 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp19 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %25, i32 0, i32 3
  %26 = load i64, i64* %bp19, align 8, !tbaa !14
  %and = and i64 %26, 7
  %27 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer20 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %27, i32 0, i32 4
  %28 = load i32, i32* %buffer20, align 8, !tbaa !15
  %sh_prom = trunc i64 %and to i32
  %shr21 = lshr i32 %28, %sh_prom
  store i32 %shr21, i32* %buffer20, align 8, !tbaa !15
  %29 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data22 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %29, i32 0, i32 0
  %30 = load i8*, i8** %data22, align 8, !tbaa !10
  %31 = load i64, i64* %start, align 8, !tbaa !6
  %add23 = add i64 %31, 4
  %arrayidx24 = getelementptr inbounds i8, i8* %30, i64 %add23
  %32 = load i8, i8* %arrayidx24, align 1, !tbaa !16
  %conv25 = zext i8 %32 to i32
  %shl26 = shl i32 %conv25, 24
  %33 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp27 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %33, i32 0, i32 3
  %34 = load i64, i64* %bp27, align 8, !tbaa !14
  %and28 = and i64 %34, 7
  %sub = sub i64 8, %and28
  %sh_prom29 = trunc i64 %sub to i32
  %shl30 = shl i32 %shl26, %sh_prom29
  %35 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer31 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %35, i32 0, i32 4
  %36 = load i32, i32* %buffer31, align 8, !tbaa !15
  %or32 = or i32 %36, %shl30
  store i32 %or32, i32* %buffer31, align 8, !tbaa !15
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %37 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer33 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %37, i32 0, i32 4
  store i32 0, i32* %buffer33, align 8, !tbaa !15
  %38 = load i64, i64* %start, align 8, !tbaa !6
  %add34 = add i64 %38, 0
  %39 = load i64, i64* %size, align 8, !tbaa !6
  %cmp35 = icmp ult i64 %add34, %39
  br i1 %cmp35, label %if.then36, label %if.end

if.then36:                                        ; preds = %if.else
  %40 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data37 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %40, i32 0, i32 0
  %41 = load i8*, i8** %data37, align 8, !tbaa !10
  %42 = load i64, i64* %start, align 8, !tbaa !6
  %add38 = add i64 %42, 0
  %arrayidx39 = getelementptr inbounds i8, i8* %41, i64 %add38
  %43 = load i8, i8* %arrayidx39, align 1, !tbaa !16
  %conv40 = zext i8 %43 to i32
  %44 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer41 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %44, i32 0, i32 4
  %45 = load i32, i32* %buffer41, align 8, !tbaa !15
  %or42 = or i32 %45, %conv40
  store i32 %or42, i32* %buffer41, align 8, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then36, %if.else
  %46 = load i64, i64* %start, align 8, !tbaa !6
  %add43 = add i64 %46, 1
  %47 = load i64, i64* %size, align 8, !tbaa !6
  %cmp44 = icmp ult i64 %add43, %47
  br i1 %cmp44, label %if.then45, label %if.end53

if.then45:                                        ; preds = %if.end
  %48 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data46 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %48, i32 0, i32 0
  %49 = load i8*, i8** %data46, align 8, !tbaa !10
  %50 = load i64, i64* %start, align 8, !tbaa !6
  %add47 = add i64 %50, 1
  %arrayidx48 = getelementptr inbounds i8, i8* %49, i64 %add47
  %51 = load i8, i8* %arrayidx48, align 1, !tbaa !16
  %conv49 = zext i8 %51 to i32
  %shl50 = shl i32 %conv49, 8
  %52 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer51 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %52, i32 0, i32 4
  %53 = load i32, i32* %buffer51, align 8, !tbaa !15
  %or52 = or i32 %53, %shl50
  store i32 %or52, i32* %buffer51, align 8, !tbaa !15
  br label %if.end53

if.end53:                                         ; preds = %if.then45, %if.end
  %54 = load i64, i64* %start, align 8, !tbaa !6
  %add54 = add i64 %54, 2
  %55 = load i64, i64* %size, align 8, !tbaa !6
  %cmp55 = icmp ult i64 %add54, %55
  br i1 %cmp55, label %if.then56, label %if.end64

if.then56:                                        ; preds = %if.end53
  %56 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data57 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %56, i32 0, i32 0
  %57 = load i8*, i8** %data57, align 8, !tbaa !10
  %58 = load i64, i64* %start, align 8, !tbaa !6
  %add58 = add i64 %58, 2
  %arrayidx59 = getelementptr inbounds i8, i8* %57, i64 %add58
  %59 = load i8, i8* %arrayidx59, align 1, !tbaa !16
  %conv60 = zext i8 %59 to i32
  %shl61 = shl i32 %conv60, 16
  %60 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer62 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %60, i32 0, i32 4
  %61 = load i32, i32* %buffer62, align 8, !tbaa !15
  %or63 = or i32 %61, %shl61
  store i32 %or63, i32* %buffer62, align 8, !tbaa !15
  br label %if.end64

if.end64:                                         ; preds = %if.then56, %if.end53
  %62 = load i64, i64* %start, align 8, !tbaa !6
  %add65 = add i64 %62, 3
  %63 = load i64, i64* %size, align 8, !tbaa !6
  %cmp66 = icmp ult i64 %add65, %63
  br i1 %cmp66, label %if.then67, label %if.end75

if.then67:                                        ; preds = %if.end64
  %64 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data68 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %64, i32 0, i32 0
  %65 = load i8*, i8** %data68, align 8, !tbaa !10
  %66 = load i64, i64* %start, align 8, !tbaa !6
  %add69 = add i64 %66, 3
  %arrayidx70 = getelementptr inbounds i8, i8* %65, i64 %add69
  %67 = load i8, i8* %arrayidx70, align 1, !tbaa !16
  %conv71 = zext i8 %67 to i32
  %shl72 = shl i32 %conv71, 24
  %68 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer73 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %68, i32 0, i32 4
  %69 = load i32, i32* %buffer73, align 8, !tbaa !15
  %or74 = or i32 %69, %shl72
  store i32 %or74, i32* %buffer73, align 8, !tbaa !15
  br label %if.end75

if.end75:                                         ; preds = %if.then67, %if.end64
  %70 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp76 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %70, i32 0, i32 3
  %71 = load i64, i64* %bp76, align 8, !tbaa !14
  %and77 = and i64 %71, 7
  %72 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer78 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %72, i32 0, i32 4
  %73 = load i32, i32* %buffer78, align 8, !tbaa !15
  %sh_prom79 = trunc i64 %and77 to i32
  %shr80 = lshr i32 %73, %sh_prom79
  store i32 %shr80, i32* %buffer78, align 8, !tbaa !15
  %74 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp81 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %74, i32 0, i32 3
  %75 = load i64, i64* %bp81, align 8, !tbaa !14
  %76 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %add82 = add i64 %75, %76
  %77 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %77, i32 0, i32 2
  %78 = load i64, i64* %bitsize, align 8, !tbaa !13
  %cmp83 = icmp ule i64 %add82, %78
  %conv84 = zext i1 %cmp83 to i32
  store i32 %conv84, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end75, %if.then
  %79 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %79) #16
  %80 = bitcast i64* %start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %80) #16
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @_ZL12ensureBits25P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %nbits) #3 {
entry:
  %retval = alloca i32, align 4
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %nbits.addr = alloca i64, align 8
  %start = alloca i64, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = bitcast i64* %start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %1, i32 0, i32 3
  %2 = load i64, i64* %bp, align 8, !tbaa !14
  %shr = lshr i64 %2, 3
  store i64 %shr, i64* %start, align 8, !tbaa !6
  %3 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %size1 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %4, i32 0, i32 1
  %5 = load i64, i64* %size1, align 8, !tbaa !12
  store i64 %5, i64* %size, align 8, !tbaa !6
  %6 = load i64, i64* %start, align 8, !tbaa !6
  %add = add i64 %6, 3
  %7 = load i64, i64* %size, align 8, !tbaa !6
  %cmp = icmp ult i64 %add, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !10
  %10 = load i64, i64* %start, align 8, !tbaa !6
  %add2 = add i64 %10, 0
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %add2
  %11 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %11 to i32
  %12 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data3 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %12, i32 0, i32 0
  %13 = load i8*, i8** %data3, align 8, !tbaa !10
  %14 = load i64, i64* %start, align 8, !tbaa !6
  %add4 = add i64 %14, 1
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i64 %add4
  %15 = load i8, i8* %arrayidx5, align 1, !tbaa !16
  %conv6 = zext i8 %15 to i32
  %shl = shl i32 %conv6, 8
  %or = or i32 %conv, %shl
  %16 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data7 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %16, i32 0, i32 0
  %17 = load i8*, i8** %data7, align 8, !tbaa !10
  %18 = load i64, i64* %start, align 8, !tbaa !6
  %add8 = add i64 %18, 2
  %arrayidx9 = getelementptr inbounds i8, i8* %17, i64 %add8
  %19 = load i8, i8* %arrayidx9, align 1, !tbaa !16
  %conv10 = zext i8 %19 to i32
  %shl11 = shl i32 %conv10, 16
  %or12 = or i32 %or, %shl11
  %20 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data13 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %20, i32 0, i32 0
  %21 = load i8*, i8** %data13, align 8, !tbaa !10
  %22 = load i64, i64* %start, align 8, !tbaa !6
  %add14 = add i64 %22, 3
  %arrayidx15 = getelementptr inbounds i8, i8* %21, i64 %add14
  %23 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %23 to i32
  %shl17 = shl i32 %conv16, 24
  %or18 = or i32 %or12, %shl17
  %24 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %24, i32 0, i32 4
  store i32 %or18, i32* %buffer, align 8, !tbaa !15
  %25 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp19 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %25, i32 0, i32 3
  %26 = load i64, i64* %bp19, align 8, !tbaa !14
  %and = and i64 %26, 7
  %27 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer20 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %27, i32 0, i32 4
  %28 = load i32, i32* %buffer20, align 8, !tbaa !15
  %sh_prom = trunc i64 %and to i32
  %shr21 = lshr i32 %28, %sh_prom
  store i32 %shr21, i32* %buffer20, align 8, !tbaa !15
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %29 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer22 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %29, i32 0, i32 4
  store i32 0, i32* %buffer22, align 8, !tbaa !15
  %30 = load i64, i64* %start, align 8, !tbaa !6
  %add23 = add i64 %30, 0
  %31 = load i64, i64* %size, align 8, !tbaa !6
  %cmp24 = icmp ult i64 %add23, %31
  br i1 %cmp24, label %if.then25, label %if.end

if.then25:                                        ; preds = %if.else
  %32 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data26 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %32, i32 0, i32 0
  %33 = load i8*, i8** %data26, align 8, !tbaa !10
  %34 = load i64, i64* %start, align 8, !tbaa !6
  %add27 = add i64 %34, 0
  %arrayidx28 = getelementptr inbounds i8, i8* %33, i64 %add27
  %35 = load i8, i8* %arrayidx28, align 1, !tbaa !16
  %conv29 = zext i8 %35 to i32
  %36 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer30 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %36, i32 0, i32 4
  %37 = load i32, i32* %buffer30, align 8, !tbaa !15
  %or31 = or i32 %37, %conv29
  store i32 %or31, i32* %buffer30, align 8, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then25, %if.else
  %38 = load i64, i64* %start, align 8, !tbaa !6
  %add32 = add i64 %38, 1
  %39 = load i64, i64* %size, align 8, !tbaa !6
  %cmp33 = icmp ult i64 %add32, %39
  br i1 %cmp33, label %if.then34, label %if.end42

if.then34:                                        ; preds = %if.end
  %40 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data35 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %40, i32 0, i32 0
  %41 = load i8*, i8** %data35, align 8, !tbaa !10
  %42 = load i64, i64* %start, align 8, !tbaa !6
  %add36 = add i64 %42, 1
  %arrayidx37 = getelementptr inbounds i8, i8* %41, i64 %add36
  %43 = load i8, i8* %arrayidx37, align 1, !tbaa !16
  %conv38 = zext i8 %43 to i32
  %shl39 = shl i32 %conv38, 8
  %44 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer40 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %44, i32 0, i32 4
  %45 = load i32, i32* %buffer40, align 8, !tbaa !15
  %or41 = or i32 %45, %shl39
  store i32 %or41, i32* %buffer40, align 8, !tbaa !15
  br label %if.end42

if.end42:                                         ; preds = %if.then34, %if.end
  %46 = load i64, i64* %start, align 8, !tbaa !6
  %add43 = add i64 %46, 2
  %47 = load i64, i64* %size, align 8, !tbaa !6
  %cmp44 = icmp ult i64 %add43, %47
  br i1 %cmp44, label %if.then45, label %if.end53

if.then45:                                        ; preds = %if.end42
  %48 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data46 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %48, i32 0, i32 0
  %49 = load i8*, i8** %data46, align 8, !tbaa !10
  %50 = load i64, i64* %start, align 8, !tbaa !6
  %add47 = add i64 %50, 2
  %arrayidx48 = getelementptr inbounds i8, i8* %49, i64 %add47
  %51 = load i8, i8* %arrayidx48, align 1, !tbaa !16
  %conv49 = zext i8 %51 to i32
  %shl50 = shl i32 %conv49, 16
  %52 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer51 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %52, i32 0, i32 4
  %53 = load i32, i32* %buffer51, align 8, !tbaa !15
  %or52 = or i32 %53, %shl50
  store i32 %or52, i32* %buffer51, align 8, !tbaa !15
  br label %if.end53

if.end53:                                         ; preds = %if.then45, %if.end42
  %54 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp54 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %54, i32 0, i32 3
  %55 = load i64, i64* %bp54, align 8, !tbaa !14
  %and55 = and i64 %55, 7
  %56 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer56 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %56, i32 0, i32 4
  %57 = load i32, i32* %buffer56, align 8, !tbaa !15
  %sh_prom57 = trunc i64 %and55 to i32
  %shr58 = lshr i32 %57, %sh_prom57
  store i32 %shr58, i32* %buffer56, align 8, !tbaa !15
  %58 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp59 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %58, i32 0, i32 3
  %59 = load i64, i64* %bp59, align 8, !tbaa !14
  %60 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %add60 = add i64 %59, %60
  %61 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %61, i32 0, i32 2
  %62 = load i64, i64* %bitsize, align 8, !tbaa !13
  %cmp61 = icmp ule i64 %add60, %62
  %conv62 = zext i1 %cmp61 to i32
  store i32 %conv62, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end53, %if.then
  %63 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #16
  %64 = bitcast i64* %start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #16
  %65 = load i32, i32* %retval, align 4
  ret i32 %65
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL12ensureBits17P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %nbits) #4 {
entry:
  %retval = alloca i32, align 4
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %nbits.addr = alloca i64, align 8
  %start = alloca i64, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = bitcast i64* %start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %1, i32 0, i32 3
  %2 = load i64, i64* %bp, align 8, !tbaa !14
  %shr = lshr i64 %2, 3
  store i64 %shr, i64* %start, align 8, !tbaa !6
  %3 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %size1 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %4, i32 0, i32 1
  %5 = load i64, i64* %size1, align 8, !tbaa !12
  store i64 %5, i64* %size, align 8, !tbaa !6
  %6 = load i64, i64* %start, align 8, !tbaa !6
  %add = add i64 %6, 2
  %7 = load i64, i64* %size, align 8, !tbaa !6
  %cmp = icmp ult i64 %add, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !10
  %10 = load i64, i64* %start, align 8, !tbaa !6
  %add2 = add i64 %10, 0
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %add2
  %11 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %11 to i32
  %12 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data3 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %12, i32 0, i32 0
  %13 = load i8*, i8** %data3, align 8, !tbaa !10
  %14 = load i64, i64* %start, align 8, !tbaa !6
  %add4 = add i64 %14, 1
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i64 %add4
  %15 = load i8, i8* %arrayidx5, align 1, !tbaa !16
  %conv6 = zext i8 %15 to i32
  %shl = shl i32 %conv6, 8
  %or = or i32 %conv, %shl
  %16 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data7 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %16, i32 0, i32 0
  %17 = load i8*, i8** %data7, align 8, !tbaa !10
  %18 = load i64, i64* %start, align 8, !tbaa !6
  %add8 = add i64 %18, 2
  %arrayidx9 = getelementptr inbounds i8, i8* %17, i64 %add8
  %19 = load i8, i8* %arrayidx9, align 1, !tbaa !16
  %conv10 = zext i8 %19 to i32
  %shl11 = shl i32 %conv10, 16
  %or12 = or i32 %or, %shl11
  %20 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %20, i32 0, i32 4
  store i32 %or12, i32* %buffer, align 8, !tbaa !15
  %21 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp13 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %21, i32 0, i32 3
  %22 = load i64, i64* %bp13, align 8, !tbaa !14
  %and = and i64 %22, 7
  %23 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer14 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %23, i32 0, i32 4
  %24 = load i32, i32* %buffer14, align 8, !tbaa !15
  %sh_prom = trunc i64 %and to i32
  %shr15 = lshr i32 %24, %sh_prom
  store i32 %shr15, i32* %buffer14, align 8, !tbaa !15
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %25 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer16 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %25, i32 0, i32 4
  store i32 0, i32* %buffer16, align 8, !tbaa !15
  %26 = load i64, i64* %start, align 8, !tbaa !6
  %add17 = add i64 %26, 0
  %27 = load i64, i64* %size, align 8, !tbaa !6
  %cmp18 = icmp ult i64 %add17, %27
  br i1 %cmp18, label %if.then19, label %if.end

if.then19:                                        ; preds = %if.else
  %28 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data20 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %28, i32 0, i32 0
  %29 = load i8*, i8** %data20, align 8, !tbaa !10
  %30 = load i64, i64* %start, align 8, !tbaa !6
  %add21 = add i64 %30, 0
  %arrayidx22 = getelementptr inbounds i8, i8* %29, i64 %add21
  %31 = load i8, i8* %arrayidx22, align 1, !tbaa !16
  %conv23 = zext i8 %31 to i32
  %32 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer24 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %32, i32 0, i32 4
  %33 = load i32, i32* %buffer24, align 8, !tbaa !15
  %or25 = or i32 %33, %conv23
  store i32 %or25, i32* %buffer24, align 8, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then19, %if.else
  %34 = load i64, i64* %start, align 8, !tbaa !6
  %add26 = add i64 %34, 1
  %35 = load i64, i64* %size, align 8, !tbaa !6
  %cmp27 = icmp ult i64 %add26, %35
  br i1 %cmp27, label %if.then28, label %if.end36

if.then28:                                        ; preds = %if.end
  %36 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data29 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %36, i32 0, i32 0
  %37 = load i8*, i8** %data29, align 8, !tbaa !10
  %38 = load i64, i64* %start, align 8, !tbaa !6
  %add30 = add i64 %38, 1
  %arrayidx31 = getelementptr inbounds i8, i8* %37, i64 %add30
  %39 = load i8, i8* %arrayidx31, align 1, !tbaa !16
  %conv32 = zext i8 %39 to i32
  %shl33 = shl i32 %conv32, 8
  %40 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer34 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %40, i32 0, i32 4
  %41 = load i32, i32* %buffer34, align 8, !tbaa !15
  %or35 = or i32 %41, %shl33
  store i32 %or35, i32* %buffer34, align 8, !tbaa !15
  br label %if.end36

if.end36:                                         ; preds = %if.then28, %if.end
  %42 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp37 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %42, i32 0, i32 3
  %43 = load i64, i64* %bp37, align 8, !tbaa !14
  %and38 = and i64 %43, 7
  %44 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer39 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %44, i32 0, i32 4
  %45 = load i32, i32* %buffer39, align 8, !tbaa !15
  %sh_prom40 = trunc i64 %and38 to i32
  %shr41 = lshr i32 %45, %sh_prom40
  store i32 %shr41, i32* %buffer39, align 8, !tbaa !15
  %46 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp42 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %46, i32 0, i32 3
  %47 = load i64, i64* %bp42, align 8, !tbaa !14
  %48 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %add43 = add i64 %47, %48
  %49 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %49, i32 0, i32 2
  %50 = load i64, i64* %bitsize, align 8, !tbaa !13
  %cmp44 = icmp ule i64 %add43, %50
  %conv45 = zext i1 %cmp44 to i32
  store i32 %conv45, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end36, %if.then
  %51 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %51) #16
  %52 = bitcast i64* %start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #16
  %53 = load i32, i32* %retval, align 4
  ret i32 %53
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL11ensureBits9P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %nbits) #4 {
entry:
  %retval = alloca i32, align 4
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %nbits.addr = alloca i64, align 8
  %start = alloca i64, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = bitcast i64* %start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %1, i32 0, i32 3
  %2 = load i64, i64* %bp, align 8, !tbaa !14
  %shr = lshr i64 %2, 3
  store i64 %shr, i64* %start, align 8, !tbaa !6
  %3 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %size1 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %4, i32 0, i32 1
  %5 = load i64, i64* %size1, align 8, !tbaa !12
  store i64 %5, i64* %size, align 8, !tbaa !6
  %6 = load i64, i64* %start, align 8, !tbaa !6
  %add = add i64 %6, 1
  %7 = load i64, i64* %size, align 8, !tbaa !6
  %cmp = icmp ult i64 %add, %7
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %8 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !10
  %10 = load i64, i64* %start, align 8, !tbaa !6
  %add2 = add i64 %10, 0
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %add2
  %11 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %11 to i32
  %12 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data3 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %12, i32 0, i32 0
  %13 = load i8*, i8** %data3, align 8, !tbaa !10
  %14 = load i64, i64* %start, align 8, !tbaa !6
  %add4 = add i64 %14, 1
  %arrayidx5 = getelementptr inbounds i8, i8* %13, i64 %add4
  %15 = load i8, i8* %arrayidx5, align 1, !tbaa !16
  %conv6 = zext i8 %15 to i32
  %shl = shl i32 %conv6, 8
  %or = or i32 %conv, %shl
  %16 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %16, i32 0, i32 4
  store i32 %or, i32* %buffer, align 8, !tbaa !15
  %17 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp7 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %17, i32 0, i32 3
  %18 = load i64, i64* %bp7, align 8, !tbaa !14
  %and = and i64 %18, 7
  %19 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer8 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %19, i32 0, i32 4
  %20 = load i32, i32* %buffer8, align 8, !tbaa !15
  %sh_prom = trunc i64 %and to i32
  %shr9 = lshr i32 %20, %sh_prom
  store i32 %shr9, i32* %buffer8, align 8, !tbaa !15
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %21 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer10 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %21, i32 0, i32 4
  store i32 0, i32* %buffer10, align 8, !tbaa !15
  %22 = load i64, i64* %start, align 8, !tbaa !6
  %add11 = add i64 %22, 0
  %23 = load i64, i64* %size, align 8, !tbaa !6
  %cmp12 = icmp ult i64 %add11, %23
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %if.else
  %24 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data14 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %24, i32 0, i32 0
  %25 = load i8*, i8** %data14, align 8, !tbaa !10
  %26 = load i64, i64* %start, align 8, !tbaa !6
  %add15 = add i64 %26, 0
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i64 %add15
  %27 = load i8, i8* %arrayidx16, align 1, !tbaa !16
  %conv17 = zext i8 %27 to i32
  %28 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer18 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %28, i32 0, i32 4
  %29 = load i32, i32* %buffer18, align 8, !tbaa !15
  %or19 = or i32 %29, %conv17
  store i32 %or19, i32* %buffer18, align 8, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.else
  %30 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp20 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %30, i32 0, i32 3
  %31 = load i64, i64* %bp20, align 8, !tbaa !14
  %and21 = and i64 %31, 7
  %32 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer22 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %32, i32 0, i32 4
  %33 = load i32, i32* %buffer22, align 8, !tbaa !15
  %sh_prom23 = trunc i64 %and21 to i32
  %shr24 = lshr i32 %33, %sh_prom23
  store i32 %shr24, i32* %buffer22, align 8, !tbaa !15
  %34 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp25 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %34, i32 0, i32 3
  %35 = load i64, i64* %bp25, align 8, !tbaa !14
  %36 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %add26 = add i64 %35, %36
  %37 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %37, i32 0, i32 2
  %38 = load i64, i64* %bitsize, align 8, !tbaa !13
  %cmp27 = icmp ule i64 %add26, %38
  %conv28 = zext i1 %cmp27 to i32
  store i32 %conv28, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %39 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #16
  %40 = bitcast i64* %start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %40) #16
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %nbits) #0 {
entry:
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %nbits.addr = alloca i64, align 8
  %result = alloca i32, align 4
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %2 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %call = call i32 @_ZL8peekBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %1, i64 %2)
  store i32 %call, i32* %result, align 4, !tbaa !8
  %3 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %4 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  call void @_ZL11advanceBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %3, i64 %4)
  %5 = load i32, i32* %result, align 4, !tbaa !8
  %6 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %6) #16
  ret i32 %5
}

; Function Attrs: ssp uwtable
define i32 @_Z28lodepng_huffman_code_lengthsPjPKjmj(i32* %lengths, i32* %frequencies, i64 %numcodes, i32 %maxbitlen) #0 {
entry:
  %retval = alloca i32, align 4
  %lengths.addr = alloca i32*, align 8
  %frequencies.addr = alloca i32*, align 8
  %numcodes.addr = alloca i64, align 8
  %maxbitlen.addr = alloca i32, align 4
  %error = alloca i32, align 4
  %i = alloca i32, align 4
  %numpresent = alloca i64, align 8
  %leaves = alloca %struct.BPMNode*, align 8
  %cleanup.dest.slot = alloca i32
  %lists = alloca %struct.BPMLists, align 8
  %node = alloca %struct.BPMNode*, align 8
  store i32* %lengths, i32** %lengths.addr, align 8, !tbaa !2
  store i32* %frequencies, i32** %frequencies.addr, align 8, !tbaa !2
  store i64 %numcodes, i64* %numcodes.addr, align 8, !tbaa !6
  store i32 %maxbitlen, i32* %maxbitlen.addr, align 4, !tbaa !8
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i64* %numpresent to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i64 0, i64* %numpresent, align 8, !tbaa !6
  %3 = bitcast %struct.BPMNode** %leaves to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %cmp = icmp eq i64 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 80, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %shl = shl i32 1, %5
  %6 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %conv = trunc i64 %6 to i32
  %cmp1 = icmp ult i32 %shl, %conv
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 80, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %if.end
  %7 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %mul = mul i64 %7, 24
  %call = call i8* @_ZL14lodepng_mallocm(i64 %mul)
  %8 = bitcast i8* %call to %struct.BPMNode*
  store %struct.BPMNode* %8, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %9 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %tobool = icmp ne %struct.BPMNode* %9, null
  br i1 %tobool, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end3
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end3
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end5
  %10 = load i32, i32* %i, align 4, !tbaa !8
  %conv6 = zext i32 %10 to i64
  %11 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %cmp7 = icmp ne i64 %conv6, %11
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32*, i32** %frequencies.addr, align 8, !tbaa !2
  %13 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %13 to i64
  %arrayidx = getelementptr inbounds i32, i32* %12, i64 %idxprom
  %14 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %cmp8 = icmp ugt i32 %14, 0
  br i1 %cmp8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %for.body
  %15 = load i32*, i32** %frequencies.addr, align 8, !tbaa !2
  %16 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom10 = zext i32 %16 to i64
  %arrayidx11 = getelementptr inbounds i32, i32* %15, i64 %idxprom10
  %17 = load i32, i32* %arrayidx11, align 4, !tbaa !8
  %18 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %19 = load i64, i64* %numpresent, align 8, !tbaa !6
  %arrayidx12 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %18, i64 %19
  %weight = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx12, i32 0, i32 0
  store i32 %17, i32* %weight, align 8, !tbaa !17
  %20 = load i32, i32* %i, align 4, !tbaa !8
  %21 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %22 = load i64, i64* %numpresent, align 8, !tbaa !6
  %arrayidx13 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %21, i64 %22
  %index = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx13, i32 0, i32 1
  store i32 %20, i32* %index, align 4, !tbaa !19
  %23 = load i64, i64* %numpresent, align 8, !tbaa !6
  %inc = add i64 %23, 1
  store i64 %inc, i64* %numpresent, align 8, !tbaa !6
  br label %if.end14

if.end14:                                         ; preds = %if.then9, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end14
  %24 = load i32, i32* %i, align 4, !tbaa !8
  %inc15 = add i32 %24, 1
  store i32 %inc15, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %25 = load i32*, i32** %lengths.addr, align 8, !tbaa !2
  %26 = bitcast i32* %25 to i8*
  %27 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %mul16 = mul i64 %27, 4
  call void @_ZL14lodepng_memsetPvim(i8* %26, i32 0, i64 %mul16)
  %28 = load i64, i64* %numpresent, align 8, !tbaa !6
  %cmp17 = icmp eq i64 %28, 0
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %for.end
  %29 = load i32*, i32** %lengths.addr, align 8, !tbaa !2
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i64 1
  store i32 1, i32* %arrayidx19, align 4, !tbaa !8
  %30 = load i32*, i32** %lengths.addr, align 8, !tbaa !2
  %arrayidx20 = getelementptr inbounds i32, i32* %30, i64 0
  store i32 1, i32* %arrayidx20, align 4, !tbaa !8
  br label %if.end139

if.else:                                          ; preds = %for.end
  %31 = load i64, i64* %numpresent, align 8, !tbaa !6
  %cmp21 = icmp eq i64 %31, 1
  br i1 %cmp21, label %if.then22, label %if.else32

if.then22:                                        ; preds = %if.else
  %32 = load i32*, i32** %lengths.addr, align 8, !tbaa !2
  %33 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %arrayidx23 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %33, i64 0
  %index24 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx23, i32 0, i32 1
  %34 = load i32, i32* %index24, align 4, !tbaa !19
  %idxprom25 = zext i32 %34 to i64
  %arrayidx26 = getelementptr inbounds i32, i32* %32, i64 %idxprom25
  store i32 1, i32* %arrayidx26, align 4, !tbaa !8
  %35 = load i32*, i32** %lengths.addr, align 8, !tbaa !2
  %36 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %arrayidx27 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %36, i64 0
  %index28 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx27, i32 0, i32 1
  %37 = load i32, i32* %index28, align 4, !tbaa !19
  %cmp29 = icmp eq i32 %37, 0
  %cond = select i1 %cmp29, i32 1, i32 0
  %idxprom30 = sext i32 %cond to i64
  %arrayidx31 = getelementptr inbounds i32, i32* %35, i64 %idxprom30
  store i32 1, i32* %arrayidx31, align 4, !tbaa !8
  br label %if.end138

if.else32:                                        ; preds = %if.else
  %38 = bitcast %struct.BPMLists* %lists to i8*
  call void @llvm.lifetime.start(i64 56, i8* %38) #16
  %39 = bitcast %struct.BPMNode** %node to i8*
  call void @llvm.lifetime.start(i64 8, i8* %39) #16
  %40 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %41 = load i64, i64* %numpresent, align 8, !tbaa !6
  call void @_ZL12bpmnode_sortP7BPMNodem(%struct.BPMNode* %40, i64 %41)
  %42 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %listsize = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 5
  store i32 %42, i32* %listsize, align 8, !tbaa !20
  %43 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %mul33 = mul i32 2, %43
  %44 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %add = add i32 %44, 1
  %mul34 = mul i32 %mul33, %add
  %memsize = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 0
  store i32 %mul34, i32* %memsize, align 8, !tbaa !22
  %nextfree = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 3
  store i32 0, i32* %nextfree, align 4, !tbaa !23
  %memsize35 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 0
  %45 = load i32, i32* %memsize35, align 8, !tbaa !22
  %numfree = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 2
  store i32 %45, i32* %numfree, align 8, !tbaa !24
  %memsize36 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 0
  %46 = load i32, i32* %memsize36, align 8, !tbaa !22
  %conv37 = zext i32 %46 to i64
  %mul38 = mul i64 %conv37, 24
  %call39 = call i8* @_ZL14lodepng_mallocm(i64 %mul38)
  %47 = bitcast i8* %call39 to %struct.BPMNode*
  %memory = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 1
  store %struct.BPMNode* %47, %struct.BPMNode** %memory, align 8, !tbaa !25
  %memsize40 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 0
  %48 = load i32, i32* %memsize40, align 8, !tbaa !22
  %conv41 = zext i32 %48 to i64
  %mul42 = mul i64 %conv41, 8
  %call43 = call i8* @_ZL14lodepng_mallocm(i64 %mul42)
  %49 = bitcast i8* %call43 to %struct.BPMNode**
  %freelist = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 4
  store %struct.BPMNode** %49, %struct.BPMNode*** %freelist, align 8, !tbaa !26
  %listsize44 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 5
  %50 = load i32, i32* %listsize44, align 8, !tbaa !20
  %conv45 = zext i32 %50 to i64
  %mul46 = mul i64 %conv45, 8
  %call47 = call i8* @_ZL14lodepng_mallocm(i64 %mul46)
  %51 = bitcast i8* %call47 to %struct.BPMNode**
  %chains0 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 6
  store %struct.BPMNode** %51, %struct.BPMNode*** %chains0, align 8, !tbaa !27
  %listsize48 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 5
  %52 = load i32, i32* %listsize48, align 8, !tbaa !20
  %conv49 = zext i32 %52 to i64
  %mul50 = mul i64 %conv49, 8
  %call51 = call i8* @_ZL14lodepng_mallocm(i64 %mul50)
  %53 = bitcast i8* %call51 to %struct.BPMNode**
  %chains1 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 7
  store %struct.BPMNode** %53, %struct.BPMNode*** %chains1, align 8, !tbaa !28
  %memory52 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 1
  %54 = load %struct.BPMNode*, %struct.BPMNode** %memory52, align 8, !tbaa !25
  %tobool53 = icmp ne %struct.BPMNode* %54, null
  br i1 %tobool53, label %lor.lhs.false, label %if.then62

lor.lhs.false:                                    ; preds = %if.else32
  %freelist54 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 4
  %55 = load %struct.BPMNode**, %struct.BPMNode*** %freelist54, align 8, !tbaa !26
  %tobool55 = icmp ne %struct.BPMNode** %55, null
  br i1 %tobool55, label %lor.lhs.false56, label %if.then62

lor.lhs.false56:                                  ; preds = %lor.lhs.false
  %chains057 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 6
  %56 = load %struct.BPMNode**, %struct.BPMNode*** %chains057, align 8, !tbaa !27
  %tobool58 = icmp ne %struct.BPMNode** %56, null
  br i1 %tobool58, label %lor.lhs.false59, label %if.then62

lor.lhs.false59:                                  ; preds = %lor.lhs.false56
  %chains160 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 7
  %57 = load %struct.BPMNode**, %struct.BPMNode*** %chains160, align 8, !tbaa !28
  %tobool61 = icmp ne %struct.BPMNode** %57, null
  br i1 %tobool61, label %if.end63, label %if.then62

if.then62:                                        ; preds = %lor.lhs.false59, %lor.lhs.false56, %lor.lhs.false, %if.else32
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end63

if.end63:                                         ; preds = %if.then62, %lor.lhs.false59
  %58 = load i32, i32* %error, align 4, !tbaa !8
  %tobool64 = icmp ne i32 %58, 0
  br i1 %tobool64, label %if.end133, label %if.then65

if.then65:                                        ; preds = %if.end63
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc76, %if.then65
  %59 = load i32, i32* %i, align 4, !tbaa !8
  %memsize67 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 0
  %60 = load i32, i32* %memsize67, align 8, !tbaa !22
  %cmp68 = icmp ne i32 %59, %60
  br i1 %cmp68, label %for.body69, label %for.end78

for.body69:                                       ; preds = %for.cond66
  %memory70 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 1
  %61 = load %struct.BPMNode*, %struct.BPMNode** %memory70, align 8, !tbaa !25
  %62 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom71 = zext i32 %62 to i64
  %arrayidx72 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %61, i64 %idxprom71
  %freelist73 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 4
  %63 = load %struct.BPMNode**, %struct.BPMNode*** %freelist73, align 8, !tbaa !26
  %64 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom74 = zext i32 %64 to i64
  %arrayidx75 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %63, i64 %idxprom74
  store %struct.BPMNode* %arrayidx72, %struct.BPMNode** %arrayidx75, align 8, !tbaa !2
  br label %for.inc76

for.inc76:                                        ; preds = %for.body69
  %65 = load i32, i32* %i, align 4, !tbaa !8
  %inc77 = add i32 %65, 1
  store i32 %inc77, i32* %i, align 4, !tbaa !8
  br label %for.cond66

for.end78:                                        ; preds = %for.cond66
  %66 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %arrayidx79 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %66, i64 0
  %weight80 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx79, i32 0, i32 0
  %67 = load i32, i32* %weight80, align 8, !tbaa !17
  %call81 = call %struct.BPMNode* @_ZL14bpmnode_createP8BPMListsijP7BPMNode(%struct.BPMLists* %lists, i32 %67, i32 1, %struct.BPMNode* null)
  %68 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %arrayidx82 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %68, i64 1
  %weight83 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx82, i32 0, i32 0
  %69 = load i32, i32* %weight83, align 8, !tbaa !17
  %call84 = call %struct.BPMNode* @_ZL14bpmnode_createP8BPMListsijP7BPMNode(%struct.BPMLists* %lists, i32 %69, i32 2, %struct.BPMNode* null)
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond85

for.cond85:                                       ; preds = %for.inc99, %for.end78
  %70 = load i32, i32* %i, align 4, !tbaa !8
  %listsize86 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 5
  %71 = load i32, i32* %listsize86, align 8, !tbaa !20
  %cmp87 = icmp ne i32 %70, %71
  br i1 %cmp87, label %for.body88, label %for.end101

for.body88:                                       ; preds = %for.cond85
  %memory89 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 1
  %72 = load %struct.BPMNode*, %struct.BPMNode** %memory89, align 8, !tbaa !25
  %arrayidx90 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %72, i64 0
  %chains091 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 6
  %73 = load %struct.BPMNode**, %struct.BPMNode*** %chains091, align 8, !tbaa !27
  %74 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom92 = zext i32 %74 to i64
  %arrayidx93 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %73, i64 %idxprom92
  store %struct.BPMNode* %arrayidx90, %struct.BPMNode** %arrayidx93, align 8, !tbaa !2
  %memory94 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 1
  %75 = load %struct.BPMNode*, %struct.BPMNode** %memory94, align 8, !tbaa !25
  %arrayidx95 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %75, i64 1
  %chains196 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 7
  %76 = load %struct.BPMNode**, %struct.BPMNode*** %chains196, align 8, !tbaa !28
  %77 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom97 = zext i32 %77 to i64
  %arrayidx98 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %76, i64 %idxprom97
  store %struct.BPMNode* %arrayidx95, %struct.BPMNode** %arrayidx98, align 8, !tbaa !2
  br label %for.inc99

for.inc99:                                        ; preds = %for.body88
  %78 = load i32, i32* %i, align 4, !tbaa !8
  %inc100 = add i32 %78, 1
  store i32 %inc100, i32* %i, align 4, !tbaa !8
  br label %for.cond85

for.end101:                                       ; preds = %for.cond85
  store i32 2, i32* %i, align 4, !tbaa !8
  br label %for.cond102

for.cond102:                                      ; preds = %for.inc108, %for.end101
  %79 = load i32, i32* %i, align 4, !tbaa !8
  %conv103 = zext i32 %79 to i64
  %80 = load i64, i64* %numpresent, align 8, !tbaa !6
  %mul104 = mul i64 2, %80
  %sub = sub i64 %mul104, 2
  %cmp105 = icmp ne i64 %conv103, %sub
  br i1 %cmp105, label %for.body106, label %for.end110

for.body106:                                      ; preds = %for.cond102
  %81 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %82 = load i64, i64* %numpresent, align 8, !tbaa !6
  %83 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %sub107 = sub nsw i32 %83, 1
  %84 = load i32, i32* %i, align 4, !tbaa !8
  call void @_ZL10boundaryPMP8BPMListsP7BPMNodemii(%struct.BPMLists* %lists, %struct.BPMNode* %81, i64 %82, i32 %sub107, i32 %84)
  br label %for.inc108

for.inc108:                                       ; preds = %for.body106
  %85 = load i32, i32* %i, align 4, !tbaa !8
  %inc109 = add i32 %85, 1
  store i32 %inc109, i32* %i, align 4, !tbaa !8
  br label %for.cond102

for.end110:                                       ; preds = %for.cond102
  %chains1111 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 7
  %86 = load %struct.BPMNode**, %struct.BPMNode*** %chains1111, align 8, !tbaa !28
  %87 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %sub112 = sub i32 %87, 1
  %idxprom113 = zext i32 %sub112 to i64
  %arrayidx114 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %86, i64 %idxprom113
  %88 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx114, align 8, !tbaa !2
  store %struct.BPMNode* %88, %struct.BPMNode** %node, align 8, !tbaa !2
  br label %for.cond115

for.cond115:                                      ; preds = %for.inc131, %for.end110
  %89 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %tobool116 = icmp ne %struct.BPMNode* %89, null
  br i1 %tobool116, label %for.body117, label %for.end132

for.body117:                                      ; preds = %for.cond115
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond118

for.cond118:                                      ; preds = %for.inc128, %for.body117
  %90 = load i32, i32* %i, align 4, !tbaa !8
  %91 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %index119 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %91, i32 0, i32 1
  %92 = load i32, i32* %index119, align 4, !tbaa !19
  %cmp120 = icmp ne i32 %90, %92
  br i1 %cmp120, label %for.body121, label %for.end130

for.body121:                                      ; preds = %for.cond118
  %93 = load i32*, i32** %lengths.addr, align 8, !tbaa !2
  %94 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %95 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom122 = zext i32 %95 to i64
  %arrayidx123 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %94, i64 %idxprom122
  %index124 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx123, i32 0, i32 1
  %96 = load i32, i32* %index124, align 4, !tbaa !19
  %idxprom125 = zext i32 %96 to i64
  %arrayidx126 = getelementptr inbounds i32, i32* %93, i64 %idxprom125
  %97 = load i32, i32* %arrayidx126, align 4, !tbaa !8
  %inc127 = add i32 %97, 1
  store i32 %inc127, i32* %arrayidx126, align 4, !tbaa !8
  br label %for.inc128

for.inc128:                                       ; preds = %for.body121
  %98 = load i32, i32* %i, align 4, !tbaa !8
  %inc129 = add i32 %98, 1
  store i32 %inc129, i32* %i, align 4, !tbaa !8
  br label %for.cond118

for.end130:                                       ; preds = %for.cond118
  br label %for.inc131

for.inc131:                                       ; preds = %for.end130
  %99 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %tail = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %99, i32 0, i32 2
  %100 = load %struct.BPMNode*, %struct.BPMNode** %tail, align 8, !tbaa !29
  store %struct.BPMNode* %100, %struct.BPMNode** %node, align 8, !tbaa !2
  br label %for.cond115

for.end132:                                       ; preds = %for.cond115
  br label %if.end133

if.end133:                                        ; preds = %for.end132, %if.end63
  %memory134 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 1
  %101 = load %struct.BPMNode*, %struct.BPMNode** %memory134, align 8, !tbaa !25
  %102 = bitcast %struct.BPMNode* %101 to i8*
  call void @_ZL12lodepng_freePv(i8* %102)
  %freelist135 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 4
  %103 = load %struct.BPMNode**, %struct.BPMNode*** %freelist135, align 8, !tbaa !26
  %104 = bitcast %struct.BPMNode** %103 to i8*
  call void @_ZL12lodepng_freePv(i8* %104)
  %chains0136 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 6
  %105 = load %struct.BPMNode**, %struct.BPMNode*** %chains0136, align 8, !tbaa !27
  %106 = bitcast %struct.BPMNode** %105 to i8*
  call void @_ZL12lodepng_freePv(i8* %106)
  %chains1137 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %lists, i32 0, i32 7
  %107 = load %struct.BPMNode**, %struct.BPMNode*** %chains1137, align 8, !tbaa !28
  %108 = bitcast %struct.BPMNode** %107 to i8*
  call void @_ZL12lodepng_freePv(i8* %108)
  %109 = bitcast %struct.BPMNode** %node to i8*
  call void @llvm.lifetime.end(i64 8, i8* %109) #16
  %110 = bitcast %struct.BPMLists* %lists to i8*
  call void @llvm.lifetime.end(i64 56, i8* %110) #16
  br label %if.end138

if.end138:                                        ; preds = %if.end133, %if.then22
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.then18
  %111 = load %struct.BPMNode*, %struct.BPMNode** %leaves, align 8, !tbaa !2
  %112 = bitcast %struct.BPMNode* %111 to i8*
  call void @_ZL12lodepng_freePv(i8* %112)
  %113 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %113, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end139, %if.then4, %if.then2, %if.then
  %114 = bitcast %struct.BPMNode** %leaves to i8*
  call void @llvm.lifetime.end(i64 8, i8* %114) #16
  %115 = bitcast i64* %numpresent to i8*
  call void @llvm.lifetime.end(i64 8, i8* %115) #16
  %116 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %116) #16
  %117 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %117) #16
  %118 = load i32, i32* %retval, align 4
  ret i32 %118
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL14lodepng_memsetPvim(i8* %dst, i32 %value, i64 %num) #4 {
entry:
  %dst.addr = alloca i8*, align 8
  %value.addr = alloca i32, align 4
  %num.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !2
  store i32 %value, i32* %value.addr, align 4, !tbaa !8
  store i64 %num, i64* %num.addr, align 8, !tbaa !6
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !6
  %2 = load i64, i64* %num.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %value.addr, align 4, !tbaa !8
  %conv = trunc i32 %3 to i8
  %4 = load i8*, i8** %dst.addr, align 8, !tbaa !2
  %5 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %5
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %6, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %7 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %7) #16
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL12bpmnode_sortP7BPMNodem(%struct.BPMNode* %leaves, i64 %num) #0 {
entry:
  %leaves.addr = alloca %struct.BPMNode*, align 8
  %num.addr = alloca i64, align 8
  %mem = alloca %struct.BPMNode*, align 8
  %width = alloca i64, align 8
  %counter = alloca i64, align 8
  %a = alloca %struct.BPMNode*, align 8
  %b = alloca %struct.BPMNode*, align 8
  %p = alloca i64, align 8
  %q = alloca i64, align 8
  %r = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  store %struct.BPMNode* %leaves, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  store i64 %num, i64* %num.addr, align 8, !tbaa !6
  %0 = bitcast %struct.BPMNode** %mem to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i64, i64* %num.addr, align 8, !tbaa !6
  %mul = mul i64 24, %1
  %call = call i8* @_ZL14lodepng_mallocm(i64 %mul)
  %2 = bitcast i8* %call to %struct.BPMNode*
  store %struct.BPMNode* %2, %struct.BPMNode** %mem, align 8, !tbaa !2
  %3 = bitcast i64* %width to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = bitcast i64* %counter to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  store i64 0, i64* %counter, align 8, !tbaa !6
  store i64 1, i64* %width, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc44, %entry
  %5 = load i64, i64* %width, align 8, !tbaa !6
  %6 = load i64, i64* %num.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %5, %6
  br i1 %cmp, label %for.body, label %for.end46

for.body:                                         ; preds = %for.cond
  %7 = bitcast %struct.BPMNode** %a to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  %8 = load i64, i64* %counter, align 8, !tbaa !6
  %and = and i64 %8, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %9 = load %struct.BPMNode*, %struct.BPMNode** %mem, align 8, !tbaa !2
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %10 = load %struct.BPMNode*, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.BPMNode* [ %9, %cond.true ], [ %10, %cond.false ]
  store %struct.BPMNode* %cond, %struct.BPMNode** %a, align 8, !tbaa !2
  %11 = bitcast %struct.BPMNode** %b to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #16
  %12 = load i64, i64* %counter, align 8, !tbaa !6
  %and1 = and i64 %12, 1
  %tobool2 = icmp ne i64 %and1, 0
  br i1 %tobool2, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.end
  %13 = load %struct.BPMNode*, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  br label %cond.end5

cond.false4:                                      ; preds = %cond.end
  %14 = load %struct.BPMNode*, %struct.BPMNode** %mem, align 8, !tbaa !2
  br label %cond.end5

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %struct.BPMNode* [ %13, %cond.true3 ], [ %14, %cond.false4 ]
  store %struct.BPMNode* %cond6, %struct.BPMNode** %b, align 8, !tbaa !2
  %15 = bitcast i64* %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #16
  store i64 0, i64* %p, align 8, !tbaa !6
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc39, %cond.end5
  %16 = load i64, i64* %p, align 8, !tbaa !6
  %17 = load i64, i64* %num.addr, align 8, !tbaa !6
  %cmp8 = icmp ult i64 %16, %17
  br i1 %cmp8, label %for.body9, label %for.end42

for.body9:                                        ; preds = %for.cond7
  %18 = bitcast i64* %q to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #16
  %19 = load i64, i64* %p, align 8, !tbaa !6
  %20 = load i64, i64* %width, align 8, !tbaa !6
  %add = add i64 %19, %20
  %21 = load i64, i64* %num.addr, align 8, !tbaa !6
  %cmp10 = icmp ugt i64 %add, %21
  br i1 %cmp10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %for.body9
  %22 = load i64, i64* %num.addr, align 8, !tbaa !6
  br label %cond.end14

cond.false12:                                     ; preds = %for.body9
  %23 = load i64, i64* %p, align 8, !tbaa !6
  %24 = load i64, i64* %width, align 8, !tbaa !6
  %add13 = add i64 %23, %24
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false12, %cond.true11
  %cond15 = phi i64 [ %22, %cond.true11 ], [ %add13, %cond.false12 ]
  store i64 %cond15, i64* %q, align 8, !tbaa !6
  %25 = bitcast i64* %r to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #16
  %26 = load i64, i64* %p, align 8, !tbaa !6
  %27 = load i64, i64* %width, align 8, !tbaa !6
  %mul16 = mul i64 2, %27
  %add17 = add i64 %26, %mul16
  %28 = load i64, i64* %num.addr, align 8, !tbaa !6
  %cmp18 = icmp ugt i64 %add17, %28
  br i1 %cmp18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %cond.end14
  %29 = load i64, i64* %num.addr, align 8, !tbaa !6
  br label %cond.end23

cond.false20:                                     ; preds = %cond.end14
  %30 = load i64, i64* %p, align 8, !tbaa !6
  %31 = load i64, i64* %width, align 8, !tbaa !6
  %mul21 = mul i64 2, %31
  %add22 = add i64 %30, %mul21
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false20, %cond.true19
  %cond24 = phi i64 [ %29, %cond.true19 ], [ %add22, %cond.false20 ]
  store i64 %cond24, i64* %r, align 8, !tbaa !6
  %32 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %32) #16
  %33 = load i64, i64* %p, align 8, !tbaa !6
  store i64 %33, i64* %i, align 8, !tbaa !6
  %34 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start(i64 8, i8* %34) #16
  %35 = load i64, i64* %q, align 8, !tbaa !6
  store i64 %35, i64* %j, align 8, !tbaa !6
  %36 = bitcast i64* %k to i8*
  call void @llvm.lifetime.start(i64 8, i8* %36) #16
  %37 = load i64, i64* %p, align 8, !tbaa !6
  store i64 %37, i64* %k, align 8, !tbaa !6
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %cond.end23
  %38 = load i64, i64* %k, align 8, !tbaa !6
  %39 = load i64, i64* %r, align 8, !tbaa !6
  %cmp26 = icmp ult i64 %38, %39
  br i1 %cmp26, label %for.body27, label %for.end

for.body27:                                       ; preds = %for.cond25
  %40 = load i64, i64* %i, align 8, !tbaa !6
  %41 = load i64, i64* %q, align 8, !tbaa !6
  %cmp28 = icmp ult i64 %40, %41
  br i1 %cmp28, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body27
  %42 = load i64, i64* %j, align 8, !tbaa !6
  %43 = load i64, i64* %r, align 8, !tbaa !6
  %cmp29 = icmp uge i64 %42, %43
  br i1 %cmp29, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %44 = load %struct.BPMNode*, %struct.BPMNode** %a, align 8, !tbaa !2
  %45 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %44, i64 %45
  %weight = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx, i32 0, i32 0
  %46 = load i32, i32* %weight, align 8, !tbaa !17
  %47 = load %struct.BPMNode*, %struct.BPMNode** %a, align 8, !tbaa !2
  %48 = load i64, i64* %j, align 8, !tbaa !6
  %arrayidx30 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %47, i64 %48
  %weight31 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx30, i32 0, i32 0
  %49 = load i32, i32* %weight31, align 8, !tbaa !17
  %cmp32 = icmp sle i32 %46, %49
  br i1 %cmp32, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %50 = load %struct.BPMNode*, %struct.BPMNode** %a, align 8, !tbaa !2
  %51 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %51, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  %arrayidx33 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %50, i64 %51
  %52 = load %struct.BPMNode*, %struct.BPMNode** %b, align 8, !tbaa !2
  %53 = load i64, i64* %k, align 8, !tbaa !6
  %arrayidx34 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %52, i64 %53
  %54 = bitcast %struct.BPMNode* %arrayidx34 to i8*
  %55 = bitcast %struct.BPMNode* %arrayidx33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* %55, i64 24, i32 8, i1 false), !tbaa.struct !30
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false, %for.body27
  %56 = load %struct.BPMNode*, %struct.BPMNode** %a, align 8, !tbaa !2
  %57 = load i64, i64* %j, align 8, !tbaa !6
  %inc35 = add i64 %57, 1
  store i64 %inc35, i64* %j, align 8, !tbaa !6
  %arrayidx36 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %56, i64 %57
  %58 = load %struct.BPMNode*, %struct.BPMNode** %b, align 8, !tbaa !2
  %59 = load i64, i64* %k, align 8, !tbaa !6
  %arrayidx37 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %58, i64 %59
  %60 = bitcast %struct.BPMNode* %arrayidx37 to i8*
  %61 = bitcast %struct.BPMNode* %arrayidx36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* %61, i64 24, i32 8, i1 false), !tbaa.struct !30
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %62 = load i64, i64* %k, align 8, !tbaa !6
  %inc38 = add i64 %62, 1
  store i64 %inc38, i64* %k, align 8, !tbaa !6
  br label %for.cond25

for.end:                                          ; preds = %for.cond25
  %63 = bitcast i64* %k to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #16
  %64 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #16
  %65 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %65) #16
  %66 = bitcast i64* %r to i8*
  call void @llvm.lifetime.end(i64 8, i8* %66) #16
  %67 = bitcast i64* %q to i8*
  call void @llvm.lifetime.end(i64 8, i8* %67) #16
  br label %for.inc39

for.inc39:                                        ; preds = %for.end
  %68 = load i64, i64* %width, align 8, !tbaa !6
  %mul40 = mul i64 2, %68
  %69 = load i64, i64* %p, align 8, !tbaa !6
  %add41 = add i64 %69, %mul40
  store i64 %add41, i64* %p, align 8, !tbaa !6
  br label %for.cond7

for.end42:                                        ; preds = %for.cond7
  %70 = load i64, i64* %counter, align 8, !tbaa !6
  %inc43 = add i64 %70, 1
  store i64 %inc43, i64* %counter, align 8, !tbaa !6
  %71 = bitcast i64* %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %71) #16
  %72 = bitcast %struct.BPMNode** %b to i8*
  call void @llvm.lifetime.end(i64 8, i8* %72) #16
  %73 = bitcast %struct.BPMNode** %a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %73) #16
  br label %for.inc44

for.inc44:                                        ; preds = %for.end42
  %74 = load i64, i64* %width, align 8, !tbaa !6
  %mul45 = mul i64 %74, 2
  store i64 %mul45, i64* %width, align 8, !tbaa !6
  br label %for.cond

for.end46:                                        ; preds = %for.cond
  %75 = load i64, i64* %counter, align 8, !tbaa !6
  %and47 = and i64 %75, 1
  %tobool48 = icmp ne i64 %and47, 0
  br i1 %tobool48, label %if.then49, label %if.end51

if.then49:                                        ; preds = %for.end46
  %76 = load %struct.BPMNode*, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  %77 = bitcast %struct.BPMNode* %76 to i8*
  %78 = load %struct.BPMNode*, %struct.BPMNode** %mem, align 8, !tbaa !2
  %79 = bitcast %struct.BPMNode* %78 to i8*
  %80 = load i64, i64* %num.addr, align 8, !tbaa !6
  %mul50 = mul i64 24, %80
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %77, i8* %79, i64 %mul50)
  br label %if.end51

if.end51:                                         ; preds = %if.then49, %for.end46
  %81 = load %struct.BPMNode*, %struct.BPMNode** %mem, align 8, !tbaa !2
  %82 = bitcast %struct.BPMNode* %81 to i8*
  call void @_ZL12lodepng_freePv(i8* %82)
  %83 = bitcast i64* %counter to i8*
  call void @llvm.lifetime.end(i64 8, i8* %83) #16
  %84 = bitcast i64* %width to i8*
  call void @llvm.lifetime.end(i64 8, i8* %84) #16
  %85 = bitcast %struct.BPMNode** %mem to i8*
  call void @llvm.lifetime.end(i64 8, i8* %85) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.BPMNode* @_ZL14bpmnode_createP8BPMListsijP7BPMNode(%struct.BPMLists* %lists, i32 %weight, i32 %index, %struct.BPMNode* %tail) #4 {
entry:
  %lists.addr = alloca %struct.BPMLists*, align 8
  %weight.addr = alloca i32, align 4
  %index.addr = alloca i32, align 4
  %tail.addr = alloca %struct.BPMNode*, align 8
  %i = alloca i32, align 4
  %result = alloca %struct.BPMNode*, align 8
  %node = alloca %struct.BPMNode*, align 8
  store %struct.BPMLists* %lists, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  store i32 %weight, i32* %weight.addr, align 4, !tbaa !8
  store i32 %index, i32* %index.addr, align 4, !tbaa !8
  store %struct.BPMNode* %tail, %struct.BPMNode** %tail.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast %struct.BPMNode** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %nextfree = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %2, i32 0, i32 3
  %3 = load i32, i32* %nextfree, align 4, !tbaa !23
  %4 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %numfree = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %4, i32 0, i32 2
  %5 = load i32, i32* %numfree, align 8, !tbaa !24
  %cmp = icmp uge i32 %3, %5
  br i1 %cmp, label %if.then, label %if.end47

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i32, i32* %i, align 4, !tbaa !8
  %7 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %memsize = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %7, i32 0, i32 0
  %8 = load i32, i32* %memsize, align 8, !tbaa !22
  %cmp1 = icmp ne i32 %6, %8
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %memory = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %9, i32 0, i32 1
  %10 = load %struct.BPMNode*, %struct.BPMNode** %memory, align 8, !tbaa !25
  %11 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %11 to i64
  %arrayidx = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %10, i64 %idxprom
  %in_use = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx, i32 0, i32 3
  store i32 0, i32* %in_use, align 8, !tbaa !31
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %12, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc23, %for.end
  %13 = load i32, i32* %i, align 4, !tbaa !8
  %14 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %listsize = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %14, i32 0, i32 5
  %15 = load i32, i32* %listsize, align 8, !tbaa !20
  %cmp3 = icmp ne i32 %13, %15
  br i1 %cmp3, label %for.body4, label %for.end25

for.body4:                                        ; preds = %for.cond2
  %16 = bitcast %struct.BPMNode** %node to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #16
  %17 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains0 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %17, i32 0, i32 6
  %18 = load %struct.BPMNode**, %struct.BPMNode*** %chains0, align 8, !tbaa !27
  %19 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom5 = zext i32 %19 to i64
  %arrayidx6 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %18, i64 %idxprom5
  %20 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx6, align 8, !tbaa !2
  store %struct.BPMNode* %20, %struct.BPMNode** %node, align 8, !tbaa !2
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc11, %for.body4
  %21 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %cmp8 = icmp ne %struct.BPMNode* %21, null
  br i1 %cmp8, label %for.body9, label %for.end13

for.body9:                                        ; preds = %for.cond7
  %22 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %in_use10 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %22, i32 0, i32 3
  store i32 1, i32* %in_use10, align 8, !tbaa !31
  br label %for.inc11

for.inc11:                                        ; preds = %for.body9
  %23 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %tail12 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %23, i32 0, i32 2
  %24 = load %struct.BPMNode*, %struct.BPMNode** %tail12, align 8, !tbaa !29
  store %struct.BPMNode* %24, %struct.BPMNode** %node, align 8, !tbaa !2
  br label %for.cond7

for.end13:                                        ; preds = %for.cond7
  %25 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains1 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %25, i32 0, i32 7
  %26 = load %struct.BPMNode**, %struct.BPMNode*** %chains1, align 8, !tbaa !28
  %27 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom14 = zext i32 %27 to i64
  %arrayidx15 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %26, i64 %idxprom14
  %28 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx15, align 8, !tbaa !2
  store %struct.BPMNode* %28, %struct.BPMNode** %node, align 8, !tbaa !2
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc20, %for.end13
  %29 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %cmp17 = icmp ne %struct.BPMNode* %29, null
  br i1 %cmp17, label %for.body18, label %for.end22

for.body18:                                       ; preds = %for.cond16
  %30 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %in_use19 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %30, i32 0, i32 3
  store i32 1, i32* %in_use19, align 8, !tbaa !31
  br label %for.inc20

for.inc20:                                        ; preds = %for.body18
  %31 = load %struct.BPMNode*, %struct.BPMNode** %node, align 8, !tbaa !2
  %tail21 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %31, i32 0, i32 2
  %32 = load %struct.BPMNode*, %struct.BPMNode** %tail21, align 8, !tbaa !29
  store %struct.BPMNode* %32, %struct.BPMNode** %node, align 8, !tbaa !2
  br label %for.cond16

for.end22:                                        ; preds = %for.cond16
  %33 = bitcast %struct.BPMNode** %node to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #16
  br label %for.inc23

for.inc23:                                        ; preds = %for.end22
  %34 = load i32, i32* %i, align 4, !tbaa !8
  %inc24 = add i32 %34, 1
  store i32 %inc24, i32* %i, align 4, !tbaa !8
  br label %for.cond2

for.end25:                                        ; preds = %for.cond2
  %35 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %numfree26 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %35, i32 0, i32 2
  store i32 0, i32* %numfree26, align 8, !tbaa !24
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc43, %for.end25
  %36 = load i32, i32* %i, align 4, !tbaa !8
  %37 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %memsize28 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %37, i32 0, i32 0
  %38 = load i32, i32* %memsize28, align 8, !tbaa !22
  %cmp29 = icmp ne i32 %36, %38
  br i1 %cmp29, label %for.body30, label %for.end45

for.body30:                                       ; preds = %for.cond27
  %39 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %memory31 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %39, i32 0, i32 1
  %40 = load %struct.BPMNode*, %struct.BPMNode** %memory31, align 8, !tbaa !25
  %41 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom32 = zext i32 %41 to i64
  %arrayidx33 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %40, i64 %idxprom32
  %in_use34 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx33, i32 0, i32 3
  %42 = load i32, i32* %in_use34, align 8, !tbaa !31
  %tobool = icmp ne i32 %42, 0
  br i1 %tobool, label %if.end, label %if.then35

if.then35:                                        ; preds = %for.body30
  %43 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %memory36 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %43, i32 0, i32 1
  %44 = load %struct.BPMNode*, %struct.BPMNode** %memory36, align 8, !tbaa !25
  %45 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom37 = zext i32 %45 to i64
  %arrayidx38 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %44, i64 %idxprom37
  %46 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %freelist = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %46, i32 0, i32 4
  %47 = load %struct.BPMNode**, %struct.BPMNode*** %freelist, align 8, !tbaa !26
  %48 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %numfree39 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %48, i32 0, i32 2
  %49 = load i32, i32* %numfree39, align 8, !tbaa !24
  %inc40 = add i32 %49, 1
  store i32 %inc40, i32* %numfree39, align 8, !tbaa !24
  %idxprom41 = zext i32 %49 to i64
  %arrayidx42 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %47, i64 %idxprom41
  store %struct.BPMNode* %arrayidx38, %struct.BPMNode** %arrayidx42, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then35, %for.body30
  br label %for.inc43

for.inc43:                                        ; preds = %if.end
  %50 = load i32, i32* %i, align 4, !tbaa !8
  %inc44 = add i32 %50, 1
  store i32 %inc44, i32* %i, align 4, !tbaa !8
  br label %for.cond27

for.end45:                                        ; preds = %for.cond27
  %51 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %nextfree46 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %51, i32 0, i32 3
  store i32 0, i32* %nextfree46, align 4, !tbaa !23
  br label %if.end47

if.end47:                                         ; preds = %for.end45, %entry
  %52 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %freelist48 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %52, i32 0, i32 4
  %53 = load %struct.BPMNode**, %struct.BPMNode*** %freelist48, align 8, !tbaa !26
  %54 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %nextfree49 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %54, i32 0, i32 3
  %55 = load i32, i32* %nextfree49, align 4, !tbaa !23
  %inc50 = add i32 %55, 1
  store i32 %inc50, i32* %nextfree49, align 4, !tbaa !23
  %idxprom51 = zext i32 %55 to i64
  %arrayidx52 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %53, i64 %idxprom51
  %56 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx52, align 8, !tbaa !2
  store %struct.BPMNode* %56, %struct.BPMNode** %result, align 8, !tbaa !2
  %57 = load i32, i32* %weight.addr, align 4, !tbaa !8
  %58 = load %struct.BPMNode*, %struct.BPMNode** %result, align 8, !tbaa !2
  %weight53 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %58, i32 0, i32 0
  store i32 %57, i32* %weight53, align 8, !tbaa !17
  %59 = load i32, i32* %index.addr, align 4, !tbaa !8
  %60 = load %struct.BPMNode*, %struct.BPMNode** %result, align 8, !tbaa !2
  %index54 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %60, i32 0, i32 1
  store i32 %59, i32* %index54, align 4, !tbaa !19
  %61 = load %struct.BPMNode*, %struct.BPMNode** %tail.addr, align 8, !tbaa !2
  %62 = load %struct.BPMNode*, %struct.BPMNode** %result, align 8, !tbaa !2
  %tail55 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %62, i32 0, i32 2
  store %struct.BPMNode* %61, %struct.BPMNode** %tail55, align 8, !tbaa !29
  %63 = load %struct.BPMNode*, %struct.BPMNode** %result, align 8, !tbaa !2
  %64 = bitcast %struct.BPMNode** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #16
  %65 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %65) #16
  ret %struct.BPMNode* %63
}

; Function Attrs: ssp uwtable
define internal void @_ZL10boundaryPMP8BPMListsP7BPMNodemii(%struct.BPMLists* %lists, %struct.BPMNode* %leaves, i64 %numpresent, i32 %c, i32 %num) #0 {
entry:
  %lists.addr = alloca %struct.BPMLists*, align 8
  %leaves.addr = alloca %struct.BPMNode*, align 8
  %numpresent.addr = alloca i64, align 8
  %c.addr = alloca i32, align 4
  %num.addr = alloca i32, align 4
  %lastindex = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %sum = alloca i32, align 4
  store %struct.BPMLists* %lists, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  store %struct.BPMNode* %leaves, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  store i64 %numpresent, i64* %numpresent.addr, align 8, !tbaa !6
  store i32 %c, i32* %c.addr, align 4, !tbaa !8
  store i32 %num, i32* %num.addr, align 4, !tbaa !8
  %0 = bitcast i32* %lastindex to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains1 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %1, i32 0, i32 7
  %2 = load %struct.BPMNode**, %struct.BPMNode*** %chains1, align 8, !tbaa !28
  %3 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %2, i64 %idxprom
  %4 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx, align 8, !tbaa !2
  %index = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %4, i32 0, i32 1
  %5 = load i32, i32* %index, align 4, !tbaa !19
  store i32 %5, i32* %lastindex, align 4, !tbaa !8
  %6 = load i32, i32* %c.addr, align 4, !tbaa !8
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %lastindex, align 4, !tbaa !8
  %conv = zext i32 %7 to i64
  %8 = load i64, i64* %numpresent.addr, align 8, !tbaa !6
  %cmp1 = icmp uge i64 %conv, %8
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup65

if.end:                                           ; preds = %if.then
  %9 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains13 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %9, i32 0, i32 7
  %10 = load %struct.BPMNode**, %struct.BPMNode*** %chains13, align 8, !tbaa !28
  %11 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom4 = sext i32 %11 to i64
  %arrayidx5 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %10, i64 %idxprom4
  %12 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx5, align 8, !tbaa !2
  %13 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains0 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %13, i32 0, i32 6
  %14 = load %struct.BPMNode**, %struct.BPMNode*** %chains0, align 8, !tbaa !27
  %15 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom6 = sext i32 %15 to i64
  %arrayidx7 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %14, i64 %idxprom6
  store %struct.BPMNode* %12, %struct.BPMNode** %arrayidx7, align 8, !tbaa !2
  %16 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %17 = load %struct.BPMNode*, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  %18 = load i32, i32* %lastindex, align 4, !tbaa !8
  %idxprom8 = zext i32 %18 to i64
  %arrayidx9 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %17, i64 %idxprom8
  %weight = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx9, i32 0, i32 0
  %19 = load i32, i32* %weight, align 8, !tbaa !17
  %20 = load i32, i32* %lastindex, align 4, !tbaa !8
  %add = add i32 %20, 1
  %call = call %struct.BPMNode* @_ZL14bpmnode_createP8BPMListsijP7BPMNode(%struct.BPMLists* %16, i32 %19, i32 %add, %struct.BPMNode* null)
  %21 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains110 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %21, i32 0, i32 7
  %22 = load %struct.BPMNode**, %struct.BPMNode*** %chains110, align 8, !tbaa !28
  %23 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom11 = sext i32 %23 to i64
  %arrayidx12 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %22, i64 %idxprom11
  store %struct.BPMNode* %call, %struct.BPMNode** %arrayidx12, align 8, !tbaa !2
  br label %if.end64

if.else:                                          ; preds = %entry
  %24 = bitcast i32* %sum to i8*
  call void @llvm.lifetime.start(i64 4, i8* %24) #16
  %25 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains013 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %25, i32 0, i32 6
  %26 = load %struct.BPMNode**, %struct.BPMNode*** %chains013, align 8, !tbaa !27
  %27 = load i32, i32* %c.addr, align 4, !tbaa !8
  %sub = sub nsw i32 %27, 1
  %idxprom14 = sext i32 %sub to i64
  %arrayidx15 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %26, i64 %idxprom14
  %28 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx15, align 8, !tbaa !2
  %weight16 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %28, i32 0, i32 0
  %29 = load i32, i32* %weight16, align 8, !tbaa !17
  %30 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains117 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %30, i32 0, i32 7
  %31 = load %struct.BPMNode**, %struct.BPMNode*** %chains117, align 8, !tbaa !28
  %32 = load i32, i32* %c.addr, align 4, !tbaa !8
  %sub18 = sub nsw i32 %32, 1
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %31, i64 %idxprom19
  %33 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx20, align 8, !tbaa !2
  %weight21 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %33, i32 0, i32 0
  %34 = load i32, i32* %weight21, align 8, !tbaa !17
  %add22 = add nsw i32 %29, %34
  store i32 %add22, i32* %sum, align 4, !tbaa !8
  %35 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains123 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %35, i32 0, i32 7
  %36 = load %struct.BPMNode**, %struct.BPMNode*** %chains123, align 8, !tbaa !28
  %37 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom24 = sext i32 %37 to i64
  %arrayidx25 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %36, i64 %idxprom24
  %38 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx25, align 8, !tbaa !2
  %39 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains026 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %39, i32 0, i32 6
  %40 = load %struct.BPMNode**, %struct.BPMNode*** %chains026, align 8, !tbaa !27
  %41 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom27 = sext i32 %41 to i64
  %arrayidx28 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %40, i64 %idxprom27
  store %struct.BPMNode* %38, %struct.BPMNode** %arrayidx28, align 8, !tbaa !2
  %42 = load i32, i32* %lastindex, align 4, !tbaa !8
  %conv29 = zext i32 %42 to i64
  %43 = load i64, i64* %numpresent.addr, align 8, !tbaa !6
  %cmp30 = icmp ult i64 %conv29, %43
  br i1 %cmp30, label %land.lhs.true, label %if.end47

land.lhs.true:                                    ; preds = %if.else
  %44 = load i32, i32* %sum, align 4, !tbaa !8
  %45 = load %struct.BPMNode*, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  %46 = load i32, i32* %lastindex, align 4, !tbaa !8
  %idxprom31 = zext i32 %46 to i64
  %arrayidx32 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %45, i64 %idxprom31
  %weight33 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx32, i32 0, i32 0
  %47 = load i32, i32* %weight33, align 8, !tbaa !17
  %cmp34 = icmp sgt i32 %44, %47
  br i1 %cmp34, label %if.then35, label %if.end47

if.then35:                                        ; preds = %land.lhs.true
  %48 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %49 = load %struct.BPMNode*, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  %50 = load i32, i32* %lastindex, align 4, !tbaa !8
  %idxprom36 = zext i32 %50 to i64
  %arrayidx37 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %49, i64 %idxprom36
  %weight38 = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %arrayidx37, i32 0, i32 0
  %51 = load i32, i32* %weight38, align 8, !tbaa !17
  %52 = load i32, i32* %lastindex, align 4, !tbaa !8
  %add39 = add i32 %52, 1
  %53 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains140 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %53, i32 0, i32 7
  %54 = load %struct.BPMNode**, %struct.BPMNode*** %chains140, align 8, !tbaa !28
  %55 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom41 = sext i32 %55 to i64
  %arrayidx42 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %54, i64 %idxprom41
  %56 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx42, align 8, !tbaa !2
  %tail = getelementptr inbounds %struct.BPMNode, %struct.BPMNode* %56, i32 0, i32 2
  %57 = load %struct.BPMNode*, %struct.BPMNode** %tail, align 8, !tbaa !29
  %call43 = call %struct.BPMNode* @_ZL14bpmnode_createP8BPMListsijP7BPMNode(%struct.BPMLists* %48, i32 %51, i32 %add39, %struct.BPMNode* %57)
  %58 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains144 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %58, i32 0, i32 7
  %59 = load %struct.BPMNode**, %struct.BPMNode*** %chains144, align 8, !tbaa !28
  %60 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom45 = sext i32 %60 to i64
  %arrayidx46 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %59, i64 %idxprom45
  store %struct.BPMNode* %call43, %struct.BPMNode** %arrayidx46, align 8, !tbaa !2
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end47:                                         ; preds = %land.lhs.true, %if.else
  %61 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %62 = load i32, i32* %sum, align 4, !tbaa !8
  %63 = load i32, i32* %lastindex, align 4, !tbaa !8
  %64 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains148 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %64, i32 0, i32 7
  %65 = load %struct.BPMNode**, %struct.BPMNode*** %chains148, align 8, !tbaa !28
  %66 = load i32, i32* %c.addr, align 4, !tbaa !8
  %sub49 = sub nsw i32 %66, 1
  %idxprom50 = sext i32 %sub49 to i64
  %arrayidx51 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %65, i64 %idxprom50
  %67 = load %struct.BPMNode*, %struct.BPMNode** %arrayidx51, align 8, !tbaa !2
  %call52 = call %struct.BPMNode* @_ZL14bpmnode_createP8BPMListsijP7BPMNode(%struct.BPMLists* %61, i32 %62, i32 %63, %struct.BPMNode* %67)
  %68 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %chains153 = getelementptr inbounds %struct.BPMLists, %struct.BPMLists* %68, i32 0, i32 7
  %69 = load %struct.BPMNode**, %struct.BPMNode*** %chains153, align 8, !tbaa !28
  %70 = load i32, i32* %c.addr, align 4, !tbaa !8
  %idxprom54 = sext i32 %70 to i64
  %arrayidx55 = getelementptr inbounds %struct.BPMNode*, %struct.BPMNode** %69, i64 %idxprom54
  store %struct.BPMNode* %call52, %struct.BPMNode** %arrayidx55, align 8, !tbaa !2
  %71 = load i32, i32* %num.addr, align 4, !tbaa !8
  %add56 = add nsw i32 %71, 1
  %72 = load i64, i64* %numpresent.addr, align 8, !tbaa !6
  %mul = mul i64 2, %72
  %sub57 = sub i64 %mul, 2
  %conv58 = trunc i64 %sub57 to i32
  %cmp59 = icmp slt i32 %add56, %conv58
  br i1 %cmp59, label %if.then60, label %if.end63

if.then60:                                        ; preds = %if.end47
  %73 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %74 = load %struct.BPMNode*, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  %75 = load i64, i64* %numpresent.addr, align 8, !tbaa !6
  %76 = load i32, i32* %c.addr, align 4, !tbaa !8
  %sub61 = sub nsw i32 %76, 1
  %77 = load i32, i32* %num.addr, align 4, !tbaa !8
  call void @_ZL10boundaryPMP8BPMListsP7BPMNodemii(%struct.BPMLists* %73, %struct.BPMNode* %74, i64 %75, i32 %sub61, i32 %77)
  %78 = load %struct.BPMLists*, %struct.BPMLists** %lists.addr, align 8, !tbaa !2
  %79 = load %struct.BPMNode*, %struct.BPMNode** %leaves.addr, align 8, !tbaa !2
  %80 = load i64, i64* %numpresent.addr, align 8, !tbaa !6
  %81 = load i32, i32* %c.addr, align 4, !tbaa !8
  %sub62 = sub nsw i32 %81, 1
  %82 = load i32, i32* %num.addr, align 4, !tbaa !8
  call void @_ZL10boundaryPMP8BPMListsP7BPMNodemii(%struct.BPMLists* %78, %struct.BPMNode* %79, i64 %80, i32 %sub62, i32 %82)
  br label %if.end63

if.end63:                                         ; preds = %if.then60, %if.end47
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end63, %if.then35
  %83 = bitcast i32* %sum to i8*
  call void @llvm.lifetime.end(i64 4, i8* %83) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup65 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end64

if.end64:                                         ; preds = %cleanup.cont, %if.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup65

cleanup65:                                        ; preds = %if.end64, %cleanup, %if.then2
  %84 = bitcast i32* %lastindex to i8*
  call void @llvm.lifetime.end(i64 4, i8* %84) #16
  %cleanup.dest66 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest66, label %unreachable [
    i32 0, label %cleanup.cont67
    i32 1, label %cleanup.cont67
  ]

cleanup.cont67:                                   ; preds = %cleanup65, %cleanup65
  ret void

unreachable:                                      ; preds = %cleanup65
  unreachable
}

; Function Attrs: ssp uwtable
define internal void @_ZL12lodepng_freePv(i8* %ptr) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %ptr.addr, align 8, !tbaa !2
  call void @free(i8* %0)
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_Z15lodepng_inflatePPhPmPKhmPK25LodePNGDecompressSettings(i8** %out, i64* %outsize, i8* %in, i64 %insize, %struct.LodePNGDecompressSettings* %settings) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %v = alloca %struct.ucvector, align 8
  %error = alloca i32, align 4
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #16
  %1 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %1, align 8, !tbaa !2
  %3 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %4 = load i64, i64* %3, align 8, !tbaa !6
  call void @_ZL13ucvector_initPhm(%struct.ucvector* sret %v, i8* %2, i64 %4)
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %8 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 @_ZL16lodepng_inflatevP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* %v, i8* %6, i64 %7, %struct.LodePNGDecompressSettings* %8)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !32
  %10 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %9, i8** %10, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 1
  %11 = load i64, i64* %size, align 8, !tbaa !34
  %12 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %11, i64* %12, align 8, !tbaa !6
  %13 = load i32, i32* %error, align 4, !tbaa !8
  %14 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #16
  %15 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.end(i64 24, i8* %15) #16
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13ucvector_initPhm(%struct.ucvector* noalias sret %agg.result, i8* %buffer, i64 %size) #4 {
entry:
  %buffer.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %agg.result, i32 0, i32 0
  store i8* %0, i8** %data, align 8, !tbaa !32
  %1 = load i64, i64* %size.addr, align 8, !tbaa !6
  %size1 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %agg.result, i32 0, i32 1
  store i64 %1, i64* %size1, align 8, !tbaa !34
  %allocsize = getelementptr inbounds %struct.ucvector, %struct.ucvector* %agg.result, i32 0, i32 2
  store i64 %1, i64* %allocsize, align 8, !tbaa !35
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL16lodepng_inflatevP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* %out, i8* %in, i64 %insize, %struct.LodePNGDecompressSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %BFINAL = alloca i32, align 4
  %reader = alloca %struct.LodePNGBitReader, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %BTYPE = alloca i32, align 4
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %BFINAL to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %BFINAL, align 4, !tbaa !8
  %1 = bitcast %struct.LodePNGBitReader* %reader to i8*
  call void @llvm.lifetime.start(i64 40, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %4 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %call = call i32 @_ZL21LodePNGBitReader_initP16LodePNGBitReaderPKhm(%struct.LodePNGBitReader* %reader, i8* %3, i64 %4)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %5 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %6, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup19

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %if.end
  %7 = load i32, i32* %BFINAL, align 4, !tbaa !8
  %tobool1 = icmp ne i32 %7, 0
  %lnot = xor i1 %tobool1, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = bitcast i32* %BTYPE to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #16
  %call2 = call i32 @_ZL11ensureBits9P16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 3)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %while.body
  store i32 52, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %while.body
  %call6 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 1)
  store i32 %call6, i32* %BFINAL, align 4, !tbaa !8
  %call7 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 2)
  store i32 %call7, i32* %BTYPE, align 4, !tbaa !8
  %9 = load i32, i32* %BTYPE, align 4, !tbaa !8
  %cmp = icmp eq i32 %9, 3
  br i1 %cmp, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end5
  store i32 20, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %if.end5
  %10 = load i32, i32* %BTYPE, align 4, !tbaa !8
  %cmp9 = icmp eq i32 %10, 0
  br i1 %cmp9, label %if.then10, label %if.else12

if.then10:                                        ; preds = %if.else
  %11 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %12 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %call11 = call i32 @_ZL20inflateNoCompressionP8ucvectorP16LodePNGBitReaderPK25LodePNGDecompressSettings(%struct.ucvector* %11, %struct.LodePNGBitReader* %reader, %struct.LodePNGDecompressSettings* %12)
  store i32 %call11, i32* %error, align 4, !tbaa !8
  br label %if.end14

if.else12:                                        ; preds = %if.else
  %13 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %14 = load i32, i32* %BTYPE, align 4, !tbaa !8
  %call13 = call i32 @_ZL19inflateHuffmanBlockP8ucvectorP16LodePNGBitReaderj(%struct.ucvector* %13, %struct.LodePNGBitReader* %reader, i32 %14)
  store i32 %call13, i32* %error, align 4, !tbaa !8
  br label %if.end14

if.end14:                                         ; preds = %if.else12, %if.then10
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  %15 = load i32, i32* %error, align 4, !tbaa !8
  %tobool16 = icmp ne i32 %15, 0
  br i1 %tobool16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end15
  %16 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %16, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end18:                                         ; preds = %if.end15
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end18, %if.then17, %if.then8, %if.then4
  %17 = bitcast i32* %BTYPE to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup19 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %18 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %18, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup19

cleanup19:                                        ; preds = %while.end, %cleanup, %if.then
  %19 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %19) #16
  %20 = bitcast %struct.LodePNGBitReader* %reader to i8*
  call void @llvm.lifetime.end(i64 40, i8* %20) #16
  %21 = bitcast i32* %BFINAL to i8*
  call void @llvm.lifetime.end(i64 4, i8* %21) #16
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

; Function Attrs: ssp uwtable
define i32 @_Z15lodepng_deflatePPhPmPKhmPK23LodePNGCompressSettings(i8** %out, i64* %outsize, i8* %in, i64 %insize, %struct.LodePNGCompressSettings* %settings) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %v = alloca %struct.ucvector, align 8
  %error = alloca i32, align 4
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #16
  %1 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %1, align 8, !tbaa !2
  %3 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %4 = load i64, i64* %3, align 8, !tbaa !6
  call void @_ZL13ucvector_initPhm(%struct.ucvector* sret %v, i8* %2, i64 %4)
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %8 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 @_ZL16lodepng_deflatevP8ucvectorPKhmPK23LodePNGCompressSettings(%struct.ucvector* %v, i8* %6, i64 %7, %struct.LodePNGCompressSettings* %8)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !32
  %10 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %9, i8** %10, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 1
  %11 = load i64, i64* %size, align 8, !tbaa !34
  %12 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %11, i64* %12, align 8, !tbaa !6
  %13 = load i32, i32* %error, align 4, !tbaa !8
  %14 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #16
  %15 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.end(i64 24, i8* %15) #16
  ret i32 %13
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL16lodepng_deflatevP8ucvectorPKhmPK23LodePNGCompressSettings(%struct.ucvector* %out, i8* %in, i64 %insize, %struct.LodePNGCompressSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %error = alloca i32, align 4
  %i = alloca i64, align 8
  %blocksize = alloca i64, align 8
  %numdeflateblocks = alloca i64, align 8
  %hash = alloca %struct.Hash, align 8
  %writer = alloca %struct.LodePNGBitWriter, align 8
  %cleanup.dest.slot = alloca i32
  %final = alloca i32, align 4
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i64* %blocksize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = bitcast i64* %numdeflateblocks to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = bitcast %struct.Hash* %hash to i8*
  call void @llvm.lifetime.start(i64 48, i8* %4) #16
  %5 = bitcast %struct.LodePNGBitWriter* %writer to i8*
  call void @llvm.lifetime.start(i64 16, i8* %5) #16
  %6 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  call void @_ZL21LodePNGBitWriter_initP16LodePNGBitWriterP8ucvector(%struct.LodePNGBitWriter* %writer, %struct.ucvector* %6)
  %7 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %btype = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %7, i32 0, i32 0
  %8 = load i32, i32* %btype, align 8, !tbaa !36
  %cmp = icmp ugt i32 %8, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 61, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %9 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %btype1 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %9, i32 0, i32 0
  %10 = load i32, i32* %btype1, align 8, !tbaa !36
  %cmp2 = icmp eq i32 %10, 0
  br i1 %cmp2, label %if.then3, label %if.else4

if.then3:                                         ; preds = %if.else
  %11 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %12 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %13 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %call = call i32 @_ZL20deflateNoCompressionP8ucvectorPKhm(%struct.ucvector* %11, i8* %12, i64 %13)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else4:                                         ; preds = %if.else
  %14 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %btype5 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %14, i32 0, i32 0
  %15 = load i32, i32* %btype5, align 8, !tbaa !36
  %cmp6 = icmp eq i32 %15, 1
  br i1 %cmp6, label %if.then7, label %if.else8

if.then7:                                         ; preds = %if.else4
  %16 = load i64, i64* %insize.addr, align 8, !tbaa !6
  store i64 %16, i64* %blocksize, align 8, !tbaa !6
  br label %if.end14

if.else8:                                         ; preds = %if.else4
  %17 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %div = udiv i64 %17, 8
  %add = add i64 %div, 8
  store i64 %add, i64* %blocksize, align 8, !tbaa !6
  %18 = load i64, i64* %blocksize, align 8, !tbaa !6
  %cmp9 = icmp ult i64 %18, 65536
  br i1 %cmp9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.else8
  store i64 65536, i64* %blocksize, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.else8
  %19 = load i64, i64* %blocksize, align 8, !tbaa !6
  %cmp11 = icmp ugt i64 %19, 262144
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end
  store i64 262144, i64* %blocksize, align 8, !tbaa !6
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then7
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  br label %if.end16

if.end16:                                         ; preds = %if.end15
  %20 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %21 = load i64, i64* %blocksize, align 8, !tbaa !6
  %add17 = add i64 %20, %21
  %sub = sub i64 %add17, 1
  %22 = load i64, i64* %blocksize, align 8, !tbaa !6
  %div18 = udiv i64 %sub, %22
  store i64 %div18, i64* %numdeflateblocks, align 8, !tbaa !6
  %23 = load i64, i64* %numdeflateblocks, align 8, !tbaa !6
  %cmp19 = icmp eq i64 %23, 0
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end16
  store i64 1, i64* %numdeflateblocks, align 8, !tbaa !6
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end16
  %24 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %windowsize = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %24, i32 0, i32 2
  %25 = load i32, i32* %windowsize, align 8, !tbaa !38
  %call22 = call i32 @_ZL9hash_initP4Hashj(%struct.Hash* %hash, i32 %25)
  store i32 %call22, i32* %error, align 4, !tbaa !8
  %26 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %26, 0
  br i1 %tobool, label %if.end43, label %if.then23

if.then23:                                        ; preds = %if.end21
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then23
  %27 = load i64, i64* %i, align 8, !tbaa !6
  %28 = load i64, i64* %numdeflateblocks, align 8, !tbaa !6
  %cmp24 = icmp ne i64 %27, %28
  br i1 %cmp24, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %29 = load i32, i32* %error, align 4, !tbaa !8
  %tobool25 = icmp ne i32 %29, 0
  %lnot = xor i1 %tobool25, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %30 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %30, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %31 = bitcast i32* %final to i8*
  call void @llvm.lifetime.start(i64 4, i8* %31) #16
  %32 = load i64, i64* %i, align 8, !tbaa !6
  %33 = load i64, i64* %numdeflateblocks, align 8, !tbaa !6
  %sub26 = sub i64 %33, 1
  %cmp27 = icmp eq i64 %32, %sub26
  %conv = zext i1 %cmp27 to i32
  store i32 %conv, i32* %final, align 4, !tbaa !8
  %34 = bitcast i64* %start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %34) #16
  %35 = load i64, i64* %i, align 8, !tbaa !6
  %36 = load i64, i64* %blocksize, align 8, !tbaa !6
  %mul = mul i64 %35, %36
  store i64 %mul, i64* %start, align 8, !tbaa !6
  %37 = bitcast i64* %end to i8*
  call void @llvm.lifetime.start(i64 8, i8* %37) #16
  %38 = load i64, i64* %start, align 8, !tbaa !6
  %39 = load i64, i64* %blocksize, align 8, !tbaa !6
  %add28 = add i64 %38, %39
  store i64 %add28, i64* %end, align 8, !tbaa !6
  %40 = load i64, i64* %end, align 8, !tbaa !6
  %41 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp29 = icmp ugt i64 %40, %41
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %for.body
  %42 = load i64, i64* %insize.addr, align 8, !tbaa !6
  store i64 %42, i64* %end, align 8, !tbaa !6
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %for.body
  %43 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %btype32 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %43, i32 0, i32 0
  %44 = load i32, i32* %btype32, align 8, !tbaa !36
  %cmp33 = icmp eq i32 %44, 1
  br i1 %cmp33, label %if.then34, label %if.else36

if.then34:                                        ; preds = %if.end31
  %45 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %46 = load i64, i64* %start, align 8, !tbaa !6
  %47 = load i64, i64* %end, align 8, !tbaa !6
  %48 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %49 = load i32, i32* %final, align 4, !tbaa !8
  %call35 = call i32 @_ZL12deflateFixedP16LodePNGBitWriterP4HashPKhmmPK23LodePNGCompressSettingsj(%struct.LodePNGBitWriter* %writer, %struct.Hash* %hash, i8* %45, i64 %46, i64 %47, %struct.LodePNGCompressSettings* %48, i32 %49)
  store i32 %call35, i32* %error, align 4, !tbaa !8
  br label %if.end42

if.else36:                                        ; preds = %if.end31
  %50 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %btype37 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %50, i32 0, i32 0
  %51 = load i32, i32* %btype37, align 8, !tbaa !36
  %cmp38 = icmp eq i32 %51, 2
  br i1 %cmp38, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.else36
  %52 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %53 = load i64, i64* %start, align 8, !tbaa !6
  %54 = load i64, i64* %end, align 8, !tbaa !6
  %55 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %56 = load i32, i32* %final, align 4, !tbaa !8
  %call40 = call i32 @_ZL14deflateDynamicP16LodePNGBitWriterP4HashPKhmmPK23LodePNGCompressSettingsj(%struct.LodePNGBitWriter* %writer, %struct.Hash* %hash, i8* %52, i64 %53, i64 %54, %struct.LodePNGCompressSettings* %55, i32 %56)
  store i32 %call40, i32* %error, align 4, !tbaa !8
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %if.else36
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then34
  %57 = bitcast i64* %end to i8*
  call void @llvm.lifetime.end(i64 8, i8* %57) #16
  %58 = bitcast i64* %start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %58) #16
  %59 = bitcast i32* %final to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #16
  br label %for.inc

for.inc:                                          ; preds = %if.end42
  %60 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %60, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end43

if.end43:                                         ; preds = %for.end, %if.end21
  call void @_ZL12hash_cleanupP4Hash(%struct.Hash* %hash)
  %61 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %61, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end43, %if.then3, %if.then
  %62 = bitcast %struct.LodePNGBitWriter* %writer to i8*
  call void @llvm.lifetime.end(i64 16, i8* %62) #16
  %63 = bitcast %struct.Hash* %hash to i8*
  call void @llvm.lifetime.end(i64 48, i8* %63) #16
  %64 = bitcast i64* %numdeflateblocks to i8*
  call void @llvm.lifetime.end(i64 8, i8* %64) #16
  %65 = bitcast i64* %blocksize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %65) #16
  %66 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %66) #16
  %67 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %67) #16
  %68 = load i32, i32* %retval, align 4
  ret i32 %68
}

; Function Attrs: ssp uwtable
define i32 @_Z23lodepng_zlib_decompressPPhPmPKhmPK25LodePNGDecompressSettings(i8** %out, i64* %outsize, i8* %in, i64 %insize, %struct.LodePNGDecompressSettings* %settings) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %v = alloca %struct.ucvector, align 8
  %error = alloca i32, align 4
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #16
  %1 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %1, align 8, !tbaa !2
  %3 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %4 = load i64, i64* %3, align 8, !tbaa !6
  call void @_ZL13ucvector_initPhm(%struct.ucvector* sret %v, i8* %2, i64 %4)
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %8 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* %v, i8* %6, i64 %7, %struct.LodePNGDecompressSettings* %8)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !32
  %10 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %9, i8** %10, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 1
  %11 = load i64, i64* %size, align 8, !tbaa !34
  %12 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %11, i64* %12, align 8, !tbaa !6
  %13 = load i32, i32* %error, align 4, !tbaa !8
  %14 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #16
  %15 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.end(i64 24, i8* %15) #16
  ret i32 %13
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* %out, i8* %in, i64 %insize, %struct.LodePNGDecompressSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %error = alloca i32, align 4
  %CM = alloca i32, align 4
  %CINFO = alloca i32, align 4
  %FDICT = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %ADLER32 = alloca i32, align 4
  %checksum = alloca i32, align 4
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i32* %CM to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i32* %CINFO to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = bitcast i32* %FDICT to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %4, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 53, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

if.end:                                           ; preds = %entry
  %5 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %6 to i32
  %mul = mul nsw i32 %conv, 256
  %7 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx1 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx1, align 1, !tbaa !16
  %conv2 = zext i8 %8 to i32
  %add = add nsw i32 %mul, %conv2
  %rem = srem i32 %add, 31
  %cmp3 = icmp ne i32 %rem, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 24, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

if.end5:                                          ; preds = %if.end
  %9 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx6 = getelementptr inbounds i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1, !tbaa !16
  %conv7 = zext i8 %10 to i32
  %and = and i32 %conv7, 15
  store i32 %and, i32* %CM, align 4, !tbaa !8
  %11 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx8, align 1, !tbaa !16
  %conv9 = zext i8 %12 to i32
  %shr = ashr i32 %conv9, 4
  %and10 = and i32 %shr, 15
  store i32 %and10, i32* %CINFO, align 4, !tbaa !8
  %13 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx11 = getelementptr inbounds i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx11, align 1, !tbaa !16
  %conv12 = zext i8 %14 to i32
  %shr13 = ashr i32 %conv12, 5
  %and14 = and i32 %shr13, 1
  store i32 %and14, i32* %FDICT, align 4, !tbaa !8
  %15 = load i32, i32* %CM, align 4, !tbaa !8
  %cmp15 = icmp ne i32 %15, 8
  br i1 %cmp15, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end5
  %16 = load i32, i32* %CINFO, align 4, !tbaa !8
  %cmp16 = icmp ugt i32 %16, 7
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %lor.lhs.false, %if.end5
  store i32 25, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

if.end18:                                         ; preds = %lor.lhs.false
  %17 = load i32, i32* %FDICT, align 4, !tbaa !8
  %cmp19 = icmp ne i32 %17, 0
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end18
  store i32 26, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

if.end21:                                         ; preds = %if.end18
  %18 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %19 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %19, i64 2
  %20 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %sub = sub i64 %20, 2
  %21 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 @_ZL8inflatevP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* %18, i8* %add.ptr, i64 %sub, %struct.LodePNGDecompressSettings* %21)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %22 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %22, 0
  br i1 %tobool, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end21
  %23 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %23, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

if.end23:                                         ; preds = %if.end21
  %24 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %ignore_adler32 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %24, i32 0, i32 0
  %25 = load i32, i32* %ignore_adler32, align 8, !tbaa !39
  %tobool24 = icmp ne i32 %25, 0
  br i1 %tobool24, label %if.end35, label %if.then25

if.then25:                                        ; preds = %if.end23
  %26 = bitcast i32* %ADLER32 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %26) #16
  %27 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %28 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %sub26 = sub i64 %28, 4
  %arrayidx27 = getelementptr inbounds i8, i8* %27, i64 %sub26
  %call28 = call i32 @_ZL20lodepng_read32bitIntPKh(i8* %arrayidx27)
  store i32 %call28, i32* %ADLER32, align 4, !tbaa !8
  %29 = bitcast i32* %checksum to i8*
  call void @llvm.lifetime.start(i64 4, i8* %29) #16
  %30 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %30, i32 0, i32 0
  %31 = load i8*, i8** %data, align 8, !tbaa !32
  %32 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %32, i32 0, i32 1
  %33 = load i64, i64* %size, align 8, !tbaa !34
  %conv29 = trunc i64 %33 to i32
  %call30 = call i32 @_ZL7adler32PKhj(i8* %31, i32 %conv29)
  store i32 %call30, i32* %checksum, align 4, !tbaa !8
  %34 = load i32, i32* %checksum, align 4, !tbaa !8
  %35 = load i32, i32* %ADLER32, align 4, !tbaa !8
  %cmp31 = icmp ne i32 %34, %35
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.then25
  store i32 58, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end33:                                         ; preds = %if.then25
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end33, %if.then32
  %36 = bitcast i32* %checksum to i8*
  call void @llvm.lifetime.end(i64 4, i8* %36) #16
  %37 = bitcast i32* %ADLER32 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %37) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup36 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end35

if.end35:                                         ; preds = %cleanup.cont, %if.end23
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup36

cleanup36:                                        ; preds = %if.end35, %cleanup, %if.then22, %if.then20, %if.then17, %if.then4, %if.then
  %38 = bitcast i32* %FDICT to i8*
  call void @llvm.lifetime.end(i64 4, i8* %38) #16
  %39 = bitcast i32* %CINFO to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #16
  %40 = bitcast i32* %CM to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #16
  %41 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %41) #16
  %42 = load i32, i32* %retval, align 4
  ret i32 %42
}

; Function Attrs: ssp uwtable
define i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %out, i64* %outsize, i8* %in, i64 %insize, %struct.LodePNGCompressSettings* %settings) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %i = alloca i64, align 8
  %error = alloca i32, align 4
  %deflatedata = alloca i8*, align 8
  %deflatesize = alloca i64, align 8
  %ADLER32 = alloca i32, align 4
  %CMF = alloca i32, align 4
  %FLEVEL = alloca i32, align 4
  %FDICT = alloca i32, align 4
  %CMFFLG = alloca i32, align 4
  %FCHECK = alloca i32, align 4
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i8** %deflatedata to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i8* null, i8** %deflatedata, align 8, !tbaa !2
  %3 = bitcast i64* %deflatesize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  store i64 0, i64* %deflatesize, align 8, !tbaa !6
  %4 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %5 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %6 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 @_ZL7deflatePPhPmPKhmPK23LodePNGCompressSettings(i8** %deflatedata, i64* %deflatesize, i8* %4, i64 %5, %struct.LodePNGCompressSettings* %6)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %7 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* null, i8** %7, align 8, !tbaa !2
  %8 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 0, i64* %8, align 8, !tbaa !6
  %9 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %entry
  %10 = load i64, i64* %deflatesize, align 8, !tbaa !6
  %add = add i64 %10, 6
  %11 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %add, i64* %11, align 8, !tbaa !6
  %12 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %13 = load i64, i64* %12, align 8, !tbaa !6
  %call1 = call i8* @_ZL14lodepng_mallocm(i64 %13)
  %14 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %call1, i8** %14, align 8, !tbaa !2
  %15 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %16 = load i8*, i8** %15, align 8, !tbaa !2
  %tobool2 = icmp ne i8* %16, null
  br i1 %tobool2, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %17 = load i32, i32* %error, align 4, !tbaa !8
  %tobool5 = icmp ne i32 %17, 0
  br i1 %tobool5, label %if.end21, label %if.then6

if.then6:                                         ; preds = %if.end4
  %18 = bitcast i32* %ADLER32 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #16
  %19 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %20 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %conv = trunc i64 %20 to i32
  %call7 = call i32 @_ZL7adler32PKhj(i8* %19, i32 %conv)
  store i32 %call7, i32* %ADLER32, align 4, !tbaa !8
  %21 = bitcast i32* %CMF to i8*
  call void @llvm.lifetime.start(i64 4, i8* %21) #16
  store i32 120, i32* %CMF, align 4, !tbaa !8
  %22 = bitcast i32* %FLEVEL to i8*
  call void @llvm.lifetime.start(i64 4, i8* %22) #16
  store i32 0, i32* %FLEVEL, align 4, !tbaa !8
  %23 = bitcast i32* %FDICT to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #16
  store i32 0, i32* %FDICT, align 4, !tbaa !8
  %24 = bitcast i32* %CMFFLG to i8*
  call void @llvm.lifetime.start(i64 4, i8* %24) #16
  %25 = load i32, i32* %CMF, align 4, !tbaa !8
  %mul = mul i32 256, %25
  %26 = load i32, i32* %FDICT, align 4, !tbaa !8
  %mul8 = mul i32 %26, 32
  %add9 = add i32 %mul, %mul8
  %27 = load i32, i32* %FLEVEL, align 4, !tbaa !8
  %mul10 = mul i32 %27, 64
  %add11 = add i32 %add9, %mul10
  store i32 %add11, i32* %CMFFLG, align 4, !tbaa !8
  %28 = bitcast i32* %FCHECK to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #16
  %29 = load i32, i32* %CMFFLG, align 4, !tbaa !8
  %rem = urem i32 %29, 31
  %sub = sub i32 31, %rem
  store i32 %sub, i32* %FCHECK, align 4, !tbaa !8
  %30 = load i32, i32* %FCHECK, align 4, !tbaa !8
  %31 = load i32, i32* %CMFFLG, align 4, !tbaa !8
  %add12 = add i32 %31, %30
  store i32 %add12, i32* %CMFFLG, align 4, !tbaa !8
  %32 = load i32, i32* %CMFFLG, align 4, !tbaa !8
  %shr = lshr i32 %32, 8
  %conv13 = trunc i32 %shr to i8
  %33 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %34 = load i8*, i8** %33, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %34, i64 0
  store i8 %conv13, i8* %arrayidx, align 1, !tbaa !16
  %35 = load i32, i32* %CMFFLG, align 4, !tbaa !8
  %and = and i32 %35, 255
  %conv14 = trunc i32 %and to i8
  %36 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %37 = load i8*, i8** %36, align 8, !tbaa !2
  %arrayidx15 = getelementptr inbounds i8, i8* %37, i64 1
  store i8 %conv14, i8* %arrayidx15, align 1, !tbaa !16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then6
  %38 = load i64, i64* %i, align 8, !tbaa !6
  %39 = load i64, i64* %deflatesize, align 8, !tbaa !6
  %cmp = icmp ne i64 %38, %39
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load i8*, i8** %deflatedata, align 8, !tbaa !2
  %41 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx16 = getelementptr inbounds i8, i8* %40, i64 %41
  %42 = load i8, i8* %arrayidx16, align 1, !tbaa !16
  %43 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %44 = load i8*, i8** %43, align 8, !tbaa !2
  %45 = load i64, i64* %i, align 8, !tbaa !6
  %add17 = add i64 %45, 2
  %arrayidx18 = getelementptr inbounds i8, i8* %44, i64 %add17
  store i8 %42, i8* %arrayidx18, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %46 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %46, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %47 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %48 = load i8*, i8** %47, align 8, !tbaa !2
  %49 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %50 = load i64, i64* %49, align 8, !tbaa !6
  %sub19 = sub i64 %50, 4
  %arrayidx20 = getelementptr inbounds i8, i8* %48, i64 %sub19
  %51 = load i32, i32* %ADLER32, align 4, !tbaa !8
  call void @_ZL19lodepng_set32bitIntPhj(i8* %arrayidx20, i32 %51)
  %52 = bitcast i32* %FCHECK to i8*
  call void @llvm.lifetime.end(i64 4, i8* %52) #16
  %53 = bitcast i32* %CMFFLG to i8*
  call void @llvm.lifetime.end(i64 4, i8* %53) #16
  %54 = bitcast i32* %FDICT to i8*
  call void @llvm.lifetime.end(i64 4, i8* %54) #16
  %55 = bitcast i32* %FLEVEL to i8*
  call void @llvm.lifetime.end(i64 4, i8* %55) #16
  %56 = bitcast i32* %CMF to i8*
  call void @llvm.lifetime.end(i64 4, i8* %56) #16
  %57 = bitcast i32* %ADLER32 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %57) #16
  br label %if.end21

if.end21:                                         ; preds = %for.end, %if.end4
  %58 = load i8*, i8** %deflatedata, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %58)
  %59 = load i32, i32* %error, align 4, !tbaa !8
  %60 = bitcast i64* %deflatesize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %60) #16
  %61 = bitcast i8** %deflatedata to i8*
  call void @llvm.lifetime.end(i64 8, i8* %61) #16
  %62 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %62) #16
  %63 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #16
  ret i32 %59
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL7deflatePPhPmPKhmPK23LodePNGCompressSettings(i8** %out, i64* %outsize, i8* %in, i64 %insize, %struct.LodePNGCompressSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_deflate = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %0, i32 0, i32 7
  %custom_deflate1 = bitcast {}** %custom_deflate to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %1 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %custom_deflate1, align 8, !tbaa !41
  %tobool = icmp ne i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_deflate2 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %2, i32 0, i32 7
  %custom_deflate3 = bitcast {}** %custom_deflate2 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %3 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %custom_deflate3, align 8, !tbaa !41
  %4 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %5 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %6 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %8 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 %3(i8** %4, i64* %5, i8* %6, i64 %7, %struct.LodePNGCompressSettings* %8)
  store i32 %call, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %9 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %10 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %11 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %12 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %13 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %call4 = call i32 @_Z15lodepng_deflatePPhPmPKhmPK23LodePNGCompressSettings(i8** %9, i64* %10, i8* %11, i64 %12, %struct.LodePNGCompressSettings* %13)
  store i32 %call4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL7adler32PKhj(i8* %data, i32 %len) #0 {
entry:
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i32 %len, i32* %len.addr, align 4, !tbaa !8
  %0 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %1 = load i32, i32* %len.addr, align 4, !tbaa !8
  %call = call i32 @_ZL14update_adler32jPKhj(i32 1, i8* %0, i32 %1)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19lodepng_set32bitIntPhj(i8* %buffer, i32 %value) #4 {
entry:
  %buffer.addr = alloca i8*, align 8
  %value.addr = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !2
  store i32 %value, i32* %value.addr, align 4, !tbaa !8
  %0 = load i32, i32* %value.addr, align 4, !tbaa !8
  %shr = lshr i32 %0, 24
  %and = and i32 %shr, 255
  %conv = trunc i32 %and to i8
  %1 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !16
  %2 = load i32, i32* %value.addr, align 4, !tbaa !8
  %shr1 = lshr i32 %2, 16
  %and2 = and i32 %shr1, 255
  %conv3 = trunc i32 %and2 to i8
  %3 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %conv3, i8* %arrayidx4, align 1, !tbaa !16
  %4 = load i32, i32* %value.addr, align 4, !tbaa !8
  %shr5 = lshr i32 %4, 8
  %and6 = and i32 %shr5, 255
  %conv7 = trunc i32 %and6 to i8
  %5 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx8 = getelementptr inbounds i8, i8* %5, i64 2
  store i8 %conv7, i8* %arrayidx8, align 1, !tbaa !16
  %6 = load i32, i32* %value.addr, align 4, !tbaa !8
  %and9 = and i32 %6, 255
  %conv10 = trunc i32 %and9 to i8
  %7 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx11 = getelementptr inbounds i8, i8* %7, i64 3
  store i8 %conv10, i8* %arrayidx11, align 1, !tbaa !16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @_Z30lodepng_compress_settings_initP23LodePNGCompressSettings(%struct.LodePNGCompressSettings* %settings) #4 {
entry:
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %btype = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %0, i32 0, i32 0
  store i32 2, i32* %btype, align 8, !tbaa !36
  %1 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %use_lz77 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %1, i32 0, i32 1
  store i32 1, i32* %use_lz77, align 4, !tbaa !42
  %2 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %windowsize = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %2, i32 0, i32 2
  store i32 2048, i32* %windowsize, align 8, !tbaa !38
  %3 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %minmatch = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %3, i32 0, i32 3
  store i32 3, i32* %minmatch, align 4, !tbaa !43
  %4 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %nicematch = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %4, i32 0, i32 4
  store i32 128, i32* %nicematch, align 8, !tbaa !44
  %5 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %lazymatching = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %5, i32 0, i32 5
  store i32 1, i32* %lazymatching, align 4, !tbaa !45
  %6 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_zlib = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %6, i32 0, i32 6
  %custom_zlib1 = bitcast {}** %custom_zlib to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  store i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* null, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %custom_zlib1, align 8, !tbaa !46
  %7 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_deflate = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %7, i32 0, i32 7
  %custom_deflate2 = bitcast {}** %custom_deflate to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  store i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* null, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %custom_deflate2, align 8, !tbaa !41
  %8 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_context = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %8, i32 0, i32 8
  store i8* null, i8** %custom_context, align 8, !tbaa !47
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @_Z32lodepng_decompress_settings_initP25LodePNGDecompressSettings(%struct.LodePNGDecompressSettings* %settings) #4 {
entry:
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %ignore_adler32 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %0, i32 0, i32 0
  store i32 0, i32* %ignore_adler32, align 8, !tbaa !39
  %1 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %ignore_nlen = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %1, i32 0, i32 1
  store i32 0, i32* %ignore_nlen, align 4, !tbaa !48
  %2 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_zlib = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %2, i32 0, i32 2
  %custom_zlib1 = bitcast {}** %custom_zlib to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  store i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* null, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %custom_zlib1, align 8, !tbaa !49
  %3 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_inflate = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i32 0, i32 3
  %custom_inflate2 = bitcast {}** %custom_inflate to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  store i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* null, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %custom_inflate2, align 8, !tbaa !50
  %4 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_context = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %4, i32 0, i32 4
  store i8* null, i8** %custom_context, align 8, !tbaa !51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @_Z13lodepng_crc32PKhm(i8* %data, i64 %length) #4 {
entry:
  %data.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %r = alloca i32, align 4
  %i = alloca i64, align 8
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %length, i64* %length.addr, align 8, !tbaa !6
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 -1, i32* %r, align 4, !tbaa !8
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8, !tbaa !6
  %3 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %r, align 4, !tbaa !8
  %5 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %6
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %7 to i32
  %xor = xor i32 %4, %conv
  %and = and i32 %xor, 255
  %idxprom = zext i32 %and to i64
  %arrayidx1 = getelementptr inbounds [256 x i32], [256 x i32]* @_ZL19lodepng_crc32_table, i64 0, i64 %idxprom
  %8 = load i32, i32* %arrayidx1, align 4, !tbaa !8
  %9 = load i32, i32* %r, align 4, !tbaa !8
  %shr = lshr i32 %9, 8
  %xor2 = xor i32 %8, %shr
  store i32 %xor2, i32* %r, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %10, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %r, align 4, !tbaa !8
  %xor3 = xor i32 %11, -1
  %12 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #16
  %13 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #16
  ret i32 %xor3
}

; Function Attrs: ssp uwtable
define i32 @_Z20lodepng_chunk_lengthPKh(i8* %chunk) #0 {
entry:
  %chunk.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0
  %call = call i32 @_ZL20lodepng_read32bitIntPKh(i8* %arrayidx)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL20lodepng_read32bitIntPKh(i8* %buffer) #4 {
entry:
  %buffer.addr = alloca i8*, align 8
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 24
  %2 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx1, align 1, !tbaa !16
  %conv2 = zext i8 %3 to i32
  %shl3 = shl i32 %conv2, 16
  %or = or i32 %shl, %shl3
  %4 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %4, i64 2
  %5 = load i8, i8* %arrayidx4, align 1, !tbaa !16
  %conv5 = zext i8 %5 to i32
  %shl6 = shl i32 %conv5, 8
  %or7 = or i32 %or, %shl6
  %6 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx8 = getelementptr inbounds i8, i8* %6, i64 3
  %7 = load i8, i8* %arrayidx8, align 1, !tbaa !16
  %conv9 = zext i8 %7 to i32
  %or10 = or i32 %or7, %conv9
  ret i32 %or10
}

; Function Attrs: nounwind ssp uwtable
define void @_Z18lodepng_chunk_typePcPKh(i8* %type, i8* %chunk) #4 {
entry:
  %type.addr = alloca i8*, align 8
  %chunk.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %type, i8** %type.addr, align 8, !tbaa !2
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ne i32 %1, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %3 = load i32, i32* %i, align 4, !tbaa !8
  %add = add i32 4, %3
  %idxprom = zext i32 %add to i64
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %5 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %6 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom1 = zext i32 %6 to i64
  %arrayidx2 = getelementptr inbounds i8, i8* %5, i64 %idxprom1
  store i8 %4, i8* %arrayidx2, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %arrayidx3 = getelementptr inbounds i8, i8* %8, i64 4
  store i8 0, i8* %arrayidx3, align 1, !tbaa !16
  %9 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %9) #16
  ret void
}

; Function Attrs: ssp uwtable
define zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %chunk, i8* %type) #0 {
entry:
  %retval = alloca i8, align 1
  %chunk.addr = alloca i8*, align 8
  %type.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  store i8* %type, i8** %type.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %call = call i64 @_ZL14lodepng_strlenPKc(i8* %0)
  %cmp = icmp ne i64 %call, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 4
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %2 to i32
  %3 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %arrayidx1 = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx1, align 1, !tbaa !16
  %conv2 = sext i8 %4 to i32
  %cmp3 = icmp eq i32 %conv, %conv2
  br i1 %cmp3, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %5 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %5, i64 5
  %6 = load i8, i8* %arrayidx4, align 1, !tbaa !16
  %conv5 = zext i8 %6 to i32
  %7 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %arrayidx6 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx6, align 1, !tbaa !16
  %conv7 = sext i8 %8 to i32
  %cmp8 = icmp eq i32 %conv5, %conv7
  br i1 %cmp8, label %land.lhs.true9, label %land.end

land.lhs.true9:                                   ; preds = %land.lhs.true
  %9 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx10 = getelementptr inbounds i8, i8* %9, i64 6
  %10 = load i8, i8* %arrayidx10, align 1, !tbaa !16
  %conv11 = zext i8 %10 to i32
  %11 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %arrayidx12 = getelementptr inbounds i8, i8* %11, i64 2
  %12 = load i8, i8* %arrayidx12, align 1, !tbaa !16
  %conv13 = sext i8 %12 to i32
  %cmp14 = icmp eq i32 %conv11, %conv13
  br i1 %cmp14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true9
  %13 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i64 7
  %14 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %14 to i32
  %15 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %arrayidx17 = getelementptr inbounds i8, i8* %15, i64 3
  %16 = load i8, i8* %arrayidx17, align 1, !tbaa !16
  %conv18 = sext i8 %16 to i32
  %cmp19 = icmp eq i32 %conv16, %conv18
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true9, %land.lhs.true, %if.end
  %17 = phi i1 [ false, %land.lhs.true9 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp19, %land.rhs ]
  %conv20 = zext i1 %17 to i8
  store i8 %conv20, i8* %retval, align 1
  br label %return

return:                                           ; preds = %land.end, %if.then
  %18 = load i8, i8* %retval, align 1
  ret i8 %18
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZL14lodepng_strlenPKc(i8* %a) #4 {
entry:
  %a.addr = alloca i8*, align 8
  %orig = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8, !tbaa !2
  %0 = bitcast i8** %orig to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8* %1, i8** %orig, align 8, !tbaa !2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %a.addr, align 8, !tbaa !2
  %3 = load i8, i8* %2, align 1, !tbaa !16
  %tobool = icmp ne i8 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load i8*, i8** %a.addr, align 8, !tbaa !2
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %a.addr, align 8, !tbaa !2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %5 = load i8*, i8** %a.addr, align 8, !tbaa !2
  %6 = load i8*, i8** %orig, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %7 = bitcast i8** %orig to i8*
  call void @llvm.lifetime.end(i64 8, i8* %7) #16
  ret i64 %sub.ptr.sub
}

; Function Attrs: nounwind ssp uwtable
define zeroext i8 @_Z23lodepng_chunk_ancillaryPKh(i8* %chunk) #4 {
entry:
  %chunk.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 4
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 32
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}

; Function Attrs: nounwind ssp uwtable
define zeroext i8 @_Z21lodepng_chunk_privatePKh(i8* %chunk) #4 {
entry:
  %chunk.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 6
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 32
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}

; Function Attrs: nounwind ssp uwtable
define zeroext i8 @_Z24lodepng_chunk_safetocopyPKh(i8* %chunk) #4 {
entry:
  %chunk.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 7
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 32
  %cmp = icmp ne i32 %and, 0
  %conv1 = zext i1 %cmp to i8
  ret i8 %conv1
}

; Function Attrs: nounwind ssp uwtable
define i8* @_Z18lodepng_chunk_dataPh(i8* %chunk) #4 {
entry:
  %chunk.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 8
  ret i8* %arrayidx
}

; Function Attrs: nounwind ssp uwtable
define i8* @_Z24lodepng_chunk_data_constPKh(i8* %chunk) #4 {
entry:
  %chunk.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 8
  ret i8* %arrayidx
}

; Function Attrs: ssp uwtable
define i32 @_Z23lodepng_chunk_check_crcPKh(i8* %chunk) #0 {
entry:
  %retval = alloca i32, align 4
  %chunk.addr = alloca i8*, align 8
  %length = alloca i32, align 4
  %CRC = alloca i32, align 4
  %checksum = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = bitcast i32* %length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %call = call i32 @_Z20lodepng_chunk_lengthPKh(i8* %1)
  store i32 %call, i32* %length, align 4, !tbaa !8
  %2 = bitcast i32* %CRC to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %4 = load i32, i32* %length, align 4, !tbaa !8
  %add = add i32 %4, 8
  %idxprom = zext i32 %add to i64
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %idxprom
  %call1 = call i32 @_ZL20lodepng_read32bitIntPKh(i8* %arrayidx)
  store i32 %call1, i32* %CRC, align 4, !tbaa !8
  %5 = bitcast i32* %checksum to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 4
  %7 = load i32, i32* %length, align 4, !tbaa !8
  %add3 = add i32 %7, 4
  %conv = zext i32 %add3 to i64
  %call4 = call i32 @_Z13lodepng_crc32PKhm(i8* %arrayidx2, i64 %conv)
  store i32 %call4, i32* %checksum, align 4, !tbaa !8
  %8 = load i32, i32* %CRC, align 4, !tbaa !8
  %9 = load i32, i32* %checksum, align 4, !tbaa !8
  %cmp = icmp ne i32 %8, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %10 = bitcast i32* %checksum to i8*
  call void @llvm.lifetime.end(i64 4, i8* %10) #16
  %11 = bitcast i32* %CRC to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #16
  %12 = bitcast i32* %length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %12) #16
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: ssp uwtable
define void @_Z26lodepng_chunk_generate_crcPh(i8* %chunk) #0 {
entry:
  %chunk.addr = alloca i8*, align 8
  %length = alloca i32, align 4
  %CRC = alloca i32, align 4
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = bitcast i32* %length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %call = call i32 @_Z20lodepng_chunk_lengthPKh(i8* %1)
  store i32 %call, i32* %length, align 4, !tbaa !8
  %2 = bitcast i32* %CRC to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 4
  %4 = load i32, i32* %length, align 4, !tbaa !8
  %add = add i32 %4, 4
  %conv = zext i32 %add to i64
  %call1 = call i32 @_Z13lodepng_crc32PKhm(i8* %arrayidx, i64 %conv)
  store i32 %call1, i32* %CRC, align 4, !tbaa !8
  %5 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 8
  %6 = load i32, i32* %length, align 4, !tbaa !8
  %idx.ext = zext i32 %6 to i64
  %add.ptr2 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.ext
  %7 = load i32, i32* %CRC, align 4, !tbaa !8
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr2, i32 %7)
  %8 = bitcast i32* %CRC to i8*
  call void @llvm.lifetime.end(i64 4, i8* %8) #16
  %9 = bitcast i32* %length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %9) #16
  ret void
}

; Function Attrs: ssp uwtable
define i8* @_Z18lodepng_chunk_nextPhS_(i8* %chunk, i8* %end) #0 {
entry:
  %retval = alloca i8*, align 8
  %chunk.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %total_chunk_length = alloca i64, align 8
  %result = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  store i8* %end, i8** %end.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %cmp = icmp uge i8* %0, %1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp1 = icmp slt i64 %sub.ptr.sub, 12
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8*, i8** %end.addr, align 8, !tbaa !2
  store i8* %4, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %6 to i32
  %cmp2 = icmp eq i32 %conv, 137
  br i1 %cmp2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %7 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx3, align 1, !tbaa !16
  %conv4 = zext i8 %8 to i32
  %cmp5 = icmp eq i32 %conv4, 80
  br i1 %cmp5, label %land.lhs.true6, label %if.else

land.lhs.true6:                                   ; preds = %land.lhs.true
  %9 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i64 2
  %10 = load i8, i8* %arrayidx7, align 1, !tbaa !16
  %conv8 = zext i8 %10 to i32
  %cmp9 = icmp eq i32 %conv8, 78
  br i1 %cmp9, label %land.lhs.true10, label %if.else

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %11 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 3
  %12 = load i8, i8* %arrayidx11, align 1, !tbaa !16
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv12, 71
  br i1 %cmp13, label %land.lhs.true14, label %if.else

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %13 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i64 4
  %14 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %14 to i32
  %cmp17 = icmp eq i32 %conv16, 13
  br i1 %cmp17, label %land.lhs.true18, label %if.else

land.lhs.true18:                                  ; preds = %land.lhs.true14
  %15 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx19 = getelementptr inbounds i8, i8* %15, i64 5
  %16 = load i8, i8* %arrayidx19, align 1, !tbaa !16
  %conv20 = zext i8 %16 to i32
  %cmp21 = icmp eq i32 %conv20, 10
  br i1 %cmp21, label %land.lhs.true22, label %if.else

land.lhs.true22:                                  ; preds = %land.lhs.true18
  %17 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx23 = getelementptr inbounds i8, i8* %17, i64 6
  %18 = load i8, i8* %arrayidx23, align 1, !tbaa !16
  %conv24 = zext i8 %18 to i32
  %cmp25 = icmp eq i32 %conv24, 26
  br i1 %cmp25, label %land.lhs.true26, label %if.else

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %19 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx27 = getelementptr inbounds i8, i8* %19, i64 7
  %20 = load i8, i8* %arrayidx27, align 1, !tbaa !16
  %conv28 = zext i8 %20 to i32
  %cmp29 = icmp eq i32 %conv28, 10
  br i1 %cmp29, label %if.then30, label %if.else

if.then30:                                        ; preds = %land.lhs.true26
  %21 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 8
  store i8* %add.ptr, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %land.lhs.true26, %land.lhs.true22, %land.lhs.true18, %land.lhs.true14, %land.lhs.true10, %land.lhs.true6, %land.lhs.true, %if.end
  %22 = bitcast i64* %total_chunk_length to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #16
  %23 = bitcast i8** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #16
  %24 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %call = call i32 @_Z20lodepng_chunk_lengthPKh(i8* %24)
  %conv31 = zext i32 %call to i64
  %call32 = call i32 @_ZL14lodepng_addoflmmPm(i64 %conv31, i64 12, i64* %total_chunk_length)
  %tobool = icmp ne i32 %call32, 0
  br i1 %tobool, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.else
  %25 = load i8*, i8** %end.addr, align 8, !tbaa !2
  store i8* %25, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end34:                                         ; preds = %if.else
  %26 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %27 = load i64, i64* %total_chunk_length, align 8, !tbaa !6
  %add.ptr35 = getelementptr inbounds i8, i8* %26, i64 %27
  store i8* %add.ptr35, i8** %result, align 8, !tbaa !2
  %28 = load i8*, i8** %result, align 8, !tbaa !2
  %29 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %cmp36 = icmp ult i8* %28, %29
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end34
  %30 = load i8*, i8** %end.addr, align 8, !tbaa !2
  store i8* %30, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end38:                                         ; preds = %if.end34
  %31 = load i8*, i8** %result, align 8, !tbaa !2
  store i8* %31, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end38, %if.then37, %if.then33
  %32 = bitcast i8** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #16
  %33 = bitcast i64* %total_chunk_length to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #16
  br label %return

return:                                           ; preds = %cleanup, %if.then30, %if.then
  %34 = load i8*, i8** %retval, align 8
  ret i8* %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14lodepng_addoflmmPm(i64 %a, i64 %b, i64* %result) #4 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %result.addr = alloca i64*, align 8
  store i64 %a, i64* %a.addr, align 8, !tbaa !6
  store i64 %b, i64* %b.addr, align 8, !tbaa !6
  store i64* %result, i64** %result.addr, align 8, !tbaa !2
  %0 = load i64, i64* %a.addr, align 8, !tbaa !6
  %1 = load i64, i64* %b.addr, align 8, !tbaa !6
  %add = add i64 %0, %1
  %2 = load i64*, i64** %result.addr, align 8, !tbaa !2
  store i64 %add, i64* %2, align 8, !tbaa !6
  %3 = load i64*, i64** %result.addr, align 8, !tbaa !2
  %4 = load i64, i64* %3, align 8, !tbaa !6
  %5 = load i64, i64* %a.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %4, %5
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: ssp uwtable
define i8* @_Z24lodepng_chunk_next_constPKhS0_(i8* %chunk, i8* %end) #0 {
entry:
  %retval = alloca i8*, align 8
  %chunk.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %total_chunk_length = alloca i64, align 8
  %result = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  store i8* %end, i8** %end.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %cmp = icmp uge i8* %0, %1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp1 = icmp slt i64 %sub.ptr.sub, 12
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i8*, i8** %end.addr, align 8, !tbaa !2
  store i8* %4, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %6 to i32
  %cmp2 = icmp eq i32 %conv, 137
  br i1 %cmp2, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %7 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx3, align 1, !tbaa !16
  %conv4 = zext i8 %8 to i32
  %cmp5 = icmp eq i32 %conv4, 80
  br i1 %cmp5, label %land.lhs.true6, label %if.else

land.lhs.true6:                                   ; preds = %land.lhs.true
  %9 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx7 = getelementptr inbounds i8, i8* %9, i64 2
  %10 = load i8, i8* %arrayidx7, align 1, !tbaa !16
  %conv8 = zext i8 %10 to i32
  %cmp9 = icmp eq i32 %conv8, 78
  br i1 %cmp9, label %land.lhs.true10, label %if.else

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %11 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 3
  %12 = load i8, i8* %arrayidx11, align 1, !tbaa !16
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp eq i32 %conv12, 71
  br i1 %cmp13, label %land.lhs.true14, label %if.else

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %13 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx15 = getelementptr inbounds i8, i8* %13, i64 4
  %14 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %14 to i32
  %cmp17 = icmp eq i32 %conv16, 13
  br i1 %cmp17, label %land.lhs.true18, label %if.else

land.lhs.true18:                                  ; preds = %land.lhs.true14
  %15 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx19 = getelementptr inbounds i8, i8* %15, i64 5
  %16 = load i8, i8* %arrayidx19, align 1, !tbaa !16
  %conv20 = zext i8 %16 to i32
  %cmp21 = icmp eq i32 %conv20, 10
  br i1 %cmp21, label %land.lhs.true22, label %if.else

land.lhs.true22:                                  ; preds = %land.lhs.true18
  %17 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx23 = getelementptr inbounds i8, i8* %17, i64 6
  %18 = load i8, i8* %arrayidx23, align 1, !tbaa !16
  %conv24 = zext i8 %18 to i32
  %cmp25 = icmp eq i32 %conv24, 26
  br i1 %cmp25, label %land.lhs.true26, label %if.else

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %19 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %arrayidx27 = getelementptr inbounds i8, i8* %19, i64 7
  %20 = load i8, i8* %arrayidx27, align 1, !tbaa !16
  %conv28 = zext i8 %20 to i32
  %cmp29 = icmp eq i32 %conv28, 10
  br i1 %cmp29, label %if.then30, label %if.else

if.then30:                                        ; preds = %land.lhs.true26
  %21 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 8
  store i8* %add.ptr, i8** %retval, align 8
  br label %return

if.else:                                          ; preds = %land.lhs.true26, %land.lhs.true22, %land.lhs.true18, %land.lhs.true14, %land.lhs.true10, %land.lhs.true6, %land.lhs.true, %if.end
  %22 = bitcast i64* %total_chunk_length to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #16
  %23 = bitcast i8** %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #16
  %24 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %call = call i32 @_Z20lodepng_chunk_lengthPKh(i8* %24)
  %conv31 = zext i32 %call to i64
  %call32 = call i32 @_ZL14lodepng_addoflmmPm(i64 %conv31, i64 12, i64* %total_chunk_length)
  %tobool = icmp ne i32 %call32, 0
  br i1 %tobool, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.else
  %25 = load i8*, i8** %end.addr, align 8, !tbaa !2
  store i8* %25, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end34:                                         ; preds = %if.else
  %26 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %27 = load i64, i64* %total_chunk_length, align 8, !tbaa !6
  %add.ptr35 = getelementptr inbounds i8, i8* %26, i64 %27
  store i8* %add.ptr35, i8** %result, align 8, !tbaa !2
  %28 = load i8*, i8** %result, align 8, !tbaa !2
  %29 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %cmp36 = icmp ult i8* %28, %29
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end34
  %30 = load i8*, i8** %end.addr, align 8, !tbaa !2
  store i8* %30, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end38:                                         ; preds = %if.end34
  %31 = load i8*, i8** %result, align 8, !tbaa !2
  store i8* %31, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end38, %if.then37, %if.then33
  %32 = bitcast i8** %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #16
  %33 = bitcast i64* %total_chunk_length to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #16
  br label %return

return:                                           ; preds = %cleanup, %if.then30, %if.then
  %34 = load i8*, i8** %retval, align 8
  ret i8* %34
}

; Function Attrs: ssp uwtable
define i8* @_Z18lodepng_chunk_findPhS_PKc(i8* %chunk, i8* %end, i8* %type) #0 {
entry:
  %retval = alloca i8*, align 8
  %chunk.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %type.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  store i8* %end, i8** %end.addr, align 8, !tbaa !2
  store i8* %type, i8** %type.addr, align 8, !tbaa !2
  br label %for.cond

for.cond:                                         ; preds = %if.end3, %entry
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %cmp = icmp uge i8* %0, %1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond
  %2 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp1 = icmp slt i64 %sub.ptr.sub, 12
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %5 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %call = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %4, i8* %5)
  %tobool = icmp ne i8 %call, 0
  br i1 %tobool, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %6 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  store i8* %6, i8** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %7 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %8 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %call4 = call i8* @_Z18lodepng_chunk_nextPhS_(i8* %7, i8* %8)
  store i8* %call4, i8** %chunk.addr, align 8, !tbaa !2
  br label %for.cond

return:                                           ; preds = %if.then2, %if.then
  %9 = load i8*, i8** %retval, align 8
  ret i8* %9
}

; Function Attrs: ssp uwtable
define i8* @_Z24lodepng_chunk_find_constPKhS0_PKc(i8* %chunk, i8* %end, i8* %type) #0 {
entry:
  %retval = alloca i8*, align 8
  %chunk.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %type.addr = alloca i8*, align 8
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  store i8* %end, i8** %end.addr, align 8, !tbaa !2
  store i8* %type, i8** %type.addr, align 8, !tbaa !2
  br label %for.cond

for.cond:                                         ; preds = %if.end3, %entry
  %0 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %cmp = icmp uge i8* %0, %1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.cond
  %2 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp1 = icmp slt i64 %sub.ptr.sub, 12
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %5 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %call = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %4, i8* %5)
  %tobool = icmp ne i8 %call, 0
  br i1 %tobool, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %6 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  store i8* %6, i8** %retval, align 8
  br label %return

if.end3:                                          ; preds = %if.end
  %7 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %8 = load i8*, i8** %end.addr, align 8, !tbaa !2
  %call4 = call i8* @_Z24lodepng_chunk_next_constPKhS0_(i8* %7, i8* %8)
  store i8* %call4, i8** %chunk.addr, align 8, !tbaa !2
  br label %for.cond

return:                                           ; preds = %if.then2, %if.then
  %9 = load i8*, i8** %retval, align 8
  ret i8* %9
}

; Function Attrs: ssp uwtable
define i32 @_Z20lodepng_chunk_appendPPhPmPKh(i8** %out, i64* %outsize, i8* %chunk) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %chunk.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %total_chunk_length = alloca i64, align 8
  %new_length = alloca i64, align 8
  %chunk_start = alloca i8*, align 8
  %new_buffer = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %chunk, i8** %chunk.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast i64* %total_chunk_length to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i64* %new_length to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = bitcast i8** %chunk_start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = bitcast i8** %new_buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %call = call i32 @_Z20lodepng_chunk_lengthPKh(i8* %5)
  %conv = zext i32 %call to i64
  %call1 = call i32 @_ZL14lodepng_addoflmmPm(i64 %conv, i64 12, i64* %total_chunk_length)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 77, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %7 = load i64, i64* %6, align 8, !tbaa !6
  %8 = load i64, i64* %total_chunk_length, align 8, !tbaa !6
  %call2 = call i32 @_ZL14lodepng_addoflmmPm(i64 %7, i64 %8, i64* %new_length)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 77, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %9 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %10 = load i8*, i8** %9, align 8, !tbaa !2
  %11 = load i64, i64* %new_length, align 8, !tbaa !6
  %call6 = call i8* @_ZL15lodepng_reallocPvm(i8* %10, i64 %11)
  store i8* %call6, i8** %new_buffer, align 8, !tbaa !2
  %12 = load i8*, i8** %new_buffer, align 8, !tbaa !2
  %tobool7 = icmp ne i8* %12, null
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end5
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.end5
  %13 = load i8*, i8** %new_buffer, align 8, !tbaa !2
  %14 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %13, i8** %14, align 8, !tbaa !2
  %15 = load i64, i64* %new_length, align 8, !tbaa !6
  %16 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %15, i64* %16, align 8, !tbaa !6
  %17 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %18 = load i8*, i8** %17, align 8, !tbaa !2
  %19 = load i64, i64* %new_length, align 8, !tbaa !6
  %20 = load i64, i64* %total_chunk_length, align 8, !tbaa !6
  %sub = sub i64 %19, %20
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 %sub
  store i8* %arrayidx, i8** %chunk_start, align 8, !tbaa !2
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end9
  %21 = load i32, i32* %i, align 4, !tbaa !8
  %conv10 = zext i32 %21 to i64
  %22 = load i64, i64* %total_chunk_length, align 8, !tbaa !6
  %cmp = icmp ne i64 %conv10, %22
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i8*, i8** %chunk.addr, align 8, !tbaa !2
  %24 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %24 to i64
  %arrayidx11 = getelementptr inbounds i8, i8* %23, i64 %idxprom
  %25 = load i8, i8* %arrayidx11, align 1, !tbaa !16
  %26 = load i8*, i8** %chunk_start, align 8, !tbaa !2
  %27 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom12 = zext i32 %27 to i64
  %arrayidx13 = getelementptr inbounds i8, i8* %26, i64 %idxprom12
  store i8 %25, i8* %arrayidx13, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %28 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %28, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then8, %if.then4, %if.then
  %29 = bitcast i8** %new_buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #16
  %30 = bitcast i8** %chunk_start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %30) #16
  %31 = bitcast i64* %new_length to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #16
  %32 = bitcast i64* %total_chunk_length to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #16
  %33 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %33) #16
  %34 = load i32, i32* %retval, align 4
  ret i32 %34
}

; Function Attrs: ssp uwtable
define internal i8* @_ZL15lodepng_reallocPvm(i8* %ptr, i64 %new_size) #0 {
entry:
  %ptr.addr = alloca i8*, align 8
  %new_size.addr = alloca i64, align 8
  store i8* %ptr, i8** %ptr.addr, align 8, !tbaa !2
  store i64 %new_size, i64* %new_size.addr, align 8, !tbaa !6
  %0 = load i8*, i8** %ptr.addr, align 8, !tbaa !2
  %1 = load i64, i64* %new_size.addr, align 8, !tbaa !6
  %call = call i8* @realloc(i8* %0, i64 %1) #18
  ret i8* %call
}

; Function Attrs: ssp uwtable
define i32 @_Z20lodepng_chunk_createPPhPmjPKcPKh(i8** %out, i64* %outsize, i32 %length, i8* %type, i8* %data) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %length.addr = alloca i32, align 4
  %type.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %v = alloca %struct.ucvector, align 8
  %error = alloca i32, align 4
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i32 %length, i32* %length.addr, align 4, !tbaa !8
  store i8* %type, i8** %type.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  %0 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #16
  %1 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %1, align 8, !tbaa !2
  %3 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %4 = load i64, i64* %3, align 8, !tbaa !6
  call void @_ZL13ucvector_initPhm(%struct.ucvector* sret %v, i8* %2, i64 %4)
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = load i32, i32* %length.addr, align 4, !tbaa !8
  %7 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %call = call i32 @_ZL21lodepng_chunk_createvP8ucvectorjPKcPKh(%struct.ucvector* %v, i32 %6, i8* %7, i8* %8)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %data1 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 0
  %9 = load i8*, i8** %data1, align 8, !tbaa !32
  %10 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %9, i8** %10, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 1
  %11 = load i64, i64* %size, align 8, !tbaa !34
  %12 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %11, i64* %12, align 8, !tbaa !6
  %13 = load i32, i32* %error, align 4, !tbaa !8
  %14 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #16
  %15 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.end(i64 24, i8* %15) #16
  ret i32 %13
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL21lodepng_chunk_createvP8ucvectorjPKcPKh(%struct.ucvector* %out, i32 %length, i8* %type, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %length.addr = alloca i32, align 4
  %type.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %chunk = alloca i8*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i32 %length, i32* %length.addr, align 4, !tbaa !8
  store i8* %type, i8** %type.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %3 = load i32, i32* %length.addr, align 4, !tbaa !8
  %4 = load i8*, i8** %type.addr, align 8, !tbaa !2
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %2, i32 %3, i8* %4)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %5 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %6, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %7 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %7) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup1 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %8 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 8
  %9 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %10 = load i32, i32* %length.addr, align 4, !tbaa !8
  %conv = zext i32 %10 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr, i8* %9, i64 %conv)
  %11 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %11)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup1

cleanup1:                                         ; preds = %cleanup.cont, %cleanup
  %12 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #16
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: nounwind ssp uwtable
define void @_Z23lodepng_color_mode_initP16LodePNGColorMode(%struct.LodePNGColorMode* %info) #4 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 4
  store i32 0, i32* %key_defined, align 8, !tbaa !52
  %1 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i32 0, i32 7
  store i32 0, i32* %key_b, align 4, !tbaa !55
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 6
  store i32 0, i32* %key_g, align 8, !tbaa !56
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i32 0, i32 5
  store i32 0, i32* %key_r, align 4, !tbaa !57
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 0
  store i32 6, i32* %colortype, align 8, !tbaa !58
  %5 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %5, i32 0, i32 1
  store i32 8, i32* %bitdepth, align 4, !tbaa !59
  %6 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i32 0, i32 2
  store i8* null, i8** %palette, align 8, !tbaa !60
  %7 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i32 0, i32 3
  store i64 0, i64* %palettesize, align 8, !tbaa !61
  ret void
}

; Function Attrs: ssp uwtable
define void @_Z26lodepng_color_mode_cleanupP16LodePNGColorMode(%struct.LodePNGColorMode* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  call void @_Z21lodepng_palette_clearP16LodePNGColorMode(%struct.LodePNGColorMode* %0)
  ret void
}

; Function Attrs: ssp uwtable
define void @_Z21lodepng_palette_clearP16LodePNGColorMode(%struct.LodePNGColorMode* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 2
  %1 = load i8*, i8** %palette, align 8, !tbaa !60
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 2
  %3 = load i8*, i8** %palette1, align 8, !tbaa !60
  call void @_ZL12lodepng_freePv(i8* %3)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 2
  store i8* null, i8** %palette2, align 8, !tbaa !60
  %5 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %5, i32 0, i32 3
  store i64 0, i64* %palettesize, align 8, !tbaa !61
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_Z23lodepng_color_mode_copyP16LodePNGColorModePKS_(%struct.LodePNGColorMode* %dest, %struct.LodePNGColorMode* %source) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca %struct.LodePNGColorMode*, align 8
  %source.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %dest, %struct.LodePNGColorMode** %dest.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %source, %struct.LodePNGColorMode** %source.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %dest.addr, align 8, !tbaa !2
  call void @_Z26lodepng_color_mode_cleanupP16LodePNGColorMode(%struct.LodePNGColorMode* %0)
  %1 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %dest.addr, align 8, !tbaa !2
  %2 = bitcast %struct.LodePNGColorMode* %1 to i8*
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %source.addr, align 8, !tbaa !2
  %4 = bitcast %struct.LodePNGColorMode* %3 to i8*
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %2, i8* %4, i64 40)
  %5 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %source.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %5, i32 0, i32 2
  %6 = load i8*, i8** %palette, align 8, !tbaa !60
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %if.then, label %if.end9

if.then:                                          ; preds = %entry
  %call = call i8* @_ZL14lodepng_mallocm(i64 1024)
  %7 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %dest.addr, align 8, !tbaa !2
  %palette1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i32 0, i32 2
  store i8* %call, i8** %palette1, align 8, !tbaa !60
  %8 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %dest.addr, align 8, !tbaa !2
  %palette2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %8, i32 0, i32 2
  %9 = load i8*, i8** %palette2, align 8, !tbaa !60
  %tobool3 = icmp ne i8* %9, null
  br i1 %tobool3, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %10 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %source.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %10, i32 0, i32 3
  %11 = load i64, i64* %palettesize, align 8, !tbaa !61
  %tobool4 = icmp ne i64 %11, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  store i32 83, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  %12 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %dest.addr, align 8, !tbaa !2
  %palette6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %12, i32 0, i32 2
  %13 = load i8*, i8** %palette6, align 8, !tbaa !60
  %14 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %source.addr, align 8, !tbaa !2
  %palette7 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %14, i32 0, i32 2
  %15 = load i8*, i8** %palette7, align 8, !tbaa !60
  %16 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %source.addr, align 8, !tbaa !2
  %palettesize8 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %16, i32 0, i32 3
  %17 = load i64, i64* %palettesize8, align 8, !tbaa !61
  %mul = mul i64 %17, 4
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %13, i8* %15, i64 %mul)
  br label %if.end9

if.end9:                                          ; preds = %if.end, %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end9, %if.then5
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL14lodepng_memcpyPvPKvm(i8* %dst, i8* %src, i64 %size) #4 {
entry:
  %dst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8, !tbaa !2
  store i8* %src, i8** %src.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !6
  %2 = load i64, i64* %size.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !tbaa !2
  %4 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %4
  %5 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %6 = load i8*, i8** %dst.addr, align 8, !tbaa !2
  %7 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i8, i8* %6, i64 %7
  store i8 %5, i8* %arrayidx1, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %8, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @_Z23lodepng_color_mode_make16LodePNGColorTypej(%struct.LodePNGColorMode* noalias sret %agg.result, i32 %colortype, i32 %bitdepth) #4 {
entry:
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  call void @_Z23lodepng_color_mode_initP16LodePNGColorMode(%struct.LodePNGColorMode* %agg.result)
  %0 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %colortype1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %agg.result, i32 0, i32 0
  store i32 %0, i32* %colortype1, align 8, !tbaa !58
  %1 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %bitdepth2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %agg.result, i32 0, i32 1
  store i32 %1, i32* %bitdepth2, align 4, !tbaa !59
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_Z19lodepng_palette_addP16LodePNGColorModehhhh(%struct.LodePNGColorMode* %info, i8 zeroext %r, i8 zeroext %g, i8 zeroext %b, i8 zeroext %a) #0 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  %r.addr = alloca i8, align 1
  %g.addr = alloca i8, align 1
  %b.addr = alloca i8, align 1
  %a.addr = alloca i8, align 1
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  store i8 %r, i8* %r.addr, align 1, !tbaa !16
  store i8 %g, i8* %g.addr, align 1, !tbaa !16
  store i8 %b, i8* %b.addr, align 1, !tbaa !16
  store i8 %a, i8* %a.addr, align 1, !tbaa !16
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 2
  %1 = load i8*, i8** %palette, align 8, !tbaa !60
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  call void @_ZL32lodepng_color_mode_alloc_paletteP16LodePNGColorMode(%struct.LodePNGColorMode* %2)
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i32 0, i32 2
  %4 = load i8*, i8** %palette1, align 8, !tbaa !60
  %tobool2 = icmp ne i8* %4, null
  br i1 %tobool2, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  store i32 83, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %5 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %5, i32 0, i32 3
  %6 = load i64, i64* %palettesize, align 8, !tbaa !61
  %cmp = icmp uge i64 %6, 256
  br i1 %cmp, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end4
  store i32 108, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end4
  %7 = load i8, i8* %r.addr, align 1, !tbaa !16
  %8 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette7 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %8, i32 0, i32 2
  %9 = load i8*, i8** %palette7, align 8, !tbaa !60
  %10 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize8 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %10, i32 0, i32 3
  %11 = load i64, i64* %palettesize8, align 8, !tbaa !61
  %mul = mul i64 4, %11
  %add = add i64 %mul, 0
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %add
  store i8 %7, i8* %arrayidx, align 1, !tbaa !16
  %12 = load i8, i8* %g.addr, align 1, !tbaa !16
  %13 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %13, i32 0, i32 2
  %14 = load i8*, i8** %palette9, align 8, !tbaa !60
  %15 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize10 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %15, i32 0, i32 3
  %16 = load i64, i64* %palettesize10, align 8, !tbaa !61
  %mul11 = mul i64 4, %16
  %add12 = add i64 %mul11, 1
  %arrayidx13 = getelementptr inbounds i8, i8* %14, i64 %add12
  store i8 %12, i8* %arrayidx13, align 1, !tbaa !16
  %17 = load i8, i8* %b.addr, align 1, !tbaa !16
  %18 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette14 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %18, i32 0, i32 2
  %19 = load i8*, i8** %palette14, align 8, !tbaa !60
  %20 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize15 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %20, i32 0, i32 3
  %21 = load i64, i64* %palettesize15, align 8, !tbaa !61
  %mul16 = mul i64 4, %21
  %add17 = add i64 %mul16, 2
  %arrayidx18 = getelementptr inbounds i8, i8* %19, i64 %add17
  store i8 %17, i8* %arrayidx18, align 1, !tbaa !16
  %22 = load i8, i8* %a.addr, align 1, !tbaa !16
  %23 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette19 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %23, i32 0, i32 2
  %24 = load i8*, i8** %palette19, align 8, !tbaa !60
  %25 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize20 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %25, i32 0, i32 3
  %26 = load i64, i64* %palettesize20, align 8, !tbaa !61
  %mul21 = mul i64 4, %26
  %add22 = add i64 %mul21, 3
  %arrayidx23 = getelementptr inbounds i8, i8* %24, i64 %add22
  store i8 %22, i8* %arrayidx23, align 1, !tbaa !16
  %27 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize24 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %27, i32 0, i32 3
  %28 = load i64, i64* %palettesize24, align 8, !tbaa !61
  %inc = add i64 %28, 1
  store i64 %inc, i64* %palettesize24, align 8, !tbaa !61
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then3
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

; Function Attrs: ssp uwtable
define internal void @_ZL32lodepng_color_mode_alloc_paletteP16LodePNGColorMode(%struct.LodePNGColorMode* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i32 0, i32 2
  %2 = load i8*, i8** %palette, align 8, !tbaa !60
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call i8* @_ZL14lodepng_mallocm(i64 1024)
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i32 0, i32 2
  store i8* %call, i8** %palette1, align 8, !tbaa !60
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 2
  %5 = load i8*, i8** %palette2, align 8, !tbaa !60
  %tobool3 = icmp ne i8* %5, null
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end5
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %cmp = icmp ne i64 %6, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i32 0, i32 2
  %8 = load i8*, i8** %palette6, align 8, !tbaa !60
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %mul = mul i64 %9, 4
  %add = add i64 %mul, 0
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %add
  store i8 0, i8* %arrayidx, align 1, !tbaa !16
  %10 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette7 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %10, i32 0, i32 2
  %11 = load i8*, i8** %palette7, align 8, !tbaa !60
  %12 = load i64, i64* %i, align 8, !tbaa !6
  %mul8 = mul i64 %12, 4
  %add9 = add i64 %mul8, 1
  %arrayidx10 = getelementptr inbounds i8, i8* %11, i64 %add9
  store i8 0, i8* %arrayidx10, align 1, !tbaa !16
  %13 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette11 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %13, i32 0, i32 2
  %14 = load i8*, i8** %palette11, align 8, !tbaa !60
  %15 = load i64, i64* %i, align 8, !tbaa !6
  %mul12 = mul i64 %15, 4
  %add13 = add i64 %mul12, 2
  %arrayidx14 = getelementptr inbounds i8, i8* %14, i64 %add13
  store i8 0, i8* %arrayidx14, align 1, !tbaa !16
  %16 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette15 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %16, i32 0, i32 2
  %17 = load i8*, i8** %palette15, align 8, !tbaa !60
  %18 = load i64, i64* %i, align 8, !tbaa !6
  %mul16 = mul i64 %18, 4
  %add17 = add i64 %mul16, 3
  %arrayidx18 = getelementptr inbounds i8, i8* %17, i64 %add17
  store i8 -1, i8* %arrayidx18, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %19 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %19, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then4
  %20 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: ssp uwtable
define i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 1
  %3 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %call = call i32 @_ZL19lodepng_get_bpp_lct16LodePNGColorTypej(i32 %1, i32 %3)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL19lodepng_get_bpp_lct16LodePNGColorTypej(i32 %colortype, i32 %bitdepth) #0 {
entry:
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %call = call i32 @_ZL19getNumColorChannels16LodePNGColorType(i32 %0)
  %1 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %mul = mul i32 %call, %1
  ret i32 %mul
}

; Function Attrs: ssp uwtable
define i32 @_Z20lodepng_get_channelsPK16LodePNGColorMode(%struct.LodePNGColorMode* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %call = call i32 @_ZL19getNumColorChannels16LodePNGColorType(i32 %1)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL19getNumColorChannels16LodePNGColorType(i32 %colortype) #4 {
entry:
  %retval = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  %0 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb1
    i32 3, label %sw.bb2
    i32 4, label %sw.bb3
    i32 6, label %sw.bb4
    i32 255, label %sw.bb5
  ]

sw.bb:                                            ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

sw.bb1:                                           ; preds = %entry
  store i32 3, i32* %retval, align 4
  br label %return

sw.bb2:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

sw.bb3:                                           ; preds = %entry
  store i32 2, i32* %retval, align 4
  br label %return

sw.bb4:                                           ; preds = %entry
  store i32 4, i32* %retval, align 4
  br label %return

sw.bb5:                                           ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

sw.default:                                       ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.default, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i32, i32* %retval, align 4
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define i32 @_Z25lodepng_is_greyscale_typePK16LodePNGColorMode(%struct.LodePNGColorMode* %info) #4 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 0
  %3 = load i32, i32* %colortype1, align 8, !tbaa !58
  %cmp2 = icmp eq i32 %3, 4
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %conv = zext i1 %4 to i32
  ret i32 %conv
}

; Function Attrs: nounwind ssp uwtable
define i32 @_Z21lodepng_is_alpha_typePK16LodePNGColorMode(%struct.LodePNGColorMode* %info) #4 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %and = and i32 %1, 4
  %cmp = icmp ne i32 %and, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind ssp uwtable
define i32 @_Z23lodepng_is_palette_typePK16LodePNGColorMode(%struct.LodePNGColorMode* %info) #4 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %1, 3
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind ssp uwtable
define i32 @_Z25lodepng_has_palette_alphaPK16LodePNGColorMode(%struct.LodePNGColorMode* %info) #4 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !6
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 3
  %3 = load i64, i64* %palettesize, align 8, !tbaa !61
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 2
  %5 = load i8*, i8** %palette, align 8, !tbaa !60
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %mul = mul i64 %6, 4
  %add = add i64 %mul, 3
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %add
  %7 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %7 to i32
  %cmp1 = icmp slt i32 %conv, 255
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %8, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %9 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #16
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define i32 @_Z22lodepng_can_have_alphaPK16LodePNGColorMode(%struct.LodePNGColorMode* %info) #4 {
entry:
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 4
  %1 = load i32, i32* %key_defined, align 8, !tbaa !52
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %call = call i32 @_Z21lodepng_is_alpha_typePK16LodePNGColorMode(%struct.LodePNGColorMode* %2)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %call2 = call i32 @_Z25lodepng_has_palette_alphaPK16LodePNGColorMode(%struct.LodePNGColorMode* %3)
  %tobool3 = icmp ne i32 %call2, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %4 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool3, %lor.rhs ]
  %conv = zext i1 %4 to i32
  ret i32 %conv
}

; Function Attrs: ssp uwtable
define i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 %w, i32 %h, %struct.LodePNGColorMode* %color) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %color.addr = alloca %struct.LodePNGColorMode*, align 8
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %struct.LodePNGColorMode* %color, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %0 = load i32, i32* %w.addr, align 4, !tbaa !8
  %1 = load i32, i32* %h.addr, align 4, !tbaa !8
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 0
  %3 = load i32, i32* %colortype, align 8, !tbaa !58
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 1
  %5 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %call = call i64 @_ZL24lodepng_get_raw_size_lctjj16LodePNGColorTypej(i32 %0, i32 %1, i32 %3, i32 %5)
  ret i64 %call
}

; Function Attrs: ssp uwtable
define internal i64 @_ZL24lodepng_get_raw_size_lctjj16LodePNGColorTypej(i32 %w, i32 %h, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %bpp = alloca i64, align 8
  %n = alloca i64, align 8
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast i64* %bpp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %2 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call = call i32 @_ZL19lodepng_get_bpp_lct16LodePNGColorTypej(i32 %1, i32 %2)
  %conv = zext i32 %call to i64
  store i64 %conv, i64* %bpp, align 8, !tbaa !6
  %3 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load i32, i32* %w.addr, align 4, !tbaa !8
  %conv1 = zext i32 %4 to i64
  %5 = load i32, i32* %h.addr, align 4, !tbaa !8
  %conv2 = zext i32 %5 to i64
  %mul = mul i64 %conv1, %conv2
  store i64 %mul, i64* %n, align 8, !tbaa !6
  %6 = load i64, i64* %n, align 8, !tbaa !6
  %div = udiv i64 %6, 8
  %7 = load i64, i64* %bpp, align 8, !tbaa !6
  %mul3 = mul i64 %div, %7
  %8 = load i64, i64* %n, align 8, !tbaa !6
  %and = and i64 %8, 7
  %9 = load i64, i64* %bpp, align 8, !tbaa !6
  %mul4 = mul i64 %and, %9
  %add = add i64 %mul4, 7
  %div5 = udiv i64 %add, 8
  %add6 = add i64 %mul3, %div5
  %10 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #16
  %11 = bitcast i64* %bpp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #16
  ret i64 %add6
}

; Function Attrs: ssp uwtable
define i32 @_Z16lodepng_add_textP11LodePNGInfoPKcS2_(%struct.LodePNGInfo* %info, i8* %key, i8* %str) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %key.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  store i8* %str, i8** %str.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %str.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %str.addr, align 8, !tbaa !2
  %call = call i64 @_ZL14lodepng_strlenPKc(i8* %3)
  %call1 = call i32 @_ZL22lodepng_add_text_sizedP11LodePNGInfoPKcS2_m(%struct.LodePNGInfo* %0, i8* %1, i8* %2, i64 %call)
  ret i32 %call1
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL22lodepng_add_text_sizedP11LodePNGInfoPKcS2_m(%struct.LodePNGInfo* %info, i8* %key, i8* %str, i64 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %key.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %new_keys = alloca i8**, align 8
  %new_strings = alloca i8**, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  store i8* %str, i8** %str.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  %0 = bitcast i8*** %new_keys to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 9
  %2 = load i8**, i8*** %text_keys, align 8, !tbaa !63
  %3 = bitcast i8** %2 to i8*
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 8
  %5 = load i64, i64* %text_num, align 8, !tbaa !66
  %add = add i64 %5, 1
  %mul = mul i64 8, %add
  %call = call i8* @_ZL15lodepng_reallocPvm(i8* %3, i64 %mul)
  %6 = bitcast i8* %call to i8**
  store i8** %6, i8*** %new_keys, align 8, !tbaa !2
  %7 = bitcast i8*** %new_strings to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  %8 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %8, i32 0, i32 10
  %9 = load i8**, i8*** %text_strings, align 8, !tbaa !67
  %10 = bitcast i8** %9 to i8*
  %11 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num1 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %11, i32 0, i32 8
  %12 = load i64, i64* %text_num1, align 8, !tbaa !66
  %add2 = add i64 %12, 1
  %mul3 = mul i64 8, %add2
  %call4 = call i8* @_ZL15lodepng_reallocPvm(i8* %10, i64 %mul3)
  %13 = bitcast i8* %call4 to i8**
  store i8** %13, i8*** %new_strings, align 8, !tbaa !2
  %14 = load i8**, i8*** %new_keys, align 8, !tbaa !2
  %tobool = icmp ne i8** %14, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %15 = load i8**, i8*** %new_keys, align 8, !tbaa !2
  %16 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_keys5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %16, i32 0, i32 9
  store i8** %15, i8*** %text_keys5, align 8, !tbaa !63
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load i8**, i8*** %new_strings, align 8, !tbaa !2
  %tobool6 = icmp ne i8** %17, null
  br i1 %tobool6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %18 = load i8**, i8*** %new_strings, align 8, !tbaa !2
  %19 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_strings8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %19, i32 0, i32 10
  store i8** %18, i8*** %text_strings8, align 8, !tbaa !67
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end
  %20 = load i8**, i8*** %new_keys, align 8, !tbaa !2
  %tobool10 = icmp ne i8** %20, null
  br i1 %tobool10, label %lor.lhs.false, label %if.then12

lor.lhs.false:                                    ; preds = %if.end9
  %21 = load i8**, i8*** %new_strings, align 8, !tbaa !2
  %tobool11 = icmp ne i8** %21, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %lor.lhs.false, %if.end9
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %lor.lhs.false
  %22 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num14 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %22, i32 0, i32 8
  %23 = load i64, i64* %text_num14, align 8, !tbaa !66
  %inc = add i64 %23, 1
  store i64 %inc, i64* %text_num14, align 8, !tbaa !66
  %24 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %call15 = call i8* @_ZL12alloc_stringPKc(i8* %24)
  %25 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_keys16 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %25, i32 0, i32 9
  %26 = load i8**, i8*** %text_keys16, align 8, !tbaa !63
  %27 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num17 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %27, i32 0, i32 8
  %28 = load i64, i64* %text_num17, align 8, !tbaa !66
  %sub = sub i64 %28, 1
  %arrayidx = getelementptr inbounds i8*, i8** %26, i64 %sub
  store i8* %call15, i8** %arrayidx, align 8, !tbaa !2
  %29 = load i8*, i8** %str.addr, align 8, !tbaa !2
  %30 = load i64, i64* %size.addr, align 8, !tbaa !6
  %call18 = call i8* @_ZL18alloc_string_sizedPKcm(i8* %29, i64 %30)
  %31 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_strings19 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %31, i32 0, i32 10
  %32 = load i8**, i8*** %text_strings19, align 8, !tbaa !67
  %33 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num20 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %33, i32 0, i32 8
  %34 = load i64, i64* %text_num20, align 8, !tbaa !66
  %sub21 = sub i64 %34, 1
  %arrayidx22 = getelementptr inbounds i8*, i8** %32, i64 %sub21
  store i8* %call18, i8** %arrayidx22, align 8, !tbaa !2
  %35 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_keys23 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %35, i32 0, i32 9
  %36 = load i8**, i8*** %text_keys23, align 8, !tbaa !63
  %37 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %37, i32 0, i32 8
  %38 = load i64, i64* %text_num24, align 8, !tbaa !66
  %sub25 = sub i64 %38, 1
  %arrayidx26 = getelementptr inbounds i8*, i8** %36, i64 %sub25
  %39 = load i8*, i8** %arrayidx26, align 8, !tbaa !2
  %tobool27 = icmp ne i8* %39, null
  br i1 %tobool27, label %lor.lhs.false28, label %if.then34

lor.lhs.false28:                                  ; preds = %if.end13
  %40 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_strings29 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %40, i32 0, i32 10
  %41 = load i8**, i8*** %text_strings29, align 8, !tbaa !67
  %42 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num30 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %42, i32 0, i32 8
  %43 = load i64, i64* %text_num30, align 8, !tbaa !66
  %sub31 = sub i64 %43, 1
  %arrayidx32 = getelementptr inbounds i8*, i8** %41, i64 %sub31
  %44 = load i8*, i8** %arrayidx32, align 8, !tbaa !2
  %tobool33 = icmp ne i8* %44, null
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %lor.lhs.false28, %if.end13
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end35:                                         ; preds = %lor.lhs.false28
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end35, %if.then34, %if.then12
  %45 = bitcast i8*** %new_strings to i8*
  call void @llvm.lifetime.end(i64 8, i8* %45) #16
  %46 = bitcast i8*** %new_keys to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #16
  %47 = load i32, i32* %retval, align 4
  ret i32 %47
}

; Function Attrs: ssp uwtable
define void @_Z18lodepng_clear_textP11LodePNGInfo(%struct.LodePNGInfo* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_ZL19LodePNGText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %0)
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL19LodePNGText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %i = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !6
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 8
  %3 = load i64, i64* %text_num, align 8, !tbaa !66
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 9
  %5 = load i8**, i8*** %text_keys, align 8, !tbaa !63
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 %6
  call void @_ZL14string_cleanupPPc(i8** %arrayidx)
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 10
  %8 = load i8**, i8*** %text_strings, align 8, !tbaa !67
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i8*, i8** %8, i64 %9
  call void @_ZL14string_cleanupPPc(i8** %arrayidx1)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %10, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_keys2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %11, i32 0, i32 9
  %12 = load i8**, i8*** %text_keys2, align 8, !tbaa !63
  %13 = bitcast i8** %12 to i8*
  call void @_ZL12lodepng_freePv(i8* %13)
  %14 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_strings3 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %14, i32 0, i32 10
  %15 = load i8**, i8*** %text_strings3, align 8, !tbaa !67
  %16 = bitcast i8** %15 to i8*
  call void @_ZL12lodepng_freePv(i8* %16)
  %17 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #16
  ret void
}

; Function Attrs: ssp uwtable
define void @_Z19lodepng_clear_itextP11LodePNGInfo(%struct.LodePNGInfo* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_ZL20LodePNGIText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %0)
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL20LodePNGIText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %i = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !6
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 11
  %3 = load i64, i64* %itext_num, align 8, !tbaa !68
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 12
  %5 = load i8**, i8*** %itext_keys, align 8, !tbaa !69
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %5, i64 %6
  call void @_ZL14string_cleanupPPc(i8** %arrayidx)
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_langtags = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 13
  %8 = load i8**, i8*** %itext_langtags, align 8, !tbaa !70
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i8*, i8** %8, i64 %9
  call void @_ZL14string_cleanupPPc(i8** %arrayidx1)
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_transkeys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 14
  %11 = load i8**, i8*** %itext_transkeys, align 8, !tbaa !71
  %12 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i8*, i8** %11, i64 %12
  call void @_ZL14string_cleanupPPc(i8** %arrayidx2)
  %13 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %13, i32 0, i32 15
  %14 = load i8**, i8*** %itext_strings, align 8, !tbaa !72
  %15 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx3 = getelementptr inbounds i8*, i8** %14, i64 %15
  call void @_ZL14string_cleanupPPc(i8** %arrayidx3)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %16, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_keys4 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %17, i32 0, i32 12
  %18 = load i8**, i8*** %itext_keys4, align 8, !tbaa !69
  %19 = bitcast i8** %18 to i8*
  call void @_ZL12lodepng_freePv(i8* %19)
  %20 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_langtags5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %20, i32 0, i32 13
  %21 = load i8**, i8*** %itext_langtags5, align 8, !tbaa !70
  %22 = bitcast i8** %21 to i8*
  call void @_ZL12lodepng_freePv(i8* %22)
  %23 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_transkeys6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %23, i32 0, i32 14
  %24 = load i8**, i8*** %itext_transkeys6, align 8, !tbaa !71
  %25 = bitcast i8** %24 to i8*
  call void @_ZL12lodepng_freePv(i8* %25)
  %26 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_strings7 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %26, i32 0, i32 15
  %27 = load i8**, i8*** %itext_strings7, align 8, !tbaa !72
  %28 = bitcast i8** %27 to i8*
  call void @_ZL12lodepng_freePv(i8* %28)
  %29 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #16
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_Z17lodepng_add_itextP11LodePNGInfoPKcS2_S2_S2_(%struct.LodePNGInfo* %info, i8* %key, i8* %langtag, i8* %transkey, i8* %str) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %key.addr = alloca i8*, align 8
  %langtag.addr = alloca i8*, align 8
  %transkey.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  store i8* %langtag, i8** %langtag.addr, align 8, !tbaa !2
  store i8* %transkey, i8** %transkey.addr, align 8, !tbaa !2
  store i8* %str, i8** %str.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %langtag.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %transkey.addr, align 8, !tbaa !2
  %4 = load i8*, i8** %str.addr, align 8, !tbaa !2
  %5 = load i8*, i8** %str.addr, align 8, !tbaa !2
  %call = call i64 @_ZL14lodepng_strlenPKc(i8* %5)
  %call1 = call i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* %0, i8* %1, i8* %2, i8* %3, i8* %4, i64 %call)
  ret i32 %call1
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* %info, i8* %key, i8* %langtag, i8* %transkey, i8* %str, i64 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %key.addr = alloca i8*, align 8
  %langtag.addr = alloca i8*, align 8
  %transkey.addr = alloca i8*, align 8
  %str.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %new_keys = alloca i8**, align 8
  %new_langtags = alloca i8**, align 8
  %new_transkeys = alloca i8**, align 8
  %new_strings = alloca i8**, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %key, i8** %key.addr, align 8, !tbaa !2
  store i8* %langtag, i8** %langtag.addr, align 8, !tbaa !2
  store i8* %transkey, i8** %transkey.addr, align 8, !tbaa !2
  store i8* %str, i8** %str.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  %0 = bitcast i8*** %new_keys to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 12
  %2 = load i8**, i8*** %itext_keys, align 8, !tbaa !69
  %3 = bitcast i8** %2 to i8*
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 11
  %5 = load i64, i64* %itext_num, align 8, !tbaa !68
  %add = add i64 %5, 1
  %mul = mul i64 8, %add
  %call = call i8* @_ZL15lodepng_reallocPvm(i8* %3, i64 %mul)
  %6 = bitcast i8* %call to i8**
  store i8** %6, i8*** %new_keys, align 8, !tbaa !2
  %7 = bitcast i8*** %new_langtags to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  %8 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_langtags = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %8, i32 0, i32 13
  %9 = load i8**, i8*** %itext_langtags, align 8, !tbaa !70
  %10 = bitcast i8** %9 to i8*
  %11 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num1 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %11, i32 0, i32 11
  %12 = load i64, i64* %itext_num1, align 8, !tbaa !68
  %add2 = add i64 %12, 1
  %mul3 = mul i64 8, %add2
  %call4 = call i8* @_ZL15lodepng_reallocPvm(i8* %10, i64 %mul3)
  %13 = bitcast i8* %call4 to i8**
  store i8** %13, i8*** %new_langtags, align 8, !tbaa !2
  %14 = bitcast i8*** %new_transkeys to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #16
  %15 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_transkeys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %15, i32 0, i32 14
  %16 = load i8**, i8*** %itext_transkeys, align 8, !tbaa !71
  %17 = bitcast i8** %16 to i8*
  %18 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %18, i32 0, i32 11
  %19 = load i64, i64* %itext_num5, align 8, !tbaa !68
  %add6 = add i64 %19, 1
  %mul7 = mul i64 8, %add6
  %call8 = call i8* @_ZL15lodepng_reallocPvm(i8* %17, i64 %mul7)
  %20 = bitcast i8* %call8 to i8**
  store i8** %20, i8*** %new_transkeys, align 8, !tbaa !2
  %21 = bitcast i8*** %new_strings to i8*
  call void @llvm.lifetime.start(i64 8, i8* %21) #16
  %22 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %22, i32 0, i32 15
  %23 = load i8**, i8*** %itext_strings, align 8, !tbaa !72
  %24 = bitcast i8** %23 to i8*
  %25 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num9 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %25, i32 0, i32 11
  %26 = load i64, i64* %itext_num9, align 8, !tbaa !68
  %add10 = add i64 %26, 1
  %mul11 = mul i64 8, %add10
  %call12 = call i8* @_ZL15lodepng_reallocPvm(i8* %24, i64 %mul11)
  %27 = bitcast i8* %call12 to i8**
  store i8** %27, i8*** %new_strings, align 8, !tbaa !2
  %28 = load i8**, i8*** %new_keys, align 8, !tbaa !2
  %tobool = icmp ne i8** %28, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %29 = load i8**, i8*** %new_keys, align 8, !tbaa !2
  %30 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_keys13 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %30, i32 0, i32 12
  store i8** %29, i8*** %itext_keys13, align 8, !tbaa !69
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %31 = load i8**, i8*** %new_langtags, align 8, !tbaa !2
  %tobool14 = icmp ne i8** %31, null
  br i1 %tobool14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end
  %32 = load i8**, i8*** %new_langtags, align 8, !tbaa !2
  %33 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_langtags16 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %33, i32 0, i32 13
  store i8** %32, i8*** %itext_langtags16, align 8, !tbaa !70
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %if.end
  %34 = load i8**, i8*** %new_transkeys, align 8, !tbaa !2
  %tobool18 = icmp ne i8** %34, null
  br i1 %tobool18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end17
  %35 = load i8**, i8*** %new_transkeys, align 8, !tbaa !2
  %36 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_transkeys20 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %36, i32 0, i32 14
  store i8** %35, i8*** %itext_transkeys20, align 8, !tbaa !71
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end17
  %37 = load i8**, i8*** %new_strings, align 8, !tbaa !2
  %tobool22 = icmp ne i8** %37, null
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end21
  %38 = load i8**, i8*** %new_strings, align 8, !tbaa !2
  %39 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_strings24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %39, i32 0, i32 15
  store i8** %38, i8*** %itext_strings24, align 8, !tbaa !72
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.end21
  %40 = load i8**, i8*** %new_keys, align 8, !tbaa !2
  %tobool26 = icmp ne i8** %40, null
  br i1 %tobool26, label %lor.lhs.false, label %if.then32

lor.lhs.false:                                    ; preds = %if.end25
  %41 = load i8**, i8*** %new_langtags, align 8, !tbaa !2
  %tobool27 = icmp ne i8** %41, null
  br i1 %tobool27, label %lor.lhs.false28, label %if.then32

lor.lhs.false28:                                  ; preds = %lor.lhs.false
  %42 = load i8**, i8*** %new_transkeys, align 8, !tbaa !2
  %tobool29 = icmp ne i8** %42, null
  br i1 %tobool29, label %lor.lhs.false30, label %if.then32

lor.lhs.false30:                                  ; preds = %lor.lhs.false28
  %43 = load i8**, i8*** %new_strings, align 8, !tbaa !2
  %tobool31 = icmp ne i8** %43, null
  br i1 %tobool31, label %if.end33, label %if.then32

if.then32:                                        ; preds = %lor.lhs.false30, %lor.lhs.false28, %lor.lhs.false, %if.end25
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end33:                                         ; preds = %lor.lhs.false30
  %44 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num34 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %44, i32 0, i32 11
  %45 = load i64, i64* %itext_num34, align 8, !tbaa !68
  %inc = add i64 %45, 1
  store i64 %inc, i64* %itext_num34, align 8, !tbaa !68
  %46 = load i8*, i8** %key.addr, align 8, !tbaa !2
  %call35 = call i8* @_ZL12alloc_stringPKc(i8* %46)
  %47 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_keys36 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %47, i32 0, i32 12
  %48 = load i8**, i8*** %itext_keys36, align 8, !tbaa !69
  %49 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num37 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %49, i32 0, i32 11
  %50 = load i64, i64* %itext_num37, align 8, !tbaa !68
  %sub = sub i64 %50, 1
  %arrayidx = getelementptr inbounds i8*, i8** %48, i64 %sub
  store i8* %call35, i8** %arrayidx, align 8, !tbaa !2
  %51 = load i8*, i8** %langtag.addr, align 8, !tbaa !2
  %call38 = call i8* @_ZL12alloc_stringPKc(i8* %51)
  %52 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_langtags39 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %52, i32 0, i32 13
  %53 = load i8**, i8*** %itext_langtags39, align 8, !tbaa !70
  %54 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num40 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %54, i32 0, i32 11
  %55 = load i64, i64* %itext_num40, align 8, !tbaa !68
  %sub41 = sub i64 %55, 1
  %arrayidx42 = getelementptr inbounds i8*, i8** %53, i64 %sub41
  store i8* %call38, i8** %arrayidx42, align 8, !tbaa !2
  %56 = load i8*, i8** %transkey.addr, align 8, !tbaa !2
  %call43 = call i8* @_ZL12alloc_stringPKc(i8* %56)
  %57 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_transkeys44 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %57, i32 0, i32 14
  %58 = load i8**, i8*** %itext_transkeys44, align 8, !tbaa !71
  %59 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num45 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %59, i32 0, i32 11
  %60 = load i64, i64* %itext_num45, align 8, !tbaa !68
  %sub46 = sub i64 %60, 1
  %arrayidx47 = getelementptr inbounds i8*, i8** %58, i64 %sub46
  store i8* %call43, i8** %arrayidx47, align 8, !tbaa !2
  %61 = load i8*, i8** %str.addr, align 8, !tbaa !2
  %62 = load i64, i64* %size.addr, align 8, !tbaa !6
  %call48 = call i8* @_ZL18alloc_string_sizedPKcm(i8* %61, i64 %62)
  %63 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_strings49 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %63, i32 0, i32 15
  %64 = load i8**, i8*** %itext_strings49, align 8, !tbaa !72
  %65 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num50 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %65, i32 0, i32 11
  %66 = load i64, i64* %itext_num50, align 8, !tbaa !68
  %sub51 = sub i64 %66, 1
  %arrayidx52 = getelementptr inbounds i8*, i8** %64, i64 %sub51
  store i8* %call48, i8** %arrayidx52, align 8, !tbaa !2
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end33, %if.then32
  %67 = bitcast i8*** %new_strings to i8*
  call void @llvm.lifetime.end(i64 8, i8* %67) #16
  %68 = bitcast i8*** %new_transkeys to i8*
  call void @llvm.lifetime.end(i64 8, i8* %68) #16
  %69 = bitcast i8*** %new_langtags to i8*
  call void @llvm.lifetime.end(i64 8, i8* %69) #16
  %70 = bitcast i8*** %new_keys to i8*
  call void @llvm.lifetime.end(i64 8, i8* %70) #16
  %71 = load i32, i32* %retval, align 4
  ret i32 %71
}

; Function Attrs: ssp uwtable
define i32 @_Z15lodepng_set_iccP11LodePNGInfoPKcPKhj(%struct.LodePNGInfo* %info, i8* %name, i8* %profile, i32 %profile_size) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %name.addr = alloca i8*, align 8
  %profile.addr = alloca i8*, align 8
  %profile_size.addr = alloca i32, align 4
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %name, i8** %name.addr, align 8, !tbaa !2
  store i8* %profile, i8** %profile.addr, align 8, !tbaa !2
  store i32 %profile_size, i32* %profile_size.addr, align 4, !tbaa !8
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i32 0, i32 36
  %1 = load i8*, i8** %iccp_name, align 8, !tbaa !73
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_Z17lodepng_clear_iccP11LodePNGInfo(%struct.LodePNGInfo* %2)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 35
  store i32 1, i32* %iccp_defined, align 8, !tbaa !74
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %5 = load i8*, i8** %name.addr, align 8, !tbaa !2
  %6 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %7 = load i32, i32* %profile_size.addr, align 4, !tbaa !8
  %call = call i32 @_ZL18lodepng_assign_iccP11LodePNGInfoPKcPKhj(%struct.LodePNGInfo* %4, i8* %5, i8* %6, i32 %7)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define void @_Z17lodepng_clear_iccP11LodePNGInfo(%struct.LodePNGInfo* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i32 0, i32 36
  call void @_ZL14string_cleanupPPc(i8** %iccp_name)
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 37
  %2 = load i8*, i8** %iccp_profile, align 8, !tbaa !75
  call void @_ZL12lodepng_freePv(i8* %2)
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile1 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 37
  store i8* null, i8** %iccp_profile1, align 8, !tbaa !75
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 38
  store i32 0, i32* %iccp_profile_size, align 8, !tbaa !76
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 35
  store i32 0, i32* %iccp_defined, align 8, !tbaa !74
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL18lodepng_assign_iccP11LodePNGInfoPKcPKhj(%struct.LodePNGInfo* %info, i8* %name, i8* %profile, i32 %profile_size) #0 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %name.addr = alloca i8*, align 8
  %profile.addr = alloca i8*, align 8
  %profile_size.addr = alloca i32, align 4
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %name, i8** %name.addr, align 8, !tbaa !2
  store i8* %profile, i8** %profile.addr, align 8, !tbaa !2
  store i32 %profile_size, i32* %profile_size.addr, align 4, !tbaa !8
  %0 = load i32, i32* %profile_size.addr, align 4, !tbaa !8
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 100, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8, !tbaa !2
  %call = call i8* @_ZL12alloc_stringPKc(i8* %1)
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 36
  store i8* %call, i8** %iccp_name, align 8, !tbaa !73
  %3 = load i32, i32* %profile_size.addr, align 4, !tbaa !8
  %conv = zext i32 %3 to i64
  %call1 = call i8* @_ZL14lodepng_mallocm(i64 %conv)
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 37
  store i8* %call1, i8** %iccp_profile, align 8, !tbaa !75
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 36
  %6 = load i8*, i8** %iccp_name2, align 8, !tbaa !73
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %lor.lhs.false, label %if.then5

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile3 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 37
  %8 = load i8*, i8** %iccp_profile3, align 8, !tbaa !75
  %tobool4 = icmp ne i8* %8, null
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %lor.lhs.false, %if.end
  store i32 83, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %lor.lhs.false
  %9 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile7 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %9, i32 0, i32 37
  %10 = load i8*, i8** %iccp_profile7, align 8, !tbaa !75
  %11 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %12 = load i32, i32* %profile_size.addr, align 4, !tbaa !8
  %conv8 = zext i32 %12 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %10, i8* %11, i64 %conv8)
  %13 = load i32, i32* %profile_size.addr, align 4, !tbaa !8
  %14 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %14, i32 0, i32 38
  store i32 %13, i32* %iccp_profile_size, align 8, !tbaa !76
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %15 = load i32, i32* %retval, align 4
  ret i32 %15
}

; Function Attrs: ssp uwtable
define internal void @_ZL14string_cleanupPPc(i8** %out) #0 {
entry:
  %out.addr = alloca i8**, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  %0 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %0, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %1)
  %2 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* null, i8** %2, align 8, !tbaa !2
  ret void
}

; Function Attrs: ssp uwtable
define void @_Z17lodepng_info_initP11LodePNGInfo(%struct.LodePNGInfo* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i32 0, i32 3
  call void @_Z23lodepng_color_mode_initP16LodePNGColorMode(%struct.LodePNGColorMode* %color)
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %interlace_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 2
  store i32 0, i32* %interlace_method, align 8, !tbaa !77
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %compression_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 0
  store i32 0, i32* %compression_method, align 8, !tbaa !78
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %filter_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 1
  store i32 0, i32* %filter_method, align 4, !tbaa !79
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 4
  store i32 0, i32* %background_defined, align 8, !tbaa !80
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_b = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 7
  store i32 0, i32* %background_b, align 4, !tbaa !81
  %6 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_g = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %6, i32 0, i32 6
  store i32 0, i32* %background_g, align 8, !tbaa !82
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 5
  store i32 0, i32* %background_r, align 4, !tbaa !83
  %8 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_ZL16LodePNGText_initP11LodePNGInfo(%struct.LodePNGInfo* %8)
  %9 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_ZL17LodePNGIText_initP11LodePNGInfo(%struct.LodePNGInfo* %9)
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %time_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 16
  store i32 0, i32* %time_defined, align 8, !tbaa !84
  %11 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %phys_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %11, i32 0, i32 18
  store i32 0, i32* %phys_defined, align 4, !tbaa !85
  %12 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %gama_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %12, i32 0, i32 22
  store i32 0, i32* %gama_defined, align 4, !tbaa !86
  %13 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %13, i32 0, i32 24
  store i32 0, i32* %chrm_defined, align 4, !tbaa !87
  %14 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %srgb_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %14, i32 0, i32 33
  store i32 0, i32* %srgb_defined, align 8, !tbaa !88
  %15 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %15, i32 0, i32 35
  store i32 0, i32* %iccp_defined, align 8, !tbaa !74
  %16 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %16, i32 0, i32 36
  store i8* null, i8** %iccp_name, align 8, !tbaa !73
  %17 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %17, i32 0, i32 37
  store i8* null, i8** %iccp_profile, align 8, !tbaa !75
  %18 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_ZL25LodePNGUnknownChunks_initP11LodePNGInfo(%struct.LodePNGInfo* %18)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL16LodePNGText_initP11LodePNGInfo(%struct.LodePNGInfo* %info) #4 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i32 0, i32 8
  store i64 0, i64* %text_num, align 8, !tbaa !66
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 9
  store i8** null, i8*** %text_keys, align 8, !tbaa !63
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %text_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 10
  store i8** null, i8*** %text_strings, align 8, !tbaa !67
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL17LodePNGIText_initP11LodePNGInfo(%struct.LodePNGInfo* %info) #4 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i32 0, i32 11
  store i64 0, i64* %itext_num, align 8, !tbaa !68
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 12
  store i8** null, i8*** %itext_keys, align 8, !tbaa !69
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_langtags = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 13
  store i8** null, i8*** %itext_langtags, align 8, !tbaa !70
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_transkeys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 14
  store i8** null, i8*** %itext_transkeys, align 8, !tbaa !71
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %itext_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 15
  store i8** null, i8*** %itext_strings, align 8, !tbaa !72
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL25LodePNGUnknownChunks_initP11LodePNGInfo(%struct.LodePNGInfo* %info) #4 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %i = alloca i32, align 4
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ne i32 %1, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %unknown_chunks_data = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 39
  %3 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data, i64 0, i64 %idxprom
  store i8* null, i8** %arrayidx, align 8, !tbaa !2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %4, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc6, %for.end
  %5 = load i32, i32* %i, align 4, !tbaa !8
  %cmp2 = icmp ne i32 %5, 3
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %6 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %unknown_chunks_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %6, i32 0, i32 40
  %7 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom4 = zext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size, i64 0, i64 %idxprom4
  store i64 0, i64* %arrayidx5, align 8, !tbaa !6
  br label %for.inc6

for.inc6:                                         ; preds = %for.body3
  %8 = load i32, i32* %i, align 4, !tbaa !8
  %inc7 = add i32 %8, 1
  store i32 %inc7, i32* %i, align 4, !tbaa !8
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  %9 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %9) #16
  ret void
}

; Function Attrs: ssp uwtable
define void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i32 0, i32 3
  call void @_Z26lodepng_color_mode_cleanupP16LodePNGColorMode(%struct.LodePNGColorMode* %color)
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_ZL19LodePNGText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %1)
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_ZL20LodePNGIText_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %2)
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_Z17lodepng_clear_iccP11LodePNGInfo(%struct.LodePNGInfo* %3)
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_ZL28LodePNGUnknownChunks_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %4)
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL28LodePNGUnknownChunks_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %info) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %i = alloca i32, align 4
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ne i32 %1, 3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %unknown_chunks_data = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 39
  %3 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data, i64 0, i64 %idxprom
  %4 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %6 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %6) #16
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_Z17lodepng_info_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %dest, %struct.LodePNGInfo* %source) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca %struct.LodePNGInfo*, align 8
  %source.addr = alloca %struct.LodePNGInfo*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %error3 = alloca i32, align 4
  %error11 = alloca i32, align 4
  %error21 = alloca i32, align 4
  %error30 = alloca i32, align 4
  store %struct.LodePNGInfo* %dest, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %source, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %0)
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %2 = bitcast %struct.LodePNGInfo* %1 to i8*
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %4 = bitcast %struct.LodePNGInfo* %3 to i8*
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %2, i8* %4, i64 312)
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 3
  call void @_Z23lodepng_color_mode_initP16LodePNGColorMode(%struct.LodePNGColorMode* %color)
  %6 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %color1 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 3
  %8 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %color2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %8, i32 0, i32 3
  %call = call i32 @_Z23lodepng_color_mode_copyP16LodePNGColorModePKS_(%struct.LodePNGColorMode* %color1, %struct.LodePNGColorMode* %color2)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %9 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %10 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %10, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %11 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  %12 = bitcast i32* %error3 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #16
  %13 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %14 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %call4 = call i32 @_ZL16LodePNGText_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %13, %struct.LodePNGInfo* %14)
  store i32 %call4, i32* %error3, align 4, !tbaa !8
  %15 = load i32, i32* %error3, align 4, !tbaa !8
  %tobool5 = icmp ne i32 %15, 0
  br i1 %tobool5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %cleanup.cont
  %16 = load i32, i32* %error3, align 4, !tbaa !8
  store i32 %16, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup8

if.end7:                                          ; preds = %cleanup.cont
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup8

cleanup8:                                         ; preds = %if.end7, %if.then6
  %17 = bitcast i32* %error3 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #16
  %cleanup.dest9 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest9, label %unreachable [
    i32 0, label %cleanup.cont10
    i32 1, label %return
  ]

cleanup.cont10:                                   ; preds = %cleanup8
  %18 = bitcast i32* %error11 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #16
  %19 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %20 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %call12 = call i32 @_ZL17LodePNGIText_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %19, %struct.LodePNGInfo* %20)
  store i32 %call12, i32* %error11, align 4, !tbaa !8
  %21 = load i32, i32* %error11, align 4, !tbaa !8
  %tobool13 = icmp ne i32 %21, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %cleanup.cont10
  %22 = load i32, i32* %error11, align 4, !tbaa !8
  store i32 %22, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup16

if.end15:                                         ; preds = %cleanup.cont10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup16

cleanup16:                                        ; preds = %if.end15, %if.then14
  %23 = bitcast i32* %error11 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %23) #16
  %cleanup.dest17 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest17, label %unreachable [
    i32 0, label %cleanup.cont18
    i32 1, label %return
  ]

cleanup.cont18:                                   ; preds = %cleanup16
  %24 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %iccp_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %24, i32 0, i32 35
  %25 = load i32, i32* %iccp_defined, align 8, !tbaa !74
  %tobool19 = icmp ne i32 %25, 0
  br i1 %tobool19, label %if.then20, label %if.end29

if.then20:                                        ; preds = %cleanup.cont18
  %26 = bitcast i32* %error21 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %26) #16
  %27 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %28 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %iccp_name = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %28, i32 0, i32 36
  %29 = load i8*, i8** %iccp_name, align 8, !tbaa !73
  %30 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %iccp_profile = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %30, i32 0, i32 37
  %31 = load i8*, i8** %iccp_profile, align 8, !tbaa !75
  %32 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %iccp_profile_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %32, i32 0, i32 38
  %33 = load i32, i32* %iccp_profile_size, align 8, !tbaa !76
  %call22 = call i32 @_ZL18lodepng_assign_iccP11LodePNGInfoPKcPKhj(%struct.LodePNGInfo* %27, i8* %29, i8* %31, i32 %33)
  store i32 %call22, i32* %error21, align 4, !tbaa !8
  %34 = load i32, i32* %error21, align 4, !tbaa !8
  %tobool23 = icmp ne i32 %34, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.then20
  %35 = load i32, i32* %error21, align 4, !tbaa !8
  store i32 %35, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup26

if.end25:                                         ; preds = %if.then20
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup26

cleanup26:                                        ; preds = %if.end25, %if.then24
  %36 = bitcast i32* %error21 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %36) #16
  %cleanup.dest27 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest27, label %unreachable [
    i32 0, label %cleanup.cont28
    i32 1, label %return
  ]

cleanup.cont28:                                   ; preds = %cleanup26
  br label %if.end29

if.end29:                                         ; preds = %cleanup.cont28, %cleanup.cont18
  %37 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  call void @_ZL25LodePNGUnknownChunks_initP11LodePNGInfo(%struct.LodePNGInfo* %37)
  %38 = bitcast i32* %error30 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %38) #16
  %39 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %40 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %call31 = call i32 @_ZL25LodePNGUnknownChunks_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %39, %struct.LodePNGInfo* %40)
  store i32 %call31, i32* %error30, align 4, !tbaa !8
  %41 = load i32, i32* %error30, align 4, !tbaa !8
  %tobool32 = icmp ne i32 %41, 0
  br i1 %tobool32, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end29
  %42 = load i32, i32* %error30, align 4, !tbaa !8
  store i32 %42, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup35

if.end34:                                         ; preds = %if.end29
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup35

cleanup35:                                        ; preds = %if.end34, %if.then33
  %43 = bitcast i32* %error30 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %43) #16
  %cleanup.dest36 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest36, label %unreachable [
    i32 0, label %cleanup.cont37
    i32 1, label %return
  ]

cleanup.cont37:                                   ; preds = %cleanup35
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cleanup.cont37, %cleanup35, %cleanup26, %cleanup16, %cleanup8, %cleanup
  %44 = load i32, i32* %retval, align 4
  ret i32 %44

unreachable:                                      ; preds = %cleanup35, %cleanup26, %cleanup16, %cleanup8, %cleanup
  unreachable
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL16LodePNGText_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %dest, %struct.LodePNGInfo* %source) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca %struct.LodePNGInfo*, align 8
  %source.addr = alloca %struct.LodePNGInfo*, align 8
  %i = alloca i64, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGInfo* %dest, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %source, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %text_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 9
  store i8** null, i8*** %text_keys, align 8, !tbaa !63
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %text_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 10
  store i8** null, i8*** %text_strings, align 8, !tbaa !67
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %text_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 8
  store i64 0, i64* %text_num, align 8, !tbaa !66
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i, align 8, !tbaa !6
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %text_num1 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 8
  %6 = load i64, i64* %text_num1, align 8, !tbaa !66
  %cmp = icmp ne i64 %4, %6
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #16
  %8 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %9 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %text_keys2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %9, i32 0, i32 9
  %10 = load i8**, i8*** %text_keys2, align 8, !tbaa !63
  %11 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %10, i64 %11
  %12 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %13 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %text_strings3 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %13, i32 0, i32 10
  %14 = load i8**, i8*** %text_strings3, align 8, !tbaa !67
  %15 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx4 = getelementptr inbounds i8*, i8** %14, i64 %15
  %16 = load i8*, i8** %arrayidx4, align 8, !tbaa !2
  %call = call i32 @_Z16lodepng_add_textP11LodePNGInfoPKcS2_(%struct.LodePNGInfo* %8, i8* %12, i8* %16)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %17 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %18 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %18, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %19 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %19) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup5 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %20 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %20, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup5

cleanup5:                                         ; preds = %for.end, %cleanup
  %21 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #16
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL17LodePNGIText_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %dest, %struct.LodePNGInfo* %source) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca %struct.LodePNGInfo*, align 8
  %source.addr = alloca %struct.LodePNGInfo*, align 8
  %i = alloca i64, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGInfo* %dest, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %source, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %itext_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 12
  store i8** null, i8*** %itext_keys, align 8, !tbaa !69
  %2 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %itext_langtags = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %2, i32 0, i32 13
  store i8** null, i8*** %itext_langtags, align 8, !tbaa !70
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %itext_transkeys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 14
  store i8** null, i8*** %itext_transkeys, align 8, !tbaa !71
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %itext_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 15
  store i8** null, i8*** %itext_strings, align 8, !tbaa !72
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %itext_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 11
  store i64 0, i64* %itext_num, align 8, !tbaa !68
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %itext_num1 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 11
  %8 = load i64, i64* %itext_num1, align 8, !tbaa !68
  %cmp = icmp ne i64 %6, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #16
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %11 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %itext_keys2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %11, i32 0, i32 12
  %12 = load i8**, i8*** %itext_keys2, align 8, !tbaa !69
  %13 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 %13
  %14 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %15 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %itext_langtags3 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %15, i32 0, i32 13
  %16 = load i8**, i8*** %itext_langtags3, align 8, !tbaa !70
  %17 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx4 = getelementptr inbounds i8*, i8** %16, i64 %17
  %18 = load i8*, i8** %arrayidx4, align 8, !tbaa !2
  %19 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %itext_transkeys5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %19, i32 0, i32 14
  %20 = load i8**, i8*** %itext_transkeys5, align 8, !tbaa !71
  %21 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx6 = getelementptr inbounds i8*, i8** %20, i64 %21
  %22 = load i8*, i8** %arrayidx6, align 8, !tbaa !2
  %23 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %source.addr, align 8, !tbaa !2
  %itext_strings7 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %23, i32 0, i32 15
  %24 = load i8**, i8*** %itext_strings7, align 8, !tbaa !72
  %25 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx8 = getelementptr inbounds i8*, i8** %24, i64 %25
  %26 = load i8*, i8** %arrayidx8, align 8, !tbaa !2
  %call = call i32 @_Z17lodepng_add_itextP11LodePNGInfoPKcS2_S2_S2_(%struct.LodePNGInfo* %10, i8* %14, i8* %18, i8* %22, i8* %26)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %27 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %28 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %28, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %29 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %29) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup9 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %30 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %30, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup9

cleanup9:                                         ; preds = %for.end, %cleanup
  %31 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #16
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL25LodePNGUnknownChunks_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %dest, %struct.LodePNGInfo* %src) #0 {
entry:
  %retval = alloca i32, align 4
  %dest.addr = alloca %struct.LodePNGInfo*, align 8
  %src.addr = alloca %struct.LodePNGInfo*, align 8
  %i = alloca i32, align 4
  %j = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGInfo* %dest, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %src, %struct.LodePNGInfo** %src.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  call void @_ZL28LodePNGUnknownChunks_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %1)
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc30, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ne i32 %2, 3
  br i1 %cmp, label %for.body, label %for.end32

for.body:                                         ; preds = %for.cond
  %3 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %src.addr, align 8, !tbaa !2
  %unknown_chunks_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 40
  %5 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %5 to i64
  %arrayidx = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size, i64 0, i64 %idxprom
  %6 = load i64, i64* %arrayidx, align 8, !tbaa !6
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %unknown_chunks_size1 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 40
  %8 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom2 = zext i32 %8 to i64
  %arrayidx3 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size1, i64 0, i64 %idxprom2
  store i64 %6, i64* %arrayidx3, align 8, !tbaa !6
  %9 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %src.addr, align 8, !tbaa !2
  %unknown_chunks_size4 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %9, i32 0, i32 40
  %10 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom5 = zext i32 %10 to i64
  %arrayidx6 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size4, i64 0, i64 %idxprom5
  %11 = load i64, i64* %arrayidx6, align 8, !tbaa !6
  %call = call i8* @_ZL14lodepng_mallocm(i64 %11)
  %12 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %unknown_chunks_data = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %12, i32 0, i32 39
  %13 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom7 = zext i32 %13 to i64
  %arrayidx8 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data, i64 0, i64 %idxprom7
  store i8* %call, i8** %arrayidx8, align 8, !tbaa !2
  %14 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %unknown_chunks_data9 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %14, i32 0, i32 39
  %15 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom10 = zext i32 %15 to i64
  %arrayidx11 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data9, i64 0, i64 %idxprom10
  %16 = load i8*, i8** %arrayidx11, align 8, !tbaa !2
  %tobool = icmp ne i8* %16, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %unknown_chunks_size12 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %17, i32 0, i32 40
  %18 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom13 = zext i32 %18 to i64
  %arrayidx14 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size12, i64 0, i64 %idxprom13
  %19 = load i64, i64* %arrayidx14, align 8, !tbaa !6
  %tobool15 = icmp ne i64 %19, 0
  br i1 %tobool15, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %for.body
  store i64 0, i64* %j, align 8, !tbaa !6
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc, %if.end
  %20 = load i64, i64* %j, align 8, !tbaa !6
  %21 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %src.addr, align 8, !tbaa !2
  %unknown_chunks_size17 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %21, i32 0, i32 40
  %22 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom18 = zext i32 %22 to i64
  %arrayidx19 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size17, i64 0, i64 %idxprom18
  %23 = load i64, i64* %arrayidx19, align 8, !tbaa !6
  %cmp20 = icmp ult i64 %20, %23
  br i1 %cmp20, label %for.body21, label %for.end

for.body21:                                       ; preds = %for.cond16
  %24 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %src.addr, align 8, !tbaa !2
  %unknown_chunks_data22 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %24, i32 0, i32 39
  %25 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom23 = zext i32 %25 to i64
  %arrayidx24 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data22, i64 0, i64 %idxprom23
  %26 = load i8*, i8** %arrayidx24, align 8, !tbaa !2
  %27 = load i64, i64* %j, align 8, !tbaa !6
  %arrayidx25 = getelementptr inbounds i8, i8* %26, i64 %27
  %28 = load i8, i8* %arrayidx25, align 1, !tbaa !16
  %29 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %dest.addr, align 8, !tbaa !2
  %unknown_chunks_data26 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %29, i32 0, i32 39
  %30 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom27 = zext i32 %30 to i64
  %arrayidx28 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data26, i64 0, i64 %idxprom27
  %31 = load i8*, i8** %arrayidx28, align 8, !tbaa !2
  %32 = load i64, i64* %j, align 8, !tbaa !6
  %arrayidx29 = getelementptr inbounds i8, i8* %31, i64 %32
  store i8 %28, i8* %arrayidx29, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body21
  %33 = load i64, i64* %j, align 8, !tbaa !6
  %inc = add i64 %33, 1
  store i64 %inc, i64* %j, align 8, !tbaa !6
  br label %for.cond16

for.end:                                          ; preds = %for.cond16
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %34 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup33 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc30

for.inc30:                                        ; preds = %cleanup.cont
  %35 = load i32, i32* %i, align 4, !tbaa !8
  %inc31 = add i32 %35, 1
  store i32 %inc31, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end32:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup33

cleanup33:                                        ; preds = %for.end32, %cleanup
  %36 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %36) #16
  %37 = load i32, i32* %retval, align 4
  ret i32 %37
}

; Function Attrs: ssp uwtable
define i32 @_Z15lodepng_convertPhPKhPK16LodePNGColorModeS4_jj(i8* %out, i8* %in, %struct.LodePNGColorMode* %mode_out, %struct.LodePNGColorMode* %mode_in, i32 %w, i32 %h) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %mode_out.addr = alloca %struct.LodePNGColorMode*, align 8
  %mode_in.addr = alloca %struct.LodePNGColorMode*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %tree = alloca %struct.ColorTree, align 8
  %numpixels = alloca i64, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %numbytes = alloca i64, align 8
  %palettesize = alloca i64, align 8
  %palette10 = alloca i8*, align 8
  %palsize = alloca i64, align 8
  %numbytes23 = alloca i64, align 8
  %p = alloca i8*, align 8
  %r = alloca i16, align 2
  %g = alloca i16, align 2
  %b = alloca i16, align 2
  %a = alloca i16, align 2
  %r75 = alloca i8, align 1
  %g76 = alloca i8, align 1
  %b77 = alloca i8, align 1
  %a78 = alloca i8, align 1
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %mode_out, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %mode_in, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast %struct.ColorTree* %tree to i8*
  call void @llvm.lifetime.start(i64 136, i8* %1) #16
  %2 = bitcast i64* %numpixels to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = load i32, i32* %w.addr, align 4, !tbaa !8
  %conv = zext i32 %3 to i64
  %4 = load i32, i32* %h.addr, align 4, !tbaa !8
  %conv1 = zext i32 %4 to i64
  %mul = mul i64 %conv, %conv1
  store i64 %mul, i64* %numpixels, align 8, !tbaa !6
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %6 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i32 0, i32 0
  %7 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %7, 3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %8, i32 0, i32 2
  %9 = load i8*, i8** %palette, align 8, !tbaa !60
  %tobool = icmp ne i8* %9, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i32 107, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup97

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %11 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %call = call i32 @_ZL24lodepng_color_mode_equalPK16LodePNGColorModeS1_(%struct.LodePNGColorMode* %10, %struct.LodePNGColorMode* %11)
  %tobool2 = icmp ne i32 %call, 0
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %12 = bitcast i64* %numbytes to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #16
  %13 = load i32, i32* %w.addr, align 4, !tbaa !8
  %14 = load i32, i32* %h.addr, align 4, !tbaa !8
  %15 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %call4 = call i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 %13, i32 %14, %struct.LodePNGColorMode* %15)
  store i64 %call4, i64* %numbytes, align 8, !tbaa !6
  %16 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %17 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %18 = load i64, i64* %numbytes, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %16, i8* %17, i64 %18)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  %19 = bitcast i64* %numbytes to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  br label %cleanup97

if.end5:                                          ; preds = %if.end
  %20 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %20, i32 0, i32 0
  %21 = load i32, i32* %colortype6, align 8, !tbaa !58
  %cmp7 = icmp eq i32 %21, 3
  br i1 %cmp7, label %if.then8, label %if.end46

if.then8:                                         ; preds = %if.end5
  %22 = bitcast i64* %palettesize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #16
  %23 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %palettesize9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %23, i32 0, i32 3
  %24 = load i64, i64* %palettesize9, align 8, !tbaa !61
  store i64 %24, i64* %palettesize, align 8, !tbaa !6
  %25 = bitcast i8** %palette10 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #16
  %26 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %palette11 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %26, i32 0, i32 2
  %27 = load i8*, i8** %palette11, align 8, !tbaa !60
  store i8* %27, i8** %palette10, align 8, !tbaa !2
  %28 = bitcast i64* %palsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %28) #16
  %29 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %29, i32 0, i32 1
  %30 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %sh_prom = zext i32 %30 to i64
  %shl = shl i64 1, %sh_prom
  store i64 %shl, i64* %palsize, align 8, !tbaa !6
  %31 = load i64, i64* %palettesize, align 8, !tbaa !6
  %cmp12 = icmp eq i64 %31, 0
  br i1 %cmp12, label %if.then13, label %if.end26

if.then13:                                        ; preds = %if.then8
  %32 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %palettesize14 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %32, i32 0, i32 3
  %33 = load i64, i64* %palettesize14, align 8, !tbaa !61
  store i64 %33, i64* %palettesize, align 8, !tbaa !6
  %34 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %palette15 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %34, i32 0, i32 2
  %35 = load i8*, i8** %palette15, align 8, !tbaa !60
  store i8* %35, i8** %palette10, align 8, !tbaa !2
  %36 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %colortype16 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %36, i32 0, i32 0
  %37 = load i32, i32* %colortype16, align 8, !tbaa !58
  %cmp17 = icmp eq i32 %37, 3
  br i1 %cmp17, label %land.lhs.true18, label %if.end25

land.lhs.true18:                                  ; preds = %if.then13
  %38 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %bitdepth19 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %38, i32 0, i32 1
  %39 = load i32, i32* %bitdepth19, align 4, !tbaa !59
  %40 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth20 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %40, i32 0, i32 1
  %41 = load i32, i32* %bitdepth20, align 4, !tbaa !59
  %cmp21 = icmp eq i32 %39, %41
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %land.lhs.true18
  %42 = bitcast i64* %numbytes23 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %42) #16
  %43 = load i32, i32* %w.addr, align 4, !tbaa !8
  %44 = load i32, i32* %h.addr, align 4, !tbaa !8
  %45 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %call24 = call i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 %43, i32 %44, %struct.LodePNGColorMode* %45)
  store i64 %call24, i64* %numbytes23, align 8, !tbaa !6
  %46 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %47 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %48 = load i64, i64* %numbytes23, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %46, i8* %47, i64 %48)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  %49 = bitcast i64* %numbytes23 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %49) #16
  br label %cleanup41

if.end25:                                         ; preds = %land.lhs.true18, %if.then13
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then8
  %50 = load i64, i64* %palettesize, align 8, !tbaa !6
  %51 = load i64, i64* %palsize, align 8, !tbaa !6
  %cmp27 = icmp ult i64 %50, %51
  br i1 %cmp27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end26
  %52 = load i64, i64* %palettesize, align 8, !tbaa !6
  store i64 %52, i64* %palsize, align 8, !tbaa !6
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %if.end26
  call void @_ZL15color_tree_initP9ColorTree(%struct.ColorTree* %tree)
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end29
  %53 = load i64, i64* %i, align 8, !tbaa !6
  %54 = load i64, i64* %palsize, align 8, !tbaa !6
  %cmp30 = icmp ne i64 %53, %54
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %55 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %55) #16
  %56 = load i8*, i8** %palette10, align 8, !tbaa !2
  %57 = load i64, i64* %i, align 8, !tbaa !6
  %mul31 = mul i64 %57, 4
  %arrayidx = getelementptr inbounds i8, i8* %56, i64 %mul31
  store i8* %arrayidx, i8** %p, align 8, !tbaa !2
  %58 = load i8*, i8** %p, align 8, !tbaa !2
  %arrayidx32 = getelementptr inbounds i8, i8* %58, i64 0
  %59 = load i8, i8* %arrayidx32, align 1, !tbaa !16
  %60 = load i8*, i8** %p, align 8, !tbaa !2
  %arrayidx33 = getelementptr inbounds i8, i8* %60, i64 1
  %61 = load i8, i8* %arrayidx33, align 1, !tbaa !16
  %62 = load i8*, i8** %p, align 8, !tbaa !2
  %arrayidx34 = getelementptr inbounds i8, i8* %62, i64 2
  %63 = load i8, i8* %arrayidx34, align 1, !tbaa !16
  %64 = load i8*, i8** %p, align 8, !tbaa !2
  %arrayidx35 = getelementptr inbounds i8, i8* %64, i64 3
  %65 = load i8, i8* %arrayidx35, align 1, !tbaa !16
  %66 = load i64, i64* %i, align 8, !tbaa !6
  %conv36 = trunc i64 %66 to i32
  %call37 = call i32 @_ZL14color_tree_addP9ColorTreehhhhj(%struct.ColorTree* %tree, i8 zeroext %59, i8 zeroext %61, i8 zeroext %63, i8 zeroext %65, i32 %conv36)
  store i32 %call37, i32* %error, align 4, !tbaa !8
  %67 = load i32, i32* %error, align 4, !tbaa !8
  %tobool38 = icmp ne i32 %67, 0
  br i1 %tobool38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %for.body
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end40:                                         ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end40, %if.then39
  %68 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %68) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 2, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %69 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %69, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %cleanup, %for.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup41

cleanup41:                                        ; preds = %for.end, %if.then22
  %70 = bitcast i64* %palsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %70) #16
  %71 = bitcast i8** %palette10 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %71) #16
  %72 = bitcast i64* %palettesize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %72) #16
  %cleanup.dest44 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest44, label %cleanup97 [
    i32 0, label %cleanup.cont45
  ]

cleanup.cont45:                                   ; preds = %cleanup41
  br label %if.end46

if.end46:                                         ; preds = %cleanup.cont45, %if.end5
  %73 = load i32, i32* %error, align 4, !tbaa !8
  %tobool47 = icmp ne i32 %73, 0
  br i1 %tobool47, label %if.end92, label %if.then48

if.then48:                                        ; preds = %if.end46
  %74 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %bitdepth49 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %74, i32 0, i32 1
  %75 = load i32, i32* %bitdepth49, align 4, !tbaa !59
  %cmp50 = icmp eq i32 %75, 16
  br i1 %cmp50, label %land.lhs.true51, label %if.else

land.lhs.true51:                                  ; preds = %if.then48
  %76 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth52 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %76, i32 0, i32 1
  %77 = load i32, i32* %bitdepth52, align 4, !tbaa !59
  %cmp53 = icmp eq i32 %77, 16
  br i1 %cmp53, label %if.then54, label %if.else

if.then54:                                        ; preds = %land.lhs.true51
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc58, %if.then54
  %78 = load i64, i64* %i, align 8, !tbaa !6
  %79 = load i64, i64* %numpixels, align 8, !tbaa !6
  %cmp56 = icmp ne i64 %78, %79
  br i1 %cmp56, label %for.body57, label %for.end60

for.body57:                                       ; preds = %for.cond55
  %80 = bitcast i16* %r to i8*
  call void @llvm.lifetime.start(i64 2, i8* %80) #16
  store i16 0, i16* %r, align 2, !tbaa !89
  %81 = bitcast i16* %g to i8*
  call void @llvm.lifetime.start(i64 2, i8* %81) #16
  store i16 0, i16* %g, align 2, !tbaa !89
  %82 = bitcast i16* %b to i8*
  call void @llvm.lifetime.start(i64 2, i8* %82) #16
  store i16 0, i16* %b, align 2, !tbaa !89
  %83 = bitcast i16* %a to i8*
  call void @llvm.lifetime.start(i64 2, i8* %83) #16
  store i16 0, i16* %a, align 2, !tbaa !89
  %84 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %85 = load i64, i64* %i, align 8, !tbaa !6
  %86 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* %r, i16* %g, i16* %b, i16* %a, i8* %84, i64 %85, %struct.LodePNGColorMode* %86)
  %87 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %88 = load i64, i64* %i, align 8, !tbaa !6
  %89 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %90 = load i16, i16* %r, align 2, !tbaa !89
  %91 = load i16, i16* %g, align 2, !tbaa !89
  %92 = load i16, i16* %b, align 2, !tbaa !89
  %93 = load i16, i16* %a, align 2, !tbaa !89
  call void @_ZL13rgba16ToPixelPhmPK16LodePNGColorModetttt(i8* %87, i64 %88, %struct.LodePNGColorMode* %89, i16 zeroext %90, i16 zeroext %91, i16 zeroext %92, i16 zeroext %93)
  %94 = bitcast i16* %a to i8*
  call void @llvm.lifetime.end(i64 2, i8* %94) #16
  %95 = bitcast i16* %b to i8*
  call void @llvm.lifetime.end(i64 2, i8* %95) #16
  %96 = bitcast i16* %g to i8*
  call void @llvm.lifetime.end(i64 2, i8* %96) #16
  %97 = bitcast i16* %r to i8*
  call void @llvm.lifetime.end(i64 2, i8* %97) #16
  br label %for.inc58

for.inc58:                                        ; preds = %for.body57
  %98 = load i64, i64* %i, align 8, !tbaa !6
  %inc59 = add i64 %98, 1
  store i64 %inc59, i64* %i, align 8, !tbaa !6
  br label %for.cond55

for.end60:                                        ; preds = %for.cond55
  br label %if.end91

if.else:                                          ; preds = %land.lhs.true51, %if.then48
  %99 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth61 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %99, i32 0, i32 1
  %100 = load i32, i32* %bitdepth61, align 4, !tbaa !59
  %cmp62 = icmp eq i32 %100, 8
  br i1 %cmp62, label %land.lhs.true63, label %if.else67

land.lhs.true63:                                  ; preds = %if.else
  %101 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype64 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %101, i32 0, i32 0
  %102 = load i32, i32* %colortype64, align 8, !tbaa !58
  %cmp65 = icmp eq i32 %102, 6
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %land.lhs.true63
  %103 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %104 = load i64, i64* %numpixels, align 8, !tbaa !6
  %105 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %106 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL19getPixelColorsRGBA8PhmPKhPK16LodePNGColorMode(i8* %103, i64 %104, i8* %105, %struct.LodePNGColorMode* %106)
  br label %if.end90

if.else67:                                        ; preds = %land.lhs.true63, %if.else
  %107 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth68 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %107, i32 0, i32 1
  %108 = load i32, i32* %bitdepth68, align 4, !tbaa !59
  %cmp69 = icmp eq i32 %108, 8
  br i1 %cmp69, label %land.lhs.true70, label %if.else74

land.lhs.true70:                                  ; preds = %if.else67
  %109 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype71 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %109, i32 0, i32 0
  %110 = load i32, i32* %colortype71, align 8, !tbaa !58
  %cmp72 = icmp eq i32 %110, 2
  br i1 %cmp72, label %if.then73, label %if.else74

if.then73:                                        ; preds = %land.lhs.true70
  %111 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %112 = load i64, i64* %numpixels, align 8, !tbaa !6
  %113 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %114 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL18getPixelColorsRGB8PhmPKhPK16LodePNGColorMode(i8* %111, i64 %112, i8* %113, %struct.LodePNGColorMode* %114)
  br label %if.end89

if.else74:                                        ; preds = %land.lhs.true70, %if.else67
  call void @llvm.lifetime.start(i64 1, i8* %r75) #16
  store i8 0, i8* %r75, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %g76) #16
  store i8 0, i8* %g76, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %b77) #16
  store i8 0, i8* %b77, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %a78) #16
  store i8 0, i8* %a78, align 1, !tbaa !16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond79

for.cond79:                                       ; preds = %for.inc86, %if.else74
  %115 = load i64, i64* %i, align 8, !tbaa !6
  %116 = load i64, i64* %numpixels, align 8, !tbaa !6
  %cmp80 = icmp ne i64 %115, %116
  br i1 %cmp80, label %for.body81, label %for.end88

for.body81:                                       ; preds = %for.cond79
  %117 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %118 = load i64, i64* %i, align 8, !tbaa !6
  %119 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL18getPixelColorRGBA8PhS_S_S_PKhmPK16LodePNGColorMode(i8* %r75, i8* %g76, i8* %b77, i8* %a78, i8* %117, i64 %118, %struct.LodePNGColorMode* %119)
  %120 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %121 = load i64, i64* %i, align 8, !tbaa !6
  %122 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %123 = load i8, i8* %r75, align 1, !tbaa !16
  %124 = load i8, i8* %g76, align 1, !tbaa !16
  %125 = load i8, i8* %b77, align 1, !tbaa !16
  %126 = load i8, i8* %a78, align 1, !tbaa !16
  %call82 = call i32 @_ZL12rgba8ToPixelPhmPK16LodePNGColorModeP9ColorTreehhhh(i8* %120, i64 %121, %struct.LodePNGColorMode* %122, %struct.ColorTree* %tree, i8 zeroext %123, i8 zeroext %124, i8 zeroext %125, i8 zeroext %126)
  store i32 %call82, i32* %error, align 4, !tbaa !8
  %127 = load i32, i32* %error, align 4, !tbaa !8
  %tobool83 = icmp ne i32 %127, 0
  br i1 %tobool83, label %if.then84, label %if.end85

if.then84:                                        ; preds = %for.body81
  br label %for.end88

if.end85:                                         ; preds = %for.body81
  br label %for.inc86

for.inc86:                                        ; preds = %if.end85
  %128 = load i64, i64* %i, align 8, !tbaa !6
  %inc87 = add i64 %128, 1
  store i64 %inc87, i64* %i, align 8, !tbaa !6
  br label %for.cond79

for.end88:                                        ; preds = %if.then84, %for.cond79
  call void @llvm.lifetime.end(i64 1, i8* %a78) #16
  call void @llvm.lifetime.end(i64 1, i8* %b77) #16
  call void @llvm.lifetime.end(i64 1, i8* %g76) #16
  call void @llvm.lifetime.end(i64 1, i8* %r75) #16
  br label %if.end89

if.end89:                                         ; preds = %for.end88, %if.then73
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.then66
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %for.end60
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.end46
  %129 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype93 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %129, i32 0, i32 0
  %130 = load i32, i32* %colortype93, align 8, !tbaa !58
  %cmp94 = icmp eq i32 %130, 3
  br i1 %cmp94, label %if.then95, label %if.end96

if.then95:                                        ; preds = %if.end92
  call void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* %tree)
  br label %if.end96

if.end96:                                         ; preds = %if.then95, %if.end92
  %131 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %131, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup97

cleanup97:                                        ; preds = %if.end96, %cleanup41, %if.then3, %if.then
  %132 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %132) #16
  %133 = bitcast i64* %numpixels to i8*
  call void @llvm.lifetime.end(i64 8, i8* %133) #16
  %134 = bitcast %struct.ColorTree* %tree to i8*
  call void @llvm.lifetime.end(i64 136, i8* %134) #16
  %135 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %135) #16
  %136 = load i32, i32* %retval, align 4
  ret i32 %136

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL24lodepng_color_mode_equalPK16LodePNGColorModeS1_(%struct.LodePNGColorMode* %a, %struct.LodePNGColorMode* %b) #4 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.LodePNGColorMode*, align 8
  %b.addr = alloca %struct.LodePNGColorMode*, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGColorMode* %a, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %b, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i32 0, i32 0
  %2 = load i32, i32* %colortype, align 8, !tbaa !58
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %colortype1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i32 0, i32 0
  %4 = load i32, i32* %colortype1, align 8, !tbaa !58
  %cmp = icmp ne i32 %2, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %5, i32 0, i32 1
  %6 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %7 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %bitdepth2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i32 0, i32 1
  %8 = load i32, i32* %bitdepth2, align 4, !tbaa !59
  %cmp3 = icmp ne i32 %6, %8
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %9 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %9, i32 0, i32 4
  %10 = load i32, i32* %key_defined, align 8, !tbaa !52
  %11 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %key_defined6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i32 0, i32 4
  %12 = load i32, i32* %key_defined6, align 8, !tbaa !52
  %cmp7 = icmp ne i32 %10, %12
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end5
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.end5
  %13 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %key_defined10 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %13, i32 0, i32 4
  %14 = load i32, i32* %key_defined10, align 8, !tbaa !52
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %if.then11, label %if.end24

if.then11:                                        ; preds = %if.end9
  %15 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %15, i32 0, i32 5
  %16 = load i32, i32* %key_r, align 4, !tbaa !57
  %17 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %key_r12 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %17, i32 0, i32 5
  %18 = load i32, i32* %key_r12, align 4, !tbaa !57
  %cmp13 = icmp ne i32 %16, %18
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then11
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end15:                                         ; preds = %if.then11
  %19 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %19, i32 0, i32 6
  %20 = load i32, i32* %key_g, align 8, !tbaa !56
  %21 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %key_g16 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %21, i32 0, i32 6
  %22 = load i32, i32* %key_g16, align 8, !tbaa !56
  %cmp17 = icmp ne i32 %20, %22
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end15
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end19:                                         ; preds = %if.end15
  %23 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %23, i32 0, i32 7
  %24 = load i32, i32* %key_b, align 4, !tbaa !55
  %25 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %key_b20 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %25, i32 0, i32 7
  %26 = load i32, i32* %key_b20, align 4, !tbaa !55
  %cmp21 = icmp ne i32 %24, %26
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end19
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end23:                                         ; preds = %if.end19
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end9
  %27 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %27, i32 0, i32 3
  %28 = load i64, i64* %palettesize, align 8, !tbaa !61
  %29 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %palettesize25 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %29, i32 0, i32 3
  %30 = load i64, i64* %palettesize25, align 8, !tbaa !61
  %cmp26 = icmp ne i64 %28, %30
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end28:                                         ; preds = %if.end24
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end28
  %31 = load i64, i64* %i, align 8, !tbaa !6
  %32 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %palettesize29 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %32, i32 0, i32 3
  %33 = load i64, i64* %palettesize29, align 8, !tbaa !61
  %mul = mul i64 %33, 4
  %cmp30 = icmp ne i64 %31, %mul
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %a.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %34, i32 0, i32 2
  %35 = load i8*, i8** %palette, align 8, !tbaa !60
  %36 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %35, i64 %36
  %37 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %37 to i32
  %38 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %b.addr, align 8, !tbaa !2
  %palette31 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %38, i32 0, i32 2
  %39 = load i8*, i8** %palette31, align 8, !tbaa !60
  %40 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx32 = getelementptr inbounds i8, i8* %39, i64 %40
  %41 = load i8, i8* %arrayidx32, align 1, !tbaa !16
  %conv33 = zext i8 %41 to i32
  %cmp34 = icmp ne i32 %conv, %conv33
  br i1 %cmp34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %for.body
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end36:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end36
  %42 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %42, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then35, %if.then27, %if.then22, %if.then18, %if.then14, %if.then8, %if.then4, %if.then
  %43 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %43) #16
  %44 = load i32, i32* %retval, align 4
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15color_tree_initP9ColorTree(%struct.ColorTree* %tree) #4 {
entry:
  %tree.addr = alloca %struct.ColorTree*, align 8
  store %struct.ColorTree* %tree, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %0 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %0, i32 0, i32 0
  %arraydecay = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children, i32 0, i32 0
  %1 = bitcast %struct.ColorTree** %arraydecay to i8*
  call void @_ZL14lodepng_memsetPvim(i8* %1, i32 0, i64 128)
  %2 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %index = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %2, i32 0, i32 1
  store i32 -1, i32* %index, align 8, !tbaa !91
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL14color_tree_addP9ColorTreehhhhj(%struct.ColorTree* %tree, i8 zeroext %r, i8 zeroext %g, i8 zeroext %b, i8 zeroext %a, i32 %index) #0 {
entry:
  %retval = alloca i32, align 4
  %tree.addr = alloca %struct.ColorTree*, align 8
  %r.addr = alloca i8, align 1
  %g.addr = alloca i8, align 1
  %b.addr = alloca i8, align 1
  %a.addr = alloca i8, align 1
  %index.addr = alloca i32, align 4
  %bit = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ColorTree* %tree, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  store i8 %r, i8* %r.addr, align 1, !tbaa !16
  store i8 %g, i8* %g.addr, align 1, !tbaa !16
  store i8 %b, i8* %b.addr, align 1, !tbaa !16
  store i8 %a, i8* %a.addr, align 1, !tbaa !16
  store i32 %index, i32* %index.addr, align 4, !tbaa !8
  %0 = bitcast i32* %bit to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %bit, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %bit, align 4, !tbaa !8
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8, i8* %r.addr, align 1, !tbaa !16
  %conv = zext i8 %3 to i32
  %4 = load i32, i32* %bit, align 4, !tbaa !8
  %shr = ashr i32 %conv, %4
  %and = and i32 %shr, 1
  %mul = mul nsw i32 8, %and
  %5 = load i8, i8* %g.addr, align 1, !tbaa !16
  %conv1 = zext i8 %5 to i32
  %6 = load i32, i32* %bit, align 4, !tbaa !8
  %shr2 = ashr i32 %conv1, %6
  %and3 = and i32 %shr2, 1
  %mul4 = mul nsw i32 4, %and3
  %add = add nsw i32 %mul, %mul4
  %7 = load i8, i8* %b.addr, align 1, !tbaa !16
  %conv5 = zext i8 %7 to i32
  %8 = load i32, i32* %bit, align 4, !tbaa !8
  %shr6 = ashr i32 %conv5, %8
  %and7 = and i32 %shr6, 1
  %mul8 = mul nsw i32 2, %and7
  %add9 = add nsw i32 %add, %mul8
  %9 = load i8, i8* %a.addr, align 1, !tbaa !16
  %conv10 = zext i8 %9 to i32
  %10 = load i32, i32* %bit, align 4, !tbaa !8
  %shr11 = ashr i32 %conv10, %10
  %and12 = and i32 %shr11, 1
  %mul13 = mul nsw i32 1, %and12
  %add14 = add nsw i32 %add9, %mul13
  store i32 %add14, i32* %i, align 4, !tbaa !8
  %11 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %11, i32 0, i32 0
  %12 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children, i64 0, i64 %idxprom
  %13 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx, align 8, !tbaa !2
  %tobool = icmp ne %struct.ColorTree* %13, null
  br i1 %tobool, label %if.end26, label %if.then

if.then:                                          ; preds = %for.body
  %call = call i8* @_ZL14lodepng_mallocm(i64 136)
  %14 = bitcast i8* %call to %struct.ColorTree*
  %15 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children15 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %15, i32 0, i32 0
  %16 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom16 = sext i32 %16 to i64
  %arrayidx17 = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children15, i64 0, i64 %idxprom16
  store %struct.ColorTree* %14, %struct.ColorTree** %arrayidx17, align 8, !tbaa !2
  %17 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children18 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %17, i32 0, i32 0
  %18 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom19 = sext i32 %18 to i64
  %arrayidx20 = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children18, i64 0, i64 %idxprom19
  %19 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx20, align 8, !tbaa !2
  %tobool21 = icmp ne %struct.ColorTree* %19, null
  br i1 %tobool21, label %if.end, label %if.then22

if.then22:                                        ; preds = %if.then
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  %20 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children23 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %20, i32 0, i32 0
  %21 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom24 = sext i32 %21 to i64
  %arrayidx25 = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children23, i64 0, i64 %idxprom24
  %22 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx25, align 8, !tbaa !2
  call void @_ZL15color_tree_initP9ColorTree(%struct.ColorTree* %22)
  br label %if.end26

if.end26:                                         ; preds = %if.end, %for.body
  %23 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children27 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %23, i32 0, i32 0
  %24 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom28 = sext i32 %24 to i64
  %arrayidx29 = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children27, i64 0, i64 %idxprom28
  %25 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx29, align 8, !tbaa !2
  store %struct.ColorTree* %25, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end26, %if.then22
  %26 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %26) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup31 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %27 = load i32, i32* %bit, align 4, !tbaa !8
  %inc = add nsw i32 %27, 1
  store i32 %inc, i32* %bit, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %index.addr, align 4, !tbaa !8
  %29 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %index30 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %29, i32 0, i32 1
  store i32 %28, i32* %index30, align 8, !tbaa !91
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup31

cleanup31:                                        ; preds = %for.end, %cleanup
  %30 = bitcast i32* %bit to i8*
  call void @llvm.lifetime.end(i64 4, i8* %30) #16
  %31 = load i32, i32* %retval, align 4
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* %r, i16* %g, i16* %b, i16* %a, i8* %in, i64 %i, %struct.LodePNGColorMode* %mode) #4 {
entry:
  %r.addr = alloca i16*, align 8
  %g.addr = alloca i16*, align 8
  %b.addr = alloca i16*, align 8
  %a.addr = alloca i16*, align 8
  %in.addr = alloca i8*, align 8
  %i.addr = alloca i64, align 8
  %mode.addr = alloca %struct.LodePNGColorMode*, align 8
  store i16* %r, i16** %r.addr, align 8, !tbaa !2
  store i16* %g, i16** %g.addr, align 8, !tbaa !2
  store i16* %b, i16** %b.addr, align 8, !tbaa !2
  store i16* %a, i16** %a.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %i, i64* %i.addr, align 8, !tbaa !6
  store %struct.LodePNGColorMode* %mode, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else20

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %3 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul = mul i64 %3, 2
  %add = add i64 %mul, 0
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 %add
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %4 to i32
  %mul1 = mul nsw i32 256, %conv
  %5 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %6 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul2 = mul i64 %6, 2
  %add3 = add i64 %mul2, 1
  %arrayidx4 = getelementptr inbounds i8, i8* %5, i64 %add3
  %7 = load i8, i8* %arrayidx4, align 1, !tbaa !16
  %conv5 = zext i8 %7 to i32
  %add6 = add nsw i32 %mul1, %conv5
  %conv7 = trunc i32 %add6 to i16
  %8 = load i16*, i16** %b.addr, align 8, !tbaa !2
  store i16 %conv7, i16* %8, align 2, !tbaa !89
  %9 = load i16*, i16** %g.addr, align 8, !tbaa !2
  store i16 %conv7, i16* %9, align 2, !tbaa !89
  %10 = load i16*, i16** %r.addr, align 8, !tbaa !2
  store i16 %conv7, i16* %10, align 2, !tbaa !89
  %11 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i32 0, i32 4
  %12 = load i32, i32* %key_defined, align 8, !tbaa !52
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %13 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %14 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul8 = mul i64 %14, 2
  %add9 = add i64 %mul8, 0
  %arrayidx10 = getelementptr inbounds i8, i8* %13, i64 %add9
  %15 = load i8, i8* %arrayidx10, align 1, !tbaa !16
  %conv11 = zext i8 %15 to i32
  %mul12 = mul i32 256, %conv11
  %16 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %17 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul13 = mul i64 %17, 2
  %add14 = add i64 %mul13, 1
  %arrayidx15 = getelementptr inbounds i8, i8* %16, i64 %add14
  %18 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %18 to i32
  %add17 = add i32 %mul12, %conv16
  %19 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %19, i32 0, i32 5
  %20 = load i32, i32* %key_r, align 4, !tbaa !57
  %cmp18 = icmp eq i32 %add17, %20
  br i1 %cmp18, label %if.then19, label %if.else

if.then19:                                        ; preds = %land.lhs.true
  %21 = load i16*, i16** %a.addr, align 8, !tbaa !2
  store i16 0, i16* %21, align 2, !tbaa !89
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %if.then
  %22 = load i16*, i16** %a.addr, align 8, !tbaa !2
  store i16 -1, i16* %22, align 2, !tbaa !89
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then19
  br label %if.end176

if.else20:                                        ; preds = %entry
  %23 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype21 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %23, i32 0, i32 0
  %24 = load i32, i32* %colortype21, align 8, !tbaa !58
  %cmp22 = icmp eq i32 %24, 2
  br i1 %cmp22, label %if.then23, label %if.else99

if.then23:                                        ; preds = %if.else20
  %25 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %26 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul24 = mul i64 %26, 6
  %add25 = add i64 %mul24, 0
  %arrayidx26 = getelementptr inbounds i8, i8* %25, i64 %add25
  %27 = load i8, i8* %arrayidx26, align 1, !tbaa !16
  %conv27 = zext i8 %27 to i32
  %mul28 = mul i32 256, %conv27
  %28 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %29 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul29 = mul i64 %29, 6
  %add30 = add i64 %mul29, 1
  %arrayidx31 = getelementptr inbounds i8, i8* %28, i64 %add30
  %30 = load i8, i8* %arrayidx31, align 1, !tbaa !16
  %conv32 = zext i8 %30 to i32
  %add33 = add i32 %mul28, %conv32
  %conv34 = trunc i32 %add33 to i16
  %31 = load i16*, i16** %r.addr, align 8, !tbaa !2
  store i16 %conv34, i16* %31, align 2, !tbaa !89
  %32 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %33 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul35 = mul i64 %33, 6
  %add36 = add i64 %mul35, 2
  %arrayidx37 = getelementptr inbounds i8, i8* %32, i64 %add36
  %34 = load i8, i8* %arrayidx37, align 1, !tbaa !16
  %conv38 = zext i8 %34 to i32
  %mul39 = mul i32 256, %conv38
  %35 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %36 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul40 = mul i64 %36, 6
  %add41 = add i64 %mul40, 3
  %arrayidx42 = getelementptr inbounds i8, i8* %35, i64 %add41
  %37 = load i8, i8* %arrayidx42, align 1, !tbaa !16
  %conv43 = zext i8 %37 to i32
  %add44 = add i32 %mul39, %conv43
  %conv45 = trunc i32 %add44 to i16
  %38 = load i16*, i16** %g.addr, align 8, !tbaa !2
  store i16 %conv45, i16* %38, align 2, !tbaa !89
  %39 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %40 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul46 = mul i64 %40, 6
  %add47 = add i64 %mul46, 4
  %arrayidx48 = getelementptr inbounds i8, i8* %39, i64 %add47
  %41 = load i8, i8* %arrayidx48, align 1, !tbaa !16
  %conv49 = zext i8 %41 to i32
  %mul50 = mul i32 256, %conv49
  %42 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %43 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul51 = mul i64 %43, 6
  %add52 = add i64 %mul51, 5
  %arrayidx53 = getelementptr inbounds i8, i8* %42, i64 %add52
  %44 = load i8, i8* %arrayidx53, align 1, !tbaa !16
  %conv54 = zext i8 %44 to i32
  %add55 = add i32 %mul50, %conv54
  %conv56 = trunc i32 %add55 to i16
  %45 = load i16*, i16** %b.addr, align 8, !tbaa !2
  store i16 %conv56, i16* %45, align 2, !tbaa !89
  %46 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined57 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %46, i32 0, i32 4
  %47 = load i32, i32* %key_defined57, align 8, !tbaa !52
  %tobool58 = icmp ne i32 %47, 0
  br i1 %tobool58, label %land.lhs.true59, label %if.else97

land.lhs.true59:                                  ; preds = %if.then23
  %48 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %49 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul60 = mul i64 %49, 6
  %add61 = add i64 %mul60, 0
  %arrayidx62 = getelementptr inbounds i8, i8* %48, i64 %add61
  %50 = load i8, i8* %arrayidx62, align 1, !tbaa !16
  %conv63 = zext i8 %50 to i32
  %mul64 = mul i32 256, %conv63
  %51 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %52 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul65 = mul i64 %52, 6
  %add66 = add i64 %mul65, 1
  %arrayidx67 = getelementptr inbounds i8, i8* %51, i64 %add66
  %53 = load i8, i8* %arrayidx67, align 1, !tbaa !16
  %conv68 = zext i8 %53 to i32
  %add69 = add i32 %mul64, %conv68
  %54 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r70 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %54, i32 0, i32 5
  %55 = load i32, i32* %key_r70, align 4, !tbaa !57
  %cmp71 = icmp eq i32 %add69, %55
  br i1 %cmp71, label %land.lhs.true72, label %if.else97

land.lhs.true72:                                  ; preds = %land.lhs.true59
  %56 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %57 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul73 = mul i64 %57, 6
  %add74 = add i64 %mul73, 2
  %arrayidx75 = getelementptr inbounds i8, i8* %56, i64 %add74
  %58 = load i8, i8* %arrayidx75, align 1, !tbaa !16
  %conv76 = zext i8 %58 to i32
  %mul77 = mul i32 256, %conv76
  %59 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %60 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul78 = mul i64 %60, 6
  %add79 = add i64 %mul78, 3
  %arrayidx80 = getelementptr inbounds i8, i8* %59, i64 %add79
  %61 = load i8, i8* %arrayidx80, align 1, !tbaa !16
  %conv81 = zext i8 %61 to i32
  %add82 = add i32 %mul77, %conv81
  %62 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %62, i32 0, i32 6
  %63 = load i32, i32* %key_g, align 8, !tbaa !56
  %cmp83 = icmp eq i32 %add82, %63
  br i1 %cmp83, label %land.lhs.true84, label %if.else97

land.lhs.true84:                                  ; preds = %land.lhs.true72
  %64 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %65 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul85 = mul i64 %65, 6
  %add86 = add i64 %mul85, 4
  %arrayidx87 = getelementptr inbounds i8, i8* %64, i64 %add86
  %66 = load i8, i8* %arrayidx87, align 1, !tbaa !16
  %conv88 = zext i8 %66 to i32
  %mul89 = mul i32 256, %conv88
  %67 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %68 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul90 = mul i64 %68, 6
  %add91 = add i64 %mul90, 5
  %arrayidx92 = getelementptr inbounds i8, i8* %67, i64 %add91
  %69 = load i8, i8* %arrayidx92, align 1, !tbaa !16
  %conv93 = zext i8 %69 to i32
  %add94 = add i32 %mul89, %conv93
  %70 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %70, i32 0, i32 7
  %71 = load i32, i32* %key_b, align 4, !tbaa !55
  %cmp95 = icmp eq i32 %add94, %71
  br i1 %cmp95, label %if.then96, label %if.else97

if.then96:                                        ; preds = %land.lhs.true84
  %72 = load i16*, i16** %a.addr, align 8, !tbaa !2
  store i16 0, i16* %72, align 2, !tbaa !89
  br label %if.end98

if.else97:                                        ; preds = %land.lhs.true84, %land.lhs.true72, %land.lhs.true59, %if.then23
  %73 = load i16*, i16** %a.addr, align 8, !tbaa !2
  store i16 -1, i16* %73, align 2, !tbaa !89
  br label %if.end98

if.end98:                                         ; preds = %if.else97, %if.then96
  br label %if.end175

if.else99:                                        ; preds = %if.else20
  %74 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype100 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %74, i32 0, i32 0
  %75 = load i32, i32* %colortype100, align 8, !tbaa !58
  %cmp101 = icmp eq i32 %75, 4
  br i1 %cmp101, label %if.then102, label %if.else125

if.then102:                                       ; preds = %if.else99
  %76 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %77 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul103 = mul i64 %77, 4
  %add104 = add i64 %mul103, 0
  %arrayidx105 = getelementptr inbounds i8, i8* %76, i64 %add104
  %78 = load i8, i8* %arrayidx105, align 1, !tbaa !16
  %conv106 = zext i8 %78 to i32
  %mul107 = mul i32 256, %conv106
  %79 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %80 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul108 = mul i64 %80, 4
  %add109 = add i64 %mul108, 1
  %arrayidx110 = getelementptr inbounds i8, i8* %79, i64 %add109
  %81 = load i8, i8* %arrayidx110, align 1, !tbaa !16
  %conv111 = zext i8 %81 to i32
  %add112 = add i32 %mul107, %conv111
  %conv113 = trunc i32 %add112 to i16
  %82 = load i16*, i16** %b.addr, align 8, !tbaa !2
  store i16 %conv113, i16* %82, align 2, !tbaa !89
  %83 = load i16*, i16** %g.addr, align 8, !tbaa !2
  store i16 %conv113, i16* %83, align 2, !tbaa !89
  %84 = load i16*, i16** %r.addr, align 8, !tbaa !2
  store i16 %conv113, i16* %84, align 2, !tbaa !89
  %85 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %86 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul114 = mul i64 %86, 4
  %add115 = add i64 %mul114, 2
  %arrayidx116 = getelementptr inbounds i8, i8* %85, i64 %add115
  %87 = load i8, i8* %arrayidx116, align 1, !tbaa !16
  %conv117 = zext i8 %87 to i32
  %mul118 = mul i32 256, %conv117
  %88 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %89 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul119 = mul i64 %89, 4
  %add120 = add i64 %mul119, 3
  %arrayidx121 = getelementptr inbounds i8, i8* %88, i64 %add120
  %90 = load i8, i8* %arrayidx121, align 1, !tbaa !16
  %conv122 = zext i8 %90 to i32
  %add123 = add i32 %mul118, %conv122
  %conv124 = trunc i32 %add123 to i16
  %91 = load i16*, i16** %a.addr, align 8, !tbaa !2
  store i16 %conv124, i16* %91, align 2, !tbaa !89
  br label %if.end174

if.else125:                                       ; preds = %if.else99
  %92 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype126 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %92, i32 0, i32 0
  %93 = load i32, i32* %colortype126, align 8, !tbaa !58
  %cmp127 = icmp eq i32 %93, 6
  br i1 %cmp127, label %if.then128, label %if.end173

if.then128:                                       ; preds = %if.else125
  %94 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %95 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul129 = mul i64 %95, 8
  %add130 = add i64 %mul129, 0
  %arrayidx131 = getelementptr inbounds i8, i8* %94, i64 %add130
  %96 = load i8, i8* %arrayidx131, align 1, !tbaa !16
  %conv132 = zext i8 %96 to i32
  %mul133 = mul i32 256, %conv132
  %97 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %98 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul134 = mul i64 %98, 8
  %add135 = add i64 %mul134, 1
  %arrayidx136 = getelementptr inbounds i8, i8* %97, i64 %add135
  %99 = load i8, i8* %arrayidx136, align 1, !tbaa !16
  %conv137 = zext i8 %99 to i32
  %add138 = add i32 %mul133, %conv137
  %conv139 = trunc i32 %add138 to i16
  %100 = load i16*, i16** %r.addr, align 8, !tbaa !2
  store i16 %conv139, i16* %100, align 2, !tbaa !89
  %101 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %102 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul140 = mul i64 %102, 8
  %add141 = add i64 %mul140, 2
  %arrayidx142 = getelementptr inbounds i8, i8* %101, i64 %add141
  %103 = load i8, i8* %arrayidx142, align 1, !tbaa !16
  %conv143 = zext i8 %103 to i32
  %mul144 = mul i32 256, %conv143
  %104 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %105 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul145 = mul i64 %105, 8
  %add146 = add i64 %mul145, 3
  %arrayidx147 = getelementptr inbounds i8, i8* %104, i64 %add146
  %106 = load i8, i8* %arrayidx147, align 1, !tbaa !16
  %conv148 = zext i8 %106 to i32
  %add149 = add i32 %mul144, %conv148
  %conv150 = trunc i32 %add149 to i16
  %107 = load i16*, i16** %g.addr, align 8, !tbaa !2
  store i16 %conv150, i16* %107, align 2, !tbaa !89
  %108 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %109 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul151 = mul i64 %109, 8
  %add152 = add i64 %mul151, 4
  %arrayidx153 = getelementptr inbounds i8, i8* %108, i64 %add152
  %110 = load i8, i8* %arrayidx153, align 1, !tbaa !16
  %conv154 = zext i8 %110 to i32
  %mul155 = mul i32 256, %conv154
  %111 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %112 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul156 = mul i64 %112, 8
  %add157 = add i64 %mul156, 5
  %arrayidx158 = getelementptr inbounds i8, i8* %111, i64 %add157
  %113 = load i8, i8* %arrayidx158, align 1, !tbaa !16
  %conv159 = zext i8 %113 to i32
  %add160 = add i32 %mul155, %conv159
  %conv161 = trunc i32 %add160 to i16
  %114 = load i16*, i16** %b.addr, align 8, !tbaa !2
  store i16 %conv161, i16* %114, align 2, !tbaa !89
  %115 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %116 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul162 = mul i64 %116, 8
  %add163 = add i64 %mul162, 6
  %arrayidx164 = getelementptr inbounds i8, i8* %115, i64 %add163
  %117 = load i8, i8* %arrayidx164, align 1, !tbaa !16
  %conv165 = zext i8 %117 to i32
  %mul166 = mul i32 256, %conv165
  %118 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %119 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul167 = mul i64 %119, 8
  %add168 = add i64 %mul167, 7
  %arrayidx169 = getelementptr inbounds i8, i8* %118, i64 %add168
  %120 = load i8, i8* %arrayidx169, align 1, !tbaa !16
  %conv170 = zext i8 %120 to i32
  %add171 = add i32 %mul166, %conv170
  %conv172 = trunc i32 %add171 to i16
  %121 = load i16*, i16** %a.addr, align 8, !tbaa !2
  store i16 %conv172, i16* %121, align 2, !tbaa !89
  br label %if.end173

if.end173:                                        ; preds = %if.then128, %if.else125
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.then102
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %if.end98
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.end
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13rgba16ToPixelPhmPK16LodePNGColorModetttt(i8* %out, i64 %i, %struct.LodePNGColorMode* %mode, i16 zeroext %r, i16 zeroext %g, i16 zeroext %b, i16 zeroext %a) #4 {
entry:
  %out.addr = alloca i8*, align 8
  %i.addr = alloca i64, align 8
  %mode.addr = alloca %struct.LodePNGColorMode*, align 8
  %r.addr = alloca i16, align 2
  %g.addr = alloca i16, align 2
  %b.addr = alloca i16, align 2
  %a.addr = alloca i16, align 2
  %gray = alloca i16, align 2
  %gray54 = alloca i16, align 2
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i64 %i, i64* %i.addr, align 8, !tbaa !6
  store %struct.LodePNGColorMode* %mode, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  store i16 %r, i16* %r.addr, align 2, !tbaa !89
  store i16 %g, i16* %g.addr, align 2, !tbaa !89
  store i16 %b, i16* %b.addr, align 2, !tbaa !89
  store i16 %a, i16* %a.addr, align 2, !tbaa !89
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = bitcast i16* %gray to i8*
  call void @llvm.lifetime.start(i64 2, i8* %2) #16
  %3 = load i16, i16* %r.addr, align 2, !tbaa !89
  store i16 %3, i16* %gray, align 2, !tbaa !89
  %4 = load i16, i16* %gray, align 2, !tbaa !89
  %conv = zext i16 %4 to i32
  %shr = ashr i32 %conv, 8
  %and = and i32 %shr, 255
  %conv1 = trunc i32 %and to i8
  %5 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %6 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul = mul i64 %6, 2
  %add = add i64 %mul, 0
  %arrayidx = getelementptr inbounds i8, i8* %5, i64 %add
  store i8 %conv1, i8* %arrayidx, align 1, !tbaa !16
  %7 = load i16, i16* %gray, align 2, !tbaa !89
  %conv2 = zext i16 %7 to i32
  %and3 = and i32 %conv2, 255
  %conv4 = trunc i32 %and3 to i8
  %8 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %9 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul5 = mul i64 %9, 2
  %add6 = add i64 %mul5, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %add6
  store i8 %conv4, i8* %arrayidx7, align 1, !tbaa !16
  %10 = bitcast i16* %gray to i8*
  call void @llvm.lifetime.end(i64 2, i8* %10) #16
  br label %if.end139

if.else:                                          ; preds = %entry
  %11 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype8 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i32 0, i32 0
  %12 = load i32, i32* %colortype8, align 8, !tbaa !58
  %cmp9 = icmp eq i32 %12, 2
  br i1 %cmp9, label %if.then10, label %if.else50

if.then10:                                        ; preds = %if.else
  %13 = load i16, i16* %r.addr, align 2, !tbaa !89
  %conv11 = zext i16 %13 to i32
  %shr12 = ashr i32 %conv11, 8
  %and13 = and i32 %shr12, 255
  %conv14 = trunc i32 %and13 to i8
  %14 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %15 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul15 = mul i64 %15, 6
  %add16 = add i64 %mul15, 0
  %arrayidx17 = getelementptr inbounds i8, i8* %14, i64 %add16
  store i8 %conv14, i8* %arrayidx17, align 1, !tbaa !16
  %16 = load i16, i16* %r.addr, align 2, !tbaa !89
  %conv18 = zext i16 %16 to i32
  %and19 = and i32 %conv18, 255
  %conv20 = trunc i32 %and19 to i8
  %17 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %18 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul21 = mul i64 %18, 6
  %add22 = add i64 %mul21, 1
  %arrayidx23 = getelementptr inbounds i8, i8* %17, i64 %add22
  store i8 %conv20, i8* %arrayidx23, align 1, !tbaa !16
  %19 = load i16, i16* %g.addr, align 2, !tbaa !89
  %conv24 = zext i16 %19 to i32
  %shr25 = ashr i32 %conv24, 8
  %and26 = and i32 %shr25, 255
  %conv27 = trunc i32 %and26 to i8
  %20 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %21 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul28 = mul i64 %21, 6
  %add29 = add i64 %mul28, 2
  %arrayidx30 = getelementptr inbounds i8, i8* %20, i64 %add29
  store i8 %conv27, i8* %arrayidx30, align 1, !tbaa !16
  %22 = load i16, i16* %g.addr, align 2, !tbaa !89
  %conv31 = zext i16 %22 to i32
  %and32 = and i32 %conv31, 255
  %conv33 = trunc i32 %and32 to i8
  %23 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %24 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul34 = mul i64 %24, 6
  %add35 = add i64 %mul34, 3
  %arrayidx36 = getelementptr inbounds i8, i8* %23, i64 %add35
  store i8 %conv33, i8* %arrayidx36, align 1, !tbaa !16
  %25 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv37 = zext i16 %25 to i32
  %shr38 = ashr i32 %conv37, 8
  %and39 = and i32 %shr38, 255
  %conv40 = trunc i32 %and39 to i8
  %26 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %27 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul41 = mul i64 %27, 6
  %add42 = add i64 %mul41, 4
  %arrayidx43 = getelementptr inbounds i8, i8* %26, i64 %add42
  store i8 %conv40, i8* %arrayidx43, align 1, !tbaa !16
  %28 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv44 = zext i16 %28 to i32
  %and45 = and i32 %conv44, 255
  %conv46 = trunc i32 %and45 to i8
  %29 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %30 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul47 = mul i64 %30, 6
  %add48 = add i64 %mul47, 5
  %arrayidx49 = getelementptr inbounds i8, i8* %29, i64 %add48
  store i8 %conv46, i8* %arrayidx49, align 1, !tbaa !16
  br label %if.end138

if.else50:                                        ; preds = %if.else
  %31 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype51 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %31, i32 0, i32 0
  %32 = load i32, i32* %colortype51, align 8, !tbaa !58
  %cmp52 = icmp eq i32 %32, 4
  br i1 %cmp52, label %if.then53, label %if.else81

if.then53:                                        ; preds = %if.else50
  %33 = bitcast i16* %gray54 to i8*
  call void @llvm.lifetime.start(i64 2, i8* %33) #16
  %34 = load i16, i16* %r.addr, align 2, !tbaa !89
  store i16 %34, i16* %gray54, align 2, !tbaa !89
  %35 = load i16, i16* %gray54, align 2, !tbaa !89
  %conv55 = zext i16 %35 to i32
  %shr56 = ashr i32 %conv55, 8
  %and57 = and i32 %shr56, 255
  %conv58 = trunc i32 %and57 to i8
  %36 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %37 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul59 = mul i64 %37, 4
  %add60 = add i64 %mul59, 0
  %arrayidx61 = getelementptr inbounds i8, i8* %36, i64 %add60
  store i8 %conv58, i8* %arrayidx61, align 1, !tbaa !16
  %38 = load i16, i16* %gray54, align 2, !tbaa !89
  %conv62 = zext i16 %38 to i32
  %and63 = and i32 %conv62, 255
  %conv64 = trunc i32 %and63 to i8
  %39 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %40 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul65 = mul i64 %40, 4
  %add66 = add i64 %mul65, 1
  %arrayidx67 = getelementptr inbounds i8, i8* %39, i64 %add66
  store i8 %conv64, i8* %arrayidx67, align 1, !tbaa !16
  %41 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv68 = zext i16 %41 to i32
  %shr69 = ashr i32 %conv68, 8
  %and70 = and i32 %shr69, 255
  %conv71 = trunc i32 %and70 to i8
  %42 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %43 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul72 = mul i64 %43, 4
  %add73 = add i64 %mul72, 2
  %arrayidx74 = getelementptr inbounds i8, i8* %42, i64 %add73
  store i8 %conv71, i8* %arrayidx74, align 1, !tbaa !16
  %44 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv75 = zext i16 %44 to i32
  %and76 = and i32 %conv75, 255
  %conv77 = trunc i32 %and76 to i8
  %45 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %46 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul78 = mul i64 %46, 4
  %add79 = add i64 %mul78, 3
  %arrayidx80 = getelementptr inbounds i8, i8* %45, i64 %add79
  store i8 %conv77, i8* %arrayidx80, align 1, !tbaa !16
  %47 = bitcast i16* %gray54 to i8*
  call void @llvm.lifetime.end(i64 2, i8* %47) #16
  br label %if.end137

if.else81:                                        ; preds = %if.else50
  %48 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype82 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %48, i32 0, i32 0
  %49 = load i32, i32* %colortype82, align 8, !tbaa !58
  %cmp83 = icmp eq i32 %49, 6
  br i1 %cmp83, label %if.then84, label %if.end

if.then84:                                        ; preds = %if.else81
  %50 = load i16, i16* %r.addr, align 2, !tbaa !89
  %conv85 = zext i16 %50 to i32
  %shr86 = ashr i32 %conv85, 8
  %and87 = and i32 %shr86, 255
  %conv88 = trunc i32 %and87 to i8
  %51 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %52 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul89 = mul i64 %52, 8
  %add90 = add i64 %mul89, 0
  %arrayidx91 = getelementptr inbounds i8, i8* %51, i64 %add90
  store i8 %conv88, i8* %arrayidx91, align 1, !tbaa !16
  %53 = load i16, i16* %r.addr, align 2, !tbaa !89
  %conv92 = zext i16 %53 to i32
  %and93 = and i32 %conv92, 255
  %conv94 = trunc i32 %and93 to i8
  %54 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %55 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul95 = mul i64 %55, 8
  %add96 = add i64 %mul95, 1
  %arrayidx97 = getelementptr inbounds i8, i8* %54, i64 %add96
  store i8 %conv94, i8* %arrayidx97, align 1, !tbaa !16
  %56 = load i16, i16* %g.addr, align 2, !tbaa !89
  %conv98 = zext i16 %56 to i32
  %shr99 = ashr i32 %conv98, 8
  %and100 = and i32 %shr99, 255
  %conv101 = trunc i32 %and100 to i8
  %57 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %58 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul102 = mul i64 %58, 8
  %add103 = add i64 %mul102, 2
  %arrayidx104 = getelementptr inbounds i8, i8* %57, i64 %add103
  store i8 %conv101, i8* %arrayidx104, align 1, !tbaa !16
  %59 = load i16, i16* %g.addr, align 2, !tbaa !89
  %conv105 = zext i16 %59 to i32
  %and106 = and i32 %conv105, 255
  %conv107 = trunc i32 %and106 to i8
  %60 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %61 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul108 = mul i64 %61, 8
  %add109 = add i64 %mul108, 3
  %arrayidx110 = getelementptr inbounds i8, i8* %60, i64 %add109
  store i8 %conv107, i8* %arrayidx110, align 1, !tbaa !16
  %62 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv111 = zext i16 %62 to i32
  %shr112 = ashr i32 %conv111, 8
  %and113 = and i32 %shr112, 255
  %conv114 = trunc i32 %and113 to i8
  %63 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %64 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul115 = mul i64 %64, 8
  %add116 = add i64 %mul115, 4
  %arrayidx117 = getelementptr inbounds i8, i8* %63, i64 %add116
  store i8 %conv114, i8* %arrayidx117, align 1, !tbaa !16
  %65 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv118 = zext i16 %65 to i32
  %and119 = and i32 %conv118, 255
  %conv120 = trunc i32 %and119 to i8
  %66 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %67 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul121 = mul i64 %67, 8
  %add122 = add i64 %mul121, 5
  %arrayidx123 = getelementptr inbounds i8, i8* %66, i64 %add122
  store i8 %conv120, i8* %arrayidx123, align 1, !tbaa !16
  %68 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv124 = zext i16 %68 to i32
  %shr125 = ashr i32 %conv124, 8
  %and126 = and i32 %shr125, 255
  %conv127 = trunc i32 %and126 to i8
  %69 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %70 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul128 = mul i64 %70, 8
  %add129 = add i64 %mul128, 6
  %arrayidx130 = getelementptr inbounds i8, i8* %69, i64 %add129
  store i8 %conv127, i8* %arrayidx130, align 1, !tbaa !16
  %71 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv131 = zext i16 %71 to i32
  %and132 = and i32 %conv131, 255
  %conv133 = trunc i32 %and132 to i8
  %72 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %73 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul134 = mul i64 %73, 8
  %add135 = add i64 %mul134, 7
  %arrayidx136 = getelementptr inbounds i8, i8* %72, i64 %add135
  store i8 %conv133, i8* %arrayidx136, align 1, !tbaa !16
  br label %if.end

if.end:                                           ; preds = %if.then84, %if.else81
  br label %if.end137

if.end137:                                        ; preds = %if.end, %if.then53
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.then10
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.then
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL19getPixelColorsRGBA8PhmPKhPK16LodePNGColorMode(i8* %buffer, i64 %numpixels, i8* %in, %struct.LodePNGColorMode* %mode) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %numpixels.addr = alloca i64, align 8
  %in.addr = alloca i8*, align 8
  %mode.addr = alloca %struct.LodePNGColorMode*, align 8
  %num_channels = alloca i32, align 4
  %i = alloca i64, align 8
  %highest = alloca i32, align 4
  %j = alloca i64, align 8
  %value = alloca i32, align 4
  %index = alloca i32, align 4
  %j218 = alloca i64, align 8
  %index222 = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !2
  store i64 %numpixels, i64* %numpixels.addr, align 8, !tbaa !6
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %mode, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %0 = bitcast i32* %num_channels to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 4, i32* %num_channels, align 4, !tbaa !8
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 0
  %3 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else83

if.then:                                          ; preds = %entry
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 1
  %5 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %5, 8
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %7 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp3 = icmp ne i64 %6, %7
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %9
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %11 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %11, i64 2
  store i8 %10, i8* %arrayidx4, align 1, !tbaa !16
  %12 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx5 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %10, i8* %arrayidx5, align 1, !tbaa !16
  %13 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i64 0
  store i8 %10, i8* %arrayidx6, align 1, !tbaa !16
  %14 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 3
  store i8 -1, i8* %arrayidx7, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %15, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  %16 = load i32, i32* %num_channels, align 4, !tbaa !8
  %17 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext = zext i32 %16 to i64
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 %idx.ext
  store i8* %add.ptr, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %18, i32 0, i32 4
  %19 = load i32, i32* %key_defined, align 8, !tbaa !52
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then8, label %if.end23

if.then8:                                         ; preds = %for.end
  %20 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %21 = load i32, i32* %num_channels, align 4, !tbaa !8
  %conv = zext i32 %21 to i64
  %mul = mul i64 %20, %conv
  %22 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.neg = sub i64 0, %mul
  %add.ptr9 = getelementptr inbounds i8, i8* %22, i64 %idx.neg
  store i8* %add.ptr9, i8** %buffer.addr, align 8, !tbaa !2
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc18, %if.then8
  %23 = load i64, i64* %i, align 8, !tbaa !6
  %24 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp11 = icmp ne i64 %23, %24
  br i1 %cmp11, label %for.body12, label %for.end22

for.body12:                                       ; preds = %for.cond10
  %25 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx13 = getelementptr inbounds i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx13, align 1, !tbaa !16
  %conv14 = zext i8 %26 to i32
  %27 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %27, i32 0, i32 5
  %28 = load i32, i32* %key_r, align 4, !tbaa !57
  %cmp15 = icmp eq i32 %conv14, %28
  br i1 %cmp15, label %if.then16, label %if.end

if.then16:                                        ; preds = %for.body12
  %29 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx17 = getelementptr inbounds i8, i8* %29, i64 3
  store i8 0, i8* %arrayidx17, align 1, !tbaa !16
  br label %if.end

if.end:                                           ; preds = %if.then16, %for.body12
  br label %for.inc18

for.inc18:                                        ; preds = %if.end
  %30 = load i64, i64* %i, align 8, !tbaa !6
  %inc19 = add i64 %30, 1
  store i64 %inc19, i64* %i, align 8, !tbaa !6
  %31 = load i32, i32* %num_channels, align 4, !tbaa !8
  %32 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext20 = zext i32 %31 to i64
  %add.ptr21 = getelementptr inbounds i8, i8* %32, i64 %idx.ext20
  store i8* %add.ptr21, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond10

for.end22:                                        ; preds = %for.cond10
  br label %if.end23

if.end23:                                         ; preds = %for.end22, %for.end
  br label %if.end82

if.else:                                          ; preds = %if.then
  %33 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth24 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %33, i32 0, i32 1
  %34 = load i32, i32* %bitdepth24, align 4, !tbaa !59
  %cmp25 = icmp eq i32 %34, 16
  br i1 %cmp25, label %if.then26, label %if.else55

if.then26:                                        ; preds = %if.else
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc50, %if.then26
  %35 = load i64, i64* %i, align 8, !tbaa !6
  %36 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp28 = icmp ne i64 %35, %36
  br i1 %cmp28, label %for.body29, label %for.end54

for.body29:                                       ; preds = %for.cond27
  %37 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %38 = load i64, i64* %i, align 8, !tbaa !6
  %mul30 = mul i64 %38, 2
  %arrayidx31 = getelementptr inbounds i8, i8* %37, i64 %mul30
  %39 = load i8, i8* %arrayidx31, align 1, !tbaa !16
  %40 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx32 = getelementptr inbounds i8, i8* %40, i64 2
  store i8 %39, i8* %arrayidx32, align 1, !tbaa !16
  %41 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx33 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %39, i8* %arrayidx33, align 1, !tbaa !16
  %42 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx34 = getelementptr inbounds i8, i8* %42, i64 0
  store i8 %39, i8* %arrayidx34, align 1, !tbaa !16
  %43 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined35 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %43, i32 0, i32 4
  %44 = load i32, i32* %key_defined35, align 8, !tbaa !52
  %tobool36 = icmp ne i32 %44, 0
  br i1 %tobool36, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body29
  %45 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %46 = load i64, i64* %i, align 8, !tbaa !6
  %mul37 = mul i64 %46, 2
  %add = add i64 %mul37, 0
  %arrayidx38 = getelementptr inbounds i8, i8* %45, i64 %add
  %47 = load i8, i8* %arrayidx38, align 1, !tbaa !16
  %conv39 = zext i8 %47 to i32
  %mul40 = mul i32 256, %conv39
  %48 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %49 = load i64, i64* %i, align 8, !tbaa !6
  %mul41 = mul i64 %49, 2
  %add42 = add i64 %mul41, 1
  %arrayidx43 = getelementptr inbounds i8, i8* %48, i64 %add42
  %50 = load i8, i8* %arrayidx43, align 1, !tbaa !16
  %conv44 = zext i8 %50 to i32
  %add45 = add i32 %mul40, %conv44
  %51 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r46 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %51, i32 0, i32 5
  %52 = load i32, i32* %key_r46, align 4, !tbaa !57
  %cmp47 = icmp eq i32 %add45, %52
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body29
  %53 = phi i1 [ false, %for.body29 ], [ %cmp47, %land.rhs ]
  %cond = select i1 %53, i32 0, i32 255
  %conv48 = trunc i32 %cond to i8
  %54 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx49 = getelementptr inbounds i8, i8* %54, i64 3
  store i8 %conv48, i8* %arrayidx49, align 1, !tbaa !16
  br label %for.inc50

for.inc50:                                        ; preds = %land.end
  %55 = load i64, i64* %i, align 8, !tbaa !6
  %inc51 = add i64 %55, 1
  store i64 %inc51, i64* %i, align 8, !tbaa !6
  %56 = load i32, i32* %num_channels, align 4, !tbaa !8
  %57 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext52 = zext i32 %56 to i64
  %add.ptr53 = getelementptr inbounds i8, i8* %57, i64 %idx.ext52
  store i8* %add.ptr53, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond27

for.end54:                                        ; preds = %for.cond27
  br label %if.end81

if.else55:                                        ; preds = %if.else
  %58 = bitcast i32* %highest to i8*
  call void @llvm.lifetime.start(i64 4, i8* %58) #16
  %59 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth56 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %59, i32 0, i32 1
  %60 = load i32, i32* %bitdepth56, align 4, !tbaa !59
  %shl = shl i32 1, %60
  %sub = sub i32 %shl, 1
  store i32 %sub, i32* %highest, align 4, !tbaa !8
  %61 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start(i64 8, i8* %61) #16
  store i64 0, i64* %j, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc76, %if.else55
  %62 = load i64, i64* %i, align 8, !tbaa !6
  %63 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp58 = icmp ne i64 %62, %63
  br i1 %cmp58, label %for.body59, label %for.end80

for.body59:                                       ; preds = %for.cond57
  %64 = bitcast i32* %value to i8*
  call void @llvm.lifetime.start(i64 4, i8* %64) #16
  %65 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %66 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth60 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %66, i32 0, i32 1
  %67 = load i32, i32* %bitdepth60, align 4, !tbaa !59
  %conv61 = zext i32 %67 to i64
  %call = call i32 @_ZL26readBitsFromReversedStreamPmPKhm(i64* %j, i8* %65, i64 %conv61)
  store i32 %call, i32* %value, align 4, !tbaa !8
  %68 = load i32, i32* %value, align 4, !tbaa !8
  %mul62 = mul i32 %68, 255
  %69 = load i32, i32* %highest, align 4, !tbaa !8
  %div = udiv i32 %mul62, %69
  %conv63 = trunc i32 %div to i8
  %70 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx64 = getelementptr inbounds i8, i8* %70, i64 2
  store i8 %conv63, i8* %arrayidx64, align 1, !tbaa !16
  %71 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx65 = getelementptr inbounds i8, i8* %71, i64 1
  store i8 %conv63, i8* %arrayidx65, align 1, !tbaa !16
  %72 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx66 = getelementptr inbounds i8, i8* %72, i64 0
  store i8 %conv63, i8* %arrayidx66, align 1, !tbaa !16
  %73 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined67 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %73, i32 0, i32 4
  %74 = load i32, i32* %key_defined67, align 8, !tbaa !52
  %tobool68 = icmp ne i32 %74, 0
  br i1 %tobool68, label %land.rhs69, label %land.end72

land.rhs69:                                       ; preds = %for.body59
  %75 = load i32, i32* %value, align 4, !tbaa !8
  %76 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r70 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %76, i32 0, i32 5
  %77 = load i32, i32* %key_r70, align 4, !tbaa !57
  %cmp71 = icmp eq i32 %75, %77
  br label %land.end72

land.end72:                                       ; preds = %land.rhs69, %for.body59
  %78 = phi i1 [ false, %for.body59 ], [ %cmp71, %land.rhs69 ]
  %cond73 = select i1 %78, i32 0, i32 255
  %conv74 = trunc i32 %cond73 to i8
  %79 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx75 = getelementptr inbounds i8, i8* %79, i64 3
  store i8 %conv74, i8* %arrayidx75, align 1, !tbaa !16
  %80 = bitcast i32* %value to i8*
  call void @llvm.lifetime.end(i64 4, i8* %80) #16
  br label %for.inc76

for.inc76:                                        ; preds = %land.end72
  %81 = load i64, i64* %i, align 8, !tbaa !6
  %inc77 = add i64 %81, 1
  store i64 %inc77, i64* %i, align 8, !tbaa !6
  %82 = load i32, i32* %num_channels, align 4, !tbaa !8
  %83 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext78 = zext i32 %82 to i64
  %add.ptr79 = getelementptr inbounds i8, i8* %83, i64 %idx.ext78
  store i8* %add.ptr79, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond57

for.end80:                                        ; preds = %for.cond57
  %84 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end(i64 8, i8* %84) #16
  %85 = bitcast i32* %highest to i8*
  call void @llvm.lifetime.end(i64 4, i8* %85) #16
  br label %if.end81

if.end81:                                         ; preds = %for.end80, %for.end54
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.end23
  br label %if.end319

if.else83:                                        ; preds = %entry
  %86 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype84 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %86, i32 0, i32 0
  %87 = load i32, i32* %colortype84, align 8, !tbaa !58
  %cmp85 = icmp eq i32 %87, 2
  br i1 %cmp85, label %if.then86, label %if.else198

if.then86:                                        ; preds = %if.else83
  %88 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth87 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %88, i32 0, i32 1
  %89 = load i32, i32* %bitdepth87, align 4, !tbaa !59
  %cmp88 = icmp eq i32 %89, 8
  br i1 %cmp88, label %if.then89, label %if.else131

if.then89:                                        ; preds = %if.then86
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond90

for.cond90:                                       ; preds = %for.inc96, %if.then89
  %90 = load i64, i64* %i, align 8, !tbaa !6
  %91 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp91 = icmp ne i64 %90, %91
  br i1 %cmp91, label %for.body92, label %for.end100

for.body92:                                       ; preds = %for.cond90
  %92 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %93 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %94 = load i64, i64* %i, align 8, !tbaa !6
  %mul93 = mul i64 %94, 3
  %arrayidx94 = getelementptr inbounds i8, i8* %93, i64 %mul93
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %92, i8* %arrayidx94, i64 3)
  %95 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx95 = getelementptr inbounds i8, i8* %95, i64 3
  store i8 -1, i8* %arrayidx95, align 1, !tbaa !16
  br label %for.inc96

for.inc96:                                        ; preds = %for.body92
  %96 = load i64, i64* %i, align 8, !tbaa !6
  %inc97 = add i64 %96, 1
  store i64 %inc97, i64* %i, align 8, !tbaa !6
  %97 = load i32, i32* %num_channels, align 4, !tbaa !8
  %98 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext98 = zext i32 %97 to i64
  %add.ptr99 = getelementptr inbounds i8, i8* %98, i64 %idx.ext98
  store i8* %add.ptr99, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond90

for.end100:                                       ; preds = %for.cond90
  %99 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined101 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %99, i32 0, i32 4
  %100 = load i32, i32* %key_defined101, align 8, !tbaa !52
  %tobool102 = icmp ne i32 %100, 0
  br i1 %tobool102, label %if.then103, label %if.end130

if.then103:                                       ; preds = %for.end100
  %101 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %102 = load i32, i32* %num_channels, align 4, !tbaa !8
  %conv104 = zext i32 %102 to i64
  %mul105 = mul i64 %101, %conv104
  %103 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.neg106 = sub i64 0, %mul105
  %add.ptr107 = getelementptr inbounds i8, i8* %103, i64 %idx.neg106
  store i8* %add.ptr107, i8** %buffer.addr, align 8, !tbaa !2
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond108

for.cond108:                                      ; preds = %for.inc125, %if.then103
  %104 = load i64, i64* %i, align 8, !tbaa !6
  %105 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp109 = icmp ne i64 %104, %105
  br i1 %cmp109, label %for.body110, label %for.end129

for.body110:                                      ; preds = %for.cond108
  %106 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx111 = getelementptr inbounds i8, i8* %106, i64 0
  %107 = load i8, i8* %arrayidx111, align 1, !tbaa !16
  %conv112 = zext i8 %107 to i32
  %108 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r113 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %108, i32 0, i32 5
  %109 = load i32, i32* %key_r113, align 4, !tbaa !57
  %cmp114 = icmp eq i32 %conv112, %109
  br i1 %cmp114, label %land.lhs.true, label %if.end124

land.lhs.true:                                    ; preds = %for.body110
  %110 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx115 = getelementptr inbounds i8, i8* %110, i64 1
  %111 = load i8, i8* %arrayidx115, align 1, !tbaa !16
  %conv116 = zext i8 %111 to i32
  %112 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %112, i32 0, i32 6
  %113 = load i32, i32* %key_g, align 8, !tbaa !56
  %cmp117 = icmp eq i32 %conv116, %113
  br i1 %cmp117, label %land.lhs.true118, label %if.end124

land.lhs.true118:                                 ; preds = %land.lhs.true
  %114 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx119 = getelementptr inbounds i8, i8* %114, i64 2
  %115 = load i8, i8* %arrayidx119, align 1, !tbaa !16
  %conv120 = zext i8 %115 to i32
  %116 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %116, i32 0, i32 7
  %117 = load i32, i32* %key_b, align 4, !tbaa !55
  %cmp121 = icmp eq i32 %conv120, %117
  br i1 %cmp121, label %if.then122, label %if.end124

if.then122:                                       ; preds = %land.lhs.true118
  %118 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx123 = getelementptr inbounds i8, i8* %118, i64 3
  store i8 0, i8* %arrayidx123, align 1, !tbaa !16
  br label %if.end124

if.end124:                                        ; preds = %if.then122, %land.lhs.true118, %land.lhs.true, %for.body110
  br label %for.inc125

for.inc125:                                       ; preds = %if.end124
  %119 = load i64, i64* %i, align 8, !tbaa !6
  %inc126 = add i64 %119, 1
  store i64 %inc126, i64* %i, align 8, !tbaa !6
  %120 = load i32, i32* %num_channels, align 4, !tbaa !8
  %121 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext127 = zext i32 %120 to i64
  %add.ptr128 = getelementptr inbounds i8, i8* %121, i64 %idx.ext127
  store i8* %add.ptr128, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond108

for.end129:                                       ; preds = %for.cond108
  br label %if.end130

if.end130:                                        ; preds = %for.end129, %for.end100
  br label %if.end197

if.else131:                                       ; preds = %if.then86
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond132

for.cond132:                                      ; preds = %for.inc192, %if.else131
  %122 = load i64, i64* %i, align 8, !tbaa !6
  %123 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp133 = icmp ne i64 %122, %123
  br i1 %cmp133, label %for.body134, label %for.end196

for.body134:                                      ; preds = %for.cond132
  %124 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %125 = load i64, i64* %i, align 8, !tbaa !6
  %mul135 = mul i64 %125, 6
  %add136 = add i64 %mul135, 0
  %arrayidx137 = getelementptr inbounds i8, i8* %124, i64 %add136
  %126 = load i8, i8* %arrayidx137, align 1, !tbaa !16
  %127 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx138 = getelementptr inbounds i8, i8* %127, i64 0
  store i8 %126, i8* %arrayidx138, align 1, !tbaa !16
  %128 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %129 = load i64, i64* %i, align 8, !tbaa !6
  %mul139 = mul i64 %129, 6
  %add140 = add i64 %mul139, 2
  %arrayidx141 = getelementptr inbounds i8, i8* %128, i64 %add140
  %130 = load i8, i8* %arrayidx141, align 1, !tbaa !16
  %131 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx142 = getelementptr inbounds i8, i8* %131, i64 1
  store i8 %130, i8* %arrayidx142, align 1, !tbaa !16
  %132 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %133 = load i64, i64* %i, align 8, !tbaa !6
  %mul143 = mul i64 %133, 6
  %add144 = add i64 %mul143, 4
  %arrayidx145 = getelementptr inbounds i8, i8* %132, i64 %add144
  %134 = load i8, i8* %arrayidx145, align 1, !tbaa !16
  %135 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx146 = getelementptr inbounds i8, i8* %135, i64 2
  store i8 %134, i8* %arrayidx146, align 1, !tbaa !16
  %136 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined147 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %136, i32 0, i32 4
  %137 = load i32, i32* %key_defined147, align 8, !tbaa !52
  %tobool148 = icmp ne i32 %137, 0
  br i1 %tobool148, label %land.lhs.true149, label %land.end188

land.lhs.true149:                                 ; preds = %for.body134
  %138 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %139 = load i64, i64* %i, align 8, !tbaa !6
  %mul150 = mul i64 %139, 6
  %add151 = add i64 %mul150, 0
  %arrayidx152 = getelementptr inbounds i8, i8* %138, i64 %add151
  %140 = load i8, i8* %arrayidx152, align 1, !tbaa !16
  %conv153 = zext i8 %140 to i32
  %mul154 = mul i32 256, %conv153
  %141 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %142 = load i64, i64* %i, align 8, !tbaa !6
  %mul155 = mul i64 %142, 6
  %add156 = add i64 %mul155, 1
  %arrayidx157 = getelementptr inbounds i8, i8* %141, i64 %add156
  %143 = load i8, i8* %arrayidx157, align 1, !tbaa !16
  %conv158 = zext i8 %143 to i32
  %add159 = add i32 %mul154, %conv158
  %144 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r160 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %144, i32 0, i32 5
  %145 = load i32, i32* %key_r160, align 4, !tbaa !57
  %cmp161 = icmp eq i32 %add159, %145
  br i1 %cmp161, label %land.lhs.true162, label %land.end188

land.lhs.true162:                                 ; preds = %land.lhs.true149
  %146 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %147 = load i64, i64* %i, align 8, !tbaa !6
  %mul163 = mul i64 %147, 6
  %add164 = add i64 %mul163, 2
  %arrayidx165 = getelementptr inbounds i8, i8* %146, i64 %add164
  %148 = load i8, i8* %arrayidx165, align 1, !tbaa !16
  %conv166 = zext i8 %148 to i32
  %mul167 = mul i32 256, %conv166
  %149 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %150 = load i64, i64* %i, align 8, !tbaa !6
  %mul168 = mul i64 %150, 6
  %add169 = add i64 %mul168, 3
  %arrayidx170 = getelementptr inbounds i8, i8* %149, i64 %add169
  %151 = load i8, i8* %arrayidx170, align 1, !tbaa !16
  %conv171 = zext i8 %151 to i32
  %add172 = add i32 %mul167, %conv171
  %152 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_g173 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %152, i32 0, i32 6
  %153 = load i32, i32* %key_g173, align 8, !tbaa !56
  %cmp174 = icmp eq i32 %add172, %153
  br i1 %cmp174, label %land.rhs175, label %land.end188

land.rhs175:                                      ; preds = %land.lhs.true162
  %154 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %155 = load i64, i64* %i, align 8, !tbaa !6
  %mul176 = mul i64 %155, 6
  %add177 = add i64 %mul176, 4
  %arrayidx178 = getelementptr inbounds i8, i8* %154, i64 %add177
  %156 = load i8, i8* %arrayidx178, align 1, !tbaa !16
  %conv179 = zext i8 %156 to i32
  %mul180 = mul i32 256, %conv179
  %157 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %158 = load i64, i64* %i, align 8, !tbaa !6
  %mul181 = mul i64 %158, 6
  %add182 = add i64 %mul181, 5
  %arrayidx183 = getelementptr inbounds i8, i8* %157, i64 %add182
  %159 = load i8, i8* %arrayidx183, align 1, !tbaa !16
  %conv184 = zext i8 %159 to i32
  %add185 = add i32 %mul180, %conv184
  %160 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_b186 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %160, i32 0, i32 7
  %161 = load i32, i32* %key_b186, align 4, !tbaa !55
  %cmp187 = icmp eq i32 %add185, %161
  br label %land.end188

land.end188:                                      ; preds = %land.rhs175, %land.lhs.true162, %land.lhs.true149, %for.body134
  %162 = phi i1 [ false, %land.lhs.true162 ], [ false, %land.lhs.true149 ], [ false, %for.body134 ], [ %cmp187, %land.rhs175 ]
  %cond189 = select i1 %162, i32 0, i32 255
  %conv190 = trunc i32 %cond189 to i8
  %163 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx191 = getelementptr inbounds i8, i8* %163, i64 3
  store i8 %conv190, i8* %arrayidx191, align 1, !tbaa !16
  br label %for.inc192

for.inc192:                                       ; preds = %land.end188
  %164 = load i64, i64* %i, align 8, !tbaa !6
  %inc193 = add i64 %164, 1
  store i64 %inc193, i64* %i, align 8, !tbaa !6
  %165 = load i32, i32* %num_channels, align 4, !tbaa !8
  %166 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext194 = zext i32 %165 to i64
  %add.ptr195 = getelementptr inbounds i8, i8* %166, i64 %idx.ext194
  store i8* %add.ptr195, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond132

for.end196:                                       ; preds = %for.cond132
  br label %if.end197

if.end197:                                        ; preds = %for.end196, %if.end130
  br label %if.end318

if.else198:                                       ; preds = %if.else83
  %167 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype199 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %167, i32 0, i32 0
  %168 = load i32, i32* %colortype199, align 8, !tbaa !58
  %cmp200 = icmp eq i32 %168, 3
  br i1 %cmp200, label %if.then201, label %if.else236

if.then201:                                       ; preds = %if.else198
  %169 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth202 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %169, i32 0, i32 1
  %170 = load i32, i32* %bitdepth202, align 4, !tbaa !59
  %cmp203 = icmp eq i32 %170, 8
  br i1 %cmp203, label %if.then204, label %if.else217

if.then204:                                       ; preds = %if.then201
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond205

for.cond205:                                      ; preds = %for.inc212, %if.then204
  %171 = load i64, i64* %i, align 8, !tbaa !6
  %172 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp206 = icmp ne i64 %171, %172
  br i1 %cmp206, label %for.body207, label %for.end216

for.body207:                                      ; preds = %for.cond205
  %173 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %173) #16
  %174 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %175 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx208 = getelementptr inbounds i8, i8* %174, i64 %175
  %176 = load i8, i8* %arrayidx208, align 1, !tbaa !16
  %conv209 = zext i8 %176 to i32
  store i32 %conv209, i32* %index, align 4, !tbaa !8
  %177 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %178 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %178, i32 0, i32 2
  %179 = load i8*, i8** %palette, align 8, !tbaa !60
  %180 = load i32, i32* %index, align 4, !tbaa !8
  %mul210 = mul i32 %180, 4
  %idxprom = zext i32 %mul210 to i64
  %arrayidx211 = getelementptr inbounds i8, i8* %179, i64 %idxprom
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %177, i8* %arrayidx211, i64 4)
  %181 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %181) #16
  br label %for.inc212

for.inc212:                                       ; preds = %for.body207
  %182 = load i64, i64* %i, align 8, !tbaa !6
  %inc213 = add i64 %182, 1
  store i64 %inc213, i64* %i, align 8, !tbaa !6
  %183 = load i32, i32* %num_channels, align 4, !tbaa !8
  %184 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext214 = zext i32 %183 to i64
  %add.ptr215 = getelementptr inbounds i8, i8* %184, i64 %idx.ext214
  store i8* %add.ptr215, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond205

for.end216:                                       ; preds = %for.cond205
  br label %if.end235

if.else217:                                       ; preds = %if.then201
  %185 = bitcast i64* %j218 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %185) #16
  store i64 0, i64* %j218, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond219

for.cond219:                                      ; preds = %for.inc230, %if.else217
  %186 = load i64, i64* %i, align 8, !tbaa !6
  %187 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp220 = icmp ne i64 %186, %187
  br i1 %cmp220, label %for.body221, label %for.end234

for.body221:                                      ; preds = %for.cond219
  %188 = bitcast i32* %index222 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %188) #16
  %189 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %190 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth223 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %190, i32 0, i32 1
  %191 = load i32, i32* %bitdepth223, align 4, !tbaa !59
  %conv224 = zext i32 %191 to i64
  %call225 = call i32 @_ZL26readBitsFromReversedStreamPmPKhm(i64* %j218, i8* %189, i64 %conv224)
  store i32 %call225, i32* %index222, align 4, !tbaa !8
  %192 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %193 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %palette226 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %193, i32 0, i32 2
  %194 = load i8*, i8** %palette226, align 8, !tbaa !60
  %195 = load i32, i32* %index222, align 4, !tbaa !8
  %mul227 = mul i32 %195, 4
  %idxprom228 = zext i32 %mul227 to i64
  %arrayidx229 = getelementptr inbounds i8, i8* %194, i64 %idxprom228
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %192, i8* %arrayidx229, i64 4)
  %196 = bitcast i32* %index222 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %196) #16
  br label %for.inc230

for.inc230:                                       ; preds = %for.body221
  %197 = load i64, i64* %i, align 8, !tbaa !6
  %inc231 = add i64 %197, 1
  store i64 %inc231, i64* %i, align 8, !tbaa !6
  %198 = load i32, i32* %num_channels, align 4, !tbaa !8
  %199 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext232 = zext i32 %198 to i64
  %add.ptr233 = getelementptr inbounds i8, i8* %199, i64 %idx.ext232
  store i8* %add.ptr233, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond219

for.end234:                                       ; preds = %for.cond219
  %200 = bitcast i64* %j218 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %200) #16
  br label %if.end235

if.end235:                                        ; preds = %for.end234, %for.end216
  br label %if.end317

if.else236:                                       ; preds = %if.else198
  %201 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype237 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %201, i32 0, i32 0
  %202 = load i32, i32* %colortype237, align 8, !tbaa !58
  %cmp238 = icmp eq i32 %202, 4
  br i1 %cmp238, label %if.then239, label %if.else281

if.then239:                                       ; preds = %if.else236
  %203 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth240 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %203, i32 0, i32 1
  %204 = load i32, i32* %bitdepth240, align 4, !tbaa !59
  %cmp241 = icmp eq i32 %204, 8
  br i1 %cmp241, label %if.then242, label %if.else261

if.then242:                                       ; preds = %if.then239
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond243

for.cond243:                                      ; preds = %for.inc256, %if.then242
  %205 = load i64, i64* %i, align 8, !tbaa !6
  %206 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp244 = icmp ne i64 %205, %206
  br i1 %cmp244, label %for.body245, label %for.end260

for.body245:                                      ; preds = %for.cond243
  %207 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %208 = load i64, i64* %i, align 8, !tbaa !6
  %mul246 = mul i64 %208, 2
  %add247 = add i64 %mul246, 0
  %arrayidx248 = getelementptr inbounds i8, i8* %207, i64 %add247
  %209 = load i8, i8* %arrayidx248, align 1, !tbaa !16
  %210 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx249 = getelementptr inbounds i8, i8* %210, i64 2
  store i8 %209, i8* %arrayidx249, align 1, !tbaa !16
  %211 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx250 = getelementptr inbounds i8, i8* %211, i64 1
  store i8 %209, i8* %arrayidx250, align 1, !tbaa !16
  %212 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx251 = getelementptr inbounds i8, i8* %212, i64 0
  store i8 %209, i8* %arrayidx251, align 1, !tbaa !16
  %213 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %214 = load i64, i64* %i, align 8, !tbaa !6
  %mul252 = mul i64 %214, 2
  %add253 = add i64 %mul252, 1
  %arrayidx254 = getelementptr inbounds i8, i8* %213, i64 %add253
  %215 = load i8, i8* %arrayidx254, align 1, !tbaa !16
  %216 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx255 = getelementptr inbounds i8, i8* %216, i64 3
  store i8 %215, i8* %arrayidx255, align 1, !tbaa !16
  br label %for.inc256

for.inc256:                                       ; preds = %for.body245
  %217 = load i64, i64* %i, align 8, !tbaa !6
  %inc257 = add i64 %217, 1
  store i64 %inc257, i64* %i, align 8, !tbaa !6
  %218 = load i32, i32* %num_channels, align 4, !tbaa !8
  %219 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext258 = zext i32 %218 to i64
  %add.ptr259 = getelementptr inbounds i8, i8* %219, i64 %idx.ext258
  store i8* %add.ptr259, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond243

for.end260:                                       ; preds = %for.cond243
  br label %if.end280

if.else261:                                       ; preds = %if.then239
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc275, %if.else261
  %220 = load i64, i64* %i, align 8, !tbaa !6
  %221 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp263 = icmp ne i64 %220, %221
  br i1 %cmp263, label %for.body264, label %for.end279

for.body264:                                      ; preds = %for.cond262
  %222 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %223 = load i64, i64* %i, align 8, !tbaa !6
  %mul265 = mul i64 %223, 4
  %add266 = add i64 %mul265, 0
  %arrayidx267 = getelementptr inbounds i8, i8* %222, i64 %add266
  %224 = load i8, i8* %arrayidx267, align 1, !tbaa !16
  %225 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx268 = getelementptr inbounds i8, i8* %225, i64 2
  store i8 %224, i8* %arrayidx268, align 1, !tbaa !16
  %226 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx269 = getelementptr inbounds i8, i8* %226, i64 1
  store i8 %224, i8* %arrayidx269, align 1, !tbaa !16
  %227 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx270 = getelementptr inbounds i8, i8* %227, i64 0
  store i8 %224, i8* %arrayidx270, align 1, !tbaa !16
  %228 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %229 = load i64, i64* %i, align 8, !tbaa !6
  %mul271 = mul i64 %229, 4
  %add272 = add i64 %mul271, 2
  %arrayidx273 = getelementptr inbounds i8, i8* %228, i64 %add272
  %230 = load i8, i8* %arrayidx273, align 1, !tbaa !16
  %231 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx274 = getelementptr inbounds i8, i8* %231, i64 3
  store i8 %230, i8* %arrayidx274, align 1, !tbaa !16
  br label %for.inc275

for.inc275:                                       ; preds = %for.body264
  %232 = load i64, i64* %i, align 8, !tbaa !6
  %inc276 = add i64 %232, 1
  store i64 %inc276, i64* %i, align 8, !tbaa !6
  %233 = load i32, i32* %num_channels, align 4, !tbaa !8
  %234 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext277 = zext i32 %233 to i64
  %add.ptr278 = getelementptr inbounds i8, i8* %234, i64 %idx.ext277
  store i8* %add.ptr278, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond262

for.end279:                                       ; preds = %for.cond262
  br label %if.end280

if.end280:                                        ; preds = %for.end279, %for.end260
  br label %if.end316

if.else281:                                       ; preds = %if.else236
  %235 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype282 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %235, i32 0, i32 0
  %236 = load i32, i32* %colortype282, align 8, !tbaa !58
  %cmp283 = icmp eq i32 %236, 6
  br i1 %cmp283, label %if.then284, label %if.end315

if.then284:                                       ; preds = %if.else281
  %237 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth285 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %237, i32 0, i32 1
  %238 = load i32, i32* %bitdepth285, align 4, !tbaa !59
  %cmp286 = icmp eq i32 %238, 8
  br i1 %cmp286, label %if.then287, label %if.else289

if.then287:                                       ; preds = %if.then284
  %239 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %240 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %241 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %mul288 = mul i64 %241, 4
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %239, i8* %240, i64 %mul288)
  br label %if.end314

if.else289:                                       ; preds = %if.then284
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond290

for.cond290:                                      ; preds = %for.inc309, %if.else289
  %242 = load i64, i64* %i, align 8, !tbaa !6
  %243 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp291 = icmp ne i64 %242, %243
  br i1 %cmp291, label %for.body292, label %for.end313

for.body292:                                      ; preds = %for.cond290
  %244 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %245 = load i64, i64* %i, align 8, !tbaa !6
  %mul293 = mul i64 %245, 8
  %add294 = add i64 %mul293, 0
  %arrayidx295 = getelementptr inbounds i8, i8* %244, i64 %add294
  %246 = load i8, i8* %arrayidx295, align 1, !tbaa !16
  %247 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx296 = getelementptr inbounds i8, i8* %247, i64 0
  store i8 %246, i8* %arrayidx296, align 1, !tbaa !16
  %248 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %249 = load i64, i64* %i, align 8, !tbaa !6
  %mul297 = mul i64 %249, 8
  %add298 = add i64 %mul297, 2
  %arrayidx299 = getelementptr inbounds i8, i8* %248, i64 %add298
  %250 = load i8, i8* %arrayidx299, align 1, !tbaa !16
  %251 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx300 = getelementptr inbounds i8, i8* %251, i64 1
  store i8 %250, i8* %arrayidx300, align 1, !tbaa !16
  %252 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %253 = load i64, i64* %i, align 8, !tbaa !6
  %mul301 = mul i64 %253, 8
  %add302 = add i64 %mul301, 4
  %arrayidx303 = getelementptr inbounds i8, i8* %252, i64 %add302
  %254 = load i8, i8* %arrayidx303, align 1, !tbaa !16
  %255 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx304 = getelementptr inbounds i8, i8* %255, i64 2
  store i8 %254, i8* %arrayidx304, align 1, !tbaa !16
  %256 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %257 = load i64, i64* %i, align 8, !tbaa !6
  %mul305 = mul i64 %257, 8
  %add306 = add i64 %mul305, 6
  %arrayidx307 = getelementptr inbounds i8, i8* %256, i64 %add306
  %258 = load i8, i8* %arrayidx307, align 1, !tbaa !16
  %259 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx308 = getelementptr inbounds i8, i8* %259, i64 3
  store i8 %258, i8* %arrayidx308, align 1, !tbaa !16
  br label %for.inc309

for.inc309:                                       ; preds = %for.body292
  %260 = load i64, i64* %i, align 8, !tbaa !6
  %inc310 = add i64 %260, 1
  store i64 %inc310, i64* %i, align 8, !tbaa !6
  %261 = load i32, i32* %num_channels, align 4, !tbaa !8
  %262 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %idx.ext311 = zext i32 %261 to i64
  %add.ptr312 = getelementptr inbounds i8, i8* %262, i64 %idx.ext311
  store i8* %add.ptr312, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond290

for.end313:                                       ; preds = %for.cond290
  br label %if.end314

if.end314:                                        ; preds = %for.end313, %if.then287
  br label %if.end315

if.end315:                                        ; preds = %if.end314, %if.else281
  br label %if.end316

if.end316:                                        ; preds = %if.end315, %if.end280
  br label %if.end317

if.end317:                                        ; preds = %if.end316, %if.end235
  br label %if.end318

if.end318:                                        ; preds = %if.end317, %if.end197
  br label %if.end319

if.end319:                                        ; preds = %if.end318, %if.end82
  %263 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %263) #16
  %264 = bitcast i32* %num_channels to i8*
  call void @llvm.lifetime.end(i64 4, i8* %264) #16
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL18getPixelColorsRGB8PhmPKhPK16LodePNGColorMode(i8* %buffer, i64 %numpixels, i8* %in, %struct.LodePNGColorMode* %mode) #0 {
entry:
  %buffer.addr = alloca i8*, align 8
  %numpixels.addr = alloca i64, align 8
  %in.addr = alloca i8*, align 8
  %mode.addr = alloca %struct.LodePNGColorMode*, align 8
  %num_channels = alloca i32, align 4
  %i = alloca i64, align 8
  %highest = alloca i32, align 4
  %j = alloca i64, align 8
  %value = alloca i32, align 4
  %index = alloca i32, align 4
  %j84 = alloca i64, align 8
  %index88 = alloca i32, align 4
  store i8* %buffer, i8** %buffer.addr, align 8, !tbaa !2
  store i64 %numpixels, i64* %numpixels.addr, align 8, !tbaa !6
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %mode, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %0 = bitcast i32* %num_channels to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 3, i32* %num_channels, align 4, !tbaa !8
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 0
  %3 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else37

if.then:                                          ; preds = %entry
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 1
  %5 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %5, 8
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %6 = load i64, i64* %i, align 8, !tbaa !6
  %7 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp3 = icmp ne i64 %6, %7
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %9
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %11 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %11, i64 2
  store i8 %10, i8* %arrayidx4, align 1, !tbaa !16
  %12 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx5 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %10, i8* %arrayidx5, align 1, !tbaa !16
  %13 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx6 = getelementptr inbounds i8, i8* %13, i64 0
  store i8 %10, i8* %arrayidx6, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %14, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  %15 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 3
  store i8* %add.ptr, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end36

if.else:                                          ; preds = %if.then
  %16 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth7 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %16, i32 0, i32 1
  %17 = load i32, i32* %bitdepth7, align 4, !tbaa !59
  %cmp8 = icmp eq i32 %17, 16
  br i1 %cmp8, label %if.then9, label %if.else21

if.then9:                                         ; preds = %if.else
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc17, %if.then9
  %18 = load i64, i64* %i, align 8, !tbaa !6
  %19 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp11 = icmp ne i64 %18, %19
  br i1 %cmp11, label %for.body12, label %for.end20

for.body12:                                       ; preds = %for.cond10
  %20 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %21 = load i64, i64* %i, align 8, !tbaa !6
  %mul = mul i64 %21, 2
  %arrayidx13 = getelementptr inbounds i8, i8* %20, i64 %mul
  %22 = load i8, i8* %arrayidx13, align 1, !tbaa !16
  %23 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx14 = getelementptr inbounds i8, i8* %23, i64 2
  store i8 %22, i8* %arrayidx14, align 1, !tbaa !16
  %24 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx15 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %22, i8* %arrayidx15, align 1, !tbaa !16
  %25 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx16 = getelementptr inbounds i8, i8* %25, i64 0
  store i8 %22, i8* %arrayidx16, align 1, !tbaa !16
  br label %for.inc17

for.inc17:                                        ; preds = %for.body12
  %26 = load i64, i64* %i, align 8, !tbaa !6
  %inc18 = add i64 %26, 1
  store i64 %inc18, i64* %i, align 8, !tbaa !6
  %27 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr19 = getelementptr inbounds i8, i8* %27, i64 3
  store i8* %add.ptr19, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond10

for.end20:                                        ; preds = %for.cond10
  br label %if.end

if.else21:                                        ; preds = %if.else
  %28 = bitcast i32* %highest to i8*
  call void @llvm.lifetime.start(i64 4, i8* %28) #16
  %29 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth22 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %29, i32 0, i32 1
  %30 = load i32, i32* %bitdepth22, align 4, !tbaa !59
  %shl = shl i32 1, %30
  %sub = sub i32 %shl, 1
  store i32 %sub, i32* %highest, align 4, !tbaa !8
  %31 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start(i64 8, i8* %31) #16
  store i64 0, i64* %j, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc32, %if.else21
  %32 = load i64, i64* %i, align 8, !tbaa !6
  %33 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp24 = icmp ne i64 %32, %33
  br i1 %cmp24, label %for.body25, label %for.end35

for.body25:                                       ; preds = %for.cond23
  %34 = bitcast i32* %value to i8*
  call void @llvm.lifetime.start(i64 4, i8* %34) #16
  %35 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %36 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth26 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %36, i32 0, i32 1
  %37 = load i32, i32* %bitdepth26, align 4, !tbaa !59
  %conv = zext i32 %37 to i64
  %call = call i32 @_ZL26readBitsFromReversedStreamPmPKhm(i64* %j, i8* %35, i64 %conv)
  store i32 %call, i32* %value, align 4, !tbaa !8
  %38 = load i32, i32* %value, align 4, !tbaa !8
  %mul27 = mul i32 %38, 255
  %39 = load i32, i32* %highest, align 4, !tbaa !8
  %div = udiv i32 %mul27, %39
  %conv28 = trunc i32 %div to i8
  %40 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx29 = getelementptr inbounds i8, i8* %40, i64 2
  store i8 %conv28, i8* %arrayidx29, align 1, !tbaa !16
  %41 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx30 = getelementptr inbounds i8, i8* %41, i64 1
  store i8 %conv28, i8* %arrayidx30, align 1, !tbaa !16
  %42 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx31 = getelementptr inbounds i8, i8* %42, i64 0
  store i8 %conv28, i8* %arrayidx31, align 1, !tbaa !16
  %43 = bitcast i32* %value to i8*
  call void @llvm.lifetime.end(i64 4, i8* %43) #16
  br label %for.inc32

for.inc32:                                        ; preds = %for.body25
  %44 = load i64, i64* %i, align 8, !tbaa !6
  %inc33 = add i64 %44, 1
  store i64 %inc33, i64* %i, align 8, !tbaa !6
  %45 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr34 = getelementptr inbounds i8, i8* %45, i64 3
  store i8* %add.ptr34, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond23

for.end35:                                        ; preds = %for.cond23
  %46 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #16
  %47 = bitcast i32* %highest to i8*
  call void @llvm.lifetime.end(i64 4, i8* %47) #16
  br label %if.end

if.end:                                           ; preds = %for.end35, %for.end20
  br label %if.end36

if.end36:                                         ; preds = %if.end, %for.end
  br label %if.end177

if.else37:                                        ; preds = %entry
  %48 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype38 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %48, i32 0, i32 0
  %49 = load i32, i32* %colortype38, align 8, !tbaa !58
  %cmp39 = icmp eq i32 %49, 2
  br i1 %cmp39, label %if.then40, label %if.else65

if.then40:                                        ; preds = %if.else37
  %50 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth41 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %50, i32 0, i32 1
  %51 = load i32, i32* %bitdepth41, align 4, !tbaa !59
  %cmp42 = icmp eq i32 %51, 8
  br i1 %cmp42, label %if.then43, label %if.else45

if.then43:                                        ; preds = %if.then40
  %52 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %53 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %54 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %mul44 = mul i64 %54, 3
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %52, i8* %53, i64 %mul44)
  br label %if.end64

if.else45:                                        ; preds = %if.then40
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc60, %if.else45
  %55 = load i64, i64* %i, align 8, !tbaa !6
  %56 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp47 = icmp ne i64 %55, %56
  br i1 %cmp47, label %for.body48, label %for.end63

for.body48:                                       ; preds = %for.cond46
  %57 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %58 = load i64, i64* %i, align 8, !tbaa !6
  %mul49 = mul i64 %58, 6
  %add = add i64 %mul49, 0
  %arrayidx50 = getelementptr inbounds i8, i8* %57, i64 %add
  %59 = load i8, i8* %arrayidx50, align 1, !tbaa !16
  %60 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx51 = getelementptr inbounds i8, i8* %60, i64 0
  store i8 %59, i8* %arrayidx51, align 1, !tbaa !16
  %61 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %62 = load i64, i64* %i, align 8, !tbaa !6
  %mul52 = mul i64 %62, 6
  %add53 = add i64 %mul52, 2
  %arrayidx54 = getelementptr inbounds i8, i8* %61, i64 %add53
  %63 = load i8, i8* %arrayidx54, align 1, !tbaa !16
  %64 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx55 = getelementptr inbounds i8, i8* %64, i64 1
  store i8 %63, i8* %arrayidx55, align 1, !tbaa !16
  %65 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %66 = load i64, i64* %i, align 8, !tbaa !6
  %mul56 = mul i64 %66, 6
  %add57 = add i64 %mul56, 4
  %arrayidx58 = getelementptr inbounds i8, i8* %65, i64 %add57
  %67 = load i8, i8* %arrayidx58, align 1, !tbaa !16
  %68 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx59 = getelementptr inbounds i8, i8* %68, i64 2
  store i8 %67, i8* %arrayidx59, align 1, !tbaa !16
  br label %for.inc60

for.inc60:                                        ; preds = %for.body48
  %69 = load i64, i64* %i, align 8, !tbaa !6
  %inc61 = add i64 %69, 1
  store i64 %inc61, i64* %i, align 8, !tbaa !6
  %70 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr62 = getelementptr inbounds i8, i8* %70, i64 3
  store i8* %add.ptr62, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond46

for.end63:                                        ; preds = %for.cond46
  br label %if.end64

if.end64:                                         ; preds = %for.end63, %if.then43
  br label %if.end176

if.else65:                                        ; preds = %if.else37
  %71 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype66 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %71, i32 0, i32 0
  %72 = load i32, i32* %colortype66, align 8, !tbaa !58
  %cmp67 = icmp eq i32 %72, 3
  br i1 %cmp67, label %if.then68, label %if.else101

if.then68:                                        ; preds = %if.else65
  %73 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth69 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %73, i32 0, i32 1
  %74 = load i32, i32* %bitdepth69, align 4, !tbaa !59
  %cmp70 = icmp eq i32 %74, 8
  br i1 %cmp70, label %if.then71, label %if.else83

if.then71:                                        ; preds = %if.then68
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc79, %if.then71
  %75 = load i64, i64* %i, align 8, !tbaa !6
  %76 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp73 = icmp ne i64 %75, %76
  br i1 %cmp73, label %for.body74, label %for.end82

for.body74:                                       ; preds = %for.cond72
  %77 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %77) #16
  %78 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %79 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx75 = getelementptr inbounds i8, i8* %78, i64 %79
  %80 = load i8, i8* %arrayidx75, align 1, !tbaa !16
  %conv76 = zext i8 %80 to i32
  store i32 %conv76, i32* %index, align 4, !tbaa !8
  %81 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %82 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %82, i32 0, i32 2
  %83 = load i8*, i8** %palette, align 8, !tbaa !60
  %84 = load i32, i32* %index, align 4, !tbaa !8
  %mul77 = mul i32 %84, 4
  %idxprom = zext i32 %mul77 to i64
  %arrayidx78 = getelementptr inbounds i8, i8* %83, i64 %idxprom
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %81, i8* %arrayidx78, i64 3)
  %85 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %85) #16
  br label %for.inc79

for.inc79:                                        ; preds = %for.body74
  %86 = load i64, i64* %i, align 8, !tbaa !6
  %inc80 = add i64 %86, 1
  store i64 %inc80, i64* %i, align 8, !tbaa !6
  %87 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr81 = getelementptr inbounds i8, i8* %87, i64 3
  store i8* %add.ptr81, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond72

for.end82:                                        ; preds = %for.cond72
  br label %if.end100

if.else83:                                        ; preds = %if.then68
  %88 = bitcast i64* %j84 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %88) #16
  store i64 0, i64* %j84, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond85

for.cond85:                                       ; preds = %for.inc96, %if.else83
  %89 = load i64, i64* %i, align 8, !tbaa !6
  %90 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp86 = icmp ne i64 %89, %90
  br i1 %cmp86, label %for.body87, label %for.end99

for.body87:                                       ; preds = %for.cond85
  %91 = bitcast i32* %index88 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %91) #16
  %92 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %93 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth89 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %93, i32 0, i32 1
  %94 = load i32, i32* %bitdepth89, align 4, !tbaa !59
  %conv90 = zext i32 %94 to i64
  %call91 = call i32 @_ZL26readBitsFromReversedStreamPmPKhm(i64* %j84, i8* %92, i64 %conv90)
  store i32 %call91, i32* %index88, align 4, !tbaa !8
  %95 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %96 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %palette92 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %96, i32 0, i32 2
  %97 = load i8*, i8** %palette92, align 8, !tbaa !60
  %98 = load i32, i32* %index88, align 4, !tbaa !8
  %mul93 = mul i32 %98, 4
  %idxprom94 = zext i32 %mul93 to i64
  %arrayidx95 = getelementptr inbounds i8, i8* %97, i64 %idxprom94
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %95, i8* %arrayidx95, i64 3)
  %99 = bitcast i32* %index88 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %99) #16
  br label %for.inc96

for.inc96:                                        ; preds = %for.body87
  %100 = load i64, i64* %i, align 8, !tbaa !6
  %inc97 = add i64 %100, 1
  store i64 %inc97, i64* %i, align 8, !tbaa !6
  %101 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr98 = getelementptr inbounds i8, i8* %101, i64 3
  store i8* %add.ptr98, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond85

for.end99:                                        ; preds = %for.cond85
  %102 = bitcast i64* %j84 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %102) #16
  br label %if.end100

if.end100:                                        ; preds = %for.end99, %for.end82
  br label %if.end175

if.else101:                                       ; preds = %if.else65
  %103 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype102 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %103, i32 0, i32 0
  %104 = load i32, i32* %colortype102, align 8, !tbaa !58
  %cmp103 = icmp eq i32 %104, 4
  br i1 %cmp103, label %if.then104, label %if.else136

if.then104:                                       ; preds = %if.else101
  %105 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth105 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %105, i32 0, i32 1
  %106 = load i32, i32* %bitdepth105, align 4, !tbaa !59
  %cmp106 = icmp eq i32 %106, 8
  br i1 %cmp106, label %if.then107, label %if.else121

if.then107:                                       ; preds = %if.then104
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond108

for.cond108:                                      ; preds = %for.inc117, %if.then107
  %107 = load i64, i64* %i, align 8, !tbaa !6
  %108 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp109 = icmp ne i64 %107, %108
  br i1 %cmp109, label %for.body110, label %for.end120

for.body110:                                      ; preds = %for.cond108
  %109 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %110 = load i64, i64* %i, align 8, !tbaa !6
  %mul111 = mul i64 %110, 2
  %add112 = add i64 %mul111, 0
  %arrayidx113 = getelementptr inbounds i8, i8* %109, i64 %add112
  %111 = load i8, i8* %arrayidx113, align 1, !tbaa !16
  %112 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx114 = getelementptr inbounds i8, i8* %112, i64 2
  store i8 %111, i8* %arrayidx114, align 1, !tbaa !16
  %113 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx115 = getelementptr inbounds i8, i8* %113, i64 1
  store i8 %111, i8* %arrayidx115, align 1, !tbaa !16
  %114 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx116 = getelementptr inbounds i8, i8* %114, i64 0
  store i8 %111, i8* %arrayidx116, align 1, !tbaa !16
  br label %for.inc117

for.inc117:                                       ; preds = %for.body110
  %115 = load i64, i64* %i, align 8, !tbaa !6
  %inc118 = add i64 %115, 1
  store i64 %inc118, i64* %i, align 8, !tbaa !6
  %116 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr119 = getelementptr inbounds i8, i8* %116, i64 3
  store i8* %add.ptr119, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond108

for.end120:                                       ; preds = %for.cond108
  br label %if.end135

if.else121:                                       ; preds = %if.then104
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond122

for.cond122:                                      ; preds = %for.inc131, %if.else121
  %117 = load i64, i64* %i, align 8, !tbaa !6
  %118 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp123 = icmp ne i64 %117, %118
  br i1 %cmp123, label %for.body124, label %for.end134

for.body124:                                      ; preds = %for.cond122
  %119 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %120 = load i64, i64* %i, align 8, !tbaa !6
  %mul125 = mul i64 %120, 4
  %add126 = add i64 %mul125, 0
  %arrayidx127 = getelementptr inbounds i8, i8* %119, i64 %add126
  %121 = load i8, i8* %arrayidx127, align 1, !tbaa !16
  %122 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx128 = getelementptr inbounds i8, i8* %122, i64 2
  store i8 %121, i8* %arrayidx128, align 1, !tbaa !16
  %123 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx129 = getelementptr inbounds i8, i8* %123, i64 1
  store i8 %121, i8* %arrayidx129, align 1, !tbaa !16
  %124 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx130 = getelementptr inbounds i8, i8* %124, i64 0
  store i8 %121, i8* %arrayidx130, align 1, !tbaa !16
  br label %for.inc131

for.inc131:                                       ; preds = %for.body124
  %125 = load i64, i64* %i, align 8, !tbaa !6
  %inc132 = add i64 %125, 1
  store i64 %inc132, i64* %i, align 8, !tbaa !6
  %126 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr133 = getelementptr inbounds i8, i8* %126, i64 3
  store i8* %add.ptr133, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond122

for.end134:                                       ; preds = %for.cond122
  br label %if.end135

if.end135:                                        ; preds = %for.end134, %for.end120
  br label %if.end174

if.else136:                                       ; preds = %if.else101
  %127 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype137 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %127, i32 0, i32 0
  %128 = load i32, i32* %colortype137, align 8, !tbaa !58
  %cmp138 = icmp eq i32 %128, 6
  br i1 %cmp138, label %if.then139, label %if.end173

if.then139:                                       ; preds = %if.else136
  %129 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth140 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %129, i32 0, i32 1
  %130 = load i32, i32* %bitdepth140, align 4, !tbaa !59
  %cmp141 = icmp eq i32 %130, 8
  br i1 %cmp141, label %if.then142, label %if.else152

if.then142:                                       ; preds = %if.then139
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond143

for.cond143:                                      ; preds = %for.inc148, %if.then142
  %131 = load i64, i64* %i, align 8, !tbaa !6
  %132 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp144 = icmp ne i64 %131, %132
  br i1 %cmp144, label %for.body145, label %for.end151

for.body145:                                      ; preds = %for.cond143
  %133 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %134 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %135 = load i64, i64* %i, align 8, !tbaa !6
  %mul146 = mul i64 %135, 4
  %arrayidx147 = getelementptr inbounds i8, i8* %134, i64 %mul146
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %133, i8* %arrayidx147, i64 3)
  br label %for.inc148

for.inc148:                                       ; preds = %for.body145
  %136 = load i64, i64* %i, align 8, !tbaa !6
  %inc149 = add i64 %136, 1
  store i64 %inc149, i64* %i, align 8, !tbaa !6
  %137 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr150 = getelementptr inbounds i8, i8* %137, i64 3
  store i8* %add.ptr150, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond143

for.end151:                                       ; preds = %for.cond143
  br label %if.end172

if.else152:                                       ; preds = %if.then139
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond153

for.cond153:                                      ; preds = %for.inc168, %if.else152
  %138 = load i64, i64* %i, align 8, !tbaa !6
  %139 = load i64, i64* %numpixels.addr, align 8, !tbaa !6
  %cmp154 = icmp ne i64 %138, %139
  br i1 %cmp154, label %for.body155, label %for.end171

for.body155:                                      ; preds = %for.cond153
  %140 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %141 = load i64, i64* %i, align 8, !tbaa !6
  %mul156 = mul i64 %141, 8
  %add157 = add i64 %mul156, 0
  %arrayidx158 = getelementptr inbounds i8, i8* %140, i64 %add157
  %142 = load i8, i8* %arrayidx158, align 1, !tbaa !16
  %143 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx159 = getelementptr inbounds i8, i8* %143, i64 0
  store i8 %142, i8* %arrayidx159, align 1, !tbaa !16
  %144 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %145 = load i64, i64* %i, align 8, !tbaa !6
  %mul160 = mul i64 %145, 8
  %add161 = add i64 %mul160, 2
  %arrayidx162 = getelementptr inbounds i8, i8* %144, i64 %add161
  %146 = load i8, i8* %arrayidx162, align 1, !tbaa !16
  %147 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx163 = getelementptr inbounds i8, i8* %147, i64 1
  store i8 %146, i8* %arrayidx163, align 1, !tbaa !16
  %148 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %149 = load i64, i64* %i, align 8, !tbaa !6
  %mul164 = mul i64 %149, 8
  %add165 = add i64 %mul164, 4
  %arrayidx166 = getelementptr inbounds i8, i8* %148, i64 %add165
  %150 = load i8, i8* %arrayidx166, align 1, !tbaa !16
  %151 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %arrayidx167 = getelementptr inbounds i8, i8* %151, i64 2
  store i8 %150, i8* %arrayidx167, align 1, !tbaa !16
  br label %for.inc168

for.inc168:                                       ; preds = %for.body155
  %152 = load i64, i64* %i, align 8, !tbaa !6
  %inc169 = add i64 %152, 1
  store i64 %inc169, i64* %i, align 8, !tbaa !6
  %153 = load i8*, i8** %buffer.addr, align 8, !tbaa !2
  %add.ptr170 = getelementptr inbounds i8, i8* %153, i64 3
  store i8* %add.ptr170, i8** %buffer.addr, align 8, !tbaa !2
  br label %for.cond153

for.end171:                                       ; preds = %for.cond153
  br label %if.end172

if.end172:                                        ; preds = %for.end171, %for.end151
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %if.else136
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.end135
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %if.end100
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.end64
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %if.end36
  %154 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %154) #16
  %155 = bitcast i32* %num_channels to i8*
  call void @llvm.lifetime.end(i64 4, i8* %155) #16
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL18getPixelColorRGBA8PhS_S_S_PKhmPK16LodePNGColorMode(i8* %r, i8* %g, i8* %b, i8* %a, i8* %in, i64 %i, %struct.LodePNGColorMode* %mode) #0 {
entry:
  %r.addr = alloca i8*, align 8
  %g.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %a.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %i.addr = alloca i64, align 8
  %mode.addr = alloca %struct.LodePNGColorMode*, align 8
  %highest = alloca i32, align 4
  %j = alloca i64, align 8
  %value = alloca i32, align 4
  %index = alloca i32, align 4
  %j143 = alloca i64, align 8
  store i8* %r, i8** %r.addr, align 8, !tbaa !2
  store i8* %g, i8** %g.addr, align 8, !tbaa !2
  store i8* %b, i8** %b.addr, align 8, !tbaa !2
  store i8* %a, i8** %a.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %i, i64* %i.addr, align 8, !tbaa !6
  store %struct.LodePNGColorMode* %mode, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else47

if.then:                                          ; preds = %entry
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %2, i32 0, i32 1
  %3 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %3, 8
  br i1 %cmp1, label %if.then2, label %if.else5

if.then2:                                         ; preds = %if.then
  %4 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %5 = load i64, i64* %i.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %5
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %7 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %6, i8* %7, align 1, !tbaa !16
  %8 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %6, i8* %8, align 1, !tbaa !16
  %9 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %6, i8* %9, align 1, !tbaa !16
  %10 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %10, i32 0, i32 4
  %11 = load i32, i32* %key_defined, align 8, !tbaa !52
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then2
  %12 = load i8*, i8** %r.addr, align 8, !tbaa !2
  %13 = load i8, i8* %12, align 1, !tbaa !16
  %conv = zext i8 %13 to i32
  %14 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %14, i32 0, i32 5
  %15 = load i32, i32* %key_r, align 4, !tbaa !57
  %cmp3 = icmp eq i32 %conv, %15
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %land.lhs.true
  %16 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 0, i8* %16, align 1, !tbaa !16
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %if.then2
  %17 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 -1, i8* %17, align 1, !tbaa !16
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end46

if.else5:                                         ; preds = %if.then
  %18 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %18, i32 0, i32 1
  %19 = load i32, i32* %bitdepth6, align 4, !tbaa !59
  %cmp7 = icmp eq i32 %19, 16
  br i1 %cmp7, label %if.then8, label %if.else28

if.then8:                                         ; preds = %if.else5
  %20 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %21 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul = mul i64 %21, 2
  %add = add i64 %mul, 0
  %arrayidx9 = getelementptr inbounds i8, i8* %20, i64 %add
  %22 = load i8, i8* %arrayidx9, align 1, !tbaa !16
  %23 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %22, i8* %23, align 1, !tbaa !16
  %24 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %22, i8* %24, align 1, !tbaa !16
  %25 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %22, i8* %25, align 1, !tbaa !16
  %26 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined10 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %26, i32 0, i32 4
  %27 = load i32, i32* %key_defined10, align 8, !tbaa !52
  %tobool11 = icmp ne i32 %27, 0
  br i1 %tobool11, label %land.lhs.true12, label %if.else26

land.lhs.true12:                                  ; preds = %if.then8
  %28 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %29 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul13 = mul i64 %29, 2
  %add14 = add i64 %mul13, 0
  %arrayidx15 = getelementptr inbounds i8, i8* %28, i64 %add14
  %30 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %30 to i32
  %mul17 = mul i32 256, %conv16
  %31 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %32 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul18 = mul i64 %32, 2
  %add19 = add i64 %mul18, 1
  %arrayidx20 = getelementptr inbounds i8, i8* %31, i64 %add19
  %33 = load i8, i8* %arrayidx20, align 1, !tbaa !16
  %conv21 = zext i8 %33 to i32
  %add22 = add i32 %mul17, %conv21
  %34 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r23 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %34, i32 0, i32 5
  %35 = load i32, i32* %key_r23, align 4, !tbaa !57
  %cmp24 = icmp eq i32 %add22, %35
  br i1 %cmp24, label %if.then25, label %if.else26

if.then25:                                        ; preds = %land.lhs.true12
  %36 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 0, i8* %36, align 1, !tbaa !16
  br label %if.end27

if.else26:                                        ; preds = %land.lhs.true12, %if.then8
  %37 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 -1, i8* %37, align 1, !tbaa !16
  br label %if.end27

if.end27:                                         ; preds = %if.else26, %if.then25
  br label %if.end45

if.else28:                                        ; preds = %if.else5
  %38 = bitcast i32* %highest to i8*
  call void @llvm.lifetime.start(i64 4, i8* %38) #16
  %39 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth29 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %39, i32 0, i32 1
  %40 = load i32, i32* %bitdepth29, align 4, !tbaa !59
  %shl = shl i32 1, %40
  %sub = sub i32 %shl, 1
  store i32 %sub, i32* %highest, align 4, !tbaa !8
  %41 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start(i64 8, i8* %41) #16
  %42 = load i64, i64* %i.addr, align 8, !tbaa !6
  %43 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth30 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %43, i32 0, i32 1
  %44 = load i32, i32* %bitdepth30, align 4, !tbaa !59
  %conv31 = zext i32 %44 to i64
  %mul32 = mul i64 %42, %conv31
  store i64 %mul32, i64* %j, align 8, !tbaa !6
  %45 = bitcast i32* %value to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #16
  %46 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %47 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth33 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %47, i32 0, i32 1
  %48 = load i32, i32* %bitdepth33, align 4, !tbaa !59
  %conv34 = zext i32 %48 to i64
  %call = call i32 @_ZL26readBitsFromReversedStreamPmPKhm(i64* %j, i8* %46, i64 %conv34)
  store i32 %call, i32* %value, align 4, !tbaa !8
  %49 = load i32, i32* %value, align 4, !tbaa !8
  %mul35 = mul i32 %49, 255
  %50 = load i32, i32* %highest, align 4, !tbaa !8
  %div = udiv i32 %mul35, %50
  %conv36 = trunc i32 %div to i8
  %51 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %conv36, i8* %51, align 1, !tbaa !16
  %52 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %conv36, i8* %52, align 1, !tbaa !16
  %53 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %conv36, i8* %53, align 1, !tbaa !16
  %54 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined37 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %54, i32 0, i32 4
  %55 = load i32, i32* %key_defined37, align 8, !tbaa !52
  %tobool38 = icmp ne i32 %55, 0
  br i1 %tobool38, label %land.lhs.true39, label %if.else43

land.lhs.true39:                                  ; preds = %if.else28
  %56 = load i32, i32* %value, align 4, !tbaa !8
  %57 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r40 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %57, i32 0, i32 5
  %58 = load i32, i32* %key_r40, align 4, !tbaa !57
  %cmp41 = icmp eq i32 %56, %58
  br i1 %cmp41, label %if.then42, label %if.else43

if.then42:                                        ; preds = %land.lhs.true39
  %59 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 0, i8* %59, align 1, !tbaa !16
  br label %if.end44

if.else43:                                        ; preds = %land.lhs.true39, %if.else28
  %60 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 -1, i8* %60, align 1, !tbaa !16
  br label %if.end44

if.end44:                                         ; preds = %if.else43, %if.then42
  %61 = bitcast i32* %value to i8*
  call void @llvm.lifetime.end(i64 4, i8* %61) #16
  %62 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end(i64 8, i8* %62) #16
  %63 = bitcast i32* %highest to i8*
  call void @llvm.lifetime.end(i64 4, i8* %63) #16
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end27
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end
  br label %if.end227

if.else47:                                        ; preds = %entry
  %64 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype48 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %64, i32 0, i32 0
  %65 = load i32, i32* %colortype48, align 8, !tbaa !58
  %cmp49 = icmp eq i32 %65, 2
  br i1 %cmp49, label %if.then50, label %if.else133

if.then50:                                        ; preds = %if.else47
  %66 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth51 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %66, i32 0, i32 1
  %67 = load i32, i32* %bitdepth51, align 4, !tbaa !59
  %cmp52 = icmp eq i32 %67, 8
  br i1 %cmp52, label %if.then53, label %if.else78

if.then53:                                        ; preds = %if.then50
  %68 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %69 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul54 = mul i64 %69, 3
  %add55 = add i64 %mul54, 0
  %arrayidx56 = getelementptr inbounds i8, i8* %68, i64 %add55
  %70 = load i8, i8* %arrayidx56, align 1, !tbaa !16
  %71 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %70, i8* %71, align 1, !tbaa !16
  %72 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %73 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul57 = mul i64 %73, 3
  %add58 = add i64 %mul57, 1
  %arrayidx59 = getelementptr inbounds i8, i8* %72, i64 %add58
  %74 = load i8, i8* %arrayidx59, align 1, !tbaa !16
  %75 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %74, i8* %75, align 1, !tbaa !16
  %76 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %77 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul60 = mul i64 %77, 3
  %add61 = add i64 %mul60, 2
  %arrayidx62 = getelementptr inbounds i8, i8* %76, i64 %add61
  %78 = load i8, i8* %arrayidx62, align 1, !tbaa !16
  %79 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %78, i8* %79, align 1, !tbaa !16
  %80 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined63 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %80, i32 0, i32 4
  %81 = load i32, i32* %key_defined63, align 8, !tbaa !52
  %tobool64 = icmp ne i32 %81, 0
  br i1 %tobool64, label %land.lhs.true65, label %if.else76

land.lhs.true65:                                  ; preds = %if.then53
  %82 = load i8*, i8** %r.addr, align 8, !tbaa !2
  %83 = load i8, i8* %82, align 1, !tbaa !16
  %conv66 = zext i8 %83 to i32
  %84 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r67 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %84, i32 0, i32 5
  %85 = load i32, i32* %key_r67, align 4, !tbaa !57
  %cmp68 = icmp eq i32 %conv66, %85
  br i1 %cmp68, label %land.lhs.true69, label %if.else76

land.lhs.true69:                                  ; preds = %land.lhs.true65
  %86 = load i8*, i8** %g.addr, align 8, !tbaa !2
  %87 = load i8, i8* %86, align 1, !tbaa !16
  %conv70 = zext i8 %87 to i32
  %88 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %88, i32 0, i32 6
  %89 = load i32, i32* %key_g, align 8, !tbaa !56
  %cmp71 = icmp eq i32 %conv70, %89
  br i1 %cmp71, label %land.lhs.true72, label %if.else76

land.lhs.true72:                                  ; preds = %land.lhs.true69
  %90 = load i8*, i8** %b.addr, align 8, !tbaa !2
  %91 = load i8, i8* %90, align 1, !tbaa !16
  %conv73 = zext i8 %91 to i32
  %92 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %92, i32 0, i32 7
  %93 = load i32, i32* %key_b, align 4, !tbaa !55
  %cmp74 = icmp eq i32 %conv73, %93
  br i1 %cmp74, label %if.then75, label %if.else76

if.then75:                                        ; preds = %land.lhs.true72
  %94 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 0, i8* %94, align 1, !tbaa !16
  br label %if.end77

if.else76:                                        ; preds = %land.lhs.true72, %land.lhs.true69, %land.lhs.true65, %if.then53
  %95 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 -1, i8* %95, align 1, !tbaa !16
  br label %if.end77

if.end77:                                         ; preds = %if.else76, %if.then75
  br label %if.end132

if.else78:                                        ; preds = %if.then50
  %96 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %97 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul79 = mul i64 %97, 6
  %add80 = add i64 %mul79, 0
  %arrayidx81 = getelementptr inbounds i8, i8* %96, i64 %add80
  %98 = load i8, i8* %arrayidx81, align 1, !tbaa !16
  %99 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %98, i8* %99, align 1, !tbaa !16
  %100 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %101 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul82 = mul i64 %101, 6
  %add83 = add i64 %mul82, 2
  %arrayidx84 = getelementptr inbounds i8, i8* %100, i64 %add83
  %102 = load i8, i8* %arrayidx84, align 1, !tbaa !16
  %103 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %102, i8* %103, align 1, !tbaa !16
  %104 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %105 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul85 = mul i64 %105, 6
  %add86 = add i64 %mul85, 4
  %arrayidx87 = getelementptr inbounds i8, i8* %104, i64 %add86
  %106 = load i8, i8* %arrayidx87, align 1, !tbaa !16
  %107 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %106, i8* %107, align 1, !tbaa !16
  %108 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_defined88 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %108, i32 0, i32 4
  %109 = load i32, i32* %key_defined88, align 8, !tbaa !52
  %tobool89 = icmp ne i32 %109, 0
  br i1 %tobool89, label %land.lhs.true90, label %if.else130

land.lhs.true90:                                  ; preds = %if.else78
  %110 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %111 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul91 = mul i64 %111, 6
  %add92 = add i64 %mul91, 0
  %arrayidx93 = getelementptr inbounds i8, i8* %110, i64 %add92
  %112 = load i8, i8* %arrayidx93, align 1, !tbaa !16
  %conv94 = zext i8 %112 to i32
  %mul95 = mul i32 256, %conv94
  %113 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %114 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul96 = mul i64 %114, 6
  %add97 = add i64 %mul96, 1
  %arrayidx98 = getelementptr inbounds i8, i8* %113, i64 %add97
  %115 = load i8, i8* %arrayidx98, align 1, !tbaa !16
  %conv99 = zext i8 %115 to i32
  %add100 = add i32 %mul95, %conv99
  %116 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_r101 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %116, i32 0, i32 5
  %117 = load i32, i32* %key_r101, align 4, !tbaa !57
  %cmp102 = icmp eq i32 %add100, %117
  br i1 %cmp102, label %land.lhs.true103, label %if.else130

land.lhs.true103:                                 ; preds = %land.lhs.true90
  %118 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %119 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul104 = mul i64 %119, 6
  %add105 = add i64 %mul104, 2
  %arrayidx106 = getelementptr inbounds i8, i8* %118, i64 %add105
  %120 = load i8, i8* %arrayidx106, align 1, !tbaa !16
  %conv107 = zext i8 %120 to i32
  %mul108 = mul i32 256, %conv107
  %121 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %122 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul109 = mul i64 %122, 6
  %add110 = add i64 %mul109, 3
  %arrayidx111 = getelementptr inbounds i8, i8* %121, i64 %add110
  %123 = load i8, i8* %arrayidx111, align 1, !tbaa !16
  %conv112 = zext i8 %123 to i32
  %add113 = add i32 %mul108, %conv112
  %124 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_g114 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %124, i32 0, i32 6
  %125 = load i32, i32* %key_g114, align 8, !tbaa !56
  %cmp115 = icmp eq i32 %add113, %125
  br i1 %cmp115, label %land.lhs.true116, label %if.else130

land.lhs.true116:                                 ; preds = %land.lhs.true103
  %126 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %127 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul117 = mul i64 %127, 6
  %add118 = add i64 %mul117, 4
  %arrayidx119 = getelementptr inbounds i8, i8* %126, i64 %add118
  %128 = load i8, i8* %arrayidx119, align 1, !tbaa !16
  %conv120 = zext i8 %128 to i32
  %mul121 = mul i32 256, %conv120
  %129 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %130 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul122 = mul i64 %130, 6
  %add123 = add i64 %mul122, 5
  %arrayidx124 = getelementptr inbounds i8, i8* %129, i64 %add123
  %131 = load i8, i8* %arrayidx124, align 1, !tbaa !16
  %conv125 = zext i8 %131 to i32
  %add126 = add i32 %mul121, %conv125
  %132 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %key_b127 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %132, i32 0, i32 7
  %133 = load i32, i32* %key_b127, align 4, !tbaa !55
  %cmp128 = icmp eq i32 %add126, %133
  br i1 %cmp128, label %if.then129, label %if.else130

if.then129:                                       ; preds = %land.lhs.true116
  %134 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 0, i8* %134, align 1, !tbaa !16
  br label %if.end131

if.else130:                                       ; preds = %land.lhs.true116, %land.lhs.true103, %land.lhs.true90, %if.else78
  %135 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 -1, i8* %135, align 1, !tbaa !16
  br label %if.end131

if.end131:                                        ; preds = %if.else130, %if.then129
  br label %if.end132

if.end132:                                        ; preds = %if.end131, %if.end77
  br label %if.end226

if.else133:                                       ; preds = %if.else47
  %136 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype134 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %136, i32 0, i32 0
  %137 = load i32, i32* %colortype134, align 8, !tbaa !58
  %cmp135 = icmp eq i32 %137, 3
  br i1 %cmp135, label %if.then136, label %if.else169

if.then136:                                       ; preds = %if.else133
  %138 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %138) #16
  %139 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth137 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %139, i32 0, i32 1
  %140 = load i32, i32* %bitdepth137, align 4, !tbaa !59
  %cmp138 = icmp eq i32 %140, 8
  br i1 %cmp138, label %if.then139, label %if.else142

if.then139:                                       ; preds = %if.then136
  %141 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %142 = load i64, i64* %i.addr, align 8, !tbaa !6
  %arrayidx140 = getelementptr inbounds i8, i8* %141, i64 %142
  %143 = load i8, i8* %arrayidx140, align 1, !tbaa !16
  %conv141 = zext i8 %143 to i32
  store i32 %conv141, i32* %index, align 4, !tbaa !8
  br label %if.end150

if.else142:                                       ; preds = %if.then136
  %144 = bitcast i64* %j143 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %144) #16
  %145 = load i64, i64* %i.addr, align 8, !tbaa !6
  %146 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth144 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %146, i32 0, i32 1
  %147 = load i32, i32* %bitdepth144, align 4, !tbaa !59
  %conv145 = zext i32 %147 to i64
  %mul146 = mul i64 %145, %conv145
  store i64 %mul146, i64* %j143, align 8, !tbaa !6
  %148 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %149 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth147 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %149, i32 0, i32 1
  %150 = load i32, i32* %bitdepth147, align 4, !tbaa !59
  %conv148 = zext i32 %150 to i64
  %call149 = call i32 @_ZL26readBitsFromReversedStreamPmPKhm(i64* %j143, i8* %148, i64 %conv148)
  store i32 %call149, i32* %index, align 4, !tbaa !8
  %151 = bitcast i64* %j143 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %151) #16
  br label %if.end150

if.end150:                                        ; preds = %if.else142, %if.then139
  %152 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %152, i32 0, i32 2
  %153 = load i8*, i8** %palette, align 8, !tbaa !60
  %154 = load i32, i32* %index, align 4, !tbaa !8
  %mul151 = mul i32 %154, 4
  %add152 = add i32 %mul151, 0
  %idxprom = zext i32 %add152 to i64
  %arrayidx153 = getelementptr inbounds i8, i8* %153, i64 %idxprom
  %155 = load i8, i8* %arrayidx153, align 1, !tbaa !16
  %156 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %155, i8* %156, align 1, !tbaa !16
  %157 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %palette154 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %157, i32 0, i32 2
  %158 = load i8*, i8** %palette154, align 8, !tbaa !60
  %159 = load i32, i32* %index, align 4, !tbaa !8
  %mul155 = mul i32 %159, 4
  %add156 = add i32 %mul155, 1
  %idxprom157 = zext i32 %add156 to i64
  %arrayidx158 = getelementptr inbounds i8, i8* %158, i64 %idxprom157
  %160 = load i8, i8* %arrayidx158, align 1, !tbaa !16
  %161 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %160, i8* %161, align 1, !tbaa !16
  %162 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %palette159 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %162, i32 0, i32 2
  %163 = load i8*, i8** %palette159, align 8, !tbaa !60
  %164 = load i32, i32* %index, align 4, !tbaa !8
  %mul160 = mul i32 %164, 4
  %add161 = add i32 %mul160, 2
  %idxprom162 = zext i32 %add161 to i64
  %arrayidx163 = getelementptr inbounds i8, i8* %163, i64 %idxprom162
  %165 = load i8, i8* %arrayidx163, align 1, !tbaa !16
  %166 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %165, i8* %166, align 1, !tbaa !16
  %167 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %palette164 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %167, i32 0, i32 2
  %168 = load i8*, i8** %palette164, align 8, !tbaa !60
  %169 = load i32, i32* %index, align 4, !tbaa !8
  %mul165 = mul i32 %169, 4
  %add166 = add i32 %mul165, 3
  %idxprom167 = zext i32 %add166 to i64
  %arrayidx168 = getelementptr inbounds i8, i8* %168, i64 %idxprom167
  %170 = load i8, i8* %arrayidx168, align 1, !tbaa !16
  %171 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 %170, i8* %171, align 1, !tbaa !16
  %172 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %172) #16
  br label %if.end225

if.else169:                                       ; preds = %if.else133
  %173 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype170 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %173, i32 0, i32 0
  %174 = load i32, i32* %colortype170, align 8, !tbaa !58
  %cmp171 = icmp eq i32 %174, 4
  br i1 %cmp171, label %if.then172, label %if.else190

if.then172:                                       ; preds = %if.else169
  %175 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth173 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %175, i32 0, i32 1
  %176 = load i32, i32* %bitdepth173, align 4, !tbaa !59
  %cmp174 = icmp eq i32 %176, 8
  br i1 %cmp174, label %if.then175, label %if.else182

if.then175:                                       ; preds = %if.then172
  %177 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %178 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul176 = mul i64 %178, 2
  %add177 = add i64 %mul176, 0
  %arrayidx178 = getelementptr inbounds i8, i8* %177, i64 %add177
  %179 = load i8, i8* %arrayidx178, align 1, !tbaa !16
  %180 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %179, i8* %180, align 1, !tbaa !16
  %181 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %179, i8* %181, align 1, !tbaa !16
  %182 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %179, i8* %182, align 1, !tbaa !16
  %183 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %184 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul179 = mul i64 %184, 2
  %add180 = add i64 %mul179, 1
  %arrayidx181 = getelementptr inbounds i8, i8* %183, i64 %add180
  %185 = load i8, i8* %arrayidx181, align 1, !tbaa !16
  %186 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 %185, i8* %186, align 1, !tbaa !16
  br label %if.end189

if.else182:                                       ; preds = %if.then172
  %187 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %188 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul183 = mul i64 %188, 4
  %add184 = add i64 %mul183, 0
  %arrayidx185 = getelementptr inbounds i8, i8* %187, i64 %add184
  %189 = load i8, i8* %arrayidx185, align 1, !tbaa !16
  %190 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %189, i8* %190, align 1, !tbaa !16
  %191 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %189, i8* %191, align 1, !tbaa !16
  %192 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %189, i8* %192, align 1, !tbaa !16
  %193 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %194 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul186 = mul i64 %194, 4
  %add187 = add i64 %mul186, 2
  %arrayidx188 = getelementptr inbounds i8, i8* %193, i64 %add187
  %195 = load i8, i8* %arrayidx188, align 1, !tbaa !16
  %196 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 %195, i8* %196, align 1, !tbaa !16
  br label %if.end189

if.end189:                                        ; preds = %if.else182, %if.then175
  br label %if.end224

if.else190:                                       ; preds = %if.else169
  %197 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype191 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %197, i32 0, i32 0
  %198 = load i32, i32* %colortype191, align 8, !tbaa !58
  %cmp192 = icmp eq i32 %198, 6
  br i1 %cmp192, label %if.then193, label %if.end223

if.then193:                                       ; preds = %if.else190
  %199 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth194 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %199, i32 0, i32 1
  %200 = load i32, i32* %bitdepth194, align 4, !tbaa !59
  %cmp195 = icmp eq i32 %200, 8
  br i1 %cmp195, label %if.then196, label %if.else209

if.then196:                                       ; preds = %if.then193
  %201 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %202 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul197 = mul i64 %202, 4
  %add198 = add i64 %mul197, 0
  %arrayidx199 = getelementptr inbounds i8, i8* %201, i64 %add198
  %203 = load i8, i8* %arrayidx199, align 1, !tbaa !16
  %204 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %203, i8* %204, align 1, !tbaa !16
  %205 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %206 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul200 = mul i64 %206, 4
  %add201 = add i64 %mul200, 1
  %arrayidx202 = getelementptr inbounds i8, i8* %205, i64 %add201
  %207 = load i8, i8* %arrayidx202, align 1, !tbaa !16
  %208 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %207, i8* %208, align 1, !tbaa !16
  %209 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %210 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul203 = mul i64 %210, 4
  %add204 = add i64 %mul203, 2
  %arrayidx205 = getelementptr inbounds i8, i8* %209, i64 %add204
  %211 = load i8, i8* %arrayidx205, align 1, !tbaa !16
  %212 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %211, i8* %212, align 1, !tbaa !16
  %213 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %214 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul206 = mul i64 %214, 4
  %add207 = add i64 %mul206, 3
  %arrayidx208 = getelementptr inbounds i8, i8* %213, i64 %add207
  %215 = load i8, i8* %arrayidx208, align 1, !tbaa !16
  %216 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 %215, i8* %216, align 1, !tbaa !16
  br label %if.end222

if.else209:                                       ; preds = %if.then193
  %217 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %218 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul210 = mul i64 %218, 8
  %add211 = add i64 %mul210, 0
  %arrayidx212 = getelementptr inbounds i8, i8* %217, i64 %add211
  %219 = load i8, i8* %arrayidx212, align 1, !tbaa !16
  %220 = load i8*, i8** %r.addr, align 8, !tbaa !2
  store i8 %219, i8* %220, align 1, !tbaa !16
  %221 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %222 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul213 = mul i64 %222, 8
  %add214 = add i64 %mul213, 2
  %arrayidx215 = getelementptr inbounds i8, i8* %221, i64 %add214
  %223 = load i8, i8* %arrayidx215, align 1, !tbaa !16
  %224 = load i8*, i8** %g.addr, align 8, !tbaa !2
  store i8 %223, i8* %224, align 1, !tbaa !16
  %225 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %226 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul216 = mul i64 %226, 8
  %add217 = add i64 %mul216, 4
  %arrayidx218 = getelementptr inbounds i8, i8* %225, i64 %add217
  %227 = load i8, i8* %arrayidx218, align 1, !tbaa !16
  %228 = load i8*, i8** %b.addr, align 8, !tbaa !2
  store i8 %227, i8* %228, align 1, !tbaa !16
  %229 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %230 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul219 = mul i64 %230, 8
  %add220 = add i64 %mul219, 6
  %arrayidx221 = getelementptr inbounds i8, i8* %229, i64 %add220
  %231 = load i8, i8* %arrayidx221, align 1, !tbaa !16
  %232 = load i8*, i8** %a.addr, align 8, !tbaa !2
  store i8 %231, i8* %232, align 1, !tbaa !16
  br label %if.end222

if.end222:                                        ; preds = %if.else209, %if.then196
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %if.else190
  br label %if.end224

if.end224:                                        ; preds = %if.end223, %if.end189
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.end150
  br label %if.end226

if.end226:                                        ; preds = %if.end225, %if.end132
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %if.end46
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL12rgba8ToPixelPhmPK16LodePNGColorModeP9ColorTreehhhh(i8* %out, i64 %i, %struct.LodePNGColorMode* %mode, %struct.ColorTree* %tree, i8 zeroext %r, i8 zeroext %g, i8 zeroext %b, i8 zeroext %a) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8*, align 8
  %i.addr = alloca i64, align 8
  %mode.addr = alloca %struct.LodePNGColorMode*, align 8
  %tree.addr = alloca %struct.ColorTree*, align 8
  %r.addr = alloca i8, align 1
  %g.addr = alloca i8, align 1
  %b.addr = alloca i8, align 1
  %a.addr = alloca i8, align 1
  %gray = alloca i8, align 1
  %index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %gray73 = alloca i8, align 1
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i64 %i, i64* %i.addr, align 8, !tbaa !6
  store %struct.LodePNGColorMode* %mode, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  store %struct.ColorTree* %tree, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  store i8 %r, i8* %r.addr, align 1, !tbaa !16
  store i8 %g, i8* %g.addr, align 1, !tbaa !16
  store i8 %b, i8* %b.addr, align 1, !tbaa !16
  store i8 %a, i8* %a.addr, align 1, !tbaa !16
  %0 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %0, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else18

if.then:                                          ; preds = %entry
  call void @llvm.lifetime.start(i64 1, i8* %gray) #16
  %2 = load i8, i8* %r.addr, align 1, !tbaa !16
  store i8 %2, i8* %gray, align 1, !tbaa !16
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i32 0, i32 1
  %4 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %4, 8
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %5 = load i8, i8* %gray, align 1, !tbaa !16
  %6 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %7 = load i64, i64* %i.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %7
  store i8 %5, i8* %arrayidx, align 1, !tbaa !16
  br label %if.end17

if.else:                                          ; preds = %if.then
  %8 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %8, i32 0, i32 1
  %9 = load i32, i32* %bitdepth3, align 4, !tbaa !59
  %cmp4 = icmp eq i32 %9, 16
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %10 = load i8, i8* %gray, align 1, !tbaa !16
  %11 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %12 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul = mul i64 %12, 2
  %add = add i64 %mul, 1
  %arrayidx6 = getelementptr inbounds i8, i8* %11, i64 %add
  store i8 %10, i8* %arrayidx6, align 1, !tbaa !16
  %13 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %14 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul7 = mul i64 %14, 2
  %add8 = add i64 %mul7, 0
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 %add8
  store i8 %10, i8* %arrayidx9, align 1, !tbaa !16
  br label %if.end

if.else10:                                        ; preds = %if.else
  %15 = load i8, i8* %gray, align 1, !tbaa !16
  %conv = zext i8 %15 to i32
  %16 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth11 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %16, i32 0, i32 1
  %17 = load i32, i32* %bitdepth11, align 4, !tbaa !59
  %sub = sub i32 8, %17
  %shr = lshr i32 %conv, %sub
  %18 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth12 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %18, i32 0, i32 1
  %19 = load i32, i32* %bitdepth12, align 4, !tbaa !59
  %shl = shl i32 1, %19
  %sub13 = sub i32 %shl, 1
  %and = and i32 %shr, %sub13
  %conv14 = trunc i32 %and to i8
  store i8 %conv14, i8* %gray, align 1, !tbaa !16
  %20 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %21 = load i64, i64* %i.addr, align 8, !tbaa !6
  %22 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth15 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %22, i32 0, i32 1
  %23 = load i32, i32* %bitdepth15, align 4, !tbaa !59
  %24 = load i8, i8* %gray, align 1, !tbaa !16
  %conv16 = zext i8 %24 to i32
  call void @_ZL12addColorBitsPhmjj(i8* %20, i64 %21, i32 %23, i32 %conv16)
  br label %if.end

if.end:                                           ; preds = %if.else10, %if.then5
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then2
  call void @llvm.lifetime.end(i64 1, i8* %gray) #16
  br label %if.end150

if.else18:                                        ; preds = %entry
  %25 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype19 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %25, i32 0, i32 0
  %26 = load i32, i32* %colortype19, align 8, !tbaa !58
  %cmp20 = icmp eq i32 %26, 2
  br i1 %cmp20, label %if.then21, label %if.else54

if.then21:                                        ; preds = %if.else18
  %27 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth22 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %27, i32 0, i32 1
  %28 = load i32, i32* %bitdepth22, align 4, !tbaa !59
  %cmp23 = icmp eq i32 %28, 8
  br i1 %cmp23, label %if.then24, label %if.else34

if.then24:                                        ; preds = %if.then21
  %29 = load i8, i8* %r.addr, align 1, !tbaa !16
  %30 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %31 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul25 = mul i64 %31, 3
  %add26 = add i64 %mul25, 0
  %arrayidx27 = getelementptr inbounds i8, i8* %30, i64 %add26
  store i8 %29, i8* %arrayidx27, align 1, !tbaa !16
  %32 = load i8, i8* %g.addr, align 1, !tbaa !16
  %33 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %34 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul28 = mul i64 %34, 3
  %add29 = add i64 %mul28, 1
  %arrayidx30 = getelementptr inbounds i8, i8* %33, i64 %add29
  store i8 %32, i8* %arrayidx30, align 1, !tbaa !16
  %35 = load i8, i8* %b.addr, align 1, !tbaa !16
  %36 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %37 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul31 = mul i64 %37, 3
  %add32 = add i64 %mul31, 2
  %arrayidx33 = getelementptr inbounds i8, i8* %36, i64 %add32
  store i8 %35, i8* %arrayidx33, align 1, !tbaa !16
  br label %if.end53

if.else34:                                        ; preds = %if.then21
  %38 = load i8, i8* %r.addr, align 1, !tbaa !16
  %39 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %40 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul35 = mul i64 %40, 6
  %add36 = add i64 %mul35, 1
  %arrayidx37 = getelementptr inbounds i8, i8* %39, i64 %add36
  store i8 %38, i8* %arrayidx37, align 1, !tbaa !16
  %41 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %42 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul38 = mul i64 %42, 6
  %add39 = add i64 %mul38, 0
  %arrayidx40 = getelementptr inbounds i8, i8* %41, i64 %add39
  store i8 %38, i8* %arrayidx40, align 1, !tbaa !16
  %43 = load i8, i8* %g.addr, align 1, !tbaa !16
  %44 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %45 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul41 = mul i64 %45, 6
  %add42 = add i64 %mul41, 3
  %arrayidx43 = getelementptr inbounds i8, i8* %44, i64 %add42
  store i8 %43, i8* %arrayidx43, align 1, !tbaa !16
  %46 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %47 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul44 = mul i64 %47, 6
  %add45 = add i64 %mul44, 2
  %arrayidx46 = getelementptr inbounds i8, i8* %46, i64 %add45
  store i8 %43, i8* %arrayidx46, align 1, !tbaa !16
  %48 = load i8, i8* %b.addr, align 1, !tbaa !16
  %49 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %50 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul47 = mul i64 %50, 6
  %add48 = add i64 %mul47, 5
  %arrayidx49 = getelementptr inbounds i8, i8* %49, i64 %add48
  store i8 %48, i8* %arrayidx49, align 1, !tbaa !16
  %51 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %52 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul50 = mul i64 %52, 6
  %add51 = add i64 %mul50, 4
  %arrayidx52 = getelementptr inbounds i8, i8* %51, i64 %add51
  store i8 %48, i8* %arrayidx52, align 1, !tbaa !16
  br label %if.end53

if.end53:                                         ; preds = %if.else34, %if.then24
  br label %if.end149

if.else54:                                        ; preds = %if.else18
  %53 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype55 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %53, i32 0, i32 0
  %54 = load i32, i32* %colortype55, align 8, !tbaa !58
  %cmp56 = icmp eq i32 %54, 3
  br i1 %cmp56, label %if.then57, label %if.else69

if.then57:                                        ; preds = %if.else54
  %55 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %55) #16
  %56 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %57 = load i8, i8* %r.addr, align 1, !tbaa !16
  %58 = load i8, i8* %g.addr, align 1, !tbaa !16
  %59 = load i8, i8* %b.addr, align 1, !tbaa !16
  %60 = load i8, i8* %a.addr, align 1, !tbaa !16
  %call = call i32 @_ZL14color_tree_getP9ColorTreehhhh(%struct.ColorTree* %56, i8 zeroext %57, i8 zeroext %58, i8 zeroext %59, i8 zeroext %60)
  store i32 %call, i32* %index, align 4, !tbaa !8
  %61 = load i32, i32* %index, align 4, !tbaa !8
  %cmp58 = icmp slt i32 %61, 0
  br i1 %cmp58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.then57
  store i32 82, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end60:                                         ; preds = %if.then57
  %62 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth61 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %62, i32 0, i32 1
  %63 = load i32, i32* %bitdepth61, align 4, !tbaa !59
  %cmp62 = icmp eq i32 %63, 8
  br i1 %cmp62, label %if.then63, label %if.else66

if.then63:                                        ; preds = %if.end60
  %64 = load i32, i32* %index, align 4, !tbaa !8
  %conv64 = trunc i32 %64 to i8
  %65 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %66 = load i64, i64* %i.addr, align 8, !tbaa !6
  %arrayidx65 = getelementptr inbounds i8, i8* %65, i64 %66
  store i8 %conv64, i8* %arrayidx65, align 1, !tbaa !16
  br label %if.end68

if.else66:                                        ; preds = %if.end60
  %67 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %68 = load i64, i64* %i.addr, align 8, !tbaa !6
  %69 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth67 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %69, i32 0, i32 1
  %70 = load i32, i32* %bitdepth67, align 4, !tbaa !59
  %71 = load i32, i32* %index, align 4, !tbaa !8
  call void @_ZL12addColorBitsPhmjj(i8* %67, i64 %68, i32 %70, i32 %71)
  br label %if.end68

if.end68:                                         ; preds = %if.else66, %if.then63
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end68, %if.then59
  %72 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %72) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end148

if.else69:                                        ; preds = %if.else54
  %73 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype70 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %73, i32 0, i32 0
  %74 = load i32, i32* %colortype70, align 8, !tbaa !58
  %cmp71 = icmp eq i32 %74, 4
  br i1 %cmp71, label %if.then72, label %if.else101

if.then72:                                        ; preds = %if.else69
  call void @llvm.lifetime.start(i64 1, i8* %gray73) #16
  %75 = load i8, i8* %r.addr, align 1, !tbaa !16
  store i8 %75, i8* %gray73, align 1, !tbaa !16
  %76 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth74 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %76, i32 0, i32 1
  %77 = load i32, i32* %bitdepth74, align 4, !tbaa !59
  %cmp75 = icmp eq i32 %77, 8
  br i1 %cmp75, label %if.then76, label %if.else83

if.then76:                                        ; preds = %if.then72
  %78 = load i8, i8* %gray73, align 1, !tbaa !16
  %79 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %80 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul77 = mul i64 %80, 2
  %add78 = add i64 %mul77, 0
  %arrayidx79 = getelementptr inbounds i8, i8* %79, i64 %add78
  store i8 %78, i8* %arrayidx79, align 1, !tbaa !16
  %81 = load i8, i8* %a.addr, align 1, !tbaa !16
  %82 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %83 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul80 = mul i64 %83, 2
  %add81 = add i64 %mul80, 1
  %arrayidx82 = getelementptr inbounds i8, i8* %82, i64 %add81
  store i8 %81, i8* %arrayidx82, align 1, !tbaa !16
  br label %if.end100

if.else83:                                        ; preds = %if.then72
  %84 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth84 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %84, i32 0, i32 1
  %85 = load i32, i32* %bitdepth84, align 4, !tbaa !59
  %cmp85 = icmp eq i32 %85, 16
  br i1 %cmp85, label %if.then86, label %if.end99

if.then86:                                        ; preds = %if.else83
  %86 = load i8, i8* %gray73, align 1, !tbaa !16
  %87 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %88 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul87 = mul i64 %88, 4
  %add88 = add i64 %mul87, 1
  %arrayidx89 = getelementptr inbounds i8, i8* %87, i64 %add88
  store i8 %86, i8* %arrayidx89, align 1, !tbaa !16
  %89 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %90 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul90 = mul i64 %90, 4
  %add91 = add i64 %mul90, 0
  %arrayidx92 = getelementptr inbounds i8, i8* %89, i64 %add91
  store i8 %86, i8* %arrayidx92, align 1, !tbaa !16
  %91 = load i8, i8* %a.addr, align 1, !tbaa !16
  %92 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %93 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul93 = mul i64 %93, 4
  %add94 = add i64 %mul93, 3
  %arrayidx95 = getelementptr inbounds i8, i8* %92, i64 %add94
  store i8 %91, i8* %arrayidx95, align 1, !tbaa !16
  %94 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %95 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul96 = mul i64 %95, 4
  %add97 = add i64 %mul96, 2
  %arrayidx98 = getelementptr inbounds i8, i8* %94, i64 %add97
  store i8 %91, i8* %arrayidx98, align 1, !tbaa !16
  br label %if.end99

if.end99:                                         ; preds = %if.then86, %if.else83
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.then76
  call void @llvm.lifetime.end(i64 1, i8* %gray73) #16
  br label %if.end147

if.else101:                                       ; preds = %if.else69
  %96 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %colortype102 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %96, i32 0, i32 0
  %97 = load i32, i32* %colortype102, align 8, !tbaa !58
  %cmp103 = icmp eq i32 %97, 6
  br i1 %cmp103, label %if.then104, label %if.end146

if.then104:                                       ; preds = %if.else101
  %98 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode.addr, align 8, !tbaa !2
  %bitdepth105 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %98, i32 0, i32 1
  %99 = load i32, i32* %bitdepth105, align 4, !tbaa !59
  %cmp106 = icmp eq i32 %99, 8
  br i1 %cmp106, label %if.then107, label %if.else120

if.then107:                                       ; preds = %if.then104
  %100 = load i8, i8* %r.addr, align 1, !tbaa !16
  %101 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %102 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul108 = mul i64 %102, 4
  %add109 = add i64 %mul108, 0
  %arrayidx110 = getelementptr inbounds i8, i8* %101, i64 %add109
  store i8 %100, i8* %arrayidx110, align 1, !tbaa !16
  %103 = load i8, i8* %g.addr, align 1, !tbaa !16
  %104 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %105 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul111 = mul i64 %105, 4
  %add112 = add i64 %mul111, 1
  %arrayidx113 = getelementptr inbounds i8, i8* %104, i64 %add112
  store i8 %103, i8* %arrayidx113, align 1, !tbaa !16
  %106 = load i8, i8* %b.addr, align 1, !tbaa !16
  %107 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %108 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul114 = mul i64 %108, 4
  %add115 = add i64 %mul114, 2
  %arrayidx116 = getelementptr inbounds i8, i8* %107, i64 %add115
  store i8 %106, i8* %arrayidx116, align 1, !tbaa !16
  %109 = load i8, i8* %a.addr, align 1, !tbaa !16
  %110 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %111 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul117 = mul i64 %111, 4
  %add118 = add i64 %mul117, 3
  %arrayidx119 = getelementptr inbounds i8, i8* %110, i64 %add118
  store i8 %109, i8* %arrayidx119, align 1, !tbaa !16
  br label %if.end145

if.else120:                                       ; preds = %if.then104
  %112 = load i8, i8* %r.addr, align 1, !tbaa !16
  %113 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %114 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul121 = mul i64 %114, 8
  %add122 = add i64 %mul121, 1
  %arrayidx123 = getelementptr inbounds i8, i8* %113, i64 %add122
  store i8 %112, i8* %arrayidx123, align 1, !tbaa !16
  %115 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %116 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul124 = mul i64 %116, 8
  %add125 = add i64 %mul124, 0
  %arrayidx126 = getelementptr inbounds i8, i8* %115, i64 %add125
  store i8 %112, i8* %arrayidx126, align 1, !tbaa !16
  %117 = load i8, i8* %g.addr, align 1, !tbaa !16
  %118 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %119 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul127 = mul i64 %119, 8
  %add128 = add i64 %mul127, 3
  %arrayidx129 = getelementptr inbounds i8, i8* %118, i64 %add128
  store i8 %117, i8* %arrayidx129, align 1, !tbaa !16
  %120 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %121 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul130 = mul i64 %121, 8
  %add131 = add i64 %mul130, 2
  %arrayidx132 = getelementptr inbounds i8, i8* %120, i64 %add131
  store i8 %117, i8* %arrayidx132, align 1, !tbaa !16
  %122 = load i8, i8* %b.addr, align 1, !tbaa !16
  %123 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %124 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul133 = mul i64 %124, 8
  %add134 = add i64 %mul133, 5
  %arrayidx135 = getelementptr inbounds i8, i8* %123, i64 %add134
  store i8 %122, i8* %arrayidx135, align 1, !tbaa !16
  %125 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %126 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul136 = mul i64 %126, 8
  %add137 = add i64 %mul136, 4
  %arrayidx138 = getelementptr inbounds i8, i8* %125, i64 %add137
  store i8 %122, i8* %arrayidx138, align 1, !tbaa !16
  %127 = load i8, i8* %a.addr, align 1, !tbaa !16
  %128 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %129 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul139 = mul i64 %129, 8
  %add140 = add i64 %mul139, 7
  %arrayidx141 = getelementptr inbounds i8, i8* %128, i64 %add140
  store i8 %127, i8* %arrayidx141, align 1, !tbaa !16
  %130 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %131 = load i64, i64* %i.addr, align 8, !tbaa !6
  %mul142 = mul i64 %131, 8
  %add143 = add i64 %mul142, 6
  %arrayidx144 = getelementptr inbounds i8, i8* %130, i64 %add143
  store i8 %127, i8* %arrayidx144, align 1, !tbaa !16
  br label %if.end145

if.end145:                                        ; preds = %if.else120, %if.then107
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %if.else101
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.end100
  br label %if.end148

if.end148:                                        ; preds = %if.end147, %cleanup.cont
  br label %if.end149

if.end149:                                        ; preds = %if.end148, %if.end53
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.end17
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end150, %cleanup
  %132 = load i32, i32* %retval, align 4
  ret i32 %132

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: ssp uwtable
define internal void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* %tree) #0 {
entry:
  %tree.addr = alloca %struct.ColorTree*, align 8
  %i = alloca i32, align 4
  store %struct.ColorTree* %tree, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ne i32 %1, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %2, i32 0, i32 0
  %3 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children, i64 0, i64 %idxprom
  %4 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx, align 8, !tbaa !2
  %tobool = icmp ne %struct.ColorTree* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children1 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom2 = sext i32 %6 to i64
  %arrayidx3 = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children1, i64 0, i64 %idxprom2
  %7 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx3, align 8, !tbaa !2
  call void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* %7)
  %8 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children4 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %8, i32 0, i32 0
  %9 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom5 = sext i32 %9 to i64
  %arrayidx6 = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children4, i64 0, i64 %idxprom5
  %10 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx6, align 8, !tbaa !2
  %11 = bitcast %struct.ColorTree* %10 to i8*
  call void @_ZL12lodepng_freePv(i8* %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %13) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @_Z19lodepng_convert_rgbPjS_S_jjjPK16LodePNGColorModeS2_(i32* %r_out, i32* %g_out, i32* %b_out, i32 %r_in, i32 %g_in, i32 %b_in, %struct.LodePNGColorMode* %mode_out, %struct.LodePNGColorMode* %mode_in) #4 {
entry:
  %retval = alloca i32, align 4
  %r_out.addr = alloca i32*, align 8
  %g_out.addr = alloca i32*, align 8
  %b_out.addr = alloca i32*, align 8
  %r_in.addr = alloca i32, align 4
  %g_in.addr = alloca i32, align 4
  %b_in.addr = alloca i32, align 4
  %mode_out.addr = alloca %struct.LodePNGColorMode*, align 8
  %mode_in.addr = alloca %struct.LodePNGColorMode*, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  %mul = alloca i32, align 4
  %shift = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32* %r_out, i32** %r_out.addr, align 8, !tbaa !2
  store i32* %g_out, i32** %g_out.addr, align 8, !tbaa !2
  store i32* %b_out, i32** %b_out.addr, align 8, !tbaa !2
  store i32 %r_in, i32* %r_in.addr, align 4, !tbaa !8
  store i32 %g_in, i32* %g_in.addr, align 4, !tbaa !8
  store i32 %b_in, i32* %b_in.addr, align 4, !tbaa !8
  store %struct.LodePNGColorMode* %mode_out, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %mode_in, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %0 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %r, align 4, !tbaa !8
  %1 = bitcast i32* %g to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  store i32 0, i32* %g, align 4, !tbaa !8
  %2 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  store i32 0, i32* %b, align 4, !tbaa !8
  %3 = bitcast i32* %mul to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 1
  %5 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %shl = shl i32 1, %5
  %sub = sub i32 %shl, 1
  %div = udiv i32 65535, %sub
  store i32 %div, i32* %mul, align 4, !tbaa !8
  %6 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  %7 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i32 0, i32 1
  %8 = load i32, i32* %bitdepth1, align 4, !tbaa !59
  %sub2 = sub i32 16, %8
  store i32 %sub2, i32* %shift, align 4, !tbaa !8
  %9 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %9, i32 0, i32 0
  %10 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %10, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %11 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %colortype3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i32 0, i32 0
  %12 = load i32, i32* %colortype3, align 8, !tbaa !58
  %cmp4 = icmp eq i32 %12, 4
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %13 = load i32, i32* %r_in.addr, align 4, !tbaa !8
  %14 = load i32, i32* %mul, align 4, !tbaa !8
  %mul5 = mul i32 %13, %14
  store i32 %mul5, i32* %b, align 4, !tbaa !8
  store i32 %mul5, i32* %g, align 4, !tbaa !8
  store i32 %mul5, i32* %r, align 4, !tbaa !8
  br label %if.end41

if.else:                                          ; preds = %lor.lhs.false
  %15 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %colortype6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %15, i32 0, i32 0
  %16 = load i32, i32* %colortype6, align 8, !tbaa !58
  %cmp7 = icmp eq i32 %16, 2
  br i1 %cmp7, label %if.then11, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %if.else
  %17 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %colortype9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %17, i32 0, i32 0
  %18 = load i32, i32* %colortype9, align 8, !tbaa !58
  %cmp10 = icmp eq i32 %18, 6
  br i1 %cmp10, label %if.then11, label %if.else15

if.then11:                                        ; preds = %lor.lhs.false8, %if.else
  %19 = load i32, i32* %r_in.addr, align 4, !tbaa !8
  %20 = load i32, i32* %mul, align 4, !tbaa !8
  %mul12 = mul i32 %19, %20
  store i32 %mul12, i32* %r, align 4, !tbaa !8
  %21 = load i32, i32* %g_in.addr, align 4, !tbaa !8
  %22 = load i32, i32* %mul, align 4, !tbaa !8
  %mul13 = mul i32 %21, %22
  store i32 %mul13, i32* %g, align 4, !tbaa !8
  %23 = load i32, i32* %b_in.addr, align 4, !tbaa !8
  %24 = load i32, i32* %mul, align 4, !tbaa !8
  %mul14 = mul i32 %23, %24
  store i32 %mul14, i32* %b, align 4, !tbaa !8
  br label %if.end40

if.else15:                                        ; preds = %lor.lhs.false8
  %25 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %colortype16 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %25, i32 0, i32 0
  %26 = load i32, i32* %colortype16, align 8, !tbaa !58
  %cmp17 = icmp eq i32 %26, 3
  br i1 %cmp17, label %if.then18, label %if.else38

if.then18:                                        ; preds = %if.else15
  %27 = load i32, i32* %r_in.addr, align 4, !tbaa !8
  %conv = zext i32 %27 to i64
  %28 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %28, i32 0, i32 3
  %29 = load i64, i64* %palettesize, align 8, !tbaa !61
  %cmp19 = icmp uge i64 %conv, %29
  br i1 %cmp19, label %if.then20, label %if.end

if.then20:                                        ; preds = %if.then18
  store i32 82, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup106

if.end:                                           ; preds = %if.then18
  %30 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %30, i32 0, i32 2
  %31 = load i8*, i8** %palette, align 8, !tbaa !60
  %32 = load i32, i32* %r_in.addr, align 4, !tbaa !8
  %mul21 = mul i32 %32, 4
  %add = add i32 %mul21, 0
  %idxprom = zext i32 %add to i64
  %arrayidx = getelementptr inbounds i8, i8* %31, i64 %idxprom
  %33 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv22 = zext i8 %33 to i32
  %mul23 = mul i32 %conv22, 257
  store i32 %mul23, i32* %r, align 4, !tbaa !8
  %34 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %palette24 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %34, i32 0, i32 2
  %35 = load i8*, i8** %palette24, align 8, !tbaa !60
  %36 = load i32, i32* %r_in.addr, align 4, !tbaa !8
  %mul25 = mul i32 %36, 4
  %add26 = add i32 %mul25, 1
  %idxprom27 = zext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %35, i64 %idxprom27
  %37 = load i8, i8* %arrayidx28, align 1, !tbaa !16
  %conv29 = zext i8 %37 to i32
  %mul30 = mul i32 %conv29, 257
  store i32 %mul30, i32* %g, align 4, !tbaa !8
  %38 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %palette31 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %38, i32 0, i32 2
  %39 = load i8*, i8** %palette31, align 8, !tbaa !60
  %40 = load i32, i32* %r_in.addr, align 4, !tbaa !8
  %mul32 = mul i32 %40, 4
  %add33 = add i32 %mul32, 2
  %idxprom34 = zext i32 %add33 to i64
  %arrayidx35 = getelementptr inbounds i8, i8* %39, i64 %idxprom34
  %41 = load i8, i8* %arrayidx35, align 1, !tbaa !16
  %conv36 = zext i8 %41 to i32
  %mul37 = mul i32 %conv36, 257
  store i32 %mul37, i32* %b, align 4, !tbaa !8
  br label %if.end39

if.else38:                                        ; preds = %if.else15
  store i32 31, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup106

if.end39:                                         ; preds = %if.end
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then11
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then
  %42 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype42 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %42, i32 0, i32 0
  %43 = load i32, i32* %colortype42, align 8, !tbaa !58
  %cmp43 = icmp eq i32 %43, 0
  br i1 %cmp43, label %if.then47, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %if.end41
  %44 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype45 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %44, i32 0, i32 0
  %45 = load i32, i32* %colortype45, align 8, !tbaa !58
  %cmp46 = icmp eq i32 %45, 4
  br i1 %cmp46, label %if.then47, label %if.else48

if.then47:                                        ; preds = %lor.lhs.false44, %if.end41
  %46 = load i32, i32* %r, align 4, !tbaa !8
  %47 = load i32, i32* %shift, align 4, !tbaa !8
  %shr = lshr i32 %46, %47
  %48 = load i32*, i32** %r_out.addr, align 8, !tbaa !2
  store i32 %shr, i32* %48, align 4, !tbaa !8
  br label %if.end105

if.else48:                                        ; preds = %lor.lhs.false44
  %49 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype49 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %49, i32 0, i32 0
  %50 = load i32, i32* %colortype49, align 8, !tbaa !58
  %cmp50 = icmp eq i32 %50, 2
  br i1 %cmp50, label %if.then54, label %lor.lhs.false51

lor.lhs.false51:                                  ; preds = %if.else48
  %51 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype52 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %51, i32 0, i32 0
  %52 = load i32, i32* %colortype52, align 8, !tbaa !58
  %cmp53 = icmp eq i32 %52, 6
  br i1 %cmp53, label %if.then54, label %if.else58

if.then54:                                        ; preds = %lor.lhs.false51, %if.else48
  %53 = load i32, i32* %r, align 4, !tbaa !8
  %54 = load i32, i32* %shift, align 4, !tbaa !8
  %shr55 = lshr i32 %53, %54
  %55 = load i32*, i32** %r_out.addr, align 8, !tbaa !2
  store i32 %shr55, i32* %55, align 4, !tbaa !8
  %56 = load i32, i32* %g, align 4, !tbaa !8
  %57 = load i32, i32* %shift, align 4, !tbaa !8
  %shr56 = lshr i32 %56, %57
  %58 = load i32*, i32** %g_out.addr, align 8, !tbaa !2
  store i32 %shr56, i32* %58, align 4, !tbaa !8
  %59 = load i32, i32* %b, align 4, !tbaa !8
  %60 = load i32, i32* %shift, align 4, !tbaa !8
  %shr57 = lshr i32 %59, %60
  %61 = load i32*, i32** %b_out.addr, align 8, !tbaa !2
  store i32 %shr57, i32* %61, align 4, !tbaa !8
  br label %if.end104

if.else58:                                        ; preds = %lor.lhs.false51
  %62 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype59 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %62, i32 0, i32 0
  %63 = load i32, i32* %colortype59, align 8, !tbaa !58
  %cmp60 = icmp eq i32 %63, 3
  br i1 %cmp60, label %if.then61, label %if.else103

if.then61:                                        ; preds = %if.else58
  %64 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %64) #16
  %65 = load i32, i32* %r, align 4, !tbaa !8
  %shr62 = lshr i32 %65, 8
  %66 = load i32, i32* %r, align 4, !tbaa !8
  %and = and i32 %66, 255
  %cmp63 = icmp ne i32 %shr62, %and
  br i1 %cmp63, label %if.then72, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %if.then61
  %67 = load i32, i32* %g, align 4, !tbaa !8
  %shr65 = lshr i32 %67, 8
  %68 = load i32, i32* %g, align 4, !tbaa !8
  %and66 = and i32 %68, 255
  %cmp67 = icmp ne i32 %shr65, %and66
  br i1 %cmp67, label %if.then72, label %lor.lhs.false68

lor.lhs.false68:                                  ; preds = %lor.lhs.false64
  %69 = load i32, i32* %b, align 4, !tbaa !8
  %shr69 = lshr i32 %69, 8
  %70 = load i32, i32* %b, align 4, !tbaa !8
  %and70 = and i32 %70, 255
  %cmp71 = icmp ne i32 %shr69, %and70
  br i1 %cmp71, label %if.then72, label %if.end73

if.then72:                                        ; preds = %lor.lhs.false68, %lor.lhs.false64, %if.then61
  store i32 82, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup102

if.end73:                                         ; preds = %lor.lhs.false68
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end73
  %71 = load i32, i32* %i, align 4, !tbaa !8
  %conv74 = zext i32 %71 to i64
  %72 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %palettesize75 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %72, i32 0, i32 3
  %73 = load i64, i64* %palettesize75, align 8, !tbaa !61
  %cmp76 = icmp ult i64 %conv74, %73
  br i1 %cmp76, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %74 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %74) #16
  %75 = load i32, i32* %i, align 4, !tbaa !8
  %mul77 = mul i32 %75, 4
  store i32 %mul77, i32* %j, align 4, !tbaa !8
  %76 = load i32, i32* %r, align 4, !tbaa !8
  %shr78 = lshr i32 %76, 8
  %77 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %palette79 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %77, i32 0, i32 2
  %78 = load i8*, i8** %palette79, align 8, !tbaa !60
  %79 = load i32, i32* %j, align 4, !tbaa !8
  %add80 = add i32 %79, 0
  %idxprom81 = zext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds i8, i8* %78, i64 %idxprom81
  %80 = load i8, i8* %arrayidx82, align 1, !tbaa !16
  %conv83 = zext i8 %80 to i32
  %cmp84 = icmp eq i32 %shr78, %conv83
  br i1 %cmp84, label %land.lhs.true, label %if.end101

land.lhs.true:                                    ; preds = %for.body
  %81 = load i32, i32* %g, align 4, !tbaa !8
  %shr85 = lshr i32 %81, 8
  %82 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %palette86 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %82, i32 0, i32 2
  %83 = load i8*, i8** %palette86, align 8, !tbaa !60
  %84 = load i32, i32* %j, align 4, !tbaa !8
  %add87 = add i32 %84, 1
  %idxprom88 = zext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds i8, i8* %83, i64 %idxprom88
  %85 = load i8, i8* %arrayidx89, align 1, !tbaa !16
  %conv90 = zext i8 %85 to i32
  %cmp91 = icmp eq i32 %shr85, %conv90
  br i1 %cmp91, label %land.lhs.true92, label %if.end101

land.lhs.true92:                                  ; preds = %land.lhs.true
  %86 = load i32, i32* %b, align 4, !tbaa !8
  %shr93 = lshr i32 %86, 8
  %87 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %palette94 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %87, i32 0, i32 2
  %88 = load i8*, i8** %palette94, align 8, !tbaa !60
  %89 = load i32, i32* %j, align 4, !tbaa !8
  %add95 = add i32 %89, 2
  %idxprom96 = zext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds i8, i8* %88, i64 %idxprom96
  %90 = load i8, i8* %arrayidx97, align 1, !tbaa !16
  %conv98 = zext i8 %90 to i32
  %cmp99 = icmp eq i32 %shr93, %conv98
  br i1 %cmp99, label %if.then100, label %if.end101

if.then100:                                       ; preds = %land.lhs.true92
  %91 = load i32, i32* %i, align 4, !tbaa !8
  %92 = load i32*, i32** %r_out.addr, align 8, !tbaa !2
  store i32 %91, i32* %92, align 4, !tbaa !8
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end101:                                        ; preds = %land.lhs.true92, %land.lhs.true, %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end101, %if.then100
  %93 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %93) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup102 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %94 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %94, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 82, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup102

cleanup102:                                       ; preds = %for.end, %cleanup, %if.then72
  %95 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %95) #16
  br label %cleanup106

if.else103:                                       ; preds = %if.else58
  store i32 31, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup106

if.end104:                                        ; preds = %if.then54
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then47
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup106

cleanup106:                                       ; preds = %if.end105, %if.else103, %cleanup102, %if.else38, %if.then20
  %96 = bitcast i32* %shift to i8*
  call void @llvm.lifetime.end(i64 4, i8* %96) #16
  %97 = bitcast i32* %mul to i8*
  call void @llvm.lifetime.end(i64 4, i8* %97) #16
  %98 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end(i64 4, i8* %98) #16
  %99 = bitcast i32* %g to i8*
  call void @llvm.lifetime.end(i64 4, i8* %99) #16
  %100 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %100) #16
  %101 = load i32, i32* %retval, align 4
  ret i32 %101
}

; Function Attrs: nounwind ssp uwtable
define void @_Z24lodepng_color_stats_initP17LodePNGColorStats(%struct.LodePNGColorStats* %stats) #4 {
entry:
  %stats.addr = alloca %struct.LodePNGColorStats*, align 8
  store %struct.LodePNGColorStats* %stats, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %colored = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %0, i32 0, i32 0
  store i32 0, i32* %colored, align 8, !tbaa !93
  %1 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %1, i32 0, i32 1
  store i32 0, i32* %key, align 4, !tbaa !95
  %2 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %2, i32 0, i32 4
  store i16 0, i16* %key_b, align 4, !tbaa !96
  %3 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %3, i32 0, i32 3
  store i16 0, i16* %key_g, align 2, !tbaa !97
  %4 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %4, i32 0, i32 2
  store i16 0, i16* %key_r, align 8, !tbaa !98
  %5 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %5, i32 0, i32 5
  store i32 0, i32* %alpha, align 8, !tbaa !99
  %6 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %6, i32 0, i32 6
  store i32 0, i32* %numcolors, align 4, !tbaa !100
  %7 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %7, i32 0, i32 8
  store i32 1, i32* %bits, align 8, !tbaa !101
  %8 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numpixels = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %8, i32 0, i32 9
  store i64 0, i64* %numpixels, align 8, !tbaa !102
  %9 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %allow_palette = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %9, i32 0, i32 10
  store i32 1, i32* %allow_palette, align 8, !tbaa !103
  %10 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %allow_greyscale = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %10, i32 0, i32 11
  store i32 1, i32* %allow_greyscale, align 4, !tbaa !104
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_Z27lodepng_compute_color_statsP17LodePNGColorStatsPKhjjPK16LodePNGColorMode(%struct.LodePNGColorStats* %stats, i8* %in, i32 %w, i32 %h, %struct.LodePNGColorMode* %mode_in) #0 {
entry:
  %retval = alloca i32, align 4
  %stats.addr = alloca %struct.LodePNGColorStats*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %mode_in.addr = alloca %struct.LodePNGColorMode*, align 8
  %i = alloca i64, align 8
  %tree = alloca %struct.ColorTree, align 8
  %numpixels = alloca i64, align 8
  %error = alloca i32, align 4
  %colored_done = alloca i32, align 4
  %alpha_done = alloca i32, align 4
  %numcolors_done = alloca i32, align 4
  %bpp = alloca i32, align 4
  %bits_done = alloca i32, align 4
  %sixteen = alloca i32, align 4
  %maxnumcolors = alloca i32, align 4
  %color = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  %r = alloca i16, align 2
  %g = alloca i16, align 2
  %b = alloca i16, align 2
  %a = alloca i16, align 2
  %r92 = alloca i16, align 2
  %g93 = alloca i16, align 2
  %b94 = alloca i16, align 2
  %a95 = alloca i16, align 2
  %matchkey = alloca i32, align 4
  %r213 = alloca i8, align 1
  %g214 = alloca i8, align 1
  %b215 = alloca i8, align 1
  %a216 = alloca i8, align 1
  %bits225 = alloca i32, align 4
  %matchkey255 = alloca i32, align 4
  %p = alloca i8*, align 8
  %n = alloca i32, align 4
  store %struct.LodePNGColorStats* %stats, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %struct.LodePNGColorMode* %mode_in, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast %struct.ColorTree* %tree to i8*
  call void @llvm.lifetime.start(i64 136, i8* %1) #16
  %2 = bitcast i64* %numpixels to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = load i32, i32* %w.addr, align 4, !tbaa !8
  %conv = zext i32 %3 to i64
  %4 = load i32, i32* %h.addr, align 4, !tbaa !8
  %conv1 = zext i32 %4 to i64
  %mul = mul i64 %conv, %conv1
  store i64 %mul, i64* %numpixels, align 8, !tbaa !6
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %6 = bitcast i32* %colored_done to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  %7 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %call = call i32 @_Z25lodepng_is_greyscale_typePK16LodePNGColorMode(%struct.LodePNGColorMode* %7)
  %tobool = icmp ne i32 %call, 0
  %cond = select i1 %tobool, i32 1, i32 0
  store i32 %cond, i32* %colored_done, align 4, !tbaa !8
  %8 = bitcast i32* %alpha_done to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #16
  %9 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %call2 = call i32 @_Z22lodepng_can_have_alphaPK16LodePNGColorMode(%struct.LodePNGColorMode* %9)
  %tobool3 = icmp ne i32 %call2, 0
  %cond4 = select i1 %tobool3, i32 0, i32 1
  store i32 %cond4, i32* %alpha_done, align 4, !tbaa !8
  %10 = bitcast i32* %numcolors_done to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #16
  store i32 0, i32* %numcolors_done, align 4, !tbaa !8
  %11 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #16
  %12 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %call5 = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %12)
  store i32 %call5, i32* %bpp, align 4, !tbaa !8
  %13 = bitcast i32* %bits_done to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #16
  %14 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %14, i32 0, i32 8
  %15 = load i32, i32* %bits, align 8, !tbaa !101
  %cmp = icmp eq i32 %15, 1
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %16 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp6 = icmp eq i32 %16, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %17 = phi i1 [ false, %entry ], [ %cmp6, %land.rhs ]
  %cond7 = select i1 %17, i32 1, i32 0
  store i32 %cond7, i32* %bits_done, align 4, !tbaa !8
  %18 = bitcast i32* %sixteen to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #16
  store i32 0, i32* %sixteen, align 4, !tbaa !8
  %19 = bitcast i32* %maxnumcolors to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #16
  store i32 257, i32* %maxnumcolors, align 4, !tbaa !8
  %20 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp8 = icmp ule i32 %20, 8
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  %21 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %21, i32 0, i32 6
  %22 = load i32, i32* %numcolors, align 4, !tbaa !100
  %23 = load i32, i32* %bpp, align 4, !tbaa !8
  %shl = shl i32 1, %23
  %add = add i32 %22, %shl
  %cmp9 = icmp ult i32 257, %add
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %24 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors10 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %24, i32 0, i32 6
  %25 = load i32, i32* %numcolors10, align 4, !tbaa !100
  %26 = load i32, i32* %bpp, align 4, !tbaa !8
  %shl11 = shl i32 1, %26
  %add12 = add i32 %25, %shl11
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi i32 [ 257, %cond.true ], [ %add12, %cond.false ]
  store i32 %cond13, i32* %maxnumcolors, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.end
  %27 = load i64, i64* %numpixels, align 8, !tbaa !6
  %28 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numpixels14 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %28, i32 0, i32 9
  %29 = load i64, i64* %numpixels14, align 8, !tbaa !102
  %add15 = add i64 %29, %27
  store i64 %add15, i64* %numpixels14, align 8, !tbaa !102
  %30 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %allow_palette = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %30, i32 0, i32 10
  %31 = load i32, i32* %allow_palette, align 8, !tbaa !103
  %tobool16 = icmp ne i32 %31, 0
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.end
  store i32 1, i32* %numcolors_done, align 4, !tbaa !8
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end
  call void @_ZL15color_tree_initP9ColorTree(%struct.ColorTree* %tree)
  %32 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %32, i32 0, i32 5
  %33 = load i32, i32* %alpha, align 8, !tbaa !99
  %tobool19 = icmp ne i32 %33, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end18
  store i32 1, i32* %alpha_done, align 4, !tbaa !8
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end18
  %34 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %colored = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %34, i32 0, i32 0
  %35 = load i32, i32* %colored, align 8, !tbaa !93
  %tobool22 = icmp ne i32 %35, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store i32 1, i32* %colored_done, align 4, !tbaa !8
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %36 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits25 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %36, i32 0, i32 8
  %37 = load i32, i32* %bits25, align 8, !tbaa !101
  %cmp26 = icmp eq i32 %37, 16
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end24
  store i32 1, i32* %numcolors_done, align 4, !tbaa !8
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %if.end24
  %38 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits29 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %38, i32 0, i32 8
  %39 = load i32, i32* %bits29, align 8, !tbaa !101
  %40 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp30 = icmp uge i32 %39, %40
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end28
  store i32 1, i32* %bits_done, align 4, !tbaa !8
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.end28
  %41 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors33 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %41, i32 0, i32 6
  %42 = load i32, i32* %numcolors33, align 4, !tbaa !100
  %43 = load i32, i32* %maxnumcolors, align 4, !tbaa !8
  %cmp34 = icmp uge i32 %42, %43
  br i1 %cmp34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end32
  store i32 1, i32* %numcolors_done, align 4, !tbaa !8
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.end32
  %44 = load i32, i32* %numcolors_done, align 4, !tbaa !8
  %tobool37 = icmp ne i32 %44, 0
  br i1 %tobool37, label %if.end52, label %if.then38

if.then38:                                        ; preds = %if.end36
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then38
  %45 = load i64, i64* %i, align 8, !tbaa !6
  %46 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors39 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %46, i32 0, i32 6
  %47 = load i32, i32* %numcolors39, align 4, !tbaa !100
  %conv40 = zext i32 %47 to i64
  %cmp41 = icmp ult i64 %45, %conv40
  br i1 %cmp41, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %48 = bitcast i8** %color to i8*
  call void @llvm.lifetime.start(i64 8, i8* %48) #16
  %49 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %49, i32 0, i32 7
  %50 = load i64, i64* %i, align 8, !tbaa !6
  %mul42 = mul i64 %50, 4
  %arrayidx = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette, i64 0, i64 %mul42
  store i8* %arrayidx, i8** %color, align 8, !tbaa !2
  %51 = load i8*, i8** %color, align 8, !tbaa !2
  %arrayidx43 = getelementptr inbounds i8, i8* %51, i64 0
  %52 = load i8, i8* %arrayidx43, align 1, !tbaa !16
  %53 = load i8*, i8** %color, align 8, !tbaa !2
  %arrayidx44 = getelementptr inbounds i8, i8* %53, i64 1
  %54 = load i8, i8* %arrayidx44, align 1, !tbaa !16
  %55 = load i8*, i8** %color, align 8, !tbaa !2
  %arrayidx45 = getelementptr inbounds i8, i8* %55, i64 2
  %56 = load i8, i8* %arrayidx45, align 1, !tbaa !16
  %57 = load i8*, i8** %color, align 8, !tbaa !2
  %arrayidx46 = getelementptr inbounds i8, i8* %57, i64 3
  %58 = load i8, i8* %arrayidx46, align 1, !tbaa !16
  %59 = load i64, i64* %i, align 8, !tbaa !6
  %conv47 = trunc i64 %59 to i32
  %call48 = call i32 @_ZL14color_tree_addP9ColorTreehhhhj(%struct.ColorTree* %tree, i8 zeroext %52, i8 zeroext %54, i8 zeroext %56, i8 zeroext %58, i32 %conv47)
  store i32 %call48, i32* %error, align 4, !tbaa !8
  %60 = load i32, i32* %error, align 4, !tbaa !8
  %tobool49 = icmp ne i32 %60, 0
  br i1 %tobool49, label %if.then50, label %if.end51

if.then50:                                        ; preds = %for.body
  store i32 5, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end51:                                         ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then50, %if.end51
  %61 = bitcast i8** %color to i8*
  call void @llvm.lifetime.end(i64 8, i8* %61) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup445 [
    i32 0, label %cleanup.cont
    i32 5, label %cleanup444
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %62 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %62, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end52

if.end52:                                         ; preds = %for.end, %if.end36
  %63 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %63, i32 0, i32 1
  %64 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %cmp53 = icmp eq i32 %64, 16
  br i1 %cmp53, label %land.lhs.true, label %if.end89

land.lhs.true:                                    ; preds = %if.end52
  %65 = load i32, i32* %sixteen, align 4, !tbaa !8
  %tobool54 = icmp ne i32 %65, 0
  br i1 %tobool54, label %if.end89, label %if.then55

if.then55:                                        ; preds = %land.lhs.true
  %66 = bitcast i16* %r to i8*
  call void @llvm.lifetime.start(i64 2, i8* %66) #16
  store i16 0, i16* %r, align 2, !tbaa !89
  %67 = bitcast i16* %g to i8*
  call void @llvm.lifetime.start(i64 2, i8* %67) #16
  store i16 0, i16* %g, align 2, !tbaa !89
  %68 = bitcast i16* %b to i8*
  call void @llvm.lifetime.start(i64 2, i8* %68) #16
  store i16 0, i16* %b, align 2, !tbaa !89
  %69 = bitcast i16* %a to i8*
  call void @llvm.lifetime.start(i64 2, i8* %69) #16
  store i16 0, i16* %a, align 2, !tbaa !89
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc86, %if.then55
  %70 = load i64, i64* %i, align 8, !tbaa !6
  %71 = load i64, i64* %numpixels, align 8, !tbaa !6
  %cmp57 = icmp ne i64 %70, %71
  br i1 %cmp57, label %for.body58, label %for.end88

for.body58:                                       ; preds = %for.cond56
  %72 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %73 = load i64, i64* %i, align 8, !tbaa !6
  %74 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* %r, i16* %g, i16* %b, i16* %a, i8* %72, i64 %73, %struct.LodePNGColorMode* %74)
  %75 = load i16, i16* %r, align 2, !tbaa !89
  %conv59 = zext i16 %75 to i32
  %and = and i32 %conv59, 255
  %76 = load i16, i16* %r, align 2, !tbaa !89
  %conv60 = zext i16 %76 to i32
  %shr = ashr i32 %conv60, 8
  %and61 = and i32 %shr, 255
  %cmp62 = icmp ne i32 %and, %and61
  br i1 %cmp62, label %if.then83, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body58
  %77 = load i16, i16* %g, align 2, !tbaa !89
  %conv63 = zext i16 %77 to i32
  %and64 = and i32 %conv63, 255
  %78 = load i16, i16* %g, align 2, !tbaa !89
  %conv65 = zext i16 %78 to i32
  %shr66 = ashr i32 %conv65, 8
  %and67 = and i32 %shr66, 255
  %cmp68 = icmp ne i32 %and64, %and67
  br i1 %cmp68, label %if.then83, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %lor.lhs.false
  %79 = load i16, i16* %b, align 2, !tbaa !89
  %conv70 = zext i16 %79 to i32
  %and71 = and i32 %conv70, 255
  %80 = load i16, i16* %b, align 2, !tbaa !89
  %conv72 = zext i16 %80 to i32
  %shr73 = ashr i32 %conv72, 8
  %and74 = and i32 %shr73, 255
  %cmp75 = icmp ne i32 %and71, %and74
  br i1 %cmp75, label %if.then83, label %lor.lhs.false76

lor.lhs.false76:                                  ; preds = %lor.lhs.false69
  %81 = load i16, i16* %a, align 2, !tbaa !89
  %conv77 = zext i16 %81 to i32
  %and78 = and i32 %conv77, 255
  %82 = load i16, i16* %a, align 2, !tbaa !89
  %conv79 = zext i16 %82 to i32
  %shr80 = ashr i32 %conv79, 8
  %and81 = and i32 %shr80, 255
  %cmp82 = icmp ne i32 %and78, %and81
  br i1 %cmp82, label %if.then83, label %if.end85

if.then83:                                        ; preds = %lor.lhs.false76, %lor.lhs.false69, %lor.lhs.false, %for.body58
  %83 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits84 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %83, i32 0, i32 8
  store i32 16, i32* %bits84, align 8, !tbaa !101
  store i32 1, i32* %sixteen, align 4, !tbaa !8
  store i32 1, i32* %bits_done, align 4, !tbaa !8
  store i32 1, i32* %numcolors_done, align 4, !tbaa !8
  br label %for.end88

if.end85:                                         ; preds = %lor.lhs.false76
  br label %for.inc86

for.inc86:                                        ; preds = %if.end85
  %84 = load i64, i64* %i, align 8, !tbaa !6
  %inc87 = add i64 %84, 1
  store i64 %inc87, i64* %i, align 8, !tbaa !6
  br label %for.cond56

for.end88:                                        ; preds = %if.then83, %for.cond56
  %85 = bitcast i16* %a to i8*
  call void @llvm.lifetime.end(i64 2, i8* %85) #16
  %86 = bitcast i16* %b to i8*
  call void @llvm.lifetime.end(i64 2, i8* %86) #16
  %87 = bitcast i16* %g to i8*
  call void @llvm.lifetime.end(i64 2, i8* %87) #16
  %88 = bitcast i16* %r to i8*
  call void @llvm.lifetime.end(i64 2, i8* %88) #16
  br label %if.end89

if.end89:                                         ; preds = %for.end88, %land.lhs.true, %if.end52
  %89 = load i32, i32* %sixteen, align 4, !tbaa !8
  %tobool90 = icmp ne i32 %89, 0
  br i1 %tobool90, label %if.then91, label %if.else212

if.then91:                                        ; preds = %if.end89
  %90 = bitcast i16* %r92 to i8*
  call void @llvm.lifetime.start(i64 2, i8* %90) #16
  store i16 0, i16* %r92, align 2, !tbaa !89
  %91 = bitcast i16* %g93 to i8*
  call void @llvm.lifetime.start(i64 2, i8* %91) #16
  store i16 0, i16* %g93, align 2, !tbaa !89
  %92 = bitcast i16* %b94 to i8*
  call void @llvm.lifetime.start(i64 2, i8* %92) #16
  store i16 0, i16* %b94, align 2, !tbaa !89
  %93 = bitcast i16* %a95 to i8*
  call void @llvm.lifetime.start(i64 2, i8* %93) #16
  store i16 0, i16* %a95, align 2, !tbaa !89
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond96

for.cond96:                                       ; preds = %for.inc175, %if.then91
  %94 = load i64, i64* %i, align 8, !tbaa !6
  %95 = load i64, i64* %numpixels, align 8, !tbaa !6
  %cmp97 = icmp ne i64 %94, %95
  br i1 %cmp97, label %for.body98, label %for.end177

for.body98:                                       ; preds = %for.cond96
  %96 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %97 = load i64, i64* %i, align 8, !tbaa !6
  %98 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* %r92, i16* %g93, i16* %b94, i16* %a95, i8* %96, i64 %97, %struct.LodePNGColorMode* %98)
  %99 = load i32, i32* %colored_done, align 4, !tbaa !8
  %tobool99 = icmp ne i32 %99, 0
  br i1 %tobool99, label %if.end110, label %land.lhs.true100

land.lhs.true100:                                 ; preds = %for.body98
  %100 = load i16, i16* %r92, align 2, !tbaa !89
  %conv101 = zext i16 %100 to i32
  %101 = load i16, i16* %g93, align 2, !tbaa !89
  %conv102 = zext i16 %101 to i32
  %cmp103 = icmp ne i32 %conv101, %conv102
  br i1 %cmp103, label %if.then108, label %lor.lhs.false104

lor.lhs.false104:                                 ; preds = %land.lhs.true100
  %102 = load i16, i16* %r92, align 2, !tbaa !89
  %conv105 = zext i16 %102 to i32
  %103 = load i16, i16* %b94, align 2, !tbaa !89
  %conv106 = zext i16 %103 to i32
  %cmp107 = icmp ne i32 %conv105, %conv106
  br i1 %cmp107, label %if.then108, label %if.end110

if.then108:                                       ; preds = %lor.lhs.false104, %land.lhs.true100
  %104 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %colored109 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %104, i32 0, i32 0
  store i32 1, i32* %colored109, align 8, !tbaa !93
  store i32 1, i32* %colored_done, align 4, !tbaa !8
  br label %if.end110

if.end110:                                        ; preds = %if.then108, %lor.lhs.false104, %for.body98
  %105 = load i32, i32* %alpha_done, align 4, !tbaa !8
  %tobool111 = icmp ne i32 %105, 0
  br i1 %tobool111, label %if.end165, label %if.then112

if.then112:                                       ; preds = %if.end110
  %106 = bitcast i32* %matchkey to i8*
  call void @llvm.lifetime.start(i64 4, i8* %106) #16
  %107 = load i16, i16* %r92, align 2, !tbaa !89
  %conv113 = zext i16 %107 to i32
  %108 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %108, i32 0, i32 2
  %109 = load i16, i16* %key_r, align 8, !tbaa !98
  %conv114 = zext i16 %109 to i32
  %cmp115 = icmp eq i32 %conv113, %conv114
  br i1 %cmp115, label %land.lhs.true116, label %land.end124

land.lhs.true116:                                 ; preds = %if.then112
  %110 = load i16, i16* %g93, align 2, !tbaa !89
  %conv117 = zext i16 %110 to i32
  %111 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %111, i32 0, i32 3
  %112 = load i16, i16* %key_g, align 2, !tbaa !97
  %conv118 = zext i16 %112 to i32
  %cmp119 = icmp eq i32 %conv117, %conv118
  br i1 %cmp119, label %land.rhs120, label %land.end124

land.rhs120:                                      ; preds = %land.lhs.true116
  %113 = load i16, i16* %b94, align 2, !tbaa !89
  %conv121 = zext i16 %113 to i32
  %114 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %114, i32 0, i32 4
  %115 = load i16, i16* %key_b, align 4, !tbaa !96
  %conv122 = zext i16 %115 to i32
  %cmp123 = icmp eq i32 %conv121, %conv122
  br label %land.end124

land.end124:                                      ; preds = %land.rhs120, %land.lhs.true116, %if.then112
  %116 = phi i1 [ false, %land.lhs.true116 ], [ false, %if.then112 ], [ %cmp123, %land.rhs120 ]
  %conv125 = zext i1 %116 to i32
  store i32 %conv125, i32* %matchkey, align 4, !tbaa !8
  %117 = load i16, i16* %a95, align 2, !tbaa !89
  %conv126 = zext i16 %117 to i32
  %cmp127 = icmp ne i32 %conv126, 65535
  br i1 %cmp127, label %land.lhs.true128, label %if.else

land.lhs.true128:                                 ; preds = %land.end124
  %118 = load i16, i16* %a95, align 2, !tbaa !89
  %conv129 = zext i16 %118 to i32
  %cmp130 = icmp ne i32 %conv129, 0
  br i1 %cmp130, label %if.then135, label %lor.lhs.false131

lor.lhs.false131:                                 ; preds = %land.lhs.true128
  %119 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %119, i32 0, i32 1
  %120 = load i32, i32* %key, align 4, !tbaa !95
  %tobool132 = icmp ne i32 %120, 0
  br i1 %tobool132, label %land.lhs.true133, label %if.else

land.lhs.true133:                                 ; preds = %lor.lhs.false131
  %121 = load i32, i32* %matchkey, align 4, !tbaa !8
  %tobool134 = icmp ne i32 %121, 0
  br i1 %tobool134, label %if.else, label %if.then135

if.then135:                                       ; preds = %land.lhs.true133, %land.lhs.true128
  %122 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha136 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %122, i32 0, i32 5
  store i32 1, i32* %alpha136, align 8, !tbaa !99
  %123 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key137 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %123, i32 0, i32 1
  store i32 0, i32* %key137, align 4, !tbaa !95
  store i32 1, i32* %alpha_done, align 4, !tbaa !8
  br label %if.end164

if.else:                                          ; preds = %land.lhs.true133, %lor.lhs.false131, %land.end124
  %124 = load i16, i16* %a95, align 2, !tbaa !89
  %conv138 = zext i16 %124 to i32
  %cmp139 = icmp eq i32 %conv138, 0
  br i1 %cmp139, label %land.lhs.true140, label %if.else151

land.lhs.true140:                                 ; preds = %if.else
  %125 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha141 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %125, i32 0, i32 5
  %126 = load i32, i32* %alpha141, align 8, !tbaa !99
  %tobool142 = icmp ne i32 %126, 0
  br i1 %tobool142, label %if.else151, label %land.lhs.true143

land.lhs.true143:                                 ; preds = %land.lhs.true140
  %127 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key144 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %127, i32 0, i32 1
  %128 = load i32, i32* %key144, align 4, !tbaa !95
  %tobool145 = icmp ne i32 %128, 0
  br i1 %tobool145, label %if.else151, label %if.then146

if.then146:                                       ; preds = %land.lhs.true143
  %129 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key147 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %129, i32 0, i32 1
  store i32 1, i32* %key147, align 4, !tbaa !95
  %130 = load i16, i16* %r92, align 2, !tbaa !89
  %131 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r148 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %131, i32 0, i32 2
  store i16 %130, i16* %key_r148, align 8, !tbaa !98
  %132 = load i16, i16* %g93, align 2, !tbaa !89
  %133 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g149 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %133, i32 0, i32 3
  store i16 %132, i16* %key_g149, align 2, !tbaa !97
  %134 = load i16, i16* %b94, align 2, !tbaa !89
  %135 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b150 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %135, i32 0, i32 4
  store i16 %134, i16* %key_b150, align 4, !tbaa !96
  br label %if.end163

if.else151:                                       ; preds = %land.lhs.true143, %land.lhs.true140, %if.else
  %136 = load i16, i16* %a95, align 2, !tbaa !89
  %conv152 = zext i16 %136 to i32
  %cmp153 = icmp eq i32 %conv152, 65535
  br i1 %cmp153, label %land.lhs.true154, label %if.end162

land.lhs.true154:                                 ; preds = %if.else151
  %137 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key155 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %137, i32 0, i32 1
  %138 = load i32, i32* %key155, align 4, !tbaa !95
  %tobool156 = icmp ne i32 %138, 0
  br i1 %tobool156, label %land.lhs.true157, label %if.end162

land.lhs.true157:                                 ; preds = %land.lhs.true154
  %139 = load i32, i32* %matchkey, align 4, !tbaa !8
  %tobool158 = icmp ne i32 %139, 0
  br i1 %tobool158, label %if.then159, label %if.end162

if.then159:                                       ; preds = %land.lhs.true157
  %140 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha160 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %140, i32 0, i32 5
  store i32 1, i32* %alpha160, align 8, !tbaa !99
  %141 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key161 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %141, i32 0, i32 1
  store i32 0, i32* %key161, align 4, !tbaa !95
  store i32 1, i32* %alpha_done, align 4, !tbaa !8
  br label %if.end162

if.end162:                                        ; preds = %if.then159, %land.lhs.true157, %land.lhs.true154, %if.else151
  br label %if.end163

if.end163:                                        ; preds = %if.end162, %if.then146
  br label %if.end164

if.end164:                                        ; preds = %if.end163, %if.then135
  %142 = bitcast i32* %matchkey to i8*
  call void @llvm.lifetime.end(i64 4, i8* %142) #16
  br label %if.end165

if.end165:                                        ; preds = %if.end164, %if.end110
  %143 = load i32, i32* %alpha_done, align 4, !tbaa !8
  %tobool166 = icmp ne i32 %143, 0
  br i1 %tobool166, label %land.lhs.true167, label %if.end174

land.lhs.true167:                                 ; preds = %if.end165
  %144 = load i32, i32* %numcolors_done, align 4, !tbaa !8
  %tobool168 = icmp ne i32 %144, 0
  br i1 %tobool168, label %land.lhs.true169, label %if.end174

land.lhs.true169:                                 ; preds = %land.lhs.true167
  %145 = load i32, i32* %colored_done, align 4, !tbaa !8
  %tobool170 = icmp ne i32 %145, 0
  br i1 %tobool170, label %land.lhs.true171, label %if.end174

land.lhs.true171:                                 ; preds = %land.lhs.true169
  %146 = load i32, i32* %bits_done, align 4, !tbaa !8
  %tobool172 = icmp ne i32 %146, 0
  br i1 %tobool172, label %if.then173, label %if.end174

if.then173:                                       ; preds = %land.lhs.true171
  br label %for.end177

if.end174:                                        ; preds = %land.lhs.true171, %land.lhs.true169, %land.lhs.true167, %if.end165
  br label %for.inc175

for.inc175:                                       ; preds = %if.end174
  %147 = load i64, i64* %i, align 8, !tbaa !6
  %inc176 = add i64 %147, 1
  store i64 %inc176, i64* %i, align 8, !tbaa !6
  br label %for.cond96

for.end177:                                       ; preds = %if.then173, %for.cond96
  %148 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key178 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %148, i32 0, i32 1
  %149 = load i32, i32* %key178, align 4, !tbaa !95
  %tobool179 = icmp ne i32 %149, 0
  br i1 %tobool179, label %land.lhs.true180, label %if.end211

land.lhs.true180:                                 ; preds = %for.end177
  %150 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha181 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %150, i32 0, i32 5
  %151 = load i32, i32* %alpha181, align 8, !tbaa !99
  %tobool182 = icmp ne i32 %151, 0
  br i1 %tobool182, label %if.end211, label %if.then183

if.then183:                                       ; preds = %land.lhs.true180
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond184

for.cond184:                                      ; preds = %for.inc208, %if.then183
  %152 = load i64, i64* %i, align 8, !tbaa !6
  %153 = load i64, i64* %numpixels, align 8, !tbaa !6
  %cmp185 = icmp ne i64 %152, %153
  br i1 %cmp185, label %for.body186, label %for.end210

for.body186:                                      ; preds = %for.cond184
  %154 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %155 = load i64, i64* %i, align 8, !tbaa !6
  %156 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL19getPixelColorRGBA16PtS_S_S_PKhmPK16LodePNGColorMode(i16* %r92, i16* %g93, i16* %b94, i16* %a95, i8* %154, i64 %155, %struct.LodePNGColorMode* %156)
  %157 = load i16, i16* %a95, align 2, !tbaa !89
  %conv187 = zext i16 %157 to i32
  %cmp188 = icmp ne i32 %conv187, 0
  br i1 %cmp188, label %land.lhs.true189, label %if.end207

land.lhs.true189:                                 ; preds = %for.body186
  %158 = load i16, i16* %r92, align 2, !tbaa !89
  %conv190 = zext i16 %158 to i32
  %159 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r191 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %159, i32 0, i32 2
  %160 = load i16, i16* %key_r191, align 8, !tbaa !98
  %conv192 = zext i16 %160 to i32
  %cmp193 = icmp eq i32 %conv190, %conv192
  br i1 %cmp193, label %land.lhs.true194, label %if.end207

land.lhs.true194:                                 ; preds = %land.lhs.true189
  %161 = load i16, i16* %g93, align 2, !tbaa !89
  %conv195 = zext i16 %161 to i32
  %162 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g196 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %162, i32 0, i32 3
  %163 = load i16, i16* %key_g196, align 2, !tbaa !97
  %conv197 = zext i16 %163 to i32
  %cmp198 = icmp eq i32 %conv195, %conv197
  br i1 %cmp198, label %land.lhs.true199, label %if.end207

land.lhs.true199:                                 ; preds = %land.lhs.true194
  %164 = load i16, i16* %b94, align 2, !tbaa !89
  %conv200 = zext i16 %164 to i32
  %165 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b201 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %165, i32 0, i32 4
  %166 = load i16, i16* %key_b201, align 4, !tbaa !96
  %conv202 = zext i16 %166 to i32
  %cmp203 = icmp eq i32 %conv200, %conv202
  br i1 %cmp203, label %if.then204, label %if.end207

if.then204:                                       ; preds = %land.lhs.true199
  %167 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha205 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %167, i32 0, i32 5
  store i32 1, i32* %alpha205, align 8, !tbaa !99
  %168 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key206 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %168, i32 0, i32 1
  store i32 0, i32* %key206, align 4, !tbaa !95
  store i32 1, i32* %alpha_done, align 4, !tbaa !8
  br label %if.end207

if.end207:                                        ; preds = %if.then204, %land.lhs.true199, %land.lhs.true194, %land.lhs.true189, %for.body186
  br label %for.inc208

for.inc208:                                       ; preds = %if.end207
  %169 = load i64, i64* %i, align 8, !tbaa !6
  %inc209 = add i64 %169, 1
  store i64 %inc209, i64* %i, align 8, !tbaa !6
  br label %for.cond184

for.end210:                                       ; preds = %for.cond184
  br label %if.end211

if.end211:                                        ; preds = %for.end210, %land.lhs.true180, %for.end177
  %170 = bitcast i16* %a95 to i8*
  call void @llvm.lifetime.end(i64 2, i8* %170) #16
  %171 = bitcast i16* %b94 to i8*
  call void @llvm.lifetime.end(i64 2, i8* %171) #16
  %172 = bitcast i16* %g93 to i8*
  call void @llvm.lifetime.end(i64 2, i8* %172) #16
  %173 = bitcast i16* %r92 to i8*
  call void @llvm.lifetime.end(i64 2, i8* %173) #16
  br label %if.end443

if.else212:                                       ; preds = %if.end89
  call void @llvm.lifetime.start(i64 1, i8* %r213) #16
  store i8 0, i8* %r213, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %g214) #16
  store i8 0, i8* %g214, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %b215) #16
  store i8 0, i8* %b215, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %a216) #16
  store i8 0, i8* %a216, align 1, !tbaa !16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond217

for.cond217:                                      ; preds = %for.inc374, %if.else212
  %174 = load i64, i64* %i, align 8, !tbaa !6
  %175 = load i64, i64* %numpixels, align 8, !tbaa !6
  %cmp218 = icmp ne i64 %174, %175
  br i1 %cmp218, label %for.body219, label %for.end376

for.body219:                                      ; preds = %for.cond217
  %176 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %177 = load i64, i64* %i, align 8, !tbaa !6
  %178 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL18getPixelColorRGBA8PhS_S_S_PKhmPK16LodePNGColorMode(i8* %r213, i8* %g214, i8* %b215, i8* %a216, i8* %176, i64 %177, %struct.LodePNGColorMode* %178)
  %179 = load i32, i32* %bits_done, align 4, !tbaa !8
  %tobool220 = icmp ne i32 %179, 0
  br i1 %tobool220, label %if.end232, label %land.lhs.true221

land.lhs.true221:                                 ; preds = %for.body219
  %180 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits222 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %180, i32 0, i32 8
  %181 = load i32, i32* %bits222, align 8, !tbaa !101
  %cmp223 = icmp ult i32 %181, 8
  br i1 %cmp223, label %if.then224, label %if.end232

if.then224:                                       ; preds = %land.lhs.true221
  %182 = bitcast i32* %bits225 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %182) #16
  %183 = load i8, i8* %r213, align 1, !tbaa !16
  %call226 = call i32 @_ZL20getValueRequiredBitsh(i8 zeroext %183)
  store i32 %call226, i32* %bits225, align 4, !tbaa !8
  %184 = load i32, i32* %bits225, align 4, !tbaa !8
  %185 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits227 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %185, i32 0, i32 8
  %186 = load i32, i32* %bits227, align 8, !tbaa !101
  %cmp228 = icmp ugt i32 %184, %186
  br i1 %cmp228, label %if.then229, label %if.end231

if.then229:                                       ; preds = %if.then224
  %187 = load i32, i32* %bits225, align 4, !tbaa !8
  %188 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits230 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %188, i32 0, i32 8
  store i32 %187, i32* %bits230, align 8, !tbaa !101
  br label %if.end231

if.end231:                                        ; preds = %if.then229, %if.then224
  %189 = bitcast i32* %bits225 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %189) #16
  br label %if.end232

if.end232:                                        ; preds = %if.end231, %land.lhs.true221, %for.body219
  %190 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits233 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %190, i32 0, i32 8
  %191 = load i32, i32* %bits233, align 8, !tbaa !101
  %192 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp234 = icmp uge i32 %191, %192
  %conv235 = zext i1 %cmp234 to i32
  store i32 %conv235, i32* %bits_done, align 4, !tbaa !8
  %193 = load i32, i32* %colored_done, align 4, !tbaa !8
  %tobool236 = icmp ne i32 %193, 0
  br i1 %tobool236, label %if.end252, label %land.lhs.true237

land.lhs.true237:                                 ; preds = %if.end232
  %194 = load i8, i8* %r213, align 1, !tbaa !16
  %conv238 = zext i8 %194 to i32
  %195 = load i8, i8* %g214, align 1, !tbaa !16
  %conv239 = zext i8 %195 to i32
  %cmp240 = icmp ne i32 %conv238, %conv239
  br i1 %cmp240, label %if.then245, label %lor.lhs.false241

lor.lhs.false241:                                 ; preds = %land.lhs.true237
  %196 = load i8, i8* %r213, align 1, !tbaa !16
  %conv242 = zext i8 %196 to i32
  %197 = load i8, i8* %b215, align 1, !tbaa !16
  %conv243 = zext i8 %197 to i32
  %cmp244 = icmp ne i32 %conv242, %conv243
  br i1 %cmp244, label %if.then245, label %if.end252

if.then245:                                       ; preds = %lor.lhs.false241, %land.lhs.true237
  %198 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %colored246 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %198, i32 0, i32 0
  store i32 1, i32* %colored246, align 8, !tbaa !93
  store i32 1, i32* %colored_done, align 4, !tbaa !8
  %199 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits247 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %199, i32 0, i32 8
  %200 = load i32, i32* %bits247, align 8, !tbaa !101
  %cmp248 = icmp ult i32 %200, 8
  br i1 %cmp248, label %if.then249, label %if.end251

if.then249:                                       ; preds = %if.then245
  %201 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits250 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %201, i32 0, i32 8
  store i32 8, i32* %bits250, align 8, !tbaa !101
  br label %if.end251

if.end251:                                        ; preds = %if.then249, %if.then245
  br label %if.end252

if.end252:                                        ; preds = %if.end251, %lor.lhs.false241, %if.end232
  %202 = load i32, i32* %alpha_done, align 4, !tbaa !8
  %tobool253 = icmp ne i32 %202, 0
  br i1 %tobool253, label %if.end326, label %if.then254

if.then254:                                       ; preds = %if.end252
  %203 = bitcast i32* %matchkey255 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %203) #16
  %204 = load i8, i8* %r213, align 1, !tbaa !16
  %conv256 = zext i8 %204 to i32
  %205 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r257 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %205, i32 0, i32 2
  %206 = load i16, i16* %key_r257, align 8, !tbaa !98
  %conv258 = zext i16 %206 to i32
  %cmp259 = icmp eq i32 %conv256, %conv258
  br i1 %cmp259, label %land.lhs.true260, label %land.end270

land.lhs.true260:                                 ; preds = %if.then254
  %207 = load i8, i8* %g214, align 1, !tbaa !16
  %conv261 = zext i8 %207 to i32
  %208 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g262 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %208, i32 0, i32 3
  %209 = load i16, i16* %key_g262, align 2, !tbaa !97
  %conv263 = zext i16 %209 to i32
  %cmp264 = icmp eq i32 %conv261, %conv263
  br i1 %cmp264, label %land.rhs265, label %land.end270

land.rhs265:                                      ; preds = %land.lhs.true260
  %210 = load i8, i8* %b215, align 1, !tbaa !16
  %conv266 = zext i8 %210 to i32
  %211 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b267 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %211, i32 0, i32 4
  %212 = load i16, i16* %key_b267, align 4, !tbaa !96
  %conv268 = zext i16 %212 to i32
  %cmp269 = icmp eq i32 %conv266, %conv268
  br label %land.end270

land.end270:                                      ; preds = %land.rhs265, %land.lhs.true260, %if.then254
  %213 = phi i1 [ false, %land.lhs.true260 ], [ false, %if.then254 ], [ %cmp269, %land.rhs265 ]
  %conv271 = zext i1 %213 to i32
  store i32 %conv271, i32* %matchkey255, align 4, !tbaa !8
  %214 = load i8, i8* %a216, align 1, !tbaa !16
  %conv272 = zext i8 %214 to i32
  %cmp273 = icmp ne i32 %conv272, 255
  br i1 %cmp273, label %land.lhs.true274, label %if.else290

land.lhs.true274:                                 ; preds = %land.end270
  %215 = load i8, i8* %a216, align 1, !tbaa !16
  %conv275 = zext i8 %215 to i32
  %cmp276 = icmp ne i32 %conv275, 0
  br i1 %cmp276, label %if.then282, label %lor.lhs.false277

lor.lhs.false277:                                 ; preds = %land.lhs.true274
  %216 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key278 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %216, i32 0, i32 1
  %217 = load i32, i32* %key278, align 4, !tbaa !95
  %tobool279 = icmp ne i32 %217, 0
  br i1 %tobool279, label %land.lhs.true280, label %if.else290

land.lhs.true280:                                 ; preds = %lor.lhs.false277
  %218 = load i32, i32* %matchkey255, align 4, !tbaa !8
  %tobool281 = icmp ne i32 %218, 0
  br i1 %tobool281, label %if.else290, label %if.then282

if.then282:                                       ; preds = %land.lhs.true280, %land.lhs.true274
  %219 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha283 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %219, i32 0, i32 5
  store i32 1, i32* %alpha283, align 8, !tbaa !99
  %220 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key284 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %220, i32 0, i32 1
  store i32 0, i32* %key284, align 4, !tbaa !95
  store i32 1, i32* %alpha_done, align 4, !tbaa !8
  %221 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits285 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %221, i32 0, i32 8
  %222 = load i32, i32* %bits285, align 8, !tbaa !101
  %cmp286 = icmp ult i32 %222, 8
  br i1 %cmp286, label %if.then287, label %if.end289

if.then287:                                       ; preds = %if.then282
  %223 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits288 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %223, i32 0, i32 8
  store i32 8, i32* %bits288, align 8, !tbaa !101
  br label %if.end289

if.end289:                                        ; preds = %if.then287, %if.then282
  br label %if.end325

if.else290:                                       ; preds = %land.lhs.true280, %lor.lhs.false277, %land.end270
  %224 = load i8, i8* %a216, align 1, !tbaa !16
  %conv291 = zext i8 %224 to i32
  %cmp292 = icmp eq i32 %conv291, 0
  br i1 %cmp292, label %land.lhs.true293, label %if.else307

land.lhs.true293:                                 ; preds = %if.else290
  %225 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha294 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %225, i32 0, i32 5
  %226 = load i32, i32* %alpha294, align 8, !tbaa !99
  %tobool295 = icmp ne i32 %226, 0
  br i1 %tobool295, label %if.else307, label %land.lhs.true296

land.lhs.true296:                                 ; preds = %land.lhs.true293
  %227 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key297 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %227, i32 0, i32 1
  %228 = load i32, i32* %key297, align 4, !tbaa !95
  %tobool298 = icmp ne i32 %228, 0
  br i1 %tobool298, label %if.else307, label %if.then299

if.then299:                                       ; preds = %land.lhs.true296
  %229 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key300 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %229, i32 0, i32 1
  store i32 1, i32* %key300, align 4, !tbaa !95
  %230 = load i8, i8* %r213, align 1, !tbaa !16
  %conv301 = zext i8 %230 to i16
  %231 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r302 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %231, i32 0, i32 2
  store i16 %conv301, i16* %key_r302, align 8, !tbaa !98
  %232 = load i8, i8* %g214, align 1, !tbaa !16
  %conv303 = zext i8 %232 to i16
  %233 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g304 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %233, i32 0, i32 3
  store i16 %conv303, i16* %key_g304, align 2, !tbaa !97
  %234 = load i8, i8* %b215, align 1, !tbaa !16
  %conv305 = zext i8 %234 to i16
  %235 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b306 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %235, i32 0, i32 4
  store i16 %conv305, i16* %key_b306, align 4, !tbaa !96
  br label %if.end324

if.else307:                                       ; preds = %land.lhs.true296, %land.lhs.true293, %if.else290
  %236 = load i8, i8* %a216, align 1, !tbaa !16
  %conv308 = zext i8 %236 to i32
  %cmp309 = icmp eq i32 %conv308, 255
  br i1 %cmp309, label %land.lhs.true310, label %if.end323

land.lhs.true310:                                 ; preds = %if.else307
  %237 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key311 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %237, i32 0, i32 1
  %238 = load i32, i32* %key311, align 4, !tbaa !95
  %tobool312 = icmp ne i32 %238, 0
  br i1 %tobool312, label %land.lhs.true313, label %if.end323

land.lhs.true313:                                 ; preds = %land.lhs.true310
  %239 = load i32, i32* %matchkey255, align 4, !tbaa !8
  %tobool314 = icmp ne i32 %239, 0
  br i1 %tobool314, label %if.then315, label %if.end323

if.then315:                                       ; preds = %land.lhs.true313
  %240 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha316 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %240, i32 0, i32 5
  store i32 1, i32* %alpha316, align 8, !tbaa !99
  %241 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key317 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %241, i32 0, i32 1
  store i32 0, i32* %key317, align 4, !tbaa !95
  store i32 1, i32* %alpha_done, align 4, !tbaa !8
  %242 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits318 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %242, i32 0, i32 8
  %243 = load i32, i32* %bits318, align 8, !tbaa !101
  %cmp319 = icmp ult i32 %243, 8
  br i1 %cmp319, label %if.then320, label %if.end322

if.then320:                                       ; preds = %if.then315
  %244 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits321 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %244, i32 0, i32 8
  store i32 8, i32* %bits321, align 8, !tbaa !101
  br label %if.end322

if.end322:                                        ; preds = %if.then320, %if.then315
  br label %if.end323

if.end323:                                        ; preds = %if.end322, %land.lhs.true313, %land.lhs.true310, %if.else307
  br label %if.end324

if.end324:                                        ; preds = %if.end323, %if.then299
  br label %if.end325

if.end325:                                        ; preds = %if.end324, %if.end289
  %245 = bitcast i32* %matchkey255 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %245) #16
  br label %if.end326

if.end326:                                        ; preds = %if.end325, %if.end252
  %246 = load i32, i32* %numcolors_done, align 4, !tbaa !8
  %tobool327 = icmp ne i32 %246, 0
  br i1 %tobool327, label %if.end364, label %if.then328

if.then328:                                       ; preds = %if.end326
  %247 = load i8, i8* %r213, align 1, !tbaa !16
  %248 = load i8, i8* %g214, align 1, !tbaa !16
  %249 = load i8, i8* %b215, align 1, !tbaa !16
  %250 = load i8, i8* %a216, align 1, !tbaa !16
  %call329 = call i32 @_ZL14color_tree_hasP9ColorTreehhhh(%struct.ColorTree* %tree, i8 zeroext %247, i8 zeroext %248, i8 zeroext %249, i8 zeroext %250)
  %tobool330 = icmp ne i32 %call329, 0
  br i1 %tobool330, label %if.end363, label %if.then331

if.then331:                                       ; preds = %if.then328
  %251 = load i8, i8* %r213, align 1, !tbaa !16
  %252 = load i8, i8* %g214, align 1, !tbaa !16
  %253 = load i8, i8* %b215, align 1, !tbaa !16
  %254 = load i8, i8* %a216, align 1, !tbaa !16
  %255 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors332 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %255, i32 0, i32 6
  %256 = load i32, i32* %numcolors332, align 4, !tbaa !100
  %call333 = call i32 @_ZL14color_tree_addP9ColorTreehhhhj(%struct.ColorTree* %tree, i8 zeroext %251, i8 zeroext %252, i8 zeroext %253, i8 zeroext %254, i32 %256)
  store i32 %call333, i32* %error, align 4, !tbaa !8
  %257 = load i32, i32* %error, align 4, !tbaa !8
  %tobool334 = icmp ne i32 %257, 0
  br i1 %tobool334, label %if.then335, label %if.end336

if.then335:                                       ; preds = %if.then331
  store i32 5, i32* %cleanup.dest.slot, align 4
  br label %cleanup437

if.end336:                                        ; preds = %if.then331
  %258 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors337 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %258, i32 0, i32 6
  %259 = load i32, i32* %numcolors337, align 4, !tbaa !100
  %cmp338 = icmp ult i32 %259, 256
  br i1 %cmp338, label %if.then339, label %if.end357

if.then339:                                       ; preds = %if.end336
  %260 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %260) #16
  %261 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %palette340 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %261, i32 0, i32 7
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette340, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8, !tbaa !2
  %262 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start(i64 4, i8* %262) #16
  %263 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors341 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %263, i32 0, i32 6
  %264 = load i32, i32* %numcolors341, align 4, !tbaa !100
  store i32 %264, i32* %n, align 4, !tbaa !8
  %265 = load i8, i8* %r213, align 1, !tbaa !16
  %266 = load i8*, i8** %p, align 8, !tbaa !2
  %267 = load i32, i32* %n, align 4, !tbaa !8
  %mul342 = mul i32 %267, 4
  %add343 = add i32 %mul342, 0
  %idxprom = zext i32 %add343 to i64
  %arrayidx344 = getelementptr inbounds i8, i8* %266, i64 %idxprom
  store i8 %265, i8* %arrayidx344, align 1, !tbaa !16
  %268 = load i8, i8* %g214, align 1, !tbaa !16
  %269 = load i8*, i8** %p, align 8, !tbaa !2
  %270 = load i32, i32* %n, align 4, !tbaa !8
  %mul345 = mul i32 %270, 4
  %add346 = add i32 %mul345, 1
  %idxprom347 = zext i32 %add346 to i64
  %arrayidx348 = getelementptr inbounds i8, i8* %269, i64 %idxprom347
  store i8 %268, i8* %arrayidx348, align 1, !tbaa !16
  %271 = load i8, i8* %b215, align 1, !tbaa !16
  %272 = load i8*, i8** %p, align 8, !tbaa !2
  %273 = load i32, i32* %n, align 4, !tbaa !8
  %mul349 = mul i32 %273, 4
  %add350 = add i32 %mul349, 2
  %idxprom351 = zext i32 %add350 to i64
  %arrayidx352 = getelementptr inbounds i8, i8* %272, i64 %idxprom351
  store i8 %271, i8* %arrayidx352, align 1, !tbaa !16
  %274 = load i8, i8* %a216, align 1, !tbaa !16
  %275 = load i8*, i8** %p, align 8, !tbaa !2
  %276 = load i32, i32* %n, align 4, !tbaa !8
  %mul353 = mul i32 %276, 4
  %add354 = add i32 %mul353, 3
  %idxprom355 = zext i32 %add354 to i64
  %arrayidx356 = getelementptr inbounds i8, i8* %275, i64 %idxprom355
  store i8 %274, i8* %arrayidx356, align 1, !tbaa !16
  %277 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end(i64 4, i8* %277) #16
  %278 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %278) #16
  br label %if.end357

if.end357:                                        ; preds = %if.then339, %if.end336
  %279 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors358 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %279, i32 0, i32 6
  %280 = load i32, i32* %numcolors358, align 4, !tbaa !100
  %inc359 = add i32 %280, 1
  store i32 %inc359, i32* %numcolors358, align 4, !tbaa !100
  %281 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors360 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %281, i32 0, i32 6
  %282 = load i32, i32* %numcolors360, align 4, !tbaa !100
  %283 = load i32, i32* %maxnumcolors, align 4, !tbaa !8
  %cmp361 = icmp uge i32 %282, %283
  %conv362 = zext i1 %cmp361 to i32
  store i32 %conv362, i32* %numcolors_done, align 4, !tbaa !8
  br label %if.end363

if.end363:                                        ; preds = %if.end357, %if.then328
  br label %if.end364

if.end364:                                        ; preds = %if.end363, %if.end326
  %284 = load i32, i32* %alpha_done, align 4, !tbaa !8
  %tobool365 = icmp ne i32 %284, 0
  br i1 %tobool365, label %land.lhs.true366, label %if.end373

land.lhs.true366:                                 ; preds = %if.end364
  %285 = load i32, i32* %numcolors_done, align 4, !tbaa !8
  %tobool367 = icmp ne i32 %285, 0
  br i1 %tobool367, label %land.lhs.true368, label %if.end373

land.lhs.true368:                                 ; preds = %land.lhs.true366
  %286 = load i32, i32* %colored_done, align 4, !tbaa !8
  %tobool369 = icmp ne i32 %286, 0
  br i1 %tobool369, label %land.lhs.true370, label %if.end373

land.lhs.true370:                                 ; preds = %land.lhs.true368
  %287 = load i32, i32* %bits_done, align 4, !tbaa !8
  %tobool371 = icmp ne i32 %287, 0
  br i1 %tobool371, label %if.then372, label %if.end373

if.then372:                                       ; preds = %land.lhs.true370
  br label %for.end376

if.end373:                                        ; preds = %land.lhs.true370, %land.lhs.true368, %land.lhs.true366, %if.end364
  br label %for.inc374

for.inc374:                                       ; preds = %if.end373
  %288 = load i64, i64* %i, align 8, !tbaa !6
  %inc375 = add i64 %288, 1
  store i64 %inc375, i64* %i, align 8, !tbaa !6
  br label %for.cond217

for.end376:                                       ; preds = %if.then372, %for.cond217
  %289 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key377 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %289, i32 0, i32 1
  %290 = load i32, i32* %key377, align 4, !tbaa !95
  %tobool378 = icmp ne i32 %290, 0
  br i1 %tobool378, label %land.lhs.true379, label %if.end415

land.lhs.true379:                                 ; preds = %for.end376
  %291 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha380 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %291, i32 0, i32 5
  %292 = load i32, i32* %alpha380, align 8, !tbaa !99
  %tobool381 = icmp ne i32 %292, 0
  br i1 %tobool381, label %if.end415, label %if.then382

if.then382:                                       ; preds = %land.lhs.true379
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond383

for.cond383:                                      ; preds = %for.inc412, %if.then382
  %293 = load i64, i64* %i, align 8, !tbaa !6
  %294 = load i64, i64* %numpixels, align 8, !tbaa !6
  %cmp384 = icmp ne i64 %293, %294
  br i1 %cmp384, label %for.body385, label %for.end414

for.body385:                                      ; preds = %for.cond383
  %295 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %296 = load i64, i64* %i, align 8, !tbaa !6
  %297 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  call void @_ZL18getPixelColorRGBA8PhS_S_S_PKhmPK16LodePNGColorMode(i8* %r213, i8* %g214, i8* %b215, i8* %a216, i8* %295, i64 %296, %struct.LodePNGColorMode* %297)
  %298 = load i8, i8* %a216, align 1, !tbaa !16
  %conv386 = zext i8 %298 to i32
  %cmp387 = icmp ne i32 %conv386, 0
  br i1 %cmp387, label %land.lhs.true388, label %if.end411

land.lhs.true388:                                 ; preds = %for.body385
  %299 = load i8, i8* %r213, align 1, !tbaa !16
  %conv389 = zext i8 %299 to i32
  %300 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r390 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %300, i32 0, i32 2
  %301 = load i16, i16* %key_r390, align 8, !tbaa !98
  %conv391 = zext i16 %301 to i32
  %cmp392 = icmp eq i32 %conv389, %conv391
  br i1 %cmp392, label %land.lhs.true393, label %if.end411

land.lhs.true393:                                 ; preds = %land.lhs.true388
  %302 = load i8, i8* %g214, align 1, !tbaa !16
  %conv394 = zext i8 %302 to i32
  %303 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g395 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %303, i32 0, i32 3
  %304 = load i16, i16* %key_g395, align 2, !tbaa !97
  %conv396 = zext i16 %304 to i32
  %cmp397 = icmp eq i32 %conv394, %conv396
  br i1 %cmp397, label %land.lhs.true398, label %if.end411

land.lhs.true398:                                 ; preds = %land.lhs.true393
  %305 = load i8, i8* %b215, align 1, !tbaa !16
  %conv399 = zext i8 %305 to i32
  %306 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b400 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %306, i32 0, i32 4
  %307 = load i16, i16* %key_b400, align 4, !tbaa !96
  %conv401 = zext i16 %307 to i32
  %cmp402 = icmp eq i32 %conv399, %conv401
  br i1 %cmp402, label %if.then403, label %if.end411

if.then403:                                       ; preds = %land.lhs.true398
  %308 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha404 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %308, i32 0, i32 5
  store i32 1, i32* %alpha404, align 8, !tbaa !99
  %309 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key405 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %309, i32 0, i32 1
  store i32 0, i32* %key405, align 4, !tbaa !95
  store i32 1, i32* %alpha_done, align 4, !tbaa !8
  %310 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits406 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %310, i32 0, i32 8
  %311 = load i32, i32* %bits406, align 8, !tbaa !101
  %cmp407 = icmp ult i32 %311, 8
  br i1 %cmp407, label %if.then408, label %if.end410

if.then408:                                       ; preds = %if.then403
  %312 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits409 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %312, i32 0, i32 8
  store i32 8, i32* %bits409, align 8, !tbaa !101
  br label %if.end410

if.end410:                                        ; preds = %if.then408, %if.then403
  br label %if.end411

if.end411:                                        ; preds = %if.end410, %land.lhs.true398, %land.lhs.true393, %land.lhs.true388, %for.body385
  br label %for.inc412

for.inc412:                                       ; preds = %if.end411
  %313 = load i64, i64* %i, align 8, !tbaa !6
  %inc413 = add i64 %313, 1
  store i64 %inc413, i64* %i, align 8, !tbaa !6
  br label %for.cond383

for.end414:                                       ; preds = %for.cond383
  br label %if.end415

if.end415:                                        ; preds = %for.end414, %land.lhs.true379, %for.end376
  %314 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r416 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %314, i32 0, i32 2
  %315 = load i16, i16* %key_r416, align 8, !tbaa !98
  %conv417 = zext i16 %315 to i32
  %shl418 = shl i32 %conv417, 8
  %316 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r419 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %316, i32 0, i32 2
  %317 = load i16, i16* %key_r419, align 8, !tbaa !98
  %conv420 = zext i16 %317 to i32
  %add421 = add nsw i32 %conv420, %shl418
  %conv422 = trunc i32 %add421 to i16
  store i16 %conv422, i16* %key_r419, align 8, !tbaa !98
  %318 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g423 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %318, i32 0, i32 3
  %319 = load i16, i16* %key_g423, align 2, !tbaa !97
  %conv424 = zext i16 %319 to i32
  %shl425 = shl i32 %conv424, 8
  %320 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g426 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %320, i32 0, i32 3
  %321 = load i16, i16* %key_g426, align 2, !tbaa !97
  %conv427 = zext i16 %321 to i32
  %add428 = add nsw i32 %conv427, %shl425
  %conv429 = trunc i32 %add428 to i16
  store i16 %conv429, i16* %key_g426, align 2, !tbaa !97
  %322 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b430 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %322, i32 0, i32 4
  %323 = load i16, i16* %key_b430, align 4, !tbaa !96
  %conv431 = zext i16 %323 to i32
  %shl432 = shl i32 %conv431, 8
  %324 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b433 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %324, i32 0, i32 4
  %325 = load i16, i16* %key_b433, align 4, !tbaa !96
  %conv434 = zext i16 %325 to i32
  %add435 = add nsw i32 %conv434, %shl432
  %conv436 = trunc i32 %add435 to i16
  store i16 %conv436, i16* %key_b433, align 4, !tbaa !96
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup437

cleanup437:                                       ; preds = %if.then335, %if.end415
  call void @llvm.lifetime.end(i64 1, i8* %a216) #16
  call void @llvm.lifetime.end(i64 1, i8* %b215) #16
  call void @llvm.lifetime.end(i64 1, i8* %g214) #16
  call void @llvm.lifetime.end(i64 1, i8* %r213) #16
  %cleanup.dest441 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest441, label %cleanup445 [
    i32 0, label %cleanup.cont442
    i32 5, label %cleanup444
  ]

cleanup.cont442:                                  ; preds = %cleanup437
  br label %if.end443

if.end443:                                        ; preds = %cleanup.cont442, %if.end211
  br label %cleanup444

cleanup444:                                       ; preds = %if.end443, %cleanup437, %cleanup
  call void @_ZL18color_tree_cleanupP9ColorTree(%struct.ColorTree* %tree)
  %326 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %326, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup445

cleanup445:                                       ; preds = %cleanup444, %cleanup437, %cleanup
  %327 = bitcast i32* %maxnumcolors to i8*
  call void @llvm.lifetime.end(i64 4, i8* %327) #16
  %328 = bitcast i32* %sixteen to i8*
  call void @llvm.lifetime.end(i64 4, i8* %328) #16
  %329 = bitcast i32* %bits_done to i8*
  call void @llvm.lifetime.end(i64 4, i8* %329) #16
  %330 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %330) #16
  %331 = bitcast i32* %numcolors_done to i8*
  call void @llvm.lifetime.end(i64 4, i8* %331) #16
  %332 = bitcast i32* %alpha_done to i8*
  call void @llvm.lifetime.end(i64 4, i8* %332) #16
  %333 = bitcast i32* %colored_done to i8*
  call void @llvm.lifetime.end(i64 4, i8* %333) #16
  %334 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %334) #16
  %335 = bitcast i64* %numpixels to i8*
  call void @llvm.lifetime.end(i64 8, i8* %335) #16
  %336 = bitcast %struct.ColorTree* %tree to i8*
  call void @llvm.lifetime.end(i64 136, i8* %336) #16
  %337 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %337) #16
  %338 = load i32, i32* %retval, align 4
  ret i32 %338
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL20getValueRequiredBitsh(i8 zeroext %value) #4 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca i8, align 1
  store i8 %value, i8* %value.addr, align 1, !tbaa !16
  %0 = load i8, i8* %value.addr, align 1, !tbaa !16
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8, i8* %value.addr, align 1, !tbaa !16
  %conv1 = zext i8 %1 to i32
  %cmp2 = icmp eq i32 %conv1, 255
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load i8, i8* %value.addr, align 1, !tbaa !16
  %conv3 = zext i8 %2 to i32
  %rem = srem i32 %conv3, 17
  %cmp4 = icmp eq i32 %rem, 0
  br i1 %cmp4, label %if.then5, label %if.end9

if.then5:                                         ; preds = %if.end
  %3 = load i8, i8* %value.addr, align 1, !tbaa !16
  %conv6 = zext i8 %3 to i32
  %rem7 = srem i32 %conv6, 85
  %cmp8 = icmp eq i32 %rem7, 0
  %cond = select i1 %cmp8, i32 2, i32 4
  store i32 %cond, i32* %retval, align 4
  br label %return

if.end9:                                          ; preds = %if.end
  store i32 8, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end9, %if.then5, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14color_tree_hasP9ColorTreehhhh(%struct.ColorTree* %tree, i8 zeroext %r, i8 zeroext %g, i8 zeroext %b, i8 zeroext %a) #4 {
entry:
  %tree.addr = alloca %struct.ColorTree*, align 8
  %r.addr = alloca i8, align 1
  %g.addr = alloca i8, align 1
  %b.addr = alloca i8, align 1
  %a.addr = alloca i8, align 1
  store %struct.ColorTree* %tree, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  store i8 %r, i8* %r.addr, align 1, !tbaa !16
  store i8 %g, i8* %g.addr, align 1, !tbaa !16
  store i8 %b, i8* %b.addr, align 1, !tbaa !16
  store i8 %a, i8* %a.addr, align 1, !tbaa !16
  %0 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %1 = load i8, i8* %r.addr, align 1, !tbaa !16
  %2 = load i8, i8* %g.addr, align 1, !tbaa !16
  %3 = load i8, i8* %b.addr, align 1, !tbaa !16
  %4 = load i8, i8* %a.addr, align 1, !tbaa !16
  %call = call i32 @_ZL14color_tree_getP9ColorTreehhhh(%struct.ColorTree* %0, i8 zeroext %1, i8 zeroext %2, i8 zeroext %3, i8 zeroext %4)
  %cmp = icmp sge i32 %call, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: ssp uwtable
define i32 @_Z15lodepng_inspectPjS_P12LodePNGStatePKhm(i32* %w, i32* %h, %struct.LodePNGState* %state, i8* %in, i64 %insize) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %state.addr = alloca %struct.LodePNGState*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %width = alloca i32, align 4
  %height = alloca i32, align 4
  %info = alloca %struct.LodePNGInfo*, align 8
  %cleanup.dest.slot = alloca i32
  %CRC = alloca i32, align 4
  %checksum = alloca i32, align 4
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store %struct.LodePNGState* %state, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  %0 = bitcast i32* %width to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast i32* %height to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast %struct.LodePNGInfo** %info to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i32 0, i32 3
  store %struct.LodePNGInfo* %info_png, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %4 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp = icmp eq i64 %4, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %cmp1 = icmp eq i8* %5, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %6, i32 0, i32 4
  store i32 48, i32* %error, align 8, !tbaa !105
  store i32 48, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp2 = icmp ult i64 %7, 33
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %8 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error4 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i32 0, i32 4
  store i32 27, i32* %error4, align 8, !tbaa !105
  store i32 27, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end5:                                          ; preds = %if.end
  %9 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %9)
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  call void @_Z17lodepng_info_initP11LodePNGInfo(%struct.LodePNGInfo* %10)
  %11 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %12 to i32
  %cmp6 = icmp ne i32 %conv, 137
  br i1 %cmp6, label %if.then35, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %if.end5
  %13 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx8 = getelementptr inbounds i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx8, align 1, !tbaa !16
  %conv9 = zext i8 %14 to i32
  %cmp10 = icmp ne i32 %conv9, 80
  br i1 %cmp10, label %if.then35, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %15 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx12 = getelementptr inbounds i8, i8* %15, i64 2
  %16 = load i8, i8* %arrayidx12, align 1, !tbaa !16
  %conv13 = zext i8 %16 to i32
  %cmp14 = icmp ne i32 %conv13, 78
  br i1 %cmp14, label %if.then35, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false11
  %17 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx16 = getelementptr inbounds i8, i8* %17, i64 3
  %18 = load i8, i8* %arrayidx16, align 1, !tbaa !16
  %conv17 = zext i8 %18 to i32
  %cmp18 = icmp ne i32 %conv17, 71
  br i1 %cmp18, label %if.then35, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %lor.lhs.false15
  %19 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx20 = getelementptr inbounds i8, i8* %19, i64 4
  %20 = load i8, i8* %arrayidx20, align 1, !tbaa !16
  %conv21 = zext i8 %20 to i32
  %cmp22 = icmp ne i32 %conv21, 13
  br i1 %cmp22, label %if.then35, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %lor.lhs.false19
  %21 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx24 = getelementptr inbounds i8, i8* %21, i64 5
  %22 = load i8, i8* %arrayidx24, align 1, !tbaa !16
  %conv25 = zext i8 %22 to i32
  %cmp26 = icmp ne i32 %conv25, 10
  br i1 %cmp26, label %if.then35, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %lor.lhs.false23
  %23 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx28 = getelementptr inbounds i8, i8* %23, i64 6
  %24 = load i8, i8* %arrayidx28, align 1, !tbaa !16
  %conv29 = zext i8 %24 to i32
  %cmp30 = icmp ne i32 %conv29, 26
  br i1 %cmp30, label %if.then35, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %lor.lhs.false27
  %25 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx32 = getelementptr inbounds i8, i8* %25, i64 7
  %26 = load i8, i8* %arrayidx32, align 1, !tbaa !16
  %conv33 = zext i8 %26 to i32
  %cmp34 = icmp ne i32 %conv33, 10
  br i1 %cmp34, label %if.then35, label %if.end37

if.then35:                                        ; preds = %lor.lhs.false31, %lor.lhs.false27, %lor.lhs.false23, %lor.lhs.false19, %lor.lhs.false15, %lor.lhs.false11, %lor.lhs.false7, %if.end5
  %27 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error36 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %27, i32 0, i32 4
  store i32 28, i32* %error36, align 8, !tbaa !105
  store i32 28, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end37:                                         ; preds = %lor.lhs.false31
  %28 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 8
  %call = call i32 @_Z20lodepng_chunk_lengthPKh(i8* %add.ptr)
  %cmp38 = icmp ne i32 %call, 13
  br i1 %cmp38, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.end37
  %29 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error40 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %29, i32 0, i32 4
  store i32 94, i32* %error40, align 8, !tbaa !105
  store i32 94, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end41:                                         ; preds = %if.end37
  %30 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %add.ptr42 = getelementptr inbounds i8, i8* %30, i64 8
  %call43 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %add.ptr42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %tobool = icmp ne i8 %call43, 0
  br i1 %tobool, label %if.end46, label %if.then44

if.then44:                                        ; preds = %if.end41
  %31 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error45 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %31, i32 0, i32 4
  store i32 29, i32* %error45, align 8, !tbaa !105
  store i32 29, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end46:                                         ; preds = %if.end41
  %32 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx47 = getelementptr inbounds i8, i8* %32, i64 16
  %call48 = call i32 @_ZL20lodepng_read32bitIntPKh(i8* %arrayidx47)
  store i32 %call48, i32* %width, align 4, !tbaa !8
  %33 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx49 = getelementptr inbounds i8, i8* %33, i64 20
  %call50 = call i32 @_ZL20lodepng_read32bitIntPKh(i8* %arrayidx49)
  store i32 %call50, i32* %height, align 4, !tbaa !8
  %34 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %tobool51 = icmp ne i32* %34, null
  br i1 %tobool51, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.end46
  %35 = load i32, i32* %width, align 4, !tbaa !8
  %36 = load i32*, i32** %w.addr, align 8, !tbaa !2
  store i32 %35, i32* %36, align 4, !tbaa !8
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %if.end46
  %37 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %tobool54 = icmp ne i32* %37, null
  br i1 %tobool54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.end53
  %38 = load i32, i32* %height, align 4, !tbaa !8
  %39 = load i32*, i32** %h.addr, align 8, !tbaa !2
  store i32 %38, i32* %39, align 4, !tbaa !8
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.end53
  %40 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx57 = getelementptr inbounds i8, i8* %40, i64 24
  %41 = load i8, i8* %arrayidx57, align 1, !tbaa !16
  %conv58 = zext i8 %41 to i32
  %42 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %42, i32 0, i32 3
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color, i32 0, i32 1
  store i32 %conv58, i32* %bitdepth, align 4, !tbaa !110
  %43 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx59 = getelementptr inbounds i8, i8* %43, i64 25
  %44 = load i8, i8* %arrayidx59, align 1, !tbaa !16
  %conv60 = zext i8 %44 to i32
  %45 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %color61 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %45, i32 0, i32 3
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color61, i32 0, i32 0
  store i32 %conv60, i32* %colortype, align 8, !tbaa !111
  %46 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx62 = getelementptr inbounds i8, i8* %46, i64 26
  %47 = load i8, i8* %arrayidx62, align 1, !tbaa !16
  %conv63 = zext i8 %47 to i32
  %48 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %compression_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %48, i32 0, i32 0
  store i32 %conv63, i32* %compression_method, align 8, !tbaa !78
  %49 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx64 = getelementptr inbounds i8, i8* %49, i64 27
  %50 = load i8, i8* %arrayidx64, align 1, !tbaa !16
  %conv65 = zext i8 %50 to i32
  %51 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %filter_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %51, i32 0, i32 1
  store i32 %conv65, i32* %filter_method, align 4, !tbaa !79
  %52 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx66 = getelementptr inbounds i8, i8* %52, i64 28
  %53 = load i8, i8* %arrayidx66, align 1, !tbaa !16
  %conv67 = zext i8 %53 to i32
  %54 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %interlace_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %54, i32 0, i32 2
  store i32 %conv67, i32* %interlace_method, align 8, !tbaa !77
  %55 = load i32, i32* %width, align 4, !tbaa !8
  %cmp68 = icmp eq i32 %55, 0
  br i1 %cmp68, label %if.then71, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %if.end56
  %56 = load i32, i32* %height, align 4, !tbaa !8
  %cmp70 = icmp eq i32 %56, 0
  br i1 %cmp70, label %if.then71, label %if.end73

if.then71:                                        ; preds = %lor.lhs.false69, %if.end56
  %57 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error72 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %57, i32 0, i32 4
  store i32 93, i32* %error72, align 8, !tbaa !105
  store i32 93, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end73:                                         ; preds = %lor.lhs.false69
  %58 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %color74 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %58, i32 0, i32 3
  %colortype75 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color74, i32 0, i32 0
  %59 = load i32, i32* %colortype75, align 8, !tbaa !111
  %60 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %color76 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %60, i32 0, i32 3
  %bitdepth77 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color76, i32 0, i32 1
  %61 = load i32, i32* %bitdepth77, align 4, !tbaa !110
  %call78 = call i32 @_ZL18checkColorValidity16LodePNGColorTypej(i32 %59, i32 %61)
  %62 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error79 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %62, i32 0, i32 4
  store i32 %call78, i32* %error79, align 8, !tbaa !105
  %63 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error80 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %63, i32 0, i32 4
  %64 = load i32, i32* %error80, align 8, !tbaa !105
  %tobool81 = icmp ne i32 %64, 0
  br i1 %tobool81, label %if.then82, label %if.end84

if.then82:                                        ; preds = %if.end73
  %65 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error83 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %65, i32 0, i32 4
  %66 = load i32, i32* %error83, align 8, !tbaa !105
  store i32 %66, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end84:                                         ; preds = %if.end73
  %67 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %compression_method85 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %67, i32 0, i32 0
  %68 = load i32, i32* %compression_method85, align 8, !tbaa !78
  %cmp86 = icmp ne i32 %68, 0
  br i1 %cmp86, label %if.then87, label %if.end89

if.then87:                                        ; preds = %if.end84
  %69 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error88 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %69, i32 0, i32 4
  store i32 32, i32* %error88, align 8, !tbaa !105
  store i32 32, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end89:                                         ; preds = %if.end84
  %70 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %filter_method90 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %70, i32 0, i32 1
  %71 = load i32, i32* %filter_method90, align 4, !tbaa !79
  %cmp91 = icmp ne i32 %71, 0
  br i1 %cmp91, label %if.then92, label %if.end94

if.then92:                                        ; preds = %if.end89
  %72 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error93 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %72, i32 0, i32 4
  store i32 33, i32* %error93, align 8, !tbaa !105
  store i32 33, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end94:                                         ; preds = %if.end89
  %73 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info, align 8, !tbaa !2
  %interlace_method95 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %73, i32 0, i32 2
  %74 = load i32, i32* %interlace_method95, align 8, !tbaa !77
  %cmp96 = icmp ugt i32 %74, 1
  br i1 %cmp96, label %if.then97, label %if.end99

if.then97:                                        ; preds = %if.end94
  %75 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error98 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %75, i32 0, i32 4
  store i32 34, i32* %error98, align 8, !tbaa !105
  store i32 34, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

if.end99:                                         ; preds = %if.end94
  %76 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %76, i32 0, i32 0
  %ignore_crc = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder, i32 0, i32 1
  %77 = load i32, i32* %ignore_crc, align 8, !tbaa !112
  %tobool100 = icmp ne i32 %77, 0
  br i1 %tobool100, label %if.end111, label %if.then101

if.then101:                                       ; preds = %if.end99
  %78 = bitcast i32* %CRC to i8*
  call void @llvm.lifetime.start(i64 4, i8* %78) #16
  %79 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx102 = getelementptr inbounds i8, i8* %79, i64 29
  %call103 = call i32 @_ZL20lodepng_read32bitIntPKh(i8* %arrayidx102)
  store i32 %call103, i32* %CRC, align 4, !tbaa !8
  %80 = bitcast i32* %checksum to i8*
  call void @llvm.lifetime.start(i64 4, i8* %80) #16
  %81 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx104 = getelementptr inbounds i8, i8* %81, i64 12
  %call105 = call i32 @_Z13lodepng_crc32PKhm(i8* %arrayidx104, i64 17)
  store i32 %call105, i32* %checksum, align 4, !tbaa !8
  %82 = load i32, i32* %CRC, align 4, !tbaa !8
  %83 = load i32, i32* %checksum, align 4, !tbaa !8
  %cmp106 = icmp ne i32 %82, %83
  br i1 %cmp106, label %if.then107, label %if.end109

if.then107:                                       ; preds = %if.then101
  %84 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error108 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %84, i32 0, i32 4
  store i32 57, i32* %error108, align 8, !tbaa !105
  store i32 57, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end109:                                        ; preds = %if.then101
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end109, %if.then107
  %85 = bitcast i32* %checksum to i8*
  call void @llvm.lifetime.end(i64 4, i8* %85) #16
  %86 = bitcast i32* %CRC to i8*
  call void @llvm.lifetime.end(i64 4, i8* %86) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup113 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end111

if.end111:                                        ; preds = %cleanup.cont, %if.end99
  %87 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error112 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %87, i32 0, i32 4
  %88 = load i32, i32* %error112, align 8, !tbaa !105
  store i32 %88, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup113

cleanup113:                                       ; preds = %if.end111, %cleanup, %if.then97, %if.then92, %if.then87, %if.then82, %if.then71, %if.then44, %if.then39, %if.then35, %if.then3, %if.then
  %89 = bitcast %struct.LodePNGInfo** %info to i8*
  call void @llvm.lifetime.end(i64 8, i8* %89) #16
  %90 = bitcast i32* %height to i8*
  call void @llvm.lifetime.end(i64 4, i8* %90) #16
  %91 = bitcast i32* %width to i8*
  call void @llvm.lifetime.end(i64 4, i8* %91) #16
  %92 = load i32, i32* %retval, align 4
  ret i32 %92
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL18checkColorValidity16LodePNGColorTypej(i32 %colortype, i32 %bd) #4 {
entry:
  %retval = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bd.addr = alloca i32, align 4
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bd, i32* %bd.addr, align 4, !tbaa !8
  %0 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb8
    i32 3, label %sw.bb14
    i32 4, label %sw.bb24
    i32 6, label %sw.bb30
    i32 255, label %sw.bb36
  ]

sw.bb:                                            ; preds = %entry
  %1 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %2 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp1 = icmp eq i32 %2, 2
  br i1 %cmp1, label %if.end, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp3 = icmp eq i32 %3, 4
  br i1 %cmp3, label %if.end, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp5 = icmp eq i32 %4, 8
  br i1 %cmp5, label %if.end, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %5 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp7 = icmp eq i32 %5, 16
  br i1 %cmp7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false6
  store i32 37, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %sw.bb
  br label %sw.epilog

sw.bb8:                                           ; preds = %entry
  %6 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp9 = icmp eq i32 %6, 8
  br i1 %cmp9, label %if.end13, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %sw.bb8
  %7 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp11 = icmp eq i32 %7, 16
  br i1 %cmp11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %lor.lhs.false10
  store i32 37, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %lor.lhs.false10, %sw.bb8
  br label %sw.epilog

sw.bb14:                                          ; preds = %entry
  %8 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp15 = icmp eq i32 %8, 1
  br i1 %cmp15, label %if.end23, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %sw.bb14
  %9 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp17 = icmp eq i32 %9, 2
  br i1 %cmp17, label %if.end23, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %lor.lhs.false16
  %10 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp19 = icmp eq i32 %10, 4
  br i1 %cmp19, label %if.end23, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false18
  %11 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp21 = icmp eq i32 %11, 8
  br i1 %cmp21, label %if.end23, label %if.then22

if.then22:                                        ; preds = %lor.lhs.false20
  store i32 37, i32* %retval, align 4
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20, %lor.lhs.false18, %lor.lhs.false16, %sw.bb14
  br label %sw.epilog

sw.bb24:                                          ; preds = %entry
  %12 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp25 = icmp eq i32 %12, 8
  br i1 %cmp25, label %if.end29, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %sw.bb24
  %13 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp27 = icmp eq i32 %13, 16
  br i1 %cmp27, label %if.end29, label %if.then28

if.then28:                                        ; preds = %lor.lhs.false26
  store i32 37, i32* %retval, align 4
  br label %return

if.end29:                                         ; preds = %lor.lhs.false26, %sw.bb24
  br label %sw.epilog

sw.bb30:                                          ; preds = %entry
  %14 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp31 = icmp eq i32 %14, 8
  br i1 %cmp31, label %if.end35, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %sw.bb30
  %15 = load i32, i32* %bd.addr, align 4, !tbaa !8
  %cmp33 = icmp eq i32 %15, 16
  br i1 %cmp33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %lor.lhs.false32
  store i32 37, i32* %retval, align 4
  br label %return

if.end35:                                         ; preds = %lor.lhs.false32, %sw.bb30
  br label %sw.epilog

sw.bb36:                                          ; preds = %entry
  store i32 31, i32* %retval, align 4
  br label %return

sw.default:                                       ; preds = %entry
  store i32 31, i32* %retval, align 4
  br label %return

sw.epilog:                                        ; preds = %if.end35, %if.end29, %if.end23, %if.end13, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %sw.bb36, %if.then34, %if.then28, %if.then22, %if.then12, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: ssp uwtable
define i32 @_Z21lodepng_inspect_chunkP12LodePNGStatemPKhm(%struct.LodePNGState* %state, i64 %pos, i8* %in, i64 %insize) #0 {
entry:
  %retval = alloca i32, align 4
  %state.addr = alloca %struct.LodePNGState*, align 8
  %pos.addr = alloca i64, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %chunk = alloca i8*, align 8
  %chunkLength = alloca i32, align 4
  %data = alloca i8*, align 8
  %unhandled = alloca i32, align 4
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGState* %state, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  store i64 %pos, i64* %pos.addr, align 8, !tbaa !6
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %2 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %add.ptr, i8** %chunk, align 8, !tbaa !2
  %3 = bitcast i32* %chunkLength to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = bitcast i32* %unhandled to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  store i32 0, i32* %unhandled, align 4, !tbaa !8
  %6 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %7 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %add = add i64 %7, 4
  %8 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp = icmp ugt i64 %add, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 30, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %9 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call = call i32 @_Z20lodepng_chunk_lengthPKh(i8* %9)
  store i32 %call, i32* %chunkLength, align 4, !tbaa !8
  %10 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %cmp1 = icmp ugt i32 %10, 2147483647
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 63, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %if.end
  %11 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call4 = call i8* @_Z24lodepng_chunk_data_constPKh(i8* %11)
  store i8* %call4, i8** %data, align 8, !tbaa !2
  %12 = load i8*, i8** %data, align 8, !tbaa !2
  %13 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %idx.ext = zext i32 %13 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %12, i64 %idx.ext
  %add.ptr6 = getelementptr inbounds i8, i8* %add.ptr5, i64 4
  %14 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %15 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %add.ptr7 = getelementptr inbounds i8, i8* %14, i64 %15
  %cmp8 = icmp ugt i8* %add.ptr6, %add.ptr7
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end3
  store i32 30, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.end3
  %16 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call11 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  %tobool = icmp ne i8 %call11, 0
  br i1 %tobool, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end10
  %17 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %17, i32 0, i32 3
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png, i32 0, i32 3
  %18 = load i8*, i8** %data, align 8, !tbaa !2
  %19 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv = zext i32 %19 to i64
  %call13 = call i32 @_ZL14readChunk_PLTEP16LodePNGColorModePKhm(%struct.LodePNGColorMode* %color, i8* %18, i64 %conv)
  store i32 %call13, i32* %error, align 4, !tbaa !8
  br label %if.end107

if.else:                                          ; preds = %if.end10
  %20 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call14 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0))
  %tobool15 = icmp ne i8 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.else21

if.then16:                                        ; preds = %if.else
  %21 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png17 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %21, i32 0, i32 3
  %color18 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png17, i32 0, i32 3
  %22 = load i8*, i8** %data, align 8, !tbaa !2
  %23 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv19 = zext i32 %23 to i64
  %call20 = call i32 @_ZL14readChunk_tRNSP16LodePNGColorModePKhm(%struct.LodePNGColorMode* %color18, i8* %22, i64 %conv19)
  store i32 %call20, i32* %error, align 4, !tbaa !8
  br label %if.end106

if.else21:                                        ; preds = %if.else
  %24 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call22 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0))
  %tobool23 = icmp ne i8 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.else28

if.then24:                                        ; preds = %if.else21
  %25 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png25 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %25, i32 0, i32 3
  %26 = load i8*, i8** %data, align 8, !tbaa !2
  %27 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv26 = zext i32 %27 to i64
  %call27 = call i32 @_ZL14readChunk_bKGDP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png25, i8* %26, i64 %conv26)
  store i32 %call27, i32* %error, align 4, !tbaa !8
  br label %if.end105

if.else28:                                        ; preds = %if.else21
  %28 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call29 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %28, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %tobool30 = icmp ne i8 %call29, 0
  br i1 %tobool30, label %if.then31, label %if.else35

if.then31:                                        ; preds = %if.else28
  %29 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png32 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %29, i32 0, i32 3
  %30 = load i8*, i8** %data, align 8, !tbaa !2
  %31 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv33 = zext i32 %31 to i64
  %call34 = call i32 @_ZL14readChunk_tEXtP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png32, i8* %30, i64 %conv33)
  store i32 %call34, i32* %error, align 4, !tbaa !8
  br label %if.end104

if.else35:                                        ; preds = %if.else28
  %32 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call36 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0))
  %tobool37 = icmp ne i8 %call36, 0
  br i1 %tobool37, label %if.then38, label %if.else42

if.then38:                                        ; preds = %if.else35
  %33 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png39 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %33, i32 0, i32 3
  %34 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %34, i32 0, i32 0
  %zlibsettings = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder, i32 0, i32 0
  %35 = load i8*, i8** %data, align 8, !tbaa !2
  %36 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv40 = zext i32 %36 to i64
  %call41 = call i32 @_ZL14readChunk_zTXtP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info_png39, %struct.LodePNGDecompressSettings* %zlibsettings, i8* %35, i64 %conv40)
  store i32 %call41, i32* %error, align 4, !tbaa !8
  br label %if.end103

if.else42:                                        ; preds = %if.else35
  %37 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call43 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %37, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %tobool44 = icmp ne i8 %call43, 0
  br i1 %tobool44, label %if.then45, label %if.else51

if.then45:                                        ; preds = %if.else42
  %38 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png46 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %38, i32 0, i32 3
  %39 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder47 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %39, i32 0, i32 0
  %zlibsettings48 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder47, i32 0, i32 0
  %40 = load i8*, i8** %data, align 8, !tbaa !2
  %41 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv49 = zext i32 %41 to i64
  %call50 = call i32 @_ZL14readChunk_iTXtP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info_png46, %struct.LodePNGDecompressSettings* %zlibsettings48, i8* %40, i64 %conv49)
  store i32 %call50, i32* %error, align 4, !tbaa !8
  br label %if.end102

if.else51:                                        ; preds = %if.else42
  %42 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call52 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %tobool53 = icmp ne i8 %call52, 0
  br i1 %tobool53, label %if.then54, label %if.else58

if.then54:                                        ; preds = %if.else51
  %43 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png55 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %43, i32 0, i32 3
  %44 = load i8*, i8** %data, align 8, !tbaa !2
  %45 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv56 = zext i32 %45 to i64
  %call57 = call i32 @_ZL14readChunk_tIMEP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png55, i8* %44, i64 %conv56)
  store i32 %call57, i32* %error, align 4, !tbaa !8
  br label %if.end101

if.else58:                                        ; preds = %if.else51
  %46 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call59 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0))
  %tobool60 = icmp ne i8 %call59, 0
  br i1 %tobool60, label %if.then61, label %if.else65

if.then61:                                        ; preds = %if.else58
  %47 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png62 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %47, i32 0, i32 3
  %48 = load i8*, i8** %data, align 8, !tbaa !2
  %49 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv63 = zext i32 %49 to i64
  %call64 = call i32 @_ZL14readChunk_pHYsP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png62, i8* %48, i64 %conv63)
  store i32 %call64, i32* %error, align 4, !tbaa !8
  br label %if.end100

if.else65:                                        ; preds = %if.else58
  %50 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call66 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0))
  %tobool67 = icmp ne i8 %call66, 0
  br i1 %tobool67, label %if.then68, label %if.else72

if.then68:                                        ; preds = %if.else65
  %51 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png69 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %51, i32 0, i32 3
  %52 = load i8*, i8** %data, align 8, !tbaa !2
  %53 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv70 = zext i32 %53 to i64
  %call71 = call i32 @_ZL14readChunk_gAMAP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png69, i8* %52, i64 %conv70)
  store i32 %call71, i32* %error, align 4, !tbaa !8
  br label %if.end99

if.else72:                                        ; preds = %if.else65
  %54 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call73 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0))
  %tobool74 = icmp ne i8 %call73, 0
  br i1 %tobool74, label %if.then75, label %if.else79

if.then75:                                        ; preds = %if.else72
  %55 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png76 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %55, i32 0, i32 3
  %56 = load i8*, i8** %data, align 8, !tbaa !2
  %57 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv77 = zext i32 %57 to i64
  %call78 = call i32 @_ZL14readChunk_cHRMP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png76, i8* %56, i64 %conv77)
  store i32 %call78, i32* %error, align 4, !tbaa !8
  br label %if.end98

if.else79:                                        ; preds = %if.else72
  %58 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call80 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %58, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %tobool81 = icmp ne i8 %call80, 0
  br i1 %tobool81, label %if.then82, label %if.else86

if.then82:                                        ; preds = %if.else79
  %59 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png83 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %59, i32 0, i32 3
  %60 = load i8*, i8** %data, align 8, !tbaa !2
  %61 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv84 = zext i32 %61 to i64
  %call85 = call i32 @_ZL14readChunk_sRGBP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png83, i8* %60, i64 %conv84)
  store i32 %call85, i32* %error, align 4, !tbaa !8
  br label %if.end97

if.else86:                                        ; preds = %if.else79
  %62 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call87 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %62, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0))
  %tobool88 = icmp ne i8 %call87, 0
  br i1 %tobool88, label %if.then89, label %if.else95

if.then89:                                        ; preds = %if.else86
  %63 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png90 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %63, i32 0, i32 3
  %64 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder91 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %64, i32 0, i32 0
  %zlibsettings92 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder91, i32 0, i32 0
  %65 = load i8*, i8** %data, align 8, !tbaa !2
  %66 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv93 = zext i32 %66 to i64
  %call94 = call i32 @_ZL14readChunk_iCCPP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info_png90, %struct.LodePNGDecompressSettings* %zlibsettings92, i8* %65, i64 %conv93)
  store i32 %call94, i32* %error, align 4, !tbaa !8
  br label %if.end96

if.else95:                                        ; preds = %if.else86
  store i32 1, i32* %unhandled, align 4, !tbaa !8
  br label %if.end96

if.end96:                                         ; preds = %if.else95, %if.then89
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.then82
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.then75
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %if.then68
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.then61
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.then54
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.then45
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then38
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then31
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then24
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then16
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.then12
  %67 = load i32, i32* %error, align 4, !tbaa !8
  %tobool108 = icmp ne i32 %67, 0
  br i1 %tobool108, label %if.end118, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end107
  %68 = load i32, i32* %unhandled, align 4, !tbaa !8
  %tobool109 = icmp ne i32 %68, 0
  br i1 %tobool109, label %if.end118, label %land.lhs.true110

land.lhs.true110:                                 ; preds = %land.lhs.true
  %69 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder111 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %69, i32 0, i32 0
  %ignore_crc = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder111, i32 0, i32 1
  %70 = load i32, i32* %ignore_crc, align 8, !tbaa !112
  %tobool112 = icmp ne i32 %70, 0
  br i1 %tobool112, label %if.end118, label %if.then113

if.then113:                                       ; preds = %land.lhs.true110
  %71 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call114 = call i32 @_Z23lodepng_chunk_check_crcPKh(i8* %71)
  %tobool115 = icmp ne i32 %call114, 0
  br i1 %tobool115, label %if.then116, label %if.end117

if.then116:                                       ; preds = %if.then113
  store i32 57, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end117:                                        ; preds = %if.then113
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %land.lhs.true110, %land.lhs.true, %if.end107
  %72 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %72, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end118, %if.then116, %if.then9, %if.then2, %if.then
  %73 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %73) #16
  %74 = bitcast i32* %unhandled to i8*
  call void @llvm.lifetime.end(i64 4, i8* %74) #16
  %75 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #16
  %76 = bitcast i32* %chunkLength to i8*
  call void @llvm.lifetime.end(i64 4, i8* %76) #16
  %77 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %77) #16
  %78 = load i32, i32* %retval, align 4
  ret i32 %78
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL14readChunk_PLTEP16LodePNGColorModePKhm(%struct.LodePNGColorMode* %color, i8* %data, i64 %chunkLength) #0 {
entry:
  %retval = alloca i32, align 4
  %color.addr = alloca %struct.LodePNGColorMode*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  %pos = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGColorMode* %color, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = bitcast i32* %pos to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %pos, align 4, !tbaa !8
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %div = udiv i64 %2, 3
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %3, i32 0, i32 3
  store i64 %div, i64* %palettesize, align 8, !tbaa !61
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palettesize1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 3
  %5 = load i64, i64* %palettesize1, align 8, !tbaa !61
  %cmp = icmp eq i64 %5, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palettesize2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %6, i32 0, i32 3
  %7 = load i64, i64* %palettesize2, align 8, !tbaa !61
  %cmp3 = icmp ugt i64 %7, 256
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 38, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  call void @_ZL32lodepng_color_mode_alloc_paletteP16LodePNGColorMode(%struct.LodePNGColorMode* %8)
  %9 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %9, i32 0, i32 2
  %10 = load i8*, i8** %palette, align 8, !tbaa !60
  %tobool = icmp ne i8* %10, null
  br i1 %tobool, label %if.end8, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %11 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palettesize4 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i32 0, i32 3
  %12 = load i64, i64* %palettesize4, align 8, !tbaa !61
  %tobool5 = icmp ne i64 %12, 0
  br i1 %tobool5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %land.lhs.true
  %13 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palettesize7 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %13, i32 0, i32 3
  store i64 0, i64* %palettesize7, align 8, !tbaa !61
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end8
  %14 = load i32, i32* %i, align 4, !tbaa !8
  %conv = zext i32 %14 to i64
  %15 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palettesize9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %15, i32 0, i32 3
  %16 = load i64, i64* %palettesize9, align 8, !tbaa !61
  %cmp10 = icmp ne i64 %conv, %16
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %18 = load i32, i32* %pos, align 4, !tbaa !8
  %inc = add i32 %18, 1
  store i32 %inc, i32* %pos, align 4, !tbaa !8
  %idxprom = zext i32 %18 to i64
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %idxprom
  %19 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %20 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palette11 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %20, i32 0, i32 2
  %21 = load i8*, i8** %palette11, align 8, !tbaa !60
  %22 = load i32, i32* %i, align 4, !tbaa !8
  %mul = mul i32 4, %22
  %add = add i32 %mul, 0
  %idxprom12 = zext i32 %add to i64
  %arrayidx13 = getelementptr inbounds i8, i8* %21, i64 %idxprom12
  store i8 %19, i8* %arrayidx13, align 1, !tbaa !16
  %23 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %24 = load i32, i32* %pos, align 4, !tbaa !8
  %inc14 = add i32 %24, 1
  store i32 %inc14, i32* %pos, align 4, !tbaa !8
  %idxprom15 = zext i32 %24 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %23, i64 %idxprom15
  %25 = load i8, i8* %arrayidx16, align 1, !tbaa !16
  %26 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palette17 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %26, i32 0, i32 2
  %27 = load i8*, i8** %palette17, align 8, !tbaa !60
  %28 = load i32, i32* %i, align 4, !tbaa !8
  %mul18 = mul i32 4, %28
  %add19 = add i32 %mul18, 1
  %idxprom20 = zext i32 %add19 to i64
  %arrayidx21 = getelementptr inbounds i8, i8* %27, i64 %idxprom20
  store i8 %25, i8* %arrayidx21, align 1, !tbaa !16
  %29 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %30 = load i32, i32* %pos, align 4, !tbaa !8
  %inc22 = add i32 %30, 1
  store i32 %inc22, i32* %pos, align 4, !tbaa !8
  %idxprom23 = zext i32 %30 to i64
  %arrayidx24 = getelementptr inbounds i8, i8* %29, i64 %idxprom23
  %31 = load i8, i8* %arrayidx24, align 1, !tbaa !16
  %32 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palette25 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %32, i32 0, i32 2
  %33 = load i8*, i8** %palette25, align 8, !tbaa !60
  %34 = load i32, i32* %i, align 4, !tbaa !8
  %mul26 = mul i32 4, %34
  %add27 = add i32 %mul26, 2
  %idxprom28 = zext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds i8, i8* %33, i64 %idxprom28
  store i8 %31, i8* %arrayidx29, align 1, !tbaa !16
  %35 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palette30 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %35, i32 0, i32 2
  %36 = load i8*, i8** %palette30, align 8, !tbaa !60
  %37 = load i32, i32* %i, align 4, !tbaa !8
  %mul31 = mul i32 4, %37
  %add32 = add i32 %mul31, 3
  %idxprom33 = zext i32 %add32 to i64
  %arrayidx34 = getelementptr inbounds i8, i8* %36, i64 %idxprom33
  store i8 -1, i8* %arrayidx34, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %38 = load i32, i32* %i, align 4, !tbaa !8
  %inc35 = add i32 %38, 1
  store i32 %inc35, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then6, %if.then
  %39 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #16
  %40 = bitcast i32* %pos to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #16
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14readChunk_tRNSP16LodePNGColorModePKhm(%struct.LodePNGColorMode* %color, i8* %data, i64 %chunkLength) #4 {
entry:
  %retval = alloca i32, align 4
  %color.addr = alloca %struct.LodePNGColorMode*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGColorMode* %color, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i32 0, i32 0
  %2 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %2, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %4, i32 0, i32 3
  %5 = load i64, i64* %palettesize, align 8, !tbaa !61
  %cmp1 = icmp ugt i64 %3, %5
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  store i32 39, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !tbaa !8
  %conv = zext i32 %6 to i64
  %7 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp3 = icmp ne i64 %conv, %7
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %9 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %11 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i32 0, i32 2
  %12 = load i8*, i8** %palette, align 8, !tbaa !60
  %13 = load i32, i32* %i, align 4, !tbaa !8
  %mul = mul i32 4, %13
  %add = add i32 %mul, 3
  %idxprom4 = zext i32 %add to i64
  %arrayidx5 = getelementptr inbounds i8, i8* %12, i64 %idxprom4
  store i8 %10, i8* %arrayidx5, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %14, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end50

if.else:                                          ; preds = %entry
  %15 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %colortype6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %15, i32 0, i32 0
  %16 = load i32, i32* %colortype6, align 8, !tbaa !58
  %cmp7 = icmp eq i32 %16, 0
  br i1 %cmp7, label %if.then8, label %if.else18

if.then8:                                         ; preds = %if.else
  %17 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp9 = icmp ne i64 %17, 2
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then8
  store i32 30, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end11:                                         ; preds = %if.then8
  %18 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %18, i32 0, i32 4
  store i32 1, i32* %key_defined, align 8, !tbaa !52
  %19 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx12 = getelementptr inbounds i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx12, align 1, !tbaa !16
  %conv13 = zext i8 %20 to i32
  %mul14 = mul i32 256, %conv13
  %21 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx15 = getelementptr inbounds i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %22 to i32
  %add17 = add i32 %mul14, %conv16
  %23 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %23, i32 0, i32 7
  store i32 %add17, i32* %key_b, align 4, !tbaa !55
  %24 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %24, i32 0, i32 6
  store i32 %add17, i32* %key_g, align 8, !tbaa !56
  %25 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %25, i32 0, i32 5
  store i32 %add17, i32* %key_r, align 4, !tbaa !57
  br label %if.end49

if.else18:                                        ; preds = %if.else
  %26 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %colortype19 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %26, i32 0, i32 0
  %27 = load i32, i32* %colortype19, align 8, !tbaa !58
  %cmp20 = icmp eq i32 %27, 2
  br i1 %cmp20, label %if.then21, label %if.else47

if.then21:                                        ; preds = %if.else18
  %28 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp22 = icmp ne i64 %28, 6
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.then21
  store i32 41, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end24:                                         ; preds = %if.then21
  %29 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %key_defined25 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %29, i32 0, i32 4
  store i32 1, i32* %key_defined25, align 8, !tbaa !52
  %30 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx26 = getelementptr inbounds i8, i8* %30, i64 0
  %31 = load i8, i8* %arrayidx26, align 1, !tbaa !16
  %conv27 = zext i8 %31 to i32
  %mul28 = mul i32 256, %conv27
  %32 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx29 = getelementptr inbounds i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx29, align 1, !tbaa !16
  %conv30 = zext i8 %33 to i32
  %add31 = add i32 %mul28, %conv30
  %34 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %key_r32 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %34, i32 0, i32 5
  store i32 %add31, i32* %key_r32, align 4, !tbaa !57
  %35 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx33 = getelementptr inbounds i8, i8* %35, i64 2
  %36 = load i8, i8* %arrayidx33, align 1, !tbaa !16
  %conv34 = zext i8 %36 to i32
  %mul35 = mul i32 256, %conv34
  %37 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx36 = getelementptr inbounds i8, i8* %37, i64 3
  %38 = load i8, i8* %arrayidx36, align 1, !tbaa !16
  %conv37 = zext i8 %38 to i32
  %add38 = add i32 %mul35, %conv37
  %39 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %key_g39 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %39, i32 0, i32 6
  store i32 %add38, i32* %key_g39, align 8, !tbaa !56
  %40 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx40 = getelementptr inbounds i8, i8* %40, i64 4
  %41 = load i8, i8* %arrayidx40, align 1, !tbaa !16
  %conv41 = zext i8 %41 to i32
  %mul42 = mul i32 256, %conv41
  %42 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx43 = getelementptr inbounds i8, i8* %42, i64 5
  %43 = load i8, i8* %arrayidx43, align 1, !tbaa !16
  %conv44 = zext i8 %43 to i32
  %add45 = add i32 %mul42, %conv44
  %44 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %key_b46 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %44, i32 0, i32 7
  store i32 %add45, i32* %key_b46, align 4, !tbaa !55
  br label %if.end48

if.else47:                                        ; preds = %if.else18
  store i32 42, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end48:                                         ; preds = %if.end24
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.end11
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %for.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end50, %if.else47, %if.then23, %if.then10, %if.then2
  %45 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %45) #16
  %46 = load i32, i32* %retval, align 4
  ret i32 %46
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14readChunk_bKGDP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info, i8* %data, i64 %chunkLength) #4 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i32 0, i32 3
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color, i32 0, i32 0
  %1 = load i32, i32* %colortype, align 8, !tbaa !111
  %cmp = icmp eq i32 %1, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp1 = icmp ne i64 %2, 1
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  store i32 43, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %4 to i64
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color3 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 3
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color3, i32 0, i32 3
  %6 = load i64, i64* %palettesize, align 8, !tbaa !113
  %cmp4 = icmp uge i64 %conv, %6
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store i32 103, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %if.end
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 4
  store i32 1, i32* %background_defined, align 8, !tbaa !80
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx7, align 1, !tbaa !16
  %conv8 = zext i8 %9 to i32
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_b = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 7
  store i32 %conv8, i32* %background_b, align 4, !tbaa !81
  %11 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_g = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %11, i32 0, i32 6
  store i32 %conv8, i32* %background_g, align 8, !tbaa !82
  %12 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %12, i32 0, i32 5
  store i32 %conv8, i32* %background_r, align 4, !tbaa !83
  br label %if.end63

if.else:                                          ; preds = %entry
  %13 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color9 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %13, i32 0, i32 3
  %colortype10 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color9, i32 0, i32 0
  %14 = load i32, i32* %colortype10, align 8, !tbaa !111
  %cmp11 = icmp eq i32 %14, 0
  br i1 %cmp11, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %15 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color12 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %15, i32 0, i32 3
  %colortype13 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color12, i32 0, i32 0
  %16 = load i32, i32* %colortype13, align 8, !tbaa !111
  %cmp14 = icmp eq i32 %16, 4
  br i1 %cmp14, label %if.then15, label %if.else27

if.then15:                                        ; preds = %lor.lhs.false, %if.else
  %17 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp16 = icmp ne i64 %17, 2
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.then15
  store i32 44, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.then15
  %18 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_defined19 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %18, i32 0, i32 4
  store i32 1, i32* %background_defined19, align 8, !tbaa !80
  %19 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx20 = getelementptr inbounds i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx20, align 1, !tbaa !16
  %conv21 = zext i8 %20 to i32
  %mul = mul i32 256, %conv21
  %21 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx22 = getelementptr inbounds i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx22, align 1, !tbaa !16
  %conv23 = zext i8 %22 to i32
  %add = add i32 %mul, %conv23
  %23 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_b24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %23, i32 0, i32 7
  store i32 %add, i32* %background_b24, align 4, !tbaa !81
  %24 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_g25 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %24, i32 0, i32 6
  store i32 %add, i32* %background_g25, align 8, !tbaa !82
  %25 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r26 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %25, i32 0, i32 5
  store i32 %add, i32* %background_r26, align 4, !tbaa !83
  br label %if.end62

if.else27:                                        ; preds = %lor.lhs.false
  %26 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color28 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %26, i32 0, i32 3
  %colortype29 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color28, i32 0, i32 0
  %27 = load i32, i32* %colortype29, align 8, !tbaa !111
  %cmp30 = icmp eq i32 %27, 2
  br i1 %cmp30, label %if.then35, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %if.else27
  %28 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color32 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %28, i32 0, i32 3
  %colortype33 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color32, i32 0, i32 0
  %29 = load i32, i32* %colortype33, align 8, !tbaa !111
  %cmp34 = icmp eq i32 %29, 6
  br i1 %cmp34, label %if.then35, label %if.end61

if.then35:                                        ; preds = %lor.lhs.false31, %if.else27
  %30 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp36 = icmp ne i64 %30, 6
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.then35
  store i32 45, i32* %retval, align 4
  br label %return

if.end38:                                         ; preds = %if.then35
  %31 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_defined39 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %31, i32 0, i32 4
  store i32 1, i32* %background_defined39, align 8, !tbaa !80
  %32 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx40 = getelementptr inbounds i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx40, align 1, !tbaa !16
  %conv41 = zext i8 %33 to i32
  %mul42 = mul i32 256, %conv41
  %34 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx43 = getelementptr inbounds i8, i8* %34, i64 1
  %35 = load i8, i8* %arrayidx43, align 1, !tbaa !16
  %conv44 = zext i8 %35 to i32
  %add45 = add i32 %mul42, %conv44
  %36 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r46 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %36, i32 0, i32 5
  store i32 %add45, i32* %background_r46, align 4, !tbaa !83
  %37 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx47 = getelementptr inbounds i8, i8* %37, i64 2
  %38 = load i8, i8* %arrayidx47, align 1, !tbaa !16
  %conv48 = zext i8 %38 to i32
  %mul49 = mul i32 256, %conv48
  %39 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx50 = getelementptr inbounds i8, i8* %39, i64 3
  %40 = load i8, i8* %arrayidx50, align 1, !tbaa !16
  %conv51 = zext i8 %40 to i32
  %add52 = add i32 %mul49, %conv51
  %41 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_g53 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %41, i32 0, i32 6
  store i32 %add52, i32* %background_g53, align 8, !tbaa !82
  %42 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx54 = getelementptr inbounds i8, i8* %42, i64 4
  %43 = load i8, i8* %arrayidx54, align 1, !tbaa !16
  %conv55 = zext i8 %43 to i32
  %mul56 = mul i32 256, %conv55
  %44 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx57 = getelementptr inbounds i8, i8* %44, i64 5
  %45 = load i8, i8* %arrayidx57, align 1, !tbaa !16
  %conv58 = zext i8 %45 to i32
  %add59 = add i32 %mul56, %conv58
  %46 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_b60 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %46, i32 0, i32 7
  store i32 %add59, i32* %background_b60, align 4, !tbaa !81
  br label %if.end61

if.end61:                                         ; preds = %if.end38, %lor.lhs.false31
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end18
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end6
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end63, %if.then37, %if.then17, %if.then5, %if.then2
  %47 = load i32, i32* %retval, align 4
  ret i32 %47
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL14readChunk_tEXtP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info, i8* %data, i64 %chunkLength) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  %error = alloca i32, align 4
  %key = alloca i8*, align 8
  %str = alloca i8*, align 8
  %length = alloca i32, align 4
  %string2_begin = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i8** %key to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i8* null, i8** %key, align 8, !tbaa !2
  %2 = bitcast i8** %str to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i8* null, i8** %str, align 8, !tbaa !2
  br label %while.cond

while.cond:                                       ; preds = %entry
  %3 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %3, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end30

while.body:                                       ; preds = %while.cond
  %4 = bitcast i32* %length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #16
  %5 = bitcast i32* %string2_begin to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  store i32 0, i32* %length, align 4, !tbaa !8
  br label %while.cond1

while.cond1:                                      ; preds = %while.body4, %while.body
  %6 = load i32, i32* %length, align 4, !tbaa !8
  %conv = zext i32 %6 to i64
  %7 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %conv, %7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond1
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %9 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 %idxprom
  %10 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv2 = zext i8 %10 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond1
  %11 = phi i1 [ false, %while.cond1 ], [ %cmp3, %land.rhs ]
  br i1 %11, label %while.body4, label %while.end

while.body4:                                      ; preds = %land.end
  %12 = load i32, i32* %length, align 4, !tbaa !8
  %inc = add i32 %12, 1
  store i32 %inc, i32* %length, align 4, !tbaa !8
  br label %while.cond1

while.end:                                        ; preds = %land.end
  %13 = load i32, i32* %length, align 4, !tbaa !8
  %cmp5 = icmp ult i32 %13, 1
  br i1 %cmp5, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %14 = load i32, i32* %length, align 4, !tbaa !8
  %cmp6 = icmp ugt i32 %14, 79
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %while.end
  store i32 89, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %15 = load i32, i32* %length, align 4, !tbaa !8
  %add = add i32 %15, 1
  %conv7 = zext i32 %add to i64
  %call = call i8* @_ZL14lodepng_mallocm(i64 %conv7)
  store i8* %call, i8** %key, align 8, !tbaa !2
  %16 = load i8*, i8** %key, align 8, !tbaa !2
  %tobool8 = icmp ne i8* %16, null
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %if.end
  store i32 83, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.end
  %17 = load i8*, i8** %key, align 8, !tbaa !2
  %18 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %19 = load i32, i32* %length, align 4, !tbaa !8
  %conv11 = zext i32 %19 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %17, i8* %18, i64 %conv11)
  %20 = load i8*, i8** %key, align 8, !tbaa !2
  %21 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom12 = zext i32 %21 to i64
  %arrayidx13 = getelementptr inbounds i8, i8* %20, i64 %idxprom12
  store i8 0, i8* %arrayidx13, align 1, !tbaa !16
  %22 = load i32, i32* %length, align 4, !tbaa !8
  %add14 = add i32 %22, 1
  store i32 %add14, i32* %string2_begin, align 4, !tbaa !8
  %23 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %24 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %conv15 = zext i32 %24 to i64
  %cmp16 = icmp ult i64 %23, %conv15
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end10
  br label %cond.end

cond.false:                                       ; preds = %if.end10
  %25 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %26 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %conv17 = zext i32 %26 to i64
  %sub = sub i64 %25, %conv17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %sub, %cond.false ]
  %conv18 = trunc i64 %cond to i32
  store i32 %conv18, i32* %length, align 4, !tbaa !8
  %27 = load i32, i32* %length, align 4, !tbaa !8
  %add19 = add i32 %27, 1
  %conv20 = zext i32 %add19 to i64
  %call21 = call i8* @_ZL14lodepng_mallocm(i64 %conv20)
  store i8* %call21, i8** %str, align 8, !tbaa !2
  %28 = load i8*, i8** %str, align 8, !tbaa !2
  %tobool22 = icmp ne i8* %28, null
  br i1 %tobool22, label %if.end24, label %if.then23

if.then23:                                        ; preds = %cond.end
  store i32 83, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end24:                                         ; preds = %cond.end
  %29 = load i8*, i8** %str, align 8, !tbaa !2
  %30 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %31 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %idx.ext = zext i32 %31 to i64
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 %idx.ext
  %32 = load i32, i32* %length, align 4, !tbaa !8
  %conv25 = zext i32 %32 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %29, i8* %add.ptr, i64 %conv25)
  %33 = load i8*, i8** %str, align 8, !tbaa !2
  %34 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom26 = zext i32 %34 to i64
  %arrayidx27 = getelementptr inbounds i8, i8* %33, i64 %idxprom26
  store i8 0, i8* %arrayidx27, align 1, !tbaa !16
  %35 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %36 = load i8*, i8** %key, align 8, !tbaa !2
  %37 = load i8*, i8** %str, align 8, !tbaa !2
  %call28 = call i32 @_Z16lodepng_add_textP11LodePNGInfoPKcS2_(%struct.LodePNGInfo* %35, i8* %36, i8* %37)
  store i32 %call28, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end24, %if.then23, %if.then9, %if.then
  %38 = bitcast i32* %string2_begin to i8*
  call void @llvm.lifetime.end(i64 4, i8* %38) #16
  %39 = bitcast i32* %length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #16
  br label %while.end30

while.end30:                                      ; preds = %cleanup, %while.cond
  %40 = load i8*, i8** %key, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %40)
  %41 = load i8*, i8** %str, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %41)
  %42 = load i32, i32* %error, align 4, !tbaa !8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %43 = bitcast i8** %str to i8*
  call void @llvm.lifetime.end(i64 8, i8* %43) #16
  %44 = bitcast i8** %key to i8*
  call void @llvm.lifetime.end(i64 8, i8* %44) #16
  %45 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %45) #16
  ret i32 %42
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL14readChunk_zTXtP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info, %struct.LodePNGDecompressSettings* %zlibsettings, i8* %data, i64 %chunkLength) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %zlibsettings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  %error = alloca i32, align 4
  %length = alloca i32, align 4
  %string2_begin = alloca i32, align 4
  %key = alloca i8*, align 8
  %str = alloca i8*, align 8
  %size = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store %struct.LodePNGDecompressSettings* %zlibsettings, %struct.LodePNGDecompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i32* %length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i32* %string2_begin to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = bitcast i8** %key to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  store i8* null, i8** %key, align 8, !tbaa !2
  %4 = bitcast i8** %str to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  store i8* null, i8** %str, align 8, !tbaa !2
  %5 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  store i64 0, i64* %size, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %entry
  %6 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %6, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %length, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %7 = load i32, i32* %length, align 4, !tbaa !8
  %conv = zext i32 %7 to i64
  %8 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %conv, %8
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %9 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %10 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom = zext i32 %10 to i64
  %arrayidx = getelementptr inbounds i8, i8* %9, i64 %idxprom
  %11 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv1 = zext i8 %11 to i32
  %cmp2 = icmp ne i32 %conv1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %12 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %12, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %length, align 4, !tbaa !8
  %inc = add i32 %13, 1
  store i32 %inc, i32* %length, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %14 = load i32, i32* %length, align 4, !tbaa !8
  %add = add i32 %14, 2
  %conv3 = zext i32 %add to i64
  %15 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp4 = icmp uge i64 %conv3, %15
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.end
  store i32 75, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end:                                           ; preds = %for.end
  %16 = load i32, i32* %length, align 4, !tbaa !8
  %cmp5 = icmp ult i32 %16, 1
  br i1 %cmp5, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %17 = load i32, i32* %length, align 4, !tbaa !8
  %cmp6 = icmp ugt i32 %17, 79
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %lor.lhs.false, %if.end
  store i32 89, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end8:                                          ; preds = %lor.lhs.false
  %18 = load i32, i32* %length, align 4, !tbaa !8
  %add9 = add i32 %18, 1
  %conv10 = zext i32 %add9 to i64
  %call = call i8* @_ZL14lodepng_mallocm(i64 %conv10)
  store i8* %call, i8** %key, align 8, !tbaa !2
  %19 = load i8*, i8** %key, align 8, !tbaa !2
  %tobool11 = icmp ne i8* %19, null
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end8
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end13:                                         ; preds = %if.end8
  %20 = load i8*, i8** %key, align 8, !tbaa !2
  %21 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %22 = load i32, i32* %length, align 4, !tbaa !8
  %conv14 = zext i32 %22 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %20, i8* %21, i64 %conv14)
  %23 = load i8*, i8** %key, align 8, !tbaa !2
  %24 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom15 = zext i32 %24 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %23, i64 %idxprom15
  store i8 0, i8* %arrayidx16, align 1, !tbaa !16
  %25 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %26 = load i32, i32* %length, align 4, !tbaa !8
  %add17 = add i32 %26, 1
  %idxprom18 = zext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %25, i64 %idxprom18
  %27 = load i8, i8* %arrayidx19, align 1, !tbaa !16
  %conv20 = zext i8 %27 to i32
  %cmp21 = icmp ne i32 %conv20, 0
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end13
  store i32 72, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end23:                                         ; preds = %if.end13
  %28 = load i32, i32* %length, align 4, !tbaa !8
  %add24 = add i32 %28, 2
  store i32 %add24, i32* %string2_begin, align 4, !tbaa !8
  %29 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %conv25 = zext i32 %29 to i64
  %30 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp26 = icmp ugt i64 %conv25, %30
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.end23
  store i32 75, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end28:                                         ; preds = %if.end23
  %31 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %conv29 = trunc i64 %31 to i32
  %32 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %sub = sub i32 %conv29, %32
  store i32 %sub, i32* %length, align 4, !tbaa !8
  %33 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %34 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %idxprom30 = zext i32 %34 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %33, i64 %idxprom30
  %35 = load i32, i32* %length, align 4, !tbaa !8
  %conv32 = zext i32 %35 to i64
  %36 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %call33 = call i32 @_ZL15zlib_decompressPPhPmmPKhmPK25LodePNGDecompressSettings(i8** %str, i64* %size, i64 0, i8* %arrayidx31, i64 %conv32, %struct.LodePNGDecompressSettings* %36)
  store i32 %call33, i32* %error, align 4, !tbaa !8
  %37 = load i32, i32* %error, align 4, !tbaa !8
  %tobool34 = icmp ne i32 %37, 0
  br i1 %tobool34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end28
  br label %while.end

if.end36:                                         ; preds = %if.end28
  %38 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %39 = load i8*, i8** %key, align 8, !tbaa !2
  %40 = load i8*, i8** %str, align 8, !tbaa !2
  %41 = load i64, i64* %size, align 8, !tbaa !6
  %call37 = call i32 @_ZL22lodepng_add_text_sizedP11LodePNGInfoPKcS2_m(%struct.LodePNGInfo* %38, i8* %39, i8* %40, i64 %41)
  store i32 %call37, i32* %error, align 4, !tbaa !8
  br label %while.end

while.end:                                        ; preds = %if.end36, %if.then35, %if.then27, %if.then22, %if.then12, %if.then7, %if.then, %while.cond
  %42 = load i8*, i8** %key, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %42)
  %43 = load i8*, i8** %str, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %43)
  %44 = load i32, i32* %error, align 4, !tbaa !8
  %45 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %45) #16
  %46 = bitcast i8** %str to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #16
  %47 = bitcast i8** %key to i8*
  call void @llvm.lifetime.end(i64 8, i8* %47) #16
  %48 = bitcast i32* %string2_begin to i8*
  call void @llvm.lifetime.end(i64 4, i8* %48) #16
  %49 = bitcast i32* %length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %49) #16
  %50 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %50) #16
  ret i32 %44
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL14readChunk_iTXtP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info, %struct.LodePNGDecompressSettings* %zlibsettings, i8* %data, i64 %chunkLength) #0 {
entry:
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %zlibsettings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  %error = alloca i32, align 4
  %i = alloca i32, align 4
  %length = alloca i32, align 4
  %begin = alloca i32, align 4
  %compressed = alloca i32, align 4
  %key = alloca i8*, align 8
  %langtag = alloca i8*, align 8
  %transkey = alloca i8*, align 8
  %str = alloca i8*, align 8
  %size = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store %struct.LodePNGDecompressSettings* %zlibsettings, %struct.LodePNGDecompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i32* %length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = bitcast i32* %begin to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = bitcast i32* %compressed to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #16
  %5 = bitcast i8** %key to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  store i8* null, i8** %key, align 8, !tbaa !2
  %6 = bitcast i8** %langtag to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  store i8* null, i8** %langtag, align 8, !tbaa !2
  %7 = bitcast i8** %transkey to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  store i8* null, i8** %transkey, align 8, !tbaa !2
  br label %while.cond

while.cond:                                       ; preds = %entry
  %8 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %8, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %9, 5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 30, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end:                                           ; preds = %while.body
  store i32 0, i32* %length, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %length, align 4, !tbaa !8
  %conv = zext i32 %10 to i64
  %11 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp1 = icmp ult i64 %conv, %11
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %12 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %13 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom = zext i32 %13 to i64
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %idxprom
  %14 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv2 = zext i8 %14 to i32
  %cmp3 = icmp ne i32 %conv2, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %15 = phi i1 [ false, %for.cond ], [ %cmp3, %land.rhs ]
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %length, align 4, !tbaa !8
  %inc = add i32 %16, 1
  store i32 %inc, i32* %length, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %17 = load i32, i32* %length, align 4, !tbaa !8
  %add = add i32 %17, 3
  %conv4 = zext i32 %add to i64
  %18 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp5 = icmp uge i64 %conv4, %18
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %for.end
  store i32 75, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end7:                                          ; preds = %for.end
  %19 = load i32, i32* %length, align 4, !tbaa !8
  %cmp8 = icmp ult i32 %19, 1
  br i1 %cmp8, label %if.then10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end7
  %20 = load i32, i32* %length, align 4, !tbaa !8
  %cmp9 = icmp ugt i32 %20, 79
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %lor.lhs.false, %if.end7
  store i32 89, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end11:                                         ; preds = %lor.lhs.false
  %21 = load i32, i32* %length, align 4, !tbaa !8
  %add12 = add i32 %21, 1
  %conv13 = zext i32 %add12 to i64
  %call = call i8* @_ZL14lodepng_mallocm(i64 %conv13)
  store i8* %call, i8** %key, align 8, !tbaa !2
  %22 = load i8*, i8** %key, align 8, !tbaa !2
  %tobool14 = icmp ne i8* %22, null
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %if.end11
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end16:                                         ; preds = %if.end11
  %23 = load i8*, i8** %key, align 8, !tbaa !2
  %24 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %25 = load i32, i32* %length, align 4, !tbaa !8
  %conv17 = zext i32 %25 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %23, i8* %24, i64 %conv17)
  %26 = load i8*, i8** %key, align 8, !tbaa !2
  %27 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom18 = zext i32 %27 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %26, i64 %idxprom18
  store i8 0, i8* %arrayidx19, align 1, !tbaa !16
  %28 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %29 = load i32, i32* %length, align 4, !tbaa !8
  %add20 = add i32 %29, 1
  %idxprom21 = zext i32 %add20 to i64
  %arrayidx22 = getelementptr inbounds i8, i8* %28, i64 %idxprom21
  %30 = load i8, i8* %arrayidx22, align 1, !tbaa !16
  %conv23 = zext i8 %30 to i32
  store i32 %conv23, i32* %compressed, align 4, !tbaa !8
  %31 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %32 = load i32, i32* %length, align 4, !tbaa !8
  %add24 = add i32 %32, 2
  %idxprom25 = zext i32 %add24 to i64
  %arrayidx26 = getelementptr inbounds i8, i8* %31, i64 %idxprom25
  %33 = load i8, i8* %arrayidx26, align 1, !tbaa !16
  %conv27 = zext i8 %33 to i32
  %cmp28 = icmp ne i32 %conv27, 0
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end16
  store i32 72, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end30:                                         ; preds = %if.end16
  %34 = load i32, i32* %length, align 4, !tbaa !8
  %add31 = add i32 %34, 3
  store i32 %add31, i32* %begin, align 4, !tbaa !8
  store i32 0, i32* %length, align 4, !tbaa !8
  %35 = load i32, i32* %begin, align 4, !tbaa !8
  store i32 %35, i32* %i, align 4, !tbaa !8
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc43, %if.end30
  %36 = load i32, i32* %i, align 4, !tbaa !8
  %conv33 = zext i32 %36 to i64
  %37 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp34 = icmp ult i64 %conv33, %37
  br i1 %cmp34, label %land.rhs35, label %land.end40

land.rhs35:                                       ; preds = %for.cond32
  %38 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %39 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom36 = zext i32 %39 to i64
  %arrayidx37 = getelementptr inbounds i8, i8* %38, i64 %idxprom36
  %40 = load i8, i8* %arrayidx37, align 1, !tbaa !16
  %conv38 = zext i8 %40 to i32
  %cmp39 = icmp ne i32 %conv38, 0
  br label %land.end40

land.end40:                                       ; preds = %land.rhs35, %for.cond32
  %41 = phi i1 [ false, %for.cond32 ], [ %cmp39, %land.rhs35 ]
  br i1 %41, label %for.body41, label %for.end45

for.body41:                                       ; preds = %land.end40
  %42 = load i32, i32* %length, align 4, !tbaa !8
  %inc42 = add i32 %42, 1
  store i32 %inc42, i32* %length, align 4, !tbaa !8
  br label %for.inc43

for.inc43:                                        ; preds = %for.body41
  %43 = load i32, i32* %i, align 4, !tbaa !8
  %inc44 = add i32 %43, 1
  store i32 %inc44, i32* %i, align 4, !tbaa !8
  br label %for.cond32

for.end45:                                        ; preds = %land.end40
  %44 = load i32, i32* %length, align 4, !tbaa !8
  %add46 = add i32 %44, 1
  %conv47 = zext i32 %add46 to i64
  %call48 = call i8* @_ZL14lodepng_mallocm(i64 %conv47)
  store i8* %call48, i8** %langtag, align 8, !tbaa !2
  %45 = load i8*, i8** %langtag, align 8, !tbaa !2
  %tobool49 = icmp ne i8* %45, null
  br i1 %tobool49, label %if.end51, label %if.then50

if.then50:                                        ; preds = %for.end45
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end51:                                         ; preds = %for.end45
  %46 = load i8*, i8** %langtag, align 8, !tbaa !2
  %47 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %48 = load i32, i32* %begin, align 4, !tbaa !8
  %idx.ext = zext i32 %48 to i64
  %add.ptr = getelementptr inbounds i8, i8* %47, i64 %idx.ext
  %49 = load i32, i32* %length, align 4, !tbaa !8
  %conv52 = zext i32 %49 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %46, i8* %add.ptr, i64 %conv52)
  %50 = load i8*, i8** %langtag, align 8, !tbaa !2
  %51 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom53 = zext i32 %51 to i64
  %arrayidx54 = getelementptr inbounds i8, i8* %50, i64 %idxprom53
  store i8 0, i8* %arrayidx54, align 1, !tbaa !16
  %52 = load i32, i32* %length, align 4, !tbaa !8
  %add55 = add i32 %52, 1
  %53 = load i32, i32* %begin, align 4, !tbaa !8
  %add56 = add i32 %53, %add55
  store i32 %add56, i32* %begin, align 4, !tbaa !8
  store i32 0, i32* %length, align 4, !tbaa !8
  %54 = load i32, i32* %begin, align 4, !tbaa !8
  store i32 %54, i32* %i, align 4, !tbaa !8
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc68, %if.end51
  %55 = load i32, i32* %i, align 4, !tbaa !8
  %conv58 = zext i32 %55 to i64
  %56 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp59 = icmp ult i64 %conv58, %56
  br i1 %cmp59, label %land.rhs60, label %land.end65

land.rhs60:                                       ; preds = %for.cond57
  %57 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %58 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom61 = zext i32 %58 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %57, i64 %idxprom61
  %59 = load i8, i8* %arrayidx62, align 1, !tbaa !16
  %conv63 = zext i8 %59 to i32
  %cmp64 = icmp ne i32 %conv63, 0
  br label %land.end65

land.end65:                                       ; preds = %land.rhs60, %for.cond57
  %60 = phi i1 [ false, %for.cond57 ], [ %cmp64, %land.rhs60 ]
  br i1 %60, label %for.body66, label %for.end70

for.body66:                                       ; preds = %land.end65
  %61 = load i32, i32* %length, align 4, !tbaa !8
  %inc67 = add i32 %61, 1
  store i32 %inc67, i32* %length, align 4, !tbaa !8
  br label %for.inc68

for.inc68:                                        ; preds = %for.body66
  %62 = load i32, i32* %i, align 4, !tbaa !8
  %inc69 = add i32 %62, 1
  store i32 %inc69, i32* %i, align 4, !tbaa !8
  br label %for.cond57

for.end70:                                        ; preds = %land.end65
  %63 = load i32, i32* %length, align 4, !tbaa !8
  %add71 = add i32 %63, 1
  %conv72 = zext i32 %add71 to i64
  %call73 = call i8* @_ZL14lodepng_mallocm(i64 %conv72)
  store i8* %call73, i8** %transkey, align 8, !tbaa !2
  %64 = load i8*, i8** %transkey, align 8, !tbaa !2
  %tobool74 = icmp ne i8* %64, null
  br i1 %tobool74, label %if.end76, label %if.then75

if.then75:                                        ; preds = %for.end70
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %while.end

if.end76:                                         ; preds = %for.end70
  %65 = load i8*, i8** %transkey, align 8, !tbaa !2
  %66 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %67 = load i32, i32* %begin, align 4, !tbaa !8
  %idx.ext77 = zext i32 %67 to i64
  %add.ptr78 = getelementptr inbounds i8, i8* %66, i64 %idx.ext77
  %68 = load i32, i32* %length, align 4, !tbaa !8
  %conv79 = zext i32 %68 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %65, i8* %add.ptr78, i64 %conv79)
  %69 = load i8*, i8** %transkey, align 8, !tbaa !2
  %70 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom80 = zext i32 %70 to i64
  %arrayidx81 = getelementptr inbounds i8, i8* %69, i64 %idxprom80
  store i8 0, i8* %arrayidx81, align 1, !tbaa !16
  %71 = load i32, i32* %length, align 4, !tbaa !8
  %add82 = add i32 %71, 1
  %72 = load i32, i32* %begin, align 4, !tbaa !8
  %add83 = add i32 %72, %add82
  store i32 %add83, i32* %begin, align 4, !tbaa !8
  %73 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %conv84 = trunc i64 %73 to i32
  %74 = load i32, i32* %begin, align 4, !tbaa !8
  %cmp85 = icmp ult i32 %conv84, %74
  br i1 %cmp85, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end76
  br label %cond.end

cond.false:                                       ; preds = %if.end76
  %75 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %conv86 = trunc i64 %75 to i32
  %76 = load i32, i32* %begin, align 4, !tbaa !8
  %sub = sub i32 %conv86, %76
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %sub, %cond.false ]
  store i32 %cond, i32* %length, align 4, !tbaa !8
  %77 = load i32, i32* %compressed, align 4, !tbaa !8
  %tobool87 = icmp ne i32 %77, 0
  br i1 %tobool87, label %if.then88, label %if.else

if.then88:                                        ; preds = %cond.end
  %78 = bitcast i8** %str to i8*
  call void @llvm.lifetime.start(i64 8, i8* %78) #16
  store i8* null, i8** %str, align 8, !tbaa !2
  %79 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %79) #16
  store i64 0, i64* %size, align 8, !tbaa !6
  %80 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %81 = load i32, i32* %begin, align 4, !tbaa !8
  %idxprom89 = zext i32 %81 to i64
  %arrayidx90 = getelementptr inbounds i8, i8* %80, i64 %idxprom89
  %82 = load i32, i32* %length, align 4, !tbaa !8
  %conv91 = zext i32 %82 to i64
  %83 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %call92 = call i32 @_ZL15zlib_decompressPPhPmmPKhmPK25LodePNGDecompressSettings(i8** %str, i64* %size, i64 0, i8* %arrayidx90, i64 %conv91, %struct.LodePNGDecompressSettings* %83)
  store i32 %call92, i32* %error, align 4, !tbaa !8
  %84 = load i32, i32* %error, align 4, !tbaa !8
  %tobool93 = icmp ne i32 %84, 0
  br i1 %tobool93, label %if.end96, label %if.then94

if.then94:                                        ; preds = %if.then88
  %85 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %86 = load i8*, i8** %key, align 8, !tbaa !2
  %87 = load i8*, i8** %langtag, align 8, !tbaa !2
  %88 = load i8*, i8** %transkey, align 8, !tbaa !2
  %89 = load i8*, i8** %str, align 8, !tbaa !2
  %90 = load i64, i64* %size, align 8, !tbaa !6
  %call95 = call i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* %85, i8* %86, i8* %87, i8* %88, i8* %89, i64 %90)
  store i32 %call95, i32* %error, align 4, !tbaa !8
  br label %if.end96

if.end96:                                         ; preds = %if.then94, %if.then88
  %91 = load i8*, i8** %str, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %91)
  %92 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %92) #16
  %93 = bitcast i8** %str to i8*
  call void @llvm.lifetime.end(i64 8, i8* %93) #16
  br label %if.end101

if.else:                                          ; preds = %cond.end
  %94 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %95 = load i8*, i8** %key, align 8, !tbaa !2
  %96 = load i8*, i8** %langtag, align 8, !tbaa !2
  %97 = load i8*, i8** %transkey, align 8, !tbaa !2
  %98 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %99 = load i32, i32* %begin, align 4, !tbaa !8
  %idx.ext97 = zext i32 %99 to i64
  %add.ptr98 = getelementptr inbounds i8, i8* %98, i64 %idx.ext97
  %100 = load i32, i32* %length, align 4, !tbaa !8
  %conv99 = zext i32 %100 to i64
  %call100 = call i32 @_ZL23lodepng_add_itext_sizedP11LodePNGInfoPKcS2_S2_S2_m(%struct.LodePNGInfo* %94, i8* %95, i8* %96, i8* %97, i8* %add.ptr98, i64 %conv99)
  store i32 %call100, i32* %error, align 4, !tbaa !8
  br label %if.end101

if.end101:                                        ; preds = %if.else, %if.end96
  br label %while.end

while.end:                                        ; preds = %if.end101, %if.then75, %if.then50, %if.then29, %if.then15, %if.then10, %if.then6, %if.then, %while.cond
  %101 = load i8*, i8** %key, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %101)
  %102 = load i8*, i8** %langtag, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %102)
  %103 = load i8*, i8** %transkey, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %103)
  %104 = load i32, i32* %error, align 4, !tbaa !8
  %105 = bitcast i8** %transkey to i8*
  call void @llvm.lifetime.end(i64 8, i8* %105) #16
  %106 = bitcast i8** %langtag to i8*
  call void @llvm.lifetime.end(i64 8, i8* %106) #16
  %107 = bitcast i8** %key to i8*
  call void @llvm.lifetime.end(i64 8, i8* %107) #16
  %108 = bitcast i32* %compressed to i8*
  call void @llvm.lifetime.end(i64 4, i8* %108) #16
  %109 = bitcast i32* %begin to i8*
  call void @llvm.lifetime.end(i64 4, i8* %109) #16
  %110 = bitcast i32* %length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %110) #16
  %111 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %111) #16
  %112 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %112) #16
  ret i32 %104
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14readChunk_tIMEP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info, i8* %data, i64 %chunkLength) #4 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %0, 7
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 73, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %time_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 16
  store i32 1, i32* %time_defined, align 8, !tbaa !84
  %2 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %3 to i32
  %mul = mul i32 256, %conv
  %4 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx1, align 1, !tbaa !16
  %conv2 = zext i8 %5 to i32
  %add = add i32 %mul, %conv2
  %6 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %time = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %6, i32 0, i32 17
  %year = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %time, i32 0, i32 0
  store i32 %add, i32* %year, align 4, !tbaa !114
  %7 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 2
  %8 = load i8, i8* %arrayidx3, align 1, !tbaa !16
  %conv4 = zext i8 %8 to i32
  %9 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %time5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %9, i32 0, i32 17
  %month = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %time5, i32 0, i32 1
  store i32 %conv4, i32* %month, align 4, !tbaa !115
  %10 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx6 = getelementptr inbounds i8, i8* %10, i64 3
  %11 = load i8, i8* %arrayidx6, align 1, !tbaa !16
  %conv7 = zext i8 %11 to i32
  %12 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %time8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %12, i32 0, i32 17
  %day = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %time8, i32 0, i32 2
  store i32 %conv7, i32* %day, align 4, !tbaa !116
  %13 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 4
  %14 = load i8, i8* %arrayidx9, align 1, !tbaa !16
  %conv10 = zext i8 %14 to i32
  %15 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %time11 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %15, i32 0, i32 17
  %hour = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %time11, i32 0, i32 3
  store i32 %conv10, i32* %hour, align 4, !tbaa !117
  %16 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx12 = getelementptr inbounds i8, i8* %16, i64 5
  %17 = load i8, i8* %arrayidx12, align 1, !tbaa !16
  %conv13 = zext i8 %17 to i32
  %18 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %time14 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %18, i32 0, i32 17
  %minute = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %time14, i32 0, i32 4
  store i32 %conv13, i32* %minute, align 4, !tbaa !118
  %19 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx15 = getelementptr inbounds i8, i8* %19, i64 6
  %20 = load i8, i8* %arrayidx15, align 1, !tbaa !16
  %conv16 = zext i8 %20 to i32
  %21 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %time17 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %21, i32 0, i32 17
  %second = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %time17, i32 0, i32 5
  store i32 %conv16, i32* %second, align 4, !tbaa !119
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %22 = load i32, i32* %retval, align 4
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14readChunk_pHYsP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info, i8* %data, i64 %chunkLength) #4 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %0, 9
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 74, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %phys_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 18
  store i32 1, i32* %phys_defined, align 4, !tbaa !85
  %2 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %3 to i32
  %mul = mul i32 16777216, %conv
  %4 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx1, align 1, !tbaa !16
  %conv2 = zext i8 %5 to i32
  %mul3 = mul i32 65536, %conv2
  %add = add i32 %mul, %mul3
  %6 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i64 2
  %7 = load i8, i8* %arrayidx4, align 1, !tbaa !16
  %conv5 = zext i8 %7 to i32
  %mul6 = mul i32 256, %conv5
  %add7 = add i32 %add, %mul6
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx8 = getelementptr inbounds i8, i8* %8, i64 3
  %9 = load i8, i8* %arrayidx8, align 1, !tbaa !16
  %conv9 = zext i8 %9 to i32
  %add10 = add i32 %add7, %conv9
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %phys_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 19
  store i32 %add10, i32* %phys_x, align 8, !tbaa !120
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 4
  %12 = load i8, i8* %arrayidx11, align 1, !tbaa !16
  %conv12 = zext i8 %12 to i32
  %mul13 = mul i32 16777216, %conv12
  %13 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx14 = getelementptr inbounds i8, i8* %13, i64 5
  %14 = load i8, i8* %arrayidx14, align 1, !tbaa !16
  %conv15 = zext i8 %14 to i32
  %mul16 = mul i32 65536, %conv15
  %add17 = add i32 %mul13, %mul16
  %15 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx18 = getelementptr inbounds i8, i8* %15, i64 6
  %16 = load i8, i8* %arrayidx18, align 1, !tbaa !16
  %conv19 = zext i8 %16 to i32
  %mul20 = mul i32 256, %conv19
  %add21 = add i32 %add17, %mul20
  %17 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx22 = getelementptr inbounds i8, i8* %17, i64 7
  %18 = load i8, i8* %arrayidx22, align 1, !tbaa !16
  %conv23 = zext i8 %18 to i32
  %add24 = add i32 %add21, %conv23
  %19 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %phys_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %19, i32 0, i32 20
  store i32 %add24, i32* %phys_y, align 4, !tbaa !121
  %20 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx25 = getelementptr inbounds i8, i8* %20, i64 8
  %21 = load i8, i8* %arrayidx25, align 1, !tbaa !16
  %conv26 = zext i8 %21 to i32
  %22 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %phys_unit = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %22, i32 0, i32 21
  store i32 %conv26, i32* %phys_unit, align 8, !tbaa !122
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14readChunk_gAMAP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info, i8* %data, i64 %chunkLength) #4 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %0, 4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 96, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %gama_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 22
  store i32 1, i32* %gama_defined, align 4, !tbaa !86
  %2 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %3 to i32
  %mul = mul i32 16777216, %conv
  %4 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx1, align 1, !tbaa !16
  %conv2 = zext i8 %5 to i32
  %mul3 = mul i32 65536, %conv2
  %add = add i32 %mul, %mul3
  %6 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i64 2
  %7 = load i8, i8* %arrayidx4, align 1, !tbaa !16
  %conv5 = zext i8 %7 to i32
  %mul6 = mul i32 256, %conv5
  %add7 = add i32 %add, %mul6
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx8 = getelementptr inbounds i8, i8* %8, i64 3
  %9 = load i8, i8* %arrayidx8, align 1, !tbaa !16
  %conv9 = zext i8 %9 to i32
  %add10 = add i32 %add7, %conv9
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %gama_gamma = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 23
  store i32 %add10, i32* %gama_gamma, align 8, !tbaa !123
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14readChunk_cHRMP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info, i8* %data, i64 %chunkLength) #4 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %0, 32
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 97, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 24
  store i32 1, i32* %chrm_defined, align 4, !tbaa !87
  %2 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %3 to i32
  %mul = mul i32 16777216, %conv
  %4 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx1 = getelementptr inbounds i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx1, align 1, !tbaa !16
  %conv2 = zext i8 %5 to i32
  %mul3 = mul i32 65536, %conv2
  %add = add i32 %mul, %mul3
  %6 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i64 2
  %7 = load i8, i8* %arrayidx4, align 1, !tbaa !16
  %conv5 = zext i8 %7 to i32
  %mul6 = mul i32 256, %conv5
  %add7 = add i32 %add, %mul6
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx8 = getelementptr inbounds i8, i8* %8, i64 3
  %9 = load i8, i8* %arrayidx8, align 1, !tbaa !16
  %conv9 = zext i8 %9 to i32
  %add10 = add i32 %add7, %conv9
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_white_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 25
  store i32 %add10, i32* %chrm_white_x, align 8, !tbaa !124
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx11 = getelementptr inbounds i8, i8* %11, i64 4
  %12 = load i8, i8* %arrayidx11, align 1, !tbaa !16
  %conv12 = zext i8 %12 to i32
  %mul13 = mul i32 16777216, %conv12
  %13 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx14 = getelementptr inbounds i8, i8* %13, i64 5
  %14 = load i8, i8* %arrayidx14, align 1, !tbaa !16
  %conv15 = zext i8 %14 to i32
  %mul16 = mul i32 65536, %conv15
  %add17 = add i32 %mul13, %mul16
  %15 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx18 = getelementptr inbounds i8, i8* %15, i64 6
  %16 = load i8, i8* %arrayidx18, align 1, !tbaa !16
  %conv19 = zext i8 %16 to i32
  %mul20 = mul i32 256, %conv19
  %add21 = add i32 %add17, %mul20
  %17 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx22 = getelementptr inbounds i8, i8* %17, i64 7
  %18 = load i8, i8* %arrayidx22, align 1, !tbaa !16
  %conv23 = zext i8 %18 to i32
  %add24 = add i32 %add21, %conv23
  %19 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_white_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %19, i32 0, i32 26
  store i32 %add24, i32* %chrm_white_y, align 4, !tbaa !125
  %20 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx25 = getelementptr inbounds i8, i8* %20, i64 8
  %21 = load i8, i8* %arrayidx25, align 1, !tbaa !16
  %conv26 = zext i8 %21 to i32
  %mul27 = mul i32 16777216, %conv26
  %22 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx28 = getelementptr inbounds i8, i8* %22, i64 9
  %23 = load i8, i8* %arrayidx28, align 1, !tbaa !16
  %conv29 = zext i8 %23 to i32
  %mul30 = mul i32 65536, %conv29
  %add31 = add i32 %mul27, %mul30
  %24 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx32 = getelementptr inbounds i8, i8* %24, i64 10
  %25 = load i8, i8* %arrayidx32, align 1, !tbaa !16
  %conv33 = zext i8 %25 to i32
  %mul34 = mul i32 256, %conv33
  %add35 = add i32 %add31, %mul34
  %26 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx36 = getelementptr inbounds i8, i8* %26, i64 11
  %27 = load i8, i8* %arrayidx36, align 1, !tbaa !16
  %conv37 = zext i8 %27 to i32
  %add38 = add i32 %add35, %conv37
  %28 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_red_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %28, i32 0, i32 27
  store i32 %add38, i32* %chrm_red_x, align 8, !tbaa !126
  %29 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx39 = getelementptr inbounds i8, i8* %29, i64 12
  %30 = load i8, i8* %arrayidx39, align 1, !tbaa !16
  %conv40 = zext i8 %30 to i32
  %mul41 = mul i32 16777216, %conv40
  %31 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx42 = getelementptr inbounds i8, i8* %31, i64 13
  %32 = load i8, i8* %arrayidx42, align 1, !tbaa !16
  %conv43 = zext i8 %32 to i32
  %mul44 = mul i32 65536, %conv43
  %add45 = add i32 %mul41, %mul44
  %33 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx46 = getelementptr inbounds i8, i8* %33, i64 14
  %34 = load i8, i8* %arrayidx46, align 1, !tbaa !16
  %conv47 = zext i8 %34 to i32
  %mul48 = mul i32 256, %conv47
  %add49 = add i32 %add45, %mul48
  %35 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx50 = getelementptr inbounds i8, i8* %35, i64 15
  %36 = load i8, i8* %arrayidx50, align 1, !tbaa !16
  %conv51 = zext i8 %36 to i32
  %add52 = add i32 %add49, %conv51
  %37 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_red_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %37, i32 0, i32 28
  store i32 %add52, i32* %chrm_red_y, align 4, !tbaa !127
  %38 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx53 = getelementptr inbounds i8, i8* %38, i64 16
  %39 = load i8, i8* %arrayidx53, align 1, !tbaa !16
  %conv54 = zext i8 %39 to i32
  %mul55 = mul i32 16777216, %conv54
  %40 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx56 = getelementptr inbounds i8, i8* %40, i64 17
  %41 = load i8, i8* %arrayidx56, align 1, !tbaa !16
  %conv57 = zext i8 %41 to i32
  %mul58 = mul i32 65536, %conv57
  %add59 = add i32 %mul55, %mul58
  %42 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx60 = getelementptr inbounds i8, i8* %42, i64 18
  %43 = load i8, i8* %arrayidx60, align 1, !tbaa !16
  %conv61 = zext i8 %43 to i32
  %mul62 = mul i32 256, %conv61
  %add63 = add i32 %add59, %mul62
  %44 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx64 = getelementptr inbounds i8, i8* %44, i64 19
  %45 = load i8, i8* %arrayidx64, align 1, !tbaa !16
  %conv65 = zext i8 %45 to i32
  %add66 = add i32 %add63, %conv65
  %46 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_green_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %46, i32 0, i32 29
  store i32 %add66, i32* %chrm_green_x, align 8, !tbaa !128
  %47 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx67 = getelementptr inbounds i8, i8* %47, i64 20
  %48 = load i8, i8* %arrayidx67, align 1, !tbaa !16
  %conv68 = zext i8 %48 to i32
  %mul69 = mul i32 16777216, %conv68
  %49 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx70 = getelementptr inbounds i8, i8* %49, i64 21
  %50 = load i8, i8* %arrayidx70, align 1, !tbaa !16
  %conv71 = zext i8 %50 to i32
  %mul72 = mul i32 65536, %conv71
  %add73 = add i32 %mul69, %mul72
  %51 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx74 = getelementptr inbounds i8, i8* %51, i64 22
  %52 = load i8, i8* %arrayidx74, align 1, !tbaa !16
  %conv75 = zext i8 %52 to i32
  %mul76 = mul i32 256, %conv75
  %add77 = add i32 %add73, %mul76
  %53 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx78 = getelementptr inbounds i8, i8* %53, i64 23
  %54 = load i8, i8* %arrayidx78, align 1, !tbaa !16
  %conv79 = zext i8 %54 to i32
  %add80 = add i32 %add77, %conv79
  %55 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_green_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %55, i32 0, i32 30
  store i32 %add80, i32* %chrm_green_y, align 4, !tbaa !129
  %56 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx81 = getelementptr inbounds i8, i8* %56, i64 24
  %57 = load i8, i8* %arrayidx81, align 1, !tbaa !16
  %conv82 = zext i8 %57 to i32
  %mul83 = mul i32 16777216, %conv82
  %58 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx84 = getelementptr inbounds i8, i8* %58, i64 25
  %59 = load i8, i8* %arrayidx84, align 1, !tbaa !16
  %conv85 = zext i8 %59 to i32
  %mul86 = mul i32 65536, %conv85
  %add87 = add i32 %mul83, %mul86
  %60 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx88 = getelementptr inbounds i8, i8* %60, i64 26
  %61 = load i8, i8* %arrayidx88, align 1, !tbaa !16
  %conv89 = zext i8 %61 to i32
  %mul90 = mul i32 256, %conv89
  %add91 = add i32 %add87, %mul90
  %62 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx92 = getelementptr inbounds i8, i8* %62, i64 27
  %63 = load i8, i8* %arrayidx92, align 1, !tbaa !16
  %conv93 = zext i8 %63 to i32
  %add94 = add i32 %add91, %conv93
  %64 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_blue_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %64, i32 0, i32 31
  store i32 %add94, i32* %chrm_blue_x, align 8, !tbaa !130
  %65 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx95 = getelementptr inbounds i8, i8* %65, i64 28
  %66 = load i8, i8* %arrayidx95, align 1, !tbaa !16
  %conv96 = zext i8 %66 to i32
  %mul97 = mul i32 16777216, %conv96
  %67 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx98 = getelementptr inbounds i8, i8* %67, i64 29
  %68 = load i8, i8* %arrayidx98, align 1, !tbaa !16
  %conv99 = zext i8 %68 to i32
  %mul100 = mul i32 65536, %conv99
  %add101 = add i32 %mul97, %mul100
  %69 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx102 = getelementptr inbounds i8, i8* %69, i64 30
  %70 = load i8, i8* %arrayidx102, align 1, !tbaa !16
  %conv103 = zext i8 %70 to i32
  %mul104 = mul i32 256, %conv103
  %add105 = add i32 %add101, %mul104
  %71 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx106 = getelementptr inbounds i8, i8* %71, i64 31
  %72 = load i8, i8* %arrayidx106, align 1, !tbaa !16
  %conv107 = zext i8 %72 to i32
  %add108 = add i32 %add105, %conv107
  %73 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_blue_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %73, i32 0, i32 32
  store i32 %add108, i32* %chrm_blue_y, align 4, !tbaa !131
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %74 = load i32, i32* %retval, align 4
  ret i32 %74
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14readChunk_sRGBP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info, i8* %data, i64 %chunkLength) #4 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %0, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 98, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %srgb_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 33
  store i32 1, i32* %srgb_defined, align 8, !tbaa !88
  %2 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %3 to i32
  %4 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %srgb_intent = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %4, i32 0, i32 34
  store i32 %conv, i32* %srgb_intent, align 4, !tbaa !132
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL14readChunk_iCCPP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info, %struct.LodePNGDecompressSettings* %zlibsettings, i8* %data, i64 %chunkLength) #0 {
entry:
  %retval = alloca i32, align 4
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %zlibsettings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %data.addr = alloca i8*, align 8
  %chunkLength.addr = alloca i64, align 8
  %error = alloca i32, align 4
  %i = alloca i32, align 4
  %size = alloca i64, align 8
  %length = alloca i32, align 4
  %string2_begin = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store %struct.LodePNGDecompressSettings* %zlibsettings, %struct.LodePNGDecompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %chunkLength, i64* %chunkLength.addr, align 8, !tbaa !6
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i64 0, i64* %size, align 8, !tbaa !6
  %3 = bitcast i32* %length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = bitcast i32* %string2_begin to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #16
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 35
  store i32 1, i32* %iccp_defined, align 8, !tbaa !74
  %6 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %6, i32 0, i32 36
  %7 = load i8*, i8** %iccp_name, align 8, !tbaa !73
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @_Z17lodepng_clear_iccP11LodePNGInfo(%struct.LodePNGInfo* %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %length, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %length, align 4, !tbaa !8
  %conv = zext i32 %9 to i64
  %10 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %conv, %10
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %12 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom = zext i32 %12 to i64
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv1 = zext i8 %13 to i32
  %cmp2 = icmp ne i32 %conv1, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %14 = phi i1 [ false, %for.cond ], [ %cmp2, %land.rhs ]
  br i1 %14, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %length, align 4, !tbaa !8
  %inc = add i32 %15, 1
  store i32 %inc, i32* %length, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %16 = load i32, i32* %length, align 4, !tbaa !8
  %add = add i32 %16, 2
  %conv3 = zext i32 %add to i64
  %17 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp4 = icmp uge i64 %conv3, %17
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.end
  store i32 75, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %for.end
  %18 = load i32, i32* %length, align 4, !tbaa !8
  %cmp7 = icmp ult i32 %18, 1
  br i1 %cmp7, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end6
  %19 = load i32, i32* %length, align 4, !tbaa !8
  %cmp8 = icmp ugt i32 %19, 79
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %lor.lhs.false, %if.end6
  store i32 89, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %lor.lhs.false
  %20 = load i32, i32* %length, align 4, !tbaa !8
  %add11 = add i32 %20, 1
  %conv12 = zext i32 %add11 to i64
  %call = call i8* @_ZL14lodepng_mallocm(i64 %conv12)
  %21 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name13 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %21, i32 0, i32 36
  store i8* %call, i8** %iccp_name13, align 8, !tbaa !73
  %22 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name14 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %22, i32 0, i32 36
  %23 = load i8*, i8** %iccp_name14, align 8, !tbaa !73
  %tobool15 = icmp ne i8* %23, null
  br i1 %tobool15, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.end10
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end17:                                         ; preds = %if.end10
  %24 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name18 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %24, i32 0, i32 36
  %25 = load i8*, i8** %iccp_name18, align 8, !tbaa !73
  %26 = load i32, i32* %length, align 4, !tbaa !8
  %idxprom19 = zext i32 %26 to i64
  %arrayidx20 = getelementptr inbounds i8, i8* %25, i64 %idxprom19
  store i8 0, i8* %arrayidx20, align 1, !tbaa !16
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc29, %if.end17
  %27 = load i32, i32* %i, align 4, !tbaa !8
  %28 = load i32, i32* %length, align 4, !tbaa !8
  %cmp22 = icmp ne i32 %27, %28
  br i1 %cmp22, label %for.body23, label %for.end31

for.body23:                                       ; preds = %for.cond21
  %29 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %30 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom24 = zext i32 %30 to i64
  %arrayidx25 = getelementptr inbounds i8, i8* %29, i64 %idxprom24
  %31 = load i8, i8* %arrayidx25, align 1, !tbaa !16
  %32 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name26 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %32, i32 0, i32 36
  %33 = load i8*, i8** %iccp_name26, align 8, !tbaa !73
  %34 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom27 = zext i32 %34 to i64
  %arrayidx28 = getelementptr inbounds i8, i8* %33, i64 %idxprom27
  store i8 %31, i8* %arrayidx28, align 1, !tbaa !16
  br label %for.inc29

for.inc29:                                        ; preds = %for.body23
  %35 = load i32, i32* %i, align 4, !tbaa !8
  %inc30 = add i32 %35, 1
  store i32 %inc30, i32* %i, align 4, !tbaa !8
  br label %for.cond21

for.end31:                                        ; preds = %for.cond21
  %36 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %37 = load i32, i32* %length, align 4, !tbaa !8
  %add32 = add i32 %37, 1
  %idxprom33 = zext i32 %add32 to i64
  %arrayidx34 = getelementptr inbounds i8, i8* %36, i64 %idxprom33
  %38 = load i8, i8* %arrayidx34, align 1, !tbaa !16
  %conv35 = zext i8 %38 to i32
  %cmp36 = icmp ne i32 %conv35, 0
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.end31
  store i32 72, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end38:                                         ; preds = %for.end31
  %39 = load i32, i32* %length, align 4, !tbaa !8
  %add39 = add i32 %39, 2
  store i32 %add39, i32* %string2_begin, align 4, !tbaa !8
  %40 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %conv40 = zext i32 %40 to i64
  %41 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %cmp41 = icmp ugt i64 %conv40, %41
  br i1 %cmp41, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.end38
  store i32 75, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end43:                                         ; preds = %if.end38
  %42 = load i64, i64* %chunkLength.addr, align 8, !tbaa !6
  %conv44 = trunc i64 %42 to i32
  %43 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %sub = sub i32 %conv44, %43
  store i32 %sub, i32* %length, align 4, !tbaa !8
  %44 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %44, i32 0, i32 37
  %45 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %46 = load i32, i32* %string2_begin, align 4, !tbaa !8
  %idxprom45 = zext i32 %46 to i64
  %arrayidx46 = getelementptr inbounds i8, i8* %45, i64 %idxprom45
  %47 = load i32, i32* %length, align 4, !tbaa !8
  %conv47 = zext i32 %47 to i64
  %48 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %call48 = call i32 @_ZL15zlib_decompressPPhPmmPKhmPK25LodePNGDecompressSettings(i8** %iccp_profile, i64* %size, i64 0, i8* %arrayidx46, i64 %conv47, %struct.LodePNGDecompressSettings* %48)
  store i32 %call48, i32* %error, align 4, !tbaa !8
  %49 = load i64, i64* %size, align 8, !tbaa !6
  %conv49 = trunc i64 %49 to i32
  %50 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %50, i32 0, i32 38
  store i32 %conv49, i32* %iccp_profile_size, align 8, !tbaa !76
  %51 = load i32, i32* %error, align 4, !tbaa !8
  %tobool50 = icmp ne i32 %51, 0
  br i1 %tobool50, label %if.end54, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end43
  %52 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile_size51 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %52, i32 0, i32 38
  %53 = load i32, i32* %iccp_profile_size51, align 8, !tbaa !76
  %tobool52 = icmp ne i32 %53, 0
  br i1 %tobool52, label %if.end54, label %if.then53

if.then53:                                        ; preds = %land.lhs.true
  store i32 100, i32* %error, align 4, !tbaa !8
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %land.lhs.true, %if.end43
  %54 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %54, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end54, %if.then42, %if.then37, %if.then16, %if.then9, %if.then5
  %55 = bitcast i32* %string2_begin to i8*
  call void @llvm.lifetime.end(i64 4, i8* %55) #16
  %56 = bitcast i32* %length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %56) #16
  %57 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %57) #16
  %58 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %58) #16
  %59 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #16
  %60 = load i32, i32* %retval, align 4
  ret i32 %60
}

; Function Attrs: ssp uwtable
define i32 @_Z14lodepng_decodePPhPjS1_P12LodePNGStatePKhm(i8** %out, i32* %w, i32* %h, %struct.LodePNGState* %state, i8* %in, i64 %insize) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8**, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %state.addr = alloca %struct.LodePNGState*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %data = alloca i8*, align 8
  %outsize = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store %struct.LodePNGState* %state, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  %0 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* null, i8** %0, align 8, !tbaa !2
  %1 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %2 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %3 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %4 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %5 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %6 = load i64, i64* %insize.addr, align 8, !tbaa !6
  call void @_ZL13decodeGenericPPhPjS1_P12LodePNGStatePKhm(i8** %1, i32* %2, i32* %3, %struct.LodePNGState* %4, i8* %5, i64 %6)
  %7 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %7, i32 0, i32 4
  %8 = load i32, i32* %error, align 8, !tbaa !105
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error1 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %9, i32 0, i32 4
  %10 = load i32, i32* %error1, align 8, !tbaa !105
  store i32 %10, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %11 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %11, i32 0, i32 0
  %color_convert = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder, i32 0, i32 4
  %12 = load i32, i32* %color_convert, align 4, !tbaa !133
  %tobool2 = icmp ne i32 %12, 0
  br i1 %tobool2, label %lor.lhs.false, label %if.then4

lor.lhs.false:                                    ; preds = %if.end
  %13 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %13, i32 0, i32 2
  %14 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %14, i32 0, i32 3
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png, i32 0, i32 3
  %call = call i32 @_ZL24lodepng_color_mode_equalPK16LodePNGColorModeS1_(%struct.LodePNGColorMode* %info_raw, %struct.LodePNGColorMode* %color)
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.then4, label %if.else

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  %15 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder5 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %15, i32 0, i32 0
  %color_convert6 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder5, i32 0, i32 4
  %16 = load i32, i32* %color_convert6, align 4, !tbaa !133
  %tobool7 = icmp ne i32 %16, 0
  br i1 %tobool7, label %if.end19, label %if.then8

if.then8:                                         ; preds = %if.then4
  %17 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw9 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %17, i32 0, i32 2
  %18 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png10 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %18, i32 0, i32 3
  %color11 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png10, i32 0, i32 3
  %call12 = call i32 @_Z23lodepng_color_mode_copyP16LodePNGColorModePKS_(%struct.LodePNGColorMode* %info_raw9, %struct.LodePNGColorMode* %color11)
  %19 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error13 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %19, i32 0, i32 4
  store i32 %call12, i32* %error13, align 8, !tbaa !105
  %20 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error14 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %20, i32 0, i32 4
  %21 = load i32, i32* %error14, align 8, !tbaa !105
  %tobool15 = icmp ne i32 %21, 0
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.then8
  %22 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error17 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %22, i32 0, i32 4
  %23 = load i32, i32* %error17, align 8, !tbaa !105
  store i32 %23, i32* %retval, align 4
  br label %return

if.end18:                                         ; preds = %if.then8
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then4
  br label %if.end43

if.else:                                          ; preds = %lor.lhs.false
  %24 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %24) #16
  %25 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %26 = load i8*, i8** %25, align 8, !tbaa !2
  store i8* %26, i8** %data, align 8, !tbaa !2
  %27 = bitcast i64* %outsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %27) #16
  %28 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw20 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %28, i32 0, i32 2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw20, i32 0, i32 0
  %29 = load i32, i32* %colortype, align 8, !tbaa !134
  %cmp = icmp eq i32 %29, 2
  br i1 %cmp, label %if.end28, label %lor.lhs.false21

lor.lhs.false21:                                  ; preds = %if.else
  %30 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw22 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %30, i32 0, i32 2
  %colortype23 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw22, i32 0, i32 0
  %31 = load i32, i32* %colortype23, align 8, !tbaa !134
  %cmp24 = icmp eq i32 %31, 6
  br i1 %cmp24, label %if.end28, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false21
  %32 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw25 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %32, i32 0, i32 2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw25, i32 0, i32 1
  %33 = load i32, i32* %bitdepth, align 4, !tbaa !135
  %cmp26 = icmp eq i32 %33, 8
  br i1 %cmp26, label %if.end28, label %if.then27

if.then27:                                        ; preds = %land.lhs.true
  store i32 56, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end28:                                         ; preds = %land.lhs.true, %lor.lhs.false21, %if.else
  %34 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %35 = load i32, i32* %34, align 4, !tbaa !8
  %36 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %37 = load i32, i32* %36, align 4, !tbaa !8
  %38 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw29 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %38, i32 0, i32 2
  %call30 = call i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 %35, i32 %37, %struct.LodePNGColorMode* %info_raw29)
  store i64 %call30, i64* %outsize, align 8, !tbaa !6
  %39 = load i64, i64* %outsize, align 8, !tbaa !6
  %call31 = call i8* @_ZL14lodepng_mallocm(i64 %39)
  %40 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %call31, i8** %40, align 8, !tbaa !2
  %41 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %42 = load i8*, i8** %41, align 8, !tbaa !2
  %tobool32 = icmp ne i8* %42, null
  br i1 %tobool32, label %if.else35, label %if.then33

if.then33:                                        ; preds = %if.end28
  %43 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error34 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %43, i32 0, i32 4
  store i32 83, i32* %error34, align 8, !tbaa !105
  br label %if.end41

if.else35:                                        ; preds = %if.end28
  %44 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %45 = load i8*, i8** %44, align 8, !tbaa !2
  %46 = load i8*, i8** %data, align 8, !tbaa !2
  %47 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw36 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %47, i32 0, i32 2
  %48 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png37 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %48, i32 0, i32 3
  %color38 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png37, i32 0, i32 3
  %49 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %50 = load i32, i32* %49, align 4, !tbaa !8
  %51 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %52 = load i32, i32* %51, align 4, !tbaa !8
  %call39 = call i32 @_Z15lodepng_convertPhPKhPK16LodePNGColorModeS4_jj(i8* %45, i8* %46, %struct.LodePNGColorMode* %info_raw36, %struct.LodePNGColorMode* %color38, i32 %50, i32 %52)
  %53 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error40 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %53, i32 0, i32 4
  store i32 %call39, i32* %error40, align 8, !tbaa !105
  br label %if.end41

if.end41:                                         ; preds = %if.else35, %if.then33
  %54 = load i8*, i8** %data, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %54)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end41, %if.then27
  %55 = bitcast i64* %outsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %55) #16
  %56 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %56) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end43

if.end43:                                         ; preds = %cleanup.cont, %if.end19
  %57 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error44 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %57, i32 0, i32 4
  %58 = load i32, i32* %error44, align 8, !tbaa !105
  store i32 %58, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end43, %cleanup, %if.then16, %if.then
  %59 = load i32, i32* %retval, align 4
  ret i32 %59

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: ssp uwtable
define internal void @_ZL13decodeGenericPPhPjS1_P12LodePNGStatePKhm(i8** %out, i32* %w, i32* %h, %struct.LodePNGState* %state, i8* %in, i64 %insize) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %state.addr = alloca %struct.LodePNGState*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %IEND = alloca i8, align 1
  %chunk = alloca i8*, align 8
  %idat = alloca i8*, align 8
  %idatsize = alloca i64, align 8
  %scanlines = alloca i8*, align 8
  %scanlines_size = alloca i64, align 8
  %expected_size = alloca i64, align 8
  %outsize = alloca i64, align 8
  %unknown = alloca i32, align 4
  %critical_pos = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %chunkLength = alloca i32, align 4
  %data = alloca i8*, align 8
  %newsize = alloca i64, align 8
  %bpp = alloca i64, align 8
  %bpp311 = alloca i64, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store %struct.LodePNGState* %state, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  call void @llvm.lifetime.start(i64 1, i8* %IEND) #16
  store i8 0, i8* %IEND, align 1, !tbaa !16
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i8** %idat to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i64* %idatsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i64 0, i64* %idatsize, align 8, !tbaa !6
  %3 = bitcast i8** %scanlines to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  store i8* null, i8** %scanlines, align 8, !tbaa !2
  %4 = bitcast i64* %scanlines_size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  store i64 0, i64* %scanlines_size, align 8, !tbaa !6
  %5 = bitcast i64* %expected_size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  store i64 0, i64* %expected_size, align 8, !tbaa !6
  %6 = bitcast i64* %outsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  store i64 0, i64* %outsize, align 8, !tbaa !6
  %7 = bitcast i32* %unknown to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #16
  store i32 0, i32* %unknown, align 4, !tbaa !8
  %8 = bitcast i32* %critical_pos to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #16
  store i32 1, i32* %critical_pos, align 4, !tbaa !8
  %9 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* null, i8** %9, align 8, !tbaa !2
  %10 = load i32*, i32** %h.addr, align 8, !tbaa !2
  store i32 0, i32* %10, align 4, !tbaa !8
  %11 = load i32*, i32** %w.addr, align 8, !tbaa !2
  store i32 0, i32* %11, align 4, !tbaa !8
  %12 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %13 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %14 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %15 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %16 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %call = call i32 @_Z15lodepng_inspectPjS_P12LodePNGStatePKhm(i32* %12, i32* %13, %struct.LodePNGState* %14, i8* %15, i64 %16)
  %17 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %17, i32 0, i32 4
  store i32 %call, i32* %error, align 8, !tbaa !105
  %18 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error1 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %18, i32 0, i32 4
  %19 = load i32, i32* %error1, align 8, !tbaa !105
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup404

if.end:                                           ; preds = %entry
  %20 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %21 = load i32, i32* %20, align 4, !tbaa !8
  %22 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %23 = load i32, i32* %22, align 4, !tbaa !8
  %24 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %24, i32 0, i32 3
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png, i32 0, i32 3
  %25 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %25, i32 0, i32 2
  %call2 = call i32 @_ZL22lodepng_pixel_overflowjjPK16LodePNGColorModeS1_(i32 %21, i32 %23, %struct.LodePNGColorMode* %color, %struct.LodePNGColorMode* %info_raw)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then4, label %if.end6

if.then4:                                         ; preds = %if.end
  %26 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error5 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %26, i32 0, i32 4
  store i32 92, i32* %error5, align 8, !tbaa !105
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup404

if.end6:                                          ; preds = %if.end
  %27 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %call7 = call i8* @_ZL14lodepng_mallocm(i64 %27)
  store i8* %call7, i8** %idat, align 8, !tbaa !2
  %28 = load i8*, i8** %idat, align 8, !tbaa !2
  %tobool8 = icmp ne i8* %28, null
  br i1 %tobool8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end6
  %29 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error10 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %29, i32 0, i32 4
  store i32 83, i32* %error10, align 8, !tbaa !105
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup404

if.end11:                                         ; preds = %if.end6
  %30 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %30, i64 33
  store i8* %arrayidx, i8** %chunk, align 8, !tbaa !2
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont287, %if.end11
  %31 = load i8, i8* %IEND, align 1, !tbaa !16
  %tobool12 = icmp ne i8 %31, 0
  br i1 %tobool12, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %32 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error13 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %32, i32 0, i32 4
  %33 = load i32, i32* %error13, align 8, !tbaa !105
  %tobool14 = icmp ne i32 %33, 0
  %lnot = xor i1 %tobool14, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %34 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ]
  br i1 %34, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %35 = bitcast i32* %chunkLength to i8*
  call void @llvm.lifetime.start(i64 4, i8* %35) #16
  %36 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %36) #16
  %37 = load i8*, i8** %chunk, align 8, !tbaa !2
  %38 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %37 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %38 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add = add nsw i64 %sub.ptr.sub, 12
  %39 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp = icmp ugt i64 %add, %39
  br i1 %cmp, label %if.then16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %40 = load i8*, i8** %chunk, align 8, !tbaa !2
  %41 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %cmp15 = icmp ult i8* %40, %41
  br i1 %cmp15, label %if.then16, label %if.end21

if.then16:                                        ; preds = %lor.lhs.false, %while.body
  %42 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %42, i32 0, i32 0
  %ignore_end = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder, i32 0, i32 3
  %43 = load i32, i32* %ignore_end, align 8, !tbaa !136
  %tobool17 = icmp ne i32 %43, 0
  br i1 %tobool17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.then16
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end19:                                         ; preds = %if.then16
  %44 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error20 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %44, i32 0, i32 4
  store i32 30, i32* %error20, align 8, !tbaa !105
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end21:                                         ; preds = %lor.lhs.false
  %45 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call22 = call i32 @_Z20lodepng_chunk_lengthPKh(i8* %45)
  store i32 %call22, i32* %chunkLength, align 4, !tbaa !8
  %46 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %cmp23 = icmp ugt i32 %46, 2147483647
  br i1 %cmp23, label %if.then24, label %if.end31

if.then24:                                        ; preds = %if.end21
  %47 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder25 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %47, i32 0, i32 0
  %ignore_end26 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder25, i32 0, i32 3
  %48 = load i32, i32* %ignore_end26, align 8, !tbaa !136
  %tobool27 = icmp ne i32 %48, 0
  br i1 %tobool27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.then24
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end29:                                         ; preds = %if.then24
  %49 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error30 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %49, i32 0, i32 4
  store i32 63, i32* %error30, align 8, !tbaa !105
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end31:                                         ; preds = %if.end21
  %50 = load i8*, i8** %chunk, align 8, !tbaa !2
  %51 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast32 = ptrtoint i8* %50 to i64
  %sub.ptr.rhs.cast33 = ptrtoint i8* %51 to i64
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33
  %52 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv = zext i32 %52 to i64
  %add35 = add nsw i64 %sub.ptr.sub34, %conv
  %add36 = add nsw i64 %add35, 12
  %53 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp37 = icmp ugt i64 %add36, %53
  br i1 %cmp37, label %if.then41, label %lor.lhs.false38

lor.lhs.false38:                                  ; preds = %if.end31
  %54 = load i8*, i8** %chunk, align 8, !tbaa !2
  %55 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %idx.ext = zext i32 %55 to i64
  %add.ptr = getelementptr inbounds i8, i8* %54, i64 %idx.ext
  %add.ptr39 = getelementptr inbounds i8, i8* %add.ptr, i64 12
  %56 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %cmp40 = icmp ult i8* %add.ptr39, %56
  br i1 %cmp40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %lor.lhs.false38, %if.end31
  %57 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error42 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %57, i32 0, i32 4
  store i32 64, i32* %error42, align 8, !tbaa !105
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end43:                                         ; preds = %lor.lhs.false38
  %58 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call44 = call i8* @_Z24lodepng_chunk_data_constPKh(i8* %58)
  store i8* %call44, i8** %data, align 8, !tbaa !2
  store i32 0, i32* %unknown, align 4, !tbaa !8
  %59 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call45 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %59, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0))
  %tobool46 = icmp ne i8 %call45, 0
  br i1 %tobool46, label %if.then47, label %if.else

if.then47:                                        ; preds = %if.end43
  %60 = bitcast i64* %newsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %60) #16
  %61 = load i64, i64* %idatsize, align 8, !tbaa !6
  %62 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv48 = zext i32 %62 to i64
  %call49 = call i32 @_ZL14lodepng_addoflmmPm(i64 %61, i64 %conv48, i64* %newsize)
  %tobool50 = icmp ne i32 %call49, 0
  br i1 %tobool50, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then47
  %63 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error52 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %63, i32 0, i32 4
  store i32 95, i32* %error52, align 8, !tbaa !105
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end53:                                         ; preds = %if.then47
  %64 = load i64, i64* %newsize, align 8, !tbaa !6
  %65 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp54 = icmp ugt i64 %64, %65
  br i1 %cmp54, label %if.then55, label %if.end57

if.then55:                                        ; preds = %if.end53
  %66 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error56 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %66, i32 0, i32 4
  store i32 95, i32* %error56, align 8, !tbaa !105
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end57:                                         ; preds = %if.end53
  %67 = load i8*, i8** %idat, align 8, !tbaa !2
  %68 = load i64, i64* %idatsize, align 8, !tbaa !6
  %add.ptr58 = getelementptr inbounds i8, i8* %67, i64 %68
  %69 = load i8*, i8** %data, align 8, !tbaa !2
  %70 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv59 = zext i32 %70 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr58, i8* %69, i64 %conv59)
  %71 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv60 = zext i32 %71 to i64
  %72 = load i64, i64* %idatsize, align 8, !tbaa !6
  %add61 = add i64 %72, %conv60
  store i64 %add61, i64* %idatsize, align 8, !tbaa !6
  store i32 3, i32* %critical_pos, align 4, !tbaa !8
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end57, %if.then55, %if.then51
  %73 = bitcast i64* %newsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %73) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup284 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end267

if.else:                                          ; preds = %if.end43
  %74 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call62 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %74, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0))
  %tobool63 = icmp ne i8 %call62, 0
  br i1 %tobool63, label %if.then64, label %if.else65

if.then64:                                        ; preds = %if.else
  store i8 1, i8* %IEND, align 1, !tbaa !16
  br label %if.end266

if.else65:                                        ; preds = %if.else
  %75 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call66 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %75, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  %tobool67 = icmp ne i8 %call66, 0
  br i1 %tobool67, label %if.then68, label %if.else78

if.then68:                                        ; preds = %if.else65
  %76 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png69 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %76, i32 0, i32 3
  %color70 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png69, i32 0, i32 3
  %77 = load i8*, i8** %data, align 8, !tbaa !2
  %78 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv71 = zext i32 %78 to i64
  %call72 = call i32 @_ZL14readChunk_PLTEP16LodePNGColorModePKhm(%struct.LodePNGColorMode* %color70, i8* %77, i64 %conv71)
  %79 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error73 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %79, i32 0, i32 4
  store i32 %call72, i32* %error73, align 8, !tbaa !105
  %80 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error74 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %80, i32 0, i32 4
  %81 = load i32, i32* %error74, align 8, !tbaa !105
  %tobool75 = icmp ne i32 %81, 0
  br i1 %tobool75, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.then68
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end77:                                         ; preds = %if.then68
  store i32 2, i32* %critical_pos, align 4, !tbaa !8
  br label %if.end265

if.else78:                                        ; preds = %if.else65
  %82 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call79 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %82, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0))
  %tobool80 = icmp ne i8 %call79, 0
  br i1 %tobool80, label %if.then81, label %if.else91

if.then81:                                        ; preds = %if.else78
  %83 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png82 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %83, i32 0, i32 3
  %color83 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png82, i32 0, i32 3
  %84 = load i8*, i8** %data, align 8, !tbaa !2
  %85 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv84 = zext i32 %85 to i64
  %call85 = call i32 @_ZL14readChunk_tRNSP16LodePNGColorModePKhm(%struct.LodePNGColorMode* %color83, i8* %84, i64 %conv84)
  %86 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error86 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %86, i32 0, i32 4
  store i32 %call85, i32* %error86, align 8, !tbaa !105
  %87 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error87 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %87, i32 0, i32 4
  %88 = load i32, i32* %error87, align 8, !tbaa !105
  %tobool88 = icmp ne i32 %88, 0
  br i1 %tobool88, label %if.then89, label %if.end90

if.then89:                                        ; preds = %if.then81
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end90:                                         ; preds = %if.then81
  br label %if.end264

if.else91:                                        ; preds = %if.else78
  %89 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call92 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %89, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0))
  %tobool93 = icmp ne i8 %call92, 0
  br i1 %tobool93, label %if.then94, label %if.else103

if.then94:                                        ; preds = %if.else91
  %90 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png95 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %90, i32 0, i32 3
  %91 = load i8*, i8** %data, align 8, !tbaa !2
  %92 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv96 = zext i32 %92 to i64
  %call97 = call i32 @_ZL14readChunk_bKGDP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png95, i8* %91, i64 %conv96)
  %93 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error98 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %93, i32 0, i32 4
  store i32 %call97, i32* %error98, align 8, !tbaa !105
  %94 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error99 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %94, i32 0, i32 4
  %95 = load i32, i32* %error99, align 8, !tbaa !105
  %tobool100 = icmp ne i32 %95, 0
  br i1 %tobool100, label %if.then101, label %if.end102

if.then101:                                       ; preds = %if.then94
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end102:                                        ; preds = %if.then94
  br label %if.end263

if.else103:                                       ; preds = %if.else91
  %96 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call104 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %96, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  %tobool105 = icmp ne i8 %call104, 0
  br i1 %tobool105, label %if.then106, label %if.else119

if.then106:                                       ; preds = %if.else103
  %97 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder107 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %97, i32 0, i32 0
  %read_text_chunks = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder107, i32 0, i32 5
  %98 = load i32, i32* %read_text_chunks, align 8, !tbaa !137
  %tobool108 = icmp ne i32 %98, 0
  br i1 %tobool108, label %if.then109, label %if.end118

if.then109:                                       ; preds = %if.then106
  %99 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png110 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %99, i32 0, i32 3
  %100 = load i8*, i8** %data, align 8, !tbaa !2
  %101 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv111 = zext i32 %101 to i64
  %call112 = call i32 @_ZL14readChunk_tEXtP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png110, i8* %100, i64 %conv111)
  %102 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error113 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %102, i32 0, i32 4
  store i32 %call112, i32* %error113, align 8, !tbaa !105
  %103 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error114 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %103, i32 0, i32 4
  %104 = load i32, i32* %error114, align 8, !tbaa !105
  %tobool115 = icmp ne i32 %104, 0
  br i1 %tobool115, label %if.then116, label %if.end117

if.then116:                                       ; preds = %if.then109
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end117:                                        ; preds = %if.then109
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then106
  br label %if.end262

if.else119:                                       ; preds = %if.else103
  %105 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call120 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %105, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0))
  %tobool121 = icmp ne i8 %call120, 0
  br i1 %tobool121, label %if.then122, label %if.else137

if.then122:                                       ; preds = %if.else119
  %106 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder123 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %106, i32 0, i32 0
  %read_text_chunks124 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder123, i32 0, i32 5
  %107 = load i32, i32* %read_text_chunks124, align 8, !tbaa !137
  %tobool125 = icmp ne i32 %107, 0
  br i1 %tobool125, label %if.then126, label %if.end136

if.then126:                                       ; preds = %if.then122
  %108 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png127 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %108, i32 0, i32 3
  %109 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder128 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %109, i32 0, i32 0
  %zlibsettings = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder128, i32 0, i32 0
  %110 = load i8*, i8** %data, align 8, !tbaa !2
  %111 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv129 = zext i32 %111 to i64
  %call130 = call i32 @_ZL14readChunk_zTXtP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info_png127, %struct.LodePNGDecompressSettings* %zlibsettings, i8* %110, i64 %conv129)
  %112 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error131 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %112, i32 0, i32 4
  store i32 %call130, i32* %error131, align 8, !tbaa !105
  %113 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error132 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %113, i32 0, i32 4
  %114 = load i32, i32* %error132, align 8, !tbaa !105
  %tobool133 = icmp ne i32 %114, 0
  br i1 %tobool133, label %if.then134, label %if.end135

if.then134:                                       ; preds = %if.then126
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end135:                                        ; preds = %if.then126
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.then122
  br label %if.end261

if.else137:                                       ; preds = %if.else119
  %115 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call138 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %115, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  %tobool139 = icmp ne i8 %call138, 0
  br i1 %tobool139, label %if.then140, label %if.else156

if.then140:                                       ; preds = %if.else137
  %116 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder141 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %116, i32 0, i32 0
  %read_text_chunks142 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder141, i32 0, i32 5
  %117 = load i32, i32* %read_text_chunks142, align 8, !tbaa !137
  %tobool143 = icmp ne i32 %117, 0
  br i1 %tobool143, label %if.then144, label %if.end155

if.then144:                                       ; preds = %if.then140
  %118 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png145 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %118, i32 0, i32 3
  %119 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder146 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %119, i32 0, i32 0
  %zlibsettings147 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder146, i32 0, i32 0
  %120 = load i8*, i8** %data, align 8, !tbaa !2
  %121 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv148 = zext i32 %121 to i64
  %call149 = call i32 @_ZL14readChunk_iTXtP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info_png145, %struct.LodePNGDecompressSettings* %zlibsettings147, i8* %120, i64 %conv148)
  %122 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error150 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %122, i32 0, i32 4
  store i32 %call149, i32* %error150, align 8, !tbaa !105
  %123 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error151 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %123, i32 0, i32 4
  %124 = load i32, i32* %error151, align 8, !tbaa !105
  %tobool152 = icmp ne i32 %124, 0
  br i1 %tobool152, label %if.then153, label %if.end154

if.then153:                                       ; preds = %if.then144
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end154:                                        ; preds = %if.then144
  br label %if.end155

if.end155:                                        ; preds = %if.end154, %if.then140
  br label %if.end260

if.else156:                                       ; preds = %if.else137
  %125 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call157 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %125, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  %tobool158 = icmp ne i8 %call157, 0
  br i1 %tobool158, label %if.then159, label %if.else168

if.then159:                                       ; preds = %if.else156
  %126 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png160 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %126, i32 0, i32 3
  %127 = load i8*, i8** %data, align 8, !tbaa !2
  %128 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv161 = zext i32 %128 to i64
  %call162 = call i32 @_ZL14readChunk_tIMEP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png160, i8* %127, i64 %conv161)
  %129 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error163 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %129, i32 0, i32 4
  store i32 %call162, i32* %error163, align 8, !tbaa !105
  %130 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error164 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %130, i32 0, i32 4
  %131 = load i32, i32* %error164, align 8, !tbaa !105
  %tobool165 = icmp ne i32 %131, 0
  br i1 %tobool165, label %if.then166, label %if.end167

if.then166:                                       ; preds = %if.then159
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end167:                                        ; preds = %if.then159
  br label %if.end259

if.else168:                                       ; preds = %if.else156
  %132 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call169 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %132, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0))
  %tobool170 = icmp ne i8 %call169, 0
  br i1 %tobool170, label %if.then171, label %if.else180

if.then171:                                       ; preds = %if.else168
  %133 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png172 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %133, i32 0, i32 3
  %134 = load i8*, i8** %data, align 8, !tbaa !2
  %135 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv173 = zext i32 %135 to i64
  %call174 = call i32 @_ZL14readChunk_pHYsP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png172, i8* %134, i64 %conv173)
  %136 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error175 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %136, i32 0, i32 4
  store i32 %call174, i32* %error175, align 8, !tbaa !105
  %137 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error176 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %137, i32 0, i32 4
  %138 = load i32, i32* %error176, align 8, !tbaa !105
  %tobool177 = icmp ne i32 %138, 0
  br i1 %tobool177, label %if.then178, label %if.end179

if.then178:                                       ; preds = %if.then171
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end179:                                        ; preds = %if.then171
  br label %if.end258

if.else180:                                       ; preds = %if.else168
  %139 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call181 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %139, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0))
  %tobool182 = icmp ne i8 %call181, 0
  br i1 %tobool182, label %if.then183, label %if.else192

if.then183:                                       ; preds = %if.else180
  %140 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png184 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %140, i32 0, i32 3
  %141 = load i8*, i8** %data, align 8, !tbaa !2
  %142 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv185 = zext i32 %142 to i64
  %call186 = call i32 @_ZL14readChunk_gAMAP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png184, i8* %141, i64 %conv185)
  %143 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error187 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %143, i32 0, i32 4
  store i32 %call186, i32* %error187, align 8, !tbaa !105
  %144 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error188 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %144, i32 0, i32 4
  %145 = load i32, i32* %error188, align 8, !tbaa !105
  %tobool189 = icmp ne i32 %145, 0
  br i1 %tobool189, label %if.then190, label %if.end191

if.then190:                                       ; preds = %if.then183
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end191:                                        ; preds = %if.then183
  br label %if.end257

if.else192:                                       ; preds = %if.else180
  %146 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call193 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %146, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0))
  %tobool194 = icmp ne i8 %call193, 0
  br i1 %tobool194, label %if.then195, label %if.else204

if.then195:                                       ; preds = %if.else192
  %147 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png196 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %147, i32 0, i32 3
  %148 = load i8*, i8** %data, align 8, !tbaa !2
  %149 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv197 = zext i32 %149 to i64
  %call198 = call i32 @_ZL14readChunk_cHRMP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png196, i8* %148, i64 %conv197)
  %150 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error199 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %150, i32 0, i32 4
  store i32 %call198, i32* %error199, align 8, !tbaa !105
  %151 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error200 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %151, i32 0, i32 4
  %152 = load i32, i32* %error200, align 8, !tbaa !105
  %tobool201 = icmp ne i32 %152, 0
  br i1 %tobool201, label %if.then202, label %if.end203

if.then202:                                       ; preds = %if.then195
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end203:                                        ; preds = %if.then195
  br label %if.end256

if.else204:                                       ; preds = %if.else192
  %153 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call205 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %153, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0))
  %tobool206 = icmp ne i8 %call205, 0
  br i1 %tobool206, label %if.then207, label %if.else216

if.then207:                                       ; preds = %if.else204
  %154 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png208 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %154, i32 0, i32 3
  %155 = load i8*, i8** %data, align 8, !tbaa !2
  %156 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv209 = zext i32 %156 to i64
  %call210 = call i32 @_ZL14readChunk_sRGBP11LodePNGInfoPKhm(%struct.LodePNGInfo* %info_png208, i8* %155, i64 %conv209)
  %157 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error211 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %157, i32 0, i32 4
  store i32 %call210, i32* %error211, align 8, !tbaa !105
  %158 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error212 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %158, i32 0, i32 4
  %159 = load i32, i32* %error212, align 8, !tbaa !105
  %tobool213 = icmp ne i32 %159, 0
  br i1 %tobool213, label %if.then214, label %if.end215

if.then214:                                       ; preds = %if.then207
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end215:                                        ; preds = %if.then207
  br label %if.end255

if.else216:                                       ; preds = %if.else204
  %160 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call217 = call zeroext i8 @_Z25lodepng_chunk_type_equalsPKhPKc(i8* %160, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0))
  %tobool218 = icmp ne i8 %call217, 0
  br i1 %tobool218, label %if.then219, label %if.else230

if.then219:                                       ; preds = %if.else216
  %161 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png220 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %161, i32 0, i32 3
  %162 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder221 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %162, i32 0, i32 0
  %zlibsettings222 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder221, i32 0, i32 0
  %163 = load i8*, i8** %data, align 8, !tbaa !2
  %164 = load i32, i32* %chunkLength, align 4, !tbaa !8
  %conv223 = zext i32 %164 to i64
  %call224 = call i32 @_ZL14readChunk_iCCPP11LodePNGInfoPK25LodePNGDecompressSettingsPKhm(%struct.LodePNGInfo* %info_png220, %struct.LodePNGDecompressSettings* %zlibsettings222, i8* %163, i64 %conv223)
  %165 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error225 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %165, i32 0, i32 4
  store i32 %call224, i32* %error225, align 8, !tbaa !105
  %166 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error226 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %166, i32 0, i32 4
  %167 = load i32, i32* %error226, align 8, !tbaa !105
  %tobool227 = icmp ne i32 %167, 0
  br i1 %tobool227, label %if.then228, label %if.end229

if.then228:                                       ; preds = %if.then219
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end229:                                        ; preds = %if.then219
  br label %if.end254

if.else230:                                       ; preds = %if.else216
  %168 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder231 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %168, i32 0, i32 0
  %ignore_critical = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder231, i32 0, i32 2
  %169 = load i32, i32* %ignore_critical, align 4, !tbaa !138
  %tobool232 = icmp ne i32 %169, 0
  br i1 %tobool232, label %if.end237, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else230
  %170 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call233 = call zeroext i8 @_Z23lodepng_chunk_ancillaryPKh(i8* %170)
  %tobool234 = icmp ne i8 %call233, 0
  br i1 %tobool234, label %if.end237, label %if.then235

if.then235:                                       ; preds = %land.lhs.true
  %171 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error236 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %171, i32 0, i32 4
  store i32 69, i32* %error236, align 8, !tbaa !105
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end237:                                        ; preds = %land.lhs.true, %if.else230
  store i32 1, i32* %unknown, align 4, !tbaa !8
  %172 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder238 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %172, i32 0, i32 0
  %remember_unknown_chunks = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder238, i32 0, i32 6
  %173 = load i32, i32* %remember_unknown_chunks, align 4, !tbaa !139
  %tobool239 = icmp ne i32 %173, 0
  br i1 %tobool239, label %if.then240, label %if.end253

if.then240:                                       ; preds = %if.end237
  %174 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png241 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %174, i32 0, i32 3
  %unknown_chunks_data = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png241, i32 0, i32 39
  %175 = load i32, i32* %critical_pos, align 4, !tbaa !8
  %sub = sub i32 %175, 1
  %idxprom = zext i32 %sub to i64
  %arrayidx242 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data, i64 0, i64 %idxprom
  %176 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png243 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %176, i32 0, i32 3
  %unknown_chunks_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png243, i32 0, i32 40
  %177 = load i32, i32* %critical_pos, align 4, !tbaa !8
  %sub244 = sub i32 %177, 1
  %idxprom245 = zext i32 %sub244 to i64
  %arrayidx246 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size, i64 0, i64 %idxprom245
  %178 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call247 = call i32 @_Z20lodepng_chunk_appendPPhPmPKh(i8** %arrayidx242, i64* %arrayidx246, i8* %178)
  %179 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error248 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %179, i32 0, i32 4
  store i32 %call247, i32* %error248, align 8, !tbaa !105
  %180 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error249 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %180, i32 0, i32 4
  %181 = load i32, i32* %error249, align 8, !tbaa !105
  %tobool250 = icmp ne i32 %181, 0
  br i1 %tobool250, label %if.then251, label %if.end252

if.then251:                                       ; preds = %if.then240
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end252:                                        ; preds = %if.then240
  br label %if.end253

if.end253:                                        ; preds = %if.end252, %if.end237
  br label %if.end254

if.end254:                                        ; preds = %if.end253, %if.end229
  br label %if.end255

if.end255:                                        ; preds = %if.end254, %if.end215
  br label %if.end256

if.end256:                                        ; preds = %if.end255, %if.end203
  br label %if.end257

if.end257:                                        ; preds = %if.end256, %if.end191
  br label %if.end258

if.end258:                                        ; preds = %if.end257, %if.end179
  br label %if.end259

if.end259:                                        ; preds = %if.end258, %if.end167
  br label %if.end260

if.end260:                                        ; preds = %if.end259, %if.end155
  br label %if.end261

if.end261:                                        ; preds = %if.end260, %if.end136
  br label %if.end262

if.end262:                                        ; preds = %if.end261, %if.end118
  br label %if.end263

if.end263:                                        ; preds = %if.end262, %if.end102
  br label %if.end264

if.end264:                                        ; preds = %if.end263, %if.end90
  br label %if.end265

if.end265:                                        ; preds = %if.end264, %if.end77
  br label %if.end266

if.end266:                                        ; preds = %if.end265, %if.then64
  br label %if.end267

if.end267:                                        ; preds = %if.end266, %cleanup.cont
  %182 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder268 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %182, i32 0, i32 0
  %ignore_crc = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder268, i32 0, i32 1
  %183 = load i32, i32* %ignore_crc, align 8, !tbaa !112
  %tobool269 = icmp ne i32 %183, 0
  br i1 %tobool269, label %if.end278, label %land.lhs.true270

land.lhs.true270:                                 ; preds = %if.end267
  %184 = load i32, i32* %unknown, align 4, !tbaa !8
  %tobool271 = icmp ne i32 %184, 0
  br i1 %tobool271, label %if.end278, label %if.then272

if.then272:                                       ; preds = %land.lhs.true270
  %185 = load i8*, i8** %chunk, align 8, !tbaa !2
  %call273 = call i32 @_Z23lodepng_chunk_check_crcPKh(i8* %185)
  %tobool274 = icmp ne i32 %call273, 0
  br i1 %tobool274, label %if.then275, label %if.end277

if.then275:                                       ; preds = %if.then272
  %186 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error276 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %186, i32 0, i32 4
  store i32 57, i32* %error276, align 8, !tbaa !105
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

if.end277:                                        ; preds = %if.then272
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %land.lhs.true270, %if.end267
  %187 = load i8, i8* %IEND, align 1, !tbaa !16
  %tobool279 = icmp ne i8 %187, 0
  br i1 %tobool279, label %if.end283, label %if.then280

if.then280:                                       ; preds = %if.end278
  %188 = load i8*, i8** %chunk, align 8, !tbaa !2
  %189 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %190 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %add.ptr281 = getelementptr inbounds i8, i8* %189, i64 %190
  %call282 = call i8* @_Z24lodepng_chunk_next_constPKhS0_(i8* %188, i8* %add.ptr281)
  store i8* %call282, i8** %chunk, align 8, !tbaa !2
  br label %if.end283

if.end283:                                        ; preds = %if.then280, %if.end278
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup284

cleanup284:                                       ; preds = %if.end283, %if.then275, %if.then251, %if.then235, %if.then228, %if.then214, %if.then202, %if.then190, %if.then178, %if.then166, %if.then153, %if.then134, %if.then116, %if.then101, %if.then89, %if.then76, %cleanup, %if.then41, %if.end29, %if.then28, %if.end19, %if.then18
  %191 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %191) #16
  %192 = bitcast i32* %chunkLength to i8*
  call void @llvm.lifetime.end(i64 4, i8* %192) #16
  %cleanup.dest286 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest286, label %unreachable [
    i32 0, label %cleanup.cont287
    i32 3, label %while.end
  ]

cleanup.cont287:                                  ; preds = %cleanup284
  br label %while.cond

while.end:                                        ; preds = %cleanup284, %land.end
  %193 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png288 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %193, i32 0, i32 3
  %color289 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png288, i32 0, i32 3
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color289, i32 0, i32 0
  %194 = load i32, i32* %colortype, align 8, !tbaa !140
  %cmp290 = icmp eq i32 %194, 3
  br i1 %cmp290, label %land.lhs.true291, label %if.end297

land.lhs.true291:                                 ; preds = %while.end
  %195 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png292 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %195, i32 0, i32 3
  %color293 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png292, i32 0, i32 3
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color293, i32 0, i32 2
  %196 = load i8*, i8** %palette, align 8, !tbaa !141
  %tobool294 = icmp ne i8* %196, null
  br i1 %tobool294, label %if.end297, label %if.then295

if.then295:                                       ; preds = %land.lhs.true291
  %197 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error296 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %197, i32 0, i32 4
  store i32 106, i32* %error296, align 8, !tbaa !105
  br label %if.end297

if.end297:                                        ; preds = %if.then295, %land.lhs.true291, %while.end
  %198 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error298 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %198, i32 0, i32 4
  %199 = load i32, i32* %error298, align 8, !tbaa !105
  %tobool299 = icmp ne i32 %199, 0
  br i1 %tobool299, label %if.end377, label %if.then300

if.then300:                                       ; preds = %if.end297
  %200 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png301 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %200, i32 0, i32 3
  %interlace_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png301, i32 0, i32 2
  %201 = load i32, i32* %interlace_method, align 8, !tbaa !142
  %cmp302 = icmp eq i32 %201, 0
  br i1 %cmp302, label %if.then303, label %if.else310

if.then303:                                       ; preds = %if.then300
  %202 = bitcast i64* %bpp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %202) #16
  %203 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png304 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %203, i32 0, i32 3
  %color305 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png304, i32 0, i32 3
  %call306 = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %color305)
  %conv307 = zext i32 %call306 to i64
  store i64 %conv307, i64* %bpp, align 8, !tbaa !6
  %204 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %205 = load i32, i32* %204, align 4, !tbaa !8
  %206 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %207 = load i32, i32* %206, align 4, !tbaa !8
  %208 = load i64, i64* %bpp, align 8, !tbaa !6
  %conv308 = trunc i64 %208 to i32
  %call309 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %205, i32 %207, i32 %conv308)
  store i64 %call309, i64* %expected_size, align 8, !tbaa !6
  %209 = bitcast i64* %bpp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %209) #16
  br label %if.end372

if.else310:                                       ; preds = %if.then300
  %210 = bitcast i64* %bpp311 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %210) #16
  %211 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png312 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %211, i32 0, i32 3
  %color313 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png312, i32 0, i32 3
  %call314 = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %color313)
  %conv315 = zext i32 %call314 to i64
  store i64 %conv315, i64* %bpp311, align 8, !tbaa !6
  store i64 0, i64* %expected_size, align 8, !tbaa !6
  %212 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %213 = load i32, i32* %212, align 4, !tbaa !8
  %add316 = add i32 %213, 7
  %shr = lshr i32 %add316, 3
  %214 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %215 = load i32, i32* %214, align 4, !tbaa !8
  %add317 = add i32 %215, 7
  %shr318 = lshr i32 %add317, 3
  %216 = load i64, i64* %bpp311, align 8, !tbaa !6
  %conv319 = trunc i64 %216 to i32
  %call320 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %shr, i32 %shr318, i32 %conv319)
  %217 = load i64, i64* %expected_size, align 8, !tbaa !6
  %add321 = add i64 %217, %call320
  store i64 %add321, i64* %expected_size, align 8, !tbaa !6
  %218 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %219 = load i32, i32* %218, align 4, !tbaa !8
  %cmp322 = icmp ugt i32 %219, 4
  br i1 %cmp322, label %if.then323, label %if.end331

if.then323:                                       ; preds = %if.else310
  %220 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %221 = load i32, i32* %220, align 4, !tbaa !8
  %add324 = add i32 %221, 3
  %shr325 = lshr i32 %add324, 3
  %222 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %223 = load i32, i32* %222, align 4, !tbaa !8
  %add326 = add i32 %223, 7
  %shr327 = lshr i32 %add326, 3
  %224 = load i64, i64* %bpp311, align 8, !tbaa !6
  %conv328 = trunc i64 %224 to i32
  %call329 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %shr325, i32 %shr327, i32 %conv328)
  %225 = load i64, i64* %expected_size, align 8, !tbaa !6
  %add330 = add i64 %225, %call329
  store i64 %add330, i64* %expected_size, align 8, !tbaa !6
  br label %if.end331

if.end331:                                        ; preds = %if.then323, %if.else310
  %226 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %227 = load i32, i32* %226, align 4, !tbaa !8
  %add332 = add i32 %227, 3
  %shr333 = lshr i32 %add332, 2
  %228 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %229 = load i32, i32* %228, align 4, !tbaa !8
  %add334 = add i32 %229, 3
  %shr335 = lshr i32 %add334, 3
  %230 = load i64, i64* %bpp311, align 8, !tbaa !6
  %conv336 = trunc i64 %230 to i32
  %call337 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %shr333, i32 %shr335, i32 %conv336)
  %231 = load i64, i64* %expected_size, align 8, !tbaa !6
  %add338 = add i64 %231, %call337
  store i64 %add338, i64* %expected_size, align 8, !tbaa !6
  %232 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %233 = load i32, i32* %232, align 4, !tbaa !8
  %cmp339 = icmp ugt i32 %233, 2
  br i1 %cmp339, label %if.then340, label %if.end348

if.then340:                                       ; preds = %if.end331
  %234 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %235 = load i32, i32* %234, align 4, !tbaa !8
  %add341 = add i32 %235, 1
  %shr342 = lshr i32 %add341, 2
  %236 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %237 = load i32, i32* %236, align 4, !tbaa !8
  %add343 = add i32 %237, 3
  %shr344 = lshr i32 %add343, 2
  %238 = load i64, i64* %bpp311, align 8, !tbaa !6
  %conv345 = trunc i64 %238 to i32
  %call346 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %shr342, i32 %shr344, i32 %conv345)
  %239 = load i64, i64* %expected_size, align 8, !tbaa !6
  %add347 = add i64 %239, %call346
  store i64 %add347, i64* %expected_size, align 8, !tbaa !6
  br label %if.end348

if.end348:                                        ; preds = %if.then340, %if.end331
  %240 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %241 = load i32, i32* %240, align 4, !tbaa !8
  %add349 = add i32 %241, 1
  %shr350 = lshr i32 %add349, 1
  %242 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %243 = load i32, i32* %242, align 4, !tbaa !8
  %add351 = add i32 %243, 1
  %shr352 = lshr i32 %add351, 2
  %244 = load i64, i64* %bpp311, align 8, !tbaa !6
  %conv353 = trunc i64 %244 to i32
  %call354 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %shr350, i32 %shr352, i32 %conv353)
  %245 = load i64, i64* %expected_size, align 8, !tbaa !6
  %add355 = add i64 %245, %call354
  store i64 %add355, i64* %expected_size, align 8, !tbaa !6
  %246 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %247 = load i32, i32* %246, align 4, !tbaa !8
  %cmp356 = icmp ugt i32 %247, 1
  br i1 %cmp356, label %if.then357, label %if.end365

if.then357:                                       ; preds = %if.end348
  %248 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %249 = load i32, i32* %248, align 4, !tbaa !8
  %add358 = add i32 %249, 0
  %shr359 = lshr i32 %add358, 1
  %250 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %251 = load i32, i32* %250, align 4, !tbaa !8
  %add360 = add i32 %251, 1
  %shr361 = lshr i32 %add360, 1
  %252 = load i64, i64* %bpp311, align 8, !tbaa !6
  %conv362 = trunc i64 %252 to i32
  %call363 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %shr359, i32 %shr361, i32 %conv362)
  %253 = load i64, i64* %expected_size, align 8, !tbaa !6
  %add364 = add i64 %253, %call363
  store i64 %add364, i64* %expected_size, align 8, !tbaa !6
  br label %if.end365

if.end365:                                        ; preds = %if.then357, %if.end348
  %254 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %255 = load i32, i32* %254, align 4, !tbaa !8
  %add366 = add i32 %255, 0
  %256 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %257 = load i32, i32* %256, align 4, !tbaa !8
  %add367 = add i32 %257, 0
  %shr368 = lshr i32 %add367, 1
  %258 = load i64, i64* %bpp311, align 8, !tbaa !6
  %conv369 = trunc i64 %258 to i32
  %call370 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %add366, i32 %shr368, i32 %conv369)
  %259 = load i64, i64* %expected_size, align 8, !tbaa !6
  %add371 = add i64 %259, %call370
  store i64 %add371, i64* %expected_size, align 8, !tbaa !6
  %260 = bitcast i64* %bpp311 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %260) #16
  br label %if.end372

if.end372:                                        ; preds = %if.end365, %if.then303
  %261 = load i64, i64* %expected_size, align 8, !tbaa !6
  %262 = load i8*, i8** %idat, align 8, !tbaa !2
  %263 = load i64, i64* %idatsize, align 8, !tbaa !6
  %264 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder373 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %264, i32 0, i32 0
  %zlibsettings374 = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %decoder373, i32 0, i32 0
  %call375 = call i32 @_ZL15zlib_decompressPPhPmmPKhmPK25LodePNGDecompressSettings(i8** %scanlines, i64* %scanlines_size, i64 %261, i8* %262, i64 %263, %struct.LodePNGDecompressSettings* %zlibsettings374)
  %265 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error376 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %265, i32 0, i32 4
  store i32 %call375, i32* %error376, align 8, !tbaa !105
  br label %if.end377

if.end377:                                        ; preds = %if.end372, %if.end297
  %266 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error378 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %266, i32 0, i32 4
  %267 = load i32, i32* %error378, align 8, !tbaa !105
  %tobool379 = icmp ne i32 %267, 0
  br i1 %tobool379, label %if.end384, label %land.lhs.true380

land.lhs.true380:                                 ; preds = %if.end377
  %268 = load i64, i64* %scanlines_size, align 8, !tbaa !6
  %269 = load i64, i64* %expected_size, align 8, !tbaa !6
  %cmp381 = icmp ne i64 %268, %269
  br i1 %cmp381, label %if.then382, label %if.end384

if.then382:                                       ; preds = %land.lhs.true380
  %270 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error383 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %270, i32 0, i32 4
  store i32 91, i32* %error383, align 8, !tbaa !105
  br label %if.end384

if.end384:                                        ; preds = %if.then382, %land.lhs.true380, %if.end377
  %271 = load i8*, i8** %idat, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %271)
  %272 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error385 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %272, i32 0, i32 4
  %273 = load i32, i32* %error385, align 8, !tbaa !105
  %tobool386 = icmp ne i32 %273, 0
  br i1 %tobool386, label %if.end396, label %if.then387

if.then387:                                       ; preds = %if.end384
  %274 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %275 = load i32, i32* %274, align 4, !tbaa !8
  %276 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %277 = load i32, i32* %276, align 4, !tbaa !8
  %278 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png388 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %278, i32 0, i32 3
  %color389 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png388, i32 0, i32 3
  %call390 = call i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 %275, i32 %277, %struct.LodePNGColorMode* %color389)
  store i64 %call390, i64* %outsize, align 8, !tbaa !6
  %279 = load i64, i64* %outsize, align 8, !tbaa !6
  %call391 = call i8* @_ZL14lodepng_mallocm(i64 %279)
  %280 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %call391, i8** %280, align 8, !tbaa !2
  %281 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %282 = load i8*, i8** %281, align 8, !tbaa !2
  %tobool392 = icmp ne i8* %282, null
  br i1 %tobool392, label %if.end395, label %if.then393

if.then393:                                       ; preds = %if.then387
  %283 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error394 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %283, i32 0, i32 4
  store i32 83, i32* %error394, align 8, !tbaa !105
  br label %if.end395

if.end395:                                        ; preds = %if.then393, %if.then387
  br label %if.end396

if.end396:                                        ; preds = %if.end395, %if.end384
  %284 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error397 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %284, i32 0, i32 4
  %285 = load i32, i32* %error397, align 8, !tbaa !105
  %tobool398 = icmp ne i32 %285, 0
  br i1 %tobool398, label %if.end403, label %if.then399

if.then399:                                       ; preds = %if.end396
  %286 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %287 = load i8*, i8** %286, align 8, !tbaa !2
  %288 = load i64, i64* %outsize, align 8, !tbaa !6
  call void @_ZL14lodepng_memsetPvim(i8* %287, i32 0, i64 %288)
  %289 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %290 = load i8*, i8** %289, align 8, !tbaa !2
  %291 = load i8*, i8** %scanlines, align 8, !tbaa !2
  %292 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %293 = load i32, i32* %292, align 4, !tbaa !8
  %294 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %295 = load i32, i32* %294, align 4, !tbaa !8
  %296 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png400 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %296, i32 0, i32 3
  %call401 = call i32 @_ZL20postProcessScanlinesPhS_jjPK11LodePNGInfo(i8* %290, i8* %291, i32 %293, i32 %295, %struct.LodePNGInfo* %info_png400)
  %297 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error402 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %297, i32 0, i32 4
  store i32 %call401, i32* %error402, align 8, !tbaa !105
  br label %if.end403

if.end403:                                        ; preds = %if.then399, %if.end396
  %298 = load i8*, i8** %scanlines, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %298)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup404

cleanup404:                                       ; preds = %if.end403, %if.then9, %if.then4, %if.then
  %299 = bitcast i32* %critical_pos to i8*
  call void @llvm.lifetime.end(i64 4, i8* %299) #16
  %300 = bitcast i32* %unknown to i8*
  call void @llvm.lifetime.end(i64 4, i8* %300) #16
  %301 = bitcast i64* %outsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %301) #16
  %302 = bitcast i64* %expected_size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %302) #16
  %303 = bitcast i64* %scanlines_size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %303) #16
  %304 = bitcast i8** %scanlines to i8*
  call void @llvm.lifetime.end(i64 8, i8* %304) #16
  %305 = bitcast i64* %idatsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %305) #16
  %306 = bitcast i8** %idat to i8*
  call void @llvm.lifetime.end(i64 8, i8* %306) #16
  %307 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %307) #16
  call void @llvm.lifetime.end(i64 1, i8* %IEND) #16
  %cleanup.dest414 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest414, label %unreachable [
    i32 0, label %cleanup.cont415
    i32 1, label %cleanup.cont415
  ]

cleanup.cont415:                                  ; preds = %cleanup404, %cleanup404
  ret void

unreachable:                                      ; preds = %cleanup404, %cleanup284
  unreachable
}

; Function Attrs: ssp uwtable
define i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** %out, i32* %w, i32* %h, i8* %in, i64 %insize, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %error = alloca i32, align 4
  %state = alloca %struct.LodePNGState, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast %struct.LodePNGState* %state to i8*
  call void @llvm.lifetime.start(i64 504, i8* %1) #16
  call void @_Z18lodepng_state_initP12LodePNGState(%struct.LodePNGState* %state)
  %2 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %state, i32 0, i32 2
  %colortype1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw, i32 0, i32 0
  store i32 %2, i32* %colortype1, align 8, !tbaa !134
  %3 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %info_raw2 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %state, i32 0, i32 2
  %bitdepth3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw2, i32 0, i32 1
  store i32 %3, i32* %bitdepth3, align 4, !tbaa !135
  %4 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %5 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %6 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %7 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %8 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %call = call i32 @_Z14lodepng_decodePPhPjS1_P12LodePNGStatePKhm(i8** %4, i32* %5, i32* %6, %struct.LodePNGState* %state, i8* %7, i64 %8)
  store i32 %call, i32* %error, align 4, !tbaa !8
  call void @_Z21lodepng_state_cleanupP12LodePNGState(%struct.LodePNGState* %state)
  %9 = load i32, i32* %error, align 4, !tbaa !8
  %10 = bitcast %struct.LodePNGState* %state to i8*
  call void @llvm.lifetime.end(i64 504, i8* %10) #16
  %11 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #16
  ret i32 %9
}

; Function Attrs: ssp uwtable
define void @_Z18lodepng_state_initP12LodePNGState(%struct.LodePNGState* %state) #0 {
entry:
  %state.addr = alloca %struct.LodePNGState*, align 8
  store %struct.LodePNGState* %state, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %decoder = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i32 0, i32 0
  call void @_Z29lodepng_decoder_settings_initP22LodePNGDecoderSettings(%struct.LodePNGDecoderSettings* %decoder)
  %1 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %1, i32 0, i32 1
  call void @_Z29lodepng_encoder_settings_initP22LodePNGEncoderSettings(%struct.LodePNGEncoderSettings* %encoder)
  %2 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %2, i32 0, i32 2
  call void @_Z23lodepng_color_mode_initP16LodePNGColorMode(%struct.LodePNGColorMode* %info_raw)
  %3 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i32 0, i32 3
  call void @_Z17lodepng_info_initP11LodePNGInfo(%struct.LodePNGInfo* %info_png)
  %4 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %4, i32 0, i32 4
  store i32 1, i32* %error, align 8, !tbaa !105
  ret void
}

; Function Attrs: ssp uwtable
define void @_Z21lodepng_state_cleanupP12LodePNGState(%struct.LodePNGState* %state) #0 {
entry:
  %state.addr = alloca %struct.LodePNGState*, align 8
  store %struct.LodePNGState* %state, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %0, i32 0, i32 2
  call void @_Z26lodepng_color_mode_cleanupP16LodePNGColorMode(%struct.LodePNGColorMode* %info_raw)
  %1 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %1, i32 0, i32 3
  call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %info_png)
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_Z16lodepng_decode32PPhPjS1_PKhm(i8** %out, i32* %w, i32* %h, i8* %in, i64 %insize) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  %0 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %1 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %2 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %4 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %call = call i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** %0, i32* %1, i32* %2, i8* %3, i64 %4, i32 6, i32 8)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define i32 @_Z16lodepng_decode24PPhPjS1_PKhm(i8** %out, i32* %w, i32* %h, i8* %in, i64 %insize) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  %0 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %1 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %2 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %4 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %call = call i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** %0, i32* %1, i32* %2, i8* %3, i64 %4, i32 2, i32 8)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define i32 @_Z19lodepng_decode_filePPhPjS1_PKc16LodePNGColorTypej(i8** %out, i32* %w, i32* %h, i8* %filename, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %filename.addr = alloca i8*, align 8
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %buffer = alloca i8*, align 8
  %buffersize = alloca i64, align 8
  %error = alloca i32, align 4
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %buffer, align 8, !tbaa !2
  %1 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* null, i8** %3, align 8, !tbaa !2
  %4 = load i32*, i32** %h.addr, align 8, !tbaa !2
  store i32 0, i32* %4, align 4, !tbaa !8
  %5 = load i32*, i32** %w.addr, align 8, !tbaa !2
  store i32 0, i32* %5, align 4, !tbaa !8
  %6 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call = call i32 @_Z17lodepng_load_filePPhPmPKc(i8** %buffer, i64* %buffersize, i8* %6)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %7 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %8 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %9 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %10 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %11 = load i8*, i8** %buffer, align 8, !tbaa !2
  %12 = load i64, i64* %buffersize, align 8, !tbaa !6
  %13 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %14 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call1 = call i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** %8, i32* %9, i32* %10, i8* %11, i64 %12, i32 %13, i32 %14)
  store i32 %call1, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %15 = load i8*, i8** %buffer, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %15)
  %16 = load i32, i32* %error, align 4, !tbaa !8
  %17 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #16
  %18 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #16
  %19 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  ret i32 %16
}

; Function Attrs: ssp uwtable
define i32 @_Z21lodepng_decode32_filePPhPjS1_PKc(i8** %out, i32* %w, i32* %h, i8* %filename) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %filename.addr = alloca i8*, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  %0 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %1 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %2 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call = call i32 @_Z19lodepng_decode_filePPhPjS1_PKc16LodePNGColorTypej(i8** %0, i32* %1, i32* %2, i8* %3, i32 6, i32 8)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define i32 @_Z21lodepng_decode24_filePPhPjS1_PKc(i8** %out, i32* %w, i32* %h, i8* %filename) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %filename.addr = alloca i8*, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i32* %w, i32** %w.addr, align 8, !tbaa !2
  store i32* %h, i32** %h.addr, align 8, !tbaa !2
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  %0 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %1 = load i32*, i32** %w.addr, align 8, !tbaa !2
  %2 = load i32*, i32** %h.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call = call i32 @_Z19lodepng_decode_filePPhPjS1_PKc16LodePNGColorTypej(i8** %0, i32* %1, i32* %2, i8* %3, i32 2, i32 8)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define void @_Z29lodepng_decoder_settings_initP22LodePNGDecoderSettings(%struct.LodePNGDecoderSettings* %settings) #4 {
entry:
  %settings.addr = alloca %struct.LodePNGDecoderSettings*, align 8
  store %struct.LodePNGDecoderSettings* %settings, %struct.LodePNGDecoderSettings** %settings.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGDecoderSettings*, %struct.LodePNGDecoderSettings** %settings.addr, align 8, !tbaa !2
  %color_convert = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %0, i32 0, i32 4
  store i32 1, i32* %color_convert, align 4, !tbaa !143
  %1 = load %struct.LodePNGDecoderSettings*, %struct.LodePNGDecoderSettings** %settings.addr, align 8, !tbaa !2
  %read_text_chunks = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %1, i32 0, i32 5
  store i32 1, i32* %read_text_chunks, align 8, !tbaa !144
  %2 = load %struct.LodePNGDecoderSettings*, %struct.LodePNGDecoderSettings** %settings.addr, align 8, !tbaa !2
  %remember_unknown_chunks = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %2, i32 0, i32 6
  store i32 0, i32* %remember_unknown_chunks, align 4, !tbaa !145
  %3 = load %struct.LodePNGDecoderSettings*, %struct.LodePNGDecoderSettings** %settings.addr, align 8, !tbaa !2
  %ignore_crc = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %3, i32 0, i32 1
  store i32 0, i32* %ignore_crc, align 8, !tbaa !146
  %4 = load %struct.LodePNGDecoderSettings*, %struct.LodePNGDecoderSettings** %settings.addr, align 8, !tbaa !2
  %ignore_critical = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %4, i32 0, i32 2
  store i32 0, i32* %ignore_critical, align 4, !tbaa !147
  %5 = load %struct.LodePNGDecoderSettings*, %struct.LodePNGDecoderSettings** %settings.addr, align 8, !tbaa !2
  %ignore_end = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %5, i32 0, i32 3
  store i32 0, i32* %ignore_end, align 8, !tbaa !148
  %6 = load %struct.LodePNGDecoderSettings*, %struct.LodePNGDecoderSettings** %settings.addr, align 8, !tbaa !2
  %zlibsettings = getelementptr inbounds %struct.LodePNGDecoderSettings, %struct.LodePNGDecoderSettings* %6, i32 0, i32 0
  call void @_Z32lodepng_decompress_settings_initP25LodePNGDecompressSettings(%struct.LodePNGDecompressSettings* %zlibsettings)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @_Z29lodepng_encoder_settings_initP22LodePNGEncoderSettings(%struct.LodePNGEncoderSettings* %settings) #4 {
entry:
  %settings.addr = alloca %struct.LodePNGEncoderSettings*, align 8
  store %struct.LodePNGEncoderSettings* %settings, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %zlibsettings = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %0, i32 0, i32 0
  call void @_Z30lodepng_compress_settings_initP23LodePNGCompressSettings(%struct.LodePNGCompressSettings* %zlibsettings)
  %1 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %filter_palette_zero = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %1, i32 0, i32 2
  store i32 1, i32* %filter_palette_zero, align 4, !tbaa !149
  %2 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %filter_strategy = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %2, i32 0, i32 3
  store i32 5, i32* %filter_strategy, align 8, !tbaa !150
  %3 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %auto_convert = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %3, i32 0, i32 1
  store i32 1, i32* %auto_convert, align 8, !tbaa !151
  %4 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %force_palette = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %4, i32 0, i32 5
  store i32 0, i32* %force_palette, align 8, !tbaa !152
  %5 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %predefined_filters = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %5, i32 0, i32 4
  store i8* null, i8** %predefined_filters, align 8, !tbaa !153
  %6 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %add_id = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %6, i32 0, i32 6
  store i32 0, i32* %add_id, align 4, !tbaa !154
  %7 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %text_compression = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %7, i32 0, i32 7
  store i32 1, i32* %text_compression, align 8, !tbaa !155
  ret void
}

; Function Attrs: ssp uwtable
define void @_Z18lodepng_state_copyP12LodePNGStatePKS_(%struct.LodePNGState* %dest, %struct.LodePNGState* %source) #0 {
entry:
  %dest.addr = alloca %struct.LodePNGState*, align 8
  %source.addr = alloca %struct.LodePNGState*, align 8
  store %struct.LodePNGState* %dest, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  store %struct.LodePNGState* %source, %struct.LodePNGState** %source.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  call void @_Z21lodepng_state_cleanupP12LodePNGState(%struct.LodePNGState* %0)
  %1 = load %struct.LodePNGState*, %struct.LodePNGState** %source.addr, align 8, !tbaa !2
  %2 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %3 = bitcast %struct.LodePNGState* %2 to i8*
  %4 = bitcast %struct.LodePNGState* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 504, i32 8, i1 false), !tbaa.struct !156
  %5 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i32 0, i32 2
  call void @_Z23lodepng_color_mode_initP16LodePNGColorMode(%struct.LodePNGColorMode* %info_raw)
  %6 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %info_png = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %6, i32 0, i32 3
  call void @_Z17lodepng_info_initP11LodePNGInfo(%struct.LodePNGInfo* %info_png)
  %7 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %info_raw1 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %7, i32 0, i32 2
  %8 = load %struct.LodePNGState*, %struct.LodePNGState** %source.addr, align 8, !tbaa !2
  %info_raw2 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i32 0, i32 2
  %call = call i32 @_Z23lodepng_color_mode_copyP16LodePNGColorModePKS_(%struct.LodePNGColorMode* %info_raw1, %struct.LodePNGColorMode* %info_raw2)
  %9 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %error = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %9, i32 0, i32 4
  store i32 %call, i32* %error, align 8, !tbaa !105
  %10 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %error3 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %10, i32 0, i32 4
  %11 = load i32, i32* %error3, align 8, !tbaa !105
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end11

if.end:                                           ; preds = %entry
  %12 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %info_png4 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %12, i32 0, i32 3
  %13 = load %struct.LodePNGState*, %struct.LodePNGState** %source.addr, align 8, !tbaa !2
  %info_png5 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %13, i32 0, i32 3
  %call6 = call i32 @_Z17lodepng_info_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %info_png4, %struct.LodePNGInfo* %info_png5)
  %14 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %error7 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %14, i32 0, i32 4
  store i32 %call6, i32* %error7, align 8, !tbaa !105
  %15 = load %struct.LodePNGState*, %struct.LodePNGState** %dest.addr, align 8, !tbaa !2
  %error8 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %15, i32 0, i32 4
  %16 = load i32, i32* %error8, align 8, !tbaa !105
  %tobool9 = icmp ne i32 %16, 0
  br i1 %tobool9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end
  br label %if.end11

if.end11:                                         ; preds = %if.then, %if.then10, %if.end
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: ssp uwtable
define i32 @_Z14lodepng_encodePPhPmPKhjjP12LodePNGState(i8** %out, i64* %outsize, i8* %image, i32 %w, i32 %h, %struct.LodePNGState* %state) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %state.addr = alloca %struct.LodePNGState*, align 8
  %data = alloca i8*, align 8
  %datasize = alloca i64, align 8
  %outv = alloca %struct.ucvector, align 8
  %info = alloca %struct.LodePNGInfo, align 8
  %info_png = alloca %struct.LodePNGInfo*, align 8
  %stats = alloca %struct.LodePNGColorStats, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  %mode16 = alloca %struct.LodePNGColorMode, align 8
  %cleanup.dest.slot = alloca i32
  %gray_icc = alloca i32, align 4
  %rgb_icc = alloca i32, align 4
  %gray_png = alloca i32, align 4
  %converted = alloca i8*, align 8
  %size = alloca i64, align 8
  %i = alloca i64, align 8
  %already_added_id_text = alloca i32, align 4
  %k = alloca i8*, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %image, i8** %image.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %struct.LodePNGState* %state, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %0 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %data, align 8, !tbaa !2
  %1 = bitcast i64* %datasize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i64 0, i64* %datasize, align 8, !tbaa !6
  %2 = bitcast %struct.ucvector* %outv to i8*
  call void @llvm.lifetime.start(i64 24, i8* %2) #16
  call void @_ZL13ucvector_initPhm(%struct.ucvector* sret %outv, i8* null, i64 0)
  %3 = bitcast %struct.LodePNGInfo* %info to i8*
  call void @llvm.lifetime.start(i64 312, i8* %3) #16
  %4 = bitcast %struct.LodePNGInfo** %info_png to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png1 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %5, i32 0, i32 3
  store %struct.LodePNGInfo* %info_png1, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  call void @_Z17lodepng_info_initP11LodePNGInfo(%struct.LodePNGInfo* %info)
  %6 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* null, i8** %6, align 8, !tbaa !2
  %7 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 0, i64* %7, align 8, !tbaa !6
  %8 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %8, i32 0, i32 4
  store i32 0, i32* %error, align 8, !tbaa !105
  %9 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %9, i32 0, i32 3
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color, i32 0, i32 0
  %10 = load i32, i32* %colortype, align 8, !tbaa !111
  %cmp = icmp eq i32 %10, 3
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %11 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %11, i32 0, i32 1
  %force_palette = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder, i32 0, i32 5
  %12 = load i32, i32* %force_palette, align 8, !tbaa !158
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %13 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %color2 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %13, i32 0, i32 3
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color2, i32 0, i32 3
  %14 = load i64, i64* %palettesize, align 8, !tbaa !113
  %cmp3 = icmp eq i64 %14, 0
  br i1 %cmp3, label %if.then, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %land.lhs.true
  %15 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %color5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %15, i32 0, i32 3
  %palettesize6 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color5, i32 0, i32 3
  %16 = load i64, i64* %palettesize6, align 8, !tbaa !113
  %cmp7 = icmp ugt i64 %16, 256
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %land.lhs.true
  %17 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error8 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %17, i32 0, i32 4
  store i32 68, i32* %error8, align 8, !tbaa !105
  br label %cleanup505

if.end:                                           ; preds = %lor.lhs.false4, %lor.lhs.false
  %18 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder9 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %18, i32 0, i32 1
  %zlibsettings = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder9, i32 0, i32 0
  %btype = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %zlibsettings, i32 0, i32 0
  %19 = load i32, i32* %btype, align 8, !tbaa !159
  %cmp10 = icmp ugt i32 %19, 2
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end
  %20 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error12 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %20, i32 0, i32 4
  store i32 61, i32* %error12, align 8, !tbaa !105
  br label %cleanup505

if.end13:                                         ; preds = %if.end
  %21 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %interlace_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %21, i32 0, i32 2
  %22 = load i32, i32* %interlace_method, align 8, !tbaa !77
  %cmp14 = icmp ugt i32 %22, 1
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end13
  %23 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error16 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %23, i32 0, i32 4
  store i32 71, i32* %error16, align 8, !tbaa !105
  br label %cleanup505

if.end17:                                         ; preds = %if.end13
  %24 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %color18 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %24, i32 0, i32 3
  %colortype19 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color18, i32 0, i32 0
  %25 = load i32, i32* %colortype19, align 8, !tbaa !111
  %26 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %color20 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %26, i32 0, i32 3
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color20, i32 0, i32 1
  %27 = load i32, i32* %bitdepth, align 4, !tbaa !110
  %call = call i32 @_ZL18checkColorValidity16LodePNGColorTypej(i32 %25, i32 %27)
  %28 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error21 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %28, i32 0, i32 4
  store i32 %call, i32* %error21, align 8, !tbaa !105
  %29 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error22 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %29, i32 0, i32 4
  %30 = load i32, i32* %error22, align 8, !tbaa !105
  %tobool23 = icmp ne i32 %30, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end17
  br label %cleanup505

if.end25:                                         ; preds = %if.end17
  %31 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %31, i32 0, i32 2
  %colortype26 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw, i32 0, i32 0
  %32 = load i32, i32* %colortype26, align 8, !tbaa !134
  %33 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw27 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %33, i32 0, i32 2
  %bitdepth28 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw27, i32 0, i32 1
  %34 = load i32, i32* %bitdepth28, align 4, !tbaa !135
  %call29 = call i32 @_ZL18checkColorValidity16LodePNGColorTypej(i32 %32, i32 %34)
  %35 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error30 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %35, i32 0, i32 4
  store i32 %call29, i32* %error30, align 8, !tbaa !105
  %36 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error31 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %36, i32 0, i32 4
  %37 = load i32, i32* %error31, align 8, !tbaa !105
  %tobool32 = icmp ne i32 %37, 0
  br i1 %tobool32, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end25
  br label %cleanup505

if.end34:                                         ; preds = %if.end25
  %38 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_png35 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %38, i32 0, i32 3
  %call36 = call i32 @_Z17lodepng_info_copyP11LodePNGInfoPKS_(%struct.LodePNGInfo* %info, %struct.LodePNGInfo* %info_png35)
  %39 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder37 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %39, i32 0, i32 1
  %auto_convert = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder37, i32 0, i32 1
  %40 = load i32, i32* %auto_convert, align 8, !tbaa !160
  %tobool38 = icmp ne i32 %40, 0
  br i1 %tobool38, label %if.then39, label %if.end104

if.then39:                                        ; preds = %if.end34
  %41 = bitcast %struct.LodePNGColorStats* %stats to i8*
  call void @llvm.lifetime.start(i64 1072, i8* %41) #16
  call void @_Z24lodepng_color_stats_initP17LodePNGColorStats(%struct.LodePNGColorStats* %stats)
  %42 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %42, i32 0, i32 35
  %43 = load i32, i32* %iccp_defined, align 8, !tbaa !74
  %tobool40 = icmp ne i32 %43, 0
  br i1 %tobool40, label %land.lhs.true41, label %if.end45

land.lhs.true41:                                  ; preds = %if.then39
  %44 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_profile = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %44, i32 0, i32 37
  %45 = load i8*, i8** %iccp_profile, align 8, !tbaa !75
  %46 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_profile_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %46, i32 0, i32 38
  %47 = load i32, i32* %iccp_profile_size, align 8, !tbaa !76
  %call42 = call i32 @_ZL16isGrayICCProfilePKhj(i8* %45, i32 %47)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %land.lhs.true41
  %allow_palette = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %stats, i32 0, i32 10
  store i32 0, i32* %allow_palette, align 8, !tbaa !103
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %land.lhs.true41, %if.then39
  %48 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_defined46 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %48, i32 0, i32 35
  %49 = load i32, i32* %iccp_defined46, align 8, !tbaa !74
  %tobool47 = icmp ne i32 %49, 0
  br i1 %tobool47, label %land.lhs.true48, label %if.end54

land.lhs.true48:                                  ; preds = %if.end45
  %50 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_profile49 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %50, i32 0, i32 37
  %51 = load i8*, i8** %iccp_profile49, align 8, !tbaa !75
  %52 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_profile_size50 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %52, i32 0, i32 38
  %53 = load i32, i32* %iccp_profile_size50, align 8, !tbaa !76
  %call51 = call i32 @_ZL15isRGBICCProfilePKhj(i8* %51, i32 %53)
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.then53, label %if.end54

if.then53:                                        ; preds = %land.lhs.true48
  %allow_greyscale = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %stats, i32 0, i32 11
  store i32 0, i32* %allow_greyscale, align 4, !tbaa !104
  br label %if.end54

if.end54:                                         ; preds = %if.then53, %land.lhs.true48, %if.end45
  %54 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %55 = load i32, i32* %w.addr, align 4, !tbaa !8
  %56 = load i32, i32* %h.addr, align 4, !tbaa !8
  %57 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw55 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %57, i32 0, i32 2
  %call56 = call i32 @_Z27lodepng_compute_color_statsP17LodePNGColorStatsPKhjjPK16LodePNGColorMode(%struct.LodePNGColorStats* %stats, i8* %54, i32 %55, i32 %56, %struct.LodePNGColorMode* %info_raw55)
  %58 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error57 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %58, i32 0, i32 4
  store i32 %call56, i32* %error57, align 8, !tbaa !105
  %59 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error58 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %59, i32 0, i32 4
  %60 = load i32, i32* %error58, align 8, !tbaa !105
  %tobool59 = icmp ne i32 %60, 0
  br i1 %tobool59, label %if.then60, label %if.end61

if.then60:                                        ; preds = %if.end54
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup101

if.end61:                                         ; preds = %if.end54
  %61 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %background_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %61, i32 0, i32 4
  %62 = load i32, i32* %background_defined, align 8, !tbaa !80
  %tobool62 = icmp ne i32 %62, 0
  br i1 %tobool62, label %if.then63, label %if.end75

if.then63:                                        ; preds = %if.end61
  %63 = bitcast i32* %r to i8*
  call void @llvm.lifetime.start(i64 4, i8* %63) #16
  store i32 0, i32* %r, align 4, !tbaa !8
  %64 = bitcast i32* %g to i8*
  call void @llvm.lifetime.start(i64 4, i8* %64) #16
  store i32 0, i32* %g, align 4, !tbaa !8
  %65 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start(i64 4, i8* %65) #16
  store i32 0, i32* %b, align 4, !tbaa !8
  %66 = bitcast %struct.LodePNGColorMode* %mode16 to i8*
  call void @llvm.lifetime.start(i64 40, i8* %66) #16
  call void @_Z23lodepng_color_mode_make16LodePNGColorTypej(%struct.LodePNGColorMode* sret %mode16, i32 2, i32 16)
  %67 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %background_r = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %67, i32 0, i32 5
  %68 = load i32, i32* %background_r, align 4, !tbaa !83
  %69 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %background_g = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %69, i32 0, i32 6
  %70 = load i32, i32* %background_g, align 8, !tbaa !82
  %71 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %background_b = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %71, i32 0, i32 7
  %72 = load i32, i32* %background_b, align 4, !tbaa !81
  %73 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %color64 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %73, i32 0, i32 3
  %call65 = call i32 @_Z19lodepng_convert_rgbPjS_S_jjjPK16LodePNGColorModeS2_(i32* %r, i32* %g, i32* %b, i32 %68, i32 %70, i32 %72, %struct.LodePNGColorMode* %mode16, %struct.LodePNGColorMode* %color64)
  %74 = load i32, i32* %r, align 4, !tbaa !8
  %75 = load i32, i32* %g, align 4, !tbaa !8
  %76 = load i32, i32* %b, align 4, !tbaa !8
  %call66 = call i32 @_ZL23lodepng_color_stats_addP17LodePNGColorStatsjjjj(%struct.LodePNGColorStats* %stats, i32 %74, i32 %75, i32 %76, i32 65535)
  %77 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error67 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %77, i32 0, i32 4
  store i32 %call66, i32* %error67, align 8, !tbaa !105
  %78 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error68 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %78, i32 0, i32 4
  %79 = load i32, i32* %error68, align 8, !tbaa !105
  %tobool69 = icmp ne i32 %79, 0
  br i1 %tobool69, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.then63
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end71:                                         ; preds = %if.then63
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then70, %if.end71
  %80 = bitcast %struct.LodePNGColorMode* %mode16 to i8*
  call void @llvm.lifetime.end(i64 40, i8* %80) #16
  %81 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end(i64 4, i8* %81) #16
  %82 = bitcast i32* %g to i8*
  call void @llvm.lifetime.end(i64 4, i8* %82) #16
  %83 = bitcast i32* %r to i8*
  call void @llvm.lifetime.end(i64 4, i8* %83) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup101 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end75

if.end75:                                         ; preds = %cleanup.cont, %if.end61
  %color76 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %84 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw77 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %84, i32 0, i32 2
  %call78 = call i32 @_ZL17auto_choose_colorP16LodePNGColorModePKS_PK17LodePNGColorStats(%struct.LodePNGColorMode* %color76, %struct.LodePNGColorMode* %info_raw77, %struct.LodePNGColorStats* %stats)
  %85 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error79 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %85, i32 0, i32 4
  store i32 %call78, i32* %error79, align 8, !tbaa !105
  %86 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error80 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %86, i32 0, i32 4
  %87 = load i32, i32* %error80, align 8, !tbaa !105
  %tobool81 = icmp ne i32 %87, 0
  br i1 %tobool81, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end75
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup101

if.end83:                                         ; preds = %if.end75
  %88 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %background_defined84 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %88, i32 0, i32 4
  %89 = load i32, i32* %background_defined84, align 8, !tbaa !80
  %tobool85 = icmp ne i32 %89, 0
  br i1 %tobool85, label %if.then86, label %if.end100

if.then86:                                        ; preds = %if.end83
  %background_r87 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 5
  %background_g88 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 6
  %background_b89 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 7
  %90 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %background_r90 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %90, i32 0, i32 5
  %91 = load i32, i32* %background_r90, align 4, !tbaa !83
  %92 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %background_g91 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %92, i32 0, i32 6
  %93 = load i32, i32* %background_g91, align 8, !tbaa !82
  %94 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %background_b92 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %94, i32 0, i32 7
  %95 = load i32, i32* %background_b92, align 4, !tbaa !81
  %color93 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %96 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %color94 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %96, i32 0, i32 3
  %call95 = call i32 @_Z19lodepng_convert_rgbPjS_S_jjjPK16LodePNGColorModeS2_(i32* %background_r87, i32* %background_g88, i32* %background_b89, i32 %91, i32 %93, i32 %95, %struct.LodePNGColorMode* %color93, %struct.LodePNGColorMode* %color94)
  %tobool96 = icmp ne i32 %call95, 0
  br i1 %tobool96, label %if.then97, label %if.end99

if.then97:                                        ; preds = %if.then86
  %97 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error98 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %97, i32 0, i32 4
  store i32 104, i32* %error98, align 8, !tbaa !105
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup101

if.end99:                                         ; preds = %if.then86
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.end83
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup101

cleanup101:                                       ; preds = %if.then97, %if.then82, %if.then60, %if.end100, %cleanup
  %98 = bitcast %struct.LodePNGColorStats* %stats to i8*
  call void @llvm.lifetime.end(i64 1072, i8* %98) #16
  %cleanup.dest102 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest102, label %cleanup509 [
    i32 0, label %cleanup.cont103
    i32 2, label %cleanup505
  ]

cleanup.cont103:                                  ; preds = %cleanup101
  br label %if.end104

if.end104:                                        ; preds = %cleanup.cont103, %if.end34
  %99 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_defined105 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %99, i32 0, i32 35
  %100 = load i32, i32* %iccp_defined105, align 8, !tbaa !74
  %tobool106 = icmp ne i32 %100, 0
  br i1 %tobool106, label %if.then107, label %if.end138

if.then107:                                       ; preds = %if.end104
  %101 = bitcast i32* %gray_icc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %101) #16
  %102 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_profile108 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %102, i32 0, i32 37
  %103 = load i8*, i8** %iccp_profile108, align 8, !tbaa !75
  %104 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_profile_size109 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %104, i32 0, i32 38
  %105 = load i32, i32* %iccp_profile_size109, align 8, !tbaa !76
  %call110 = call i32 @_ZL16isGrayICCProfilePKhj(i8* %103, i32 %105)
  store i32 %call110, i32* %gray_icc, align 4, !tbaa !8
  %106 = bitcast i32* %rgb_icc to i8*
  call void @llvm.lifetime.start(i64 4, i8* %106) #16
  %107 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_profile111 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %107, i32 0, i32 37
  %108 = load i8*, i8** %iccp_profile111, align 8, !tbaa !75
  %109 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png, align 8, !tbaa !2
  %iccp_profile_size112 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %109, i32 0, i32 38
  %110 = load i32, i32* %iccp_profile_size112, align 8, !tbaa !76
  %call113 = call i32 @_ZL15isRGBICCProfilePKhj(i8* %108, i32 %110)
  store i32 %call113, i32* %rgb_icc, align 4, !tbaa !8
  %111 = bitcast i32* %gray_png to i8*
  call void @llvm.lifetime.start(i64 4, i8* %111) #16
  %color114 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %colortype115 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color114, i32 0, i32 0
  %112 = load i32, i32* %colortype115, align 8, !tbaa !111
  %cmp116 = icmp eq i32 %112, 0
  br i1 %cmp116, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then107
  %color117 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %colortype118 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color117, i32 0, i32 0
  %113 = load i32, i32* %colortype118, align 8, !tbaa !111
  %cmp119 = icmp eq i32 %113, 4
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then107
  %114 = phi i1 [ true, %if.then107 ], [ %cmp119, %lor.rhs ]
  %conv = zext i1 %114 to i32
  store i32 %conv, i32* %gray_png, align 4, !tbaa !8
  %115 = load i32, i32* %gray_icc, align 4, !tbaa !8
  %tobool120 = icmp ne i32 %115, 0
  br i1 %tobool120, label %if.end125, label %land.lhs.true121

land.lhs.true121:                                 ; preds = %lor.end
  %116 = load i32, i32* %rgb_icc, align 4, !tbaa !8
  %tobool122 = icmp ne i32 %116, 0
  br i1 %tobool122, label %if.end125, label %if.then123

if.then123:                                       ; preds = %land.lhs.true121
  %117 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error124 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %117, i32 0, i32 4
  store i32 100, i32* %error124, align 8, !tbaa !105
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup133

if.end125:                                        ; preds = %land.lhs.true121, %lor.end
  %118 = load i32, i32* %gray_icc, align 4, !tbaa !8
  %119 = load i32, i32* %gray_png, align 4, !tbaa !8
  %cmp126 = icmp ne i32 %118, %119
  br i1 %cmp126, label %if.then127, label %if.end132

if.then127:                                       ; preds = %if.end125
  %120 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder128 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %120, i32 0, i32 1
  %auto_convert129 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder128, i32 0, i32 1
  %121 = load i32, i32* %auto_convert129, align 8, !tbaa !160
  %tobool130 = icmp ne i32 %121, 0
  %cond = select i1 %tobool130, i32 102, i32 101
  %122 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error131 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %122, i32 0, i32 4
  store i32 %cond, i32* %error131, align 8, !tbaa !105
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup133

if.end132:                                        ; preds = %if.end125
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup133

cleanup133:                                       ; preds = %if.then127, %if.then123, %if.end132
  %123 = bitcast i32* %gray_png to i8*
  call void @llvm.lifetime.end(i64 4, i8* %123) #16
  %124 = bitcast i32* %rgb_icc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %124) #16
  %125 = bitcast i32* %gray_icc to i8*
  call void @llvm.lifetime.end(i64 4, i8* %125) #16
  %cleanup.dest136 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest136, label %cleanup509 [
    i32 0, label %cleanup.cont137
    i32 2, label %cleanup505
  ]

cleanup.cont137:                                  ; preds = %cleanup133
  br label %if.end138

if.end138:                                        ; preds = %cleanup.cont137, %if.end104
  %126 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw139 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %126, i32 0, i32 2
  %color140 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %call141 = call i32 @_ZL24lodepng_color_mode_equalPK16LodePNGColorModeS1_(%struct.LodePNGColorMode* %info_raw139, %struct.LodePNGColorMode* %color140)
  %tobool142 = icmp ne i32 %call141, 0
  br i1 %tobool142, label %if.else, label %if.then143

if.then143:                                       ; preds = %if.end138
  %127 = bitcast i8** %converted to i8*
  call void @llvm.lifetime.start(i64 8, i8* %127) #16
  %128 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %128) #16
  %129 = load i32, i32* %w.addr, align 4, !tbaa !8
  %conv144 = zext i32 %129 to i64
  %130 = load i32, i32* %h.addr, align 4, !tbaa !8
  %conv145 = zext i32 %130 to i64
  %mul = mul i64 %conv144, %conv145
  %color146 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %call147 = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %color146)
  %conv148 = zext i32 %call147 to i64
  %mul149 = mul i64 %mul, %conv148
  %add = add i64 %mul149, 7
  %div = udiv i64 %add, 8
  store i64 %div, i64* %size, align 8, !tbaa !6
  %131 = load i64, i64* %size, align 8, !tbaa !6
  %call150 = call i8* @_ZL14lodepng_mallocm(i64 %131)
  store i8* %call150, i8** %converted, align 8, !tbaa !2
  %132 = load i8*, i8** %converted, align 8, !tbaa !2
  %tobool151 = icmp ne i8* %132, null
  br i1 %tobool151, label %if.end156, label %land.lhs.true152

land.lhs.true152:                                 ; preds = %if.then143
  %133 = load i64, i64* %size, align 8, !tbaa !6
  %tobool153 = icmp ne i64 %133, 0
  br i1 %tobool153, label %if.then154, label %if.end156

if.then154:                                       ; preds = %land.lhs.true152
  %134 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error155 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %134, i32 0, i32 4
  store i32 83, i32* %error155, align 8, !tbaa !105
  br label %if.end156

if.end156:                                        ; preds = %if.then154, %land.lhs.true152, %if.then143
  %135 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error157 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %135, i32 0, i32 4
  %136 = load i32, i32* %error157, align 8, !tbaa !105
  %tobool158 = icmp ne i32 %136, 0
  br i1 %tobool158, label %if.end164, label %if.then159

if.then159:                                       ; preds = %if.end156
  %137 = load i8*, i8** %converted, align 8, !tbaa !2
  %138 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %color160 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %139 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %info_raw161 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %139, i32 0, i32 2
  %140 = load i32, i32* %w.addr, align 4, !tbaa !8
  %141 = load i32, i32* %h.addr, align 4, !tbaa !8
  %call162 = call i32 @_Z15lodepng_convertPhPKhPK16LodePNGColorModeS4_jj(i8* %137, i8* %138, %struct.LodePNGColorMode* %color160, %struct.LodePNGColorMode* %info_raw161, i32 %140, i32 %141)
  %142 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error163 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %142, i32 0, i32 4
  store i32 %call162, i32* %error163, align 8, !tbaa !105
  br label %if.end164

if.end164:                                        ; preds = %if.then159, %if.end156
  %143 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error165 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %143, i32 0, i32 4
  %144 = load i32, i32* %error165, align 8, !tbaa !105
  %tobool166 = icmp ne i32 %144, 0
  br i1 %tobool166, label %if.end171, label %if.then167

if.then167:                                       ; preds = %if.end164
  %145 = load i8*, i8** %converted, align 8, !tbaa !2
  %146 = load i32, i32* %w.addr, align 4, !tbaa !8
  %147 = load i32, i32* %h.addr, align 4, !tbaa !8
  %148 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder168 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %148, i32 0, i32 1
  %call169 = call i32 @_ZL19preProcessScanlinesPPhPmPKhjjPK11LodePNGInfoPK22LodePNGEncoderSettings(i8** %data, i64* %datasize, i8* %145, i32 %146, i32 %147, %struct.LodePNGInfo* %info, %struct.LodePNGEncoderSettings* %encoder168)
  %149 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error170 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %149, i32 0, i32 4
  store i32 %call169, i32* %error170, align 8, !tbaa !105
  br label %if.end171

if.end171:                                        ; preds = %if.then167, %if.end164
  %150 = load i8*, i8** %converted, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %150)
  %151 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error172 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %151, i32 0, i32 4
  %152 = load i32, i32* %error172, align 8, !tbaa !105
  %tobool173 = icmp ne i32 %152, 0
  br i1 %tobool173, label %if.then174, label %if.end175

if.then174:                                       ; preds = %if.end171
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup176

if.end175:                                        ; preds = %if.end171
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup176

cleanup176:                                       ; preds = %if.then174, %if.end175
  %153 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %153) #16
  %154 = bitcast i8** %converted to i8*
  call void @llvm.lifetime.end(i64 8, i8* %154) #16
  %cleanup.dest178 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest178, label %cleanup509 [
    i32 0, label %cleanup.cont179
    i32 2, label %cleanup505
  ]

cleanup.cont179:                                  ; preds = %cleanup176
  br label %if.end187

if.else:                                          ; preds = %if.end138
  %155 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %156 = load i32, i32* %w.addr, align 4, !tbaa !8
  %157 = load i32, i32* %h.addr, align 4, !tbaa !8
  %158 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder180 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %158, i32 0, i32 1
  %call181 = call i32 @_ZL19preProcessScanlinesPPhPmPKhjjPK11LodePNGInfoPK22LodePNGEncoderSettings(i8** %data, i64* %datasize, i8* %155, i32 %156, i32 %157, %struct.LodePNGInfo* %info, %struct.LodePNGEncoderSettings* %encoder180)
  %159 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error182 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %159, i32 0, i32 4
  store i32 %call181, i32* %error182, align 8, !tbaa !105
  %160 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error183 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %160, i32 0, i32 4
  %161 = load i32, i32* %error183, align 8, !tbaa !105
  %tobool184 = icmp ne i32 %161, 0
  br i1 %tobool184, label %if.then185, label %if.end186

if.then185:                                       ; preds = %if.else
  br label %cleanup505

if.end186:                                        ; preds = %if.else
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %cleanup.cont179
  %162 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %162) #16
  %call188 = call i32 @_ZL14writeSignatureP8ucvector(%struct.ucvector* %outv)
  %163 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error189 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %163, i32 0, i32 4
  store i32 %call188, i32* %error189, align 8, !tbaa !105
  %164 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error190 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %164, i32 0, i32 4
  %165 = load i32, i32* %error190, align 8, !tbaa !105
  %tobool191 = icmp ne i32 %165, 0
  br i1 %tobool191, label %if.then192, label %if.end193

if.then192:                                       ; preds = %if.end187
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end193:                                        ; preds = %if.end187
  %166 = load i32, i32* %w.addr, align 4, !tbaa !8
  %167 = load i32, i32* %h.addr, align 4, !tbaa !8
  %color194 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %colortype195 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color194, i32 0, i32 0
  %168 = load i32, i32* %colortype195, align 8, !tbaa !111
  %color196 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %bitdepth197 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color196, i32 0, i32 1
  %169 = load i32, i32* %bitdepth197, align 4, !tbaa !110
  %interlace_method198 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 2
  %170 = load i32, i32* %interlace_method198, align 8, !tbaa !77
  %call199 = call i32 @_ZL13addChunk_IHDRP8ucvectorjj16LodePNGColorTypejj(%struct.ucvector* %outv, i32 %166, i32 %167, i32 %168, i32 %169, i32 %170)
  %171 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error200 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %171, i32 0, i32 4
  store i32 %call199, i32* %error200, align 8, !tbaa !105
  %172 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error201 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %172, i32 0, i32 4
  %173 = load i32, i32* %error201, align 8, !tbaa !105
  %tobool202 = icmp ne i32 %173, 0
  br i1 %tobool202, label %if.then203, label %if.end204

if.then203:                                       ; preds = %if.end193
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end204:                                        ; preds = %if.end193
  %unknown_chunks_data = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 39
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data, i64 0, i64 0
  %174 = load i8*, i8** %arrayidx, align 8, !tbaa !2
  %tobool205 = icmp ne i8* %174, null
  br i1 %tobool205, label %if.then206, label %if.end216

if.then206:                                       ; preds = %if.end204
  %unknown_chunks_data207 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 39
  %arrayidx208 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data207, i64 0, i64 0
  %175 = load i8*, i8** %arrayidx208, align 8, !tbaa !2
  %unknown_chunks_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 40
  %arrayidx209 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size, i64 0, i64 0
  %176 = load i64, i64* %arrayidx209, align 8, !tbaa !6
  %call210 = call i32 @_ZL16addUnknownChunksP8ucvectorPhm(%struct.ucvector* %outv, i8* %175, i64 %176)
  %177 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error211 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %177, i32 0, i32 4
  store i32 %call210, i32* %error211, align 8, !tbaa !105
  %178 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error212 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %178, i32 0, i32 4
  %179 = load i32, i32* %error212, align 8, !tbaa !105
  %tobool213 = icmp ne i32 %179, 0
  br i1 %tobool213, label %if.then214, label %if.end215

if.then214:                                       ; preds = %if.then206
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end215:                                        ; preds = %if.then206
  br label %if.end216

if.end216:                                        ; preds = %if.end215, %if.end204
  %iccp_defined217 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 35
  %180 = load i32, i32* %iccp_defined217, align 8, !tbaa !74
  %tobool218 = icmp ne i32 %180, 0
  br i1 %tobool218, label %if.then219, label %if.end228

if.then219:                                       ; preds = %if.end216
  %181 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder220 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %181, i32 0, i32 1
  %zlibsettings221 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder220, i32 0, i32 0
  %call222 = call i32 @_ZL13addChunk_iCCPP8ucvectorPK11LodePNGInfoP23LodePNGCompressSettings(%struct.ucvector* %outv, %struct.LodePNGInfo* %info, %struct.LodePNGCompressSettings* %zlibsettings221)
  %182 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error223 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %182, i32 0, i32 4
  store i32 %call222, i32* %error223, align 8, !tbaa !105
  %183 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error224 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %183, i32 0, i32 4
  %184 = load i32, i32* %error224, align 8, !tbaa !105
  %tobool225 = icmp ne i32 %184, 0
  br i1 %tobool225, label %if.then226, label %if.end227

if.then226:                                       ; preds = %if.then219
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end227:                                        ; preds = %if.then219
  br label %if.end228

if.end228:                                        ; preds = %if.end227, %if.end216
  %srgb_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 33
  %185 = load i32, i32* %srgb_defined, align 8, !tbaa !88
  %tobool229 = icmp ne i32 %185, 0
  br i1 %tobool229, label %if.then230, label %if.end237

if.then230:                                       ; preds = %if.end228
  %call231 = call i32 @_ZL13addChunk_sRGBP8ucvectorPK11LodePNGInfo(%struct.ucvector* %outv, %struct.LodePNGInfo* %info)
  %186 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error232 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %186, i32 0, i32 4
  store i32 %call231, i32* %error232, align 8, !tbaa !105
  %187 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error233 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %187, i32 0, i32 4
  %188 = load i32, i32* %error233, align 8, !tbaa !105
  %tobool234 = icmp ne i32 %188, 0
  br i1 %tobool234, label %if.then235, label %if.end236

if.then235:                                       ; preds = %if.then230
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end236:                                        ; preds = %if.then230
  br label %if.end237

if.end237:                                        ; preds = %if.end236, %if.end228
  %gama_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 22
  %189 = load i32, i32* %gama_defined, align 4, !tbaa !86
  %tobool238 = icmp ne i32 %189, 0
  br i1 %tobool238, label %if.then239, label %if.end246

if.then239:                                       ; preds = %if.end237
  %call240 = call i32 @_ZL13addChunk_gAMAP8ucvectorPK11LodePNGInfo(%struct.ucvector* %outv, %struct.LodePNGInfo* %info)
  %190 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error241 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %190, i32 0, i32 4
  store i32 %call240, i32* %error241, align 8, !tbaa !105
  %191 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error242 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %191, i32 0, i32 4
  %192 = load i32, i32* %error242, align 8, !tbaa !105
  %tobool243 = icmp ne i32 %192, 0
  br i1 %tobool243, label %if.then244, label %if.end245

if.then244:                                       ; preds = %if.then239
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end245:                                        ; preds = %if.then239
  br label %if.end246

if.end246:                                        ; preds = %if.end245, %if.end237
  %chrm_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 24
  %193 = load i32, i32* %chrm_defined, align 4, !tbaa !87
  %tobool247 = icmp ne i32 %193, 0
  br i1 %tobool247, label %if.then248, label %if.end255

if.then248:                                       ; preds = %if.end246
  %call249 = call i32 @_ZL13addChunk_cHRMP8ucvectorPK11LodePNGInfo(%struct.ucvector* %outv, %struct.LodePNGInfo* %info)
  %194 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error250 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %194, i32 0, i32 4
  store i32 %call249, i32* %error250, align 8, !tbaa !105
  %195 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error251 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %195, i32 0, i32 4
  %196 = load i32, i32* %error251, align 8, !tbaa !105
  %tobool252 = icmp ne i32 %196, 0
  br i1 %tobool252, label %if.then253, label %if.end254

if.then253:                                       ; preds = %if.then248
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end254:                                        ; preds = %if.then248
  br label %if.end255

if.end255:                                        ; preds = %if.end254, %if.end246
  %color256 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %colortype257 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color256, i32 0, i32 0
  %197 = load i32, i32* %colortype257, align 8, !tbaa !111
  %cmp258 = icmp eq i32 %197, 3
  br i1 %cmp258, label %if.then259, label %if.end267

if.then259:                                       ; preds = %if.end255
  %color260 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %call261 = call i32 @_ZL13addChunk_PLTEP8ucvectorPK16LodePNGColorMode(%struct.ucvector* %outv, %struct.LodePNGColorMode* %color260)
  %198 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error262 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %198, i32 0, i32 4
  store i32 %call261, i32* %error262, align 8, !tbaa !105
  %199 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error263 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %199, i32 0, i32 4
  %200 = load i32, i32* %error263, align 8, !tbaa !105
  %tobool264 = icmp ne i32 %200, 0
  br i1 %tobool264, label %if.then265, label %if.end266

if.then265:                                       ; preds = %if.then259
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end266:                                        ; preds = %if.then259
  br label %if.end267

if.end267:                                        ; preds = %if.end266, %if.end255
  %201 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder268 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %201, i32 0, i32 1
  %force_palette269 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder268, i32 0, i32 5
  %202 = load i32, i32* %force_palette269, align 8, !tbaa !158
  %tobool270 = icmp ne i32 %202, 0
  br i1 %tobool270, label %land.lhs.true271, label %if.end287

land.lhs.true271:                                 ; preds = %if.end267
  %color272 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %colortype273 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color272, i32 0, i32 0
  %203 = load i32, i32* %colortype273, align 8, !tbaa !111
  %cmp274 = icmp eq i32 %203, 2
  br i1 %cmp274, label %if.then279, label %lor.lhs.false275

lor.lhs.false275:                                 ; preds = %land.lhs.true271
  %color276 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %colortype277 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color276, i32 0, i32 0
  %204 = load i32, i32* %colortype277, align 8, !tbaa !111
  %cmp278 = icmp eq i32 %204, 6
  br i1 %cmp278, label %if.then279, label %if.end287

if.then279:                                       ; preds = %lor.lhs.false275, %land.lhs.true271
  %color280 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %call281 = call i32 @_ZL13addChunk_PLTEP8ucvectorPK16LodePNGColorMode(%struct.ucvector* %outv, %struct.LodePNGColorMode* %color280)
  %205 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error282 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %205, i32 0, i32 4
  store i32 %call281, i32* %error282, align 8, !tbaa !105
  %206 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error283 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %206, i32 0, i32 4
  %207 = load i32, i32* %error283, align 8, !tbaa !105
  %tobool284 = icmp ne i32 %207, 0
  br i1 %tobool284, label %if.then285, label %if.end286

if.then285:                                       ; preds = %if.then279
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end286:                                        ; preds = %if.then279
  br label %if.end287

if.end287:                                        ; preds = %if.end286, %lor.lhs.false275, %if.end267
  %color288 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 3
  %call289 = call i32 @_ZL13addChunk_tRNSP8ucvectorPK16LodePNGColorMode(%struct.ucvector* %outv, %struct.LodePNGColorMode* %color288)
  %208 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error290 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %208, i32 0, i32 4
  store i32 %call289, i32* %error290, align 8, !tbaa !105
  %209 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error291 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %209, i32 0, i32 4
  %210 = load i32, i32* %error291, align 8, !tbaa !105
  %tobool292 = icmp ne i32 %210, 0
  br i1 %tobool292, label %if.then293, label %if.end294

if.then293:                                       ; preds = %if.end287
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end294:                                        ; preds = %if.end287
  %background_defined295 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 4
  %211 = load i32, i32* %background_defined295, align 8, !tbaa !80
  %tobool296 = icmp ne i32 %211, 0
  br i1 %tobool296, label %if.then297, label %if.end304

if.then297:                                       ; preds = %if.end294
  %call298 = call i32 @_ZL13addChunk_bKGDP8ucvectorPK11LodePNGInfo(%struct.ucvector* %outv, %struct.LodePNGInfo* %info)
  %212 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error299 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %212, i32 0, i32 4
  store i32 %call298, i32* %error299, align 8, !tbaa !105
  %213 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error300 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %213, i32 0, i32 4
  %214 = load i32, i32* %error300, align 8, !tbaa !105
  %tobool301 = icmp ne i32 %214, 0
  br i1 %tobool301, label %if.then302, label %if.end303

if.then302:                                       ; preds = %if.then297
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end303:                                        ; preds = %if.then297
  br label %if.end304

if.end304:                                        ; preds = %if.end303, %if.end294
  %phys_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 18
  %215 = load i32, i32* %phys_defined, align 4, !tbaa !85
  %tobool305 = icmp ne i32 %215, 0
  br i1 %tobool305, label %if.then306, label %if.end313

if.then306:                                       ; preds = %if.end304
  %call307 = call i32 @_ZL13addChunk_pHYsP8ucvectorPK11LodePNGInfo(%struct.ucvector* %outv, %struct.LodePNGInfo* %info)
  %216 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error308 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %216, i32 0, i32 4
  store i32 %call307, i32* %error308, align 8, !tbaa !105
  %217 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error309 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %217, i32 0, i32 4
  %218 = load i32, i32* %error309, align 8, !tbaa !105
  %tobool310 = icmp ne i32 %218, 0
  br i1 %tobool310, label %if.then311, label %if.end312

if.then311:                                       ; preds = %if.then306
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end312:                                        ; preds = %if.then306
  br label %if.end313

if.end313:                                        ; preds = %if.end312, %if.end304
  %unknown_chunks_data314 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 39
  %arrayidx315 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data314, i64 0, i64 1
  %219 = load i8*, i8** %arrayidx315, align 8, !tbaa !2
  %tobool316 = icmp ne i8* %219, null
  br i1 %tobool316, label %if.then317, label %if.end328

if.then317:                                       ; preds = %if.end313
  %unknown_chunks_data318 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 39
  %arrayidx319 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data318, i64 0, i64 1
  %220 = load i8*, i8** %arrayidx319, align 8, !tbaa !2
  %unknown_chunks_size320 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 40
  %arrayidx321 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size320, i64 0, i64 1
  %221 = load i64, i64* %arrayidx321, align 8, !tbaa !6
  %call322 = call i32 @_ZL16addUnknownChunksP8ucvectorPhm(%struct.ucvector* %outv, i8* %220, i64 %221)
  %222 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error323 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %222, i32 0, i32 4
  store i32 %call322, i32* %error323, align 8, !tbaa !105
  %223 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error324 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %223, i32 0, i32 4
  %224 = load i32, i32* %error324, align 8, !tbaa !105
  %tobool325 = icmp ne i32 %224, 0
  br i1 %tobool325, label %if.then326, label %if.end327

if.then326:                                       ; preds = %if.then317
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end327:                                        ; preds = %if.then317
  br label %if.end328

if.end328:                                        ; preds = %if.end327, %if.end313
  %225 = load i8*, i8** %data, align 8, !tbaa !2
  %226 = load i64, i64* %datasize, align 8, !tbaa !6
  %227 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder329 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %227, i32 0, i32 1
  %zlibsettings330 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder329, i32 0, i32 0
  %call331 = call i32 @_ZL13addChunk_IDATP8ucvectorPKhmP23LodePNGCompressSettings(%struct.ucvector* %outv, i8* %225, i64 %226, %struct.LodePNGCompressSettings* %zlibsettings330)
  %228 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error332 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %228, i32 0, i32 4
  store i32 %call331, i32* %error332, align 8, !tbaa !105
  %229 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error333 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %229, i32 0, i32 4
  %230 = load i32, i32* %error333, align 8, !tbaa !105
  %tobool334 = icmp ne i32 %230, 0
  br i1 %tobool334, label %if.then335, label %if.end336

if.then335:                                       ; preds = %if.end328
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end336:                                        ; preds = %if.end328
  %time_defined = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 16
  %231 = load i32, i32* %time_defined, align 8, !tbaa !84
  %tobool337 = icmp ne i32 %231, 0
  br i1 %tobool337, label %if.then338, label %if.end345

if.then338:                                       ; preds = %if.end336
  %time = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 17
  %call339 = call i32 @_ZL13addChunk_tIMEP8ucvectorPK11LodePNGTime(%struct.ucvector* %outv, %struct.LodePNGTime* %time)
  %232 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error340 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %232, i32 0, i32 4
  store i32 %call339, i32* %error340, align 8, !tbaa !105
  %233 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error341 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %233, i32 0, i32 4
  %234 = load i32, i32* %error341, align 8, !tbaa !105
  %tobool342 = icmp ne i32 %234, 0
  br i1 %tobool342, label %if.then343, label %if.end344

if.then343:                                       ; preds = %if.then338
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end344:                                        ; preds = %if.then338
  br label %if.end345

if.end345:                                        ; preds = %if.end344, %if.end336
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end345
  %235 = load i64, i64* %i, align 8, !tbaa !6
  %text_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 8
  %236 = load i64, i64* %text_num, align 8, !tbaa !66
  %cmp346 = icmp ne i64 %235, %236
  br i1 %cmp346, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %text_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 9
  %237 = load i8**, i8*** %text_keys, align 8, !tbaa !63
  %238 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx347 = getelementptr inbounds i8*, i8** %237, i64 %238
  %239 = load i8*, i8** %arrayidx347, align 8, !tbaa !2
  %call348 = call i64 @_ZL14lodepng_strlenPKc(i8* %239)
  %cmp349 = icmp ugt i64 %call348, 79
  br i1 %cmp349, label %if.then350, label %if.end352

if.then350:                                       ; preds = %for.body
  %240 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error351 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %240, i32 0, i32 4
  store i32 66, i32* %error351, align 8, !tbaa !105
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end352:                                        ; preds = %for.body
  %text_keys353 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 9
  %241 = load i8**, i8*** %text_keys353, align 8, !tbaa !63
  %242 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx354 = getelementptr inbounds i8*, i8** %241, i64 %242
  %243 = load i8*, i8** %arrayidx354, align 8, !tbaa !2
  %call355 = call i64 @_ZL14lodepng_strlenPKc(i8* %243)
  %cmp356 = icmp ult i64 %call355, 1
  br i1 %cmp356, label %if.then357, label %if.end359

if.then357:                                       ; preds = %if.end352
  %244 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error358 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %244, i32 0, i32 4
  store i32 67, i32* %error358, align 8, !tbaa !105
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end359:                                        ; preds = %if.end352
  %245 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder360 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %245, i32 0, i32 1
  %text_compression = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder360, i32 0, i32 7
  %246 = load i32, i32* %text_compression, align 8, !tbaa !161
  %tobool361 = icmp ne i32 %246, 0
  br i1 %tobool361, label %if.then362, label %if.else374

if.then362:                                       ; preds = %if.end359
  %text_keys363 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 9
  %247 = load i8**, i8*** %text_keys363, align 8, !tbaa !63
  %248 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx364 = getelementptr inbounds i8*, i8** %247, i64 %248
  %249 = load i8*, i8** %arrayidx364, align 8, !tbaa !2
  %text_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 10
  %250 = load i8**, i8*** %text_strings, align 8, !tbaa !67
  %251 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx365 = getelementptr inbounds i8*, i8** %250, i64 %251
  %252 = load i8*, i8** %arrayidx365, align 8, !tbaa !2
  %253 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder366 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %253, i32 0, i32 1
  %zlibsettings367 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder366, i32 0, i32 0
  %call368 = call i32 @_ZL13addChunk_zTXtP8ucvectorPKcS2_P23LodePNGCompressSettings(%struct.ucvector* %outv, i8* %249, i8* %252, %struct.LodePNGCompressSettings* %zlibsettings367)
  %254 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error369 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %254, i32 0, i32 4
  store i32 %call368, i32* %error369, align 8, !tbaa !105
  %255 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error370 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %255, i32 0, i32 4
  %256 = load i32, i32* %error370, align 8, !tbaa !105
  %tobool371 = icmp ne i32 %256, 0
  br i1 %tobool371, label %if.then372, label %if.end373

if.then372:                                       ; preds = %if.then362
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end373:                                        ; preds = %if.then362
  br label %if.end385

if.else374:                                       ; preds = %if.end359
  %text_keys375 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 9
  %257 = load i8**, i8*** %text_keys375, align 8, !tbaa !63
  %258 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx376 = getelementptr inbounds i8*, i8** %257, i64 %258
  %259 = load i8*, i8** %arrayidx376, align 8, !tbaa !2
  %text_strings377 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 10
  %260 = load i8**, i8*** %text_strings377, align 8, !tbaa !67
  %261 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx378 = getelementptr inbounds i8*, i8** %260, i64 %261
  %262 = load i8*, i8** %arrayidx378, align 8, !tbaa !2
  %call379 = call i32 @_ZL13addChunk_tEXtP8ucvectorPKcS2_(%struct.ucvector* %outv, i8* %259, i8* %262)
  %263 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error380 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %263, i32 0, i32 4
  store i32 %call379, i32* %error380, align 8, !tbaa !105
  %264 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error381 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %264, i32 0, i32 4
  %265 = load i32, i32* %error381, align 8, !tbaa !105
  %tobool382 = icmp ne i32 %265, 0
  br i1 %tobool382, label %if.then383, label %if.end384

if.then383:                                       ; preds = %if.else374
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end384:                                        ; preds = %if.else374
  br label %if.end385

if.end385:                                        ; preds = %if.end384, %if.end373
  br label %for.inc

for.inc:                                          ; preds = %if.end385
  %266 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %266, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %267 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder386 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %267, i32 0, i32 1
  %add_id = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder386, i32 0, i32 6
  %268 = load i32, i32* %add_id, align 4, !tbaa !162
  %tobool387 = icmp ne i32 %268, 0
  br i1 %tobool387, label %if.then388, label %if.end446

if.then388:                                       ; preds = %for.end
  %269 = bitcast i32* %already_added_id_text to i8*
  call void @llvm.lifetime.start(i64 4, i8* %269) #16
  store i32 0, i32* %already_added_id_text, align 4, !tbaa !8
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond389

for.cond389:                                      ; preds = %for.inc431, %if.then388
  %270 = load i64, i64* %i, align 8, !tbaa !6
  %text_num390 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 8
  %271 = load i64, i64* %text_num390, align 8, !tbaa !66
  %cmp391 = icmp ne i64 %270, %271
  br i1 %cmp391, label %for.body392, label %for.end433

for.body392:                                      ; preds = %for.cond389
  %272 = bitcast i8** %k to i8*
  call void @llvm.lifetime.start(i64 8, i8* %272) #16
  %text_keys393 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 9
  %273 = load i8**, i8*** %text_keys393, align 8, !tbaa !63
  %274 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx394 = getelementptr inbounds i8*, i8** %273, i64 %274
  %275 = load i8*, i8** %arrayidx394, align 8, !tbaa !2
  store i8* %275, i8** %k, align 8, !tbaa !2
  %276 = load i8*, i8** %k, align 8, !tbaa !2
  %arrayidx395 = getelementptr inbounds i8, i8* %276, i64 0
  %277 = load i8, i8* %arrayidx395, align 1, !tbaa !16
  %conv396 = sext i8 %277 to i32
  %cmp397 = icmp eq i32 %conv396, 76
  br i1 %cmp397, label %land.lhs.true398, label %if.end427

land.lhs.true398:                                 ; preds = %for.body392
  %278 = load i8*, i8** %k, align 8, !tbaa !2
  %arrayidx399 = getelementptr inbounds i8, i8* %278, i64 1
  %279 = load i8, i8* %arrayidx399, align 1, !tbaa !16
  %conv400 = sext i8 %279 to i32
  %cmp401 = icmp eq i32 %conv400, 111
  br i1 %cmp401, label %land.lhs.true402, label %if.end427

land.lhs.true402:                                 ; preds = %land.lhs.true398
  %280 = load i8*, i8** %k, align 8, !tbaa !2
  %arrayidx403 = getelementptr inbounds i8, i8* %280, i64 2
  %281 = load i8, i8* %arrayidx403, align 1, !tbaa !16
  %conv404 = sext i8 %281 to i32
  %cmp405 = icmp eq i32 %conv404, 100
  br i1 %cmp405, label %land.lhs.true406, label %if.end427

land.lhs.true406:                                 ; preds = %land.lhs.true402
  %282 = load i8*, i8** %k, align 8, !tbaa !2
  %arrayidx407 = getelementptr inbounds i8, i8* %282, i64 3
  %283 = load i8, i8* %arrayidx407, align 1, !tbaa !16
  %conv408 = sext i8 %283 to i32
  %cmp409 = icmp eq i32 %conv408, 101
  br i1 %cmp409, label %land.lhs.true410, label %if.end427

land.lhs.true410:                                 ; preds = %land.lhs.true406
  %284 = load i8*, i8** %k, align 8, !tbaa !2
  %arrayidx411 = getelementptr inbounds i8, i8* %284, i64 4
  %285 = load i8, i8* %arrayidx411, align 1, !tbaa !16
  %conv412 = sext i8 %285 to i32
  %cmp413 = icmp eq i32 %conv412, 80
  br i1 %cmp413, label %land.lhs.true414, label %if.end427

land.lhs.true414:                                 ; preds = %land.lhs.true410
  %286 = load i8*, i8** %k, align 8, !tbaa !2
  %arrayidx415 = getelementptr inbounds i8, i8* %286, i64 5
  %287 = load i8, i8* %arrayidx415, align 1, !tbaa !16
  %conv416 = sext i8 %287 to i32
  %cmp417 = icmp eq i32 %conv416, 78
  br i1 %cmp417, label %land.lhs.true418, label %if.end427

land.lhs.true418:                                 ; preds = %land.lhs.true414
  %288 = load i8*, i8** %k, align 8, !tbaa !2
  %arrayidx419 = getelementptr inbounds i8, i8* %288, i64 6
  %289 = load i8, i8* %arrayidx419, align 1, !tbaa !16
  %conv420 = sext i8 %289 to i32
  %cmp421 = icmp eq i32 %conv420, 71
  br i1 %cmp421, label %land.lhs.true422, label %if.end427

land.lhs.true422:                                 ; preds = %land.lhs.true418
  %290 = load i8*, i8** %k, align 8, !tbaa !2
  %arrayidx423 = getelementptr inbounds i8, i8* %290, i64 7
  %291 = load i8, i8* %arrayidx423, align 1, !tbaa !16
  %conv424 = sext i8 %291 to i32
  %cmp425 = icmp eq i32 %conv424, 0
  br i1 %cmp425, label %if.then426, label %if.end427

if.then426:                                       ; preds = %land.lhs.true422
  store i32 1, i32* %already_added_id_text, align 4, !tbaa !8
  store i32 6, i32* %cleanup.dest.slot, align 4
  br label %cleanup428

if.end427:                                        ; preds = %land.lhs.true422, %land.lhs.true418, %land.lhs.true414, %land.lhs.true410, %land.lhs.true406, %land.lhs.true402, %land.lhs.true398, %for.body392
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup428

cleanup428:                                       ; preds = %if.end427, %if.then426
  %292 = bitcast i8** %k to i8*
  call void @llvm.lifetime.end(i64 8, i8* %292) #16
  %cleanup.dest429 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest429, label %unreachable [
    i32 0, label %cleanup.cont430
    i32 6, label %for.end433
  ]

cleanup.cont430:                                  ; preds = %cleanup428
  br label %for.inc431

for.inc431:                                       ; preds = %cleanup.cont430
  %293 = load i64, i64* %i, align 8, !tbaa !6
  %inc432 = add i64 %293, 1
  store i64 %inc432, i64* %i, align 8, !tbaa !6
  br label %for.cond389

for.end433:                                       ; preds = %cleanup428, %for.cond389
  %294 = load i32, i32* %already_added_id_text, align 4, !tbaa !8
  %cmp434 = icmp eq i32 %294, 0
  br i1 %cmp434, label %if.then435, label %if.end442

if.then435:                                       ; preds = %for.end433
  %295 = load i8*, i8** @LODEPNG_VERSION_STRING, align 8, !tbaa !2
  %call436 = call i32 @_ZL13addChunk_tEXtP8ucvectorPKcS2_(%struct.ucvector* %outv, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), i8* %295)
  %296 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error437 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %296, i32 0, i32 4
  store i32 %call436, i32* %error437, align 8, !tbaa !105
  %297 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error438 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %297, i32 0, i32 4
  %298 = load i32, i32* %error438, align 8, !tbaa !105
  %tobool439 = icmp ne i32 %298, 0
  br i1 %tobool439, label %if.then440, label %if.end441

if.then440:                                       ; preds = %if.then435
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup443

if.end441:                                        ; preds = %if.then435
  br label %if.end442

if.end442:                                        ; preds = %if.end441, %for.end433
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup443

cleanup443:                                       ; preds = %if.then440, %if.end442
  %299 = bitcast i32* %already_added_id_text to i8*
  call void @llvm.lifetime.end(i64 4, i8* %299) #16
  %cleanup.dest444 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest444, label %cleanup502 [
    i32 0, label %cleanup.cont445
  ]

cleanup.cont445:                                  ; preds = %cleanup443
  br label %if.end446

if.end446:                                        ; preds = %cleanup.cont445, %for.end
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond447

for.cond447:                                      ; preds = %for.inc478, %if.end446
  %300 = load i64, i64* %i, align 8, !tbaa !6
  %itext_num = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 11
  %301 = load i64, i64* %itext_num, align 8, !tbaa !68
  %cmp448 = icmp ne i64 %300, %301
  br i1 %cmp448, label %for.body449, label %for.end480

for.body449:                                      ; preds = %for.cond447
  %itext_keys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 12
  %302 = load i8**, i8*** %itext_keys, align 8, !tbaa !69
  %303 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx450 = getelementptr inbounds i8*, i8** %302, i64 %303
  %304 = load i8*, i8** %arrayidx450, align 8, !tbaa !2
  %call451 = call i64 @_ZL14lodepng_strlenPKc(i8* %304)
  %cmp452 = icmp ugt i64 %call451, 79
  br i1 %cmp452, label %if.then453, label %if.end455

if.then453:                                       ; preds = %for.body449
  %305 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error454 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %305, i32 0, i32 4
  store i32 66, i32* %error454, align 8, !tbaa !105
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end455:                                        ; preds = %for.body449
  %itext_keys456 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 12
  %306 = load i8**, i8*** %itext_keys456, align 8, !tbaa !69
  %307 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx457 = getelementptr inbounds i8*, i8** %306, i64 %307
  %308 = load i8*, i8** %arrayidx457, align 8, !tbaa !2
  %call458 = call i64 @_ZL14lodepng_strlenPKc(i8* %308)
  %cmp459 = icmp ult i64 %call458, 1
  br i1 %cmp459, label %if.then460, label %if.end462

if.then460:                                       ; preds = %if.end455
  %309 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error461 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %309, i32 0, i32 4
  store i32 67, i32* %error461, align 8, !tbaa !105
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end462:                                        ; preds = %if.end455
  %310 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder463 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %310, i32 0, i32 1
  %text_compression464 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder463, i32 0, i32 7
  %311 = load i32, i32* %text_compression464, align 8, !tbaa !161
  %itext_keys465 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 12
  %312 = load i8**, i8*** %itext_keys465, align 8, !tbaa !69
  %313 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx466 = getelementptr inbounds i8*, i8** %312, i64 %313
  %314 = load i8*, i8** %arrayidx466, align 8, !tbaa !2
  %itext_langtags = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 13
  %315 = load i8**, i8*** %itext_langtags, align 8, !tbaa !70
  %316 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx467 = getelementptr inbounds i8*, i8** %315, i64 %316
  %317 = load i8*, i8** %arrayidx467, align 8, !tbaa !2
  %itext_transkeys = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 14
  %318 = load i8**, i8*** %itext_transkeys, align 8, !tbaa !71
  %319 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx468 = getelementptr inbounds i8*, i8** %318, i64 %319
  %320 = load i8*, i8** %arrayidx468, align 8, !tbaa !2
  %itext_strings = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 15
  %321 = load i8**, i8*** %itext_strings, align 8, !tbaa !72
  %322 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx469 = getelementptr inbounds i8*, i8** %321, i64 %322
  %323 = load i8*, i8** %arrayidx469, align 8, !tbaa !2
  %324 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %encoder470 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %324, i32 0, i32 1
  %zlibsettings471 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %encoder470, i32 0, i32 0
  %call472 = call i32 @_ZL13addChunk_iTXtP8ucvectorjPKcS2_S2_S2_P23LodePNGCompressSettings(%struct.ucvector* %outv, i32 %311, i8* %314, i8* %317, i8* %320, i8* %323, %struct.LodePNGCompressSettings* %zlibsettings471)
  %325 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error473 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %325, i32 0, i32 4
  store i32 %call472, i32* %error473, align 8, !tbaa !105
  %326 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error474 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %326, i32 0, i32 4
  %327 = load i32, i32* %error474, align 8, !tbaa !105
  %tobool475 = icmp ne i32 %327, 0
  br i1 %tobool475, label %if.then476, label %if.end477

if.then476:                                       ; preds = %if.end462
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end477:                                        ; preds = %if.end462
  br label %for.inc478

for.inc478:                                       ; preds = %if.end477
  %328 = load i64, i64* %i, align 8, !tbaa !6
  %inc479 = add i64 %328, 1
  store i64 %inc479, i64* %i, align 8, !tbaa !6
  br label %for.cond447

for.end480:                                       ; preds = %for.cond447
  %unknown_chunks_data481 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 39
  %arrayidx482 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data481, i64 0, i64 2
  %329 = load i8*, i8** %arrayidx482, align 8, !tbaa !2
  %tobool483 = icmp ne i8* %329, null
  br i1 %tobool483, label %if.then484, label %if.end495

if.then484:                                       ; preds = %for.end480
  %unknown_chunks_data485 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 39
  %arrayidx486 = getelementptr inbounds [3 x i8*], [3 x i8*]* %unknown_chunks_data485, i64 0, i64 2
  %330 = load i8*, i8** %arrayidx486, align 8, !tbaa !2
  %unknown_chunks_size487 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info, i32 0, i32 40
  %arrayidx488 = getelementptr inbounds [3 x i64], [3 x i64]* %unknown_chunks_size487, i64 0, i64 2
  %331 = load i64, i64* %arrayidx488, align 8, !tbaa !6
  %call489 = call i32 @_ZL16addUnknownChunksP8ucvectorPhm(%struct.ucvector* %outv, i8* %330, i64 %331)
  %332 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error490 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %332, i32 0, i32 4
  store i32 %call489, i32* %error490, align 8, !tbaa !105
  %333 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error491 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %333, i32 0, i32 4
  %334 = load i32, i32* %error491, align 8, !tbaa !105
  %tobool492 = icmp ne i32 %334, 0
  br i1 %tobool492, label %if.then493, label %if.end494

if.then493:                                       ; preds = %if.then484
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end494:                                        ; preds = %if.then484
  br label %if.end495

if.end495:                                        ; preds = %if.end494, %for.end480
  %call496 = call i32 @_ZL13addChunk_IENDP8ucvector(%struct.ucvector* %outv)
  %335 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error497 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %335, i32 0, i32 4
  store i32 %call496, i32* %error497, align 8, !tbaa !105
  %336 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error498 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %336, i32 0, i32 4
  %337 = load i32, i32* %error498, align 8, !tbaa !105
  %tobool499 = icmp ne i32 %337, 0
  br i1 %tobool499, label %if.then500, label %if.end501

if.then500:                                       ; preds = %if.end495
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

if.end501:                                        ; preds = %if.end495
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup502

cleanup502:                                       ; preds = %if.then500, %if.then493, %if.then476, %if.then460, %if.then453, %if.then383, %if.then372, %if.then357, %if.then350, %if.then343, %if.then335, %if.then326, %if.then311, %if.then302, %if.then293, %if.then285, %if.then265, %if.then253, %if.then244, %if.then235, %if.then226, %if.then214, %if.then203, %if.then192, %if.end501, %cleanup443
  %338 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %338) #16
  %cleanup.dest503 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest503, label %cleanup509 [
    i32 0, label %cleanup.cont504
    i32 2, label %cleanup505
  ]

cleanup.cont504:                                  ; preds = %cleanup502
  br label %cleanup505

cleanup505:                                       ; preds = %cleanup.cont504, %cleanup502, %cleanup176, %cleanup133, %cleanup101, %if.then185, %if.then33, %if.then24, %if.then15, %if.then11, %if.then
  call void @_Z20lodepng_info_cleanupP11LodePNGInfo(%struct.LodePNGInfo* %info)
  %339 = load i8*, i8** %data, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %339)
  %data506 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %outv, i32 0, i32 0
  %340 = load i8*, i8** %data506, align 8, !tbaa !32
  %341 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %340, i8** %341, align 8, !tbaa !2
  %size507 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %outv, i32 0, i32 1
  %342 = load i64, i64* %size507, align 8, !tbaa !34
  %343 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %342, i64* %343, align 8, !tbaa !6
  %344 = load %struct.LodePNGState*, %struct.LodePNGState** %state.addr, align 8, !tbaa !2
  %error508 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %344, i32 0, i32 4
  %345 = load i32, i32* %error508, align 8, !tbaa !105
  store i32 %345, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup509

cleanup509:                                       ; preds = %cleanup505, %cleanup502, %cleanup176, %cleanup133, %cleanup101
  %346 = bitcast %struct.LodePNGInfo** %info_png to i8*
  call void @llvm.lifetime.end(i64 8, i8* %346) #16
  %347 = bitcast %struct.LodePNGInfo* %info to i8*
  call void @llvm.lifetime.end(i64 312, i8* %347) #16
  %348 = bitcast %struct.ucvector* %outv to i8*
  call void @llvm.lifetime.end(i64 24, i8* %348) #16
  %349 = bitcast i64* %datasize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %349) #16
  %350 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %350) #16
  %351 = load i32, i32* %retval, align 4
  ret i32 %351

unreachable:                                      ; preds = %cleanup428
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL16isGrayICCProfilePKhj(i8* %profile, i32 %size) #4 {
entry:
  %retval = alloca i32, align 4
  %profile.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  store i8* %profile, i8** %profile.addr, align 8, !tbaa !2
  store i32 %size, i32* %size.addr, align 4, !tbaa !8
  %0 = load i32, i32* %size.addr, align 4, !tbaa !8
  %cmp = icmp ult i32 %0, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 16
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 71
  br i1 %cmp1, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %3 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i64 17
  %4 = load i8, i8* %arrayidx2, align 1, !tbaa !16
  %conv3 = zext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv3, 82
  br i1 %cmp4, label %land.lhs.true5, label %land.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %5 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 18
  %6 = load i8, i8* %arrayidx6, align 1, !tbaa !16
  %conv7 = zext i8 %6 to i32
  %cmp8 = icmp eq i32 %conv7, 65
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true5
  %7 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %arrayidx9 = getelementptr inbounds i8, i8* %7, i64 19
  %8 = load i8, i8* %arrayidx9, align 1, !tbaa !16
  %conv10 = zext i8 %8 to i32
  %cmp11 = icmp eq i32 %conv10, 89
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true5, %land.lhs.true, %if.end
  %9 = phi i1 [ false, %land.lhs.true5 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp11, %land.rhs ]
  %conv12 = zext i1 %9 to i32
  store i32 %conv12, i32* %retval, align 4
  br label %return

return:                                           ; preds = %land.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL15isRGBICCProfilePKhj(i8* %profile, i32 %size) #4 {
entry:
  %retval = alloca i32, align 4
  %profile.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  store i8* %profile, i8** %profile.addr, align 8, !tbaa !2
  store i32 %size, i32* %size.addr, align 4, !tbaa !8
  %0 = load i32, i32* %size.addr, align 4, !tbaa !8
  %cmp = icmp ult i32 %0, 20
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 16
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %2 to i32
  %cmp1 = icmp eq i32 %conv, 82
  br i1 %cmp1, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.end
  %3 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i64 17
  %4 = load i8, i8* %arrayidx2, align 1, !tbaa !16
  %conv3 = zext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv3, 71
  br i1 %cmp4, label %land.lhs.true5, label %land.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %5 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %arrayidx6 = getelementptr inbounds i8, i8* %5, i64 18
  %6 = load i8, i8* %arrayidx6, align 1, !tbaa !16
  %conv7 = zext i8 %6 to i32
  %cmp8 = icmp eq i32 %conv7, 66
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true5
  %7 = load i8*, i8** %profile.addr, align 8, !tbaa !2
  %arrayidx9 = getelementptr inbounds i8, i8* %7, i64 19
  %8 = load i8, i8* %arrayidx9, align 1, !tbaa !16
  %conv10 = zext i8 %8 to i32
  %cmp11 = icmp eq i32 %conv10, 32
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true5, %land.lhs.true, %if.end
  %9 = phi i1 [ false, %land.lhs.true5 ], [ false, %land.lhs.true ], [ false, %if.end ], [ %cmp11, %land.rhs ]
  %conv12 = zext i1 %9 to i32
  store i32 %conv12, i32* %retval, align 4
  br label %return

return:                                           ; preds = %land.end, %if.then
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL23lodepng_color_stats_addP17LodePNGColorStatsjjjj(%struct.LodePNGColorStats* %stats, i32 %r, i32 %g, i32 %b, i32 %a) #0 {
entry:
  %stats.addr = alloca %struct.LodePNGColorStats*, align 8
  %r.addr = alloca i32, align 4
  %g.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %a.addr = alloca i32, align 4
  %error = alloca i32, align 4
  %image = alloca [8 x i8], align 1
  %mode = alloca %struct.LodePNGColorMode, align 8
  store %struct.LodePNGColorStats* %stats, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  store i32 %r, i32* %r.addr, align 4, !tbaa !8
  store i32 %g, i32* %g.addr, align 4, !tbaa !8
  store i32 %b, i32* %b.addr, align 4, !tbaa !8
  store i32 %a, i32* %a.addr, align 4, !tbaa !8
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast [8 x i8]* %image to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast %struct.LodePNGColorMode* %mode to i8*
  call void @llvm.lifetime.start(i64 40, i8* %2) #16
  call void @_Z23lodepng_color_mode_initP16LodePNGColorMode(%struct.LodePNGColorMode* %mode)
  %3 = load i32, i32* %r.addr, align 4, !tbaa !8
  %shr = lshr i32 %3, 8
  %conv = trunc i32 %shr to i8
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %image, i64 0, i64 0
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !16
  %4 = load i32, i32* %r.addr, align 4, !tbaa !8
  %conv1 = trunc i32 %4 to i8
  %arrayidx2 = getelementptr inbounds [8 x i8], [8 x i8]* %image, i64 0, i64 1
  store i8 %conv1, i8* %arrayidx2, align 1, !tbaa !16
  %5 = load i32, i32* %g.addr, align 4, !tbaa !8
  %shr3 = lshr i32 %5, 8
  %conv4 = trunc i32 %shr3 to i8
  %arrayidx5 = getelementptr inbounds [8 x i8], [8 x i8]* %image, i64 0, i64 2
  store i8 %conv4, i8* %arrayidx5, align 1, !tbaa !16
  %6 = load i32, i32* %g.addr, align 4, !tbaa !8
  %conv6 = trunc i32 %6 to i8
  %arrayidx7 = getelementptr inbounds [8 x i8], [8 x i8]* %image, i64 0, i64 3
  store i8 %conv6, i8* %arrayidx7, align 1, !tbaa !16
  %7 = load i32, i32* %b.addr, align 4, !tbaa !8
  %shr8 = lshr i32 %7, 8
  %conv9 = trunc i32 %shr8 to i8
  %arrayidx10 = getelementptr inbounds [8 x i8], [8 x i8]* %image, i64 0, i64 4
  store i8 %conv9, i8* %arrayidx10, align 1, !tbaa !16
  %8 = load i32, i32* %b.addr, align 4, !tbaa !8
  %conv11 = trunc i32 %8 to i8
  %arrayidx12 = getelementptr inbounds [8 x i8], [8 x i8]* %image, i64 0, i64 5
  store i8 %conv11, i8* %arrayidx12, align 1, !tbaa !16
  %9 = load i32, i32* %a.addr, align 4, !tbaa !8
  %shr13 = lshr i32 %9, 8
  %conv14 = trunc i32 %shr13 to i8
  %arrayidx15 = getelementptr inbounds [8 x i8], [8 x i8]* %image, i64 0, i64 6
  store i8 %conv14, i8* %arrayidx15, align 1, !tbaa !16
  %10 = load i32, i32* %a.addr, align 4, !tbaa !8
  %conv16 = trunc i32 %10 to i8
  %arrayidx17 = getelementptr inbounds [8 x i8], [8 x i8]* %image, i64 0, i64 7
  store i8 %conv16, i8* %arrayidx17, align 1, !tbaa !16
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %mode, i32 0, i32 1
  store i32 16, i32* %bitdepth, align 4, !tbaa !59
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %mode, i32 0, i32 0
  store i32 6, i32* %colortype, align 8, !tbaa !58
  %11 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %image, i32 0, i32 0
  %call = call i32 @_Z27lodepng_compute_color_statsP17LodePNGColorStatsPKhjjPK16LodePNGColorMode(%struct.LodePNGColorStats* %11, i8* %arraydecay, i32 1, i32 1, %struct.LodePNGColorMode* %mode)
  store i32 %call, i32* %error, align 4, !tbaa !8
  call void @_Z26lodepng_color_mode_cleanupP16LodePNGColorMode(%struct.LodePNGColorMode* %mode)
  %12 = load i32, i32* %error, align 4, !tbaa !8
  %13 = bitcast %struct.LodePNGColorMode* %mode to i8*
  call void @llvm.lifetime.end(i64 40, i8* %13) #16
  %14 = bitcast [8 x i8]* %image to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #16
  %15 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %15) #16
  ret i32 %12
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL17auto_choose_colorP16LodePNGColorModePKS_PK17LodePNGColorStats(%struct.LodePNGColorMode* %mode_out, %struct.LodePNGColorMode* %mode_in, %struct.LodePNGColorStats* %stats) #0 {
entry:
  %mode_out.addr = alloca %struct.LodePNGColorMode*, align 8
  %mode_in.addr = alloca %struct.LodePNGColorMode*, align 8
  %stats.addr = alloca %struct.LodePNGColorStats*, align 8
  %error = alloca i32, align 4
  %palettebits = alloca i32, align 4
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %numpixels = alloca i64, align 8
  %palette_ok = alloca i32, align 4
  %gray_ok = alloca i32, align 4
  %alpha = alloca i32, align 4
  %key = alloca i32, align 4
  %bits = alloca i32, align 4
  %p = alloca i8*, align 8
  %mask = alloca i32, align 4
  store %struct.LodePNGColorMode* %mode_out, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %mode_in, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  store %struct.LodePNGColorStats* %stats, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i32* %palettebits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = bitcast i64* %numpixels to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numpixels1 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %5, i32 0, i32 9
  %6 = load i64, i64* %numpixels1, align 8, !tbaa !102
  store i64 %6, i64* %numpixels, align 8, !tbaa !6
  %7 = bitcast i32* %palette_ok to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #16
  %8 = bitcast i32* %gray_ok to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #16
  %9 = bitcast i32* %alpha to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #16
  %10 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %alpha2 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %10, i32 0, i32 5
  %11 = load i32, i32* %alpha2, align 8, !tbaa !99
  store i32 %11, i32* %alpha, align 4, !tbaa !8
  %12 = bitcast i32* %key to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #16
  %13 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key3 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %13, i32 0, i32 1
  %14 = load i32, i32* %key3, align 4, !tbaa !95
  store i32 %14, i32* %key, align 4, !tbaa !8
  %15 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #16
  %16 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %bits4 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %16, i32 0, i32 8
  %17 = load i32, i32* %bits4, align 8, !tbaa !101
  store i32 %17, i32* %bits, align 4, !tbaa !8
  %18 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %18, i32 0, i32 4
  store i32 0, i32* %key_defined, align 8, !tbaa !52
  %19 = load i32, i32* %key, align 4, !tbaa !8
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %entry
  %20 = load i64, i64* %numpixels, align 8, !tbaa !6
  %cmp = icmp ule i64 %20, 16
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %alpha, align 4, !tbaa !8
  store i32 0, i32* %key, align 4, !tbaa !8
  %21 = load i32, i32* %bits, align 4, !tbaa !8
  %cmp5 = icmp ult i32 %21, 8
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.then
  store i32 8, i32* %bits, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then6, %if.then
  br label %if.end7

if.end7:                                          ; preds = %if.end, %land.lhs.true, %entry
  %22 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %colored = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %22, i32 0, i32 0
  %23 = load i32, i32* %colored, align 8, !tbaa !93
  %tobool8 = icmp ne i32 %23, 0
  %lnot = xor i1 %tobool8, true
  %conv = zext i1 %lnot to i32
  store i32 %conv, i32* %gray_ok, align 4, !tbaa !8
  %24 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %allow_greyscale = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %24, i32 0, i32 11
  %25 = load i32, i32* %allow_greyscale, align 4, !tbaa !104
  %tobool9 = icmp ne i32 %25, 0
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end7
  store i32 0, i32* %gray_ok, align 4, !tbaa !8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end7
  %26 = load i32, i32* %gray_ok, align 4, !tbaa !8
  %tobool12 = icmp ne i32 %26, 0
  br i1 %tobool12, label %if.end16, label %land.lhs.true13

land.lhs.true13:                                  ; preds = %if.end11
  %27 = load i32, i32* %bits, align 4, !tbaa !8
  %cmp14 = icmp ult i32 %27, 8
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true13
  store i32 8, i32* %bits, align 4, !tbaa !8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %land.lhs.true13, %if.end11
  %28 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %28, i32 0, i32 6
  %29 = load i32, i32* %numcolors, align 4, !tbaa !100
  %conv17 = zext i32 %29 to i64
  store i64 %conv17, i64* %n, align 8, !tbaa !6
  %30 = load i64, i64* %n, align 8, !tbaa !6
  %cmp18 = icmp ule i64 %30, 2
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end16
  br label %cond.end24

cond.false:                                       ; preds = %if.end16
  %31 = load i64, i64* %n, align 8, !tbaa !6
  %cmp19 = icmp ule i64 %31, 4
  br i1 %cmp19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %cond.false
  br label %cond.end

cond.false21:                                     ; preds = %cond.false
  %32 = load i64, i64* %n, align 8, !tbaa !6
  %cmp22 = icmp ule i64 %32, 16
  %cond = select i1 %cmp22, i32 4, i32 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 2, %cond.true20 ], [ %cond, %cond.false21 ]
  br label %cond.end24

cond.end24:                                       ; preds = %cond.end, %cond.true
  %cond25 = phi i32 [ 1, %cond.true ], [ %cond23, %cond.end ]
  store i32 %cond25, i32* %palettebits, align 4, !tbaa !8
  %33 = load i64, i64* %n, align 8, !tbaa !6
  %cmp26 = icmp ule i64 %33, 256
  br i1 %cmp26, label %land.lhs.true27, label %land.end

land.lhs.true27:                                  ; preds = %cond.end24
  %34 = load i32, i32* %bits, align 4, !tbaa !8
  %cmp28 = icmp ule i32 %34, 8
  br i1 %cmp28, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true27
  %35 = load i64, i64* %n, align 8, !tbaa !6
  %cmp29 = icmp ne i64 %35, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true27, %cond.end24
  %36 = phi i1 [ false, %land.lhs.true27 ], [ false, %cond.end24 ], [ %cmp29, %land.rhs ]
  %conv30 = zext i1 %36 to i32
  store i32 %conv30, i32* %palette_ok, align 4, !tbaa !8
  %37 = load i64, i64* %numpixels, align 8, !tbaa !6
  %38 = load i64, i64* %n, align 8, !tbaa !6
  %mul = mul i64 %38, 2
  %cmp31 = icmp ult i64 %37, %mul
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %land.end
  store i32 0, i32* %palette_ok, align 4, !tbaa !8
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %land.end
  %39 = load i32, i32* %gray_ok, align 4, !tbaa !8
  %tobool34 = icmp ne i32 %39, 0
  br i1 %tobool34, label %land.lhs.true35, label %if.end40

land.lhs.true35:                                  ; preds = %if.end33
  %40 = load i32, i32* %alpha, align 4, !tbaa !8
  %tobool36 = icmp ne i32 %40, 0
  br i1 %tobool36, label %if.end40, label %land.lhs.true37

land.lhs.true37:                                  ; preds = %land.lhs.true35
  %41 = load i32, i32* %bits, align 4, !tbaa !8
  %42 = load i32, i32* %palettebits, align 4, !tbaa !8
  %cmp38 = icmp ule i32 %41, %42
  br i1 %cmp38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %land.lhs.true37
  store i32 0, i32* %palette_ok, align 4, !tbaa !8
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %land.lhs.true37, %land.lhs.true35, %if.end33
  %43 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %allow_palette = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %43, i32 0, i32 10
  %44 = load i32, i32* %allow_palette, align 8, !tbaa !103
  %tobool41 = icmp ne i32 %44, 0
  br i1 %tobool41, label %if.end43, label %if.then42

if.then42:                                        ; preds = %if.end40
  store i32 0, i32* %palette_ok, align 4, !tbaa !8
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %if.end40
  %45 = load i32, i32* %palette_ok, align 4, !tbaa !8
  %tobool44 = icmp ne i32 %45, 0
  br i1 %tobool44, label %if.then45, label %if.else

if.then45:                                        ; preds = %if.end43
  %46 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %46) #16
  %47 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %47, i32 0, i32 7
  %arraydecay = getelementptr inbounds [1024 x i8], [1024 x i8]* %palette, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8, !tbaa !2
  %48 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  call void @_Z21lodepng_palette_clearP16LodePNGColorMode(%struct.LodePNGColorMode* %48)
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then45
  %49 = load i64, i64* %i, align 8, !tbaa !6
  %50 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %numcolors46 = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %50, i32 0, i32 6
  %51 = load i32, i32* %numcolors46, align 4, !tbaa !100
  %conv47 = zext i32 %51 to i64
  %cmp48 = icmp ne i64 %49, %conv47
  br i1 %cmp48, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %52 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %53 = load i8*, i8** %p, align 8, !tbaa !2
  %54 = load i64, i64* %i, align 8, !tbaa !6
  %mul49 = mul i64 %54, 4
  %add = add i64 %mul49, 0
  %arrayidx = getelementptr inbounds i8, i8* %53, i64 %add
  %55 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %56 = load i8*, i8** %p, align 8, !tbaa !2
  %57 = load i64, i64* %i, align 8, !tbaa !6
  %mul50 = mul i64 %57, 4
  %add51 = add i64 %mul50, 1
  %arrayidx52 = getelementptr inbounds i8, i8* %56, i64 %add51
  %58 = load i8, i8* %arrayidx52, align 1, !tbaa !16
  %59 = load i8*, i8** %p, align 8, !tbaa !2
  %60 = load i64, i64* %i, align 8, !tbaa !6
  %mul53 = mul i64 %60, 4
  %add54 = add i64 %mul53, 2
  %arrayidx55 = getelementptr inbounds i8, i8* %59, i64 %add54
  %61 = load i8, i8* %arrayidx55, align 1, !tbaa !16
  %62 = load i8*, i8** %p, align 8, !tbaa !2
  %63 = load i64, i64* %i, align 8, !tbaa !6
  %mul56 = mul i64 %63, 4
  %add57 = add i64 %mul56, 3
  %arrayidx58 = getelementptr inbounds i8, i8* %62, i64 %add57
  %64 = load i8, i8* %arrayidx58, align 1, !tbaa !16
  %call = call i32 @_Z19lodepng_palette_addP16LodePNGColorModehhhh(%struct.LodePNGColorMode* %52, i8 zeroext %55, i8 zeroext %58, i8 zeroext %61, i8 zeroext %64)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %65 = load i32, i32* %error, align 4, !tbaa !8
  %tobool59 = icmp ne i32 %65, 0
  br i1 %tobool59, label %if.then60, label %if.end61

if.then60:                                        ; preds = %for.body
  br label %for.end

if.end61:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end61
  %66 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %66, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %if.then60, %for.cond
  %67 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %67, i32 0, i32 0
  store i32 3, i32* %colortype, align 8, !tbaa !58
  %68 = load i32, i32* %palettebits, align 4, !tbaa !8
  %69 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %69, i32 0, i32 1
  store i32 %68, i32* %bitdepth, align 4, !tbaa !59
  %70 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %colortype62 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %70, i32 0, i32 0
  %71 = load i32, i32* %colortype62, align 8, !tbaa !58
  %cmp63 = icmp eq i32 %71, 3
  br i1 %cmp63, label %land.lhs.true64, label %if.end73

land.lhs.true64:                                  ; preds = %for.end
  %72 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %72, i32 0, i32 3
  %73 = load i64, i64* %palettesize, align 8, !tbaa !61
  %74 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %palettesize65 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %74, i32 0, i32 3
  %75 = load i64, i64* %palettesize65, align 8, !tbaa !61
  %cmp66 = icmp uge i64 %73, %75
  br i1 %cmp66, label %land.lhs.true67, label %if.end73

land.lhs.true67:                                  ; preds = %land.lhs.true64
  %76 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %bitdepth68 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %76, i32 0, i32 1
  %77 = load i32, i32* %bitdepth68, align 4, !tbaa !59
  %78 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth69 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %78, i32 0, i32 1
  %79 = load i32, i32* %bitdepth69, align 4, !tbaa !59
  %cmp70 = icmp eq i32 %77, %79
  br i1 %cmp70, label %if.then71, label %if.end73

if.then71:                                        ; preds = %land.lhs.true67
  %80 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  call void @_Z26lodepng_color_mode_cleanupP16LodePNGColorMode(%struct.LodePNGColorMode* %80)
  %81 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %82 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_in.addr, align 8, !tbaa !2
  %call72 = call i32 @_Z23lodepng_color_mode_copyP16LodePNGColorModePKS_(%struct.LodePNGColorMode* %81, %struct.LodePNGColorMode* %82)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %land.lhs.true67, %land.lhs.true64, %for.end
  %83 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %83) #16
  br label %if.end98

if.else:                                          ; preds = %if.end43
  %84 = load i32, i32* %bits, align 4, !tbaa !8
  %85 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth74 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %85, i32 0, i32 1
  store i32 %84, i32* %bitdepth74, align 4, !tbaa !59
  %86 = load i32, i32* %alpha, align 4, !tbaa !8
  %tobool75 = icmp ne i32 %86, 0
  br i1 %tobool75, label %cond.true76, label %cond.false79

cond.true76:                                      ; preds = %if.else
  %87 = load i32, i32* %gray_ok, align 4, !tbaa !8
  %tobool77 = icmp ne i32 %87, 0
  %cond78 = select i1 %tobool77, i32 4, i32 6
  br label %cond.end82

cond.false79:                                     ; preds = %if.else
  %88 = load i32, i32* %gray_ok, align 4, !tbaa !8
  %tobool80 = icmp ne i32 %88, 0
  %cond81 = select i1 %tobool80, i32 0, i32 2
  br label %cond.end82

cond.end82:                                       ; preds = %cond.false79, %cond.true76
  %cond83 = phi i32 [ %cond78, %cond.true76 ], [ %cond81, %cond.false79 ]
  %89 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %colortype84 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %89, i32 0, i32 0
  store i32 %cond83, i32* %colortype84, align 8, !tbaa !58
  %90 = load i32, i32* %key, align 4, !tbaa !8
  %tobool85 = icmp ne i32 %90, 0
  br i1 %tobool85, label %if.then86, label %if.end97

if.then86:                                        ; preds = %cond.end82
  %91 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.start(i64 4, i8* %91) #16
  %92 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %bitdepth87 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %92, i32 0, i32 1
  %93 = load i32, i32* %bitdepth87, align 4, !tbaa !59
  %shl = shl i32 1, %93
  %sub = sub i32 %shl, 1
  store i32 %sub, i32* %mask, align 4, !tbaa !8
  %94 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %94, i32 0, i32 2
  %95 = load i16, i16* %key_r, align 8, !tbaa !98
  %conv88 = zext i16 %95 to i32
  %96 = load i32, i32* %mask, align 4, !tbaa !8
  %and = and i32 %conv88, %96
  %97 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %key_r89 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %97, i32 0, i32 5
  store i32 %and, i32* %key_r89, align 4, !tbaa !57
  %98 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %98, i32 0, i32 3
  %99 = load i16, i16* %key_g, align 2, !tbaa !97
  %conv90 = zext i16 %99 to i32
  %100 = load i32, i32* %mask, align 4, !tbaa !8
  %and91 = and i32 %conv90, %100
  %101 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %key_g92 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %101, i32 0, i32 6
  store i32 %and91, i32* %key_g92, align 8, !tbaa !56
  %102 = load %struct.LodePNGColorStats*, %struct.LodePNGColorStats** %stats.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorStats, %struct.LodePNGColorStats* %102, i32 0, i32 4
  %103 = load i16, i16* %key_b, align 4, !tbaa !96
  %conv93 = zext i16 %103 to i32
  %104 = load i32, i32* %mask, align 4, !tbaa !8
  %and94 = and i32 %conv93, %104
  %105 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %key_b95 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %105, i32 0, i32 7
  store i32 %and94, i32* %key_b95, align 4, !tbaa !55
  %106 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %mode_out.addr, align 8, !tbaa !2
  %key_defined96 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %106, i32 0, i32 4
  store i32 1, i32* %key_defined96, align 8, !tbaa !52
  %107 = bitcast i32* %mask to i8*
  call void @llvm.lifetime.end(i64 4, i8* %107) #16
  br label %if.end97

if.end97:                                         ; preds = %if.then86, %cond.end82
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end73
  %108 = load i32, i32* %error, align 4, !tbaa !8
  %109 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %109) #16
  %110 = bitcast i32* %key to i8*
  call void @llvm.lifetime.end(i64 4, i8* %110) #16
  %111 = bitcast i32* %alpha to i8*
  call void @llvm.lifetime.end(i64 4, i8* %111) #16
  %112 = bitcast i32* %gray_ok to i8*
  call void @llvm.lifetime.end(i64 4, i8* %112) #16
  %113 = bitcast i32* %palette_ok to i8*
  call void @llvm.lifetime.end(i64 4, i8* %113) #16
  %114 = bitcast i64* %numpixels to i8*
  call void @llvm.lifetime.end(i64 8, i8* %114) #16
  %115 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end(i64 8, i8* %115) #16
  %116 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %116) #16
  %117 = bitcast i32* %palettebits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %117) #16
  %118 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %118) #16
  ret i32 %108
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL19preProcessScanlinesPPhPmPKhjjPK11LodePNGInfoPK22LodePNGEncoderSettings(i8** %out, i64* %outsize, i8* %in, i32 %w, i32 %h, %struct.LodePNGInfo* %info_png, %struct.LodePNGEncoderSettings* %settings) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %info_png.addr = alloca %struct.LodePNGInfo*, align 8
  %settings.addr = alloca %struct.LodePNGEncoderSettings*, align 8
  %bpp = alloca i32, align 4
  %error = alloca i32, align 4
  %padded = alloca i8*, align 8
  %passw = alloca [7 x i32], align 16
  %passh = alloca [7 x i32], align 16
  %filter_passstart = alloca [8 x i64], align 16
  %padded_passstart = alloca [8 x i64], align 16
  %passstart = alloca [8 x i64], align 16
  %adam7 = alloca i8*, align 8
  %i = alloca i32, align 4
  %padded64 = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %struct.LodePNGInfo* %info_png, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  store %struct.LodePNGEncoderSettings* %settings, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 3
  %call = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %color)
  store i32 %call, i32* %bpp, align 4, !tbaa !8
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %interlace_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 2
  %4 = load i32, i32* %interlace_method, align 8, !tbaa !77
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %if.else42

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %h.addr, align 4, !tbaa !8
  %6 = load i32, i32* %h.addr, align 4, !tbaa !8
  %7 = load i32, i32* %w.addr, align 4, !tbaa !8
  %8 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul = mul i32 %7, %8
  %add = add i32 %mul, 7
  %div = udiv i32 %add, 8
  %mul1 = mul i32 %6, %div
  %add2 = add i32 %5, %mul1
  %conv = zext i32 %add2 to i64
  %9 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %conv, i64* %9, align 8, !tbaa !6
  %10 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %11 = load i64, i64* %10, align 8, !tbaa !6
  %call3 = call i8* @_ZL14lodepng_mallocm(i64 %11)
  %12 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %call3, i8** %12, align 8, !tbaa !2
  %13 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %14 = load i8*, i8** %13, align 8, !tbaa !2
  %tobool = icmp ne i8* %14, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %15 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %16 = load i64, i64* %15, align 8, !tbaa !6
  %tobool4 = icmp ne i64 %16, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %land.lhs.true
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %17 = load i32, i32* %error, align 4, !tbaa !8
  %tobool6 = icmp ne i32 %17, 0
  br i1 %tobool6, label %if.end41, label %if.then7

if.then7:                                         ; preds = %if.end
  %18 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp8 = icmp ult i32 %18, 8
  br i1 %cmp8, label %land.lhs.true9, label %if.else

land.lhs.true9:                                   ; preds = %if.then7
  %19 = load i32, i32* %w.addr, align 4, !tbaa !8
  %20 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul10 = mul i32 %19, %20
  %21 = load i32, i32* %w.addr, align 4, !tbaa !8
  %22 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul11 = mul i32 %21, %22
  %add12 = add i32 %mul11, 7
  %div13 = udiv i32 %add12, 8
  %mul14 = mul i32 %div13, 8
  %cmp15 = icmp ne i32 %mul10, %mul14
  br i1 %cmp15, label %if.then16, label %if.else

if.then16:                                        ; preds = %land.lhs.true9
  %23 = bitcast i8** %padded to i8*
  call void @llvm.lifetime.start(i64 8, i8* %23) #16
  %24 = load i32, i32* %h.addr, align 4, !tbaa !8
  %25 = load i32, i32* %w.addr, align 4, !tbaa !8
  %26 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul17 = mul i32 %25, %26
  %add18 = add i32 %mul17, 7
  %div19 = udiv i32 %add18, 8
  %mul20 = mul i32 %24, %div19
  %conv21 = zext i32 %mul20 to i64
  %call22 = call i8* @_ZL14lodepng_mallocm(i64 %conv21)
  store i8* %call22, i8** %padded, align 8, !tbaa !2
  %27 = load i8*, i8** %padded, align 8, !tbaa !2
  %tobool23 = icmp ne i8* %27, null
  br i1 %tobool23, label %if.end25, label %if.then24

if.then24:                                        ; preds = %if.then16
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.then16
  %28 = load i32, i32* %error, align 4, !tbaa !8
  %tobool26 = icmp ne i32 %28, 0
  br i1 %tobool26, label %if.end37, label %if.then27

if.then27:                                        ; preds = %if.end25
  %29 = load i8*, i8** %padded, align 8, !tbaa !2
  %30 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %31 = load i32, i32* %w.addr, align 4, !tbaa !8
  %32 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul28 = mul i32 %31, %32
  %add29 = add i32 %mul28, 7
  %div30 = udiv i32 %add29, 8
  %mul31 = mul i32 %div30, 8
  %conv32 = zext i32 %mul31 to i64
  %33 = load i32, i32* %w.addr, align 4, !tbaa !8
  %34 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul33 = mul i32 %33, %34
  %conv34 = zext i32 %mul33 to i64
  %35 = load i32, i32* %h.addr, align 4, !tbaa !8
  call void @_ZL14addPaddingBitsPhPKhmmj(i8* %29, i8* %30, i64 %conv32, i64 %conv34, i32 %35)
  %36 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %37 = load i8*, i8** %36, align 8, !tbaa !2
  %38 = load i8*, i8** %padded, align 8, !tbaa !2
  %39 = load i32, i32* %w.addr, align 4, !tbaa !8
  %40 = load i32, i32* %h.addr, align 4, !tbaa !8
  %41 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %color35 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %41, i32 0, i32 3
  %42 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %call36 = call i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* %37, i8* %38, i32 %39, i32 %40, %struct.LodePNGColorMode* %color35, %struct.LodePNGEncoderSettings* %42)
  store i32 %call36, i32* %error, align 4, !tbaa !8
  br label %if.end37

if.end37:                                         ; preds = %if.then27, %if.end25
  %43 = load i8*, i8** %padded, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %43)
  %44 = bitcast i8** %padded to i8*
  call void @llvm.lifetime.end(i64 8, i8* %44) #16
  br label %if.end40

if.else:                                          ; preds = %land.lhs.true9, %if.then7
  %45 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %46 = load i8*, i8** %45, align 8, !tbaa !2
  %47 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %48 = load i32, i32* %w.addr, align 4, !tbaa !8
  %49 = load i32, i32* %h.addr, align 4, !tbaa !8
  %50 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %color38 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %50, i32 0, i32 3
  %51 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %call39 = call i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* %46, i8* %47, i32 %48, i32 %49, %struct.LodePNGColorMode* %color38, %struct.LodePNGEncoderSettings* %51)
  store i32 %call39, i32* %error, align 4, !tbaa !8
  br label %if.end40

if.end40:                                         ; preds = %if.else, %if.end37
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end
  br label %if.end116

if.else42:                                        ; preds = %entry
  %52 = bitcast [7 x i32]* %passw to i8*
  call void @llvm.lifetime.start(i64 28, i8* %52) #16
  %53 = bitcast [7 x i32]* %passh to i8*
  call void @llvm.lifetime.start(i64 28, i8* %53) #16
  %54 = bitcast [8 x i64]* %filter_passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %54) #16
  %55 = bitcast [8 x i64]* %padded_passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %55) #16
  %56 = bitcast [8 x i64]* %passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %56) #16
  %57 = bitcast i8** %adam7 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %57) #16
  %arraydecay = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i32 0, i32 0
  %arraydecay43 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i32 0, i32 0
  %arraydecay44 = getelementptr inbounds [8 x i64], [8 x i64]* %filter_passstart, i32 0, i32 0
  %arraydecay45 = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i32 0, i32 0
  %arraydecay46 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i32 0, i32 0
  %58 = load i32, i32* %w.addr, align 4, !tbaa !8
  %59 = load i32, i32* %h.addr, align 4, !tbaa !8
  %60 = load i32, i32* %bpp, align 4, !tbaa !8
  call void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* %arraydecay, i32* %arraydecay43, i64* %arraydecay44, i64* %arraydecay45, i64* %arraydecay46, i32 %58, i32 %59, i32 %60)
  %arrayidx = getelementptr inbounds [8 x i64], [8 x i64]* %filter_passstart, i64 0, i64 7
  %61 = load i64, i64* %arrayidx, align 8, !tbaa !6
  %62 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %61, i64* %62, align 8, !tbaa !6
  %63 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %64 = load i64, i64* %63, align 8, !tbaa !6
  %call47 = call i8* @_ZL14lodepng_mallocm(i64 %64)
  %65 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %call47, i8** %65, align 8, !tbaa !2
  %66 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %67 = load i8*, i8** %66, align 8, !tbaa !2
  %tobool48 = icmp ne i8* %67, null
  br i1 %tobool48, label %if.end50, label %if.then49

if.then49:                                        ; preds = %if.else42
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %if.else42
  %arrayidx51 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i64 0, i64 7
  %68 = load i64, i64* %arrayidx51, align 8, !tbaa !6
  %call52 = call i8* @_ZL14lodepng_mallocm(i64 %68)
  store i8* %call52, i8** %adam7, align 8, !tbaa !2
  %69 = load i8*, i8** %adam7, align 8, !tbaa !2
  %tobool53 = icmp ne i8* %69, null
  br i1 %tobool53, label %if.end58, label %land.lhs.true54

land.lhs.true54:                                  ; preds = %if.end50
  %arrayidx55 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i64 0, i64 7
  %70 = load i64, i64* %arrayidx55, align 8, !tbaa !6
  %tobool56 = icmp ne i64 %70, 0
  br i1 %tobool56, label %if.then57, label %if.end58

if.then57:                                        ; preds = %land.lhs.true54
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end58

if.end58:                                         ; preds = %if.then57, %land.lhs.true54, %if.end50
  %71 = load i32, i32* %error, align 4, !tbaa !8
  %tobool59 = icmp ne i32 %71, 0
  br i1 %tobool59, label %if.end115, label %if.then60

if.then60:                                        ; preds = %if.end58
  %72 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %72) #16
  %73 = load i8*, i8** %adam7, align 8, !tbaa !2
  %74 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %75 = load i32, i32* %w.addr, align 4, !tbaa !8
  %76 = load i32, i32* %h.addr, align 4, !tbaa !8
  %77 = load i32, i32* %bpp, align 4, !tbaa !8
  call void @_ZL15Adam7_interlacePhPKhjjj(i8* %73, i8* %74, i32 %75, i32 %76, i32 %77)
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then60
  %78 = load i32, i32* %i, align 4, !tbaa !8
  %cmp61 = icmp ne i32 %78, 7
  br i1 %cmp61, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %79 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp62 = icmp ult i32 %79, 8
  br i1 %cmp62, label %if.then63, label %if.else98

if.then63:                                        ; preds = %for.body
  %80 = bitcast i8** %padded64 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %80) #16
  %81 = load i32, i32* %i, align 4, !tbaa !8
  %add65 = add i32 %81, 1
  %idxprom = zext i32 %add65 to i64
  %arrayidx66 = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i64 0, i64 %idxprom
  %82 = load i64, i64* %arrayidx66, align 8, !tbaa !6
  %83 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom67 = zext i32 %83 to i64
  %arrayidx68 = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i64 0, i64 %idxprom67
  %84 = load i64, i64* %arrayidx68, align 8, !tbaa !6
  %sub = sub i64 %82, %84
  %call69 = call i8* @_ZL14lodepng_mallocm(i64 %sub)
  store i8* %call69, i8** %padded64, align 8, !tbaa !2
  %85 = load i8*, i8** %padded64, align 8, !tbaa !2
  %tobool70 = icmp ne i8* %85, null
  br i1 %tobool70, label %if.end72, label %if.then71

if.then71:                                        ; preds = %if.then63
  store i32 83, i32* %error, align 4, !tbaa !8
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end72:                                         ; preds = %if.then63
  %86 = load i8*, i8** %padded64, align 8, !tbaa !2
  %87 = load i8*, i8** %adam7, align 8, !tbaa !2
  %88 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom73 = zext i32 %88 to i64
  %arrayidx74 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i64 0, i64 %idxprom73
  %89 = load i64, i64* %arrayidx74, align 8, !tbaa !6
  %arrayidx75 = getelementptr inbounds i8, i8* %87, i64 %89
  %90 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom76 = zext i32 %90 to i64
  %arrayidx77 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom76
  %91 = load i32, i32* %arrayidx77, align 4, !tbaa !8
  %92 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul78 = mul i32 %91, %92
  %add79 = add i32 %mul78, 7
  %div80 = udiv i32 %add79, 8
  %mul81 = mul i32 %div80, 8
  %conv82 = zext i32 %mul81 to i64
  %93 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom83 = zext i32 %93 to i64
  %arrayidx84 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom83
  %94 = load i32, i32* %arrayidx84, align 4, !tbaa !8
  %95 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul85 = mul i32 %94, %95
  %conv86 = zext i32 %mul85 to i64
  %96 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom87 = zext i32 %96 to i64
  %arrayidx88 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom87
  %97 = load i32, i32* %arrayidx88, align 4, !tbaa !8
  call void @_ZL14addPaddingBitsPhPKhmmj(i8* %86, i8* %arrayidx75, i64 %conv82, i64 %conv86, i32 %97)
  %98 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %99 = load i8*, i8** %98, align 8, !tbaa !2
  %100 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom89 = zext i32 %100 to i64
  %arrayidx90 = getelementptr inbounds [8 x i64], [8 x i64]* %filter_passstart, i64 0, i64 %idxprom89
  %101 = load i64, i64* %arrayidx90, align 8, !tbaa !6
  %arrayidx91 = getelementptr inbounds i8, i8* %99, i64 %101
  %102 = load i8*, i8** %padded64, align 8, !tbaa !2
  %103 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom92 = zext i32 %103 to i64
  %arrayidx93 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom92
  %104 = load i32, i32* %arrayidx93, align 4, !tbaa !8
  %105 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom94 = zext i32 %105 to i64
  %arrayidx95 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom94
  %106 = load i32, i32* %arrayidx95, align 4, !tbaa !8
  %107 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %color96 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %107, i32 0, i32 3
  %108 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %call97 = call i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* %arrayidx91, i8* %102, i32 %104, i32 %106, %struct.LodePNGColorMode* %color96, %struct.LodePNGEncoderSettings* %108)
  store i32 %call97, i32* %error, align 4, !tbaa !8
  %109 = load i8*, i8** %padded64, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %109)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end72, %if.then71
  %110 = bitcast i8** %padded64 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %110) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 2, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end111

if.else98:                                        ; preds = %for.body
  %111 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %112 = load i8*, i8** %111, align 8, !tbaa !2
  %113 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom99 = zext i32 %113 to i64
  %arrayidx100 = getelementptr inbounds [8 x i64], [8 x i64]* %filter_passstart, i64 0, i64 %idxprom99
  %114 = load i64, i64* %arrayidx100, align 8, !tbaa !6
  %arrayidx101 = getelementptr inbounds i8, i8* %112, i64 %114
  %115 = load i8*, i8** %adam7, align 8, !tbaa !2
  %116 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom102 = zext i32 %116 to i64
  %arrayidx103 = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i64 0, i64 %idxprom102
  %117 = load i64, i64* %arrayidx103, align 8, !tbaa !6
  %arrayidx104 = getelementptr inbounds i8, i8* %115, i64 %117
  %118 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom105 = zext i32 %118 to i64
  %arrayidx106 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom105
  %119 = load i32, i32* %arrayidx106, align 4, !tbaa !8
  %120 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom107 = zext i32 %120 to i64
  %arrayidx108 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom107
  %121 = load i32, i32* %arrayidx108, align 4, !tbaa !8
  %122 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %color109 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %122, i32 0, i32 3
  %123 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %call110 = call i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* %arrayidx101, i8* %arrayidx104, i32 %119, i32 %121, %struct.LodePNGColorMode* %color109, %struct.LodePNGEncoderSettings* %123)
  store i32 %call110, i32* %error, align 4, !tbaa !8
  br label %if.end111

if.end111:                                        ; preds = %if.else98, %cleanup.cont
  %124 = load i32, i32* %error, align 4, !tbaa !8
  %tobool112 = icmp ne i32 %124, 0
  br i1 %tobool112, label %if.then113, label %if.end114

if.then113:                                       ; preds = %if.end111
  br label %for.end

if.end114:                                        ; preds = %if.end111
  br label %for.inc

for.inc:                                          ; preds = %if.end114
  %125 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %125, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %if.then113, %cleanup, %for.cond
  %126 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %126) #16
  br label %if.end115

if.end115:                                        ; preds = %for.end, %if.end58
  %127 = load i8*, i8** %adam7, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %127)
  %128 = bitcast i8** %adam7 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %128) #16
  %129 = bitcast [8 x i64]* %passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %129) #16
  %130 = bitcast [8 x i64]* %padded_passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %130) #16
  %131 = bitcast [8 x i64]* %filter_passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %131) #16
  %132 = bitcast [7 x i32]* %passh to i8*
  call void @llvm.lifetime.end(i64 28, i8* %132) #16
  %133 = bitcast [7 x i32]* %passw to i8*
  call void @llvm.lifetime.end(i64 28, i8* %133) #16
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.end41
  %134 = load i32, i32* %error, align 4, !tbaa !8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %135 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %135) #16
  %136 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %136) #16
  ret i32 %134

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL14writeSignatureP8ucvector(%struct.ucvector* %out) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %0 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1, i32 0, i32 1
  %2 = load i64, i64* %size, align 8, !tbaa !34
  store i64 %2, i64* %pos, align 8, !tbaa !6
  %3 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %4 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size1 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %4, i32 0, i32 1
  %5 = load i64, i64* %size1, align 8, !tbaa !34
  %add = add i64 %5, 8
  %call = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %3, i64 %add)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i32 0, i32 0
  %7 = load i8*, i8** %data, align 8, !tbaa !32
  %8 = load i64, i64* %pos, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @_ZZL14writeSignatureP8ucvectorE9signature, i32 0, i32 0), i64 8)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %9 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #16
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_IHDRP8ucvectorjj16LodePNGColorTypejj(%struct.ucvector* %out, i32 %w, i32 %h, i32 %colortype, i32 %bitdepth, i32 %interlace_method) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %interlace_method.addr = alloca i32, align 4
  %chunk = alloca i8*, align 8
  %data = alloca i8*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  store i32 %interlace_method, i32* %interlace_method.addr, align 4, !tbaa !8
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %3, i32 13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  store i32 %call, i32* %error, align 4, !tbaa !8
  %4 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %6) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup9 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %7 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 8
  store i8* %add.ptr, i8** %data, align 8, !tbaa !2
  %8 = load i8*, i8** %data, align 8, !tbaa !2
  %add.ptr1 = getelementptr inbounds i8, i8* %8, i64 0
  %9 = load i32, i32* %w.addr, align 4, !tbaa !8
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr1, i32 %9)
  %10 = load i8*, i8** %data, align 8, !tbaa !2
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 4
  %11 = load i32, i32* %h.addr, align 4, !tbaa !8
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr2, i32 %11)
  %12 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %conv = trunc i32 %12 to i8
  %13 = load i8*, i8** %data, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 8
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !16
  %14 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %conv3 = trunc i32 %14 to i8
  %15 = load i8*, i8** %data, align 8, !tbaa !2
  %arrayidx4 = getelementptr inbounds i8, i8* %15, i64 9
  store i8 %conv3, i8* %arrayidx4, align 1, !tbaa !16
  %16 = load i8*, i8** %data, align 8, !tbaa !2
  %arrayidx5 = getelementptr inbounds i8, i8* %16, i64 10
  store i8 0, i8* %arrayidx5, align 1, !tbaa !16
  %17 = load i8*, i8** %data, align 8, !tbaa !2
  %arrayidx6 = getelementptr inbounds i8, i8* %17, i64 11
  store i8 0, i8* %arrayidx6, align 1, !tbaa !16
  %18 = load i32, i32* %interlace_method.addr, align 4, !tbaa !8
  %conv7 = trunc i32 %18 to i8
  %19 = load i8*, i8** %data, align 8, !tbaa !2
  %arrayidx8 = getelementptr inbounds i8, i8* %19, i64 12
  store i8 %conv7, i8* %arrayidx8, align 1, !tbaa !16
  %20 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %20)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup9

cleanup9:                                         ; preds = %cleanup.cont, %cleanup
  %21 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #16
  %22 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %22) #16
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL16addUnknownChunksP8ucvectorPhm(%struct.ucvector* %out, i8* %data, i64 %datasize) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %data.addr = alloca i8*, align 8
  %datasize.addr = alloca i64, align 8
  %inchunk = alloca i8*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %datasize, i64* %datasize.addr, align 8, !tbaa !6
  %0 = bitcast i8** %inchunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !2
  store i8* %1, i8** %inchunk, align 8, !tbaa !2
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %entry
  %2 = load i8*, i8** %inchunk, align 8, !tbaa !2
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %4 = load i64, i64* %datasize.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %sub.ptr.sub, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data1 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i32 0, i32 0
  %7 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %7, i32 0, i32 1
  %8 = load i8*, i8** %inchunk, align 8, !tbaa !2
  %call = call i32 @_Z20lodepng_chunk_appendPPhPmPKh(i8** %data1, i64* %size, i8* %8)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %9 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %10 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %10, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %11 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup4 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %12 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size2 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %12, i32 0, i32 1
  %13 = load i64, i64* %size2, align 8, !tbaa !34
  %14 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %allocsize = getelementptr inbounds %struct.ucvector, %struct.ucvector* %14, i32 0, i32 2
  store i64 %13, i64* %allocsize, align 8, !tbaa !35
  %15 = load i8*, i8** %inchunk, align 8, !tbaa !2
  %16 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %17 = load i64, i64* %datasize.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %17
  %call3 = call i8* @_Z18lodepng_chunk_nextPhS_(i8* %15, i8* %add.ptr)
  store i8* %call3, i8** %inchunk, align 8, !tbaa !2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup4

cleanup4:                                         ; preds = %while.end, %cleanup
  %18 = bitcast i8** %inchunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #16
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_iCCPP8ucvectorPK11LodePNGInfoP23LodePNGCompressSettings(%struct.ucvector* %out, %struct.LodePNGInfo* %info, %struct.LodePNGCompressSettings* %zlibsettings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %zlibsettings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %error = alloca i32, align 4
  %chunk = alloca i8*, align 8
  %compressed = alloca i8*, align 8
  %compressedsize = alloca i64, align 8
  %keysize = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %size = alloca i64, align 8
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  store %struct.LodePNGCompressSettings* %zlibsettings, %struct.LodePNGCompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i8* null, i8** %chunk, align 8, !tbaa !2
  %2 = bitcast i8** %compressed to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i8* null, i8** %compressed, align 8, !tbaa !2
  %3 = bitcast i64* %compressedsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  store i64 0, i64* %compressedsize, align 8, !tbaa !6
  %4 = bitcast i64* %keysize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %5, i32 0, i32 36
  %6 = load i8*, i8** %iccp_name, align 8, !tbaa !73
  %call = call i64 @_ZL14lodepng_strlenPKc(i8* %6)
  store i64 %call, i64* %keysize, align 8, !tbaa !6
  %7 = load i64, i64* %keysize, align 8, !tbaa !6
  %cmp = icmp ult i64 %7, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load i64, i64* %keysize, align 8, !tbaa !6
  %cmp1 = icmp ugt i64 %8, 79
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 89, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %9 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %9, i32 0, i32 37
  %10 = load i8*, i8** %iccp_profile, align 8, !tbaa !75
  %11 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_profile_size = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %11, i32 0, i32 38
  %12 = load i32, i32* %iccp_profile_size, align 8, !tbaa !76
  %conv = zext i32 %12 to i64
  %13 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %call2 = call i32 @_ZL13zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %compressed, i64* %compressedsize, i8* %10, i64 %conv, %struct.LodePNGCompressSettings* %13)
  store i32 %call2, i32* %error, align 4, !tbaa !8
  %14 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %if.end7, label %if.then3

if.then3:                                         ; preds = %if.end
  %15 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #16
  %16 = load i64, i64* %keysize, align 8, !tbaa !6
  %add = add i64 %16, 2
  %17 = load i64, i64* %compressedsize, align 8, !tbaa !6
  %add4 = add i64 %add, %17
  store i64 %add4, i64* %size, align 8, !tbaa !6
  %18 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %19 = load i64, i64* %size, align 8, !tbaa !6
  %conv5 = trunc i64 %19 to i32
  %call6 = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %18, i32 %conv5, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0))
  store i32 %call6, i32* %error, align 4, !tbaa !8
  %20 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #16
  br label %if.end7

if.end7:                                          ; preds = %if.then3, %if.end
  %21 = load i32, i32* %error, align 4, !tbaa !8
  %tobool8 = icmp ne i32 %21, 0
  br i1 %tobool8, label %if.end16, label %if.then9

if.then9:                                         ; preds = %if.end7
  %22 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 8
  %23 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %iccp_name10 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %23, i32 0, i32 36
  %24 = load i8*, i8** %iccp_name10, align 8, !tbaa !73
  %25 = load i64, i64* %keysize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr, i8* %24, i64 %25)
  %26 = load i8*, i8** %chunk, align 8, !tbaa !2
  %27 = load i64, i64* %keysize, align 8, !tbaa !6
  %add11 = add i64 8, %27
  %arrayidx = getelementptr inbounds i8, i8* %26, i64 %add11
  store i8 0, i8* %arrayidx, align 1, !tbaa !16
  %28 = load i8*, i8** %chunk, align 8, !tbaa !2
  %29 = load i64, i64* %keysize, align 8, !tbaa !6
  %add12 = add i64 9, %29
  %arrayidx13 = getelementptr inbounds i8, i8* %28, i64 %add12
  store i8 0, i8* %arrayidx13, align 1, !tbaa !16
  %30 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr14 = getelementptr inbounds i8, i8* %30, i64 10
  %31 = load i64, i64* %keysize, align 8, !tbaa !6
  %add.ptr15 = getelementptr inbounds i8, i8* %add.ptr14, i64 %31
  %32 = load i8*, i8** %compressed, align 8, !tbaa !2
  %33 = load i64, i64* %compressedsize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr15, i8* %32, i64 %33)
  %34 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %34)
  br label %if.end16

if.end16:                                         ; preds = %if.then9, %if.end7
  %35 = load i8*, i8** %compressed, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %35)
  %36 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %36, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end16, %if.then
  %37 = bitcast i64* %keysize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #16
  %38 = bitcast i64* %compressedsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %38) #16
  %39 = bitcast i8** %compressed to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #16
  %40 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %40) #16
  %41 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %41) #16
  %42 = load i32, i32* %retval, align 4
  ret i32 %42
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_sRGBP8ucvectorPK11LodePNGInfo(%struct.ucvector* %out, %struct.LodePNGInfo* %info) #0 {
entry:
  %out.addr = alloca %struct.ucvector*, align 8
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %data = alloca i8, align 1
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  call void @llvm.lifetime.start(i64 1, i8* %data) #16
  %0 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %srgb_intent = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %0, i32 0, i32 34
  %1 = load i32, i32* %srgb_intent, align 4, !tbaa !132
  %conv = trunc i32 %1 to i8
  store i8 %conv, i8* %data, align 1, !tbaa !16
  %2 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call = call i32 @_ZL21lodepng_chunk_createvP8ucvectorjPKcPKh(%struct.ucvector* %2, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8* %data)
  call void @llvm.lifetime.end(i64 1, i8* %data) #16
  ret i32 %call
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_gAMAP8ucvectorPK11LodePNGInfo(%struct.ucvector* %out, %struct.LodePNGInfo* %info) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %chunk = alloca i8*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %2, i32 4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i32 0, i32 0))
  store i32 %call, i32* %error, align 4, !tbaa !8
  %3 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %5) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup1 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %6 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 8
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %gama_gamma = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 23
  %8 = load i32, i32* %gama_gamma, align 8, !tbaa !123
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr, i32 %8)
  %9 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %9)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup1

cleanup1:                                         ; preds = %cleanup.cont, %cleanup
  %10 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #16
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_cHRMP8ucvectorPK11LodePNGInfo(%struct.ucvector* %out, %struct.LodePNGInfo* %info) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %chunk = alloca i8*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %2, i32 32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0))
  store i32 %call, i32* %error, align 4, !tbaa !8
  %3 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %5) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup8 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %6 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 8
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_white_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 25
  %8 = load i32, i32* %chrm_white_x, align 8, !tbaa !124
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr, i32 %8)
  %9 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr1 = getelementptr inbounds i8, i8* %9, i64 12
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_white_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 26
  %11 = load i32, i32* %chrm_white_y, align 4, !tbaa !125
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr1, i32 %11)
  %12 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr2 = getelementptr inbounds i8, i8* %12, i64 16
  %13 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_red_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %13, i32 0, i32 27
  %14 = load i32, i32* %chrm_red_x, align 8, !tbaa !126
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr2, i32 %14)
  %15 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr3 = getelementptr inbounds i8, i8* %15, i64 20
  %16 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_red_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %16, i32 0, i32 28
  %17 = load i32, i32* %chrm_red_y, align 4, !tbaa !127
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr3, i32 %17)
  %18 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr4 = getelementptr inbounds i8, i8* %18, i64 24
  %19 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_green_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %19, i32 0, i32 29
  %20 = load i32, i32* %chrm_green_x, align 8, !tbaa !128
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr4, i32 %20)
  %21 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr5 = getelementptr inbounds i8, i8* %21, i64 28
  %22 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_green_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %22, i32 0, i32 30
  %23 = load i32, i32* %chrm_green_y, align 4, !tbaa !129
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr5, i32 %23)
  %24 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr6 = getelementptr inbounds i8, i8* %24, i64 32
  %25 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_blue_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %25, i32 0, i32 31
  %26 = load i32, i32* %chrm_blue_x, align 8, !tbaa !130
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr6, i32 %26)
  %27 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr7 = getelementptr inbounds i8, i8* %27, i64 36
  %28 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %chrm_blue_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %28, i32 0, i32 32
  %29 = load i32, i32* %chrm_blue_y, align 4, !tbaa !131
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr7, i32 %29)
  %30 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %30)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup8

cleanup8:                                         ; preds = %cleanup.cont, %cleanup
  %31 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #16
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_PLTEP8ucvectorPK16LodePNGColorMode(%struct.ucvector* %out, %struct.LodePNGColorMode* %info) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  %chunk = alloca i8*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i64 8, i64* %j, align 8, !tbaa !6
  %3 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %5 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %5, i32 0, i32 3
  %6 = load i64, i64* %palettesize, align 8, !tbaa !61
  %mul = mul i64 %6, 3
  %conv = trunc i64 %mul to i32
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %4, i32 %conv, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0))
  store i32 %call, i32* %error, align 4, !tbaa !8
  %7 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %9 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %9) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup17 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cleanup.cont
  %10 = load i64, i64* %i, align 8, !tbaa !6
  %11 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %11, i32 0, i32 3
  %12 = load i64, i64* %palettesize1, align 8, !tbaa !61
  %cmp = icmp ne i64 %10, %12
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %13, i32 0, i32 2
  %14 = load i8*, i8** %palette, align 8, !tbaa !60
  %15 = load i64, i64* %i, align 8, !tbaa !6
  %mul2 = mul i64 %15, 4
  %add = add i64 %mul2, 0
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %add
  %16 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %17 = load i8*, i8** %chunk, align 8, !tbaa !2
  %18 = load i64, i64* %j, align 8, !tbaa !6
  %inc = add i64 %18, 1
  store i64 %inc, i64* %j, align 8, !tbaa !6
  %arrayidx3 = getelementptr inbounds i8, i8* %17, i64 %18
  store i8 %16, i8* %arrayidx3, align 1, !tbaa !16
  %19 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette4 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %19, i32 0, i32 2
  %20 = load i8*, i8** %palette4, align 8, !tbaa !60
  %21 = load i64, i64* %i, align 8, !tbaa !6
  %mul5 = mul i64 %21, 4
  %add6 = add i64 %mul5, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %20, i64 %add6
  %22 = load i8, i8* %arrayidx7, align 1, !tbaa !16
  %23 = load i8*, i8** %chunk, align 8, !tbaa !2
  %24 = load i64, i64* %j, align 8, !tbaa !6
  %inc8 = add i64 %24, 1
  store i64 %inc8, i64* %j, align 8, !tbaa !6
  %arrayidx9 = getelementptr inbounds i8, i8* %23, i64 %24
  store i8 %22, i8* %arrayidx9, align 1, !tbaa !16
  %25 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette10 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %25, i32 0, i32 2
  %26 = load i8*, i8** %palette10, align 8, !tbaa !60
  %27 = load i64, i64* %i, align 8, !tbaa !6
  %mul11 = mul i64 %27, 4
  %add12 = add i64 %mul11, 2
  %arrayidx13 = getelementptr inbounds i8, i8* %26, i64 %add12
  %28 = load i8, i8* %arrayidx13, align 1, !tbaa !16
  %29 = load i8*, i8** %chunk, align 8, !tbaa !2
  %30 = load i64, i64* %j, align 8, !tbaa !6
  %inc14 = add i64 %30, 1
  store i64 %inc14, i64* %j, align 8, !tbaa !6
  %arrayidx15 = getelementptr inbounds i8, i8* %29, i64 %30
  store i8 %28, i8* %arrayidx15, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %31 = load i64, i64* %i, align 8, !tbaa !6
  %inc16 = add i64 %31, 1
  store i64 %inc16, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %32 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %32)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup17

cleanup17:                                        ; preds = %for.end, %cleanup
  %33 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #16
  %34 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %34) #16
  %35 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #16
  %36 = load i32, i32* %retval, align 4
  ret i32 %36
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_tRNSP8ucvectorPK16LodePNGColorMode(%struct.ucvector* %out, %struct.LodePNGColorMode* %info) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %info.addr = alloca %struct.LodePNGColorMode*, align 8
  %chunk = alloca i8*, align 8
  %i = alloca i64, align 8
  %amount = alloca i64, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %error32 = alloca i32, align 4
  %error53 = alloca i32, align 4
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %info, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %chunk, align 8, !tbaa !2
  %1 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %1, i32 0, i32 0
  %2 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %2, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = bitcast i64* %amount to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %5, i32 0, i32 3
  %6 = load i64, i64* %palettesize, align 8, !tbaa !61
  store i64 %6, i64* %amount, align 8, !tbaa !6
  %7 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palettesize1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %7, i32 0, i32 3
  %8 = load i64, i64* %palettesize1, align 8, !tbaa !61
  store i64 %8, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %cmp2 = icmp ne i64 %9, 0
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %10, i32 0, i32 2
  %11 = load i8*, i8** %palette, align 8, !tbaa !60
  %12 = load i64, i64* %i, align 8, !tbaa !6
  %sub = sub i64 %12, 1
  %mul = mul i64 4, %sub
  %add = add i64 %mul, 3
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %add
  %13 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %13 to i32
  %cmp3 = icmp ne i32 %conv, 255
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  %14 = load i64, i64* %amount, align 8, !tbaa !6
  %dec = add i64 %14, -1
  store i64 %dec, i64* %amount, align 8, !tbaa !6
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i64, i64* %i, align 8, !tbaa !6
  %dec5 = add i64 %15, -1
  store i64 %dec5, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %if.then4, %for.cond
  %16 = load i64, i64* %amount, align 8, !tbaa !6
  %tobool = icmp ne i64 %16, 0
  br i1 %tobool, label %if.then6, label %if.end22

if.then6:                                         ; preds = %for.end
  %17 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #16
  %18 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %19 = load i64, i64* %amount, align 8, !tbaa !6
  %conv7 = trunc i64 %19 to i32
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %18, i32 %conv7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0))
  store i32 %call, i32* %error, align 4, !tbaa !8
  %20 = load i32, i32* %error, align 4, !tbaa !8
  %tobool8 = icmp ne i32 %20, 0
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then6
  %21 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %21, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.then6
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end10, %if.then9
  %22 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup23 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc20, %cleanup.cont
  %23 = load i64, i64* %i, align 8, !tbaa !6
  %24 = load i64, i64* %amount, align 8, !tbaa !6
  %cmp12 = icmp ne i64 %23, %24
  br i1 %cmp12, label %for.body13, label %for.end21

for.body13:                                       ; preds = %for.cond11
  %25 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %palette14 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %25, i32 0, i32 2
  %26 = load i8*, i8** %palette14, align 8, !tbaa !60
  %27 = load i64, i64* %i, align 8, !tbaa !6
  %mul15 = mul i64 4, %27
  %add16 = add i64 %mul15, 3
  %arrayidx17 = getelementptr inbounds i8, i8* %26, i64 %add16
  %28 = load i8, i8* %arrayidx17, align 1, !tbaa !16
  %29 = load i8*, i8** %chunk, align 8, !tbaa !2
  %30 = load i64, i64* %i, align 8, !tbaa !6
  %add18 = add i64 8, %30
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i64 %add18
  store i8 %28, i8* %arrayidx19, align 1, !tbaa !16
  br label %for.inc20

for.inc20:                                        ; preds = %for.body13
  %31 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %31, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond11

for.end21:                                        ; preds = %for.cond11
  br label %if.end22

if.end22:                                         ; preds = %for.end21, %for.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup23

cleanup23:                                        ; preds = %if.end22, %cleanup
  %32 = bitcast i64* %amount to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #16
  %33 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #16
  %cleanup.dest25 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest25, label %cleanup90 [
    i32 0, label %cleanup.cont26
  ]

cleanup.cont26:                                   ; preds = %cleanup23
  br label %if.end86

if.else:                                          ; preds = %entry
  %34 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype27 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %34, i32 0, i32 0
  %35 = load i32, i32* %colortype27, align 8, !tbaa !58
  %cmp28 = icmp eq i32 %35, 0
  br i1 %cmp28, label %if.then29, label %if.else46

if.then29:                                        ; preds = %if.else
  %36 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_defined = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %36, i32 0, i32 4
  %37 = load i32, i32* %key_defined, align 8, !tbaa !52
  %tobool30 = icmp ne i32 %37, 0
  br i1 %tobool30, label %if.then31, label %if.end45

if.then31:                                        ; preds = %if.then29
  %38 = bitcast i32* %error32 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %38) #16
  %39 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call33 = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %39, i32 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0))
  store i32 %call33, i32* %error32, align 4, !tbaa !8
  %40 = load i32, i32* %error32, align 4, !tbaa !8
  %tobool34 = icmp ne i32 %40, 0
  br i1 %tobool34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.then31
  %41 = load i32, i32* %error32, align 4, !tbaa !8
  store i32 %41, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup37

if.end36:                                         ; preds = %if.then31
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup37

cleanup37:                                        ; preds = %if.end36, %if.then35
  %42 = bitcast i32* %error32 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %42) #16
  %cleanup.dest38 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest38, label %cleanup90 [
    i32 0, label %cleanup.cont39
  ]

cleanup.cont39:                                   ; preds = %cleanup37
  %43 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_r = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %43, i32 0, i32 5
  %44 = load i32, i32* %key_r, align 4, !tbaa !57
  %shr = lshr i32 %44, 8
  %conv40 = trunc i32 %shr to i8
  %45 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx41 = getelementptr inbounds i8, i8* %45, i64 8
  store i8 %conv40, i8* %arrayidx41, align 1, !tbaa !16
  %46 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_r42 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %46, i32 0, i32 5
  %47 = load i32, i32* %key_r42, align 4, !tbaa !57
  %and = and i32 %47, 255
  %conv43 = trunc i32 %and to i8
  %48 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx44 = getelementptr inbounds i8, i8* %48, i64 9
  store i8 %conv43, i8* %arrayidx44, align 1, !tbaa !16
  br label %if.end45

if.end45:                                         ; preds = %cleanup.cont39, %if.then29
  br label %if.end85

if.else46:                                        ; preds = %if.else
  %49 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %colortype47 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %49, i32 0, i32 0
  %50 = load i32, i32* %colortype47, align 8, !tbaa !58
  %cmp48 = icmp eq i32 %50, 2
  br i1 %cmp48, label %if.then49, label %if.end84

if.then49:                                        ; preds = %if.else46
  %51 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_defined50 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %51, i32 0, i32 4
  %52 = load i32, i32* %key_defined50, align 8, !tbaa !52
  %tobool51 = icmp ne i32 %52, 0
  br i1 %tobool51, label %if.then52, label %if.end83

if.then52:                                        ; preds = %if.then49
  %53 = bitcast i32* %error53 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %53) #16
  %54 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call54 = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %54, i32 6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0))
  store i32 %call54, i32* %error53, align 4, !tbaa !8
  %55 = load i32, i32* %error53, align 4, !tbaa !8
  %tobool55 = icmp ne i32 %55, 0
  br i1 %tobool55, label %if.then56, label %if.end57

if.then56:                                        ; preds = %if.then52
  %56 = load i32, i32* %error53, align 4, !tbaa !8
  store i32 %56, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup58

if.end57:                                         ; preds = %if.then52
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup58

cleanup58:                                        ; preds = %if.end57, %if.then56
  %57 = bitcast i32* %error53 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %57) #16
  %cleanup.dest59 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest59, label %cleanup90 [
    i32 0, label %cleanup.cont60
  ]

cleanup.cont60:                                   ; preds = %cleanup58
  %58 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_r61 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %58, i32 0, i32 5
  %59 = load i32, i32* %key_r61, align 4, !tbaa !57
  %shr62 = lshr i32 %59, 8
  %conv63 = trunc i32 %shr62 to i8
  %60 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx64 = getelementptr inbounds i8, i8* %60, i64 8
  store i8 %conv63, i8* %arrayidx64, align 1, !tbaa !16
  %61 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_r65 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %61, i32 0, i32 5
  %62 = load i32, i32* %key_r65, align 4, !tbaa !57
  %and66 = and i32 %62, 255
  %conv67 = trunc i32 %and66 to i8
  %63 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx68 = getelementptr inbounds i8, i8* %63, i64 9
  store i8 %conv67, i8* %arrayidx68, align 1, !tbaa !16
  %64 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_g = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %64, i32 0, i32 6
  %65 = load i32, i32* %key_g, align 8, !tbaa !56
  %shr69 = lshr i32 %65, 8
  %conv70 = trunc i32 %shr69 to i8
  %66 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx71 = getelementptr inbounds i8, i8* %66, i64 10
  store i8 %conv70, i8* %arrayidx71, align 1, !tbaa !16
  %67 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_g72 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %67, i32 0, i32 6
  %68 = load i32, i32* %key_g72, align 8, !tbaa !56
  %and73 = and i32 %68, 255
  %conv74 = trunc i32 %and73 to i8
  %69 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx75 = getelementptr inbounds i8, i8* %69, i64 11
  store i8 %conv74, i8* %arrayidx75, align 1, !tbaa !16
  %70 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_b = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %70, i32 0, i32 7
  %71 = load i32, i32* %key_b, align 4, !tbaa !55
  %shr76 = lshr i32 %71, 8
  %conv77 = trunc i32 %shr76 to i8
  %72 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx78 = getelementptr inbounds i8, i8* %72, i64 12
  store i8 %conv77, i8* %arrayidx78, align 1, !tbaa !16
  %73 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %info.addr, align 8, !tbaa !2
  %key_b79 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %73, i32 0, i32 7
  %74 = load i32, i32* %key_b79, align 4, !tbaa !55
  %and80 = and i32 %74, 255
  %conv81 = trunc i32 %and80 to i8
  %75 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx82 = getelementptr inbounds i8, i8* %75, i64 13
  store i8 %conv81, i8* %arrayidx82, align 1, !tbaa !16
  br label %if.end83

if.end83:                                         ; preds = %cleanup.cont60, %if.then49
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.else46
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.end45
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %cleanup.cont26
  %76 = load i8*, i8** %chunk, align 8, !tbaa !2
  %tobool87 = icmp ne i8* %76, null
  br i1 %tobool87, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.end86
  %77 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %77)
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %if.end86
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup90

cleanup90:                                        ; preds = %if.end89, %cleanup58, %cleanup37, %cleanup23
  %78 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %78) #16
  %79 = load i32, i32* %retval, align 4
  ret i32 %79
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_bKGDP8ucvectorPK11LodePNGInfo(%struct.ucvector* %out, %struct.LodePNGInfo* %info) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %chunk = alloca i8*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %error16 = alloca i32, align 4
  %error51 = alloca i32, align 4
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %chunk, align 8, !tbaa !2
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 3
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color, i32 0, i32 0
  %2 = load i32, i32* %colortype, align 8, !tbaa !111
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color1 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 3
  %colortype2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color1, i32 0, i32 0
  %4 = load i32, i32* %colortype2, align 8, !tbaa !111
  %cmp3 = icmp eq i32 %4, 4
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %6, i32 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0))
  store i32 %call, i32* %error, align 4, !tbaa !8
  %7 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %8 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then4
  %9 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %9) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup69 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 5
  %11 = load i32, i32* %background_r, align 4, !tbaa !83
  %shr = lshr i32 %11, 8
  %conv = trunc i32 %shr to i8
  %12 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 8
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !16
  %13 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r5 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %13, i32 0, i32 5
  %14 = load i32, i32* %background_r5, align 4, !tbaa !83
  %and = and i32 %14, 255
  %conv6 = trunc i32 %and to i8
  %15 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx7 = getelementptr inbounds i8, i8* %15, i64 9
  store i8 %conv6, i8* %arrayidx7, align 1, !tbaa !16
  br label %if.end65

if.else:                                          ; preds = %lor.lhs.false
  %16 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color8 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %16, i32 0, i32 3
  %colortype9 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color8, i32 0, i32 0
  %17 = load i32, i32* %colortype9, align 8, !tbaa !111
  %cmp10 = icmp eq i32 %17, 2
  br i1 %cmp10, label %if.then15, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %if.else
  %18 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color12 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %18, i32 0, i32 3
  %colortype13 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color12, i32 0, i32 0
  %19 = load i32, i32* %colortype13, align 8, !tbaa !111
  %cmp14 = icmp eq i32 %19, 6
  br i1 %cmp14, label %if.then15, label %if.else46

if.then15:                                        ; preds = %lor.lhs.false11, %if.else
  %20 = bitcast i32* %error16 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #16
  %21 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call17 = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %21, i32 6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0))
  store i32 %call17, i32* %error16, align 4, !tbaa !8
  %22 = load i32, i32* %error16, align 4, !tbaa !8
  %tobool18 = icmp ne i32 %22, 0
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.then15
  %23 = load i32, i32* %error16, align 4, !tbaa !8
  store i32 %23, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup21

if.end20:                                         ; preds = %if.then15
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup21

cleanup21:                                        ; preds = %if.end20, %if.then19
  %24 = bitcast i32* %error16 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #16
  %cleanup.dest22 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest22, label %cleanup69 [
    i32 0, label %cleanup.cont23
  ]

cleanup.cont23:                                   ; preds = %cleanup21
  %25 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r24 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %25, i32 0, i32 5
  %26 = load i32, i32* %background_r24, align 4, !tbaa !83
  %shr25 = lshr i32 %26, 8
  %conv26 = trunc i32 %shr25 to i8
  %27 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx27 = getelementptr inbounds i8, i8* %27, i64 8
  store i8 %conv26, i8* %arrayidx27, align 1, !tbaa !16
  %28 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r28 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %28, i32 0, i32 5
  %29 = load i32, i32* %background_r28, align 4, !tbaa !83
  %and29 = and i32 %29, 255
  %conv30 = trunc i32 %and29 to i8
  %30 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx31 = getelementptr inbounds i8, i8* %30, i64 9
  store i8 %conv30, i8* %arrayidx31, align 1, !tbaa !16
  %31 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_g = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %31, i32 0, i32 6
  %32 = load i32, i32* %background_g, align 8, !tbaa !82
  %shr32 = lshr i32 %32, 8
  %conv33 = trunc i32 %shr32 to i8
  %33 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx34 = getelementptr inbounds i8, i8* %33, i64 10
  store i8 %conv33, i8* %arrayidx34, align 1, !tbaa !16
  %34 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_g35 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %34, i32 0, i32 6
  %35 = load i32, i32* %background_g35, align 8, !tbaa !82
  %and36 = and i32 %35, 255
  %conv37 = trunc i32 %and36 to i8
  %36 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx38 = getelementptr inbounds i8, i8* %36, i64 11
  store i8 %conv37, i8* %arrayidx38, align 1, !tbaa !16
  %37 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_b = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %37, i32 0, i32 7
  %38 = load i32, i32* %background_b, align 4, !tbaa !81
  %shr39 = lshr i32 %38, 8
  %conv40 = trunc i32 %shr39 to i8
  %39 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx41 = getelementptr inbounds i8, i8* %39, i64 12
  store i8 %conv40, i8* %arrayidx41, align 1, !tbaa !16
  %40 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_b42 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %40, i32 0, i32 7
  %41 = load i32, i32* %background_b42, align 4, !tbaa !81
  %and43 = and i32 %41, 255
  %conv44 = trunc i32 %and43 to i8
  %42 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx45 = getelementptr inbounds i8, i8* %42, i64 13
  store i8 %conv44, i8* %arrayidx45, align 1, !tbaa !16
  br label %if.end64

if.else46:                                        ; preds = %lor.lhs.false11
  %43 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %color47 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %43, i32 0, i32 3
  %colortype48 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color47, i32 0, i32 0
  %44 = load i32, i32* %colortype48, align 8, !tbaa !111
  %cmp49 = icmp eq i32 %44, 3
  br i1 %cmp49, label %if.then50, label %if.end63

if.then50:                                        ; preds = %if.else46
  %45 = bitcast i32* %error51 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #16
  %46 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call52 = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %46, i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0))
  store i32 %call52, i32* %error51, align 4, !tbaa !8
  %47 = load i32, i32* %error51, align 4, !tbaa !8
  %tobool53 = icmp ne i32 %47, 0
  br i1 %tobool53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.then50
  %48 = load i32, i32* %error51, align 4, !tbaa !8
  store i32 %48, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup56

if.end55:                                         ; preds = %if.then50
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup56

cleanup56:                                        ; preds = %if.end55, %if.then54
  %49 = bitcast i32* %error51 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %49) #16
  %cleanup.dest57 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest57, label %cleanup69 [
    i32 0, label %cleanup.cont58
  ]

cleanup.cont58:                                   ; preds = %cleanup56
  %50 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %background_r59 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %50, i32 0, i32 5
  %51 = load i32, i32* %background_r59, align 4, !tbaa !83
  %and60 = and i32 %51, 255
  %conv61 = trunc i32 %and60 to i8
  %52 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx62 = getelementptr inbounds i8, i8* %52, i64 8
  store i8 %conv61, i8* %arrayidx62, align 1, !tbaa !16
  br label %if.end63

if.end63:                                         ; preds = %cleanup.cont58, %if.else46
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %cleanup.cont23
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %cleanup.cont
  %53 = load i8*, i8** %chunk, align 8, !tbaa !2
  %tobool66 = icmp ne i8* %53, null
  br i1 %tobool66, label %if.then67, label %if.end68

if.then67:                                        ; preds = %if.end65
  %54 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %54)
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %if.end65
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup69

cleanup69:                                        ; preds = %if.end68, %cleanup56, %cleanup21, %cleanup
  %55 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %55) #16
  %56 = load i32, i32* %retval, align 4
  ret i32 %56
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_pHYsP8ucvectorPK11LodePNGInfo(%struct.ucvector* %out, %struct.LodePNGInfo* %info) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %info.addr = alloca %struct.LodePNGInfo*, align 8
  %chunk = alloca i8*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGInfo* %info, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %2, i32 9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0))
  store i32 %call, i32* %error, align 4, !tbaa !8
  %3 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %5) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup2 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %6 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 8
  %7 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %phys_x = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %7, i32 0, i32 19
  %8 = load i32, i32* %phys_x, align 8, !tbaa !120
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr, i32 %8)
  %9 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr1 = getelementptr inbounds i8, i8* %9, i64 12
  %10 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %phys_y = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %10, i32 0, i32 20
  %11 = load i32, i32* %phys_y, align 4, !tbaa !121
  call void @_ZL19lodepng_set32bitIntPhj(i8* %add.ptr1, i32 %11)
  %12 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info.addr, align 8, !tbaa !2
  %phys_unit = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %12, i32 0, i32 21
  %13 = load i32, i32* %phys_unit, align 8, !tbaa !122
  %conv = trunc i32 %13 to i8
  %14 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 16
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !16
  %15 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %15)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup2

cleanup2:                                         ; preds = %cleanup.cont, %cleanup
  %16 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #16
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_IDATP8ucvectorPKhmP23LodePNGCompressSettings(%struct.ucvector* %out, i8* %data, i64 %datasize, %struct.LodePNGCompressSettings* %zlibsettings) #0 {
entry:
  %out.addr = alloca %struct.ucvector*, align 8
  %data.addr = alloca i8*, align 8
  %datasize.addr = alloca i64, align 8
  %zlibsettings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %error = alloca i32, align 4
  %zlib = alloca i8*, align 8
  %zlibsize = alloca i64, align 8
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %datasize, i64* %datasize.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %zlibsettings, %struct.LodePNGCompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i8** %zlib to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i8* null, i8** %zlib, align 8, !tbaa !2
  %2 = bitcast i64* %zlibsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i64 0, i64* %zlibsize, align 8, !tbaa !6
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %4 = load i64, i64* %datasize.addr, align 8, !tbaa !6
  %5 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %call = call i32 @_ZL13zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %zlib, i64* %zlibsize, i8* %3, i64 %4, %struct.LodePNGCompressSettings* %5)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %6 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %7 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %8 = load i64, i64* %zlibsize, align 8, !tbaa !6
  %conv = trunc i64 %8 to i32
  %9 = load i8*, i8** %zlib, align 8, !tbaa !2
  %call1 = call i32 @_ZL21lodepng_chunk_createvP8ucvectorjPKcPKh(%struct.ucvector* %7, i32 %conv, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.108, i32 0, i32 0), i8* %9)
  store i32 %call1, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8*, i8** %zlib, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %10)
  %11 = load i32, i32* %error, align 4, !tbaa !8
  %12 = bitcast i64* %zlibsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #16
  %13 = bitcast i8** %zlib to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #16
  %14 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #16
  ret i32 %11
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_tIMEP8ucvectorPK11LodePNGTime(%struct.ucvector* %out, %struct.LodePNGTime* %time) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %time.addr = alloca %struct.LodePNGTime*, align 8
  %chunk = alloca i8*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGTime* %time, %struct.LodePNGTime** %time.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %2, i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0))
  store i32 %call, i32* %error, align 4, !tbaa !8
  %3 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %5) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup14 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %6 = load %struct.LodePNGTime*, %struct.LodePNGTime** %time.addr, align 8, !tbaa !2
  %year = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %6, i32 0, i32 0
  %7 = load i32, i32* %year, align 4, !tbaa !163
  %shr = lshr i32 %7, 8
  %conv = trunc i32 %shr to i8
  %8 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %8, i64 8
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !16
  %9 = load %struct.LodePNGTime*, %struct.LodePNGTime** %time.addr, align 8, !tbaa !2
  %year1 = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %9, i32 0, i32 0
  %10 = load i32, i32* %year1, align 4, !tbaa !163
  %and = and i32 %10, 255
  %conv2 = trunc i32 %and to i8
  %11 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx3 = getelementptr inbounds i8, i8* %11, i64 9
  store i8 %conv2, i8* %arrayidx3, align 1, !tbaa !16
  %12 = load %struct.LodePNGTime*, %struct.LodePNGTime** %time.addr, align 8, !tbaa !2
  %month = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %12, i32 0, i32 1
  %13 = load i32, i32* %month, align 4, !tbaa !164
  %conv4 = trunc i32 %13 to i8
  %14 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx5 = getelementptr inbounds i8, i8* %14, i64 10
  store i8 %conv4, i8* %arrayidx5, align 1, !tbaa !16
  %15 = load %struct.LodePNGTime*, %struct.LodePNGTime** %time.addr, align 8, !tbaa !2
  %day = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %15, i32 0, i32 2
  %16 = load i32, i32* %day, align 4, !tbaa !165
  %conv6 = trunc i32 %16 to i8
  %17 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx7 = getelementptr inbounds i8, i8* %17, i64 11
  store i8 %conv6, i8* %arrayidx7, align 1, !tbaa !16
  %18 = load %struct.LodePNGTime*, %struct.LodePNGTime** %time.addr, align 8, !tbaa !2
  %hour = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %18, i32 0, i32 3
  %19 = load i32, i32* %hour, align 4, !tbaa !166
  %conv8 = trunc i32 %19 to i8
  %20 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx9 = getelementptr inbounds i8, i8* %20, i64 12
  store i8 %conv8, i8* %arrayidx9, align 1, !tbaa !16
  %21 = load %struct.LodePNGTime*, %struct.LodePNGTime** %time.addr, align 8, !tbaa !2
  %minute = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %21, i32 0, i32 4
  %22 = load i32, i32* %minute, align 4, !tbaa !167
  %conv10 = trunc i32 %22 to i8
  %23 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx11 = getelementptr inbounds i8, i8* %23, i64 13
  store i8 %conv10, i8* %arrayidx11, align 1, !tbaa !16
  %24 = load %struct.LodePNGTime*, %struct.LodePNGTime** %time.addr, align 8, !tbaa !2
  %second = getelementptr inbounds %struct.LodePNGTime, %struct.LodePNGTime* %24, i32 0, i32 5
  %25 = load i32, i32* %second, align 4, !tbaa !168
  %conv12 = trunc i32 %25 to i8
  %26 = load i8*, i8** %chunk, align 8, !tbaa !2
  %arrayidx13 = getelementptr inbounds i8, i8* %26, i64 14
  store i8 %conv12, i8* %arrayidx13, align 1, !tbaa !16
  %27 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %27)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup14

cleanup14:                                        ; preds = %cleanup.cont, %cleanup
  %28 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #16
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_zTXtP8ucvectorPKcS2_P23LodePNGCompressSettings(%struct.ucvector* %out, i8* %keyword, i8* %textstring, %struct.LodePNGCompressSettings* %zlibsettings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %keyword.addr = alloca i8*, align 8
  %textstring.addr = alloca i8*, align 8
  %zlibsettings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %error = alloca i32, align 4
  %chunk = alloca i8*, align 8
  %compressed = alloca i8*, align 8
  %compressedsize = alloca i64, align 8
  %textsize = alloca i64, align 8
  %keysize = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %size = alloca i64, align 8
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %keyword, i8** %keyword.addr, align 8, !tbaa !2
  store i8* %textstring, i8** %textstring.addr, align 8, !tbaa !2
  store %struct.LodePNGCompressSettings* %zlibsettings, %struct.LodePNGCompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i8* null, i8** %chunk, align 8, !tbaa !2
  %2 = bitcast i8** %compressed to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i8* null, i8** %compressed, align 8, !tbaa !2
  %3 = bitcast i64* %compressedsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  store i64 0, i64* %compressedsize, align 8, !tbaa !6
  %4 = bitcast i64* %textsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = load i8*, i8** %textstring.addr, align 8, !tbaa !2
  %call = call i64 @_ZL14lodepng_strlenPKc(i8* %5)
  store i64 %call, i64* %textsize, align 8, !tbaa !6
  %6 = bitcast i64* %keysize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  %7 = load i8*, i8** %keyword.addr, align 8, !tbaa !2
  %call1 = call i64 @_ZL14lodepng_strlenPKc(i8* %7)
  store i64 %call1, i64* %keysize, align 8, !tbaa !6
  %8 = load i64, i64* %keysize, align 8, !tbaa !6
  %cmp = icmp ult i64 %8, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %9 = load i64, i64* %keysize, align 8, !tbaa !6
  %cmp2 = icmp ugt i64 %9, 79
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 89, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %10 = load i8*, i8** %textstring.addr, align 8, !tbaa !2
  %11 = load i64, i64* %textsize, align 8, !tbaa !6
  %12 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %call3 = call i32 @_ZL13zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %compressed, i64* %compressedsize, i8* %10, i64 %11, %struct.LodePNGCompressSettings* %12)
  store i32 %call3, i32* %error, align 4, !tbaa !8
  %13 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %if.end7, label %if.then4

if.then4:                                         ; preds = %if.end
  %14 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #16
  %15 = load i64, i64* %keysize, align 8, !tbaa !6
  %add = add i64 %15, 2
  %16 = load i64, i64* %compressedsize, align 8, !tbaa !6
  %add5 = add i64 %add, %16
  store i64 %add5, i64* %size, align 8, !tbaa !6
  %17 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %18 = load i64, i64* %size, align 8, !tbaa !6
  %conv = trunc i64 %18 to i32
  %call6 = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %17, i32 %conv, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0))
  store i32 %call6, i32* %error, align 4, !tbaa !8
  %19 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %if.end
  %20 = load i32, i32* %error, align 4, !tbaa !8
  %tobool8 = icmp ne i32 %20, 0
  br i1 %tobool8, label %if.end15, label %if.then9

if.then9:                                         ; preds = %if.end7
  %21 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 8
  %22 = load i8*, i8** %keyword.addr, align 8, !tbaa !2
  %23 = load i64, i64* %keysize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr, i8* %22, i64 %23)
  %24 = load i8*, i8** %chunk, align 8, !tbaa !2
  %25 = load i64, i64* %keysize, align 8, !tbaa !6
  %add10 = add i64 8, %25
  %arrayidx = getelementptr inbounds i8, i8* %24, i64 %add10
  store i8 0, i8* %arrayidx, align 1, !tbaa !16
  %26 = load i8*, i8** %chunk, align 8, !tbaa !2
  %27 = load i64, i64* %keysize, align 8, !tbaa !6
  %add11 = add i64 9, %27
  %arrayidx12 = getelementptr inbounds i8, i8* %26, i64 %add11
  store i8 0, i8* %arrayidx12, align 1, !tbaa !16
  %28 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr13 = getelementptr inbounds i8, i8* %28, i64 10
  %29 = load i64, i64* %keysize, align 8, !tbaa !6
  %add.ptr14 = getelementptr inbounds i8, i8* %add.ptr13, i64 %29
  %30 = load i8*, i8** %compressed, align 8, !tbaa !2
  %31 = load i64, i64* %compressedsize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr14, i8* %30, i64 %31)
  %32 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %32)
  br label %if.end15

if.end15:                                         ; preds = %if.then9, %if.end7
  %33 = load i8*, i8** %compressed, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %33)
  %34 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %34, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end15, %if.then
  %35 = bitcast i64* %keysize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #16
  %36 = bitcast i64* %textsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #16
  %37 = bitcast i64* %compressedsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #16
  %38 = bitcast i8** %compressed to i8*
  call void @llvm.lifetime.end(i64 8, i8* %38) #16
  %39 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %39) #16
  %40 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #16
  %41 = load i32, i32* %retval, align 4
  ret i32 %41
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_tEXtP8ucvectorPKcS2_(%struct.ucvector* %out, i8* %keyword, i8* %textstring) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %keyword.addr = alloca i8*, align 8
  %textstring.addr = alloca i8*, align 8
  %chunk = alloca i8*, align 8
  %keysize = alloca i64, align 8
  %textsize = alloca i64, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %error = alloca i32, align 4
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %keyword, i8** %keyword.addr, align 8, !tbaa !2
  store i8* %textstring, i8** %textstring.addr, align 8, !tbaa !2
  %0 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %chunk, align 8, !tbaa !2
  %1 = bitcast i64* %keysize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i8*, i8** %keyword.addr, align 8, !tbaa !2
  %call = call i64 @_ZL14lodepng_strlenPKc(i8* %2)
  store i64 %call, i64* %keysize, align 8, !tbaa !6
  %3 = bitcast i64* %textsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load i8*, i8** %textstring.addr, align 8, !tbaa !2
  %call1 = call i64 @_ZL14lodepng_strlenPKc(i8* %4)
  store i64 %call1, i64* %textsize, align 8, !tbaa !6
  %5 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  %6 = load i64, i64* %keysize, align 8, !tbaa !6
  %add = add i64 %6, 1
  %7 = load i64, i64* %textsize, align 8, !tbaa !6
  %add2 = add i64 %add, %7
  store i64 %add2, i64* %size, align 8, !tbaa !6
  %8 = load i64, i64* %keysize, align 8, !tbaa !6
  %cmp = icmp ult i64 %8, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %9 = load i64, i64* %keysize, align 8, !tbaa !6
  %cmp3 = icmp ugt i64 %9, 79
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 89, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup10

if.end:                                           ; preds = %lor.lhs.false
  %10 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #16
  %11 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %12 = load i64, i64* %size, align 8, !tbaa !6
  %conv = trunc i64 %12 to i32
  %call4 = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %11, i32 %conv, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0))
  store i32 %call4, i32* %error, align 4, !tbaa !8
  %13 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %13, 0
  br i1 %tobool, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %14 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %14, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5
  %15 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %15) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup10 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %16 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 8
  %17 = load i8*, i8** %keyword.addr, align 8, !tbaa !2
  %18 = load i64, i64* %keysize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr, i8* %17, i64 %18)
  %19 = load i8*, i8** %chunk, align 8, !tbaa !2
  %20 = load i64, i64* %keysize, align 8, !tbaa !6
  %add7 = add i64 8, %20
  %arrayidx = getelementptr inbounds i8, i8* %19, i64 %add7
  store i8 0, i8* %arrayidx, align 1, !tbaa !16
  %21 = load i8*, i8** %chunk, align 8, !tbaa !2
  %add.ptr8 = getelementptr inbounds i8, i8* %21, i64 9
  %22 = load i64, i64* %keysize, align 8, !tbaa !6
  %add.ptr9 = getelementptr inbounds i8, i8* %add.ptr8, i64 %22
  %23 = load i8*, i8** %textstring.addr, align 8, !tbaa !2
  %24 = load i64, i64* %textsize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr9, i8* %23, i64 %24)
  %25 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %25)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup10

cleanup10:                                        ; preds = %cleanup.cont, %cleanup, %if.then
  %26 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %26) #16
  %27 = bitcast i64* %textsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %27) #16
  %28 = bitcast i64* %keysize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #16
  %29 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #16
  %30 = load i32, i32* %retval, align 4
  ret i32 %30
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_iTXtP8ucvectorjPKcS2_S2_S2_P23LodePNGCompressSettings(%struct.ucvector* %out, i32 %compress, i8* %keyword, i8* %langtag, i8* %transkey, i8* %textstring, %struct.LodePNGCompressSettings* %zlibsettings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %compress.addr = alloca i32, align 4
  %keyword.addr = alloca i8*, align 8
  %langtag.addr = alloca i8*, align 8
  %transkey.addr = alloca i8*, align 8
  %textstring.addr = alloca i8*, align 8
  %zlibsettings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %error = alloca i32, align 4
  %chunk = alloca i8*, align 8
  %compressed = alloca i8*, align 8
  %compressedsize = alloca i64, align 8
  %textsize = alloca i64, align 8
  %keysize = alloca i64, align 8
  %langsize = alloca i64, align 8
  %transsize = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %size = alloca i64, align 8
  %pos = alloca i64, align 8
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i32 %compress, i32* %compress.addr, align 4, !tbaa !8
  store i8* %keyword, i8** %keyword.addr, align 8, !tbaa !2
  store i8* %langtag, i8** %langtag.addr, align 8, !tbaa !2
  store i8* %transkey, i8** %transkey.addr, align 8, !tbaa !2
  store i8* %textstring, i8** %textstring.addr, align 8, !tbaa !2
  store %struct.LodePNGCompressSettings* %zlibsettings, %struct.LodePNGCompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i8* null, i8** %chunk, align 8, !tbaa !2
  %2 = bitcast i8** %compressed to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  store i8* null, i8** %compressed, align 8, !tbaa !2
  %3 = bitcast i64* %compressedsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  store i64 0, i64* %compressedsize, align 8, !tbaa !6
  %4 = bitcast i64* %textsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = load i8*, i8** %textstring.addr, align 8, !tbaa !2
  %call = call i64 @_ZL14lodepng_strlenPKc(i8* %5)
  store i64 %call, i64* %textsize, align 8, !tbaa !6
  %6 = bitcast i64* %keysize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  %7 = load i8*, i8** %keyword.addr, align 8, !tbaa !2
  %call1 = call i64 @_ZL14lodepng_strlenPKc(i8* %7)
  store i64 %call1, i64* %keysize, align 8, !tbaa !6
  %8 = bitcast i64* %langsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  %9 = load i8*, i8** %langtag.addr, align 8, !tbaa !2
  %call2 = call i64 @_ZL14lodepng_strlenPKc(i8* %9)
  store i64 %call2, i64* %langsize, align 8, !tbaa !6
  %10 = bitcast i64* %transsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #16
  %11 = load i8*, i8** %transkey.addr, align 8, !tbaa !2
  %call3 = call i64 @_ZL14lodepng_strlenPKc(i8* %11)
  store i64 %call3, i64* %transsize, align 8, !tbaa !6
  %12 = load i64, i64* %keysize, align 8, !tbaa !6
  %cmp = icmp ult i64 %12, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %13 = load i64, i64* %keysize, align 8, !tbaa !6
  %cmp4 = icmp ugt i64 %13, 79
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 89, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %14 = load i32, i32* %compress.addr, align 4, !tbaa !8
  %tobool = icmp ne i32 %14, 0
  br i1 %tobool, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end
  %15 = load i8*, i8** %textstring.addr, align 8, !tbaa !2
  %16 = load i64, i64* %textsize, align 8, !tbaa !6
  %17 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %zlibsettings.addr, align 8, !tbaa !2
  %call6 = call i32 @_ZL13zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %compressed, i64* %compressedsize, i8* %15, i64 %16, %struct.LodePNGCompressSettings* %17)
  store i32 %call6, i32* %error, align 4, !tbaa !8
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end
  %18 = load i32, i32* %error, align 4, !tbaa !8
  %tobool8 = icmp ne i32 %18, 0
  br i1 %tobool8, label %if.end17, label %if.then9

if.then9:                                         ; preds = %if.end7
  %19 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #16
  %20 = load i64, i64* %keysize, align 8, !tbaa !6
  %add = add i64 %20, 3
  %21 = load i64, i64* %langsize, align 8, !tbaa !6
  %add10 = add i64 %add, %21
  %add11 = add i64 %add10, 1
  %22 = load i64, i64* %transsize, align 8, !tbaa !6
  %add12 = add i64 %add11, %22
  %add13 = add i64 %add12, 1
  %23 = load i32, i32* %compress.addr, align 4, !tbaa !8
  %tobool14 = icmp ne i32 %23, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then9
  %24 = load i64, i64* %compressedsize, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %if.then9
  %25 = load i64, i64* %textsize, align 8, !tbaa !6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %24, %cond.true ], [ %25, %cond.false ]
  %add15 = add i64 %add13, %cond
  store i64 %add15, i64* %size, align 8, !tbaa !6
  %26 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %27 = load i64, i64* %size, align 8, !tbaa !6
  %conv = trunc i64 %27 to i32
  %call16 = call i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %26, i32 %conv, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  store i32 %call16, i32* %error, align 4, !tbaa !8
  %28 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #16
  br label %if.end17

if.end17:                                         ; preds = %cond.end, %if.end7
  %29 = load i32, i32* %error, align 4, !tbaa !8
  %tobool18 = icmp ne i32 %29, 0
  br i1 %tobool18, label %if.end41, label %if.then19

if.then19:                                        ; preds = %if.end17
  %30 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %30) #16
  store i64 8, i64* %pos, align 8, !tbaa !6
  %31 = load i8*, i8** %chunk, align 8, !tbaa !2
  %32 = load i64, i64* %pos, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %32
  %33 = load i8*, i8** %keyword.addr, align 8, !tbaa !2
  %34 = load i64, i64* %keysize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr, i8* %33, i64 %34)
  %35 = load i64, i64* %keysize, align 8, !tbaa !6
  %36 = load i64, i64* %pos, align 8, !tbaa !6
  %add20 = add i64 %36, %35
  store i64 %add20, i64* %pos, align 8, !tbaa !6
  %37 = load i8*, i8** %chunk, align 8, !tbaa !2
  %38 = load i64, i64* %pos, align 8, !tbaa !6
  %inc = add i64 %38, 1
  store i64 %inc, i64* %pos, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %37, i64 %38
  store i8 0, i8* %arrayidx, align 1, !tbaa !16
  %39 = load i32, i32* %compress.addr, align 4, !tbaa !8
  %tobool21 = icmp ne i32 %39, 0
  %cond22 = select i1 %tobool21, i32 1, i32 0
  %conv23 = trunc i32 %cond22 to i8
  %40 = load i8*, i8** %chunk, align 8, !tbaa !2
  %41 = load i64, i64* %pos, align 8, !tbaa !6
  %inc24 = add i64 %41, 1
  store i64 %inc24, i64* %pos, align 8, !tbaa !6
  %arrayidx25 = getelementptr inbounds i8, i8* %40, i64 %41
  store i8 %conv23, i8* %arrayidx25, align 1, !tbaa !16
  %42 = load i8*, i8** %chunk, align 8, !tbaa !2
  %43 = load i64, i64* %pos, align 8, !tbaa !6
  %inc26 = add i64 %43, 1
  store i64 %inc26, i64* %pos, align 8, !tbaa !6
  %arrayidx27 = getelementptr inbounds i8, i8* %42, i64 %43
  store i8 0, i8* %arrayidx27, align 1, !tbaa !16
  %44 = load i8*, i8** %chunk, align 8, !tbaa !2
  %45 = load i64, i64* %pos, align 8, !tbaa !6
  %add.ptr28 = getelementptr inbounds i8, i8* %44, i64 %45
  %46 = load i8*, i8** %langtag.addr, align 8, !tbaa !2
  %47 = load i64, i64* %langsize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr28, i8* %46, i64 %47)
  %48 = load i64, i64* %langsize, align 8, !tbaa !6
  %49 = load i64, i64* %pos, align 8, !tbaa !6
  %add29 = add i64 %49, %48
  store i64 %add29, i64* %pos, align 8, !tbaa !6
  %50 = load i8*, i8** %chunk, align 8, !tbaa !2
  %51 = load i64, i64* %pos, align 8, !tbaa !6
  %inc30 = add i64 %51, 1
  store i64 %inc30, i64* %pos, align 8, !tbaa !6
  %arrayidx31 = getelementptr inbounds i8, i8* %50, i64 %51
  store i8 0, i8* %arrayidx31, align 1, !tbaa !16
  %52 = load i8*, i8** %chunk, align 8, !tbaa !2
  %53 = load i64, i64* %pos, align 8, !tbaa !6
  %add.ptr32 = getelementptr inbounds i8, i8* %52, i64 %53
  %54 = load i8*, i8** %transkey.addr, align 8, !tbaa !2
  %55 = load i64, i64* %transsize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr32, i8* %54, i64 %55)
  %56 = load i64, i64* %transsize, align 8, !tbaa !6
  %57 = load i64, i64* %pos, align 8, !tbaa !6
  %add33 = add i64 %57, %56
  store i64 %add33, i64* %pos, align 8, !tbaa !6
  %58 = load i8*, i8** %chunk, align 8, !tbaa !2
  %59 = load i64, i64* %pos, align 8, !tbaa !6
  %inc34 = add i64 %59, 1
  store i64 %inc34, i64* %pos, align 8, !tbaa !6
  %arrayidx35 = getelementptr inbounds i8, i8* %58, i64 %59
  store i8 0, i8* %arrayidx35, align 1, !tbaa !16
  %60 = load i32, i32* %compress.addr, align 4, !tbaa !8
  %tobool36 = icmp ne i32 %60, 0
  br i1 %tobool36, label %if.then37, label %if.else

if.then37:                                        ; preds = %if.then19
  %61 = load i8*, i8** %chunk, align 8, !tbaa !2
  %62 = load i64, i64* %pos, align 8, !tbaa !6
  %add.ptr38 = getelementptr inbounds i8, i8* %61, i64 %62
  %63 = load i8*, i8** %compressed, align 8, !tbaa !2
  %64 = load i64, i64* %compressedsize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr38, i8* %63, i64 %64)
  br label %if.end40

if.else:                                          ; preds = %if.then19
  %65 = load i8*, i8** %chunk, align 8, !tbaa !2
  %66 = load i64, i64* %pos, align 8, !tbaa !6
  %add.ptr39 = getelementptr inbounds i8, i8* %65, i64 %66
  %67 = load i8*, i8** %textstring.addr, align 8, !tbaa !2
  %68 = load i64, i64* %textsize, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr39, i8* %67, i64 %68)
  br label %if.end40

if.end40:                                         ; preds = %if.else, %if.then37
  %69 = load i8*, i8** %chunk, align 8, !tbaa !2
  call void @_Z26lodepng_chunk_generate_crcPh(i8* %69)
  %70 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %70) #16
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end17
  %71 = load i8*, i8** %compressed, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %71)
  %72 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %72, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end41, %if.then
  %73 = bitcast i64* %transsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %73) #16
  %74 = bitcast i64* %langsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %74) #16
  %75 = bitcast i64* %keysize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #16
  %76 = bitcast i64* %textsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %76) #16
  %77 = bitcast i64* %compressedsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %77) #16
  %78 = bitcast i8** %compressed to i8*
  call void @llvm.lifetime.end(i64 8, i8* %78) #16
  %79 = bitcast i8** %chunk to i8*
  call void @llvm.lifetime.end(i64 8, i8* %79) #16
  %80 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %80) #16
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13addChunk_IENDP8ucvector(%struct.ucvector* %out) #0 {
entry:
  %out.addr = alloca %struct.ucvector*, align 8
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %0 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %call = call i32 @_ZL21lodepng_chunk_createvP8ucvectorjPKcPKh(%struct.ucvector* %0, i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.109, i32 0, i32 0), i8* null)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** %out, i64* %outsize, i8* %image, i32 %w, i32 %h, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %error = alloca i32, align 4
  %state = alloca %struct.LodePNGState, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %image, i8** %image.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast %struct.LodePNGState* %state to i8*
  call void @llvm.lifetime.start(i64 504, i8* %1) #16
  call void @_Z18lodepng_state_initP12LodePNGState(%struct.LodePNGState* %state)
  %2 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %state, i32 0, i32 2
  %colortype1 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw, i32 0, i32 0
  store i32 %2, i32* %colortype1, align 8, !tbaa !134
  %3 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %info_raw2 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %state, i32 0, i32 2
  %bitdepth3 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw2, i32 0, i32 1
  store i32 %3, i32* %bitdepth3, align 4, !tbaa !135
  %4 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %info_png = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %state, i32 0, i32 3
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png, i32 0, i32 3
  %colortype4 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color, i32 0, i32 0
  store i32 %4, i32* %colortype4, align 8, !tbaa !140
  %5 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %info_png5 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %state, i32 0, i32 3
  %color6 = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %info_png5, i32 0, i32 3
  %bitdepth7 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %color6, i32 0, i32 1
  store i32 %5, i32* %bitdepth7, align 4, !tbaa !169
  %6 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %7 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %8 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %9 = load i32, i32* %w.addr, align 4, !tbaa !8
  %10 = load i32, i32* %h.addr, align 4, !tbaa !8
  %call = call i32 @_Z14lodepng_encodePPhPmPKhjjP12LodePNGState(i8** %6, i64* %7, i8* %8, i32 %9, i32 %10, %struct.LodePNGState* %state)
  %error8 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %state, i32 0, i32 4
  %11 = load i32, i32* %error8, align 8, !tbaa !105
  store i32 %11, i32* %error, align 4, !tbaa !8
  call void @_Z21lodepng_state_cleanupP12LodePNGState(%struct.LodePNGState* %state)
  %12 = load i32, i32* %error, align 4, !tbaa !8
  %13 = bitcast %struct.LodePNGState* %state to i8*
  call void @llvm.lifetime.end(i64 504, i8* %13) #16
  %14 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #16
  ret i32 %12
}

; Function Attrs: ssp uwtable
define i32 @_Z16lodepng_encode32PPhPmPKhjj(i8** %out, i64* %outsize, i8* %image, i32 %w, i32 %h) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %image, i8** %image.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  %0 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %1 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %3 = load i32, i32* %w.addr, align 4, !tbaa !8
  %4 = load i32, i32* %h.addr, align 4, !tbaa !8
  %call = call i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** %0, i64* %1, i8* %2, i32 %3, i32 %4, i32 6, i32 8)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define i32 @_Z16lodepng_encode24PPhPmPKhjj(i8** %out, i64* %outsize, i8* %image, i32 %w, i32 %h) #0 {
entry:
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %image, i8** %image.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  %0 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %1 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %3 = load i32, i32* %w.addr, align 4, !tbaa !8
  %4 = load i32, i32* %h.addr, align 4, !tbaa !8
  %call = call i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** %0, i64* %1, i8* %2, i32 %3, i32 %4, i32 2, i32 8)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define i32 @_Z19lodepng_encode_filePKcPKhjj16LodePNGColorTypej(i8* %filename, i8* %image, i32 %w, i32 %h, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %buffer = alloca i8*, align 8
  %buffersize = alloca i64, align 8
  %error = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  store i8* %image, i8** %image.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %4 = load i32, i32* %w.addr, align 4, !tbaa !8
  %5 = load i32, i32* %h.addr, align 4, !tbaa !8
  %6 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %7 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call = call i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** %buffer, i64* %buffersize, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %8 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %9 = load i8*, i8** %buffer, align 8, !tbaa !2
  %10 = load i64, i64* %buffersize, align 8, !tbaa !6
  %11 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %call1 = call i32 @_Z17lodepng_save_filePKhmPKc(i8* %9, i64 %10, i8* %11)
  store i32 %call1, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i8*, i8** %buffer, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %12)
  %13 = load i32, i32* %error, align 4, !tbaa !8
  %14 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #16
  %15 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %15) #16
  %16 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #16
  ret i32 %13
}

; Function Attrs: ssp uwtable
define i32 @_Z21lodepng_encode32_filePKcPKhjj(i8* %filename, i8* %image, i32 %w, i32 %h) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  store i8* %image, i8** %image.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  %0 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %2 = load i32, i32* %w.addr, align 4, !tbaa !8
  %3 = load i32, i32* %h.addr, align 4, !tbaa !8
  %call = call i32 @_Z19lodepng_encode_filePKcPKhjj16LodePNGColorTypej(i8* %0, i8* %1, i32 %2, i32 %3, i32 6, i32 8)
  ret i32 %call
}

; Function Attrs: ssp uwtable
define i32 @_Z21lodepng_encode24_filePKcPKhjj(i8* %filename, i8* %image, i32 %w, i32 %h) #0 {
entry:
  %filename.addr = alloca i8*, align 8
  %image.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  store i8* %filename, i8** %filename.addr, align 8, !tbaa !2
  store i8* %image, i8** %image.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  %0 = load i8*, i8** %filename.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %image.addr, align 8, !tbaa !2
  %2 = load i32, i32* %w.addr, align 4, !tbaa !8
  %3 = load i32, i32* %h.addr, align 4, !tbaa !8
  %call = call i32 @_Z19lodepng_encode_filePKcPKhjj16LodePNGColorTypej(i8* %0, i8* %1, i32 %2, i32 %3, i32 2, i32 8)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i8* @_Z18lodepng_error_textj(i32 %code) #4 {
entry:
  %retval = alloca i8*, align 8
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4, !tbaa !8
  %0 = load i32, i32* %code.addr, align 4, !tbaa !8
  switch i32 %0, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 10, label %sw.bb2
    i32 11, label %sw.bb3
    i32 13, label %sw.bb4
    i32 14, label %sw.bb5
    i32 15, label %sw.bb6
    i32 16, label %sw.bb7
    i32 17, label %sw.bb8
    i32 18, label %sw.bb9
    i32 19, label %sw.bb10
    i32 20, label %sw.bb11
    i32 21, label %sw.bb12
    i32 22, label %sw.bb13
    i32 23, label %sw.bb14
    i32 24, label %sw.bb15
    i32 25, label %sw.bb16
    i32 26, label %sw.bb17
    i32 27, label %sw.bb18
    i32 28, label %sw.bb19
    i32 29, label %sw.bb20
    i32 30, label %sw.bb21
    i32 31, label %sw.bb22
    i32 32, label %sw.bb23
    i32 33, label %sw.bb24
    i32 34, label %sw.bb25
    i32 35, label %sw.bb26
    i32 36, label %sw.bb27
    i32 37, label %sw.bb28
    i32 38, label %sw.bb29
    i32 39, label %sw.bb30
    i32 40, label %sw.bb31
    i32 41, label %sw.bb32
    i32 42, label %sw.bb33
    i32 43, label %sw.bb34
    i32 44, label %sw.bb35
    i32 45, label %sw.bb36
    i32 48, label %sw.bb37
    i32 49, label %sw.bb38
    i32 50, label %sw.bb39
    i32 51, label %sw.bb40
    i32 52, label %sw.bb41
    i32 53, label %sw.bb42
    i32 54, label %sw.bb43
    i32 55, label %sw.bb44
    i32 56, label %sw.bb45
    i32 57, label %sw.bb46
    i32 58, label %sw.bb47
    i32 59, label %sw.bb48
    i32 60, label %sw.bb49
    i32 61, label %sw.bb50
    i32 62, label %sw.bb51
    i32 63, label %sw.bb52
    i32 64, label %sw.bb53
    i32 66, label %sw.bb54
    i32 67, label %sw.bb55
    i32 68, label %sw.bb56
    i32 69, label %sw.bb57
    i32 71, label %sw.bb58
    i32 72, label %sw.bb59
    i32 73, label %sw.bb60
    i32 74, label %sw.bb61
    i32 75, label %sw.bb62
    i32 76, label %sw.bb63
    i32 77, label %sw.bb64
    i32 78, label %sw.bb65
    i32 79, label %sw.bb66
    i32 80, label %sw.bb67
    i32 81, label %sw.bb68
    i32 82, label %sw.bb69
    i32 83, label %sw.bb70
    i32 84, label %sw.bb71
    i32 86, label %sw.bb72
    i32 87, label %sw.bb73
    i32 88, label %sw.bb74
    i32 89, label %sw.bb75
    i32 90, label %sw.bb76
    i32 91, label %sw.bb77
    i32 92, label %sw.bb78
    i32 93, label %sw.bb79
    i32 94, label %sw.bb80
    i32 95, label %sw.bb81
    i32 96, label %sw.bb82
    i32 97, label %sw.bb83
    i32 98, label %sw.bb84
    i32 99, label %sw.bb85
    i32 100, label %sw.bb86
    i32 101, label %sw.bb87
    i32 102, label %sw.bb88
    i32 103, label %sw.bb89
    i32 104, label %sw.bb90
    i32 105, label %sw.bb91
    i32 106, label %sw.bb92
    i32 107, label %sw.bb93
    i32 108, label %sw.bb94
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.16, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.17, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.18, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.19, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.20, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.20, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.20, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb7:                                           ; preds = %entry
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.21, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb8:                                           ; preds = %entry
  store i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.22, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb9:                                           ; preds = %entry
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb10:                                          ; preds = %entry
  store i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.22, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb11:                                          ; preds = %entry
  store i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.24, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb12:                                          ; preds = %entry
  store i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.25, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb13:                                          ; preds = %entry
  store i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.22, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb14:                                          ; preds = %entry
  store i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.26, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb15:                                          ; preds = %entry
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.27, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb16:                                          ; preds = %entry
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.28, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb17:                                          ; preds = %entry
  store i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.29, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb18:                                          ; preds = %entry
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.30, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb19:                                          ; preds = %entry
  store i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.31, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb20:                                          ; preds = %entry
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.32, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb21:                                          ; preds = %entry
  store i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.33, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb22:                                          ; preds = %entry
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb23:                                          ; preds = %entry
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.35, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb24:                                          ; preds = %entry
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.36, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb25:                                          ; preds = %entry
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.37, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb26:                                          ; preds = %entry
  store i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.38, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb27:                                          ; preds = %entry
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.39, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb28:                                          ; preds = %entry
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.40, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb29:                                          ; preds = %entry
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.41, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb30:                                          ; preds = %entry
  store i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.42, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb31:                                          ; preds = %entry
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.43, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb32:                                          ; preds = %entry
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.44, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb33:                                          ; preds = %entry
  store i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.45, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb34:                                          ; preds = %entry
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.46, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb35:                                          ; preds = %entry
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.47, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb36:                                          ; preds = %entry
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.48, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb37:                                          ; preds = %entry
  store i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.49, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb38:                                          ; preds = %entry
  store i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.50, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb39:                                          ; preds = %entry
  store i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.50, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb40:                                          ; preds = %entry
  store i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.51, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb41:                                          ; preds = %entry
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.52, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb42:                                          ; preds = %entry
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb43:                                          ; preds = %entry
  store i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.54, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb44:                                          ; preds = %entry
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.55, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb45:                                          ; preds = %entry
  store i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.56, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb46:                                          ; preds = %entry
  store i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.57, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb47:                                          ; preds = %entry
  store i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.58, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb48:                                          ; preds = %entry
  store i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.59, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb49:                                          ; preds = %entry
  store i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.60, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb50:                                          ; preds = %entry
  store i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.61, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb51:                                          ; preds = %entry
  store i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.62, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb52:                                          ; preds = %entry
  store i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.63, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb53:                                          ; preds = %entry
  store i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.64, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb54:                                          ; preds = %entry
  store i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.65, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb55:                                          ; preds = %entry
  store i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.66, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb56:                                          ; preds = %entry
  store i8* getelementptr inbounds ([89 x i8], [89 x i8]* @.str.67, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb57:                                          ; preds = %entry
  store i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.68, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb58:                                          ; preds = %entry
  store i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb59:                                          ; preds = %entry
  store i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.70, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb60:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.71, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb61:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.72, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb62:                                          ; preds = %entry
  store i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.73, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb63:                                          ; preds = %entry
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.74, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb64:                                          ; preds = %entry
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.75, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb65:                                          ; preds = %entry
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.76, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb66:                                          ; preds = %entry
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.77, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb67:                                          ; preds = %entry
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.78, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb68:                                          ; preds = %entry
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.79, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb69:                                          ; preds = %entry
  store i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.80, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb70:                                          ; preds = %entry
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.81, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb71:                                          ; preds = %entry
  store i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.82, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb72:                                          ; preds = %entry
  store i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.83, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb73:                                          ; preds = %entry
  store i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.84, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb74:                                          ; preds = %entry
  store i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.85, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb75:                                          ; preds = %entry
  store i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.86, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb76:                                          ; preds = %entry
  store i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.87, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb77:                                          ; preds = %entry
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.88, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb78:                                          ; preds = %entry
  store i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.89, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb79:                                          ; preds = %entry
  store i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.90, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb80:                                          ; preds = %entry
  store i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.91, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb81:                                          ; preds = %entry
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.92, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb82:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.93, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb83:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb84:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.95, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb85:                                          ; preds = %entry
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.96, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb86:                                          ; preds = %entry
  store i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.97, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb87:                                          ; preds = %entry
  store i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.98, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb88:                                          ; preds = %entry
  store i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.99, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb89:                                          ; preds = %entry
  store i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.100, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb90:                                          ; preds = %entry
  store i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.101, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb91:                                          ; preds = %entry
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.102, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb92:                                          ; preds = %entry
  store i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.103, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb93:                                          ; preds = %entry
  store i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.104, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.bb94:                                          ; preds = %entry
  store i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.105, i32 0, i32 0), i8** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.106, i32 0, i32 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb94, %sw.bb93, %sw.bb92, %sw.bb91, %sw.bb90, %sw.bb89, %sw.bb88, %sw.bb87, %sw.bb86, %sw.bb85, %sw.bb84, %sw.bb83, %sw.bb82, %sw.bb81, %sw.bb80, %sw.bb79, %sw.bb78, %sw.bb77, %sw.bb76, %sw.bb75, %sw.bb74, %sw.bb73, %sw.bb72, %sw.bb71, %sw.bb70, %sw.bb69, %sw.bb68, %sw.bb67, %sw.bb66, %sw.bb65, %sw.bb64, %sw.bb63, %sw.bb62, %sw.bb61, %sw.bb60, %sw.bb59, %sw.bb58, %sw.bb57, %sw.bb56, %sw.bb55, %sw.bb54, %sw.bb53, %sw.bb52, %sw.bb51, %sw.bb50, %sw.bb49, %sw.bb48, %sw.bb47, %sw.bb46, %sw.bb45, %sw.bb44, %sw.bb43, %sw.bb42, %sw.bb41, %sw.bb40, %sw.bb39, %sw.bb38, %sw.bb37, %sw.bb36, %sw.bb35, %sw.bb34, %sw.bb33, %sw.bb32, %sw.bb31, %sw.bb30, %sw.bb29, %sw.bb28, %sw.bb27, %sw.bb26, %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8
  ret i8* %1
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng9load_fileERNSt3__16vectorIhNS0_9allocatorIhEEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE(%"class.std::__1::vector"* dereferenceable(24) %buffer, %"class.std::__1::basic_string"* dereferenceable(24) %filename) #0 {
entry:
  %retval = alloca i32, align 4
  %buffer.addr = alloca %"class.std::__1::vector"*, align 8
  %filename.addr = alloca %"class.std::__1::basic_string"*, align 8
  %size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %"class.std::__1::vector"* %buffer, %"class.std::__1::vector"** %buffer.addr, align 8, !tbaa !16
  store %"class.std::__1::basic_string"* %filename, %"class.std::__1::basic_string"** %filename.addr, align 8, !tbaa !16
  %0 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %filename.addr, align 8
  %call = call i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv(%"class.std::__1::basic_string"* %1) #16
  %call1 = call i64 @_ZL16lodepng_filesizePKc(i8* %call)
  store i64 %call1, i64* %size, align 8, !tbaa !6
  %2 = load i64, i64* %size, align 8, !tbaa !6
  %cmp = icmp slt i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 78, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %buffer.addr, align 8
  %4 = load i64, i64* %size, align 8, !tbaa !6
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6resizeEm(%"class.std::__1::vector"* %3, i64 %4)
  %5 = load i64, i64* %size, align 8, !tbaa !6
  %cmp2 = icmp eq i64 %5, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %6 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %buffer.addr, align 8
  %call3 = call dereferenceable(1) i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %6, i64 0)
  %7 = load i64, i64* %size, align 8, !tbaa !6
  %8 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %filename.addr, align 8
  %call4 = call i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv(%"class.std::__1::basic_string"* %8) #16
  %call5 = call i32 @_ZL19lodepng_buffer_filePhmPKc(i8* %call3, i64 %7, i8* %call4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call5, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.then
  %9 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #16
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally hidden i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv(%"class.std::__1::basic_string"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::basic_string"*, align 8
  store %"class.std::__1::basic_string"* %this, %"class.std::__1::basic_string"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %this.addr, align 8
  %call = call i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv(%"class.std::__1::basic_string"* %this1) #16
  ret i8* %call
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__16vectorIhNS_9allocatorIhEEE6resizeEm(%"class.std::__1::vector"* %this, i64 %__sz) #0 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__sz.addr = alloca i64, align 8
  %__cs = alloca i64, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i64 %__sz, i64* %__sz.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast i64* %__cs to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %call = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  store i64 %call, i64* %__cs, align 8, !tbaa !6
  %1 = load i64, i64* %__cs, align 8, !tbaa !6
  %2 = load i64, i64* %__sz.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %1, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %__sz.addr, align 8, !tbaa !6
  %4 = load i64, i64* %__cs, align 8, !tbaa !6
  %sub = sub i64 %3, %4
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %this1, i64 %sub)
  br label %if.end4

if.else:                                          ; preds = %entry
  %5 = load i64, i64* %__cs, align 8, !tbaa !6
  %6 = load i64, i64* %__sz.addr, align 8, !tbaa !6
  %cmp2 = icmp ugt i64 %5, %6
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %7 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %7, i32 0, i32 0
  %8 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %9 = load i64, i64* %__sz.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 %9
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE17__destruct_at_endEPh(%"class.std::__1::vector"* %this1, i8* %add.ptr) #16
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.else
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  %10 = bitcast i64* %__cs to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %this, i64 %__n) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__n.addr = alloca i64, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %0, i32 0, i32 0
  %1 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %2 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %2
  ret i8* %arrayidx
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng9save_fileERKNSt3__16vectorIhNS0_9allocatorIhEEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE(%"class.std::__1::vector"* dereferenceable(24) %buffer, %"class.std::__1::basic_string"* dereferenceable(24) %filename) #0 {
entry:
  %buffer.addr = alloca %"class.std::__1::vector"*, align 8
  %filename.addr = alloca %"class.std::__1::basic_string"*, align 8
  store %"class.std::__1::vector"* %buffer, %"class.std::__1::vector"** %buffer.addr, align 8, !tbaa !16
  store %"class.std::__1::basic_string"* %filename, %"class.std::__1::basic_string"** %filename.addr, align 8, !tbaa !16
  %0 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %buffer.addr, align 8
  %call = call zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %0) #16
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %buffer.addr, align 8
  %call1 = call dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %1, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call1, %cond.false ]
  %2 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %buffer.addr, align 8
  %call2 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %2) #16
  %3 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %filename.addr, align 8
  %call3 = call i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv(%"class.std::__1::basic_string"* %3) #16
  %call4 = call i32 @_Z17lodepng_save_filePKhmPKc(i8* %cond, i64 %call2, i8* %call3)
  ret i32 %call4
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %0, i32 0, i32 0
  %1 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %2 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %2, i32 0, i32 1
  %3 = load i8*, i8** %__end_, align 8, !tbaa !173
  %cmp = icmp eq i8* %1, %3
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %this, i64 %__n) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__n.addr = alloca i64, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %0, i32 0, i32 0
  %1 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %2 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 %2
  ret i8* %arrayidx
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %0, i32 0, i32 1
  %1 = load i8*, i8** %__end_, align 8, !tbaa !173
  %2 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %2, i32 0, i32 0
  %3 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng10decompressERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhmRK25LodePNGDecompressSettings(%"class.std::__1::vector"* dereferenceable(24) %out, i8* %in, i64 %insize, %struct.LodePNGDecompressSettings* dereferenceable(32) %settings) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %buffer = alloca i8*, align 8
  %buffersize = alloca i64, align 8
  %error = alloca i32, align 4
  %agg.tmp = alloca %"class.std::__1::__wrap_iter.5", align 8
  %ref.tmp = alloca %"class.std::__1::__wrap_iter", align 8
  %coerce = alloca %"class.std::__1::__wrap_iter", align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !16
  %0 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %buffer, align 8, !tbaa !2
  %1 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i64 0, i64* %buffersize, align 8, !tbaa !6
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %4 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %5 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8
  %call = call i32 @_ZL15zlib_decompressPPhPmmPKhmPK25LodePNGDecompressSettings(i8** %buffer, i64* %buffersize, i64 0, i8* %3, i64 %4, %struct.LodePNGDecompressSettings* %5)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %6 = load i8*, i8** %buffer, align 8, !tbaa !2
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %8 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %call1 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE3endEv(%"class.std::__1::vector"* %9) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %ref.tmp, i32 0, i32 0
  store i8* %call1, i8** %coerce.dive, align 8
  call void @_ZNSt3__111__wrap_iterIPKhEC1IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %agg.tmp, %"class.std::__1::__wrap_iter"* dereferenceable(8) %ref.tmp, i8* null) #16
  %10 = load i8*, i8** %buffer, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 0
  %11 = load i8*, i8** %buffer, align 8, !tbaa !2
  %12 = load i64, i64* %buffersize, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i8, i8* %11, i64 %12
  %coerce.dive3 = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %agg.tmp, i32 0, i32 0
  %13 = load i8*, i8** %coerce.dive3, align 8
  %call4 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector"* %7, i8* %13, i8* %arrayidx, i8* %arrayidx2)
  %coerce.dive5 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %coerce, i32 0, i32 0
  store i8* %call4, i8** %coerce.dive5, align 8
  %14 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #16
  %15 = load i8*, i8** %buffer, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %16 = load i32, i32* %error, align 4, !tbaa !8
  %17 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #16
  %18 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #16
  %19 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  ret i32 %16
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL15zlib_decompressPPhPmmPKhmPK25LodePNGDecompressSettings(i8** %out, i64* %outsize, i64 %expected_size, i8* %in, i64 %insize, %struct.LodePNGDecompressSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %expected_size.addr = alloca i64, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %error = alloca i32, align 4
  %v = alloca %struct.ucvector, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %expected_size, i64* %expected_size.addr, align 8, !tbaa !6
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_zlib = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %0, i32 0, i32 2
  %custom_zlib1 = bitcast {}** %custom_zlib to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %1 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %custom_zlib1, align 8, !tbaa !49
  %tobool = icmp ne i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_zlib2 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %2, i32 0, i32 2
  %custom_zlib3 = bitcast {}** %custom_zlib2 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %3 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %custom_zlib3, align 8, !tbaa !49
  %4 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %5 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %6 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %8 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 %3(i8** %4, i64* %5, i8* %6, i64 %7, %struct.LodePNGDecompressSettings* %8)
  store i32 %call, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %9 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #16
  %10 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.start(i64 24, i8* %10) #16
  %11 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %12 = load i8*, i8** %11, align 8, !tbaa !2
  %13 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %14 = load i64, i64* %13, align 8, !tbaa !6
  call void @_ZL13ucvector_initPhm(%struct.ucvector* sret %v, i8* %12, i64 %14)
  %15 = load i64, i64* %expected_size.addr, align 8, !tbaa !6
  %tobool4 = icmp ne i64 %15, 0
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else
  %16 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %17 = load i64, i64* %16, align 8, !tbaa !6
  %18 = load i64, i64* %expected_size.addr, align 8, !tbaa !6
  %add = add i64 %17, %18
  %call6 = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %v, i64 %add)
  %19 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %20 = load i64, i64* %19, align 8, !tbaa !6
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 1
  store i64 %20, i64* %size, align 8, !tbaa !34
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.else
  %21 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %22 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %23 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %call7 = call i32 @_ZL24lodepng_zlib_decompressvP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* %v, i8* %21, i64 %22, %struct.LodePNGDecompressSettings* %23)
  store i32 %call7, i32* %error, align 4, !tbaa !8
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 0
  %24 = load i8*, i8** %data, align 8, !tbaa !32
  %25 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  store i8* %24, i8** %25, align 8, !tbaa !2
  %size8 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %v, i32 0, i32 1
  %26 = load i64, i64* %size8, align 8, !tbaa !34
  %27 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  store i64 %26, i64* %27, align 8, !tbaa !6
  %28 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %28, i32* %retval, align 4
  %29 = bitcast %struct.ucvector* %v to i8*
  call void @llvm.lifetime.end(i64 24, i8* %29) #16
  %30 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %30) #16
  br label %return

return:                                           ; preds = %if.end, %if.then
  %31 = load i32, i32* %retval, align 4
  ret i32 %31
}

; Function Attrs: ssp uwtable
define linkonce_odr i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector"* %this, i8* %__position.coerce, i8* %__first, i8* %__last) #0 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %retval = alloca %"class.std::__1::__wrap_iter", align 8
  %__position = alloca %"class.std::__1::__wrap_iter.5", align 8
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  %__p = alloca i8*, align 8
  %ref.tmp = alloca %"class.std::__1::__wrap_iter", align 8
  %__n = alloca i64, align 8
  %__old_n = alloca i64, align 8
  %__old_last = alloca i8*, align 8
  %__m = alloca i8*, align 8
  %__dx = alloca i64, align 8
  %__diff = alloca i64, align 8
  %__annotator = alloca %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator", align 1
  %__a = alloca %"class.std::__1::allocator"*, align 8
  %__v = alloca %"struct.std::__1::__split_buffer", align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %__position, i32 0, i32 0
  store i8* %__position.coerce, i8** %coerce.dive, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast i8** %__p to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %1, i32 0, i32 0
  %2 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %3 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %call = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE5beginEv(%"class.std::__1::vector"* %this1) #16
  %coerce.dive2 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %ref.tmp, i32 0, i32 0
  store i8* %call, i8** %coerce.dive2, align 8
  %call3 = call i64 @_ZNSt3__1miIPKhPhEENS_11__wrap_iterIT_E15difference_typeERKS6_RKNS4_IT0_EE(%"class.std::__1::__wrap_iter.5"* dereferenceable(8) %__position, %"class.std::__1::__wrap_iter"* dereferenceable(8) %ref.tmp) #16
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %call3
  %4 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %4) #16
  store i8* %add.ptr, i8** %__p, align 8, !tbaa !2
  %5 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  %6 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %7 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %call4 = call i64 @_ZNSt3__18distanceIPhEENS_15iterator_traitsIT_E15difference_typeES3_S3_(i8* %6, i8* %7)
  store i64 %call4, i64* %__n, align 8, !tbaa !6
  %8 = load i64, i64* %__n, align 8, !tbaa !6
  %cmp = icmp sgt i64 %8, 0
  br i1 %cmp, label %if.then, label %if.end35

if.then:                                          ; preds = %entry
  %9 = load i64, i64* %__n, align 8, !tbaa !6
  %10 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call5 = call dereferenceable(8) i8** @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE9__end_capEv(%"class.std::__1::__vector_base"* %10) #16
  %11 = load i8*, i8** %call5, align 8, !tbaa !2
  %12 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %12, i32 0, i32 1
  %13 = load i8*, i8** %__end_, align 8, !tbaa !173
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %13 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp6 = icmp sle i64 %9, %sub.ptr.sub
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then
  %14 = bitcast i64* %__old_n to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #16
  %15 = load i64, i64* %__n, align 8, !tbaa !6
  store i64 %15, i64* %__old_n, align 8, !tbaa !6
  %16 = bitcast i8** %__old_last to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #16
  %17 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_8 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %17, i32 0, i32 1
  %18 = load i8*, i8** %__end_8, align 8, !tbaa !173
  store i8* %18, i8** %__old_last, align 8, !tbaa !2
  %19 = bitcast i8** %__m to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #16
  %20 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  store i8* %20, i8** %__m, align 8, !tbaa !2
  %21 = bitcast i64* %__dx to i8*
  call void @llvm.lifetime.start(i64 8, i8* %21) #16
  %22 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_9 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %22, i32 0, i32 1
  %23 = load i8*, i8** %__end_9, align 8, !tbaa !173
  %24 = load i8*, i8** %__p, align 8, !tbaa !2
  %sub.ptr.lhs.cast10 = ptrtoint i8* %23 to i64
  %sub.ptr.rhs.cast11 = ptrtoint i8* %24 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast10, %sub.ptr.rhs.cast11
  store i64 %sub.ptr.sub12, i64* %__dx, align 8, !tbaa !6
  %25 = load i64, i64* %__n, align 8, !tbaa !6
  %26 = load i64, i64* %__dx, align 8, !tbaa !6
  %cmp13 = icmp sgt i64 %25, %26
  br i1 %cmp13, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.then7
  %27 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  store i8* %27, i8** %__m, align 8, !tbaa !2
  %28 = bitcast i64* %__diff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %28) #16
  %29 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_15 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %29, i32 0, i32 1
  %30 = load i8*, i8** %__end_15, align 8, !tbaa !173
  %31 = load i8*, i8** %__p, align 8, !tbaa !2
  %sub.ptr.lhs.cast16 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast17 = ptrtoint i8* %31 to i64
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast16, %sub.ptr.rhs.cast17
  store i64 %sub.ptr.sub18, i64* %__diff, align 8, !tbaa !6
  %32 = load i64, i64* %__diff, align 8, !tbaa !6
  call void @_ZNSt3__17advanceIPhEEvRT_NS_15iterator_traitsIS2_E15difference_typeE(i8** dereferenceable(8) %__m, i64 %32)
  %33 = load i8*, i8** %__m, align 8, !tbaa !2
  %34 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %35 = load i64, i64* %__n, align 8, !tbaa !6
  %36 = load i64, i64* %__diff, align 8, !tbaa !6
  %sub = sub nsw i64 %35, %36
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m(%"class.std::__1::vector"* %this1, i8* %33, i8* %34, i64 %sub)
  %37 = load i64, i64* %__dx, align 8, !tbaa !6
  store i64 %37, i64* %__n, align 8, !tbaa !6
  %38 = bitcast i64* %__diff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %38) #16
  br label %if.end

if.end:                                           ; preds = %if.then14, %if.then7
  %39 = load i64, i64* %__n, align 8, !tbaa !6
  %cmp19 = icmp sgt i64 %39, 0
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end
  %40 = bitcast %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator to i8*
  call void @llvm.lifetime.start(i64 1, i8* %40) #16
  %41 = load i64, i64* %__n, align 8, !tbaa !6
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC1ERKS3_m(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator, %"class.std::__1::vector"* dereferenceable(24) %this1, i64 %41)
  %42 = load i8*, i8** %__p, align 8, !tbaa !2
  %43 = load i8*, i8** %__old_last, align 8, !tbaa !2
  %44 = load i8*, i8** %__p, align 8, !tbaa !2
  %45 = load i64, i64* %__old_n, align 8, !tbaa !6
  %add.ptr21 = getelementptr inbounds i8, i8* %44, i64 %45
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE12__move_rangeEPhS4_S4_(%"class.std::__1::vector"* %this1, i8* %42, i8* %43, i8* %add.ptr21)
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator)
  %46 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %47 = load i8*, i8** %__m, align 8, !tbaa !2
  %48 = load i8*, i8** %__p, align 8, !tbaa !2
  %call22 = call i8* @_ZNSt3__14copyIPhS1_EET0_T_S3_S2_(i8* %46, i8* %47, i8* %48)
  %49 = bitcast %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator to i8*
  call void @llvm.lifetime.end(i64 1, i8* %49) #16
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end
  %50 = bitcast i64* %__dx to i8*
  call void @llvm.lifetime.end(i64 8, i8* %50) #16
  %51 = bitcast i8** %__m to i8*
  call void @llvm.lifetime.end(i64 8, i8* %51) #16
  %52 = bitcast i8** %__old_last to i8*
  call void @llvm.lifetime.end(i64 8, i8* %52) #16
  %53 = bitcast i64* %__old_n to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #16
  br label %if.end34

if.else:                                          ; preds = %if.then
  %54 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.start(i64 8, i8* %54) #16
  %55 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call24 = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %55) #16
  store %"class.std::__1::allocator"* %call24, %"class.std::__1::allocator"** %__a, align 8, !tbaa !16
  %56 = bitcast %"struct.std::__1::__split_buffer"* %__v to i8*
  call void @llvm.lifetime.start(i64 40, i8* %56) #16
  %call25 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  %57 = load i64, i64* %__n, align 8, !tbaa !6
  %add = add i64 %call25, %57
  %call26 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE11__recommendEm(%"class.std::__1::vector"* %this1, i64 %add)
  %58 = load i8*, i8** %__p, align 8, !tbaa !2
  %59 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_27 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %59, i32 0, i32 0
  %60 = load i8*, i8** %__begin_27, align 8, !tbaa !170
  %sub.ptr.lhs.cast28 = ptrtoint i8* %58 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %60 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %61 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a, align 8
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC1EmmS3_(%"struct.std::__1::__split_buffer"* %__v, i64 %call26, i64 %sub.ptr.sub30, %"class.std::__1::allocator"* dereferenceable(1) %61)
  %62 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %63 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  invoke void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"struct.std::__1::__split_buffer"* %__v, i8* %62, i8* %63)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %if.else
  %64 = load i8*, i8** %__p, align 8, !tbaa !2
  %call32 = invoke i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EEPh(%"class.std::__1::vector"* %this1, %"struct.std::__1::__split_buffer"* dereferenceable(40) %__v, i8* %64)
          to label %invoke.cont31 unwind label %lpad

invoke.cont31:                                    ; preds = %invoke.cont
  store i8* %call32, i8** %__p, align 8, !tbaa !2
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED1Ev(%"struct.std::__1::__split_buffer"* %__v)
  %65 = bitcast %"struct.std::__1::__split_buffer"* %__v to i8*
  call void @llvm.lifetime.end(i64 40, i8* %65) #16
  %66 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %66) #16
  br label %if.end34

lpad:                                             ; preds = %invoke.cont, %if.else
  %67 = landingpad { i8*, i32 }
          cleanup
  %68 = extractvalue { i8*, i32 } %67, 0
  store i8* %68, i8** %exn.slot, align 8
  %69 = extractvalue { i8*, i32 } %67, 1
  store i32 %69, i32* %ehselector.slot, align 4
  invoke void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED1Ev(%"struct.std::__1::__split_buffer"* %__v)
          to label %invoke.cont33 unwind label %terminate.lpad

invoke.cont33:                                    ; preds = %lpad
  %70 = bitcast %"struct.std::__1::__split_buffer"* %__v to i8*
  call void @llvm.lifetime.end(i64 40, i8* %70) #16
  %71 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %71) #16
  %72 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.end(i64 8, i8* %72) #16
  %73 = bitcast i8** %__p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %73) #16
  br label %eh.resume

if.end34:                                         ; preds = %invoke.cont31, %if.end23
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %entry
  %74 = load i8*, i8** %__p, align 8, !tbaa !2
  %call36 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE11__make_iterEPh(%"class.std::__1::vector"* %this1, i8* %74) #16
  %coerce.dive37 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %retval, i32 0, i32 0
  store i8* %call36, i8** %coerce.dive37, align 8
  %75 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.end(i64 8, i8* %75) #16
  %76 = bitcast i8** %__p to i8*
  call void @llvm.lifetime.end(i64 8, i8* %76) #16
  %coerce.dive38 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %retval, i32 0, i32 0
  %77 = load i8*, i8** %coerce.dive38, align 8
  ret i8* %77

eh.resume:                                        ; preds = %invoke.cont33
  %exn = load i8*, i8** %exn.slot, align 8
  %sel = load i32, i32* %ehselector.slot, align 4
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val39 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val39

terminate.lpad:                                   ; preds = %lpad
  %78 = landingpad { i8*, i32 }
          catch i8* null
  %79 = extractvalue { i8*, i32 } %78, 0
  call void @__clang_call_terminate(i8* %79) #19
  unreachable
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE3endEv(%"class.std::__1::vector"* %this) #5 align 2 {
entry:
  %retval = alloca %"class.std::__1::__wrap_iter", align 8
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %0, i32 0, i32 1
  %1 = load i8*, i8** %__end_, align 8, !tbaa !173
  %call = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE11__make_iterEPh(%"class.std::__1::vector"* %this1, i8* %1) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %retval, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %coerce.dive2 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %retval, i32 0, i32 0
  %2 = load i8*, i8** %coerce.dive2, align 8
  ret i8* %2
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__111__wrap_iterIPKhEC1IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %this, %"class.std::__1::__wrap_iter"* dereferenceable(8) %__u, i8*) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__wrap_iter.5"*, align 8
  %__u.addr = alloca %"class.std::__1::__wrap_iter"*, align 8
  %.addr = alloca i8*, align 8
  store %"class.std::__1::__wrap_iter.5"* %this, %"class.std::__1::__wrap_iter.5"** %this.addr, align 8, !tbaa !2
  store %"class.std::__1::__wrap_iter"* %__u, %"class.std::__1::__wrap_iter"** %__u.addr, align 8, !tbaa !16
  store i8* %0, i8** %.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__wrap_iter.5"*, %"class.std::__1::__wrap_iter.5"** %this.addr, align 8
  %1 = load %"class.std::__1::__wrap_iter"*, %"class.std::__1::__wrap_iter"** %__u.addr, align 8
  %2 = load i8*, i8** %.addr, align 8, !tbaa !2
  call void @_ZNSt3__111__wrap_iterIPKhEC2IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %this1, %"class.std::__1::__wrap_iter"* dereferenceable(8) %1, i8* %2) #16
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng10decompressERNSt3__16vectorIhNS0_9allocatorIhEEEERKS4_RK25LodePNGDecompressSettings(%"class.std::__1::vector"* dereferenceable(24) %out, %"class.std::__1::vector"* dereferenceable(24) %in, %struct.LodePNGDecompressSettings* dereferenceable(32) %settings) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %in.addr = alloca %"class.std::__1::vector"*, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store %"class.std::__1::vector"* %in, %"class.std::__1::vector"** %in.addr, align 8, !tbaa !16
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !16
  %0 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call = call zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %1) #16
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call1 = call dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %2, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call1, %cond.false ]
  %3 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call2 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %3) #16
  %4 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8
  %call3 = call i32 @_ZN7lodepng10decompressERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhmRK25LodePNGDecompressSettings(%"class.std::__1::vector"* dereferenceable(24) %0, i8* %cond, i64 %call2, %struct.LodePNGDecompressSettings* dereferenceable(32) %4)
  ret i32 %call3
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng8compressERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhmRK23LodePNGCompressSettings(%"class.std::__1::vector"* dereferenceable(24) %out, i8* %in, i64 %insize, %struct.LodePNGCompressSettings* dereferenceable(48) %settings) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %buffer = alloca i8*, align 8
  %buffersize = alloca i64, align 8
  %error = alloca i32, align 4
  %agg.tmp = alloca %"class.std::__1::__wrap_iter.5", align 8
  %ref.tmp = alloca %"class.std::__1::__wrap_iter", align 8
  %coerce = alloca %"class.std::__1::__wrap_iter", align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !16
  %0 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %buffer, align 8, !tbaa !2
  %1 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i64 0, i64* %buffersize, align 8, !tbaa !6
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %4 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %5 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8
  %call = call i32 @_ZL13zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %buffer, i64* %buffersize, i8* %3, i64 %4, %struct.LodePNGCompressSettings* %5)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %6 = load i8*, i8** %buffer, align 8, !tbaa !2
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %8 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %call1 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE3endEv(%"class.std::__1::vector"* %9) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %ref.tmp, i32 0, i32 0
  store i8* %call1, i8** %coerce.dive, align 8
  call void @_ZNSt3__111__wrap_iterIPKhEC1IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %agg.tmp, %"class.std::__1::__wrap_iter"* dereferenceable(8) %ref.tmp, i8* null) #16
  %10 = load i8*, i8** %buffer, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 0
  %11 = load i8*, i8** %buffer, align 8, !tbaa !2
  %12 = load i64, i64* %buffersize, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i8, i8* %11, i64 %12
  %coerce.dive3 = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %agg.tmp, i32 0, i32 0
  %13 = load i8*, i8** %coerce.dive3, align 8
  %call4 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector"* %7, i8* %13, i8* %arrayidx, i8* %arrayidx2)
  %coerce.dive5 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %coerce, i32 0, i32 0
  store i8* %call4, i8** %coerce.dive5, align 8
  %14 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #16
  %15 = load i8*, i8** %buffer, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %15)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %16 = load i32, i32* %error, align 4, !tbaa !8
  %17 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #16
  %18 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #16
  %19 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  ret i32 %16
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %out, i64* %outsize, i8* %in, i64 %insize, %struct.LodePNGCompressSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8**, align 8
  %outsize.addr = alloca i64*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  store i8** %out, i8*** %out.addr, align 8, !tbaa !2
  store i64* %outsize, i64** %outsize.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_zlib = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %0, i32 0, i32 6
  %custom_zlib1 = bitcast {}** %custom_zlib to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %1 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %custom_zlib1, align 8, !tbaa !46
  %tobool = icmp ne i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_zlib2 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %2, i32 0, i32 6
  %custom_zlib3 = bitcast {}** %custom_zlib2 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  %3 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %custom_zlib3, align 8, !tbaa !46
  %4 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %5 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %6 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %8 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 %3(i8** %4, i64* %5, i8* %6, i64 %7, %struct.LodePNGCompressSettings* %8)
  store i32 %call, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %entry
  %9 = load i8**, i8*** %out.addr, align 8, !tbaa !2
  %10 = load i64*, i64** %outsize.addr, align 8, !tbaa !2
  %11 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %12 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %13 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %call4 = call i32 @_Z21lodepng_zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %9, i64* %10, i8* %11, i64 %12, %struct.LodePNGCompressSettings* %13)
  store i32 %call4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %14 = load i32, i32* %retval, align 4
  ret i32 %14
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng8compressERNSt3__16vectorIhNS0_9allocatorIhEEEERKS4_RK23LodePNGCompressSettings(%"class.std::__1::vector"* dereferenceable(24) %out, %"class.std::__1::vector"* dereferenceable(24) %in, %struct.LodePNGCompressSettings* dereferenceable(48) %settings) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %in.addr = alloca %"class.std::__1::vector"*, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store %"class.std::__1::vector"* %in, %"class.std::__1::vector"** %in.addr, align 8, !tbaa !16
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !16
  %0 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call = call zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %1) #16
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call1 = call dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %2, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call1, %cond.false ]
  %3 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call2 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %3) #16
  %4 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8
  %call3 = call i32 @_ZN7lodepng8compressERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhmRK23LodePNGCompressSettings(%"class.std::__1::vector"* dereferenceable(24) %0, i8* %cond, i64 %call2, %struct.LodePNGCompressSettings* dereferenceable(48) %4)
  ret i32 %call3
}

; Function Attrs: ssp uwtable
define void @_ZN7lodepng5StateC2Ev(%"class.lodepng::State"* %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"class.lodepng::State"*, align 8
  store %"class.lodepng::State"* %this, %"class.lodepng::State"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.lodepng::State"*, %"class.lodepng::State"** %this.addr, align 8
  %0 = bitcast %"class.lodepng::State"* %this1 to %struct.LodePNGState*
  %1 = bitcast %"class.lodepng::State"* %this1 to %struct.LodePNGState*
  call void @_Z18lodepng_state_initP12LodePNGState(%struct.LodePNGState* %1)
  ret void
}

; Function Attrs: ssp uwtable
define void @_ZN7lodepng5StateC1Ev(%"class.lodepng::State"* %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"class.lodepng::State"*, align 8
  store %"class.lodepng::State"* %this, %"class.lodepng::State"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.lodepng::State"*, %"class.lodepng::State"** %this.addr, align 8
  call void @_ZN7lodepng5StateC2Ev(%"class.lodepng::State"* %this1)
  ret void
}

; Function Attrs: ssp uwtable
define void @_ZN7lodepng5StateC2ERKS0_(%"class.lodepng::State"* %this, %"class.lodepng::State"* dereferenceable(504) %other) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"class.lodepng::State"*, align 8
  %other.addr = alloca %"class.lodepng::State"*, align 8
  store %"class.lodepng::State"* %this, %"class.lodepng::State"** %this.addr, align 8, !tbaa !2
  store %"class.lodepng::State"* %other, %"class.lodepng::State"** %other.addr, align 8, !tbaa !16
  %this1 = load %"class.lodepng::State"*, %"class.lodepng::State"** %this.addr, align 8
  %0 = bitcast %"class.lodepng::State"* %this1 to %struct.LodePNGState*
  %1 = bitcast %"class.lodepng::State"* %this1 to %struct.LodePNGState*
  call void @_Z18lodepng_state_initP12LodePNGState(%struct.LodePNGState* %1)
  %2 = bitcast %"class.lodepng::State"* %this1 to %struct.LodePNGState*
  %3 = load %"class.lodepng::State"*, %"class.lodepng::State"** %other.addr, align 8
  %4 = bitcast %"class.lodepng::State"* %3 to %struct.LodePNGState*
  call void @_Z18lodepng_state_copyP12LodePNGStatePKS_(%struct.LodePNGState* %2, %struct.LodePNGState* %4)
  ret void
}

; Function Attrs: ssp uwtable
define void @_ZN7lodepng5StateC1ERKS0_(%"class.lodepng::State"* %this, %"class.lodepng::State"* dereferenceable(504) %other) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"class.lodepng::State"*, align 8
  %other.addr = alloca %"class.lodepng::State"*, align 8
  store %"class.lodepng::State"* %this, %"class.lodepng::State"** %this.addr, align 8, !tbaa !2
  store %"class.lodepng::State"* %other, %"class.lodepng::State"** %other.addr, align 8, !tbaa !16
  %this1 = load %"class.lodepng::State"*, %"class.lodepng::State"** %this.addr, align 8
  %0 = load %"class.lodepng::State"*, %"class.lodepng::State"** %other.addr, align 8
  call void @_ZN7lodepng5StateC2ERKS0_(%"class.lodepng::State"* %this1, %"class.lodepng::State"* dereferenceable(504) %0)
  ret void
}

; Function Attrs: ssp uwtable
define void @_ZN7lodepng5StateD2Ev(%"class.lodepng::State"* %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"class.lodepng::State"*, align 8
  store %"class.lodepng::State"* %this, %"class.lodepng::State"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.lodepng::State"*, %"class.lodepng::State"** %this.addr, align 8
  %0 = bitcast %"class.lodepng::State"* %this1 to %struct.LodePNGState*
  call void @_Z21lodepng_state_cleanupP12LodePNGState(%struct.LodePNGState* %0)
  ret void
}

; Function Attrs: ssp uwtable
define void @_ZN7lodepng5StateD1Ev(%"class.lodepng::State"* %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"class.lodepng::State"*, align 8
  store %"class.lodepng::State"* %this, %"class.lodepng::State"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.lodepng::State"*, %"class.lodepng::State"** %this.addr, align 8
  call void @_ZN7lodepng5StateD2Ev(%"class.lodepng::State"* %this1)
  ret void
}

; Function Attrs: ssp uwtable
define dereferenceable(504) %"class.lodepng::State"* @_ZN7lodepng5StateaSERKS0_(%"class.lodepng::State"* %this, %"class.lodepng::State"* dereferenceable(504) %other) #0 align 2 {
entry:
  %this.addr = alloca %"class.lodepng::State"*, align 8
  %other.addr = alloca %"class.lodepng::State"*, align 8
  store %"class.lodepng::State"* %this, %"class.lodepng::State"** %this.addr, align 8, !tbaa !2
  store %"class.lodepng::State"* %other, %"class.lodepng::State"** %other.addr, align 8, !tbaa !16
  %this1 = load %"class.lodepng::State"*, %"class.lodepng::State"** %this.addr, align 8
  %0 = bitcast %"class.lodepng::State"* %this1 to %struct.LodePNGState*
  %1 = load %"class.lodepng::State"*, %"class.lodepng::State"** %other.addr, align 8
  %2 = bitcast %"class.lodepng::State"* %1 to %struct.LodePNGState*
  call void @_Z18lodepng_state_copyP12LodePNGStatePKS_(%struct.LodePNGState* %0, %struct.LodePNGState* %2)
  ret %"class.lodepng::State"* %this1
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6decodeERNSt3__16vectorIhNS0_9allocatorIhEEEERjS6_PKhm16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %out, i32* dereferenceable(4) %w, i32* dereferenceable(4) %h, i8* %in, i64 %insize, i32 %colortype, i32 %bitdepth) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %buffer = alloca i8*, align 8
  %error = alloca i32, align 4
  %state = alloca %"class.lodepng::State", align 8
  %buffersize = alloca i64, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  %agg.tmp = alloca %"class.std::__1::__wrap_iter.5", align 8
  %ref.tmp = alloca %"class.std::__1::__wrap_iter", align 8
  %coerce = alloca %"class.std::__1::__wrap_iter", align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i32* %w, i32** %w.addr, align 8, !tbaa !16
  store i32* %h, i32** %h.addr, align 8, !tbaa !16
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %buffer, align 8, !tbaa !2
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load i32*, i32** %w.addr, align 8
  %3 = load i32*, i32** %h.addr, align 8
  %4 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %5 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %6 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %7 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call = call i32 @_Z21lodepng_decode_memoryPPhPjS1_PKhm16LodePNGColorTypej(i8** %buffer, i32* %2, i32* %3, i8* %4, i64 %5, i32 %6, i32 %7)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %8 = load i8*, i8** %buffer, align 8, !tbaa !2
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %9 = load i32, i32* %error, align 4, !tbaa !8
  %tobool1 = icmp ne i32 %9, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = bitcast %"class.lodepng::State"* %state to i8*
  call void @llvm.lifetime.start(i64 504, i8* %10) #16
  call void @_ZN7lodepng5StateC1Ev(%"class.lodepng::State"* %state)
  %11 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %12 = bitcast %"class.lodepng::State"* %state to %struct.LodePNGState*
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %12, i32 0, i32 2
  %colortype2 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw, i32 0, i32 0
  store i32 %11, i32* %colortype2, align 8, !tbaa !134
  %13 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %14 = bitcast %"class.lodepng::State"* %state to %struct.LodePNGState*
  %info_raw3 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %14, i32 0, i32 2
  %bitdepth4 = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %info_raw3, i32 0, i32 1
  store i32 %13, i32* %bitdepth4, align 4, !tbaa !135
  %15 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #16
  %16 = load i32*, i32** %w.addr, align 8
  %17 = load i32, i32* %16, align 4, !tbaa !8
  %18 = load i32*, i32** %h.addr, align 8
  %19 = load i32, i32* %18, align 4, !tbaa !8
  %20 = bitcast %"class.lodepng::State"* %state to %struct.LodePNGState*
  %info_raw5 = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %20, i32 0, i32 2
  %call6 = invoke i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 %17, i32 %19, %struct.LodePNGColorMode* %info_raw5)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %if.then
  store i64 %call6, i64* %buffersize, align 8, !tbaa !6
  %21 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %22 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #16
  %23 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %call7 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE3endEv(%"class.std::__1::vector"* %23) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %ref.tmp, i32 0, i32 0
  store i8* %call7, i8** %coerce.dive, align 8
  call void @_ZNSt3__111__wrap_iterIPKhEC1IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %agg.tmp, %"class.std::__1::__wrap_iter"* dereferenceable(8) %ref.tmp, i8* null) #16
  %24 = load i8*, i8** %buffer, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %24, i64 0
  %25 = load i8*, i8** %buffer, align 8, !tbaa !2
  %26 = load i64, i64* %buffersize, align 8, !tbaa !6
  %arrayidx8 = getelementptr inbounds i8, i8* %25, i64 %26
  %coerce.dive9 = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %agg.tmp, i32 0, i32 0
  %27 = load i8*, i8** %coerce.dive9, align 8
  %call12 = invoke i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector"* %21, i8* %27, i8* %arrayidx, i8* %arrayidx8)
          to label %invoke.cont11 unwind label %lpad10

invoke.cont11:                                    ; preds = %invoke.cont
  %coerce.dive13 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %coerce, i32 0, i32 0
  store i8* %call12, i8** %coerce.dive13, align 8
  %28 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %28) #16
  %29 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #16
  call void @_ZN7lodepng5StateD1Ev(%"class.lodepng::State"* %state)
  %30 = bitcast %"class.lodepng::State"* %state to i8*
  call void @llvm.lifetime.end(i64 504, i8* %30) #16
  br label %if.end

lpad:                                             ; preds = %if.then
  %31 = landingpad { i8*, i32 }
          cleanup
  %32 = extractvalue { i8*, i32 } %31, 0
  store i8* %32, i8** %exn.slot, align 8
  %33 = extractvalue { i8*, i32 } %31, 1
  store i32 %33, i32* %ehselector.slot, align 4
  br label %ehcleanup

lpad10:                                           ; preds = %invoke.cont
  %34 = landingpad { i8*, i32 }
          cleanup
  %35 = extractvalue { i8*, i32 } %34, 0
  store i8* %35, i8** %exn.slot, align 8
  %36 = extractvalue { i8*, i32 } %34, 1
  store i32 %36, i32* %ehselector.slot, align 4
  %37 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #16
  %38 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %38) #16
  br label %ehcleanup

ehcleanup:                                        ; preds = %lpad10, %lpad
  invoke void @_ZN7lodepng5StateD1Ev(%"class.lodepng::State"* %state)
          to label %invoke.cont14 unwind label %terminate.lpad

invoke.cont14:                                    ; preds = %ehcleanup
  %39 = bitcast %"class.lodepng::State"* %state to i8*
  call void @llvm.lifetime.end(i64 504, i8* %39) #16
  %40 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #16
  %41 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %41) #16
  br label %eh.resume

if.end:                                           ; preds = %invoke.cont11, %land.lhs.true, %entry
  %42 = load i8*, i8** %buffer, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %42)
  %43 = load i32, i32* %error, align 4, !tbaa !8
  %44 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %44) #16
  %45 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %45) #16
  ret i32 %43

eh.resume:                                        ; preds = %invoke.cont14
  %exn = load i8*, i8** %exn.slot, align 8
  %sel = load i32, i32* %ehselector.slot, align 4
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val18 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val18

terminate.lpad:                                   ; preds = %ehcleanup
  %46 = landingpad { i8*, i32 }
          catch i8* null
  %47 = extractvalue { i8*, i32 } %46, 0
  call void @__clang_call_terminate(i8* %47) #19
  unreachable
}

declare i32 @__gxx_personality_v0(...)

; Function Attrs: noinline noreturn nounwind
define linkonce_odr hidden void @__clang_call_terminate(i8*) #6 {
  %2 = call i8* @__cxa_begin_catch(i8* %0) #16
  call void @_ZSt9terminatev() #19
  unreachable
}

declare i8* @__cxa_begin_catch(i8*)

declare void @_ZSt9terminatev()

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6decodeERNSt3__16vectorIhNS0_9allocatorIhEEEERjS6_RKS4_16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %out, i32* dereferenceable(4) %w, i32* dereferenceable(4) %h, %"class.std::__1::vector"* dereferenceable(24) %in, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %in.addr = alloca %"class.std::__1::vector"*, align 8
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i32* %w, i32** %w.addr, align 8, !tbaa !16
  store i32* %h, i32** %h.addr, align 8, !tbaa !16
  store %"class.std::__1::vector"* %in, %"class.std::__1::vector"** %in.addr, align 8, !tbaa !16
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %1 = load i32*, i32** %w.addr, align 8
  %2 = load i32*, i32** %h.addr, align 8
  %3 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call = call zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %3) #16
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call1 = call dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %4, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call1, %cond.false ]
  %5 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call2 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %5) #16
  %conv = trunc i64 %call2 to i32
  %conv3 = zext i32 %conv to i64
  %6 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %7 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call4 = call i32 @_ZN7lodepng6decodeERNSt3__16vectorIhNS0_9allocatorIhEEEERjS6_PKhm16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %0, i32* dereferenceable(4) %1, i32* dereferenceable(4) %2, i8* %cond, i64 %conv3, i32 %6, i32 %7)
  ret i32 %call4
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6decodeERNSt3__16vectorIhNS0_9allocatorIhEEEERjS6_RNS_5StateEPKhm(%"class.std::__1::vector"* dereferenceable(24) %out, i32* dereferenceable(4) %w, i32* dereferenceable(4) %h, %"class.lodepng::State"* dereferenceable(504) %state, i8* %in, i64 %insize) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %state.addr = alloca %"class.lodepng::State"*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %buffer = alloca i8*, align 8
  %error = alloca i32, align 4
  %buffersize = alloca i64, align 8
  %agg.tmp = alloca %"class.std::__1::__wrap_iter.5", align 8
  %ref.tmp = alloca %"class.std::__1::__wrap_iter", align 8
  %coerce = alloca %"class.std::__1::__wrap_iter", align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i32* %w, i32** %w.addr, align 8, !tbaa !16
  store i32* %h, i32** %h.addr, align 8, !tbaa !16
  store %"class.lodepng::State"* %state, %"class.lodepng::State"** %state.addr, align 8, !tbaa !16
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  %0 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i8* null, i8** %buffer, align 8, !tbaa !2
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load i32*, i32** %w.addr, align 8
  %3 = load i32*, i32** %h.addr, align 8
  %4 = load %"class.lodepng::State"*, %"class.lodepng::State"** %state.addr, align 8
  %5 = bitcast %"class.lodepng::State"* %4 to %struct.LodePNGState*
  %6 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %call = call i32 @_Z14lodepng_decodePPhPjS1_P12LodePNGStatePKhm(i8** %buffer, i32* %2, i32* %3, %struct.LodePNGState* %5, i8* %6, i64 %7)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %8 = load i8*, i8** %buffer, align 8, !tbaa !2
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %9 = load i32, i32* %error, align 4, !tbaa !8
  %tobool1 = icmp ne i32 %9, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %10 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #16
  %11 = load i32*, i32** %w.addr, align 8
  %12 = load i32, i32* %11, align 4, !tbaa !8
  %13 = load i32*, i32** %h.addr, align 8
  %14 = load i32, i32* %13, align 4, !tbaa !8
  %15 = load %"class.lodepng::State"*, %"class.lodepng::State"** %state.addr, align 8
  %16 = bitcast %"class.lodepng::State"* %15 to %struct.LodePNGState*
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %16, i32 0, i32 2
  %call2 = call i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 %12, i32 %14, %struct.LodePNGColorMode* %info_raw)
  store i64 %call2, i64* %buffersize, align 8, !tbaa !6
  %17 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %18 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #16
  %19 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %call3 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE3endEv(%"class.std::__1::vector"* %19) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %ref.tmp, i32 0, i32 0
  store i8* %call3, i8** %coerce.dive, align 8
  call void @_ZNSt3__111__wrap_iterIPKhEC1IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %agg.tmp, %"class.std::__1::__wrap_iter"* dereferenceable(8) %ref.tmp, i8* null) #16
  %20 = load i8*, i8** %buffer, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 0
  %21 = load i8*, i8** %buffer, align 8, !tbaa !2
  %22 = load i64, i64* %buffersize, align 8, !tbaa !6
  %arrayidx4 = getelementptr inbounds i8, i8* %21, i64 %22
  %coerce.dive5 = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %agg.tmp, i32 0, i32 0
  %23 = load i8*, i8** %coerce.dive5, align 8
  %call6 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector"* %17, i8* %23, i8* %arrayidx, i8* %arrayidx4)
  %coerce.dive7 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %coerce, i32 0, i32 0
  store i8* %call6, i8** %coerce.dive7, align 8
  %24 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %24) #16
  %25 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %25) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %26 = load i8*, i8** %buffer, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %26)
  %27 = load i32, i32* %error, align 4, !tbaa !8
  %28 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #16
  %29 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %29) #16
  ret i32 %27
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6decodeERNSt3__16vectorIhNS0_9allocatorIhEEEERjS6_RNS_5StateERKS4_(%"class.std::__1::vector"* dereferenceable(24) %out, i32* dereferenceable(4) %w, i32* dereferenceable(4) %h, %"class.lodepng::State"* dereferenceable(504) %state, %"class.std::__1::vector"* dereferenceable(24) %in) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %state.addr = alloca %"class.lodepng::State"*, align 8
  %in.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i32* %w, i32** %w.addr, align 8, !tbaa !16
  store i32* %h, i32** %h.addr, align 8, !tbaa !16
  store %"class.lodepng::State"* %state, %"class.lodepng::State"** %state.addr, align 8, !tbaa !16
  store %"class.std::__1::vector"* %in, %"class.std::__1::vector"** %in.addr, align 8, !tbaa !16
  %0 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %1 = load i32*, i32** %w.addr, align 8
  %2 = load i32*, i32** %h.addr, align 8
  %3 = load %"class.lodepng::State"*, %"class.lodepng::State"** %state.addr, align 8
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call = call zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %4) #16
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call1 = call dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %5, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call1, %cond.false ]
  %6 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call2 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %6) #16
  %call3 = call i32 @_ZN7lodepng6decodeERNSt3__16vectorIhNS0_9allocatorIhEEEERjS6_RNS_5StateEPKhm(%"class.std::__1::vector"* dereferenceable(24) %0, i32* dereferenceable(4) %1, i32* dereferenceable(4) %2, %"class.lodepng::State"* dereferenceable(504) %3, i8* %cond, i64 %call2)
  ret i32 %call3
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6decodeERNSt3__16vectorIhNS0_9allocatorIhEEEERjS6_RKNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %out, i32* dereferenceable(4) %w, i32* dereferenceable(4) %h, %"class.std::__1::basic_string"* dereferenceable(24) %filename, i32 %colortype, i32 %bitdepth) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %w.addr = alloca i32*, align 8
  %h.addr = alloca i32*, align 8
  %filename.addr = alloca %"class.std::__1::basic_string"*, align 8
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %buffer = alloca %"class.std::__1::vector", align 8
  %error = alloca i32, align 4
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  %cleanup.dest.slot = alloca i32
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i32* %w, i32** %w.addr, align 8, !tbaa !16
  store i32* %h, i32** %h.addr, align 8, !tbaa !16
  store %"class.std::__1::basic_string"* %filename, %"class.std::__1::basic_string"** %filename.addr, align 8, !tbaa !16
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast %"class.std::__1::vector"* %buffer to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #16
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEEC1Ev(%"class.std::__1::vector"* %buffer)
  %1 = load i32*, i32** %h.addr, align 8
  store i32 0, i32* %1, align 4, !tbaa !8
  %2 = load i32*, i32** %w.addr, align 8
  store i32 0, i32* %2, align 4, !tbaa !8
  %3 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %filename.addr, align 8
  %call = invoke i32 @_ZN7lodepng9load_fileERNSt3__16vectorIhNS0_9allocatorIhEEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE(%"class.std::__1::vector"* dereferenceable(24) %buffer, %"class.std::__1::basic_string"* dereferenceable(24) %4)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  store i32 %call, i32* %error, align 4, !tbaa !8
  %5 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %invoke.cont
  %6 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %6, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

lpad:                                             ; preds = %entry
  %7 = landingpad { i8*, i32 }
          cleanup
  %8 = extractvalue { i8*, i32 } %7, 0
  store i8* %8, i8** %exn.slot, align 8
  %9 = extractvalue { i8*, i32 } %7, 1
  store i32 %9, i32* %ehselector.slot, align 4
  br label %ehcleanup

if.end:                                           ; preds = %invoke.cont
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %11 = load i32*, i32** %w.addr, align 8
  %12 = load i32*, i32** %h.addr, align 8
  %13 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %14 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call3 = invoke i32 @_ZN7lodepng6decodeERNSt3__16vectorIhNS0_9allocatorIhEEEERjS6_RKS4_16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %10, i32* dereferenceable(4) %11, i32* dereferenceable(4) %12, %"class.std::__1::vector"* dereferenceable(24) %buffer, i32 %13, i32 %14)
          to label %invoke.cont2 unwind label %lpad1

invoke.cont2:                                     ; preds = %if.end
  store i32 %call3, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

lpad1:                                            ; preds = %if.end
  %15 = landingpad { i8*, i32 }
          cleanup
  %16 = extractvalue { i8*, i32 } %15, 0
  store i8* %16, i8** %exn.slot, align 8
  %17 = extractvalue { i8*, i32 } %15, 1
  store i32 %17, i32* %ehselector.slot, align 4
  %18 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %18) #16
  br label %ehcleanup

cleanup:                                          ; preds = %invoke.cont2, %if.then
  %19 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %19) #16
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEED1Ev(%"class.std::__1::vector"* %buffer)
  %20 = bitcast %"class.std::__1::vector"* %buffer to i8*
  call void @llvm.lifetime.end(i64 24, i8* %20) #16
  %21 = load i32, i32* %retval, align 4
  ret i32 %21

ehcleanup:                                        ; preds = %lpad1, %lpad
  invoke void @_ZNSt3__16vectorIhNS_9allocatorIhEEED1Ev(%"class.std::__1::vector"* %buffer)
          to label %invoke.cont5 unwind label %terminate.lpad

invoke.cont5:                                     ; preds = %ehcleanup
  %22 = bitcast %"class.std::__1::vector"* %buffer to i8*
  call void @llvm.lifetime.end(i64 24, i8* %22) #16
  br label %eh.resume

eh.resume:                                        ; preds = %invoke.cont5
  %exn = load i8*, i8** %exn.slot, align 8
  %sel = load i32, i32* %ehselector.slot, align 4
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val8

terminate.lpad:                                   ; preds = %ehcleanup
  %23 = landingpad { i8*, i32 }
          catch i8* null
  %24 = extractvalue { i8*, i32 } %23, 0
  call void @__clang_call_terminate(i8* %24) #19
  unreachable
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEEC1Ev(%"class.std::__1::vector"* %this) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEEC2Ev(%"class.std::__1::vector"* %this1)
  ret void
}

; Function Attrs: inlinehint ssp uwtable
define linkonce_odr void @_ZNSt3__16vectorIhNS_9allocatorIhEEED1Ev(%"class.std::__1::vector"* %this) unnamed_addr #8 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev(%"class.std::__1::vector"* %this1)
  ret void
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6encodeERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhjj16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %out, i8* %in, i32 %w, i32 %h, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %buffer = alloca i8*, align 8
  %buffersize = alloca i64, align 8
  %error = alloca i32, align 4
  %agg.tmp = alloca %"class.std::__1::__wrap_iter.5", align 8
  %ref.tmp = alloca %"class.std::__1::__wrap_iter", align 8
  %coerce = alloca %"class.std::__1::__wrap_iter", align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %4 = load i32, i32* %w.addr, align 4, !tbaa !8
  %5 = load i32, i32* %h.addr, align 4, !tbaa !8
  %6 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %7 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call = call i32 @_Z21lodepng_encode_memoryPPhPmPKhjj16LodePNGColorTypej(i8** %buffer, i64* %buffersize, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %8 = load i8*, i8** %buffer, align 8, !tbaa !2
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %10 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #16
  %11 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %call1 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE3endEv(%"class.std::__1::vector"* %11) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %ref.tmp, i32 0, i32 0
  store i8* %call1, i8** %coerce.dive, align 8
  call void @_ZNSt3__111__wrap_iterIPKhEC1IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %agg.tmp, %"class.std::__1::__wrap_iter"* dereferenceable(8) %ref.tmp, i8* null) #16
  %12 = load i8*, i8** %buffer, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8*, i8** %buffer, align 8, !tbaa !2
  %14 = load i64, i64* %buffersize, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i8, i8* %13, i64 %14
  %coerce.dive3 = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %agg.tmp, i32 0, i32 0
  %15 = load i8*, i8** %coerce.dive3, align 8
  %call4 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector"* %9, i8* %15, i8* %arrayidx, i8* %arrayidx2)
  %coerce.dive5 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %coerce, i32 0, i32 0
  store i8* %call4, i8** %coerce.dive5, align 8
  %16 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #16
  %17 = load i8*, i8** %buffer, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %17)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load i32, i32* %error, align 4, !tbaa !8
  %19 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %19) #16
  %20 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #16
  %21 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #16
  ret i32 %18
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6encodeERNSt3__16vectorIhNS0_9allocatorIhEEEERKS4_jj16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %out, %"class.std::__1::vector"* dereferenceable(24) %in, i32 %w, i32 %h, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %in.addr = alloca %"class.std::__1::vector"*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store %"class.std::__1::vector"* %in, %"class.std::__1::vector"** %in.addr, align 8, !tbaa !16
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = load i32, i32* %w.addr, align 4, !tbaa !8
  %1 = load i32, i32* %h.addr, align 4, !tbaa !8
  %2 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %3 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call = call i64 @_ZL24lodepng_get_raw_size_lctjj16LodePNGColorTypej(i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call1 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %4) #16
  %cmp = icmp ugt i64 %call, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 84, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %6 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call2 = call zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %6) #16
  br i1 %call2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call3 = call dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %7, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call3, %cond.false ]
  %8 = load i32, i32* %w.addr, align 4, !tbaa !8
  %9 = load i32, i32* %h.addr, align 4, !tbaa !8
  %10 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %11 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call4 = call i32 @_ZN7lodepng6encodeERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhjj16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %5, i8* %cond, i32 %8, i32 %9, i32 %10, i32 %11)
  store i32 %call4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6encodeERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhjjRNS_5StateE(%"class.std::__1::vector"* dereferenceable(24) %out, i8* %in, i32 %w, i32 %h, %"class.lodepng::State"* dereferenceable(504) %state) #0 {
entry:
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %state.addr = alloca %"class.lodepng::State"*, align 8
  %buffer = alloca i8*, align 8
  %buffersize = alloca i64, align 8
  %error = alloca i32, align 4
  %agg.tmp = alloca %"class.std::__1::__wrap_iter.5", align 8
  %ref.tmp = alloca %"class.std::__1::__wrap_iter", align 8
  %coerce = alloca %"class.std::__1::__wrap_iter", align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %"class.lodepng::State"* %state, %"class.lodepng::State"** %state.addr, align 8, !tbaa !16
  %0 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %4 = load i32, i32* %w.addr, align 4, !tbaa !8
  %5 = load i32, i32* %h.addr, align 4, !tbaa !8
  %6 = load %"class.lodepng::State"*, %"class.lodepng::State"** %state.addr, align 8
  %7 = bitcast %"class.lodepng::State"* %6 to %struct.LodePNGState*
  %call = call i32 @_Z14lodepng_encodePPhPmPKhjjP12LodePNGState(i8** %buffer, i64* %buffersize, i8* %3, i32 %4, i32 %5, %struct.LodePNGState* %7)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %8 = load i8*, i8** %buffer, align 8, !tbaa !2
  %tobool = icmp ne i8* %8, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %10 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #16
  %11 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %call1 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE3endEv(%"class.std::__1::vector"* %11) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %ref.tmp, i32 0, i32 0
  store i8* %call1, i8** %coerce.dive, align 8
  call void @_ZNSt3__111__wrap_iterIPKhEC1IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %agg.tmp, %"class.std::__1::__wrap_iter"* dereferenceable(8) %ref.tmp, i8* null) #16
  %12 = load i8*, i8** %buffer, align 8, !tbaa !2
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0
  %13 = load i8*, i8** %buffer, align 8, !tbaa !2
  %14 = load i64, i64* %buffersize, align 8, !tbaa !6
  %arrayidx2 = getelementptr inbounds i8, i8* %13, i64 %14
  %coerce.dive3 = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %agg.tmp, i32 0, i32 0
  %15 = load i8*, i8** %coerce.dive3, align 8
  %call4 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPhEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIS5_EEE4typeENSB_IPKhEES7_S7_(%"class.std::__1::vector"* %9, i8* %15, i8* %arrayidx, i8* %arrayidx2)
  %coerce.dive5 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %coerce, i32 0, i32 0
  store i8* %call4, i8** %coerce.dive5, align 8
  %16 = bitcast %"class.std::__1::__wrap_iter"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #16
  %17 = load i8*, i8** %buffer, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %17)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load i32, i32* %error, align 4, !tbaa !8
  %19 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %19) #16
  %20 = bitcast i64* %buffersize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #16
  %21 = bitcast i8** %buffer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #16
  ret i32 %18
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6encodeERNSt3__16vectorIhNS0_9allocatorIhEEEERKS4_jjRNS_5StateE(%"class.std::__1::vector"* dereferenceable(24) %out, %"class.std::__1::vector"* dereferenceable(24) %in, i32 %w, i32 %h, %"class.lodepng::State"* dereferenceable(504) %state) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %"class.std::__1::vector"*, align 8
  %in.addr = alloca %"class.std::__1::vector"*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %state.addr = alloca %"class.lodepng::State"*, align 8
  store %"class.std::__1::vector"* %out, %"class.std::__1::vector"** %out.addr, align 8, !tbaa !16
  store %"class.std::__1::vector"* %in, %"class.std::__1::vector"** %in.addr, align 8, !tbaa !16
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %"class.lodepng::State"* %state, %"class.lodepng::State"** %state.addr, align 8, !tbaa !16
  %0 = load i32, i32* %w.addr, align 4, !tbaa !8
  %1 = load i32, i32* %h.addr, align 4, !tbaa !8
  %2 = load %"class.lodepng::State"*, %"class.lodepng::State"** %state.addr, align 8
  %3 = bitcast %"class.lodepng::State"* %2 to %struct.LodePNGState*
  %info_raw = getelementptr inbounds %struct.LodePNGState, %struct.LodePNGState* %3, i32 0, i32 2
  %call = call i64 @_Z20lodepng_get_raw_sizejjPK16LodePNGColorMode(i32 %0, i32 %1, %struct.LodePNGColorMode* %info_raw)
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call1 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %4) #16
  %cmp = icmp ugt i64 %call, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 84, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %out.addr, align 8
  %6 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call2 = call zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %6) #16
  br i1 %call2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call3 = call dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %7, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call3, %cond.false ]
  %8 = load i32, i32* %w.addr, align 4, !tbaa !8
  %9 = load i32, i32* %h.addr, align 4, !tbaa !8
  %10 = load %"class.lodepng::State"*, %"class.lodepng::State"** %state.addr, align 8
  %call4 = call i32 @_ZN7lodepng6encodeERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhjjRNS_5StateE(%"class.std::__1::vector"* dereferenceable(24) %5, i8* %cond, i32 %8, i32 %9, %"class.lodepng::State"* dereferenceable(504) %10)
  store i32 %call4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6encodeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKhjj16LodePNGColorTypej(%"class.std::__1::basic_string"* dereferenceable(24) %filename, i8* %in, i32 %w, i32 %h, i32 %colortype, i32 %bitdepth) #0 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %filename.addr = alloca %"class.std::__1::basic_string"*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  %buffer = alloca %"class.std::__1::vector", align 8
  %error = alloca i32, align 4
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store %"class.std::__1::basic_string"* %filename, %"class.std::__1::basic_string"** %filename.addr, align 8, !tbaa !16
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = bitcast %"class.std::__1::vector"* %buffer to i8*
  call void @llvm.lifetime.start(i64 24, i8* %0) #16
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEEC1Ev(%"class.std::__1::vector"* %buffer)
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %3 = load i32, i32* %w.addr, align 4, !tbaa !8
  %4 = load i32, i32* %h.addr, align 4, !tbaa !8
  %5 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %6 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call = invoke i32 @_ZN7lodepng6encodeERNSt3__16vectorIhNS0_9allocatorIhEEEEPKhjj16LodePNGColorTypej(%"class.std::__1::vector"* dereferenceable(24) %buffer, i8* %2, i32 %3, i32 %4, i32 %5, i32 %6)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  store i32 %call, i32* %error, align 4, !tbaa !8
  %7 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %invoke.cont
  %8 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %filename.addr, align 8
  %call3 = invoke i32 @_ZN7lodepng9save_fileERKNSt3__16vectorIhNS0_9allocatorIhEEEERKNS0_12basic_stringIcNS0_11char_traitsIcEENS2_IcEEEE(%"class.std::__1::vector"* dereferenceable(24) %buffer, %"class.std::__1::basic_string"* dereferenceable(24) %8)
          to label %invoke.cont2 unwind label %lpad1

invoke.cont2:                                     ; preds = %if.then
  store i32 %call3, i32* %error, align 4, !tbaa !8
  br label %if.end

lpad:                                             ; preds = %entry
  %9 = landingpad { i8*, i32 }
          cleanup
  %10 = extractvalue { i8*, i32 } %9, 0
  store i8* %10, i8** %exn.slot, align 8
  %11 = extractvalue { i8*, i32 } %9, 1
  store i32 %11, i32* %ehselector.slot, align 4
  br label %ehcleanup

lpad1:                                            ; preds = %if.then
  %12 = landingpad { i8*, i32 }
          cleanup
  %13 = extractvalue { i8*, i32 } %12, 0
  store i8* %13, i8** %exn.slot, align 8
  %14 = extractvalue { i8*, i32 } %12, 1
  store i32 %14, i32* %ehselector.slot, align 4
  %15 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %15) #16
  br label %ehcleanup

if.end:                                           ; preds = %invoke.cont2, %invoke.cont
  %16 = load i32, i32* %error, align 4, !tbaa !8
  %17 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #16
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEED1Ev(%"class.std::__1::vector"* %buffer)
  %18 = bitcast %"class.std::__1::vector"* %buffer to i8*
  call void @llvm.lifetime.end(i64 24, i8* %18) #16
  ret i32 %16

ehcleanup:                                        ; preds = %lpad1, %lpad
  invoke void @_ZNSt3__16vectorIhNS_9allocatorIhEEED1Ev(%"class.std::__1::vector"* %buffer)
          to label %invoke.cont4 unwind label %terminate.lpad

invoke.cont4:                                     ; preds = %ehcleanup
  %19 = bitcast %"class.std::__1::vector"* %buffer to i8*
  call void @llvm.lifetime.end(i64 24, i8* %19) #16
  br label %eh.resume

eh.resume:                                        ; preds = %invoke.cont4
  %exn = load i8*, i8** %exn.slot, align 8
  %sel = load i32, i32* %ehselector.slot, align 4
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val6 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val6

terminate.lpad:                                   ; preds = %ehcleanup
  %20 = landingpad { i8*, i32 }
          catch i8* null
  %21 = extractvalue { i8*, i32 } %20, 0
  call void @__clang_call_terminate(i8* %21) #19
  unreachable
}

; Function Attrs: ssp uwtable
define i32 @_ZN7lodepng6encodeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS0_6vectorIhNS4_IhEEEEjj16LodePNGColorTypej(%"class.std::__1::basic_string"* dereferenceable(24) %filename, %"class.std::__1::vector"* dereferenceable(24) %in, i32 %w, i32 %h, i32 %colortype, i32 %bitdepth) #0 {
entry:
  %retval = alloca i32, align 4
  %filename.addr = alloca %"class.std::__1::basic_string"*, align 8
  %in.addr = alloca %"class.std::__1::vector"*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %colortype.addr = alloca i32, align 4
  %bitdepth.addr = alloca i32, align 4
  store %"class.std::__1::basic_string"* %filename, %"class.std::__1::basic_string"** %filename.addr, align 8, !tbaa !16
  store %"class.std::__1::vector"* %in, %"class.std::__1::vector"** %in.addr, align 8, !tbaa !16
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %colortype, i32* %colortype.addr, align 4, !tbaa !62
  store i32 %bitdepth, i32* %bitdepth.addr, align 4, !tbaa !8
  %0 = load i32, i32* %w.addr, align 4, !tbaa !8
  %1 = load i32, i32* %h.addr, align 4, !tbaa !8
  %2 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %3 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call = call i64 @_ZL24lodepng_get_raw_size_lctjj16LodePNGColorTypej(i32 %0, i32 %1, i32 %2, i32 %3)
  %4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call1 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %4) #16
  %cmp = icmp ugt i64 %call, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 84, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %filename.addr, align 8
  %6 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call2 = call zeroext i1 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE5emptyEv(%"class.std::__1::vector"* %6) #16
  br i1 %call2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %7 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %in.addr, align 8
  %call3 = call dereferenceable(1) i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEEixEm(%"class.std::__1::vector"* %7, i64 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ null, %cond.true ], [ %call3, %cond.false ]
  %8 = load i32, i32* %w.addr, align 4, !tbaa !8
  %9 = load i32, i32* %h.addr, align 4, !tbaa !8
  %10 = load i32, i32* %colortype.addr, align 4, !tbaa !62
  %11 = load i32, i32* %bitdepth.addr, align 4, !tbaa !8
  %call4 = call i32 @_ZN7lodepng6encodeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPKhjj16LodePNGColorTypej(%"class.std::__1::basic_string"* dereferenceable(24) %5, i8* %cond, i32 %8, i32 %9, i32 %10, i32 %11)
  store i32 %call4, i32* %retval, align 4
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare i32 @fseek(%struct.__sFILE*, i64, i32) #2

declare i64 @ftell(%struct.__sFILE*) #2

; Function Attrs: allocsize(0)
declare i8* @malloc(i64) #9

declare i64 @fread(i8*, i64, i64, %struct.__sFILE*) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14lodepng_muloflmmPm(i64 %a, i64 %b, i64* %result) #4 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %result.addr = alloca i64*, align 8
  store i64 %a, i64* %a.addr, align 8, !tbaa !6
  store i64 %b, i64* %b.addr, align 8, !tbaa !6
  store i64* %result, i64** %result.addr, align 8, !tbaa !2
  %0 = load i64, i64* %a.addr, align 8, !tbaa !6
  %1 = load i64, i64* %b.addr, align 8, !tbaa !6
  %mul = mul i64 %0, %1
  %2 = load i64*, i64** %result.addr, align 8, !tbaa !2
  store i64 %mul, i64* %2, align 8, !tbaa !6
  %3 = load i64, i64* %a.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %3, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %4 = load i64*, i64** %result.addr, align 8, !tbaa !2
  %5 = load i64, i64* %4, align 8, !tbaa !6
  %6 = load i64, i64* %a.addr, align 8, !tbaa !6
  %div = udiv i64 %5, %6
  %7 = load i64, i64* %b.addr, align 8, !tbaa !6
  %cmp1 = icmp ne i64 %div, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %8 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %conv = zext i1 %8 to i32
  ret i32 %conv
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL8peekBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %nbits) #4 {
entry:
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %nbits.addr = alloca i64, align 8
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %0, i32 0, i32 4
  %1 = load i32, i32* %buffer, align 8, !tbaa !15
  %2 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %sh_prom = trunc i64 %2 to i32
  %shl = shl i32 1, %sh_prom
  %sub = sub i32 %shl, 1
  %and = and i32 %1, %sub
  ret i32 %and
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL11advanceBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %reader, i64 %nbits) #4 {
entry:
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %nbits.addr = alloca i64, align 8
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %1 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %buffer = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %1, i32 0, i32 4
  %2 = load i32, i32* %buffer, align 8, !tbaa !15
  %sh_prom = trunc i64 %0 to i32
  %shr = lshr i32 %2, %sh_prom
  store i32 %shr, i32* %buffer, align 8, !tbaa !15
  %3 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %4 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %4, i32 0, i32 3
  %5 = load i64, i64* %bp, align 8, !tbaa !14
  %add = add i64 %5, %3
  store i64 %add, i64* %bp, align 8, !tbaa !14
  ret void
}

declare void @free(i8*) #2

; Function Attrs: ssp uwtable
define internal i32 @_ZL20inflateNoCompressionP8ucvectorP16LodePNGBitReaderPK25LodePNGDecompressSettings(%struct.ucvector* %out, %struct.LodePNGBitReader* %reader, %struct.LodePNGDecompressSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %bytepos = alloca i64, align 8
  %size = alloca i64, align 8
  %LEN = alloca i32, align 4
  %NLEN = alloca i32, align 4
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast i64* %bytepos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %size1 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %2, i32 0, i32 1
  %3 = load i64, i64* %size1, align 8, !tbaa !12
  store i64 %3, i64* %size, align 8, !tbaa !6
  %4 = bitcast i32* %LEN to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #16
  %5 = bitcast i32* %NLEN to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %7 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %7, i32 0, i32 3
  %8 = load i64, i64* %bp, align 8, !tbaa !14
  %add = add i64 %8, 7
  %shr = lshr i64 %add, 3
  store i64 %shr, i64* %bytepos, align 8, !tbaa !6
  %9 = load i64, i64* %bytepos, align 8, !tbaa !6
  %add2 = add i64 %9, 4
  %10 = load i64, i64* %size, align 8, !tbaa !6
  %cmp = icmp uge i64 %add2, %10
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 52, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %11 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %11, i32 0, i32 0
  %12 = load i8*, i8** %data, align 8, !tbaa !10
  %13 = load i64, i64* %bytepos, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %13
  %14 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %14 to i32
  %15 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data3 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %15, i32 0, i32 0
  %16 = load i8*, i8** %data3, align 8, !tbaa !10
  %17 = load i64, i64* %bytepos, align 8, !tbaa !6
  %add4 = add i64 %17, 1
  %arrayidx5 = getelementptr inbounds i8, i8* %16, i64 %add4
  %18 = load i8, i8* %arrayidx5, align 1, !tbaa !16
  %conv6 = zext i8 %18 to i32
  %shl = shl i32 %conv6, 8
  %add7 = add i32 %conv, %shl
  store i32 %add7, i32* %LEN, align 4, !tbaa !8
  %19 = load i64, i64* %bytepos, align 8, !tbaa !6
  %add8 = add i64 %19, 2
  store i64 %add8, i64* %bytepos, align 8, !tbaa !6
  %20 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data9 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %20, i32 0, i32 0
  %21 = load i8*, i8** %data9, align 8, !tbaa !10
  %22 = load i64, i64* %bytepos, align 8, !tbaa !6
  %arrayidx10 = getelementptr inbounds i8, i8* %21, i64 %22
  %23 = load i8, i8* %arrayidx10, align 1, !tbaa !16
  %conv11 = zext i8 %23 to i32
  %24 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data12 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %24, i32 0, i32 0
  %25 = load i8*, i8** %data12, align 8, !tbaa !10
  %26 = load i64, i64* %bytepos, align 8, !tbaa !6
  %add13 = add i64 %26, 1
  %arrayidx14 = getelementptr inbounds i8, i8* %25, i64 %add13
  %27 = load i8, i8* %arrayidx14, align 1, !tbaa !16
  %conv15 = zext i8 %27 to i32
  %shl16 = shl i32 %conv15, 8
  %add17 = add i32 %conv11, %shl16
  store i32 %add17, i32* %NLEN, align 4, !tbaa !8
  %28 = load i64, i64* %bytepos, align 8, !tbaa !6
  %add18 = add i64 %28, 2
  store i64 %add18, i64* %bytepos, align 8, !tbaa !6
  %29 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %ignore_nlen = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %29, i32 0, i32 1
  %30 = load i32, i32* %ignore_nlen, align 4, !tbaa !48
  %tobool = icmp ne i32 %30, 0
  br i1 %tobool, label %if.end22, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %31 = load i32, i32* %LEN, align 4, !tbaa !8
  %32 = load i32, i32* %NLEN, align 4, !tbaa !8
  %add19 = add i32 %31, %32
  %cmp20 = icmp ne i32 %add19, 65535
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %land.lhs.true
  store i32 21, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end22:                                         ; preds = %land.lhs.true, %if.end
  %33 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %34 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size23 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %34, i32 0, i32 1
  %35 = load i64, i64* %size23, align 8, !tbaa !34
  %36 = load i32, i32* %LEN, align 4, !tbaa !8
  %conv24 = zext i32 %36 to i64
  %add25 = add i64 %35, %conv24
  %call = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %33, i64 %add25)
  %tobool26 = icmp ne i32 %call, 0
  br i1 %tobool26, label %if.end28, label %if.then27

if.then27:                                        ; preds = %if.end22
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end28:                                         ; preds = %if.end22
  %37 = load i64, i64* %bytepos, align 8, !tbaa !6
  %38 = load i32, i32* %LEN, align 4, !tbaa !8
  %conv29 = zext i32 %38 to i64
  %add30 = add i64 %37, %conv29
  %39 = load i64, i64* %size, align 8, !tbaa !6
  %cmp31 = icmp ugt i64 %add30, %39
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %if.end28
  store i32 23, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end33:                                         ; preds = %if.end28
  %40 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data34 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %40, i32 0, i32 0
  %41 = load i8*, i8** %data34, align 8, !tbaa !32
  %42 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size35 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %42, i32 0, i32 1
  %43 = load i64, i64* %size35, align 8, !tbaa !34
  %add.ptr = getelementptr inbounds i8, i8* %41, i64 %43
  %44 = load i32, i32* %LEN, align 4, !tbaa !8
  %idx.ext = zext i32 %44 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  %45 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %data37 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %45, i32 0, i32 0
  %46 = load i8*, i8** %data37, align 8, !tbaa !10
  %47 = load i64, i64* %bytepos, align 8, !tbaa !6
  %add.ptr38 = getelementptr inbounds i8, i8* %46, i64 %47
  %48 = load i32, i32* %LEN, align 4, !tbaa !8
  %conv39 = zext i32 %48 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr36, i8* %add.ptr38, i64 %conv39)
  %49 = load i32, i32* %LEN, align 4, !tbaa !8
  %conv40 = zext i32 %49 to i64
  %50 = load i64, i64* %bytepos, align 8, !tbaa !6
  %add41 = add i64 %50, %conv40
  store i64 %add41, i64* %bytepos, align 8, !tbaa !6
  %51 = load i64, i64* %bytepos, align 8, !tbaa !6
  %shl42 = shl i64 %51, 3
  %52 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp43 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %52, i32 0, i32 3
  store i64 %shl42, i64* %bp43, align 8, !tbaa !14
  %53 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %53, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end33, %if.then32, %if.then27, %if.then21, %if.then
  %54 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %54) #16
  %55 = bitcast i32* %NLEN to i8*
  call void @llvm.lifetime.end(i64 4, i8* %55) #16
  %56 = bitcast i32* %LEN to i8*
  call void @llvm.lifetime.end(i64 4, i8* %56) #16
  %57 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %57) #16
  %58 = bitcast i64* %bytepos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %58) #16
  %59 = load i32, i32* %retval, align 4
  ret i32 %59
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL19inflateHuffmanBlockP8ucvectorP16LodePNGBitReaderj(%struct.ucvector* %out, %struct.LodePNGBitReader* %reader, i32 %btype) #0 {
entry:
  %out.addr = alloca %struct.ucvector*, align 8
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %btype.addr = alloca i32, align 4
  %error = alloca i32, align 4
  %tree_ll = alloca %struct.HuffmanTree, align 8
  %tree_d = alloca %struct.HuffmanTree, align 8
  %code_ll = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %code_d = alloca i32, align 4
  %distance = alloca i32, align 4
  %numextrabits_l = alloca i32, align 4
  %numextrabits_d = alloca i32, align 4
  %start = alloca i64, align 8
  %backward = alloca i64, align 8
  %length = alloca i64, align 8
  %forward = alloca i64, align 8
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store i32 %btype, i32* %btype.addr, align 4, !tbaa !8
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast %struct.HuffmanTree* %tree_ll to i8*
  call void @llvm.lifetime.start(i64 40, i8* %1) #16
  %2 = bitcast %struct.HuffmanTree* %tree_d to i8*
  call void @llvm.lifetime.start(i64 40, i8* %2) #16
  call void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree_ll)
  call void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree_d)
  %3 = load i32, i32* %btype.addr, align 4, !tbaa !8
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 @_ZL19getTreeInflateFixedP11HuffmanTreeS0_(%struct.HuffmanTree* %tree_ll, %struct.HuffmanTree* %tree_d)
  store i32 %call, i32* %error, align 4, !tbaa !8
  br label %if.end

if.else:                                          ; preds = %entry
  %4 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call1 = call i32 @_ZL21getTreeInflateDynamicP11HuffmanTreeS0_P16LodePNGBitReader(%struct.HuffmanTree* %tree_ll, %struct.HuffmanTree* %tree_d, %struct.LodePNGBitReader* %4)
  store i32 %call1, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont99, %if.end
  %5 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %5, 0
  %lnot = xor i1 %tobool, true
  br i1 %lnot, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = bitcast i32* %code_ll to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  %7 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call2 = call i32 @_ZL12ensureBits25P16LodePNGBitReaderm(%struct.LodePNGBitReader* %7, i64 20)
  %8 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call3 = call i32 @_ZL19huffmanDecodeSymbolP16LodePNGBitReaderPK11HuffmanTree(%struct.LodePNGBitReader* %8, %struct.HuffmanTree* %tree_ll)
  store i32 %call3, i32* %code_ll, align 4, !tbaa !8
  %9 = load i32, i32* %code_ll, align 4, !tbaa !8
  %cmp4 = icmp ule i32 %9, 255
  br i1 %cmp4, label %if.then5, label %if.else11

if.then5:                                         ; preds = %while.body
  %10 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %11 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %11, i32 0, i32 1
  %12 = load i64, i64* %size, align 8, !tbaa !34
  %add = add i64 %12, 1
  %call6 = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %10, i64 %add)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then5
  store i32 83, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup97

if.end9:                                          ; preds = %if.then5
  %13 = load i32, i32* %code_ll, align 4, !tbaa !8
  %conv = trunc i32 %13 to i8
  %14 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %14, i32 0, i32 0
  %15 = load i8*, i8** %data, align 8, !tbaa !32
  %16 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size10 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %16, i32 0, i32 1
  %17 = load i64, i64* %size10, align 8, !tbaa !34
  %sub = sub i64 %17, 1
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %sub
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !16
  br label %if.end93

if.else11:                                        ; preds = %while.body
  %18 = load i32, i32* %code_ll, align 4, !tbaa !8
  %cmp12 = icmp uge i32 %18, 257
  br i1 %cmp12, label %land.lhs.true, label %if.else88

land.lhs.true:                                    ; preds = %if.else11
  %19 = load i32, i32* %code_ll, align 4, !tbaa !8
  %cmp13 = icmp ule i32 %19, 285
  br i1 %cmp13, label %if.then14, label %if.else88

if.then14:                                        ; preds = %land.lhs.true
  %20 = bitcast i32* %code_d to i8*
  call void @llvm.lifetime.start(i64 4, i8* %20) #16
  %21 = bitcast i32* %distance to i8*
  call void @llvm.lifetime.start(i64 4, i8* %21) #16
  %22 = bitcast i32* %numextrabits_l to i8*
  call void @llvm.lifetime.start(i64 4, i8* %22) #16
  %23 = bitcast i32* %numextrabits_d to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #16
  %24 = bitcast i64* %start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %24) #16
  %25 = bitcast i64* %backward to i8*
  call void @llvm.lifetime.start(i64 8, i8* %25) #16
  %26 = bitcast i64* %length to i8*
  call void @llvm.lifetime.start(i64 8, i8* %26) #16
  %27 = load i32, i32* %code_ll, align 4, !tbaa !8
  %sub15 = sub i32 %27, 257
  %idxprom = zext i32 %sub15 to i64
  %arrayidx16 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL10LENGTHBASE, i64 0, i64 %idxprom
  %28 = load i32, i32* %arrayidx16, align 4, !tbaa !8
  %conv17 = zext i32 %28 to i64
  store i64 %conv17, i64* %length, align 8, !tbaa !6
  %29 = load i32, i32* %code_ll, align 4, !tbaa !8
  %sub18 = sub i32 %29, 257
  %idxprom19 = zext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL11LENGTHEXTRA, i64 0, i64 %idxprom19
  %30 = load i32, i32* %arrayidx20, align 4, !tbaa !8
  store i32 %30, i32* %numextrabits_l, align 4, !tbaa !8
  %31 = load i32, i32* %numextrabits_l, align 4, !tbaa !8
  %cmp21 = icmp ne i32 %31, 0
  br i1 %cmp21, label %if.then22, label %if.end27

if.then22:                                        ; preds = %if.then14
  %32 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %33 = load i32, i32* %numextrabits_l, align 4, !tbaa !8
  %conv23 = zext i32 %33 to i64
  %call24 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %32, i64 %conv23)
  %conv25 = zext i32 %call24 to i64
  %34 = load i64, i64* %length, align 8, !tbaa !6
  %add26 = add i64 %34, %conv25
  store i64 %add26, i64* %length, align 8, !tbaa !6
  br label %if.end27

if.end27:                                         ; preds = %if.then22, %if.then14
  %35 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call28 = call i32 @_ZL12ensureBits32P16LodePNGBitReaderm(%struct.LodePNGBitReader* %35, i64 28)
  %36 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call29 = call i32 @_ZL19huffmanDecodeSymbolP16LodePNGBitReaderPK11HuffmanTree(%struct.LodePNGBitReader* %36, %struct.HuffmanTree* %tree_d)
  store i32 %call29, i32* %code_d, align 4, !tbaa !8
  %37 = load i32, i32* %code_d, align 4, !tbaa !8
  %cmp30 = icmp ugt i32 %37, 29
  br i1 %cmp30, label %if.then31, label %if.end35

if.then31:                                        ; preds = %if.end27
  %38 = load i32, i32* %code_d, align 4, !tbaa !8
  %cmp32 = icmp ule i32 %38, 31
  br i1 %cmp32, label %if.then33, label %if.else34

if.then33:                                        ; preds = %if.then31
  store i32 18, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else34:                                        ; preds = %if.then31
  store i32 16, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end35:                                         ; preds = %if.end27
  %39 = load i32, i32* %code_d, align 4, !tbaa !8
  %idxprom36 = zext i32 %39 to i64
  %arrayidx37 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL12DISTANCEBASE, i64 0, i64 %idxprom36
  %40 = load i32, i32* %arrayidx37, align 4, !tbaa !8
  store i32 %40, i32* %distance, align 4, !tbaa !8
  %41 = load i32, i32* %code_d, align 4, !tbaa !8
  %idxprom38 = zext i32 %41 to i64
  %arrayidx39 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL13DISTANCEEXTRA, i64 0, i64 %idxprom38
  %42 = load i32, i32* %arrayidx39, align 4, !tbaa !8
  store i32 %42, i32* %numextrabits_d, align 4, !tbaa !8
  %43 = load i32, i32* %numextrabits_d, align 4, !tbaa !8
  %cmp40 = icmp ne i32 %43, 0
  br i1 %cmp40, label %if.then41, label %if.end45

if.then41:                                        ; preds = %if.end35
  %44 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %45 = load i32, i32* %numextrabits_d, align 4, !tbaa !8
  %conv42 = zext i32 %45 to i64
  %call43 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %44, i64 %conv42)
  %46 = load i32, i32* %distance, align 4, !tbaa !8
  %add44 = add i32 %46, %call43
  store i32 %add44, i32* %distance, align 4, !tbaa !8
  br label %if.end45

if.end45:                                         ; preds = %if.then41, %if.end35
  %47 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size46 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %47, i32 0, i32 1
  %48 = load i64, i64* %size46, align 8, !tbaa !34
  store i64 %48, i64* %start, align 8, !tbaa !6
  %49 = load i32, i32* %distance, align 4, !tbaa !8
  %conv47 = zext i32 %49 to i64
  %50 = load i64, i64* %start, align 8, !tbaa !6
  %cmp48 = icmp ugt i64 %conv47, %50
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end45
  store i32 52, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end50:                                         ; preds = %if.end45
  %51 = load i64, i64* %start, align 8, !tbaa !6
  %52 = load i32, i32* %distance, align 4, !tbaa !8
  %conv51 = zext i32 %52 to i64
  %sub52 = sub i64 %51, %conv51
  store i64 %sub52, i64* %backward, align 8, !tbaa !6
  %53 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %54 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size53 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %54, i32 0, i32 1
  %55 = load i64, i64* %size53, align 8, !tbaa !34
  %56 = load i64, i64* %length, align 8, !tbaa !6
  %add54 = add i64 %55, %56
  %call55 = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %53, i64 %add54)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.end58, label %if.then57

if.then57:                                        ; preds = %if.end50
  store i32 83, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end58:                                         ; preds = %if.end50
  %57 = load i32, i32* %distance, align 4, !tbaa !8
  %conv59 = zext i32 %57 to i64
  %58 = load i64, i64* %length, align 8, !tbaa !6
  %cmp60 = icmp ult i64 %conv59, %58
  br i1 %cmp60, label %if.then61, label %if.else76

if.then61:                                        ; preds = %if.end58
  %59 = bitcast i64* %forward to i8*
  call void @llvm.lifetime.start(i64 8, i8* %59) #16
  %60 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data62 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %60, i32 0, i32 0
  %61 = load i8*, i8** %data62, align 8, !tbaa !32
  %62 = load i64, i64* %start, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %61, i64 %62
  %63 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data63 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %63, i32 0, i32 0
  %64 = load i8*, i8** %data63, align 8, !tbaa !32
  %65 = load i64, i64* %backward, align 8, !tbaa !6
  %add.ptr64 = getelementptr inbounds i8, i8* %64, i64 %65
  %66 = load i32, i32* %distance, align 4, !tbaa !8
  %conv65 = zext i32 %66 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr, i8* %add.ptr64, i64 %conv65)
  %67 = load i32, i32* %distance, align 4, !tbaa !8
  %conv66 = zext i32 %67 to i64
  %68 = load i64, i64* %start, align 8, !tbaa !6
  %add67 = add i64 %68, %conv66
  store i64 %add67, i64* %start, align 8, !tbaa !6
  %69 = load i32, i32* %distance, align 4, !tbaa !8
  %conv68 = zext i32 %69 to i64
  store i64 %conv68, i64* %forward, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then61
  %70 = load i64, i64* %forward, align 8, !tbaa !6
  %71 = load i64, i64* %length, align 8, !tbaa !6
  %cmp69 = icmp ult i64 %70, %71
  br i1 %cmp69, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %72 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data70 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %72, i32 0, i32 0
  %73 = load i8*, i8** %data70, align 8, !tbaa !32
  %74 = load i64, i64* %backward, align 8, !tbaa !6
  %inc = add i64 %74, 1
  store i64 %inc, i64* %backward, align 8, !tbaa !6
  %arrayidx71 = getelementptr inbounds i8, i8* %73, i64 %74
  %75 = load i8, i8* %arrayidx71, align 1, !tbaa !16
  %76 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data72 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %76, i32 0, i32 0
  %77 = load i8*, i8** %data72, align 8, !tbaa !32
  %78 = load i64, i64* %start, align 8, !tbaa !6
  %inc73 = add i64 %78, 1
  store i64 %inc73, i64* %start, align 8, !tbaa !6
  %arrayidx74 = getelementptr inbounds i8, i8* %77, i64 %78
  store i8 %75, i8* %arrayidx74, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %79 = load i64, i64* %forward, align 8, !tbaa !6
  %inc75 = add i64 %79, 1
  store i64 %inc75, i64* %forward, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %80 = bitcast i64* %forward to i8*
  call void @llvm.lifetime.end(i64 8, i8* %80) #16
  br label %if.end81

if.else76:                                        ; preds = %if.end58
  %81 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data77 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %81, i32 0, i32 0
  %82 = load i8*, i8** %data77, align 8, !tbaa !32
  %83 = load i64, i64* %start, align 8, !tbaa !6
  %add.ptr78 = getelementptr inbounds i8, i8* %82, i64 %83
  %84 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data79 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %84, i32 0, i32 0
  %85 = load i8*, i8** %data79, align 8, !tbaa !32
  %86 = load i64, i64* %backward, align 8, !tbaa !6
  %add.ptr80 = getelementptr inbounds i8, i8* %85, i64 %86
  %87 = load i64, i64* %length, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr78, i8* %add.ptr80, i64 %87)
  br label %if.end81

if.end81:                                         ; preds = %if.else76, %for.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end81, %if.then57, %if.then49, %if.else34, %if.then33
  %88 = bitcast i64* %length to i8*
  call void @llvm.lifetime.end(i64 8, i8* %88) #16
  %89 = bitcast i64* %backward to i8*
  call void @llvm.lifetime.end(i64 8, i8* %89) #16
  %90 = bitcast i64* %start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %90) #16
  %91 = bitcast i32* %numextrabits_d to i8*
  call void @llvm.lifetime.end(i64 4, i8* %91) #16
  %92 = bitcast i32* %numextrabits_l to i8*
  call void @llvm.lifetime.end(i64 4, i8* %92) #16
  %93 = bitcast i32* %distance to i8*
  call void @llvm.lifetime.end(i64 4, i8* %93) #16
  %94 = bitcast i32* %code_d to i8*
  call void @llvm.lifetime.end(i64 4, i8* %94) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup97 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end92

if.else88:                                        ; preds = %land.lhs.true, %if.else11
  %95 = load i32, i32* %code_ll, align 4, !tbaa !8
  %cmp89 = icmp eq i32 %95, 256
  br i1 %cmp89, label %if.then90, label %if.else91

if.then90:                                        ; preds = %if.else88
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup97

if.else91:                                        ; preds = %if.else88
  store i32 16, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup97

if.end92:                                         ; preds = %cleanup.cont
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.end9
  %96 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %96, i32 0, i32 3
  %97 = load i64, i64* %bp, align 8, !tbaa !14
  %98 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %98, i32 0, i32 2
  %99 = load i64, i64* %bitsize, align 8, !tbaa !13
  %cmp94 = icmp ugt i64 %97, %99
  br i1 %cmp94, label %if.then95, label %if.end96

if.then95:                                        ; preds = %if.end93
  store i32 51, i32* %error, align 4, !tbaa !8
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup97

if.end96:                                         ; preds = %if.end93
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup97

cleanup97:                                        ; preds = %if.end96, %if.then95, %if.else91, %if.then90, %cleanup, %if.then8
  %100 = bitcast i32* %code_ll to i8*
  call void @llvm.lifetime.end(i64 4, i8* %100) #16
  %cleanup.dest98 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest98, label %unreachable [
    i32 0, label %cleanup.cont99
    i32 3, label %while.end
  ]

cleanup.cont99:                                   ; preds = %cleanup97
  br label %while.cond

while.end:                                        ; preds = %cleanup97, %while.cond
  call void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree_ll)
  call void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree_d)
  %101 = load i32, i32* %error, align 4, !tbaa !8
  store i32 1, i32* %cleanup.dest.slot, align 4
  %102 = bitcast %struct.HuffmanTree* %tree_d to i8*
  call void @llvm.lifetime.end(i64 40, i8* %102) #16
  %103 = bitcast %struct.HuffmanTree* %tree_ll to i8*
  call void @llvm.lifetime.end(i64 40, i8* %103) #16
  %104 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %104) #16
  ret i32 %101

unreachable:                                      ; preds = %cleanup97
  unreachable
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %p, i64 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.ucvector*, align 8
  %size.addr = alloca i64, align 8
  %newsize = alloca i64, align 8
  %data = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %p, %struct.ucvector** %p.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  %0 = load i64, i64* %size.addr, align 8, !tbaa !6
  %1 = load %struct.ucvector*, %struct.ucvector** %p.addr, align 8, !tbaa !2
  %allocsize = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1, i32 0, i32 2
  %2 = load i64, i64* %allocsize, align 8, !tbaa !35
  %cmp = icmp ugt i64 %0, %2
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %entry
  %3 = bitcast i64* %newsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load i64, i64* %size.addr, align 8, !tbaa !6
  %5 = load %struct.ucvector*, %struct.ucvector** %p.addr, align 8, !tbaa !2
  %allocsize1 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i32 0, i32 2
  %6 = load i64, i64* %allocsize1, align 8, !tbaa !35
  %shr = lshr i64 %6, 1
  %add = add i64 %4, %shr
  store i64 %add, i64* %newsize, align 8, !tbaa !6
  %7 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  %8 = load %struct.ucvector*, %struct.ucvector** %p.addr, align 8, !tbaa !2
  %data2 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %8, i32 0, i32 0
  %9 = load i8*, i8** %data2, align 8, !tbaa !32
  %10 = load i64, i64* %newsize, align 8, !tbaa !6
  %call = call i8* @_ZL15lodepng_reallocPvm(i8* %9, i64 %10)
  store i8* %call, i8** %data, align 8, !tbaa !2
  %11 = load i8*, i8** %data, align 8, !tbaa !2
  %tobool = icmp ne i8* %11, null
  br i1 %tobool, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  %12 = load i64, i64* %newsize, align 8, !tbaa !6
  %13 = load %struct.ucvector*, %struct.ucvector** %p.addr, align 8, !tbaa !2
  %allocsize4 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %13, i32 0, i32 2
  store i64 %12, i64* %allocsize4, align 8, !tbaa !35
  %14 = load i8*, i8** %data, align 8, !tbaa !2
  %15 = load %struct.ucvector*, %struct.ucvector** %p.addr, align 8, !tbaa !2
  %data5 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %15, i32 0, i32 0
  store i8* %14, i8** %data5, align 8, !tbaa !32
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then3
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.else
  %16 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #16
  %17 = bitcast i64* %newsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end7

if.end7:                                          ; preds = %cleanup.cont, %entry
  %18 = load i64, i64* %size.addr, align 8, !tbaa !6
  %19 = load %struct.ucvector*, %struct.ucvector** %p.addr, align 8, !tbaa !2
  %size8 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %19, i32 0, i32 1
  store i64 %18, i64* %size8, align 8, !tbaa !34
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end7, %cleanup
  %20 = load i32, i32* %retval, align 4
  ret i32 %20

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree) #4 {
entry:
  %tree.addr = alloca %struct.HuffmanTree*, align 8
  store %struct.HuffmanTree* %tree, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %0 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %codes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i32 0, i32 0
  store i32* null, i32** %codes, align 8, !tbaa !174
  %1 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %1, i32 0, i32 1
  store i32* null, i32** %lengths, align 8, !tbaa !176
  %2 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %2, i32 0, i32 4
  store i8* null, i8** %table_len, align 8, !tbaa !177
  %3 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i32 0, i32 5
  store i16* null, i16** %table_value, align 8, !tbaa !178
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL19getTreeInflateFixedP11HuffmanTreeS0_(%struct.HuffmanTree* %tree_ll, %struct.HuffmanTree* %tree_d) #0 {
entry:
  %retval = alloca i32, align 4
  %tree_ll.addr = alloca %struct.HuffmanTree*, align 8
  %tree_d.addr = alloca %struct.HuffmanTree*, align 8
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.HuffmanTree* %tree_ll, %struct.HuffmanTree** %tree_ll.addr, align 8, !tbaa !2
  store %struct.HuffmanTree* %tree_d, %struct.HuffmanTree** %tree_d.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree_ll.addr, align 8, !tbaa !2
  %call = call i32 @_ZL23generateFixedLitLenTreeP11HuffmanTree(%struct.HuffmanTree* %1)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %2 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %3, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree_d.addr, align 8, !tbaa !2
  %call1 = call i32 @_ZL25generateFixedDistanceTreeP11HuffmanTree(%struct.HuffmanTree* %4)
  store i32 %call1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %5) #16
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL21getTreeInflateDynamicP11HuffmanTreeS0_P16LodePNGBitReader(%struct.HuffmanTree* %tree_ll, %struct.HuffmanTree* %tree_d, %struct.LodePNGBitReader* %reader) #0 {
entry:
  %retval = alloca i32, align 4
  %tree_ll.addr = alloca %struct.HuffmanTree*, align 8
  %tree_d.addr = alloca %struct.HuffmanTree*, align 8
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %error = alloca i32, align 4
  %n = alloca i32, align 4
  %HLIT = alloca i32, align 4
  %HDIST = alloca i32, align 4
  %HCLEN = alloca i32, align 4
  %i = alloca i32, align 4
  %bitlen_ll = alloca i32*, align 8
  %bitlen_d = alloca i32*, align 8
  %bitlen_cl = alloca i32*, align 8
  %tree_cl = alloca %struct.HuffmanTree, align 8
  %cleanup.dest.slot = alloca i32
  %code = alloca i32, align 4
  %replength = alloca i32, align 4
  %value = alloca i32, align 4
  %replength99 = alloca i32, align 4
  %replength125 = alloca i32, align 4
  store %struct.HuffmanTree* %tree_ll, %struct.HuffmanTree** %tree_ll.addr, align 8, !tbaa !2
  store %struct.HuffmanTree* %tree_d, %struct.HuffmanTree** %tree_d.addr, align 8, !tbaa !2
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i32* %HLIT to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = bitcast i32* %HDIST to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = bitcast i32* %HCLEN to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #16
  %5 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = bitcast i32** %bitlen_ll to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  store i32* null, i32** %bitlen_ll, align 8, !tbaa !2
  %7 = bitcast i32** %bitlen_d to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  store i32* null, i32** %bitlen_d, align 8, !tbaa !2
  %8 = bitcast i32** %bitlen_cl to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  store i32* null, i32** %bitlen_cl, align 8, !tbaa !2
  %9 = bitcast %struct.HuffmanTree* %tree_cl to i8*
  call void @llvm.lifetime.start(i64 40, i8* %9) #16
  %10 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call = call i32 @_ZL12ensureBits17P16LodePNGBitReaderm(%struct.LodePNGBitReader* %10, i64 14)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 49, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup174

if.end:                                           ; preds = %entry
  %11 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call1 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %11, i64 5)
  %add = add i32 %call1, 257
  store i32 %add, i32* %HLIT, align 4, !tbaa !8
  %12 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call2 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %12, i64 5)
  %add3 = add i32 %call2, 1
  store i32 %add3, i32* %HDIST, align 4, !tbaa !8
  %13 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call4 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %13, i64 4)
  %add5 = add i32 %call4, 4
  store i32 %add5, i32* %HCLEN, align 4, !tbaa !8
  %call6 = call i8* @_ZL14lodepng_mallocm(i64 76)
  %14 = bitcast i8* %call6 to i32*
  store i32* %14, i32** %bitlen_cl, align 8, !tbaa !2
  %15 = load i32*, i32** %bitlen_cl, align 8, !tbaa !2
  %tobool7 = icmp ne i32* %15, null
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup174

if.end9:                                          ; preds = %if.end
  call void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree_cl)
  br label %while.cond

while.cond:                                       ; preds = %if.end9
  %16 = load i32, i32* %error, align 4, !tbaa !8
  %tobool10 = icmp ne i32 %16, 0
  %lnot = xor i1 %tobool10, true
  br i1 %lnot, label %while.body, label %while.end173

while.body:                                       ; preds = %while.cond
  %17 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %17, i32 0, i32 3
  %18 = load i64, i64* %bp, align 8, !tbaa !14
  %19 = load i32, i32* %HCLEN, align 4, !tbaa !8
  %mul = mul i32 %19, 3
  %conv = zext i32 %mul to i64
  %20 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %20, i32 0, i32 2
  %21 = load i64, i64* %bitsize, align 8, !tbaa !13
  %call11 = call i32 @_ZL13lodepng_gtoflmmm(i64 %18, i64 %conv, i64 %21)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %while.body
  store i32 50, i32* %error, align 4, !tbaa !8
  br label %while.end173

if.end14:                                         ; preds = %while.body
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end14
  %22 = load i32, i32* %i, align 4, !tbaa !8
  %23 = load i32, i32* %HCLEN, align 4, !tbaa !8
  %cmp = icmp ne i32 %22, %23
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call15 = call i32 @_ZL11ensureBits9P16LodePNGBitReaderm(%struct.LodePNGBitReader* %24, i64 3)
  %25 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call16 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %25, i64 3)
  %26 = load i32*, i32** %bitlen_cl, align 8, !tbaa !2
  %27 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %27 to i64
  %arrayidx = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %idxprom
  %28 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %idxprom17 = zext i32 %28 to i64
  %arrayidx18 = getelementptr inbounds i32, i32* %26, i64 %idxprom17
  store i32 %call16, i32* %arrayidx18, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %29, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load i32, i32* %HCLEN, align 4, !tbaa !8
  store i32 %30, i32* %i, align 4, !tbaa !8
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc26, %for.end
  %31 = load i32, i32* %i, align 4, !tbaa !8
  %cmp20 = icmp ne i32 %31, 19
  br i1 %cmp20, label %for.body21, label %for.end28

for.body21:                                       ; preds = %for.cond19
  %32 = load i32*, i32** %bitlen_cl, align 8, !tbaa !2
  %33 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom22 = zext i32 %33 to i64
  %arrayidx23 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %idxprom22
  %34 = load i32, i32* %arrayidx23, align 4, !tbaa !8
  %idxprom24 = zext i32 %34 to i64
  %arrayidx25 = getelementptr inbounds i32, i32* %32, i64 %idxprom24
  store i32 0, i32* %arrayidx25, align 4, !tbaa !8
  br label %for.inc26

for.inc26:                                        ; preds = %for.body21
  %35 = load i32, i32* %i, align 4, !tbaa !8
  %inc27 = add i32 %35, 1
  store i32 %inc27, i32* %i, align 4, !tbaa !8
  br label %for.cond19

for.end28:                                        ; preds = %for.cond19
  %36 = load i32*, i32** %bitlen_cl, align 8, !tbaa !2
  %call29 = call i32 @_ZL27HuffmanTree_makeFromLengthsP11HuffmanTreePKjmj(%struct.HuffmanTree* %tree_cl, i32* %36, i64 19, i32 7)
  store i32 %call29, i32* %error, align 4, !tbaa !8
  %37 = load i32, i32* %error, align 4, !tbaa !8
  %tobool30 = icmp ne i32 %37, 0
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %for.end28
  br label %while.end173

if.end32:                                         ; preds = %for.end28
  %call33 = call i8* @_ZL14lodepng_mallocm(i64 1152)
  %38 = bitcast i8* %call33 to i32*
  store i32* %38, i32** %bitlen_ll, align 8, !tbaa !2
  %call34 = call i8* @_ZL14lodepng_mallocm(i64 128)
  %39 = bitcast i8* %call34 to i32*
  store i32* %39, i32** %bitlen_d, align 8, !tbaa !2
  %40 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %tobool35 = icmp ne i32* %40, null
  br i1 %tobool35, label %lor.lhs.false, label %if.then37

lor.lhs.false:                                    ; preds = %if.end32
  %41 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %tobool36 = icmp ne i32* %41, null
  br i1 %tobool36, label %if.end38, label %if.then37

if.then37:                                        ; preds = %lor.lhs.false, %if.end32
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %while.end173

if.end38:                                         ; preds = %lor.lhs.false
  %42 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %43 = bitcast i32* %42 to i8*
  call void @_ZL14lodepng_memsetPvim(i8* %43, i32 0, i64 1152)
  %44 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %45 = bitcast i32* %44 to i8*
  call void @_ZL14lodepng_memsetPvim(i8* %45, i32 0, i64 128)
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %while.cond39

while.cond39:                                     ; preds = %cleanup.cont160, %if.end38
  %46 = load i32, i32* %i, align 4, !tbaa !8
  %47 = load i32, i32* %HLIT, align 4, !tbaa !8
  %48 = load i32, i32* %HDIST, align 4, !tbaa !8
  %add40 = add i32 %47, %48
  %cmp41 = icmp ult i32 %46, %add40
  br i1 %cmp41, label %while.body42, label %while.end

while.body42:                                     ; preds = %while.cond39
  %49 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %49) #16
  %50 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call43 = call i32 @_ZL12ensureBits25P16LodePNGBitReaderm(%struct.LodePNGBitReader* %50, i64 22)
  %51 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call44 = call i32 @_ZL19huffmanDecodeSymbolP16LodePNGBitReaderPK11HuffmanTree(%struct.LodePNGBitReader* %51, %struct.HuffmanTree* %tree_cl)
  store i32 %call44, i32* %code, align 4, !tbaa !8
  %52 = load i32, i32* %code, align 4, !tbaa !8
  %cmp45 = icmp ule i32 %52, 15
  br i1 %cmp45, label %if.then46, label %if.else55

if.then46:                                        ; preds = %while.body42
  %53 = load i32, i32* %i, align 4, !tbaa !8
  %54 = load i32, i32* %HLIT, align 4, !tbaa !8
  %cmp47 = icmp ult i32 %53, %54
  br i1 %cmp47, label %if.then48, label %if.else

if.then48:                                        ; preds = %if.then46
  %55 = load i32, i32* %code, align 4, !tbaa !8
  %56 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %57 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom49 = zext i32 %57 to i64
  %arrayidx50 = getelementptr inbounds i32, i32* %56, i64 %idxprom49
  store i32 %55, i32* %arrayidx50, align 4, !tbaa !8
  br label %if.end53

if.else:                                          ; preds = %if.then46
  %58 = load i32, i32* %code, align 4, !tbaa !8
  %59 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %60 = load i32, i32* %i, align 4, !tbaa !8
  %61 = load i32, i32* %HLIT, align 4, !tbaa !8
  %sub = sub i32 %60, %61
  %idxprom51 = zext i32 %sub to i64
  %arrayidx52 = getelementptr inbounds i32, i32* %59, i64 %idxprom51
  store i32 %58, i32* %arrayidx52, align 4, !tbaa !8
  br label %if.end53

if.end53:                                         ; preds = %if.else, %if.then48
  %62 = load i32, i32* %i, align 4, !tbaa !8
  %inc54 = add i32 %62, 1
  store i32 %inc54, i32* %i, align 4, !tbaa !8
  br label %if.end152

if.else55:                                        ; preds = %while.body42
  %63 = load i32, i32* %code, align 4, !tbaa !8
  %cmp56 = icmp eq i32 %63, 16
  br i1 %cmp56, label %if.then57, label %if.else96

if.then57:                                        ; preds = %if.else55
  %64 = bitcast i32* %replength to i8*
  call void @llvm.lifetime.start(i64 4, i8* %64) #16
  store i32 3, i32* %replength, align 4, !tbaa !8
  %65 = bitcast i32* %value to i8*
  call void @llvm.lifetime.start(i64 4, i8* %65) #16
  %66 = load i32, i32* %i, align 4, !tbaa !8
  %cmp58 = icmp eq i32 %66, 0
  br i1 %cmp58, label %if.then59, label %if.end60

if.then59:                                        ; preds = %if.then57
  store i32 54, i32* %error, align 4, !tbaa !8
  store i32 11, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end60:                                         ; preds = %if.then57
  %67 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call61 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %67, i64 2)
  %68 = load i32, i32* %replength, align 4, !tbaa !8
  %add62 = add i32 %68, %call61
  store i32 %add62, i32* %replength, align 4, !tbaa !8
  %69 = load i32, i32* %i, align 4, !tbaa !8
  %70 = load i32, i32* %HLIT, align 4, !tbaa !8
  %add63 = add i32 %70, 1
  %cmp64 = icmp ult i32 %69, %add63
  br i1 %cmp64, label %if.then65, label %if.else69

if.then65:                                        ; preds = %if.end60
  %71 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %72 = load i32, i32* %i, align 4, !tbaa !8
  %sub66 = sub i32 %72, 1
  %idxprom67 = zext i32 %sub66 to i64
  %arrayidx68 = getelementptr inbounds i32, i32* %71, i64 %idxprom67
  %73 = load i32, i32* %arrayidx68, align 4, !tbaa !8
  store i32 %73, i32* %value, align 4, !tbaa !8
  br label %if.end74

if.else69:                                        ; preds = %if.end60
  %74 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %75 = load i32, i32* %i, align 4, !tbaa !8
  %76 = load i32, i32* %HLIT, align 4, !tbaa !8
  %sub70 = sub i32 %75, %76
  %sub71 = sub i32 %sub70, 1
  %idxprom72 = zext i32 %sub71 to i64
  %arrayidx73 = getelementptr inbounds i32, i32* %74, i64 %idxprom72
  %77 = load i32, i32* %arrayidx73, align 4, !tbaa !8
  store i32 %77, i32* %value, align 4, !tbaa !8
  br label %if.end74

if.end74:                                         ; preds = %if.else69, %if.then65
  store i32 0, i32* %n, align 4, !tbaa !8
  br label %for.cond75

for.cond75:                                       ; preds = %for.inc92, %if.end74
  %78 = load i32, i32* %n, align 4, !tbaa !8
  %79 = load i32, i32* %replength, align 4, !tbaa !8
  %cmp76 = icmp ult i32 %78, %79
  br i1 %cmp76, label %for.body77, label %for.end94

for.body77:                                       ; preds = %for.cond75
  %80 = load i32, i32* %i, align 4, !tbaa !8
  %81 = load i32, i32* %HLIT, align 4, !tbaa !8
  %82 = load i32, i32* %HDIST, align 4, !tbaa !8
  %add78 = add i32 %81, %82
  %cmp79 = icmp uge i32 %80, %add78
  br i1 %cmp79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %for.body77
  store i32 13, i32* %error, align 4, !tbaa !8
  br label %for.end94

if.end81:                                         ; preds = %for.body77
  %83 = load i32, i32* %i, align 4, !tbaa !8
  %84 = load i32, i32* %HLIT, align 4, !tbaa !8
  %cmp82 = icmp ult i32 %83, %84
  br i1 %cmp82, label %if.then83, label %if.else86

if.then83:                                        ; preds = %if.end81
  %85 = load i32, i32* %value, align 4, !tbaa !8
  %86 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %87 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom84 = zext i32 %87 to i64
  %arrayidx85 = getelementptr inbounds i32, i32* %86, i64 %idxprom84
  store i32 %85, i32* %arrayidx85, align 4, !tbaa !8
  br label %if.end90

if.else86:                                        ; preds = %if.end81
  %88 = load i32, i32* %value, align 4, !tbaa !8
  %89 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %90 = load i32, i32* %i, align 4, !tbaa !8
  %91 = load i32, i32* %HLIT, align 4, !tbaa !8
  %sub87 = sub i32 %90, %91
  %idxprom88 = zext i32 %sub87 to i64
  %arrayidx89 = getelementptr inbounds i32, i32* %89, i64 %idxprom88
  store i32 %88, i32* %arrayidx89, align 4, !tbaa !8
  br label %if.end90

if.end90:                                         ; preds = %if.else86, %if.then83
  %92 = load i32, i32* %i, align 4, !tbaa !8
  %inc91 = add i32 %92, 1
  store i32 %inc91, i32* %i, align 4, !tbaa !8
  br label %for.inc92

for.inc92:                                        ; preds = %if.end90
  %93 = load i32, i32* %n, align 4, !tbaa !8
  %inc93 = add i32 %93, 1
  store i32 %inc93, i32* %n, align 4, !tbaa !8
  br label %for.cond75

for.end94:                                        ; preds = %if.then80, %for.cond75
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end94, %if.then59
  %94 = bitcast i32* %value to i8*
  call void @llvm.lifetime.end(i64 4, i8* %94) #16
  %95 = bitcast i32* %replength to i8*
  call void @llvm.lifetime.end(i64 4, i8* %95) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup158 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end151

if.else96:                                        ; preds = %if.else55
  %96 = load i32, i32* %code, align 4, !tbaa !8
  %cmp97 = icmp eq i32 %96, 17
  br i1 %cmp97, label %if.then98, label %if.else122

if.then98:                                        ; preds = %if.else96
  %97 = bitcast i32* %replength99 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %97) #16
  store i32 3, i32* %replength99, align 4, !tbaa !8
  %98 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call100 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %98, i64 3)
  %99 = load i32, i32* %replength99, align 4, !tbaa !8
  %add101 = add i32 %99, %call100
  store i32 %add101, i32* %replength99, align 4, !tbaa !8
  store i32 0, i32* %n, align 4, !tbaa !8
  br label %for.cond102

for.cond102:                                      ; preds = %for.inc119, %if.then98
  %100 = load i32, i32* %n, align 4, !tbaa !8
  %101 = load i32, i32* %replength99, align 4, !tbaa !8
  %cmp103 = icmp ult i32 %100, %101
  br i1 %cmp103, label %for.body104, label %for.end121

for.body104:                                      ; preds = %for.cond102
  %102 = load i32, i32* %i, align 4, !tbaa !8
  %103 = load i32, i32* %HLIT, align 4, !tbaa !8
  %104 = load i32, i32* %HDIST, align 4, !tbaa !8
  %add105 = add i32 %103, %104
  %cmp106 = icmp uge i32 %102, %add105
  br i1 %cmp106, label %if.then107, label %if.end108

if.then107:                                       ; preds = %for.body104
  store i32 14, i32* %error, align 4, !tbaa !8
  br label %for.end121

if.end108:                                        ; preds = %for.body104
  %105 = load i32, i32* %i, align 4, !tbaa !8
  %106 = load i32, i32* %HLIT, align 4, !tbaa !8
  %cmp109 = icmp ult i32 %105, %106
  br i1 %cmp109, label %if.then110, label %if.else113

if.then110:                                       ; preds = %if.end108
  %107 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %108 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom111 = zext i32 %108 to i64
  %arrayidx112 = getelementptr inbounds i32, i32* %107, i64 %idxprom111
  store i32 0, i32* %arrayidx112, align 4, !tbaa !8
  br label %if.end117

if.else113:                                       ; preds = %if.end108
  %109 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %110 = load i32, i32* %i, align 4, !tbaa !8
  %111 = load i32, i32* %HLIT, align 4, !tbaa !8
  %sub114 = sub i32 %110, %111
  %idxprom115 = zext i32 %sub114 to i64
  %arrayidx116 = getelementptr inbounds i32, i32* %109, i64 %idxprom115
  store i32 0, i32* %arrayidx116, align 4, !tbaa !8
  br label %if.end117

if.end117:                                        ; preds = %if.else113, %if.then110
  %112 = load i32, i32* %i, align 4, !tbaa !8
  %inc118 = add i32 %112, 1
  store i32 %inc118, i32* %i, align 4, !tbaa !8
  br label %for.inc119

for.inc119:                                       ; preds = %if.end117
  %113 = load i32, i32* %n, align 4, !tbaa !8
  %inc120 = add i32 %113, 1
  store i32 %inc120, i32* %n, align 4, !tbaa !8
  br label %for.cond102

for.end121:                                       ; preds = %if.then107, %for.cond102
  %114 = bitcast i32* %replength99 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %114) #16
  br label %if.end150

if.else122:                                       ; preds = %if.else96
  %115 = load i32, i32* %code, align 4, !tbaa !8
  %cmp123 = icmp eq i32 %115, 18
  br i1 %cmp123, label %if.then124, label %if.else148

if.then124:                                       ; preds = %if.else122
  %116 = bitcast i32* %replength125 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %116) #16
  store i32 11, i32* %replength125, align 4, !tbaa !8
  %117 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call126 = call i32 @_ZL8readBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %117, i64 7)
  %118 = load i32, i32* %replength125, align 4, !tbaa !8
  %add127 = add i32 %118, %call126
  store i32 %add127, i32* %replength125, align 4, !tbaa !8
  store i32 0, i32* %n, align 4, !tbaa !8
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc145, %if.then124
  %119 = load i32, i32* %n, align 4, !tbaa !8
  %120 = load i32, i32* %replength125, align 4, !tbaa !8
  %cmp129 = icmp ult i32 %119, %120
  br i1 %cmp129, label %for.body130, label %for.end147

for.body130:                                      ; preds = %for.cond128
  %121 = load i32, i32* %i, align 4, !tbaa !8
  %122 = load i32, i32* %HLIT, align 4, !tbaa !8
  %123 = load i32, i32* %HDIST, align 4, !tbaa !8
  %add131 = add i32 %122, %123
  %cmp132 = icmp uge i32 %121, %add131
  br i1 %cmp132, label %if.then133, label %if.end134

if.then133:                                       ; preds = %for.body130
  store i32 15, i32* %error, align 4, !tbaa !8
  br label %for.end147

if.end134:                                        ; preds = %for.body130
  %124 = load i32, i32* %i, align 4, !tbaa !8
  %125 = load i32, i32* %HLIT, align 4, !tbaa !8
  %cmp135 = icmp ult i32 %124, %125
  br i1 %cmp135, label %if.then136, label %if.else139

if.then136:                                       ; preds = %if.end134
  %126 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %127 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom137 = zext i32 %127 to i64
  %arrayidx138 = getelementptr inbounds i32, i32* %126, i64 %idxprom137
  store i32 0, i32* %arrayidx138, align 4, !tbaa !8
  br label %if.end143

if.else139:                                       ; preds = %if.end134
  %128 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %129 = load i32, i32* %i, align 4, !tbaa !8
  %130 = load i32, i32* %HLIT, align 4, !tbaa !8
  %sub140 = sub i32 %129, %130
  %idxprom141 = zext i32 %sub140 to i64
  %arrayidx142 = getelementptr inbounds i32, i32* %128, i64 %idxprom141
  store i32 0, i32* %arrayidx142, align 4, !tbaa !8
  br label %if.end143

if.end143:                                        ; preds = %if.else139, %if.then136
  %131 = load i32, i32* %i, align 4, !tbaa !8
  %inc144 = add i32 %131, 1
  store i32 %inc144, i32* %i, align 4, !tbaa !8
  br label %for.inc145

for.inc145:                                       ; preds = %if.end143
  %132 = load i32, i32* %n, align 4, !tbaa !8
  %inc146 = add i32 %132, 1
  store i32 %inc146, i32* %n, align 4, !tbaa !8
  br label %for.cond128

for.end147:                                       ; preds = %if.then133, %for.cond128
  %133 = bitcast i32* %replength125 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %133) #16
  br label %if.end149

if.else148:                                       ; preds = %if.else122
  store i32 16, i32* %error, align 4, !tbaa !8
  store i32 11, i32* %cleanup.dest.slot, align 4
  br label %cleanup158

if.end149:                                        ; preds = %for.end147
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %for.end121
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %cleanup.cont
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %if.end53
  %134 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bp153 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %134, i32 0, i32 3
  %135 = load i64, i64* %bp153, align 8, !tbaa !14
  %136 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %bitsize154 = getelementptr inbounds %struct.LodePNGBitReader, %struct.LodePNGBitReader* %136, i32 0, i32 2
  %137 = load i64, i64* %bitsize154, align 8, !tbaa !13
  %cmp155 = icmp ugt i64 %135, %137
  br i1 %cmp155, label %if.then156, label %if.end157

if.then156:                                       ; preds = %if.end152
  store i32 50, i32* %error, align 4, !tbaa !8
  store i32 11, i32* %cleanup.dest.slot, align 4
  br label %cleanup158

if.end157:                                        ; preds = %if.end152
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup158

cleanup158:                                       ; preds = %if.end157, %if.then156, %if.else148, %cleanup
  %138 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %138) #16
  %cleanup.dest159 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest159, label %unreachable [
    i32 0, label %cleanup.cont160
    i32 11, label %while.end
  ]

cleanup.cont160:                                  ; preds = %cleanup158
  br label %while.cond39

while.end:                                        ; preds = %cleanup158, %while.cond39
  %139 = load i32, i32* %error, align 4, !tbaa !8
  %tobool161 = icmp ne i32 %139, 0
  br i1 %tobool161, label %if.then162, label %if.end163

if.then162:                                       ; preds = %while.end
  br label %while.end173

if.end163:                                        ; preds = %while.end
  %140 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %arrayidx164 = getelementptr inbounds i32, i32* %140, i64 256
  %141 = load i32, i32* %arrayidx164, align 4, !tbaa !8
  %cmp165 = icmp eq i32 %141, 0
  br i1 %cmp165, label %if.then166, label %if.end167

if.then166:                                       ; preds = %if.end163
  store i32 64, i32* %error, align 4, !tbaa !8
  br label %while.end173

if.end167:                                        ; preds = %if.end163
  %142 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree_ll.addr, align 8, !tbaa !2
  %143 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %call168 = call i32 @_ZL27HuffmanTree_makeFromLengthsP11HuffmanTreePKjmj(%struct.HuffmanTree* %142, i32* %143, i64 288, i32 15)
  store i32 %call168, i32* %error, align 4, !tbaa !8
  %144 = load i32, i32* %error, align 4, !tbaa !8
  %tobool169 = icmp ne i32 %144, 0
  br i1 %tobool169, label %if.then170, label %if.end171

if.then170:                                       ; preds = %if.end167
  br label %while.end173

if.end171:                                        ; preds = %if.end167
  %145 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree_d.addr, align 8, !tbaa !2
  %146 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %call172 = call i32 @_ZL27HuffmanTree_makeFromLengthsP11HuffmanTreePKjmj(%struct.HuffmanTree* %145, i32* %146, i64 32, i32 15)
  store i32 %call172, i32* %error, align 4, !tbaa !8
  br label %while.end173

while.end173:                                     ; preds = %if.end171, %if.then170, %if.then166, %if.then162, %if.then37, %if.then31, %if.then13, %while.cond
  %147 = load i32*, i32** %bitlen_cl, align 8, !tbaa !2
  %148 = bitcast i32* %147 to i8*
  call void @_ZL12lodepng_freePv(i8* %148)
  %149 = load i32*, i32** %bitlen_ll, align 8, !tbaa !2
  %150 = bitcast i32* %149 to i8*
  call void @_ZL12lodepng_freePv(i8* %150)
  %151 = load i32*, i32** %bitlen_d, align 8, !tbaa !2
  %152 = bitcast i32* %151 to i8*
  call void @_ZL12lodepng_freePv(i8* %152)
  call void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree_cl)
  %153 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %153, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup174

cleanup174:                                       ; preds = %while.end173, %if.then8, %if.then
  %154 = bitcast %struct.HuffmanTree* %tree_cl to i8*
  call void @llvm.lifetime.end(i64 40, i8* %154) #16
  %155 = bitcast i32** %bitlen_cl to i8*
  call void @llvm.lifetime.end(i64 8, i8* %155) #16
  %156 = bitcast i32** %bitlen_d to i8*
  call void @llvm.lifetime.end(i64 8, i8* %156) #16
  %157 = bitcast i32** %bitlen_ll to i8*
  call void @llvm.lifetime.end(i64 8, i8* %157) #16
  %158 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %158) #16
  %159 = bitcast i32* %HCLEN to i8*
  call void @llvm.lifetime.end(i64 4, i8* %159) #16
  %160 = bitcast i32* %HDIST to i8*
  call void @llvm.lifetime.end(i64 4, i8* %160) #16
  %161 = bitcast i32* %HLIT to i8*
  call void @llvm.lifetime.end(i64 4, i8* %161) #16
  %162 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end(i64 4, i8* %162) #16
  %163 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %163) #16
  %164 = load i32, i32* %retval, align 4
  ret i32 %164

unreachable:                                      ; preds = %cleanup158
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL19huffmanDecodeSymbolP16LodePNGBitReaderPK11HuffmanTree(%struct.LodePNGBitReader* %reader, %struct.HuffmanTree* %codetree) #4 {
entry:
  %retval = alloca i32, align 4
  %reader.addr = alloca %struct.LodePNGBitReader*, align 8
  %codetree.addr = alloca %struct.HuffmanTree*, align 8
  %code = alloca i16, align 2
  %l = alloca i16, align 2
  %value = alloca i16, align 2
  %cleanup.dest.slot = alloca i32
  %index2 = alloca i32, align 4
  store %struct.LodePNGBitReader* %reader, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  store %struct.HuffmanTree* %codetree, %struct.HuffmanTree** %codetree.addr, align 8, !tbaa !2
  %0 = bitcast i16* %code to i8*
  call void @llvm.lifetime.start(i64 2, i8* %0) #16
  %1 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %call = call i32 @_ZL8peekBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %1, i64 9)
  %conv = trunc i32 %call to i16
  store i16 %conv, i16* %code, align 2, !tbaa !89
  %2 = bitcast i16* %l to i8*
  call void @llvm.lifetime.start(i64 2, i8* %2) #16
  %3 = load %struct.HuffmanTree*, %struct.HuffmanTree** %codetree.addr, align 8, !tbaa !2
  %table_len = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i32 0, i32 4
  %4 = load i8*, i8** %table_len, align 8, !tbaa !177
  %5 = load i16, i16* %code, align 2, !tbaa !89
  %idxprom = zext i16 %5 to i64
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv1 = zext i8 %6 to i16
  store i16 %conv1, i16* %l, align 2, !tbaa !89
  %7 = bitcast i16* %value to i8*
  call void @llvm.lifetime.start(i64 2, i8* %7) #16
  %8 = load %struct.HuffmanTree*, %struct.HuffmanTree** %codetree.addr, align 8, !tbaa !2
  %table_value = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %8, i32 0, i32 5
  %9 = load i16*, i16** %table_value, align 8, !tbaa !178
  %10 = load i16, i16* %code, align 2, !tbaa !89
  %idxprom2 = zext i16 %10 to i64
  %arrayidx3 = getelementptr inbounds i16, i16* %9, i64 %idxprom2
  %11 = load i16, i16* %arrayidx3, align 2, !tbaa !89
  store i16 %11, i16* %value, align 2, !tbaa !89
  %12 = load i16, i16* %l, align 2, !tbaa !89
  %conv4 = zext i16 %12 to i32
  %cmp = icmp ule i32 %conv4, 9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %13 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %14 = load i16, i16* %l, align 2, !tbaa !89
  %conv5 = zext i16 %14 to i64
  call void @_ZL11advanceBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %13, i64 %conv5)
  %15 = load i16, i16* %value, align 2, !tbaa !89
  %conv6 = zext i16 %15 to i32
  store i32 %conv6, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %16 = bitcast i32* %index2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #16
  %17 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  call void @_ZL11advanceBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %17, i64 9)
  %18 = load i16, i16* %value, align 2, !tbaa !89
  %conv7 = zext i16 %18 to i32
  %19 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %20 = load i16, i16* %l, align 2, !tbaa !89
  %conv8 = zext i16 %20 to i32
  %sub = sub i32 %conv8, 9
  %conv9 = zext i32 %sub to i64
  %call10 = call i32 @_ZL8peekBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %19, i64 %conv9)
  %add = add i32 %conv7, %call10
  store i32 %add, i32* %index2, align 4, !tbaa !8
  %21 = load %struct.LodePNGBitReader*, %struct.LodePNGBitReader** %reader.addr, align 8, !tbaa !2
  %22 = load %struct.HuffmanTree*, %struct.HuffmanTree** %codetree.addr, align 8, !tbaa !2
  %table_len11 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %22, i32 0, i32 4
  %23 = load i8*, i8** %table_len11, align 8, !tbaa !177
  %24 = load i32, i32* %index2, align 4, !tbaa !8
  %idxprom12 = zext i32 %24 to i64
  %arrayidx13 = getelementptr inbounds i8, i8* %23, i64 %idxprom12
  %25 = load i8, i8* %arrayidx13, align 1, !tbaa !16
  %conv14 = zext i8 %25 to i32
  %sub15 = sub i32 %conv14, 9
  %conv16 = zext i32 %sub15 to i64
  call void @_ZL11advanceBitsP16LodePNGBitReaderm(%struct.LodePNGBitReader* %21, i64 %conv16)
  %26 = load %struct.HuffmanTree*, %struct.HuffmanTree** %codetree.addr, align 8, !tbaa !2
  %table_value17 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %26, i32 0, i32 5
  %27 = load i16*, i16** %table_value17, align 8, !tbaa !178
  %28 = load i32, i32* %index2, align 4, !tbaa !8
  %idxprom18 = zext i32 %28 to i64
  %arrayidx19 = getelementptr inbounds i16, i16* %27, i64 %idxprom18
  %29 = load i16, i16* %arrayidx19, align 2, !tbaa !89
  %conv20 = zext i16 %29 to i32
  store i32 %conv20, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  %30 = bitcast i32* %index2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %30) #16
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %31 = bitcast i16* %value to i8*
  call void @llvm.lifetime.end(i64 2, i8* %31) #16
  %32 = bitcast i16* %l to i8*
  call void @llvm.lifetime.end(i64 2, i8* %32) #16
  %33 = bitcast i16* %code to i8*
  call void @llvm.lifetime.end(i64 2, i8* %33) #16
  %34 = load i32, i32* %retval, align 4
  ret i32 %34
}

; Function Attrs: ssp uwtable
define internal void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree) #0 {
entry:
  %tree.addr = alloca %struct.HuffmanTree*, align 8
  store %struct.HuffmanTree* %tree, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %0 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %codes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %0, i32 0, i32 0
  %1 = load i32*, i32** %codes, align 8, !tbaa !174
  %2 = bitcast i32* %1 to i8*
  call void @_ZL12lodepng_freePv(i8* %2)
  %3 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i32 0, i32 1
  %4 = load i32*, i32** %lengths, align 8, !tbaa !176
  %5 = bitcast i32* %4 to i8*
  call void @_ZL12lodepng_freePv(i8* %5)
  %6 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %6, i32 0, i32 4
  %7 = load i8*, i8** %table_len, align 8, !tbaa !177
  call void @_ZL12lodepng_freePv(i8* %7)
  %8 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %8, i32 0, i32 5
  %9 = load i16*, i16** %table_value, align 8, !tbaa !178
  %10 = bitcast i16* %9 to i8*
  call void @_ZL12lodepng_freePv(i8* %10)
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL23generateFixedLitLenTreeP11HuffmanTree(%struct.HuffmanTree* %tree) #0 {
entry:
  %retval = alloca i32, align 4
  %tree.addr = alloca %struct.HuffmanTree*, align 8
  %i = alloca i32, align 4
  %error = alloca i32, align 4
  %bitlen = alloca i32*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.HuffmanTree* %tree, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %2 = bitcast i32** %bitlen to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %call = call i8* @_ZL14lodepng_mallocm(i64 1152)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %bitlen, align 8, !tbaa !2
  %4 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %tobool = icmp ne i32* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ule i32 %5, 143
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %7 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %7 to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 8, i32* %arrayidx, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 144, i32* %i, align 4, !tbaa !8
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc6, %for.end
  %9 = load i32, i32* %i, align 4, !tbaa !8
  %cmp2 = icmp ule i32 %9, 255
  br i1 %cmp2, label %for.body3, label %for.end8

for.body3:                                        ; preds = %for.cond1
  %10 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %11 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom4 = zext i32 %11 to i64
  %arrayidx5 = getelementptr inbounds i32, i32* %10, i64 %idxprom4
  store i32 9, i32* %arrayidx5, align 4, !tbaa !8
  br label %for.inc6

for.inc6:                                         ; preds = %for.body3
  %12 = load i32, i32* %i, align 4, !tbaa !8
  %inc7 = add i32 %12, 1
  store i32 %inc7, i32* %i, align 4, !tbaa !8
  br label %for.cond1

for.end8:                                         ; preds = %for.cond1
  store i32 256, i32* %i, align 4, !tbaa !8
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc14, %for.end8
  %13 = load i32, i32* %i, align 4, !tbaa !8
  %cmp10 = icmp ule i32 %13, 279
  br i1 %cmp10, label %for.body11, label %for.end16

for.body11:                                       ; preds = %for.cond9
  %14 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %15 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom12 = zext i32 %15 to i64
  %arrayidx13 = getelementptr inbounds i32, i32* %14, i64 %idxprom12
  store i32 7, i32* %arrayidx13, align 4, !tbaa !8
  br label %for.inc14

for.inc14:                                        ; preds = %for.body11
  %16 = load i32, i32* %i, align 4, !tbaa !8
  %inc15 = add i32 %16, 1
  store i32 %inc15, i32* %i, align 4, !tbaa !8
  br label %for.cond9

for.end16:                                        ; preds = %for.cond9
  store i32 280, i32* %i, align 4, !tbaa !8
  br label %for.cond17

for.cond17:                                       ; preds = %for.inc22, %for.end16
  %17 = load i32, i32* %i, align 4, !tbaa !8
  %cmp18 = icmp ule i32 %17, 287
  br i1 %cmp18, label %for.body19, label %for.end24

for.body19:                                       ; preds = %for.cond17
  %18 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %19 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom20 = zext i32 %19 to i64
  %arrayidx21 = getelementptr inbounds i32, i32* %18, i64 %idxprom20
  store i32 8, i32* %arrayidx21, align 4, !tbaa !8
  br label %for.inc22

for.inc22:                                        ; preds = %for.body19
  %20 = load i32, i32* %i, align 4, !tbaa !8
  %inc23 = add i32 %20, 1
  store i32 %inc23, i32* %i, align 4, !tbaa !8
  br label %for.cond17

for.end24:                                        ; preds = %for.cond17
  %21 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %22 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %call25 = call i32 @_ZL27HuffmanTree_makeFromLengthsP11HuffmanTreePKjmj(%struct.HuffmanTree* %21, i32* %22, i64 288, i32 15)
  store i32 %call25, i32* %error, align 4, !tbaa !8
  %23 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %24 = bitcast i32* %23 to i8*
  call void @_ZL12lodepng_freePv(i8* %24)
  %25 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %25, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end24, %if.then
  %26 = bitcast i32** %bitlen to i8*
  call void @llvm.lifetime.end(i64 8, i8* %26) #16
  %27 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %27) #16
  %28 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %28) #16
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL25generateFixedDistanceTreeP11HuffmanTree(%struct.HuffmanTree* %tree) #0 {
entry:
  %retval = alloca i32, align 4
  %tree.addr = alloca %struct.HuffmanTree*, align 8
  %i = alloca i32, align 4
  %error = alloca i32, align 4
  %bitlen = alloca i32*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.HuffmanTree* %tree, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %2 = bitcast i32** %bitlen to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %call = call i8* @_ZL14lodepng_mallocm(i64 128)
  %3 = bitcast i8* %call to i32*
  store i32* %3, i32** %bitlen, align 8, !tbaa !2
  %4 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %tobool = icmp ne i32* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ne i32 %5, 32
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %7 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %7 to i64
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom
  store i32 5, i32* %arrayidx, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %10 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %call1 = call i32 @_ZL27HuffmanTree_makeFromLengthsP11HuffmanTreePKjmj(%struct.HuffmanTree* %9, i32* %10, i64 32, i32 15)
  store i32 %call1, i32* %error, align 4, !tbaa !8
  %11 = load i32*, i32** %bitlen, align 8, !tbaa !2
  %12 = bitcast i32* %11 to i8*
  call void @_ZL12lodepng_freePv(i8* %12)
  %13 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %13, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %14 = bitcast i32** %bitlen to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #16
  %15 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %15) #16
  %16 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %16) #16
  %17 = load i32, i32* %retval, align 4
  ret i32 %17
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL27HuffmanTree_makeFromLengthsP11HuffmanTreePKjmj(%struct.HuffmanTree* %tree, i32* %bitlen, i64 %numcodes, i32 %maxbitlen) #0 {
entry:
  %retval = alloca i32, align 4
  %tree.addr = alloca %struct.HuffmanTree*, align 8
  %bitlen.addr = alloca i32*, align 8
  %numcodes.addr = alloca i64, align 8
  %maxbitlen.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.HuffmanTree* %tree, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  store i32* %bitlen, i32** %bitlen.addr, align 8, !tbaa !2
  store i64 %numcodes, i64* %numcodes.addr, align 8, !tbaa !6
  store i32 %maxbitlen, i32* %maxbitlen.addr, align 4, !tbaa !8
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %mul = mul i64 %1, 4
  %call = call i8* @_ZL14lodepng_mallocm(i64 %mul)
  %2 = bitcast i8* %call to i32*
  %3 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %3, i32 0, i32 1
  store i32* %2, i32** %lengths, align 8, !tbaa !176
  %4 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths1 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %4, i32 0, i32 1
  %5 = load i32*, i32** %lengths1, align 8, !tbaa !176
  %tobool = icmp ne i32* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !tbaa !8
  %conv = zext i32 %6 to i64
  %7 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %conv, %7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32*, i32** %bitlen.addr, align 8, !tbaa !2
  %9 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 %idxprom
  %10 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %11 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths2 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %11, i32 0, i32 1
  %12 = load i32*, i32** %lengths2, align 8, !tbaa !176
  %13 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom3 = zext i32 %13 to i64
  %arrayidx4 = getelementptr inbounds i32, i32* %12, i64 %idxprom3
  store i32 %10, i32* %arrayidx4, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %14, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %15 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %conv5 = trunc i64 %15 to i32
  %16 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %numcodes6 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %16, i32 0, i32 3
  store i32 %conv5, i32* %numcodes6, align 4, !tbaa !179
  %17 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %18 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %maxbitlen7 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %18, i32 0, i32 2
  store i32 %17, i32* %maxbitlen7, align 8, !tbaa !180
  %19 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %call8 = call i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* %19)
  store i32 %call8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %20 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %20) #16
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* %tree) #0 {
entry:
  %tree.addr = alloca %struct.HuffmanTree*, align 8
  %blcount = alloca i32*, align 8
  %nextcode = alloca i32*, align 8
  %error = alloca i32, align 4
  %bits = alloca i32, align 4
  %n = alloca i32, align 4
  store %struct.HuffmanTree* %tree, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %0 = bitcast i32** %blcount to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i32** %nextcode to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %3 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #16
  %5 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %numcodes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %5, i32 0, i32 3
  %6 = load i32, i32* %numcodes, align 4, !tbaa !179
  %conv = zext i32 %6 to i64
  %mul = mul i64 %conv, 4
  %call = call i8* @_ZL14lodepng_mallocm(i64 %mul)
  %7 = bitcast i8* %call to i32*
  %8 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %codes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %8, i32 0, i32 0
  store i32* %7, i32** %codes, align 8, !tbaa !174
  %9 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %maxbitlen = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %9, i32 0, i32 2
  %10 = load i32, i32* %maxbitlen, align 8, !tbaa !180
  %add = add i32 %10, 1
  %conv1 = zext i32 %add to i64
  %mul2 = mul i64 %conv1, 4
  %call3 = call i8* @_ZL14lodepng_mallocm(i64 %mul2)
  %11 = bitcast i8* %call3 to i32*
  store i32* %11, i32** %blcount, align 8, !tbaa !2
  %12 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %maxbitlen4 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %12, i32 0, i32 2
  %13 = load i32, i32* %maxbitlen4, align 8, !tbaa !180
  %add5 = add i32 %13, 1
  %conv6 = zext i32 %add5 to i64
  %mul7 = mul i64 %conv6, 4
  %call8 = call i8* @_ZL14lodepng_mallocm(i64 %mul7)
  %14 = bitcast i8* %call8 to i32*
  store i32* %14, i32** %nextcode, align 8, !tbaa !2
  %15 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %codes9 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %15, i32 0, i32 0
  %16 = load i32*, i32** %codes9, align 8, !tbaa !174
  %tobool = icmp ne i32* %16, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %17 = load i32*, i32** %blcount, align 8, !tbaa !2
  %tobool10 = icmp ne i32* %17, null
  br i1 %tobool10, label %lor.lhs.false11, label %if.then

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %18 = load i32*, i32** %nextcode, align 8, !tbaa !2
  %tobool12 = icmp ne i32* %18, null
  br i1 %tobool12, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false, %entry
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false11
  %19 = load i32, i32* %error, align 4, !tbaa !8
  %tobool13 = icmp ne i32 %19, 0
  br i1 %tobool13, label %if.end76, label %if.then14

if.then14:                                        ; preds = %if.end
  store i32 0, i32* %n, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then14
  %20 = load i32, i32* %n, align 4, !tbaa !8
  %21 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %maxbitlen15 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %21, i32 0, i32 2
  %22 = load i32, i32* %maxbitlen15, align 8, !tbaa !180
  %add16 = add i32 %22, 1
  %cmp = icmp ne i32 %20, %add16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i32*, i32** %nextcode, align 8, !tbaa !2
  %24 = load i32, i32* %n, align 4, !tbaa !8
  %idxprom = zext i32 %24 to i64
  %arrayidx = getelementptr inbounds i32, i32* %23, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4, !tbaa !8
  %25 = load i32*, i32** %blcount, align 8, !tbaa !2
  %26 = load i32, i32* %n, align 4, !tbaa !8
  %idxprom17 = zext i32 %26 to i64
  %arrayidx18 = getelementptr inbounds i32, i32* %25, i64 %idxprom17
  store i32 0, i32* %arrayidx18, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %n, align 4, !tbaa !8
  %inc = add i32 %27, 1
  store i32 %inc, i32* %n, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %bits, align 4, !tbaa !8
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc28, %for.end
  %28 = load i32, i32* %bits, align 4, !tbaa !8
  %29 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %numcodes20 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %29, i32 0, i32 3
  %30 = load i32, i32* %numcodes20, align 4, !tbaa !179
  %cmp21 = icmp ne i32 %28, %30
  br i1 %cmp21, label %for.body22, label %for.end30

for.body22:                                       ; preds = %for.cond19
  %31 = load i32*, i32** %blcount, align 8, !tbaa !2
  %32 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %32, i32 0, i32 1
  %33 = load i32*, i32** %lengths, align 8, !tbaa !176
  %34 = load i32, i32* %bits, align 4, !tbaa !8
  %idxprom23 = zext i32 %34 to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %33, i64 %idxprom23
  %35 = load i32, i32* %arrayidx24, align 4, !tbaa !8
  %idxprom25 = zext i32 %35 to i64
  %arrayidx26 = getelementptr inbounds i32, i32* %31, i64 %idxprom25
  %36 = load i32, i32* %arrayidx26, align 4, !tbaa !8
  %inc27 = add i32 %36, 1
  store i32 %inc27, i32* %arrayidx26, align 4, !tbaa !8
  br label %for.inc28

for.inc28:                                        ; preds = %for.body22
  %37 = load i32, i32* %bits, align 4, !tbaa !8
  %inc29 = add i32 %37, 1
  store i32 %inc29, i32* %bits, align 4, !tbaa !8
  br label %for.cond19

for.end30:                                        ; preds = %for.cond19
  store i32 1, i32* %bits, align 4, !tbaa !8
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc43, %for.end30
  %38 = load i32, i32* %bits, align 4, !tbaa !8
  %39 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %maxbitlen32 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %39, i32 0, i32 2
  %40 = load i32, i32* %maxbitlen32, align 8, !tbaa !180
  %cmp33 = icmp ule i32 %38, %40
  br i1 %cmp33, label %for.body34, label %for.end45

for.body34:                                       ; preds = %for.cond31
  %41 = load i32*, i32** %nextcode, align 8, !tbaa !2
  %42 = load i32, i32* %bits, align 4, !tbaa !8
  %sub = sub i32 %42, 1
  %idxprom35 = zext i32 %sub to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %41, i64 %idxprom35
  %43 = load i32, i32* %arrayidx36, align 4, !tbaa !8
  %44 = load i32*, i32** %blcount, align 8, !tbaa !2
  %45 = load i32, i32* %bits, align 4, !tbaa !8
  %sub37 = sub i32 %45, 1
  %idxprom38 = zext i32 %sub37 to i64
  %arrayidx39 = getelementptr inbounds i32, i32* %44, i64 %idxprom38
  %46 = load i32, i32* %arrayidx39, align 4, !tbaa !8
  %add40 = add i32 %43, %46
  %shl = shl i32 %add40, 1
  %47 = load i32*, i32** %nextcode, align 8, !tbaa !2
  %48 = load i32, i32* %bits, align 4, !tbaa !8
  %idxprom41 = zext i32 %48 to i64
  %arrayidx42 = getelementptr inbounds i32, i32* %47, i64 %idxprom41
  store i32 %shl, i32* %arrayidx42, align 4, !tbaa !8
  br label %for.inc43

for.inc43:                                        ; preds = %for.body34
  %49 = load i32, i32* %bits, align 4, !tbaa !8
  %inc44 = add i32 %49, 1
  store i32 %inc44, i32* %bits, align 4, !tbaa !8
  br label %for.cond31

for.end45:                                        ; preds = %for.cond31
  store i32 0, i32* %n, align 4, !tbaa !8
  br label %for.cond46

for.cond46:                                       ; preds = %for.inc73, %for.end45
  %50 = load i32, i32* %n, align 4, !tbaa !8
  %51 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %numcodes47 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %51, i32 0, i32 3
  %52 = load i32, i32* %numcodes47, align 4, !tbaa !179
  %cmp48 = icmp ne i32 %50, %52
  br i1 %cmp48, label %for.body49, label %for.end75

for.body49:                                       ; preds = %for.cond46
  %53 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths50 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %53, i32 0, i32 1
  %54 = load i32*, i32** %lengths50, align 8, !tbaa !176
  %55 = load i32, i32* %n, align 4, !tbaa !8
  %idxprom51 = zext i32 %55 to i64
  %arrayidx52 = getelementptr inbounds i32, i32* %54, i64 %idxprom51
  %56 = load i32, i32* %arrayidx52, align 4, !tbaa !8
  %cmp53 = icmp ne i32 %56, 0
  br i1 %cmp53, label %if.then54, label %if.end72

if.then54:                                        ; preds = %for.body49
  %57 = load i32*, i32** %nextcode, align 8, !tbaa !2
  %58 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths55 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %58, i32 0, i32 1
  %59 = load i32*, i32** %lengths55, align 8, !tbaa !176
  %60 = load i32, i32* %n, align 4, !tbaa !8
  %idxprom56 = zext i32 %60 to i64
  %arrayidx57 = getelementptr inbounds i32, i32* %59, i64 %idxprom56
  %61 = load i32, i32* %arrayidx57, align 4, !tbaa !8
  %idxprom58 = zext i32 %61 to i64
  %arrayidx59 = getelementptr inbounds i32, i32* %57, i64 %idxprom58
  %62 = load i32, i32* %arrayidx59, align 4, !tbaa !8
  %inc60 = add i32 %62, 1
  store i32 %inc60, i32* %arrayidx59, align 4, !tbaa !8
  %63 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %codes61 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %63, i32 0, i32 0
  %64 = load i32*, i32** %codes61, align 8, !tbaa !174
  %65 = load i32, i32* %n, align 4, !tbaa !8
  %idxprom62 = zext i32 %65 to i64
  %arrayidx63 = getelementptr inbounds i32, i32* %64, i64 %idxprom62
  store i32 %62, i32* %arrayidx63, align 4, !tbaa !8
  %66 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths64 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %66, i32 0, i32 1
  %67 = load i32*, i32** %lengths64, align 8, !tbaa !176
  %68 = load i32, i32* %n, align 4, !tbaa !8
  %idxprom65 = zext i32 %68 to i64
  %arrayidx66 = getelementptr inbounds i32, i32* %67, i64 %idxprom65
  %69 = load i32, i32* %arrayidx66, align 4, !tbaa !8
  %shl67 = shl i32 1, %69
  %sub68 = sub i32 %shl67, 1
  %70 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %codes69 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %70, i32 0, i32 0
  %71 = load i32*, i32** %codes69, align 8, !tbaa !174
  %72 = load i32, i32* %n, align 4, !tbaa !8
  %idxprom70 = zext i32 %72 to i64
  %arrayidx71 = getelementptr inbounds i32, i32* %71, i64 %idxprom70
  %73 = load i32, i32* %arrayidx71, align 4, !tbaa !8
  %and = and i32 %73, %sub68
  store i32 %and, i32* %arrayidx71, align 4, !tbaa !8
  br label %if.end72

if.end72:                                         ; preds = %if.then54, %for.body49
  br label %for.inc73

for.inc73:                                        ; preds = %if.end72
  %74 = load i32, i32* %n, align 4, !tbaa !8
  %inc74 = add i32 %74, 1
  store i32 %inc74, i32* %n, align 4, !tbaa !8
  br label %for.cond46

for.end75:                                        ; preds = %for.cond46
  br label %if.end76

if.end76:                                         ; preds = %for.end75, %if.end
  %75 = load i32*, i32** %blcount, align 8, !tbaa !2
  %76 = bitcast i32* %75 to i8*
  call void @_ZL12lodepng_freePv(i8* %76)
  %77 = load i32*, i32** %nextcode, align 8, !tbaa !2
  %78 = bitcast i32* %77 to i8*
  call void @_ZL12lodepng_freePv(i8* %78)
  %79 = load i32, i32* %error, align 4, !tbaa !8
  %tobool77 = icmp ne i32 %79, 0
  br i1 %tobool77, label %if.end80, label %if.then78

if.then78:                                        ; preds = %if.end76
  %80 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %call79 = call i32 @_ZL21HuffmanTree_makeTableP11HuffmanTree(%struct.HuffmanTree* %80)
  store i32 %call79, i32* %error, align 4, !tbaa !8
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %if.end76
  %81 = load i32, i32* %error, align 4, !tbaa !8
  %82 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end(i64 4, i8* %82) #16
  %83 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %83) #16
  %84 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %84) #16
  %85 = bitcast i32** %nextcode to i8*
  call void @llvm.lifetime.end(i64 8, i8* %85) #16
  %86 = bitcast i32** %blcount to i8*
  call void @llvm.lifetime.end(i64 8, i8* %86) #16
  ret i32 %81
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL21HuffmanTree_makeTableP11HuffmanTree(%struct.HuffmanTree* %tree) #0 {
entry:
  %retval = alloca i32, align 4
  %tree.addr = alloca %struct.HuffmanTree*, align 8
  %i = alloca i64, align 8
  %numpresent = alloca i64, align 8
  %pointer = alloca i64, align 8
  %size = alloca i64, align 8
  %maxlens = alloca i32*, align 8
  %cleanup.dest.slot = alloca i32
  %symbol = alloca i32, align 4
  %l = alloca i32, align 4
  %index = alloca i32, align 4
  %l17 = alloca i32, align 4
  %l47 = alloca i32, align 4
  %l73 = alloca i32, align 4
  %symbol76 = alloca i32, align 4
  %reverse = alloca i32, align 4
  %num = alloca i32, align 4
  %j = alloca i32, align 4
  %index91 = alloca i32, align 4
  %index118 = alloca i32, align 4
  %maxlen = alloca i32, align 4
  %tablelen = alloca i32, align 4
  %start = alloca i32, align 4
  %num128 = alloca i32, align 4
  %j132 = alloca i32, align 4
  %reverse2 = alloca i32, align 4
  %index2 = alloca i32, align 4
  store %struct.HuffmanTree* %tree, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %numpresent to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = bitcast i64* %pointer to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = bitcast i64* %size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = bitcast i32** %maxlens to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %call = call i8* @_ZL14lodepng_mallocm(i64 2048)
  %5 = bitcast i8* %call to i32*
  store i32* %5, i32** %maxlens, align 8, !tbaa !2
  %6 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %tobool = icmp ne i32* %6, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup207

if.end:                                           ; preds = %entry
  %7 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %8 = bitcast i32* %7 to i8*
  call void @_ZL14lodepng_memsetPvim(i8* %8, i32 0, i64 2048)
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %10 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %numcodes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %10, i32 0, i32 3
  %11 = load i32, i32* %numcodes, align 4, !tbaa !179
  %conv = zext i32 %11 to i64
  %cmp = icmp ult i64 %9, %conv
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = bitcast i32* %symbol to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #16
  %13 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %codes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %13, i32 0, i32 0
  %14 = load i32*, i32** %codes, align 8, !tbaa !174
  %15 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i32, i32* %14, i64 %15
  %16 = load i32, i32* %arrayidx, align 4, !tbaa !8
  store i32 %16, i32* %symbol, align 4, !tbaa !8
  %17 = bitcast i32* %l to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #16
  %18 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %18, i32 0, i32 1
  %19 = load i32*, i32** %lengths, align 8, !tbaa !176
  %20 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i32, i32* %19, i64 %20
  %21 = load i32, i32* %arrayidx1, align 4, !tbaa !8
  store i32 %21, i32* %l, align 4, !tbaa !8
  %22 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %22) #16
  %23 = load i32, i32* %l, align 4, !tbaa !8
  %cmp2 = icmp ule i32 %23, 9
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %for.body
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %for.body
  %24 = load i32, i32* %symbol, align 4, !tbaa !8
  %25 = load i32, i32* %l, align 4, !tbaa !8
  %sub = sub i32 %25, 9
  %shr = lshr i32 %24, %sub
  %call5 = call i32 @_ZL11reverseBitsjj(i32 %shr, i32 9)
  store i32 %call5, i32* %index, align 4, !tbaa !8
  %26 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %27 = load i32, i32* %index, align 4, !tbaa !8
  %idxprom = zext i32 %27 to i64
  %arrayidx6 = getelementptr inbounds i32, i32* %26, i64 %idxprom
  %28 = load i32, i32* %arrayidx6, align 4, !tbaa !8
  %29 = load i32, i32* %l, align 4, !tbaa !8
  %cmp7 = icmp ugt i32 %28, %29
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %30 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %31 = load i32, i32* %index, align 4, !tbaa !8
  %idxprom8 = zext i32 %31 to i64
  %arrayidx9 = getelementptr inbounds i32, i32* %30, i64 %idxprom8
  %32 = load i32, i32* %arrayidx9, align 4, !tbaa !8
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  %33 = load i32, i32* %l, align 4, !tbaa !8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %32, %cond.true ], [ %33, %cond.false ]
  %34 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %35 = load i32, i32* %index, align 4, !tbaa !8
  %idxprom10 = zext i32 %35 to i64
  %arrayidx11 = getelementptr inbounds i32, i32* %34, i64 %idxprom10
  store i32 %cond, i32* %arrayidx11, align 4, !tbaa !8
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %cond.end, %if.then3
  %36 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %36) #16
  %37 = bitcast i32* %l to i8*
  call void @llvm.lifetime.end(i64 4, i8* %37) #16
  %38 = bitcast i32* %symbol to i8*
  call void @llvm.lifetime.end(i64 4, i8* %38) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 4, label %for.inc
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont, %cleanup
  %39 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %39, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i64 512, i64* %size, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc24, %for.end
  %40 = load i64, i64* %i, align 8, !tbaa !6
  %cmp15 = icmp ult i64 %40, 512
  br i1 %cmp15, label %for.body16, label %for.end26

for.body16:                                       ; preds = %for.cond14
  %41 = bitcast i32* %l17 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %41) #16
  %42 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %43 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx18 = getelementptr inbounds i32, i32* %42, i64 %43
  %44 = load i32, i32* %arrayidx18, align 4, !tbaa !8
  store i32 %44, i32* %l17, align 4, !tbaa !8
  %45 = load i32, i32* %l17, align 4, !tbaa !8
  %cmp19 = icmp ugt i32 %45, 9
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %for.body16
  %46 = load i32, i32* %l17, align 4, !tbaa !8
  %sub21 = sub i32 %46, 9
  %shl = shl i32 1, %sub21
  %conv22 = zext i32 %shl to i64
  %47 = load i64, i64* %size, align 8, !tbaa !6
  %add = add i64 %47, %conv22
  store i64 %add, i64* %size, align 8, !tbaa !6
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %for.body16
  %48 = bitcast i32* %l17 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %48) #16
  br label %for.inc24

for.inc24:                                        ; preds = %if.end23
  %49 = load i64, i64* %i, align 8, !tbaa !6
  %inc25 = add i64 %49, 1
  store i64 %inc25, i64* %i, align 8, !tbaa !6
  br label %for.cond14

for.end26:                                        ; preds = %for.cond14
  %50 = load i64, i64* %size, align 8, !tbaa !6
  %mul = mul i64 %50, 1
  %call27 = call i8* @_ZL14lodepng_mallocm(i64 %mul)
  %51 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %51, i32 0, i32 4
  store i8* %call27, i8** %table_len, align 8, !tbaa !177
  %52 = load i64, i64* %size, align 8, !tbaa !6
  %mul28 = mul i64 %52, 2
  %call29 = call i8* @_ZL14lodepng_mallocm(i64 %mul28)
  %53 = bitcast i8* %call29 to i16*
  %54 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %54, i32 0, i32 5
  store i16* %53, i16** %table_value, align 8, !tbaa !178
  %55 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len30 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %55, i32 0, i32 4
  %56 = load i8*, i8** %table_len30, align 8, !tbaa !177
  %tobool31 = icmp ne i8* %56, null
  br i1 %tobool31, label %lor.lhs.false, label %if.then34

lor.lhs.false:                                    ; preds = %for.end26
  %57 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value32 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %57, i32 0, i32 5
  %58 = load i16*, i16** %table_value32, align 8, !tbaa !178
  %tobool33 = icmp ne i16* %58, null
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %lor.lhs.false, %for.end26
  %59 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %60 = bitcast i32* %59 to i8*
  call void @_ZL12lodepng_freePv(i8* %60)
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup207

if.end35:                                         ; preds = %lor.lhs.false
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc41, %if.end35
  %61 = load i64, i64* %i, align 8, !tbaa !6
  %62 = load i64, i64* %size, align 8, !tbaa !6
  %cmp37 = icmp ult i64 %61, %62
  br i1 %cmp37, label %for.body38, label %for.end43

for.body38:                                       ; preds = %for.cond36
  %63 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len39 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %63, i32 0, i32 4
  %64 = load i8*, i8** %table_len39, align 8, !tbaa !177
  %65 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx40 = getelementptr inbounds i8, i8* %64, i64 %65
  store i8 16, i8* %arrayidx40, align 1, !tbaa !16
  br label %for.inc41

for.inc41:                                        ; preds = %for.body38
  %66 = load i64, i64* %i, align 8, !tbaa !6
  %inc42 = add i64 %66, 1
  store i64 %inc42, i64* %i, align 8, !tbaa !6
  br label %for.cond36

for.end43:                                        ; preds = %for.cond36
  store i64 512, i64* %pointer, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond44

for.cond44:                                       ; preds = %for.inc65, %for.end43
  %67 = load i64, i64* %i, align 8, !tbaa !6
  %cmp45 = icmp ult i64 %67, 512
  br i1 %cmp45, label %for.body46, label %for.end67

for.body46:                                       ; preds = %for.cond44
  %68 = bitcast i32* %l47 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %68) #16
  %69 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %70 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx48 = getelementptr inbounds i32, i32* %69, i64 %70
  %71 = load i32, i32* %arrayidx48, align 4, !tbaa !8
  store i32 %71, i32* %l47, align 4, !tbaa !8
  %72 = load i32, i32* %l47, align 4, !tbaa !8
  %cmp49 = icmp ule i32 %72, 9
  br i1 %cmp49, label %if.then50, label %if.end51

if.then50:                                        ; preds = %for.body46
  store i32 13, i32* %cleanup.dest.slot, align 4
  br label %cleanup62

if.end51:                                         ; preds = %for.body46
  %73 = load i32, i32* %l47, align 4, !tbaa !8
  %conv52 = trunc i32 %73 to i8
  %74 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len53 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %74, i32 0, i32 4
  %75 = load i8*, i8** %table_len53, align 8, !tbaa !177
  %76 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx54 = getelementptr inbounds i8, i8* %75, i64 %76
  store i8 %conv52, i8* %arrayidx54, align 1, !tbaa !16
  %77 = load i64, i64* %pointer, align 8, !tbaa !6
  %conv55 = trunc i64 %77 to i16
  %78 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value56 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %78, i32 0, i32 5
  %79 = load i16*, i16** %table_value56, align 8, !tbaa !178
  %80 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx57 = getelementptr inbounds i16, i16* %79, i64 %80
  store i16 %conv55, i16* %arrayidx57, align 2, !tbaa !89
  %81 = load i32, i32* %l47, align 4, !tbaa !8
  %sub58 = sub i32 %81, 9
  %shl59 = shl i32 1, %sub58
  %conv60 = zext i32 %shl59 to i64
  %82 = load i64, i64* %pointer, align 8, !tbaa !6
  %add61 = add i64 %82, %conv60
  store i64 %add61, i64* %pointer, align 8, !tbaa !6
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup62

cleanup62:                                        ; preds = %if.end51, %if.then50
  %83 = bitcast i32* %l47 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %83) #16
  %cleanup.dest63 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest63, label %unreachable [
    i32 0, label %cleanup.cont64
    i32 13, label %for.inc65
  ]

cleanup.cont64:                                   ; preds = %cleanup62
  br label %for.inc65

for.inc65:                                        ; preds = %cleanup.cont64, %cleanup62
  %84 = load i64, i64* %i, align 8, !tbaa !6
  %inc66 = add i64 %84, 1
  store i64 %inc66, i64* %i, align 8, !tbaa !6
  br label %for.cond44

for.end67:                                        ; preds = %for.cond44
  %85 = load i32*, i32** %maxlens, align 8, !tbaa !2
  %86 = bitcast i32* %85 to i8*
  call void @_ZL12lodepng_freePv(i8* %86)
  store i64 0, i64* %numpresent, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond68

for.cond68:                                       ; preds = %for.inc169, %for.end67
  %87 = load i64, i64* %i, align 8, !tbaa !6
  %88 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %numcodes69 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %88, i32 0, i32 3
  %89 = load i32, i32* %numcodes69, align 4, !tbaa !179
  %conv70 = zext i32 %89 to i64
  %cmp71 = icmp ult i64 %87, %conv70
  br i1 %cmp71, label %for.body72, label %for.end171

for.body72:                                       ; preds = %for.cond68
  %90 = bitcast i32* %l73 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %90) #16
  %91 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths74 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %91, i32 0, i32 1
  %92 = load i32*, i32** %lengths74, align 8, !tbaa !176
  %93 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx75 = getelementptr inbounds i32, i32* %92, i64 %93
  %94 = load i32, i32* %arrayidx75, align 4, !tbaa !8
  store i32 %94, i32* %l73, align 4, !tbaa !8
  %95 = bitcast i32* %symbol76 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %95) #16
  %96 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %codes77 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %96, i32 0, i32 0
  %97 = load i32*, i32** %codes77, align 8, !tbaa !174
  %98 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx78 = getelementptr inbounds i32, i32* %97, i64 %98
  %99 = load i32, i32* %arrayidx78, align 4, !tbaa !8
  store i32 %99, i32* %symbol76, align 4, !tbaa !8
  %100 = bitcast i32* %reverse to i8*
  call void @llvm.lifetime.start(i64 4, i8* %100) #16
  %101 = load i32, i32* %symbol76, align 4, !tbaa !8
  %102 = load i32, i32* %l73, align 4, !tbaa !8
  %call79 = call i32 @_ZL11reverseBitsjj(i32 %101, i32 %102)
  store i32 %call79, i32* %reverse, align 4, !tbaa !8
  %103 = load i32, i32* %l73, align 4, !tbaa !8
  %cmp80 = icmp eq i32 %103, 0
  br i1 %cmp80, label %if.then81, label %if.end82

if.then81:                                        ; preds = %for.body72
  store i32 16, i32* %cleanup.dest.slot, align 4
  br label %cleanup164

if.end82:                                         ; preds = %for.body72
  %104 = load i64, i64* %numpresent, align 8, !tbaa !6
  %inc83 = add i64 %104, 1
  store i64 %inc83, i64* %numpresent, align 8, !tbaa !6
  %105 = load i32, i32* %l73, align 4, !tbaa !8
  %cmp84 = icmp ule i32 %105, 9
  br i1 %cmp84, label %if.then85, label %if.else

if.then85:                                        ; preds = %if.end82
  %106 = bitcast i32* %num to i8*
  call void @llvm.lifetime.start(i64 4, i8* %106) #16
  %107 = load i32, i32* %l73, align 4, !tbaa !8
  %sub86 = sub i32 9, %107
  %shl87 = shl i32 1, %sub86
  store i32 %shl87, i32* %num, align 4, !tbaa !8
  %108 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %108) #16
  store i32 0, i32* %j, align 4, !tbaa !8
  br label %for.cond88

for.cond88:                                       ; preds = %for.inc111, %if.then85
  %109 = load i32, i32* %j, align 4, !tbaa !8
  %110 = load i32, i32* %num, align 4, !tbaa !8
  %cmp89 = icmp ult i32 %109, %110
  br i1 %cmp89, label %for.body90, label %for.end113

for.body90:                                       ; preds = %for.cond88
  %111 = bitcast i32* %index91 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %111) #16
  %112 = load i32, i32* %reverse, align 4, !tbaa !8
  %113 = load i32, i32* %j, align 4, !tbaa !8
  %114 = load i32, i32* %l73, align 4, !tbaa !8
  %shl92 = shl i32 %113, %114
  %or = or i32 %112, %shl92
  store i32 %or, i32* %index91, align 4, !tbaa !8
  %115 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len93 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %115, i32 0, i32 4
  %116 = load i8*, i8** %table_len93, align 8, !tbaa !177
  %117 = load i32, i32* %index91, align 4, !tbaa !8
  %idxprom94 = zext i32 %117 to i64
  %arrayidx95 = getelementptr inbounds i8, i8* %116, i64 %idxprom94
  %118 = load i8, i8* %arrayidx95, align 1, !tbaa !16
  %conv96 = zext i8 %118 to i32
  %cmp97 = icmp ne i32 %conv96, 16
  br i1 %cmp97, label %if.then98, label %if.end99

if.then98:                                        ; preds = %for.body90
  store i32 55, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup108

if.end99:                                         ; preds = %for.body90
  %119 = load i32, i32* %l73, align 4, !tbaa !8
  %conv100 = trunc i32 %119 to i8
  %120 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len101 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %120, i32 0, i32 4
  %121 = load i8*, i8** %table_len101, align 8, !tbaa !177
  %122 = load i32, i32* %index91, align 4, !tbaa !8
  %idxprom102 = zext i32 %122 to i64
  %arrayidx103 = getelementptr inbounds i8, i8* %121, i64 %idxprom102
  store i8 %conv100, i8* %arrayidx103, align 1, !tbaa !16
  %123 = load i64, i64* %i, align 8, !tbaa !6
  %conv104 = trunc i64 %123 to i16
  %124 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value105 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %124, i32 0, i32 5
  %125 = load i16*, i16** %table_value105, align 8, !tbaa !178
  %126 = load i32, i32* %index91, align 4, !tbaa !8
  %idxprom106 = zext i32 %126 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %125, i64 %idxprom106
  store i16 %conv104, i16* %arrayidx107, align 2, !tbaa !89
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup108

cleanup108:                                       ; preds = %if.end99, %if.then98
  %127 = bitcast i32* %index91 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %127) #16
  %cleanup.dest109 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest109, label %cleanup114 [
    i32 0, label %cleanup.cont110
  ]

cleanup.cont110:                                  ; preds = %cleanup108
  br label %for.inc111

for.inc111:                                       ; preds = %cleanup.cont110
  %128 = load i32, i32* %j, align 4, !tbaa !8
  %inc112 = add i32 %128, 1
  store i32 %inc112, i32* %j, align 4, !tbaa !8
  br label %for.cond88

for.end113:                                       ; preds = %for.cond88
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup114

cleanup114:                                       ; preds = %for.end113, %cleanup108
  %129 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %129) #16
  %130 = bitcast i32* %num to i8*
  call void @llvm.lifetime.end(i64 4, i8* %130) #16
  %cleanup.dest116 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest116, label %cleanup164 [
    i32 0, label %cleanup.cont117
  ]

cleanup.cont117:                                  ; preds = %cleanup114
  br label %if.end163

if.else:                                          ; preds = %if.end82
  %131 = bitcast i32* %index118 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %131) #16
  %132 = load i32, i32* %reverse, align 4, !tbaa !8
  %and = and i32 %132, 511
  store i32 %and, i32* %index118, align 4, !tbaa !8
  %133 = bitcast i32* %maxlen to i8*
  call void @llvm.lifetime.start(i64 4, i8* %133) #16
  %134 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len119 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %134, i32 0, i32 4
  %135 = load i8*, i8** %table_len119, align 8, !tbaa !177
  %136 = load i32, i32* %index118, align 4, !tbaa !8
  %idxprom120 = zext i32 %136 to i64
  %arrayidx121 = getelementptr inbounds i8, i8* %135, i64 %idxprom120
  %137 = load i8, i8* %arrayidx121, align 1, !tbaa !16
  %conv122 = zext i8 %137 to i32
  store i32 %conv122, i32* %maxlen, align 4, !tbaa !8
  %138 = bitcast i32* %tablelen to i8*
  call void @llvm.lifetime.start(i64 4, i8* %138) #16
  %139 = load i32, i32* %maxlen, align 4, !tbaa !8
  %sub123 = sub i32 %139, 9
  store i32 %sub123, i32* %tablelen, align 4, !tbaa !8
  %140 = bitcast i32* %start to i8*
  call void @llvm.lifetime.start(i64 4, i8* %140) #16
  %141 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value124 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %141, i32 0, i32 5
  %142 = load i16*, i16** %table_value124, align 8, !tbaa !178
  %143 = load i32, i32* %index118, align 4, !tbaa !8
  %idxprom125 = zext i32 %143 to i64
  %arrayidx126 = getelementptr inbounds i16, i16* %142, i64 %idxprom125
  %144 = load i16, i16* %arrayidx126, align 2, !tbaa !89
  %conv127 = zext i16 %144 to i32
  store i32 %conv127, i32* %start, align 4, !tbaa !8
  %145 = bitcast i32* %num128 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %145) #16
  %146 = load i32, i32* %tablelen, align 4, !tbaa !8
  %147 = load i32, i32* %l73, align 4, !tbaa !8
  %sub129 = sub i32 %147, 9
  %sub130 = sub i32 %146, %sub129
  %shl131 = shl i32 1, %sub130
  store i32 %shl131, i32* %num128, align 4, !tbaa !8
  %148 = bitcast i32* %j132 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %148) #16
  %149 = load i32, i32* %maxlen, align 4, !tbaa !8
  %150 = load i32, i32* %l73, align 4, !tbaa !8
  %cmp133 = icmp ult i32 %149, %150
  br i1 %cmp133, label %if.then134, label %if.end135

if.then134:                                       ; preds = %if.else
  store i32 55, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup155

if.end135:                                        ; preds = %if.else
  store i32 0, i32* %j132, align 4, !tbaa !8
  br label %for.cond136

for.cond136:                                      ; preds = %for.inc152, %if.end135
  %151 = load i32, i32* %j132, align 4, !tbaa !8
  %152 = load i32, i32* %num128, align 4, !tbaa !8
  %cmp137 = icmp ult i32 %151, %152
  br i1 %cmp137, label %for.body138, label %for.end154

for.body138:                                      ; preds = %for.cond136
  %153 = bitcast i32* %reverse2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %153) #16
  %154 = load i32, i32* %reverse, align 4, !tbaa !8
  %shr139 = lshr i32 %154, 9
  store i32 %shr139, i32* %reverse2, align 4, !tbaa !8
  %155 = bitcast i32* %index2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %155) #16
  %156 = load i32, i32* %start, align 4, !tbaa !8
  %157 = load i32, i32* %reverse2, align 4, !tbaa !8
  %158 = load i32, i32* %j132, align 4, !tbaa !8
  %159 = load i32, i32* %l73, align 4, !tbaa !8
  %sub140 = sub i32 %159, 9
  %shl141 = shl i32 %158, %sub140
  %or142 = or i32 %157, %shl141
  %add143 = add i32 %156, %or142
  store i32 %add143, i32* %index2, align 4, !tbaa !8
  %160 = load i32, i32* %l73, align 4, !tbaa !8
  %conv144 = trunc i32 %160 to i8
  %161 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len145 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %161, i32 0, i32 4
  %162 = load i8*, i8** %table_len145, align 8, !tbaa !177
  %163 = load i32, i32* %index2, align 4, !tbaa !8
  %idxprom146 = zext i32 %163 to i64
  %arrayidx147 = getelementptr inbounds i8, i8* %162, i64 %idxprom146
  store i8 %conv144, i8* %arrayidx147, align 1, !tbaa !16
  %164 = load i64, i64* %i, align 8, !tbaa !6
  %conv148 = trunc i64 %164 to i16
  %165 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value149 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %165, i32 0, i32 5
  %166 = load i16*, i16** %table_value149, align 8, !tbaa !178
  %167 = load i32, i32* %index2, align 4, !tbaa !8
  %idxprom150 = zext i32 %167 to i64
  %arrayidx151 = getelementptr inbounds i16, i16* %166, i64 %idxprom150
  store i16 %conv148, i16* %arrayidx151, align 2, !tbaa !89
  %168 = bitcast i32* %index2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %168) #16
  %169 = bitcast i32* %reverse2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %169) #16
  br label %for.inc152

for.inc152:                                       ; preds = %for.body138
  %170 = load i32, i32* %j132, align 4, !tbaa !8
  %inc153 = add i32 %170, 1
  store i32 %inc153, i32* %j132, align 4, !tbaa !8
  br label %for.cond136

for.end154:                                       ; preds = %for.cond136
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup155

cleanup155:                                       ; preds = %for.end154, %if.then134
  %171 = bitcast i32* %j132 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %171) #16
  %172 = bitcast i32* %num128 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %172) #16
  %173 = bitcast i32* %start to i8*
  call void @llvm.lifetime.end(i64 4, i8* %173) #16
  %174 = bitcast i32* %tablelen to i8*
  call void @llvm.lifetime.end(i64 4, i8* %174) #16
  %175 = bitcast i32* %maxlen to i8*
  call void @llvm.lifetime.end(i64 4, i8* %175) #16
  %176 = bitcast i32* %index118 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %176) #16
  %cleanup.dest161 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest161, label %cleanup164 [
    i32 0, label %cleanup.cont162
  ]

cleanup.cont162:                                  ; preds = %cleanup155
  br label %if.end163

if.end163:                                        ; preds = %cleanup.cont162, %cleanup.cont117
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup164

cleanup164:                                       ; preds = %if.end163, %cleanup155, %cleanup114, %if.then81
  %177 = bitcast i32* %reverse to i8*
  call void @llvm.lifetime.end(i64 4, i8* %177) #16
  %178 = bitcast i32* %symbol76 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %178) #16
  %179 = bitcast i32* %l73 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %179) #16
  %cleanup.dest167 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest167, label %cleanup207 [
    i32 0, label %cleanup.cont168
    i32 16, label %for.inc169
  ]

cleanup.cont168:                                  ; preds = %cleanup164
  br label %for.inc169

for.inc169:                                       ; preds = %cleanup.cont168, %cleanup164
  %180 = load i64, i64* %i, align 8, !tbaa !6
  %inc170 = add i64 %180, 1
  store i64 %inc170, i64* %i, align 8, !tbaa !6
  br label %for.cond68

for.end171:                                       ; preds = %for.cond68
  %181 = load i64, i64* %numpresent, align 8, !tbaa !6
  %cmp172 = icmp ult i64 %181, 2
  br i1 %cmp172, label %if.then173, label %if.else193

if.then173:                                       ; preds = %for.end171
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond174

for.cond174:                                      ; preds = %for.inc190, %if.then173
  %182 = load i64, i64* %i, align 8, !tbaa !6
  %183 = load i64, i64* %size, align 8, !tbaa !6
  %cmp175 = icmp ult i64 %182, %183
  br i1 %cmp175, label %for.body176, label %for.end192

for.body176:                                      ; preds = %for.cond174
  %184 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len177 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %184, i32 0, i32 4
  %185 = load i8*, i8** %table_len177, align 8, !tbaa !177
  %186 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx178 = getelementptr inbounds i8, i8* %185, i64 %186
  %187 = load i8, i8* %arrayidx178, align 1, !tbaa !16
  %conv179 = zext i8 %187 to i32
  %cmp180 = icmp eq i32 %conv179, 16
  br i1 %cmp180, label %if.then181, label %if.end189

if.then181:                                       ; preds = %for.body176
  %188 = load i64, i64* %i, align 8, !tbaa !6
  %cmp182 = icmp ult i64 %188, 512
  %cond183 = select i1 %cmp182, i32 1, i32 10
  %conv184 = trunc i32 %cond183 to i8
  %189 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len185 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %189, i32 0, i32 4
  %190 = load i8*, i8** %table_len185, align 8, !tbaa !177
  %191 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx186 = getelementptr inbounds i8, i8* %190, i64 %191
  store i8 %conv184, i8* %arrayidx186, align 1, !tbaa !16
  %192 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_value187 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %192, i32 0, i32 5
  %193 = load i16*, i16** %table_value187, align 8, !tbaa !178
  %194 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx188 = getelementptr inbounds i16, i16* %193, i64 %194
  store i16 -1, i16* %arrayidx188, align 2, !tbaa !89
  br label %if.end189

if.end189:                                        ; preds = %if.then181, %for.body176
  br label %for.inc190

for.inc190:                                       ; preds = %if.end189
  %195 = load i64, i64* %i, align 8, !tbaa !6
  %inc191 = add i64 %195, 1
  store i64 %inc191, i64* %i, align 8, !tbaa !6
  br label %for.cond174

for.end192:                                       ; preds = %for.cond174
  br label %if.end206

if.else193:                                       ; preds = %for.end171
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond194

for.cond194:                                      ; preds = %for.inc203, %if.else193
  %196 = load i64, i64* %i, align 8, !tbaa !6
  %197 = load i64, i64* %size, align 8, !tbaa !6
  %cmp195 = icmp ult i64 %196, %197
  br i1 %cmp195, label %for.body196, label %for.end205

for.body196:                                      ; preds = %for.cond194
  %198 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %table_len197 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %198, i32 0, i32 4
  %199 = load i8*, i8** %table_len197, align 8, !tbaa !177
  %200 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx198 = getelementptr inbounds i8, i8* %199, i64 %200
  %201 = load i8, i8* %arrayidx198, align 1, !tbaa !16
  %conv199 = zext i8 %201 to i32
  %cmp200 = icmp eq i32 %conv199, 16
  br i1 %cmp200, label %if.then201, label %if.end202

if.then201:                                       ; preds = %for.body196
  store i32 55, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup207

if.end202:                                        ; preds = %for.body196
  br label %for.inc203

for.inc203:                                       ; preds = %if.end202
  %202 = load i64, i64* %i, align 8, !tbaa !6
  %inc204 = add i64 %202, 1
  store i64 %inc204, i64* %i, align 8, !tbaa !6
  br label %for.cond194

for.end205:                                       ; preds = %for.cond194
  br label %if.end206

if.end206:                                        ; preds = %for.end205, %for.end192
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup207

cleanup207:                                       ; preds = %if.end206, %if.then201, %cleanup164, %if.then34, %if.then
  %203 = bitcast i32** %maxlens to i8*
  call void @llvm.lifetime.end(i64 8, i8* %203) #16
  %204 = bitcast i64* %size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %204) #16
  %205 = bitcast i64* %pointer to i8*
  call void @llvm.lifetime.end(i64 8, i8* %205) #16
  %206 = bitcast i64* %numpresent to i8*
  call void @llvm.lifetime.end(i64 8, i8* %206) #16
  %207 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %207) #16
  %208 = load i32, i32* %retval, align 4
  ret i32 %208

unreachable:                                      ; preds = %cleanup62, %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL11reverseBitsjj(i32 %bits, i32 %num) #4 {
entry:
  %bits.addr = alloca i32, align 4
  %num.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %result = alloca i32, align 4
  store i32 %bits, i32* %bits.addr, align 4, !tbaa !8
  store i32 %num, i32* %num.addr, align 4, !tbaa !8
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  store i32 0, i32* %result, align 4, !tbaa !8
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !tbaa !8
  %3 = load i32, i32* %num.addr, align 4, !tbaa !8
  %cmp = icmp ult i32 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %bits.addr, align 4, !tbaa !8
  %5 = load i32, i32* %num.addr, align 4, !tbaa !8
  %6 = load i32, i32* %i, align 4, !tbaa !8
  %sub = sub i32 %5, %6
  %sub1 = sub i32 %sub, 1
  %shr = lshr i32 %4, %sub1
  %and = and i32 %shr, 1
  %7 = load i32, i32* %i, align 4, !tbaa !8
  %shl = shl i32 %and, %7
  %8 = load i32, i32* %result, align 4, !tbaa !8
  %or = or i32 %8, %shl
  store i32 %or, i32* %result, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i32, i32* %result, align 4, !tbaa !8
  %11 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #16
  %12 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %12) #16
  ret i32 %10
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL13lodepng_gtoflmmm(i64 %a, i64 %b, i64 %c) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %c.addr = alloca i64, align 8
  %d = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i64 %a, i64* %a.addr, align 8, !tbaa !6
  store i64 %b, i64* %b.addr, align 8, !tbaa !6
  store i64 %c, i64* %c.addr, align 8, !tbaa !6
  %0 = bitcast i64* %d to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i64, i64* %a.addr, align 8, !tbaa !6
  %2 = load i64, i64* %b.addr, align 8, !tbaa !6
  %call = call i32 @_ZL14lodepng_addoflmmPm(i64 %1, i64 %2, i64* %d)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %d, align 8, !tbaa !6
  %4 = load i64, i64* %c.addr, align 8, !tbaa !6
  %cmp = icmp ugt i64 %3, %4
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %5 = bitcast i64* %d to i8*
  call void @llvm.lifetime.end(i64 8, i8* %5) #16
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL21LodePNGBitWriter_initP16LodePNGBitWriterP8ucvector(%struct.LodePNGBitWriter* %writer, %struct.ucvector* %data) #4 {
entry:
  %writer.addr = alloca %struct.LodePNGBitWriter*, align 8
  %data.addr = alloca %struct.ucvector*, align 8
  store %struct.LodePNGBitWriter* %writer, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  store %struct.ucvector* %data, %struct.ucvector** %data.addr, align 8, !tbaa !2
  %0 = load %struct.ucvector*, %struct.ucvector** %data.addr, align 8, !tbaa !2
  %1 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data1 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %1, i32 0, i32 0
  store %struct.ucvector* %0, %struct.ucvector** %data1, align 8, !tbaa !181
  %2 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %2, i32 0, i32 1
  store i8 0, i8* %bp, align 8, !tbaa !183
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL20deflateNoCompressionP8ucvectorPKhm(%struct.ucvector* %out, i8* %data, i64 %datasize) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %data.addr = alloca i8*, align 8
  %datasize.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %numdeflateblocks = alloca i64, align 8
  %datapos = alloca i32, align 4
  %BFINAL = alloca i32, align 4
  %BTYPE = alloca i32, align 4
  %LEN = alloca i32, align 4
  %NLEN = alloca i32, align 4
  %firstbyte = alloca i8, align 1
  %pos = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %datasize, i64* %datasize.addr, align 8, !tbaa !6
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i64* %numdeflateblocks to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i64, i64* %datasize.addr, align 8, !tbaa !6
  %add = add i64 %2, 65534
  %div = udiv i64 %add, 65535
  store i64 %div, i64* %numdeflateblocks, align 8, !tbaa !6
  %3 = bitcast i32* %datapos to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  store i32 0, i32* %datapos, align 4, !tbaa !8
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i, align 8, !tbaa !6
  %5 = load i64, i64* %numdeflateblocks, align 8, !tbaa !6
  %cmp = icmp ne i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = bitcast i32* %BFINAL to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  %7 = bitcast i32* %BTYPE to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #16
  %8 = bitcast i32* %LEN to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #16
  %9 = bitcast i32* %NLEN to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #16
  call void @llvm.lifetime.start(i64 1, i8* %firstbyte) #16
  %10 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #16
  %11 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %11, i32 0, i32 1
  %12 = load i64, i64* %size, align 8, !tbaa !34
  store i64 %12, i64* %pos, align 8, !tbaa !6
  %13 = load i64, i64* %i, align 8, !tbaa !6
  %14 = load i64, i64* %numdeflateblocks, align 8, !tbaa !6
  %sub = sub i64 %14, 1
  %cmp1 = icmp eq i64 %13, %sub
  %conv = zext i1 %cmp1 to i32
  store i32 %conv, i32* %BFINAL, align 4, !tbaa !8
  store i32 0, i32* %BTYPE, align 4, !tbaa !8
  store i32 65535, i32* %LEN, align 4, !tbaa !8
  %15 = load i64, i64* %datasize.addr, align 8, !tbaa !6
  %16 = load i32, i32* %datapos, align 4, !tbaa !8
  %conv2 = zext i32 %16 to i64
  %sub3 = sub i64 %15, %conv2
  %cmp4 = icmp ult i64 %sub3, 65535
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %17 = load i64, i64* %datasize.addr, align 8, !tbaa !6
  %conv5 = trunc i64 %17 to i32
  %18 = load i32, i32* %datapos, align 4, !tbaa !8
  %sub6 = sub i32 %conv5, %18
  store i32 %sub6, i32* %LEN, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %19 = load i32, i32* %LEN, align 4, !tbaa !8
  %sub7 = sub i32 65535, %19
  store i32 %sub7, i32* %NLEN, align 4, !tbaa !8
  %20 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %21 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size8 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %21, i32 0, i32 1
  %22 = load i64, i64* %size8, align 8, !tbaa !34
  %23 = load i32, i32* %LEN, align 4, !tbaa !8
  %conv9 = zext i32 %23 to i64
  %add10 = add i64 %22, %conv9
  %add11 = add i64 %add10, 5
  %call = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %20, i64 %add11)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end13, label %if.then12

if.then12:                                        ; preds = %if.end
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %if.end
  %24 = load i32, i32* %BFINAL, align 4, !tbaa !8
  %25 = load i32, i32* %BTYPE, align 4, !tbaa !8
  %and = and i32 %25, 1
  %shl = shl i32 %and, 1
  %add14 = add i32 %24, %shl
  %26 = load i32, i32* %BTYPE, align 4, !tbaa !8
  %and15 = and i32 %26, 2
  %shl16 = shl i32 %and15, 1
  %add17 = add i32 %add14, %shl16
  %conv18 = trunc i32 %add17 to i8
  store i8 %conv18, i8* %firstbyte, align 1, !tbaa !16
  %27 = load i8, i8* %firstbyte, align 1, !tbaa !16
  %28 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data19 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %28, i32 0, i32 0
  %29 = load i8*, i8** %data19, align 8, !tbaa !32
  %30 = load i64, i64* %pos, align 8, !tbaa !6
  %add20 = add i64 %30, 0
  %arrayidx = getelementptr inbounds i8, i8* %29, i64 %add20
  store i8 %27, i8* %arrayidx, align 1, !tbaa !16
  %31 = load i32, i32* %LEN, align 4, !tbaa !8
  %and21 = and i32 %31, 255
  %conv22 = trunc i32 %and21 to i8
  %32 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data23 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %32, i32 0, i32 0
  %33 = load i8*, i8** %data23, align 8, !tbaa !32
  %34 = load i64, i64* %pos, align 8, !tbaa !6
  %add24 = add i64 %34, 1
  %arrayidx25 = getelementptr inbounds i8, i8* %33, i64 %add24
  store i8 %conv22, i8* %arrayidx25, align 1, !tbaa !16
  %35 = load i32, i32* %LEN, align 4, !tbaa !8
  %shr = lshr i32 %35, 8
  %conv26 = trunc i32 %shr to i8
  %36 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data27 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %36, i32 0, i32 0
  %37 = load i8*, i8** %data27, align 8, !tbaa !32
  %38 = load i64, i64* %pos, align 8, !tbaa !6
  %add28 = add i64 %38, 2
  %arrayidx29 = getelementptr inbounds i8, i8* %37, i64 %add28
  store i8 %conv26, i8* %arrayidx29, align 1, !tbaa !16
  %39 = load i32, i32* %NLEN, align 4, !tbaa !8
  %and30 = and i32 %39, 255
  %conv31 = trunc i32 %and30 to i8
  %40 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data32 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %40, i32 0, i32 0
  %41 = load i8*, i8** %data32, align 8, !tbaa !32
  %42 = load i64, i64* %pos, align 8, !tbaa !6
  %add33 = add i64 %42, 3
  %arrayidx34 = getelementptr inbounds i8, i8* %41, i64 %add33
  store i8 %conv31, i8* %arrayidx34, align 1, !tbaa !16
  %43 = load i32, i32* %NLEN, align 4, !tbaa !8
  %shr35 = lshr i32 %43, 8
  %conv36 = trunc i32 %shr35 to i8
  %44 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data37 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %44, i32 0, i32 0
  %45 = load i8*, i8** %data37, align 8, !tbaa !32
  %46 = load i64, i64* %pos, align 8, !tbaa !6
  %add38 = add i64 %46, 4
  %arrayidx39 = getelementptr inbounds i8, i8* %45, i64 %add38
  store i8 %conv36, i8* %arrayidx39, align 1, !tbaa !16
  %47 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data40 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %47, i32 0, i32 0
  %48 = load i8*, i8** %data40, align 8, !tbaa !32
  %49 = load i64, i64* %pos, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %48, i64 %49
  %add.ptr41 = getelementptr inbounds i8, i8* %add.ptr, i64 5
  %50 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %51 = load i32, i32* %datapos, align 4, !tbaa !8
  %idx.ext = zext i32 %51 to i64
  %add.ptr42 = getelementptr inbounds i8, i8* %50, i64 %idx.ext
  %52 = load i32, i32* %LEN, align 4, !tbaa !8
  %conv43 = zext i32 %52 to i64
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr41, i8* %add.ptr42, i64 %conv43)
  %53 = load i32, i32* %LEN, align 4, !tbaa !8
  %54 = load i32, i32* %datapos, align 4, !tbaa !8
  %add44 = add i32 %54, %53
  store i32 %add44, i32* %datapos, align 4, !tbaa !8
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end13, %if.then12
  %55 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %55) #16
  call void @llvm.lifetime.end(i64 1, i8* %firstbyte) #16
  %56 = bitcast i32* %NLEN to i8*
  call void @llvm.lifetime.end(i64 4, i8* %56) #16
  %57 = bitcast i32* %LEN to i8*
  call void @llvm.lifetime.end(i64 4, i8* %57) #16
  %58 = bitcast i32* %BTYPE to i8*
  call void @llvm.lifetime.end(i64 4, i8* %58) #16
  %59 = bitcast i32* %BFINAL to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup50 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %60 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %60, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

cleanup50:                                        ; preds = %for.end, %cleanup
  %61 = bitcast i32* %datapos to i8*
  call void @llvm.lifetime.end(i64 4, i8* %61) #16
  %62 = bitcast i64* %numdeflateblocks to i8*
  call void @llvm.lifetime.end(i64 8, i8* %62) #16
  %63 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %63) #16
  %64 = load i32, i32* %retval, align 4
  ret i32 %64
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL9hash_initP4Hashj(%struct.Hash* %hash, i32 %windowsize) #0 {
entry:
  %retval = alloca i32, align 4
  %hash.addr = alloca %struct.Hash*, align 8
  %windowsize.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.Hash* %hash, %struct.Hash** %hash.addr, align 8, !tbaa !2
  store i32 %windowsize, i32* %windowsize.addr, align 4, !tbaa !8
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %call = call i8* @_ZL14lodepng_mallocm(i64 262144)
  %1 = bitcast i8* %call to i32*
  %2 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %head = getelementptr inbounds %struct.Hash, %struct.Hash* %2, i32 0, i32 0
  store i32* %1, i32** %head, align 8, !tbaa !184
  %3 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %conv = zext i32 %3 to i64
  %mul = mul i64 4, %conv
  %call1 = call i8* @_ZL14lodepng_mallocm(i64 %mul)
  %4 = bitcast i8* %call1 to i32*
  %5 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %val = getelementptr inbounds %struct.Hash, %struct.Hash* %5, i32 0, i32 2
  store i32* %4, i32** %val, align 8, !tbaa !186
  %6 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %conv2 = zext i32 %6 to i64
  %mul3 = mul i64 2, %conv2
  %call4 = call i8* @_ZL14lodepng_mallocm(i64 %mul3)
  %7 = bitcast i8* %call4 to i16*
  %8 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chain = getelementptr inbounds %struct.Hash, %struct.Hash* %8, i32 0, i32 1
  store i16* %7, i16** %chain, align 8, !tbaa !187
  %9 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %conv5 = zext i32 %9 to i64
  %mul6 = mul i64 2, %conv5
  %call7 = call i8* @_ZL14lodepng_mallocm(i64 %mul6)
  %10 = bitcast i8* %call7 to i16*
  %11 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %zeros = getelementptr inbounds %struct.Hash, %struct.Hash* %11, i32 0, i32 5
  store i16* %10, i16** %zeros, align 8, !tbaa !188
  %call8 = call i8* @_ZL14lodepng_mallocm(i64 1036)
  %12 = bitcast i8* %call8 to i32*
  %13 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %headz = getelementptr inbounds %struct.Hash, %struct.Hash* %13, i32 0, i32 3
  store i32* %12, i32** %headz, align 8, !tbaa !189
  %14 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %conv9 = zext i32 %14 to i64
  %mul10 = mul i64 2, %conv9
  %call11 = call i8* @_ZL14lodepng_mallocm(i64 %mul10)
  %15 = bitcast i8* %call11 to i16*
  %16 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chainz = getelementptr inbounds %struct.Hash, %struct.Hash* %16, i32 0, i32 4
  store i16* %15, i16** %chainz, align 8, !tbaa !190
  %17 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %head12 = getelementptr inbounds %struct.Hash, %struct.Hash* %17, i32 0, i32 0
  %18 = load i32*, i32** %head12, align 8, !tbaa !184
  %tobool = icmp ne i32* %18, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %19 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chain13 = getelementptr inbounds %struct.Hash, %struct.Hash* %19, i32 0, i32 1
  %20 = load i16*, i16** %chain13, align 8, !tbaa !187
  %tobool14 = icmp ne i16* %20, null
  br i1 %tobool14, label %lor.lhs.false15, label %if.then

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %21 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %val16 = getelementptr inbounds %struct.Hash, %struct.Hash* %21, i32 0, i32 2
  %22 = load i32*, i32** %val16, align 8, !tbaa !186
  %tobool17 = icmp ne i32* %22, null
  br i1 %tobool17, label %lor.lhs.false18, label %if.then

lor.lhs.false18:                                  ; preds = %lor.lhs.false15
  %23 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %headz19 = getelementptr inbounds %struct.Hash, %struct.Hash* %23, i32 0, i32 3
  %24 = load i32*, i32** %headz19, align 8, !tbaa !189
  %tobool20 = icmp ne i32* %24, null
  br i1 %tobool20, label %lor.lhs.false21, label %if.then

lor.lhs.false21:                                  ; preds = %lor.lhs.false18
  %25 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chainz22 = getelementptr inbounds %struct.Hash, %struct.Hash* %25, i32 0, i32 4
  %26 = load i16*, i16** %chainz22, align 8, !tbaa !190
  %tobool23 = icmp ne i16* %26, null
  br i1 %tobool23, label %lor.lhs.false24, label %if.then

lor.lhs.false24:                                  ; preds = %lor.lhs.false21
  %27 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %zeros25 = getelementptr inbounds %struct.Hash, %struct.Hash* %27, i32 0, i32 5
  %28 = load i16*, i16** %zeros25, align 8, !tbaa !188
  %tobool26 = icmp ne i16* %28, null
  br i1 %tobool26, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false24, %lor.lhs.false21, %lor.lhs.false18, %lor.lhs.false15, %lor.lhs.false, %entry
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false24
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %29 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ne i32 %29, 65536
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %head27 = getelementptr inbounds %struct.Hash, %struct.Hash* %30, i32 0, i32 0
  %31 = load i32*, i32** %head27, align 8, !tbaa !184
  %32 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %32 to i64
  %arrayidx = getelementptr inbounds i32, i32* %31, i64 %idxprom
  store i32 -1, i32* %arrayidx, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %33 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %33, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond28

for.cond28:                                       ; preds = %for.inc34, %for.end
  %34 = load i32, i32* %i, align 4, !tbaa !8
  %35 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %cmp29 = icmp ne i32 %34, %35
  br i1 %cmp29, label %for.body30, label %for.end36

for.body30:                                       ; preds = %for.cond28
  %36 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %val31 = getelementptr inbounds %struct.Hash, %struct.Hash* %36, i32 0, i32 2
  %37 = load i32*, i32** %val31, align 8, !tbaa !186
  %38 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom32 = zext i32 %38 to i64
  %arrayidx33 = getelementptr inbounds i32, i32* %37, i64 %idxprom32
  store i32 -1, i32* %arrayidx33, align 4, !tbaa !8
  br label %for.inc34

for.inc34:                                        ; preds = %for.body30
  %39 = load i32, i32* %i, align 4, !tbaa !8
  %inc35 = add i32 %39, 1
  store i32 %inc35, i32* %i, align 4, !tbaa !8
  br label %for.cond28

for.end36:                                        ; preds = %for.cond28
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc44, %for.end36
  %40 = load i32, i32* %i, align 4, !tbaa !8
  %41 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %cmp38 = icmp ne i32 %40, %41
  br i1 %cmp38, label %for.body39, label %for.end46

for.body39:                                       ; preds = %for.cond37
  %42 = load i32, i32* %i, align 4, !tbaa !8
  %conv40 = trunc i32 %42 to i16
  %43 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chain41 = getelementptr inbounds %struct.Hash, %struct.Hash* %43, i32 0, i32 1
  %44 = load i16*, i16** %chain41, align 8, !tbaa !187
  %45 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom42 = zext i32 %45 to i64
  %arrayidx43 = getelementptr inbounds i16, i16* %44, i64 %idxprom42
  store i16 %conv40, i16* %arrayidx43, align 2, !tbaa !89
  br label %for.inc44

for.inc44:                                        ; preds = %for.body39
  %46 = load i32, i32* %i, align 4, !tbaa !8
  %inc45 = add i32 %46, 1
  store i32 %inc45, i32* %i, align 4, !tbaa !8
  br label %for.cond37

for.end46:                                        ; preds = %for.cond37
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc54, %for.end46
  %47 = load i32, i32* %i, align 4, !tbaa !8
  %conv48 = zext i32 %47 to i64
  %cmp49 = icmp ule i64 %conv48, 258
  br i1 %cmp49, label %for.body50, label %for.end56

for.body50:                                       ; preds = %for.cond47
  %48 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %headz51 = getelementptr inbounds %struct.Hash, %struct.Hash* %48, i32 0, i32 3
  %49 = load i32*, i32** %headz51, align 8, !tbaa !189
  %50 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom52 = zext i32 %50 to i64
  %arrayidx53 = getelementptr inbounds i32, i32* %49, i64 %idxprom52
  store i32 -1, i32* %arrayidx53, align 4, !tbaa !8
  br label %for.inc54

for.inc54:                                        ; preds = %for.body50
  %51 = load i32, i32* %i, align 4, !tbaa !8
  %inc55 = add i32 %51, 1
  store i32 %inc55, i32* %i, align 4, !tbaa !8
  br label %for.cond47

for.end56:                                        ; preds = %for.cond47
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc64, %for.end56
  %52 = load i32, i32* %i, align 4, !tbaa !8
  %53 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %cmp58 = icmp ne i32 %52, %53
  br i1 %cmp58, label %for.body59, label %for.end66

for.body59:                                       ; preds = %for.cond57
  %54 = load i32, i32* %i, align 4, !tbaa !8
  %conv60 = trunc i32 %54 to i16
  %55 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chainz61 = getelementptr inbounds %struct.Hash, %struct.Hash* %55, i32 0, i32 4
  %56 = load i16*, i16** %chainz61, align 8, !tbaa !190
  %57 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom62 = zext i32 %57 to i64
  %arrayidx63 = getelementptr inbounds i16, i16* %56, i64 %idxprom62
  store i16 %conv60, i16* %arrayidx63, align 2, !tbaa !89
  br label %for.inc64

for.inc64:                                        ; preds = %for.body59
  %58 = load i32, i32* %i, align 4, !tbaa !8
  %inc65 = add i32 %58, 1
  store i32 %inc65, i32* %i, align 4, !tbaa !8
  br label %for.cond57

for.end66:                                        ; preds = %for.cond57
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end66, %if.then
  %59 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #16
  %60 = load i32, i32* %retval, align 4
  ret i32 %60
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL12deflateFixedP16LodePNGBitWriterP4HashPKhmmPK23LodePNGCompressSettingsj(%struct.LodePNGBitWriter* %writer, %struct.Hash* %hash, i8* %data, i64 %datapos, i64 %dataend, %struct.LodePNGCompressSettings* %settings, i32 %final) #0 {
entry:
  %writer.addr = alloca %struct.LodePNGBitWriter*, align 8
  %hash.addr = alloca %struct.Hash*, align 8
  %data.addr = alloca i8*, align 8
  %datapos.addr = alloca i64, align 8
  %dataend.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %final.addr = alloca i32, align 4
  %tree_ll = alloca %struct.HuffmanTree, align 8
  %tree_d = alloca %struct.HuffmanTree, align 8
  %BFINAL = alloca i32, align 4
  %error = alloca i32, align 4
  %i = alloca i64, align 8
  %lz77_encoded = alloca %struct.uivector, align 8
  store %struct.LodePNGBitWriter* %writer, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  store %struct.Hash* %hash, %struct.Hash** %hash.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %datapos, i64* %datapos.addr, align 8, !tbaa !6
  store i64 %dataend, i64* %dataend.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  store i32 %final, i32* %final.addr, align 4, !tbaa !8
  %0 = bitcast %struct.HuffmanTree* %tree_ll to i8*
  call void @llvm.lifetime.start(i64 40, i8* %0) #16
  %1 = bitcast %struct.HuffmanTree* %tree_d to i8*
  call void @llvm.lifetime.start(i64 40, i8* %1) #16
  %2 = bitcast i32* %BFINAL to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i32, i32* %final.addr, align 4, !tbaa !8
  store i32 %3, i32* %BFINAL, align 4, !tbaa !8
  %4 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %5 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  call void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree_ll)
  call void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree_d)
  %call = call i32 @_ZL23generateFixedLitLenTreeP11HuffmanTree(%struct.HuffmanTree* %tree_ll)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %6 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 @_ZL25generateFixedDistanceTreeP11HuffmanTree(%struct.HuffmanTree* %tree_d)
  store i32 %call1, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %error, align 4, !tbaa !8
  %tobool2 = icmp ne i32 %7, 0
  br i1 %tobool2, label %if.end23, label %if.then3

if.then3:                                         ; preds = %if.end
  %8 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %9 = load i32, i32* %BFINAL, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %8, i32 %9, i64 1)
  %10 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %10, i32 1, i64 1)
  %11 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %11, i32 0, i64 1)
  %12 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %use_lz77 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %12, i32 0, i32 1
  %13 = load i32, i32* %use_lz77, align 4, !tbaa !42
  %tobool4 = icmp ne i32 %13, 0
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then3
  %14 = bitcast %struct.uivector* %lz77_encoded to i8*
  call void @llvm.lifetime.start(i64 24, i8* %14) #16
  call void @_ZL13uivector_initP8uivector(%struct.uivector* %lz77_encoded)
  %15 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %16 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %17 = load i64, i64* %datapos.addr, align 8, !tbaa !6
  %18 = load i64, i64* %dataend.addr, align 8, !tbaa !6
  %19 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %windowsize = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %19, i32 0, i32 2
  %20 = load i32, i32* %windowsize, align 8, !tbaa !38
  %21 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %minmatch = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %21, i32 0, i32 3
  %22 = load i32, i32* %minmatch, align 4, !tbaa !43
  %23 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %nicematch = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %23, i32 0, i32 4
  %24 = load i32, i32* %nicematch, align 8, !tbaa !44
  %25 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %lazymatching = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %25, i32 0, i32 5
  %26 = load i32, i32* %lazymatching, align 4, !tbaa !45
  %call6 = call i32 @_ZL10encodeLZ77P8uivectorP4HashPKhmmjjjj(%struct.uivector* %lz77_encoded, %struct.Hash* %15, i8* %16, i64 %17, i64 %18, i32 %20, i32 %22, i32 %24, i32 %26)
  store i32 %call6, i32* %error, align 4, !tbaa !8
  %27 = load i32, i32* %error, align 4, !tbaa !8
  %tobool7 = icmp ne i32 %27, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then5
  %28 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  call void @_ZL13writeLZ77dataP16LodePNGBitWriterPK8uivectorPK11HuffmanTreeS6_(%struct.LodePNGBitWriter* %28, %struct.uivector* %lz77_encoded, %struct.HuffmanTree* %tree_ll, %struct.HuffmanTree* %tree_d)
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then5
  %29 = bitcast %struct.uivector* %lz77_encoded to i8*
  call void @_ZL16uivector_cleanupPv(i8* %29)
  %30 = bitcast %struct.uivector* %lz77_encoded to i8*
  call void @llvm.lifetime.end(i64 24, i8* %30) #16
  br label %if.end14

if.else:                                          ; preds = %if.then3
  %31 = load i64, i64* %datapos.addr, align 8, !tbaa !6
  store i64 %31, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %32 = load i64, i64* %i, align 8, !tbaa !6
  %33 = load i64, i64* %dataend.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %32, %33
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %codes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 0
  %35 = load i32*, i32** %codes, align 8, !tbaa !174
  %36 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %37 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %36, i64 %37
  %38 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %idxprom = zext i8 %38 to i64
  %arrayidx10 = getelementptr inbounds i32, i32* %35, i64 %idxprom
  %39 = load i32, i32* %arrayidx10, align 4, !tbaa !8
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 1
  %40 = load i32*, i32** %lengths, align 8, !tbaa !176
  %41 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %42 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx11 = getelementptr inbounds i8, i8* %41, i64 %42
  %43 = load i8, i8* %arrayidx11, align 1, !tbaa !16
  %idxprom12 = zext i8 %43 to i64
  %arrayidx13 = getelementptr inbounds i32, i32* %40, i64 %idxprom12
  %44 = load i32, i32* %arrayidx13, align 4, !tbaa !8
  %conv = zext i32 %44 to i64
  call void @_ZL17writeBitsReversedP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %34, i32 %39, i64 %conv)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %45 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %45, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end14

if.end14:                                         ; preds = %for.end, %if.end9
  %46 = load i32, i32* %error, align 4, !tbaa !8
  %tobool15 = icmp ne i32 %46, 0
  br i1 %tobool15, label %if.end22, label %if.then16

if.then16:                                        ; preds = %if.end14
  %47 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %codes17 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 0
  %48 = load i32*, i32** %codes17, align 8, !tbaa !174
  %arrayidx18 = getelementptr inbounds i32, i32* %48, i64 256
  %49 = load i32, i32* %arrayidx18, align 4, !tbaa !8
  %lengths19 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 1
  %50 = load i32*, i32** %lengths19, align 8, !tbaa !176
  %arrayidx20 = getelementptr inbounds i32, i32* %50, i64 256
  %51 = load i32, i32* %arrayidx20, align 4, !tbaa !8
  %conv21 = zext i32 %51 to i64
  call void @_ZL17writeBitsReversedP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %47, i32 %49, i64 %conv21)
  br label %if.end22

if.end22:                                         ; preds = %if.then16, %if.end14
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.end
  call void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree_ll)
  call void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree_d)
  %52 = load i32, i32* %error, align 4, !tbaa !8
  %53 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #16
  %54 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %54) #16
  %55 = bitcast i32* %BFINAL to i8*
  call void @llvm.lifetime.end(i64 4, i8* %55) #16
  %56 = bitcast %struct.HuffmanTree* %tree_d to i8*
  call void @llvm.lifetime.end(i64 40, i8* %56) #16
  %57 = bitcast %struct.HuffmanTree* %tree_ll to i8*
  call void @llvm.lifetime.end(i64 40, i8* %57) #16
  ret i32 %52
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL14deflateDynamicP16LodePNGBitWriterP4HashPKhmmPK23LodePNGCompressSettingsj(%struct.LodePNGBitWriter* %writer, %struct.Hash* %hash, i8* %data, i64 %datapos, i64 %dataend, %struct.LodePNGCompressSettings* %settings, i32 %final) #0 {
entry:
  %writer.addr = alloca %struct.LodePNGBitWriter*, align 8
  %hash.addr = alloca %struct.Hash*, align 8
  %data.addr = alloca i8*, align 8
  %datapos.addr = alloca i64, align 8
  %dataend.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGCompressSettings*, align 8
  %final.addr = alloca i32, align 4
  %error = alloca i32, align 4
  %lz77_encoded = alloca %struct.uivector, align 8
  %tree_ll = alloca %struct.HuffmanTree, align 8
  %tree_d = alloca %struct.HuffmanTree, align 8
  %tree_cl = alloca %struct.HuffmanTree, align 8
  %frequencies_ll = alloca i32*, align 8
  %frequencies_d = alloca i32*, align 8
  %frequencies_cl = alloca i32*, align 8
  %bitlen_lld = alloca i32*, align 8
  %bitlen_lld_e = alloca i32*, align 8
  %datasize = alloca i64, align 8
  %BFINAL = alloca i32, align 4
  %i = alloca i64, align 8
  %numcodes_ll = alloca i64, align 8
  %numcodes_d = alloca i64, align 8
  %numcodes_lld = alloca i64, align 8
  %numcodes_lld_e = alloca i64, align 8
  %numcodes_cl = alloca i64, align 8
  %HLIT = alloca i32, align 4
  %HDIST = alloca i32, align 4
  %HCLEN = alloca i32, align 4
  %symbol = alloca i32, align 4
  %dist = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i64, align 8
  %num = alloca i32, align 4
  %rest = alloca i32, align 4
  store %struct.LodePNGBitWriter* %writer, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  store %struct.Hash* %hash, %struct.Hash** %hash.addr, align 8, !tbaa !2
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %datapos, i64* %datapos.addr, align 8, !tbaa !6
  store i64 %dataend, i64* %dataend.addr, align 8, !tbaa !6
  store %struct.LodePNGCompressSettings* %settings, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  store i32 %final, i32* %final.addr, align 4, !tbaa !8
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %1 = bitcast %struct.uivector* %lz77_encoded to i8*
  call void @llvm.lifetime.start(i64 24, i8* %1) #16
  %2 = bitcast %struct.HuffmanTree* %tree_ll to i8*
  call void @llvm.lifetime.start(i64 40, i8* %2) #16
  %3 = bitcast %struct.HuffmanTree* %tree_d to i8*
  call void @llvm.lifetime.start(i64 40, i8* %3) #16
  %4 = bitcast %struct.HuffmanTree* %tree_cl to i8*
  call void @llvm.lifetime.start(i64 40, i8* %4) #16
  %5 = bitcast i32** %frequencies_ll to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  store i32* null, i32** %frequencies_ll, align 8, !tbaa !2
  %6 = bitcast i32** %frequencies_d to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  store i32* null, i32** %frequencies_d, align 8, !tbaa !2
  %7 = bitcast i32** %frequencies_cl to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  store i32* null, i32** %frequencies_cl, align 8, !tbaa !2
  %8 = bitcast i32** %bitlen_lld to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  store i32* null, i32** %bitlen_lld, align 8, !tbaa !2
  %9 = bitcast i32** %bitlen_lld_e to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #16
  store i32* null, i32** %bitlen_lld_e, align 8, !tbaa !2
  %10 = bitcast i64* %datasize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %10) #16
  %11 = load i64, i64* %dataend.addr, align 8, !tbaa !6
  %12 = load i64, i64* %datapos.addr, align 8, !tbaa !6
  %sub = sub i64 %11, %12
  store i64 %sub, i64* %datasize, align 8, !tbaa !6
  %13 = bitcast i32* %BFINAL to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #16
  %14 = load i32, i32* %final.addr, align 4, !tbaa !8
  store i32 %14, i32* %BFINAL, align 4, !tbaa !8
  %15 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #16
  %16 = bitcast i64* %numcodes_ll to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #16
  %17 = bitcast i64* %numcodes_d to i8*
  call void @llvm.lifetime.start(i64 8, i8* %17) #16
  %18 = bitcast i64* %numcodes_lld to i8*
  call void @llvm.lifetime.start(i64 8, i8* %18) #16
  %19 = bitcast i64* %numcodes_lld_e to i8*
  call void @llvm.lifetime.start(i64 8, i8* %19) #16
  %20 = bitcast i64* %numcodes_cl to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #16
  %21 = bitcast i32* %HLIT to i8*
  call void @llvm.lifetime.start(i64 4, i8* %21) #16
  %22 = bitcast i32* %HDIST to i8*
  call void @llvm.lifetime.start(i64 4, i8* %22) #16
  %23 = bitcast i32* %HCLEN to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #16
  call void @_ZL13uivector_initP8uivector(%struct.uivector* %lz77_encoded)
  call void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree_ll)
  call void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree_d)
  call void @_ZL16HuffmanTree_initP11HuffmanTree(%struct.HuffmanTree* %tree_cl)
  %call = call i8* @_ZL14lodepng_mallocm(i64 1144)
  %24 = bitcast i8* %call to i32*
  store i32* %24, i32** %frequencies_ll, align 8, !tbaa !2
  %call1 = call i8* @_ZL14lodepng_mallocm(i64 120)
  %25 = bitcast i8* %call1 to i32*
  store i32* %25, i32** %frequencies_d, align 8, !tbaa !2
  %call2 = call i8* @_ZL14lodepng_mallocm(i64 76)
  %26 = bitcast i8* %call2 to i32*
  store i32* %26, i32** %frequencies_cl, align 8, !tbaa !2
  %27 = load i32*, i32** %frequencies_ll, align 8, !tbaa !2
  %tobool = icmp ne i32* %27, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %28 = load i32*, i32** %frequencies_d, align 8, !tbaa !2
  %tobool3 = icmp ne i32* %28, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %29 = load i32*, i32** %frequencies_cl, align 8, !tbaa !2
  %tobool5 = icmp ne i32* %29, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false4
  br label %while.cond

while.cond:                                       ; preds = %if.end
  %30 = load i32, i32* %error, align 4, !tbaa !8
  %tobool6 = icmp ne i32 %30, 0
  %lnot = xor i1 %tobool6, true
  br i1 %lnot, label %while.body, label %while.end257

while.body:                                       ; preds = %while.cond
  %31 = load i32*, i32** %frequencies_ll, align 8, !tbaa !2
  %32 = bitcast i32* %31 to i8*
  call void @_ZL14lodepng_memsetPvim(i8* %32, i32 0, i64 1144)
  %33 = load i32*, i32** %frequencies_d, align 8, !tbaa !2
  %34 = bitcast i32* %33 to i8*
  call void @_ZL14lodepng_memsetPvim(i8* %34, i32 0, i64 120)
  %35 = load i32*, i32** %frequencies_cl, align 8, !tbaa !2
  %36 = bitcast i32* %35 to i8*
  call void @_ZL14lodepng_memsetPvim(i8* %36, i32 0, i64 76)
  %37 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %use_lz77 = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %37, i32 0, i32 1
  %38 = load i32, i32* %use_lz77, align 4, !tbaa !42
  %tobool7 = icmp ne i32 %38, 0
  br i1 %tobool7, label %if.then8, label %if.else

if.then8:                                         ; preds = %while.body
  %39 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %40 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %41 = load i64, i64* %datapos.addr, align 8, !tbaa !6
  %42 = load i64, i64* %dataend.addr, align 8, !tbaa !6
  %43 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %windowsize = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %43, i32 0, i32 2
  %44 = load i32, i32* %windowsize, align 8, !tbaa !38
  %45 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %minmatch = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %45, i32 0, i32 3
  %46 = load i32, i32* %minmatch, align 4, !tbaa !43
  %47 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %nicematch = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %47, i32 0, i32 4
  %48 = load i32, i32* %nicematch, align 8, !tbaa !44
  %49 = load %struct.LodePNGCompressSettings*, %struct.LodePNGCompressSettings** %settings.addr, align 8, !tbaa !2
  %lazymatching = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %49, i32 0, i32 5
  %50 = load i32, i32* %lazymatching, align 4, !tbaa !45
  %call9 = call i32 @_ZL10encodeLZ77P8uivectorP4HashPKhmmjjjj(%struct.uivector* %lz77_encoded, %struct.Hash* %39, i8* %40, i64 %41, i64 %42, i32 %44, i32 %46, i32 %48, i32 %50)
  store i32 %call9, i32* %error, align 4, !tbaa !8
  %51 = load i32, i32* %error, align 4, !tbaa !8
  %tobool10 = icmp ne i32 %51, 0
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then8
  br label %while.end257

if.end12:                                         ; preds = %if.then8
  br label %if.end20

if.else:                                          ; preds = %while.body
  %52 = load i64, i64* %datasize, align 8, !tbaa !6
  %call13 = call i32 @_ZL15uivector_resizeP8uivectorm(%struct.uivector* %lz77_encoded, i64 %52)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %if.else
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %while.end257

if.end16:                                         ; preds = %if.else
  %53 = load i64, i64* %datapos.addr, align 8, !tbaa !6
  store i64 %53, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end16
  %54 = load i64, i64* %i, align 8, !tbaa !6
  %55 = load i64, i64* %dataend.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %54, %55
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %56 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %57 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %56, i64 %57
  %58 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %58 to i32
  %data17 = getelementptr inbounds %struct.uivector, %struct.uivector* %lz77_encoded, i32 0, i32 0
  %59 = load i32*, i32** %data17, align 8, !tbaa !191
  %60 = load i64, i64* %i, align 8, !tbaa !6
  %61 = load i64, i64* %datapos.addr, align 8, !tbaa !6
  %sub18 = sub i64 %60, %61
  %arrayidx19 = getelementptr inbounds i32, i32* %59, i64 %sub18
  store i32 %conv, i32* %arrayidx19, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %62 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %62, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end20

if.end20:                                         ; preds = %for.end, %if.end12
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc37, %if.end20
  %63 = load i64, i64* %i, align 8, !tbaa !6
  %size = getelementptr inbounds %struct.uivector, %struct.uivector* %lz77_encoded, i32 0, i32 1
  %64 = load i64, i64* %size, align 8, !tbaa !193
  %cmp22 = icmp ne i64 %63, %64
  br i1 %cmp22, label %for.body23, label %for.end39

for.body23:                                       ; preds = %for.cond21
  %65 = bitcast i32* %symbol to i8*
  call void @llvm.lifetime.start(i64 4, i8* %65) #16
  %data24 = getelementptr inbounds %struct.uivector, %struct.uivector* %lz77_encoded, i32 0, i32 0
  %66 = load i32*, i32** %data24, align 8, !tbaa !191
  %67 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx25 = getelementptr inbounds i32, i32* %66, i64 %67
  %68 = load i32, i32* %arrayidx25, align 4, !tbaa !8
  store i32 %68, i32* %symbol, align 4, !tbaa !8
  %69 = load i32*, i32** %frequencies_ll, align 8, !tbaa !2
  %70 = load i32, i32* %symbol, align 4, !tbaa !8
  %idxprom = zext i32 %70 to i64
  %arrayidx26 = getelementptr inbounds i32, i32* %69, i64 %idxprom
  %71 = load i32, i32* %arrayidx26, align 4, !tbaa !8
  %inc27 = add i32 %71, 1
  store i32 %inc27, i32* %arrayidx26, align 4, !tbaa !8
  %72 = load i32, i32* %symbol, align 4, !tbaa !8
  %cmp28 = icmp ugt i32 %72, 256
  br i1 %cmp28, label %if.then29, label %if.end36

if.then29:                                        ; preds = %for.body23
  %73 = bitcast i32* %dist to i8*
  call void @llvm.lifetime.start(i64 4, i8* %73) #16
  %data30 = getelementptr inbounds %struct.uivector, %struct.uivector* %lz77_encoded, i32 0, i32 0
  %74 = load i32*, i32** %data30, align 8, !tbaa !191
  %75 = load i64, i64* %i, align 8, !tbaa !6
  %add = add i64 %75, 2
  %arrayidx31 = getelementptr inbounds i32, i32* %74, i64 %add
  %76 = load i32, i32* %arrayidx31, align 4, !tbaa !8
  store i32 %76, i32* %dist, align 4, !tbaa !8
  %77 = load i32*, i32** %frequencies_d, align 8, !tbaa !2
  %78 = load i32, i32* %dist, align 4, !tbaa !8
  %idxprom32 = zext i32 %78 to i64
  %arrayidx33 = getelementptr inbounds i32, i32* %77, i64 %idxprom32
  %79 = load i32, i32* %arrayidx33, align 4, !tbaa !8
  %inc34 = add i32 %79, 1
  store i32 %inc34, i32* %arrayidx33, align 4, !tbaa !8
  %80 = load i64, i64* %i, align 8, !tbaa !6
  %add35 = add i64 %80, 3
  store i64 %add35, i64* %i, align 8, !tbaa !6
  %81 = bitcast i32* %dist to i8*
  call void @llvm.lifetime.end(i64 4, i8* %81) #16
  br label %if.end36

if.end36:                                         ; preds = %if.then29, %for.body23
  %82 = bitcast i32* %symbol to i8*
  call void @llvm.lifetime.end(i64 4, i8* %82) #16
  br label %for.inc37

for.inc37:                                        ; preds = %if.end36
  %83 = load i64, i64* %i, align 8, !tbaa !6
  %inc38 = add i64 %83, 1
  store i64 %inc38, i64* %i, align 8, !tbaa !6
  br label %for.cond21

for.end39:                                        ; preds = %for.cond21
  %84 = load i32*, i32** %frequencies_ll, align 8, !tbaa !2
  %arrayidx40 = getelementptr inbounds i32, i32* %84, i64 256
  store i32 1, i32* %arrayidx40, align 4, !tbaa !8
  %85 = load i32*, i32** %frequencies_ll, align 8, !tbaa !2
  %call41 = call i32 @_ZL31HuffmanTree_makeFromFrequenciesP11HuffmanTreePKjmmj(%struct.HuffmanTree* %tree_ll, i32* %85, i64 257, i64 286, i32 15)
  store i32 %call41, i32* %error, align 4, !tbaa !8
  %86 = load i32, i32* %error, align 4, !tbaa !8
  %tobool42 = icmp ne i32 %86, 0
  br i1 %tobool42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end39
  br label %while.end257

if.end44:                                         ; preds = %for.end39
  %87 = load i32*, i32** %frequencies_d, align 8, !tbaa !2
  %call45 = call i32 @_ZL31HuffmanTree_makeFromFrequenciesP11HuffmanTreePKjmmj(%struct.HuffmanTree* %tree_d, i32* %87, i64 2, i64 30, i32 15)
  store i32 %call45, i32* %error, align 4, !tbaa !8
  %88 = load i32, i32* %error, align 4, !tbaa !8
  %tobool46 = icmp ne i32 %88, 0
  br i1 %tobool46, label %if.then47, label %if.end48

if.then47:                                        ; preds = %if.end44
  br label %while.end257

if.end48:                                         ; preds = %if.end44
  %numcodes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 3
  %89 = load i32, i32* %numcodes, align 4, !tbaa !179
  %cmp49 = icmp ult i32 %89, 286
  br i1 %cmp49, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end48
  %numcodes50 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 3
  %90 = load i32, i32* %numcodes50, align 4, !tbaa !179
  br label %cond.end

cond.false:                                       ; preds = %if.end48
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %90, %cond.true ], [ 286, %cond.false ]
  %conv51 = zext i32 %cond to i64
  store i64 %conv51, i64* %numcodes_ll, align 8, !tbaa !6
  %numcodes52 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_d, i32 0, i32 3
  %91 = load i32, i32* %numcodes52, align 4, !tbaa !179
  %cmp53 = icmp ult i32 %91, 30
  br i1 %cmp53, label %cond.true54, label %cond.false56

cond.true54:                                      ; preds = %cond.end
  %numcodes55 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_d, i32 0, i32 3
  %92 = load i32, i32* %numcodes55, align 4, !tbaa !179
  br label %cond.end57

cond.false56:                                     ; preds = %cond.end
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false56, %cond.true54
  %cond58 = phi i32 [ %92, %cond.true54 ], [ 30, %cond.false56 ]
  %conv59 = zext i32 %cond58 to i64
  store i64 %conv59, i64* %numcodes_d, align 8, !tbaa !6
  %93 = load i64, i64* %numcodes_ll, align 8, !tbaa !6
  %94 = load i64, i64* %numcodes_d, align 8, !tbaa !6
  %add60 = add i64 %93, %94
  store i64 %add60, i64* %numcodes_lld, align 8, !tbaa !6
  %95 = load i64, i64* %numcodes_lld, align 8, !tbaa !6
  %mul = mul i64 %95, 4
  %call61 = call i8* @_ZL14lodepng_mallocm(i64 %mul)
  %96 = bitcast i8* %call61 to i32*
  store i32* %96, i32** %bitlen_lld, align 8, !tbaa !2
  %97 = load i64, i64* %numcodes_lld, align 8, !tbaa !6
  %mul62 = mul i64 %97, 4
  %call63 = call i8* @_ZL14lodepng_mallocm(i64 %mul62)
  %98 = bitcast i8* %call63 to i32*
  store i32* %98, i32** %bitlen_lld_e, align 8, !tbaa !2
  %99 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %tobool64 = icmp ne i32* %99, null
  br i1 %tobool64, label %lor.lhs.false65, label %if.then67

lor.lhs.false65:                                  ; preds = %cond.end57
  %100 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %tobool66 = icmp ne i32* %100, null
  br i1 %tobool66, label %if.end68, label %if.then67

if.then67:                                        ; preds = %lor.lhs.false65, %cond.end57
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %while.end257

if.end68:                                         ; preds = %lor.lhs.false65
  store i64 0, i64* %numcodes_lld_e, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond69

for.cond69:                                       ; preds = %for.inc74, %if.end68
  %101 = load i64, i64* %i, align 8, !tbaa !6
  %102 = load i64, i64* %numcodes_ll, align 8, !tbaa !6
  %cmp70 = icmp ne i64 %101, %102
  br i1 %cmp70, label %for.body71, label %for.end76

for.body71:                                       ; preds = %for.cond69
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 1
  %103 = load i32*, i32** %lengths, align 8, !tbaa !176
  %104 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx72 = getelementptr inbounds i32, i32* %103, i64 %104
  %105 = load i32, i32* %arrayidx72, align 4, !tbaa !8
  %106 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %107 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx73 = getelementptr inbounds i32, i32* %106, i64 %107
  store i32 %105, i32* %arrayidx73, align 4, !tbaa !8
  br label %for.inc74

for.inc74:                                        ; preds = %for.body71
  %108 = load i64, i64* %i, align 8, !tbaa !6
  %inc75 = add i64 %108, 1
  store i64 %inc75, i64* %i, align 8, !tbaa !6
  br label %for.cond69

for.end76:                                        ; preds = %for.cond69
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc84, %for.end76
  %109 = load i64, i64* %i, align 8, !tbaa !6
  %110 = load i64, i64* %numcodes_d, align 8, !tbaa !6
  %cmp78 = icmp ne i64 %109, %110
  br i1 %cmp78, label %for.body79, label %for.end86

for.body79:                                       ; preds = %for.cond77
  %lengths80 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_d, i32 0, i32 1
  %111 = load i32*, i32** %lengths80, align 8, !tbaa !176
  %112 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx81 = getelementptr inbounds i32, i32* %111, i64 %112
  %113 = load i32, i32* %arrayidx81, align 4, !tbaa !8
  %114 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %115 = load i64, i64* %numcodes_ll, align 8, !tbaa !6
  %116 = load i64, i64* %i, align 8, !tbaa !6
  %add82 = add i64 %115, %116
  %arrayidx83 = getelementptr inbounds i32, i32* %114, i64 %add82
  store i32 %113, i32* %arrayidx83, align 4, !tbaa !8
  br label %for.inc84

for.inc84:                                        ; preds = %for.body79
  %117 = load i64, i64* %i, align 8, !tbaa !6
  %inc85 = add i64 %117, 1
  store i64 %inc85, i64* %i, align 8, !tbaa !6
  br label %for.cond77

for.end86:                                        ; preds = %for.cond77
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond87

for.cond87:                                       ; preds = %for.inc163, %for.end86
  %118 = load i64, i64* %i, align 8, !tbaa !6
  %119 = load i64, i64* %numcodes_lld, align 8, !tbaa !6
  %cmp88 = icmp ne i64 %118, %119
  br i1 %cmp88, label %for.body89, label %for.end165

for.body89:                                       ; preds = %for.cond87
  %120 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start(i64 4, i8* %120) #16
  store i32 0, i32* %j, align 4, !tbaa !8
  br label %while.cond90

while.cond90:                                     ; preds = %while.body101, %for.body89
  %121 = load i64, i64* %i, align 8, !tbaa !6
  %122 = load i32, i32* %j, align 4, !tbaa !8
  %conv91 = zext i32 %122 to i64
  %add92 = add i64 %121, %conv91
  %add93 = add i64 %add92, 1
  %123 = load i64, i64* %numcodes_lld, align 8, !tbaa !6
  %cmp94 = icmp ult i64 %add93, %123
  br i1 %cmp94, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond90
  %124 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %125 = load i64, i64* %i, align 8, !tbaa !6
  %126 = load i32, i32* %j, align 4, !tbaa !8
  %conv95 = zext i32 %126 to i64
  %add96 = add i64 %125, %conv95
  %add97 = add i64 %add96, 1
  %arrayidx98 = getelementptr inbounds i32, i32* %124, i64 %add97
  %127 = load i32, i32* %arrayidx98, align 4, !tbaa !8
  %128 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %129 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx99 = getelementptr inbounds i32, i32* %128, i64 %129
  %130 = load i32, i32* %arrayidx99, align 4, !tbaa !8
  %cmp100 = icmp eq i32 %127, %130
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond90
  %131 = phi i1 [ false, %while.cond90 ], [ %cmp100, %land.rhs ]
  br i1 %131, label %while.body101, label %while.end

while.body101:                                    ; preds = %land.end
  %132 = load i32, i32* %j, align 4, !tbaa !8
  %inc102 = add i32 %132, 1
  store i32 %inc102, i32* %j, align 4, !tbaa !8
  br label %while.cond90

while.end:                                        ; preds = %land.end
  %133 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %134 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx103 = getelementptr inbounds i32, i32* %133, i64 %134
  %135 = load i32, i32* %arrayidx103, align 4, !tbaa !8
  %cmp104 = icmp eq i32 %135, 0
  br i1 %cmp104, label %land.lhs.true, label %if.else128

land.lhs.true:                                    ; preds = %while.end
  %136 = load i32, i32* %j, align 4, !tbaa !8
  %cmp105 = icmp uge i32 %136, 2
  br i1 %cmp105, label %if.then106, label %if.else128

if.then106:                                       ; preds = %land.lhs.true
  %137 = load i32, i32* %j, align 4, !tbaa !8
  %inc107 = add i32 %137, 1
  store i32 %inc107, i32* %j, align 4, !tbaa !8
  %138 = load i32, i32* %j, align 4, !tbaa !8
  %cmp108 = icmp ule i32 %138, 10
  br i1 %cmp108, label %if.then109, label %if.else115

if.then109:                                       ; preds = %if.then106
  %139 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %140 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc110 = add i64 %140, 1
  store i64 %inc110, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx111 = getelementptr inbounds i32, i32* %139, i64 %140
  store i32 17, i32* %arrayidx111, align 4, !tbaa !8
  %141 = load i32, i32* %j, align 4, !tbaa !8
  %sub112 = sub i32 %141, 3
  %142 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %143 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc113 = add i64 %143, 1
  store i64 %inc113, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx114 = getelementptr inbounds i32, i32* %142, i64 %143
  store i32 %sub112, i32* %arrayidx114, align 4, !tbaa !8
  br label %if.end124

if.else115:                                       ; preds = %if.then106
  %144 = load i32, i32* %j, align 4, !tbaa !8
  %cmp116 = icmp ugt i32 %144, 138
  br i1 %cmp116, label %if.then117, label %if.end118

if.then117:                                       ; preds = %if.else115
  store i32 138, i32* %j, align 4, !tbaa !8
  br label %if.end118

if.end118:                                        ; preds = %if.then117, %if.else115
  %145 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %146 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc119 = add i64 %146, 1
  store i64 %inc119, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx120 = getelementptr inbounds i32, i32* %145, i64 %146
  store i32 18, i32* %arrayidx120, align 4, !tbaa !8
  %147 = load i32, i32* %j, align 4, !tbaa !8
  %sub121 = sub i32 %147, 11
  %148 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %149 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc122 = add i64 %149, 1
  store i64 %inc122, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx123 = getelementptr inbounds i32, i32* %148, i64 %149
  store i32 %sub121, i32* %arrayidx123, align 4, !tbaa !8
  br label %if.end124

if.end124:                                        ; preds = %if.end118, %if.then109
  %150 = load i32, i32* %j, align 4, !tbaa !8
  %sub125 = sub i32 %150, 1
  %conv126 = zext i32 %sub125 to i64
  %151 = load i64, i64* %i, align 8, !tbaa !6
  %add127 = add i64 %151, %conv126
  store i64 %add127, i64* %i, align 8, !tbaa !6
  br label %if.end162

if.else128:                                       ; preds = %land.lhs.true, %while.end
  %152 = load i32, i32* %j, align 4, !tbaa !8
  %cmp129 = icmp uge i32 %152, 3
  br i1 %cmp129, label %if.then130, label %if.else157

if.then130:                                       ; preds = %if.else128
  %153 = bitcast i64* %k to i8*
  call void @llvm.lifetime.start(i64 8, i8* %153) #16
  %154 = bitcast i32* %num to i8*
  call void @llvm.lifetime.start(i64 4, i8* %154) #16
  %155 = load i32, i32* %j, align 4, !tbaa !8
  %div = udiv i32 %155, 6
  store i32 %div, i32* %num, align 4, !tbaa !8
  %156 = bitcast i32* %rest to i8*
  call void @llvm.lifetime.start(i64 4, i8* %156) #16
  %157 = load i32, i32* %j, align 4, !tbaa !8
  %rem = urem i32 %157, 6
  store i32 %rem, i32* %rest, align 4, !tbaa !8
  %158 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %159 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx131 = getelementptr inbounds i32, i32* %158, i64 %159
  %160 = load i32, i32* %arrayidx131, align 4, !tbaa !8
  %161 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %162 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc132 = add i64 %162, 1
  store i64 %inc132, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx133 = getelementptr inbounds i32, i32* %161, i64 %162
  store i32 %160, i32* %arrayidx133, align 4, !tbaa !8
  store i64 0, i64* %k, align 8, !tbaa !6
  br label %for.cond134

for.cond134:                                      ; preds = %for.inc142, %if.then130
  %163 = load i64, i64* %k, align 8, !tbaa !6
  %164 = load i32, i32* %num, align 4, !tbaa !8
  %conv135 = zext i32 %164 to i64
  %cmp136 = icmp ult i64 %163, %conv135
  br i1 %cmp136, label %for.body137, label %for.end144

for.body137:                                      ; preds = %for.cond134
  %165 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %166 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc138 = add i64 %166, 1
  store i64 %inc138, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx139 = getelementptr inbounds i32, i32* %165, i64 %166
  store i32 16, i32* %arrayidx139, align 4, !tbaa !8
  %167 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %168 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc140 = add i64 %168, 1
  store i64 %inc140, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx141 = getelementptr inbounds i32, i32* %167, i64 %168
  store i32 3, i32* %arrayidx141, align 4, !tbaa !8
  br label %for.inc142

for.inc142:                                       ; preds = %for.body137
  %169 = load i64, i64* %k, align 8, !tbaa !6
  %inc143 = add i64 %169, 1
  store i64 %inc143, i64* %k, align 8, !tbaa !6
  br label %for.cond134

for.end144:                                       ; preds = %for.cond134
  %170 = load i32, i32* %rest, align 4, !tbaa !8
  %cmp145 = icmp uge i32 %170, 3
  br i1 %cmp145, label %if.then146, label %if.else152

if.then146:                                       ; preds = %for.end144
  %171 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %172 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc147 = add i64 %172, 1
  store i64 %inc147, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx148 = getelementptr inbounds i32, i32* %171, i64 %172
  store i32 16, i32* %arrayidx148, align 4, !tbaa !8
  %173 = load i32, i32* %rest, align 4, !tbaa !8
  %sub149 = sub i32 %173, 3
  %174 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %175 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc150 = add i64 %175, 1
  store i64 %inc150, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx151 = getelementptr inbounds i32, i32* %174, i64 %175
  store i32 %sub149, i32* %arrayidx151, align 4, !tbaa !8
  br label %if.end154

if.else152:                                       ; preds = %for.end144
  %176 = load i32, i32* %rest, align 4, !tbaa !8
  %177 = load i32, i32* %j, align 4, !tbaa !8
  %sub153 = sub i32 %177, %176
  store i32 %sub153, i32* %j, align 4, !tbaa !8
  br label %if.end154

if.end154:                                        ; preds = %if.else152, %if.then146
  %178 = load i32, i32* %j, align 4, !tbaa !8
  %conv155 = zext i32 %178 to i64
  %179 = load i64, i64* %i, align 8, !tbaa !6
  %add156 = add i64 %179, %conv155
  store i64 %add156, i64* %i, align 8, !tbaa !6
  %180 = bitcast i32* %rest to i8*
  call void @llvm.lifetime.end(i64 4, i8* %180) #16
  %181 = bitcast i32* %num to i8*
  call void @llvm.lifetime.end(i64 4, i8* %181) #16
  %182 = bitcast i64* %k to i8*
  call void @llvm.lifetime.end(i64 8, i8* %182) #16
  br label %if.end161

if.else157:                                       ; preds = %if.else128
  %183 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %184 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx158 = getelementptr inbounds i32, i32* %183, i64 %184
  %185 = load i32, i32* %arrayidx158, align 4, !tbaa !8
  %186 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %187 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %inc159 = add i64 %187, 1
  store i64 %inc159, i64* %numcodes_lld_e, align 8, !tbaa !6
  %arrayidx160 = getelementptr inbounds i32, i32* %186, i64 %187
  store i32 %185, i32* %arrayidx160, align 4, !tbaa !8
  br label %if.end161

if.end161:                                        ; preds = %if.else157, %if.end154
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %if.end124
  %188 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end(i64 4, i8* %188) #16
  br label %for.inc163

for.inc163:                                       ; preds = %if.end162
  %189 = load i64, i64* %i, align 8, !tbaa !6
  %inc164 = add i64 %189, 1
  store i64 %inc164, i64* %i, align 8, !tbaa !6
  br label %for.cond87

for.end165:                                       ; preds = %for.cond87
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond166

for.cond166:                                      ; preds = %for.inc178, %for.end165
  %190 = load i64, i64* %i, align 8, !tbaa !6
  %191 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %cmp167 = icmp ne i64 %190, %191
  br i1 %cmp167, label %for.body168, label %for.end180

for.body168:                                      ; preds = %for.cond166
  %192 = load i32*, i32** %frequencies_cl, align 8, !tbaa !2
  %193 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %194 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx169 = getelementptr inbounds i32, i32* %193, i64 %194
  %195 = load i32, i32* %arrayidx169, align 4, !tbaa !8
  %idxprom170 = zext i32 %195 to i64
  %arrayidx171 = getelementptr inbounds i32, i32* %192, i64 %idxprom170
  %196 = load i32, i32* %arrayidx171, align 4, !tbaa !8
  %inc172 = add i32 %196, 1
  store i32 %inc172, i32* %arrayidx171, align 4, !tbaa !8
  %197 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %198 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx173 = getelementptr inbounds i32, i32* %197, i64 %198
  %199 = load i32, i32* %arrayidx173, align 4, !tbaa !8
  %cmp174 = icmp uge i32 %199, 16
  br i1 %cmp174, label %if.then175, label %if.end177

if.then175:                                       ; preds = %for.body168
  %200 = load i64, i64* %i, align 8, !tbaa !6
  %inc176 = add i64 %200, 1
  store i64 %inc176, i64* %i, align 8, !tbaa !6
  br label %if.end177

if.end177:                                        ; preds = %if.then175, %for.body168
  br label %for.inc178

for.inc178:                                       ; preds = %if.end177
  %201 = load i64, i64* %i, align 8, !tbaa !6
  %inc179 = add i64 %201, 1
  store i64 %inc179, i64* %i, align 8, !tbaa !6
  br label %for.cond166

for.end180:                                       ; preds = %for.cond166
  %202 = load i32*, i32** %frequencies_cl, align 8, !tbaa !2
  %call181 = call i32 @_ZL31HuffmanTree_makeFromFrequenciesP11HuffmanTreePKjmmj(%struct.HuffmanTree* %tree_cl, i32* %202, i64 19, i64 19, i32 7)
  store i32 %call181, i32* %error, align 4, !tbaa !8
  %203 = load i32, i32* %error, align 4, !tbaa !8
  %tobool182 = icmp ne i32 %203, 0
  br i1 %tobool182, label %if.then183, label %if.end184

if.then183:                                       ; preds = %for.end180
  br label %while.end257

if.end184:                                        ; preds = %for.end180
  store i64 19, i64* %numcodes_cl, align 8, !tbaa !6
  br label %while.cond185

while.cond185:                                    ; preds = %while.body195, %if.end184
  %204 = load i64, i64* %numcodes_cl, align 8, !tbaa !6
  %cmp186 = icmp ugt i64 %204, 4
  br i1 %cmp186, label %land.rhs187, label %land.end194

land.rhs187:                                      ; preds = %while.cond185
  %lengths188 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_cl, i32 0, i32 1
  %205 = load i32*, i32** %lengths188, align 8, !tbaa !176
  %206 = load i64, i64* %numcodes_cl, align 8, !tbaa !6
  %sub189 = sub i64 %206, 1
  %arrayidx190 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %sub189
  %207 = load i32, i32* %arrayidx190, align 4, !tbaa !8
  %idxprom191 = zext i32 %207 to i64
  %arrayidx192 = getelementptr inbounds i32, i32* %205, i64 %idxprom191
  %208 = load i32, i32* %arrayidx192, align 4, !tbaa !8
  %cmp193 = icmp eq i32 %208, 0
  br label %land.end194

land.end194:                                      ; preds = %land.rhs187, %while.cond185
  %209 = phi i1 [ false, %while.cond185 ], [ %cmp193, %land.rhs187 ]
  br i1 %209, label %while.body195, label %while.end196

while.body195:                                    ; preds = %land.end194
  %210 = load i64, i64* %numcodes_cl, align 8, !tbaa !6
  %dec = add i64 %210, -1
  store i64 %dec, i64* %numcodes_cl, align 8, !tbaa !6
  br label %while.cond185

while.end196:                                     ; preds = %land.end194
  %211 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %212 = load i32, i32* %BFINAL, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %211, i32 %212, i64 1)
  %213 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %213, i32 0, i64 1)
  %214 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %214, i32 1, i64 1)
  %215 = load i64, i64* %numcodes_ll, align 8, !tbaa !6
  %sub197 = sub i64 %215, 257
  %conv198 = trunc i64 %sub197 to i32
  store i32 %conv198, i32* %HLIT, align 4, !tbaa !8
  %216 = load i64, i64* %numcodes_d, align 8, !tbaa !6
  %sub199 = sub i64 %216, 1
  %conv200 = trunc i64 %sub199 to i32
  store i32 %conv200, i32* %HDIST, align 4, !tbaa !8
  %217 = load i64, i64* %numcodes_cl, align 8, !tbaa !6
  %sub201 = sub i64 %217, 4
  %conv202 = trunc i64 %sub201 to i32
  store i32 %conv202, i32* %HCLEN, align 4, !tbaa !8
  %218 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %219 = load i32, i32* %HLIT, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %218, i32 %219, i64 5)
  %220 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %221 = load i32, i32* %HDIST, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %220, i32 %221, i64 5)
  %222 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %223 = load i32, i32* %HCLEN, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %222, i32 %223, i64 4)
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond203

for.cond203:                                      ; preds = %for.inc210, %while.end196
  %224 = load i64, i64* %i, align 8, !tbaa !6
  %225 = load i64, i64* %numcodes_cl, align 8, !tbaa !6
  %cmp204 = icmp ne i64 %224, %225
  br i1 %cmp204, label %for.body205, label %for.end212

for.body205:                                      ; preds = %for.cond203
  %226 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %lengths206 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_cl, i32 0, i32 1
  %227 = load i32*, i32** %lengths206, align 8, !tbaa !176
  %228 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx207 = getelementptr inbounds [19 x i32], [19 x i32]* @_ZL10CLCL_ORDER, i64 0, i64 %228
  %229 = load i32, i32* %arrayidx207, align 4, !tbaa !8
  %idxprom208 = zext i32 %229 to i64
  %arrayidx209 = getelementptr inbounds i32, i32* %227, i64 %idxprom208
  %230 = load i32, i32* %arrayidx209, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %226, i32 %230, i64 3)
  br label %for.inc210

for.inc210:                                       ; preds = %for.body205
  %231 = load i64, i64* %i, align 8, !tbaa !6
  %inc211 = add i64 %231, 1
  store i64 %inc211, i64* %i, align 8, !tbaa !6
  br label %for.cond203

for.end212:                                       ; preds = %for.cond203
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond213

for.cond213:                                      ; preds = %for.inc244, %for.end212
  %232 = load i64, i64* %i, align 8, !tbaa !6
  %233 = load i64, i64* %numcodes_lld_e, align 8, !tbaa !6
  %cmp214 = icmp ne i64 %232, %233
  br i1 %cmp214, label %for.body215, label %for.end246

for.body215:                                      ; preds = %for.cond213
  %234 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %codes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_cl, i32 0, i32 0
  %235 = load i32*, i32** %codes, align 8, !tbaa !174
  %236 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %237 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx216 = getelementptr inbounds i32, i32* %236, i64 %237
  %238 = load i32, i32* %arrayidx216, align 4, !tbaa !8
  %idxprom217 = zext i32 %238 to i64
  %arrayidx218 = getelementptr inbounds i32, i32* %235, i64 %idxprom217
  %239 = load i32, i32* %arrayidx218, align 4, !tbaa !8
  %lengths219 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_cl, i32 0, i32 1
  %240 = load i32*, i32** %lengths219, align 8, !tbaa !176
  %241 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %242 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx220 = getelementptr inbounds i32, i32* %241, i64 %242
  %243 = load i32, i32* %arrayidx220, align 4, !tbaa !8
  %idxprom221 = zext i32 %243 to i64
  %arrayidx222 = getelementptr inbounds i32, i32* %240, i64 %idxprom221
  %244 = load i32, i32* %arrayidx222, align 4, !tbaa !8
  %conv223 = zext i32 %244 to i64
  call void @_ZL17writeBitsReversedP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %234, i32 %239, i64 %conv223)
  %245 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %246 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx224 = getelementptr inbounds i32, i32* %245, i64 %246
  %247 = load i32, i32* %arrayidx224, align 4, !tbaa !8
  %cmp225 = icmp eq i32 %247, 16
  br i1 %cmp225, label %if.then226, label %if.else229

if.then226:                                       ; preds = %for.body215
  %248 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %249 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %250 = load i64, i64* %i, align 8, !tbaa !6
  %inc227 = add i64 %250, 1
  store i64 %inc227, i64* %i, align 8, !tbaa !6
  %arrayidx228 = getelementptr inbounds i32, i32* %249, i64 %inc227
  %251 = load i32, i32* %arrayidx228, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %248, i32 %251, i64 2)
  br label %if.end243

if.else229:                                       ; preds = %for.body215
  %252 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %253 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx230 = getelementptr inbounds i32, i32* %252, i64 %253
  %254 = load i32, i32* %arrayidx230, align 4, !tbaa !8
  %cmp231 = icmp eq i32 %254, 17
  br i1 %cmp231, label %if.then232, label %if.else235

if.then232:                                       ; preds = %if.else229
  %255 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %256 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %257 = load i64, i64* %i, align 8, !tbaa !6
  %inc233 = add i64 %257, 1
  store i64 %inc233, i64* %i, align 8, !tbaa !6
  %arrayidx234 = getelementptr inbounds i32, i32* %256, i64 %inc233
  %258 = load i32, i32* %arrayidx234, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %255, i32 %258, i64 3)
  br label %if.end242

if.else235:                                       ; preds = %if.else229
  %259 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %260 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx236 = getelementptr inbounds i32, i32* %259, i64 %260
  %261 = load i32, i32* %arrayidx236, align 4, !tbaa !8
  %cmp237 = icmp eq i32 %261, 18
  br i1 %cmp237, label %if.then238, label %if.end241

if.then238:                                       ; preds = %if.else235
  %262 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %263 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %264 = load i64, i64* %i, align 8, !tbaa !6
  %inc239 = add i64 %264, 1
  store i64 %inc239, i64* %i, align 8, !tbaa !6
  %arrayidx240 = getelementptr inbounds i32, i32* %263, i64 %inc239
  %265 = load i32, i32* %arrayidx240, align 4, !tbaa !8
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %262, i32 %265, i64 7)
  br label %if.end241

if.end241:                                        ; preds = %if.then238, %if.else235
  br label %if.end242

if.end242:                                        ; preds = %if.end241, %if.then232
  br label %if.end243

if.end243:                                        ; preds = %if.end242, %if.then226
  br label %for.inc244

for.inc244:                                       ; preds = %if.end243
  %266 = load i64, i64* %i, align 8, !tbaa !6
  %inc245 = add i64 %266, 1
  store i64 %inc245, i64* %i, align 8, !tbaa !6
  br label %for.cond213

for.end246:                                       ; preds = %for.cond213
  %267 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  call void @_ZL13writeLZ77dataP16LodePNGBitWriterPK8uivectorPK11HuffmanTreeS6_(%struct.LodePNGBitWriter* %267, %struct.uivector* %lz77_encoded, %struct.HuffmanTree* %tree_ll, %struct.HuffmanTree* %tree_d)
  %lengths247 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 1
  %268 = load i32*, i32** %lengths247, align 8, !tbaa !176
  %arrayidx248 = getelementptr inbounds i32, i32* %268, i64 256
  %269 = load i32, i32* %arrayidx248, align 4, !tbaa !8
  %cmp249 = icmp eq i32 %269, 0
  br i1 %cmp249, label %if.then250, label %if.end251

if.then250:                                       ; preds = %for.end246
  store i32 64, i32* %error, align 4, !tbaa !8
  br label %while.end257

if.end251:                                        ; preds = %for.end246
  %270 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %codes252 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 0
  %271 = load i32*, i32** %codes252, align 8, !tbaa !174
  %arrayidx253 = getelementptr inbounds i32, i32* %271, i64 256
  %272 = load i32, i32* %arrayidx253, align 4, !tbaa !8
  %lengths254 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %tree_ll, i32 0, i32 1
  %273 = load i32*, i32** %lengths254, align 8, !tbaa !176
  %arrayidx255 = getelementptr inbounds i32, i32* %273, i64 256
  %274 = load i32, i32* %arrayidx255, align 4, !tbaa !8
  %conv256 = zext i32 %274 to i64
  call void @_ZL17writeBitsReversedP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %270, i32 %272, i64 %conv256)
  br label %while.end257

while.end257:                                     ; preds = %if.end251, %if.then250, %if.then183, %if.then67, %if.then47, %if.then43, %if.then15, %if.then11, %while.cond
  %275 = bitcast %struct.uivector* %lz77_encoded to i8*
  call void @_ZL16uivector_cleanupPv(i8* %275)
  call void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree_ll)
  call void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree_d)
  call void @_ZL19HuffmanTree_cleanupP11HuffmanTree(%struct.HuffmanTree* %tree_cl)
  %276 = load i32*, i32** %frequencies_ll, align 8, !tbaa !2
  %277 = bitcast i32* %276 to i8*
  call void @_ZL12lodepng_freePv(i8* %277)
  %278 = load i32*, i32** %frequencies_d, align 8, !tbaa !2
  %279 = bitcast i32* %278 to i8*
  call void @_ZL12lodepng_freePv(i8* %279)
  %280 = load i32*, i32** %frequencies_cl, align 8, !tbaa !2
  %281 = bitcast i32* %280 to i8*
  call void @_ZL12lodepng_freePv(i8* %281)
  %282 = load i32*, i32** %bitlen_lld, align 8, !tbaa !2
  %283 = bitcast i32* %282 to i8*
  call void @_ZL12lodepng_freePv(i8* %283)
  %284 = load i32*, i32** %bitlen_lld_e, align 8, !tbaa !2
  %285 = bitcast i32* %284 to i8*
  call void @_ZL12lodepng_freePv(i8* %285)
  %286 = load i32, i32* %error, align 4, !tbaa !8
  %287 = bitcast i32* %HCLEN to i8*
  call void @llvm.lifetime.end(i64 4, i8* %287) #16
  %288 = bitcast i32* %HDIST to i8*
  call void @llvm.lifetime.end(i64 4, i8* %288) #16
  %289 = bitcast i32* %HLIT to i8*
  call void @llvm.lifetime.end(i64 4, i8* %289) #16
  %290 = bitcast i64* %numcodes_cl to i8*
  call void @llvm.lifetime.end(i64 8, i8* %290) #16
  %291 = bitcast i64* %numcodes_lld_e to i8*
  call void @llvm.lifetime.end(i64 8, i8* %291) #16
  %292 = bitcast i64* %numcodes_lld to i8*
  call void @llvm.lifetime.end(i64 8, i8* %292) #16
  %293 = bitcast i64* %numcodes_d to i8*
  call void @llvm.lifetime.end(i64 8, i8* %293) #16
  %294 = bitcast i64* %numcodes_ll to i8*
  call void @llvm.lifetime.end(i64 8, i8* %294) #16
  %295 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %295) #16
  %296 = bitcast i32* %BFINAL to i8*
  call void @llvm.lifetime.end(i64 4, i8* %296) #16
  %297 = bitcast i64* %datasize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %297) #16
  %298 = bitcast i32** %bitlen_lld_e to i8*
  call void @llvm.lifetime.end(i64 8, i8* %298) #16
  %299 = bitcast i32** %bitlen_lld to i8*
  call void @llvm.lifetime.end(i64 8, i8* %299) #16
  %300 = bitcast i32** %frequencies_cl to i8*
  call void @llvm.lifetime.end(i64 8, i8* %300) #16
  %301 = bitcast i32** %frequencies_d to i8*
  call void @llvm.lifetime.end(i64 8, i8* %301) #16
  %302 = bitcast i32** %frequencies_ll to i8*
  call void @llvm.lifetime.end(i64 8, i8* %302) #16
  %303 = bitcast %struct.HuffmanTree* %tree_cl to i8*
  call void @llvm.lifetime.end(i64 40, i8* %303) #16
  %304 = bitcast %struct.HuffmanTree* %tree_d to i8*
  call void @llvm.lifetime.end(i64 40, i8* %304) #16
  %305 = bitcast %struct.HuffmanTree* %tree_ll to i8*
  call void @llvm.lifetime.end(i64 40, i8* %305) #16
  %306 = bitcast %struct.uivector* %lz77_encoded to i8*
  call void @llvm.lifetime.end(i64 24, i8* %306) #16
  %307 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %307) #16
  ret i32 %286
}

; Function Attrs: ssp uwtable
define internal void @_ZL12hash_cleanupP4Hash(%struct.Hash* %hash) #0 {
entry:
  %hash.addr = alloca %struct.Hash*, align 8
  store %struct.Hash* %hash, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %0 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %head = getelementptr inbounds %struct.Hash, %struct.Hash* %0, i32 0, i32 0
  %1 = load i32*, i32** %head, align 8, !tbaa !184
  %2 = bitcast i32* %1 to i8*
  call void @_ZL12lodepng_freePv(i8* %2)
  %3 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %val = getelementptr inbounds %struct.Hash, %struct.Hash* %3, i32 0, i32 2
  %4 = load i32*, i32** %val, align 8, !tbaa !186
  %5 = bitcast i32* %4 to i8*
  call void @_ZL12lodepng_freePv(i8* %5)
  %6 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chain = getelementptr inbounds %struct.Hash, %struct.Hash* %6, i32 0, i32 1
  %7 = load i16*, i16** %chain, align 8, !tbaa !187
  %8 = bitcast i16* %7 to i8*
  call void @_ZL12lodepng_freePv(i8* %8)
  %9 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %zeros = getelementptr inbounds %struct.Hash, %struct.Hash* %9, i32 0, i32 5
  %10 = load i16*, i16** %zeros, align 8, !tbaa !188
  %11 = bitcast i16* %10 to i8*
  call void @_ZL12lodepng_freePv(i8* %11)
  %12 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %headz = getelementptr inbounds %struct.Hash, %struct.Hash* %12, i32 0, i32 3
  %13 = load i32*, i32** %headz, align 8, !tbaa !189
  %14 = bitcast i32* %13 to i8*
  call void @_ZL12lodepng_freePv(i8* %14)
  %15 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chainz = getelementptr inbounds %struct.Hash, %struct.Hash* %15, i32 0, i32 4
  %16 = load i16*, i16** %chainz, align 8, !tbaa !190
  %17 = bitcast i16* %16 to i8*
  call void @_ZL12lodepng_freePv(i8* %17)
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %writer, i32 %value, i64 %nbits) #0 {
entry:
  %writer.addr = alloca %struct.LodePNGBitWriter*, align 8
  %value.addr = alloca i32, align 4
  %nbits.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGBitWriter* %writer, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  store i32 %value, i32* %value.addr, align 4, !tbaa !8
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %cmp = icmp eq i64 %0, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %1, i32 0, i32 1
  %2 = load i8, i8* %bp, align 8, !tbaa !183
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 7
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then2, label %if.end9

if.then2:                                         ; preds = %if.then
  %3 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %3, i32 0, i32 0
  %4 = load %struct.ucvector*, %struct.ucvector** %data, align 8, !tbaa !181
  %5 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data3 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %5, i32 0, i32 0
  %6 = load %struct.ucvector*, %struct.ucvector** %data3, align 8, !tbaa !181
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i32 0, i32 1
  %7 = load i64, i64* %size, align 8, !tbaa !34
  %add = add i64 %7, 1
  %call = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %4, i64 %add)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then2
  br label %if.end62

if.end:                                           ; preds = %if.then2
  %8 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data5 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %8, i32 0, i32 0
  %9 = load %struct.ucvector*, %struct.ucvector** %data5, align 8, !tbaa !181
  %data6 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %9, i32 0, i32 0
  %10 = load i8*, i8** %data6, align 8, !tbaa !32
  %11 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data7 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %11, i32 0, i32 0
  %12 = load %struct.ucvector*, %struct.ucvector** %data7, align 8, !tbaa !181
  %size8 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %12, i32 0, i32 1
  %13 = load i64, i64* %size8, align 8, !tbaa !34
  %sub = sub i64 %13, 1
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 %sub
  store i8 0, i8* %arrayidx, align 1, !tbaa !16
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  %14 = load i32, i32* %value.addr, align 4, !tbaa !8
  %15 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp10 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %15, i32 0, i32 1
  %16 = load i8, i8* %bp10, align 8, !tbaa !183
  %conv11 = zext i8 %16 to i32
  %and12 = and i32 %conv11, 7
  %shl = shl i32 %14, %and12
  %17 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data13 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %17, i32 0, i32 0
  %18 = load %struct.ucvector*, %struct.ucvector** %data13, align 8, !tbaa !181
  %data14 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %18, i32 0, i32 0
  %19 = load i8*, i8** %data14, align 8, !tbaa !32
  %20 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data15 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %20, i32 0, i32 0
  %21 = load %struct.ucvector*, %struct.ucvector** %data15, align 8, !tbaa !181
  %size16 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %21, i32 0, i32 1
  %22 = load i64, i64* %size16, align 8, !tbaa !34
  %sub17 = sub i64 %22, 1
  %arrayidx18 = getelementptr inbounds i8, i8* %19, i64 %sub17
  %23 = load i8, i8* %arrayidx18, align 1, !tbaa !16
  %conv19 = zext i8 %23 to i32
  %or = or i32 %conv19, %shl
  %conv20 = trunc i32 %or to i8
  store i8 %conv20, i8* %arrayidx18, align 1, !tbaa !16
  %24 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp21 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %24, i32 0, i32 1
  %25 = load i8, i8* %bp21, align 8, !tbaa !183
  %inc = add i8 %25, 1
  store i8 %inc, i8* %bp21, align 8, !tbaa !183
  br label %if.end62

if.else:                                          ; preds = %entry
  %26 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %26) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %27 = load i64, i64* %i, align 8, !tbaa !6
  %28 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %cmp22 = icmp ne i64 %27, %28
  br i1 %cmp22, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %29 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp23 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %29, i32 0, i32 1
  %30 = load i8, i8* %bp23, align 8, !tbaa !183
  %conv24 = zext i8 %30 to i32
  %and25 = and i32 %conv24, 7
  %cmp26 = icmp eq i32 %and25, 0
  br i1 %cmp26, label %if.then27, label %if.end42

if.then27:                                        ; preds = %for.body
  %31 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data28 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %31, i32 0, i32 0
  %32 = load %struct.ucvector*, %struct.ucvector** %data28, align 8, !tbaa !181
  %33 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data29 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %33, i32 0, i32 0
  %34 = load %struct.ucvector*, %struct.ucvector** %data29, align 8, !tbaa !181
  %size30 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %34, i32 0, i32 1
  %35 = load i64, i64* %size30, align 8, !tbaa !34
  %add31 = add i64 %35, 1
  %call32 = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %32, i64 %add31)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %if.then27
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end35:                                         ; preds = %if.then27
  %36 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data36 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %36, i32 0, i32 0
  %37 = load %struct.ucvector*, %struct.ucvector** %data36, align 8, !tbaa !181
  %data37 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %37, i32 0, i32 0
  %38 = load i8*, i8** %data37, align 8, !tbaa !32
  %39 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data38 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %39, i32 0, i32 0
  %40 = load %struct.ucvector*, %struct.ucvector** %data38, align 8, !tbaa !181
  %size39 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %40, i32 0, i32 1
  %41 = load i64, i64* %size39, align 8, !tbaa !34
  %sub40 = sub i64 %41, 1
  %arrayidx41 = getelementptr inbounds i8, i8* %38, i64 %sub40
  store i8 0, i8* %arrayidx41, align 1, !tbaa !16
  br label %if.end42

if.end42:                                         ; preds = %if.end35, %for.body
  %42 = load i32, i32* %value.addr, align 4, !tbaa !8
  %43 = load i64, i64* %i, align 8, !tbaa !6
  %sh_prom = trunc i64 %43 to i32
  %shr = lshr i32 %42, %sh_prom
  %and43 = and i32 %shr, 1
  %conv44 = trunc i32 %and43 to i8
  %conv45 = zext i8 %conv44 to i32
  %44 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp46 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %44, i32 0, i32 1
  %45 = load i8, i8* %bp46, align 8, !tbaa !183
  %conv47 = zext i8 %45 to i32
  %and48 = and i32 %conv47, 7
  %shl49 = shl i32 %conv45, %and48
  %46 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data50 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %46, i32 0, i32 0
  %47 = load %struct.ucvector*, %struct.ucvector** %data50, align 8, !tbaa !181
  %data51 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %47, i32 0, i32 0
  %48 = load i8*, i8** %data51, align 8, !tbaa !32
  %49 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data52 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %49, i32 0, i32 0
  %50 = load %struct.ucvector*, %struct.ucvector** %data52, align 8, !tbaa !181
  %size53 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %50, i32 0, i32 1
  %51 = load i64, i64* %size53, align 8, !tbaa !34
  %sub54 = sub i64 %51, 1
  %arrayidx55 = getelementptr inbounds i8, i8* %48, i64 %sub54
  %52 = load i8, i8* %arrayidx55, align 1, !tbaa !16
  %conv56 = zext i8 %52 to i32
  %or57 = or i32 %conv56, %shl49
  %conv58 = trunc i32 %or57 to i8
  store i8 %conv58, i8* %arrayidx55, align 1, !tbaa !16
  %53 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp59 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %53, i32 0, i32 1
  %54 = load i8, i8* %bp59, align 8, !tbaa !183
  %inc60 = add i8 %54, 1
  store i8 %inc60, i8* %bp59, align 8, !tbaa !183
  br label %for.inc

for.inc:                                          ; preds = %if.end42
  %55 = load i64, i64* %i, align 8, !tbaa !6
  %inc61 = add i64 %55, 1
  store i64 %inc61, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then34
  %56 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %56) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %if.end62
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end62

if.end62:                                         ; preds = %if.then4, %cleanup, %cleanup.cont, %if.end9
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13uivector_initP8uivector(%struct.uivector* %p) #4 {
entry:
  %p.addr = alloca %struct.uivector*, align 8
  store %struct.uivector* %p, %struct.uivector** %p.addr, align 8, !tbaa !2
  %0 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.uivector, %struct.uivector* %0, i32 0, i32 0
  store i32* null, i32** %data, align 8, !tbaa !191
  %1 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %allocsize = getelementptr inbounds %struct.uivector, %struct.uivector* %1, i32 0, i32 2
  store i64 0, i64* %allocsize, align 8, !tbaa !194
  %2 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.uivector, %struct.uivector* %2, i32 0, i32 1
  store i64 0, i64* %size, align 8, !tbaa !193
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL10encodeLZ77P8uivectorP4HashPKhmmjjjj(%struct.uivector* %out, %struct.Hash* %hash, i8* %in, i64 %inpos, i64 %insize, i32 %windowsize, i32 %minmatch, i32 %nicematch, i32 %lazymatching) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.uivector*, align 8
  %hash.addr = alloca %struct.Hash*, align 8
  %in.addr = alloca i8*, align 8
  %inpos.addr = alloca i64, align 8
  %insize.addr = alloca i64, align 8
  %windowsize.addr = alloca i32, align 4
  %minmatch.addr = alloca i32, align 4
  %nicematch.addr = alloca i32, align 4
  %lazymatching.addr = alloca i32, align 4
  %pos = alloca i64, align 8
  %i = alloca i32, align 4
  %error = alloca i32, align 4
  %maxchainlength = alloca i32, align 4
  %maxlazymatch = alloca i32, align 4
  %usezeros = alloca i32, align 4
  %numzeros = alloca i32, align 4
  %offset = alloca i32, align 4
  %length = alloca i32, align 4
  %lazy = alloca i32, align 4
  %lazylength = alloca i32, align 4
  %lazyoffset = alloca i32, align 4
  %hashval = alloca i32, align 4
  %current_offset = alloca i32, align 4
  %current_length = alloca i32, align 4
  %prev_offset = alloca i32, align 4
  %lastptr = alloca i8*, align 8
  %foreptr = alloca i8*, align 8
  %backptr = alloca i8*, align 8
  %hashpos = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %wpos = alloca i64, align 8
  %chainlength = alloca i32, align 4
  %skip = alloca i32, align 4
  store %struct.uivector* %out, %struct.uivector** %out.addr, align 8, !tbaa !2
  store %struct.Hash* %hash, %struct.Hash** %hash.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %inpos, i64* %inpos.addr, align 8, !tbaa !6
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store i32 %windowsize, i32* %windowsize.addr, align 4, !tbaa !8
  store i32 %minmatch, i32* %minmatch.addr, align 4, !tbaa !8
  store i32 %nicematch, i32* %nicematch.addr, align 4, !tbaa !8
  store i32 %lazymatching, i32* %lazymatching.addr, align 4, !tbaa !8
  %0 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %1) #16
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %3 = bitcast i32* %maxchainlength to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %cmp = icmp uge i32 %4, 8192
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %div = udiv i32 %6, 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %5, %cond.true ], [ %div, %cond.false ]
  store i32 %cond, i32* %maxchainlength, align 4, !tbaa !8
  %7 = bitcast i32* %maxlazymatch to i8*
  call void @llvm.lifetime.start(i64 4, i8* %7) #16
  %8 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %cmp1 = icmp uge i32 %8, 8192
  %cond2 = select i1 %cmp1, i64 258, i64 64
  %conv = trunc i64 %cond2 to i32
  store i32 %conv, i32* %maxlazymatch, align 4, !tbaa !8
  %9 = bitcast i32* %usezeros to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #16
  store i32 1, i32* %usezeros, align 4, !tbaa !8
  %10 = bitcast i32* %numzeros to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #16
  store i32 0, i32* %numzeros, align 4, !tbaa !8
  %11 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #16
  %12 = bitcast i32* %length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #16
  %13 = bitcast i32* %lazy to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #16
  store i32 0, i32* %lazy, align 4, !tbaa !8
  %14 = bitcast i32* %lazylength to i8*
  call void @llvm.lifetime.start(i64 4, i8* %14) #16
  store i32 0, i32* %lazylength, align 4, !tbaa !8
  %15 = bitcast i32* %lazyoffset to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #16
  store i32 0, i32* %lazyoffset, align 4, !tbaa !8
  %16 = bitcast i32* %hashval to i8*
  call void @llvm.lifetime.start(i64 4, i8* %16) #16
  %17 = bitcast i32* %current_offset to i8*
  call void @llvm.lifetime.start(i64 4, i8* %17) #16
  %18 = bitcast i32* %current_length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #16
  %19 = bitcast i32* %prev_offset to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #16
  %20 = bitcast i8** %lastptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %20) #16
  %21 = bitcast i8** %foreptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %21) #16
  %22 = bitcast i8** %backptr to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #16
  %23 = bitcast i32* %hashpos to i8*
  call void @llvm.lifetime.start(i64 4, i8* %23) #16
  %24 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %cmp3 = icmp eq i32 %24, 0
  br i1 %cmp3, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %25 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %cmp4 = icmp ugt i32 %25, 32768
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  store i32 60, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup233

if.end:                                           ; preds = %lor.lhs.false
  %26 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %27 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %sub = sub i32 %27, 1
  %and = and i32 %26, %sub
  %cmp5 = icmp ne i32 %and, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 90, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup233

if.end7:                                          ; preds = %if.end
  %28 = load i32, i32* %nicematch.addr, align 4, !tbaa !8
  %conv8 = zext i32 %28 to i64
  %cmp9 = icmp ugt i64 %conv8, 258
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.end7
  store i32 258, i32* %nicematch.addr, align 4, !tbaa !8
  br label %if.end11

if.end11:                                         ; preds = %if.then10, %if.end7
  %29 = load i64, i64* %inpos.addr, align 8, !tbaa !6
  store i64 %29, i64* %pos, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc230, %if.end11
  %30 = load i64, i64* %pos, align 8, !tbaa !6
  %31 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp12 = icmp ult i64 %30, %31
  br i1 %cmp12, label %for.body, label %for.end232

for.body:                                         ; preds = %for.cond
  %32 = bitcast i64* %wpos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %32) #16
  %33 = load i64, i64* %pos, align 8, !tbaa !6
  %34 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %sub13 = sub i32 %34, 1
  %conv14 = zext i32 %sub13 to i64
  %and15 = and i64 %33, %conv14
  store i64 %and15, i64* %wpos, align 8, !tbaa !6
  %35 = bitcast i32* %chainlength to i8*
  call void @llvm.lifetime.start(i64 4, i8* %35) #16
  store i32 0, i32* %chainlength, align 4, !tbaa !8
  %36 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %37 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %38 = load i64, i64* %pos, align 8, !tbaa !6
  %call = call i32 @_ZL7getHashPKhmm(i8* %36, i64 %37, i64 %38)
  store i32 %call, i32* %hashval, align 4, !tbaa !8
  %39 = load i32, i32* %usezeros, align 4, !tbaa !8
  %tobool = icmp ne i32 %39, 0
  br i1 %tobool, label %land.lhs.true, label %if.else32

land.lhs.true:                                    ; preds = %for.body
  %40 = load i32, i32* %hashval, align 4, !tbaa !8
  %cmp16 = icmp eq i32 %40, 0
  br i1 %cmp16, label %if.then17, label %if.else32

if.then17:                                        ; preds = %land.lhs.true
  %41 = load i32, i32* %numzeros, align 4, !tbaa !8
  %cmp18 = icmp eq i32 %41, 0
  br i1 %cmp18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then17
  %42 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %43 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %44 = load i64, i64* %pos, align 8, !tbaa !6
  %call20 = call i32 @_ZL10countZerosPKhmm(i8* %42, i64 %43, i64 %44)
  store i32 %call20, i32* %numzeros, align 4, !tbaa !8
  br label %if.end31

if.else:                                          ; preds = %if.then17
  %45 = load i64, i64* %pos, align 8, !tbaa !6
  %46 = load i32, i32* %numzeros, align 4, !tbaa !8
  %conv21 = zext i32 %46 to i64
  %add = add i64 %45, %conv21
  %47 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp22 = icmp ugt i64 %add, %47
  br i1 %cmp22, label %if.then29, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %if.else
  %48 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %49 = load i64, i64* %pos, align 8, !tbaa !6
  %50 = load i32, i32* %numzeros, align 4, !tbaa !8
  %conv24 = zext i32 %50 to i64
  %add25 = add i64 %49, %conv24
  %sub26 = sub i64 %add25, 1
  %arrayidx = getelementptr inbounds i8, i8* %48, i64 %sub26
  %51 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv27 = zext i8 %51 to i32
  %cmp28 = icmp ne i32 %conv27, 0
  br i1 %cmp28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %lor.lhs.false23, %if.else
  %52 = load i32, i32* %numzeros, align 4, !tbaa !8
  %dec = add i32 %52, -1
  store i32 %dec, i32* %numzeros, align 4, !tbaa !8
  br label %if.end30

if.end30:                                         ; preds = %if.then29, %lor.lhs.false23
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then19
  br label %if.end33

if.else32:                                        ; preds = %land.lhs.true, %for.body
  store i32 0, i32* %numzeros, align 4, !tbaa !8
  br label %if.end33

if.end33:                                         ; preds = %if.else32, %if.end31
  %53 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %54 = load i64, i64* %wpos, align 8, !tbaa !6
  %55 = load i32, i32* %hashval, align 4, !tbaa !8
  %56 = load i32, i32* %numzeros, align 4, !tbaa !8
  %conv34 = trunc i32 %56 to i16
  call void @_ZL15updateHashChainP4Hashmjt(%struct.Hash* %53, i64 %54, i32 %55, i16 zeroext %conv34)
  store i32 0, i32* %length, align 4, !tbaa !8
  store i32 0, i32* %offset, align 4, !tbaa !8
  %57 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chain = getelementptr inbounds %struct.Hash, %struct.Hash* %57, i32 0, i32 1
  %58 = load i16*, i16** %chain, align 8, !tbaa !187
  %59 = load i64, i64* %wpos, align 8, !tbaa !6
  %arrayidx35 = getelementptr inbounds i16, i16* %58, i64 %59
  %60 = load i16, i16* %arrayidx35, align 2, !tbaa !89
  %conv36 = zext i16 %60 to i32
  store i32 %conv36, i32* %hashpos, align 4, !tbaa !8
  %61 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %62 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %63 = load i64, i64* %pos, align 8, !tbaa !6
  %add37 = add i64 %63, 258
  %cmp38 = icmp ult i64 %62, %add37
  br i1 %cmp38, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %if.end33
  %64 = load i64, i64* %insize.addr, align 8, !tbaa !6
  br label %cond.end42

cond.false40:                                     ; preds = %if.end33
  %65 = load i64, i64* %pos, align 8, !tbaa !6
  %add41 = add i64 %65, 258
  br label %cond.end42

cond.end42:                                       ; preds = %cond.false40, %cond.true39
  %cond43 = phi i64 [ %64, %cond.true39 ], [ %add41, %cond.false40 ]
  %arrayidx44 = getelementptr inbounds i8, i8* %61, i64 %cond43
  store i8* %arrayidx44, i8** %lastptr, align 8, !tbaa !2
  store i32 0, i32* %prev_offset, align 4, !tbaa !8
  br label %for.cond45

for.cond45:                                       ; preds = %if.end126, %cond.end42
  %66 = load i32, i32* %chainlength, align 4, !tbaa !8
  %inc = add i32 %66, 1
  store i32 %inc, i32* %chainlength, align 4, !tbaa !8
  %67 = load i32, i32* %maxchainlength, align 4, !tbaa !8
  %cmp46 = icmp uge i32 %66, %67
  br i1 %cmp46, label %if.then47, label %if.end48

if.then47:                                        ; preds = %for.cond45
  br label %for.end

if.end48:                                         ; preds = %for.cond45
  %68 = load i32, i32* %hashpos, align 4, !tbaa !8
  %conv49 = zext i32 %68 to i64
  %69 = load i64, i64* %wpos, align 8, !tbaa !6
  %cmp50 = icmp ule i64 %conv49, %69
  br i1 %cmp50, label %cond.true51, label %cond.false54

cond.true51:                                      ; preds = %if.end48
  %70 = load i64, i64* %wpos, align 8, !tbaa !6
  %71 = load i32, i32* %hashpos, align 4, !tbaa !8
  %conv52 = zext i32 %71 to i64
  %sub53 = sub i64 %70, %conv52
  br label %cond.end59

cond.false54:                                     ; preds = %if.end48
  %72 = load i64, i64* %wpos, align 8, !tbaa !6
  %73 = load i32, i32* %hashpos, align 4, !tbaa !8
  %conv55 = zext i32 %73 to i64
  %sub56 = sub i64 %72, %conv55
  %74 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %conv57 = zext i32 %74 to i64
  %add58 = add i64 %sub56, %conv57
  br label %cond.end59

cond.end59:                                       ; preds = %cond.false54, %cond.true51
  %cond60 = phi i64 [ %sub53, %cond.true51 ], [ %add58, %cond.false54 ]
  %conv61 = trunc i64 %cond60 to i32
  store i32 %conv61, i32* %current_offset, align 4, !tbaa !8
  %75 = load i32, i32* %current_offset, align 4, !tbaa !8
  %76 = load i32, i32* %prev_offset, align 4, !tbaa !8
  %cmp62 = icmp ult i32 %75, %76
  br i1 %cmp62, label %if.then63, label %if.end64

if.then63:                                        ; preds = %cond.end59
  br label %for.end

if.end64:                                         ; preds = %cond.end59
  %77 = load i32, i32* %current_offset, align 4, !tbaa !8
  store i32 %77, i32* %prev_offset, align 4, !tbaa !8
  %78 = load i32, i32* %current_offset, align 4, !tbaa !8
  %cmp65 = icmp ugt i32 %78, 0
  br i1 %cmp65, label %if.then66, label %if.end94

if.then66:                                        ; preds = %if.end64
  %79 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %80 = load i64, i64* %pos, align 8, !tbaa !6
  %arrayidx67 = getelementptr inbounds i8, i8* %79, i64 %80
  store i8* %arrayidx67, i8** %foreptr, align 8, !tbaa !2
  %81 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %82 = load i64, i64* %pos, align 8, !tbaa !6
  %83 = load i32, i32* %current_offset, align 4, !tbaa !8
  %conv68 = zext i32 %83 to i64
  %sub69 = sub i64 %82, %conv68
  %arrayidx70 = getelementptr inbounds i8, i8* %81, i64 %sub69
  store i8* %arrayidx70, i8** %backptr, align 8, !tbaa !2
  %84 = load i32, i32* %numzeros, align 4, !tbaa !8
  %cmp71 = icmp uge i32 %84, 3
  br i1 %cmp71, label %if.then72, label %if.end80

if.then72:                                        ; preds = %if.then66
  %85 = bitcast i32* %skip to i8*
  call void @llvm.lifetime.start(i64 4, i8* %85) #16
  %86 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %zeros = getelementptr inbounds %struct.Hash, %struct.Hash* %86, i32 0, i32 5
  %87 = load i16*, i16** %zeros, align 8, !tbaa !188
  %88 = load i32, i32* %hashpos, align 4, !tbaa !8
  %idxprom = zext i32 %88 to i64
  %arrayidx73 = getelementptr inbounds i16, i16* %87, i64 %idxprom
  %89 = load i16, i16* %arrayidx73, align 2, !tbaa !89
  %conv74 = zext i16 %89 to i32
  store i32 %conv74, i32* %skip, align 4, !tbaa !8
  %90 = load i32, i32* %skip, align 4, !tbaa !8
  %91 = load i32, i32* %numzeros, align 4, !tbaa !8
  %cmp75 = icmp ugt i32 %90, %91
  br i1 %cmp75, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.then72
  %92 = load i32, i32* %numzeros, align 4, !tbaa !8
  store i32 %92, i32* %skip, align 4, !tbaa !8
  br label %if.end77

if.end77:                                         ; preds = %if.then76, %if.then72
  %93 = load i32, i32* %skip, align 4, !tbaa !8
  %94 = load i8*, i8** %backptr, align 8, !tbaa !2
  %idx.ext = zext i32 %93 to i64
  %add.ptr = getelementptr inbounds i8, i8* %94, i64 %idx.ext
  store i8* %add.ptr, i8** %backptr, align 8, !tbaa !2
  %95 = load i32, i32* %skip, align 4, !tbaa !8
  %96 = load i8*, i8** %foreptr, align 8, !tbaa !2
  %idx.ext78 = zext i32 %95 to i64
  %add.ptr79 = getelementptr inbounds i8, i8* %96, i64 %idx.ext78
  store i8* %add.ptr79, i8** %foreptr, align 8, !tbaa !2
  %97 = bitcast i32* %skip to i8*
  call void @llvm.lifetime.end(i64 4, i8* %97) #16
  br label %if.end80

if.end80:                                         ; preds = %if.end77, %if.then66
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end80
  %98 = load i8*, i8** %foreptr, align 8, !tbaa !2
  %99 = load i8*, i8** %lastptr, align 8, !tbaa !2
  %cmp81 = icmp ne i8* %98, %99
  br i1 %cmp81, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %100 = load i8*, i8** %backptr, align 8, !tbaa !2
  %101 = load i8, i8* %100, align 1, !tbaa !16
  %conv82 = zext i8 %101 to i32
  %102 = load i8*, i8** %foreptr, align 8, !tbaa !2
  %103 = load i8, i8* %102, align 1, !tbaa !16
  %conv83 = zext i8 %103 to i32
  %cmp84 = icmp eq i32 %conv82, %conv83
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %104 = phi i1 [ false, %while.cond ], [ %cmp84, %land.rhs ]
  br i1 %104, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %105 = load i8*, i8** %backptr, align 8, !tbaa !2
  %incdec.ptr = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %incdec.ptr, i8** %backptr, align 8, !tbaa !2
  %106 = load i8*, i8** %foreptr, align 8, !tbaa !2
  %incdec.ptr85 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %incdec.ptr85, i8** %foreptr, align 8, !tbaa !2
  br label %while.cond

while.end:                                        ; preds = %land.end
  %107 = load i8*, i8** %foreptr, align 8, !tbaa !2
  %108 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %109 = load i64, i64* %pos, align 8, !tbaa !6
  %arrayidx86 = getelementptr inbounds i8, i8* %108, i64 %109
  %sub.ptr.lhs.cast = ptrtoint i8* %107 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arrayidx86 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv87 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv87, i32* %current_length, align 4, !tbaa !8
  %110 = load i32, i32* %current_length, align 4, !tbaa !8
  %111 = load i32, i32* %length, align 4, !tbaa !8
  %cmp88 = icmp ugt i32 %110, %111
  br i1 %cmp88, label %if.then89, label %if.end93

if.then89:                                        ; preds = %while.end
  %112 = load i32, i32* %current_length, align 4, !tbaa !8
  store i32 %112, i32* %length, align 4, !tbaa !8
  %113 = load i32, i32* %current_offset, align 4, !tbaa !8
  store i32 %113, i32* %offset, align 4, !tbaa !8
  %114 = load i32, i32* %current_length, align 4, !tbaa !8
  %115 = load i32, i32* %nicematch.addr, align 4, !tbaa !8
  %cmp90 = icmp uge i32 %114, %115
  br i1 %cmp90, label %if.then91, label %if.end92

if.then91:                                        ; preds = %if.then89
  br label %for.end

if.end92:                                         ; preds = %if.then89
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %while.end
  br label %if.end94

if.end94:                                         ; preds = %if.end93, %if.end64
  %116 = load i32, i32* %hashpos, align 4, !tbaa !8
  %117 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chain95 = getelementptr inbounds %struct.Hash, %struct.Hash* %117, i32 0, i32 1
  %118 = load i16*, i16** %chain95, align 8, !tbaa !187
  %119 = load i32, i32* %hashpos, align 4, !tbaa !8
  %idxprom96 = zext i32 %119 to i64
  %arrayidx97 = getelementptr inbounds i16, i16* %118, i64 %idxprom96
  %120 = load i16, i16* %arrayidx97, align 2, !tbaa !89
  %conv98 = zext i16 %120 to i32
  %cmp99 = icmp eq i32 %116, %conv98
  br i1 %cmp99, label %if.then100, label %if.end101

if.then100:                                       ; preds = %if.end94
  br label %for.end

if.end101:                                        ; preds = %if.end94
  %121 = load i32, i32* %numzeros, align 4, !tbaa !8
  %cmp102 = icmp uge i32 %121, 3
  br i1 %cmp102, label %land.lhs.true103, label %if.else116

land.lhs.true103:                                 ; preds = %if.end101
  %122 = load i32, i32* %length, align 4, !tbaa !8
  %123 = load i32, i32* %numzeros, align 4, !tbaa !8
  %cmp104 = icmp ugt i32 %122, %123
  br i1 %cmp104, label %if.then105, label %if.else116

if.then105:                                       ; preds = %land.lhs.true103
  %124 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chainz = getelementptr inbounds %struct.Hash, %struct.Hash* %124, i32 0, i32 4
  %125 = load i16*, i16** %chainz, align 8, !tbaa !190
  %126 = load i32, i32* %hashpos, align 4, !tbaa !8
  %idxprom106 = zext i32 %126 to i64
  %arrayidx107 = getelementptr inbounds i16, i16* %125, i64 %idxprom106
  %127 = load i16, i16* %arrayidx107, align 2, !tbaa !89
  %conv108 = zext i16 %127 to i32
  store i32 %conv108, i32* %hashpos, align 4, !tbaa !8
  %128 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %zeros109 = getelementptr inbounds %struct.Hash, %struct.Hash* %128, i32 0, i32 5
  %129 = load i16*, i16** %zeros109, align 8, !tbaa !188
  %130 = load i32, i32* %hashpos, align 4, !tbaa !8
  %idxprom110 = zext i32 %130 to i64
  %arrayidx111 = getelementptr inbounds i16, i16* %129, i64 %idxprom110
  %131 = load i16, i16* %arrayidx111, align 2, !tbaa !89
  %conv112 = zext i16 %131 to i32
  %132 = load i32, i32* %numzeros, align 4, !tbaa !8
  %cmp113 = icmp ne i32 %conv112, %132
  br i1 %cmp113, label %if.then114, label %if.end115

if.then114:                                       ; preds = %if.then105
  br label %for.end

if.end115:                                        ; preds = %if.then105
  br label %if.end126

if.else116:                                       ; preds = %land.lhs.true103, %if.end101
  %133 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chain117 = getelementptr inbounds %struct.Hash, %struct.Hash* %133, i32 0, i32 1
  %134 = load i16*, i16** %chain117, align 8, !tbaa !187
  %135 = load i32, i32* %hashpos, align 4, !tbaa !8
  %idxprom118 = zext i32 %135 to i64
  %arrayidx119 = getelementptr inbounds i16, i16* %134, i64 %idxprom118
  %136 = load i16, i16* %arrayidx119, align 2, !tbaa !89
  %conv120 = zext i16 %136 to i32
  store i32 %conv120, i32* %hashpos, align 4, !tbaa !8
  %137 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %val = getelementptr inbounds %struct.Hash, %struct.Hash* %137, i32 0, i32 2
  %138 = load i32*, i32** %val, align 8, !tbaa !186
  %139 = load i32, i32* %hashpos, align 4, !tbaa !8
  %idxprom121 = zext i32 %139 to i64
  %arrayidx122 = getelementptr inbounds i32, i32* %138, i64 %idxprom121
  %140 = load i32, i32* %arrayidx122, align 4, !tbaa !8
  %141 = load i32, i32* %hashval, align 4, !tbaa !8
  %cmp123 = icmp ne i32 %140, %141
  br i1 %cmp123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %if.else116
  br label %for.end

if.end125:                                        ; preds = %if.else116
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.end115
  br label %for.cond45

for.end:                                          ; preds = %if.then124, %if.then114, %if.then100, %if.then91, %if.then63, %if.then47
  %142 = load i32, i32* %lazymatching.addr, align 4, !tbaa !8
  %tobool127 = icmp ne i32 %142, 0
  br i1 %tobool127, label %if.then128, label %if.end162

if.then128:                                       ; preds = %for.end
  %143 = load i32, i32* %lazy, align 4, !tbaa !8
  %tobool129 = icmp ne i32 %143, 0
  br i1 %tobool129, label %if.end138, label %land.lhs.true130

land.lhs.true130:                                 ; preds = %if.then128
  %144 = load i32, i32* %length, align 4, !tbaa !8
  %cmp131 = icmp uge i32 %144, 3
  br i1 %cmp131, label %land.lhs.true132, label %if.end138

land.lhs.true132:                                 ; preds = %land.lhs.true130
  %145 = load i32, i32* %length, align 4, !tbaa !8
  %146 = load i32, i32* %maxlazymatch, align 4, !tbaa !8
  %cmp133 = icmp ule i32 %145, %146
  br i1 %cmp133, label %land.lhs.true134, label %if.end138

land.lhs.true134:                                 ; preds = %land.lhs.true132
  %147 = load i32, i32* %length, align 4, !tbaa !8
  %conv135 = zext i32 %147 to i64
  %cmp136 = icmp ult i64 %conv135, 258
  br i1 %cmp136, label %if.then137, label %if.end138

if.then137:                                       ; preds = %land.lhs.true134
  store i32 1, i32* %lazy, align 4, !tbaa !8
  %148 = load i32, i32* %length, align 4, !tbaa !8
  store i32 %148, i32* %lazylength, align 4, !tbaa !8
  %149 = load i32, i32* %offset, align 4, !tbaa !8
  store i32 %149, i32* %lazyoffset, align 4, !tbaa !8
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end138:                                        ; preds = %land.lhs.true134, %land.lhs.true132, %land.lhs.true130, %if.then128
  %150 = load i32, i32* %lazy, align 4, !tbaa !8
  %tobool139 = icmp ne i32 %150, 0
  br i1 %tobool139, label %if.then140, label %if.end161

if.then140:                                       ; preds = %if.end138
  store i32 0, i32* %lazy, align 4, !tbaa !8
  %151 = load i64, i64* %pos, align 8, !tbaa !6
  %cmp141 = icmp eq i64 %151, 0
  br i1 %cmp141, label %if.then142, label %if.end143

if.then142:                                       ; preds = %if.then140
  store i32 81, i32* %error, align 4, !tbaa !8
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end143:                                        ; preds = %if.then140
  %152 = load i32, i32* %length, align 4, !tbaa !8
  %153 = load i32, i32* %lazylength, align 4, !tbaa !8
  %add144 = add i32 %153, 1
  %cmp145 = icmp ugt i32 %152, %add144
  br i1 %cmp145, label %if.then146, label %if.else154

if.then146:                                       ; preds = %if.end143
  %154 = load %struct.uivector*, %struct.uivector** %out.addr, align 8, !tbaa !2
  %155 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %156 = load i64, i64* %pos, align 8, !tbaa !6
  %sub147 = sub i64 %156, 1
  %arrayidx148 = getelementptr inbounds i8, i8* %155, i64 %sub147
  %157 = load i8, i8* %arrayidx148, align 1, !tbaa !16
  %conv149 = zext i8 %157 to i32
  %call150 = call i32 @_ZL18uivector_push_backP8uivectorj(%struct.uivector* %154, i32 %conv149)
  %tobool151 = icmp ne i32 %call150, 0
  br i1 %tobool151, label %if.end153, label %if.then152

if.then152:                                       ; preds = %if.then146
  store i32 83, i32* %error, align 4, !tbaa !8
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end153:                                        ; preds = %if.then146
  br label %if.end160

if.else154:                                       ; preds = %if.end143
  %158 = load i32, i32* %lazylength, align 4, !tbaa !8
  store i32 %158, i32* %length, align 4, !tbaa !8
  %159 = load i32, i32* %lazyoffset, align 4, !tbaa !8
  store i32 %159, i32* %offset, align 4, !tbaa !8
  %160 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %head = getelementptr inbounds %struct.Hash, %struct.Hash* %160, i32 0, i32 0
  %161 = load i32*, i32** %head, align 8, !tbaa !184
  %162 = load i32, i32* %hashval, align 4, !tbaa !8
  %idxprom155 = zext i32 %162 to i64
  %arrayidx156 = getelementptr inbounds i32, i32* %161, i64 %idxprom155
  store i32 -1, i32* %arrayidx156, align 4, !tbaa !8
  %163 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %headz = getelementptr inbounds %struct.Hash, %struct.Hash* %163, i32 0, i32 3
  %164 = load i32*, i32** %headz, align 8, !tbaa !189
  %165 = load i32, i32* %numzeros, align 4, !tbaa !8
  %idxprom157 = zext i32 %165 to i64
  %arrayidx158 = getelementptr inbounds i32, i32* %164, i64 %idxprom157
  store i32 -1, i32* %arrayidx158, align 4, !tbaa !8
  %166 = load i64, i64* %pos, align 8, !tbaa !6
  %dec159 = add i64 %166, -1
  store i64 %dec159, i64* %pos, align 8, !tbaa !6
  br label %if.end160

if.end160:                                        ; preds = %if.else154, %if.end153
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %if.end138
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %for.end
  %167 = load i32, i32* %length, align 4, !tbaa !8
  %cmp163 = icmp uge i32 %167, 3
  br i1 %cmp163, label %land.lhs.true164, label %if.end167

land.lhs.true164:                                 ; preds = %if.end162
  %168 = load i32, i32* %offset, align 4, !tbaa !8
  %169 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %cmp165 = icmp ugt i32 %168, %169
  br i1 %cmp165, label %if.then166, label %if.end167

if.then166:                                       ; preds = %land.lhs.true164
  store i32 86, i32* %error, align 4, !tbaa !8
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end167:                                        ; preds = %land.lhs.true164, %if.end162
  %170 = load i32, i32* %length, align 4, !tbaa !8
  %cmp168 = icmp ult i32 %170, 3
  br i1 %cmp168, label %if.then169, label %if.else176

if.then169:                                       ; preds = %if.end167
  %171 = load %struct.uivector*, %struct.uivector** %out.addr, align 8, !tbaa !2
  %172 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %173 = load i64, i64* %pos, align 8, !tbaa !6
  %arrayidx170 = getelementptr inbounds i8, i8* %172, i64 %173
  %174 = load i8, i8* %arrayidx170, align 1, !tbaa !16
  %conv171 = zext i8 %174 to i32
  %call172 = call i32 @_ZL18uivector_push_backP8uivectorj(%struct.uivector* %171, i32 %conv171)
  %tobool173 = icmp ne i32 %call172, 0
  br i1 %tobool173, label %if.end175, label %if.then174

if.then174:                                       ; preds = %if.then169
  store i32 83, i32* %error, align 4, !tbaa !8
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end175:                                        ; preds = %if.then169
  br label %if.end228

if.else176:                                       ; preds = %if.end167
  %175 = load i32, i32* %length, align 4, !tbaa !8
  %176 = load i32, i32* %minmatch.addr, align 4, !tbaa !8
  %cmp177 = icmp ult i32 %175, %176
  br i1 %cmp177, label %if.then182, label %lor.lhs.false178

lor.lhs.false178:                                 ; preds = %if.else176
  %177 = load i32, i32* %length, align 4, !tbaa !8
  %cmp179 = icmp eq i32 %177, 3
  br i1 %cmp179, label %land.lhs.true180, label %if.else189

land.lhs.true180:                                 ; preds = %lor.lhs.false178
  %178 = load i32, i32* %offset, align 4, !tbaa !8
  %cmp181 = icmp ugt i32 %178, 4096
  br i1 %cmp181, label %if.then182, label %if.else189

if.then182:                                       ; preds = %land.lhs.true180, %if.else176
  %179 = load %struct.uivector*, %struct.uivector** %out.addr, align 8, !tbaa !2
  %180 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %181 = load i64, i64* %pos, align 8, !tbaa !6
  %arrayidx183 = getelementptr inbounds i8, i8* %180, i64 %181
  %182 = load i8, i8* %arrayidx183, align 1, !tbaa !16
  %conv184 = zext i8 %182 to i32
  %call185 = call i32 @_ZL18uivector_push_backP8uivectorj(%struct.uivector* %179, i32 %conv184)
  %tobool186 = icmp ne i32 %call185, 0
  br i1 %tobool186, label %if.end188, label %if.then187

if.then187:                                       ; preds = %if.then182
  store i32 83, i32* %error, align 4, !tbaa !8
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end188:                                        ; preds = %if.then182
  br label %if.end227

if.else189:                                       ; preds = %land.lhs.true180, %lor.lhs.false178
  %183 = load %struct.uivector*, %struct.uivector** %out.addr, align 8, !tbaa !2
  %184 = load i32, i32* %length, align 4, !tbaa !8
  %conv190 = zext i32 %184 to i64
  %185 = load i32, i32* %offset, align 4, !tbaa !8
  %conv191 = zext i32 %185 to i64
  call void @_ZL17addLengthDistanceP8uivectormm(%struct.uivector* %183, i64 %conv190, i64 %conv191)
  store i32 1, i32* %i, align 4, !tbaa !8
  br label %for.cond192

for.cond192:                                      ; preds = %for.inc, %if.else189
  %186 = load i32, i32* %i, align 4, !tbaa !8
  %187 = load i32, i32* %length, align 4, !tbaa !8
  %cmp193 = icmp ult i32 %186, %187
  br i1 %cmp193, label %for.body194, label %for.end226

for.body194:                                      ; preds = %for.cond192
  %188 = load i64, i64* %pos, align 8, !tbaa !6
  %inc195 = add i64 %188, 1
  store i64 %inc195, i64* %pos, align 8, !tbaa !6
  %189 = load i64, i64* %pos, align 8, !tbaa !6
  %190 = load i32, i32* %windowsize.addr, align 4, !tbaa !8
  %sub196 = sub i32 %190, 1
  %conv197 = zext i32 %sub196 to i64
  %and198 = and i64 %189, %conv197
  store i64 %and198, i64* %wpos, align 8, !tbaa !6
  %191 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %192 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %193 = load i64, i64* %pos, align 8, !tbaa !6
  %call199 = call i32 @_ZL7getHashPKhmm(i8* %191, i64 %192, i64 %193)
  store i32 %call199, i32* %hashval, align 4, !tbaa !8
  %194 = load i32, i32* %usezeros, align 4, !tbaa !8
  %tobool200 = icmp ne i32 %194, 0
  br i1 %tobool200, label %land.lhs.true201, label %if.else222

land.lhs.true201:                                 ; preds = %for.body194
  %195 = load i32, i32* %hashval, align 4, !tbaa !8
  %cmp202 = icmp eq i32 %195, 0
  br i1 %cmp202, label %if.then203, label %if.else222

if.then203:                                       ; preds = %land.lhs.true201
  %196 = load i32, i32* %numzeros, align 4, !tbaa !8
  %cmp204 = icmp eq i32 %196, 0
  br i1 %cmp204, label %if.then205, label %if.else207

if.then205:                                       ; preds = %if.then203
  %197 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %198 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %199 = load i64, i64* %pos, align 8, !tbaa !6
  %call206 = call i32 @_ZL10countZerosPKhmm(i8* %197, i64 %198, i64 %199)
  store i32 %call206, i32* %numzeros, align 4, !tbaa !8
  br label %if.end221

if.else207:                                       ; preds = %if.then203
  %200 = load i64, i64* %pos, align 8, !tbaa !6
  %201 = load i32, i32* %numzeros, align 4, !tbaa !8
  %conv208 = zext i32 %201 to i64
  %add209 = add i64 %200, %conv208
  %202 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %cmp210 = icmp ugt i64 %add209, %202
  br i1 %cmp210, label %if.then218, label %lor.lhs.false211

lor.lhs.false211:                                 ; preds = %if.else207
  %203 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %204 = load i64, i64* %pos, align 8, !tbaa !6
  %205 = load i32, i32* %numzeros, align 4, !tbaa !8
  %conv212 = zext i32 %205 to i64
  %add213 = add i64 %204, %conv212
  %sub214 = sub i64 %add213, 1
  %arrayidx215 = getelementptr inbounds i8, i8* %203, i64 %sub214
  %206 = load i8, i8* %arrayidx215, align 1, !tbaa !16
  %conv216 = zext i8 %206 to i32
  %cmp217 = icmp ne i32 %conv216, 0
  br i1 %cmp217, label %if.then218, label %if.end220

if.then218:                                       ; preds = %lor.lhs.false211, %if.else207
  %207 = load i32, i32* %numzeros, align 4, !tbaa !8
  %dec219 = add i32 %207, -1
  store i32 %dec219, i32* %numzeros, align 4, !tbaa !8
  br label %if.end220

if.end220:                                        ; preds = %if.then218, %lor.lhs.false211
  br label %if.end221

if.end221:                                        ; preds = %if.end220, %if.then205
  br label %if.end223

if.else222:                                       ; preds = %land.lhs.true201, %for.body194
  store i32 0, i32* %numzeros, align 4, !tbaa !8
  br label %if.end223

if.end223:                                        ; preds = %if.else222, %if.end221
  %208 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %209 = load i64, i64* %wpos, align 8, !tbaa !6
  %210 = load i32, i32* %hashval, align 4, !tbaa !8
  %211 = load i32, i32* %numzeros, align 4, !tbaa !8
  %conv224 = trunc i32 %211 to i16
  call void @_ZL15updateHashChainP4Hashmjt(%struct.Hash* %208, i64 %209, i32 %210, i16 zeroext %conv224)
  br label %for.inc

for.inc:                                          ; preds = %if.end223
  %212 = load i32, i32* %i, align 4, !tbaa !8
  %inc225 = add i32 %212, 1
  store i32 %inc225, i32* %i, align 4, !tbaa !8
  br label %for.cond192

for.end226:                                       ; preds = %for.cond192
  br label %if.end227

if.end227:                                        ; preds = %for.end226, %if.end188
  br label %if.end228

if.end228:                                        ; preds = %if.end227, %if.end175
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end228, %if.then187, %if.then174, %if.then166, %if.then152, %if.then142, %if.then137
  %213 = bitcast i32* %chainlength to i8*
  call void @llvm.lifetime.end(i64 4, i8* %213) #16
  %214 = bitcast i64* %wpos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %214) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 4, label %for.inc230
    i32 2, label %for.end232
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc230

for.inc230:                                       ; preds = %cleanup.cont, %cleanup
  %215 = load i64, i64* %pos, align 8, !tbaa !6
  %inc231 = add i64 %215, 1
  store i64 %inc231, i64* %pos, align 8, !tbaa !6
  br label %for.cond

for.end232:                                       ; preds = %cleanup, %for.cond
  %216 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %216, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup233

cleanup233:                                       ; preds = %for.end232, %if.then6, %if.then
  %217 = bitcast i32* %hashpos to i8*
  call void @llvm.lifetime.end(i64 4, i8* %217) #16
  %218 = bitcast i8** %backptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %218) #16
  %219 = bitcast i8** %foreptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %219) #16
  %220 = bitcast i8** %lastptr to i8*
  call void @llvm.lifetime.end(i64 8, i8* %220) #16
  %221 = bitcast i32* %prev_offset to i8*
  call void @llvm.lifetime.end(i64 4, i8* %221) #16
  %222 = bitcast i32* %current_length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %222) #16
  %223 = bitcast i32* %current_offset to i8*
  call void @llvm.lifetime.end(i64 4, i8* %223) #16
  %224 = bitcast i32* %hashval to i8*
  call void @llvm.lifetime.end(i64 4, i8* %224) #16
  %225 = bitcast i32* %lazyoffset to i8*
  call void @llvm.lifetime.end(i64 4, i8* %225) #16
  %226 = bitcast i32* %lazylength to i8*
  call void @llvm.lifetime.end(i64 4, i8* %226) #16
  %227 = bitcast i32* %lazy to i8*
  call void @llvm.lifetime.end(i64 4, i8* %227) #16
  %228 = bitcast i32* %length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %228) #16
  %229 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.end(i64 4, i8* %229) #16
  %230 = bitcast i32* %numzeros to i8*
  call void @llvm.lifetime.end(i64 4, i8* %230) #16
  %231 = bitcast i32* %usezeros to i8*
  call void @llvm.lifetime.end(i64 4, i8* %231) #16
  %232 = bitcast i32* %maxlazymatch to i8*
  call void @llvm.lifetime.end(i64 4, i8* %232) #16
  %233 = bitcast i32* %maxchainlength to i8*
  call void @llvm.lifetime.end(i64 4, i8* %233) #16
  %234 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %234) #16
  %235 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %235) #16
  %236 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %236) #16
  %237 = load i32, i32* %retval, align 4
  ret i32 %237

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: ssp uwtable
define internal void @_ZL13writeLZ77dataP16LodePNGBitWriterPK8uivectorPK11HuffmanTreeS6_(%struct.LodePNGBitWriter* %writer, %struct.uivector* %lz77_encoded, %struct.HuffmanTree* %tree_ll, %struct.HuffmanTree* %tree_d) #0 {
entry:
  %writer.addr = alloca %struct.LodePNGBitWriter*, align 8
  %lz77_encoded.addr = alloca %struct.uivector*, align 8
  %tree_ll.addr = alloca %struct.HuffmanTree*, align 8
  %tree_d.addr = alloca %struct.HuffmanTree*, align 8
  %i = alloca i64, align 8
  %val = alloca i32, align 4
  %length_index = alloca i32, align 4
  %n_length_extra_bits = alloca i32, align 4
  %length_extra_bits = alloca i32, align 4
  %distance_code = alloca i32, align 4
  %distance_index = alloca i32, align 4
  %n_distance_extra_bits = alloca i32, align 4
  %distance_extra_bits = alloca i32, align 4
  store %struct.LodePNGBitWriter* %writer, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  store %struct.uivector* %lz77_encoded, %struct.uivector** %lz77_encoded.addr, align 8, !tbaa !2
  store %struct.HuffmanTree* %tree_ll, %struct.HuffmanTree** %tree_ll.addr, align 8, !tbaa !2
  store %struct.HuffmanTree* %tree_d, %struct.HuffmanTree** %tree_d.addr, align 8, !tbaa !2
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !6
  %2 = load %struct.uivector*, %struct.uivector** %lz77_encoded.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.uivector, %struct.uivector* %2, i32 0, i32 1
  %3 = load i64, i64* %size, align 8, !tbaa !193
  %cmp = icmp ne i64 %1, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = bitcast i32* %val to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #16
  %5 = load %struct.uivector*, %struct.uivector** %lz77_encoded.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.uivector, %struct.uivector* %5, i32 0, i32 0
  %6 = load i32*, i32** %data, align 8, !tbaa !191
  %7 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %7
  %8 = load i32, i32* %arrayidx, align 4, !tbaa !8
  store i32 %8, i32* %val, align 4, !tbaa !8
  %9 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %10 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree_ll.addr, align 8, !tbaa !2
  %codes = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %10, i32 0, i32 0
  %11 = load i32*, i32** %codes, align 8, !tbaa !174
  %12 = load i32, i32* %val, align 4, !tbaa !8
  %idxprom = zext i32 %12 to i64
  %arrayidx1 = getelementptr inbounds i32, i32* %11, i64 %idxprom
  %13 = load i32, i32* %arrayidx1, align 4, !tbaa !8
  %14 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree_ll.addr, align 8, !tbaa !2
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %14, i32 0, i32 1
  %15 = load i32*, i32** %lengths, align 8, !tbaa !176
  %16 = load i32, i32* %val, align 4, !tbaa !8
  %idxprom2 = zext i32 %16 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %15, i64 %idxprom2
  %17 = load i32, i32* %arrayidx3, align 4, !tbaa !8
  %conv = zext i32 %17 to i64
  call void @_ZL17writeBitsReversedP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %9, i32 %13, i64 %conv)
  %18 = load i32, i32* %val, align 4, !tbaa !8
  %cmp4 = icmp ugt i32 %18, 256
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %19 = bitcast i32* %length_index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %19) #16
  %20 = load i32, i32* %val, align 4, !tbaa !8
  %sub = sub i32 %20, 257
  store i32 %sub, i32* %length_index, align 4, !tbaa !8
  %21 = bitcast i32* %n_length_extra_bits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %21) #16
  %22 = load i32, i32* %length_index, align 4, !tbaa !8
  %idxprom5 = zext i32 %22 to i64
  %arrayidx6 = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL11LENGTHEXTRA, i64 0, i64 %idxprom5
  %23 = load i32, i32* %arrayidx6, align 4, !tbaa !8
  store i32 %23, i32* %n_length_extra_bits, align 4, !tbaa !8
  %24 = bitcast i32* %length_extra_bits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %24) #16
  %25 = load %struct.uivector*, %struct.uivector** %lz77_encoded.addr, align 8, !tbaa !2
  %data7 = getelementptr inbounds %struct.uivector, %struct.uivector* %25, i32 0, i32 0
  %26 = load i32*, i32** %data7, align 8, !tbaa !191
  %27 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %27, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  %arrayidx8 = getelementptr inbounds i32, i32* %26, i64 %inc
  %28 = load i32, i32* %arrayidx8, align 4, !tbaa !8
  store i32 %28, i32* %length_extra_bits, align 4, !tbaa !8
  %29 = bitcast i32* %distance_code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %29) #16
  %30 = load %struct.uivector*, %struct.uivector** %lz77_encoded.addr, align 8, !tbaa !2
  %data9 = getelementptr inbounds %struct.uivector, %struct.uivector* %30, i32 0, i32 0
  %31 = load i32*, i32** %data9, align 8, !tbaa !191
  %32 = load i64, i64* %i, align 8, !tbaa !6
  %inc10 = add i64 %32, 1
  store i64 %inc10, i64* %i, align 8, !tbaa !6
  %arrayidx11 = getelementptr inbounds i32, i32* %31, i64 %inc10
  %33 = load i32, i32* %arrayidx11, align 4, !tbaa !8
  store i32 %33, i32* %distance_code, align 4, !tbaa !8
  %34 = bitcast i32* %distance_index to i8*
  call void @llvm.lifetime.start(i64 4, i8* %34) #16
  %35 = load i32, i32* %distance_code, align 4, !tbaa !8
  store i32 %35, i32* %distance_index, align 4, !tbaa !8
  %36 = bitcast i32* %n_distance_extra_bits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %36) #16
  %37 = load i32, i32* %distance_index, align 4, !tbaa !8
  %idxprom12 = zext i32 %37 to i64
  %arrayidx13 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL13DISTANCEEXTRA, i64 0, i64 %idxprom12
  %38 = load i32, i32* %arrayidx13, align 4, !tbaa !8
  store i32 %38, i32* %n_distance_extra_bits, align 4, !tbaa !8
  %39 = bitcast i32* %distance_extra_bits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %39) #16
  %40 = load %struct.uivector*, %struct.uivector** %lz77_encoded.addr, align 8, !tbaa !2
  %data14 = getelementptr inbounds %struct.uivector, %struct.uivector* %40, i32 0, i32 0
  %41 = load i32*, i32** %data14, align 8, !tbaa !191
  %42 = load i64, i64* %i, align 8, !tbaa !6
  %inc15 = add i64 %42, 1
  store i64 %inc15, i64* %i, align 8, !tbaa !6
  %arrayidx16 = getelementptr inbounds i32, i32* %41, i64 %inc15
  %43 = load i32, i32* %arrayidx16, align 4, !tbaa !8
  store i32 %43, i32* %distance_extra_bits, align 4, !tbaa !8
  %44 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %45 = load i32, i32* %length_extra_bits, align 4, !tbaa !8
  %46 = load i32, i32* %n_length_extra_bits, align 4, !tbaa !8
  %conv17 = zext i32 %46 to i64
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %44, i32 %45, i64 %conv17)
  %47 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %48 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree_d.addr, align 8, !tbaa !2
  %codes18 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %48, i32 0, i32 0
  %49 = load i32*, i32** %codes18, align 8, !tbaa !174
  %50 = load i32, i32* %distance_code, align 4, !tbaa !8
  %idxprom19 = zext i32 %50 to i64
  %arrayidx20 = getelementptr inbounds i32, i32* %49, i64 %idxprom19
  %51 = load i32, i32* %arrayidx20, align 4, !tbaa !8
  %52 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree_d.addr, align 8, !tbaa !2
  %lengths21 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %52, i32 0, i32 1
  %53 = load i32*, i32** %lengths21, align 8, !tbaa !176
  %54 = load i32, i32* %distance_code, align 4, !tbaa !8
  %idxprom22 = zext i32 %54 to i64
  %arrayidx23 = getelementptr inbounds i32, i32* %53, i64 %idxprom22
  %55 = load i32, i32* %arrayidx23, align 4, !tbaa !8
  %conv24 = zext i32 %55 to i64
  call void @_ZL17writeBitsReversedP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %47, i32 %51, i64 %conv24)
  %56 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %57 = load i32, i32* %distance_extra_bits, align 4, !tbaa !8
  %58 = load i32, i32* %n_distance_extra_bits, align 4, !tbaa !8
  %conv25 = zext i32 %58 to i64
  call void @_ZL9writeBitsP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %56, i32 %57, i64 %conv25)
  %59 = bitcast i32* %distance_extra_bits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #16
  %60 = bitcast i32* %n_distance_extra_bits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %60) #16
  %61 = bitcast i32* %distance_index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %61) #16
  %62 = bitcast i32* %distance_code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %62) #16
  %63 = bitcast i32* %length_extra_bits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %63) #16
  %64 = bitcast i32* %n_length_extra_bits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %64) #16
  %65 = bitcast i32* %length_index to i8*
  call void @llvm.lifetime.end(i64 4, i8* %65) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %66 = bitcast i32* %val to i8*
  call void @llvm.lifetime.end(i64 4, i8* %66) #16
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %67 = load i64, i64* %i, align 8, !tbaa !6
  %inc26 = add i64 %67, 1
  store i64 %inc26, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %68 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %68) #16
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL16uivector_cleanupPv(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !2
  %1 = bitcast i8* %0 to %struct.uivector*
  %allocsize = getelementptr inbounds %struct.uivector, %struct.uivector* %1, i32 0, i32 2
  store i64 0, i64* %allocsize, align 8, !tbaa !194
  %2 = load i8*, i8** %p.addr, align 8, !tbaa !2
  %3 = bitcast i8* %2 to %struct.uivector*
  %size = getelementptr inbounds %struct.uivector, %struct.uivector* %3, i32 0, i32 1
  store i64 0, i64* %size, align 8, !tbaa !193
  %4 = load i8*, i8** %p.addr, align 8, !tbaa !2
  %5 = bitcast i8* %4 to %struct.uivector*
  %data = getelementptr inbounds %struct.uivector, %struct.uivector* %5, i32 0, i32 0
  %6 = load i32*, i32** %data, align 8, !tbaa !191
  %7 = bitcast i32* %6 to i8*
  call void @_ZL12lodepng_freePv(i8* %7)
  %8 = load i8*, i8** %p.addr, align 8, !tbaa !2
  %9 = bitcast i8* %8 to %struct.uivector*
  %data1 = getelementptr inbounds %struct.uivector, %struct.uivector* %9, i32 0, i32 0
  store i32* null, i32** %data1, align 8, !tbaa !191
  ret void
}

; Function Attrs: ssp uwtable
define internal void @_ZL17writeBitsReversedP16LodePNGBitWriterjm(%struct.LodePNGBitWriter* %writer, i32 %value, i64 %nbits) #0 {
entry:
  %writer.addr = alloca %struct.LodePNGBitWriter*, align 8
  %value.addr = alloca i32, align 4
  %nbits.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.LodePNGBitWriter* %writer, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  store i32 %value, i32* %value.addr, align 4, !tbaa !8
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !tbaa !6
  %2 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %3, i32 0, i32 1
  %4 = load i8, i8* %bp, align 8, !tbaa !183
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 7
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %if.then, label %if.end8

if.then:                                          ; preds = %for.body
  %5 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %5, i32 0, i32 0
  %6 = load %struct.ucvector*, %struct.ucvector** %data, align 8, !tbaa !181
  %7 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data2 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %7, i32 0, i32 0
  %8 = load %struct.ucvector*, %struct.ucvector** %data2, align 8, !tbaa !181
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %8, i32 0, i32 1
  %9 = load i64, i64* %size, align 8, !tbaa !34
  %add = add i64 %9, 1
  %call = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %6, i64 %add)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  %10 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data4 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %10, i32 0, i32 0
  %11 = load %struct.ucvector*, %struct.ucvector** %data4, align 8, !tbaa !181
  %data5 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %11, i32 0, i32 0
  %12 = load i8*, i8** %data5, align 8, !tbaa !32
  %13 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data6 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %13, i32 0, i32 0
  %14 = load %struct.ucvector*, %struct.ucvector** %data6, align 8, !tbaa !181
  %size7 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %14, i32 0, i32 1
  %15 = load i64, i64* %size7, align 8, !tbaa !34
  %sub = sub i64 %15, 1
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 %sub
  store i8 0, i8* %arrayidx, align 1, !tbaa !16
  br label %if.end8

if.end8:                                          ; preds = %if.end, %for.body
  %16 = load i32, i32* %value.addr, align 4, !tbaa !8
  %17 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %sub9 = sub i64 %17, 1
  %18 = load i64, i64* %i, align 8, !tbaa !6
  %sub10 = sub i64 %sub9, %18
  %sh_prom = trunc i64 %sub10 to i32
  %shr = lshr i32 %16, %sh_prom
  %and11 = and i32 %shr, 1
  %conv12 = trunc i32 %and11 to i8
  %conv13 = zext i8 %conv12 to i32
  %19 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp14 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %19, i32 0, i32 1
  %20 = load i8, i8* %bp14, align 8, !tbaa !183
  %conv15 = zext i8 %20 to i32
  %and16 = and i32 %conv15, 7
  %shl = shl i32 %conv13, %and16
  %21 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data17 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %21, i32 0, i32 0
  %22 = load %struct.ucvector*, %struct.ucvector** %data17, align 8, !tbaa !181
  %data18 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %22, i32 0, i32 0
  %23 = load i8*, i8** %data18, align 8, !tbaa !32
  %24 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %data19 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %24, i32 0, i32 0
  %25 = load %struct.ucvector*, %struct.ucvector** %data19, align 8, !tbaa !181
  %size20 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %25, i32 0, i32 1
  %26 = load i64, i64* %size20, align 8, !tbaa !34
  %sub21 = sub i64 %26, 1
  %arrayidx22 = getelementptr inbounds i8, i8* %23, i64 %sub21
  %27 = load i8, i8* %arrayidx22, align 1, !tbaa !16
  %conv23 = zext i8 %27 to i32
  %or = or i32 %conv23, %shl
  %conv24 = trunc i32 %or to i8
  store i8 %conv24, i8* %arrayidx22, align 1, !tbaa !16
  %28 = load %struct.LodePNGBitWriter*, %struct.LodePNGBitWriter** %writer.addr, align 8, !tbaa !2
  %bp25 = getelementptr inbounds %struct.LodePNGBitWriter, %struct.LodePNGBitWriter* %28, i32 0, i32 1
  %29 = load i8, i8* %bp25, align 8, !tbaa !183
  %inc = add i8 %29, 1
  store i8 %inc, i8* %bp25, align 8, !tbaa !183
  br label %for.inc

for.inc:                                          ; preds = %if.end8
  %30 = load i64, i64* %i, align 8, !tbaa !6
  %inc26 = add i64 %30, 1
  store i64 %inc26, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then3
  %31 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL7getHashPKhmm(i8* %data, i64 %size, i64 %pos) #4 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %result = alloca i32, align 4
  %amount = alloca i64, align 8
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  store i64 %pos, i64* %pos.addr, align 8, !tbaa !6
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %result, align 4, !tbaa !8
  %1 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %add = add i64 %1, 2
  %2 = load i64, i64* %size.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %add, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %4 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %add1 = add i64 %4, 0
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %add1
  %5 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %5 to i32
  %shl = shl i32 %conv, 0
  %6 = load i32, i32* %result, align 4, !tbaa !8
  %xor = xor i32 %6, %shl
  store i32 %xor, i32* %result, align 4, !tbaa !8
  %7 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %8 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %add2 = add i64 %8, 1
  %arrayidx3 = getelementptr inbounds i8, i8* %7, i64 %add2
  %9 = load i8, i8* %arrayidx3, align 1, !tbaa !16
  %conv4 = zext i8 %9 to i32
  %shl5 = shl i32 %conv4, 4
  %10 = load i32, i32* %result, align 4, !tbaa !8
  %xor6 = xor i32 %10, %shl5
  store i32 %xor6, i32* %result, align 4, !tbaa !8
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %12 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %add7 = add i64 %12, 2
  %arrayidx8 = getelementptr inbounds i8, i8* %11, i64 %add7
  %13 = load i8, i8* %arrayidx8, align 1, !tbaa !16
  %conv9 = zext i8 %13 to i32
  %shl10 = shl i32 %conv9, 8
  %14 = load i32, i32* %result, align 4, !tbaa !8
  %xor11 = xor i32 %14, %shl10
  store i32 %xor11, i32* %result, align 4, !tbaa !8
  br label %if.end21

if.else:                                          ; preds = %entry
  %15 = bitcast i64* %amount to i8*
  call void @llvm.lifetime.start(i64 8, i8* %15) #16
  %16 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %16) #16
  %17 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %18 = load i64, i64* %size.addr, align 8, !tbaa !6
  %cmp12 = icmp uge i64 %17, %18
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %if.else
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.else
  %19 = load i64, i64* %size.addr, align 8, !tbaa !6
  %20 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %sub = sub i64 %19, %20
  store i64 %sub, i64* %amount, align 8, !tbaa !6
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %21 = load i64, i64* %i, align 8, !tbaa !6
  %22 = load i64, i64* %amount, align 8, !tbaa !6
  %cmp14 = icmp ne i64 %21, %22
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %23 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %24 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %25 = load i64, i64* %i, align 8, !tbaa !6
  %add15 = add i64 %24, %25
  %arrayidx16 = getelementptr inbounds i8, i8* %23, i64 %add15
  %26 = load i8, i8* %arrayidx16, align 1, !tbaa !16
  %conv17 = zext i8 %26 to i32
  %27 = load i64, i64* %i, align 8, !tbaa !6
  %mul = mul i64 %27, 8
  %sh_prom = trunc i64 %mul to i32
  %shl18 = shl i32 %conv17, %sh_prom
  %28 = load i32, i32* %result, align 4, !tbaa !8
  %xor19 = xor i32 %28, %shl18
  store i32 %xor19, i32* %result, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %29 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %29, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then13
  %30 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %30) #16
  %31 = bitcast i64* %amount to i8*
  call void @llvm.lifetime.end(i64 8, i8* %31) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup22 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end21

if.end21:                                         ; preds = %cleanup.cont, %if.then
  %32 = load i32, i32* %result, align 4, !tbaa !8
  %and = and i32 %32, 65535
  store i32 %and, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup22

cleanup22:                                        ; preds = %if.end21, %cleanup
  %33 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %33) #16
  %34 = load i32, i32* %retval, align 4
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL10countZerosPKhmm(i8* %data, i64 %size, i64 %pos) #4 {
entry:
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %pos.addr = alloca i64, align 8
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  store i64 %pos, i64* %pos.addr, align 8, !tbaa !6
  %0 = bitcast i8** %start to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %2 = load i64, i64* %pos.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %add.ptr, i8** %start, align 8, !tbaa !2
  %3 = bitcast i8** %end to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load i8*, i8** %start, align 8, !tbaa !2
  %add.ptr1 = getelementptr inbounds i8, i8* %4, i64 258
  store i8* %add.ptr1, i8** %end, align 8, !tbaa !2
  %5 = load i8*, i8** %end, align 8, !tbaa !2
  %6 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %7 = load i64, i64* %size.addr, align 8, !tbaa !6
  %add.ptr2 = getelementptr inbounds i8, i8* %6, i64 %7
  %cmp = icmp ugt i8* %5, %add.ptr2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %9 = load i64, i64* %size.addr, align 8, !tbaa !6
  %add.ptr3 = getelementptr inbounds i8, i8* %8, i64 %9
  store i8* %add.ptr3, i8** %end, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load i8*, i8** %start, align 8, !tbaa !2
  store i8* %10, i8** %data.addr, align 8, !tbaa !2
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %11 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %12 = load i8*, i8** %end, align 8, !tbaa !2
  %cmp4 = icmp ne i8* %11, %12
  br i1 %cmp4, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %13 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %14 = load i8, i8* %13, align 1, !tbaa !16
  %conv = zext i8 %14 to i32
  %cmp5 = icmp eq i32 %conv, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %15 = phi i1 [ false, %while.cond ], [ %cmp5, %land.rhs ]
  br i1 %15, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %16 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %data.addr, align 8, !tbaa !2
  br label %while.cond

while.end:                                        ; preds = %land.end
  %17 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %18 = load i8*, i8** %start, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv6 = trunc i64 %sub.ptr.sub to i32
  %19 = bitcast i8** %end to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  %20 = bitcast i8** %start to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #16
  ret i32 %conv6
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15updateHashChainP4Hashmjt(%struct.Hash* %hash, i64 %wpos, i32 %hashval, i16 zeroext %numzeros) #4 {
entry:
  %hash.addr = alloca %struct.Hash*, align 8
  %wpos.addr = alloca i64, align 8
  %hashval.addr = alloca i32, align 4
  %numzeros.addr = alloca i16, align 2
  store %struct.Hash* %hash, %struct.Hash** %hash.addr, align 8, !tbaa !2
  store i64 %wpos, i64* %wpos.addr, align 8, !tbaa !6
  store i32 %hashval, i32* %hashval.addr, align 4, !tbaa !8
  store i16 %numzeros, i16* %numzeros.addr, align 2, !tbaa !89
  %0 = load i32, i32* %hashval.addr, align 4, !tbaa !8
  %1 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %val = getelementptr inbounds %struct.Hash, %struct.Hash* %1, i32 0, i32 2
  %2 = load i32*, i32** %val, align 8, !tbaa !186
  %3 = load i64, i64* %wpos.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %3
  store i32 %0, i32* %arrayidx, align 4, !tbaa !8
  %4 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %head = getelementptr inbounds %struct.Hash, %struct.Hash* %4, i32 0, i32 0
  %5 = load i32*, i32** %head, align 8, !tbaa !184
  %6 = load i32, i32* %hashval.addr, align 4, !tbaa !8
  %idxprom = zext i32 %6 to i64
  %arrayidx1 = getelementptr inbounds i32, i32* %5, i64 %idxprom
  %7 = load i32, i32* %arrayidx1, align 4, !tbaa !8
  %cmp = icmp ne i32 %7, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %head2 = getelementptr inbounds %struct.Hash, %struct.Hash* %8, i32 0, i32 0
  %9 = load i32*, i32** %head2, align 8, !tbaa !184
  %10 = load i32, i32* %hashval.addr, align 4, !tbaa !8
  %idxprom3 = zext i32 %10 to i64
  %arrayidx4 = getelementptr inbounds i32, i32* %9, i64 %idxprom3
  %11 = load i32, i32* %arrayidx4, align 4, !tbaa !8
  %conv = trunc i32 %11 to i16
  %12 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chain = getelementptr inbounds %struct.Hash, %struct.Hash* %12, i32 0, i32 1
  %13 = load i16*, i16** %chain, align 8, !tbaa !187
  %14 = load i64, i64* %wpos.addr, align 8, !tbaa !6
  %arrayidx5 = getelementptr inbounds i16, i16* %13, i64 %14
  store i16 %conv, i16* %arrayidx5, align 2, !tbaa !89
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %15 = load i64, i64* %wpos.addr, align 8, !tbaa !6
  %conv6 = trunc i64 %15 to i32
  %16 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %head7 = getelementptr inbounds %struct.Hash, %struct.Hash* %16, i32 0, i32 0
  %17 = load i32*, i32** %head7, align 8, !tbaa !184
  %18 = load i32, i32* %hashval.addr, align 4, !tbaa !8
  %idxprom8 = zext i32 %18 to i64
  %arrayidx9 = getelementptr inbounds i32, i32* %17, i64 %idxprom8
  store i32 %conv6, i32* %arrayidx9, align 4, !tbaa !8
  %19 = load i16, i16* %numzeros.addr, align 2, !tbaa !89
  %20 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %zeros = getelementptr inbounds %struct.Hash, %struct.Hash* %20, i32 0, i32 5
  %21 = load i16*, i16** %zeros, align 8, !tbaa !188
  %22 = load i64, i64* %wpos.addr, align 8, !tbaa !6
  %arrayidx10 = getelementptr inbounds i16, i16* %21, i64 %22
  store i16 %19, i16* %arrayidx10, align 2, !tbaa !89
  %23 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %headz = getelementptr inbounds %struct.Hash, %struct.Hash* %23, i32 0, i32 3
  %24 = load i32*, i32** %headz, align 8, !tbaa !189
  %25 = load i16, i16* %numzeros.addr, align 2, !tbaa !89
  %idxprom11 = zext i16 %25 to i64
  %arrayidx12 = getelementptr inbounds i32, i32* %24, i64 %idxprom11
  %26 = load i32, i32* %arrayidx12, align 4, !tbaa !8
  %cmp13 = icmp ne i32 %26, -1
  br i1 %cmp13, label %if.then14, label %if.end20

if.then14:                                        ; preds = %if.end
  %27 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %headz15 = getelementptr inbounds %struct.Hash, %struct.Hash* %27, i32 0, i32 3
  %28 = load i32*, i32** %headz15, align 8, !tbaa !189
  %29 = load i16, i16* %numzeros.addr, align 2, !tbaa !89
  %idxprom16 = zext i16 %29 to i64
  %arrayidx17 = getelementptr inbounds i32, i32* %28, i64 %idxprom16
  %30 = load i32, i32* %arrayidx17, align 4, !tbaa !8
  %conv18 = trunc i32 %30 to i16
  %31 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %chainz = getelementptr inbounds %struct.Hash, %struct.Hash* %31, i32 0, i32 4
  %32 = load i16*, i16** %chainz, align 8, !tbaa !190
  %33 = load i64, i64* %wpos.addr, align 8, !tbaa !6
  %arrayidx19 = getelementptr inbounds i16, i16* %32, i64 %33
  store i16 %conv18, i16* %arrayidx19, align 2, !tbaa !89
  br label %if.end20

if.end20:                                         ; preds = %if.then14, %if.end
  %34 = load i64, i64* %wpos.addr, align 8, !tbaa !6
  %conv21 = trunc i64 %34 to i32
  %35 = load %struct.Hash*, %struct.Hash** %hash.addr, align 8, !tbaa !2
  %headz22 = getelementptr inbounds %struct.Hash, %struct.Hash* %35, i32 0, i32 3
  %36 = load i32*, i32** %headz22, align 8, !tbaa !189
  %37 = load i16, i16* %numzeros.addr, align 2, !tbaa !89
  %idxprom23 = zext i16 %37 to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %36, i64 %idxprom23
  store i32 %conv21, i32* %arrayidx24, align 4, !tbaa !8
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL18uivector_push_backP8uivectorj(%struct.uivector* %p, i32 %c) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.uivector*, align 8
  %c.addr = alloca i32, align 4
  store %struct.uivector* %p, %struct.uivector** %p.addr, align 8, !tbaa !2
  store i32 %c, i32* %c.addr, align 4, !tbaa !8
  %0 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %1 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.uivector, %struct.uivector* %1, i32 0, i32 1
  %2 = load i64, i64* %size, align 8, !tbaa !193
  %add = add i64 %2, 1
  %call = call i32 @_ZL15uivector_resizeP8uivectorm(%struct.uivector* %0, i64 %add)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %c.addr, align 4, !tbaa !8
  %4 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.uivector, %struct.uivector* %4, i32 0, i32 0
  %5 = load i32*, i32** %data, align 8, !tbaa !191
  %6 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %size1 = getelementptr inbounds %struct.uivector, %struct.uivector* %6, i32 0, i32 1
  %7 = load i64, i64* %size1, align 8, !tbaa !193
  %sub = sub i64 %7, 1
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %sub
  store i32 %3, i32* %arrayidx, align 4, !tbaa !8
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: ssp uwtable
define internal void @_ZL17addLengthDistanceP8uivectormm(%struct.uivector* %values, i64 %length, i64 %distance) #0 {
entry:
  %values.addr = alloca %struct.uivector*, align 8
  %length.addr = alloca i64, align 8
  %distance.addr = alloca i64, align 8
  %length_code = alloca i32, align 4
  %extra_length = alloca i32, align 4
  %dist_code = alloca i32, align 4
  %extra_distance = alloca i32, align 4
  %pos = alloca i64, align 8
  %ok = alloca i32, align 4
  store %struct.uivector* %values, %struct.uivector** %values.addr, align 8, !tbaa !2
  store i64 %length, i64* %length.addr, align 8, !tbaa !6
  store i64 %distance, i64* %distance.addr, align 8, !tbaa !6
  %0 = bitcast i32* %length_code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load i64, i64* %length.addr, align 8, !tbaa !6
  %call = call i64 @_ZL15searchCodeIndexPKjmm(i32* getelementptr inbounds ([29 x i32], [29 x i32]* @_ZL10LENGTHBASE, i32 0, i32 0), i64 29, i64 %1)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %length_code, align 4, !tbaa !8
  %2 = bitcast i32* %extra_length to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i64, i64* %length.addr, align 8, !tbaa !6
  %4 = load i32, i32* %length_code, align 4, !tbaa !8
  %idxprom = zext i32 %4 to i64
  %arrayidx = getelementptr inbounds [29 x i32], [29 x i32]* @_ZL10LENGTHBASE, i64 0, i64 %idxprom
  %5 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %conv1 = zext i32 %5 to i64
  %sub = sub i64 %3, %conv1
  %conv2 = trunc i64 %sub to i32
  store i32 %conv2, i32* %extra_length, align 4, !tbaa !8
  %6 = bitcast i32* %dist_code to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  %7 = load i64, i64* %distance.addr, align 8, !tbaa !6
  %call3 = call i64 @_ZL15searchCodeIndexPKjmm(i32* getelementptr inbounds ([30 x i32], [30 x i32]* @_ZL12DISTANCEBASE, i32 0, i32 0), i64 30, i64 %7)
  %conv4 = trunc i64 %call3 to i32
  store i32 %conv4, i32* %dist_code, align 4, !tbaa !8
  %8 = bitcast i32* %extra_distance to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #16
  %9 = load i64, i64* %distance.addr, align 8, !tbaa !6
  %10 = load i32, i32* %dist_code, align 4, !tbaa !8
  %idxprom5 = zext i32 %10 to i64
  %arrayidx6 = getelementptr inbounds [30 x i32], [30 x i32]* @_ZL12DISTANCEBASE, i64 0, i64 %idxprom5
  %11 = load i32, i32* %arrayidx6, align 4, !tbaa !8
  %conv7 = zext i32 %11 to i64
  %sub8 = sub i64 %9, %conv7
  %conv9 = trunc i64 %sub8 to i32
  store i32 %conv9, i32* %extra_distance, align 4, !tbaa !8
  %12 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #16
  %13 = load %struct.uivector*, %struct.uivector** %values.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.uivector, %struct.uivector* %13, i32 0, i32 1
  %14 = load i64, i64* %size, align 8, !tbaa !193
  store i64 %14, i64* %pos, align 8, !tbaa !6
  %15 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.start(i64 4, i8* %15) #16
  %16 = load %struct.uivector*, %struct.uivector** %values.addr, align 8, !tbaa !2
  %17 = load %struct.uivector*, %struct.uivector** %values.addr, align 8, !tbaa !2
  %size10 = getelementptr inbounds %struct.uivector, %struct.uivector* %17, i32 0, i32 1
  %18 = load i64, i64* %size10, align 8, !tbaa !193
  %add = add i64 %18, 4
  %call11 = call i32 @_ZL15uivector_resizeP8uivectorm(%struct.uivector* %16, i64 %add)
  store i32 %call11, i32* %ok, align 4, !tbaa !8
  %19 = load i32, i32* %ok, align 4, !tbaa !8
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %20 = load i32, i32* %length_code, align 4, !tbaa !8
  %add12 = add i32 %20, 257
  %21 = load %struct.uivector*, %struct.uivector** %values.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.uivector, %struct.uivector* %21, i32 0, i32 0
  %22 = load i32*, i32** %data, align 8, !tbaa !191
  %23 = load i64, i64* %pos, align 8, !tbaa !6
  %add13 = add i64 %23, 0
  %arrayidx14 = getelementptr inbounds i32, i32* %22, i64 %add13
  store i32 %add12, i32* %arrayidx14, align 4, !tbaa !8
  %24 = load i32, i32* %extra_length, align 4, !tbaa !8
  %25 = load %struct.uivector*, %struct.uivector** %values.addr, align 8, !tbaa !2
  %data15 = getelementptr inbounds %struct.uivector, %struct.uivector* %25, i32 0, i32 0
  %26 = load i32*, i32** %data15, align 8, !tbaa !191
  %27 = load i64, i64* %pos, align 8, !tbaa !6
  %add16 = add i64 %27, 1
  %arrayidx17 = getelementptr inbounds i32, i32* %26, i64 %add16
  store i32 %24, i32* %arrayidx17, align 4, !tbaa !8
  %28 = load i32, i32* %dist_code, align 4, !tbaa !8
  %29 = load %struct.uivector*, %struct.uivector** %values.addr, align 8, !tbaa !2
  %data18 = getelementptr inbounds %struct.uivector, %struct.uivector* %29, i32 0, i32 0
  %30 = load i32*, i32** %data18, align 8, !tbaa !191
  %31 = load i64, i64* %pos, align 8, !tbaa !6
  %add19 = add i64 %31, 2
  %arrayidx20 = getelementptr inbounds i32, i32* %30, i64 %add19
  store i32 %28, i32* %arrayidx20, align 4, !tbaa !8
  %32 = load i32, i32* %extra_distance, align 4, !tbaa !8
  %33 = load %struct.uivector*, %struct.uivector** %values.addr, align 8, !tbaa !2
  %data21 = getelementptr inbounds %struct.uivector, %struct.uivector* %33, i32 0, i32 0
  %34 = load i32*, i32** %data21, align 8, !tbaa !191
  %35 = load i64, i64* %pos, align 8, !tbaa !6
  %add22 = add i64 %35, 3
  %arrayidx23 = getelementptr inbounds i32, i32* %34, i64 %add22
  store i32 %32, i32* %arrayidx23, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %36 = bitcast i32* %ok to i8*
  call void @llvm.lifetime.end(i64 4, i8* %36) #16
  %37 = bitcast i64* %pos to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #16
  %38 = bitcast i32* %extra_distance to i8*
  call void @llvm.lifetime.end(i64 4, i8* %38) #16
  %39 = bitcast i32* %dist_code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %39) #16
  %40 = bitcast i32* %extra_length to i8*
  call void @llvm.lifetime.end(i64 4, i8* %40) #16
  %41 = bitcast i32* %length_code to i8*
  call void @llvm.lifetime.end(i64 4, i8* %41) #16
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL15uivector_resizeP8uivectorm(%struct.uivector* %p, i64 %size) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.uivector*, align 8
  %size.addr = alloca i64, align 8
  %allocsize = alloca i64, align 8
  %newsize = alloca i64, align 8
  %data = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32
  store %struct.uivector* %p, %struct.uivector** %p.addr, align 8, !tbaa !2
  store i64 %size, i64* %size.addr, align 8, !tbaa !6
  %0 = bitcast i64* %allocsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i64, i64* %size.addr, align 8, !tbaa !6
  %mul = mul i64 %1, 4
  store i64 %mul, i64* %allocsize, align 8, !tbaa !6
  %2 = load i64, i64* %allocsize, align 8, !tbaa !6
  %3 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %allocsize1 = getelementptr inbounds %struct.uivector, %struct.uivector* %3, i32 0, i32 2
  %4 = load i64, i64* %allocsize1, align 8, !tbaa !194
  %cmp = icmp ugt i64 %2, %4
  br i1 %cmp, label %if.then, label %if.end8

if.then:                                          ; preds = %entry
  %5 = bitcast i64* %newsize to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  %6 = load i64, i64* %allocsize, align 8, !tbaa !6
  %7 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %allocsize2 = getelementptr inbounds %struct.uivector, %struct.uivector* %7, i32 0, i32 2
  %8 = load i64, i64* %allocsize2, align 8, !tbaa !194
  %shr = lshr i64 %8, 1
  %add = add i64 %6, %shr
  store i64 %add, i64* %newsize, align 8, !tbaa !6
  %9 = bitcast i8** %data to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #16
  %10 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %data3 = getelementptr inbounds %struct.uivector, %struct.uivector* %10, i32 0, i32 0
  %11 = load i32*, i32** %data3, align 8, !tbaa !191
  %12 = bitcast i32* %11 to i8*
  %13 = load i64, i64* %newsize, align 8, !tbaa !6
  %call = call i8* @_ZL15lodepng_reallocPvm(i8* %12, i64 %13)
  store i8* %call, i8** %data, align 8, !tbaa !2
  %14 = load i8*, i8** %data, align 8, !tbaa !2
  %tobool = icmp ne i8* %14, null
  br i1 %tobool, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  %15 = load i64, i64* %newsize, align 8, !tbaa !6
  %16 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %allocsize5 = getelementptr inbounds %struct.uivector, %struct.uivector* %16, i32 0, i32 2
  store i64 %15, i64* %allocsize5, align 8, !tbaa !194
  %17 = load i8*, i8** %data, align 8, !tbaa !2
  %18 = bitcast i8* %17 to i32*
  %19 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %data6 = getelementptr inbounds %struct.uivector, %struct.uivector* %19, i32 0, i32 0
  store i32* %18, i32** %data6, align 8, !tbaa !191
  br label %if.end

if.else:                                          ; preds = %if.then
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then4
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.else
  %20 = bitcast i8** %data to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #16
  %21 = bitcast i64* %newsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup10 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end8

if.end8:                                          ; preds = %cleanup.cont, %entry
  %22 = load i64, i64* %size.addr, align 8, !tbaa !6
  %23 = load %struct.uivector*, %struct.uivector** %p.addr, align 8, !tbaa !2
  %size9 = getelementptr inbounds %struct.uivector, %struct.uivector* %23, i32 0, i32 1
  store i64 %22, i64* %size9, align 8, !tbaa !193
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup10

cleanup10:                                        ; preds = %if.end8, %cleanup
  %24 = bitcast i64* %allocsize to i8*
  call void @llvm.lifetime.end(i64 8, i8* %24) #16
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZL15searchCodeIndexPKjmm(i32* %array, i64 %array_size, i64 %value) #4 {
entry:
  %array.addr = alloca i32*, align 8
  %array_size.addr = alloca i64, align 8
  %value.addr = alloca i64, align 8
  %left = alloca i64, align 8
  %right = alloca i64, align 8
  %mid = alloca i64, align 8
  store i32* %array, i32** %array.addr, align 8, !tbaa !2
  store i64 %array_size, i64* %array_size.addr, align 8, !tbaa !6
  store i64 %value, i64* %value.addr, align 8, !tbaa !6
  %0 = bitcast i64* %left to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 1, i64* %left, align 8, !tbaa !6
  %1 = bitcast i64* %right to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i64, i64* %array_size.addr, align 8, !tbaa !6
  %sub = sub i64 %2, 1
  store i64 %sub, i64* %right, align 8, !tbaa !6
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load i64, i64* %left, align 8, !tbaa !6
  %4 = load i64, i64* %right, align 8, !tbaa !6
  %cmp = icmp ule i64 %3, %4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = bitcast i64* %mid to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  %6 = load i64, i64* %left, align 8, !tbaa !6
  %7 = load i64, i64* %right, align 8, !tbaa !6
  %add = add i64 %6, %7
  %shr = lshr i64 %add, 1
  store i64 %shr, i64* %mid, align 8, !tbaa !6
  %8 = load i32*, i32** %array.addr, align 8, !tbaa !2
  %9 = load i64, i64* %mid, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 %9
  %10 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %conv = zext i32 %10 to i64
  %11 = load i64, i64* %value.addr, align 8, !tbaa !6
  %cmp1 = icmp uge i64 %conv, %11
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %12 = load i64, i64* %mid, align 8, !tbaa !6
  %sub2 = sub i64 %12, 1
  store i64 %sub2, i64* %right, align 8, !tbaa !6
  br label %if.end

if.else:                                          ; preds = %while.body
  %13 = load i64, i64* %mid, align 8, !tbaa !6
  %add3 = add i64 %13, 1
  store i64 %add3, i64* %left, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = bitcast i64* %mid to i8*
  call void @llvm.lifetime.end(i64 8, i8* %14) #16
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %15 = load i64, i64* %left, align 8, !tbaa !6
  %16 = load i64, i64* %array_size.addr, align 8, !tbaa !6
  %cmp4 = icmp uge i64 %15, %16
  br i1 %cmp4, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end
  %17 = load i32*, i32** %array.addr, align 8, !tbaa !2
  %18 = load i64, i64* %left, align 8, !tbaa !6
  %arrayidx5 = getelementptr inbounds i32, i32* %17, i64 %18
  %19 = load i32, i32* %arrayidx5, align 4, !tbaa !8
  %conv6 = zext i32 %19 to i64
  %20 = load i64, i64* %value.addr, align 8, !tbaa !6
  %cmp7 = icmp ugt i64 %conv6, %20
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %lor.lhs.false, %while.end
  %21 = load i64, i64* %left, align 8, !tbaa !6
  %dec = add i64 %21, -1
  store i64 %dec, i64* %left, align 8, !tbaa !6
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %lor.lhs.false
  %22 = load i64, i64* %left, align 8, !tbaa !6
  %23 = bitcast i64* %right to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #16
  %24 = bitcast i64* %left to i8*
  call void @llvm.lifetime.end(i64 8, i8* %24) #16
  ret i64 %22
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL31HuffmanTree_makeFromFrequenciesP11HuffmanTreePKjmmj(%struct.HuffmanTree* %tree, i32* %frequencies, i64 %mincodes, i64 %numcodes, i32 %maxbitlen) #0 {
entry:
  %retval = alloca i32, align 4
  %tree.addr = alloca %struct.HuffmanTree*, align 8
  %frequencies.addr = alloca i32*, align 8
  %mincodes.addr = alloca i64, align 8
  %numcodes.addr = alloca i64, align 8
  %maxbitlen.addr = alloca i32, align 4
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.HuffmanTree* %tree, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  store i32* %frequencies, i32** %frequencies.addr, align 8, !tbaa !2
  store i64 %mincodes, i64* %mincodes.addr, align 8, !tbaa !6
  store i64 %numcodes, i64* %numcodes.addr, align 8, !tbaa !6
  store i32 %maxbitlen, i32* %maxbitlen.addr, align 4, !tbaa !8
  %0 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32*, i32** %frequencies.addr, align 8, !tbaa !2
  %2 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %sub = sub i64 %2, 1
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %sub
  %3 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %while.cond
  %4 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %5 = load i64, i64* %mincodes.addr, align 8, !tbaa !6
  %cmp = icmp ugt i64 %4, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %dec = add i64 %7, -1
  store i64 %dec, i64* %numcodes.addr, align 8, !tbaa !6
  br label %while.cond

while.end:                                        ; preds = %land.end
  %8 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %mul = mul i64 %8, 4
  %call = call i8* @_ZL14lodepng_mallocm(i64 %mul)
  %9 = bitcast i8* %call to i32*
  %10 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %10, i32 0, i32 1
  store i32* %9, i32** %lengths, align 8, !tbaa !176
  %11 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths1 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %11, i32 0, i32 1
  %12 = load i32*, i32** %lengths1, align 8, !tbaa !176
  %tobool2 = icmp ne i32* %12, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %while.end
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %while.end
  %13 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %14 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %maxbitlen3 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %14, i32 0, i32 2
  store i32 %13, i32* %maxbitlen3, align 8, !tbaa !180
  %15 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %conv = trunc i64 %15 to i32
  %16 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %numcodes4 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %16, i32 0, i32 3
  store i32 %conv, i32* %numcodes4, align 4, !tbaa !179
  %17 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %lengths5 = getelementptr inbounds %struct.HuffmanTree, %struct.HuffmanTree* %17, i32 0, i32 1
  %18 = load i32*, i32** %lengths5, align 8, !tbaa !176
  %19 = load i32*, i32** %frequencies.addr, align 8, !tbaa !2
  %20 = load i64, i64* %numcodes.addr, align 8, !tbaa !6
  %21 = load i32, i32* %maxbitlen.addr, align 4, !tbaa !8
  %call6 = call i32 @_Z28lodepng_huffman_code_lengthsPjPKjmj(i32* %18, i32* %19, i64 %20, i32 %21)
  store i32 %call6, i32* %error, align 4, !tbaa !8
  %22 = load i32, i32* %error, align 4, !tbaa !8
  %tobool7 = icmp ne i32 %22, 0
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end
  %23 = load %struct.HuffmanTree*, %struct.HuffmanTree** %tree.addr, align 8, !tbaa !2
  %call9 = call i32 @_ZL28HuffmanTree_makeFromLengths2P11HuffmanTree(%struct.HuffmanTree* %23)
  store i32 %call9, i32* %error, align 4, !tbaa !8
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.end
  %24 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %24, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end10, %if.then
  %25 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #16
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL8inflatevP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* %out, i8* %in, i64 %insize, %struct.LodePNGDecompressSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca %struct.ucvector*, align 8
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %settings.addr = alloca %struct.LodePNGDecompressSettings*, align 8
  %error = alloca i32, align 4
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  store %struct.LodePNGDecompressSettings* %settings, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %0 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_inflate = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %0, i32 0, i32 3
  %custom_inflate1 = bitcast {}** %custom_inflate to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %1 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %custom_inflate1, align 8, !tbaa !50
  %tobool = icmp ne i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %custom_inflate2 = getelementptr inbounds %struct.LodePNGDecompressSettings, %struct.LodePNGDecompressSettings* %3, i32 0, i32 3
  %custom_inflate3 = bitcast {}** %custom_inflate2 to i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)**
  %4 = load i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)*, i32 (i8**, i64*, i8*, i64, %struct.LodePNGDecompressSettings*)** %custom_inflate3, align 8, !tbaa !50
  %5 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %5, i32 0, i32 0
  %6 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %6, i32 0, i32 1
  %7 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %8 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %9 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %call = call i32 %4(i8** %data, i64* %size, i8* %7, i64 %8, %struct.LodePNGDecompressSettings* %9)
  store i32 %call, i32* %error, align 4, !tbaa !8
  %10 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size4 = getelementptr inbounds %struct.ucvector, %struct.ucvector* %10, i32 0, i32 1
  %11 = load i64, i64* %size4, align 8, !tbaa !34
  %12 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %allocsize = getelementptr inbounds %struct.ucvector, %struct.ucvector* %12, i32 0, i32 2
  store i64 %11, i64* %allocsize, align 8, !tbaa !35
  %13 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %13, i32* %retval, align 4
  %14 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %14) #16
  br label %return

if.else:                                          ; preds = %entry
  %15 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %16 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %17 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %18 = load %struct.LodePNGDecompressSettings*, %struct.LodePNGDecompressSettings** %settings.addr, align 8, !tbaa !2
  %call5 = call i32 @_ZL16lodepng_inflatevP8ucvectorPKhmPK25LodePNGDecompressSettings(%struct.ucvector* %15, i8* %16, i64 %17, %struct.LodePNGDecompressSettings* %18)
  store i32 %call5, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then
  %19 = load i32, i32* %retval, align 4
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14update_adler32jPKhj(i32 %adler, i8* %data, i32 %len) #4 {
entry:
  %adler.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %i = alloca i32, align 4
  %amount = alloca i32, align 4
  store i32 %adler, i32* %adler.addr, align 4, !tbaa !8
  store i8* %data, i8** %data.addr, align 8, !tbaa !2
  store i32 %len, i32* %len.addr, align 4, !tbaa !8
  %0 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load i32, i32* %adler.addr, align 4, !tbaa !8
  %and = and i32 %1, 65535
  store i32 %and, i32* %s1, align 4, !tbaa !8
  %2 = bitcast i32* %s2 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i32, i32* %adler.addr, align 4, !tbaa !8
  %shr = lshr i32 %3, 16
  %and1 = and i32 %shr, 65535
  store i32 %and1, i32* %s2, align 4, !tbaa !8
  br label %while.cond

while.cond:                                       ; preds = %for.end, %entry
  %4 = load i32, i32* %len.addr, align 4, !tbaa !8
  %cmp = icmp ne i32 %4, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %6 = bitcast i32* %amount to i8*
  call void @llvm.lifetime.start(i64 4, i8* %6) #16
  %7 = load i32, i32* %len.addr, align 4, !tbaa !8
  %cmp2 = icmp ugt i32 %7, 5552
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %8 = load i32, i32* %len.addr, align 4, !tbaa !8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 5552, %cond.true ], [ %8, %cond.false ]
  store i32 %cond, i32* %amount, align 4, !tbaa !8
  %9 = load i32, i32* %amount, align 4, !tbaa !8
  %10 = load i32, i32* %len.addr, align 4, !tbaa !8
  %sub = sub i32 %10, %9
  store i32 %sub, i32* %len.addr, align 4, !tbaa !8
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end
  %11 = load i32, i32* %i, align 4, !tbaa !8
  %12 = load i32, i32* %amount, align 4, !tbaa !8
  %cmp3 = icmp ne i32 %11, %12
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %13 = load i8*, i8** %data.addr, align 8, !tbaa !2
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr, i8** %data.addr, align 8, !tbaa !2
  %14 = load i8, i8* %13, align 1, !tbaa !16
  %conv = zext i8 %14 to i32
  %15 = load i32, i32* %s1, align 4, !tbaa !8
  %add = add i32 %15, %conv
  store i32 %add, i32* %s1, align 4, !tbaa !8
  %16 = load i32, i32* %s1, align 4, !tbaa !8
  %17 = load i32, i32* %s2, align 4, !tbaa !8
  %add4 = add i32 %17, %16
  store i32 %add4, i32* %s2, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %18, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %s1, align 4, !tbaa !8
  %rem = urem i32 %19, 65521
  store i32 %rem, i32* %s1, align 4, !tbaa !8
  %20 = load i32, i32* %s2, align 4, !tbaa !8
  %rem5 = urem i32 %20, 65521
  store i32 %rem5, i32* %s2, align 4, !tbaa !8
  %21 = bitcast i32* %amount to i8*
  call void @llvm.lifetime.end(i64 4, i8* %21) #16
  %22 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #16
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load i32, i32* %s2, align 4, !tbaa !8
  %shl = shl i32 %23, 16
  %24 = load i32, i32* %s1, align 4, !tbaa !8
  %or = or i32 %shl, %24
  %25 = bitcast i32* %s2 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %25) #16
  %26 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %26) #16
  ret i32 %or
}

; Function Attrs: allocsize(1)
declare i8* @realloc(i8*, i64) #10

; Function Attrs: ssp uwtable
define internal i32 @_ZL18lodepng_chunk_initPPhP8ucvectorjPKc(i8** %chunk, %struct.ucvector* %out, i32 %length, i8* %type) #0 {
entry:
  %retval = alloca i32, align 4
  %chunk.addr = alloca i8**, align 8
  %out.addr = alloca %struct.ucvector*, align 8
  %length.addr = alloca i32, align 4
  %type.addr = alloca i8*, align 8
  %new_length = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8** %chunk, i8*** %chunk.addr, align 8, !tbaa !2
  store %struct.ucvector* %out, %struct.ucvector** %out.addr, align 8, !tbaa !2
  store i32 %length, i32* %length.addr, align 4, !tbaa !8
  store i8* %type, i8** %type.addr, align 8, !tbaa !2
  %0 = bitcast i64* %new_length to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %size = getelementptr inbounds %struct.ucvector, %struct.ucvector* %1, i32 0, i32 1
  %2 = load i64, i64* %size, align 8, !tbaa !34
  store i64 %2, i64* %new_length, align 8, !tbaa !6
  %3 = load i64, i64* %new_length, align 8, !tbaa !6
  %4 = load i32, i32* %length.addr, align 4, !tbaa !8
  %conv = zext i32 %4 to i64
  %call = call i32 @_ZL14lodepng_addoflmmPm(i64 %3, i64 %conv, i64* %new_length)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 77, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %new_length, align 8, !tbaa !6
  %call1 = call i32 @_ZL14lodepng_addoflmmPm(i64 %5, i64 12, i64* %new_length)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 77, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %6 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %7 = load i64, i64* %new_length, align 8, !tbaa !6
  %call5 = call i32 @_ZL15ucvector_resizeP8ucvectorm(%struct.ucvector* %6, i64 %7)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end4
  store i32 83, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %if.end4
  %8 = load %struct.ucvector*, %struct.ucvector** %out.addr, align 8, !tbaa !2
  %data = getelementptr inbounds %struct.ucvector, %struct.ucvector* %8, i32 0, i32 0
  %9 = load i8*, i8** %data, align 8, !tbaa !32
  %10 = load i64, i64* %new_length, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %10
  %11 = load i32, i32* %length.addr, align 4, !tbaa !8
  %idx.ext = zext i32 %11 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr9 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg
  %add.ptr10 = getelementptr inbounds i8, i8* %add.ptr9, i64 -12
  %12 = load i8**, i8*** %chunk.addr, align 8, !tbaa !2
  store i8* %add.ptr10, i8** %12, align 8, !tbaa !2
  %13 = load i8**, i8*** %chunk.addr, align 8, !tbaa !2
  %14 = load i8*, i8** %13, align 8, !tbaa !2
  %15 = load i32, i32* %length.addr, align 4, !tbaa !8
  call void @_ZL19lodepng_set32bitIntPhj(i8* %14, i32 %15)
  %16 = load i8**, i8*** %chunk.addr, align 8, !tbaa !2
  %17 = load i8*, i8** %16, align 8, !tbaa !2
  %add.ptr11 = getelementptr inbounds i8, i8* %17, i64 4
  %18 = load i8*, i8** %type.addr, align 8, !tbaa !2
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %add.ptr11, i8* %18, i64 4)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then7, %if.then3, %if.then
  %19 = bitcast i64* %new_length to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  %20 = load i32, i32* %retval, align 4
  ret i32 %20
}

; Function Attrs: ssp uwtable
define internal i8* @_ZL12alloc_stringPKc(i8* %in) #0 {
entry:
  %in.addr = alloca i8*, align 8
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %call = call i64 @_ZL14lodepng_strlenPKc(i8* %1)
  %call1 = call i8* @_ZL18alloc_string_sizedPKcm(i8* %0, i64 %call)
  ret i8* %call1
}

; Function Attrs: ssp uwtable
define internal i8* @_ZL18alloc_string_sizedPKcm(i8* %in, i64 %insize) #0 {
entry:
  %in.addr = alloca i8*, align 8
  %insize.addr = alloca i64, align 8
  %out = alloca i8*, align 8
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %insize, i64* %insize.addr, align 8, !tbaa !6
  %0 = bitcast i8** %out to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %add = add i64 %1, 1
  %call = call i8* @_ZL14lodepng_mallocm(i64 %add)
  store i8* %call, i8** %out, align 8, !tbaa !2
  %2 = load i8*, i8** %out, align 8, !tbaa !2
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %out, align 8, !tbaa !2
  %4 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %5 = load i64, i64* %insize.addr, align 8, !tbaa !6
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %3, i8* %4, i64 %5)
  %6 = load i8*, i8** %out, align 8, !tbaa !2
  %7 = load i64, i64* %insize.addr, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %7
  store i8 0, i8* %arrayidx, align 1, !tbaa !16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load i8*, i8** %out, align 8, !tbaa !2
  %9 = bitcast i8** %out to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #16
  ret i8* %8
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL26readBitsFromReversedStreamPmPKhm(i64* %bitpointer, i8* %bitstream, i64 %nbits) #0 {
entry:
  %bitpointer.addr = alloca i64*, align 8
  %bitstream.addr = alloca i8*, align 8
  %nbits.addr = alloca i64, align 8
  %result = alloca i32, align 4
  %i = alloca i64, align 8
  store i64* %bitpointer, i64** %bitpointer.addr, align 8, !tbaa !2
  store i8* %bitstream, i8** %bitstream.addr, align 8, !tbaa !2
  store i64 %nbits, i64* %nbits.addr, align 8, !tbaa !6
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %result, align 4, !tbaa !8
  %1 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8, !tbaa !6
  %3 = load i64, i64* %nbits.addr, align 8, !tbaa !6
  %cmp = icmp ult i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %result, align 4, !tbaa !8
  %shl = shl i32 %4, 1
  store i32 %shl, i32* %result, align 4, !tbaa !8
  %5 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %6 = load i8*, i8** %bitstream.addr, align 8, !tbaa !2
  %call = call zeroext i8 @_ZL25readBitFromReversedStreamPmPKh(i64* %5, i8* %6)
  %conv = zext i8 %call to i32
  %7 = load i32, i32* %result, align 4, !tbaa !8
  %or = or i32 %7, %conv
  store i32 %or, i32* %result, align 4, !tbaa !8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %8, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %result, align 4, !tbaa !8
  %10 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #16
  %11 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end(i64 4, i8* %11) #16
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i8 @_ZL25readBitFromReversedStreamPmPKh(i64* %bitpointer, i8* %bitstream) #4 {
entry:
  %bitpointer.addr = alloca i64*, align 8
  %bitstream.addr = alloca i8*, align 8
  %result = alloca i8, align 1
  store i64* %bitpointer, i64** %bitpointer.addr, align 8, !tbaa !2
  store i8* %bitstream, i8** %bitstream.addr, align 8, !tbaa !2
  call void @llvm.lifetime.start(i64 1, i8* %result) #16
  %0 = load i8*, i8** %bitstream.addr, align 8, !tbaa !2
  %1 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %2 = load i64, i64* %1, align 8, !tbaa !6
  %shr = lshr i64 %2, 3
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 %shr
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv = zext i8 %3 to i32
  %4 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %5 = load i64, i64* %4, align 8, !tbaa !6
  %and = and i64 %5, 7
  %sub = sub i64 7, %and
  %sh_prom = trunc i64 %sub to i32
  %shr1 = ashr i32 %conv, %sh_prom
  %and2 = and i32 %shr1, 1
  %conv3 = trunc i32 %and2 to i8
  store i8 %conv3, i8* %result, align 1, !tbaa !16
  %6 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %7 = load i64, i64* %6, align 8, !tbaa !6
  %inc = add i64 %7, 1
  store i64 %inc, i64* %6, align 8, !tbaa !6
  %8 = load i8, i8* %result, align 1, !tbaa !16
  call void @llvm.lifetime.end(i64 1, i8* %result) #16
  ret i8 %8
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL12addColorBitsPhmjj(i8* %out, i64 %index, i32 %bits, i32 %in) #4 {
entry:
  %out.addr = alloca i8*, align 8
  %index.addr = alloca i64, align 8
  %bits.addr = alloca i32, align 4
  %in.addr = alloca i32, align 4
  %m = alloca i32, align 4
  %p = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i64 %index, i64* %index.addr, align 8, !tbaa !6
  store i32 %bits, i32* %bits.addr, align 4, !tbaa !8
  store i32 %in, i32* %in.addr, align 4, !tbaa !8
  %0 = bitcast i32* %m to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load i32, i32* %bits.addr, align 4, !tbaa !8
  %cmp = icmp eq i32 %1, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %bits.addr, align 4, !tbaa !8
  %cmp1 = icmp eq i32 %2, 2
  %cond = select i1 %cmp1, i32 3, i32 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond2 = phi i32 [ 7, %cond.true ], [ %cond, %cond.false ]
  store i32 %cond2, i32* %m, align 4, !tbaa !8
  %3 = bitcast i32* %p to i8*
  call void @llvm.lifetime.start(i64 4, i8* %3) #16
  %4 = load i64, i64* %index.addr, align 8, !tbaa !6
  %5 = load i32, i32* %m, align 4, !tbaa !8
  %conv = zext i32 %5 to i64
  %and = and i64 %4, %conv
  %conv3 = trunc i64 %and to i32
  store i32 %conv3, i32* %p, align 4, !tbaa !8
  %6 = load i32, i32* %bits.addr, align 4, !tbaa !8
  %shl = shl i32 1, %6
  %sub = sub i32 %shl, 1
  %7 = load i32, i32* %in.addr, align 4, !tbaa !8
  %and4 = and i32 %7, %sub
  store i32 %and4, i32* %in.addr, align 4, !tbaa !8
  %8 = load i32, i32* %in.addr, align 4, !tbaa !8
  %9 = load i32, i32* %bits.addr, align 4, !tbaa !8
  %10 = load i32, i32* %m, align 4, !tbaa !8
  %11 = load i32, i32* %p, align 4, !tbaa !8
  %sub5 = sub i32 %10, %11
  %mul = mul i32 %9, %sub5
  %shl6 = shl i32 %8, %mul
  store i32 %shl6, i32* %in.addr, align 4, !tbaa !8
  %12 = load i32, i32* %p, align 4, !tbaa !8
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %13 = load i32, i32* %in.addr, align 4, !tbaa !8
  %conv8 = trunc i32 %13 to i8
  %14 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %15 = load i64, i64* %index.addr, align 8, !tbaa !6
  %16 = load i32, i32* %bits.addr, align 4, !tbaa !8
  %conv9 = zext i32 %16 to i64
  %mul10 = mul i64 %15, %conv9
  %div = udiv i64 %mul10, 8
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %div
  store i8 %conv8, i8* %arrayidx, align 1, !tbaa !16
  br label %if.end

if.else:                                          ; preds = %cond.end
  %17 = load i32, i32* %in.addr, align 4, !tbaa !8
  %18 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %19 = load i64, i64* %index.addr, align 8, !tbaa !6
  %20 = load i32, i32* %bits.addr, align 4, !tbaa !8
  %conv11 = zext i32 %20 to i64
  %mul12 = mul i64 %19, %conv11
  %div13 = udiv i64 %mul12, 8
  %arrayidx14 = getelementptr inbounds i8, i8* %18, i64 %div13
  %21 = load i8, i8* %arrayidx14, align 1, !tbaa !16
  %conv15 = zext i8 %21 to i32
  %or = or i32 %conv15, %17
  %conv16 = trunc i32 %or to i8
  store i8 %conv16, i8* %arrayidx14, align 1, !tbaa !16
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %22 = bitcast i32* %p to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #16
  %23 = bitcast i32* %m to i8*
  call void @llvm.lifetime.end(i64 4, i8* %23) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @_ZL14color_tree_getP9ColorTreehhhh(%struct.ColorTree* %tree, i8 zeroext %r, i8 zeroext %g, i8 zeroext %b, i8 zeroext %a) #4 {
entry:
  %retval = alloca i32, align 4
  %tree.addr = alloca %struct.ColorTree*, align 8
  %r.addr = alloca i8, align 1
  %g.addr = alloca i8, align 1
  %b.addr = alloca i8, align 1
  %a.addr = alloca i8, align 1
  %bit = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store %struct.ColorTree* %tree, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  store i8 %r, i8* %r.addr, align 1, !tbaa !16
  store i8 %g, i8* %g.addr, align 1, !tbaa !16
  store i8 %b, i8* %b.addr, align 1, !tbaa !16
  store i8 %a, i8* %a.addr, align 1, !tbaa !16
  %0 = bitcast i32* %bit to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %bit, align 4, !tbaa !8
  store i32 0, i32* %bit, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %bit, align 4, !tbaa !8
  %cmp = icmp slt i32 %1, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %2) #16
  %3 = load i8, i8* %r.addr, align 1, !tbaa !16
  %conv = zext i8 %3 to i32
  %4 = load i32, i32* %bit, align 4, !tbaa !8
  %shr = ashr i32 %conv, %4
  %and = and i32 %shr, 1
  %mul = mul nsw i32 8, %and
  %5 = load i8, i8* %g.addr, align 1, !tbaa !16
  %conv1 = zext i8 %5 to i32
  %6 = load i32, i32* %bit, align 4, !tbaa !8
  %shr2 = ashr i32 %conv1, %6
  %and3 = and i32 %shr2, 1
  %mul4 = mul nsw i32 4, %and3
  %add = add nsw i32 %mul, %mul4
  %7 = load i8, i8* %b.addr, align 1, !tbaa !16
  %conv5 = zext i8 %7 to i32
  %8 = load i32, i32* %bit, align 4, !tbaa !8
  %shr6 = ashr i32 %conv5, %8
  %and7 = and i32 %shr6, 1
  %mul8 = mul nsw i32 2, %and7
  %add9 = add nsw i32 %add, %mul8
  %9 = load i8, i8* %a.addr, align 1, !tbaa !16
  %conv10 = zext i8 %9 to i32
  %10 = load i32, i32* %bit, align 4, !tbaa !8
  %shr11 = ashr i32 %conv10, %10
  %and12 = and i32 %shr11, 1
  %mul13 = mul nsw i32 1, %and12
  %add14 = add nsw i32 %add9, %mul13
  store i32 %add14, i32* %i, align 4, !tbaa !8
  %11 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %11, i32 0, i32 0
  %12 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children, i64 0, i64 %idxprom
  %13 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx, align 8, !tbaa !2
  %tobool = icmp ne %struct.ColorTree* %13, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %for.body
  %14 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %children15 = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %14, i32 0, i32 0
  %15 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom16 = sext i32 %15 to i64
  %arrayidx17 = getelementptr inbounds [16 x %struct.ColorTree*], [16 x %struct.ColorTree*]* %children15, i64 0, i64 %idxprom16
  %16 = load %struct.ColorTree*, %struct.ColorTree** %arrayidx17, align 8, !tbaa !2
  store %struct.ColorTree* %16, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.else
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %17 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %17) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup19 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %18 = load i32, i32* %bit, align 4, !tbaa !8
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %bit, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %tobool18 = icmp ne %struct.ColorTree* %19, null
  br i1 %tobool18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.end
  %20 = load %struct.ColorTree*, %struct.ColorTree** %tree.addr, align 8, !tbaa !2
  %index = getelementptr inbounds %struct.ColorTree, %struct.ColorTree* %20, i32 0, i32 1
  %21 = load i32, i32* %index, align 8, !tbaa !91
  br label %cond.end

cond.false:                                       ; preds = %for.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %21, %cond.true ], [ -1, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup19

cleanup19:                                        ; preds = %cond.end, %cleanup
  %22 = bitcast i32* %bit to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #16
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL22lodepng_pixel_overflowjjPK16LodePNGColorModeS1_(i32 %w, i32 %h, %struct.LodePNGColorMode* %pngcolor, %struct.LodePNGColorMode* %rawcolor) #0 {
entry:
  %retval = alloca i32, align 4
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %pngcolor.addr = alloca %struct.LodePNGColorMode*, align 8
  %rawcolor.addr = alloca %struct.LodePNGColorMode*, align 8
  %bpp = alloca i64, align 8
  %numpixels = alloca i64, align 8
  %total = alloca i64, align 8
  %line = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %struct.LodePNGColorMode* %pngcolor, %struct.LodePNGColorMode** %pngcolor.addr, align 8, !tbaa !2
  store %struct.LodePNGColorMode* %rawcolor, %struct.LodePNGColorMode** %rawcolor.addr, align 8, !tbaa !2
  %0 = bitcast i64* %bpp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %pngcolor.addr, align 8, !tbaa !2
  %call = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %1)
  %2 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %rawcolor.addr, align 8, !tbaa !2
  %call1 = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %2)
  %cmp = icmp ugt i32 %call, %call1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %pngcolor.addr, align 8, !tbaa !2
  %call2 = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %3)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %rawcolor.addr, align 8, !tbaa !2
  %call3 = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call2, %cond.true ], [ %call3, %cond.false ]
  %conv = zext i32 %cond to i64
  store i64 %conv, i64* %bpp, align 8, !tbaa !6
  %5 = bitcast i64* %numpixels to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  %6 = bitcast i64* %total to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  %7 = bitcast i64* %line to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  %8 = load i32, i32* %w.addr, align 4, !tbaa !8
  %conv4 = zext i32 %8 to i64
  %9 = load i32, i32* %h.addr, align 4, !tbaa !8
  %conv5 = zext i32 %9 to i64
  %call6 = call i32 @_ZL14lodepng_muloflmmPm(i64 %conv4, i64 %conv5, i64* %numpixels)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end
  %10 = load i64, i64* %numpixels, align 8, !tbaa !6
  %call7 = call i32 @_ZL14lodepng_muloflmmPm(i64 %10, i64 8, i64* %total)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.end
  %11 = load i32, i32* %w.addr, align 4, !tbaa !8
  %div = udiv i32 %11, 8
  %conv11 = zext i32 %div to i64
  %12 = load i64, i64* %bpp, align 8, !tbaa !6
  %call12 = call i32 @_ZL14lodepng_muloflmmPm(i64 %conv11, i64 %12, i64* %line)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end10
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end15:                                         ; preds = %if.end10
  %13 = load i64, i64* %line, align 8, !tbaa !6
  %14 = load i32, i32* %w.addr, align 4, !tbaa !8
  %and = and i32 %14, 7
  %conv16 = zext i32 %and to i64
  %15 = load i64, i64* %bpp, align 8, !tbaa !6
  %mul = mul i64 %conv16, %15
  %add = add i64 %mul, 7
  %div17 = udiv i64 %add, 8
  %call18 = call i32 @_ZL14lodepng_addoflmmPm(i64 %13, i64 %div17, i64* %line)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end15
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end21:                                         ; preds = %if.end15
  %16 = load i64, i64* %line, align 8, !tbaa !6
  %call22 = call i32 @_ZL14lodepng_addoflmmPm(i64 %16, i64 5, i64* %line)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end21
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end25:                                         ; preds = %if.end21
  %17 = load i64, i64* %line, align 8, !tbaa !6
  %18 = load i32, i32* %h.addr, align 4, !tbaa !8
  %conv26 = zext i32 %18 to i64
  %call27 = call i32 @_ZL14lodepng_muloflmmPm(i64 %17, i64 %conv26, i64* %total)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end25
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end30:                                         ; preds = %if.end25
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end30, %if.then29, %if.then24, %if.then20, %if.then14, %if.then9, %if.then
  %19 = bitcast i64* %line to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  %20 = bitcast i64* %total to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #16
  %21 = bitcast i64* %numpixels to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #16
  %22 = bitcast i64* %bpp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %22) #16
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %w, i32 %h, i32 %bpp) #4 {
entry:
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %bpp.addr = alloca i32, align 4
  %line = alloca i64, align 8
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %bpp, i32* %bpp.addr, align 4, !tbaa !8
  %0 = bitcast i64* %line to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i32, i32* %w.addr, align 4, !tbaa !8
  %div = udiv i32 %1, 8
  %conv = zext i32 %div to i64
  %2 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %conv1 = zext i32 %2 to i64
  %mul = mul i64 %conv, %conv1
  %add = add i64 %mul, 1
  %3 = load i32, i32* %w.addr, align 4, !tbaa !8
  %and = and i32 %3, 7
  %4 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %mul2 = mul i32 %and, %4
  %add3 = add i32 %mul2, 7
  %div4 = udiv i32 %add3, 8
  %conv5 = zext i32 %div4 to i64
  %add6 = add i64 %add, %conv5
  store i64 %add6, i64* %line, align 8, !tbaa !6
  %5 = load i32, i32* %h.addr, align 4, !tbaa !8
  %conv7 = zext i32 %5 to i64
  %6 = load i64, i64* %line, align 8, !tbaa !6
  %mul8 = mul i64 %conv7, %6
  %7 = bitcast i64* %line to i8*
  call void @llvm.lifetime.end(i64 8, i8* %7) #16
  ret i64 %mul8
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL20postProcessScanlinesPhS_jjPK11LodePNGInfo(i8* %out, i8* %in, i32 %w, i32 %h, %struct.LodePNGInfo* %info_png) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %info_png.addr = alloca %struct.LodePNGInfo*, align 8
  %bpp = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %error = alloca i32, align 4
  %error17 = alloca i32, align 4
  %passw = alloca [7 x i32], align 16
  %passh = alloca [7 x i32], align 16
  %filter_passstart = alloca [8 x i64], align 16
  %padded_passstart = alloca [8 x i64], align 16
  %passstart = alloca [8 x i64], align 16
  %i = alloca i32, align 4
  %error32 = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %struct.LodePNGInfo* %info_png, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %0 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %color = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %1, i32 0, i32 3
  %call = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %color)
  store i32 %call, i32* %bpp, align 4, !tbaa !8
  %2 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp = icmp eq i32 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 31, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup79

if.end:                                           ; preds = %entry
  %3 = load %struct.LodePNGInfo*, %struct.LodePNGInfo** %info_png.addr, align 8, !tbaa !2
  %interlace_method = getelementptr inbounds %struct.LodePNGInfo, %struct.LodePNGInfo* %3, i32 0, i32 2
  %4 = load i32, i32* %interlace_method, align 8, !tbaa !77
  %cmp1 = icmp eq i32 %4, 0
  br i1 %cmp1, label %if.then2, label %if.else26

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp3 = icmp ult i32 %5, 8
  br i1 %cmp3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then2
  %6 = load i32, i32* %w.addr, align 4, !tbaa !8
  %7 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul = mul i32 %6, %7
  %8 = load i32, i32* %w.addr, align 4, !tbaa !8
  %9 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul4 = mul i32 %8, %9
  %add = add i32 %mul4, 7
  %div = udiv i32 %add, 8
  %mul5 = mul i32 %div, 8
  %cmp6 = icmp ne i32 %mul, %mul5
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %land.lhs.true
  %10 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #16
  %11 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %12 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %13 = load i32, i32* %w.addr, align 4, !tbaa !8
  %14 = load i32, i32* %h.addr, align 4, !tbaa !8
  %15 = load i32, i32* %bpp, align 4, !tbaa !8
  %call8 = call i32 @_ZL8unfilterPhPKhjjj(i8* %11, i8* %12, i32 %13, i32 %14, i32 %15)
  store i32 %call8, i32* %error, align 4, !tbaa !8
  %16 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %16, 0
  br i1 %tobool, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then7
  %17 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %17, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.then7
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end10, %if.then9
  %18 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %18) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup79 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %19 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %20 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %21 = load i32, i32* %w.addr, align 4, !tbaa !8
  %22 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul11 = mul i32 %21, %22
  %conv = zext i32 %mul11 to i64
  %23 = load i32, i32* %w.addr, align 4, !tbaa !8
  %24 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul12 = mul i32 %23, %24
  %add13 = add i32 %mul12, 7
  %div14 = udiv i32 %add13, 8
  %mul15 = mul i32 %div14, 8
  %conv16 = zext i32 %mul15 to i64
  %25 = load i32, i32* %h.addr, align 4, !tbaa !8
  call void @_ZL17removePaddingBitsPhPKhmmj(i8* %19, i8* %20, i64 %conv, i64 %conv16, i32 %25)
  br label %if.end25

if.else:                                          ; preds = %land.lhs.true, %if.then2
  %26 = bitcast i32* %error17 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %26) #16
  %27 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %28 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %29 = load i32, i32* %w.addr, align 4, !tbaa !8
  %30 = load i32, i32* %h.addr, align 4, !tbaa !8
  %31 = load i32, i32* %bpp, align 4, !tbaa !8
  %call18 = call i32 @_ZL8unfilterPhPKhjjj(i8* %27, i8* %28, i32 %29, i32 %30, i32 %31)
  store i32 %call18, i32* %error17, align 4, !tbaa !8
  %32 = load i32, i32* %error17, align 4, !tbaa !8
  %tobool19 = icmp ne i32 %32, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.else
  %33 = load i32, i32* %error17, align 4, !tbaa !8
  store i32 %33, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup22

if.end21:                                         ; preds = %if.else
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup22

cleanup22:                                        ; preds = %if.end21, %if.then20
  %34 = bitcast i32* %error17 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %34) #16
  %cleanup.dest23 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest23, label %cleanup79 [
    i32 0, label %cleanup.cont24
  ]

cleanup.cont24:                                   ; preds = %cleanup22
  br label %if.end25

if.end25:                                         ; preds = %cleanup.cont24, %cleanup.cont
  br label %if.end78

if.else26:                                        ; preds = %if.end
  %35 = bitcast [7 x i32]* %passw to i8*
  call void @llvm.lifetime.start(i64 28, i8* %35) #16
  %36 = bitcast [7 x i32]* %passh to i8*
  call void @llvm.lifetime.start(i64 28, i8* %36) #16
  %37 = bitcast [8 x i64]* %filter_passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %37) #16
  %38 = bitcast [8 x i64]* %padded_passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %38) #16
  %39 = bitcast [8 x i64]* %passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %39) #16
  %40 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %40) #16
  %arraydecay = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i32 0, i32 0
  %arraydecay27 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i32 0, i32 0
  %arraydecay28 = getelementptr inbounds [8 x i64], [8 x i64]* %filter_passstart, i32 0, i32 0
  %arraydecay29 = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i32 0, i32 0
  %arraydecay30 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i32 0, i32 0
  %41 = load i32, i32* %w.addr, align 4, !tbaa !8
  %42 = load i32, i32* %h.addr, align 4, !tbaa !8
  %43 = load i32, i32* %bpp, align 4, !tbaa !8
  call void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* %arraydecay, i32* %arraydecay27, i64* %arraydecay28, i64* %arraydecay29, i64* %arraydecay30, i32 %41, i32 %42, i32 %43)
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else26
  %44 = load i32, i32* %i, align 4, !tbaa !8
  %cmp31 = icmp ne i32 %44, 7
  br i1 %cmp31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %45 = bitcast i32* %error32 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %45) #16
  %46 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %47 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %47 to i64
  %arrayidx = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i64 0, i64 %idxprom
  %48 = load i64, i64* %arrayidx, align 8, !tbaa !6
  %arrayidx33 = getelementptr inbounds i8, i8* %46, i64 %48
  %49 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %50 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom34 = zext i32 %50 to i64
  %arrayidx35 = getelementptr inbounds [8 x i64], [8 x i64]* %filter_passstart, i64 0, i64 %idxprom34
  %51 = load i64, i64* %arrayidx35, align 8, !tbaa !6
  %arrayidx36 = getelementptr inbounds i8, i8* %49, i64 %51
  %52 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom37 = zext i32 %52 to i64
  %arrayidx38 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom37
  %53 = load i32, i32* %arrayidx38, align 4, !tbaa !8
  %54 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom39 = zext i32 %54 to i64
  %arrayidx40 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom39
  %55 = load i32, i32* %arrayidx40, align 4, !tbaa !8
  %56 = load i32, i32* %bpp, align 4, !tbaa !8
  %call41 = call i32 @_ZL8unfilterPhPKhjjj(i8* %arrayidx33, i8* %arrayidx36, i32 %53, i32 %55, i32 %56)
  store i32 %call41, i32* %error32, align 4, !tbaa !8
  %57 = load i32, i32* %error32, align 4, !tbaa !8
  %tobool42 = icmp ne i32 %57, 0
  br i1 %tobool42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.body
  %58 = load i32, i32* %error32, align 4, !tbaa !8
  store i32 %58, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup45

if.end44:                                         ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup45

cleanup45:                                        ; preds = %if.end44, %if.then43
  %59 = bitcast i32* %error32 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #16
  %cleanup.dest46 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest46, label %cleanup70 [
    i32 0, label %cleanup.cont47
  ]

cleanup.cont47:                                   ; preds = %cleanup45
  %60 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp48 = icmp ult i32 %60, 8
  br i1 %cmp48, label %if.then49, label %if.end69

if.then49:                                        ; preds = %cleanup.cont47
  %61 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %62 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom50 = zext i32 %62 to i64
  %arrayidx51 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i64 0, i64 %idxprom50
  %63 = load i64, i64* %arrayidx51, align 8, !tbaa !6
  %arrayidx52 = getelementptr inbounds i8, i8* %61, i64 %63
  %64 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %65 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom53 = zext i32 %65 to i64
  %arrayidx54 = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i64 0, i64 %idxprom53
  %66 = load i64, i64* %arrayidx54, align 8, !tbaa !6
  %arrayidx55 = getelementptr inbounds i8, i8* %64, i64 %66
  %67 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom56 = zext i32 %67 to i64
  %arrayidx57 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom56
  %68 = load i32, i32* %arrayidx57, align 4, !tbaa !8
  %69 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul58 = mul i32 %68, %69
  %conv59 = zext i32 %mul58 to i64
  %70 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom60 = zext i32 %70 to i64
  %arrayidx61 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom60
  %71 = load i32, i32* %arrayidx61, align 4, !tbaa !8
  %72 = load i32, i32* %bpp, align 4, !tbaa !8
  %mul62 = mul i32 %71, %72
  %add63 = add i32 %mul62, 7
  %div64 = udiv i32 %add63, 8
  %mul65 = mul i32 %div64, 8
  %conv66 = zext i32 %mul65 to i64
  %73 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom67 = zext i32 %73 to i64
  %arrayidx68 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom67
  %74 = load i32, i32* %arrayidx68, align 4, !tbaa !8
  call void @_ZL17removePaddingBitsPhPKhmmj(i8* %arrayidx52, i8* %arrayidx55, i64 %conv59, i64 %conv66, i32 %74)
  br label %if.end69

if.end69:                                         ; preds = %if.then49, %cleanup.cont47
  br label %for.inc

for.inc:                                          ; preds = %if.end69
  %75 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %75, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %76 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %77 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %78 = load i32, i32* %w.addr, align 4, !tbaa !8
  %79 = load i32, i32* %h.addr, align 4, !tbaa !8
  %80 = load i32, i32* %bpp, align 4, !tbaa !8
  call void @_ZL17Adam7_deinterlacePhPKhjjj(i8* %76, i8* %77, i32 %78, i32 %79, i32 %80)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup70

cleanup70:                                        ; preds = %for.end, %cleanup45
  %81 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %81) #16
  %82 = bitcast [8 x i64]* %passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %82) #16
  %83 = bitcast [8 x i64]* %padded_passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %83) #16
  %84 = bitcast [8 x i64]* %filter_passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %84) #16
  %85 = bitcast [7 x i32]* %passh to i8*
  call void @llvm.lifetime.end(i64 28, i8* %85) #16
  %86 = bitcast [7 x i32]* %passw to i8*
  call void @llvm.lifetime.end(i64 28, i8* %86) #16
  %cleanup.dest76 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest76, label %cleanup79 [
    i32 0, label %cleanup.cont77
  ]

cleanup.cont77:                                   ; preds = %cleanup70
  br label %if.end78

if.end78:                                         ; preds = %cleanup.cont77, %if.end25
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup79

cleanup79:                                        ; preds = %if.end78, %cleanup70, %cleanup22, %cleanup, %if.then
  %87 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %87) #16
  %88 = load i32, i32* %retval, align 4
  ret i32 %88
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL8unfilterPhPKhjjj(i8* %out, i8* %in, i32 %w, i32 %h, i32 %bpp) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %bpp.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %prevline = alloca i8*, align 8
  %bytewidth = alloca i64, align 8
  %linebytes = alloca i64, align 8
  %outindex = alloca i64, align 8
  %inindex = alloca i64, align 8
  %filterType = alloca i8, align 1
  %error = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %bpp, i32* %bpp.addr, align 4, !tbaa !8
  %0 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast i8** %prevline to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  store i8* null, i8** %prevline, align 8, !tbaa !2
  %2 = bitcast i64* %bytewidth to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %add = add i32 %3, 7
  %div = udiv i32 %add, 8
  %conv = zext i32 %div to i64
  store i64 %conv, i64* %bytewidth, align 8, !tbaa !6
  %4 = bitcast i64* %linebytes to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %5 = load i32, i32* %w.addr, align 4, !tbaa !8
  %6 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %call = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %5, i32 1, i32 %6)
  %sub = sub i64 %call, 1
  store i64 %sub, i64* %linebytes, align 8, !tbaa !6
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %y, align 4, !tbaa !8
  %8 = load i32, i32* %h.addr, align 4, !tbaa !8
  %cmp = icmp ult i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = bitcast i64* %outindex to i8*
  call void @llvm.lifetime.start(i64 8, i8* %9) #16
  %10 = load i64, i64* %linebytes, align 8, !tbaa !6
  %11 = load i32, i32* %y, align 4, !tbaa !8
  %conv1 = zext i32 %11 to i64
  %mul = mul i64 %10, %conv1
  store i64 %mul, i64* %outindex, align 8, !tbaa !6
  %12 = bitcast i64* %inindex to i8*
  call void @llvm.lifetime.start(i64 8, i8* %12) #16
  %13 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add2 = add i64 1, %13
  %14 = load i32, i32* %y, align 4, !tbaa !8
  %conv3 = zext i32 %14 to i64
  %mul4 = mul i64 %add2, %conv3
  store i64 %mul4, i64* %inindex, align 8, !tbaa !6
  call void @llvm.lifetime.start(i64 1, i8* %filterType) #16
  %15 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %16 = load i64, i64* %inindex, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %16
  %17 = load i8, i8* %arrayidx, align 1, !tbaa !16
  store i8 %17, i8* %filterType, align 1, !tbaa !16
  %18 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %18) #16
  %19 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %20 = load i64, i64* %outindex, align 8, !tbaa !6
  %arrayidx5 = getelementptr inbounds i8, i8* %19, i64 %20
  %21 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %22 = load i64, i64* %inindex, align 8, !tbaa !6
  %add6 = add i64 %22, 1
  %arrayidx7 = getelementptr inbounds i8, i8* %21, i64 %add6
  %23 = load i8*, i8** %prevline, align 8, !tbaa !2
  %24 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %25 = load i8, i8* %filterType, align 1, !tbaa !16
  %26 = load i64, i64* %linebytes, align 8, !tbaa !6
  %call8 = call i32 @_ZL16unfilterScanlinePhPKhS1_mhm(i8* %arrayidx5, i8* %arrayidx7, i8* %23, i64 %24, i8 zeroext %25, i64 %26)
  store i32 %call8, i32* %error, align 4, !tbaa !8
  %27 = load i32, i32* %error, align 4, !tbaa !8
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %28 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %28, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %29 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %29) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup10 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  %30 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %31 = load i64, i64* %outindex, align 8, !tbaa !6
  %arrayidx9 = getelementptr inbounds i8, i8* %30, i64 %31
  store i8* %arrayidx9, i8** %prevline, align 8, !tbaa !2
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup10

cleanup10:                                        ; preds = %cleanup.cont, %cleanup
  call void @llvm.lifetime.end(i64 1, i8* %filterType) #16
  %32 = bitcast i64* %inindex to i8*
  call void @llvm.lifetime.end(i64 8, i8* %32) #16
  %33 = bitcast i64* %outindex to i8*
  call void @llvm.lifetime.end(i64 8, i8* %33) #16
  %cleanup.dest13 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest13, label %cleanup15 [
    i32 0, label %cleanup.cont14
  ]

cleanup.cont14:                                   ; preds = %cleanup10
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont14
  %34 = load i32, i32* %y, align 4, !tbaa !8
  %inc = add i32 %34, 1
  store i32 %inc, i32* %y, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup15

cleanup15:                                        ; preds = %for.end, %cleanup10
  %35 = bitcast i64* %linebytes to i8*
  call void @llvm.lifetime.end(i64 8, i8* %35) #16
  %36 = bitcast i64* %bytewidth to i8*
  call void @llvm.lifetime.end(i64 8, i8* %36) #16
  %37 = bitcast i8** %prevline to i8*
  call void @llvm.lifetime.end(i64 8, i8* %37) #16
  %38 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %38) #16
  %39 = load i32, i32* %retval, align 4
  ret i32 %39
}

; Function Attrs: ssp uwtable
define internal void @_ZL17removePaddingBitsPhPKhmmj(i8* %out, i8* %in, i64 %olinebits, i64 %ilinebits, i32 %h) #0 {
entry:
  %out.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %olinebits.addr = alloca i64, align 8
  %ilinebits.addr = alloca i64, align 8
  %h.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %diff = alloca i64, align 8
  %ibp = alloca i64, align 8
  %obp = alloca i64, align 8
  %x = alloca i64, align 8
  %bit = alloca i8, align 1
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %olinebits, i64* %olinebits.addr, align 8, !tbaa !6
  store i64 %ilinebits, i64* %ilinebits.addr, align 8, !tbaa !6
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  %0 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast i64* %diff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i64, i64* %ilinebits.addr, align 8, !tbaa !6
  %3 = load i64, i64* %olinebits.addr, align 8, !tbaa !6
  %sub = sub i64 %2, %3
  store i64 %sub, i64* %diff, align 8, !tbaa !6
  %4 = bitcast i64* %ibp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  store i64 0, i64* %ibp, align 8, !tbaa !6
  %5 = bitcast i64* %obp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  store i64 0, i64* %obp, align 8, !tbaa !6
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc4, %entry
  %6 = load i32, i32* %y, align 4, !tbaa !8
  %7 = load i32, i32* %h.addr, align 4, !tbaa !8
  %cmp = icmp ult i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end6

for.body:                                         ; preds = %for.cond
  %8 = bitcast i64* %x to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  store i64 0, i64* %x, align 8, !tbaa !6
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %9 = load i64, i64* %x, align 8, !tbaa !6
  %10 = load i64, i64* %olinebits.addr, align 8, !tbaa !6
  %cmp2 = icmp ult i64 %9, %10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  call void @llvm.lifetime.start(i64 1, i8* %bit) #16
  %11 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %call = call zeroext i8 @_ZL25readBitFromReversedStreamPmPKh(i64* %ibp, i8* %11)
  store i8 %call, i8* %bit, align 1, !tbaa !16
  %12 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %13 = load i8, i8* %bit, align 1, !tbaa !16
  call void @_ZL22setBitOfReversedStreamPmPhh(i64* %obp, i8* %12, i8 zeroext %13)
  call void @llvm.lifetime.end(i64 1, i8* %bit) #16
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %14 = load i64, i64* %x, align 8, !tbaa !6
  %inc = add i64 %14, 1
  store i64 %inc, i64* %x, align 8, !tbaa !6
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  %15 = load i64, i64* %diff, align 8, !tbaa !6
  %16 = load i64, i64* %ibp, align 8, !tbaa !6
  %add = add i64 %16, %15
  store i64 %add, i64* %ibp, align 8, !tbaa !6
  %17 = bitcast i64* %x to i8*
  call void @llvm.lifetime.end(i64 8, i8* %17) #16
  br label %for.inc4

for.inc4:                                         ; preds = %for.end
  %18 = load i32, i32* %y, align 4, !tbaa !8
  %inc5 = add i32 %18, 1
  store i32 %inc5, i32* %y, align 4, !tbaa !8
  br label %for.cond

for.end6:                                         ; preds = %for.cond
  %19 = bitcast i64* %obp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  %20 = bitcast i64* %ibp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %20) #16
  %21 = bitcast i64* %diff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #16
  %22 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %22) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* %passw, i32* %passh, i64* %filter_passstart, i64* %padded_passstart, i64* %passstart, i32 %w, i32 %h, i32 %bpp) #4 {
entry:
  %passw.addr = alloca i32*, align 8
  %passh.addr = alloca i32*, align 8
  %filter_passstart.addr = alloca i64*, align 8
  %padded_passstart.addr = alloca i64*, align 8
  %passstart.addr = alloca i64*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %bpp.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32* %passw, i32** %passw.addr, align 8, !tbaa !2
  store i32* %passh, i32** %passh.addr, align 8, !tbaa !2
  store i64* %filter_passstart, i64** %filter_passstart.addr, align 8, !tbaa !2
  store i64* %padded_passstart, i64** %padded_passstart.addr, align 8, !tbaa !2
  store i64* %passstart, i64** %passstart.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %bpp, i32* %bpp.addr, align 4, !tbaa !8
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !8
  %cmp = icmp ne i32 %1, 7
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %w.addr, align 4, !tbaa !8
  %3 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DX, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %add = add i32 %2, %4
  %5 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom1 = zext i32 %5 to i64
  %arrayidx2 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IX, i64 0, i64 %idxprom1
  %6 = load i32, i32* %arrayidx2, align 4, !tbaa !8
  %sub = sub i32 %add, %6
  %sub3 = sub i32 %sub, 1
  %7 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom4 = zext i32 %7 to i64
  %arrayidx5 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DX, i64 0, i64 %idxprom4
  %8 = load i32, i32* %arrayidx5, align 4, !tbaa !8
  %div = udiv i32 %sub3, %8
  %9 = load i32*, i32** %passw.addr, align 8, !tbaa !2
  %10 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom6 = zext i32 %10 to i64
  %arrayidx7 = getelementptr inbounds i32, i32* %9, i64 %idxprom6
  store i32 %div, i32* %arrayidx7, align 4, !tbaa !8
  %11 = load i32, i32* %h.addr, align 4, !tbaa !8
  %12 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom8 = zext i32 %12 to i64
  %arrayidx9 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DY, i64 0, i64 %idxprom8
  %13 = load i32, i32* %arrayidx9, align 4, !tbaa !8
  %add10 = add i32 %11, %13
  %14 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom11 = zext i32 %14 to i64
  %arrayidx12 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IY, i64 0, i64 %idxprom11
  %15 = load i32, i32* %arrayidx12, align 4, !tbaa !8
  %sub13 = sub i32 %add10, %15
  %sub14 = sub i32 %sub13, 1
  %16 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom15 = zext i32 %16 to i64
  %arrayidx16 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DY, i64 0, i64 %idxprom15
  %17 = load i32, i32* %arrayidx16, align 4, !tbaa !8
  %div17 = udiv i32 %sub14, %17
  %18 = load i32*, i32** %passh.addr, align 8, !tbaa !2
  %19 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom18 = zext i32 %19 to i64
  %arrayidx19 = getelementptr inbounds i32, i32* %18, i64 %idxprom18
  store i32 %div17, i32* %arrayidx19, align 4, !tbaa !8
  %20 = load i32*, i32** %passw.addr, align 8, !tbaa !2
  %21 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom20 = zext i32 %21 to i64
  %arrayidx21 = getelementptr inbounds i32, i32* %20, i64 %idxprom20
  %22 = load i32, i32* %arrayidx21, align 4, !tbaa !8
  %cmp22 = icmp eq i32 %22, 0
  br i1 %cmp22, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %23 = load i32*, i32** %passh.addr, align 8, !tbaa !2
  %24 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom23 = zext i32 %24 to i64
  %arrayidx24 = getelementptr inbounds i32, i32* %23, i64 %idxprom23
  store i32 0, i32* %arrayidx24, align 4, !tbaa !8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %25 = load i32*, i32** %passh.addr, align 8, !tbaa !2
  %26 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom25 = zext i32 %26 to i64
  %arrayidx26 = getelementptr inbounds i32, i32* %25, i64 %idxprom25
  %27 = load i32, i32* %arrayidx26, align 4, !tbaa !8
  %cmp27 = icmp eq i32 %27, 0
  br i1 %cmp27, label %if.then28, label %if.end31

if.then28:                                        ; preds = %if.end
  %28 = load i32*, i32** %passw.addr, align 8, !tbaa !2
  %29 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom29 = zext i32 %29 to i64
  %arrayidx30 = getelementptr inbounds i32, i32* %28, i64 %idxprom29
  store i32 0, i32* %arrayidx30, align 4, !tbaa !8
  br label %if.end31

if.end31:                                         ; preds = %if.then28, %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end31
  %30 = load i32, i32* %i, align 4, !tbaa !8
  %inc = add i32 %30, 1
  store i32 %inc, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %31 = load i64*, i64** %passstart.addr, align 8, !tbaa !2
  %arrayidx32 = getelementptr inbounds i64, i64* %31, i64 0
  store i64 0, i64* %arrayidx32, align 8, !tbaa !6
  %32 = load i64*, i64** %padded_passstart.addr, align 8, !tbaa !2
  %arrayidx33 = getelementptr inbounds i64, i64* %32, i64 0
  store i64 0, i64* %arrayidx33, align 8, !tbaa !6
  %33 = load i64*, i64** %filter_passstart.addr, align 8, !tbaa !2
  %arrayidx34 = getelementptr inbounds i64, i64* %33, i64 0
  store i64 0, i64* %arrayidx34, align 8, !tbaa !6
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc87, %for.end
  %34 = load i32, i32* %i, align 4, !tbaa !8
  %cmp36 = icmp ne i32 %34, 7
  br i1 %cmp36, label %for.body37, label %for.end89

for.body37:                                       ; preds = %for.cond35
  %35 = load i64*, i64** %filter_passstart.addr, align 8, !tbaa !2
  %36 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom38 = zext i32 %36 to i64
  %arrayidx39 = getelementptr inbounds i64, i64* %35, i64 %idxprom38
  %37 = load i64, i64* %arrayidx39, align 8, !tbaa !6
  %38 = load i32*, i32** %passw.addr, align 8, !tbaa !2
  %39 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom40 = zext i32 %39 to i64
  %arrayidx41 = getelementptr inbounds i32, i32* %38, i64 %idxprom40
  %40 = load i32, i32* %arrayidx41, align 4, !tbaa !8
  %tobool = icmp ne i32 %40, 0
  br i1 %tobool, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body37
  %41 = load i32*, i32** %passh.addr, align 8, !tbaa !2
  %42 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom42 = zext i32 %42 to i64
  %arrayidx43 = getelementptr inbounds i32, i32* %41, i64 %idxprom42
  %43 = load i32, i32* %arrayidx43, align 4, !tbaa !8
  %tobool44 = icmp ne i32 %43, 0
  br i1 %tobool44, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %44 = load i32*, i32** %passh.addr, align 8, !tbaa !2
  %45 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom45 = zext i32 %45 to i64
  %arrayidx46 = getelementptr inbounds i32, i32* %44, i64 %idxprom45
  %46 = load i32, i32* %arrayidx46, align 4, !tbaa !8
  %47 = load i32*, i32** %passw.addr, align 8, !tbaa !2
  %48 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom47 = zext i32 %48 to i64
  %arrayidx48 = getelementptr inbounds i32, i32* %47, i64 %idxprom47
  %49 = load i32, i32* %arrayidx48, align 4, !tbaa !8
  %50 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %mul = mul i32 %49, %50
  %add49 = add i32 %mul, 7
  %div50 = udiv i32 %add49, 8
  %add51 = add i32 1, %div50
  %mul52 = mul i32 %46, %add51
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body37
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul52, %cond.true ], [ 0, %cond.false ]
  %conv = zext i32 %cond to i64
  %add53 = add i64 %37, %conv
  %51 = load i64*, i64** %filter_passstart.addr, align 8, !tbaa !2
  %52 = load i32, i32* %i, align 4, !tbaa !8
  %add54 = add i32 %52, 1
  %idxprom55 = zext i32 %add54 to i64
  %arrayidx56 = getelementptr inbounds i64, i64* %51, i64 %idxprom55
  store i64 %add53, i64* %arrayidx56, align 8, !tbaa !6
  %53 = load i64*, i64** %padded_passstart.addr, align 8, !tbaa !2
  %54 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom57 = zext i32 %54 to i64
  %arrayidx58 = getelementptr inbounds i64, i64* %53, i64 %idxprom57
  %55 = load i64, i64* %arrayidx58, align 8, !tbaa !6
  %56 = load i32*, i32** %passh.addr, align 8, !tbaa !2
  %57 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom59 = zext i32 %57 to i64
  %arrayidx60 = getelementptr inbounds i32, i32* %56, i64 %idxprom59
  %58 = load i32, i32* %arrayidx60, align 4, !tbaa !8
  %59 = load i32*, i32** %passw.addr, align 8, !tbaa !2
  %60 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom61 = zext i32 %60 to i64
  %arrayidx62 = getelementptr inbounds i32, i32* %59, i64 %idxprom61
  %61 = load i32, i32* %arrayidx62, align 4, !tbaa !8
  %62 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %mul63 = mul i32 %61, %62
  %add64 = add i32 %mul63, 7
  %div65 = udiv i32 %add64, 8
  %mul66 = mul i32 %58, %div65
  %conv67 = zext i32 %mul66 to i64
  %add68 = add i64 %55, %conv67
  %63 = load i64*, i64** %padded_passstart.addr, align 8, !tbaa !2
  %64 = load i32, i32* %i, align 4, !tbaa !8
  %add69 = add i32 %64, 1
  %idxprom70 = zext i32 %add69 to i64
  %arrayidx71 = getelementptr inbounds i64, i64* %63, i64 %idxprom70
  store i64 %add68, i64* %arrayidx71, align 8, !tbaa !6
  %65 = load i64*, i64** %passstart.addr, align 8, !tbaa !2
  %66 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom72 = zext i32 %66 to i64
  %arrayidx73 = getelementptr inbounds i64, i64* %65, i64 %idxprom72
  %67 = load i64, i64* %arrayidx73, align 8, !tbaa !6
  %68 = load i32*, i32** %passh.addr, align 8, !tbaa !2
  %69 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom74 = zext i32 %69 to i64
  %arrayidx75 = getelementptr inbounds i32, i32* %68, i64 %idxprom74
  %70 = load i32, i32* %arrayidx75, align 4, !tbaa !8
  %71 = load i32*, i32** %passw.addr, align 8, !tbaa !2
  %72 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom76 = zext i32 %72 to i64
  %arrayidx77 = getelementptr inbounds i32, i32* %71, i64 %idxprom76
  %73 = load i32, i32* %arrayidx77, align 4, !tbaa !8
  %mul78 = mul i32 %70, %73
  %74 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %mul79 = mul i32 %mul78, %74
  %add80 = add i32 %mul79, 7
  %div81 = udiv i32 %add80, 8
  %conv82 = zext i32 %div81 to i64
  %add83 = add i64 %67, %conv82
  %75 = load i64*, i64** %passstart.addr, align 8, !tbaa !2
  %76 = load i32, i32* %i, align 4, !tbaa !8
  %add84 = add i32 %76, 1
  %idxprom85 = zext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds i64, i64* %75, i64 %idxprom85
  store i64 %add83, i64* %arrayidx86, align 8, !tbaa !6
  br label %for.inc87

for.inc87:                                        ; preds = %cond.end
  %77 = load i32, i32* %i, align 4, !tbaa !8
  %inc88 = add i32 %77, 1
  store i32 %inc88, i32* %i, align 4, !tbaa !8
  br label %for.cond35

for.end89:                                        ; preds = %for.cond35
  %78 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %78) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL17Adam7_deinterlacePhPKhjjj(i8* %out, i8* %in, i32 %w, i32 %h, i32 %bpp) #4 {
entry:
  %out.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %bpp.addr = alloca i32, align 4
  %passw = alloca [7 x i32], align 16
  %passh = alloca [7 x i32], align 16
  %filter_passstart = alloca [8 x i64], align 16
  %padded_passstart = alloca [8 x i64], align 16
  %passstart = alloca [8 x i64], align 16
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %b = alloca i32, align 4
  %bytewidth = alloca i64, align 8
  %pixelinstart = alloca i64, align 8
  %pixeloutstart = alloca i64, align 8
  %x65 = alloca i32, align 4
  %y66 = alloca i32, align 4
  %b67 = alloca i32, align 4
  %ilinebits = alloca i32, align 4
  %olinebits = alloca i32, align 4
  %obp = alloca i64, align 8
  %ibp = alloca i64, align 8
  %bit = alloca i8, align 1
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %bpp, i32* %bpp.addr, align 4, !tbaa !8
  %0 = bitcast [7 x i32]* %passw to i8*
  call void @llvm.lifetime.start(i64 28, i8* %0) #16
  %1 = bitcast [7 x i32]* %passh to i8*
  call void @llvm.lifetime.start(i64 28, i8* %1) #16
  %2 = bitcast [8 x i64]* %filter_passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %2) #16
  %3 = bitcast [8 x i64]* %padded_passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %3) #16
  %4 = bitcast [8 x i64]* %passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %4) #16
  %5 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %arraydecay = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [8 x i64], [8 x i64]* %filter_passstart, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i32 0, i32 0
  %6 = load i32, i32* %w.addr, align 4, !tbaa !8
  %7 = load i32, i32* %h.addr, align 4, !tbaa !8
  %8 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  call void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* %arraydecay, i32* %arraydecay1, i64* %arraydecay2, i64* %arraydecay3, i64* %arraydecay4, i32 %6, i32 %7, i32 %8)
  %9 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %cmp = icmp uge i32 %9, 8
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc59, %if.then
  %10 = load i32, i32* %i, align 4, !tbaa !8
  %cmp5 = icmp ne i32 %10, 7
  br i1 %cmp5, label %for.body, label %for.end61

for.body:                                         ; preds = %for.cond
  %11 = bitcast i32* %x to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #16
  %12 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #16
  %13 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #16
  %14 = bitcast i64* %bytewidth to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #16
  %15 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %div = udiv i32 %15, 8
  %conv = zext i32 %div to i64
  store i64 %conv, i64* %bytewidth, align 8, !tbaa !6
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc56, %for.body
  %16 = load i32, i32* %y, align 4, !tbaa !8
  %17 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %17 to i64
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom
  %18 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %cmp7 = icmp ult i32 %16, %18
  br i1 %cmp7, label %for.body8, label %for.end58

for.body8:                                        ; preds = %for.cond6
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc53, %for.body8
  %19 = load i32, i32* %x, align 4, !tbaa !8
  %20 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom10 = zext i32 %20 to i64
  %arrayidx11 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom10
  %21 = load i32, i32* %arrayidx11, align 4, !tbaa !8
  %cmp12 = icmp ult i32 %19, %21
  br i1 %cmp12, label %for.body13, label %for.end55

for.body13:                                       ; preds = %for.cond9
  %22 = bitcast i64* %pixelinstart to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #16
  %23 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom14 = zext i32 %23 to i64
  %arrayidx15 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i64 0, i64 %idxprom14
  %24 = load i64, i64* %arrayidx15, align 8, !tbaa !6
  %25 = load i32, i32* %y, align 4, !tbaa !8
  %26 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom16 = zext i32 %26 to i64
  %arrayidx17 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom16
  %27 = load i32, i32* %arrayidx17, align 4, !tbaa !8
  %mul = mul i32 %25, %27
  %28 = load i32, i32* %x, align 4, !tbaa !8
  %add = add i32 %mul, %28
  %conv18 = zext i32 %add to i64
  %29 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %mul19 = mul i64 %conv18, %29
  %add20 = add i64 %24, %mul19
  store i64 %add20, i64* %pixelinstart, align 8, !tbaa !6
  %30 = bitcast i64* %pixeloutstart to i8*
  call void @llvm.lifetime.start(i64 8, i8* %30) #16
  %31 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom21 = zext i32 %31 to i64
  %arrayidx22 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IY, i64 0, i64 %idxprom21
  %32 = load i32, i32* %arrayidx22, align 4, !tbaa !8
  %conv23 = zext i32 %32 to i64
  %33 = load i32, i32* %y, align 4, !tbaa !8
  %conv24 = zext i32 %33 to i64
  %34 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom25 = zext i32 %34 to i64
  %arrayidx26 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DY, i64 0, i64 %idxprom25
  %35 = load i32, i32* %arrayidx26, align 4, !tbaa !8
  %conv27 = zext i32 %35 to i64
  %mul28 = mul i64 %conv24, %conv27
  %add29 = add i64 %conv23, %mul28
  %36 = load i32, i32* %w.addr, align 4, !tbaa !8
  %conv30 = zext i32 %36 to i64
  %mul31 = mul i64 %add29, %conv30
  %37 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom32 = zext i32 %37 to i64
  %arrayidx33 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IX, i64 0, i64 %idxprom32
  %38 = load i32, i32* %arrayidx33, align 4, !tbaa !8
  %conv34 = zext i32 %38 to i64
  %add35 = add i64 %mul31, %conv34
  %39 = load i32, i32* %x, align 4, !tbaa !8
  %conv36 = zext i32 %39 to i64
  %40 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom37 = zext i32 %40 to i64
  %arrayidx38 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DX, i64 0, i64 %idxprom37
  %41 = load i32, i32* %arrayidx38, align 4, !tbaa !8
  %conv39 = zext i32 %41 to i64
  %mul40 = mul i64 %conv36, %conv39
  %add41 = add i64 %add35, %mul40
  %42 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %mul42 = mul i64 %add41, %42
  store i64 %mul42, i64* %pixeloutstart, align 8, !tbaa !6
  store i32 0, i32* %b, align 4, !tbaa !8
  br label %for.cond43

for.cond43:                                       ; preds = %for.inc, %for.body13
  %43 = load i32, i32* %b, align 4, !tbaa !8
  %conv44 = zext i32 %43 to i64
  %44 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %cmp45 = icmp ult i64 %conv44, %44
  br i1 %cmp45, label %for.body46, label %for.end

for.body46:                                       ; preds = %for.cond43
  %45 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %46 = load i64, i64* %pixelinstart, align 8, !tbaa !6
  %47 = load i32, i32* %b, align 4, !tbaa !8
  %conv47 = zext i32 %47 to i64
  %add48 = add i64 %46, %conv47
  %arrayidx49 = getelementptr inbounds i8, i8* %45, i64 %add48
  %48 = load i8, i8* %arrayidx49, align 1, !tbaa !16
  %49 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %50 = load i64, i64* %pixeloutstart, align 8, !tbaa !6
  %51 = load i32, i32* %b, align 4, !tbaa !8
  %conv50 = zext i32 %51 to i64
  %add51 = add i64 %50, %conv50
  %arrayidx52 = getelementptr inbounds i8, i8* %49, i64 %add51
  store i8 %48, i8* %arrayidx52, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body46
  %52 = load i32, i32* %b, align 4, !tbaa !8
  %inc = add i32 %52, 1
  store i32 %inc, i32* %b, align 4, !tbaa !8
  br label %for.cond43

for.end:                                          ; preds = %for.cond43
  %53 = bitcast i64* %pixeloutstart to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #16
  %54 = bitcast i64* %pixelinstart to i8*
  call void @llvm.lifetime.end(i64 8, i8* %54) #16
  br label %for.inc53

for.inc53:                                        ; preds = %for.end
  %55 = load i32, i32* %x, align 4, !tbaa !8
  %inc54 = add i32 %55, 1
  store i32 %inc54, i32* %x, align 4, !tbaa !8
  br label %for.cond9

for.end55:                                        ; preds = %for.cond9
  br label %for.inc56

for.inc56:                                        ; preds = %for.end55
  %56 = load i32, i32* %y, align 4, !tbaa !8
  %inc57 = add i32 %56, 1
  store i32 %inc57, i32* %y, align 4, !tbaa !8
  br label %for.cond6

for.end58:                                        ; preds = %for.cond6
  %57 = bitcast i64* %bytewidth to i8*
  call void @llvm.lifetime.end(i64 8, i8* %57) #16
  %58 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end(i64 4, i8* %58) #16
  %59 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #16
  %60 = bitcast i32* %x to i8*
  call void @llvm.lifetime.end(i64 4, i8* %60) #16
  br label %for.inc59

for.inc59:                                        ; preds = %for.end58
  %61 = load i32, i32* %i, align 4, !tbaa !8
  %inc60 = add i32 %61, 1
  store i32 %inc60, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end61:                                        ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc125, %if.else
  %62 = load i32, i32* %i, align 4, !tbaa !8
  %cmp63 = icmp ne i32 %62, 7
  br i1 %cmp63, label %for.body64, label %for.end127

for.body64:                                       ; preds = %for.cond62
  %63 = bitcast i32* %x65 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %63) #16
  %64 = bitcast i32* %y66 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %64) #16
  %65 = bitcast i32* %b67 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %65) #16
  %66 = bitcast i32* %ilinebits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %66) #16
  %67 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %68 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom68 = zext i32 %68 to i64
  %arrayidx69 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom68
  %69 = load i32, i32* %arrayidx69, align 4, !tbaa !8
  %mul70 = mul i32 %67, %69
  store i32 %mul70, i32* %ilinebits, align 4, !tbaa !8
  %70 = bitcast i32* %olinebits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %70) #16
  %71 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %72 = load i32, i32* %w.addr, align 4, !tbaa !8
  %mul71 = mul i32 %71, %72
  store i32 %mul71, i32* %olinebits, align 4, !tbaa !8
  %73 = bitcast i64* %obp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %73) #16
  %74 = bitcast i64* %ibp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %74) #16
  store i32 0, i32* %y66, align 4, !tbaa !8
  br label %for.cond72

for.cond72:                                       ; preds = %for.inc122, %for.body64
  %75 = load i32, i32* %y66, align 4, !tbaa !8
  %76 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom73 = zext i32 %76 to i64
  %arrayidx74 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom73
  %77 = load i32, i32* %arrayidx74, align 4, !tbaa !8
  %cmp75 = icmp ult i32 %75, %77
  br i1 %cmp75, label %for.body76, label %for.end124

for.body76:                                       ; preds = %for.cond72
  store i32 0, i32* %x65, align 4, !tbaa !8
  br label %for.cond77

for.cond77:                                       ; preds = %for.inc119, %for.body76
  %78 = load i32, i32* %x65, align 4, !tbaa !8
  %79 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom78 = zext i32 %79 to i64
  %arrayidx79 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom78
  %80 = load i32, i32* %arrayidx79, align 4, !tbaa !8
  %cmp80 = icmp ult i32 %78, %80
  br i1 %cmp80, label %for.body81, label %for.end121

for.body81:                                       ; preds = %for.cond77
  %81 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom82 = zext i32 %81 to i64
  %arrayidx83 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i64 0, i64 %idxprom82
  %82 = load i64, i64* %arrayidx83, align 8, !tbaa !6
  %mul84 = mul i64 8, %82
  %83 = load i32, i32* %y66, align 4, !tbaa !8
  %84 = load i32, i32* %ilinebits, align 4, !tbaa !8
  %mul85 = mul i32 %83, %84
  %85 = load i32, i32* %x65, align 4, !tbaa !8
  %86 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %mul86 = mul i32 %85, %86
  %add87 = add i32 %mul85, %mul86
  %conv88 = zext i32 %add87 to i64
  %add89 = add i64 %mul84, %conv88
  store i64 %add89, i64* %ibp, align 8, !tbaa !6
  %87 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom90 = zext i32 %87 to i64
  %arrayidx91 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IY, i64 0, i64 %idxprom90
  %88 = load i32, i32* %arrayidx91, align 4, !tbaa !8
  %conv92 = zext i32 %88 to i64
  %89 = load i32, i32* %y66, align 4, !tbaa !8
  %conv93 = zext i32 %89 to i64
  %90 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom94 = zext i32 %90 to i64
  %arrayidx95 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DY, i64 0, i64 %idxprom94
  %91 = load i32, i32* %arrayidx95, align 4, !tbaa !8
  %conv96 = zext i32 %91 to i64
  %mul97 = mul i64 %conv93, %conv96
  %add98 = add i64 %conv92, %mul97
  %92 = load i32, i32* %olinebits, align 4, !tbaa !8
  %conv99 = zext i32 %92 to i64
  %mul100 = mul i64 %add98, %conv99
  %93 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom101 = zext i32 %93 to i64
  %arrayidx102 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IX, i64 0, i64 %idxprom101
  %94 = load i32, i32* %arrayidx102, align 4, !tbaa !8
  %conv103 = zext i32 %94 to i64
  %95 = load i32, i32* %x65, align 4, !tbaa !8
  %conv104 = zext i32 %95 to i64
  %96 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom105 = zext i32 %96 to i64
  %arrayidx106 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DX, i64 0, i64 %idxprom105
  %97 = load i32, i32* %arrayidx106, align 4, !tbaa !8
  %conv107 = zext i32 %97 to i64
  %mul108 = mul i64 %conv104, %conv107
  %add109 = add i64 %conv103, %mul108
  %98 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %conv110 = zext i32 %98 to i64
  %mul111 = mul i64 %add109, %conv110
  %add112 = add i64 %mul100, %mul111
  store i64 %add112, i64* %obp, align 8, !tbaa !6
  store i32 0, i32* %b67, align 4, !tbaa !8
  br label %for.cond113

for.cond113:                                      ; preds = %for.inc116, %for.body81
  %99 = load i32, i32* %b67, align 4, !tbaa !8
  %100 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %cmp114 = icmp ult i32 %99, %100
  br i1 %cmp114, label %for.body115, label %for.end118

for.body115:                                      ; preds = %for.cond113
  call void @llvm.lifetime.start(i64 1, i8* %bit) #16
  %101 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %call = call zeroext i8 @_ZL25readBitFromReversedStreamPmPKh(i64* %ibp, i8* %101)
  store i8 %call, i8* %bit, align 1, !tbaa !16
  %102 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %103 = load i8, i8* %bit, align 1, !tbaa !16
  call void @_ZL22setBitOfReversedStreamPmPhh(i64* %obp, i8* %102, i8 zeroext %103)
  call void @llvm.lifetime.end(i64 1, i8* %bit) #16
  br label %for.inc116

for.inc116:                                       ; preds = %for.body115
  %104 = load i32, i32* %b67, align 4, !tbaa !8
  %inc117 = add i32 %104, 1
  store i32 %inc117, i32* %b67, align 4, !tbaa !8
  br label %for.cond113

for.end118:                                       ; preds = %for.cond113
  br label %for.inc119

for.inc119:                                       ; preds = %for.end118
  %105 = load i32, i32* %x65, align 4, !tbaa !8
  %inc120 = add i32 %105, 1
  store i32 %inc120, i32* %x65, align 4, !tbaa !8
  br label %for.cond77

for.end121:                                       ; preds = %for.cond77
  br label %for.inc122

for.inc122:                                       ; preds = %for.end121
  %106 = load i32, i32* %y66, align 4, !tbaa !8
  %inc123 = add i32 %106, 1
  store i32 %inc123, i32* %y66, align 4, !tbaa !8
  br label %for.cond72

for.end124:                                       ; preds = %for.cond72
  %107 = bitcast i64* %ibp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %107) #16
  %108 = bitcast i64* %obp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %108) #16
  %109 = bitcast i32* %olinebits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %109) #16
  %110 = bitcast i32* %ilinebits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %110) #16
  %111 = bitcast i32* %b67 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %111) #16
  %112 = bitcast i32* %y66 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %112) #16
  %113 = bitcast i32* %x65 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %113) #16
  br label %for.inc125

for.inc125:                                       ; preds = %for.end124
  %114 = load i32, i32* %i, align 4, !tbaa !8
  %inc126 = add i32 %114, 1
  store i32 %inc126, i32* %i, align 4, !tbaa !8
  br label %for.cond62

for.end127:                                       ; preds = %for.cond62
  br label %if.end

if.end:                                           ; preds = %for.end127, %for.end61
  %115 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %115) #16
  %116 = bitcast [8 x i64]* %passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %116) #16
  %117 = bitcast [8 x i64]* %padded_passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %117) #16
  %118 = bitcast [8 x i64]* %filter_passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %118) #16
  %119 = bitcast [7 x i32]* %passh to i8*
  call void @llvm.lifetime.end(i64 28, i8* %119) #16
  %120 = bitcast [7 x i32]* %passw to i8*
  call void @llvm.lifetime.end(i64 28, i8* %120) #16
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL16unfilterScanlinePhPKhS1_mhm(i8* %recon, i8* %scanline, i8* %precon, i64 %bytewidth, i8 zeroext %filterType, i64 %length) #0 {
entry:
  %retval = alloca i32, align 4
  %recon.addr = alloca i8*, align 8
  %scanline.addr = alloca i8*, align 8
  %precon.addr = alloca i8*, align 8
  %bytewidth.addr = alloca i64, align 8
  %filterType.addr = alloca i8, align 1
  %length.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %s0 = alloca i8, align 1
  %s1 = alloca i8, align 1
  %s2 = alloca i8, align 1
  %s3 = alloca i8, align 1
  %r0 = alloca i8, align 1
  %r1 = alloca i8, align 1
  %r2 = alloca i8, align 1
  %r3 = alloca i8, align 1
  %p0 = alloca i8, align 1
  %p1 = alloca i8, align 1
  %p2 = alloca i8, align 1
  %p3 = alloca i8, align 1
  %q0 = alloca i8, align 1
  %q1 = alloca i8, align 1
  %q2 = alloca i8, align 1
  %q3 = alloca i8, align 1
  %j208 = alloca i64, align 8
  %s0210 = alloca i8, align 1
  %s1213 = alloca i8, align 1
  %s2216 = alloca i8, align 1
  %r0219 = alloca i8, align 1
  %r1222 = alloca i8, align 1
  %r2225 = alloca i8, align 1
  %p0228 = alloca i8, align 1
  %p1231 = alloca i8, align 1
  %p2234 = alloca i8, align 1
  %q0237 = alloca i8, align 1
  %q1240 = alloca i8, align 1
  %q2243 = alloca i8, align 1
  %j286 = alloca i64, align 8
  %s0288 = alloca i8, align 1
  %s1291 = alloca i8, align 1
  %r0294 = alloca i8, align 1
  %r1297 = alloca i8, align 1
  %p0300 = alloca i8, align 1
  %p1303 = alloca i8, align 1
  %q0306 = alloca i8, align 1
  %q1309 = alloca i8, align 1
  %cleanup.dest.slot = alloca i32
  store i8* %recon, i8** %recon.addr, align 8, !tbaa !2
  store i8* %scanline, i8** %scanline.addr, align 8, !tbaa !2
  store i8* %precon, i8** %precon.addr, align 8, !tbaa !2
  store i64 %bytewidth, i64* %bytewidth.addr, align 8, !tbaa !6
  store i8 %filterType, i8* %filterType.addr, align 1, !tbaa !16
  store i64 %length, i64* %length.addr, align 8, !tbaa !6
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8, i8* %filterType.addr, align 1, !tbaa !16
  %conv = zext i8 %1 to i32
  switch i32 %conv, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb23
    i32 3, label %sw.bb45
    i32 4, label %sw.bb104
  ]

sw.bb:                                            ; preds = %entry
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %2 = load i64, i64* %i, align 8, !tbaa !6
  %3 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %5 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %5
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %7 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %8 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i8, i8* %7, i64 %8
  store i8 %6, i8* %arrayidx1, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %9, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc8, %sw.bb2
  %10 = load i64, i64* %i, align 8, !tbaa !6
  %11 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp4 = icmp ne i64 %10, %11
  br i1 %cmp4, label %for.body5, label %for.end10

for.body5:                                        ; preds = %for.cond3
  %12 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %13 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i64 %13
  %14 = load i8, i8* %arrayidx6, align 1, !tbaa !16
  %15 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %16 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx7 = getelementptr inbounds i8, i8* %15, i64 %16
  store i8 %14, i8* %arrayidx7, align 1, !tbaa !16
  br label %for.inc8

for.inc8:                                         ; preds = %for.body5
  %17 = load i64, i64* %i, align 8, !tbaa !6
  %inc9 = add i64 %17, 1
  store i64 %inc9, i64* %i, align 8, !tbaa !6
  br label %for.cond3

for.end10:                                        ; preds = %for.cond3
  %18 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %18, i64* %i, align 8, !tbaa !6
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc20, %for.end10
  %19 = load i64, i64* %i, align 8, !tbaa !6
  %20 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp12 = icmp ult i64 %19, %20
  br i1 %cmp12, label %for.body13, label %for.end22

for.body13:                                       ; preds = %for.cond11
  %21 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %22 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 %22
  %23 = load i8, i8* %arrayidx14, align 1, !tbaa !16
  %conv15 = zext i8 %23 to i32
  %24 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %25 = load i64, i64* %i, align 8, !tbaa !6
  %26 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub = sub i64 %25, %26
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i64 %sub
  %27 = load i8, i8* %arrayidx16, align 1, !tbaa !16
  %conv17 = zext i8 %27 to i32
  %add = add nsw i32 %conv15, %conv17
  %conv18 = trunc i32 %add to i8
  %28 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %29 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx19 = getelementptr inbounds i8, i8* %28, i64 %29
  store i8 %conv18, i8* %arrayidx19, align 1, !tbaa !16
  br label %for.inc20

for.inc20:                                        ; preds = %for.body13
  %30 = load i64, i64* %i, align 8, !tbaa !6
  %inc21 = add i64 %30, 1
  store i64 %inc21, i64* %i, align 8, !tbaa !6
  br label %for.cond11

for.end22:                                        ; preds = %for.cond11
  br label %sw.epilog

sw.bb23:                                          ; preds = %entry
  %31 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %tobool = icmp ne i8* %31, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb23
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond24

for.cond24:                                       ; preds = %for.inc34, %if.then
  %32 = load i64, i64* %i, align 8, !tbaa !6
  %33 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp25 = icmp ne i64 %32, %33
  br i1 %cmp25, label %for.body26, label %for.end36

for.body26:                                       ; preds = %for.cond24
  %34 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %35 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx27 = getelementptr inbounds i8, i8* %34, i64 %35
  %36 = load i8, i8* %arrayidx27, align 1, !tbaa !16
  %conv28 = zext i8 %36 to i32
  %37 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %38 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx29 = getelementptr inbounds i8, i8* %37, i64 %38
  %39 = load i8, i8* %arrayidx29, align 1, !tbaa !16
  %conv30 = zext i8 %39 to i32
  %add31 = add nsw i32 %conv28, %conv30
  %conv32 = trunc i32 %add31 to i8
  %40 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %41 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx33 = getelementptr inbounds i8, i8* %40, i64 %41
  store i8 %conv32, i8* %arrayidx33, align 1, !tbaa !16
  br label %for.inc34

for.inc34:                                        ; preds = %for.body26
  %42 = load i64, i64* %i, align 8, !tbaa !6
  %inc35 = add i64 %42, 1
  store i64 %inc35, i64* %i, align 8, !tbaa !6
  br label %for.cond24

for.end36:                                        ; preds = %for.cond24
  br label %if.end

if.else:                                          ; preds = %sw.bb23
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc42, %if.else
  %43 = load i64, i64* %i, align 8, !tbaa !6
  %44 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp38 = icmp ne i64 %43, %44
  br i1 %cmp38, label %for.body39, label %for.end44

for.body39:                                       ; preds = %for.cond37
  %45 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %46 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx40 = getelementptr inbounds i8, i8* %45, i64 %46
  %47 = load i8, i8* %arrayidx40, align 1, !tbaa !16
  %48 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %49 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx41 = getelementptr inbounds i8, i8* %48, i64 %49
  store i8 %47, i8* %arrayidx41, align 1, !tbaa !16
  br label %for.inc42

for.inc42:                                        ; preds = %for.body39
  %50 = load i64, i64* %i, align 8, !tbaa !6
  %inc43 = add i64 %50, 1
  store i64 %inc43, i64* %i, align 8, !tbaa !6
  br label %for.cond37

for.end44:                                        ; preds = %for.cond37
  br label %if.end

if.end:                                           ; preds = %for.end44, %for.end36
  br label %sw.epilog

sw.bb45:                                          ; preds = %entry
  %51 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %tobool46 = icmp ne i8* %51, null
  br i1 %tobool46, label %if.then47, label %if.else79

if.then47:                                        ; preds = %sw.bb45
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond48

for.cond48:                                       ; preds = %for.inc58, %if.then47
  %52 = load i64, i64* %i, align 8, !tbaa !6
  %53 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp49 = icmp ne i64 %52, %53
  br i1 %cmp49, label %for.body50, label %for.end60

for.body50:                                       ; preds = %for.cond48
  %54 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %55 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx51 = getelementptr inbounds i8, i8* %54, i64 %55
  %56 = load i8, i8* %arrayidx51, align 1, !tbaa !16
  %conv52 = zext i8 %56 to i32
  %57 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %58 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx53 = getelementptr inbounds i8, i8* %57, i64 %58
  %59 = load i8, i8* %arrayidx53, align 1, !tbaa !16
  %conv54 = zext i8 %59 to i32
  %shr = ashr i32 %conv54, 1
  %add55 = add nsw i32 %conv52, %shr
  %conv56 = trunc i32 %add55 to i8
  %60 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %61 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx57 = getelementptr inbounds i8, i8* %60, i64 %61
  store i8 %conv56, i8* %arrayidx57, align 1, !tbaa !16
  br label %for.inc58

for.inc58:                                        ; preds = %for.body50
  %62 = load i64, i64* %i, align 8, !tbaa !6
  %inc59 = add i64 %62, 1
  store i64 %inc59, i64* %i, align 8, !tbaa !6
  br label %for.cond48

for.end60:                                        ; preds = %for.cond48
  %63 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %63, i64* %i, align 8, !tbaa !6
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc76, %for.end60
  %64 = load i64, i64* %i, align 8, !tbaa !6
  %65 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp62 = icmp ult i64 %64, %65
  br i1 %cmp62, label %for.body63, label %for.end78

for.body63:                                       ; preds = %for.cond61
  %66 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %67 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx64 = getelementptr inbounds i8, i8* %66, i64 %67
  %68 = load i8, i8* %arrayidx64, align 1, !tbaa !16
  %conv65 = zext i8 %68 to i32
  %69 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %70 = load i64, i64* %i, align 8, !tbaa !6
  %71 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub66 = sub i64 %70, %71
  %arrayidx67 = getelementptr inbounds i8, i8* %69, i64 %sub66
  %72 = load i8, i8* %arrayidx67, align 1, !tbaa !16
  %conv68 = zext i8 %72 to i32
  %73 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %74 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx69 = getelementptr inbounds i8, i8* %73, i64 %74
  %75 = load i8, i8* %arrayidx69, align 1, !tbaa !16
  %conv70 = zext i8 %75 to i32
  %add71 = add nsw i32 %conv68, %conv70
  %shr72 = ashr i32 %add71, 1
  %add73 = add nsw i32 %conv65, %shr72
  %conv74 = trunc i32 %add73 to i8
  %76 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %77 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx75 = getelementptr inbounds i8, i8* %76, i64 %77
  store i8 %conv74, i8* %arrayidx75, align 1, !tbaa !16
  br label %for.inc76

for.inc76:                                        ; preds = %for.body63
  %78 = load i64, i64* %i, align 8, !tbaa !6
  %inc77 = add i64 %78, 1
  store i64 %inc77, i64* %i, align 8, !tbaa !6
  br label %for.cond61

for.end78:                                        ; preds = %for.cond61
  br label %if.end103

if.else79:                                        ; preds = %sw.bb45
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc85, %if.else79
  %79 = load i64, i64* %i, align 8, !tbaa !6
  %80 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp81 = icmp ne i64 %79, %80
  br i1 %cmp81, label %for.body82, label %for.end87

for.body82:                                       ; preds = %for.cond80
  %81 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %82 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx83 = getelementptr inbounds i8, i8* %81, i64 %82
  %83 = load i8, i8* %arrayidx83, align 1, !tbaa !16
  %84 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %85 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx84 = getelementptr inbounds i8, i8* %84, i64 %85
  store i8 %83, i8* %arrayidx84, align 1, !tbaa !16
  br label %for.inc85

for.inc85:                                        ; preds = %for.body82
  %86 = load i64, i64* %i, align 8, !tbaa !6
  %inc86 = add i64 %86, 1
  store i64 %inc86, i64* %i, align 8, !tbaa !6
  br label %for.cond80

for.end87:                                        ; preds = %for.cond80
  %87 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %87, i64* %i, align 8, !tbaa !6
  br label %for.cond88

for.cond88:                                       ; preds = %for.inc100, %for.end87
  %88 = load i64, i64* %i, align 8, !tbaa !6
  %89 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp89 = icmp ult i64 %88, %89
  br i1 %cmp89, label %for.body90, label %for.end102

for.body90:                                       ; preds = %for.cond88
  %90 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %91 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx91 = getelementptr inbounds i8, i8* %90, i64 %91
  %92 = load i8, i8* %arrayidx91, align 1, !tbaa !16
  %conv92 = zext i8 %92 to i32
  %93 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %94 = load i64, i64* %i, align 8, !tbaa !6
  %95 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub93 = sub i64 %94, %95
  %arrayidx94 = getelementptr inbounds i8, i8* %93, i64 %sub93
  %96 = load i8, i8* %arrayidx94, align 1, !tbaa !16
  %conv95 = zext i8 %96 to i32
  %shr96 = ashr i32 %conv95, 1
  %add97 = add nsw i32 %conv92, %shr96
  %conv98 = trunc i32 %add97 to i8
  %97 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %98 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx99 = getelementptr inbounds i8, i8* %97, i64 %98
  store i8 %conv98, i8* %arrayidx99, align 1, !tbaa !16
  br label %for.inc100

for.inc100:                                       ; preds = %for.body90
  %99 = load i64, i64* %i, align 8, !tbaa !6
  %inc101 = add i64 %99, 1
  store i64 %inc101, i64* %i, align 8, !tbaa !6
  br label %for.cond88

for.end102:                                       ; preds = %for.cond88
  br label %if.end103

if.end103:                                        ; preds = %for.end102, %for.end78
  br label %sw.epilog

sw.bb104:                                         ; preds = %entry
  %100 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %tobool105 = icmp ne i8* %100, null
  br i1 %tobool105, label %if.then106, label %if.else359

if.then106:                                       ; preds = %sw.bb104
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond107

for.cond107:                                      ; preds = %for.inc117, %if.then106
  %101 = load i64, i64* %i, align 8, !tbaa !6
  %102 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp108 = icmp ne i64 %101, %102
  br i1 %cmp108, label %for.body109, label %for.end119

for.body109:                                      ; preds = %for.cond107
  %103 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %104 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx110 = getelementptr inbounds i8, i8* %103, i64 %104
  %105 = load i8, i8* %arrayidx110, align 1, !tbaa !16
  %conv111 = zext i8 %105 to i32
  %106 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %107 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx112 = getelementptr inbounds i8, i8* %106, i64 %107
  %108 = load i8, i8* %arrayidx112, align 1, !tbaa !16
  %conv113 = zext i8 %108 to i32
  %add114 = add nsw i32 %conv111, %conv113
  %conv115 = trunc i32 %add114 to i8
  %109 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %110 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx116 = getelementptr inbounds i8, i8* %109, i64 %110
  store i8 %conv115, i8* %arrayidx116, align 1, !tbaa !16
  br label %for.inc117

for.inc117:                                       ; preds = %for.body109
  %111 = load i64, i64* %i, align 8, !tbaa !6
  %inc118 = add i64 %111, 1
  store i64 %inc118, i64* %i, align 8, !tbaa !6
  br label %for.cond107

for.end119:                                       ; preds = %for.cond107
  %112 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp120 = icmp uge i64 %112, 4
  br i1 %cmp120, label %if.then121, label %if.else201

if.then121:                                       ; preds = %for.end119
  br label %for.cond122

for.cond122:                                      ; preds = %for.inc198, %if.then121
  %113 = load i64, i64* %i, align 8, !tbaa !6
  %add123 = add i64 %113, 3
  %114 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp124 = icmp ult i64 %add123, %114
  br i1 %cmp124, label %for.body125, label %for.end200

for.body125:                                      ; preds = %for.cond122
  %115 = bitcast i64* %j to i8*
  call void @llvm.lifetime.start(i64 8, i8* %115) #16
  %116 = load i64, i64* %i, align 8, !tbaa !6
  %117 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub126 = sub i64 %116, %117
  store i64 %sub126, i64* %j, align 8, !tbaa !6
  call void @llvm.lifetime.start(i64 1, i8* %s0) #16
  %118 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %119 = load i64, i64* %i, align 8, !tbaa !6
  %add127 = add i64 %119, 0
  %arrayidx128 = getelementptr inbounds i8, i8* %118, i64 %add127
  %120 = load i8, i8* %arrayidx128, align 1, !tbaa !16
  store i8 %120, i8* %s0, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %s1) #16
  %121 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %122 = load i64, i64* %i, align 8, !tbaa !6
  %add129 = add i64 %122, 1
  %arrayidx130 = getelementptr inbounds i8, i8* %121, i64 %add129
  %123 = load i8, i8* %arrayidx130, align 1, !tbaa !16
  store i8 %123, i8* %s1, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %s2) #16
  %124 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %125 = load i64, i64* %i, align 8, !tbaa !6
  %add131 = add i64 %125, 2
  %arrayidx132 = getelementptr inbounds i8, i8* %124, i64 %add131
  %126 = load i8, i8* %arrayidx132, align 1, !tbaa !16
  store i8 %126, i8* %s2, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %s3) #16
  %127 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %128 = load i64, i64* %i, align 8, !tbaa !6
  %add133 = add i64 %128, 3
  %arrayidx134 = getelementptr inbounds i8, i8* %127, i64 %add133
  %129 = load i8, i8* %arrayidx134, align 1, !tbaa !16
  store i8 %129, i8* %s3, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r0) #16
  %130 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %131 = load i64, i64* %j, align 8, !tbaa !6
  %add135 = add i64 %131, 0
  %arrayidx136 = getelementptr inbounds i8, i8* %130, i64 %add135
  %132 = load i8, i8* %arrayidx136, align 1, !tbaa !16
  store i8 %132, i8* %r0, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r1) #16
  %133 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %134 = load i64, i64* %j, align 8, !tbaa !6
  %add137 = add i64 %134, 1
  %arrayidx138 = getelementptr inbounds i8, i8* %133, i64 %add137
  %135 = load i8, i8* %arrayidx138, align 1, !tbaa !16
  store i8 %135, i8* %r1, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r2) #16
  %136 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %137 = load i64, i64* %j, align 8, !tbaa !6
  %add139 = add i64 %137, 2
  %arrayidx140 = getelementptr inbounds i8, i8* %136, i64 %add139
  %138 = load i8, i8* %arrayidx140, align 1, !tbaa !16
  store i8 %138, i8* %r2, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r3) #16
  %139 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %140 = load i64, i64* %j, align 8, !tbaa !6
  %add141 = add i64 %140, 3
  %arrayidx142 = getelementptr inbounds i8, i8* %139, i64 %add141
  %141 = load i8, i8* %arrayidx142, align 1, !tbaa !16
  store i8 %141, i8* %r3, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p0) #16
  %142 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %143 = load i64, i64* %i, align 8, !tbaa !6
  %add143 = add i64 %143, 0
  %arrayidx144 = getelementptr inbounds i8, i8* %142, i64 %add143
  %144 = load i8, i8* %arrayidx144, align 1, !tbaa !16
  store i8 %144, i8* %p0, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p1) #16
  %145 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %146 = load i64, i64* %i, align 8, !tbaa !6
  %add145 = add i64 %146, 1
  %arrayidx146 = getelementptr inbounds i8, i8* %145, i64 %add145
  %147 = load i8, i8* %arrayidx146, align 1, !tbaa !16
  store i8 %147, i8* %p1, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p2) #16
  %148 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %149 = load i64, i64* %i, align 8, !tbaa !6
  %add147 = add i64 %149, 2
  %arrayidx148 = getelementptr inbounds i8, i8* %148, i64 %add147
  %150 = load i8, i8* %arrayidx148, align 1, !tbaa !16
  store i8 %150, i8* %p2, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p3) #16
  %151 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %152 = load i64, i64* %i, align 8, !tbaa !6
  %add149 = add i64 %152, 3
  %arrayidx150 = getelementptr inbounds i8, i8* %151, i64 %add149
  %153 = load i8, i8* %arrayidx150, align 1, !tbaa !16
  store i8 %153, i8* %p3, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q0) #16
  %154 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %155 = load i64, i64* %j, align 8, !tbaa !6
  %add151 = add i64 %155, 0
  %arrayidx152 = getelementptr inbounds i8, i8* %154, i64 %add151
  %156 = load i8, i8* %arrayidx152, align 1, !tbaa !16
  store i8 %156, i8* %q0, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q1) #16
  %157 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %158 = load i64, i64* %j, align 8, !tbaa !6
  %add153 = add i64 %158, 1
  %arrayidx154 = getelementptr inbounds i8, i8* %157, i64 %add153
  %159 = load i8, i8* %arrayidx154, align 1, !tbaa !16
  store i8 %159, i8* %q1, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q2) #16
  %160 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %161 = load i64, i64* %j, align 8, !tbaa !6
  %add155 = add i64 %161, 2
  %arrayidx156 = getelementptr inbounds i8, i8* %160, i64 %add155
  %162 = load i8, i8* %arrayidx156, align 1, !tbaa !16
  store i8 %162, i8* %q2, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q3) #16
  %163 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %164 = load i64, i64* %j, align 8, !tbaa !6
  %add157 = add i64 %164, 3
  %arrayidx158 = getelementptr inbounds i8, i8* %163, i64 %add157
  %165 = load i8, i8* %arrayidx158, align 1, !tbaa !16
  store i8 %165, i8* %q3, align 1, !tbaa !16
  %166 = load i8, i8* %s0, align 1, !tbaa !16
  %conv159 = zext i8 %166 to i32
  %167 = load i8, i8* %r0, align 1, !tbaa !16
  %conv160 = zext i8 %167 to i16
  %168 = load i8, i8* %p0, align 1, !tbaa !16
  %conv161 = zext i8 %168 to i16
  %169 = load i8, i8* %q0, align 1, !tbaa !16
  %conv162 = zext i8 %169 to i16
  %call = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv160, i16 signext %conv161, i16 signext %conv162)
  %conv163 = zext i8 %call to i32
  %add164 = add nsw i32 %conv159, %conv163
  %conv165 = trunc i32 %add164 to i8
  %170 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %171 = load i64, i64* %i, align 8, !tbaa !6
  %add166 = add i64 %171, 0
  %arrayidx167 = getelementptr inbounds i8, i8* %170, i64 %add166
  store i8 %conv165, i8* %arrayidx167, align 1, !tbaa !16
  %172 = load i8, i8* %s1, align 1, !tbaa !16
  %conv168 = zext i8 %172 to i32
  %173 = load i8, i8* %r1, align 1, !tbaa !16
  %conv169 = zext i8 %173 to i16
  %174 = load i8, i8* %p1, align 1, !tbaa !16
  %conv170 = zext i8 %174 to i16
  %175 = load i8, i8* %q1, align 1, !tbaa !16
  %conv171 = zext i8 %175 to i16
  %call172 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv169, i16 signext %conv170, i16 signext %conv171)
  %conv173 = zext i8 %call172 to i32
  %add174 = add nsw i32 %conv168, %conv173
  %conv175 = trunc i32 %add174 to i8
  %176 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %177 = load i64, i64* %i, align 8, !tbaa !6
  %add176 = add i64 %177, 1
  %arrayidx177 = getelementptr inbounds i8, i8* %176, i64 %add176
  store i8 %conv175, i8* %arrayidx177, align 1, !tbaa !16
  %178 = load i8, i8* %s2, align 1, !tbaa !16
  %conv178 = zext i8 %178 to i32
  %179 = load i8, i8* %r2, align 1, !tbaa !16
  %conv179 = zext i8 %179 to i16
  %180 = load i8, i8* %p2, align 1, !tbaa !16
  %conv180 = zext i8 %180 to i16
  %181 = load i8, i8* %q2, align 1, !tbaa !16
  %conv181 = zext i8 %181 to i16
  %call182 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv179, i16 signext %conv180, i16 signext %conv181)
  %conv183 = zext i8 %call182 to i32
  %add184 = add nsw i32 %conv178, %conv183
  %conv185 = trunc i32 %add184 to i8
  %182 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %183 = load i64, i64* %i, align 8, !tbaa !6
  %add186 = add i64 %183, 2
  %arrayidx187 = getelementptr inbounds i8, i8* %182, i64 %add186
  store i8 %conv185, i8* %arrayidx187, align 1, !tbaa !16
  %184 = load i8, i8* %s3, align 1, !tbaa !16
  %conv188 = zext i8 %184 to i32
  %185 = load i8, i8* %r3, align 1, !tbaa !16
  %conv189 = zext i8 %185 to i16
  %186 = load i8, i8* %p3, align 1, !tbaa !16
  %conv190 = zext i8 %186 to i16
  %187 = load i8, i8* %q3, align 1, !tbaa !16
  %conv191 = zext i8 %187 to i16
  %call192 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv189, i16 signext %conv190, i16 signext %conv191)
  %conv193 = zext i8 %call192 to i32
  %add194 = add nsw i32 %conv188, %conv193
  %conv195 = trunc i32 %add194 to i8
  %188 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %189 = load i64, i64* %i, align 8, !tbaa !6
  %add196 = add i64 %189, 3
  %arrayidx197 = getelementptr inbounds i8, i8* %188, i64 %add196
  store i8 %conv195, i8* %arrayidx197, align 1, !tbaa !16
  call void @llvm.lifetime.end(i64 1, i8* %q3) #16
  call void @llvm.lifetime.end(i64 1, i8* %q2) #16
  call void @llvm.lifetime.end(i64 1, i8* %q1) #16
  call void @llvm.lifetime.end(i64 1, i8* %q0) #16
  call void @llvm.lifetime.end(i64 1, i8* %p3) #16
  call void @llvm.lifetime.end(i64 1, i8* %p2) #16
  call void @llvm.lifetime.end(i64 1, i8* %p1) #16
  call void @llvm.lifetime.end(i64 1, i8* %p0) #16
  call void @llvm.lifetime.end(i64 1, i8* %r3) #16
  call void @llvm.lifetime.end(i64 1, i8* %r2) #16
  call void @llvm.lifetime.end(i64 1, i8* %r1) #16
  call void @llvm.lifetime.end(i64 1, i8* %r0) #16
  call void @llvm.lifetime.end(i64 1, i8* %s3) #16
  call void @llvm.lifetime.end(i64 1, i8* %s2) #16
  call void @llvm.lifetime.end(i64 1, i8* %s1) #16
  call void @llvm.lifetime.end(i64 1, i8* %s0) #16
  %190 = bitcast i64* %j to i8*
  call void @llvm.lifetime.end(i64 8, i8* %190) #16
  br label %for.inc198

for.inc198:                                       ; preds = %for.body125
  %191 = load i64, i64* %i, align 8, !tbaa !6
  %add199 = add i64 %191, 4
  store i64 %add199, i64* %i, align 8, !tbaa !6
  br label %for.cond122

for.end200:                                       ; preds = %for.cond122
  br label %if.end337

if.else201:                                       ; preds = %for.end119
  %192 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp202 = icmp uge i64 %192, 3
  br i1 %cmp202, label %if.then203, label %if.else279

if.then203:                                       ; preds = %if.else201
  br label %for.cond204

for.cond204:                                      ; preds = %for.inc276, %if.then203
  %193 = load i64, i64* %i, align 8, !tbaa !6
  %add205 = add i64 %193, 2
  %194 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp206 = icmp ult i64 %add205, %194
  br i1 %cmp206, label %for.body207, label %for.end278

for.body207:                                      ; preds = %for.cond204
  %195 = bitcast i64* %j208 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %195) #16
  %196 = load i64, i64* %i, align 8, !tbaa !6
  %197 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub209 = sub i64 %196, %197
  store i64 %sub209, i64* %j208, align 8, !tbaa !6
  call void @llvm.lifetime.start(i64 1, i8* %s0210) #16
  %198 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %199 = load i64, i64* %i, align 8, !tbaa !6
  %add211 = add i64 %199, 0
  %arrayidx212 = getelementptr inbounds i8, i8* %198, i64 %add211
  %200 = load i8, i8* %arrayidx212, align 1, !tbaa !16
  store i8 %200, i8* %s0210, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %s1213) #16
  %201 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %202 = load i64, i64* %i, align 8, !tbaa !6
  %add214 = add i64 %202, 1
  %arrayidx215 = getelementptr inbounds i8, i8* %201, i64 %add214
  %203 = load i8, i8* %arrayidx215, align 1, !tbaa !16
  store i8 %203, i8* %s1213, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %s2216) #16
  %204 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %205 = load i64, i64* %i, align 8, !tbaa !6
  %add217 = add i64 %205, 2
  %arrayidx218 = getelementptr inbounds i8, i8* %204, i64 %add217
  %206 = load i8, i8* %arrayidx218, align 1, !tbaa !16
  store i8 %206, i8* %s2216, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r0219) #16
  %207 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %208 = load i64, i64* %j208, align 8, !tbaa !6
  %add220 = add i64 %208, 0
  %arrayidx221 = getelementptr inbounds i8, i8* %207, i64 %add220
  %209 = load i8, i8* %arrayidx221, align 1, !tbaa !16
  store i8 %209, i8* %r0219, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r1222) #16
  %210 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %211 = load i64, i64* %j208, align 8, !tbaa !6
  %add223 = add i64 %211, 1
  %arrayidx224 = getelementptr inbounds i8, i8* %210, i64 %add223
  %212 = load i8, i8* %arrayidx224, align 1, !tbaa !16
  store i8 %212, i8* %r1222, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r2225) #16
  %213 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %214 = load i64, i64* %j208, align 8, !tbaa !6
  %add226 = add i64 %214, 2
  %arrayidx227 = getelementptr inbounds i8, i8* %213, i64 %add226
  %215 = load i8, i8* %arrayidx227, align 1, !tbaa !16
  store i8 %215, i8* %r2225, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p0228) #16
  %216 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %217 = load i64, i64* %i, align 8, !tbaa !6
  %add229 = add i64 %217, 0
  %arrayidx230 = getelementptr inbounds i8, i8* %216, i64 %add229
  %218 = load i8, i8* %arrayidx230, align 1, !tbaa !16
  store i8 %218, i8* %p0228, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p1231) #16
  %219 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %220 = load i64, i64* %i, align 8, !tbaa !6
  %add232 = add i64 %220, 1
  %arrayidx233 = getelementptr inbounds i8, i8* %219, i64 %add232
  %221 = load i8, i8* %arrayidx233, align 1, !tbaa !16
  store i8 %221, i8* %p1231, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p2234) #16
  %222 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %223 = load i64, i64* %i, align 8, !tbaa !6
  %add235 = add i64 %223, 2
  %arrayidx236 = getelementptr inbounds i8, i8* %222, i64 %add235
  %224 = load i8, i8* %arrayidx236, align 1, !tbaa !16
  store i8 %224, i8* %p2234, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q0237) #16
  %225 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %226 = load i64, i64* %j208, align 8, !tbaa !6
  %add238 = add i64 %226, 0
  %arrayidx239 = getelementptr inbounds i8, i8* %225, i64 %add238
  %227 = load i8, i8* %arrayidx239, align 1, !tbaa !16
  store i8 %227, i8* %q0237, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q1240) #16
  %228 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %229 = load i64, i64* %j208, align 8, !tbaa !6
  %add241 = add i64 %229, 1
  %arrayidx242 = getelementptr inbounds i8, i8* %228, i64 %add241
  %230 = load i8, i8* %arrayidx242, align 1, !tbaa !16
  store i8 %230, i8* %q1240, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q2243) #16
  %231 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %232 = load i64, i64* %j208, align 8, !tbaa !6
  %add244 = add i64 %232, 2
  %arrayidx245 = getelementptr inbounds i8, i8* %231, i64 %add244
  %233 = load i8, i8* %arrayidx245, align 1, !tbaa !16
  store i8 %233, i8* %q2243, align 1, !tbaa !16
  %234 = load i8, i8* %s0210, align 1, !tbaa !16
  %conv246 = zext i8 %234 to i32
  %235 = load i8, i8* %r0219, align 1, !tbaa !16
  %conv247 = zext i8 %235 to i16
  %236 = load i8, i8* %p0228, align 1, !tbaa !16
  %conv248 = zext i8 %236 to i16
  %237 = load i8, i8* %q0237, align 1, !tbaa !16
  %conv249 = zext i8 %237 to i16
  %call250 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv247, i16 signext %conv248, i16 signext %conv249)
  %conv251 = zext i8 %call250 to i32
  %add252 = add nsw i32 %conv246, %conv251
  %conv253 = trunc i32 %add252 to i8
  %238 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %239 = load i64, i64* %i, align 8, !tbaa !6
  %add254 = add i64 %239, 0
  %arrayidx255 = getelementptr inbounds i8, i8* %238, i64 %add254
  store i8 %conv253, i8* %arrayidx255, align 1, !tbaa !16
  %240 = load i8, i8* %s1213, align 1, !tbaa !16
  %conv256 = zext i8 %240 to i32
  %241 = load i8, i8* %r1222, align 1, !tbaa !16
  %conv257 = zext i8 %241 to i16
  %242 = load i8, i8* %p1231, align 1, !tbaa !16
  %conv258 = zext i8 %242 to i16
  %243 = load i8, i8* %q1240, align 1, !tbaa !16
  %conv259 = zext i8 %243 to i16
  %call260 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv257, i16 signext %conv258, i16 signext %conv259)
  %conv261 = zext i8 %call260 to i32
  %add262 = add nsw i32 %conv256, %conv261
  %conv263 = trunc i32 %add262 to i8
  %244 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %245 = load i64, i64* %i, align 8, !tbaa !6
  %add264 = add i64 %245, 1
  %arrayidx265 = getelementptr inbounds i8, i8* %244, i64 %add264
  store i8 %conv263, i8* %arrayidx265, align 1, !tbaa !16
  %246 = load i8, i8* %s2216, align 1, !tbaa !16
  %conv266 = zext i8 %246 to i32
  %247 = load i8, i8* %r2225, align 1, !tbaa !16
  %conv267 = zext i8 %247 to i16
  %248 = load i8, i8* %p2234, align 1, !tbaa !16
  %conv268 = zext i8 %248 to i16
  %249 = load i8, i8* %q2243, align 1, !tbaa !16
  %conv269 = zext i8 %249 to i16
  %call270 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv267, i16 signext %conv268, i16 signext %conv269)
  %conv271 = zext i8 %call270 to i32
  %add272 = add nsw i32 %conv266, %conv271
  %conv273 = trunc i32 %add272 to i8
  %250 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %251 = load i64, i64* %i, align 8, !tbaa !6
  %add274 = add i64 %251, 2
  %arrayidx275 = getelementptr inbounds i8, i8* %250, i64 %add274
  store i8 %conv273, i8* %arrayidx275, align 1, !tbaa !16
  call void @llvm.lifetime.end(i64 1, i8* %q2243) #16
  call void @llvm.lifetime.end(i64 1, i8* %q1240) #16
  call void @llvm.lifetime.end(i64 1, i8* %q0237) #16
  call void @llvm.lifetime.end(i64 1, i8* %p2234) #16
  call void @llvm.lifetime.end(i64 1, i8* %p1231) #16
  call void @llvm.lifetime.end(i64 1, i8* %p0228) #16
  call void @llvm.lifetime.end(i64 1, i8* %r2225) #16
  call void @llvm.lifetime.end(i64 1, i8* %r1222) #16
  call void @llvm.lifetime.end(i64 1, i8* %r0219) #16
  call void @llvm.lifetime.end(i64 1, i8* %s2216) #16
  call void @llvm.lifetime.end(i64 1, i8* %s1213) #16
  call void @llvm.lifetime.end(i64 1, i8* %s0210) #16
  %252 = bitcast i64* %j208 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %252) #16
  br label %for.inc276

for.inc276:                                       ; preds = %for.body207
  %253 = load i64, i64* %i, align 8, !tbaa !6
  %add277 = add i64 %253, 3
  store i64 %add277, i64* %i, align 8, !tbaa !6
  br label %for.cond204

for.end278:                                       ; preds = %for.cond204
  br label %if.end336

if.else279:                                       ; preds = %if.else201
  %254 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp280 = icmp uge i64 %254, 2
  br i1 %cmp280, label %if.then281, label %if.end335

if.then281:                                       ; preds = %if.else279
  br label %for.cond282

for.cond282:                                      ; preds = %for.inc332, %if.then281
  %255 = load i64, i64* %i, align 8, !tbaa !6
  %add283 = add i64 %255, 1
  %256 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp284 = icmp ult i64 %add283, %256
  br i1 %cmp284, label %for.body285, label %for.end334

for.body285:                                      ; preds = %for.cond282
  %257 = bitcast i64* %j286 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %257) #16
  %258 = load i64, i64* %i, align 8, !tbaa !6
  %259 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub287 = sub i64 %258, %259
  store i64 %sub287, i64* %j286, align 8, !tbaa !6
  call void @llvm.lifetime.start(i64 1, i8* %s0288) #16
  %260 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %261 = load i64, i64* %i, align 8, !tbaa !6
  %add289 = add i64 %261, 0
  %arrayidx290 = getelementptr inbounds i8, i8* %260, i64 %add289
  %262 = load i8, i8* %arrayidx290, align 1, !tbaa !16
  store i8 %262, i8* %s0288, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %s1291) #16
  %263 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %264 = load i64, i64* %i, align 8, !tbaa !6
  %add292 = add i64 %264, 1
  %arrayidx293 = getelementptr inbounds i8, i8* %263, i64 %add292
  %265 = load i8, i8* %arrayidx293, align 1, !tbaa !16
  store i8 %265, i8* %s1291, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r0294) #16
  %266 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %267 = load i64, i64* %j286, align 8, !tbaa !6
  %add295 = add i64 %267, 0
  %arrayidx296 = getelementptr inbounds i8, i8* %266, i64 %add295
  %268 = load i8, i8* %arrayidx296, align 1, !tbaa !16
  store i8 %268, i8* %r0294, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %r1297) #16
  %269 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %270 = load i64, i64* %j286, align 8, !tbaa !6
  %add298 = add i64 %270, 1
  %arrayidx299 = getelementptr inbounds i8, i8* %269, i64 %add298
  %271 = load i8, i8* %arrayidx299, align 1, !tbaa !16
  store i8 %271, i8* %r1297, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p0300) #16
  %272 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %273 = load i64, i64* %i, align 8, !tbaa !6
  %add301 = add i64 %273, 0
  %arrayidx302 = getelementptr inbounds i8, i8* %272, i64 %add301
  %274 = load i8, i8* %arrayidx302, align 1, !tbaa !16
  store i8 %274, i8* %p0300, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %p1303) #16
  %275 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %276 = load i64, i64* %i, align 8, !tbaa !6
  %add304 = add i64 %276, 1
  %arrayidx305 = getelementptr inbounds i8, i8* %275, i64 %add304
  %277 = load i8, i8* %arrayidx305, align 1, !tbaa !16
  store i8 %277, i8* %p1303, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q0306) #16
  %278 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %279 = load i64, i64* %j286, align 8, !tbaa !6
  %add307 = add i64 %279, 0
  %arrayidx308 = getelementptr inbounds i8, i8* %278, i64 %add307
  %280 = load i8, i8* %arrayidx308, align 1, !tbaa !16
  store i8 %280, i8* %q0306, align 1, !tbaa !16
  call void @llvm.lifetime.start(i64 1, i8* %q1309) #16
  %281 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %282 = load i64, i64* %j286, align 8, !tbaa !6
  %add310 = add i64 %282, 1
  %arrayidx311 = getelementptr inbounds i8, i8* %281, i64 %add310
  %283 = load i8, i8* %arrayidx311, align 1, !tbaa !16
  store i8 %283, i8* %q1309, align 1, !tbaa !16
  %284 = load i8, i8* %s0288, align 1, !tbaa !16
  %conv312 = zext i8 %284 to i32
  %285 = load i8, i8* %r0294, align 1, !tbaa !16
  %conv313 = zext i8 %285 to i16
  %286 = load i8, i8* %p0300, align 1, !tbaa !16
  %conv314 = zext i8 %286 to i16
  %287 = load i8, i8* %q0306, align 1, !tbaa !16
  %conv315 = zext i8 %287 to i16
  %call316 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv313, i16 signext %conv314, i16 signext %conv315)
  %conv317 = zext i8 %call316 to i32
  %add318 = add nsw i32 %conv312, %conv317
  %conv319 = trunc i32 %add318 to i8
  %288 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %289 = load i64, i64* %i, align 8, !tbaa !6
  %add320 = add i64 %289, 0
  %arrayidx321 = getelementptr inbounds i8, i8* %288, i64 %add320
  store i8 %conv319, i8* %arrayidx321, align 1, !tbaa !16
  %290 = load i8, i8* %s1291, align 1, !tbaa !16
  %conv322 = zext i8 %290 to i32
  %291 = load i8, i8* %r1297, align 1, !tbaa !16
  %conv323 = zext i8 %291 to i16
  %292 = load i8, i8* %p1303, align 1, !tbaa !16
  %conv324 = zext i8 %292 to i16
  %293 = load i8, i8* %q1309, align 1, !tbaa !16
  %conv325 = zext i8 %293 to i16
  %call326 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv323, i16 signext %conv324, i16 signext %conv325)
  %conv327 = zext i8 %call326 to i32
  %add328 = add nsw i32 %conv322, %conv327
  %conv329 = trunc i32 %add328 to i8
  %294 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %295 = load i64, i64* %i, align 8, !tbaa !6
  %add330 = add i64 %295, 1
  %arrayidx331 = getelementptr inbounds i8, i8* %294, i64 %add330
  store i8 %conv329, i8* %arrayidx331, align 1, !tbaa !16
  call void @llvm.lifetime.end(i64 1, i8* %q1309) #16
  call void @llvm.lifetime.end(i64 1, i8* %q0306) #16
  call void @llvm.lifetime.end(i64 1, i8* %p1303) #16
  call void @llvm.lifetime.end(i64 1, i8* %p0300) #16
  call void @llvm.lifetime.end(i64 1, i8* %r1297) #16
  call void @llvm.lifetime.end(i64 1, i8* %r0294) #16
  call void @llvm.lifetime.end(i64 1, i8* %s1291) #16
  call void @llvm.lifetime.end(i64 1, i8* %s0288) #16
  %296 = bitcast i64* %j286 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %296) #16
  br label %for.inc332

for.inc332:                                       ; preds = %for.body285
  %297 = load i64, i64* %i, align 8, !tbaa !6
  %add333 = add i64 %297, 2
  store i64 %add333, i64* %i, align 8, !tbaa !6
  br label %for.cond282

for.end334:                                       ; preds = %for.cond282
  br label %if.end335

if.end335:                                        ; preds = %for.end334, %if.else279
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %for.end278
  br label %if.end337

if.end337:                                        ; preds = %if.end336, %for.end200
  br label %for.cond338

for.cond338:                                      ; preds = %for.inc356, %if.end337
  %298 = load i64, i64* %i, align 8, !tbaa !6
  %299 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp339 = icmp ne i64 %298, %299
  br i1 %cmp339, label %for.body340, label %for.end358

for.body340:                                      ; preds = %for.cond338
  %300 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %301 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx341 = getelementptr inbounds i8, i8* %300, i64 %301
  %302 = load i8, i8* %arrayidx341, align 1, !tbaa !16
  %conv342 = zext i8 %302 to i32
  %303 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %304 = load i64, i64* %i, align 8, !tbaa !6
  %305 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub343 = sub i64 %304, %305
  %arrayidx344 = getelementptr inbounds i8, i8* %303, i64 %sub343
  %306 = load i8, i8* %arrayidx344, align 1, !tbaa !16
  %conv345 = zext i8 %306 to i16
  %307 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %308 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx346 = getelementptr inbounds i8, i8* %307, i64 %308
  %309 = load i8, i8* %arrayidx346, align 1, !tbaa !16
  %conv347 = zext i8 %309 to i16
  %310 = load i8*, i8** %precon.addr, align 8, !tbaa !2
  %311 = load i64, i64* %i, align 8, !tbaa !6
  %312 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub348 = sub i64 %311, %312
  %arrayidx349 = getelementptr inbounds i8, i8* %310, i64 %sub348
  %313 = load i8, i8* %arrayidx349, align 1, !tbaa !16
  %conv350 = zext i8 %313 to i16
  %call351 = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv345, i16 signext %conv347, i16 signext %conv350)
  %conv352 = zext i8 %call351 to i32
  %add353 = add nsw i32 %conv342, %conv352
  %conv354 = trunc i32 %add353 to i8
  %314 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %315 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx355 = getelementptr inbounds i8, i8* %314, i64 %315
  store i8 %conv354, i8* %arrayidx355, align 1, !tbaa !16
  br label %for.inc356

for.inc356:                                       ; preds = %for.body340
  %316 = load i64, i64* %i, align 8, !tbaa !6
  %inc357 = add i64 %316, 1
  store i64 %inc357, i64* %i, align 8, !tbaa !6
  br label %for.cond338

for.end358:                                       ; preds = %for.cond338
  br label %if.end382

if.else359:                                       ; preds = %sw.bb104
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond360

for.cond360:                                      ; preds = %for.inc365, %if.else359
  %317 = load i64, i64* %i, align 8, !tbaa !6
  %318 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp361 = icmp ne i64 %317, %318
  br i1 %cmp361, label %for.body362, label %for.end367

for.body362:                                      ; preds = %for.cond360
  %319 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %320 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx363 = getelementptr inbounds i8, i8* %319, i64 %320
  %321 = load i8, i8* %arrayidx363, align 1, !tbaa !16
  %322 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %323 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx364 = getelementptr inbounds i8, i8* %322, i64 %323
  store i8 %321, i8* %arrayidx364, align 1, !tbaa !16
  br label %for.inc365

for.inc365:                                       ; preds = %for.body362
  %324 = load i64, i64* %i, align 8, !tbaa !6
  %inc366 = add i64 %324, 1
  store i64 %inc366, i64* %i, align 8, !tbaa !6
  br label %for.cond360

for.end367:                                       ; preds = %for.cond360
  %325 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %325, i64* %i, align 8, !tbaa !6
  br label %for.cond368

for.cond368:                                      ; preds = %for.inc379, %for.end367
  %326 = load i64, i64* %i, align 8, !tbaa !6
  %327 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp369 = icmp ult i64 %326, %327
  br i1 %cmp369, label %for.body370, label %for.end381

for.body370:                                      ; preds = %for.cond368
  %328 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %329 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx371 = getelementptr inbounds i8, i8* %328, i64 %329
  %330 = load i8, i8* %arrayidx371, align 1, !tbaa !16
  %conv372 = zext i8 %330 to i32
  %331 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %332 = load i64, i64* %i, align 8, !tbaa !6
  %333 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub373 = sub i64 %332, %333
  %arrayidx374 = getelementptr inbounds i8, i8* %331, i64 %sub373
  %334 = load i8, i8* %arrayidx374, align 1, !tbaa !16
  %conv375 = zext i8 %334 to i32
  %add376 = add nsw i32 %conv372, %conv375
  %conv377 = trunc i32 %add376 to i8
  %335 = load i8*, i8** %recon.addr, align 8, !tbaa !2
  %336 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx378 = getelementptr inbounds i8, i8* %335, i64 %336
  store i8 %conv377, i8* %arrayidx378, align 1, !tbaa !16
  br label %for.inc379

for.inc379:                                       ; preds = %for.body370
  %337 = load i64, i64* %i, align 8, !tbaa !6
  %inc380 = add i64 %337, 1
  store i64 %inc380, i64* %i, align 8, !tbaa !6
  br label %for.cond368

for.end381:                                       ; preds = %for.cond368
  br label %if.end382

if.end382:                                        ; preds = %for.end381, %for.end358
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 36, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

sw.epilog:                                        ; preds = %if.end382, %if.end103, %if.end, %for.end22, %for.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %sw.default
  %338 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %338) #16
  %339 = load i32, i32* %retval, align 4
  ret i32 %339
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i8 @_ZL14paethPredictorsss(i16 signext %a, i16 signext %b, i16 signext %c) #4 {
entry:
  %a.addr = alloca i16, align 2
  %b.addr = alloca i16, align 2
  %c.addr = alloca i16, align 2
  %pa = alloca i16, align 2
  %pb = alloca i16, align 2
  %pc = alloca i16, align 2
  store i16 %a, i16* %a.addr, align 2, !tbaa !89
  store i16 %b, i16* %b.addr, align 2, !tbaa !89
  store i16 %c, i16* %c.addr, align 2, !tbaa !89
  %0 = bitcast i16* %pa to i8*
  call void @llvm.lifetime.start(i64 2, i8* %0) #16
  %1 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv = sext i16 %1 to i32
  %2 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv1 = sext i16 %2 to i32
  %sub = sub nsw i32 %conv, %conv1
  %cmp = icmp slt i32 %sub, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv2 = sext i16 %3 to i32
  %4 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv3 = sext i16 %4 to i32
  %sub4 = sub nsw i32 %conv2, %conv3
  %sub5 = sub nsw i32 0, %sub4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv6 = sext i16 %5 to i32
  %6 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv7 = sext i16 %6 to i32
  %sub8 = sub nsw i32 %conv6, %conv7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub5, %cond.true ], [ %sub8, %cond.false ]
  %conv9 = trunc i32 %cond to i16
  store i16 %conv9, i16* %pa, align 2, !tbaa !89
  %7 = bitcast i16* %pb to i8*
  call void @llvm.lifetime.start(i64 2, i8* %7) #16
  %8 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv10 = sext i16 %8 to i32
  %9 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv11 = sext i16 %9 to i32
  %sub12 = sub nsw i32 %conv10, %conv11
  %cmp13 = icmp slt i32 %sub12, 0
  br i1 %cmp13, label %cond.true14, label %cond.false19

cond.true14:                                      ; preds = %cond.end
  %10 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv15 = sext i16 %10 to i32
  %11 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv16 = sext i16 %11 to i32
  %sub17 = sub nsw i32 %conv15, %conv16
  %sub18 = sub nsw i32 0, %sub17
  br label %cond.end23

cond.false19:                                     ; preds = %cond.end
  %12 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv20 = sext i16 %12 to i32
  %13 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv21 = sext i16 %13 to i32
  %sub22 = sub nsw i32 %conv20, %conv21
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false19, %cond.true14
  %cond24 = phi i32 [ %sub18, %cond.true14 ], [ %sub22, %cond.false19 ]
  %conv25 = trunc i32 %cond24 to i16
  store i16 %conv25, i16* %pb, align 2, !tbaa !89
  %14 = bitcast i16* %pc to i8*
  call void @llvm.lifetime.start(i64 2, i8* %14) #16
  %15 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv26 = sext i16 %15 to i32
  %16 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv27 = sext i16 %16 to i32
  %add = add nsw i32 %conv26, %conv27
  %17 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv28 = sext i16 %17 to i32
  %sub29 = sub nsw i32 %add, %conv28
  %18 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv30 = sext i16 %18 to i32
  %sub31 = sub nsw i32 %sub29, %conv30
  %cmp32 = icmp slt i32 %sub31, 0
  br i1 %cmp32, label %cond.true33, label %cond.false42

cond.true33:                                      ; preds = %cond.end23
  %19 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv34 = sext i16 %19 to i32
  %20 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv35 = sext i16 %20 to i32
  %add36 = add nsw i32 %conv34, %conv35
  %21 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv37 = sext i16 %21 to i32
  %sub38 = sub nsw i32 %add36, %conv37
  %22 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv39 = sext i16 %22 to i32
  %sub40 = sub nsw i32 %sub38, %conv39
  %sub41 = sub nsw i32 0, %sub40
  br label %cond.end50

cond.false42:                                     ; preds = %cond.end23
  %23 = load i16, i16* %a.addr, align 2, !tbaa !89
  %conv43 = sext i16 %23 to i32
  %24 = load i16, i16* %b.addr, align 2, !tbaa !89
  %conv44 = sext i16 %24 to i32
  %add45 = add nsw i32 %conv43, %conv44
  %25 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv46 = sext i16 %25 to i32
  %sub47 = sub nsw i32 %add45, %conv46
  %26 = load i16, i16* %c.addr, align 2, !tbaa !89
  %conv48 = sext i16 %26 to i32
  %sub49 = sub nsw i32 %sub47, %conv48
  br label %cond.end50

cond.end50:                                       ; preds = %cond.false42, %cond.true33
  %cond51 = phi i32 [ %sub41, %cond.true33 ], [ %sub49, %cond.false42 ]
  %conv52 = trunc i32 %cond51 to i16
  store i16 %conv52, i16* %pc, align 2, !tbaa !89
  %27 = load i16, i16* %pb, align 2, !tbaa !89
  %conv53 = sext i16 %27 to i32
  %28 = load i16, i16* %pa, align 2, !tbaa !89
  %conv54 = sext i16 %28 to i32
  %cmp55 = icmp slt i32 %conv53, %conv54
  br i1 %cmp55, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end50
  %29 = load i16, i16* %b.addr, align 2, !tbaa !89
  store i16 %29, i16* %a.addr, align 2, !tbaa !89
  %30 = load i16, i16* %pb, align 2, !tbaa !89
  store i16 %30, i16* %pa, align 2, !tbaa !89
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end50
  %31 = load i16, i16* %pc, align 2, !tbaa !89
  %conv56 = sext i16 %31 to i32
  %32 = load i16, i16* %pa, align 2, !tbaa !89
  %conv57 = sext i16 %32 to i32
  %cmp58 = icmp slt i32 %conv56, %conv57
  br i1 %cmp58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %if.end
  %33 = load i16, i16* %c.addr, align 2, !tbaa !89
  br label %cond.end61

cond.false60:                                     ; preds = %if.end
  %34 = load i16, i16* %a.addr, align 2, !tbaa !89
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false60, %cond.true59
  %cond62 = phi i16 [ %33, %cond.true59 ], [ %34, %cond.false60 ]
  %conv63 = trunc i16 %cond62 to i8
  %35 = bitcast i16* %pc to i8*
  call void @llvm.lifetime.end(i64 2, i8* %35) #16
  %36 = bitcast i16* %pb to i8*
  call void @llvm.lifetime.end(i64 2, i8* %36) #16
  %37 = bitcast i16* %pa to i8*
  call void @llvm.lifetime.end(i64 2, i8* %37) #16
  ret i8 %conv63
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL22setBitOfReversedStreamPmPhh(i64* %bitpointer, i8* %bitstream, i8 zeroext %bit) #4 {
entry:
  %bitpointer.addr = alloca i64*, align 8
  %bitstream.addr = alloca i8*, align 8
  %bit.addr = alloca i8, align 1
  store i64* %bitpointer, i64** %bitpointer.addr, align 8, !tbaa !2
  store i8* %bitstream, i8** %bitstream.addr, align 8, !tbaa !2
  store i8 %bit, i8* %bit.addr, align 1, !tbaa !16
  %0 = load i8, i8* %bit.addr, align 1, !tbaa !16
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %2 = load i64, i64* %1, align 8, !tbaa !6
  %and = and i64 %2, 7
  %sub = sub i64 7, %and
  %sh_prom = trunc i64 %sub to i32
  %shl = shl i32 1, %sh_prom
  %neg = xor i32 %shl, -1
  %conv1 = trunc i32 %neg to i8
  %conv2 = zext i8 %conv1 to i32
  %3 = load i8*, i8** %bitstream.addr, align 8, !tbaa !2
  %4 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %5 = load i64, i64* %4, align 8, !tbaa !6
  %shr = lshr i64 %5, 3
  %arrayidx = getelementptr inbounds i8, i8* %3, i64 %shr
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %conv3 = zext i8 %6 to i32
  %and4 = and i32 %conv3, %conv2
  %conv5 = trunc i32 %and4 to i8
  store i8 %conv5, i8* %arrayidx, align 1, !tbaa !16
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %8 = load i64, i64* %7, align 8, !tbaa !6
  %and6 = and i64 %8, 7
  %sub7 = sub i64 7, %and6
  %sh_prom8 = trunc i64 %sub7 to i32
  %shl9 = shl i32 1, %sh_prom8
  %9 = load i8*, i8** %bitstream.addr, align 8, !tbaa !2
  %10 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %11 = load i64, i64* %10, align 8, !tbaa !6
  %shr10 = lshr i64 %11, 3
  %arrayidx11 = getelementptr inbounds i8, i8* %9, i64 %shr10
  %12 = load i8, i8* %arrayidx11, align 1, !tbaa !16
  %conv12 = zext i8 %12 to i32
  %or = or i32 %conv12, %shl9
  %conv13 = trunc i32 %or to i8
  store i8 %conv13, i8* %arrayidx11, align 1, !tbaa !16
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load i64*, i64** %bitpointer.addr, align 8, !tbaa !2
  %14 = load i64, i64* %13, align 8, !tbaa !6
  %inc = add i64 %14, 1
  store i64 %inc, i64* %13, align 8, !tbaa !6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL14addPaddingBitsPhPKhmmj(i8* %out, i8* %in, i64 %olinebits, i64 %ilinebits, i32 %h) #4 {
entry:
  %out.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %olinebits.addr = alloca i64, align 8
  %ilinebits.addr = alloca i64, align 8
  %h.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %diff = alloca i64, align 8
  %obp = alloca i64, align 8
  %ibp = alloca i64, align 8
  %x = alloca i64, align 8
  %bit = alloca i8, align 1
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i64 %olinebits, i64* %olinebits.addr, align 8, !tbaa !6
  store i64 %ilinebits, i64* %ilinebits.addr, align 8, !tbaa !6
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  %0 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = bitcast i64* %diff to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i64, i64* %olinebits.addr, align 8, !tbaa !6
  %3 = load i64, i64* %ilinebits.addr, align 8, !tbaa !6
  %sub = sub i64 %2, %3
  store i64 %sub, i64* %diff, align 8, !tbaa !6
  %4 = bitcast i64* %obp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  store i64 0, i64* %obp, align 8, !tbaa !6
  %5 = bitcast i64* %ibp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  store i64 0, i64* %ibp, align 8, !tbaa !6
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc10, %entry
  %6 = load i32, i32* %y, align 4, !tbaa !8
  %7 = load i32, i32* %h.addr, align 4, !tbaa !8
  %cmp = icmp ne i32 %6, %7
  br i1 %cmp, label %for.body, label %for.end12

for.body:                                         ; preds = %for.cond
  %8 = bitcast i64* %x to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  store i64 0, i64* %x, align 8, !tbaa !6
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %9 = load i64, i64* %x, align 8, !tbaa !6
  %10 = load i64, i64* %ilinebits.addr, align 8, !tbaa !6
  %cmp2 = icmp ult i64 %9, %10
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  call void @llvm.lifetime.start(i64 1, i8* %bit) #16
  %11 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %call = call zeroext i8 @_ZL25readBitFromReversedStreamPmPKh(i64* %ibp, i8* %11)
  store i8 %call, i8* %bit, align 1, !tbaa !16
  %12 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %13 = load i8, i8* %bit, align 1, !tbaa !16
  call void @_ZL22setBitOfReversedStreamPmPhh(i64* %obp, i8* %12, i8 zeroext %13)
  call void @llvm.lifetime.end(i64 1, i8* %bit) #16
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %14 = load i64, i64* %x, align 8, !tbaa !6
  %inc = add i64 %14, 1
  store i64 %inc, i64* %x, align 8, !tbaa !6
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  store i64 0, i64* %x, align 8, !tbaa !6
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc7, %for.end
  %15 = load i64, i64* %x, align 8, !tbaa !6
  %16 = load i64, i64* %diff, align 8, !tbaa !6
  %cmp5 = icmp ne i64 %15, %16
  br i1 %cmp5, label %for.body6, label %for.end9

for.body6:                                        ; preds = %for.cond4
  %17 = load i8*, i8** %out.addr, align 8, !tbaa !2
  call void @_ZL22setBitOfReversedStreamPmPhh(i64* %obp, i8* %17, i8 zeroext 0)
  br label %for.inc7

for.inc7:                                         ; preds = %for.body6
  %18 = load i64, i64* %x, align 8, !tbaa !6
  %inc8 = add i64 %18, 1
  store i64 %inc8, i64* %x, align 8, !tbaa !6
  br label %for.cond4

for.end9:                                         ; preds = %for.cond4
  %19 = bitcast i64* %x to i8*
  call void @llvm.lifetime.end(i64 8, i8* %19) #16
  br label %for.inc10

for.inc10:                                        ; preds = %for.end9
  %20 = load i32, i32* %y, align 4, !tbaa !8
  %inc11 = add i32 %20, 1
  store i32 %inc11, i32* %y, align 4, !tbaa !8
  br label %for.cond

for.end12:                                        ; preds = %for.cond
  %21 = bitcast i64* %ibp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %21) #16
  %22 = bitcast i64* %obp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %22) #16
  %23 = bitcast i64* %diff to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #16
  %24 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %24) #16
  ret void
}

; Function Attrs: ssp uwtable
define internal i32 @_ZL6filterPhPKhjjPK16LodePNGColorModePK22LodePNGEncoderSettings(i8* %out, i8* %in, i32 %w, i32 %h, %struct.LodePNGColorMode* %color, %struct.LodePNGEncoderSettings* %settings) #0 {
entry:
  %retval = alloca i32, align 4
  %out.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %color.addr = alloca %struct.LodePNGColorMode*, align 8
  %settings.addr = alloca %struct.LodePNGEncoderSettings*, align 8
  %bpp = alloca i32, align 4
  %linebytes = alloca i64, align 8
  %bytewidth = alloca i64, align 8
  %prevline = alloca i8*, align 8
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %error = alloca i32, align 4
  %strategy = alloca i32, align 4
  %cleanup.dest.slot = alloca i32
  %type = alloca i8, align 1
  %outindex = alloca i64, align 8
  %inindex = alloca i64, align 8
  %attempt = alloca [5 x i8*], align 16
  %smallest = alloca i64, align 8
  %type22 = alloca i8, align 1
  %bestType = alloca i8, align 1
  %sum = alloca i64, align 8
  %s = alloca i8, align 1
  %attempt137 = alloca [5 x i8*], align 16
  %bestSum = alloca i64, align 8
  %type138 = alloca i32, align 4
  %bestType139 = alloca i32, align 4
  %count = alloca [256 x i32], align 16
  %sum162 = alloca i64, align 8
  %outindex249 = alloca i64, align 8
  %inindex253 = alloca i64, align 8
  %type256 = alloca i8, align 1
  %size = alloca [5 x i64], align 16
  %attempt270 = alloca [5 x i8*], align 16
  %smallest271 = alloca i64, align 8
  %type272 = alloca i32, align 4
  %bestType273 = alloca i32, align 4
  %dummy = alloca i8*, align 8
  %zlibsettings = alloca %struct.LodePNGCompressSettings, align 8
  %testsize = alloca i32, align 4
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store %struct.LodePNGColorMode* %color, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  store %struct.LodePNGEncoderSettings* %settings, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %0 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.start(i64 4, i8* %0) #16
  %1 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %call = call i32 @_Z15lodepng_get_bppPK16LodePNGColorMode(%struct.LodePNGColorMode* %1)
  store i32 %call, i32* %bpp, align 4, !tbaa !8
  %2 = bitcast i64* %linebytes to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %3 = load i32, i32* %w.addr, align 4, !tbaa !8
  %4 = load i32, i32* %bpp, align 4, !tbaa !8
  %call1 = call i64 @_ZL25lodepng_get_raw_size_idatjjj(i32 %3, i32 1, i32 %4)
  %sub = sub i64 %call1, 1
  store i64 %sub, i64* %linebytes, align 8, !tbaa !6
  %5 = bitcast i64* %bytewidth to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5) #16
  %6 = load i32, i32* %bpp, align 4, !tbaa !8
  %add = add i32 %6, 7
  %div = udiv i32 %add, 8
  %conv = zext i32 %div to i64
  store i64 %conv, i64* %bytewidth, align 8, !tbaa !6
  %7 = bitcast i8** %prevline to i8*
  call void @llvm.lifetime.start(i64 8, i8* %7) #16
  store i8* null, i8** %prevline, align 8, !tbaa !2
  %8 = bitcast i32* %x to i8*
  call void @llvm.lifetime.start(i64 4, i8* %8) #16
  %9 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %9) #16
  %10 = bitcast i32* %error to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #16
  store i32 0, i32* %error, align 4, !tbaa !8
  %11 = bitcast i32* %strategy to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #16
  %12 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %filter_strategy = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %12, i32 0, i32 3
  %13 = load i32, i32* %filter_strategy, align 8, !tbaa !150
  store i32 %13, i32* %strategy, align 4, !tbaa !157
  %14 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %filter_palette_zero = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %14, i32 0, i32 2
  %15 = load i32, i32* %filter_palette_zero, align 4, !tbaa !149
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %16 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %colortype = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %16, i32 0, i32 0
  %17 = load i32, i32* %colortype, align 8, !tbaa !58
  %cmp = icmp eq i32 %17, 3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %18 = load %struct.LodePNGColorMode*, %struct.LodePNGColorMode** %color.addr, align 8, !tbaa !2
  %bitdepth = getelementptr inbounds %struct.LodePNGColorMode, %struct.LodePNGColorMode* %18, i32 0, i32 1
  %19 = load i32, i32* %bitdepth, align 4, !tbaa !59
  %cmp2 = icmp ult i32 %19, 8
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %strategy, align 4, !tbaa !157
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %20 = load i32, i32* %bpp, align 4, !tbaa !8
  %cmp3 = icmp eq i32 %20, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  store i32 31, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %21 = load i32, i32* %strategy, align 4, !tbaa !157
  %cmp6 = icmp sge i32 %21, 0
  br i1 %cmp6, label %land.lhs.true7, label %if.else

land.lhs.true7:                                   ; preds = %if.end5
  %22 = load i32, i32* %strategy, align 4, !tbaa !157
  %cmp8 = icmp sle i32 %22, 4
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %land.lhs.true7
  call void @llvm.lifetime.start(i64 1, i8* %type) #16
  %23 = load i32, i32* %strategy, align 4, !tbaa !157
  %conv10 = trunc i32 %23 to i8
  store i8 %conv10, i8* %type, align 1, !tbaa !16
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then9
  %24 = load i32, i32* %y, align 4, !tbaa !8
  %25 = load i32, i32* %h.addr, align 4, !tbaa !8
  %cmp11 = icmp ne i32 %24, %25
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = bitcast i64* %outindex to i8*
  call void @llvm.lifetime.start(i64 8, i8* %26) #16
  %27 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add12 = add i64 1, %27
  %28 = load i32, i32* %y, align 4, !tbaa !8
  %conv13 = zext i32 %28 to i64
  %mul = mul i64 %add12, %conv13
  store i64 %mul, i64* %outindex, align 8, !tbaa !6
  %29 = bitcast i64* %inindex to i8*
  call void @llvm.lifetime.start(i64 8, i8* %29) #16
  %30 = load i64, i64* %linebytes, align 8, !tbaa !6
  %31 = load i32, i32* %y, align 4, !tbaa !8
  %conv14 = zext i32 %31 to i64
  %mul15 = mul i64 %30, %conv14
  store i64 %mul15, i64* %inindex, align 8, !tbaa !6
  %32 = load i8, i8* %type, align 1, !tbaa !16
  %33 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %34 = load i64, i64* %outindex, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %33, i64 %34
  store i8 %32, i8* %arrayidx, align 1, !tbaa !16
  %35 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %36 = load i64, i64* %outindex, align 8, !tbaa !6
  %add16 = add i64 %36, 1
  %arrayidx17 = getelementptr inbounds i8, i8* %35, i64 %add16
  %37 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %38 = load i64, i64* %inindex, align 8, !tbaa !6
  %arrayidx18 = getelementptr inbounds i8, i8* %37, i64 %38
  %39 = load i8*, i8** %prevline, align 8, !tbaa !2
  %40 = load i64, i64* %linebytes, align 8, !tbaa !6
  %41 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %42 = load i8, i8* %type, align 1, !tbaa !16
  call void @_ZL14filterScanlinePhPKhS1_mmh(i8* %arrayidx17, i8* %arrayidx18, i8* %39, i64 %40, i64 %41, i8 zeroext %42)
  %43 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %44 = load i64, i64* %inindex, align 8, !tbaa !6
  %arrayidx19 = getelementptr inbounds i8, i8* %43, i64 %44
  store i8* %arrayidx19, i8** %prevline, align 8, !tbaa !2
  %45 = bitcast i64* %inindex to i8*
  call void @llvm.lifetime.end(i64 8, i8* %45) #16
  %46 = bitcast i64* %outindex to i8*
  call void @llvm.lifetime.end(i64 8, i8* %46) #16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %47 = load i32, i32* %y, align 4, !tbaa !8
  %inc = add i32 %47, 1
  store i32 %inc, i32* %y, align 4, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.end(i64 1, i8* %type) #16
  br label %if.end369

if.else:                                          ; preds = %land.lhs.true7, %if.end5
  %48 = load i32, i32* %strategy, align 4, !tbaa !157
  %cmp20 = icmp eq i32 %48, 5
  br i1 %cmp20, label %if.then21, label %if.else134

if.then21:                                        ; preds = %if.else
  %49 = bitcast [5 x i8*]* %attempt to i8*
  call void @llvm.lifetime.start(i64 40, i8* %49) #16
  %50 = bitcast i64* %smallest to i8*
  call void @llvm.lifetime.start(i64 8, i8* %50) #16
  store i64 0, i64* %smallest, align 8, !tbaa !6
  call void @llvm.lifetime.start(i64 1, i8* %type22) #16
  call void @llvm.lifetime.start(i64 1, i8* %bestType) #16
  store i8 0, i8* %bestType, align 1, !tbaa !16
  store i8 0, i8* %type22, align 1, !tbaa !16
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc34, %if.then21
  %51 = load i8, i8* %type22, align 1, !tbaa !16
  %conv24 = zext i8 %51 to i32
  %cmp25 = icmp ne i32 %conv24, 5
  br i1 %cmp25, label %for.body26, label %for.end36

for.body26:                                       ; preds = %for.cond23
  %52 = load i64, i64* %linebytes, align 8, !tbaa !6
  %call27 = call i8* @_ZL14lodepng_mallocm(i64 %52)
  %53 = load i8, i8* %type22, align 1, !tbaa !16
  %idxprom = zext i8 %53 to i64
  %arrayidx28 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt, i64 0, i64 %idxprom
  store i8* %call27, i8** %arrayidx28, align 8, !tbaa !2
  %54 = load i8, i8* %type22, align 1, !tbaa !16
  %idxprom29 = zext i8 %54 to i64
  %arrayidx30 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt, i64 0, i64 %idxprom29
  %55 = load i8*, i8** %arrayidx30, align 8, !tbaa !2
  %tobool31 = icmp ne i8* %55, null
  br i1 %tobool31, label %if.end33, label %if.then32

if.then32:                                        ; preds = %for.body26
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %for.body26
  br label %for.inc34

for.inc34:                                        ; preds = %if.end33
  %56 = load i8, i8* %type22, align 1, !tbaa !16
  %inc35 = add i8 %56, 1
  store i8 %inc35, i8* %type22, align 1, !tbaa !16
  br label %for.cond23

for.end36:                                        ; preds = %for.cond23
  %57 = load i32, i32* %error, align 4, !tbaa !8
  %tobool37 = icmp ne i32 %57, 0
  br i1 %tobool37, label %if.end124, label %if.then38

if.then38:                                        ; preds = %for.end36
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc121, %if.then38
  %58 = load i32, i32* %y, align 4, !tbaa !8
  %59 = load i32, i32* %h.addr, align 4, !tbaa !8
  %cmp40 = icmp ne i32 %58, %59
  br i1 %cmp40, label %for.body41, label %for.end123

for.body41:                                       ; preds = %for.cond39
  store i8 0, i8* %type22, align 1, !tbaa !16
  br label %for.cond42

for.cond42:                                       ; preds = %for.inc93, %for.body41
  %60 = load i8, i8* %type22, align 1, !tbaa !16
  %conv43 = zext i8 %60 to i32
  %cmp44 = icmp ne i32 %conv43, 5
  br i1 %cmp44, label %for.body45, label %for.end95

for.body45:                                       ; preds = %for.cond42
  %61 = bitcast i64* %sum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %61) #16
  store i64 0, i64* %sum, align 8, !tbaa !6
  %62 = load i8, i8* %type22, align 1, !tbaa !16
  %idxprom46 = zext i8 %62 to i64
  %arrayidx47 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt, i64 0, i64 %idxprom46
  %63 = load i8*, i8** %arrayidx47, align 8, !tbaa !2
  %64 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %65 = load i32, i32* %y, align 4, !tbaa !8
  %conv48 = zext i32 %65 to i64
  %66 = load i64, i64* %linebytes, align 8, !tbaa !6
  %mul49 = mul i64 %conv48, %66
  %arrayidx50 = getelementptr inbounds i8, i8* %64, i64 %mul49
  %67 = load i8*, i8** %prevline, align 8, !tbaa !2
  %68 = load i64, i64* %linebytes, align 8, !tbaa !6
  %69 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %70 = load i8, i8* %type22, align 1, !tbaa !16
  call void @_ZL14filterScanlinePhPKhS1_mmh(i8* %63, i8* %arrayidx50, i8* %67, i64 %68, i64 %69, i8 zeroext %70)
  %71 = load i8, i8* %type22, align 1, !tbaa !16
  %conv51 = zext i8 %71 to i32
  %cmp52 = icmp eq i32 %conv51, 0
  br i1 %cmp52, label %if.then53, label %if.else67

if.then53:                                        ; preds = %for.body45
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc64, %if.then53
  %72 = load i32, i32* %x, align 4, !tbaa !8
  %conv55 = zext i32 %72 to i64
  %73 = load i64, i64* %linebytes, align 8, !tbaa !6
  %cmp56 = icmp ne i64 %conv55, %73
  br i1 %cmp56, label %for.body57, label %for.end66

for.body57:                                       ; preds = %for.cond54
  %74 = load i8, i8* %type22, align 1, !tbaa !16
  %idxprom58 = zext i8 %74 to i64
  %arrayidx59 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt, i64 0, i64 %idxprom58
  %75 = load i8*, i8** %arrayidx59, align 8, !tbaa !2
  %76 = load i32, i32* %x, align 4, !tbaa !8
  %idxprom60 = zext i32 %76 to i64
  %arrayidx61 = getelementptr inbounds i8, i8* %75, i64 %idxprom60
  %77 = load i8, i8* %arrayidx61, align 1, !tbaa !16
  %conv62 = zext i8 %77 to i64
  %78 = load i64, i64* %sum, align 8, !tbaa !6
  %add63 = add i64 %78, %conv62
  store i64 %add63, i64* %sum, align 8, !tbaa !6
  br label %for.inc64

for.inc64:                                        ; preds = %for.body57
  %79 = load i32, i32* %x, align 4, !tbaa !8
  %inc65 = add i32 %79, 1
  store i32 %inc65, i32* %x, align 4, !tbaa !8
  br label %for.cond54

for.end66:                                        ; preds = %for.cond54
  br label %if.end86

if.else67:                                        ; preds = %for.body45
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond68

for.cond68:                                       ; preds = %for.inc83, %if.else67
  %80 = load i32, i32* %x, align 4, !tbaa !8
  %conv69 = zext i32 %80 to i64
  %81 = load i64, i64* %linebytes, align 8, !tbaa !6
  %cmp70 = icmp ne i64 %conv69, %81
  br i1 %cmp70, label %for.body71, label %for.end85

for.body71:                                       ; preds = %for.cond68
  call void @llvm.lifetime.start(i64 1, i8* %s) #16
  %82 = load i8, i8* %type22, align 1, !tbaa !16
  %idxprom72 = zext i8 %82 to i64
  %arrayidx73 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt, i64 0, i64 %idxprom72
  %83 = load i8*, i8** %arrayidx73, align 8, !tbaa !2
  %84 = load i32, i32* %x, align 4, !tbaa !8
  %idxprom74 = zext i32 %84 to i64
  %arrayidx75 = getelementptr inbounds i8, i8* %83, i64 %idxprom74
  %85 = load i8, i8* %arrayidx75, align 1, !tbaa !16
  store i8 %85, i8* %s, align 1, !tbaa !16
  %86 = load i8, i8* %s, align 1, !tbaa !16
  %conv76 = zext i8 %86 to i32
  %cmp77 = icmp slt i32 %conv76, 128
  br i1 %cmp77, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body71
  %87 = load i8, i8* %s, align 1, !tbaa !16
  %conv78 = zext i8 %87 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body71
  %88 = load i8, i8* %s, align 1, !tbaa !16
  %conv79 = zext i8 %88 to i32
  %sub80 = sub i32 255, %conv79
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv78, %cond.true ], [ %sub80, %cond.false ]
  %conv81 = zext i32 %cond to i64
  %89 = load i64, i64* %sum, align 8, !tbaa !6
  %add82 = add i64 %89, %conv81
  store i64 %add82, i64* %sum, align 8, !tbaa !6
  call void @llvm.lifetime.end(i64 1, i8* %s) #16
  br label %for.inc83

for.inc83:                                        ; preds = %cond.end
  %90 = load i32, i32* %x, align 4, !tbaa !8
  %inc84 = add i32 %90, 1
  store i32 %inc84, i32* %x, align 4, !tbaa !8
  br label %for.cond68

for.end85:                                        ; preds = %for.cond68
  br label %if.end86

if.end86:                                         ; preds = %for.end85, %for.end66
  %91 = load i8, i8* %type22, align 1, !tbaa !16
  %conv87 = zext i8 %91 to i32
  %cmp88 = icmp eq i32 %conv87, 0
  br i1 %cmp88, label %if.then91, label %lor.lhs.false89

lor.lhs.false89:                                  ; preds = %if.end86
  %92 = load i64, i64* %sum, align 8, !tbaa !6
  %93 = load i64, i64* %smallest, align 8, !tbaa !6
  %cmp90 = icmp ult i64 %92, %93
  br i1 %cmp90, label %if.then91, label %if.end92

if.then91:                                        ; preds = %lor.lhs.false89, %if.end86
  %94 = load i8, i8* %type22, align 1, !tbaa !16
  store i8 %94, i8* %bestType, align 1, !tbaa !16
  %95 = load i64, i64* %sum, align 8, !tbaa !6
  store i64 %95, i64* %smallest, align 8, !tbaa !6
  br label %if.end92

if.end92:                                         ; preds = %if.then91, %lor.lhs.false89
  %96 = bitcast i64* %sum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %96) #16
  br label %for.inc93

for.inc93:                                        ; preds = %if.end92
  %97 = load i8, i8* %type22, align 1, !tbaa !16
  %inc94 = add i8 %97, 1
  store i8 %inc94, i8* %type22, align 1, !tbaa !16
  br label %for.cond42

for.end95:                                        ; preds = %for.cond42
  %98 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %99 = load i32, i32* %y, align 4, !tbaa !8
  %conv96 = zext i32 %99 to i64
  %100 = load i64, i64* %linebytes, align 8, !tbaa !6
  %mul97 = mul i64 %conv96, %100
  %arrayidx98 = getelementptr inbounds i8, i8* %98, i64 %mul97
  store i8* %arrayidx98, i8** %prevline, align 8, !tbaa !2
  %101 = load i8, i8* %bestType, align 1, !tbaa !16
  %102 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %103 = load i32, i32* %y, align 4, !tbaa !8
  %conv99 = zext i32 %103 to i64
  %104 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add100 = add i64 %104, 1
  %mul101 = mul i64 %conv99, %add100
  %arrayidx102 = getelementptr inbounds i8, i8* %102, i64 %mul101
  store i8 %101, i8* %arrayidx102, align 1, !tbaa !16
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond103

for.cond103:                                      ; preds = %for.inc118, %for.end95
  %105 = load i32, i32* %x, align 4, !tbaa !8
  %conv104 = zext i32 %105 to i64
  %106 = load i64, i64* %linebytes, align 8, !tbaa !6
  %cmp105 = icmp ne i64 %conv104, %106
  br i1 %cmp105, label %for.body106, label %for.end120

for.body106:                                      ; preds = %for.cond103
  %107 = load i8, i8* %bestType, align 1, !tbaa !16
  %idxprom107 = zext i8 %107 to i64
  %arrayidx108 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt, i64 0, i64 %idxprom107
  %108 = load i8*, i8** %arrayidx108, align 8, !tbaa !2
  %109 = load i32, i32* %x, align 4, !tbaa !8
  %idxprom109 = zext i32 %109 to i64
  %arrayidx110 = getelementptr inbounds i8, i8* %108, i64 %idxprom109
  %110 = load i8, i8* %arrayidx110, align 1, !tbaa !16
  %111 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %112 = load i32, i32* %y, align 4, !tbaa !8
  %conv111 = zext i32 %112 to i64
  %113 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add112 = add i64 %113, 1
  %mul113 = mul i64 %conv111, %add112
  %add114 = add i64 %mul113, 1
  %114 = load i32, i32* %x, align 4, !tbaa !8
  %conv115 = zext i32 %114 to i64
  %add116 = add i64 %add114, %conv115
  %arrayidx117 = getelementptr inbounds i8, i8* %111, i64 %add116
  store i8 %110, i8* %arrayidx117, align 1, !tbaa !16
  br label %for.inc118

for.inc118:                                       ; preds = %for.body106
  %115 = load i32, i32* %x, align 4, !tbaa !8
  %inc119 = add i32 %115, 1
  store i32 %inc119, i32* %x, align 4, !tbaa !8
  br label %for.cond103

for.end120:                                       ; preds = %for.cond103
  br label %for.inc121

for.inc121:                                       ; preds = %for.end120
  %116 = load i32, i32* %y, align 4, !tbaa !8
  %inc122 = add i32 %116, 1
  store i32 %inc122, i32* %y, align 4, !tbaa !8
  br label %for.cond39

for.end123:                                       ; preds = %for.cond39
  br label %if.end124

if.end124:                                        ; preds = %for.end123, %for.end36
  store i8 0, i8* %type22, align 1, !tbaa !16
  br label %for.cond125

for.cond125:                                      ; preds = %for.inc131, %if.end124
  %117 = load i8, i8* %type22, align 1, !tbaa !16
  %conv126 = zext i8 %117 to i32
  %cmp127 = icmp ne i32 %conv126, 5
  br i1 %cmp127, label %for.body128, label %for.end133

for.body128:                                      ; preds = %for.cond125
  %118 = load i8, i8* %type22, align 1, !tbaa !16
  %idxprom129 = zext i8 %118 to i64
  %arrayidx130 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt, i64 0, i64 %idxprom129
  %119 = load i8*, i8** %arrayidx130, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %119)
  br label %for.inc131

for.inc131:                                       ; preds = %for.body128
  %120 = load i8, i8* %type22, align 1, !tbaa !16
  %inc132 = add i8 %120, 1
  store i8 %inc132, i8* %type22, align 1, !tbaa !16
  br label %for.cond125

for.end133:                                       ; preds = %for.cond125
  call void @llvm.lifetime.end(i64 1, i8* %bestType) #16
  call void @llvm.lifetime.end(i64 1, i8* %type22) #16
  %121 = bitcast i64* %smallest to i8*
  call void @llvm.lifetime.end(i64 8, i8* %121) #16
  %122 = bitcast [5 x i8*]* %attempt to i8*
  call void @llvm.lifetime.end(i64 40, i8* %122) #16
  br label %if.end368

if.else134:                                       ; preds = %if.else
  %123 = load i32, i32* %strategy, align 4, !tbaa !157
  %cmp135 = icmp eq i32 %123, 6
  br i1 %cmp135, label %if.then136, label %if.else243

if.then136:                                       ; preds = %if.else134
  %124 = bitcast [5 x i8*]* %attempt137 to i8*
  call void @llvm.lifetime.start(i64 40, i8* %124) #16
  %125 = bitcast i64* %bestSum to i8*
  call void @llvm.lifetime.start(i64 8, i8* %125) #16
  store i64 0, i64* %bestSum, align 8, !tbaa !6
  %126 = bitcast i32* %type138 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %126) #16
  %127 = bitcast i32* %bestType139 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %127) #16
  store i32 0, i32* %bestType139, align 4, !tbaa !8
  %128 = bitcast [256 x i32]* %count to i8*
  call void @llvm.lifetime.start(i64 1024, i8* %128) #16
  store i32 0, i32* %type138, align 4, !tbaa !8
  br label %for.cond140

for.cond140:                                      ; preds = %for.inc151, %if.then136
  %129 = load i32, i32* %type138, align 4, !tbaa !8
  %cmp141 = icmp ne i32 %129, 5
  br i1 %cmp141, label %for.body142, label %for.end153

for.body142:                                      ; preds = %for.cond140
  %130 = load i64, i64* %linebytes, align 8, !tbaa !6
  %call143 = call i8* @_ZL14lodepng_mallocm(i64 %130)
  %131 = load i32, i32* %type138, align 4, !tbaa !8
  %idxprom144 = zext i32 %131 to i64
  %arrayidx145 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt137, i64 0, i64 %idxprom144
  store i8* %call143, i8** %arrayidx145, align 8, !tbaa !2
  %132 = load i32, i32* %type138, align 4, !tbaa !8
  %idxprom146 = zext i32 %132 to i64
  %arrayidx147 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt137, i64 0, i64 %idxprom146
  %133 = load i8*, i8** %arrayidx147, align 8, !tbaa !2
  %tobool148 = icmp ne i8* %133, null
  br i1 %tobool148, label %if.end150, label %if.then149

if.then149:                                       ; preds = %for.body142
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end150

if.end150:                                        ; preds = %if.then149, %for.body142
  br label %for.inc151

for.inc151:                                       ; preds = %if.end150
  %134 = load i32, i32* %type138, align 4, !tbaa !8
  %inc152 = add i32 %134, 1
  store i32 %inc152, i32* %type138, align 4, !tbaa !8
  br label %for.cond140

for.end153:                                       ; preds = %for.cond140
  %135 = load i32, i32* %error, align 4, !tbaa !8
  %tobool154 = icmp ne i32 %135, 0
  br i1 %tobool154, label %if.end234, label %if.then155

if.then155:                                       ; preds = %for.end153
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond156

for.cond156:                                      ; preds = %for.inc231, %if.then155
  %136 = load i32, i32* %y, align 4, !tbaa !8
  %137 = load i32, i32* %h.addr, align 4, !tbaa !8
  %cmp157 = icmp ne i32 %136, %137
  br i1 %cmp157, label %for.body158, label %for.end233

for.body158:                                      ; preds = %for.cond156
  store i32 0, i32* %type138, align 4, !tbaa !8
  br label %for.cond159

for.cond159:                                      ; preds = %for.inc202, %for.body158
  %138 = load i32, i32* %type138, align 4, !tbaa !8
  %cmp160 = icmp ne i32 %138, 5
  br i1 %cmp160, label %for.body161, label %for.end204

for.body161:                                      ; preds = %for.cond159
  %139 = bitcast i64* %sum162 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %139) #16
  store i64 0, i64* %sum162, align 8, !tbaa !6
  %140 = load i32, i32* %type138, align 4, !tbaa !8
  %idxprom163 = zext i32 %140 to i64
  %arrayidx164 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt137, i64 0, i64 %idxprom163
  %141 = load i8*, i8** %arrayidx164, align 8, !tbaa !2
  %142 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %143 = load i32, i32* %y, align 4, !tbaa !8
  %conv165 = zext i32 %143 to i64
  %144 = load i64, i64* %linebytes, align 8, !tbaa !6
  %mul166 = mul i64 %conv165, %144
  %arrayidx167 = getelementptr inbounds i8, i8* %142, i64 %mul166
  %145 = load i8*, i8** %prevline, align 8, !tbaa !2
  %146 = load i64, i64* %linebytes, align 8, !tbaa !6
  %147 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %148 = load i32, i32* %type138, align 4, !tbaa !8
  %conv168 = trunc i32 %148 to i8
  call void @_ZL14filterScanlinePhPKhS1_mmh(i8* %141, i8* %arrayidx167, i8* %145, i64 %146, i64 %147, i8 zeroext %conv168)
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32]* %count, i32 0, i32 0
  %149 = bitcast i32* %arraydecay to i8*
  call void @_ZL14lodepng_memsetPvim(i8* %149, i32 0, i64 1024)
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond169

for.cond169:                                      ; preds = %for.inc180, %for.body161
  %150 = load i32, i32* %x, align 4, !tbaa !8
  %conv170 = zext i32 %150 to i64
  %151 = load i64, i64* %linebytes, align 8, !tbaa !6
  %cmp171 = icmp ne i64 %conv170, %151
  br i1 %cmp171, label %for.body172, label %for.end182

for.body172:                                      ; preds = %for.cond169
  %152 = load i32, i32* %type138, align 4, !tbaa !8
  %idxprom173 = zext i32 %152 to i64
  %arrayidx174 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt137, i64 0, i64 %idxprom173
  %153 = load i8*, i8** %arrayidx174, align 8, !tbaa !2
  %154 = load i32, i32* %x, align 4, !tbaa !8
  %idxprom175 = zext i32 %154 to i64
  %arrayidx176 = getelementptr inbounds i8, i8* %153, i64 %idxprom175
  %155 = load i8, i8* %arrayidx176, align 1, !tbaa !16
  %idxprom177 = zext i8 %155 to i64
  %arrayidx178 = getelementptr inbounds [256 x i32], [256 x i32]* %count, i64 0, i64 %idxprom177
  %156 = load i32, i32* %arrayidx178, align 4, !tbaa !8
  %inc179 = add i32 %156, 1
  store i32 %inc179, i32* %arrayidx178, align 4, !tbaa !8
  br label %for.inc180

for.inc180:                                       ; preds = %for.body172
  %157 = load i32, i32* %x, align 4, !tbaa !8
  %inc181 = add i32 %157, 1
  store i32 %inc181, i32* %x, align 4, !tbaa !8
  br label %for.cond169

for.end182:                                       ; preds = %for.cond169
  %158 = load i32, i32* %type138, align 4, !tbaa !8
  %idxprom183 = zext i32 %158 to i64
  %arrayidx184 = getelementptr inbounds [256 x i32], [256 x i32]* %count, i64 0, i64 %idxprom183
  %159 = load i32, i32* %arrayidx184, align 4, !tbaa !8
  %inc185 = add i32 %159, 1
  store i32 %inc185, i32* %arrayidx184, align 4, !tbaa !8
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond186

for.cond186:                                      ; preds = %for.inc194, %for.end182
  %160 = load i32, i32* %x, align 4, !tbaa !8
  %cmp187 = icmp ne i32 %160, 256
  br i1 %cmp187, label %for.body188, label %for.end196

for.body188:                                      ; preds = %for.cond186
  %161 = load i32, i32* %x, align 4, !tbaa !8
  %idxprom189 = zext i32 %161 to i64
  %arrayidx190 = getelementptr inbounds [256 x i32], [256 x i32]* %count, i64 0, i64 %idxprom189
  %162 = load i32, i32* %arrayidx190, align 4, !tbaa !8
  %conv191 = zext i32 %162 to i64
  %call192 = call i64 @_ZL6ilog2im(i64 %conv191)
  %163 = load i64, i64* %sum162, align 8, !tbaa !6
  %add193 = add i64 %163, %call192
  store i64 %add193, i64* %sum162, align 8, !tbaa !6
  br label %for.inc194

for.inc194:                                       ; preds = %for.body188
  %164 = load i32, i32* %x, align 4, !tbaa !8
  %inc195 = add i32 %164, 1
  store i32 %inc195, i32* %x, align 4, !tbaa !8
  br label %for.cond186

for.end196:                                       ; preds = %for.cond186
  %165 = load i32, i32* %type138, align 4, !tbaa !8
  %cmp197 = icmp eq i32 %165, 0
  br i1 %cmp197, label %if.then200, label %lor.lhs.false198

lor.lhs.false198:                                 ; preds = %for.end196
  %166 = load i64, i64* %sum162, align 8, !tbaa !6
  %167 = load i64, i64* %bestSum, align 8, !tbaa !6
  %cmp199 = icmp ugt i64 %166, %167
  br i1 %cmp199, label %if.then200, label %if.end201

if.then200:                                       ; preds = %lor.lhs.false198, %for.end196
  %168 = load i32, i32* %type138, align 4, !tbaa !8
  store i32 %168, i32* %bestType139, align 4, !tbaa !8
  %169 = load i64, i64* %sum162, align 8, !tbaa !6
  store i64 %169, i64* %bestSum, align 8, !tbaa !6
  br label %if.end201

if.end201:                                        ; preds = %if.then200, %lor.lhs.false198
  %170 = bitcast i64* %sum162 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %170) #16
  br label %for.inc202

for.inc202:                                       ; preds = %if.end201
  %171 = load i32, i32* %type138, align 4, !tbaa !8
  %inc203 = add i32 %171, 1
  store i32 %inc203, i32* %type138, align 4, !tbaa !8
  br label %for.cond159

for.end204:                                       ; preds = %for.cond159
  %172 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %173 = load i32, i32* %y, align 4, !tbaa !8
  %conv205 = zext i32 %173 to i64
  %174 = load i64, i64* %linebytes, align 8, !tbaa !6
  %mul206 = mul i64 %conv205, %174
  %arrayidx207 = getelementptr inbounds i8, i8* %172, i64 %mul206
  store i8* %arrayidx207, i8** %prevline, align 8, !tbaa !2
  %175 = load i32, i32* %bestType139, align 4, !tbaa !8
  %conv208 = trunc i32 %175 to i8
  %176 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %177 = load i32, i32* %y, align 4, !tbaa !8
  %conv209 = zext i32 %177 to i64
  %178 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add210 = add i64 %178, 1
  %mul211 = mul i64 %conv209, %add210
  %arrayidx212 = getelementptr inbounds i8, i8* %176, i64 %mul211
  store i8 %conv208, i8* %arrayidx212, align 1, !tbaa !16
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond213

for.cond213:                                      ; preds = %for.inc228, %for.end204
  %179 = load i32, i32* %x, align 4, !tbaa !8
  %conv214 = zext i32 %179 to i64
  %180 = load i64, i64* %linebytes, align 8, !tbaa !6
  %cmp215 = icmp ne i64 %conv214, %180
  br i1 %cmp215, label %for.body216, label %for.end230

for.body216:                                      ; preds = %for.cond213
  %181 = load i32, i32* %bestType139, align 4, !tbaa !8
  %idxprom217 = zext i32 %181 to i64
  %arrayidx218 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt137, i64 0, i64 %idxprom217
  %182 = load i8*, i8** %arrayidx218, align 8, !tbaa !2
  %183 = load i32, i32* %x, align 4, !tbaa !8
  %idxprom219 = zext i32 %183 to i64
  %arrayidx220 = getelementptr inbounds i8, i8* %182, i64 %idxprom219
  %184 = load i8, i8* %arrayidx220, align 1, !tbaa !16
  %185 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %186 = load i32, i32* %y, align 4, !tbaa !8
  %conv221 = zext i32 %186 to i64
  %187 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add222 = add i64 %187, 1
  %mul223 = mul i64 %conv221, %add222
  %add224 = add i64 %mul223, 1
  %188 = load i32, i32* %x, align 4, !tbaa !8
  %conv225 = zext i32 %188 to i64
  %add226 = add i64 %add224, %conv225
  %arrayidx227 = getelementptr inbounds i8, i8* %185, i64 %add226
  store i8 %184, i8* %arrayidx227, align 1, !tbaa !16
  br label %for.inc228

for.inc228:                                       ; preds = %for.body216
  %189 = load i32, i32* %x, align 4, !tbaa !8
  %inc229 = add i32 %189, 1
  store i32 %inc229, i32* %x, align 4, !tbaa !8
  br label %for.cond213

for.end230:                                       ; preds = %for.cond213
  br label %for.inc231

for.inc231:                                       ; preds = %for.end230
  %190 = load i32, i32* %y, align 4, !tbaa !8
  %inc232 = add i32 %190, 1
  store i32 %inc232, i32* %y, align 4, !tbaa !8
  br label %for.cond156

for.end233:                                       ; preds = %for.cond156
  br label %if.end234

if.end234:                                        ; preds = %for.end233, %for.end153
  store i32 0, i32* %type138, align 4, !tbaa !8
  br label %for.cond235

for.cond235:                                      ; preds = %for.inc240, %if.end234
  %191 = load i32, i32* %type138, align 4, !tbaa !8
  %cmp236 = icmp ne i32 %191, 5
  br i1 %cmp236, label %for.body237, label %for.end242

for.body237:                                      ; preds = %for.cond235
  %192 = load i32, i32* %type138, align 4, !tbaa !8
  %idxprom238 = zext i32 %192 to i64
  %arrayidx239 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt137, i64 0, i64 %idxprom238
  %193 = load i8*, i8** %arrayidx239, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %193)
  br label %for.inc240

for.inc240:                                       ; preds = %for.body237
  %194 = load i32, i32* %type138, align 4, !tbaa !8
  %inc241 = add i32 %194, 1
  store i32 %inc241, i32* %type138, align 4, !tbaa !8
  br label %for.cond235

for.end242:                                       ; preds = %for.cond235
  %195 = bitcast [256 x i32]* %count to i8*
  call void @llvm.lifetime.end(i64 1024, i8* %195) #16
  %196 = bitcast i32* %bestType139 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %196) #16
  %197 = bitcast i32* %type138 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %197) #16
  %198 = bitcast i64* %bestSum to i8*
  call void @llvm.lifetime.end(i64 8, i8* %198) #16
  %199 = bitcast [5 x i8*]* %attempt137 to i8*
  call void @llvm.lifetime.end(i64 40, i8* %199) #16
  br label %if.end367

if.else243:                                       ; preds = %if.else134
  %200 = load i32, i32* %strategy, align 4, !tbaa !157
  %cmp244 = icmp eq i32 %200, 8
  br i1 %cmp244, label %if.then245, label %if.else267

if.then245:                                       ; preds = %if.else243
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond246

for.cond246:                                      ; preds = %for.inc264, %if.then245
  %201 = load i32, i32* %y, align 4, !tbaa !8
  %202 = load i32, i32* %h.addr, align 4, !tbaa !8
  %cmp247 = icmp ne i32 %201, %202
  br i1 %cmp247, label %for.body248, label %for.end266

for.body248:                                      ; preds = %for.cond246
  %203 = bitcast i64* %outindex249 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %203) #16
  %204 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add250 = add i64 1, %204
  %205 = load i32, i32* %y, align 4, !tbaa !8
  %conv251 = zext i32 %205 to i64
  %mul252 = mul i64 %add250, %conv251
  store i64 %mul252, i64* %outindex249, align 8, !tbaa !6
  %206 = bitcast i64* %inindex253 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %206) #16
  %207 = load i64, i64* %linebytes, align 8, !tbaa !6
  %208 = load i32, i32* %y, align 4, !tbaa !8
  %conv254 = zext i32 %208 to i64
  %mul255 = mul i64 %207, %conv254
  store i64 %mul255, i64* %inindex253, align 8, !tbaa !6
  call void @llvm.lifetime.start(i64 1, i8* %type256) #16
  %209 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %predefined_filters = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %209, i32 0, i32 4
  %210 = load i8*, i8** %predefined_filters, align 8, !tbaa !153
  %211 = load i32, i32* %y, align 4, !tbaa !8
  %idxprom257 = zext i32 %211 to i64
  %arrayidx258 = getelementptr inbounds i8, i8* %210, i64 %idxprom257
  %212 = load i8, i8* %arrayidx258, align 1, !tbaa !16
  store i8 %212, i8* %type256, align 1, !tbaa !16
  %213 = load i8, i8* %type256, align 1, !tbaa !16
  %214 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %215 = load i64, i64* %outindex249, align 8, !tbaa !6
  %arrayidx259 = getelementptr inbounds i8, i8* %214, i64 %215
  store i8 %213, i8* %arrayidx259, align 1, !tbaa !16
  %216 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %217 = load i64, i64* %outindex249, align 8, !tbaa !6
  %add260 = add i64 %217, 1
  %arrayidx261 = getelementptr inbounds i8, i8* %216, i64 %add260
  %218 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %219 = load i64, i64* %inindex253, align 8, !tbaa !6
  %arrayidx262 = getelementptr inbounds i8, i8* %218, i64 %219
  %220 = load i8*, i8** %prevline, align 8, !tbaa !2
  %221 = load i64, i64* %linebytes, align 8, !tbaa !6
  %222 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %223 = load i8, i8* %type256, align 1, !tbaa !16
  call void @_ZL14filterScanlinePhPKhS1_mmh(i8* %arrayidx261, i8* %arrayidx262, i8* %220, i64 %221, i64 %222, i8 zeroext %223)
  %224 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %225 = load i64, i64* %inindex253, align 8, !tbaa !6
  %arrayidx263 = getelementptr inbounds i8, i8* %224, i64 %225
  store i8* %arrayidx263, i8** %prevline, align 8, !tbaa !2
  call void @llvm.lifetime.end(i64 1, i8* %type256) #16
  %226 = bitcast i64* %inindex253 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %226) #16
  %227 = bitcast i64* %outindex249 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %227) #16
  br label %for.inc264

for.inc264:                                       ; preds = %for.body248
  %228 = load i32, i32* %y, align 4, !tbaa !8
  %inc265 = add i32 %228, 1
  store i32 %inc265, i32* %y, align 4, !tbaa !8
  br label %for.cond246

for.end266:                                       ; preds = %for.cond246
  br label %if.end366

if.else267:                                       ; preds = %if.else243
  %229 = load i32, i32* %strategy, align 4, !tbaa !157
  %cmp268 = icmp eq i32 %229, 7
  br i1 %cmp268, label %if.then269, label %if.else364

if.then269:                                       ; preds = %if.else267
  %230 = bitcast [5 x i64]* %size to i8*
  call void @llvm.lifetime.start(i64 40, i8* %230) #16
  %231 = bitcast [5 x i8*]* %attempt270 to i8*
  call void @llvm.lifetime.start(i64 40, i8* %231) #16
  %232 = bitcast i64* %smallest271 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %232) #16
  store i64 0, i64* %smallest271, align 8, !tbaa !6
  %233 = bitcast i32* %type272 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %233) #16
  store i32 0, i32* %type272, align 4, !tbaa !8
  %234 = bitcast i32* %bestType273 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %234) #16
  store i32 0, i32* %bestType273, align 4, !tbaa !8
  %235 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.start(i64 8, i8* %235) #16
  %236 = bitcast %struct.LodePNGCompressSettings* %zlibsettings to i8*
  call void @llvm.lifetime.start(i64 48, i8* %236) #16
  %237 = bitcast %struct.LodePNGCompressSettings* %zlibsettings to i8*
  %238 = load %struct.LodePNGEncoderSettings*, %struct.LodePNGEncoderSettings** %settings.addr, align 8, !tbaa !2
  %zlibsettings274 = getelementptr inbounds %struct.LodePNGEncoderSettings, %struct.LodePNGEncoderSettings* %238, i32 0, i32 0
  %239 = bitcast %struct.LodePNGCompressSettings* %zlibsettings274 to i8*
  call void @_ZL14lodepng_memcpyPvPKvm(i8* %237, i8* %239, i64 48)
  %btype = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %zlibsettings, i32 0, i32 0
  store i32 1, i32* %btype, align 8, !tbaa !36
  %custom_zlib = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %zlibsettings, i32 0, i32 6
  %custom_zlib275 = bitcast {}** %custom_zlib to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  store i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* null, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %custom_zlib275, align 8, !tbaa !46
  %custom_deflate = getelementptr inbounds %struct.LodePNGCompressSettings, %struct.LodePNGCompressSettings* %zlibsettings, i32 0, i32 7
  %custom_deflate276 = bitcast {}** %custom_deflate to i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)**
  store i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)* null, i32 (i8**, i64*, i8*, i64, %struct.LodePNGCompressSettings*)** %custom_deflate276, align 8, !tbaa !41
  store i32 0, i32* %type272, align 4, !tbaa !8
  br label %for.cond277

for.cond277:                                      ; preds = %for.inc288, %if.then269
  %240 = load i32, i32* %type272, align 4, !tbaa !8
  %cmp278 = icmp ne i32 %240, 5
  br i1 %cmp278, label %for.body279, label %for.end290

for.body279:                                      ; preds = %for.cond277
  %241 = load i64, i64* %linebytes, align 8, !tbaa !6
  %call280 = call i8* @_ZL14lodepng_mallocm(i64 %241)
  %242 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom281 = zext i32 %242 to i64
  %arrayidx282 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt270, i64 0, i64 %idxprom281
  store i8* %call280, i8** %arrayidx282, align 8, !tbaa !2
  %243 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom283 = zext i32 %243 to i64
  %arrayidx284 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt270, i64 0, i64 %idxprom283
  %244 = load i8*, i8** %arrayidx284, align 8, !tbaa !2
  %tobool285 = icmp ne i8* %244, null
  br i1 %tobool285, label %if.end287, label %if.then286

if.then286:                                       ; preds = %for.body279
  store i32 83, i32* %error, align 4, !tbaa !8
  br label %if.end287

if.end287:                                        ; preds = %if.then286, %for.body279
  br label %for.inc288

for.inc288:                                       ; preds = %if.end287
  %245 = load i32, i32* %type272, align 4, !tbaa !8
  %inc289 = add i32 %245, 1
  store i32 %inc289, i32* %type272, align 4, !tbaa !8
  br label %for.cond277

for.end290:                                       ; preds = %for.cond277
  %246 = load i32, i32* %error, align 4, !tbaa !8
  %tobool291 = icmp ne i32 %246, 0
  br i1 %tobool291, label %if.end355, label %if.then292

if.then292:                                       ; preds = %for.end290
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond293

for.cond293:                                      ; preds = %for.inc352, %if.then292
  %247 = load i32, i32* %y, align 4, !tbaa !8
  %248 = load i32, i32* %h.addr, align 4, !tbaa !8
  %cmp294 = icmp ne i32 %247, %248
  br i1 %cmp294, label %for.body295, label %for.end354

for.body295:                                      ; preds = %for.cond293
  store i32 0, i32* %type272, align 4, !tbaa !8
  br label %for.cond296

for.cond296:                                      ; preds = %for.inc323, %for.body295
  %249 = load i32, i32* %type272, align 4, !tbaa !8
  %cmp297 = icmp ne i32 %249, 5
  br i1 %cmp297, label %for.body298, label %for.end325

for.body298:                                      ; preds = %for.cond296
  %250 = bitcast i32* %testsize to i8*
  call void @llvm.lifetime.start(i64 4, i8* %250) #16
  %251 = load i64, i64* %linebytes, align 8, !tbaa !6
  %conv299 = trunc i64 %251 to i32
  store i32 %conv299, i32* %testsize, align 4, !tbaa !8
  %252 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom300 = zext i32 %252 to i64
  %arrayidx301 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt270, i64 0, i64 %idxprom300
  %253 = load i8*, i8** %arrayidx301, align 8, !tbaa !2
  %254 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %255 = load i32, i32* %y, align 4, !tbaa !8
  %conv302 = zext i32 %255 to i64
  %256 = load i64, i64* %linebytes, align 8, !tbaa !6
  %mul303 = mul i64 %conv302, %256
  %arrayidx304 = getelementptr inbounds i8, i8* %254, i64 %mul303
  %257 = load i8*, i8** %prevline, align 8, !tbaa !2
  %258 = load i64, i64* %linebytes, align 8, !tbaa !6
  %259 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %260 = load i32, i32* %type272, align 4, !tbaa !8
  %conv305 = trunc i32 %260 to i8
  call void @_ZL14filterScanlinePhPKhS1_mmh(i8* %253, i8* %arrayidx304, i8* %257, i64 %258, i64 %259, i8 zeroext %conv305)
  %261 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom306 = zext i32 %261 to i64
  %arrayidx307 = getelementptr inbounds [5 x i64], [5 x i64]* %size, i64 0, i64 %idxprom306
  store i64 0, i64* %arrayidx307, align 8, !tbaa !6
  store i8* null, i8** %dummy, align 8, !tbaa !2
  %262 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom308 = zext i32 %262 to i64
  %arrayidx309 = getelementptr inbounds [5 x i64], [5 x i64]* %size, i64 0, i64 %idxprom308
  %263 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom310 = zext i32 %263 to i64
  %arrayidx311 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt270, i64 0, i64 %idxprom310
  %264 = load i8*, i8** %arrayidx311, align 8, !tbaa !2
  %265 = load i32, i32* %testsize, align 4, !tbaa !8
  %conv312 = zext i32 %265 to i64
  %call313 = call i32 @_ZL13zlib_compressPPhPmPKhmPK23LodePNGCompressSettings(i8** %dummy, i64* %arrayidx309, i8* %264, i64 %conv312, %struct.LodePNGCompressSettings* %zlibsettings)
  %266 = load i8*, i8** %dummy, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %266)
  %267 = load i32, i32* %type272, align 4, !tbaa !8
  %cmp314 = icmp eq i32 %267, 0
  br i1 %cmp314, label %if.then319, label %lor.lhs.false315

lor.lhs.false315:                                 ; preds = %for.body298
  %268 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom316 = zext i32 %268 to i64
  %arrayidx317 = getelementptr inbounds [5 x i64], [5 x i64]* %size, i64 0, i64 %idxprom316
  %269 = load i64, i64* %arrayidx317, align 8, !tbaa !6
  %270 = load i64, i64* %smallest271, align 8, !tbaa !6
  %cmp318 = icmp ult i64 %269, %270
  br i1 %cmp318, label %if.then319, label %if.end322

if.then319:                                       ; preds = %lor.lhs.false315, %for.body298
  %271 = load i32, i32* %type272, align 4, !tbaa !8
  store i32 %271, i32* %bestType273, align 4, !tbaa !8
  %272 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom320 = zext i32 %272 to i64
  %arrayidx321 = getelementptr inbounds [5 x i64], [5 x i64]* %size, i64 0, i64 %idxprom320
  %273 = load i64, i64* %arrayidx321, align 8, !tbaa !6
  store i64 %273, i64* %smallest271, align 8, !tbaa !6
  br label %if.end322

if.end322:                                        ; preds = %if.then319, %lor.lhs.false315
  %274 = bitcast i32* %testsize to i8*
  call void @llvm.lifetime.end(i64 4, i8* %274) #16
  br label %for.inc323

for.inc323:                                       ; preds = %if.end322
  %275 = load i32, i32* %type272, align 4, !tbaa !8
  %inc324 = add i32 %275, 1
  store i32 %inc324, i32* %type272, align 4, !tbaa !8
  br label %for.cond296

for.end325:                                       ; preds = %for.cond296
  %276 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %277 = load i32, i32* %y, align 4, !tbaa !8
  %conv326 = zext i32 %277 to i64
  %278 = load i64, i64* %linebytes, align 8, !tbaa !6
  %mul327 = mul i64 %conv326, %278
  %arrayidx328 = getelementptr inbounds i8, i8* %276, i64 %mul327
  store i8* %arrayidx328, i8** %prevline, align 8, !tbaa !2
  %279 = load i32, i32* %bestType273, align 4, !tbaa !8
  %conv329 = trunc i32 %279 to i8
  %280 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %281 = load i32, i32* %y, align 4, !tbaa !8
  %conv330 = zext i32 %281 to i64
  %282 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add331 = add i64 %282, 1
  %mul332 = mul i64 %conv330, %add331
  %arrayidx333 = getelementptr inbounds i8, i8* %280, i64 %mul332
  store i8 %conv329, i8* %arrayidx333, align 1, !tbaa !16
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond334

for.cond334:                                      ; preds = %for.inc349, %for.end325
  %283 = load i32, i32* %x, align 4, !tbaa !8
  %conv335 = zext i32 %283 to i64
  %284 = load i64, i64* %linebytes, align 8, !tbaa !6
  %cmp336 = icmp ne i64 %conv335, %284
  br i1 %cmp336, label %for.body337, label %for.end351

for.body337:                                      ; preds = %for.cond334
  %285 = load i32, i32* %bestType273, align 4, !tbaa !8
  %idxprom338 = zext i32 %285 to i64
  %arrayidx339 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt270, i64 0, i64 %idxprom338
  %286 = load i8*, i8** %arrayidx339, align 8, !tbaa !2
  %287 = load i32, i32* %x, align 4, !tbaa !8
  %idxprom340 = zext i32 %287 to i64
  %arrayidx341 = getelementptr inbounds i8, i8* %286, i64 %idxprom340
  %288 = load i8, i8* %arrayidx341, align 1, !tbaa !16
  %289 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %290 = load i32, i32* %y, align 4, !tbaa !8
  %conv342 = zext i32 %290 to i64
  %291 = load i64, i64* %linebytes, align 8, !tbaa !6
  %add343 = add i64 %291, 1
  %mul344 = mul i64 %conv342, %add343
  %add345 = add i64 %mul344, 1
  %292 = load i32, i32* %x, align 4, !tbaa !8
  %conv346 = zext i32 %292 to i64
  %add347 = add i64 %add345, %conv346
  %arrayidx348 = getelementptr inbounds i8, i8* %289, i64 %add347
  store i8 %288, i8* %arrayidx348, align 1, !tbaa !16
  br label %for.inc349

for.inc349:                                       ; preds = %for.body337
  %293 = load i32, i32* %x, align 4, !tbaa !8
  %inc350 = add i32 %293, 1
  store i32 %inc350, i32* %x, align 4, !tbaa !8
  br label %for.cond334

for.end351:                                       ; preds = %for.cond334
  br label %for.inc352

for.inc352:                                       ; preds = %for.end351
  %294 = load i32, i32* %y, align 4, !tbaa !8
  %inc353 = add i32 %294, 1
  store i32 %inc353, i32* %y, align 4, !tbaa !8
  br label %for.cond293

for.end354:                                       ; preds = %for.cond293
  br label %if.end355

if.end355:                                        ; preds = %for.end354, %for.end290
  store i32 0, i32* %type272, align 4, !tbaa !8
  br label %for.cond356

for.cond356:                                      ; preds = %for.inc361, %if.end355
  %295 = load i32, i32* %type272, align 4, !tbaa !8
  %cmp357 = icmp ne i32 %295, 5
  br i1 %cmp357, label %for.body358, label %for.end363

for.body358:                                      ; preds = %for.cond356
  %296 = load i32, i32* %type272, align 4, !tbaa !8
  %idxprom359 = zext i32 %296 to i64
  %arrayidx360 = getelementptr inbounds [5 x i8*], [5 x i8*]* %attempt270, i64 0, i64 %idxprom359
  %297 = load i8*, i8** %arrayidx360, align 8, !tbaa !2
  call void @_ZL12lodepng_freePv(i8* %297)
  br label %for.inc361

for.inc361:                                       ; preds = %for.body358
  %298 = load i32, i32* %type272, align 4, !tbaa !8
  %inc362 = add i32 %298, 1
  store i32 %inc362, i32* %type272, align 4, !tbaa !8
  br label %for.cond356

for.end363:                                       ; preds = %for.cond356
  %299 = bitcast %struct.LodePNGCompressSettings* %zlibsettings to i8*
  call void @llvm.lifetime.end(i64 48, i8* %299) #16
  %300 = bitcast i8** %dummy to i8*
  call void @llvm.lifetime.end(i64 8, i8* %300) #16
  %301 = bitcast i32* %bestType273 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %301) #16
  %302 = bitcast i32* %type272 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %302) #16
  %303 = bitcast i64* %smallest271 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %303) #16
  %304 = bitcast [5 x i8*]* %attempt270 to i8*
  call void @llvm.lifetime.end(i64 40, i8* %304) #16
  %305 = bitcast [5 x i64]* %size to i8*
  call void @llvm.lifetime.end(i64 40, i8* %305) #16
  br label %if.end365

if.else364:                                       ; preds = %if.else267
  store i32 88, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end365:                                        ; preds = %for.end363
  br label %if.end366

if.end366:                                        ; preds = %if.end365, %for.end266
  br label %if.end367

if.end367:                                        ; preds = %if.end366, %for.end242
  br label %if.end368

if.end368:                                        ; preds = %if.end367, %for.end133
  br label %if.end369

if.end369:                                        ; preds = %if.end368, %for.end
  %306 = load i32, i32* %error, align 4, !tbaa !8
  store i32 %306, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end369, %if.else364, %if.then4
  %307 = bitcast i32* %strategy to i8*
  call void @llvm.lifetime.end(i64 4, i8* %307) #16
  %308 = bitcast i32* %error to i8*
  call void @llvm.lifetime.end(i64 4, i8* %308) #16
  %309 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %309) #16
  %310 = bitcast i32* %x to i8*
  call void @llvm.lifetime.end(i64 4, i8* %310) #16
  %311 = bitcast i8** %prevline to i8*
  call void @llvm.lifetime.end(i64 8, i8* %311) #16
  %312 = bitcast i64* %bytewidth to i8*
  call void @llvm.lifetime.end(i64 8, i8* %312) #16
  %313 = bitcast i64* %linebytes to i8*
  call void @llvm.lifetime.end(i64 8, i8* %313) #16
  %314 = bitcast i32* %bpp to i8*
  call void @llvm.lifetime.end(i64 4, i8* %314) #16
  %315 = load i32, i32* %retval, align 4
  ret i32 %315
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15Adam7_interlacePhPKhjjj(i8* %out, i8* %in, i32 %w, i32 %h, i32 %bpp) #4 {
entry:
  %out.addr = alloca i8*, align 8
  %in.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %bpp.addr = alloca i32, align 4
  %passw = alloca [7 x i32], align 16
  %passh = alloca [7 x i32], align 16
  %filter_passstart = alloca [8 x i64], align 16
  %padded_passstart = alloca [8 x i64], align 16
  %passstart = alloca [8 x i64], align 16
  %i = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %b = alloca i32, align 4
  %bytewidth = alloca i64, align 8
  %pixelinstart = alloca i64, align 8
  %pixeloutstart = alloca i64, align 8
  %x59 = alloca i32, align 4
  %y60 = alloca i32, align 4
  %b61 = alloca i32, align 4
  %ilinebits = alloca i32, align 4
  %olinebits = alloca i32, align 4
  %obp = alloca i64, align 8
  %ibp = alloca i64, align 8
  %bit = alloca i8, align 1
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %in, i8** %in.addr, align 8, !tbaa !2
  store i32 %w, i32* %w.addr, align 4, !tbaa !8
  store i32 %h, i32* %h.addr, align 4, !tbaa !8
  store i32 %bpp, i32* %bpp.addr, align 4, !tbaa !8
  %0 = bitcast [7 x i32]* %passw to i8*
  call void @llvm.lifetime.start(i64 28, i8* %0) #16
  %1 = bitcast [7 x i32]* %passh to i8*
  call void @llvm.lifetime.start(i64 28, i8* %1) #16
  %2 = bitcast [8 x i64]* %filter_passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %2) #16
  %3 = bitcast [8 x i64]* %padded_passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %3) #16
  %4 = bitcast [8 x i64]* %passstart to i8*
  call void @llvm.lifetime.start(i64 64, i8* %4) #16
  %5 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #16
  %arraydecay = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i32 0, i32 0
  %arraydecay2 = getelementptr inbounds [8 x i64], [8 x i64]* %filter_passstart, i32 0, i32 0
  %arraydecay3 = getelementptr inbounds [8 x i64], [8 x i64]* %padded_passstart, i32 0, i32 0
  %arraydecay4 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i32 0, i32 0
  %6 = load i32, i32* %w.addr, align 4, !tbaa !8
  %7 = load i32, i32* %h.addr, align 4, !tbaa !8
  %8 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  call void @_ZL19Adam7_getpassvaluesPjS_PmS0_S0_jjj(i32* %arraydecay, i32* %arraydecay1, i64* %arraydecay2, i64* %arraydecay3, i64* %arraydecay4, i32 %6, i32 %7, i32 %8)
  %9 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %cmp = icmp uge i32 %9, 8
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc53, %if.then
  %10 = load i32, i32* %i, align 4, !tbaa !8
  %cmp5 = icmp ne i32 %10, 7
  br i1 %cmp5, label %for.body, label %for.end55

for.body:                                         ; preds = %for.cond
  %11 = bitcast i32* %x to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #16
  %12 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start(i64 4, i8* %12) #16
  %13 = bitcast i32* %b to i8*
  call void @llvm.lifetime.start(i64 4, i8* %13) #16
  %14 = bitcast i64* %bytewidth to i8*
  call void @llvm.lifetime.start(i64 8, i8* %14) #16
  %15 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %div = udiv i32 %15, 8
  %conv = zext i32 %div to i64
  store i64 %conv, i64* %bytewidth, align 8, !tbaa !6
  store i32 0, i32* %y, align 4, !tbaa !8
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc50, %for.body
  %16 = load i32, i32* %y, align 4, !tbaa !8
  %17 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom = zext i32 %17 to i64
  %arrayidx = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom
  %18 = load i32, i32* %arrayidx, align 4, !tbaa !8
  %cmp7 = icmp ult i32 %16, %18
  br i1 %cmp7, label %for.body8, label %for.end52

for.body8:                                        ; preds = %for.cond6
  store i32 0, i32* %x, align 4, !tbaa !8
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc47, %for.body8
  %19 = load i32, i32* %x, align 4, !tbaa !8
  %20 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom10 = zext i32 %20 to i64
  %arrayidx11 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom10
  %21 = load i32, i32* %arrayidx11, align 4, !tbaa !8
  %cmp12 = icmp ult i32 %19, %21
  br i1 %cmp12, label %for.body13, label %for.end49

for.body13:                                       ; preds = %for.cond9
  %22 = bitcast i64* %pixelinstart to i8*
  call void @llvm.lifetime.start(i64 8, i8* %22) #16
  %23 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom14 = zext i32 %23 to i64
  %arrayidx15 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IY, i64 0, i64 %idxprom14
  %24 = load i32, i32* %arrayidx15, align 4, !tbaa !8
  %25 = load i32, i32* %y, align 4, !tbaa !8
  %26 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom16 = zext i32 %26 to i64
  %arrayidx17 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DY, i64 0, i64 %idxprom16
  %27 = load i32, i32* %arrayidx17, align 4, !tbaa !8
  %mul = mul i32 %25, %27
  %add = add i32 %24, %mul
  %28 = load i32, i32* %w.addr, align 4, !tbaa !8
  %mul18 = mul i32 %add, %28
  %29 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom19 = zext i32 %29 to i64
  %arrayidx20 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IX, i64 0, i64 %idxprom19
  %30 = load i32, i32* %arrayidx20, align 4, !tbaa !8
  %add21 = add i32 %mul18, %30
  %31 = load i32, i32* %x, align 4, !tbaa !8
  %32 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom22 = zext i32 %32 to i64
  %arrayidx23 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DX, i64 0, i64 %idxprom22
  %33 = load i32, i32* %arrayidx23, align 4, !tbaa !8
  %mul24 = mul i32 %31, %33
  %add25 = add i32 %add21, %mul24
  %conv26 = zext i32 %add25 to i64
  %34 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %mul27 = mul i64 %conv26, %34
  store i64 %mul27, i64* %pixelinstart, align 8, !tbaa !6
  %35 = bitcast i64* %pixeloutstart to i8*
  call void @llvm.lifetime.start(i64 8, i8* %35) #16
  %36 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom28 = zext i32 %36 to i64
  %arrayidx29 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i64 0, i64 %idxprom28
  %37 = load i64, i64* %arrayidx29, align 8, !tbaa !6
  %38 = load i32, i32* %y, align 4, !tbaa !8
  %39 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom30 = zext i32 %39 to i64
  %arrayidx31 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom30
  %40 = load i32, i32* %arrayidx31, align 4, !tbaa !8
  %mul32 = mul i32 %38, %40
  %41 = load i32, i32* %x, align 4, !tbaa !8
  %add33 = add i32 %mul32, %41
  %conv34 = zext i32 %add33 to i64
  %42 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %mul35 = mul i64 %conv34, %42
  %add36 = add i64 %37, %mul35
  store i64 %add36, i64* %pixeloutstart, align 8, !tbaa !6
  store i32 0, i32* %b, align 4, !tbaa !8
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc, %for.body13
  %43 = load i32, i32* %b, align 4, !tbaa !8
  %conv38 = zext i32 %43 to i64
  %44 = load i64, i64* %bytewidth, align 8, !tbaa !6
  %cmp39 = icmp ult i64 %conv38, %44
  br i1 %cmp39, label %for.body40, label %for.end

for.body40:                                       ; preds = %for.cond37
  %45 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %46 = load i64, i64* %pixelinstart, align 8, !tbaa !6
  %47 = load i32, i32* %b, align 4, !tbaa !8
  %conv41 = zext i32 %47 to i64
  %add42 = add i64 %46, %conv41
  %arrayidx43 = getelementptr inbounds i8, i8* %45, i64 %add42
  %48 = load i8, i8* %arrayidx43, align 1, !tbaa !16
  %49 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %50 = load i64, i64* %pixeloutstart, align 8, !tbaa !6
  %51 = load i32, i32* %b, align 4, !tbaa !8
  %conv44 = zext i32 %51 to i64
  %add45 = add i64 %50, %conv44
  %arrayidx46 = getelementptr inbounds i8, i8* %49, i64 %add45
  store i8 %48, i8* %arrayidx46, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body40
  %52 = load i32, i32* %b, align 4, !tbaa !8
  %inc = add i32 %52, 1
  store i32 %inc, i32* %b, align 4, !tbaa !8
  br label %for.cond37

for.end:                                          ; preds = %for.cond37
  %53 = bitcast i64* %pixeloutstart to i8*
  call void @llvm.lifetime.end(i64 8, i8* %53) #16
  %54 = bitcast i64* %pixelinstart to i8*
  call void @llvm.lifetime.end(i64 8, i8* %54) #16
  br label %for.inc47

for.inc47:                                        ; preds = %for.end
  %55 = load i32, i32* %x, align 4, !tbaa !8
  %inc48 = add i32 %55, 1
  store i32 %inc48, i32* %x, align 4, !tbaa !8
  br label %for.cond9

for.end49:                                        ; preds = %for.cond9
  br label %for.inc50

for.inc50:                                        ; preds = %for.end49
  %56 = load i32, i32* %y, align 4, !tbaa !8
  %inc51 = add i32 %56, 1
  store i32 %inc51, i32* %y, align 4, !tbaa !8
  br label %for.cond6

for.end52:                                        ; preds = %for.cond6
  %57 = bitcast i64* %bytewidth to i8*
  call void @llvm.lifetime.end(i64 8, i8* %57) #16
  %58 = bitcast i32* %b to i8*
  call void @llvm.lifetime.end(i64 4, i8* %58) #16
  %59 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end(i64 4, i8* %59) #16
  %60 = bitcast i32* %x to i8*
  call void @llvm.lifetime.end(i64 4, i8* %60) #16
  br label %for.inc53

for.inc53:                                        ; preds = %for.end52
  %61 = load i32, i32* %i, align 4, !tbaa !8
  %inc54 = add i32 %61, 1
  store i32 %inc54, i32* %i, align 4, !tbaa !8
  br label %for.cond

for.end55:                                        ; preds = %for.cond
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !8
  br label %for.cond56

for.cond56:                                       ; preds = %for.inc112, %if.else
  %62 = load i32, i32* %i, align 4, !tbaa !8
  %cmp57 = icmp ne i32 %62, 7
  br i1 %cmp57, label %for.body58, label %for.end114

for.body58:                                       ; preds = %for.cond56
  %63 = bitcast i32* %x59 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %63) #16
  %64 = bitcast i32* %y60 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %64) #16
  %65 = bitcast i32* %b61 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %65) #16
  %66 = bitcast i32* %ilinebits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %66) #16
  %67 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %68 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom62 = zext i32 %68 to i64
  %arrayidx63 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom62
  %69 = load i32, i32* %arrayidx63, align 4, !tbaa !8
  %mul64 = mul i32 %67, %69
  store i32 %mul64, i32* %ilinebits, align 4, !tbaa !8
  %70 = bitcast i32* %olinebits to i8*
  call void @llvm.lifetime.start(i64 4, i8* %70) #16
  %71 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %72 = load i32, i32* %w.addr, align 4, !tbaa !8
  %mul65 = mul i32 %71, %72
  store i32 %mul65, i32* %olinebits, align 4, !tbaa !8
  %73 = bitcast i64* %obp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %73) #16
  %74 = bitcast i64* %ibp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %74) #16
  store i32 0, i32* %y60, align 4, !tbaa !8
  br label %for.cond66

for.cond66:                                       ; preds = %for.inc109, %for.body58
  %75 = load i32, i32* %y60, align 4, !tbaa !8
  %76 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom67 = zext i32 %76 to i64
  %arrayidx68 = getelementptr inbounds [7 x i32], [7 x i32]* %passh, i64 0, i64 %idxprom67
  %77 = load i32, i32* %arrayidx68, align 4, !tbaa !8
  %cmp69 = icmp ult i32 %75, %77
  br i1 %cmp69, label %for.body70, label %for.end111

for.body70:                                       ; preds = %for.cond66
  store i32 0, i32* %x59, align 4, !tbaa !8
  br label %for.cond71

for.cond71:                                       ; preds = %for.inc106, %for.body70
  %78 = load i32, i32* %x59, align 4, !tbaa !8
  %79 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom72 = zext i32 %79 to i64
  %arrayidx73 = getelementptr inbounds [7 x i32], [7 x i32]* %passw, i64 0, i64 %idxprom72
  %80 = load i32, i32* %arrayidx73, align 4, !tbaa !8
  %cmp74 = icmp ult i32 %78, %80
  br i1 %cmp74, label %for.body75, label %for.end108

for.body75:                                       ; preds = %for.cond71
  %81 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom76 = zext i32 %81 to i64
  %arrayidx77 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IY, i64 0, i64 %idxprom76
  %82 = load i32, i32* %arrayidx77, align 4, !tbaa !8
  %83 = load i32, i32* %y60, align 4, !tbaa !8
  %84 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom78 = zext i32 %84 to i64
  %arrayidx79 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DY, i64 0, i64 %idxprom78
  %85 = load i32, i32* %arrayidx79, align 4, !tbaa !8
  %mul80 = mul i32 %83, %85
  %add81 = add i32 %82, %mul80
  %86 = load i32, i32* %olinebits, align 4, !tbaa !8
  %mul82 = mul i32 %add81, %86
  %87 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom83 = zext i32 %87 to i64
  %arrayidx84 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_IX, i64 0, i64 %idxprom83
  %88 = load i32, i32* %arrayidx84, align 4, !tbaa !8
  %89 = load i32, i32* %x59, align 4, !tbaa !8
  %90 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom85 = zext i32 %90 to i64
  %arrayidx86 = getelementptr inbounds [7 x i32], [7 x i32]* @_ZL8ADAM7_DX, i64 0, i64 %idxprom85
  %91 = load i32, i32* %arrayidx86, align 4, !tbaa !8
  %mul87 = mul i32 %89, %91
  %add88 = add i32 %88, %mul87
  %92 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %mul89 = mul i32 %add88, %92
  %add90 = add i32 %mul82, %mul89
  %conv91 = zext i32 %add90 to i64
  store i64 %conv91, i64* %ibp, align 8, !tbaa !6
  %93 = load i32, i32* %i, align 4, !tbaa !8
  %idxprom92 = zext i32 %93 to i64
  %arrayidx93 = getelementptr inbounds [8 x i64], [8 x i64]* %passstart, i64 0, i64 %idxprom92
  %94 = load i64, i64* %arrayidx93, align 8, !tbaa !6
  %mul94 = mul i64 8, %94
  %95 = load i32, i32* %y60, align 4, !tbaa !8
  %96 = load i32, i32* %ilinebits, align 4, !tbaa !8
  %mul95 = mul i32 %95, %96
  %97 = load i32, i32* %x59, align 4, !tbaa !8
  %98 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %mul96 = mul i32 %97, %98
  %add97 = add i32 %mul95, %mul96
  %conv98 = zext i32 %add97 to i64
  %add99 = add i64 %mul94, %conv98
  store i64 %add99, i64* %obp, align 8, !tbaa !6
  store i32 0, i32* %b61, align 4, !tbaa !8
  br label %for.cond100

for.cond100:                                      ; preds = %for.inc103, %for.body75
  %99 = load i32, i32* %b61, align 4, !tbaa !8
  %100 = load i32, i32* %bpp.addr, align 4, !tbaa !8
  %cmp101 = icmp ult i32 %99, %100
  br i1 %cmp101, label %for.body102, label %for.end105

for.body102:                                      ; preds = %for.cond100
  call void @llvm.lifetime.start(i64 1, i8* %bit) #16
  %101 = load i8*, i8** %in.addr, align 8, !tbaa !2
  %call = call zeroext i8 @_ZL25readBitFromReversedStreamPmPKh(i64* %ibp, i8* %101)
  store i8 %call, i8* %bit, align 1, !tbaa !16
  %102 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %103 = load i8, i8* %bit, align 1, !tbaa !16
  call void @_ZL22setBitOfReversedStreamPmPhh(i64* %obp, i8* %102, i8 zeroext %103)
  call void @llvm.lifetime.end(i64 1, i8* %bit) #16
  br label %for.inc103

for.inc103:                                       ; preds = %for.body102
  %104 = load i32, i32* %b61, align 4, !tbaa !8
  %inc104 = add i32 %104, 1
  store i32 %inc104, i32* %b61, align 4, !tbaa !8
  br label %for.cond100

for.end105:                                       ; preds = %for.cond100
  br label %for.inc106

for.inc106:                                       ; preds = %for.end105
  %105 = load i32, i32* %x59, align 4, !tbaa !8
  %inc107 = add i32 %105, 1
  store i32 %inc107, i32* %x59, align 4, !tbaa !8
  br label %for.cond71

for.end108:                                       ; preds = %for.cond71
  br label %for.inc109

for.inc109:                                       ; preds = %for.end108
  %106 = load i32, i32* %y60, align 4, !tbaa !8
  %inc110 = add i32 %106, 1
  store i32 %inc110, i32* %y60, align 4, !tbaa !8
  br label %for.cond66

for.end111:                                       ; preds = %for.cond66
  %107 = bitcast i64* %ibp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %107) #16
  %108 = bitcast i64* %obp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %108) #16
  %109 = bitcast i32* %olinebits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %109) #16
  %110 = bitcast i32* %ilinebits to i8*
  call void @llvm.lifetime.end(i64 4, i8* %110) #16
  %111 = bitcast i32* %b61 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %111) #16
  %112 = bitcast i32* %y60 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %112) #16
  %113 = bitcast i32* %x59 to i8*
  call void @llvm.lifetime.end(i64 4, i8* %113) #16
  br label %for.inc112

for.inc112:                                       ; preds = %for.end111
  %114 = load i32, i32* %i, align 4, !tbaa !8
  %inc113 = add i32 %114, 1
  store i32 %inc113, i32* %i, align 4, !tbaa !8
  br label %for.cond56

for.end114:                                       ; preds = %for.cond56
  br label %if.end

if.end:                                           ; preds = %for.end114, %for.end55
  %115 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end(i64 4, i8* %115) #16
  %116 = bitcast [8 x i64]* %passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %116) #16
  %117 = bitcast [8 x i64]* %padded_passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %117) #16
  %118 = bitcast [8 x i64]* %filter_passstart to i8*
  call void @llvm.lifetime.end(i64 64, i8* %118) #16
  %119 = bitcast [7 x i32]* %passh to i8*
  call void @llvm.lifetime.end(i64 28, i8* %119) #16
  %120 = bitcast [7 x i32]* %passw to i8*
  call void @llvm.lifetime.end(i64 28, i8* %120) #16
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL14filterScanlinePhPKhS1_mmh(i8* %out, i8* %scanline, i8* %prevline, i64 %length, i64 %bytewidth, i8 zeroext %filterType) #4 {
entry:
  %out.addr = alloca i8*, align 8
  %scanline.addr = alloca i8*, align 8
  %prevline.addr = alloca i8*, align 8
  %length.addr = alloca i64, align 8
  %bytewidth.addr = alloca i64, align 8
  %filterType.addr = alloca i8, align 1
  %i = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i8* %out, i8** %out.addr, align 8, !tbaa !2
  store i8* %scanline, i8** %scanline.addr, align 8, !tbaa !2
  store i8* %prevline, i8** %prevline.addr, align 8, !tbaa !2
  store i64 %length, i64* %length.addr, align 8, !tbaa !6
  store i64 %bytewidth, i64* %bytewidth.addr, align 8, !tbaa !6
  store i8 %filterType, i8* %filterType.addr, align 1, !tbaa !16
  %0 = bitcast i64* %i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8, i8* %filterType.addr, align 1, !tbaa !16
  %conv = zext i8 %1 to i32
  switch i32 %conv, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb24
    i32 3, label %sw.bb46
    i32 4, label %sw.bb104
  ]

sw.bb:                                            ; preds = %entry
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb
  %2 = load i64, i64* %i, align 8, !tbaa !6
  %3 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %5 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %5
  %6 = load i8, i8* %arrayidx, align 1, !tbaa !16
  %7 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %8 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx1 = getelementptr inbounds i8, i8* %7, i64 %8
  store i8 %6, i8* %arrayidx1, align 1, !tbaa !16
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i64, i64* %i, align 8, !tbaa !6
  %inc = add i64 %9, 1
  store i64 %inc, i64* %i, align 8, !tbaa !6
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc8, %sw.bb2
  %10 = load i64, i64* %i, align 8, !tbaa !6
  %11 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp4 = icmp ne i64 %10, %11
  br i1 %cmp4, label %for.body5, label %for.end10

for.body5:                                        ; preds = %for.cond3
  %12 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %13 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx6 = getelementptr inbounds i8, i8* %12, i64 %13
  %14 = load i8, i8* %arrayidx6, align 1, !tbaa !16
  %15 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %16 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx7 = getelementptr inbounds i8, i8* %15, i64 %16
  store i8 %14, i8* %arrayidx7, align 1, !tbaa !16
  br label %for.inc8

for.inc8:                                         ; preds = %for.body5
  %17 = load i64, i64* %i, align 8, !tbaa !6
  %inc9 = add i64 %17, 1
  store i64 %inc9, i64* %i, align 8, !tbaa !6
  br label %for.cond3

for.end10:                                        ; preds = %for.cond3
  %18 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %18, i64* %i, align 8, !tbaa !6
  br label %for.cond11

for.cond11:                                       ; preds = %for.inc21, %for.end10
  %19 = load i64, i64* %i, align 8, !tbaa !6
  %20 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp12 = icmp ult i64 %19, %20
  br i1 %cmp12, label %for.body13, label %for.end23

for.body13:                                       ; preds = %for.cond11
  %21 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %22 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx14 = getelementptr inbounds i8, i8* %21, i64 %22
  %23 = load i8, i8* %arrayidx14, align 1, !tbaa !16
  %conv15 = zext i8 %23 to i32
  %24 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %25 = load i64, i64* %i, align 8, !tbaa !6
  %26 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub = sub i64 %25, %26
  %arrayidx16 = getelementptr inbounds i8, i8* %24, i64 %sub
  %27 = load i8, i8* %arrayidx16, align 1, !tbaa !16
  %conv17 = zext i8 %27 to i32
  %sub18 = sub nsw i32 %conv15, %conv17
  %conv19 = trunc i32 %sub18 to i8
  %28 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %29 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx20 = getelementptr inbounds i8, i8* %28, i64 %29
  store i8 %conv19, i8* %arrayidx20, align 1, !tbaa !16
  br label %for.inc21

for.inc21:                                        ; preds = %for.body13
  %30 = load i64, i64* %i, align 8, !tbaa !6
  %inc22 = add i64 %30, 1
  store i64 %inc22, i64* %i, align 8, !tbaa !6
  br label %for.cond11

for.end23:                                        ; preds = %for.cond11
  br label %sw.epilog

sw.bb24:                                          ; preds = %entry
  %31 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %tobool = icmp ne i8* %31, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %sw.bb24
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc35, %if.then
  %32 = load i64, i64* %i, align 8, !tbaa !6
  %33 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp26 = icmp ne i64 %32, %33
  br i1 %cmp26, label %for.body27, label %for.end37

for.body27:                                       ; preds = %for.cond25
  %34 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %35 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx28 = getelementptr inbounds i8, i8* %34, i64 %35
  %36 = load i8, i8* %arrayidx28, align 1, !tbaa !16
  %conv29 = zext i8 %36 to i32
  %37 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %38 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx30 = getelementptr inbounds i8, i8* %37, i64 %38
  %39 = load i8, i8* %arrayidx30, align 1, !tbaa !16
  %conv31 = zext i8 %39 to i32
  %sub32 = sub nsw i32 %conv29, %conv31
  %conv33 = trunc i32 %sub32 to i8
  %40 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %41 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx34 = getelementptr inbounds i8, i8* %40, i64 %41
  store i8 %conv33, i8* %arrayidx34, align 1, !tbaa !16
  br label %for.inc35

for.inc35:                                        ; preds = %for.body27
  %42 = load i64, i64* %i, align 8, !tbaa !6
  %inc36 = add i64 %42, 1
  store i64 %inc36, i64* %i, align 8, !tbaa !6
  br label %for.cond25

for.end37:                                        ; preds = %for.cond25
  br label %if.end

if.else:                                          ; preds = %sw.bb24
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc43, %if.else
  %43 = load i64, i64* %i, align 8, !tbaa !6
  %44 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp39 = icmp ne i64 %43, %44
  br i1 %cmp39, label %for.body40, label %for.end45

for.body40:                                       ; preds = %for.cond38
  %45 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %46 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx41 = getelementptr inbounds i8, i8* %45, i64 %46
  %47 = load i8, i8* %arrayidx41, align 1, !tbaa !16
  %48 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %49 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx42 = getelementptr inbounds i8, i8* %48, i64 %49
  store i8 %47, i8* %arrayidx42, align 1, !tbaa !16
  br label %for.inc43

for.inc43:                                        ; preds = %for.body40
  %50 = load i64, i64* %i, align 8, !tbaa !6
  %inc44 = add i64 %50, 1
  store i64 %inc44, i64* %i, align 8, !tbaa !6
  br label %for.cond38

for.end45:                                        ; preds = %for.cond38
  br label %if.end

if.end:                                           ; preds = %for.end45, %for.end37
  br label %sw.epilog

sw.bb46:                                          ; preds = %entry
  %51 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %tobool47 = icmp ne i8* %51, null
  br i1 %tobool47, label %if.then48, label %if.else79

if.then48:                                        ; preds = %sw.bb46
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond49

for.cond49:                                       ; preds = %for.inc59, %if.then48
  %52 = load i64, i64* %i, align 8, !tbaa !6
  %53 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp50 = icmp ne i64 %52, %53
  br i1 %cmp50, label %for.body51, label %for.end61

for.body51:                                       ; preds = %for.cond49
  %54 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %55 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx52 = getelementptr inbounds i8, i8* %54, i64 %55
  %56 = load i8, i8* %arrayidx52, align 1, !tbaa !16
  %conv53 = zext i8 %56 to i32
  %57 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %58 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx54 = getelementptr inbounds i8, i8* %57, i64 %58
  %59 = load i8, i8* %arrayidx54, align 1, !tbaa !16
  %conv55 = zext i8 %59 to i32
  %shr = ashr i32 %conv55, 1
  %sub56 = sub nsw i32 %conv53, %shr
  %conv57 = trunc i32 %sub56 to i8
  %60 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %61 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx58 = getelementptr inbounds i8, i8* %60, i64 %61
  store i8 %conv57, i8* %arrayidx58, align 1, !tbaa !16
  br label %for.inc59

for.inc59:                                        ; preds = %for.body51
  %62 = load i64, i64* %i, align 8, !tbaa !6
  %inc60 = add i64 %62, 1
  store i64 %inc60, i64* %i, align 8, !tbaa !6
  br label %for.cond49

for.end61:                                        ; preds = %for.cond49
  %63 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %63, i64* %i, align 8, !tbaa !6
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc76, %for.end61
  %64 = load i64, i64* %i, align 8, !tbaa !6
  %65 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp63 = icmp ult i64 %64, %65
  br i1 %cmp63, label %for.body64, label %for.end78

for.body64:                                       ; preds = %for.cond62
  %66 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %67 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx65 = getelementptr inbounds i8, i8* %66, i64 %67
  %68 = load i8, i8* %arrayidx65, align 1, !tbaa !16
  %conv66 = zext i8 %68 to i32
  %69 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %70 = load i64, i64* %i, align 8, !tbaa !6
  %71 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub67 = sub i64 %70, %71
  %arrayidx68 = getelementptr inbounds i8, i8* %69, i64 %sub67
  %72 = load i8, i8* %arrayidx68, align 1, !tbaa !16
  %conv69 = zext i8 %72 to i32
  %73 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %74 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx70 = getelementptr inbounds i8, i8* %73, i64 %74
  %75 = load i8, i8* %arrayidx70, align 1, !tbaa !16
  %conv71 = zext i8 %75 to i32
  %add = add nsw i32 %conv69, %conv71
  %shr72 = ashr i32 %add, 1
  %sub73 = sub nsw i32 %conv66, %shr72
  %conv74 = trunc i32 %sub73 to i8
  %76 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %77 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx75 = getelementptr inbounds i8, i8* %76, i64 %77
  store i8 %conv74, i8* %arrayidx75, align 1, !tbaa !16
  br label %for.inc76

for.inc76:                                        ; preds = %for.body64
  %78 = load i64, i64* %i, align 8, !tbaa !6
  %inc77 = add i64 %78, 1
  store i64 %inc77, i64* %i, align 8, !tbaa !6
  br label %for.cond62

for.end78:                                        ; preds = %for.cond62
  br label %if.end103

if.else79:                                        ; preds = %sw.bb46
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond80

for.cond80:                                       ; preds = %for.inc85, %if.else79
  %79 = load i64, i64* %i, align 8, !tbaa !6
  %80 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp81 = icmp ne i64 %79, %80
  br i1 %cmp81, label %for.body82, label %for.end87

for.body82:                                       ; preds = %for.cond80
  %81 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %82 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx83 = getelementptr inbounds i8, i8* %81, i64 %82
  %83 = load i8, i8* %arrayidx83, align 1, !tbaa !16
  %84 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %85 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx84 = getelementptr inbounds i8, i8* %84, i64 %85
  store i8 %83, i8* %arrayidx84, align 1, !tbaa !16
  br label %for.inc85

for.inc85:                                        ; preds = %for.body82
  %86 = load i64, i64* %i, align 8, !tbaa !6
  %inc86 = add i64 %86, 1
  store i64 %inc86, i64* %i, align 8, !tbaa !6
  br label %for.cond80

for.end87:                                        ; preds = %for.cond80
  %87 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %87, i64* %i, align 8, !tbaa !6
  br label %for.cond88

for.cond88:                                       ; preds = %for.inc100, %for.end87
  %88 = load i64, i64* %i, align 8, !tbaa !6
  %89 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp89 = icmp ult i64 %88, %89
  br i1 %cmp89, label %for.body90, label %for.end102

for.body90:                                       ; preds = %for.cond88
  %90 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %91 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx91 = getelementptr inbounds i8, i8* %90, i64 %91
  %92 = load i8, i8* %arrayidx91, align 1, !tbaa !16
  %conv92 = zext i8 %92 to i32
  %93 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %94 = load i64, i64* %i, align 8, !tbaa !6
  %95 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub93 = sub i64 %94, %95
  %arrayidx94 = getelementptr inbounds i8, i8* %93, i64 %sub93
  %96 = load i8, i8* %arrayidx94, align 1, !tbaa !16
  %conv95 = zext i8 %96 to i32
  %shr96 = ashr i32 %conv95, 1
  %sub97 = sub nsw i32 %conv92, %shr96
  %conv98 = trunc i32 %sub97 to i8
  %97 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %98 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx99 = getelementptr inbounds i8, i8* %97, i64 %98
  store i8 %conv98, i8* %arrayidx99, align 1, !tbaa !16
  br label %for.inc100

for.inc100:                                       ; preds = %for.body90
  %99 = load i64, i64* %i, align 8, !tbaa !6
  %inc101 = add i64 %99, 1
  store i64 %inc101, i64* %i, align 8, !tbaa !6
  br label %for.cond88

for.end102:                                       ; preds = %for.cond88
  br label %if.end103

if.end103:                                        ; preds = %for.end102, %for.end78
  br label %sw.epilog

sw.bb104:                                         ; preds = %entry
  %100 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %tobool105 = icmp ne i8* %100, null
  br i1 %tobool105, label %if.then106, label %if.else140

if.then106:                                       ; preds = %sw.bb104
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond107

for.cond107:                                      ; preds = %for.inc117, %if.then106
  %101 = load i64, i64* %i, align 8, !tbaa !6
  %102 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp108 = icmp ne i64 %101, %102
  br i1 %cmp108, label %for.body109, label %for.end119

for.body109:                                      ; preds = %for.cond107
  %103 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %104 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx110 = getelementptr inbounds i8, i8* %103, i64 %104
  %105 = load i8, i8* %arrayidx110, align 1, !tbaa !16
  %conv111 = zext i8 %105 to i32
  %106 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %107 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx112 = getelementptr inbounds i8, i8* %106, i64 %107
  %108 = load i8, i8* %arrayidx112, align 1, !tbaa !16
  %conv113 = zext i8 %108 to i32
  %sub114 = sub nsw i32 %conv111, %conv113
  %conv115 = trunc i32 %sub114 to i8
  %109 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %110 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx116 = getelementptr inbounds i8, i8* %109, i64 %110
  store i8 %conv115, i8* %arrayidx116, align 1, !tbaa !16
  br label %for.inc117

for.inc117:                                       ; preds = %for.body109
  %111 = load i64, i64* %i, align 8, !tbaa !6
  %inc118 = add i64 %111, 1
  store i64 %inc118, i64* %i, align 8, !tbaa !6
  br label %for.cond107

for.end119:                                       ; preds = %for.cond107
  %112 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %112, i64* %i, align 8, !tbaa !6
  br label %for.cond120

for.cond120:                                      ; preds = %for.inc137, %for.end119
  %113 = load i64, i64* %i, align 8, !tbaa !6
  %114 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp121 = icmp ult i64 %113, %114
  br i1 %cmp121, label %for.body122, label %for.end139

for.body122:                                      ; preds = %for.cond120
  %115 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %116 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx123 = getelementptr inbounds i8, i8* %115, i64 %116
  %117 = load i8, i8* %arrayidx123, align 1, !tbaa !16
  %conv124 = zext i8 %117 to i32
  %118 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %119 = load i64, i64* %i, align 8, !tbaa !6
  %120 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub125 = sub i64 %119, %120
  %arrayidx126 = getelementptr inbounds i8, i8* %118, i64 %sub125
  %121 = load i8, i8* %arrayidx126, align 1, !tbaa !16
  %conv127 = zext i8 %121 to i16
  %122 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %123 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx128 = getelementptr inbounds i8, i8* %122, i64 %123
  %124 = load i8, i8* %arrayidx128, align 1, !tbaa !16
  %conv129 = zext i8 %124 to i16
  %125 = load i8*, i8** %prevline.addr, align 8, !tbaa !2
  %126 = load i64, i64* %i, align 8, !tbaa !6
  %127 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub130 = sub i64 %126, %127
  %arrayidx131 = getelementptr inbounds i8, i8* %125, i64 %sub130
  %128 = load i8, i8* %arrayidx131, align 1, !tbaa !16
  %conv132 = zext i8 %128 to i16
  %call = call zeroext i8 @_ZL14paethPredictorsss(i16 signext %conv127, i16 signext %conv129, i16 signext %conv132)
  %conv133 = zext i8 %call to i32
  %sub134 = sub nsw i32 %conv124, %conv133
  %conv135 = trunc i32 %sub134 to i8
  %129 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %130 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx136 = getelementptr inbounds i8, i8* %129, i64 %130
  store i8 %conv135, i8* %arrayidx136, align 1, !tbaa !16
  br label %for.inc137

for.inc137:                                       ; preds = %for.body122
  %131 = load i64, i64* %i, align 8, !tbaa !6
  %inc138 = add i64 %131, 1
  store i64 %inc138, i64* %i, align 8, !tbaa !6
  br label %for.cond120

for.end139:                                       ; preds = %for.cond120
  br label %if.end163

if.else140:                                       ; preds = %sw.bb104
  store i64 0, i64* %i, align 8, !tbaa !6
  br label %for.cond141

for.cond141:                                      ; preds = %for.inc146, %if.else140
  %132 = load i64, i64* %i, align 8, !tbaa !6
  %133 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %cmp142 = icmp ne i64 %132, %133
  br i1 %cmp142, label %for.body143, label %for.end148

for.body143:                                      ; preds = %for.cond141
  %134 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %135 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx144 = getelementptr inbounds i8, i8* %134, i64 %135
  %136 = load i8, i8* %arrayidx144, align 1, !tbaa !16
  %137 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %138 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx145 = getelementptr inbounds i8, i8* %137, i64 %138
  store i8 %136, i8* %arrayidx145, align 1, !tbaa !16
  br label %for.inc146

for.inc146:                                       ; preds = %for.body143
  %139 = load i64, i64* %i, align 8, !tbaa !6
  %inc147 = add i64 %139, 1
  store i64 %inc147, i64* %i, align 8, !tbaa !6
  br label %for.cond141

for.end148:                                       ; preds = %for.cond141
  %140 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  store i64 %140, i64* %i, align 8, !tbaa !6
  br label %for.cond149

for.cond149:                                      ; preds = %for.inc160, %for.end148
  %141 = load i64, i64* %i, align 8, !tbaa !6
  %142 = load i64, i64* %length.addr, align 8, !tbaa !6
  %cmp150 = icmp ult i64 %141, %142
  br i1 %cmp150, label %for.body151, label %for.end162

for.body151:                                      ; preds = %for.cond149
  %143 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %144 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx152 = getelementptr inbounds i8, i8* %143, i64 %144
  %145 = load i8, i8* %arrayidx152, align 1, !tbaa !16
  %conv153 = zext i8 %145 to i32
  %146 = load i8*, i8** %scanline.addr, align 8, !tbaa !2
  %147 = load i64, i64* %i, align 8, !tbaa !6
  %148 = load i64, i64* %bytewidth.addr, align 8, !tbaa !6
  %sub154 = sub i64 %147, %148
  %arrayidx155 = getelementptr inbounds i8, i8* %146, i64 %sub154
  %149 = load i8, i8* %arrayidx155, align 1, !tbaa !16
  %conv156 = zext i8 %149 to i32
  %sub157 = sub nsw i32 %conv153, %conv156
  %conv158 = trunc i32 %sub157 to i8
  %150 = load i8*, i8** %out.addr, align 8, !tbaa !2
  %151 = load i64, i64* %i, align 8, !tbaa !6
  %arrayidx159 = getelementptr inbounds i8, i8* %150, i64 %151
  store i8 %conv158, i8* %arrayidx159, align 1, !tbaa !16
  br label %for.inc160

for.inc160:                                       ; preds = %for.body151
  %152 = load i64, i64* %i, align 8, !tbaa !6
  %inc161 = add i64 %152, 1
  store i64 %inc161, i64* %i, align 8, !tbaa !6
  br label %for.cond149

for.end162:                                       ; preds = %for.cond149
  br label %if.end163

if.end163:                                        ; preds = %for.end162, %for.end139
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

sw.epilog:                                        ; preds = %if.end163, %if.end103, %if.end, %for.end23, %for.end
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %sw.epilog, %sw.default
  %153 = bitcast i64* %i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %153) #16
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: ssp uwtable
define internal i64 @_ZL6ilog2im(i64 %i) #0 {
entry:
  %retval = alloca i64, align 8
  %i.addr = alloca i64, align 8
  %l = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  store i64 %i, i64* %i.addr, align 8, !tbaa !6
  %0 = bitcast i64* %l to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i64, i64* %i.addr, align 8, !tbaa !6
  %cmp = icmp eq i64 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %i.addr, align 8, !tbaa !6
  %call = call i64 @_ZL5ilog2m(i64 %2)
  store i64 %call, i64* %l, align 8, !tbaa !6
  %3 = load i64, i64* %i.addr, align 8, !tbaa !6
  %4 = load i64, i64* %l, align 8, !tbaa !6
  %mul = mul i64 %3, %4
  %5 = load i64, i64* %i.addr, align 8, !tbaa !6
  %6 = load i64, i64* %l, align 8, !tbaa !6
  %sh_prom = trunc i64 %6 to i32
  %shl = shl i32 1, %sh_prom
  %conv = zext i32 %shl to i64
  %sub = sub i64 %5, %conv
  %shl1 = shl i64 %sub, 1
  %add = add i64 %mul, %shl1
  store i64 %add, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %7 = bitcast i64* %l to i8*
  call void @llvm.lifetime.end(i64 8, i8* %7) #16
  %8 = load i64, i64* %retval, align 8
  ret i64 %8
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZL5ilog2m(i64 %i) #4 {
entry:
  %i.addr = alloca i64, align 8
  %result = alloca i64, align 8
  store i64 %i, i64* %i.addr, align 8, !tbaa !6
  %0 = bitcast i64* %result to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  store i64 0, i64* %result, align 8, !tbaa !6
  %1 = load i64, i64* %i.addr, align 8, !tbaa !6
  %cmp = icmp uge i64 %1, 65536
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %result, align 8, !tbaa !6
  %add = add i64 %2, 16
  store i64 %add, i64* %result, align 8, !tbaa !6
  %3 = load i64, i64* %i.addr, align 8, !tbaa !6
  %shr = lshr i64 %3, 16
  store i64 %shr, i64* %i.addr, align 8, !tbaa !6
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %i.addr, align 8, !tbaa !6
  %cmp1 = icmp uge i64 %4, 256
  br i1 %cmp1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %5 = load i64, i64* %result, align 8, !tbaa !6
  %add3 = add i64 %5, 8
  store i64 %add3, i64* %result, align 8, !tbaa !6
  %6 = load i64, i64* %i.addr, align 8, !tbaa !6
  %shr4 = lshr i64 %6, 8
  store i64 %shr4, i64* %i.addr, align 8, !tbaa !6
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %7 = load i64, i64* %i.addr, align 8, !tbaa !6
  %cmp6 = icmp uge i64 %7, 16
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.end5
  %8 = load i64, i64* %result, align 8, !tbaa !6
  %add8 = add i64 %8, 4
  store i64 %add8, i64* %result, align 8, !tbaa !6
  %9 = load i64, i64* %i.addr, align 8, !tbaa !6
  %shr9 = lshr i64 %9, 4
  store i64 %shr9, i64* %i.addr, align 8, !tbaa !6
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.end5
  %10 = load i64, i64* %i.addr, align 8, !tbaa !6
  %cmp11 = icmp uge i64 %10, 4
  br i1 %cmp11, label %if.then12, label %if.end15

if.then12:                                        ; preds = %if.end10
  %11 = load i64, i64* %result, align 8, !tbaa !6
  %add13 = add i64 %11, 2
  store i64 %add13, i64* %result, align 8, !tbaa !6
  %12 = load i64, i64* %i.addr, align 8, !tbaa !6
  %shr14 = lshr i64 %12, 2
  store i64 %shr14, i64* %i.addr, align 8, !tbaa !6
  br label %if.end15

if.end15:                                         ; preds = %if.then12, %if.end10
  %13 = load i64, i64* %i.addr, align 8, !tbaa !6
  %cmp16 = icmp uge i64 %13, 2
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end15
  %14 = load i64, i64* %result, align 8, !tbaa !6
  %add18 = add i64 %14, 1
  store i64 %add18, i64* %result, align 8, !tbaa !6
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %if.end15
  %15 = load i64, i64* %result, align 8, !tbaa !6
  %16 = bitcast i64* %result to i8*
  call void @llvm.lifetime.end(i64 8, i8* %16) #16
  ret i64 %15
}

; Function Attrs: inlinehint ssp uwtable
define linkonce_odr void @_ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev(%"class.std::__1::vector"* %this) unnamed_addr #8 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  call void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev(%"class.std::__1::__vector_base"* %0)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev(%"class.std::__1::__vector_base"* %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  %coerce = alloca %"struct.std::__1::nullptr_t", align 8
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 0
  %0 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %call = call i8* @_ZNSt3__115__get_nullptr_tEv()
  %coerce.dive = getelementptr inbounds %"struct.std::__1::nullptr_t", %"struct.std::__1::nullptr_t"* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %call2 = call i8* @_ZNKSt3__19nullptr_tcvPT_IhEEv(%"struct.std::__1::nullptr_t"* %coerce)
  %cmp = icmp ne i8* %0, %call2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE5clearEv(%"class.std::__1::__vector_base"* %this1) #16
  %call3 = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %this1) #16
  %__begin_4 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 0
  %1 = load i8*, i8** %__begin_4, align 8, !tbaa !170
  %call5 = call i64 @_ZNKSt3__113__vector_baseIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::__vector_base"* %this1) #16
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE10deallocateERS2_Phm(%"class.std::__1::allocator"* dereferenceable(1) %call3, i8* %1, i64 %call5) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__115__get_nullptr_tEv() #7 {
entry:
  %retval = alloca %"struct.std::__1::nullptr_t", align 8
  call void @_ZNSt3__19nullptr_tC1EMNS0_5__natEi(%"struct.std::__1::nullptr_t"* %retval, i64 -1)
  %coerce.dive = getelementptr inbounds %"struct.std::__1::nullptr_t", %"struct.std::__1::nullptr_t"* %retval, i32 0, i32 0
  %0 = load i8*, i8** %coerce.dive, align 8
  ret i8* %0
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNKSt3__19nullptr_tcvPT_IhEEv(%"struct.std::__1::nullptr_t"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::nullptr_t"*, align 8
  store %"struct.std::__1::nullptr_t"* %this, %"struct.std::__1::nullptr_t"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::nullptr_t"*, %"struct.std::__1::nullptr_t"** %this.addr, align 8
  ret i8* null
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE5clearEv(%"class.std::__1::__vector_base"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 0
  %0 = load i8*, i8** %__begin_, align 8, !tbaa !170
  call void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE17__destruct_at_endEPh(%"class.std::__1::__vector_base"* %this1, i8* %0) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE10deallocateERS2_Phm(%"class.std::__1::allocator"* dereferenceable(1) %__a, i8* %__p, i64 %__n) #5 align 2 {
entry:
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  %__p.addr = alloca i8*, align 8
  %__n.addr = alloca i64, align 8
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %0 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a.addr, align 8
  %1 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  %2 = load i64, i64* %__n.addr, align 8, !tbaa !6
  call void @_ZNSt3__19allocatorIhE10deallocateEPhm(%"class.std::__1::allocator"* %0, i8* %1, i64 %2) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  %__end_cap_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 2
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__117__compressed_pairIPhNS_9allocatorIhEEE6secondEv(%"class.std::__1::__compressed_pair"* %__end_cap_) #16
  ret %"class.std::__1::allocator"* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNKSt3__113__vector_baseIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::__vector_base"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  %call = call dereferenceable(8) i8** @_ZNKSt3__113__vector_baseIhNS_9allocatorIhEEE9__end_capEv(%"class.std::__1::__vector_base"* %this1) #16
  %0 = load i8*, i8** %call, align 8, !tbaa !2
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 0
  %1 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19nullptr_tC1EMNS0_5__natEi(%"struct.std::__1::nullptr_t"* %this, i64) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::nullptr_t"*, align 8
  %.addr = alloca i64, align 8
  store %"struct.std::__1::nullptr_t"* %this, %"struct.std::__1::nullptr_t"** %this.addr, align 8, !tbaa !2
  store i64 %0, i64* %.addr, align 8, !tbaa !16
  %this1 = load %"struct.std::__1::nullptr_t"*, %"struct.std::__1::nullptr_t"** %this.addr, align 8
  %1 = load i64, i64* %.addr, align 8, !tbaa !16
  call void @_ZNSt3__19nullptr_tC2EMNS0_5__natEi(%"struct.std::__1::nullptr_t"* %this1, i64 %1)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19nullptr_tC2EMNS0_5__natEi(%"struct.std::__1::nullptr_t"* %this, i64) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::nullptr_t"*, align 8
  %.addr = alloca i64, align 8
  store %"struct.std::__1::nullptr_t"* %this, %"struct.std::__1::nullptr_t"** %this.addr, align 8, !tbaa !2
  store i64 %0, i64* %.addr, align 8, !tbaa !16
  %this1 = load %"struct.std::__1::nullptr_t"*, %"struct.std::__1::nullptr_t"** %this.addr, align 8
  %__lx = getelementptr inbounds %"struct.std::__1::nullptr_t", %"struct.std::__1::nullptr_t"* %this1, i32 0, i32 0
  store i8* null, i8** %__lx, align 8, !tbaa !195
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE17__destruct_at_endEPh(%"class.std::__1::__vector_base"* %this, i8* %__new_last) #5 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  %__new_last.addr = alloca i8*, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  store i8* %__new_last, i8** %__new_last.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %invoke.cont, %entry
  %0 = load i8*, i8** %__new_last.addr, align 8, !tbaa !2
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 1
  %1 = load i8*, i8** %__end_, align 8, !tbaa !173
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %this1) #16
  %__end_2 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 1
  %2 = load i8*, i8** %__end_2, align 8, !tbaa !173
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 -1
  store i8* %incdec.ptr, i8** %__end_2, align 8, !tbaa !173
  %call3 = call i8* @_ZNSt3__116__to_raw_pointerIhEEPT_S2_(i8* %incdec.ptr) #16
  invoke void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE7destroyIhEEvRS2_PT_(%"class.std::__1::allocator"* dereferenceable(1) %call, i8* %call3)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %while.body
  br label %while.cond

lpad:                                             ; preds = %while.body
  %3 = landingpad { i8*, i32 }
          filter [0 x i8*] zeroinitializer
  %4 = extractvalue { i8*, i32 } %3, 0
  store i8* %4, i8** %exn.slot, align 8
  %5 = extractvalue { i8*, i32 } %3, 1
  store i32 %5, i32* %ehselector.slot, align 4
  br label %filter.dispatch

filter.dispatch:                                  ; preds = %lpad
  %exn = load i8*, i8** %exn.slot, align 8
  call void @__cxa_call_unexpected(i8* %exn) #20
  unreachable

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE7destroyIhEEvRS2_PT_(%"class.std::__1::allocator"* dereferenceable(1) %__a, i8* %__p) #7 align 2 {
entry:
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  %__p.addr = alloca i8*, align 8
  %agg.tmp = alloca %"struct.std::__1::integral_constant", align 1
  %ref.tmp = alloca %"struct.std::__1::__has_destroy", align 1
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  %0 = bitcast %"struct.std::__1::__has_destroy"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 1, i8* %0) #16
  %1 = bitcast %"struct.std::__1::__has_destroy"* %ref.tmp to %"struct.std::__1::integral_constant"*
  %2 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a.addr, align 8
  %3 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE9__destroyIhEEvNS_17integral_constantIbLb0EEERS2_PT_(%"class.std::__1::allocator"* dereferenceable(1) %2, i8* %3)
  %4 = bitcast %"struct.std::__1::__has_destroy"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 1, i8* %4) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__116__to_raw_pointerIhEEPT_S2_(i8* %__p) #5 {
entry:
  %__p.addr = alloca i8*, align 8
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  ret i8* %0
}

declare void @__cxa_call_unexpected(i8*)

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE9__destroyIhEEvNS_17integral_constantIbLb0EEERS2_PT_(%"class.std::__1::allocator"* dereferenceable(1), i8* %__p) #5 align 2 {
entry:
  %1 = alloca %"struct.std::__1::integral_constant", align 1
  %.addr = alloca %"class.std::__1::allocator"*, align 8
  %__p.addr = alloca i8*, align 8
  store %"class.std::__1::allocator"* %0, %"class.std::__1::allocator"** %.addr, align 8, !tbaa !16
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIhE10deallocateEPhm(%"class.std::__1::allocator"* %this, i8* %__p, i64) #5 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %this.addr = alloca %"class.std::__1::allocator"*, align 8
  %__p.addr = alloca i8*, align 8
  %.addr = alloca i64, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store %"class.std::__1::allocator"* %this, %"class.std::__1::allocator"** %this.addr, align 8, !tbaa !2
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  store i64 %0, i64* %.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %this.addr, align 8
  %1 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  invoke void @_ZNSt3__119__libcpp_deallocateEPv(i8* %1)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  ret void

lpad:                                             ; preds = %entry
  %2 = landingpad { i8*, i32 }
          filter [0 x i8*] zeroinitializer
  %3 = extractvalue { i8*, i32 } %2, 0
  store i8* %3, i8** %exn.slot, align 8
  %4 = extractvalue { i8*, i32 } %2, 1
  store i32 %4, i32* %ehselector.slot, align 4
  br label %filter.dispatch

filter.dispatch:                                  ; preds = %lpad
  %exn = load i8*, i8** %exn.slot, align 8
  call void @__cxa_call_unexpected(i8* %exn) #20
  unreachable
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__119__libcpp_deallocateEPv(i8* %__ptr) #5 {
entry:
  %__ptr.addr = alloca i8*, align 8
  store i8* %__ptr, i8** %__ptr.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %__ptr.addr, align 8, !tbaa !2
  call void @_ZdlPv(i8* %0) #21
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #11

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__117__compressed_pairIPhNS_9allocatorIhEEE6secondEv(%"class.std::__1::__compressed_pair"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair"*, align 8
  store %"class.std::__1::__compressed_pair"* %this, %"class.std::__1::__compressed_pair"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair"*, %"class.std::__1::__compressed_pair"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EE6secondEv(%"class.std::__1::__libcpp_compressed_pair_imp"* %0) #16
  ret %"class.std::__1::allocator"* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EE6secondEv(%"class.std::__1::__libcpp_compressed_pair_imp"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp"* %this, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp"*, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__libcpp_compressed_pair_imp"* %this1 to %"class.std::__1::allocator"*
  ret %"class.std::__1::allocator"* %0
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNKSt3__113__vector_baseIhNS_9allocatorIhEEE9__end_capEv(%"class.std::__1::__vector_base"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  %__end_cap_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 2
  %call = call dereferenceable(8) i8** @_ZNKSt3__117__compressed_pairIPhNS_9allocatorIhEEE5firstEv(%"class.std::__1::__compressed_pair"* %__end_cap_) #16
  ret i8** %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNKSt3__117__compressed_pairIPhNS_9allocatorIhEEE5firstEv(%"class.std::__1::__compressed_pair"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair"*, align 8
  store %"class.std::__1::__compressed_pair"* %this, %"class.std::__1::__compressed_pair"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair"*, %"class.std::__1::__compressed_pair"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp"*
  %call = call dereferenceable(8) i8** @_ZNKSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp"* %0) #16
  ret i8** %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNKSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp"* %this, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp"*, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8
  %__first_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp", %"class.std::__1::__libcpp_compressed_pair_imp"* %this1, i32 0, i32 0
  ret i8** %__first_
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally hidden i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv(%"class.std::__1::basic_string"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::basic_string"*, align 8
  store %"class.std::__1::basic_string"* %this, %"class.std::__1::basic_string"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %this.addr, align 8
  %call = call i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv(%"class.std::__1::basic_string"* %this1) #16
  %call2 = call i8* @_ZNSt3__116__to_raw_pointerIKcEEPT_S3_(i8* %call) #16
  ret i8* %call2
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__116__to_raw_pointerIKcEEPT_S3_(i8* %__p) #5 {
entry:
  %__p.addr = alloca i8*, align 8
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  ret i8* %0
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally hidden i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE13__get_pointerEv(%"class.std::__1::basic_string"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::basic_string"*, align 8
  store %"class.std::__1::basic_string"* %this, %"class.std::__1::basic_string"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %this.addr, align 8
  %call = call zeroext i1 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv(%"class.std::__1::basic_string"* %this1) #16
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call2 = call i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv(%"class.std::__1::basic_string"* %this1) #16
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call3 = call i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv(%"class.std::__1::basic_string"* %this1) #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call2, %cond.true ], [ %call3, %cond.false ]
  ret i8* %cond
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally hidden zeroext i1 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__is_longEv(%"class.std::__1::basic_string"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::basic_string"*, align 8
  store %"class.std::__1::basic_string"* %this, %"class.std::__1::basic_string"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %this.addr, align 8
  %__r_ = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %this1, i32 0, i32 0
  %call = call dereferenceable(24) %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* @_ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv(%"class.std::__1::__compressed_pair.0"* %__r_) #16
  %0 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* %call, i32 0, i32 0
  %__s = bitcast %union.anon* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %1 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %__s, i32 0, i32 0
  %__size_ = bitcast %union.anon.4* %1 to i8*
  %2 = load i8, i8* %__size_, align 8, !tbaa !16
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 1
  %tobool = icmp ne i32 %and, 0
  ret i1 %tobool
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally hidden i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE18__get_long_pointerEv(%"class.std::__1::basic_string"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::basic_string"*, align 8
  store %"class.std::__1::basic_string"* %this, %"class.std::__1::basic_string"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %this.addr, align 8
  %__r_ = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %this1, i32 0, i32 0
  %call = call dereferenceable(24) %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* @_ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv(%"class.std::__1::__compressed_pair.0"* %__r_) #16
  %0 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* %call, i32 0, i32 0
  %__l = bitcast %union.anon* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long"*
  %__data_ = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long"* %__l, i32 0, i32 2
  %1 = load i8*, i8** %__data_, align 8, !tbaa !197
  ret i8* %1
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally hidden i8* @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE19__get_short_pointerEv(%"class.std::__1::basic_string"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::basic_string"*, align 8
  store %"class.std::__1::basic_string"* %this, %"class.std::__1::basic_string"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %this.addr, align 8
  %__r_ = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %this1, i32 0, i32 0
  %call = call dereferenceable(24) %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* @_ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv(%"class.std::__1::__compressed_pair.0"* %__r_) #16
  %0 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* %call, i32 0, i32 0
  %__s = bitcast %union.anon* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %__data_ = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %__s, i32 0, i32 1
  %arrayidx = getelementptr inbounds [23 x i8], [23 x i8]* %__data_, i64 0, i64 0
  %call2 = call i8* @_ZNSt3__114pointer_traitsIPKcE10pointer_toERS1_(i8* dereferenceable(1) %arrayidx) #16
  ret i8* %call2
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* @_ZNKSt3__117__compressed_pairINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_E5firstEv(%"class.std::__1::__compressed_pair.0"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair.0"*, align 8
  store %"class.std::__1::__compressed_pair.0"* %this, %"class.std::__1::__compressed_pair.0"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair.0"*, %"class.std::__1::__compressed_pair.0"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair.0"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp.1"*
  %call = call dereferenceable(24) %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* @_ZNKSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp.1"* %0) #16
  ret %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* @_ZNKSt3__128__libcpp_compressed_pair_impINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5__repES5_Lj2EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp.1"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp.1"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp.1"* %this, %"class.std::__1::__libcpp_compressed_pair_imp.1"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp.1"*, %"class.std::__1::__libcpp_compressed_pair_imp.1"** %this.addr, align 8
  %__first_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp.1", %"class.std::__1::__libcpp_compressed_pair_imp.1"* %this1, i32 0, i32 0
  ret %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep"* %__first_
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__114pointer_traitsIPKcE10pointer_toERS1_(i8* dereferenceable(1) %__r) #5 align 2 {
entry:
  %__r.addr = alloca i8*, align 8
  store i8* %__r, i8** %__r.addr, align 8, !tbaa !16
  %0 = load i8*, i8** %__r.addr, align 8
  %call = call i8* @_ZNSt3__19addressofIKcEEPT_RS2_(i8* dereferenceable(1) %0) #16
  ret i8* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__19addressofIKcEEPT_RS2_(i8* dereferenceable(1) %__x) #5 {
entry:
  %__x.addr = alloca i8*, align 8
  store i8* %__x, i8** %__x.addr, align 8, !tbaa !16
  %0 = load i8*, i8** %__x.addr, align 8
  ret i8* %0
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %this, i64 %__n) #0 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__n.addr = alloca i64, align 8
  %__a = alloca %"class.std::__1::allocator"*, align 8
  %__v = alloca %"struct.std::__1::__split_buffer", align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call = call dereferenceable(8) i8** @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE9__end_capEv(%"class.std::__1::__vector_base"* %0) #16
  %1 = load i8*, i8** %call, align 8, !tbaa !2
  %2 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %2, i32 0, i32 1
  %3 = load i8*, i8** %__end_, align 8, !tbaa !173
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %4 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %cmp = icmp uge i64 %sub.ptr.sub, %4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %5 = load i64, i64* %__n.addr, align 8, !tbaa !6
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endEm(%"class.std::__1::vector"* %this1, i64 %5)
  br label %if.end

if.else:                                          ; preds = %entry
  %6 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  %7 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call2 = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %7) #16
  store %"class.std::__1::allocator"* %call2, %"class.std::__1::allocator"** %__a, align 8, !tbaa !16
  %8 = bitcast %"struct.std::__1::__split_buffer"* %__v to i8*
  call void @llvm.lifetime.start(i64 40, i8* %8) #16
  %call3 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  %9 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %add = add i64 %call3, %9
  %call4 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE11__recommendEm(%"class.std::__1::vector"* %this1, i64 %add)
  %call5 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  %10 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a, align 8
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC1EmmS3_(%"struct.std::__1::__split_buffer"* %__v, i64 %call4, i64 %call5, %"class.std::__1::allocator"* dereferenceable(1) %10)
  %11 = load i64, i64* %__n.addr, align 8, !tbaa !6
  invoke void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEm(%"struct.std::__1::__split_buffer"* %__v, i64 %11)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %if.else
  invoke void @_ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE(%"class.std::__1::vector"* %this1, %"struct.std::__1::__split_buffer"* dereferenceable(40) %__v)
          to label %invoke.cont6 unwind label %lpad

invoke.cont6:                                     ; preds = %invoke.cont
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED1Ev(%"struct.std::__1::__split_buffer"* %__v)
  %12 = bitcast %"struct.std::__1::__split_buffer"* %__v to i8*
  call void @llvm.lifetime.end(i64 40, i8* %12) #16
  %13 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #16
  br label %if.end

lpad:                                             ; preds = %invoke.cont, %if.else
  %14 = landingpad { i8*, i32 }
          cleanup
  %15 = extractvalue { i8*, i32 } %14, 0
  store i8* %15, i8** %exn.slot, align 8
  %16 = extractvalue { i8*, i32 } %14, 1
  store i32 %16, i32* %ehselector.slot, align 4
  invoke void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED1Ev(%"struct.std::__1::__split_buffer"* %__v)
          to label %invoke.cont7 unwind label %terminate.lpad

invoke.cont7:                                     ; preds = %lpad
  %17 = bitcast %"struct.std::__1::__split_buffer"* %__v to i8*
  call void @llvm.lifetime.end(i64 40, i8* %17) #16
  %18 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %18) #16
  br label %eh.resume

if.end:                                           ; preds = %invoke.cont6, %if.then
  ret void

eh.resume:                                        ; preds = %invoke.cont7
  %exn = load i8*, i8** %exn.slot, align 8
  %sel = load i32, i32* %ehselector.slot, align 4
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val8 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val8

terminate.lpad:                                   ; preds = %lpad
  %19 = landingpad { i8*, i32 }
          catch i8* null
  %20 = extractvalue { i8*, i32 } %19, 0
  call void @__clang_call_terminate(i8* %20) #19
  unreachable
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE17__destruct_at_endEPh(%"class.std::__1::vector"* %this, i8* %__new_last) #5 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__new_last.addr = alloca i8*, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  %__old_size = alloca i64, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i8* %__new_last, i8** %__new_last.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = load i8*, i8** %__new_last.addr, align 8, !tbaa !2
  invoke void @_ZNSt3__16vectorIhNS_9allocatorIhEEE27__invalidate_iterators_pastEPh(%"class.std::__1::vector"* %this1, i8* %0)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  %1 = bitcast i64* %__old_size to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %call = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  store i64 %call, i64* %__old_size, align 8, !tbaa !6
  %2 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %3 = load i8*, i8** %__new_last.addr, align 8, !tbaa !2
  call void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE17__destruct_at_endEPh(%"class.std::__1::__vector_base"* %2, i8* %3) #16
  %4 = load i64, i64* %__old_size, align 8, !tbaa !6
  invoke void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_shrinkEm(%"class.std::__1::vector"* %this1, i64 %4)
          to label %invoke.cont3 unwind label %lpad2

invoke.cont3:                                     ; preds = %invoke.cont
  %5 = bitcast i64* %__old_size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %5) #16
  ret void

lpad:                                             ; preds = %entry
  %6 = landingpad { i8*, i32 }
          filter [0 x i8*] zeroinitializer
  %7 = extractvalue { i8*, i32 } %6, 0
  store i8* %7, i8** %exn.slot, align 8
  %8 = extractvalue { i8*, i32 } %6, 1
  store i32 %8, i32* %ehselector.slot, align 4
  br label %filter.dispatch

lpad2:                                            ; preds = %invoke.cont
  %9 = landingpad { i8*, i32 }
          cleanup
          filter [0 x i8*] zeroinitializer
  %10 = extractvalue { i8*, i32 } %9, 0
  store i8* %10, i8** %exn.slot, align 8
  %11 = extractvalue { i8*, i32 } %9, 1
  store i32 %11, i32* %ehselector.slot, align 4
  %12 = bitcast i64* %__old_size to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #16
  br label %filter.dispatch

filter.dispatch:                                  ; preds = %lpad2, %lpad
  %exn = load i8*, i8** %exn.slot, align 8
  call void @__cxa_call_unexpected(i8* %exn) #20
  unreachable
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE9__end_capEv(%"class.std::__1::__vector_base"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  %__end_cap_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 2
  %call = call dereferenceable(8) i8** @_ZNSt3__117__compressed_pairIPhNS_9allocatorIhEEE5firstEv(%"class.std::__1::__compressed_pair"* %__end_cap_) #16
  ret i8** %call
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endEm(%"class.std::__1::vector"* %this, i64 %__n) #0 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__n.addr = alloca i64, align 8
  %__a = alloca %"class.std::__1::allocator"*, align 8
  %__annotator = alloca %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator", align 1
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %1) #16
  store %"class.std::__1::allocator"* %call, %"class.std::__1::allocator"** %__a, align 8, !tbaa !16
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %2 = bitcast %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator to i8*
  call void @llvm.lifetime.start(i64 1, i8* %2) #16
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC1ERKS3_m(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator, %"class.std::__1::vector"* dereferenceable(24) %this1, i64 1)
  %3 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a, align 8
  %4 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %4, i32 0, i32 1
  %5 = load i8*, i8** %__end_, align 8, !tbaa !173
  %call2 = call i8* @_ZNSt3__116__to_raw_pointerIhEEPT_S2_(i8* %5) #16
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE9constructIhEEvRS2_PT_(%"class.std::__1::allocator"* dereferenceable(1) %3, i8* %call2)
  %6 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_3 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %6, i32 0, i32 1
  %7 = load i8*, i8** %__end_3, align 8, !tbaa !173
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %__end_3, align 8, !tbaa !173
  %8 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %dec = add i64 %8, -1
  store i64 %dec, i64* %__n.addr, align 8, !tbaa !6
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator)
  %9 = bitcast %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator to i8*
  call void @llvm.lifetime.end(i64 1, i8* %9) #16
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %10 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %cmp = icmp ugt i64 %10, 0
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %11 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #16
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE11__recommendEm(%"class.std::__1::vector"* %this, i64 %__new_size) #7 align 2 {
entry:
  %retval = alloca i64, align 8
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__new_size.addr = alloca i64, align 8
  %__ms = alloca i64, align 8
  %__cap = alloca i64, align 8
  %cleanup.dest.slot = alloca i32
  %ref.tmp = alloca i64, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i64 %__new_size, i64* %__new_size.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast i64* %__ms to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %call = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv(%"class.std::__1::vector"* %this1) #16
  store i64 %call, i64* %__ms, align 8, !tbaa !6
  %1 = load i64, i64* %__new_size.addr, align 8, !tbaa !6
  %2 = load i64, i64* %__ms, align 8, !tbaa !6
  %cmp = icmp ugt i64 %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %3) #20
  unreachable

if.end:                                           ; preds = %entry
  %4 = bitcast i64* %__cap to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4) #16
  %call2 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::vector"* %this1) #16
  store i64 %call2, i64* %__cap, align 8, !tbaa !6
  %5 = load i64, i64* %__cap, align 8, !tbaa !6
  %6 = load i64, i64* %__ms, align 8, !tbaa !6
  %div = udiv i64 %6, 2
  %cmp3 = icmp uge i64 %5, %div
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %7 = load i64, i64* %__ms, align 8, !tbaa !6
  store i64 %7, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %8 = bitcast i64* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %8) #16
  %9 = load i64, i64* %__cap, align 8, !tbaa !6
  %mul = mul i64 2, %9
  store i64 %mul, i64* %ref.tmp, align 8, !tbaa !6
  %call6 = call dereferenceable(8) i64* @_ZNSt3__13maxImEERKT_S3_S3_(i64* dereferenceable(8) %ref.tmp, i64* dereferenceable(8) %__new_size.addr)
  %10 = load i64, i64* %call6, align 8, !tbaa !6
  store i64 %10, i64* %retval, align 8
  %11 = bitcast i64* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #16
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %if.then4
  %12 = bitcast i64* %__cap to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #16
  %13 = bitcast i64* %__ms to i8*
  call void @llvm.lifetime.end(i64 8, i8* %13) #16
  %14 = load i64, i64* %retval, align 8
  ret i64 %14
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC1EmmS3_(%"struct.std::__1::__split_buffer"* %this, i64 %__cap, i64 %__start, %"class.std::__1::allocator"* dereferenceable(1) %__a) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  %__cap.addr = alloca i64, align 8
  %__start.addr = alloca i64, align 8
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  store i64 %__cap, i64* %__cap.addr, align 8, !tbaa !6
  store i64 %__start, i64* %__start.addr, align 8, !tbaa !6
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %0 = load i64, i64* %__cap.addr, align 8, !tbaa !6
  %1 = load i64, i64* %__start.addr, align 8, !tbaa !6
  %2 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a.addr, align 8
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_(%"struct.std::__1::__split_buffer"* %this1, i64 %0, i64 %1, %"class.std::__1::allocator"* dereferenceable(1) %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEm(%"struct.std::__1::__split_buffer"* %this, i64 %__n) #4 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  %__n.addr = alloca i64, align 8
  %__a = alloca %"class.std::__1::allocator"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE7__allocEv(%"struct.std::__1::__split_buffer"* %this1) #16
  store %"class.std::__1::allocator"* %call, %"class.std::__1::allocator"** %__a, align 8, !tbaa !16
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a, align 8
  %__end_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 2
  %2 = load i8*, i8** %__end_, align 8, !tbaa !199
  %call2 = call i8* @_ZNSt3__116__to_raw_pointerIhEEPT_S2_(i8* %2) #16
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE9constructIhEEvRS2_PT_(%"class.std::__1::allocator"* dereferenceable(1) %1, i8* %call2)
  %__end_3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 2
  %3 = load i8*, i8** %__end_3, align 8, !tbaa !199
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1
  store i8* %incdec.ptr, i8** %__end_3, align 8, !tbaa !199
  %4 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %dec = add i64 %4, -1
  store i64 %dec, i64* %__n.addr, align 8, !tbaa !6
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %5 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %cmp = icmp ugt i64 %5, 0
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %6 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %6) #16
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE(%"class.std::__1::vector"* %this, %"struct.std::__1::__split_buffer"* dereferenceable(40) %__v) #0 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__v.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store %"struct.std::__1::__split_buffer"* %__v, %"struct.std::__1::__split_buffer"** %__v.addr, align 8, !tbaa !16
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  call void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_deleteEv(%"class.std::__1::vector"* %this1)
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %0) #16
  %1 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %1, i32 0, i32 0
  %2 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %3 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %3, i32 0, i32 1
  %4 = load i8*, i8** %__end_, align 8, !tbaa !173
  %5 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__begin_2 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %5, i32 0, i32 1
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE20__construct_backwardIhEENS_9enable_ifIXaaoosr7is_sameIS2_NS1_IT_EEEE5valuentsr15__has_constructIS2_PS6_S6_EE5valuesr31is_trivially_move_constructibleIS6_EE5valueEvE4typeERS2_S8_S8_RS8_(%"class.std::__1::allocator"* dereferenceable(1) %call, i8* %2, i8* %4, i8** dereferenceable(8) %__begin_2)
  %6 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_3 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %6, i32 0, i32 0
  %7 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__begin_4 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %7, i32 0, i32 1
  call void @_ZNSt3__14swapIPhEEvRT_S3_(i8** dereferenceable(8) %__begin_3, i8** dereferenceable(8) %__begin_4)
  %8 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_5 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %8, i32 0, i32 1
  %9 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__end_6 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %9, i32 0, i32 2
  call void @_ZNSt3__14swapIPhEEvRT_S3_(i8** dereferenceable(8) %__end_5, i8** dereferenceable(8) %__end_6)
  %10 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call7 = call dereferenceable(8) i8** @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE9__end_capEv(%"class.std::__1::__vector_base"* %10) #16
  %11 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %call8 = call dereferenceable(8) i8** @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE9__end_capEv(%"struct.std::__1::__split_buffer"* %11) #16
  call void @_ZNSt3__14swapIPhEEvRT_S3_(i8** dereferenceable(8) %call7, i8** dereferenceable(8) %call8)
  %12 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__begin_9 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %12, i32 0, i32 1
  %13 = load i8*, i8** %__begin_9, align 8, !tbaa !202
  %14 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__first_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %14, i32 0, i32 0
  store i8* %13, i8** %__first_, align 8, !tbaa !203
  %call10 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  call void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEm(%"class.std::__1::vector"* %this1, i64 %call10)
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE26__invalidate_all_iteratorsEv(%"class.std::__1::vector"* %this1)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED1Ev(%"struct.std::__1::__split_buffer"* %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev(%"struct.std::__1::__split_buffer"* %this1)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNSt3__117__compressed_pairIPhNS_9allocatorIhEEE5firstEv(%"class.std::__1::__compressed_pair"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair"*, align 8
  store %"class.std::__1::__compressed_pair"* %this, %"class.std::__1::__compressed_pair"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair"*, %"class.std::__1::__compressed_pair"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp"*
  %call = call dereferenceable(8) i8** @_ZNSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp"* %0) #16
  ret i8** %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp"* %this, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp"*, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8
  %__first_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp", %"class.std::__1::__libcpp_compressed_pair_imp"* %this1, i32 0, i32 0
  ret i8** %__first_
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC1ERKS3_m(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %this, %"class.std::__1::vector"* dereferenceable(24), i64) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"*, align 8
  %.addr = alloca %"class.std::__1::vector"*, align 8
  %.addr1 = alloca i64, align 8
  store %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %this, %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"** %this.addr, align 8, !tbaa !2
  store %"class.std::__1::vector"* %0, %"class.std::__1::vector"** %.addr, align 8, !tbaa !16
  store i64 %1, i64* %.addr1, align 8, !tbaa !6
  %this2 = load %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"*, %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"** %this.addr, align 8
  %2 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %.addr, align 8
  %3 = load i64, i64* %.addr1, align 8, !tbaa !6
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_m(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %this2, %"class.std::__1::vector"* dereferenceable(24) %2, i64 %3)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE9constructIhEEvRS2_PT_(%"class.std::__1::allocator"* dereferenceable(1) %__a, i8* %__p) #5 align 2 {
entry:
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  %__p.addr = alloca i8*, align 8
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  store i8 0, i8* %0, align 1, !tbaa !16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"*, align 8
  store %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %this, %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"*, %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"** %this.addr, align 8
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_m(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %this, %"class.std::__1::vector"* dereferenceable(24), i64) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"*, align 8
  %.addr = alloca %"class.std::__1::vector"*, align 8
  %.addr1 = alloca i64, align 8
  store %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %this, %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"** %this.addr, align 8, !tbaa !2
  store %"class.std::__1::vector"* %0, %"class.std::__1::vector"** %.addr, align 8, !tbaa !16
  store i64 %1, i64* %.addr1, align 8, !tbaa !6
  %this2 = load %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"*, %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"** %this.addr, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv(%"class.std::__1::vector"* %this) #4 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %ref.tmp = alloca i64, align 8
  %ref.tmp3 = alloca i64, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast i64* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNKSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %1) #16
  %call2 = call i64 @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE8max_sizeERKS2_(%"class.std::__1::allocator"* dereferenceable(1) %call) #16
  store i64 %call2, i64* %ref.tmp, align 8, !tbaa !6
  %2 = bitcast i64* %ref.tmp3 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %2) #16
  %call4 = call i64 @_ZNSt3__114numeric_limitsIlE3maxEv() #16
  store i64 %call4, i64* %ref.tmp3, align 8, !tbaa !6
  %call5 = invoke dereferenceable(8) i64* @_ZNSt3__13minImEERKT_S3_S3_(i64* dereferenceable(8) %ref.tmp, i64* dereferenceable(8) %ref.tmp3)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  %3 = load i64, i64* %call5, align 8, !tbaa !6
  %4 = bitcast i64* %ref.tmp3 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %4) #16
  %5 = bitcast i64* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %5) #16
  ret i64 %3

lpad:                                             ; preds = %entry
  %6 = landingpad { i8*, i32 }
          cleanup
          filter [0 x i8*] zeroinitializer
  %7 = extractvalue { i8*, i32 } %6, 0
  store i8* %7, i8** %exn.slot, align 8
  %8 = extractvalue { i8*, i32 } %6, 1
  store i32 %8, i32* %ehselector.slot, align 4
  %9 = bitcast i64* %ref.tmp3 to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #16
  %10 = bitcast i64* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #16
  br label %filter.dispatch

filter.dispatch:                                  ; preds = %lpad
  %exn = load i8*, i8** %exn.slot, align 8
  call void @__cxa_call_unexpected(i8* %exn) #20
  unreachable
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) #12

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::vector"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call = call i64 @_ZNKSt3__113__vector_baseIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::__vector_base"* %0) #16
  ret i64 %call
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden dereferenceable(8) i64* @_ZNSt3__13maxImEERKT_S3_S3_(i64* dereferenceable(8) %__a, i64* dereferenceable(8) %__b) #7 {
entry:
  %__a.addr = alloca i64*, align 8
  %__b.addr = alloca i64*, align 8
  %agg.tmp = alloca %"struct.std::__1::__less", align 1
  store i64* %__a, i64** %__a.addr, align 8, !tbaa !16
  store i64* %__b, i64** %__b.addr, align 8, !tbaa !16
  %0 = load i64*, i64** %__a.addr, align 8
  %1 = load i64*, i64** %__b.addr, align 8
  %call = call dereferenceable(8) i64* @_ZNSt3__13maxImNS_6__lessImmEEEERKT_S5_S5_T0_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1)
  ret i64* %call
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden dereferenceable(8) i64* @_ZNSt3__13minImEERKT_S3_S3_(i64* dereferenceable(8) %__a, i64* dereferenceable(8) %__b) #7 {
entry:
  %__a.addr = alloca i64*, align 8
  %__b.addr = alloca i64*, align 8
  %agg.tmp = alloca %"struct.std::__1::__less", align 1
  store i64* %__a, i64** %__a.addr, align 8, !tbaa !16
  store i64* %__b, i64** %__b.addr, align 8, !tbaa !16
  %0 = load i64*, i64** %__a.addr, align 8
  %1 = load i64*, i64** %__b.addr, align 8
  %call = call dereferenceable(8) i64* @_ZNSt3__13minImNS_6__lessImmEEEERKT_S5_S5_T0_(i64* dereferenceable(8) %0, i64* dereferenceable(8) %1)
  ret i64* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE8max_sizeERKS2_(%"class.std::__1::allocator"* dereferenceable(1) %__a) #5 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  %agg.tmp = alloca %"struct.std::__1::integral_constant.8", align 1
  %ref.tmp = alloca %"struct.std::__1::__has_max_size", align 1
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  %0 = bitcast %"struct.std::__1::__has_max_size"* %ref.tmp to i8*
  call void @llvm.lifetime.start(i64 1, i8* %0) #16
  %1 = bitcast %"struct.std::__1::__has_max_size"* %ref.tmp to %"struct.std::__1::integral_constant.8"*
  %2 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a.addr, align 8
  %call = invoke i64 @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_(%"class.std::__1::allocator"* dereferenceable(1) %2)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  %3 = bitcast %"struct.std::__1::__has_max_size"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 1, i8* %3) #16
  ret i64 %call

lpad:                                             ; preds = %entry
  %4 = landingpad { i8*, i32 }
          cleanup
          filter [0 x i8*] zeroinitializer
  %5 = extractvalue { i8*, i32 } %4, 0
  store i8* %5, i8** %exn.slot, align 8
  %6 = extractvalue { i8*, i32 } %4, 1
  store i32 %6, i32* %ehselector.slot, align 4
  %7 = bitcast %"struct.std::__1::__has_max_size"* %ref.tmp to i8*
  call void @llvm.lifetime.end(i64 1, i8* %7) #16
  br label %filter.dispatch

filter.dispatch:                                  ; preds = %lpad
  %exn = load i8*, i8** %exn.slot, align 8
  call void @__cxa_call_unexpected(i8* %exn) #20
  unreachable
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNKSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  %__end_cap_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 2
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNKSt3__117__compressed_pairIPhNS_9allocatorIhEEE6secondEv(%"class.std::__1::__compressed_pair"* %__end_cap_) #16
  ret %"class.std::__1::allocator"* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNSt3__114numeric_limitsIlE3maxEv() #5 align 2 {
entry:
  %call = call i64 @_ZNSt3__123__libcpp_numeric_limitsIlLb1EE3maxEv() #16
  ret i64 %call
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden dereferenceable(8) i64* @_ZNSt3__13minImNS_6__lessImmEEEERKT_S5_S5_T0_(i64* dereferenceable(8) %__a, i64* dereferenceable(8) %__b) #7 {
entry:
  %__comp = alloca %"struct.std::__1::__less", align 1
  %__a.addr = alloca i64*, align 8
  %__b.addr = alloca i64*, align 8
  store i64* %__a, i64** %__a.addr, align 8, !tbaa !16
  store i64* %__b, i64** %__b.addr, align 8, !tbaa !16
  %0 = load i64*, i64** %__b.addr, align 8
  %1 = load i64*, i64** %__a.addr, align 8
  %call = call zeroext i1 @_ZNKSt3__16__lessImmEclERKmS3_(%"struct.std::__1::__less"* %__comp, i64* dereferenceable(8) %0, i64* dereferenceable(8) %1)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64*, i64** %__b.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64*, i64** %__a.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond-lvalue = phi i64* [ %2, %cond.true ], [ %3, %cond.false ]
  ret i64* %cond-lvalue
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNKSt3__16__lessImmEclERKmS3_(%"struct.std::__1::__less"* %this, i64* dereferenceable(8) %__x, i64* dereferenceable(8) %__y) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__less"*, align 8
  %__x.addr = alloca i64*, align 8
  %__y.addr = alloca i64*, align 8
  store %"struct.std::__1::__less"* %this, %"struct.std::__1::__less"** %this.addr, align 8, !tbaa !2
  store i64* %__x, i64** %__x.addr, align 8, !tbaa !16
  store i64* %__y, i64** %__y.addr, align 8, !tbaa !16
  %this1 = load %"struct.std::__1::__less"*, %"struct.std::__1::__less"** %this.addr, align 8
  %0 = load i64*, i64** %__x.addr, align 8
  %1 = load i64, i64* %0, align 8, !tbaa !6
  %2 = load i64*, i64** %__y.addr, align 8
  %3 = load i64, i64* %2, align 8, !tbaa !6
  %cmp = icmp ult i64 %1, %3
  ret i1 %cmp
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE10__max_sizeENS_17integral_constantIbLb1EEERKS2_(%"class.std::__1::allocator"* dereferenceable(1) %__a) #5 align 2 {
entry:
  %0 = alloca %"struct.std::__1::integral_constant.8", align 1
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  %1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a.addr, align 8
  %call = call i64 @_ZNKSt3__19allocatorIhE8max_sizeEv(%"class.std::__1::allocator"* %1) #16
  ret i64 %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNKSt3__19allocatorIhE8max_sizeEv(%"class.std::__1::allocator"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::allocator"*, align 8
  store %"class.std::__1::allocator"* %this, %"class.std::__1::allocator"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %this.addr, align 8
  ret i64 -1
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNKSt3__117__compressed_pairIPhNS_9allocatorIhEEE6secondEv(%"class.std::__1::__compressed_pair"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair"*, align 8
  store %"class.std::__1::__compressed_pair"* %this, %"class.std::__1::__compressed_pair"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair"*, %"class.std::__1::__compressed_pair"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNKSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EE6secondEv(%"class.std::__1::__libcpp_compressed_pair_imp"* %0) #16
  ret %"class.std::__1::allocator"* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNKSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EE6secondEv(%"class.std::__1::__libcpp_compressed_pair_imp"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp"* %this, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp"*, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__libcpp_compressed_pair_imp"* %this1 to %"class.std::__1::allocator"*
  ret %"class.std::__1::allocator"* %0
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNSt3__123__libcpp_numeric_limitsIlLb1EE3maxEv() #5 align 2 {
entry:
  ret i64 9223372036854775807
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i64* @_ZNSt3__13maxImNS_6__lessImmEEEERKT_S5_S5_T0_(i64* dereferenceable(8) %__a, i64* dereferenceable(8) %__b) #5 {
entry:
  %__comp = alloca %"struct.std::__1::__less", align 1
  %__a.addr = alloca i64*, align 8
  %__b.addr = alloca i64*, align 8
  store i64* %__a, i64** %__a.addr, align 8, !tbaa !16
  store i64* %__b, i64** %__b.addr, align 8, !tbaa !16
  %0 = load i64*, i64** %__a.addr, align 8
  %1 = load i64*, i64** %__b.addr, align 8
  %call = call zeroext i1 @_ZNKSt3__16__lessImmEclERKmS3_(%"struct.std::__1::__less"* %__comp, i64* dereferenceable(8) %0, i64* dereferenceable(8) %1)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load i64*, i64** %__b.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load i64*, i64** %__a.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond-lvalue = phi i64* [ %2, %cond.true ], [ %3, %cond.false ]
  ret i64* %cond-lvalue
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC2EmmS3_(%"struct.std::__1::__split_buffer"* %this, i64 %__cap, i64 %__start, %"class.std::__1::allocator"* dereferenceable(1) %__a) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  %__cap.addr = alloca i64, align 8
  %__start.addr = alloca i64, align 8
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  %coerce = alloca %"struct.std::__1::nullptr_t", align 8
  %coerce6 = alloca %"struct.std::__1::nullptr_t", align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  store i64 %__cap, i64* %__cap.addr, align 8, !tbaa !6
  store i64 %__start, i64* %__start.addr, align 8, !tbaa !6
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %0 = bitcast %"struct.std::__1::__split_buffer"* %this1 to %"class.std::__1::__split_buffer_common"*
  %__end_cap_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 3
  %call = call i8* @_ZNSt3__115__get_nullptr_tEv()
  %coerce.dive = getelementptr inbounds %"struct.std::__1::nullptr_t", %"struct.std::__1::nullptr_t"* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %call2 = call i8* @_ZNKSt3__19nullptr_tcvPT_IhEEv(%"struct.std::__1::nullptr_t"* %coerce)
  %1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a.addr, align 8
  call void @_ZNSt3__117__compressed_pairIPhRNS_9allocatorIhEEEC1ES1_S4_(%"class.std::__1::__compressed_pair.6"* %__end_cap_, i8* %call2, %"class.std::__1::allocator"* dereferenceable(1) %1)
  %2 = load i64, i64* %__cap.addr, align 8, !tbaa !6
  %cmp = icmp ne i64 %2, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call3 = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE7__allocEv(%"struct.std::__1::__split_buffer"* %this1) #16
  %3 = load i64, i64* %__cap.addr, align 8, !tbaa !6
  %call4 = call i8* @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE8allocateERS2_m(%"class.std::__1::allocator"* dereferenceable(1) %call3, i64 %3)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call5 = call i8* @_ZNSt3__115__get_nullptr_tEv()
  %coerce.dive7 = getelementptr inbounds %"struct.std::__1::nullptr_t", %"struct.std::__1::nullptr_t"* %coerce6, i32 0, i32 0
  store i8* %call5, i8** %coerce.dive7, align 8
  %call8 = call i8* @_ZNKSt3__19nullptr_tcvPT_IhEEv(%"struct.std::__1::nullptr_t"* %coerce6)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call4, %cond.true ], [ %call8, %cond.false ]
  %__first_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 0
  store i8* %cond, i8** %__first_, align 8, !tbaa !203
  %__first_9 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 0
  %4 = load i8*, i8** %__first_9, align 8, !tbaa !203
  %5 = load i64, i64* %__start.addr, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5
  %__end_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 2
  store i8* %add.ptr, i8** %__end_, align 8, !tbaa !199
  %__begin_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 1
  store i8* %add.ptr, i8** %__begin_, align 8, !tbaa !202
  %__first_10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 0
  %6 = load i8*, i8** %__first_10, align 8, !tbaa !203
  %7 = load i64, i64* %__cap.addr, align 8, !tbaa !6
  %add.ptr11 = getelementptr inbounds i8, i8* %6, i64 %7
  %call12 = call dereferenceable(8) i8** @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE9__end_capEv(%"struct.std::__1::__split_buffer"* %this1) #16
  store i8* %add.ptr11, i8** %call12, align 8, !tbaa !2
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__117__compressed_pairIPhRNS_9allocatorIhEEEC1ES1_S4_(%"class.std::__1::__compressed_pair.6"* %this, i8* %__t1, %"class.std::__1::allocator"* dereferenceable(1) %__t2) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair.6"*, align 8
  %__t1.addr = alloca i8*, align 8
  %__t2.addr = alloca %"class.std::__1::allocator"*, align 8
  store %"class.std::__1::__compressed_pair.6"* %this, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8, !tbaa !2
  store i8* %__t1, i8** %__t1.addr, align 8, !tbaa !2
  store %"class.std::__1::allocator"* %__t2, %"class.std::__1::allocator"** %__t2.addr, align 8, !tbaa !16
  %this1 = load %"class.std::__1::__compressed_pair.6"*, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8
  %0 = load i8*, i8** %__t1.addr, align 8, !tbaa !2
  %1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__t2.addr, align 8
  call void @_ZNSt3__117__compressed_pairIPhRNS_9allocatorIhEEEC2ES1_S4_(%"class.std::__1::__compressed_pair.6"* %this1, i8* %0, %"class.std::__1::allocator"* dereferenceable(1) %1)
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE8allocateERS2_m(%"class.std::__1::allocator"* dereferenceable(1) %__a, i64 %__n) #7 align 2 {
entry:
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  %__n.addr = alloca i64, align 8
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %0 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a.addr, align 8
  %1 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %call = call i8* @_ZNSt3__19allocatorIhE8allocateEmPKv(%"class.std::__1::allocator"* %0, i64 %1, i8* null)
  ret i8* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE7__allocEv(%"struct.std::__1::__split_buffer"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %__end_cap_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 3
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__117__compressed_pairIPhRNS_9allocatorIhEEE6secondEv(%"class.std::__1::__compressed_pair.6"* %__end_cap_) #16
  ret %"class.std::__1::allocator"* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE9__end_capEv(%"struct.std::__1::__split_buffer"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %__end_cap_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 3
  %call = call dereferenceable(8) i8** @_ZNSt3__117__compressed_pairIPhRNS_9allocatorIhEEE5firstEv(%"class.std::__1::__compressed_pair.6"* %__end_cap_) #16
  ret i8** %call
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__117__compressed_pairIPhRNS_9allocatorIhEEEC2ES1_S4_(%"class.std::__1::__compressed_pair.6"* %this, i8* %__t1, %"class.std::__1::allocator"* dereferenceable(1) %__t2) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair.6"*, align 8
  %__t1.addr = alloca i8*, align 8
  %__t2.addr = alloca %"class.std::__1::allocator"*, align 8
  store %"class.std::__1::__compressed_pair.6"* %this, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8, !tbaa !2
  store i8* %__t1, i8** %__t1.addr, align 8, !tbaa !2
  store %"class.std::__1::allocator"* %__t2, %"class.std::__1::allocator"** %__t2.addr, align 8, !tbaa !16
  %this1 = load %"class.std::__1::__compressed_pair.6"*, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair.6"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp.7"*
  %call = call dereferenceable(8) i8** @_ZNSt3__17forwardIPhEERT_RNS_16remove_referenceIS2_E4typeE(i8** dereferenceable(8) %__t1.addr) #16
  %1 = load i8*, i8** %call, align 8, !tbaa !2
  %2 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__t2.addr, align 8
  %call2 = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__17forwardIRNS_9allocatorIhEEEERT_RNS_16remove_referenceIS4_E4typeE(%"class.std::__1::allocator"* dereferenceable(1) %2) #16
  call void @_ZNSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EEC2ES1_S4_(%"class.std::__1::__libcpp_compressed_pair_imp.7"* %0, i8* %1, %"class.std::__1::allocator"* dereferenceable(1) %call2)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNSt3__17forwardIPhEERT_RNS_16remove_referenceIS2_E4typeE(i8** dereferenceable(8) %__t) #5 {
entry:
  %__t.addr = alloca i8**, align 8
  store i8** %__t, i8*** %__t.addr, align 8, !tbaa !16
  %0 = load i8**, i8*** %__t.addr, align 8
  ret i8** %0
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__17forwardIRNS_9allocatorIhEEEERT_RNS_16remove_referenceIS4_E4typeE(%"class.std::__1::allocator"* dereferenceable(1) %__t) #5 {
entry:
  %__t.addr = alloca %"class.std::__1::allocator"*, align 8
  store %"class.std::__1::allocator"* %__t, %"class.std::__1::allocator"** %__t.addr, align 8, !tbaa !16
  %0 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__t.addr, align 8
  ret %"class.std::__1::allocator"* %0
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EEC2ES1_S4_(%"class.std::__1::__libcpp_compressed_pair_imp.7"* %this, i8* %__t1, %"class.std::__1::allocator"* dereferenceable(1) %__t2) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp.7"*, align 8
  %__t1.addr = alloca i8*, align 8
  %__t2.addr = alloca %"class.std::__1::allocator"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this, %"class.std::__1::__libcpp_compressed_pair_imp.7"** %this.addr, align 8, !tbaa !2
  store i8* %__t1, i8** %__t1.addr, align 8, !tbaa !2
  store %"class.std::__1::allocator"* %__t2, %"class.std::__1::allocator"** %__t2.addr, align 8, !tbaa !16
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp.7"*, %"class.std::__1::__libcpp_compressed_pair_imp.7"** %this.addr, align 8
  %__first_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp.7", %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this1, i32 0, i32 0
  %call = call dereferenceable(8) i8** @_ZNSt3__17forwardIPhEERT_RNS_16remove_referenceIS2_E4typeE(i8** dereferenceable(8) %__t1.addr) #16
  %0 = load i8*, i8** %call, align 8, !tbaa !2
  store i8* %0, i8** %__first_, align 8, !tbaa !204
  %__second_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp.7", %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this1, i32 0, i32 1
  %1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__t2.addr, align 8
  %call2 = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__17forwardIRNS_9allocatorIhEEEERT_RNS_16remove_referenceIS4_E4typeE(%"class.std::__1::allocator"* dereferenceable(1) %1) #16
  store %"class.std::__1::allocator"* %call2, %"class.std::__1::allocator"** %__second_, align 8, !tbaa !16
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__19allocatorIhE8allocateEmPKv(%"class.std::__1::allocator"* %this, i64 %__n, i8*) #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::allocator"*, align 8
  %__n.addr = alloca i64, align 8
  %.addr = alloca i8*, align 8
  store %"class.std::__1::allocator"* %this, %"class.std::__1::allocator"** %this.addr, align 8, !tbaa !2
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  store i8* %0, i8** %.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %this.addr, align 8
  %1 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %call = call i64 @_ZNKSt3__19allocatorIhE8max_sizeEv(%"class.std::__1::allocator"* %this1) #16
  %cmp = icmp ugt i64 %1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @_ZNSt3__120__throw_length_errorEPKc(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.110, i32 0, i32 0)) #20
  unreachable

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %mul = mul i64 %2, 1
  %call2 = call i8* @_ZNSt3__110__allocateEm(i64 %mul)
  ret i8* %call2
}

; Function Attrs: alwaysinline noreturn ssp uwtable
define linkonce_odr hidden void @_ZNSt3__120__throw_length_errorEPKc(i8* %__msg) #13 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %__msg.addr = alloca i8*, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store i8* %__msg, i8** %__msg.addr, align 8, !tbaa !2
  %exception = call i8* @__cxa_allocate_exception(i64 16) #16
  %0 = bitcast i8* %exception to %"class.std::length_error"*
  %1 = load i8*, i8** %__msg.addr, align 8, !tbaa !2
  invoke void @_ZNSt12length_errorC1EPKc(%"class.std::length_error"* %0, i8* %1)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %entry
  call void @__cxa_throw(i8* %exception, i8* bitcast (i8** @_ZTISt12length_error to i8*), i8* bitcast (void (%"class.std::length_error"*)* @_ZNSt12length_errorD1Ev to i8*)) #20
  unreachable

lpad:                                             ; preds = %entry
  %2 = landingpad { i8*, i32 }
          cleanup
  %3 = extractvalue { i8*, i32 } %2, 0
  store i8* %3, i8** %exn.slot, align 8
  %4 = extractvalue { i8*, i32 } %2, 1
  store i32 %4, i32* %ehselector.slot, align 4
  call void @__cxa_free_exception(i8* %exception) #16
  br label %eh.resume

return:                                           ; No predecessors!
  ret void

eh.resume:                                        ; preds = %lpad
  %exn = load i8*, i8** %exn.slot, align 8
  %sel = load i32, i32* %ehselector.slot, align 4
  %lpad.val = insertvalue { i8*, i32 } undef, i8* %exn, 0
  %lpad.val1 = insertvalue { i8*, i32 } %lpad.val, i32 %sel, 1
  resume { i8*, i32 } %lpad.val1
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__110__allocateEm(i64 %__size) #7 {
entry:
  %__size.addr = alloca i64, align 8
  store i64 %__size, i64* %__size.addr, align 8, !tbaa !6
  %0 = load i64, i64* %__size.addr, align 8, !tbaa !6
  %call = call i8* @_Znwm(i64 %0) #22
  ret i8* %call
}

declare i8* @__cxa_allocate_exception(i64)

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt12length_errorC1EPKc(%"class.std::length_error"* %this, i8* %__s) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::length_error"*, align 8
  %__s.addr = alloca i8*, align 8
  store %"class.std::length_error"* %this, %"class.std::length_error"** %this.addr, align 8, !tbaa !2
  store i8* %__s, i8** %__s.addr, align 8, !tbaa !2
  %this1 = load %"class.std::length_error"*, %"class.std::length_error"** %this.addr, align 8
  %0 = load i8*, i8** %__s.addr, align 8, !tbaa !2
  call void @_ZNSt12length_errorC2EPKc(%"class.std::length_error"* %this1, i8* %0)
  ret void
}

declare void @__cxa_free_exception(i8*)

; Function Attrs: nounwind
declare void @_ZNSt12length_errorD1Ev(%"class.std::length_error"*) unnamed_addr #14

declare void @__cxa_throw(i8*, i8*, i8*)

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt12length_errorC2EPKc(%"class.std::length_error"* %this, i8* %__s) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::length_error"*, align 8
  %__s.addr = alloca i8*, align 8
  store %"class.std::length_error"* %this, %"class.std::length_error"** %this.addr, align 8, !tbaa !2
  store i8* %__s, i8** %__s.addr, align 8, !tbaa !2
  %this1 = load %"class.std::length_error"*, %"class.std::length_error"** %this.addr, align 8
  %0 = bitcast %"class.std::length_error"* %this1 to %"class.std::logic_error"*
  %1 = load i8*, i8** %__s.addr, align 8, !tbaa !2
  call void @_ZNSt11logic_errorC2EPKc(%"class.std::logic_error"* %0, i8* %1)
  %2 = bitcast %"class.std::length_error"* %this1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVSt12length_error, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !206
  ret void
}

declare void @_ZNSt11logic_errorC2EPKc(%"class.std::logic_error"*, i8*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt12length_errorD0Ev(%"class.std::length_error"*) unnamed_addr #14

; Function Attrs: nounwind
declare i8* @_ZNKSt11logic_error4whatEv(%"class.std::logic_error"*) unnamed_addr #14

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #15

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__117__compressed_pairIPhRNS_9allocatorIhEEE6secondEv(%"class.std::__1::__compressed_pair.6"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair.6"*, align 8
  store %"class.std::__1::__compressed_pair.6"* %this, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair.6"*, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair.6"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp.7"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EE6secondEv(%"class.std::__1::__libcpp_compressed_pair_imp.7"* %0) #16
  ret %"class.std::__1::allocator"* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EE6secondEv(%"class.std::__1::__libcpp_compressed_pair_imp.7"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp.7"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this, %"class.std::__1::__libcpp_compressed_pair_imp.7"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp.7"*, %"class.std::__1::__libcpp_compressed_pair_imp.7"** %this.addr, align 8
  %__second_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp.7", %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this1, i32 0, i32 1
  %ref = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__second_, align 8, !tbaa !16
  ret %"class.std::__1::allocator"* %ref
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNSt3__117__compressed_pairIPhRNS_9allocatorIhEEE5firstEv(%"class.std::__1::__compressed_pair.6"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair.6"*, align 8
  store %"class.std::__1::__compressed_pair.6"* %this, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair.6"*, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair.6"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp.7"*
  %call = call dereferenceable(8) i8** @_ZNSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp.7"* %0) #16
  ret i8** %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp.7"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp.7"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this, %"class.std::__1::__libcpp_compressed_pair_imp.7"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp.7"*, %"class.std::__1::__libcpp_compressed_pair_imp.7"** %this.addr, align 8
  %__first_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp.7", %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this1, i32 0, i32 0
  ret i8** %__first_
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_deleteEv(%"class.std::__1::vector"* %this) #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %call = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call2 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call3 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::vector"* %this1) #16
  %add.ptr = getelementptr inbounds i8, i8* %call2, i64 %call3
  %call4 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call5 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  %add.ptr6 = getelementptr inbounds i8, i8* %call4, i64 %call5
  %call7 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call8 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::vector"* %this1) #16
  %add.ptr9 = getelementptr inbounds i8, i8* %call7, i64 %call8
  call void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_(%"class.std::__1::vector"* %this1, i8* %call, i8* %add.ptr, i8* %add.ptr6, i8* %add.ptr9)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE20__construct_backwardIhEENS_9enable_ifIXaaoosr7is_sameIS2_NS1_IT_EEEE5valuentsr15__has_constructIS2_PS6_S6_EE5valuesr31is_trivially_move_constructibleIS6_EE5valueEvE4typeERS2_S8_S8_RS8_(%"class.std::__1::allocator"* dereferenceable(1), i8* %__begin1, i8* %__end1, i8** dereferenceable(8) %__end2) #5 align 2 {
entry:
  %.addr = alloca %"class.std::__1::allocator"*, align 8
  %__begin1.addr = alloca i8*, align 8
  %__end1.addr = alloca i8*, align 8
  %__end2.addr = alloca i8**, align 8
  %_Np = alloca i64, align 8
  store %"class.std::__1::allocator"* %0, %"class.std::__1::allocator"** %.addr, align 8, !tbaa !16
  store i8* %__begin1, i8** %__begin1.addr, align 8, !tbaa !2
  store i8* %__end1, i8** %__end1.addr, align 8, !tbaa !2
  store i8** %__end2, i8*** %__end2.addr, align 8, !tbaa !16
  %1 = bitcast i64* %_Np to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i8*, i8** %__end1.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %__begin1.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %_Np, align 8, !tbaa !6
  %4 = load i64, i64* %_Np, align 8, !tbaa !6
  %5 = load i8**, i8*** %__end2.addr, align 8
  %6 = load i8*, i8** %5, align 8, !tbaa !2
  %idx.neg = sub i64 0, %4
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %idx.neg
  store i8* %add.ptr, i8** %5, align 8, !tbaa !2
  %7 = load i64, i64* %_Np, align 8, !tbaa !6
  %cmp = icmp sgt i64 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i8**, i8*** %__end2.addr, align 8
  %9 = load i8*, i8** %8, align 8, !tbaa !2
  %10 = load i8*, i8** %__begin1.addr, align 8, !tbaa !2
  %11 = load i64, i64* %_Np, align 8, !tbaa !6
  %mul = mul i64 %11, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 %mul, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = bitcast i64* %_Np to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #16
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__14swapIPhEEvRT_S3_(i8** dereferenceable(8) %__x, i8** dereferenceable(8) %__y) #7 {
entry:
  %__x.addr = alloca i8**, align 8
  %__y.addr = alloca i8**, align 8
  %__t = alloca i8*, align 8
  store i8** %__x, i8*** %__x.addr, align 8, !tbaa !16
  store i8** %__y, i8*** %__y.addr, align 8, !tbaa !16
  %0 = bitcast i8** %__t to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8**, i8*** %__x.addr, align 8
  %call = call dereferenceable(8) i8** @_ZNSt3__14moveIPhEERT_S3_(i8** dereferenceable(8) %1)
  %2 = load i8*, i8** %call, align 8, !tbaa !2
  store i8* %2, i8** %__t, align 8, !tbaa !2
  %3 = load i8**, i8*** %__y.addr, align 8
  %call1 = call dereferenceable(8) i8** @_ZNSt3__14moveIPhEERT_S3_(i8** dereferenceable(8) %3)
  %4 = load i8*, i8** %call1, align 8, !tbaa !2
  %5 = load i8**, i8*** %__x.addr, align 8
  store i8* %4, i8** %5, align 8, !tbaa !2
  %call2 = call dereferenceable(8) i8** @_ZNSt3__14moveIPhEERT_S3_(i8** dereferenceable(8) %__t)
  %6 = load i8*, i8** %call2, align 8, !tbaa !2
  %7 = load i8**, i8*** %__y.addr, align 8
  store i8* %6, i8** %7, align 8, !tbaa !2
  %8 = bitcast i8** %__t to i8*
  call void @llvm.lifetime.end(i64 8, i8* %8) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEm(%"class.std::__1::vector"* %this, i64 %__current_size) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__current_size.addr = alloca i64, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i64 %__current_size, i64* %__current_size.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %call = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call2 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call3 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::vector"* %this1) #16
  %add.ptr = getelementptr inbounds i8, i8* %call2, i64 %call3
  %call4 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call5 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::vector"* %this1) #16
  %add.ptr6 = getelementptr inbounds i8, i8* %call4, i64 %call5
  %call7 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %0 = load i64, i64* %__current_size.addr, align 8, !tbaa !6
  %add.ptr8 = getelementptr inbounds i8, i8* %call7, i64 %0
  call void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_(%"class.std::__1::vector"* %this1, i8* %call, i8* %add.ptr, i8* %add.ptr6, i8* %add.ptr8)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE26__invalidate_all_iteratorsEv(%"class.std::__1::vector"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_(%"class.std::__1::vector"* %this, i8*, i8*, i8*, i8*) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %.addr = alloca i8*, align 8
  %.addr1 = alloca i8*, align 8
  %.addr2 = alloca i8*, align 8
  %.addr3 = alloca i8*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i8* %0, i8** %.addr, align 8, !tbaa !2
  store i8* %1, i8** %.addr1, align 8, !tbaa !2
  store i8* %2, i8** %.addr2, align 8, !tbaa !2
  store i8* %3, i8** %.addr3, align 8, !tbaa !2
  %this4 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %0, i32 0, i32 0
  %1 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %call = call i8* @_ZNSt3__116__to_raw_pointerIhEEPT_S2_(i8* %1) #16
  ret i8* %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNSt3__14moveIPhEERT_S3_(i8** dereferenceable(8) %__t) #5 {
entry:
  %__t.addr = alloca i8**, align 8
  store i8** %__t, i8*** %__t.addr, align 8, !tbaa !16
  %0 = load i8**, i8*** %__t.addr, align 8
  ret i8** %0
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev(%"struct.std::__1::__split_buffer"* %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE5clearEv(%"struct.std::__1::__split_buffer"* %this1) #16
  %__first_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 0
  %0 = load i8*, i8** %__first_, align 8, !tbaa !203
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE7__allocEv(%"struct.std::__1::__split_buffer"* %this1) #16
  %__first_2 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 0
  %1 = load i8*, i8** %__first_2, align 8, !tbaa !203
  %call3 = call i64 @_ZNKSt3__114__split_bufferIhRNS_9allocatorIhEEE8capacityEv(%"struct.std::__1::__split_buffer"* %this1)
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE10deallocateERS2_Phm(%"class.std::__1::allocator"* dereferenceable(1) %call, i8* %1, i64 %call3) #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE5clearEv(%"struct.std::__1::__split_buffer"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %__begin_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 1
  %0 = load i8*, i8** %__begin_, align 8, !tbaa !202
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE17__destruct_at_endEPh(%"struct.std::__1::__split_buffer"* %this1, i8* %0) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNKSt3__114__split_bufferIhRNS_9allocatorIhEEE8capacityEv(%"struct.std::__1::__split_buffer"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %call = call dereferenceable(8) i8** @_ZNKSt3__114__split_bufferIhRNS_9allocatorIhEEE9__end_capEv(%"struct.std::__1::__split_buffer"* %this1) #16
  %0 = load i8*, i8** %call, align 8, !tbaa !2
  %__first_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 0
  %1 = load i8*, i8** %__first_, align 8, !tbaa !203
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE17__destruct_at_endEPh(%"struct.std::__1::__split_buffer"* %this, i8* %__new_last) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  %__new_last.addr = alloca i8*, align 8
  %agg.tmp = alloca %"struct.std::__1::integral_constant", align 1
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  store i8* %__new_last, i8** %__new_last.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %0 = load i8*, i8** %__new_last.addr, align 8, !tbaa !2
  call void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE17__destruct_at_endEPhNS_17integral_constantIbLb0EEE(%"struct.std::__1::__split_buffer"* %this1, i8* %0) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE17__destruct_at_endEPhNS_17integral_constantIbLb0EEE(%"struct.std::__1::__split_buffer"* %this, i8* %__new_last) #5 align 2 personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*) {
entry:
  %0 = alloca %"struct.std::__1::integral_constant", align 1
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  %__new_last.addr = alloca i8*, align 8
  %exn.slot = alloca i8*
  %ehselector.slot = alloca i32
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  store i8* %__new_last, i8** %__new_last.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %invoke.cont, %entry
  %1 = load i8*, i8** %__new_last.addr, align 8, !tbaa !2
  %__end_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 2
  %2 = load i8*, i8** %__end_, align 8, !tbaa !199
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE7__allocEv(%"struct.std::__1::__split_buffer"* %this1) #16
  %__end_2 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 2
  %3 = load i8*, i8** %__end_2, align 8, !tbaa !199
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 -1
  store i8* %incdec.ptr, i8** %__end_2, align 8, !tbaa !199
  %call3 = call i8* @_ZNSt3__116__to_raw_pointerIhEEPT_S2_(i8* %incdec.ptr) #16
  invoke void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE7destroyIhEEvRS2_PT_(%"class.std::__1::allocator"* dereferenceable(1) %call, i8* %call3)
          to label %invoke.cont unwind label %lpad

invoke.cont:                                      ; preds = %while.body
  br label %while.cond

lpad:                                             ; preds = %while.body
  %4 = landingpad { i8*, i32 }
          filter [0 x i8*] zeroinitializer
  %5 = extractvalue { i8*, i32 } %4, 0
  store i8* %5, i8** %exn.slot, align 8
  %6 = extractvalue { i8*, i32 } %4, 1
  store i32 %6, i32* %ehselector.slot, align 4
  br label %filter.dispatch

filter.dispatch:                                  ; preds = %lpad
  %exn = load i8*, i8** %exn.slot, align 8
  call void @__cxa_call_unexpected(i8* %exn) #20
  unreachable

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNKSt3__114__split_bufferIhRNS_9allocatorIhEEE9__end_capEv(%"struct.std::__1::__split_buffer"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %__end_cap_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 3
  %call = call dereferenceable(8) i8** @_ZNKSt3__117__compressed_pairIPhRNS_9allocatorIhEEE5firstEv(%"class.std::__1::__compressed_pair.6"* %__end_cap_) #16
  ret i8** %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNKSt3__117__compressed_pairIPhRNS_9allocatorIhEEE5firstEv(%"class.std::__1::__compressed_pair.6"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair.6"*, align 8
  store %"class.std::__1::__compressed_pair.6"* %this, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair.6"*, %"class.std::__1::__compressed_pair.6"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair.6"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp.7"*
  %call = call dereferenceable(8) i8** @_ZNKSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp.7"* %0) #16
  ret i8** %call
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) i8** @_ZNKSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EE5firstEv(%"class.std::__1::__libcpp_compressed_pair_imp.7"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp.7"*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this, %"class.std::__1::__libcpp_compressed_pair_imp.7"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp.7"*, %"class.std::__1::__libcpp_compressed_pair_imp.7"** %this.addr, align 8
  %__first_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp.7", %"class.std::__1::__libcpp_compressed_pair_imp.7"* %this1, i32 0, i32 0
  ret i8** %__first_
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE27__invalidate_iterators_pastEPh(%"class.std::__1::vector"* %this, i8* %__new_last) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__new_last.addr = alloca i8*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i8* %__new_last, i8** %__new_last.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_shrinkEm(%"class.std::__1::vector"* %this, i64 %__old_size) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__old_size.addr = alloca i64, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i64 %__old_size, i64* %__old_size.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %call = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call2 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call3 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE8capacityEv(%"class.std::__1::vector"* %this1) #16
  %add.ptr = getelementptr inbounds i8, i8* %call2, i64 %call3
  %call4 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %0 = load i64, i64* %__old_size.addr, align 8, !tbaa !6
  %add.ptr5 = getelementptr inbounds i8, i8* %call4, i64 %0
  %call6 = call i8* @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4dataEv(%"class.std::__1::vector"* %this1) #16
  %call7 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  %add.ptr8 = getelementptr inbounds i8, i8* %call6, i64 %call7
  call void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_(%"class.std::__1::vector"* %this1, i8* %call, i8* %add.ptr, i8* %add.ptr5, i8* %add.ptr8)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE11__make_iterEPh(%"class.std::__1::vector"* %this, i8* %__p) #5 align 2 {
entry:
  %retval = alloca %"class.std::__1::__wrap_iter", align 8
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__p.addr = alloca i8*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  call void @_ZNSt3__111__wrap_iterIPhEC1ES1_(%"class.std::__1::__wrap_iter"* %retval, i8* %0) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %retval, i32 0, i32 0
  %1 = load i8*, i8** %coerce.dive, align 8
  ret i8* %1
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__111__wrap_iterIPhEC1ES1_(%"class.std::__1::__wrap_iter"* %this, i8* %__x) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__wrap_iter"*, align 8
  %__x.addr = alloca i8*, align 8
  store %"class.std::__1::__wrap_iter"* %this, %"class.std::__1::__wrap_iter"** %this.addr, align 8, !tbaa !2
  store i8* %__x, i8** %__x.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__wrap_iter"*, %"class.std::__1::__wrap_iter"** %this.addr, align 8
  %0 = load i8*, i8** %__x.addr, align 8, !tbaa !2
  call void @_ZNSt3__111__wrap_iterIPhEC2ES1_(%"class.std::__1::__wrap_iter"* %this1, i8* %0) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__111__wrap_iterIPhEC2ES1_(%"class.std::__1::__wrap_iter"* %this, i8* %__x) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__wrap_iter"*, align 8
  %__x.addr = alloca i8*, align 8
  store %"class.std::__1::__wrap_iter"* %this, %"class.std::__1::__wrap_iter"** %this.addr, align 8, !tbaa !2
  store i8* %__x, i8** %__x.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__wrap_iter"*, %"class.std::__1::__wrap_iter"** %this.addr, align 8
  %__i = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %this1, i32 0, i32 0
  %0 = load i8*, i8** %__x.addr, align 8, !tbaa !2
  store i8* %0, i8** %__i, align 8, !tbaa !208
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNSt3__1miIPKhPhEENS_11__wrap_iterIT_E15difference_typeERKS6_RKNS4_IT0_EE(%"class.std::__1::__wrap_iter.5"* dereferenceable(8) %__x, %"class.std::__1::__wrap_iter"* dereferenceable(8) %__y) #5 {
entry:
  %__x.addr = alloca %"class.std::__1::__wrap_iter.5"*, align 8
  %__y.addr = alloca %"class.std::__1::__wrap_iter"*, align 8
  store %"class.std::__1::__wrap_iter.5"* %__x, %"class.std::__1::__wrap_iter.5"** %__x.addr, align 8, !tbaa !16
  store %"class.std::__1::__wrap_iter"* %__y, %"class.std::__1::__wrap_iter"** %__y.addr, align 8, !tbaa !16
  %0 = load %"class.std::__1::__wrap_iter.5"*, %"class.std::__1::__wrap_iter.5"** %__x.addr, align 8
  %call = call i8* @_ZNKSt3__111__wrap_iterIPKhE4baseEv(%"class.std::__1::__wrap_iter.5"* %0) #16
  %1 = load %"class.std::__1::__wrap_iter"*, %"class.std::__1::__wrap_iter"** %__y.addr, align 8
  %call1 = call i8* @_ZNKSt3__111__wrap_iterIPhE4baseEv(%"class.std::__1::__wrap_iter"* %1) #16
  %sub.ptr.lhs.cast = ptrtoint i8* %call to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %call1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE5beginEv(%"class.std::__1::vector"* %this) #5 align 2 {
entry:
  %retval = alloca %"class.std::__1::__wrap_iter", align 8
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %0, i32 0, i32 0
  %1 = load i8*, i8** %__begin_, align 8, !tbaa !170
  %call = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE11__make_iterEPh(%"class.std::__1::vector"* %this1, i8* %1) #16
  %coerce.dive = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %retval, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %coerce.dive2 = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %retval, i32 0, i32 0
  %2 = load i8*, i8** %coerce.dive2, align 8
  ret i8* %2
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden i64 @_ZNSt3__18distanceIPhEENS_15iterator_traitsIT_E15difference_typeES3_S3_(i8* %__first, i8* %__last) #7 {
entry:
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  %agg.tmp = alloca %"struct.std::__1::random_access_iterator_tag", align 1
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %call = call i64 @_ZNSt3__110__distanceIPhEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE(i8* %0, i8* %1)
  ret i64 %call
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__17advanceIPhEEvRT_NS_15iterator_traitsIS2_E15difference_typeE(i8** dereferenceable(8) %__i, i64 %__n) #7 {
entry:
  %__i.addr = alloca i8**, align 8
  %__n.addr = alloca i64, align 8
  %agg.tmp = alloca %"struct.std::__1::random_access_iterator_tag", align 1
  store i8** %__i, i8*** %__i.addr, align 8, !tbaa !16
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %0 = load i8**, i8*** %__i.addr, align 8
  %1 = load i64, i64* %__n.addr, align 8, !tbaa !6
  call void @_ZNSt3__19__advanceIPhEEvRT_NS_15iterator_traitsIS2_E15difference_typeENS_26random_access_iterator_tagE(i8** dereferenceable(8) %0, i64 %1)
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__16vectorIhNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_m(%"class.std::__1::vector"* %this, i8* %__first, i8* %__last, i64 %__n) #0 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  %__n.addr = alloca i64, align 8
  %__a = alloca %"class.std::__1::allocator"*, align 8
  %__annotator = alloca %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator", align 1
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %1) #16
  store %"class.std::__1::allocator"* %call, %"class.std::__1::allocator"** %__a, align 8, !tbaa !16
  %2 = bitcast %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator to i8*
  call void @llvm.lifetime.start(i64 1, i8* %2) #16
  %3 = load i64, i64* %__n.addr, align 8, !tbaa !6
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC1ERKS3_m(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator, %"class.std::__1::vector"* dereferenceable(24) %this1, i64 %3)
  %4 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a, align 8
  %5 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %6 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %7 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %7, i32 0, i32 1
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE25__construct_range_forwardIhEENS_9enable_ifIXaaoosr7is_sameIS2_NS1_IT_EEEE5valuentsr15__has_constructIS2_PS6_S6_EE5valuesr31is_trivially_move_constructibleIS6_EE5valueEvE4typeERS2_S8_S8_RS8_(%"class.std::__1::allocator"* dereferenceable(1) %4, i8* %5, i8* %6, i8** dereferenceable(8) %__end_)
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv(%"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator)
  %8 = bitcast %"struct.std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::__RAII_IncreaseAnnotator"* %__annotator to i8*
  call void @llvm.lifetime.end(i64 1, i8* %8) #16
  %9 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #16
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr void @_ZNSt3__16vectorIhNS_9allocatorIhEEE12__move_rangeEPhS4_S4_(%"class.std::__1::vector"* %this, i8* %__from_s, i8* %__from_e, i8* %__to) #0 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__from_s.addr = alloca i8*, align 8
  %__from_e.addr = alloca i8*, align 8
  %__to.addr = alloca i8*, align 8
  %__old_last = alloca i8*, align 8
  %__n = alloca i64, align 8
  %__i = alloca i8*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store i8* %__from_s, i8** %__from_s.addr, align 8, !tbaa !2
  store i8* %__from_e, i8** %__from_e.addr, align 8, !tbaa !2
  store i8* %__to, i8** %__to.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast i8** %__old_last to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %1, i32 0, i32 1
  %2 = load i8*, i8** %__end_, align 8, !tbaa !173
  store i8* %2, i8** %__old_last, align 8, !tbaa !2
  %3 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #16
  %4 = load i8*, i8** %__old_last, align 8, !tbaa !2
  %5 = load i8*, i8** %__to.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %4 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %__n, align 8, !tbaa !6
  %6 = bitcast i8** %__i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %6) #16
  %7 = load i8*, i8** %__from_s.addr, align 8, !tbaa !2
  %8 = load i64, i64* %__n, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %__i, align 8, !tbaa !2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i8*, i8** %__i, align 8, !tbaa !2
  %10 = load i8*, i8** %__from_e.addr, align 8, !tbaa !2
  %cmp = icmp ult i8* %9, %10
  br i1 %cmp, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond
  %11 = bitcast i8** %__i to i8*
  call void @llvm.lifetime.end(i64 8, i8* %11) #16
  br label %for.end

for.body:                                         ; preds = %for.cond
  %12 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %12) #16
  %13 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_2 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %13, i32 0, i32 1
  %14 = load i8*, i8** %__end_2, align 8, !tbaa !173
  %call3 = call i8* @_ZNSt3__116__to_raw_pointerIhEEPT_S2_(i8* %14) #16
  %15 = load i8*, i8** %__i, align 8, !tbaa !2
  %call4 = call dereferenceable(1) i8* @_ZNSt3__14moveIhEERT_S2_(i8* dereferenceable(1) %15)
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE9constructIhhEEvRS2_PT_RKT0_(%"class.std::__1::allocator"* dereferenceable(1) %call, i8* %call3, i8* dereferenceable(1) %call4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %16 = load i8*, i8** %__i, align 8, !tbaa !2
  %incdec.ptr = getelementptr inbounds i8, i8* %16, i32 1
  store i8* %incdec.ptr, i8** %__i, align 8, !tbaa !2
  %17 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_5 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %17, i32 0, i32 1
  %18 = load i8*, i8** %__end_5, align 8, !tbaa !173
  %incdec.ptr6 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr6, i8** %__end_5, align 8, !tbaa !173
  br label %for.cond

for.end:                                          ; preds = %for.cond.cleanup
  %19 = load i8*, i8** %__from_s.addr, align 8, !tbaa !2
  %20 = load i8*, i8** %__from_s.addr, align 8, !tbaa !2
  %21 = load i64, i64* %__n, align 8, !tbaa !6
  %add.ptr7 = getelementptr inbounds i8, i8* %20, i64 %21
  %22 = load i8*, i8** %__old_last, align 8, !tbaa !2
  %call8 = call i8* @_ZNSt3__113move_backwardIPhS1_EET0_T_S3_S2_(i8* %19, i8* %add.ptr7, i8* %22)
  %23 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #16
  %24 = bitcast i8** %__old_last to i8*
  call void @llvm.lifetime.end(i64 8, i8* %24) #16
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__14copyIPhS1_EET0_T_S3_S2_(i8* %__first, i8* %__last, i8* %__result) #7 {
entry:
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  %__result.addr = alloca i8*, align 8
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  store i8* %__result, i8** %__result.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %call = call i8* @_ZNSt3__113__unwrap_iterIPhEET_S2_(i8* %0)
  %1 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %call1 = call i8* @_ZNSt3__113__unwrap_iterIPhEET_S2_(i8* %1)
  %2 = load i8*, i8** %__result.addr, align 8, !tbaa !2
  %call2 = call i8* @_ZNSt3__113__unwrap_iterIPhEET_S2_(i8* %2)
  %call3 = call i8* @_ZNSt3__16__copyIhhEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_(i8* %call, i8* %call1, i8* %call2)
  ret i8* %call3
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endIPhEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"struct.std::__1::__split_buffer"* %this, i8* %__first, i8* %__last) #4 align 2 {
entry:
  %this.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  %__a = alloca %"class.std::__1::allocator"*, align 8
  store %"struct.std::__1::__split_buffer"* %this, %"struct.std::__1::__split_buffer"** %this.addr, align 8, !tbaa !2
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  %this1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE7__allocEv(%"struct.std::__1::__split_buffer"* %this1) #16
  store %"class.std::__1::allocator"* %call, %"class.std::__1::allocator"** %__a, align 8, !tbaa !16
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %__a, align 8
  %__end_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 2
  %4 = load i8*, i8** %__end_, align 8, !tbaa !199
  %call2 = call i8* @_ZNSt3__116__to_raw_pointerIhEEPT_S2_(i8* %4) #16
  %5 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE9constructIhhEEvRS2_PT_RKT0_(%"class.std::__1::allocator"* dereferenceable(1) %3, i8* %call2, i8* dereferenceable(1) %5)
  %__end_3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %this1, i32 0, i32 2
  %6 = load i8*, i8** %__end_3, align 8, !tbaa !199
  %incdec.ptr = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %incdec.ptr, i8** %__end_3, align 8, !tbaa !199
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %incdec.ptr4 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr4, i8** %__first.addr, align 8, !tbaa !2
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = bitcast %"class.std::__1::allocator"** %__a to i8*
  call void @llvm.lifetime.end(i64 8, i8* %8) #16
  ret void
}

; Function Attrs: ssp uwtable
define linkonce_odr i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EEPh(%"class.std::__1::vector"* %this, %"struct.std::__1::__split_buffer"* dereferenceable(40) %__v, i8* %__p) #0 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  %__v.addr = alloca %"struct.std::__1::__split_buffer"*, align 8
  %__p.addr = alloca i8*, align 8
  %__r = alloca i8*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  store %"struct.std::__1::__split_buffer"* %__v, %"struct.std::__1::__split_buffer"** %__v.addr, align 8, !tbaa !16
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  call void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_deleteEv(%"class.std::__1::vector"* %this1)
  %0 = bitcast i8** %__r to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__begin_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %1, i32 0, i32 1
  %2 = load i8*, i8** %__begin_, align 8, !tbaa !202
  store i8* %2, i8** %__r, align 8, !tbaa !2
  %3 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %3) #16
  %4 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_2 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %4, i32 0, i32 0
  %5 = load i8*, i8** %__begin_2, align 8, !tbaa !170
  %6 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  %7 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__begin_3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %7, i32 0, i32 1
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE20__construct_backwardIhEENS_9enable_ifIXaaoosr7is_sameIS2_NS1_IT_EEEE5valuentsr15__has_constructIS2_PS6_S6_EE5valuesr31is_trivially_move_constructibleIS6_EE5valueEvE4typeERS2_S8_S8_RS8_(%"class.std::__1::allocator"* dereferenceable(1) %call, i8* %5, i8* %6, i8** dereferenceable(8) %__begin_3)
  %8 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call4 = call dereferenceable(1) %"class.std::__1::allocator"* @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE7__allocEv(%"class.std::__1::__vector_base"* %8) #16
  %9 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  %10 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %10, i32 0, i32 1
  %11 = load i8*, i8** %__end_, align 8, !tbaa !173
  %12 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__end_5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %12, i32 0, i32 2
  call void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE19__construct_forwardIhEENS_9enable_ifIXaaoosr7is_sameIS2_NS1_IT_EEEE5valuentsr15__has_constructIS2_PS6_S6_EE5valuesr31is_trivially_move_constructibleIS6_EE5valueEvE4typeERS2_S8_S8_RS8_(%"class.std::__1::allocator"* dereferenceable(1) %call4, i8* %9, i8* %11, i8** dereferenceable(8) %__end_5)
  %13 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__begin_6 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %13, i32 0, i32 0
  %14 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__begin_7 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %14, i32 0, i32 1
  call void @_ZNSt3__14swapIPhEEvRT_S3_(i8** dereferenceable(8) %__begin_6, i8** dereferenceable(8) %__begin_7)
  %15 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %__end_8 = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %15, i32 0, i32 1
  %16 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__end_9 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %16, i32 0, i32 2
  call void @_ZNSt3__14swapIPhEEvRT_S3_(i8** dereferenceable(8) %__end_8, i8** dereferenceable(8) %__end_9)
  %17 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  %call10 = call dereferenceable(8) i8** @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEE9__end_capEv(%"class.std::__1::__vector_base"* %17) #16
  %18 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %call11 = call dereferenceable(8) i8** @_ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE9__end_capEv(%"struct.std::__1::__split_buffer"* %18) #16
  call void @_ZNSt3__14swapIPhEEvRT_S3_(i8** dereferenceable(8) %call10, i8** dereferenceable(8) %call11)
  %19 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__begin_12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %19, i32 0, i32 1
  %20 = load i8*, i8** %__begin_12, align 8, !tbaa !202
  %21 = load %"struct.std::__1::__split_buffer"*, %"struct.std::__1::__split_buffer"** %__v.addr, align 8
  %__first_ = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %21, i32 0, i32 0
  store i8* %20, i8** %__first_, align 8, !tbaa !203
  %call13 = call i64 @_ZNKSt3__16vectorIhNS_9allocatorIhEEE4sizeEv(%"class.std::__1::vector"* %this1) #16
  call void @_ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEm(%"class.std::__1::vector"* %this1, i64 %call13)
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE26__invalidate_all_iteratorsEv(%"class.std::__1::vector"* %this1)
  %22 = load i8*, i8** %__r, align 8, !tbaa !2
  %23 = bitcast i8** %__r to i8*
  call void @llvm.lifetime.end(i64 8, i8* %23) #16
  ret i8* %22
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNKSt3__111__wrap_iterIPKhE4baseEv(%"class.std::__1::__wrap_iter.5"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__wrap_iter.5"*, align 8
  store %"class.std::__1::__wrap_iter.5"* %this, %"class.std::__1::__wrap_iter.5"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__wrap_iter.5"*, %"class.std::__1::__wrap_iter.5"** %this.addr, align 8
  %__i = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %this1, i32 0, i32 0
  %0 = load i8*, i8** %__i, align 8, !tbaa !210
  ret i8* %0
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNKSt3__111__wrap_iterIPhE4baseEv(%"class.std::__1::__wrap_iter"* %this) #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__wrap_iter"*, align 8
  store %"class.std::__1::__wrap_iter"* %this, %"class.std::__1::__wrap_iter"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__wrap_iter"*, %"class.std::__1::__wrap_iter"** %this.addr, align 8
  %__i = getelementptr inbounds %"class.std::__1::__wrap_iter", %"class.std::__1::__wrap_iter"* %this1, i32 0, i32 0
  %0 = load i8*, i8** %__i, align 8, !tbaa !208
  ret i8* %0
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNSt3__110__distanceIPhEENS_15iterator_traitsIT_E15difference_typeES3_S3_NS_26random_access_iterator_tagE(i8* %__first, i8* %__last) #5 {
entry:
  %0 = alloca %"struct.std::__1::random_access_iterator_tag", align 1
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  ret i64 %sub.ptr.sub
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19__advanceIPhEEvRT_NS_15iterator_traitsIS2_E15difference_typeENS_26random_access_iterator_tagE(i8** dereferenceable(8) %__i, i64 %__n) #5 {
entry:
  %0 = alloca %"struct.std::__1::random_access_iterator_tag", align 1
  %__i.addr = alloca i8**, align 8
  %__n.addr = alloca i64, align 8
  store i8** %__i, i8*** %__i.addr, align 8, !tbaa !16
  store i64 %__n, i64* %__n.addr, align 8, !tbaa !6
  %1 = load i64, i64* %__n.addr, align 8, !tbaa !6
  %2 = load i8**, i8*** %__i.addr, align 8
  %3 = load i8*, i8** %2, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %1
  store i8* %add.ptr, i8** %2, align 8, !tbaa !2
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE25__construct_range_forwardIhEENS_9enable_ifIXaaoosr7is_sameIS2_NS1_IT_EEEE5valuentsr15__has_constructIS2_PS6_S6_EE5valuesr31is_trivially_move_constructibleIS6_EE5valueEvE4typeERS2_S8_S8_RS8_(%"class.std::__1::allocator"* dereferenceable(1), i8* %__begin1, i8* %__end1, i8** dereferenceable(8) %__begin2) #5 align 2 {
entry:
  %.addr = alloca %"class.std::__1::allocator"*, align 8
  %__begin1.addr = alloca i8*, align 8
  %__end1.addr = alloca i8*, align 8
  %__begin2.addr = alloca i8**, align 8
  %_Np = alloca i64, align 8
  store %"class.std::__1::allocator"* %0, %"class.std::__1::allocator"** %.addr, align 8, !tbaa !16
  store i8* %__begin1, i8** %__begin1.addr, align 8, !tbaa !2
  store i8* %__end1, i8** %__end1.addr, align 8, !tbaa !2
  store i8** %__begin2, i8*** %__begin2.addr, align 8, !tbaa !16
  %1 = bitcast i64* %_Np to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i8*, i8** %__end1.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %__begin1.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %_Np, align 8, !tbaa !6
  %4 = load i64, i64* %_Np, align 8, !tbaa !6
  %cmp = icmp sgt i64 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i8**, i8*** %__begin2.addr, align 8
  %6 = load i8*, i8** %5, align 8, !tbaa !2
  %7 = load i8*, i8** %__begin1.addr, align 8, !tbaa !2
  %8 = load i64, i64* %_Np, align 8, !tbaa !6
  %mul = mul i64 %8, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 %mul, i32 1, i1 false)
  %9 = load i64, i64* %_Np, align 8, !tbaa !6
  %10 = load i8**, i8*** %__begin2.addr, align 8
  %11 = load i8*, i8** %10, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %9
  store i8* %add.ptr, i8** %10, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = bitcast i64* %_Np to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE9constructIhhEEvRS2_PT_RKT0_(%"class.std::__1::allocator"* dereferenceable(1) %__a, i8* %__p, i8* dereferenceable(1) %__a0) #5 align 2 {
entry:
  %__a.addr = alloca %"class.std::__1::allocator"*, align 8
  %__p.addr = alloca i8*, align 8
  %__a0.addr = alloca i8*, align 8
  store %"class.std::__1::allocator"* %__a, %"class.std::__1::allocator"** %__a.addr, align 8, !tbaa !16
  store i8* %__p, i8** %__p.addr, align 8, !tbaa !2
  store i8* %__a0, i8** %__a0.addr, align 8, !tbaa !16
  %0 = load i8*, i8** %__p.addr, align 8, !tbaa !2
  %1 = load i8*, i8** %__a0.addr, align 8
  %2 = load i8, i8* %1, align 1, !tbaa !16
  store i8 %2, i8* %0, align 1, !tbaa !16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZNSt3__14moveIhEERT_S2_(i8* dereferenceable(1) %__t) #5 {
entry:
  %__t.addr = alloca i8*, align 8
  store i8* %__t, i8** %__t.addr, align 8, !tbaa !16
  %0 = load i8*, i8** %__t.addr, align 8
  ret i8* %0
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__113move_backwardIPhS1_EET0_T_S3_S2_(i8* %__first, i8* %__last, i8* %__result) #7 {
entry:
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  %__result.addr = alloca i8*, align 8
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  store i8* %__result, i8** %__result.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %call = call i8* @_ZNSt3__113__unwrap_iterIPhEET_S2_(i8* %0)
  %1 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %call1 = call i8* @_ZNSt3__113__unwrap_iterIPhEET_S2_(i8* %1)
  %2 = load i8*, i8** %__result.addr, align 8, !tbaa !2
  %call2 = call i8* @_ZNSt3__113__unwrap_iterIPhEET_S2_(i8* %2)
  %call3 = call i8* @_ZNSt3__115__move_backwardIhhEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_(i8* %call, i8* %call1, i8* %call2)
  ret i8* %call3
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__115__move_backwardIhhEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_(i8* %__first, i8* %__last, i8* %__result) #5 {
entry:
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  %__result.addr = alloca i8*, align 8
  %__n = alloca i64, align 8
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  store i8* %__result, i8** %__result.addr, align 8, !tbaa !2
  %0 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %__n, align 8, !tbaa !6
  %3 = load i64, i64* %__n, align 8, !tbaa !6
  %cmp = icmp ugt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64, i64* %__n, align 8, !tbaa !6
  %5 = load i8*, i8** %__result.addr, align 8, !tbaa !2
  %idx.neg = sub i64 0, %4
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %idx.neg
  store i8* %add.ptr, i8** %__result.addr, align 8, !tbaa !2
  %6 = load i8*, i8** %__result.addr, align 8, !tbaa !2
  %7 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %8 = load i64, i64* %__n, align 8, !tbaa !6
  %mul = mul i64 %8, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %6, i8* %7, i64 %mul, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i8*, i8** %__result.addr, align 8, !tbaa !2
  %10 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.end(i64 8, i8* %10) #16
  ret i8* %9
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__113__unwrap_iterIPhEET_S2_(i8* %__i) #5 {
entry:
  %__i.addr = alloca i8*, align 8
  store i8* %__i, i8** %__i.addr, align 8, !tbaa !2
  %0 = load i8*, i8** %__i.addr, align 8, !tbaa !2
  ret i8* %0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16__copyIhhEENS_9enable_ifIXaasr7is_sameINS_12remove_constIT_E4typeET0_EE5valuesr28is_trivially_copy_assignableIS6_EE5valueEPS6_E4typeEPS3_SA_S7_(i8* %__first, i8* %__last, i8* %__result) #5 {
entry:
  %__first.addr = alloca i8*, align 8
  %__last.addr = alloca i8*, align 8
  %__result.addr = alloca i8*, align 8
  %__n = alloca i64, align 8
  store i8* %__first, i8** %__first.addr, align 8, !tbaa !2
  store i8* %__last, i8** %__last.addr, align 8, !tbaa !2
  store i8* %__result, i8** %__result.addr, align 8, !tbaa !2
  %0 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #16
  %1 = load i8*, i8** %__last.addr, align 8, !tbaa !2
  %2 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %__n, align 8, !tbaa !6
  %3 = load i64, i64* %__n, align 8, !tbaa !6
  %cmp = icmp ugt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %__result.addr, align 8, !tbaa !2
  %5 = load i8*, i8** %__first.addr, align 8, !tbaa !2
  %6 = load i64, i64* %__n, align 8, !tbaa !6
  %mul = mul i64 %6, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %4, i8* %5, i64 %mul, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load i8*, i8** %__result.addr, align 8, !tbaa !2
  %8 = load i64, i64* %__n, align 8, !tbaa !6
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %8
  %9 = bitcast i64* %__n to i8*
  call void @llvm.lifetime.end(i64 8, i8* %9) #16
  ret i8* %add.ptr
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__116allocator_traitsINS_9allocatorIhEEE19__construct_forwardIhEENS_9enable_ifIXaaoosr7is_sameIS2_NS1_IT_EEEE5valuentsr15__has_constructIS2_PS6_S6_EE5valuesr31is_trivially_move_constructibleIS6_EE5valueEvE4typeERS2_S8_S8_RS8_(%"class.std::__1::allocator"* dereferenceable(1), i8* %__begin1, i8* %__end1, i8** dereferenceable(8) %__begin2) #5 align 2 {
entry:
  %.addr = alloca %"class.std::__1::allocator"*, align 8
  %__begin1.addr = alloca i8*, align 8
  %__end1.addr = alloca i8*, align 8
  %__begin2.addr = alloca i8**, align 8
  %_Np = alloca i64, align 8
  store %"class.std::__1::allocator"* %0, %"class.std::__1::allocator"** %.addr, align 8, !tbaa !16
  store i8* %__begin1, i8** %__begin1.addr, align 8, !tbaa !2
  store i8* %__end1, i8** %__end1.addr, align 8, !tbaa !2
  store i8** %__begin2, i8*** %__begin2.addr, align 8, !tbaa !16
  %1 = bitcast i64* %_Np to i8*
  call void @llvm.lifetime.start(i64 8, i8* %1) #16
  %2 = load i8*, i8** %__end1.addr, align 8, !tbaa !2
  %3 = load i8*, i8** %__begin1.addr, align 8, !tbaa !2
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %_Np, align 8, !tbaa !6
  %4 = load i64, i64* %_Np, align 8, !tbaa !6
  %cmp = icmp sgt i64 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i8**, i8*** %__begin2.addr, align 8
  %6 = load i8*, i8** %5, align 8, !tbaa !2
  %7 = load i8*, i8** %__begin1.addr, align 8, !tbaa !2
  %8 = load i64, i64* %_Np, align 8, !tbaa !6
  %mul = mul i64 %8, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* %7, i64 %mul, i32 1, i1 false)
  %9 = load i64, i64* %_Np, align 8, !tbaa !6
  %10 = load i8**, i8*** %__begin2.addr, align 8
  %11 = load i8*, i8** %10, align 8, !tbaa !2
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %9
  store i8* %add.ptr, i8** %10, align 8, !tbaa !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = bitcast i64* %_Np to i8*
  call void @llvm.lifetime.end(i64 8, i8* %12) #16
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr void @_ZNSt3__111__wrap_iterIPKhEC2IPhEERKNS0_IT_EEPNS_9enable_ifIXsr14is_convertibleIS6_S2_EE5valueEvE4typeE(%"class.std::__1::__wrap_iter.5"* %this, %"class.std::__1::__wrap_iter"* dereferenceable(8) %__u, i8*) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__wrap_iter.5"*, align 8
  %__u.addr = alloca %"class.std::__1::__wrap_iter"*, align 8
  %.addr = alloca i8*, align 8
  store %"class.std::__1::__wrap_iter.5"* %this, %"class.std::__1::__wrap_iter.5"** %this.addr, align 8, !tbaa !2
  store %"class.std::__1::__wrap_iter"* %__u, %"class.std::__1::__wrap_iter"** %__u.addr, align 8, !tbaa !16
  store i8* %0, i8** %.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__wrap_iter.5"*, %"class.std::__1::__wrap_iter.5"** %this.addr, align 8
  %__i = getelementptr inbounds %"class.std::__1::__wrap_iter.5", %"class.std::__1::__wrap_iter.5"* %this1, i32 0, i32 0
  %1 = load %"class.std::__1::__wrap_iter"*, %"class.std::__1::__wrap_iter"** %__u.addr, align 8
  %call = call i8* @_ZNKSt3__111__wrap_iterIPhE4baseEv(%"class.std::__1::__wrap_iter"* %1) #16
  store i8* %call, i8** %__i, align 8, !tbaa !210
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEEC2Ev(%"class.std::__1::vector"* %this) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::vector"*, align 8
  store %"class.std::__1::vector"* %this, %"class.std::__1::vector"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::vector"* %this1 to %"class.std::__1::__vector_base"*
  call void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEEC2Ev(%"class.std::__1::__vector_base"* %0)
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__113__vector_baseIhNS_9allocatorIhEEEC2Ev(%"class.std::__1::__vector_base"* %this) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base"*, align 8
  %coerce = alloca %"struct.std::__1::nullptr_t", align 8
  %coerce4 = alloca %"struct.std::__1::nullptr_t", align 8
  %coerce8 = alloca %"struct.std::__1::nullptr_t", align 8
  store %"class.std::__1::__vector_base"* %this, %"class.std::__1::__vector_base"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base"*, %"class.std::__1::__vector_base"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__vector_base"* %this1 to %"class.std::__1::__vector_base_common"*
  call void @_ZNSt3__120__vector_base_commonILb1EEC2Ev(%"class.std::__1::__vector_base_common"* %0)
  %__begin_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 0
  %call = call i8* @_ZNSt3__115__get_nullptr_tEv()
  %coerce.dive = getelementptr inbounds %"struct.std::__1::nullptr_t", %"struct.std::__1::nullptr_t"* %coerce, i32 0, i32 0
  store i8* %call, i8** %coerce.dive, align 8
  %call2 = call i8* @_ZNKSt3__19nullptr_tcvPT_IhEEv(%"struct.std::__1::nullptr_t"* %coerce)
  store i8* %call2, i8** %__begin_, align 8, !tbaa !170
  %__end_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 1
  %call3 = call i8* @_ZNSt3__115__get_nullptr_tEv()
  %coerce.dive5 = getelementptr inbounds %"struct.std::__1::nullptr_t", %"struct.std::__1::nullptr_t"* %coerce4, i32 0, i32 0
  store i8* %call3, i8** %coerce.dive5, align 8
  %call6 = call i8* @_ZNKSt3__19nullptr_tcvPT_IhEEv(%"struct.std::__1::nullptr_t"* %coerce4)
  store i8* %call6, i8** %__end_, align 8, !tbaa !173
  %__end_cap_ = getelementptr inbounds %"class.std::__1::__vector_base", %"class.std::__1::__vector_base"* %this1, i32 0, i32 2
  %call7 = call i8* @_ZNSt3__115__get_nullptr_tEv()
  %coerce.dive9 = getelementptr inbounds %"struct.std::__1::nullptr_t", %"struct.std::__1::nullptr_t"* %coerce8, i32 0, i32 0
  store i8* %call7, i8** %coerce.dive9, align 8
  %call10 = call i8* @_ZNKSt3__19nullptr_tcvPT_IhEEv(%"struct.std::__1::nullptr_t"* %coerce8)
  call void @_ZNSt3__117__compressed_pairIPhNS_9allocatorIhEEEC1ES1_(%"class.std::__1::__compressed_pair"* %__end_cap_, i8* %call10)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define available_externally hidden void @_ZNSt3__120__vector_base_commonILb1EEC2Ev(%"class.std::__1::__vector_base_common"* %this) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__vector_base_common"*, align 8
  store %"class.std::__1::__vector_base_common"* %this, %"class.std::__1::__vector_base_common"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__vector_base_common"*, %"class.std::__1::__vector_base_common"** %this.addr, align 8
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__117__compressed_pairIPhNS_9allocatorIhEEEC1ES1_(%"class.std::__1::__compressed_pair"* %this, i8* %__t1) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair"*, align 8
  %__t1.addr = alloca i8*, align 8
  store %"class.std::__1::__compressed_pair"* %this, %"class.std::__1::__compressed_pair"** %this.addr, align 8, !tbaa !2
  store i8* %__t1, i8** %__t1.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair"*, %"class.std::__1::__compressed_pair"** %this.addr, align 8
  %0 = load i8*, i8** %__t1.addr, align 8, !tbaa !2
  call void @_ZNSt3__117__compressed_pairIPhNS_9allocatorIhEEEC2ES1_(%"class.std::__1::__compressed_pair"* %this1, i8* %0)
  ret void
}

; Function Attrs: alwaysinline ssp uwtable
define linkonce_odr hidden void @_ZNSt3__117__compressed_pairIPhNS_9allocatorIhEEEC2ES1_(%"class.std::__1::__compressed_pair"* %this, i8* %__t1) unnamed_addr #7 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__compressed_pair"*, align 8
  %__t1.addr = alloca i8*, align 8
  store %"class.std::__1::__compressed_pair"* %this, %"class.std::__1::__compressed_pair"** %this.addr, align 8, !tbaa !2
  store i8* %__t1, i8** %__t1.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__compressed_pair"*, %"class.std::__1::__compressed_pair"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__compressed_pair"* %this1 to %"class.std::__1::__libcpp_compressed_pair_imp"*
  %call = call dereferenceable(8) i8** @_ZNSt3__17forwardIPhEERT_RNS_16remove_referenceIS2_E4typeE(i8** dereferenceable(8) %__t1.addr) #16
  %1 = load i8*, i8** %call, align 8, !tbaa !2
  call void @_ZNSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EEC2ES1_(%"class.std::__1::__libcpp_compressed_pair_imp"* %0, i8* %1)
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EEC2ES1_(%"class.std::__1::__libcpp_compressed_pair_imp"* %this, i8* %__t1) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::__libcpp_compressed_pair_imp"*, align 8
  %__t1.addr = alloca i8*, align 8
  store %"class.std::__1::__libcpp_compressed_pair_imp"* %this, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8, !tbaa !2
  store i8* %__t1, i8** %__t1.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::__libcpp_compressed_pair_imp"*, %"class.std::__1::__libcpp_compressed_pair_imp"** %this.addr, align 8
  %0 = bitcast %"class.std::__1::__libcpp_compressed_pair_imp"* %this1 to %"class.std::__1::allocator"*
  call void @_ZNSt3__19allocatorIhEC2Ev(%"class.std::__1::allocator"* %0) #16
  %__first_ = getelementptr inbounds %"class.std::__1::__libcpp_compressed_pair_imp", %"class.std::__1::__libcpp_compressed_pair_imp"* %this1, i32 0, i32 0
  %call = call dereferenceable(8) i8** @_ZNSt3__17forwardIPhEERT_RNS_16remove_referenceIS2_E4typeE(i8** dereferenceable(8) %__t1.addr) #16
  %1 = load i8*, i8** %call, align 8, !tbaa !2
  store i8* %1, i8** %__first_, align 8, !tbaa !212
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__19allocatorIhEC2Ev(%"class.std::__1::allocator"* %this) unnamed_addr #5 align 2 {
entry:
  %this.addr = alloca %"class.std::__1::allocator"*, align 8
  store %"class.std::__1::allocator"* %this, %"class.std::__1::allocator"** %this.addr, align 8, !tbaa !2
  %this1 = load %"class.std::__1::allocator"*, %"class.std::__1::allocator"** %this.addr, align 8
  ret void
}

attributes #0 = { ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline noreturn nounwind }
attributes #7 = { alwaysinline ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { alwaysinline noreturn ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind }
attributes #17 = { allocsize(0) }
attributes #18 = { allocsize(1) }
attributes #19 = { noreturn nounwind }
attributes #20 = { noreturn }
attributes #21 = { builtin nounwind }
attributes #22 = { builtin }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 4.0.1 (https://github.com/llvm-mirror/clang.git 3c8961bedc65c9a15cbe67a2ef385a0938f7cfef) (https://github.com/llvm-mirror/llvm.git c8fccc53ed66d505898f8850bcc690c977a7c9a7)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"long", !4, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !4, i64 0}
!10 = !{!11, !3, i64 0}
!11 = !{!"_ZTS16LodePNGBitReader", !3, i64 0, !7, i64 8, !7, i64 16, !7, i64 24, !9, i64 32}
!12 = !{!11, !7, i64 8}
!13 = !{!11, !7, i64 16}
!14 = !{!11, !7, i64 24}
!15 = !{!11, !9, i64 32}
!16 = !{!4, !4, i64 0}
!17 = !{!18, !9, i64 0}
!18 = !{!"_ZTS7BPMNode", !9, i64 0, !9, i64 4, !3, i64 8, !9, i64 16}
!19 = !{!18, !9, i64 4}
!20 = !{!21, !9, i64 32}
!21 = !{!"_ZTS8BPMLists", !9, i64 0, !3, i64 8, !9, i64 16, !9, i64 20, !3, i64 24, !9, i64 32, !3, i64 40, !3, i64 48}
!22 = !{!21, !9, i64 0}
!23 = !{!21, !9, i64 20}
!24 = !{!21, !9, i64 16}
!25 = !{!21, !3, i64 8}
!26 = !{!21, !3, i64 24}
!27 = !{!21, !3, i64 40}
!28 = !{!21, !3, i64 48}
!29 = !{!18, !3, i64 8}
!30 = !{i64 0, i64 4, !8, i64 4, i64 4, !8, i64 8, i64 8, !2, i64 16, i64 4, !8}
!31 = !{!18, !9, i64 16}
!32 = !{!33, !3, i64 0}
!33 = !{!"_ZTS8ucvector", !3, i64 0, !7, i64 8, !7, i64 16}
!34 = !{!33, !7, i64 8}
!35 = !{!33, !7, i64 16}
!36 = !{!37, !9, i64 0}
!37 = !{!"_ZTS23LodePNGCompressSettings", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20, !3, i64 24, !3, i64 32, !3, i64 40}
!38 = !{!37, !9, i64 8}
!39 = !{!40, !9, i64 0}
!40 = !{!"_ZTS25LodePNGDecompressSettings", !9, i64 0, !9, i64 4, !3, i64 8, !3, i64 16, !3, i64 24}
!41 = !{!37, !3, i64 32}
!42 = !{!37, !9, i64 4}
!43 = !{!37, !9, i64 12}
!44 = !{!37, !9, i64 16}
!45 = !{!37, !9, i64 20}
!46 = !{!37, !3, i64 24}
!47 = !{!37, !3, i64 40}
!48 = !{!40, !9, i64 4}
!49 = !{!40, !3, i64 8}
!50 = !{!40, !3, i64 16}
!51 = !{!40, !3, i64 24}
!52 = !{!53, !9, i64 24}
!53 = !{!"_ZTS16LodePNGColorMode", !54, i64 0, !9, i64 4, !3, i64 8, !7, i64 16, !9, i64 24, !9, i64 28, !9, i64 32, !9, i64 36}
!54 = !{!"_ZTS16LodePNGColorType", !4, i64 0}
!55 = !{!53, !9, i64 36}
!56 = !{!53, !9, i64 32}
!57 = !{!53, !9, i64 28}
!58 = !{!53, !54, i64 0}
!59 = !{!53, !9, i64 4}
!60 = !{!53, !3, i64 8}
!61 = !{!53, !7, i64 16}
!62 = !{!54, !54, i64 0}
!63 = !{!64, !3, i64 80}
!64 = !{!"_ZTS11LodePNGInfo", !9, i64 0, !9, i64 4, !9, i64 8, !53, i64 16, !9, i64 56, !9, i64 60, !9, i64 64, !9, i64 68, !7, i64 72, !3, i64 80, !3, i64 88, !7, i64 96, !3, i64 104, !3, i64 112, !3, i64 120, !3, i64 128, !9, i64 136, !65, i64 140, !9, i64 164, !9, i64 168, !9, i64 172, !9, i64 176, !9, i64 180, !9, i64 184, !9, i64 188, !9, i64 192, !9, i64 196, !9, i64 200, !9, i64 204, !9, i64 208, !9, i64 212, !9, i64 216, !9, i64 220, !9, i64 224, !9, i64 228, !9, i64 232, !3, i64 240, !3, i64 248, !9, i64 256, !4, i64 264, !4, i64 288}
!65 = !{!"_ZTS11LodePNGTime", !9, i64 0, !9, i64 4, !9, i64 8, !9, i64 12, !9, i64 16, !9, i64 20}
!66 = !{!64, !7, i64 72}
!67 = !{!64, !3, i64 88}
!68 = !{!64, !7, i64 96}
!69 = !{!64, !3, i64 104}
!70 = !{!64, !3, i64 112}
!71 = !{!64, !3, i64 120}
!72 = !{!64, !3, i64 128}
!73 = !{!64, !3, i64 240}
!74 = !{!64, !9, i64 232}
!75 = !{!64, !3, i64 248}
!76 = !{!64, !9, i64 256}
!77 = !{!64, !9, i64 8}
!78 = !{!64, !9, i64 0}
!79 = !{!64, !9, i64 4}
!80 = !{!64, !9, i64 56}
!81 = !{!64, !9, i64 68}
!82 = !{!64, !9, i64 64}
!83 = !{!64, !9, i64 60}
!84 = !{!64, !9, i64 136}
!85 = !{!64, !9, i64 164}
!86 = !{!64, !9, i64 180}
!87 = !{!64, !9, i64 188}
!88 = !{!64, !9, i64 224}
!89 = !{!90, !90, i64 0}
!90 = !{!"short", !4, i64 0}
!91 = !{!92, !9, i64 128}
!92 = !{!"_ZTS9ColorTree", !4, i64 0, !9, i64 128}
!93 = !{!94, !9, i64 0}
!94 = !{!"_ZTS17LodePNGColorStats", !9, i64 0, !9, i64 4, !90, i64 8, !90, i64 10, !90, i64 12, !9, i64 16, !9, i64 20, !4, i64 24, !9, i64 1048, !7, i64 1056, !9, i64 1064, !9, i64 1068}
!95 = !{!94, !9, i64 4}
!96 = !{!94, !90, i64 12}
!97 = !{!94, !90, i64 10}
!98 = !{!94, !90, i64 8}
!99 = !{!94, !9, i64 16}
!100 = !{!94, !9, i64 20}
!101 = !{!94, !9, i64 1048}
!102 = !{!94, !7, i64 1056}
!103 = !{!94, !9, i64 1064}
!104 = !{!94, !9, i64 1068}
!105 = !{!106, !9, i64 496}
!106 = !{!"_ZTS12LodePNGState", !107, i64 0, !108, i64 56, !53, i64 144, !64, i64 184, !9, i64 496}
!107 = !{!"_ZTS22LodePNGDecoderSettings", !40, i64 0, !9, i64 32, !9, i64 36, !9, i64 40, !9, i64 44, !9, i64 48, !9, i64 52}
!108 = !{!"_ZTS22LodePNGEncoderSettings", !37, i64 0, !9, i64 48, !9, i64 52, !109, i64 56, !3, i64 64, !9, i64 72, !9, i64 76, !9, i64 80}
!109 = !{!"_ZTS21LodePNGFilterStrategy", !4, i64 0}
!110 = !{!64, !9, i64 20}
!111 = !{!64, !54, i64 16}
!112 = !{!106, !9, i64 32}
!113 = !{!64, !7, i64 32}
!114 = !{!64, !9, i64 140}
!115 = !{!64, !9, i64 144}
!116 = !{!64, !9, i64 148}
!117 = !{!64, !9, i64 152}
!118 = !{!64, !9, i64 156}
!119 = !{!64, !9, i64 160}
!120 = !{!64, !9, i64 168}
!121 = !{!64, !9, i64 172}
!122 = !{!64, !9, i64 176}
!123 = !{!64, !9, i64 184}
!124 = !{!64, !9, i64 192}
!125 = !{!64, !9, i64 196}
!126 = !{!64, !9, i64 200}
!127 = !{!64, !9, i64 204}
!128 = !{!64, !9, i64 208}
!129 = !{!64, !9, i64 212}
!130 = !{!64, !9, i64 216}
!131 = !{!64, !9, i64 220}
!132 = !{!64, !9, i64 228}
!133 = !{!106, !9, i64 44}
!134 = !{!106, !54, i64 144}
!135 = !{!106, !9, i64 148}
!136 = !{!106, !9, i64 40}
!137 = !{!106, !9, i64 48}
!138 = !{!106, !9, i64 36}
!139 = !{!106, !9, i64 52}
!140 = !{!106, !54, i64 200}
!141 = !{!106, !3, i64 208}
!142 = !{!106, !9, i64 192}
!143 = !{!107, !9, i64 44}
!144 = !{!107, !9, i64 48}
!145 = !{!107, !9, i64 52}
!146 = !{!107, !9, i64 32}
!147 = !{!107, !9, i64 36}
!148 = !{!107, !9, i64 40}
!149 = !{!108, !9, i64 52}
!150 = !{!108, !109, i64 56}
!151 = !{!108, !9, i64 48}
!152 = !{!108, !9, i64 72}
!153 = !{!108, !3, i64 64}
!154 = !{!108, !9, i64 76}
!155 = !{!108, !9, i64 80}
!156 = !{i64 0, i64 4, !8, i64 4, i64 4, !8, i64 8, i64 8, !2, i64 16, i64 8, !2, i64 24, i64 8, !2, i64 32, i64 4, !8, i64 36, i64 4, !8, i64 40, i64 4, !8, i64 44, i64 4, !8, i64 48, i64 4, !8, i64 52, i64 4, !8, i64 56, i64 4, !8, i64 60, i64 4, !8, i64 64, i64 4, !8, i64 68, i64 4, !8, i64 72, i64 4, !8, i64 76, i64 4, !8, i64 80, i64 8, !2, i64 88, i64 8, !2, i64 96, i64 8, !2, i64 104, i64 4, !8, i64 108, i64 4, !8, i64 112, i64 4, !157, i64 120, i64 8, !2, i64 128, i64 4, !8, i64 132, i64 4, !8, i64 136, i64 4, !8, i64 144, i64 4, !62, i64 148, i64 4, !8, i64 152, i64 8, !2, i64 160, i64 8, !6, i64 168, i64 4, !8, i64 172, i64 4, !8, i64 176, i64 4, !8, i64 180, i64 4, !8, i64 184, i64 4, !8, i64 188, i64 4, !8, i64 192, i64 4, !8, i64 200, i64 4, !62, i64 204, i64 4, !8, i64 208, i64 8, !2, i64 216, i64 8, !6, i64 224, i64 4, !8, i64 228, i64 4, !8, i64 232, i64 4, !8, i64 236, i64 4, !8, i64 240, i64 4, !8, i64 244, i64 4, !8, i64 248, i64 4, !8, i64 252, i64 4, !8, i64 256, i64 8, !6, i64 264, i64 8, !2, i64 272, i64 8, !2, i64 280, i64 8, !6, i64 288, i64 8, !2, i64 296, i64 8, !2, i64 304, i64 8, !2, i64 312, i64 8, !2, i64 320, i64 4, !8, i64 324, i64 4, !8, i64 328, i64 4, !8, i64 332, i64 4, !8, i64 336, i64 4, !8, i64 340, i64 4, !8, i64 344, i64 4, !8, i64 348, i64 4, !8, i64 352, i64 4, !8, i64 356, i64 4, !8, i64 360, i64 4, !8, i64 364, i64 4, !8, i64 368, i64 4, !8, i64 372, i64 4, !8, i64 376, i64 4, !8, i64 380, i64 4, !8, i64 384, i64 4, !8, i64 388, i64 4, !8, i64 392, i64 4, !8, i64 396, i64 4, !8, i64 400, i64 4, !8, i64 404, i64 4, !8, i64 408, i64 4, !8, i64 412, i64 4, !8, i64 416, i64 4, !8, i64 424, i64 8, !2, i64 432, i64 8, !2, i64 440, i64 4, !8, i64 448, i64 24, !16, i64 472, i64 24, !16, i64 496, i64 4, !8}
!157 = !{!109, !109, i64 0}
!158 = !{!106, !9, i64 128}
!159 = !{!106, !9, i64 56}
!160 = !{!106, !9, i64 104}
!161 = !{!106, !9, i64 136}
!162 = !{!106, !9, i64 132}
!163 = !{!65, !9, i64 0}
!164 = !{!65, !9, i64 4}
!165 = !{!65, !9, i64 8}
!166 = !{!65, !9, i64 12}
!167 = !{!65, !9, i64 16}
!168 = !{!65, !9, i64 20}
!169 = !{!106, !9, i64 204}
!170 = !{!171, !3, i64 0}
!171 = !{!"_ZTSNSt3__113__vector_baseIhNS_9allocatorIhEEEE", !3, i64 0, !3, i64 8, !172, i64 16}
!172 = !{!"_ZTSNSt3__117__compressed_pairIPhNS_9allocatorIhEEEE"}
!173 = !{!171, !3, i64 8}
!174 = !{!175, !3, i64 0}
!175 = !{!"_ZTS11HuffmanTree", !3, i64 0, !3, i64 8, !9, i64 16, !9, i64 20, !3, i64 24, !3, i64 32}
!176 = !{!175, !3, i64 8}
!177 = !{!175, !3, i64 24}
!178 = !{!175, !3, i64 32}
!179 = !{!175, !9, i64 20}
!180 = !{!175, !9, i64 16}
!181 = !{!182, !3, i64 0}
!182 = !{!"_ZTS16LodePNGBitWriter", !3, i64 0, !4, i64 8}
!183 = !{!182, !4, i64 8}
!184 = !{!185, !3, i64 0}
!185 = !{!"_ZTS4Hash", !3, i64 0, !3, i64 8, !3, i64 16, !3, i64 24, !3, i64 32, !3, i64 40}
!186 = !{!185, !3, i64 16}
!187 = !{!185, !3, i64 8}
!188 = !{!185, !3, i64 40}
!189 = !{!185, !3, i64 24}
!190 = !{!185, !3, i64 32}
!191 = !{!192, !3, i64 0}
!192 = !{!"_ZTS8uivector", !3, i64 0, !7, i64 8, !7, i64 16}
!193 = !{!192, !7, i64 8}
!194 = !{!192, !7, i64 16}
!195 = !{!196, !3, i64 0}
!196 = !{!"_ZTSNSt3__19nullptr_tE", !3, i64 0}
!197 = !{!198, !3, i64 16}
!198 = !{!"_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__longE", !7, i64 0, !7, i64 8, !3, i64 16}
!199 = !{!200, !3, i64 16}
!200 = !{!"_ZTSNSt3__114__split_bufferIhRNS_9allocatorIhEEEE", !3, i64 0, !3, i64 8, !3, i64 16, !201, i64 24}
!201 = !{!"_ZTSNSt3__117__compressed_pairIPhRNS_9allocatorIhEEEE"}
!202 = !{!200, !3, i64 8}
!203 = !{!200, !3, i64 0}
!204 = !{!205, !3, i64 0}
!205 = !{!"_ZTSNSt3__128__libcpp_compressed_pair_impIPhRNS_9allocatorIhEELj0EEE", !3, i64 0, !4, i64 8}
!206 = !{!207, !207, i64 0}
!207 = !{!"vtable pointer", !5, i64 0}
!208 = !{!209, !3, i64 0}
!209 = !{!"_ZTSNSt3__111__wrap_iterIPhEE", !3, i64 0}
!210 = !{!211, !3, i64 0}
!211 = !{!"_ZTSNSt3__111__wrap_iterIPKhEE", !3, i64 0}
!212 = !{!213, !3, i64 0}
!213 = !{!"_ZTSNSt3__128__libcpp_compressed_pair_impIPhNS_9allocatorIhEELj2EEE", !3, i64 0}
