; ModuleID = 'miniz.c'
source_filename = "miniz.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.0"

%struct.anon = type { i32, i8* }
%struct.mz_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.mz_internal_state*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.mz_internal_state = type opaque
%struct.tdefl_compressor = type { i32 (i8*, i32, i8*)*, i8*, i32, [2 x i32], i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64*, i64*, i32, i8*, i64, i64, [33025 x i8], [3 x [288 x i16]], [3 x [288 x i16]], [3 x [288 x i8]], [65536 x i8], [32768 x i16], [32768 x i16], [85196 x i8] }
%struct.inflate_state = type { %struct.tinfl_decompressor_tag, i32, i32, i32, i32, i32, [32768 x i8], i32 }
%struct.tinfl_decompressor_tag = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], i64, i64, [3 x %struct.tinfl_huff_table], [4 x i8], [457 x i8] }
%struct.tinfl_huff_table = type { [288 x i8], [1024 x i16], [576 x i16] }
%struct.tdefl_output_buffer = type { i64, i64, i8*, i32 }
%struct.mz_zip_archive = type { i64, i64, i32, i32, i32, i32, i64, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i8* (i8*, i8*, i64, i64)*, i8*, i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)*, i32 (i8*)*, i8*, %struct.mz_zip_internal_state_tag* }
%struct.mz_zip_internal_state_tag = type { %struct.mz_zip_array, %struct.mz_zip_array, %struct.mz_zip_array, i32, i32, i32, %struct.__sFILE*, i64, i8*, i64, i64 }
%struct.mz_zip_array = type { i8*, i64, i64, i32 }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct.mz_zip_archive_file_stat = type { i32, i64, i16, i16, i16, i16, i64, i32, i64, i64, i16, i32, i64, i32, i32, i32, i32, [512 x i8], [512 x i8] }
%struct.mz_zip_reader_extract_iter_state = type { %struct.mz_zip_archive*, i32, i32, i32, i64, i64, i64, i64, i64, i64, %struct.mz_zip_archive_file_stat, i8*, i8*, i64, %struct.tinfl_decompressor_tag }
%struct.utimbuf = type { i64, i64 }
%struct.mz_zip_writer_add_state = type { %struct.mz_zip_archive*, i64, i64 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.stat = type { i32, i16, i16, i64, i32, i32, i32, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64, i32, i32, i32, i32, [2 x i64] }
%struct.timespec = type { i64, i64 }
%struct.tdefl_sym_freq = type { i16, i16 }

@mz_crc32.s_crc_table = internal constant [256 x i32] [i32 0, i32 1996959894, i32 -301047508, i32 -1727442502, i32 124634137, i32 1886057615, i32 -379345611, i32 -1637575261, i32 249268274, i32 2044508324, i32 -522852066, i32 -1747789432, i32 162941995, i32 2125561021, i32 -407360249, i32 -1866523247, i32 498536548, i32 1789927666, i32 -205950648, i32 -2067906082, i32 450548861, i32 1843258603, i32 -187386543, i32 -2083289657, i32 325883990, i32 1684777152, i32 -43845254, i32 -1973040660, i32 335633487, i32 1661365465, i32 -99664541, i32 -1928851979, i32 997073096, i32 1281953886, i32 -715111964, i32 -1570279054, i32 1006888145, i32 1258607687, i32 -770865667, i32 -1526024853, i32 901097722, i32 1119000684, i32 -608450090, i32 -1396901568, i32 853044451, i32 1172266101, i32 -589951537, i32 -1412350631, i32 651767980, i32 1373503546, i32 -925412992, i32 -1076862698, i32 565507253, i32 1454621731, i32 -809855591, i32 -1195530993, i32 671266974, i32 1594198024, i32 -972236366, i32 -1324619484, i32 795835527, i32 1483230225, i32 -1050600021, i32 -1234817731, i32 1994146192, i32 31158534, i32 -1731059524, i32 -271249366, i32 1907459465, i32 112637215, i32 -1614814043, i32 -390540237, i32 2013776290, i32 251722036, i32 -1777751922, i32 -519137256, i32 2137656763, i32 141376813, i32 -1855689577, i32 -429695999, i32 1802195444, i32 476864866, i32 -2056965928, i32 -228458418, i32 1812370925, i32 453092731, i32 -2113342271, i32 -183516073, i32 1706088902, i32 314042704, i32 -1950435094, i32 -54949764, i32 1658658271, i32 366619977, i32 -1932296973, i32 -69972891, i32 1303535960, i32 984961486, i32 -1547960204, i32 -725929758, i32 1256170817, i32 1037604311, i32 -1529756563, i32 -740887301, i32 1131014506, i32 879679996, i32 -1385723834, i32 -631195440, i32 1141124467, i32 855842277, i32 -1442165665, i32 -586318647, i32 1342533948, i32 654459306, i32 -1106571248, i32 -921952122, i32 1466479909, i32 544179635, i32 -1184443383, i32 -832445281, i32 1591671054, i32 702138776, i32 -1328506846, i32 -942167884, i32 1504918807, i32 783551873, i32 -1212326853, i32 -1061524307, i32 -306674912, i32 -1698712650, i32 62317068, i32 1957810842, i32 -355121351, i32 -1647151185, i32 81470997, i32 1943803523, i32 -480048366, i32 -1805370492, i32 225274430, i32 2053790376, i32 -468791541, i32 -1828061283, i32 167816743, i32 2097651377, i32 -267414716, i32 -2029476910, i32 503444072, i32 1762050814, i32 -144550051, i32 -2140837941, i32 426522225, i32 1852507879, i32 -19653770, i32 -1982649376, i32 282753626, i32 1742555852, i32 -105259153, i32 -1900089351, i32 397917763, i32 1622183637, i32 -690576408, i32 -1580100738, i32 953729732, i32 1340076626, i32 -776247311, i32 -1497606297, i32 1068828381, i32 1219638859, i32 -670225446, i32 -1358292148, i32 906185462, i32 1090812512, i32 -547295293, i32 -1469587627, i32 829329135, i32 1181335161, i32 -882789492, i32 -1134132454, i32 628085408, i32 1382605366, i32 -871598187, i32 -1156888829, i32 570562233, i32 1426400815, i32 -977650754, i32 -1296233688, i32 733239954, i32 1555261956, i32 -1026031705, i32 -1244606671, i32 752459403, i32 1541320221, i32 -1687895376, i32 -328994266, i32 1969922972, i32 40735498, i32 -1677130071, i32 -351390145, i32 1913087877, i32 83908371, i32 -1782625662, i32 -491226604, i32 2075208622, i32 213261112, i32 -1831694693, i32 -438977011, i32 2094854071, i32 198958881, i32 -2032938284, i32 -237706686, i32 1759359992, i32 534414190, i32 -2118248755, i32 -155638181, i32 1873836001, i32 414664567, i32 -2012718362, i32 -15766928, i32 1711684554, i32 285281116, i32 -1889165569, i32 -127750551, i32 1634467795, i32 376229701, i32 -1609899400, i32 -686959890, i32 1308918612, i32 956543938, i32 -1486412191, i32 -799009033, i32 1231636301, i32 1047427035, i32 -1362007478, i32 -640263460, i32 1088359270, i32 936918000, i32 -1447252397, i32 -558129467, i32 1202900863, i32 817233897, i32 -1111625188, i32 -893730166, i32 1404277552, i32 615818150, i32 -1160759803, i32 -841546093, i32 1423857449, i32 601450431, i32 -1285129682, i32 -1000256840, i32 1567103746, i32 711928724, i32 -1274298825, i32 -1022587231, i32 1510334235, i32 755167117], align 16
@.str = private unnamed_addr constant [7 x i8] c"10.1.0\00", align 1
@mz_error.s_error_descs = internal global [10 x %struct.anon] [%struct.anon { i32 0, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i32 0, i32 0) }, %struct.anon { i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i32 0, i32 0) }, %struct.anon { i32 2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i32 0, i32 0) }, %struct.anon { i32 -1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i32 0, i32 0) }, %struct.anon { i32 -2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i32 0, i32 0) }, %struct.anon { i32 -3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0) }, %struct.anon { i32 -4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i32 0, i32 0) }, %struct.anon { i32 -5, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i32 0, i32 0) }, %struct.anon { i32 -6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0) }, %struct.anon { i32 -10000, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i32 0, i32 0) }], align 16
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"stream end\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"need dictionary\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"file error\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"stream error\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"data error\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"out of memory\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"buf error\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"version error\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"parameter error\00", align 1
@__func__.tdefl_compress_buffer = private unnamed_addr constant [22 x i8] c"tdefl_compress_buffer\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"miniz.c\00", align 1
@.str.12 = private unnamed_addr constant [19 x i8] c"d->m_pPut_buf_func\00", align 1
@s_tdefl_num_probes = internal constant [11 x i32] [i32 0, i32 1, i32 6, i32 32, i32 16, i32 32, i32 128, i32 256, i32 512, i32 768, i32 1500], align 16
@tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes = internal constant [11 x i32] [i32 0, i32 1, i32 6, i32 32, i32 16, i32 32, i32 128, i32 256, i32 512, i32 768, i32 1500], align 16
@tdefl_write_image_to_png_file_in_memory_ex.chans = internal constant [5 x i8] c"\00\00\04\02\06", align 1
@__const.tdefl_write_image_to_png_file_in_memory_ex.pnghdr = private unnamed_addr constant [41 x i8] c"\89PNG\0D\0A\1A\0A\00\00\00\0DIHDR\00\00\00\00\00\00\00\00\08\00\00\00\00\00\00\00\00\00\00\00\00IDAT", align 16
@.str.13 = private unnamed_addr constant [17 x i8] c"\00\00\00\00\00\00\00\00IEND\AEB`\82\00", align 1
@tinfl_decompress.s_length_base = internal constant [31 x i32] [i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 13, i32 15, i32 17, i32 19, i32 23, i32 27, i32 31, i32 35, i32 43, i32 51, i32 59, i32 67, i32 83, i32 99, i32 115, i32 131, i32 163, i32 195, i32 227, i32 258, i32 0, i32 0], align 16
@tinfl_decompress.s_length_extra = internal constant [31 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0], align 16
@tinfl_decompress.s_dist_base = internal constant [32 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 7, i32 9, i32 13, i32 17, i32 25, i32 33, i32 49, i32 65, i32 97, i32 129, i32 193, i32 257, i32 385, i32 513, i32 769, i32 1025, i32 1537, i32 2049, i32 3073, i32 4097, i32 6145, i32 8193, i32 12289, i32 16385, i32 24577, i32 0, i32 0], align 16
@tinfl_decompress.s_dist_extra = internal constant [32 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13, i32 0, i32 0], align 16
@tinfl_decompress.s_length_dezigzag = internal constant [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16
@tinfl_decompress.s_min_table_sizes = internal constant [3 x i32] [i32 257, i32 1, i32 4], align 4
@.str.14 = private unnamed_addr constant [4 x i8] c"\05\05\04\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"\02\03\07\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"\03\03\0B\00", align 1
@__func__.tinfl_decompress = private unnamed_addr constant [17 x i8] c"tinfl_decompress\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"!num_bits\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"w+b\00", align 1
@.str.21 = private unnamed_addr constant [4 x i8] c"r+b\00", align 1
@__func__.mz_zip_writer_add_mem_ex_v2 = private unnamed_addr constant [28 x i8] c"mz_zip_writer_add_mem_ex_v2\00", align 1
@.str.22 = private unnamed_addr constant [66 x i8] c"(local_dir_header_ofs & (pZip->m_file_offset_alignment - 1)) == 0\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"bit_flags & MZ_ZIP_LDH_BIT_FLAG_HAS_LOCATOR\00", align 1
@__func__.mz_zip_writer_add_read_buf_callback = private unnamed_addr constant [36 x i8] c"mz_zip_writer_add_read_buf_callback\00", align 1
@.str.24 = private unnamed_addr constant [66 x i8] c"(cur_archive_file_ofs & (pZip->m_file_offset_alignment - 1)) == 0\00", align 1
@__func__.mz_zip_writer_add_from_zip_reader = private unnamed_addr constant [34 x i8] c"mz_zip_writer_add_from_zip_reader\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"no error\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"undefined error\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c"too many files\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"file too large\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"unsupported method\00", align 1
@.str.30 = private unnamed_addr constant [23 x i8] c"unsupported encryption\00", align 1
@.str.31 = private unnamed_addr constant [20 x i8] c"unsupported feature\00", align 1
@.str.32 = private unnamed_addr constant [33 x i8] c"failed finding central directory\00", align 1
@.str.33 = private unnamed_addr constant [18 x i8] c"not a ZIP archive\00", align 1
@.str.34 = private unnamed_addr constant [39 x i8] c"invalid header or archive is corrupted\00", align 1
@.str.35 = private unnamed_addr constant [30 x i8] c"unsupported multidisk archive\00", align 1
@.str.36 = private unnamed_addr constant [45 x i8] c"decompression failed or archive is corrupted\00", align 1
@.str.37 = private unnamed_addr constant [19 x i8] c"compression failed\00", align 1
@.str.38 = private unnamed_addr constant [29 x i8] c"unexpected decompressed size\00", align 1
@.str.39 = private unnamed_addr constant [20 x i8] c"CRC-32 check failed\00", align 1
@.str.40 = private unnamed_addr constant [35 x i8] c"unsupported central directory size\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"allocation failed\00", align 1
@.str.42 = private unnamed_addr constant [17 x i8] c"file open failed\00", align 1
@.str.43 = private unnamed_addr constant [19 x i8] c"file create failed\00", align 1
@.str.44 = private unnamed_addr constant [18 x i8] c"file write failed\00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c"file read failed\00", align 1
@.str.46 = private unnamed_addr constant [18 x i8] c"file close failed\00", align 1
@.str.47 = private unnamed_addr constant [17 x i8] c"file seek failed\00", align 1
@.str.48 = private unnamed_addr constant [17 x i8] c"file stat failed\00", align 1
@.str.49 = private unnamed_addr constant [18 x i8] c"invalid parameter\00", align 1
@.str.50 = private unnamed_addr constant [17 x i8] c"invalid filename\00", align 1
@.str.51 = private unnamed_addr constant [17 x i8] c"buffer too small\00", align 1
@.str.52 = private unnamed_addr constant [15 x i8] c"internal error\00", align 1
@.str.53 = private unnamed_addr constant [15 x i8] c"file not found\00", align 1
@.str.54 = private unnamed_addr constant [21 x i8] c"archive is too large\00", align 1
@.str.55 = private unnamed_addr constant [18 x i8] c"validation failed\00", align 1
@.str.56 = private unnamed_addr constant [24 x i8] c"write calledback failed\00", align 1
@.str.57 = private unnamed_addr constant [14 x i8] c"unknown error\00", align 1
@__func__.tdefl_compress_fast = private unnamed_addr constant [20 x i8] c"tdefl_compress_fast\00", align 1
@.str.58 = private unnamed_addr constant [106 x i8] c"(cur_match_len >= TDEFL_MIN_MATCH_LEN) && (cur_match_dist >= 1) && (cur_match_dist <= TDEFL_LZ_DICT_SIZE)\00", align 1
@s_tdefl_small_dist_sym = internal constant [512 x i8] calign 16
@s_tdefl_large_dist_sym = internal constant [128 x i8] c"\00\00\12\13\14\14\15\15\16\16\16\16\17\17\17\17\18\18\18\18\18\18\18\18\19\19\19\19\19\19\19\19\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1A\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1B\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D\1D", align 16
@s_tdefl_len_sym = internal constant [256 x i16] [i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 265, i16 266, i16 266, i16 267, i16 267, i16 268, i16 268, i16 269, i16 269, i16 269, i16 269, i16 270, i16 270, i16 270, i16 270, i16 271, i16 271, i16 271, i16 271, i16 272, i16 272, i16 272, i16 272, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 273, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 274, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 275, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 276, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 277, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 278, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 279, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 280, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 281, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 282, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 283, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 284, i16 285], align 16
@.str.59 = private unnamed_addr constant [32 x i8] c"lookahead_size >= cur_match_len\00", align 1
@__func__.tdefl_compress_normal = private unnamed_addr constant [22 x i8] c"tdefl_compress_normal\00", align 1
@.str.60 = private unnamed_addr constant [35 x i8] c"d->m_lookahead_size >= len_to_move\00", align 1
@__func__.tdefl_find_match = private unnamed_addr constant [17 x i8] c"tdefl_find_match\00", align 1
@.str.61 = private unnamed_addr constant [37 x i8] c"max_match_len <= TDEFL_MAX_MATCH_LEN\00", align 1
@__func__.tdefl_record_match = private unnamed_addr constant [19 x i8] c"tdefl_record_match\00", align 1
@.str.62 = private unnamed_addr constant [94 x i8] c"(match_len >= TDEFL_MIN_MATCH_LEN) && (match_dist >= 1) && (match_dist <= TDEFL_LZ_DICT_SIZE)\00", align 1
@__func__.tdefl_flush_block = private unnamed_addr constant [18 x i8] c"tdefl_flush_block\00", align 1
@.str.63 = private unnamed_addr constant [29 x i8] c"!d->m_output_flush_remaining\00", align 1
@.str.64 = private unnamed_addr constant [27 x i8] c"bits <= ((1U << len) - 1U)\00", align 1
@.str.65 = private unnamed_addr constant [40 x i8] c"d->m_pOutput_buf < d->m_pOutput_buf_end\00", align 1
@__func__.tdefl_start_static_block = private unnamed_addr constant [25 x i8] c"tdefl_start_static_block\00", align 1
@__func__.tdefl_start_dynamic_block = private unnamed_addr constant [26 x i8] c"tdefl_start_dynamic_block\00", align 1
@s_tdefl_packed_code_size_syms_swizzle = internal global [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16
@.str.66 = private unnamed_addr constant [32 x i8] c"code < TDEFL_MAX_HUFF_SYMBOLS_2\00", align 1
@__func__.tdefl_compress_lz_codes = private unnamed_addr constant [24 x i8] c"tdefl_compress_lz_codes\00", align 1
@.str.67 = private unnamed_addr constant [52 x i8] c"d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]\00", align 1
@mz_bitmasks = internal constant [17 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255, i32 511, i32 1023, i32 2047, i32 4095, i32 8191, i32 16383, i32 32767, i32 65535], align 16
@s_tdefl_len_extra = internal constant [256 x i8] calign 16
@s_tdefl_small_dist_extra = internal constant [512 x i8] c"\00\00\00\00\01\01\01\01\02\02\02\02\02\02\02\02\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07\07", align 16
@s_tdefl_large_dist_extra = internal constant [128 x i8] c"\00\00\08\08\09\09\09\09\0A\0A\0A\0A\0A\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D", align 16
@.str.68 = private unnamed_addr constant [29 x i8] c"d->m_huff_code_sizes[1][sym]\00", align 1
@.str.69 = private unnamed_addr constant [29 x i8] c"d->m_huff_code_sizes[0][lit]\00", align 1
@__func__.mz_zip_array_ensure_capacity = private unnamed_addr constant [29 x i8] c"mz_zip_array_ensure_capacity\00", align 1
@.str.70 = private unnamed_addr constant [23 x i8] c"pArray->m_element_size\00", align 1

; Function Attrs: nounwind ssp uwtable
define i64 @mz_adler32(i64 %adler, i8* %ptr, i64 %buf_len) #0 {
entry:
  %retval = alloca i64, align 8
  %adler.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %block_len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i64 %adler, i64* %adler.addr, align 8, !tbaa !4
  store i8* %ptr, i8** %ptr.addr, align 8, !tbaa !8
  store i64 %buf_len, i64* %buf_len.addr, align 8, !tbaa !4
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = load i64, i64* %adler.addr, align 8, !tbaa !4
  %and = and i64 %2, 65535
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %s1, align 4, !tbaa !10
  %3 = bitcast i32* %s2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = load i64, i64* %adler.addr, align 8, !tbaa !4
  %shr = lshr i64 %4, 16
  %conv1 = trunc i64 %shr to i32
  store i32 %conv1, i32* %s2, align 4, !tbaa !10
  %5 = bitcast i64* %block_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %rem = urem i64 %6, 5552
  store i64 %rem, i64* %block_len, align 8, !tbaa !4
  %7 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %tobool = icmp ne i8* %7, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 1, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %for.end46, %if.end
  %8 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %tobool2 = icmp ne i64 %8, 0
  br i1 %tobool2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %9 = load i32, i32* %i, align 4, !tbaa !10
  %add = add i32 %9, 7
  %conv3 = zext i32 %add to i64
  %10 = load i64, i64* %block_len, align 8, !tbaa !4
  %cmp = icmp ult i64 %conv3, %10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx, align 1, !tbaa !12
  %conv5 = zext i8 %12 to i32
  %13 = load i32, i32* %s1, align 4, !tbaa !10
  %add6 = add i32 %13, %conv5
  store i32 %add6, i32* %s1, align 4, !tbaa !10
  %14 = load i32, i32* %s1, align 4, !tbaa !10
  %15 = load i32, i32* %s2, align 4, !tbaa !10
  %add7 = add i32 %15, %14
  store i32 %add7, i32* %s2, align 4, !tbaa !10
  %16 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %arrayidx8 = getelementptr inbounds i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx8, align 1, !tbaa !12
  %conv9 = zext i8 %17 to i32
  %18 = load i32, i32* %s1, align 4, !tbaa !10
  %add10 = add i32 %18, %conv9
  store i32 %add10, i32* %s1, align 4, !tbaa !10
  %19 = load i32, i32* %s1, align 4, !tbaa !10
  %20 = load i32, i32* %s2, align 4, !tbaa !10
  %add11 = add i32 %20, %19
  store i32 %add11, i32* %s2, align 4, !tbaa !10
  %21 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %arrayidx12 = getelementptr inbounds i8, i8* %21, i64 2
  %22 = load i8, i8* %arrayidx12, align 1, !tbaa !12
  %conv13 = zext i8 %22 to i32
  %23 = load i32, i32* %s1, align 4, !tbaa !10
  %add14 = add i32 %23, %conv13
  store i32 %add14, i32* %s1, align 4, !tbaa !10
  %24 = load i32, i32* %s1, align 4, !tbaa !10
  %25 = load i32, i32* %s2, align 4, !tbaa !10
  %add15 = add i32 %25, %24
  store i32 %add15, i32* %s2, align 4, !tbaa !10
  %26 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %arrayidx16 = getelementptr inbounds i8, i8* %26, i64 3
  %27 = load i8, i8* %arrayidx16, align 1, !tbaa !12
  %conv17 = zext i8 %27 to i32
  %28 = load i32, i32* %s1, align 4, !tbaa !10
  %add18 = add i32 %28, %conv17
  store i32 %add18, i32* %s1, align 4, !tbaa !10
  %29 = load i32, i32* %s1, align 4, !tbaa !10
  %30 = load i32, i32* %s2, align 4, !tbaa !10
  %add19 = add i32 %30, %29
  store i32 %add19, i32* %s2, align 4, !tbaa !10
  %31 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %arrayidx20 = getelementptr inbounds i8, i8* %31, i64 4
  %32 = load i8, i8* %arrayidx20, align 1, !tbaa !12
  %conv21 = zext i8 %32 to i32
  %33 = load i32, i32* %s1, align 4, !tbaa !10
  %add22 = add i32 %33, %conv21
  store i32 %add22, i32* %s1, align 4, !tbaa !10
  %34 = load i32, i32* %s1, align 4, !tbaa !10
  %35 = load i32, i32* %s2, align 4, !tbaa !10
  %add23 = add i32 %35, %34
  store i32 %add23, i32* %s2, align 4, !tbaa !10
  %36 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %arrayidx24 = getelementptr inbounds i8, i8* %36, i64 5
  %37 = load i8, i8* %arrayidx24, align 1, !tbaa !12
  %conv25 = zext i8 %37 to i32
  %38 = load i32, i32* %s1, align 4, !tbaa !10
  %add26 = add i32 %38, %conv25
  store i32 %add26, i32* %s1, align 4, !tbaa !10
  %39 = load i32, i32* %s1, align 4, !tbaa !10
  %40 = load i32, i32* %s2, align 4, !tbaa !10
  %add27 = add i32 %40, %39
  store i32 %add27, i32* %s2, align 4, !tbaa !10
  %41 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %arrayidx28 = getelementptr inbounds i8, i8* %41, i64 6
  %42 = load i8, i8* %arrayidx28, align 1, !tbaa !12
  %conv29 = zext i8 %42 to i32
  %43 = load i32, i32* %s1, align 4, !tbaa !10
  %add30 = add i32 %43, %conv29
  store i32 %add30, i32* %s1, align 4, !tbaa !10
  %44 = load i32, i32* %s1, align 4, !tbaa !10
  %45 = load i32, i32* %s2, align 4, !tbaa !10
  %add31 = add i32 %45, %44
  store i32 %add31, i32* %s2, align 4, !tbaa !10
  %46 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %arrayidx32 = getelementptr inbounds i8, i8* %46, i64 7
  %47 = load i8, i8* %arrayidx32, align 1, !tbaa !12
  %conv33 = zext i8 %47 to i32
  %48 = load i32, i32* %s1, align 4, !tbaa !10
  %add34 = add i32 %48, %conv33
  store i32 %add34, i32* %s1, align 4, !tbaa !10
  %49 = load i32, i32* %s1, align 4, !tbaa !10
  %50 = load i32, i32* %s2, align 4, !tbaa !10
  %add35 = add i32 %50, %49
  store i32 %add35, i32* %s2, align 4, !tbaa !10
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %51 = load i32, i32* %i, align 4, !tbaa !10
  %add36 = add i32 %51, 8
  store i32 %add36, i32* %i, align 4, !tbaa !10
  %52 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 8
  store i8* %add.ptr, i8** %ptr.addr, align 8, !tbaa !8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc45, %for.end
  %53 = load i32, i32* %i, align 4, !tbaa !10
  %conv38 = zext i32 %53 to i64
  %54 = load i64, i64* %block_len, align 8, !tbaa !4
  %cmp39 = icmp ult i64 %conv38, %54
  br i1 %cmp39, label %for.body41, label %for.end46

for.body41:                                       ; preds = %for.cond37
  %55 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %incdec.ptr, i8** %ptr.addr, align 8, !tbaa !8
  %56 = load i8, i8* %55, align 1, !tbaa !12
  %conv42 = zext i8 %56 to i32
  %57 = load i32, i32* %s1, align 4, !tbaa !10
  %add43 = add i32 %57, %conv42
  store i32 %add43, i32* %s1, align 4, !tbaa !10
  %58 = load i32, i32* %s1, align 4, !tbaa !10
  %59 = load i32, i32* %s2, align 4, !tbaa !10
  %add44 = add i32 %59, %58
  store i32 %add44, i32* %s2, align 4, !tbaa !10
  br label %for.inc45

for.inc45:                                        ; preds = %for.body41
  %60 = load i32, i32* %i, align 4, !tbaa !10
  %inc = add i32 %60, 1
  store i32 %inc, i32* %i, align 4, !tbaa !10
  br label %for.cond37

for.end46:                                        ; preds = %for.cond37
  %61 = load i32, i32* %s1, align 4, !tbaa !10
  %rem47 = urem i32 %61, 65521
  store i32 %rem47, i32* %s1, align 4, !tbaa !10
  %62 = load i32, i32* %s2, align 4, !tbaa !10
  %rem48 = urem i32 %62, 65521
  store i32 %rem48, i32* %s2, align 4, !tbaa !10
  %63 = load i64, i64* %block_len, align 8, !tbaa !4
  %64 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %sub = sub i64 %64, %63
  store i64 %sub, i64* %buf_len.addr, align 8, !tbaa !4
  store i64 5552, i64* %block_len, align 8, !tbaa !4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %65 = load i32, i32* %s2, align 4, !tbaa !10
  %shl = shl i32 %65, 16
  %66 = load i32, i32* %s1, align 4, !tbaa !10
  %add49 = add i32 %shl, %66
  %conv50 = zext i32 %add49 to i64
  store i64 %conv50, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then
  %67 = bitcast i64* %block_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #10
  %68 = bitcast i32* %s2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %68) #10
  %69 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %69) #10
  %70 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %70) #10
  %71 = load i64, i64* %retval, align 8
  ret i64 %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define i64 @mz_crc32(i64 %crc, i8* %ptr, i64 %buf_len) #0 {
entry:
  %crc.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %mz_crc32 = alloca i32, align 4
  %pByte_buf = alloca i8*, align 8
  store i64 %crc, i64* %crc.addr, align 8, !tbaa !4
  store i8* %ptr, i8** %ptr.addr, align 8, !tbaa !8
  store i64 %buf_len, i64* %buf_len.addr, align 8, !tbaa !4
  %0 = bitcast i32* %mz_crc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load i64, i64* %crc.addr, align 8, !tbaa !4
  %conv = trunc i64 %1 to i32
  %xor = xor i32 %conv, -1
  store i32 %xor, i32* %mz_crc32, align 4, !tbaa !10
  %2 = bitcast i8** %pByte_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = load i8*, i8** %ptr.addr, align 8, !tbaa !8
  store i8* %3, i8** %pByte_buf, align 8, !tbaa !8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %4 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %cmp = icmp uge i64 %4, 4
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %shr = lshr i32 %5, 8
  %6 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %7 = load i8*, i8** %pByte_buf, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !12
  %conv2 = zext i8 %8 to i32
  %xor3 = xor i32 %6, %conv2
  %and = and i32 %xor3, 255
  %idxprom = zext i32 %and to i64
  %arrayidx4 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom
  %9 = load i32, i32* %arrayidx4, align 4, !tbaa !10
  %xor5 = xor i32 %shr, %9
  store i32 %xor5, i32* %mz_crc32, align 4, !tbaa !10
  %10 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %shr6 = lshr i32 %10, 8
  %11 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %12 = load i8*, i8** %pByte_buf, align 8, !tbaa !8
  %arrayidx7 = getelementptr inbounds i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx7, align 1, !tbaa !12
  %conv8 = zext i8 %13 to i32
  %xor9 = xor i32 %11, %conv8
  %and10 = and i32 %xor9, 255
  %idxprom11 = zext i32 %and10 to i64
  %arrayidx12 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom11
  %14 = load i32, i32* %arrayidx12, align 4, !tbaa !10
  %xor13 = xor i32 %shr6, %14
  store i32 %xor13, i32* %mz_crc32, align 4, !tbaa !10
  %15 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %shr14 = lshr i32 %15, 8
  %16 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %17 = load i8*, i8** %pByte_buf, align 8, !tbaa !8
  %arrayidx15 = getelementptr inbounds i8, i8* %17, i64 2
  %18 = load i8, i8* %arrayidx15, align 1, !tbaa !12
  %conv16 = zext i8 %18 to i32
  %xor17 = xor i32 %16, %conv16
  %and18 = and i32 %xor17, 255
  %idxprom19 = zext i32 %and18 to i64
  %arrayidx20 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom19
  %19 = load i32, i32* %arrayidx20, align 4, !tbaa !10
  %xor21 = xor i32 %shr14, %19
  store i32 %xor21, i32* %mz_crc32, align 4, !tbaa !10
  %20 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %shr22 = lshr i32 %20, 8
  %21 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %22 = load i8*, i8** %pByte_buf, align 8, !tbaa !8
  %arrayidx23 = getelementptr inbounds i8, i8* %22, i64 3
  %23 = load i8, i8* %arrayidx23, align 1, !tbaa !12
  %conv24 = zext i8 %23 to i32
  %xor25 = xor i32 %21, %conv24
  %and26 = and i32 %xor25, 255
  %idxprom27 = zext i32 %and26 to i64
  %arrayidx28 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom27
  %24 = load i32, i32* %arrayidx28, align 4, !tbaa !10
  %xor29 = xor i32 %shr22, %24
  store i32 %xor29, i32* %mz_crc32, align 4, !tbaa !10
  %25 = load i8*, i8** %pByte_buf, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 4
  store i8* %add.ptr, i8** %pByte_buf, align 8, !tbaa !8
  %26 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %sub = sub i64 %26, 4
  store i64 %sub, i64* %buf_len.addr, align 8, !tbaa !4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond30

while.cond30:                                     ; preds = %while.body31, %while.end
  %27 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %tobool = icmp ne i64 %27, 0
  br i1 %tobool, label %while.body31, label %while.end40

while.body31:                                     ; preds = %while.cond30
  %28 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %shr32 = lshr i32 %28, 8
  %29 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %30 = load i8*, i8** %pByte_buf, align 8, !tbaa !8
  %arrayidx33 = getelementptr inbounds i8, i8* %30, i64 0
  %31 = load i8, i8* %arrayidx33, align 1, !tbaa !12
  %conv34 = zext i8 %31 to i32
  %xor35 = xor i32 %29, %conv34
  %and36 = and i32 %xor35, 255
  %idxprom37 = zext i32 %and36 to i64
  %arrayidx38 = getelementptr inbounds [256 x i32], [256 x i32]* @mz_crc32.s_crc_table, i64 0, i64 %idxprom37
  %32 = load i32, i32* %arrayidx38, align 4, !tbaa !10
  %xor39 = xor i32 %shr32, %32
  store i32 %xor39, i32* %mz_crc32, align 4, !tbaa !10
  %33 = load i8*, i8** %pByte_buf, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %incdec.ptr, i8** %pByte_buf, align 8, !tbaa !8
  %34 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %dec = add i64 %34, -1
  store i64 %dec, i64* %buf_len.addr, align 8, !tbaa !4
  br label %while.cond30

while.end40:                                      ; preds = %while.cond30
  %35 = load i32, i32* %mz_crc32, align 4, !tbaa !10
  %neg = xor i32 %35, -1
  %conv41 = zext i32 %neg to i64
  %36 = bitcast i8** %pByte_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #10
  %37 = bitcast i32* %mz_crc32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %37) #10
  ret i64 %conv41
}

; Function Attrs: nounwind ssp uwtable
define void @mz_free(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !8
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !8
  call void @free(i8* %0)
  ret void
}

declare void @free(i8*) #2

; Function Attrs: nounwind ssp uwtable
define i8* @miniz_def_alloc_func(i8* %opaque, i64 %items, i64 %size) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %items.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i8* %opaque, i8** %opaque.addr, align 8, !tbaa !8
  store i64 %items, i64* %items.addr, align 8, !tbaa !4
  store i64 %size, i64* %size.addr, align 8, !tbaa !4
  %0 = load i8*, i8** %opaque.addr, align 8, !tbaa !8
  %1 = load i64, i64* %items.addr, align 8, !tbaa !4
  %2 = load i64, i64* %size.addr, align 8, !tbaa !4
  %3 = load i64, i64* %items.addr, align 8, !tbaa !4
  %4 = load i64, i64* %size.addr, align 8, !tbaa !4
  %mul = mul i64 %3, %4
  %call = call i8* @malloc(i64 %mul) #11
  ret i8* %call
}

; Function Attrs: allocsize(0)
declare i8* @malloc(i64) #3

; Function Attrs: nounwind ssp uwtable
define void @miniz_def_free_func(i8* %opaque, i8* %address) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %address.addr = alloca i8*, align 8
  store i8* %opaque, i8** %opaque.addr, align 8, !tbaa !8
  store i8* %address, i8** %address.addr, align 8, !tbaa !8
  %0 = load i8*, i8** %opaque.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %address.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %address.addr, align 8, !tbaa !8
  call void @free(i8* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i8* @miniz_def_realloc_func(i8* %opaque, i8* %address, i64 %items, i64 %size) #0 {
entry:
  %opaque.addr = alloca i8*, align 8
  %address.addr = alloca i8*, align 8
  %items.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  store i8* %opaque, i8** %opaque.addr, align 8, !tbaa !8
  store i8* %address, i8** %address.addr, align 8, !tbaa !8
  store i64 %items, i64* %items.addr, align 8, !tbaa !4
  store i64 %size, i64* %size.addr, align 8, !tbaa !4
  %0 = load i8*, i8** %opaque.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %address.addr, align 8, !tbaa !8
  %2 = load i64, i64* %items.addr, align 8, !tbaa !4
  %3 = load i64, i64* %size.addr, align 8, !tbaa !4
  %4 = load i8*, i8** %address.addr, align 8, !tbaa !8
  %5 = load i64, i64* %items.addr, align 8, !tbaa !4
  %6 = load i64, i64* %size.addr, align 8, !tbaa !4
  %mul = mul i64 %5, %6
  %call = call i8* @realloc(i8* %4, i64 %mul) #12
  ret i8* %call
}

; Function Attrs: allocsize(1)
declare i8* @realloc(i8*, i64) #4

; Function Attrs: nounwind ssp uwtable
define i8* @mz_version() #0 {
entry:
  ret i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_deflateInit(%struct.mz_stream_s* %pStream, i32 %level) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %level.addr = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  store i32 %level, i32* %level.addr, align 4, !tbaa !10
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %1 = load i32, i32* %level.addr, align 4, !tbaa !10
  %call = call i32 @mz_deflateInit2(%struct.mz_stream_s* %0, i32 %1, i32 8, i32 15, i32 9, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_deflateInit2(%struct.mz_stream_s* %pStream, i32 %level, i32 %method, i32 %window_bits, i32 %mem_level, i32 %strategy) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %level.addr = alloca i32, align 4
  %method.addr = alloca i32, align 4
  %window_bits.addr = alloca i32, align 4
  %mem_level.addr = alloca i32, align 4
  %strategy.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %comp_flags = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  store i32 %level, i32* %level.addr, align 4, !tbaa !10
  store i32 %method, i32* %method.addr, align 4, !tbaa !10
  store i32 %window_bits, i32* %window_bits.addr, align 4, !tbaa !10
  store i32 %mem_level, i32* %mem_level.addr, align 4, !tbaa !10
  store i32 %strategy, i32* %strategy.addr, align 4, !tbaa !10
  %0 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i32* %comp_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = load i32, i32* %level.addr, align 4, !tbaa !10
  %3 = load i32, i32* %window_bits.addr, align 4, !tbaa !10
  %4 = load i32, i32* %strategy.addr, align 4, !tbaa !10
  %call = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %2, i32 %3, i32 %4)
  %or = or i32 8192, %call
  store i32 %or, i32* %comp_flags, align 4, !tbaa !10
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_stream_s* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i32, i32* %method.addr, align 4, !tbaa !10
  %cmp = icmp ne i32 %6, 8
  br i1 %cmp, label %if.then7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i32, i32* %mem_level.addr, align 4, !tbaa !10
  %cmp1 = icmp slt i32 %7, 1
  br i1 %cmp1, label %if.then7, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %mem_level.addr, align 4, !tbaa !10
  %cmp3 = icmp sgt i32 %8, 9
  br i1 %cmp3, label %if.then7, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %9 = load i32, i32* %window_bits.addr, align 4, !tbaa !10
  %cmp5 = icmp ne i32 %9, 15
  br i1 %cmp5, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %10 = load i32, i32* %window_bits.addr, align 4, !tbaa !10
  %sub = sub nsw i32 0, %10
  %cmp6 = icmp ne i32 %sub, 15
  br i1 %cmp6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %land.lhs.true, %lor.lhs.false2, %lor.lhs.false, %if.end
  store i32 -10000, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %land.lhs.true, %lor.lhs.false4
  %11 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %data_type = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %11, i32 0, i32 11
  store i32 0, i32* %data_type, align 8, !tbaa !13
  %12 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %12, i32 0, i32 12
  store i64 1, i64* %adler, align 8, !tbaa !15
  %13 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %msg = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %13, i32 0, i32 6
  store i8* null, i8** %msg, align 8, !tbaa !16
  %14 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %reserved = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %14, i32 0, i32 13
  store i64 0, i64* %reserved, align 8, !tbaa !17
  %15 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %15, i32 0, i32 2
  store i64 0, i64* %total_in, align 8, !tbaa !18
  %16 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %16, i32 0, i32 5
  store i64 0, i64* %total_out, align 8, !tbaa !19
  %17 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zalloc = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %17, i32 0, i32 8
  %18 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc, align 8, !tbaa !20
  %tobool9 = icmp ne i8* (i8*, i64, i64)* %18, null
  br i1 %tobool9, label %if.end12, label %if.then10

if.then10:                                        ; preds = %if.end8
  %19 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zalloc11 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %19, i32 0, i32 8
  store i8* (i8*, i64, i64)* @miniz_def_alloc_func, i8* (i8*, i64, i64)** %zalloc11, align 8, !tbaa !20
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end8
  %20 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %20, i32 0, i32 9
  %21 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8, !tbaa !21
  %tobool13 = icmp ne void (i8*, i8*)* %21, null
  br i1 %tobool13, label %if.end16, label %if.then14

if.then14:                                        ; preds = %if.end12
  %22 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zfree15 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %22, i32 0, i32 9
  store void (i8*, i8*)* @miniz_def_free_func, void (i8*, i8*)** %zfree15, align 8, !tbaa !21
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end12
  %23 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zalloc17 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %23, i32 0, i32 8
  %24 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc17, align 8, !tbaa !20
  %25 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %opaque = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %25, i32 0, i32 10
  %26 = load i8*, i8** %opaque, align 8, !tbaa !22
  %call18 = call i8* %24(i8* %26, i64 1, i64 319352)
  %27 = bitcast i8* %call18 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %27, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %28 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %tobool19 = icmp ne %struct.tdefl_compressor* %28, null
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %if.end16
  store i32 -4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end21:                                         ; preds = %if.end16
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %30 = bitcast %struct.tdefl_compressor* %29 to %struct.mz_internal_state*
  %31 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %31, i32 0, i32 7
  store %struct.mz_internal_state* %30, %struct.mz_internal_state** %state, align 8, !tbaa !23
  %32 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %33 = load i32, i32* %comp_flags, align 4, !tbaa !10
  %call22 = call i32 @tdefl_init(%struct.tdefl_compressor* %32, i32 (i8*, i32, i8*)* null, i8* null, i32 %33)
  %cmp23 = icmp ne i32 %call22, 0
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end21
  %34 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %call25 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %34)
  store i32 -10000, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end26:                                         ; preds = %if.end21
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end26, %if.then24, %if.then20, %if.then7, %if.then
  %35 = bitcast i32* %comp_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %35) #10
  %36 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %36) #10
  %37 = load i32, i32* %retval, align 4
  ret i32 %37
}

; Function Attrs: nounwind ssp uwtable
define i32 @tdefl_create_comp_flags_from_zip_params(i32 %level, i32 %window_bits, i32 %strategy) #0 {
entry:
  %level.addr = alloca i32, align 4
  %window_bits.addr = alloca i32, align 4
  %strategy.addr = alloca i32, align 4
  %comp_flags = alloca i32, align 4
  store i32 %level, i32* %level.addr, align 4, !tbaa !10
  store i32 %window_bits, i32* %window_bits.addr, align 4, !tbaa !10
  store i32 %strategy, i32* %strategy.addr, align 4, !tbaa !10
  %0 = bitcast i32* %comp_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load i32, i32* %level.addr, align 4, !tbaa !10
  %cmp = icmp sge i32 %1, 0
  br i1 %cmp, label %cond.true, label %cond.false3

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %level.addr, align 4, !tbaa !10
  %cmp1 = icmp slt i32 10, %2
  br i1 %cmp1, label %cond.true2, label %cond.false

cond.true2:                                       ; preds = %cond.true
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %3 = load i32, i32* %level.addr, align 4, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true2
  %cond = phi i32 [ 10, %cond.true2 ], [ %3, %cond.false ]
  br label %cond.end4

cond.false3:                                      ; preds = %entry
  br label %cond.end4

cond.end4:                                        ; preds = %cond.false3, %cond.end
  %cond5 = phi i32 [ %cond, %cond.end ], [ 6, %cond.false3 ]
  %idxprom = sext i32 %cond5 to i64
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* @s_tdefl_num_probes, i64 0, i64 %idxprom
  %4 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %5 = load i32, i32* %level.addr, align 4, !tbaa !10
  %cmp6 = icmp sle i32 %5, 3
  %6 = zext i1 %cmp6 to i64
  %cond7 = select i1 %cmp6, i32 16384, i32 0
  %or = or i32 %4, %cond7
  store i32 %or, i32* %comp_flags, align 4, !tbaa !10
  %7 = load i32, i32* %window_bits.addr, align 4, !tbaa !10
  %cmp8 = icmp sgt i32 %7, 0
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end4
  %8 = load i32, i32* %comp_flags, align 4, !tbaa !10
  %or9 = or i32 %8, 4096
  store i32 %or9, i32* %comp_flags, align 4, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end4
  %9 = load i32, i32* %level.addr, align 4, !tbaa !10
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.else, label %if.then10

if.then10:                                        ; preds = %if.end
  %10 = load i32, i32* %comp_flags, align 4, !tbaa !10
  %or11 = or i32 %10, 524288
  store i32 %or11, i32* %comp_flags, align 4, !tbaa !10
  br label %if.end30

if.else:                                          ; preds = %if.end
  %11 = load i32, i32* %strategy.addr, align 4, !tbaa !10
  %cmp12 = icmp eq i32 %11, 1
  br i1 %cmp12, label %if.then13, label %if.else15

if.then13:                                        ; preds = %if.else
  %12 = load i32, i32* %comp_flags, align 4, !tbaa !10
  %or14 = or i32 %12, 131072
  store i32 %or14, i32* %comp_flags, align 4, !tbaa !10
  br label %if.end29

if.else15:                                        ; preds = %if.else
  %13 = load i32, i32* %strategy.addr, align 4, !tbaa !10
  %cmp16 = icmp eq i32 %13, 2
  br i1 %cmp16, label %if.then17, label %if.else18

if.then17:                                        ; preds = %if.else15
  %14 = load i32, i32* %comp_flags, align 4, !tbaa !10
  %and = and i32 %14, -4096
  store i32 %and, i32* %comp_flags, align 4, !tbaa !10
  br label %if.end28

if.else18:                                        ; preds = %if.else15
  %15 = load i32, i32* %strategy.addr, align 4, !tbaa !10
  %cmp19 = icmp eq i32 %15, 4
  br i1 %cmp19, label %if.then20, label %if.else22

if.then20:                                        ; preds = %if.else18
  %16 = load i32, i32* %comp_flags, align 4, !tbaa !10
  %or21 = or i32 %16, 262144
  store i32 %or21, i32* %comp_flags, align 4, !tbaa !10
  br label %if.end27

if.else22:                                        ; preds = %if.else18
  %17 = load i32, i32* %strategy.addr, align 4, !tbaa !10
  %cmp23 = icmp eq i32 %17, 3
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.else22
  %18 = load i32, i32* %comp_flags, align 4, !tbaa !10
  %or25 = or i32 %18, 65536
  store i32 %or25, i32* %comp_flags, align 4, !tbaa !10
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.else22
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then20
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then17
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then13
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then10
  %19 = load i32, i32* %comp_flags, align 4, !tbaa !10
  %20 = bitcast i32* %comp_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %20) #10
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define i32 @tdefl_init(%struct.tdefl_compressor* %d, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8, !tbaa !8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8, !tbaa !8
  %1 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %1, i32 0, i32 0
  store i32 (i8*, i32, i8*)* %0, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8, !tbaa !24
  %2 = load i8*, i8** %pPut_buf_user.addr, align 8, !tbaa !8
  %3 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pPut_buf_user = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %3, i32 0, i32 1
  store i8* %2, i8** %m_pPut_buf_user, align 8, !tbaa !26
  %4 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %5 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %5, i32 0, i32 2
  store i32 %4, i32* %m_flags, align 8, !tbaa !27
  %6 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %6, 4095
  %add = add nsw i32 %and, 2
  %div = sdiv i32 %add, 3
  %add1 = add nsw i32 1, %div
  %7 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_max_probes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %7, i32 0, i32 3
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %m_max_probes, i64 0, i64 0
  store i32 %add1, i32* %arrayidx, align 4, !tbaa !10
  %8 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and2 = and i32 %8, 16384
  %cmp = icmp ne i32 %and2, 0
  %conv = zext i1 %cmp to i32
  %9 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_greedy_parsing = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %9, i32 0, i32 4
  store i32 %conv, i32* %m_greedy_parsing, align 4, !tbaa !28
  %10 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and3 = and i32 %10, 4095
  %shr = ashr i32 %and3, 2
  %add4 = add nsw i32 %shr, 2
  %div5 = sdiv i32 %add4, 3
  %add6 = add nsw i32 1, %div5
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_max_probes7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %11, i32 0, i32 3
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %m_max_probes7, i64 0, i64 1
  store i32 %add6, i32* %arrayidx8, align 4, !tbaa !10
  %12 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and9 = and i32 %12, 32768
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %13 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %13, i32 0, i32 41
  %14 = bitcast [32768 x i16]* %m_hash to i8*
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash10 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 41
  %16 = bitcast [32768 x i16]* %m_hash10 to i8*
  %17 = call i64 @llvm.objectsize.i64.p0i8(i8* %16, i1 false, i1 true, i1 false)
  %call = call i8* @__memset_chk(i8* %14, i32 0, i64 65536, i64 %17) #10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 16
  store i32 0, i32* %m_bits_in, align 4, !tbaa !29
  %19 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf_dict_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %19, i32 0, i32 15
  store i32 0, i32* %m_lz_code_buf_dict_pos, align 8, !tbaa !30
  %20 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %20, i32 0, i32 14
  store i32 0, i32* %m_total_lz_bytes, align 4, !tbaa !31
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 8
  store i32 0, i32* %m_dict_size, align 4, !tbaa !32
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 7
  store i32 0, i32* %m_lookahead_size, align 8, !tbaa !33
  %23 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %23, i32 0, i32 6
  store i32 0, i32* %m_lookahead_pos, align 4, !tbaa !34
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_wants_to_finish = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 25
  store i32 0, i32* %m_wants_to_finish, align 8, !tbaa !35
  %25 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %25, i32 0, i32 17
  store i32 0, i32* %m_bit_buffer, align 8, !tbaa !36
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_block_index = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %26, i32 0, i32 24
  store i32 0, i32* %m_block_index, align 4, !tbaa !37
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 23
  store i32 0, i32* %m_finished, align 8, !tbaa !38
  %28 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %28, i32 0, i32 22
  store i32 0, i32* %m_output_flush_remaining, align 4, !tbaa !39
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 21
  store i32 0, i32* %m_output_flush_ofs, align 8, !tbaa !40
  %30 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %30, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 1
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 9
  store i8* %add.ptr, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  %32 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf11 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %32, i32 0, i32 39
  %arraydecay12 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf11, i64 0, i64 0
  %33 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %33, i32 0, i32 10
  store i8* %arraydecay12, i8** %m_pLZ_flags, align 8, !tbaa !42
  %34 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %34, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left, align 8, !tbaa !43
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %35, i32 0, i32 42
  %arraydecay13 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf, i64 0, i64 0
  %36 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %36, i32 0, i32 11
  store i8* %arraydecay13, i8** %m_pOutput_buf, align 8, !tbaa !44
  %37 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_buf14 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %37, i32 0, i32 42
  %arraydecay15 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf14, i64 0, i64 0
  %38 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %38, i32 0, i32 12
  store i8* %arraydecay15, i8** %m_pOutput_buf_end, align 8, !tbaa !45
  %39 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %39, i32 0, i32 26
  store i32 0, i32* %m_prev_return_status, align 4, !tbaa !46
  %40 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_lit = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %40, i32 0, i32 20
  store i32 0, i32* %m_saved_lit, align 4, !tbaa !47
  %41 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %41, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len, align 8, !tbaa !48
  %42 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_dist = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %42, i32 0, i32 18
  store i32 0, i32* %m_saved_match_dist, align 4, !tbaa !49
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %43, i32 0, i32 5
  store i32 1, i32* %m_adler32, align 8, !tbaa !50
  %44 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %44, i32 0, i32 27
  store i8* null, i8** %m_pIn_buf, align 8, !tbaa !51
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 28
  store i8* null, i8** %m_pOut_buf, align 8, !tbaa !52
  %46 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %46, i32 0, i32 29
  store i64* null, i64** %m_pIn_buf_size, align 8, !tbaa !53
  %47 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %47, i32 0, i32 30
  store i64* null, i64** %m_pOut_buf_size, align 8, !tbaa !54
  %48 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %48, i32 0, i32 31
  store i32 0, i32* %m_flush, align 8, !tbaa !55
  %49 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %49, i32 0, i32 32
  store i8* null, i8** %m_pSrc, align 8, !tbaa !56
  %50 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %50, i32 0, i32 33
  store i64 0, i64* %m_src_buf_left, align 8, !tbaa !57
  %51 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %51, i32 0, i32 34
  store i64 0, i64* %m_out_buf_ofs, align 8, !tbaa !58
  %52 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and16 = and i32 %52, 32768
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.end21, label %if.then18

if.then18:                                        ; preds = %if.end
  %53 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %53, i32 0, i32 35
  %54 = bitcast [33025 x i8]* %m_dict to i8*
  %55 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict19 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %55, i32 0, i32 35
  %56 = bitcast [33025 x i8]* %m_dict19 to i8*
  %57 = call i64 @llvm.objectsize.i64.p0i8(i8* %56, i1 false, i1 true, i1 false)
  %call20 = call i8* @__memset_chk(i8* %54, i32 0, i64 33025, i64 %57) #10
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.end
  %58 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %58, i32 0, i32 36
  %arrayidx22 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %arrayidx23 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx22, i64 0, i64 0
  %59 = bitcast i16* %arrayidx23 to i8*
  %60 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count24 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %60, i32 0, i32 36
  %arrayidx25 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count24, i64 0, i64 0
  %arrayidx26 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx25, i64 0, i64 0
  %61 = bitcast i16* %arrayidx26 to i8*
  %62 = call i64 @llvm.objectsize.i64.p0i8(i8* %61, i1 false, i1 true, i1 false)
  %call27 = call i8* @__memset_chk(i8* %59, i32 0, i64 576, i64 %62) #10
  %63 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count28 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %63, i32 0, i32 36
  %arrayidx29 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count28, i64 0, i64 1
  %arrayidx30 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx29, i64 0, i64 0
  %64 = bitcast i16* %arrayidx30 to i8*
  %65 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count31 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %65, i32 0, i32 36
  %arrayidx32 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count31, i64 0, i64 1
  %arrayidx33 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx32, i64 0, i64 0
  %66 = bitcast i16* %arrayidx33 to i8*
  %67 = call i64 @llvm.objectsize.i64.p0i8(i8* %66, i1 false, i1 true, i1 false)
  %call34 = call i8* @__memset_chk(i8* %64, i32 0, i64 64, i64 %67) #10
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_deflateEnd(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8, !tbaa !23
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 9
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8, !tbaa !21
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %opaque = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 10
  %6 = load i8*, i8** %opaque, align 8, !tbaa !22
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state3 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state3, align 8, !tbaa !23
  %9 = bitcast %struct.mz_internal_state* %8 to i8*
  call void %4(i8* %6, i8* %9)
  %10 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state4 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %10, i32 0, i32 7
  store %struct.mz_internal_state* null, %struct.mz_internal_state** %state4, align 8, !tbaa !23
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end5, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_deflateReset(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8, !tbaa !23
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zalloc = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 8
  %4 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc, align 8, !tbaa !20
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %4, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 9
  %6 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8, !tbaa !21
  %tobool5 = icmp ne void (i8*, i8*)* %6, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 5
  store i64 0, i64* %total_out, align 8, !tbaa !19
  %8 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %8, i32 0, i32 2
  store i64 0, i64* %total_in, align 8, !tbaa !18
  %9 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state6 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %9, i32 0, i32 7
  %10 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state6, align 8, !tbaa !23
  %11 = bitcast %struct.mz_internal_state* %10 to %struct.tdefl_compressor*
  %12 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state7 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %12, i32 0, i32 7
  %13 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state7, align 8, !tbaa !23
  %14 = bitcast %struct.mz_internal_state* %13 to %struct.tdefl_compressor*
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 2
  %15 = load i32, i32* %m_flags, align 8, !tbaa !27
  %call = call i32 @tdefl_init(%struct.tdefl_compressor* %11, i32 (i8*, i32, i8*)* null, i8* null, i32 %15)
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval, align 4
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_deflate(%struct.mz_stream_s* %pStream, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %flush.addr = alloca i32, align 4
  %in_bytes = alloca i64, align 8
  %out_bytes = alloca i64, align 8
  %orig_total_in = alloca i64, align 8
  %orig_total_out = alloca i64, align 8
  %mz_status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %defl_status = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  store i32 %flush, i32* %flush.addr, align 4, !tbaa !10
  %0 = bitcast i64* %in_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i64* %out_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = bitcast i64* %orig_total_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast i64* %orig_total_out to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = bitcast i32* %mz_status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  store i32 0, i32* %mz_status, align 4, !tbaa !10
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_stream_s* %5, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %6, i32 0, i32 7
  %7 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8, !tbaa !23
  %tobool1 = icmp ne %struct.mz_internal_state* %7, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp = icmp slt i32 %8, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false2
  %9 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp4 = icmp sgt i32 %9, 4
  br i1 %cmp4, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %10 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %10, i32 0, i32 3
  %11 = load i8*, i8** %next_out, align 8, !tbaa !59
  %tobool6 = icmp ne i8* %11, null
  br i1 %tobool6, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup74

if.end:                                           ; preds = %lor.lhs.false5
  %12 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %12, i32 0, i32 4
  %13 = load i32, i32* %avail_out, align 8, !tbaa !60
  %tobool7 = icmp ne i32 %13, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end
  store i32 -5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup74

if.end9:                                          ; preds = %if.end
  %14 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp10 = icmp eq i32 %14, 1
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end9
  store i32 2, i32* %flush.addr, align 4, !tbaa !10
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.end9
  %15 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state13 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %15, i32 0, i32 7
  %16 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state13, align 8, !tbaa !23
  %17 = bitcast %struct.mz_internal_state* %16 to %struct.tdefl_compressor*
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %17, i32 0, i32 26
  %18 = load i32, i32* %m_prev_return_status, align 4, !tbaa !46
  %cmp14 = icmp eq i32 %18, 1
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end12
  %19 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp16 = icmp eq i32 %19, 4
  %20 = zext i1 %cmp16 to i64
  %cond = select i1 %cmp16, i32 1, i32 -5
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup74

if.end17:                                         ; preds = %if.end12
  %21 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %21, i32 0, i32 2
  %22 = load i64, i64* %total_in, align 8, !tbaa !18
  store i64 %22, i64* %orig_total_in, align 8, !tbaa !4
  %23 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %23, i32 0, i32 5
  %24 = load i64, i64* %total_out, align 8, !tbaa !19
  store i64 %24, i64* %orig_total_out, align 8, !tbaa !4
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont, %if.end17
  %25 = bitcast i32* %defl_status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #10
  %26 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %26, i32 0, i32 1
  %27 = load i32, i32* %avail_in, align 8, !tbaa !61
  %conv = zext i32 %27 to i64
  store i64 %conv, i64* %in_bytes, align 8, !tbaa !4
  %28 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out18 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %28, i32 0, i32 4
  %29 = load i32, i32* %avail_out18, align 8, !tbaa !60
  %conv19 = zext i32 %29 to i64
  store i64 %conv19, i64* %out_bytes, align 8, !tbaa !4
  %30 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state20 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %30, i32 0, i32 7
  %31 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state20, align 8, !tbaa !23
  %32 = bitcast %struct.mz_internal_state* %31 to %struct.tdefl_compressor*
  %33 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %33, i32 0, i32 0
  %34 = load i8*, i8** %next_in, align 8, !tbaa !62
  %35 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out21 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %35, i32 0, i32 3
  %36 = load i8*, i8** %next_out21, align 8, !tbaa !59
  %37 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %call = call i32 @tdefl_compress(%struct.tdefl_compressor* %32, i8* %34, i64* %in_bytes, i8* %36, i64* %out_bytes, i32 %37)
  store i32 %call, i32* %defl_status, align 4, !tbaa !12
  %38 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv22 = trunc i64 %38 to i32
  %39 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_in23 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %39, i32 0, i32 0
  %40 = load i8*, i8** %next_in23, align 8, !tbaa !62
  %idx.ext = zext i32 %conv22 to i64
  %add.ptr = getelementptr inbounds i8, i8* %40, i64 %idx.ext
  store i8* %add.ptr, i8** %next_in23, align 8, !tbaa !62
  %41 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv24 = trunc i64 %41 to i32
  %42 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in25 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %42, i32 0, i32 1
  %43 = load i32, i32* %avail_in25, align 8, !tbaa !61
  %sub = sub i32 %43, %conv24
  store i32 %sub, i32* %avail_in25, align 8, !tbaa !61
  %44 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv26 = trunc i64 %44 to i32
  %conv27 = zext i32 %conv26 to i64
  %45 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in28 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %45, i32 0, i32 2
  %46 = load i64, i64* %total_in28, align 8, !tbaa !18
  %add = add i64 %46, %conv27
  store i64 %add, i64* %total_in28, align 8, !tbaa !18
  %47 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state29 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %47, i32 0, i32 7
  %48 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state29, align 8, !tbaa !23
  %49 = bitcast %struct.mz_internal_state* %48 to %struct.tdefl_compressor*
  %call30 = call i32 @tdefl_get_adler32(%struct.tdefl_compressor* %49)
  %conv31 = zext i32 %call30 to i64
  %50 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %50, i32 0, i32 12
  store i64 %conv31, i64* %adler, align 8, !tbaa !15
  %51 = load i64, i64* %out_bytes, align 8, !tbaa !4
  %conv32 = trunc i64 %51 to i32
  %52 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out33 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %52, i32 0, i32 3
  %53 = load i8*, i8** %next_out33, align 8, !tbaa !59
  %idx.ext34 = zext i32 %conv32 to i64
  %add.ptr35 = getelementptr inbounds i8, i8* %53, i64 %idx.ext34
  store i8* %add.ptr35, i8** %next_out33, align 8, !tbaa !59
  %54 = load i64, i64* %out_bytes, align 8, !tbaa !4
  %conv36 = trunc i64 %54 to i32
  %55 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out37 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %55, i32 0, i32 4
  %56 = load i32, i32* %avail_out37, align 8, !tbaa !60
  %sub38 = sub i32 %56, %conv36
  store i32 %sub38, i32* %avail_out37, align 8, !tbaa !60
  %57 = load i64, i64* %out_bytes, align 8, !tbaa !4
  %conv39 = trunc i64 %57 to i32
  %conv40 = zext i32 %conv39 to i64
  %58 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out41 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %58, i32 0, i32 5
  %59 = load i64, i64* %total_out41, align 8, !tbaa !19
  %add42 = add i64 %59, %conv40
  store i64 %add42, i64* %total_out41, align 8, !tbaa !19
  %60 = load i32, i32* %defl_status, align 4, !tbaa !12
  %cmp43 = icmp slt i32 %60, 0
  br i1 %cmp43, label %if.then45, label %if.else

if.then45:                                        ; preds = %for.cond
  store i32 -2, i32* %mz_status, align 4, !tbaa !10
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %for.cond
  %61 = load i32, i32* %defl_status, align 4, !tbaa !12
  %cmp46 = icmp eq i32 %61, 1
  br i1 %cmp46, label %if.then48, label %if.else49

if.then48:                                        ; preds = %if.else
  store i32 1, i32* %mz_status, align 4, !tbaa !10
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else49:                                        ; preds = %if.else
  %62 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out50 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %62, i32 0, i32 4
  %63 = load i32, i32* %avail_out50, align 8, !tbaa !60
  %tobool51 = icmp ne i32 %63, 0
  br i1 %tobool51, label %if.else53, label %if.then52

if.then52:                                        ; preds = %if.else49
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else53:                                        ; preds = %if.else49
  %64 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in54 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %64, i32 0, i32 1
  %65 = load i32, i32* %avail_in54, align 8, !tbaa !61
  %tobool55 = icmp ne i32 %65, 0
  br i1 %tobool55, label %if.end70, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else53
  %66 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp56 = icmp ne i32 %66, 4
  br i1 %cmp56, label %if.then58, label %if.end70

if.then58:                                        ; preds = %land.lhs.true
  %67 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %tobool59 = icmp ne i32 %67, 0
  br i1 %tobool59, label %if.then68, label %lor.lhs.false60

lor.lhs.false60:                                  ; preds = %if.then58
  %68 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in61 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %68, i32 0, i32 2
  %69 = load i64, i64* %total_in61, align 8, !tbaa !18
  %70 = load i64, i64* %orig_total_in, align 8, !tbaa !4
  %cmp62 = icmp ne i64 %69, %70
  br i1 %cmp62, label %if.then68, label %lor.lhs.false64

lor.lhs.false64:                                  ; preds = %lor.lhs.false60
  %71 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out65 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %71, i32 0, i32 5
  %72 = load i64, i64* %total_out65, align 8, !tbaa !19
  %73 = load i64, i64* %orig_total_out, align 8, !tbaa !4
  %cmp66 = icmp ne i64 %72, %73
  br i1 %cmp66, label %if.then68, label %if.end69

if.then68:                                        ; preds = %lor.lhs.false64, %lor.lhs.false60, %if.then58
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end69:                                         ; preds = %lor.lhs.false64
  store i32 -5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end70:                                         ; preds = %land.lhs.true, %if.else53
  br label %if.end71

if.end71:                                         ; preds = %if.end70
  br label %if.end72

if.end72:                                         ; preds = %if.end71
  br label %if.end73

if.end73:                                         ; preds = %if.end72
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end73, %if.end69, %if.then68, %if.then52, %if.then48, %if.then45
  %74 = bitcast i32* %defl_status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %74) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup74 [
    i32 0, label %cleanup.cont
    i32 2, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.cond

for.end:                                          ; preds = %cleanup
  %75 = load i32, i32* %mz_status, align 4, !tbaa !10
  store i32 %75, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup74

cleanup74:                                        ; preds = %for.end, %cleanup, %if.then15, %if.then8, %if.then
  %76 = bitcast i32* %mz_status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %76) #10
  %77 = bitcast i64* %orig_total_out to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77) #10
  %78 = bitcast i64* %orig_total_in to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #10
  %79 = bitcast i64* %out_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79) #10
  %80 = bitcast i64* %in_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %80) #10
  %81 = load i32, i32* %retval, align 4
  ret i32 %81
}

; Function Attrs: nounwind ssp uwtable
define i32 @tdefl_compress(%struct.tdefl_compressor* %d, i8* %pIn_buf, i64* %pIn_buf_size, i8* %pOut_buf, i64* %pOut_buf_size, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pIn_buf.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pOut_buf.addr = alloca i8*, align 8
  %pOut_buf_size.addr = alloca i64*, align 8
  %flush.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8, !tbaa !8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8, !tbaa !8
  store i64* %pOut_buf_size, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  store i32 %flush, i32* %flush.addr, align 4, !tbaa !12
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.tdefl_compressor* %0, null
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %tobool1 = icmp ne i64* %1, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %2 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  store i64 0, i64* %2, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %3 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %tobool3 = icmp ne i64* %3, null
  br i1 %tobool3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %4 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  store i64 0, i64* %4, align 8, !tbaa !4
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %if.end
  store i32 -2, i32* %retval, align 4
  br label %return

if.end6:                                          ; preds = %entry
  %5 = load i8*, i8** %pIn_buf.addr, align 8, !tbaa !8
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 27
  store i8* %5, i8** %m_pIn_buf, align 8, !tbaa !51
  %7 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 29
  store i64* %7, i64** %m_pIn_buf_size, align 8, !tbaa !53
  %9 = load i8*, i8** %pOut_buf.addr, align 8, !tbaa !8
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %10, i32 0, i32 28
  store i8* %9, i8** %m_pOut_buf, align 8, !tbaa !52
  %11 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %12, i32 0, i32 30
  store i64* %11, i64** %m_pOut_buf_size, align 8, !tbaa !54
  %13 = load i8*, i8** %pIn_buf.addr, align 8, !tbaa !8
  %14 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 32
  store i8* %13, i8** %m_pSrc, align 8, !tbaa !56
  %15 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %tobool7 = icmp ne i64* %15, null
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end6
  %16 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %17 = load i64, i64* %16, align 8, !tbaa !4
  br label %cond.end

cond.false:                                       ; preds = %if.end6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %17, %cond.true ], [ 0, %cond.false ]
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 33
  store i64 %cond, i64* %m_src_buf_left, align 8, !tbaa !57
  %19 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %19, i32 0, i32 34
  store i64 0, i64* %m_out_buf_ofs, align 8, !tbaa !58
  %20 = load i32, i32* %flush.addr, align 4, !tbaa !12
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 31
  store i32 %20, i32* %m_flush, align 8, !tbaa !55
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 0
  %23 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8, !tbaa !24
  %cmp = icmp ne i32 (i8*, i32, i8*)* %23, null
  %conv = zext i1 %cmp to i32
  %24 = load i8*, i8** %pOut_buf.addr, align 8, !tbaa !8
  %cmp8 = icmp ne i8* %24, null
  br i1 %cmp8, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end
  %25 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %cmp10 = icmp ne i64* %25, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end
  %26 = phi i1 [ true, %cond.end ], [ %cmp10, %lor.rhs ]
  %lor.ext = zext i1 %26 to i32
  %cmp12 = icmp eq i32 %conv, %lor.ext
  br i1 %cmp12, label %if.then32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 26
  %28 = load i32, i32* %m_prev_return_status, align 4, !tbaa !46
  %cmp14 = icmp ne i32 %28, 0
  br i1 %cmp14, label %if.then32, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_wants_to_finish = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 25
  %30 = load i32, i32* %m_wants_to_finish, align 8, !tbaa !35
  %tobool17 = icmp ne i32 %30, 0
  br i1 %tobool17, label %land.lhs.true, label %lor.lhs.false20

land.lhs.true:                                    ; preds = %lor.lhs.false16
  %31 = load i32, i32* %flush.addr, align 4, !tbaa !12
  %cmp18 = icmp ne i32 %31, 4
  br i1 %cmp18, label %if.then32, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %land.lhs.true, %lor.lhs.false16
  %32 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %tobool21 = icmp ne i64* %32, null
  br i1 %tobool21, label %land.lhs.true22, label %lor.lhs.false26

land.lhs.true22:                                  ; preds = %lor.lhs.false20
  %33 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %34 = load i64, i64* %33, align 8, !tbaa !4
  %tobool23 = icmp ne i64 %34, 0
  br i1 %tobool23, label %land.lhs.true24, label %lor.lhs.false26

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %35 = load i8*, i8** %pIn_buf.addr, align 8, !tbaa !8
  %tobool25 = icmp ne i8* %35, null
  br i1 %tobool25, label %lor.lhs.false26, label %if.then32

lor.lhs.false26:                                  ; preds = %land.lhs.true24, %land.lhs.true22, %lor.lhs.false20
  %36 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %tobool27 = icmp ne i64* %36, null
  br i1 %tobool27, label %land.lhs.true28, label %if.end40

land.lhs.true28:                                  ; preds = %lor.lhs.false26
  %37 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %38 = load i64, i64* %37, align 8, !tbaa !4
  %tobool29 = icmp ne i64 %38, 0
  br i1 %tobool29, label %land.lhs.true30, label %if.end40

land.lhs.true30:                                  ; preds = %land.lhs.true28
  %39 = load i8*, i8** %pOut_buf.addr, align 8, !tbaa !8
  %tobool31 = icmp ne i8* %39, null
  br i1 %tobool31, label %if.end40, label %if.then32

if.then32:                                        ; preds = %land.lhs.true30, %land.lhs.true24, %land.lhs.true, %lor.lhs.false, %lor.end
  %40 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %tobool33 = icmp ne i64* %40, null
  br i1 %tobool33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.then32
  %41 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  store i64 0, i64* %41, align 8, !tbaa !4
  br label %if.end35

if.end35:                                         ; preds = %if.then34, %if.then32
  %42 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %tobool36 = icmp ne i64* %42, null
  br i1 %tobool36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end35
  %43 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  store i64 0, i64* %43, align 8, !tbaa !4
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %if.end35
  %44 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status39 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %44, i32 0, i32 26
  store i32 -2, i32* %m_prev_return_status39, align 4, !tbaa !46
  store i32 -2, i32* %retval, align 4
  br label %return

if.end40:                                         ; preds = %land.lhs.true30, %land.lhs.true28, %lor.lhs.false26
  %45 = load i32, i32* %flush.addr, align 4, !tbaa !12
  %cmp41 = icmp eq i32 %45, 4
  %conv42 = zext i1 %cmp41 to i32
  %46 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_wants_to_finish43 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %46, i32 0, i32 25
  %47 = load i32, i32* %m_wants_to_finish43, align 8, !tbaa !35
  %or = or i32 %47, %conv42
  store i32 %or, i32* %m_wants_to_finish43, align 8, !tbaa !35
  %48 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %48, i32 0, i32 22
  %49 = load i32, i32* %m_output_flush_remaining, align 4, !tbaa !39
  %tobool44 = icmp ne i32 %49, 0
  br i1 %tobool44, label %if.then47, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.end40
  %50 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %50, i32 0, i32 23
  %51 = load i32, i32* %m_finished, align 8, !tbaa !38
  %tobool46 = icmp ne i32 %51, 0
  br i1 %tobool46, label %if.then47, label %if.end49

if.then47:                                        ; preds = %lor.lhs.false45, %if.end40
  %52 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call = call i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %52)
  %53 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status48 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %53, i32 0, i32 26
  store i32 %call, i32* %m_prev_return_status48, align 4, !tbaa !46
  store i32 %call, i32* %retval, align 4
  br label %return

if.end49:                                         ; preds = %lor.lhs.false45
  %54 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %54, i32 0, i32 2
  %55 = load i32, i32* %m_flags, align 8, !tbaa !27
  %and = and i32 %55, 4095
  %cmp50 = icmp eq i32 %and, 1
  br i1 %cmp50, label %land.lhs.true52, label %if.else

land.lhs.true52:                                  ; preds = %if.end49
  %56 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags53 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %56, i32 0, i32 2
  %57 = load i32, i32* %m_flags53, align 8, !tbaa !27
  %and54 = and i32 %57, 16384
  %cmp55 = icmp ne i32 %and54, 0
  br i1 %cmp55, label %land.lhs.true57, label %if.else

land.lhs.true57:                                  ; preds = %land.lhs.true52
  %58 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags58 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %58, i32 0, i32 2
  %59 = load i32, i32* %m_flags58, align 8, !tbaa !27
  %and59 = and i32 %59, 720896
  %cmp60 = icmp eq i32 %and59, 0
  br i1 %cmp60, label %if.then62, label %if.else

if.then62:                                        ; preds = %land.lhs.true57
  %60 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call63 = call i32 @tdefl_compress_fast(%struct.tdefl_compressor* %60)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.end67, label %if.then65

if.then65:                                        ; preds = %if.then62
  %61 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status66 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %61, i32 0, i32 26
  %62 = load i32, i32* %m_prev_return_status66, align 4, !tbaa !46
  store i32 %62, i32* %retval, align 4
  br label %return

if.end67:                                         ; preds = %if.then62
  br label %if.end73

if.else:                                          ; preds = %land.lhs.true57, %land.lhs.true52, %if.end49
  %63 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call68 = call i32 @tdefl_compress_normal(%struct.tdefl_compressor* %63)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.end72, label %if.then70

if.then70:                                        ; preds = %if.else
  %64 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status71 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %64, i32 0, i32 26
  %65 = load i32, i32* %m_prev_return_status71, align 4, !tbaa !46
  store i32 %65, i32* %retval, align 4
  br label %return

if.end72:                                         ; preds = %if.else
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end67
  %66 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags74 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %66, i32 0, i32 2
  %67 = load i32, i32* %m_flags74, align 8, !tbaa !27
  %and75 = and i32 %67, 12288
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %land.lhs.true77, label %if.end85

land.lhs.true77:                                  ; preds = %if.end73
  %68 = load i8*, i8** %pIn_buf.addr, align 8, !tbaa !8
  %tobool78 = icmp ne i8* %68, null
  br i1 %tobool78, label %if.then79, label %if.end85

if.then79:                                        ; preds = %land.lhs.true77
  %69 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %69, i32 0, i32 5
  %70 = load i32, i32* %m_adler32, align 8, !tbaa !50
  %conv80 = zext i32 %70 to i64
  %71 = load i8*, i8** %pIn_buf.addr, align 8, !tbaa !8
  %72 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc81 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %72, i32 0, i32 32
  %73 = load i8*, i8** %m_pSrc81, align 8, !tbaa !56
  %74 = load i8*, i8** %pIn_buf.addr, align 8, !tbaa !8
  %sub.ptr.lhs.cast = ptrtoint i8* %73 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %74 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call82 = call i64 @mz_adler32(i64 %conv80, i8* %71, i64 %sub.ptr.sub)
  %conv83 = trunc i64 %call82 to i32
  %75 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_adler3284 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %75, i32 0, i32 5
  store i32 %conv83, i32* %m_adler3284, align 8, !tbaa !50
  br label %if.end85

if.end85:                                         ; preds = %if.then79, %land.lhs.true77, %if.end73
  %76 = load i32, i32* %flush.addr, align 4, !tbaa !12
  %tobool86 = icmp ne i32 %76, 0
  br i1 %tobool86, label %land.lhs.true87, label %if.end113

land.lhs.true87:                                  ; preds = %if.end85
  %77 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %77, i32 0, i32 7
  %78 = load i32, i32* %m_lookahead_size, align 8, !tbaa !33
  %tobool88 = icmp ne i32 %78, 0
  br i1 %tobool88, label %if.end113, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %land.lhs.true87
  %79 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left90 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %79, i32 0, i32 33
  %80 = load i64, i64* %m_src_buf_left90, align 8, !tbaa !57
  %tobool91 = icmp ne i64 %80, 0
  br i1 %tobool91, label %if.end113, label %land.lhs.true92

land.lhs.true92:                                  ; preds = %land.lhs.true89
  %81 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining93 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %81, i32 0, i32 22
  %82 = load i32, i32* %m_output_flush_remaining93, align 4, !tbaa !39
  %tobool94 = icmp ne i32 %82, 0
  br i1 %tobool94, label %if.end113, label %if.then95

if.then95:                                        ; preds = %land.lhs.true92
  %83 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %84 = load i32, i32* %flush.addr, align 4, !tbaa !12
  %call96 = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %83, i32 %84)
  %cmp97 = icmp slt i32 %call96, 0
  br i1 %cmp97, label %if.then99, label %if.end101

if.then99:                                        ; preds = %if.then95
  %85 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status100 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %85, i32 0, i32 26
  %86 = load i32, i32* %m_prev_return_status100, align 4, !tbaa !46
  store i32 %86, i32* %retval, align 4
  br label %return

if.end101:                                        ; preds = %if.then95
  %87 = load i32, i32* %flush.addr, align 4, !tbaa !12
  %cmp102 = icmp eq i32 %87, 4
  %conv103 = zext i1 %cmp102 to i32
  %88 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_finished104 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %88, i32 0, i32 23
  store i32 %conv103, i32* %m_finished104, align 8, !tbaa !38
  %89 = load i32, i32* %flush.addr, align 4, !tbaa !12
  %cmp105 = icmp eq i32 %89, 3
  br i1 %cmp105, label %if.then107, label %if.end112

if.then107:                                       ; preds = %if.end101
  %90 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %90, i32 0, i32 41
  %91 = bitcast [32768 x i16]* %m_hash to i8*
  %92 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash108 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %92, i32 0, i32 41
  %93 = bitcast [32768 x i16]* %m_hash108 to i8*
  %94 = call i64 @llvm.objectsize.i64.p0i8(i8* %93, i1 false, i1 true, i1 false)
  %call109 = call i8* @__memset_chk(i8* %91, i32 0, i64 65536, i64 %94) #10
  %95 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_next = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %95, i32 0, i32 40
  %96 = bitcast [32768 x i16]* %m_next to i8*
  %97 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_next110 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %97, i32 0, i32 40
  %98 = bitcast [32768 x i16]* %m_next110 to i8*
  %99 = call i64 @llvm.objectsize.i64.p0i8(i8* %98, i1 false, i1 true, i1 false)
  %call111 = call i8* @__memset_chk(i8* %96, i32 0, i64 65536, i64 %99) #10
  %100 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %100, i32 0, i32 8
  store i32 0, i32* %m_dict_size, align 4, !tbaa !32
  br label %if.end112

if.end112:                                        ; preds = %if.then107, %if.end101
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %land.lhs.true92, %land.lhs.true89, %land.lhs.true87, %if.end85
  %101 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call114 = call i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %101)
  %102 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status115 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %102, i32 0, i32 26
  store i32 %call114, i32* %m_prev_return_status115, align 4, !tbaa !46
  store i32 %call114, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end113, %if.then99, %if.then70, %if.then65, %if.then47, %if.end38, %if.end5
  %103 = load i32, i32* %retval, align 4
  ret i32 %103
}

; Function Attrs: nounwind ssp uwtable
define i32 @tdefl_get_adler32(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 5
  %1 = load i32, i32* %m_adler32, align 8, !tbaa !50
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define i64 @mz_deflateBound(%struct.mz_stream_s* %pStream, i64 %source_len) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %source_len.addr = alloca i64, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  store i64 %source_len, i64* %source_len.addr, align 8, !tbaa !4
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %1 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %mul = mul i64 %1, 110
  %div = udiv i64 %mul, 100
  %add = add i64 128, %div
  %2 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %add1 = add i64 128, %2
  %3 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %div2 = udiv i64 %3, 31744
  %add3 = add i64 %div2, 1
  %mul4 = mul i64 %add3, 5
  %add5 = add i64 %add1, %mul4
  %cmp = icmp ugt i64 %add, %add5
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %mul6 = mul i64 %4, 110
  %div7 = udiv i64 %mul6, 100
  %add8 = add i64 128, %div7
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %add9 = add i64 128, %5
  %6 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %div10 = udiv i64 %6, 31744
  %add11 = add i64 %div10, 1
  %mul12 = mul i64 %add11, 5
  %add13 = add i64 %add9, %mul12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add8, %cond.true ], [ %add13, %cond.false ]
  ret i64 %cond
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_compress2(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len, i32 %level) #0 {
entry:
  %retval = alloca i32, align 4
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  %level.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %stream = alloca %struct.mz_stream_s, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pDest, i8** %pDest.addr, align 8, !tbaa !8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8, !tbaa !8
  store i8* %pSource, i8** %pSource.addr, align 8, !tbaa !8
  store i64 %source_len, i64* %source_len.addr, align 8, !tbaa !4
  store i32 %level, i32* %level.addr, align 4, !tbaa !10
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %1) #10
  %2 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 112, i1 false)
  %3 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %4 = load i64*, i64** %pDest_len.addr, align 8, !tbaa !8
  %5 = load i64, i64* %4, align 8, !tbaa !4
  %or = or i64 %3, %5
  %cmp = icmp ugt i64 %or, 4294967295
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -10000, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %pSource.addr, align 8, !tbaa !8
  %next_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 0
  store i8* %6, i8** %next_in, align 8, !tbaa !62
  %7 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %conv = trunc i64 %7 to i32
  %avail_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 1
  store i32 %conv, i32* %avail_in, align 8, !tbaa !61
  %8 = load i8*, i8** %pDest.addr, align 8, !tbaa !8
  %next_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 3
  store i8* %8, i8** %next_out, align 8, !tbaa !59
  %9 = load i64*, i64** %pDest_len.addr, align 8, !tbaa !8
  %10 = load i64, i64* %9, align 8, !tbaa !4
  %conv1 = trunc i64 %10 to i32
  %avail_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 4
  store i32 %conv1, i32* %avail_out, align 8, !tbaa !60
  %11 = load i32, i32* %level.addr, align 4, !tbaa !10
  %call = call i32 @mz_deflateInit(%struct.mz_stream_s* %stream, i32 %11)
  store i32 %call, i32* %status, align 4, !tbaa !10
  %12 = load i32, i32* %status, align 4, !tbaa !10
  %cmp2 = icmp ne i32 %12, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %13 = load i32, i32* %status, align 4, !tbaa !10
  store i32 %13, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @mz_deflate(%struct.mz_stream_s* %stream, i32 4)
  store i32 %call6, i32* %status, align 4, !tbaa !10
  %14 = load i32, i32* %status, align 4, !tbaa !10
  %cmp7 = icmp ne i32 %14, 1
  br i1 %cmp7, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.end5
  %call10 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %stream)
  %15 = load i32, i32* %status, align 4, !tbaa !10
  %cmp11 = icmp eq i32 %15, 0
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then9
  br label %cond.end

cond.false:                                       ; preds = %if.then9
  %16 = load i32, i32* %status, align 4, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -5, %cond.true ], [ %16, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %if.end5
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 5
  %17 = load i64, i64* %total_out, align 8, !tbaa !19
  %18 = load i64*, i64** %pDest_len.addr, align 8, !tbaa !8
  store i64 %17, i64* %18, align 8, !tbaa !4
  %call14 = call i32 @mz_deflateEnd(%struct.mz_stream_s* %stream)
  store i32 %call14, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end13, %cond.end, %if.then4, %if.then
  %19 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %19) #10
  %20 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %20) #10
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define i32 @mz_compress(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len) #0 {
entry:
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  store i8* %pDest, i8** %pDest.addr, align 8, !tbaa !8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8, !tbaa !8
  store i8* %pSource, i8** %pSource.addr, align 8, !tbaa !8
  store i64 %source_len, i64* %source_len.addr, align 8, !tbaa !4
  %0 = load i8*, i8** %pDest.addr, align 8, !tbaa !8
  %1 = load i64*, i64** %pDest_len.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pSource.addr, align 8, !tbaa !8
  %3 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %call = call i32 @mz_compress2(i8* %0, i64* %1, i8* %2, i64 %3, i32 -1)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i64 @mz_compressBound(i64 %source_len) #0 {
entry:
  %source_len.addr = alloca i64, align 8
  store i64 %source_len, i64* %source_len.addr, align 8, !tbaa !4
  %0 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %call = call i64 @mz_deflateBound(%struct.mz_stream_s* null, i64 %0)
  ret i64 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_inflateInit2(%struct.mz_stream_s* %pStream, i32 %window_bits) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %window_bits.addr = alloca i32, align 4
  %pDecomp = alloca %struct.inflate_state*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  store i32 %window_bits, i32* %window_bits.addr, align 4, !tbaa !10
  %0 = bitcast %struct.inflate_state** %pDecomp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_stream_s* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %window_bits.addr, align 4, !tbaa !10
  %cmp = icmp ne i32 %2, 15
  br i1 %cmp, label %land.lhs.true, label %if.end3

land.lhs.true:                                    ; preds = %if.end
  %3 = load i32, i32* %window_bits.addr, align 4, !tbaa !10
  %sub = sub nsw i32 0, %3
  %cmp1 = icmp ne i32 %sub, 15
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %land.lhs.true
  store i32 -10000, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %land.lhs.true, %if.end
  %4 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %data_type = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %4, i32 0, i32 11
  store i32 0, i32* %data_type, align 8, !tbaa !13
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 12
  store i64 0, i64* %adler, align 8, !tbaa !15
  %6 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %msg = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %6, i32 0, i32 6
  store i8* null, i8** %msg, align 8, !tbaa !16
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 2
  store i64 0, i64* %total_in, align 8, !tbaa !18
  %8 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %8, i32 0, i32 5
  store i64 0, i64* %total_out, align 8, !tbaa !19
  %9 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %reserved = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %9, i32 0, i32 13
  store i64 0, i64* %reserved, align 8, !tbaa !17
  %10 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zalloc = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %10, i32 0, i32 8
  %11 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc, align 8, !tbaa !20
  %tobool4 = icmp ne i8* (i8*, i64, i64)* %11, null
  br i1 %tobool4, label %if.end7, label %if.then5

if.then5:                                         ; preds = %if.end3
  %12 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zalloc6 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %12, i32 0, i32 8
  store i8* (i8*, i64, i64)* @miniz_def_alloc_func, i8* (i8*, i64, i64)** %zalloc6, align 8, !tbaa !20
  br label %if.end7

if.end7:                                          ; preds = %if.then5, %if.end3
  %13 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %13, i32 0, i32 9
  %14 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8, !tbaa !21
  %tobool8 = icmp ne void (i8*, i8*)* %14, null
  br i1 %tobool8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %if.end7
  %15 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zfree10 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %15, i32 0, i32 9
  store void (i8*, i8*)* @miniz_def_free_func, void (i8*, i8*)** %zfree10, align 8, !tbaa !21
  br label %if.end11

if.end11:                                         ; preds = %if.then9, %if.end7
  %16 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zalloc12 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %16, i32 0, i32 8
  %17 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %zalloc12, align 8, !tbaa !20
  %18 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %opaque = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %18, i32 0, i32 10
  %19 = load i8*, i8** %opaque, align 8, !tbaa !22
  %call = call i8* %17(i8* %19, i64 1, i64 43792)
  %20 = bitcast i8* %call to %struct.inflate_state*
  store %struct.inflate_state* %20, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %21 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %tobool13 = icmp ne %struct.inflate_state* %21, null
  br i1 %tobool13, label %if.end15, label %if.then14

if.then14:                                        ; preds = %if.end11
  store i32 -4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end15:                                         ; preds = %if.end11
  %22 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %23 = bitcast %struct.inflate_state* %22 to %struct.mz_internal_state*
  %24 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %24, i32 0, i32 7
  store %struct.mz_internal_state* %23, %struct.mz_internal_state** %state, align 8, !tbaa !23
  br label %do.body

do.body:                                          ; preds = %if.end15
  %25 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_decomp = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %25, i32 0, i32 0
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %m_decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !63
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %26 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_dict_ofs = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %26, i32 0, i32 1
  store i32 0, i32* %m_dict_ofs, align 8, !tbaa !67
  %27 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_dict_avail = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %27, i32 0, i32 2
  store i32 0, i32* %m_dict_avail, align 4, !tbaa !68
  %28 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_last_status = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %28, i32 0, i32 7
  store i32 1, i32* %m_last_status, align 4, !tbaa !69
  %29 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_first_call = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %29, i32 0, i32 3
  store i32 1, i32* %m_first_call, align 8, !tbaa !70
  %30 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_has_flushed = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %30, i32 0, i32 4
  store i32 0, i32* %m_has_flushed, align 4, !tbaa !71
  %31 = load i32, i32* %window_bits.addr, align 4, !tbaa !10
  %32 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_window_bits = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %32, i32 0, i32 5
  store i32 %31, i32* %m_window_bits, align 8, !tbaa !72
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.then14, %if.then2, %if.then
  %33 = bitcast %struct.inflate_state** %pDecomp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #10
  %34 = load i32, i32* %retval, align 4
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_inflateInit(%struct.mz_stream_s* %pStream) #0 {
entry:
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %call = call i32 @mz_inflateInit2(%struct.mz_stream_s* %0, i32 15)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_inflateReset(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %pDecomp = alloca %struct.inflate_state*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %0 = bitcast %struct.inflate_state** %pDecomp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_stream_s* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %2 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %data_type = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %2, i32 0, i32 11
  store i32 0, i32* %data_type, align 8, !tbaa !13
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 12
  store i64 0, i64* %adler, align 8, !tbaa !15
  %4 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %msg = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %4, i32 0, i32 6
  store i8* null, i8** %msg, align 8, !tbaa !16
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 2
  store i64 0, i64* %total_in, align 8, !tbaa !18
  %6 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %6, i32 0, i32 5
  store i64 0, i64* %total_out, align 8, !tbaa !19
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %reserved = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 13
  store i64 0, i64* %reserved, align 8, !tbaa !17
  %8 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %8, i32 0, i32 7
  %9 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8, !tbaa !23
  %10 = bitcast %struct.mz_internal_state* %9 to %struct.inflate_state*
  store %struct.inflate_state* %10, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  br label %do.body

do.body:                                          ; preds = %if.end
  %11 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_decomp = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %11, i32 0, i32 0
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %m_decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !63
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %12 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_dict_ofs = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %12, i32 0, i32 1
  store i32 0, i32* %m_dict_ofs, align 8, !tbaa !67
  %13 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_dict_avail = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %13, i32 0, i32 2
  store i32 0, i32* %m_dict_avail, align 4, !tbaa !68
  %14 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_last_status = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %14, i32 0, i32 7
  store i32 1, i32* %m_last_status, align 4, !tbaa !69
  %15 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_first_call = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %15, i32 0, i32 3
  store i32 1, i32* %m_first_call, align 8, !tbaa !70
  %16 = load %struct.inflate_state*, %struct.inflate_state** %pDecomp, align 8, !tbaa !8
  %m_has_flushed = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %16, i32 0, i32 4
  store i32 0, i32* %m_has_flushed, align 4, !tbaa !71
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end, %if.then
  %17 = bitcast %struct.inflate_state** %pDecomp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %17) #10
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_inflate(%struct.mz_stream_s* %pStream, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  %flush.addr = alloca i32, align 4
  %pState = alloca %struct.inflate_state*, align 8
  %n = alloca i32, align 4
  %first_call = alloca i32, align 4
  %decomp_flags = alloca i32, align 4
  %in_bytes = alloca i64, align 8
  %out_bytes = alloca i64, align 8
  %orig_avail_in = alloca i64, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  store i32 %flush, i32* %flush.addr, align 4, !tbaa !10
  %0 = bitcast %struct.inflate_state** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i32* %first_call to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast i32* %decomp_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  store i32 8, i32* %decomp_flags, align 4, !tbaa !10
  %4 = bitcast i64* %in_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #10
  %5 = bitcast i64* %out_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = bitcast i64* %orig_avail_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #10
  %8 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_stream_s* %8, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %9, i32 0, i32 7
  %10 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8, !tbaa !23
  %tobool1 = icmp ne %struct.mz_internal_state* %10, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %11 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp = icmp eq i32 %11, 1
  br i1 %cmp, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store i32 2, i32* %flush.addr, align 4, !tbaa !10
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %12 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %tobool4 = icmp ne i32 %12, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %if.end3
  %13 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp5 = icmp ne i32 %13, 2
  br i1 %cmp5, label %land.lhs.true6, label %if.end9

land.lhs.true6:                                   ; preds = %land.lhs.true
  %14 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp7 = icmp ne i32 %14, 4
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %land.lhs.true6
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %land.lhs.true6, %land.lhs.true, %if.end3
  %15 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state10 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %15, i32 0, i32 7
  %16 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state10, align 8, !tbaa !23
  %17 = bitcast %struct.mz_internal_state* %16 to %struct.inflate_state*
  store %struct.inflate_state* %17, %struct.inflate_state** %pState, align 8, !tbaa !8
  %18 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_window_bits = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %18, i32 0, i32 5
  %19 = load i32, i32* %m_window_bits, align 8, !tbaa !72
  %cmp11 = icmp sgt i32 %19, 0
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end9
  %20 = load i32, i32* %decomp_flags, align 4, !tbaa !10
  %or = or i32 %20, 1
  store i32 %or, i32* %decomp_flags, align 4, !tbaa !10
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.end9
  %21 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %21, i32 0, i32 1
  %22 = load i32, i32* %avail_in, align 8, !tbaa !61
  %conv = zext i32 %22 to i64
  store i64 %conv, i64* %orig_avail_in, align 8, !tbaa !4
  %23 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_first_call = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %23, i32 0, i32 3
  %24 = load i32, i32* %m_first_call, align 8, !tbaa !70
  store i32 %24, i32* %first_call, align 4, !tbaa !10
  %25 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_first_call14 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %25, i32 0, i32 3
  store i32 0, i32* %m_first_call14, align 8, !tbaa !70
  %26 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_last_status = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %26, i32 0, i32 7
  %27 = load i32, i32* %m_last_status, align 4, !tbaa !69
  %cmp15 = icmp slt i32 %27, 0
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end13
  store i32 -3, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end18:                                         ; preds = %if.end13
  %28 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_has_flushed = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %28, i32 0, i32 4
  %29 = load i32, i32* %m_has_flushed, align 4, !tbaa !71
  %tobool19 = icmp ne i32 %29, 0
  br i1 %tobool19, label %land.lhs.true20, label %if.end24

land.lhs.true20:                                  ; preds = %if.end18
  %30 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp21 = icmp ne i32 %30, 4
  br i1 %cmp21, label %if.then23, label %if.end24

if.then23:                                        ; preds = %land.lhs.true20
  store i32 -2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end24:                                         ; preds = %land.lhs.true20, %if.end18
  %31 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp25 = icmp eq i32 %31, 4
  %conv26 = zext i1 %cmp25 to i32
  %32 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_has_flushed27 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %32, i32 0, i32 4
  %33 = load i32, i32* %m_has_flushed27, align 4, !tbaa !71
  %or28 = or i32 %33, %conv26
  store i32 %or28, i32* %m_has_flushed27, align 4, !tbaa !71
  %34 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp29 = icmp eq i32 %34, 4
  br i1 %cmp29, label %land.lhs.true31, label %if.end67

land.lhs.true31:                                  ; preds = %if.end24
  %35 = load i32, i32* %first_call, align 4, !tbaa !10
  %tobool32 = icmp ne i32 %35, 0
  br i1 %tobool32, label %if.then33, label %if.end67

if.then33:                                        ; preds = %land.lhs.true31
  %36 = load i32, i32* %decomp_flags, align 4, !tbaa !10
  %or34 = or i32 %36, 4
  store i32 %or34, i32* %decomp_flags, align 4, !tbaa !10
  %37 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in35 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %37, i32 0, i32 1
  %38 = load i32, i32* %avail_in35, align 8, !tbaa !61
  %conv36 = zext i32 %38 to i64
  store i64 %conv36, i64* %in_bytes, align 8, !tbaa !4
  %39 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %39, i32 0, i32 4
  %40 = load i32, i32* %avail_out, align 8, !tbaa !60
  %conv37 = zext i32 %40 to i64
  store i64 %conv37, i64* %out_bytes, align 8, !tbaa !4
  %41 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_decomp = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %41, i32 0, i32 0
  %42 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %42, i32 0, i32 0
  %43 = load i8*, i8** %next_in, align 8, !tbaa !62
  %44 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %44, i32 0, i32 3
  %45 = load i8*, i8** %next_out, align 8, !tbaa !59
  %46 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out38 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %46, i32 0, i32 3
  %47 = load i8*, i8** %next_out38, align 8, !tbaa !59
  %48 = load i32, i32* %decomp_flags, align 4, !tbaa !10
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %m_decomp, i8* %43, i64* %in_bytes, i8* %45, i8* %47, i64* %out_bytes, i32 %48)
  store i32 %call, i32* %status, align 4, !tbaa !12
  %49 = load i32, i32* %status, align 4, !tbaa !12
  %50 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_last_status39 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %50, i32 0, i32 7
  store i32 %49, i32* %m_last_status39, align 4, !tbaa !69
  %51 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv40 = trunc i64 %51 to i32
  %52 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_in41 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %52, i32 0, i32 0
  %53 = load i8*, i8** %next_in41, align 8, !tbaa !62
  %idx.ext = zext i32 %conv40 to i64
  %add.ptr = getelementptr inbounds i8, i8* %53, i64 %idx.ext
  store i8* %add.ptr, i8** %next_in41, align 8, !tbaa !62
  %54 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv42 = trunc i64 %54 to i32
  %55 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in43 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %55, i32 0, i32 1
  %56 = load i32, i32* %avail_in43, align 8, !tbaa !61
  %sub = sub i32 %56, %conv42
  store i32 %sub, i32* %avail_in43, align 8, !tbaa !61
  %57 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv44 = trunc i64 %57 to i32
  %conv45 = zext i32 %conv44 to i64
  %58 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %58, i32 0, i32 2
  %59 = load i64, i64* %total_in, align 8, !tbaa !18
  %add = add i64 %59, %conv45
  store i64 %add, i64* %total_in, align 8, !tbaa !18
  %60 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_decomp46 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %60, i32 0, i32 0
  %m_check_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %m_decomp46, i32 0, i32 7
  %61 = load i32, i32* %m_check_adler32, align 4, !tbaa !73
  %conv47 = zext i32 %61 to i64
  %62 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %adler = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %62, i32 0, i32 12
  store i64 %conv47, i64* %adler, align 8, !tbaa !15
  %63 = load i64, i64* %out_bytes, align 8, !tbaa !4
  %conv48 = trunc i64 %63 to i32
  %64 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out49 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %64, i32 0, i32 3
  %65 = load i8*, i8** %next_out49, align 8, !tbaa !59
  %idx.ext50 = zext i32 %conv48 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %65, i64 %idx.ext50
  store i8* %add.ptr51, i8** %next_out49, align 8, !tbaa !59
  %66 = load i64, i64* %out_bytes, align 8, !tbaa !4
  %conv52 = trunc i64 %66 to i32
  %67 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out53 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %67, i32 0, i32 4
  %68 = load i32, i32* %avail_out53, align 8, !tbaa !60
  %sub54 = sub i32 %68, %conv52
  store i32 %sub54, i32* %avail_out53, align 8, !tbaa !60
  %69 = load i64, i64* %out_bytes, align 8, !tbaa !4
  %conv55 = trunc i64 %69 to i32
  %conv56 = zext i32 %conv55 to i64
  %70 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %70, i32 0, i32 5
  %71 = load i64, i64* %total_out, align 8, !tbaa !19
  %add57 = add i64 %71, %conv56
  store i64 %add57, i64* %total_out, align 8, !tbaa !19
  %72 = load i32, i32* %status, align 4, !tbaa !12
  %cmp58 = icmp slt i32 %72, 0
  br i1 %cmp58, label %if.then60, label %if.else

if.then60:                                        ; preds = %if.then33
  store i32 -3, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %if.then33
  %73 = load i32, i32* %status, align 4, !tbaa !12
  %cmp61 = icmp ne i32 %73, 0
  br i1 %cmp61, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else
  %74 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_last_status64 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %74, i32 0, i32 7
  store i32 -1, i32* %m_last_status64, align 4, !tbaa !69
  store i32 -5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end65:                                         ; preds = %if.else
  br label %if.end66

if.end66:                                         ; preds = %if.end65
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end67:                                         ; preds = %land.lhs.true31, %if.end24
  %75 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp68 = icmp ne i32 %75, 4
  br i1 %cmp68, label %if.then70, label %if.end72

if.then70:                                        ; preds = %if.end67
  %76 = load i32, i32* %decomp_flags, align 4, !tbaa !10
  %or71 = or i32 %76, 2
  store i32 %or71, i32* %decomp_flags, align 4, !tbaa !10
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %if.end67
  %77 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %77, i32 0, i32 2
  %78 = load i32, i32* %m_dict_avail, align 4, !tbaa !68
  %tobool73 = icmp ne i32 %78, 0
  br i1 %tobool73, label %if.then74, label %if.end106

if.then74:                                        ; preds = %if.end72
  %79 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail75 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %79, i32 0, i32 2
  %80 = load i32, i32* %m_dict_avail75, align 4, !tbaa !68
  %81 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out76 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %81, i32 0, i32 4
  %82 = load i32, i32* %avail_out76, align 8, !tbaa !60
  %cmp77 = icmp ult i32 %80, %82
  br i1 %cmp77, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then74
  %83 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail79 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %83, i32 0, i32 2
  %84 = load i32, i32* %m_dict_avail79, align 4, !tbaa !68
  br label %cond.end

cond.false:                                       ; preds = %if.then74
  %85 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out80 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %85, i32 0, i32 4
  %86 = load i32, i32* %avail_out80, align 8, !tbaa !60
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %84, %cond.true ], [ %86, %cond.false ]
  store i32 %cond, i32* %n, align 4, !tbaa !10
  %87 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out81 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %87, i32 0, i32 3
  %88 = load i8*, i8** %next_out81, align 8, !tbaa !59
  %89 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %89, i32 0, i32 6
  %arraydecay = getelementptr inbounds [32768 x i8], [32768 x i8]* %m_dict, i64 0, i64 0
  %90 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_ofs = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %90, i32 0, i32 1
  %91 = load i32, i32* %m_dict_ofs, align 8, !tbaa !67
  %idx.ext82 = zext i32 %91 to i64
  %add.ptr83 = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext82
  %92 = load i32, i32* %n, align 4, !tbaa !10
  %conv84 = zext i32 %92 to i64
  %93 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out85 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %93, i32 0, i32 3
  %94 = load i8*, i8** %next_out85, align 8, !tbaa !59
  %95 = call i64 @llvm.objectsize.i64.p0i8(i8* %94, i1 false, i1 true, i1 false)
  %call86 = call i8* @__memcpy_chk(i8* %88, i8* %add.ptr83, i64 %conv84, i64 %95) #10
  %96 = load i32, i32* %n, align 4, !tbaa !10
  %97 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out87 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %97, i32 0, i32 3
  %98 = load i8*, i8** %next_out87, align 8, !tbaa !59
  %idx.ext88 = zext i32 %96 to i64
  %add.ptr89 = getelementptr inbounds i8, i8* %98, i64 %idx.ext88
  store i8* %add.ptr89, i8** %next_out87, align 8, !tbaa !59
  %99 = load i32, i32* %n, align 4, !tbaa !10
  %100 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out90 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %100, i32 0, i32 4
  %101 = load i32, i32* %avail_out90, align 8, !tbaa !60
  %sub91 = sub i32 %101, %99
  store i32 %sub91, i32* %avail_out90, align 8, !tbaa !60
  %102 = load i32, i32* %n, align 4, !tbaa !10
  %conv92 = zext i32 %102 to i64
  %103 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out93 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %103, i32 0, i32 5
  %104 = load i64, i64* %total_out93, align 8, !tbaa !19
  %add94 = add i64 %104, %conv92
  store i64 %add94, i64* %total_out93, align 8, !tbaa !19
  %105 = load i32, i32* %n, align 4, !tbaa !10
  %106 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail95 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %106, i32 0, i32 2
  %107 = load i32, i32* %m_dict_avail95, align 4, !tbaa !68
  %sub96 = sub i32 %107, %105
  store i32 %sub96, i32* %m_dict_avail95, align 4, !tbaa !68
  %108 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_ofs97 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %108, i32 0, i32 1
  %109 = load i32, i32* %m_dict_ofs97, align 8, !tbaa !67
  %110 = load i32, i32* %n, align 4, !tbaa !10
  %add98 = add i32 %109, %110
  %and = and i32 %add98, 32767
  %111 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_ofs99 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %111, i32 0, i32 1
  store i32 %and, i32* %m_dict_ofs99, align 8, !tbaa !67
  %112 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_last_status100 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %112, i32 0, i32 7
  %113 = load i32, i32* %m_last_status100, align 4, !tbaa !69
  %cmp101 = icmp eq i32 %113, 0
  br i1 %cmp101, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end
  %114 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail103 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %114, i32 0, i32 2
  %115 = load i32, i32* %m_dict_avail103, align 4, !tbaa !68
  %tobool104 = icmp ne i32 %115, 0
  %lnot = xor i1 %tobool104, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end
  %116 = phi i1 [ false, %cond.end ], [ %lnot, %land.rhs ]
  %117 = zext i1 %116 to i64
  %cond105 = select i1 %116, i32 1, i32 0
  store i32 %cond105, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end106:                                        ; preds = %if.end72
  br label %for.cond

for.cond:                                         ; preds = %if.end214, %if.end106
  %118 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in107 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %118, i32 0, i32 1
  %119 = load i32, i32* %avail_in107, align 8, !tbaa !61
  %conv108 = zext i32 %119 to i64
  store i64 %conv108, i64* %in_bytes, align 8, !tbaa !4
  %120 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_ofs109 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %120, i32 0, i32 1
  %121 = load i32, i32* %m_dict_ofs109, align 8, !tbaa !67
  %sub110 = sub i32 32768, %121
  %conv111 = zext i32 %sub110 to i64
  store i64 %conv111, i64* %out_bytes, align 8, !tbaa !4
  %122 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_decomp112 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %122, i32 0, i32 0
  %123 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_in113 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %123, i32 0, i32 0
  %124 = load i8*, i8** %next_in113, align 8, !tbaa !62
  %125 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict114 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %125, i32 0, i32 6
  %arraydecay115 = getelementptr inbounds [32768 x i8], [32768 x i8]* %m_dict114, i64 0, i64 0
  %126 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict116 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %126, i32 0, i32 6
  %arraydecay117 = getelementptr inbounds [32768 x i8], [32768 x i8]* %m_dict116, i64 0, i64 0
  %127 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_ofs118 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %127, i32 0, i32 1
  %128 = load i32, i32* %m_dict_ofs118, align 8, !tbaa !67
  %idx.ext119 = zext i32 %128 to i64
  %add.ptr120 = getelementptr inbounds i8, i8* %arraydecay117, i64 %idx.ext119
  %129 = load i32, i32* %decomp_flags, align 4, !tbaa !10
  %call121 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %m_decomp112, i8* %124, i64* %in_bytes, i8* %arraydecay115, i8* %add.ptr120, i64* %out_bytes, i32 %129)
  store i32 %call121, i32* %status, align 4, !tbaa !12
  %130 = load i32, i32* %status, align 4, !tbaa !12
  %131 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_last_status122 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %131, i32 0, i32 7
  store i32 %130, i32* %m_last_status122, align 4, !tbaa !69
  %132 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv123 = trunc i64 %132 to i32
  %133 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_in124 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %133, i32 0, i32 0
  %134 = load i8*, i8** %next_in124, align 8, !tbaa !62
  %idx.ext125 = zext i32 %conv123 to i64
  %add.ptr126 = getelementptr inbounds i8, i8* %134, i64 %idx.ext125
  store i8* %add.ptr126, i8** %next_in124, align 8, !tbaa !62
  %135 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv127 = trunc i64 %135 to i32
  %136 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in128 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %136, i32 0, i32 1
  %137 = load i32, i32* %avail_in128, align 8, !tbaa !61
  %sub129 = sub i32 %137, %conv127
  store i32 %sub129, i32* %avail_in128, align 8, !tbaa !61
  %138 = load i64, i64* %in_bytes, align 8, !tbaa !4
  %conv130 = trunc i64 %138 to i32
  %conv131 = zext i32 %conv130 to i64
  %139 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_in132 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %139, i32 0, i32 2
  %140 = load i64, i64* %total_in132, align 8, !tbaa !18
  %add133 = add i64 %140, %conv131
  store i64 %add133, i64* %total_in132, align 8, !tbaa !18
  %141 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_decomp134 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %141, i32 0, i32 0
  %m_check_adler32135 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %m_decomp134, i32 0, i32 7
  %142 = load i32, i32* %m_check_adler32135, align 4, !tbaa !73
  %conv136 = zext i32 %142 to i64
  %143 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %adler137 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %143, i32 0, i32 12
  store i64 %conv136, i64* %adler137, align 8, !tbaa !15
  %144 = load i64, i64* %out_bytes, align 8, !tbaa !4
  %conv138 = trunc i64 %144 to i32
  %145 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail139 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %145, i32 0, i32 2
  store i32 %conv138, i32* %m_dict_avail139, align 4, !tbaa !68
  %146 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail140 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %146, i32 0, i32 2
  %147 = load i32, i32* %m_dict_avail140, align 4, !tbaa !68
  %148 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out141 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %148, i32 0, i32 4
  %149 = load i32, i32* %avail_out141, align 8, !tbaa !60
  %cmp142 = icmp ult i32 %147, %149
  br i1 %cmp142, label %cond.true144, label %cond.false146

cond.true144:                                     ; preds = %for.cond
  %150 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail145 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %150, i32 0, i32 2
  %151 = load i32, i32* %m_dict_avail145, align 4, !tbaa !68
  br label %cond.end148

cond.false146:                                    ; preds = %for.cond
  %152 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out147 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %152, i32 0, i32 4
  %153 = load i32, i32* %avail_out147, align 8, !tbaa !60
  br label %cond.end148

cond.end148:                                      ; preds = %cond.false146, %cond.true144
  %cond149 = phi i32 [ %151, %cond.true144 ], [ %153, %cond.false146 ]
  store i32 %cond149, i32* %n, align 4, !tbaa !10
  %154 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out150 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %154, i32 0, i32 3
  %155 = load i8*, i8** %next_out150, align 8, !tbaa !59
  %156 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict151 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %156, i32 0, i32 6
  %arraydecay152 = getelementptr inbounds [32768 x i8], [32768 x i8]* %m_dict151, i64 0, i64 0
  %157 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_ofs153 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %157, i32 0, i32 1
  %158 = load i32, i32* %m_dict_ofs153, align 8, !tbaa !67
  %idx.ext154 = zext i32 %158 to i64
  %add.ptr155 = getelementptr inbounds i8, i8* %arraydecay152, i64 %idx.ext154
  %159 = load i32, i32* %n, align 4, !tbaa !10
  %conv156 = zext i32 %159 to i64
  %160 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out157 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %160, i32 0, i32 3
  %161 = load i8*, i8** %next_out157, align 8, !tbaa !59
  %162 = call i64 @llvm.objectsize.i64.p0i8(i8* %161, i1 false, i1 true, i1 false)
  %call158 = call i8* @__memcpy_chk(i8* %155, i8* %add.ptr155, i64 %conv156, i64 %162) #10
  %163 = load i32, i32* %n, align 4, !tbaa !10
  %164 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %next_out159 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %164, i32 0, i32 3
  %165 = load i8*, i8** %next_out159, align 8, !tbaa !59
  %idx.ext160 = zext i32 %163 to i64
  %add.ptr161 = getelementptr inbounds i8, i8* %165, i64 %idx.ext160
  store i8* %add.ptr161, i8** %next_out159, align 8, !tbaa !59
  %166 = load i32, i32* %n, align 4, !tbaa !10
  %167 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out162 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %167, i32 0, i32 4
  %168 = load i32, i32* %avail_out162, align 8, !tbaa !60
  %sub163 = sub i32 %168, %166
  store i32 %sub163, i32* %avail_out162, align 8, !tbaa !60
  %169 = load i32, i32* %n, align 4, !tbaa !10
  %conv164 = zext i32 %169 to i64
  %170 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %total_out165 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %170, i32 0, i32 5
  %171 = load i64, i64* %total_out165, align 8, !tbaa !19
  %add166 = add i64 %171, %conv164
  store i64 %add166, i64* %total_out165, align 8, !tbaa !19
  %172 = load i32, i32* %n, align 4, !tbaa !10
  %173 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail167 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %173, i32 0, i32 2
  %174 = load i32, i32* %m_dict_avail167, align 4, !tbaa !68
  %sub168 = sub i32 %174, %172
  store i32 %sub168, i32* %m_dict_avail167, align 4, !tbaa !68
  %175 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_ofs169 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %175, i32 0, i32 1
  %176 = load i32, i32* %m_dict_ofs169, align 8, !tbaa !67
  %177 = load i32, i32* %n, align 4, !tbaa !10
  %add170 = add i32 %176, %177
  %and171 = and i32 %add170, 32767
  %178 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_ofs172 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %178, i32 0, i32 1
  store i32 %and171, i32* %m_dict_ofs172, align 8, !tbaa !67
  %179 = load i32, i32* %status, align 4, !tbaa !12
  %cmp173 = icmp slt i32 %179, 0
  br i1 %cmp173, label %if.then175, label %if.else176

if.then175:                                       ; preds = %cond.end148
  store i32 -3, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else176:                                       ; preds = %cond.end148
  %180 = load i32, i32* %status, align 4, !tbaa !12
  %cmp177 = icmp eq i32 %180, 1
  br i1 %cmp177, label %land.lhs.true179, label %if.else182

land.lhs.true179:                                 ; preds = %if.else176
  %181 = load i64, i64* %orig_avail_in, align 8, !tbaa !4
  %tobool180 = icmp ne i64 %181, 0
  br i1 %tobool180, label %if.else182, label %if.then181

if.then181:                                       ; preds = %land.lhs.true179
  store i32 -5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else182:                                       ; preds = %land.lhs.true179, %if.else176
  %182 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp183 = icmp eq i32 %182, 4
  br i1 %cmp183, label %if.then185, label %if.else198

if.then185:                                       ; preds = %if.else182
  %183 = load i32, i32* %status, align 4, !tbaa !12
  %cmp186 = icmp eq i32 %183, 0
  br i1 %cmp186, label %if.then188, label %if.else192

if.then188:                                       ; preds = %if.then185
  %184 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail189 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %184, i32 0, i32 2
  %185 = load i32, i32* %m_dict_avail189, align 4, !tbaa !68
  %tobool190 = icmp ne i32 %185, 0
  %186 = zext i1 %tobool190 to i64
  %cond191 = select i1 %tobool190, i32 -5, i32 1
  store i32 %cond191, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else192:                                       ; preds = %if.then185
  %187 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out193 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %187, i32 0, i32 4
  %188 = load i32, i32* %avail_out193, align 8, !tbaa !60
  %tobool194 = icmp ne i32 %188, 0
  br i1 %tobool194, label %if.end196, label %if.then195

if.then195:                                       ; preds = %if.else192
  store i32 -5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end196:                                        ; preds = %if.else192
  br label %if.end197

if.end197:                                        ; preds = %if.end196
  br label %if.end212

if.else198:                                       ; preds = %if.else182
  %189 = load i32, i32* %status, align 4, !tbaa !12
  %cmp199 = icmp eq i32 %189, 0
  br i1 %cmp199, label %if.then210, label %lor.lhs.false201

lor.lhs.false201:                                 ; preds = %if.else198
  %190 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_in202 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %190, i32 0, i32 1
  %191 = load i32, i32* %avail_in202, align 8, !tbaa !61
  %tobool203 = icmp ne i32 %191, 0
  br i1 %tobool203, label %lor.lhs.false204, label %if.then210

lor.lhs.false204:                                 ; preds = %lor.lhs.false201
  %192 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %avail_out205 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %192, i32 0, i32 4
  %193 = load i32, i32* %avail_out205, align 8, !tbaa !60
  %tobool206 = icmp ne i32 %193, 0
  br i1 %tobool206, label %lor.lhs.false207, label %if.then210

lor.lhs.false207:                                 ; preds = %lor.lhs.false204
  %194 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail208 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %194, i32 0, i32 2
  %195 = load i32, i32* %m_dict_avail208, align 4, !tbaa !68
  %tobool209 = icmp ne i32 %195, 0
  br i1 %tobool209, label %if.then210, label %if.end211

if.then210:                                       ; preds = %lor.lhs.false207, %lor.lhs.false204, %lor.lhs.false201, %if.else198
  br label %for.end

if.end211:                                        ; preds = %lor.lhs.false207
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.end197
  br label %if.end213

if.end213:                                        ; preds = %if.end212
  br label %if.end214

if.end214:                                        ; preds = %if.end213
  br label %for.cond

for.end:                                          ; preds = %if.then210
  %196 = load i32, i32* %status, align 4, !tbaa !12
  %cmp215 = icmp eq i32 %196, 0
  br i1 %cmp215, label %land.rhs217, label %land.end221

land.rhs217:                                      ; preds = %for.end
  %197 = load %struct.inflate_state*, %struct.inflate_state** %pState, align 8, !tbaa !8
  %m_dict_avail218 = getelementptr inbounds %struct.inflate_state, %struct.inflate_state* %197, i32 0, i32 2
  %198 = load i32, i32* %m_dict_avail218, align 4, !tbaa !68
  %tobool219 = icmp ne i32 %198, 0
  %lnot220 = xor i1 %tobool219, true
  br label %land.end221

land.end221:                                      ; preds = %land.rhs217, %for.end
  %199 = phi i1 [ false, %for.end ], [ %lnot220, %land.rhs217 ]
  %200 = zext i1 %199 to i64
  %cond222 = select i1 %199, i32 1, i32 0
  store i32 %cond222, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %land.end221, %if.then195, %if.then188, %if.then181, %if.then175, %land.end, %if.end66, %if.then63, %if.then60, %if.then23, %if.then17, %if.then8, %if.then
  %201 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #10
  %202 = bitcast i64* %orig_avail_in to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %202) #10
  %203 = bitcast i64* %out_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %203) #10
  %204 = bitcast i64* %in_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %204) #10
  %205 = bitcast i32* %decomp_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %205) #10
  %206 = bitcast i32* %first_call to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %206) #10
  %207 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %207) #10
  %208 = bitcast %struct.inflate_state** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %208) #10
  %209 = load i32, i32* %retval, align 4
  ret i32 %209
}

; Function Attrs: nounwind ssp uwtable
define i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %r, i8* %pIn_buf_next, i64* %pIn_buf_size, i8* %pOut_buf_start, i8* %pOut_buf_next, i64* %pOut_buf_size, i32 %decomp_flags) #0 {
entry:
  %retval = alloca i32, align 4
  %r.addr = alloca %struct.tinfl_decompressor_tag*, align 8
  %pIn_buf_next.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pOut_buf_start.addr = alloca i8*, align 8
  %pOut_buf_next.addr = alloca i8*, align 8
  %pOut_buf_size.addr = alloca i64*, align 8
  %decomp_flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %num_bits = alloca i32, align 4
  %dist = alloca i32, align 4
  %counter = alloca i32, align 4
  %num_extra = alloca i32, align 4
  %bit_buf = alloca i64, align 8
  %pIn_buf_cur = alloca i8*, align 8
  %pIn_buf_end = alloca i8*, align 8
  %pOut_buf_cur = alloca i8*, align 8
  %pOut_buf_end = alloca i8*, align 8
  %out_buf_size_mask = alloca i64, align 8
  %dist_from_out_buf_start = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %c = alloca i32, align 4
  %c132 = alloca i32, align 4
  %c179 = alloca i32, align 4
  %c273 = alloca i32, align 4
  %n = alloca i64, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  %c473 = alloca i32, align 4
  %s = alloca i32, align 4
  %c554 = alloca i32, align 4
  %tree_next = alloca i32, align 4
  %tree_cur = alloca i32, align 4
  %pTable = alloca %struct.tinfl_huff_table*, align 8
  %i608 = alloca i32, align 4
  %j = alloca i32, align 4
  %used_syms = alloca i32, align 4
  %total = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %next_code = alloca [17 x i32], align 16
  %total_syms = alloca [16 x i32], align 16
  %rev_code = alloca i32, align 4
  %l = alloca i32, align 4
  %cur_code = alloca i32, align 4
  %code_size = alloca i32, align 4
  %k = alloca i16, align 2
  %s790 = alloca i32, align 4
  %temp = alloca i32, align 4
  %code_len = alloca i32, align 4
  %c792 = alloca i32, align 4
  %c960 = alloca i32, align 4
  %pSrc = alloca i8*, align 8
  %temp1096 = alloca i32, align 4
  %code_len1097 = alloca i32, align 4
  %c1098 = alloca i32, align 4
  %sym2 = alloca i32, align 4
  %code_len1252 = alloca i32, align 4
  %extra_bits = alloca i32, align 4
  %c1365 = alloca i32, align 4
  %temp1407 = alloca i32, align 4
  %code_len1408 = alloca i32, align 4
  %c1409 = alloca i32, align 4
  %extra_bits1552 = alloca i32, align 4
  %c1558 = alloca i32, align 4
  %pSrc_end = alloca i8*, align 8
  %c1738 = alloca i32, align 4
  %s1805 = alloca i32, align 4
  %c1813 = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %buf_len = alloca i64, align 8
  %i1925 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %s2 = alloca i32, align 4
  %block_len = alloca i64, align 8
  store %struct.tinfl_decompressor_tag* %r, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  store i8* %pIn_buf_next, i8** %pIn_buf_next.addr, align 8, !tbaa !8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  store i8* %pOut_buf_start, i8** %pOut_buf_start.addr, align 8, !tbaa !8
  store i8* %pOut_buf_next, i8** %pOut_buf_next.addr, align 8, !tbaa !8
  store i64* %pOut_buf_size, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  store i32 %decomp_flags, i32* %decomp_flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 -1, i32* %status, align 4, !tbaa !12
  %1 = bitcast i32* %num_bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i32* %dist to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast i32* %counter to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = bitcast i32* %num_extra to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  %5 = bitcast i64* %bit_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = bitcast i8** %pIn_buf_cur to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = load i8*, i8** %pIn_buf_next.addr, align 8, !tbaa !8
  store i8* %7, i8** %pIn_buf_cur, align 8, !tbaa !8
  %8 = bitcast i8** %pIn_buf_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #10
  %9 = load i8*, i8** %pIn_buf_next.addr, align 8, !tbaa !8
  %10 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %11 = load i64, i64* %10, align 8, !tbaa !4
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %11
  store i8* %add.ptr, i8** %pIn_buf_end, align 8, !tbaa !8
  %12 = bitcast i8** %pOut_buf_cur to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #10
  %13 = load i8*, i8** %pOut_buf_next.addr, align 8, !tbaa !8
  store i8* %13, i8** %pOut_buf_cur, align 8, !tbaa !8
  %14 = bitcast i8** %pOut_buf_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #10
  %15 = load i8*, i8** %pOut_buf_next.addr, align 8, !tbaa !8
  %16 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %17 = load i64, i64* %16, align 8, !tbaa !4
  %add.ptr1 = getelementptr inbounds i8, i8* %15, i64 %17
  store i8* %add.ptr1, i8** %pOut_buf_end, align 8, !tbaa !8
  %18 = bitcast i64* %out_buf_size_mask to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #10
  %19 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and = and i32 %19, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %20 = load i8*, i8** %pOut_buf_next.addr, align 8, !tbaa !8
  %21 = load i8*, i8** %pOut_buf_start.addr, align 8, !tbaa !8
  %sub.ptr.lhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %21 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %22 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %23 = load i64, i64* %22, align 8, !tbaa !4
  %add = add i64 %sub.ptr.sub, %23
  %sub = sub i64 %add, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %sub, %cond.false ]
  store i64 %cond, i64* %out_buf_size_mask, align 8, !tbaa !4
  %24 = bitcast i64* %dist_from_out_buf_start to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #10
  %25 = load i64, i64* %out_buf_size_mask, align 8, !tbaa !4
  %add2 = add i64 %25, 1
  %26 = load i64, i64* %out_buf_size_mask, align 8, !tbaa !4
  %and3 = and i64 %add2, %26
  %tobool4 = icmp ne i64 %and3, 0
  br i1 %tobool4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %27 = load i8*, i8** %pOut_buf_next.addr, align 8, !tbaa !8
  %28 = load i8*, i8** %pOut_buf_start.addr, align 8, !tbaa !8
  %cmp = icmp ult i8* %27, %28
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %29 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  store i64 0, i64* %29, align 8, !tbaa !4
  %30 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  store i64 0, i64* %30, align 8, !tbaa !4
  store i32 -3, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup2008

if.end:                                           ; preds = %lor.lhs.false
  %31 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_num_bits = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %31, i32 0, i32 1
  %32 = load i32, i32* %m_num_bits, align 4, !tbaa !74
  store i32 %32, i32* %num_bits, align 4, !tbaa !10
  %33 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_bit_buf = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %33, i32 0, i32 12
  %34 = load i64, i64* %m_bit_buf, align 8, !tbaa !75
  store i64 %34, i64* %bit_buf, align 8, !tbaa !76
  %35 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_dist = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %35, i32 0, i32 8
  %36 = load i32, i32* %m_dist, align 8, !tbaa !77
  store i32 %36, i32* %dist, align 4, !tbaa !10
  %37 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_counter = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %37, i32 0, i32 9
  %38 = load i32, i32* %m_counter, align 4, !tbaa !78
  store i32 %38, i32* %counter, align 4, !tbaa !10
  %39 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_num_extra = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %39, i32 0, i32 10
  %40 = load i32, i32* %m_num_extra, align 8, !tbaa !79
  store i32 %40, i32* %num_extra, align 4, !tbaa !10
  %41 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_dist_from_out_buf_start = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %41, i32 0, i32 13
  %42 = load i64, i64* %m_dist_from_out_buf_start, align 8, !tbaa !80
  store i64 %42, i64* %dist_from_out_buf_start, align 8, !tbaa !4
  %43 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %43, i32 0, i32 0
  %44 = load i32, i32* %m_state, align 8, !tbaa !81
  switch i32 %44, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb14
    i32 2, label %sw.bb28
    i32 36, label %sw.bb74
    i32 3, label %sw.bb97
    i32 5, label %sw.bb143
    i32 6, label %sw.bb190
    i32 7, label %sw.bb224
    i32 39, label %sw.bb258
    i32 51, label %sw.bb284
    i32 52, label %sw.bb314
    i32 9, label %sw.bb330
    i32 38, label %sw.bb343
    i32 10, label %sw.bb405
    i32 11, label %sw.bb484
    i32 14, label %sw.bb565
    i32 35, label %sw.bb662
    i32 16, label %sw.bb860
    i32 17, label %sw.bb945
    i32 18, label %sw.bb971
    i32 21, label %sw.bb1038
    i32 23, label %sw.bb1167
    i32 24, label %sw.bb1245
    i32 25, label %sw.bb1376
    i32 26, label %sw.bb1478
    i32 27, label %sw.bb1569
    i32 37, label %sw.bb1613
    i32 53, label %sw.bb1644
    i32 32, label %sw.bb1749
    i32 41, label %sw.bb1824
    i32 42, label %sw.bb1859
    i32 34, label %sw.bb1880
  ]

sw.bb:                                            ; preds = %if.end
  %45 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr1 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %45, i32 0, i32 3
  store i32 0, i32* %m_zhdr1, align 4, !tbaa !82
  %46 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr0 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %46, i32 0, i32 2
  store i32 0, i32* %m_zhdr0, align 8, !tbaa !83
  store i32 0, i32* %num_extra, align 4, !tbaa !10
  store i32 0, i32* %counter, align 4, !tbaa !10
  store i32 0, i32* %dist, align 4, !tbaa !10
  store i32 0, i32* %num_bits, align 4, !tbaa !10
  store i64 0, i64* %bit_buf, align 8, !tbaa !76
  %47 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_check_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %47, i32 0, i32 7
  store i32 1, i32* %m_check_adler32, align 4, !tbaa !84
  %48 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_z_adler32 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %48, i32 0, i32 4
  store i32 1, i32* %m_z_adler32, align 8, !tbaa !85
  %49 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and5 = and i32 %49, 1
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.end80

if.then7:                                         ; preds = %sw.bb
  br label %do.body

do.body:                                          ; preds = %if.then7
  br label %while.cond

while.cond:                                       ; preds = %do.end, %do.body
  %50 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %51 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp8 = icmp uge i8* %50, %51
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  br label %do.body9

do.body9:                                         ; preds = %while.body
  %52 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and10 = and i32 %52, 2
  %tobool11 = icmp ne i32 %and10, 0
  %53 = zext i1 %tobool11 to i64
  %cond12 = select i1 %tobool11, i32 1, i32 -4
  store i32 %cond12, i32* %status, align 4, !tbaa !12
  %54 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state13 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %54, i32 0, i32 0
  store i32 1, i32* %m_state13, align 8, !tbaa !81
  br label %common_exit

sw.bb14:                                          ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %sw.bb14
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %55 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i8, i8* %55, i32 1
  store i8* %incdec.ptr, i8** %pIn_buf_cur, align 8, !tbaa !8
  %56 = load i8, i8* %55, align 1, !tbaa !12
  %conv = zext i8 %56 to i32
  %57 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr015 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %57, i32 0, i32 2
  store i32 %conv, i32* %m_zhdr015, align 8, !tbaa !83
  br label %do.cond16

do.cond16:                                        ; preds = %while.end
  br label %do.end17

do.end17:                                         ; preds = %do.cond16
  br label %do.body18

do.body18:                                        ; preds = %do.end17
  br label %while.cond19

while.cond19:                                     ; preds = %do.end30, %do.body18
  %58 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %59 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp20 = icmp uge i8* %58, %59
  br i1 %cmp20, label %while.body22, label %while.end31

while.body22:                                     ; preds = %while.cond19
  br label %do.body23

do.body23:                                        ; preds = %while.body22
  %60 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and24 = and i32 %60, 2
  %tobool25 = icmp ne i32 %and24, 0
  %61 = zext i1 %tobool25 to i64
  %cond26 = select i1 %tobool25, i32 1, i32 -4
  store i32 %cond26, i32* %status, align 4, !tbaa !12
  %62 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state27 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %62, i32 0, i32 0
  store i32 2, i32* %m_state27, align 8, !tbaa !81
  br label %common_exit

sw.bb28:                                          ; preds = %if.end
  br label %do.cond29

do.cond29:                                        ; preds = %sw.bb28
  br label %do.end30

do.end30:                                         ; preds = %do.cond29
  br label %while.cond19

while.end31:                                      ; preds = %while.cond19
  %63 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr32 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %incdec.ptr32, i8** %pIn_buf_cur, align 8, !tbaa !8
  %64 = load i8, i8* %63, align 1, !tbaa !12
  %conv33 = zext i8 %64 to i32
  %65 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr134 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %65, i32 0, i32 3
  store i32 %conv33, i32* %m_zhdr134, align 4, !tbaa !82
  br label %do.cond35

do.cond35:                                        ; preds = %while.end31
  br label %do.end36

do.end36:                                         ; preds = %do.cond35
  %66 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr037 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %66, i32 0, i32 2
  %67 = load i32, i32* %m_zhdr037, align 8, !tbaa !83
  %mul = mul i32 %67, 256
  %68 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr138 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %68, i32 0, i32 3
  %69 = load i32, i32* %m_zhdr138, align 4, !tbaa !82
  %add39 = add i32 %mul, %69
  %rem = urem i32 %add39, 31
  %cmp40 = icmp ne i32 %rem, 0
  br i1 %cmp40, label %lor.end, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %do.end36
  %70 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr143 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %70, i32 0, i32 3
  %71 = load i32, i32* %m_zhdr143, align 4, !tbaa !82
  %and44 = and i32 %71, 32
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false42
  %72 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr046 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %72, i32 0, i32 2
  %73 = load i32, i32* %m_zhdr046, align 8, !tbaa !83
  %and47 = and i32 %73, 15
  %cmp48 = icmp ne i32 %and47, 8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false42, %do.end36
  %74 = phi i1 [ true, %lor.lhs.false42 ], [ true, %do.end36 ], [ %cmp48, %lor.rhs ]
  %lor.ext = zext i1 %74 to i32
  store i32 %lor.ext, i32* %counter, align 4, !tbaa !10
  %75 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and50 = and i32 %75, 4
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %if.end68, label %if.then52

if.then52:                                        ; preds = %lor.end
  %76 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr053 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %76, i32 0, i32 2
  %77 = load i32, i32* %m_zhdr053, align 8, !tbaa !83
  %shr = lshr i32 %77, 4
  %add54 = add i32 8, %shr
  %shl = shl i32 1, %add54
  %cmp55 = icmp ugt i32 %shl, 32768
  br i1 %cmp55, label %lor.end66, label %lor.rhs57

lor.rhs57:                                        ; preds = %if.then52
  %78 = load i64, i64* %out_buf_size_mask, align 8, !tbaa !4
  %add58 = add i64 %78, 1
  %79 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_zhdr059 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %79, i32 0, i32 2
  %80 = load i32, i32* %m_zhdr059, align 8, !tbaa !83
  %shr60 = lshr i32 %80, 4
  %add61 = add i32 8, %shr60
  %shl62 = shl i32 1, %add61
  %conv63 = zext i32 %shl62 to i64
  %cmp64 = icmp ult i64 %add58, %conv63
  br label %lor.end66

lor.end66:                                        ; preds = %lor.rhs57, %if.then52
  %81 = phi i1 [ true, %if.then52 ], [ %cmp64, %lor.rhs57 ]
  %lor.ext67 = zext i1 %81 to i32
  %82 = load i32, i32* %counter, align 4, !tbaa !10
  %or = or i32 %82, %lor.ext67
  store i32 %or, i32* %counter, align 4, !tbaa !10
  br label %if.end68

if.end68:                                         ; preds = %lor.end66, %lor.end
  %83 = load i32, i32* %counter, align 4, !tbaa !10
  %tobool69 = icmp ne i32 %83, 0
  br i1 %tobool69, label %if.then70, label %if.end79

if.then70:                                        ; preds = %if.end68
  br label %do.body71

do.body71:                                        ; preds = %if.then70
  br label %for.cond

for.cond:                                         ; preds = %do.end76, %do.body71
  br label %do.body72

do.body72:                                        ; preds = %for.cond
  store i32 -1, i32* %status, align 4, !tbaa !12
  %84 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state73 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %84, i32 0, i32 0
  store i32 36, i32* %m_state73, align 8, !tbaa !81
  br label %common_exit

sw.bb74:                                          ; preds = %if.end
  br label %do.cond75

do.cond75:                                        ; preds = %sw.bb74
  br label %do.end76

do.end76:                                         ; preds = %do.cond75
  br label %for.cond

do.cond77:                                        ; No predecessors!
  br label %do.end78

do.end78:                                         ; preds = %do.cond77
  br label %if.end79

if.end79:                                         ; preds = %do.end78, %if.end68
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %sw.bb
  br label %do.body81

do.body81:                                        ; preds = %do.cond1727, %if.end80
  br label %do.body82

do.body82:                                        ; preds = %do.body81
  %85 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp83 = icmp ult i32 %85, 3
  br i1 %cmp83, label %if.then85, label %if.end113

if.then85:                                        ; preds = %do.body82
  br label %do.body86

do.body86:                                        ; preds = %do.cond109, %if.then85
  br label %do.body87

do.body87:                                        ; preds = %do.body86
  br label %while.cond88

while.cond88:                                     ; preds = %do.end99, %do.body87
  %86 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %87 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp89 = icmp uge i8* %86, %87
  br i1 %cmp89, label %while.body91, label %while.end100

while.body91:                                     ; preds = %while.cond88
  br label %do.body92

do.body92:                                        ; preds = %while.body91
  %88 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and93 = and i32 %88, 2
  %tobool94 = icmp ne i32 %and93, 0
  %89 = zext i1 %tobool94 to i64
  %cond95 = select i1 %tobool94, i32 1, i32 -4
  store i32 %cond95, i32* %status, align 4, !tbaa !12
  %90 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state96 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %90, i32 0, i32 0
  store i32 3, i32* %m_state96, align 8, !tbaa !81
  br label %common_exit

sw.bb97:                                          ; preds = %if.end
  br label %do.cond98

do.cond98:                                        ; preds = %sw.bb97
  br label %do.end99

do.end99:                                         ; preds = %do.cond98
  br label %while.cond88

while.end100:                                     ; preds = %while.cond88
  %91 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr101 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %incdec.ptr101, i8** %pIn_buf_cur, align 8, !tbaa !8
  %92 = load i8, i8* %91, align 1, !tbaa !12
  %conv102 = zext i8 %92 to i32
  store i32 %conv102, i32* %c, align 4, !tbaa !10
  br label %do.cond103

do.cond103:                                       ; preds = %while.end100
  br label %do.end104

do.end104:                                        ; preds = %do.cond103
  %93 = load i32, i32* %c, align 4, !tbaa !10
  %conv105 = zext i32 %93 to i64
  %94 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom = zext i32 %94 to i64
  %shl106 = shl i64 %conv105, %sh_prom
  %95 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or107 = or i64 %95, %shl106
  store i64 %or107, i64* %bit_buf, align 8, !tbaa !76
  %96 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add108 = add i32 %96, 8
  store i32 %add108, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond109

do.cond109:                                       ; preds = %do.end104
  %97 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp110 = icmp ult i32 %97, 3
  br i1 %cmp110, label %do.body86, label %do.end112

do.end112:                                        ; preds = %do.cond109
  br label %if.end113

if.end113:                                        ; preds = %do.end112, %do.body82
  %98 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and114 = and i64 %98, 7
  %conv115 = trunc i64 %and114 to i32
  %99 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_final = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %99, i32 0, i32 5
  store i32 %conv115, i32* %m_final, align 4, !tbaa !86
  %100 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %shr116 = lshr i64 %100, 3
  store i64 %shr116, i64* %bit_buf, align 8, !tbaa !76
  %101 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub117 = sub i32 %101, 3
  store i32 %sub117, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond118

do.cond118:                                       ; preds = %if.end113
  br label %do.end119

do.end119:                                        ; preds = %do.cond118
  %102 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_final120 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %102, i32 0, i32 5
  %103 = load i32, i32* %m_final120, align 4, !tbaa !86
  %shr121 = lshr i32 %103, 1
  %104 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %104, i32 0, i32 6
  store i32 %shr121, i32* %m_type, align 8, !tbaa !87
  %105 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type122 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %105, i32 0, i32 6
  %106 = load i32, i32* %m_type122, align 8, !tbaa !87
  %cmp123 = icmp eq i32 %106, 0
  br i1 %cmp123, label %if.then125, label %if.else396

if.then125:                                       ; preds = %do.end119
  br label %do.body126

do.body126:                                       ; preds = %if.then125
  %107 = load i32, i32* %num_bits, align 4, !tbaa !10
  %108 = load i32, i32* %num_bits, align 4, !tbaa !10
  %and127 = and i32 %108, 7
  %cmp128 = icmp ult i32 %107, %and127
  br i1 %cmp128, label %if.then130, label %if.end161

if.then130:                                       ; preds = %do.body126
  br label %do.body131

do.body131:                                       ; preds = %do.cond156, %if.then130
  br label %do.body133

do.body133:                                       ; preds = %do.body131
  br label %while.cond134

while.cond134:                                    ; preds = %do.end145, %do.body133
  %109 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %110 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp135 = icmp uge i8* %109, %110
  br i1 %cmp135, label %while.body137, label %while.end146

while.body137:                                    ; preds = %while.cond134
  br label %do.body138

do.body138:                                       ; preds = %while.body137
  %111 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and139 = and i32 %111, 2
  %tobool140 = icmp ne i32 %and139, 0
  %112 = zext i1 %tobool140 to i64
  %cond141 = select i1 %tobool140, i32 1, i32 -4
  store i32 %cond141, i32* %status, align 4, !tbaa !12
  %113 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state142 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %113, i32 0, i32 0
  store i32 5, i32* %m_state142, align 8, !tbaa !81
  br label %common_exit

sw.bb143:                                         ; preds = %if.end
  br label %do.cond144

do.cond144:                                       ; preds = %sw.bb143
  br label %do.end145

do.end145:                                        ; preds = %do.cond144
  br label %while.cond134

while.end146:                                     ; preds = %while.cond134
  %114 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr147 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %incdec.ptr147, i8** %pIn_buf_cur, align 8, !tbaa !8
  %115 = load i8, i8* %114, align 1, !tbaa !12
  %conv148 = zext i8 %115 to i32
  store i32 %conv148, i32* %c132, align 4, !tbaa !10
  br label %do.cond149

do.cond149:                                       ; preds = %while.end146
  br label %do.end150

do.end150:                                        ; preds = %do.cond149
  %116 = load i32, i32* %c132, align 4, !tbaa !10
  %conv151 = zext i32 %116 to i64
  %117 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom152 = zext i32 %117 to i64
  %shl153 = shl i64 %conv151, %sh_prom152
  %118 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or154 = or i64 %118, %shl153
  store i64 %or154, i64* %bit_buf, align 8, !tbaa !76
  %119 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add155 = add i32 %119, 8
  store i32 %add155, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond156

do.cond156:                                       ; preds = %do.end150
  %120 = load i32, i32* %num_bits, align 4, !tbaa !10
  %121 = load i32, i32* %num_bits, align 4, !tbaa !10
  %and157 = and i32 %121, 7
  %cmp158 = icmp ult i32 %120, %and157
  br i1 %cmp158, label %do.body131, label %do.end160

do.end160:                                        ; preds = %do.cond156
  br label %if.end161

if.end161:                                        ; preds = %do.end160, %do.body126
  %122 = load i32, i32* %num_bits, align 4, !tbaa !10
  %and162 = and i32 %122, 7
  %123 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom163 = zext i32 %and162 to i64
  %shr164 = lshr i64 %123, %sh_prom163
  store i64 %shr164, i64* %bit_buf, align 8, !tbaa !76
  %124 = load i32, i32* %num_bits, align 4, !tbaa !10
  %and165 = and i32 %124, 7
  %125 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub166 = sub i32 %125, %and165
  store i32 %sub166, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond167

do.cond167:                                       ; preds = %if.end161
  br label %do.end168

do.end168:                                        ; preds = %do.cond167
  store i32 0, i32* %counter, align 4, !tbaa !10
  br label %for.cond169

for.cond169:                                      ; preds = %for.inc, %do.end168
  %126 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp170 = icmp ult i32 %126, 4
  br i1 %cmp170, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond169
  %127 = load i32, i32* %num_bits, align 4, !tbaa !10
  %tobool172 = icmp ne i32 %127, 0
  br i1 %tobool172, label %if.then173, label %if.else

if.then173:                                       ; preds = %for.body
  br label %do.body174

do.body174:                                       ; preds = %if.then173
  %128 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp175 = icmp ult i32 %128, 8
  br i1 %cmp175, label %if.then177, label %if.end207

if.then177:                                       ; preds = %do.body174
  br label %do.body178

do.body178:                                       ; preds = %do.cond203, %if.then177
  br label %do.body180

do.body180:                                       ; preds = %do.body178
  br label %while.cond181

while.cond181:                                    ; preds = %do.end192, %do.body180
  %129 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %130 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp182 = icmp uge i8* %129, %130
  br i1 %cmp182, label %while.body184, label %while.end193

while.body184:                                    ; preds = %while.cond181
  br label %do.body185

do.body185:                                       ; preds = %while.body184
  %131 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and186 = and i32 %131, 2
  %tobool187 = icmp ne i32 %and186, 0
  %132 = zext i1 %tobool187 to i64
  %cond188 = select i1 %tobool187, i32 1, i32 -4
  store i32 %cond188, i32* %status, align 4, !tbaa !12
  %133 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state189 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %133, i32 0, i32 0
  store i32 6, i32* %m_state189, align 8, !tbaa !81
  br label %common_exit

sw.bb190:                                         ; preds = %if.end
  br label %do.cond191

do.cond191:                                       ; preds = %sw.bb190
  br label %do.end192

do.end192:                                        ; preds = %do.cond191
  br label %while.cond181

while.end193:                                     ; preds = %while.cond181
  %134 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr194 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr194, i8** %pIn_buf_cur, align 8, !tbaa !8
  %135 = load i8, i8* %134, align 1, !tbaa !12
  %conv195 = zext i8 %135 to i32
  store i32 %conv195, i32* %c179, align 4, !tbaa !10
  br label %do.cond196

do.cond196:                                       ; preds = %while.end193
  br label %do.end197

do.end197:                                        ; preds = %do.cond196
  %136 = load i32, i32* %c179, align 4, !tbaa !10
  %conv198 = zext i32 %136 to i64
  %137 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom199 = zext i32 %137 to i64
  %shl200 = shl i64 %conv198, %sh_prom199
  %138 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or201 = or i64 %138, %shl200
  store i64 %or201, i64* %bit_buf, align 8, !tbaa !76
  %139 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add202 = add i32 %139, 8
  store i32 %add202, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond203

do.cond203:                                       ; preds = %do.end197
  %140 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp204 = icmp ult i32 %140, 8
  br i1 %cmp204, label %do.body178, label %do.end206

do.end206:                                        ; preds = %do.cond203
  br label %if.end207

if.end207:                                        ; preds = %do.end206, %do.body174
  %141 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and208 = and i64 %141, 255
  %conv209 = trunc i64 %and208 to i8
  %142 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_raw_header = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %142, i32 0, i32 15
  %143 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom = zext i32 %143 to i64
  %arrayidx = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header, i64 0, i64 %idxprom
  store i8 %conv209, i8* %arrayidx, align 1, !tbaa !12
  %144 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %shr210 = lshr i64 %144, 8
  store i64 %shr210, i64* %bit_buf, align 8, !tbaa !76
  %145 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub211 = sub i32 %145, 8
  store i32 %sub211, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond212

do.cond212:                                       ; preds = %if.end207
  br label %do.end213

do.end213:                                        ; preds = %do.cond212
  br label %if.end234

if.else:                                          ; preds = %for.body
  br label %do.body214

do.body214:                                       ; preds = %if.else
  br label %while.cond215

while.cond215:                                    ; preds = %do.end226, %do.body214
  %146 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %147 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp216 = icmp uge i8* %146, %147
  br i1 %cmp216, label %while.body218, label %while.end227

while.body218:                                    ; preds = %while.cond215
  br label %do.body219

do.body219:                                       ; preds = %while.body218
  %148 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and220 = and i32 %148, 2
  %tobool221 = icmp ne i32 %and220, 0
  %149 = zext i1 %tobool221 to i64
  %cond222 = select i1 %tobool221, i32 1, i32 -4
  store i32 %cond222, i32* %status, align 4, !tbaa !12
  %150 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state223 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %150, i32 0, i32 0
  store i32 7, i32* %m_state223, align 8, !tbaa !81
  br label %common_exit

sw.bb224:                                         ; preds = %if.end
  br label %do.cond225

do.cond225:                                       ; preds = %sw.bb224
  br label %do.end226

do.end226:                                        ; preds = %do.cond225
  br label %while.cond215

while.end227:                                     ; preds = %while.cond215
  %151 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr228 = getelementptr inbounds i8, i8* %151, i32 1
  store i8* %incdec.ptr228, i8** %pIn_buf_cur, align 8, !tbaa !8
  %152 = load i8, i8* %151, align 1, !tbaa !12
  %153 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_raw_header229 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %153, i32 0, i32 15
  %154 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom230 = zext i32 %154 to i64
  %arrayidx231 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header229, i64 0, i64 %idxprom230
  store i8 %152, i8* %arrayidx231, align 1, !tbaa !12
  br label %do.cond232

do.cond232:                                       ; preds = %while.end227
  br label %do.end233

do.end233:                                        ; preds = %do.cond232
  br label %if.end234

if.end234:                                        ; preds = %do.end233, %do.end213
  br label %for.inc

for.inc:                                          ; preds = %if.end234
  %155 = load i32, i32* %counter, align 4, !tbaa !10
  %inc = add i32 %155, 1
  store i32 %inc, i32* %counter, align 4, !tbaa !10
  br label %for.cond169

for.end:                                          ; preds = %for.cond169
  %156 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_raw_header235 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %156, i32 0, i32 15
  %arrayidx236 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header235, i64 0, i64 0
  %157 = load i8, i8* %arrayidx236, align 8, !tbaa !12
  %conv237 = zext i8 %157 to i32
  %158 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_raw_header238 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %158, i32 0, i32 15
  %arrayidx239 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header238, i64 0, i64 1
  %159 = load i8, i8* %arrayidx239, align 1, !tbaa !12
  %conv240 = zext i8 %159 to i32
  %shl241 = shl i32 %conv240, 8
  %or242 = or i32 %conv237, %shl241
  store i32 %or242, i32* %counter, align 4, !tbaa !10
  %160 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_raw_header243 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %160, i32 0, i32 15
  %arrayidx244 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header243, i64 0, i64 2
  %161 = load i8, i8* %arrayidx244, align 2, !tbaa !12
  %conv245 = zext i8 %161 to i32
  %162 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_raw_header246 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %162, i32 0, i32 15
  %arrayidx247 = getelementptr inbounds [4 x i8], [4 x i8]* %m_raw_header246, i64 0, i64 3
  %163 = load i8, i8* %arrayidx247, align 1, !tbaa !12
  %conv248 = zext i8 %163 to i32
  %shl249 = shl i32 %conv248, 8
  %or250 = or i32 %conv245, %shl249
  %xor = xor i32 65535, %or250
  %cmp251 = icmp ne i32 %or242, %xor
  br i1 %cmp251, label %if.then253, label %if.end263

if.then253:                                       ; preds = %for.end
  br label %do.body254

do.body254:                                       ; preds = %if.then253
  br label %for.cond255

for.cond255:                                      ; preds = %do.end260, %do.body254
  br label %do.body256

do.body256:                                       ; preds = %for.cond255
  store i32 -1, i32* %status, align 4, !tbaa !12
  %164 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state257 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %164, i32 0, i32 0
  store i32 39, i32* %m_state257, align 8, !tbaa !81
  br label %common_exit

sw.bb258:                                         ; preds = %if.end
  br label %do.cond259

do.cond259:                                       ; preds = %sw.bb258
  br label %do.end260

do.end260:                                        ; preds = %do.cond259
  br label %for.cond255

do.cond261:                                       ; No predecessors!
  br label %do.end262

do.end262:                                        ; preds = %do.cond261
  br label %if.end263

if.end263:                                        ; preds = %do.end262, %for.end
  br label %while.cond264

while.cond264:                                    ; preds = %while.end317, %if.end263
  %165 = load i32, i32* %counter, align 4, !tbaa !10
  %tobool265 = icmp ne i32 %165, 0
  br i1 %tobool265, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond264
  %166 = load i32, i32* %num_bits, align 4, !tbaa !10
  %tobool266 = icmp ne i32 %166, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond264
  %167 = phi i1 [ false, %while.cond264 ], [ %tobool266, %land.rhs ]
  br i1 %167, label %while.body267, label %while.end320

while.body267:                                    ; preds = %land.end
  br label %do.body268

do.body268:                                       ; preds = %while.body267
  %168 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp269 = icmp ult i32 %168, 8
  br i1 %cmp269, label %if.then271, label %if.end301

if.then271:                                       ; preds = %do.body268
  br label %do.body272

do.body272:                                       ; preds = %do.cond297, %if.then271
  br label %do.body274

do.body274:                                       ; preds = %do.body272
  br label %while.cond275

while.cond275:                                    ; preds = %do.end286, %do.body274
  %169 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %170 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp276 = icmp uge i8* %169, %170
  br i1 %cmp276, label %while.body278, label %while.end287

while.body278:                                    ; preds = %while.cond275
  br label %do.body279

do.body279:                                       ; preds = %while.body278
  %171 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and280 = and i32 %171, 2
  %tobool281 = icmp ne i32 %and280, 0
  %172 = zext i1 %tobool281 to i64
  %cond282 = select i1 %tobool281, i32 1, i32 -4
  store i32 %cond282, i32* %status, align 4, !tbaa !12
  %173 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state283 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %173, i32 0, i32 0
  store i32 51, i32* %m_state283, align 8, !tbaa !81
  br label %common_exit

sw.bb284:                                         ; preds = %if.end
  br label %do.cond285

do.cond285:                                       ; preds = %sw.bb284
  br label %do.end286

do.end286:                                        ; preds = %do.cond285
  br label %while.cond275

while.end287:                                     ; preds = %while.cond275
  %174 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr288 = getelementptr inbounds i8, i8* %174, i32 1
  store i8* %incdec.ptr288, i8** %pIn_buf_cur, align 8, !tbaa !8
  %175 = load i8, i8* %174, align 1, !tbaa !12
  %conv289 = zext i8 %175 to i32
  store i32 %conv289, i32* %c273, align 4, !tbaa !10
  br label %do.cond290

do.cond290:                                       ; preds = %while.end287
  br label %do.end291

do.end291:                                        ; preds = %do.cond290
  %176 = load i32, i32* %c273, align 4, !tbaa !10
  %conv292 = zext i32 %176 to i64
  %177 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom293 = zext i32 %177 to i64
  %shl294 = shl i64 %conv292, %sh_prom293
  %178 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or295 = or i64 %178, %shl294
  store i64 %or295, i64* %bit_buf, align 8, !tbaa !76
  %179 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add296 = add i32 %179, 8
  store i32 %add296, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond297

do.cond297:                                       ; preds = %do.end291
  %180 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp298 = icmp ult i32 %180, 8
  br i1 %cmp298, label %do.body272, label %do.end300

do.end300:                                        ; preds = %do.cond297
  br label %if.end301

if.end301:                                        ; preds = %do.end300, %do.body268
  %181 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and302 = and i64 %181, 255
  %conv303 = trunc i64 %and302 to i32
  store i32 %conv303, i32* %dist, align 4, !tbaa !10
  %182 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %shr304 = lshr i64 %182, 8
  store i64 %shr304, i64* %bit_buf, align 8, !tbaa !76
  %183 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub305 = sub i32 %183, 8
  store i32 %sub305, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond306

do.cond306:                                       ; preds = %if.end301
  br label %do.end307

do.end307:                                        ; preds = %do.cond306
  br label %while.cond308

while.cond308:                                    ; preds = %do.end316, %do.end307
  %184 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %185 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %cmp309 = icmp uge i8* %184, %185
  br i1 %cmp309, label %while.body311, label %while.end317

while.body311:                                    ; preds = %while.cond308
  br label %do.body312

do.body312:                                       ; preds = %while.body311
  store i32 2, i32* %status, align 4, !tbaa !12
  %186 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state313 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %186, i32 0, i32 0
  store i32 52, i32* %m_state313, align 8, !tbaa !81
  br label %common_exit

sw.bb314:                                         ; preds = %if.end
  br label %do.cond315

do.cond315:                                       ; preds = %sw.bb314
  br label %do.end316

do.end316:                                        ; preds = %do.cond315
  br label %while.cond308

while.end317:                                     ; preds = %while.cond308
  %187 = load i32, i32* %dist, align 4, !tbaa !10
  %conv318 = trunc i32 %187 to i8
  %188 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %incdec.ptr319 = getelementptr inbounds i8, i8* %188, i32 1
  store i8* %incdec.ptr319, i8** %pOut_buf_cur, align 8, !tbaa !8
  store i8 %conv318, i8* %188, align 1, !tbaa !12
  %189 = load i32, i32* %counter, align 4, !tbaa !10
  %dec = add i32 %189, -1
  store i32 %dec, i32* %counter, align 4, !tbaa !10
  br label %while.cond264

while.end320:                                     ; preds = %land.end
  br label %while.cond321

while.cond321:                                    ; preds = %cond.end389, %while.end320
  %190 = load i32, i32* %counter, align 4, !tbaa !10
  %tobool322 = icmp ne i32 %190, 0
  br i1 %tobool322, label %while.body323, label %while.end395

while.body323:                                    ; preds = %while.cond321
  br label %while.cond324

while.cond324:                                    ; preds = %do.end332, %while.body323
  %191 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %192 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %cmp325 = icmp uge i8* %191, %192
  br i1 %cmp325, label %while.body327, label %while.end333

while.body327:                                    ; preds = %while.cond324
  br label %do.body328

do.body328:                                       ; preds = %while.body327
  store i32 2, i32* %status, align 4, !tbaa !12
  %193 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state329 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %193, i32 0, i32 0
  store i32 9, i32* %m_state329, align 8, !tbaa !81
  br label %common_exit

sw.bb330:                                         ; preds = %if.end
  br label %do.cond331

do.cond331:                                       ; preds = %sw.bb330
  br label %do.end332

do.end332:                                        ; preds = %do.cond331
  br label %while.cond324

while.end333:                                     ; preds = %while.cond324
  br label %while.cond334

while.cond334:                                    ; preds = %do.end345, %while.end333
  %194 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %195 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp335 = icmp uge i8* %194, %195
  br i1 %cmp335, label %while.body337, label %while.end346

while.body337:                                    ; preds = %while.cond334
  br label %do.body338

do.body338:                                       ; preds = %while.body337
  %196 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and339 = and i32 %196, 2
  %tobool340 = icmp ne i32 %and339, 0
  %197 = zext i1 %tobool340 to i64
  %cond341 = select i1 %tobool340, i32 1, i32 -4
  store i32 %cond341, i32* %status, align 4, !tbaa !12
  %198 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state342 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %198, i32 0, i32 0
  store i32 38, i32* %m_state342, align 8, !tbaa !81
  br label %common_exit

sw.bb343:                                         ; preds = %if.end
  br label %do.cond344

do.cond344:                                       ; preds = %sw.bb343
  br label %do.end345

do.end345:                                        ; preds = %do.cond344
  br label %while.cond334

while.end346:                                     ; preds = %while.cond334
  %199 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %200 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast347 = ptrtoint i8* %199 to i64
  %sub.ptr.rhs.cast348 = ptrtoint i8* %200 to i64
  %sub.ptr.sub349 = sub i64 %sub.ptr.lhs.cast347, %sub.ptr.rhs.cast348
  %201 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %202 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast350 = ptrtoint i8* %201 to i64
  %sub.ptr.rhs.cast351 = ptrtoint i8* %202 to i64
  %sub.ptr.sub352 = sub i64 %sub.ptr.lhs.cast350, %sub.ptr.rhs.cast351
  %cmp353 = icmp ult i64 %sub.ptr.sub349, %sub.ptr.sub352
  br i1 %cmp353, label %cond.true355, label %cond.false359

cond.true355:                                     ; preds = %while.end346
  %203 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %204 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast356 = ptrtoint i8* %203 to i64
  %sub.ptr.rhs.cast357 = ptrtoint i8* %204 to i64
  %sub.ptr.sub358 = sub i64 %sub.ptr.lhs.cast356, %sub.ptr.rhs.cast357
  br label %cond.end363

cond.false359:                                    ; preds = %while.end346
  %205 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %206 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast360 = ptrtoint i8* %205 to i64
  %sub.ptr.rhs.cast361 = ptrtoint i8* %206 to i64
  %sub.ptr.sub362 = sub i64 %sub.ptr.lhs.cast360, %sub.ptr.rhs.cast361
  br label %cond.end363

cond.end363:                                      ; preds = %cond.false359, %cond.true355
  %cond364 = phi i64 [ %sub.ptr.sub358, %cond.true355 ], [ %sub.ptr.sub362, %cond.false359 ]
  %207 = load i32, i32* %counter, align 4, !tbaa !10
  %conv365 = zext i32 %207 to i64
  %cmp366 = icmp ult i64 %cond364, %conv365
  br i1 %cmp366, label %cond.true368, label %cond.false387

cond.true368:                                     ; preds = %cond.end363
  %208 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %209 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast369 = ptrtoint i8* %208 to i64
  %sub.ptr.rhs.cast370 = ptrtoint i8* %209 to i64
  %sub.ptr.sub371 = sub i64 %sub.ptr.lhs.cast369, %sub.ptr.rhs.cast370
  %210 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %211 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast372 = ptrtoint i8* %210 to i64
  %sub.ptr.rhs.cast373 = ptrtoint i8* %211 to i64
  %sub.ptr.sub374 = sub i64 %sub.ptr.lhs.cast372, %sub.ptr.rhs.cast373
  %cmp375 = icmp ult i64 %sub.ptr.sub371, %sub.ptr.sub374
  br i1 %cmp375, label %cond.true377, label %cond.false381

cond.true377:                                     ; preds = %cond.true368
  %212 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %213 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast378 = ptrtoint i8* %212 to i64
  %sub.ptr.rhs.cast379 = ptrtoint i8* %213 to i64
  %sub.ptr.sub380 = sub i64 %sub.ptr.lhs.cast378, %sub.ptr.rhs.cast379
  br label %cond.end385

cond.false381:                                    ; preds = %cond.true368
  %214 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %215 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast382 = ptrtoint i8* %214 to i64
  %sub.ptr.rhs.cast383 = ptrtoint i8* %215 to i64
  %sub.ptr.sub384 = sub i64 %sub.ptr.lhs.cast382, %sub.ptr.rhs.cast383
  br label %cond.end385

cond.end385:                                      ; preds = %cond.false381, %cond.true377
  %cond386 = phi i64 [ %sub.ptr.sub380, %cond.true377 ], [ %sub.ptr.sub384, %cond.false381 ]
  br label %cond.end389

cond.false387:                                    ; preds = %cond.end363
  %216 = load i32, i32* %counter, align 4, !tbaa !10
  %conv388 = zext i32 %216 to i64
  br label %cond.end389

cond.end389:                                      ; preds = %cond.false387, %cond.end385
  %cond390 = phi i64 [ %cond386, %cond.end385 ], [ %conv388, %cond.false387 ]
  store i64 %cond390, i64* %n, align 8, !tbaa !4
  %217 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %218 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %219 = load i64, i64* %n, align 8, !tbaa !4
  %220 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %221 = call i64 @llvm.objectsize.i64.p0i8(i8* %220, i1 false, i1 true, i1 false)
  %call = call i8* @__memcpy_chk(i8* %217, i8* %218, i64 %219, i64 %221) #10
  %222 = load i64, i64* %n, align 8, !tbaa !4
  %223 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %add.ptr391 = getelementptr inbounds i8, i8* %223, i64 %222
  store i8* %add.ptr391, i8** %pIn_buf_cur, align 8, !tbaa !8
  %224 = load i64, i64* %n, align 8, !tbaa !4
  %225 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %add.ptr392 = getelementptr inbounds i8, i8* %225, i64 %224
  store i8* %add.ptr392, i8** %pOut_buf_cur, align 8, !tbaa !8
  %226 = load i64, i64* %n, align 8, !tbaa !4
  %conv393 = trunc i64 %226 to i32
  %227 = load i32, i32* %counter, align 4, !tbaa !10
  %sub394 = sub i32 %227, %conv393
  store i32 %sub394, i32* %counter, align 4, !tbaa !10
  br label %while.cond321

while.end395:                                     ; preds = %while.cond321
  br label %if.end1726

if.else396:                                       ; preds = %do.end119
  %228 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type397 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %228, i32 0, i32 6
  %229 = load i32, i32* %m_type397, align 8, !tbaa !87
  %cmp398 = icmp eq i32 %229, 3
  br i1 %cmp398, label %if.then400, label %if.else410

if.then400:                                       ; preds = %if.else396
  br label %do.body401

do.body401:                                       ; preds = %if.then400
  br label %for.cond402

for.cond402:                                      ; preds = %do.end407, %do.body401
  br label %do.body403

do.body403:                                       ; preds = %for.cond402
  store i32 -1, i32* %status, align 4, !tbaa !12
  %230 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state404 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %230, i32 0, i32 0
  store i32 10, i32* %m_state404, align 8, !tbaa !81
  br label %common_exit

sw.bb405:                                         ; preds = %if.end
  br label %do.cond406

do.cond406:                                       ; preds = %sw.bb405
  br label %do.end407

do.end407:                                        ; preds = %do.cond406
  br label %for.cond402

do.cond408:                                       ; No predecessors!
  br label %do.end409

do.end409:                                        ; preds = %do.cond408
  br label %if.end1725

if.else410:                                       ; preds = %if.else396
  %231 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type411 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %231, i32 0, i32 6
  %232 = load i32, i32* %m_type411, align 8, !tbaa !87
  %cmp412 = icmp eq i32 %232, 1
  br i1 %cmp412, label %if.then414, label %if.else460

if.then414:                                       ; preds = %if.else410
  %233 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %233) #10
  %234 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %234, i32 0, i32 14
  %arrayidx415 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables, i64 0, i64 0
  %m_code_size = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx415, i32 0, i32 0
  %arraydecay = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size, i64 0, i64 0
  store i8* %arraydecay, i8** %p, align 8, !tbaa !8
  %235 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %235) #10
  %236 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %236, i32 0, i32 11
  %arrayidx416 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes, i64 0, i64 0
  store i32 288, i32* %arrayidx416, align 4, !tbaa !10
  %237 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes417 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %237, i32 0, i32 11
  %arrayidx418 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes417, i64 0, i64 1
  store i32 32, i32* %arrayidx418, align 4, !tbaa !10
  %238 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables419 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %238, i32 0, i32 14
  %arrayidx420 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables419, i64 0, i64 1
  %m_code_size421 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx420, i32 0, i32 0
  %arraydecay422 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size421, i64 0, i64 0
  %239 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables423 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %239, i32 0, i32 14
  %arrayidx424 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables423, i64 0, i64 1
  %m_code_size425 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx424, i32 0, i32 0
  %arraydecay426 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size425, i64 0, i64 0
  %240 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay426, i1 false, i1 true, i1 false)
  %call427 = call i8* @__memset_chk(i8* %arraydecay422, i32 5, i64 32, i64 %240) #10
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond428

for.cond428:                                      ; preds = %for.inc433, %if.then414
  %241 = load i32, i32* %i, align 4, !tbaa !10
  %cmp429 = icmp ule i32 %241, 143
  br i1 %cmp429, label %for.body431, label %for.end435

for.body431:                                      ; preds = %for.cond428
  %242 = load i8*, i8** %p, align 8, !tbaa !8
  %incdec.ptr432 = getelementptr inbounds i8, i8* %242, i32 1
  store i8* %incdec.ptr432, i8** %p, align 8, !tbaa !8
  store i8 8, i8* %242, align 1, !tbaa !12
  br label %for.inc433

for.inc433:                                       ; preds = %for.body431
  %243 = load i32, i32* %i, align 4, !tbaa !10
  %inc434 = add i32 %243, 1
  store i32 %inc434, i32* %i, align 4, !tbaa !10
  br label %for.cond428

for.end435:                                       ; preds = %for.cond428
  br label %for.cond436

for.cond436:                                      ; preds = %for.inc441, %for.end435
  %244 = load i32, i32* %i, align 4, !tbaa !10
  %cmp437 = icmp ule i32 %244, 255
  br i1 %cmp437, label %for.body439, label %for.end443

for.body439:                                      ; preds = %for.cond436
  %245 = load i8*, i8** %p, align 8, !tbaa !8
  %incdec.ptr440 = getelementptr inbounds i8, i8* %245, i32 1
  store i8* %incdec.ptr440, i8** %p, align 8, !tbaa !8
  store i8 9, i8* %245, align 1, !tbaa !12
  br label %for.inc441

for.inc441:                                       ; preds = %for.body439
  %246 = load i32, i32* %i, align 4, !tbaa !10
  %inc442 = add i32 %246, 1
  store i32 %inc442, i32* %i, align 4, !tbaa !10
  br label %for.cond436

for.end443:                                       ; preds = %for.cond436
  br label %for.cond444

for.cond444:                                      ; preds = %for.inc449, %for.end443
  %247 = load i32, i32* %i, align 4, !tbaa !10
  %cmp445 = icmp ule i32 %247, 279
  br i1 %cmp445, label %for.body447, label %for.end451

for.body447:                                      ; preds = %for.cond444
  %248 = load i8*, i8** %p, align 8, !tbaa !8
  %incdec.ptr448 = getelementptr inbounds i8, i8* %248, i32 1
  store i8* %incdec.ptr448, i8** %p, align 8, !tbaa !8
  store i8 7, i8* %248, align 1, !tbaa !12
  br label %for.inc449

for.inc449:                                       ; preds = %for.body447
  %249 = load i32, i32* %i, align 4, !tbaa !10
  %inc450 = add i32 %249, 1
  store i32 %inc450, i32* %i, align 4, !tbaa !10
  br label %for.cond444

for.end451:                                       ; preds = %for.cond444
  br label %for.cond452

for.cond452:                                      ; preds = %for.inc457, %for.end451
  %250 = load i32, i32* %i, align 4, !tbaa !10
  %cmp453 = icmp ule i32 %250, 287
  br i1 %cmp453, label %for.body455, label %for.end459

for.body455:                                      ; preds = %for.cond452
  %251 = load i8*, i8** %p, align 8, !tbaa !8
  %incdec.ptr456 = getelementptr inbounds i8, i8* %251, i32 1
  store i8* %incdec.ptr456, i8** %p, align 8, !tbaa !8
  store i8 8, i8* %251, align 1, !tbaa !12
  br label %for.inc457

for.inc457:                                       ; preds = %for.body455
  %252 = load i32, i32* %i, align 4, !tbaa !10
  %inc458 = add i32 %252, 1
  store i32 %inc458, i32* %i, align 4, !tbaa !10
  br label %for.cond452

for.end459:                                       ; preds = %for.cond452
  %253 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %253) #10
  %254 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %254) #10
  br label %if.end602

if.else460:                                       ; preds = %if.else410
  store i32 0, i32* %counter, align 4, !tbaa !10
  br label %for.cond461

for.cond461:                                      ; preds = %for.inc533, %if.else460
  %255 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp462 = icmp ult i32 %255, 3
  br i1 %cmp462, label %for.body464, label %for.end535

for.body464:                                      ; preds = %for.cond461
  br label %do.body465

do.body465:                                       ; preds = %for.body464
  %256 = load i32, i32* %num_bits, align 4, !tbaa !10
  %257 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom466 = zext i32 %257 to i64
  %arrayidx467 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom466
  %258 = load i8, i8* %arrayidx467, align 1, !tbaa !12
  %conv468 = sext i8 %258 to i32
  %cmp469 = icmp ult i32 %256, %conv468
  br i1 %cmp469, label %if.then471, label %if.end504

if.then471:                                       ; preds = %do.body465
  br label %do.body472

do.body472:                                       ; preds = %do.cond497, %if.then471
  br label %do.body474

do.body474:                                       ; preds = %do.body472
  br label %while.cond475

while.cond475:                                    ; preds = %do.end486, %do.body474
  %259 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %260 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp476 = icmp uge i8* %259, %260
  br i1 %cmp476, label %while.body478, label %while.end487

while.body478:                                    ; preds = %while.cond475
  br label %do.body479

do.body479:                                       ; preds = %while.body478
  %261 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and480 = and i32 %261, 2
  %tobool481 = icmp ne i32 %and480, 0
  %262 = zext i1 %tobool481 to i64
  %cond482 = select i1 %tobool481, i32 1, i32 -4
  store i32 %cond482, i32* %status, align 4, !tbaa !12
  %263 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state483 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %263, i32 0, i32 0
  store i32 11, i32* %m_state483, align 8, !tbaa !81
  br label %common_exit

sw.bb484:                                         ; preds = %if.end
  br label %do.cond485

do.cond485:                                       ; preds = %sw.bb484
  br label %do.end486

do.end486:                                        ; preds = %do.cond485
  br label %while.cond475

while.end487:                                     ; preds = %while.cond475
  %264 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr488 = getelementptr inbounds i8, i8* %264, i32 1
  store i8* %incdec.ptr488, i8** %pIn_buf_cur, align 8, !tbaa !8
  %265 = load i8, i8* %264, align 1, !tbaa !12
  %conv489 = zext i8 %265 to i32
  store i32 %conv489, i32* %c473, align 4, !tbaa !10
  br label %do.cond490

do.cond490:                                       ; preds = %while.end487
  br label %do.end491

do.end491:                                        ; preds = %do.cond490
  %266 = load i32, i32* %c473, align 4, !tbaa !10
  %conv492 = zext i32 %266 to i64
  %267 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom493 = zext i32 %267 to i64
  %shl494 = shl i64 %conv492, %sh_prom493
  %268 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or495 = or i64 %268, %shl494
  store i64 %or495, i64* %bit_buf, align 8, !tbaa !76
  %269 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add496 = add i32 %269, 8
  store i32 %add496, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond497

do.cond497:                                       ; preds = %do.end491
  %270 = load i32, i32* %num_bits, align 4, !tbaa !10
  %271 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom498 = zext i32 %271 to i64
  %arrayidx499 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom498
  %272 = load i8, i8* %arrayidx499, align 1, !tbaa !12
  %conv500 = sext i8 %272 to i32
  %cmp501 = icmp ult i32 %270, %conv500
  br i1 %cmp501, label %do.body472, label %do.end503

do.end503:                                        ; preds = %do.cond497
  br label %if.end504

if.end504:                                        ; preds = %do.end503, %do.body465
  %273 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %274 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom505 = zext i32 %274 to i64
  %arrayidx506 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom505
  %275 = load i8, i8* %arrayidx506, align 1, !tbaa !12
  %conv507 = sext i8 %275 to i32
  %shl508 = shl i32 1, %conv507
  %sub509 = sub nsw i32 %shl508, 1
  %conv510 = sext i32 %sub509 to i64
  %and511 = and i64 %273, %conv510
  %conv512 = trunc i64 %and511 to i32
  %276 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes513 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %276, i32 0, i32 11
  %277 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom514 = zext i32 %277 to i64
  %arrayidx515 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes513, i64 0, i64 %idxprom514
  store i32 %conv512, i32* %arrayidx515, align 4, !tbaa !10
  %278 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom516 = zext i32 %278 to i64
  %arrayidx517 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom516
  %279 = load i8, i8* %arrayidx517, align 1, !tbaa !12
  %conv518 = sext i8 %279 to i32
  %280 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom519 = zext i32 %conv518 to i64
  %shr520 = lshr i64 %280, %sh_prom519
  store i64 %shr520, i64* %bit_buf, align 8, !tbaa !76
  %281 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom521 = zext i32 %281 to i64
  %arrayidx522 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.14, i64 0, i64 %idxprom521
  %282 = load i8, i8* %arrayidx522, align 1, !tbaa !12
  %conv523 = sext i8 %282 to i32
  %283 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub524 = sub i32 %283, %conv523
  store i32 %sub524, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond525

do.cond525:                                       ; preds = %if.end504
  br label %do.end526

do.end526:                                        ; preds = %do.cond525
  %284 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom527 = zext i32 %284 to i64
  %arrayidx528 = getelementptr inbounds [3 x i32], [3 x i32]* @tinfl_decompress.s_min_table_sizes, i64 0, i64 %idxprom527
  %285 = load i32, i32* %arrayidx528, align 4, !tbaa !10
  %286 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes529 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %286, i32 0, i32 11
  %287 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom530 = zext i32 %287 to i64
  %arrayidx531 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes529, i64 0, i64 %idxprom530
  %288 = load i32, i32* %arrayidx531, align 4, !tbaa !10
  %add532 = add i32 %288, %285
  store i32 %add532, i32* %arrayidx531, align 4, !tbaa !10
  br label %for.inc533

for.inc533:                                       ; preds = %do.end526
  %289 = load i32, i32* %counter, align 4, !tbaa !10
  %inc534 = add i32 %289, 1
  store i32 %inc534, i32* %counter, align 4, !tbaa !10
  br label %for.cond461

for.end535:                                       ; preds = %for.cond461
  %290 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables536 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %290, i32 0, i32 14
  %arrayidx537 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables536, i64 0, i64 2
  %m_code_size538 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx537, i32 0, i32 0
  %291 = bitcast [288 x i8]* %m_code_size538 to i8*
  %292 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables539 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %292, i32 0, i32 14
  %arrayidx540 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables539, i64 0, i64 2
  %m_code_size541 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx540, i32 0, i32 0
  %293 = bitcast [288 x i8]* %m_code_size541 to i8*
  %294 = call i64 @llvm.objectsize.i64.p0i8(i8* %293, i1 false, i1 true, i1 false)
  %call542 = call i8* @__memset_chk(i8* %291, i32 0, i64 288, i64 %294) #10
  store i32 0, i32* %counter, align 4, !tbaa !10
  br label %for.cond543

for.cond543:                                      ; preds = %for.inc597, %for.end535
  %295 = load i32, i32* %counter, align 4, !tbaa !10
  %296 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes544 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %296, i32 0, i32 11
  %arrayidx545 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes544, i64 0, i64 2
  %297 = load i32, i32* %arrayidx545, align 4, !tbaa !10
  %cmp546 = icmp ult i32 %295, %297
  br i1 %cmp546, label %for.body548, label %for.end599

for.body548:                                      ; preds = %for.cond543
  br label %do.body549

do.body549:                                       ; preds = %for.body548
  %298 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp550 = icmp ult i32 %298, 3
  br i1 %cmp550, label %if.then552, label %if.end582

if.then552:                                       ; preds = %do.body549
  br label %do.body553

do.body553:                                       ; preds = %do.cond578, %if.then552
  br label %do.body555

do.body555:                                       ; preds = %do.body553
  br label %while.cond556

while.cond556:                                    ; preds = %do.end567, %do.body555
  %299 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %300 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp557 = icmp uge i8* %299, %300
  br i1 %cmp557, label %while.body559, label %while.end568

while.body559:                                    ; preds = %while.cond556
  br label %do.body560

do.body560:                                       ; preds = %while.body559
  %301 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and561 = and i32 %301, 2
  %tobool562 = icmp ne i32 %and561, 0
  %302 = zext i1 %tobool562 to i64
  %cond563 = select i1 %tobool562, i32 1, i32 -4
  store i32 %cond563, i32* %status, align 4, !tbaa !12
  %303 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state564 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %303, i32 0, i32 0
  store i32 14, i32* %m_state564, align 8, !tbaa !81
  br label %common_exit

sw.bb565:                                         ; preds = %if.end
  br label %do.cond566

do.cond566:                                       ; preds = %sw.bb565
  br label %do.end567

do.end567:                                        ; preds = %do.cond566
  br label %while.cond556

while.end568:                                     ; preds = %while.cond556
  %304 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr569 = getelementptr inbounds i8, i8* %304, i32 1
  store i8* %incdec.ptr569, i8** %pIn_buf_cur, align 8, !tbaa !8
  %305 = load i8, i8* %304, align 1, !tbaa !12
  %conv570 = zext i8 %305 to i32
  store i32 %conv570, i32* %c554, align 4, !tbaa !10
  br label %do.cond571

do.cond571:                                       ; preds = %while.end568
  br label %do.end572

do.end572:                                        ; preds = %do.cond571
  %306 = load i32, i32* %c554, align 4, !tbaa !10
  %conv573 = zext i32 %306 to i64
  %307 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom574 = zext i32 %307 to i64
  %shl575 = shl i64 %conv573, %sh_prom574
  %308 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or576 = or i64 %308, %shl575
  store i64 %or576, i64* %bit_buf, align 8, !tbaa !76
  %309 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add577 = add i32 %309, 8
  store i32 %add577, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond578

do.cond578:                                       ; preds = %do.end572
  %310 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp579 = icmp ult i32 %310, 3
  br i1 %cmp579, label %do.body553, label %do.end581

do.end581:                                        ; preds = %do.cond578
  br label %if.end582

if.end582:                                        ; preds = %do.end581, %do.body549
  %311 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and583 = and i64 %311, 7
  %conv584 = trunc i64 %and583 to i32
  store i32 %conv584, i32* %s, align 4, !tbaa !10
  %312 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %shr585 = lshr i64 %312, 3
  store i64 %shr585, i64* %bit_buf, align 8, !tbaa !76
  %313 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub586 = sub i32 %313, 3
  store i32 %sub586, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond587

do.cond587:                                       ; preds = %if.end582
  br label %do.end588

do.end588:                                        ; preds = %do.cond587
  %314 = load i32, i32* %s, align 4, !tbaa !10
  %conv589 = trunc i32 %314 to i8
  %315 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables590 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %315, i32 0, i32 14
  %arrayidx591 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables590, i64 0, i64 2
  %m_code_size592 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx591, i32 0, i32 0
  %316 = load i32, i32* %counter, align 4, !tbaa !10
  %idxprom593 = zext i32 %316 to i64
  %arrayidx594 = getelementptr inbounds [19 x i8], [19 x i8]* @tinfl_decompress.s_length_dezigzag, i64 0, i64 %idxprom593
  %317 = load i8, i8* %arrayidx594, align 1, !tbaa !12
  %idxprom595 = zext i8 %317 to i64
  %arrayidx596 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size592, i64 0, i64 %idxprom595
  store i8 %conv589, i8* %arrayidx596, align 1, !tbaa !12
  br label %for.inc597

for.inc597:                                       ; preds = %do.end588
  %318 = load i32, i32* %counter, align 4, !tbaa !10
  %inc598 = add i32 %318, 1
  store i32 %inc598, i32* %counter, align 4, !tbaa !10
  br label %for.cond543

for.end599:                                       ; preds = %for.cond543
  %319 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes600 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %319, i32 0, i32 11
  %arrayidx601 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes600, i64 0, i64 2
  store i32 19, i32* %arrayidx601, align 4, !tbaa !10
  br label %if.end602

if.end602:                                        ; preds = %for.end599, %for.end459
  br label %for.cond603

for.cond603:                                      ; preds = %for.inc1077, %if.end602
  %320 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type604 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %320, i32 0, i32 6
  %321 = load i32, i32* %m_type604, align 8, !tbaa !87
  %cmp605 = icmp sge i32 %321, 0
  br i1 %cmp605, label %for.body607, label %for.end1080

for.body607:                                      ; preds = %for.cond603
  %322 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables609 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %322, i32 0, i32 14
  %323 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type610 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %323, i32 0, i32 6
  %324 = load i32, i32* %m_type610, align 8, !tbaa !87
  %idxprom611 = zext i32 %324 to i64
  %arrayidx612 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables609, i64 0, i64 %idxprom611
  store %struct.tinfl_huff_table* %arrayidx612, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %325 = bitcast [16 x i32]* %total_syms to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %325, i8 0, i64 64, i1 false)
  %326 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_look_up = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %326, i32 0, i32 1
  %327 = bitcast [1024 x i16]* %m_look_up to i8*
  %328 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_look_up613 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %328, i32 0, i32 1
  %329 = bitcast [1024 x i16]* %m_look_up613 to i8*
  %330 = call i64 @llvm.objectsize.i64.p0i8(i8* %329, i1 false, i1 true, i1 false)
  %call614 = call i8* @__memset_chk(i8* %327, i32 0, i64 2048, i64 %330) #10
  %331 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_tree = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %331, i32 0, i32 2
  %332 = bitcast [576 x i16]* %m_tree to i8*
  %333 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_tree615 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %333, i32 0, i32 2
  %334 = bitcast [576 x i16]* %m_tree615 to i8*
  %335 = call i64 @llvm.objectsize.i64.p0i8(i8* %334, i1 false, i1 true, i1 false)
  %call616 = call i8* @__memset_chk(i8* %332, i32 0, i64 1152, i64 %335) #10
  store i32 0, i32* %i608, align 4, !tbaa !10
  br label %for.cond617

for.cond617:                                      ; preds = %for.inc631, %for.body607
  %336 = load i32, i32* %i608, align 4, !tbaa !10
  %337 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes618 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %337, i32 0, i32 11
  %338 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type619 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %338, i32 0, i32 6
  %339 = load i32, i32* %m_type619, align 8, !tbaa !87
  %idxprom620 = zext i32 %339 to i64
  %arrayidx621 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes618, i64 0, i64 %idxprom620
  %340 = load i32, i32* %arrayidx621, align 4, !tbaa !10
  %cmp622 = icmp ult i32 %336, %340
  br i1 %cmp622, label %for.body624, label %for.end633

for.body624:                                      ; preds = %for.cond617
  %341 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_code_size625 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %341, i32 0, i32 0
  %342 = load i32, i32* %i608, align 4, !tbaa !10
  %idxprom626 = zext i32 %342 to i64
  %arrayidx627 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size625, i64 0, i64 %idxprom626
  %343 = load i8, i8* %arrayidx627, align 1, !tbaa !12
  %idxprom628 = zext i8 %343 to i64
  %arrayidx629 = getelementptr inbounds [16 x i32], [16 x i32]* %total_syms, i64 0, i64 %idxprom628
  %344 = load i32, i32* %arrayidx629, align 4, !tbaa !10
  %inc630 = add i32 %344, 1
  store i32 %inc630, i32* %arrayidx629, align 4, !tbaa !10
  br label %for.inc631

for.inc631:                                       ; preds = %for.body624
  %345 = load i32, i32* %i608, align 4, !tbaa !10
  %inc632 = add i32 %345, 1
  store i32 %inc632, i32* %i608, align 4, !tbaa !10
  br label %for.cond617

for.end633:                                       ; preds = %for.cond617
  store i32 0, i32* %used_syms, align 4, !tbaa !10
  store i32 0, i32* %total, align 4, !tbaa !10
  %arrayidx634 = getelementptr inbounds [17 x i32], [17 x i32]* %next_code, i64 0, i64 1
  store i32 0, i32* %arrayidx634, align 4, !tbaa !10
  %arrayidx635 = getelementptr inbounds [17 x i32], [17 x i32]* %next_code, i64 0, i64 0
  store i32 0, i32* %arrayidx635, align 16, !tbaa !10
  store i32 1, i32* %i608, align 4, !tbaa !10
  br label %for.cond636

for.cond636:                                      ; preds = %for.inc650, %for.end633
  %346 = load i32, i32* %i608, align 4, !tbaa !10
  %cmp637 = icmp ule i32 %346, 15
  br i1 %cmp637, label %for.body639, label %for.end652

for.body639:                                      ; preds = %for.cond636
  %347 = load i32, i32* %i608, align 4, !tbaa !10
  %idxprom640 = zext i32 %347 to i64
  %arrayidx641 = getelementptr inbounds [16 x i32], [16 x i32]* %total_syms, i64 0, i64 %idxprom640
  %348 = load i32, i32* %arrayidx641, align 4, !tbaa !10
  %349 = load i32, i32* %used_syms, align 4, !tbaa !10
  %add642 = add i32 %349, %348
  store i32 %add642, i32* %used_syms, align 4, !tbaa !10
  %350 = load i32, i32* %total, align 4, !tbaa !10
  %351 = load i32, i32* %i608, align 4, !tbaa !10
  %idxprom643 = zext i32 %351 to i64
  %arrayidx644 = getelementptr inbounds [16 x i32], [16 x i32]* %total_syms, i64 0, i64 %idxprom643
  %352 = load i32, i32* %arrayidx644, align 4, !tbaa !10
  %add645 = add i32 %350, %352
  %shl646 = shl i32 %add645, 1
  store i32 %shl646, i32* %total, align 4, !tbaa !10
  %353 = load i32, i32* %i608, align 4, !tbaa !10
  %add647 = add i32 %353, 1
  %idxprom648 = zext i32 %add647 to i64
  %arrayidx649 = getelementptr inbounds [17 x i32], [17 x i32]* %next_code, i64 0, i64 %idxprom648
  store i32 %shl646, i32* %arrayidx649, align 4, !tbaa !10
  br label %for.inc650

for.inc650:                                       ; preds = %for.body639
  %354 = load i32, i32* %i608, align 4, !tbaa !10
  %inc651 = add i32 %354, 1
  store i32 %inc651, i32* %i608, align 4, !tbaa !10
  br label %for.cond636

for.end652:                                       ; preds = %for.cond636
  %355 = load i32, i32* %total, align 4, !tbaa !10
  %cmp653 = icmp ne i32 65536, %355
  br i1 %cmp653, label %land.lhs.true, label %if.end667

land.lhs.true:                                    ; preds = %for.end652
  %356 = load i32, i32* %used_syms, align 4, !tbaa !10
  %cmp655 = icmp ugt i32 %356, 1
  br i1 %cmp655, label %if.then657, label %if.end667

if.then657:                                       ; preds = %land.lhs.true
  br label %do.body658

do.body658:                                       ; preds = %if.then657
  br label %for.cond659

for.cond659:                                      ; preds = %do.end664, %do.body658
  br label %do.body660

do.body660:                                       ; preds = %for.cond659
  store i32 -1, i32* %status, align 4, !tbaa !12
  %357 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state661 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %357, i32 0, i32 0
  store i32 35, i32* %m_state661, align 8, !tbaa !81
  br label %common_exit

sw.bb662:                                         ; preds = %if.end
  br label %do.cond663

do.cond663:                                       ; preds = %sw.bb662
  br label %do.end664

do.end664:                                        ; preds = %do.cond663
  br label %for.cond659

do.cond665:                                       ; No predecessors!
  br label %do.end666

do.end666:                                        ; preds = %do.cond665
  br label %if.end667

if.end667:                                        ; preds = %do.end666, %land.lhs.true, %for.end652
  store i32 -1, i32* %tree_next, align 4, !tbaa !10
  store i32 0, i32* %sym_index, align 4, !tbaa !10
  br label %for.cond668

for.cond668:                                      ; preds = %for.inc774, %if.end667
  %358 = load i32, i32* %sym_index, align 4, !tbaa !10
  %359 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes669 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %359, i32 0, i32 11
  %360 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type670 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %360, i32 0, i32 6
  %361 = load i32, i32* %m_type670, align 8, !tbaa !87
  %idxprom671 = zext i32 %361 to i64
  %arrayidx672 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes669, i64 0, i64 %idxprom671
  %362 = load i32, i32* %arrayidx672, align 4, !tbaa !10
  %cmp673 = icmp ult i32 %358, %362
  br i1 %cmp673, label %for.body675, label %for.end776

for.body675:                                      ; preds = %for.cond668
  %363 = bitcast i32* %rev_code to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %363) #10
  store i32 0, i32* %rev_code, align 4, !tbaa !10
  %364 = bitcast i32* %l to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %364) #10
  %365 = bitcast i32* %cur_code to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %365) #10
  %366 = bitcast i32* %code_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %366) #10
  %367 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_code_size676 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %367, i32 0, i32 0
  %368 = load i32, i32* %sym_index, align 4, !tbaa !10
  %idxprom677 = zext i32 %368 to i64
  %arrayidx678 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size676, i64 0, i64 %idxprom677
  %369 = load i8, i8* %arrayidx678, align 1, !tbaa !12
  %conv679 = zext i8 %369 to i32
  store i32 %conv679, i32* %code_size, align 4, !tbaa !10
  %370 = load i32, i32* %code_size, align 4, !tbaa !10
  %tobool680 = icmp ne i32 %370, 0
  br i1 %tobool680, label %if.end682, label %if.then681

if.then681:                                       ; preds = %for.body675
  store i32 156, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end682:                                        ; preds = %for.body675
  %371 = load i32, i32* %code_size, align 4, !tbaa !10
  %idxprom683 = zext i32 %371 to i64
  %arrayidx684 = getelementptr inbounds [17 x i32], [17 x i32]* %next_code, i64 0, i64 %idxprom683
  %372 = load i32, i32* %arrayidx684, align 4, !tbaa !10
  %inc685 = add i32 %372, 1
  store i32 %inc685, i32* %arrayidx684, align 4, !tbaa !10
  store i32 %372, i32* %cur_code, align 4, !tbaa !10
  %373 = load i32, i32* %code_size, align 4, !tbaa !10
  store i32 %373, i32* %l, align 4, !tbaa !10
  br label %for.cond686

for.cond686:                                      ; preds = %for.inc693, %if.end682
  %374 = load i32, i32* %l, align 4, !tbaa !10
  %cmp687 = icmp ugt i32 %374, 0
  br i1 %cmp687, label %for.body689, label %for.end696

for.body689:                                      ; preds = %for.cond686
  %375 = load i32, i32* %rev_code, align 4, !tbaa !10
  %shl690 = shl i32 %375, 1
  %376 = load i32, i32* %cur_code, align 4, !tbaa !10
  %and691 = and i32 %376, 1
  %or692 = or i32 %shl690, %and691
  store i32 %or692, i32* %rev_code, align 4, !tbaa !10
  br label %for.inc693

for.inc693:                                       ; preds = %for.body689
  %377 = load i32, i32* %l, align 4, !tbaa !10
  %dec694 = add i32 %377, -1
  store i32 %dec694, i32* %l, align 4, !tbaa !10
  %378 = load i32, i32* %cur_code, align 4, !tbaa !10
  %shr695 = lshr i32 %378, 1
  store i32 %shr695, i32* %cur_code, align 4, !tbaa !10
  br label %for.cond686

for.end696:                                       ; preds = %for.cond686
  %379 = load i32, i32* %code_size, align 4, !tbaa !10
  %cmp697 = icmp ule i32 %379, 10
  br i1 %cmp697, label %if.then699, label %if.end713

if.then699:                                       ; preds = %for.end696
  %380 = bitcast i16* %k to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %380) #10
  %381 = load i32, i32* %code_size, align 4, !tbaa !10
  %shl700 = shl i32 %381, 9
  %382 = load i32, i32* %sym_index, align 4, !tbaa !10
  %or701 = or i32 %shl700, %382
  %conv702 = trunc i32 %or701 to i16
  store i16 %conv702, i16* %k, align 2, !tbaa !88
  br label %while.cond703

while.cond703:                                    ; preds = %while.body706, %if.then699
  %383 = load i32, i32* %rev_code, align 4, !tbaa !10
  %cmp704 = icmp ult i32 %383, 1024
  br i1 %cmp704, label %while.body706, label %while.end712

while.body706:                                    ; preds = %while.cond703
  %384 = load i16, i16* %k, align 2, !tbaa !88
  %385 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_look_up707 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %385, i32 0, i32 1
  %386 = load i32, i32* %rev_code, align 4, !tbaa !10
  %idxprom708 = zext i32 %386 to i64
  %arrayidx709 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up707, i64 0, i64 %idxprom708
  store i16 %384, i16* %arrayidx709, align 2, !tbaa !88
  %387 = load i32, i32* %code_size, align 4, !tbaa !10
  %shl710 = shl i32 1, %387
  %388 = load i32, i32* %rev_code, align 4, !tbaa !10
  %add711 = add i32 %388, %shl710
  store i32 %add711, i32* %rev_code, align 4, !tbaa !10
  br label %while.cond703

while.end712:                                     ; preds = %while.cond703
  store i32 156, i32* %cleanup.dest.slot, align 4
  %389 = bitcast i16* %k to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %389) #10
  br label %cleanup

if.end713:                                        ; preds = %for.end696
  %390 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_look_up714 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %390, i32 0, i32 1
  %391 = load i32, i32* %rev_code, align 4, !tbaa !10
  %and715 = and i32 %391, 1023
  %idxprom716 = zext i32 %and715 to i64
  %arrayidx717 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up714, i64 0, i64 %idxprom716
  %392 = load i16, i16* %arrayidx717, align 2, !tbaa !88
  %conv718 = sext i16 %392 to i32
  store i32 %conv718, i32* %tree_cur, align 4, !tbaa !10
  %cmp719 = icmp eq i32 0, %conv718
  br i1 %cmp719, label %if.then721, label %if.end728

if.then721:                                       ; preds = %if.end713
  %393 = load i32, i32* %tree_next, align 4, !tbaa !10
  %conv722 = trunc i32 %393 to i16
  %394 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_look_up723 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %394, i32 0, i32 1
  %395 = load i32, i32* %rev_code, align 4, !tbaa !10
  %and724 = and i32 %395, 1023
  %idxprom725 = zext i32 %and724 to i64
  %arrayidx726 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up723, i64 0, i64 %idxprom725
  store i16 %conv722, i16* %arrayidx726, align 2, !tbaa !88
  %396 = load i32, i32* %tree_next, align 4, !tbaa !10
  store i32 %396, i32* %tree_cur, align 4, !tbaa !10
  %397 = load i32, i32* %tree_next, align 4, !tbaa !10
  %sub727 = sub nsw i32 %397, 2
  store i32 %sub727, i32* %tree_next, align 4, !tbaa !10
  br label %if.end728

if.end728:                                        ; preds = %if.then721, %if.end713
  %398 = load i32, i32* %rev_code, align 4, !tbaa !10
  %shr729 = lshr i32 %398, 9
  store i32 %shr729, i32* %rev_code, align 4, !tbaa !10
  %399 = load i32, i32* %code_size, align 4, !tbaa !10
  store i32 %399, i32* %j, align 4, !tbaa !10
  br label %for.cond730

for.cond730:                                      ; preds = %for.inc759, %if.end728
  %400 = load i32, i32* %j, align 4, !tbaa !10
  %cmp731 = icmp ugt i32 %400, 11
  br i1 %cmp731, label %for.body733, label %for.end761

for.body733:                                      ; preds = %for.cond730
  %401 = load i32, i32* %rev_code, align 4, !tbaa !10
  %shr734 = lshr i32 %401, 1
  store i32 %shr734, i32* %rev_code, align 4, !tbaa !10
  %and735 = and i32 %shr734, 1
  %402 = load i32, i32* %tree_cur, align 4, !tbaa !10
  %sub736 = sub i32 %402, %and735
  store i32 %sub736, i32* %tree_cur, align 4, !tbaa !10
  %403 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_tree737 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %403, i32 0, i32 2
  %404 = load i32, i32* %tree_cur, align 4, !tbaa !10
  %sub738 = sub nsw i32 0, %404
  %sub739 = sub nsw i32 %sub738, 1
  %idxprom740 = sext i32 %sub739 to i64
  %arrayidx741 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree737, i64 0, i64 %idxprom740
  %405 = load i16, i16* %arrayidx741, align 2, !tbaa !88
  %tobool742 = icmp ne i16 %405, 0
  br i1 %tobool742, label %if.else751, label %if.then743

if.then743:                                       ; preds = %for.body733
  %406 = load i32, i32* %tree_next, align 4, !tbaa !10
  %conv744 = trunc i32 %406 to i16
  %407 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_tree745 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %407, i32 0, i32 2
  %408 = load i32, i32* %tree_cur, align 4, !tbaa !10
  %sub746 = sub nsw i32 0, %408
  %sub747 = sub nsw i32 %sub746, 1
  %idxprom748 = sext i32 %sub747 to i64
  %arrayidx749 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree745, i64 0, i64 %idxprom748
  store i16 %conv744, i16* %arrayidx749, align 2, !tbaa !88
  %409 = load i32, i32* %tree_next, align 4, !tbaa !10
  store i32 %409, i32* %tree_cur, align 4, !tbaa !10
  %410 = load i32, i32* %tree_next, align 4, !tbaa !10
  %sub750 = sub nsw i32 %410, 2
  store i32 %sub750, i32* %tree_next, align 4, !tbaa !10
  br label %if.end758

if.else751:                                       ; preds = %for.body733
  %411 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_tree752 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %411, i32 0, i32 2
  %412 = load i32, i32* %tree_cur, align 4, !tbaa !10
  %sub753 = sub nsw i32 0, %412
  %sub754 = sub nsw i32 %sub753, 1
  %idxprom755 = sext i32 %sub754 to i64
  %arrayidx756 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree752, i64 0, i64 %idxprom755
  %413 = load i16, i16* %arrayidx756, align 2, !tbaa !88
  %conv757 = sext i16 %413 to i32
  store i32 %conv757, i32* %tree_cur, align 4, !tbaa !10
  br label %if.end758

if.end758:                                        ; preds = %if.else751, %if.then743
  br label %for.inc759

for.inc759:                                       ; preds = %if.end758
  %414 = load i32, i32* %j, align 4, !tbaa !10
  %dec760 = add i32 %414, -1
  store i32 %dec760, i32* %j, align 4, !tbaa !10
  br label %for.cond730

for.end761:                                       ; preds = %for.cond730
  %415 = load i32, i32* %rev_code, align 4, !tbaa !10
  %shr762 = lshr i32 %415, 1
  store i32 %shr762, i32* %rev_code, align 4, !tbaa !10
  %and763 = and i32 %shr762, 1
  %416 = load i32, i32* %tree_cur, align 4, !tbaa !10
  %sub764 = sub i32 %416, %and763
  store i32 %sub764, i32* %tree_cur, align 4, !tbaa !10
  %417 = load i32, i32* %sym_index, align 4, !tbaa !10
  %conv765 = trunc i32 %417 to i16
  %418 = load %struct.tinfl_huff_table*, %struct.tinfl_huff_table** %pTable, align 8, !tbaa !8
  %m_tree766 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %418, i32 0, i32 2
  %419 = load i32, i32* %tree_cur, align 4, !tbaa !10
  %sub767 = sub nsw i32 0, %419
  %sub768 = sub nsw i32 %sub767, 1
  %idxprom769 = sext i32 %sub768 to i64
  %arrayidx770 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree766, i64 0, i64 %idxprom769
  store i16 %conv765, i16* %arrayidx770, align 2, !tbaa !88
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end761, %while.end712, %if.then681
  %420 = bitcast i32* %code_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %420) #10
  %421 = bitcast i32* %cur_code to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %421) #10
  %422 = bitcast i32* %l to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %422) #10
  %423 = bitcast i32* %rev_code to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %423) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 156, label %for.inc774
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc774

for.inc774:                                       ; preds = %cleanup.cont, %cleanup
  %424 = load i32, i32* %sym_index, align 4, !tbaa !10
  %inc775 = add i32 %424, 1
  store i32 %inc775, i32* %sym_index, align 4, !tbaa !10
  br label %for.cond668

for.end776:                                       ; preds = %for.cond668
  %425 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type777 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %425, i32 0, i32 6
  %426 = load i32, i32* %m_type777, align 8, !tbaa !87
  %cmp778 = icmp eq i32 %426, 2
  br i1 %cmp778, label %if.then780, label %if.end1076

if.then780:                                       ; preds = %for.end776
  store i32 0, i32* %counter, align 4, !tbaa !10
  br label %for.cond781

for.cond781:                                      ; preds = %cond.end1016, %if.then930, %if.then780
  %427 = load i32, i32* %counter, align 4, !tbaa !10
  %428 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes782 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %428, i32 0, i32 11
  %arrayidx783 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes782, i64 0, i64 0
  %429 = load i32, i32* %arrayidx783, align 4, !tbaa !10
  %430 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes784 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %430, i32 0, i32 11
  %arrayidx785 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes784, i64 0, i64 1
  %431 = load i32, i32* %arrayidx785, align 4, !tbaa !10
  %add786 = add i32 %429, %431
  %cmp787 = icmp ult i32 %427, %add786
  br i1 %cmp787, label %for.body789, label %for.end1025

for.body789:                                      ; preds = %for.cond781
  br label %do.body791

do.body791:                                       ; preds = %for.body789
  %432 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp793 = icmp ult i32 %432, 15
  br i1 %cmp793, label %if.then795, label %if.end892

if.then795:                                       ; preds = %do.body791
  %433 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %434 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast796 = ptrtoint i8* %433 to i64
  %sub.ptr.rhs.cast797 = ptrtoint i8* %434 to i64
  %sub.ptr.sub798 = sub i64 %sub.ptr.lhs.cast796, %sub.ptr.rhs.cast797
  %cmp799 = icmp slt i64 %sub.ptr.sub798, 2
  br i1 %cmp799, label %if.then801, label %if.else877

if.then801:                                       ; preds = %if.then795
  br label %do.body802

do.body802:                                       ; preds = %do.cond873, %if.then801
  %435 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables803 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %435, i32 0, i32 14
  %arrayidx804 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables803, i64 0, i64 2
  %m_look_up805 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx804, i32 0, i32 1
  %436 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and806 = and i64 %436, 1023
  %arrayidx807 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up805, i64 0, i64 %and806
  %437 = load i16, i16* %arrayidx807, align 2, !tbaa !88
  %conv808 = sext i16 %437 to i32
  store i32 %conv808, i32* %temp, align 4, !tbaa !10
  %438 = load i32, i32* %temp, align 4, !tbaa !10
  %cmp809 = icmp sge i32 %438, 0
  br i1 %cmp809, label %if.then811, label %if.else819

if.then811:                                       ; preds = %do.body802
  %439 = load i32, i32* %temp, align 4, !tbaa !10
  %shr812 = ashr i32 %439, 9
  store i32 %shr812, i32* %code_len, align 4, !tbaa !10
  %440 = load i32, i32* %code_len, align 4, !tbaa !10
  %tobool813 = icmp ne i32 %440, 0
  br i1 %tobool813, label %land.lhs.true814, label %if.end818

land.lhs.true814:                                 ; preds = %if.then811
  %441 = load i32, i32* %num_bits, align 4, !tbaa !10
  %442 = load i32, i32* %code_len, align 4, !tbaa !10
  %cmp815 = icmp uge i32 %441, %442
  br i1 %cmp815, label %if.then817, label %if.end818

if.then817:                                       ; preds = %land.lhs.true814
  br label %do.end876

if.end818:                                        ; preds = %land.lhs.true814, %if.then811
  br label %if.end849

if.else819:                                       ; preds = %do.body802
  %443 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp820 = icmp ugt i32 %443, 10
  br i1 %cmp820, label %if.then822, label %if.end848

if.then822:                                       ; preds = %if.else819
  store i32 10, i32* %code_len, align 4, !tbaa !10
  br label %do.body823

do.body823:                                       ; preds = %land.end842, %if.then822
  %444 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables824 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %444, i32 0, i32 14
  %arrayidx825 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables824, i64 0, i64 2
  %m_tree826 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx825, i32 0, i32 2
  %445 = load i32, i32* %temp, align 4, !tbaa !10
  %neg = xor i32 %445, -1
  %conv827 = sext i32 %neg to i64
  %446 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %447 = load i32, i32* %code_len, align 4, !tbaa !10
  %inc828 = add i32 %447, 1
  store i32 %inc828, i32* %code_len, align 4, !tbaa !10
  %sh_prom829 = zext i32 %447 to i64
  %shr830 = lshr i64 %446, %sh_prom829
  %and831 = and i64 %shr830, 1
  %add832 = add i64 %conv827, %and831
  %arrayidx833 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree826, i64 0, i64 %add832
  %448 = load i16, i16* %arrayidx833, align 2, !tbaa !88
  %conv834 = sext i16 %448 to i32
  store i32 %conv834, i32* %temp, align 4, !tbaa !10
  br label %do.cond835

do.cond835:                                       ; preds = %do.body823
  %449 = load i32, i32* %temp, align 4, !tbaa !10
  %cmp836 = icmp slt i32 %449, 0
  br i1 %cmp836, label %land.rhs838, label %land.end842

land.rhs838:                                      ; preds = %do.cond835
  %450 = load i32, i32* %num_bits, align 4, !tbaa !10
  %451 = load i32, i32* %code_len, align 4, !tbaa !10
  %add839 = add i32 %451, 1
  %cmp840 = icmp uge i32 %450, %add839
  br label %land.end842

land.end842:                                      ; preds = %land.rhs838, %do.cond835
  %452 = phi i1 [ false, %do.cond835 ], [ %cmp840, %land.rhs838 ]
  br i1 %452, label %do.body823, label %do.end843

do.end843:                                        ; preds = %land.end842
  %453 = load i32, i32* %temp, align 4, !tbaa !10
  %cmp844 = icmp sge i32 %453, 0
  br i1 %cmp844, label %if.then846, label %if.end847

if.then846:                                       ; preds = %do.end843
  br label %do.end876

if.end847:                                        ; preds = %do.end843
  br label %if.end848

if.end848:                                        ; preds = %if.end847, %if.else819
  br label %if.end849

if.end849:                                        ; preds = %if.end848, %if.end818
  br label %do.body850

do.body850:                                       ; preds = %if.end849
  br label %while.cond851

while.cond851:                                    ; preds = %do.end862, %do.body850
  %454 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %455 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp852 = icmp uge i8* %454, %455
  br i1 %cmp852, label %while.body854, label %while.end863

while.body854:                                    ; preds = %while.cond851
  br label %do.body855

do.body855:                                       ; preds = %while.body854
  %456 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and856 = and i32 %456, 2
  %tobool857 = icmp ne i32 %and856, 0
  %457 = zext i1 %tobool857 to i64
  %cond858 = select i1 %tobool857, i32 1, i32 -4
  store i32 %cond858, i32* %status, align 4, !tbaa !12
  %458 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state859 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %458, i32 0, i32 0
  store i32 16, i32* %m_state859, align 8, !tbaa !81
  br label %common_exit

sw.bb860:                                         ; preds = %if.end
  br label %do.cond861

do.cond861:                                       ; preds = %sw.bb860
  br label %do.end862

do.end862:                                        ; preds = %do.cond861
  br label %while.cond851

while.end863:                                     ; preds = %while.cond851
  %459 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr864 = getelementptr inbounds i8, i8* %459, i32 1
  store i8* %incdec.ptr864, i8** %pIn_buf_cur, align 8, !tbaa !8
  %460 = load i8, i8* %459, align 1, !tbaa !12
  %conv865 = zext i8 %460 to i32
  store i32 %conv865, i32* %c792, align 4, !tbaa !10
  br label %do.cond866

do.cond866:                                       ; preds = %while.end863
  br label %do.end867

do.end867:                                        ; preds = %do.cond866
  %461 = load i32, i32* %c792, align 4, !tbaa !10
  %conv868 = zext i32 %461 to i64
  %462 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom869 = zext i32 %462 to i64
  %shl870 = shl i64 %conv868, %sh_prom869
  %463 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or871 = or i64 %463, %shl870
  store i64 %or871, i64* %bit_buf, align 8, !tbaa !76
  %464 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add872 = add i32 %464, 8
  store i32 %add872, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond873

do.cond873:                                       ; preds = %do.end867
  %465 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp874 = icmp ult i32 %465, 15
  br i1 %cmp874, label %do.body802, label %do.end876

do.end876:                                        ; preds = %do.cond873, %if.then846, %if.then817
  br label %if.end891

if.else877:                                       ; preds = %if.then795
  %466 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %arrayidx878 = getelementptr inbounds i8, i8* %466, i64 0
  %467 = load i8, i8* %arrayidx878, align 1, !tbaa !12
  %conv879 = zext i8 %467 to i64
  %468 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom880 = zext i32 %468 to i64
  %shl881 = shl i64 %conv879, %sh_prom880
  %469 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %arrayidx882 = getelementptr inbounds i8, i8* %469, i64 1
  %470 = load i8, i8* %arrayidx882, align 1, !tbaa !12
  %conv883 = zext i8 %470 to i64
  %471 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add884 = add i32 %471, 8
  %sh_prom885 = zext i32 %add884 to i64
  %shl886 = shl i64 %conv883, %sh_prom885
  %or887 = or i64 %shl881, %shl886
  %472 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or888 = or i64 %472, %or887
  store i64 %or888, i64* %bit_buf, align 8, !tbaa !76
  %473 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %add.ptr889 = getelementptr inbounds i8, i8* %473, i64 2
  store i8* %add.ptr889, i8** %pIn_buf_cur, align 8, !tbaa !8
  %474 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add890 = add i32 %474, 16
  store i32 %add890, i32* %num_bits, align 4, !tbaa !10
  br label %if.end891

if.end891:                                        ; preds = %if.else877, %do.end876
  br label %if.end892

if.end892:                                        ; preds = %if.end891, %do.body791
  %475 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables893 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %475, i32 0, i32 14
  %arrayidx894 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables893, i64 0, i64 2
  %m_look_up895 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx894, i32 0, i32 1
  %476 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and896 = and i64 %476, 1023
  %arrayidx897 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up895, i64 0, i64 %and896
  %477 = load i16, i16* %arrayidx897, align 2, !tbaa !88
  %conv898 = sext i16 %477 to i32
  store i32 %conv898, i32* %temp, align 4, !tbaa !10
  %cmp899 = icmp sge i32 %conv898, 0
  br i1 %cmp899, label %if.then901, label %if.else904

if.then901:                                       ; preds = %if.end892
  %478 = load i32, i32* %temp, align 4, !tbaa !10
  %shr902 = ashr i32 %478, 9
  store i32 %shr902, i32* %code_len, align 4, !tbaa !10
  %479 = load i32, i32* %temp, align 4, !tbaa !10
  %and903 = and i32 %479, 511
  store i32 %and903, i32* %temp, align 4, !tbaa !10
  br label %if.end922

if.else904:                                       ; preds = %if.end892
  store i32 10, i32* %code_len, align 4, !tbaa !10
  br label %do.body905

do.body905:                                       ; preds = %do.cond918, %if.else904
  %480 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables906 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %480, i32 0, i32 14
  %arrayidx907 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables906, i64 0, i64 2
  %m_tree908 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx907, i32 0, i32 2
  %481 = load i32, i32* %temp, align 4, !tbaa !10
  %neg909 = xor i32 %481, -1
  %conv910 = sext i32 %neg909 to i64
  %482 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %483 = load i32, i32* %code_len, align 4, !tbaa !10
  %inc911 = add i32 %483, 1
  store i32 %inc911, i32* %code_len, align 4, !tbaa !10
  %sh_prom912 = zext i32 %483 to i64
  %shr913 = lshr i64 %482, %sh_prom912
  %and914 = and i64 %shr913, 1
  %add915 = add i64 %conv910, %and914
  %arrayidx916 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree908, i64 0, i64 %add915
  %484 = load i16, i16* %arrayidx916, align 2, !tbaa !88
  %conv917 = sext i16 %484 to i32
  store i32 %conv917, i32* %temp, align 4, !tbaa !10
  br label %do.cond918

do.cond918:                                       ; preds = %do.body905
  %485 = load i32, i32* %temp, align 4, !tbaa !10
  %cmp919 = icmp slt i32 %485, 0
  br i1 %cmp919, label %do.body905, label %do.end921

do.end921:                                        ; preds = %do.cond918
  br label %if.end922

if.end922:                                        ; preds = %do.end921, %if.then901
  %486 = load i32, i32* %temp, align 4, !tbaa !10
  store i32 %486, i32* %dist, align 4, !tbaa !10
  %487 = load i32, i32* %code_len, align 4, !tbaa !10
  %488 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom923 = zext i32 %487 to i64
  %shr924 = lshr i64 %488, %sh_prom923
  store i64 %shr924, i64* %bit_buf, align 8, !tbaa !76
  %489 = load i32, i32* %code_len, align 4, !tbaa !10
  %490 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub925 = sub i32 %490, %489
  store i32 %sub925, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond926

do.cond926:                                       ; preds = %if.end922
  br label %do.end927

do.end927:                                        ; preds = %do.cond926
  %491 = load i32, i32* %dist, align 4, !tbaa !10
  %cmp928 = icmp ult i32 %491, 16
  br i1 %cmp928, label %if.then930, label %if.end935

if.then930:                                       ; preds = %do.end927
  %492 = load i32, i32* %dist, align 4, !tbaa !10
  %conv931 = trunc i32 %492 to i8
  %493 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_len_codes = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %493, i32 0, i32 16
  %494 = load i32, i32* %counter, align 4, !tbaa !10
  %inc932 = add i32 %494, 1
  store i32 %inc932, i32* %counter, align 4, !tbaa !10
  %idxprom933 = zext i32 %494 to i64
  %arrayidx934 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes, i64 0, i64 %idxprom933
  store i8 %conv931, i8* %arrayidx934, align 1, !tbaa !12
  br label %for.cond781

if.end935:                                        ; preds = %do.end927
  %495 = load i32, i32* %dist, align 4, !tbaa !10
  %cmp936 = icmp eq i32 %495, 16
  br i1 %cmp936, label %land.lhs.true938, label %if.end950

land.lhs.true938:                                 ; preds = %if.end935
  %496 = load i32, i32* %counter, align 4, !tbaa !10
  %tobool939 = icmp ne i32 %496, 0
  br i1 %tobool939, label %if.end950, label %if.then940

if.then940:                                       ; preds = %land.lhs.true938
  br label %do.body941

do.body941:                                       ; preds = %if.then940
  br label %for.cond942

for.cond942:                                      ; preds = %do.end947, %do.body941
  br label %do.body943

do.body943:                                       ; preds = %for.cond942
  store i32 -1, i32* %status, align 4, !tbaa !12
  %497 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state944 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %497, i32 0, i32 0
  store i32 17, i32* %m_state944, align 8, !tbaa !81
  br label %common_exit

sw.bb945:                                         ; preds = %if.end
  br label %do.cond946

do.cond946:                                       ; preds = %sw.bb945
  br label %do.end947

do.end947:                                        ; preds = %do.cond946
  br label %for.cond942

do.cond948:                                       ; No predecessors!
  br label %do.end949

do.end949:                                        ; preds = %do.cond948
  br label %if.end950

if.end950:                                        ; preds = %do.end949, %land.lhs.true938, %if.end935
  %498 = load i32, i32* %dist, align 4, !tbaa !10
  %sub951 = sub i32 %498, 16
  %idxprom952 = zext i32 %sub951 to i64
  %arrayidx953 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.15, i64 0, i64 %idxprom952
  %499 = load i8, i8* %arrayidx953, align 1, !tbaa !12
  %conv954 = sext i8 %499 to i32
  store i32 %conv954, i32* %num_extra, align 4, !tbaa !10
  br label %do.body955

do.body955:                                       ; preds = %if.end950
  %500 = load i32, i32* %num_bits, align 4, !tbaa !10
  %501 = load i32, i32* %num_extra, align 4, !tbaa !10
  %cmp956 = icmp ult i32 %500, %501
  br i1 %cmp956, label %if.then958, label %if.end988

if.then958:                                       ; preds = %do.body955
  br label %do.body959

do.body959:                                       ; preds = %do.cond984, %if.then958
  br label %do.body961

do.body961:                                       ; preds = %do.body959
  br label %while.cond962

while.cond962:                                    ; preds = %do.end973, %do.body961
  %502 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %503 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp963 = icmp uge i8* %502, %503
  br i1 %cmp963, label %while.body965, label %while.end974

while.body965:                                    ; preds = %while.cond962
  br label %do.body966

do.body966:                                       ; preds = %while.body965
  %504 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and967 = and i32 %504, 2
  %tobool968 = icmp ne i32 %and967, 0
  %505 = zext i1 %tobool968 to i64
  %cond969 = select i1 %tobool968, i32 1, i32 -4
  store i32 %cond969, i32* %status, align 4, !tbaa !12
  %506 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state970 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %506, i32 0, i32 0
  store i32 18, i32* %m_state970, align 8, !tbaa !81
  br label %common_exit

sw.bb971:                                         ; preds = %if.end
  br label %do.cond972

do.cond972:                                       ; preds = %sw.bb971
  br label %do.end973

do.end973:                                        ; preds = %do.cond972
  br label %while.cond962

while.end974:                                     ; preds = %while.cond962
  %507 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr975 = getelementptr inbounds i8, i8* %507, i32 1
  store i8* %incdec.ptr975, i8** %pIn_buf_cur, align 8, !tbaa !8
  %508 = load i8, i8* %507, align 1, !tbaa !12
  %conv976 = zext i8 %508 to i32
  store i32 %conv976, i32* %c960, align 4, !tbaa !10
  br label %do.cond977

do.cond977:                                       ; preds = %while.end974
  br label %do.end978

do.end978:                                        ; preds = %do.cond977
  %509 = load i32, i32* %c960, align 4, !tbaa !10
  %conv979 = zext i32 %509 to i64
  %510 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom980 = zext i32 %510 to i64
  %shl981 = shl i64 %conv979, %sh_prom980
  %511 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or982 = or i64 %511, %shl981
  store i64 %or982, i64* %bit_buf, align 8, !tbaa !76
  %512 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add983 = add i32 %512, 8
  store i32 %add983, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond984

do.cond984:                                       ; preds = %do.end978
  %513 = load i32, i32* %num_bits, align 4, !tbaa !10
  %514 = load i32, i32* %num_extra, align 4, !tbaa !10
  %cmp985 = icmp ult i32 %513, %514
  br i1 %cmp985, label %do.body959, label %do.end987

do.end987:                                        ; preds = %do.cond984
  br label %if.end988

if.end988:                                        ; preds = %do.end987, %do.body955
  %515 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %516 = load i32, i32* %num_extra, align 4, !tbaa !10
  %shl989 = shl i32 1, %516
  %sub990 = sub nsw i32 %shl989, 1
  %conv991 = sext i32 %sub990 to i64
  %and992 = and i64 %515, %conv991
  %conv993 = trunc i64 %and992 to i32
  store i32 %conv993, i32* %s790, align 4, !tbaa !10
  %517 = load i32, i32* %num_extra, align 4, !tbaa !10
  %518 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom994 = zext i32 %517 to i64
  %shr995 = lshr i64 %518, %sh_prom994
  store i64 %shr995, i64* %bit_buf, align 8, !tbaa !76
  %519 = load i32, i32* %num_extra, align 4, !tbaa !10
  %520 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub996 = sub i32 %520, %519
  store i32 %sub996, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond997

do.cond997:                                       ; preds = %if.end988
  br label %do.end998

do.end998:                                        ; preds = %do.cond997
  %521 = load i32, i32* %dist, align 4, !tbaa !10
  %sub999 = sub i32 %521, 16
  %idxprom1000 = zext i32 %sub999 to i64
  %arrayidx1001 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.16, i64 0, i64 %idxprom1000
  %522 = load i8, i8* %arrayidx1001, align 1, !tbaa !12
  %conv1002 = sext i8 %522 to i32
  %523 = load i32, i32* %s790, align 4, !tbaa !10
  %add1003 = add i32 %523, %conv1002
  store i32 %add1003, i32* %s790, align 4, !tbaa !10
  %524 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_len_codes1004 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %524, i32 0, i32 16
  %arraydecay1005 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes1004, i64 0, i64 0
  %525 = load i32, i32* %counter, align 4, !tbaa !10
  %idx.ext = zext i32 %525 to i64
  %add.ptr1006 = getelementptr inbounds i8, i8* %arraydecay1005, i64 %idx.ext
  %526 = load i32, i32* %dist, align 4, !tbaa !10
  %cmp1007 = icmp eq i32 %526, 16
  br i1 %cmp1007, label %cond.true1009, label %cond.false1015

cond.true1009:                                    ; preds = %do.end998
  %527 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_len_codes1010 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %527, i32 0, i32 16
  %528 = load i32, i32* %counter, align 4, !tbaa !10
  %sub1011 = sub i32 %528, 1
  %idxprom1012 = zext i32 %sub1011 to i64
  %arrayidx1013 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes1010, i64 0, i64 %idxprom1012
  %529 = load i8, i8* %arrayidx1013, align 1, !tbaa !12
  %conv1014 = zext i8 %529 to i32
  br label %cond.end1016

cond.false1015:                                   ; preds = %do.end998
  br label %cond.end1016

cond.end1016:                                     ; preds = %cond.false1015, %cond.true1009
  %cond1017 = phi i32 [ %conv1014, %cond.true1009 ], [ 0, %cond.false1015 ]
  %530 = load i32, i32* %s790, align 4, !tbaa !10
  %conv1018 = zext i32 %530 to i64
  %531 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_len_codes1019 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %531, i32 0, i32 16
  %arraydecay1020 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes1019, i64 0, i64 0
  %532 = load i32, i32* %counter, align 4, !tbaa !10
  %idx.ext1021 = zext i32 %532 to i64
  %add.ptr1022 = getelementptr inbounds i8, i8* %arraydecay1020, i64 %idx.ext1021
  %533 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr1022, i1 false, i1 true, i1 false)
  %call1023 = call i8* @__memset_chk(i8* %add.ptr1006, i32 %cond1017, i64 %conv1018, i64 %533) #10
  %534 = load i32, i32* %s790, align 4, !tbaa !10
  %535 = load i32, i32* %counter, align 4, !tbaa !10
  %add1024 = add i32 %535, %534
  store i32 %add1024, i32* %counter, align 4, !tbaa !10
  br label %for.cond781

for.end1025:                                      ; preds = %for.cond781
  %536 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes1026 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %536, i32 0, i32 11
  %arrayidx1027 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1026, i64 0, i64 0
  %537 = load i32, i32* %arrayidx1027, align 4, !tbaa !10
  %538 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes1028 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %538, i32 0, i32 11
  %arrayidx1029 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1028, i64 0, i64 1
  %539 = load i32, i32* %arrayidx1029, align 4, !tbaa !10
  %add1030 = add i32 %537, %539
  %540 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp1031 = icmp ne i32 %add1030, %540
  br i1 %cmp1031, label %if.then1033, label %if.end1043

if.then1033:                                      ; preds = %for.end1025
  br label %do.body1034

do.body1034:                                      ; preds = %if.then1033
  br label %for.cond1035

for.cond1035:                                     ; preds = %do.end1040, %do.body1034
  br label %do.body1036

do.body1036:                                      ; preds = %for.cond1035
  store i32 -1, i32* %status, align 4, !tbaa !12
  %541 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1037 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %541, i32 0, i32 0
  store i32 21, i32* %m_state1037, align 8, !tbaa !81
  br label %common_exit

sw.bb1038:                                        ; preds = %if.end
  br label %do.cond1039

do.cond1039:                                      ; preds = %sw.bb1038
  br label %do.end1040

do.end1040:                                       ; preds = %do.cond1039
  br label %for.cond1035

do.cond1041:                                      ; No predecessors!
  br label %do.end1042

do.end1042:                                       ; preds = %do.cond1041
  br label %if.end1043

if.end1043:                                       ; preds = %do.end1042, %for.end1025
  %542 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1044 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %542, i32 0, i32 14
  %arrayidx1045 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1044, i64 0, i64 0
  %m_code_size1046 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1045, i32 0, i32 0
  %arraydecay1047 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size1046, i64 0, i64 0
  %543 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_len_codes1048 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %543, i32 0, i32 16
  %arraydecay1049 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes1048, i64 0, i64 0
  %544 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes1050 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %544, i32 0, i32 11
  %arrayidx1051 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1050, i64 0, i64 0
  %545 = load i32, i32* %arrayidx1051, align 4, !tbaa !10
  %conv1052 = zext i32 %545 to i64
  %546 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1053 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %546, i32 0, i32 14
  %arrayidx1054 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1053, i64 0, i64 0
  %m_code_size1055 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1054, i32 0, i32 0
  %arraydecay1056 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size1055, i64 0, i64 0
  %547 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay1056, i1 false, i1 true, i1 false)
  %call1057 = call i8* @__memcpy_chk(i8* %arraydecay1047, i8* %arraydecay1049, i64 %conv1052, i64 %547) #10
  %548 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1058 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %548, i32 0, i32 14
  %arrayidx1059 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1058, i64 0, i64 1
  %m_code_size1060 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1059, i32 0, i32 0
  %arraydecay1061 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size1060, i64 0, i64 0
  %549 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_len_codes1062 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %549, i32 0, i32 16
  %arraydecay1063 = getelementptr inbounds [457 x i8], [457 x i8]* %m_len_codes1062, i64 0, i64 0
  %550 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes1064 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %550, i32 0, i32 11
  %arrayidx1065 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1064, i64 0, i64 0
  %551 = load i32, i32* %arrayidx1065, align 4, !tbaa !10
  %idx.ext1066 = zext i32 %551 to i64
  %add.ptr1067 = getelementptr inbounds i8, i8* %arraydecay1063, i64 %idx.ext1066
  %552 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_table_sizes1068 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %552, i32 0, i32 11
  %arrayidx1069 = getelementptr inbounds [3 x i32], [3 x i32]* %m_table_sizes1068, i64 0, i64 1
  %553 = load i32, i32* %arrayidx1069, align 4, !tbaa !10
  %conv1070 = zext i32 %553 to i64
  %554 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1071 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %554, i32 0, i32 14
  %arrayidx1072 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1071, i64 0, i64 1
  %m_code_size1073 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1072, i32 0, i32 0
  %arraydecay1074 = getelementptr inbounds [288 x i8], [288 x i8]* %m_code_size1073, i64 0, i64 0
  %555 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay1074, i1 false, i1 true, i1 false)
  %call1075 = call i8* @__memcpy_chk(i8* %arraydecay1061, i8* %add.ptr1067, i64 %conv1070, i64 %555) #10
  br label %if.end1076

if.end1076:                                       ; preds = %if.end1043, %for.end776
  br label %for.inc1077

for.inc1077:                                      ; preds = %if.end1076
  %556 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_type1078 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %556, i32 0, i32 6
  %557 = load i32, i32* %m_type1078, align 8, !tbaa !87
  %dec1079 = add i32 %557, -1
  store i32 %dec1079, i32* %m_type1078, align 8, !tbaa !87
  br label %for.cond603

for.end1080:                                      ; preds = %for.cond603
  br label %for.cond1081

for.cond1081:                                     ; preds = %if.end1723, %cleanup1691, %while.end1654, %for.end1080
  br label %for.cond1082

for.cond1082:                                     ; preds = %if.end1345, %for.cond1081
  %558 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %559 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast1083 = ptrtoint i8* %558 to i64
  %sub.ptr.rhs.cast1084 = ptrtoint i8* %559 to i64
  %sub.ptr.sub1085 = sub i64 %sub.ptr.lhs.cast1083, %sub.ptr.rhs.cast1084
  %cmp1086 = icmp slt i64 %sub.ptr.sub1085, 4
  br i1 %cmp1086, label %if.then1094, label %lor.lhs.false1088

lor.lhs.false1088:                                ; preds = %for.cond1082
  %560 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %561 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast1089 = ptrtoint i8* %560 to i64
  %sub.ptr.rhs.cast1090 = ptrtoint i8* %561 to i64
  %sub.ptr.sub1091 = sub i64 %sub.ptr.lhs.cast1089, %sub.ptr.rhs.cast1090
  %cmp1092 = icmp slt i64 %sub.ptr.sub1091, 2
  br i1 %cmp1092, label %if.then1094, label %if.else1251

if.then1094:                                      ; preds = %lor.lhs.false1088, %for.cond1082
  br label %do.body1095

do.body1095:                                      ; preds = %if.then1094
  %562 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1099 = icmp ult i32 %562, 15
  br i1 %cmp1099, label %if.then1101, label %if.end1199

if.then1101:                                      ; preds = %do.body1095
  %563 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %564 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast1102 = ptrtoint i8* %563 to i64
  %sub.ptr.rhs.cast1103 = ptrtoint i8* %564 to i64
  %sub.ptr.sub1104 = sub i64 %sub.ptr.lhs.cast1102, %sub.ptr.rhs.cast1103
  %cmp1105 = icmp slt i64 %sub.ptr.sub1104, 2
  br i1 %cmp1105, label %if.then1107, label %if.else1184

if.then1107:                                      ; preds = %if.then1101
  br label %do.body1108

do.body1108:                                      ; preds = %do.cond1180, %if.then1107
  %565 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1109 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %565, i32 0, i32 14
  %arrayidx1110 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1109, i64 0, i64 0
  %m_look_up1111 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1110, i32 0, i32 1
  %566 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and1112 = and i64 %566, 1023
  %arrayidx1113 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1111, i64 0, i64 %and1112
  %567 = load i16, i16* %arrayidx1113, align 2, !tbaa !88
  %conv1114 = sext i16 %567 to i32
  store i32 %conv1114, i32* %temp1096, align 4, !tbaa !10
  %568 = load i32, i32* %temp1096, align 4, !tbaa !10
  %cmp1115 = icmp sge i32 %568, 0
  br i1 %cmp1115, label %if.then1117, label %if.else1125

if.then1117:                                      ; preds = %do.body1108
  %569 = load i32, i32* %temp1096, align 4, !tbaa !10
  %shr1118 = ashr i32 %569, 9
  store i32 %shr1118, i32* %code_len1097, align 4, !tbaa !10
  %570 = load i32, i32* %code_len1097, align 4, !tbaa !10
  %tobool1119 = icmp ne i32 %570, 0
  br i1 %tobool1119, label %land.lhs.true1120, label %if.end1124

land.lhs.true1120:                                ; preds = %if.then1117
  %571 = load i32, i32* %num_bits, align 4, !tbaa !10
  %572 = load i32, i32* %code_len1097, align 4, !tbaa !10
  %cmp1121 = icmp uge i32 %571, %572
  br i1 %cmp1121, label %if.then1123, label %if.end1124

if.then1123:                                      ; preds = %land.lhs.true1120
  br label %do.end1183

if.end1124:                                       ; preds = %land.lhs.true1120, %if.then1117
  br label %if.end1156

if.else1125:                                      ; preds = %do.body1108
  %573 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1126 = icmp ugt i32 %573, 10
  br i1 %cmp1126, label %if.then1128, label %if.end1155

if.then1128:                                      ; preds = %if.else1125
  store i32 10, i32* %code_len1097, align 4, !tbaa !10
  br label %do.body1129

do.body1129:                                      ; preds = %land.end1149, %if.then1128
  %574 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1130 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %574, i32 0, i32 14
  %arrayidx1131 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1130, i64 0, i64 0
  %m_tree1132 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1131, i32 0, i32 2
  %575 = load i32, i32* %temp1096, align 4, !tbaa !10
  %neg1133 = xor i32 %575, -1
  %conv1134 = sext i32 %neg1133 to i64
  %576 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %577 = load i32, i32* %code_len1097, align 4, !tbaa !10
  %inc1135 = add i32 %577, 1
  store i32 %inc1135, i32* %code_len1097, align 4, !tbaa !10
  %sh_prom1136 = zext i32 %577 to i64
  %shr1137 = lshr i64 %576, %sh_prom1136
  %and1138 = and i64 %shr1137, 1
  %add1139 = add i64 %conv1134, %and1138
  %arrayidx1140 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1132, i64 0, i64 %add1139
  %578 = load i16, i16* %arrayidx1140, align 2, !tbaa !88
  %conv1141 = sext i16 %578 to i32
  store i32 %conv1141, i32* %temp1096, align 4, !tbaa !10
  br label %do.cond1142

do.cond1142:                                      ; preds = %do.body1129
  %579 = load i32, i32* %temp1096, align 4, !tbaa !10
  %cmp1143 = icmp slt i32 %579, 0
  br i1 %cmp1143, label %land.rhs1145, label %land.end1149

land.rhs1145:                                     ; preds = %do.cond1142
  %580 = load i32, i32* %num_bits, align 4, !tbaa !10
  %581 = load i32, i32* %code_len1097, align 4, !tbaa !10
  %add1146 = add i32 %581, 1
  %cmp1147 = icmp uge i32 %580, %add1146
  br label %land.end1149

land.end1149:                                     ; preds = %land.rhs1145, %do.cond1142
  %582 = phi i1 [ false, %do.cond1142 ], [ %cmp1147, %land.rhs1145 ]
  br i1 %582, label %do.body1129, label %do.end1150

do.end1150:                                       ; preds = %land.end1149
  %583 = load i32, i32* %temp1096, align 4, !tbaa !10
  %cmp1151 = icmp sge i32 %583, 0
  br i1 %cmp1151, label %if.then1153, label %if.end1154

if.then1153:                                      ; preds = %do.end1150
  br label %do.end1183

if.end1154:                                       ; preds = %do.end1150
  br label %if.end1155

if.end1155:                                       ; preds = %if.end1154, %if.else1125
  br label %if.end1156

if.end1156:                                       ; preds = %if.end1155, %if.end1124
  br label %do.body1157

do.body1157:                                      ; preds = %if.end1156
  br label %while.cond1158

while.cond1158:                                   ; preds = %do.end1169, %do.body1157
  %584 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %585 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp1159 = icmp uge i8* %584, %585
  br i1 %cmp1159, label %while.body1161, label %while.end1170

while.body1161:                                   ; preds = %while.cond1158
  br label %do.body1162

do.body1162:                                      ; preds = %while.body1161
  %586 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1163 = and i32 %586, 2
  %tobool1164 = icmp ne i32 %and1163, 0
  %587 = zext i1 %tobool1164 to i64
  %cond1165 = select i1 %tobool1164, i32 1, i32 -4
  store i32 %cond1165, i32* %status, align 4, !tbaa !12
  %588 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1166 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %588, i32 0, i32 0
  store i32 23, i32* %m_state1166, align 8, !tbaa !81
  br label %common_exit

sw.bb1167:                                        ; preds = %if.end
  br label %do.cond1168

do.cond1168:                                      ; preds = %sw.bb1167
  br label %do.end1169

do.end1169:                                       ; preds = %do.cond1168
  br label %while.cond1158

while.end1170:                                    ; preds = %while.cond1158
  %589 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1171 = getelementptr inbounds i8, i8* %589, i32 1
  store i8* %incdec.ptr1171, i8** %pIn_buf_cur, align 8, !tbaa !8
  %590 = load i8, i8* %589, align 1, !tbaa !12
  %conv1172 = zext i8 %590 to i32
  store i32 %conv1172, i32* %c1098, align 4, !tbaa !10
  br label %do.cond1173

do.cond1173:                                      ; preds = %while.end1170
  br label %do.end1174

do.end1174:                                       ; preds = %do.cond1173
  %591 = load i32, i32* %c1098, align 4, !tbaa !10
  %conv1175 = zext i32 %591 to i64
  %592 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1176 = zext i32 %592 to i64
  %shl1177 = shl i64 %conv1175, %sh_prom1176
  %593 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1178 = or i64 %593, %shl1177
  store i64 %or1178, i64* %bit_buf, align 8, !tbaa !76
  %594 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1179 = add i32 %594, 8
  store i32 %add1179, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1180

do.cond1180:                                      ; preds = %do.end1174
  %595 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1181 = icmp ult i32 %595, 15
  br i1 %cmp1181, label %do.body1108, label %do.end1183

do.end1183:                                       ; preds = %do.cond1180, %if.then1153, %if.then1123
  br label %if.end1198

if.else1184:                                      ; preds = %if.then1101
  %596 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %arrayidx1185 = getelementptr inbounds i8, i8* %596, i64 0
  %597 = load i8, i8* %arrayidx1185, align 1, !tbaa !12
  %conv1186 = zext i8 %597 to i64
  %598 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1187 = zext i32 %598 to i64
  %shl1188 = shl i64 %conv1186, %sh_prom1187
  %599 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %arrayidx1189 = getelementptr inbounds i8, i8* %599, i64 1
  %600 = load i8, i8* %arrayidx1189, align 1, !tbaa !12
  %conv1190 = zext i8 %600 to i64
  %601 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1191 = add i32 %601, 8
  %sh_prom1192 = zext i32 %add1191 to i64
  %shl1193 = shl i64 %conv1190, %sh_prom1192
  %or1194 = or i64 %shl1188, %shl1193
  %602 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1195 = or i64 %602, %or1194
  store i64 %or1195, i64* %bit_buf, align 8, !tbaa !76
  %603 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %add.ptr1196 = getelementptr inbounds i8, i8* %603, i64 2
  store i8* %add.ptr1196, i8** %pIn_buf_cur, align 8, !tbaa !8
  %604 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1197 = add i32 %604, 16
  store i32 %add1197, i32* %num_bits, align 4, !tbaa !10
  br label %if.end1198

if.end1198:                                       ; preds = %if.else1184, %do.end1183
  br label %if.end1199

if.end1199:                                       ; preds = %if.end1198, %do.body1095
  %605 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1200 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %605, i32 0, i32 14
  %arrayidx1201 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1200, i64 0, i64 0
  %m_look_up1202 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1201, i32 0, i32 1
  %606 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and1203 = and i64 %606, 1023
  %arrayidx1204 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1202, i64 0, i64 %and1203
  %607 = load i16, i16* %arrayidx1204, align 2, !tbaa !88
  %conv1205 = sext i16 %607 to i32
  store i32 %conv1205, i32* %temp1096, align 4, !tbaa !10
  %cmp1206 = icmp sge i32 %conv1205, 0
  br i1 %cmp1206, label %if.then1208, label %if.else1211

if.then1208:                                      ; preds = %if.end1199
  %608 = load i32, i32* %temp1096, align 4, !tbaa !10
  %shr1209 = ashr i32 %608, 9
  store i32 %shr1209, i32* %code_len1097, align 4, !tbaa !10
  %609 = load i32, i32* %temp1096, align 4, !tbaa !10
  %and1210 = and i32 %609, 511
  store i32 %and1210, i32* %temp1096, align 4, !tbaa !10
  br label %if.end1229

if.else1211:                                      ; preds = %if.end1199
  store i32 10, i32* %code_len1097, align 4, !tbaa !10
  br label %do.body1212

do.body1212:                                      ; preds = %do.cond1225, %if.else1211
  %610 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1213 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %610, i32 0, i32 14
  %arrayidx1214 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1213, i64 0, i64 0
  %m_tree1215 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1214, i32 0, i32 2
  %611 = load i32, i32* %temp1096, align 4, !tbaa !10
  %neg1216 = xor i32 %611, -1
  %conv1217 = sext i32 %neg1216 to i64
  %612 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %613 = load i32, i32* %code_len1097, align 4, !tbaa !10
  %inc1218 = add i32 %613, 1
  store i32 %inc1218, i32* %code_len1097, align 4, !tbaa !10
  %sh_prom1219 = zext i32 %613 to i64
  %shr1220 = lshr i64 %612, %sh_prom1219
  %and1221 = and i64 %shr1220, 1
  %add1222 = add i64 %conv1217, %and1221
  %arrayidx1223 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1215, i64 0, i64 %add1222
  %614 = load i16, i16* %arrayidx1223, align 2, !tbaa !88
  %conv1224 = sext i16 %614 to i32
  store i32 %conv1224, i32* %temp1096, align 4, !tbaa !10
  br label %do.cond1225

do.cond1225:                                      ; preds = %do.body1212
  %615 = load i32, i32* %temp1096, align 4, !tbaa !10
  %cmp1226 = icmp slt i32 %615, 0
  br i1 %cmp1226, label %do.body1212, label %do.end1228

do.end1228:                                       ; preds = %do.cond1225
  br label %if.end1229

if.end1229:                                       ; preds = %do.end1228, %if.then1208
  %616 = load i32, i32* %temp1096, align 4, !tbaa !10
  store i32 %616, i32* %counter, align 4, !tbaa !10
  %617 = load i32, i32* %code_len1097, align 4, !tbaa !10
  %618 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom1230 = zext i32 %617 to i64
  %shr1231 = lshr i64 %618, %sh_prom1230
  store i64 %shr1231, i64* %bit_buf, align 8, !tbaa !76
  %619 = load i32, i32* %code_len1097, align 4, !tbaa !10
  %620 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1232 = sub i32 %620, %619
  store i32 %sub1232, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1233

do.cond1233:                                      ; preds = %if.end1229
  br label %do.end1234

do.end1234:                                       ; preds = %do.cond1233
  %621 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp1235 = icmp uge i32 %621, 256
  br i1 %cmp1235, label %if.then1237, label %if.end1238

if.then1237:                                      ; preds = %do.end1234
  br label %for.end1346

if.end1238:                                       ; preds = %do.end1234
  br label %while.cond1239

while.cond1239:                                   ; preds = %do.end1247, %if.end1238
  %622 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %623 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %cmp1240 = icmp uge i8* %622, %623
  br i1 %cmp1240, label %while.body1242, label %while.end1248

while.body1242:                                   ; preds = %while.cond1239
  br label %do.body1243

do.body1243:                                      ; preds = %while.body1242
  store i32 2, i32* %status, align 4, !tbaa !12
  %624 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1244 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %624, i32 0, i32 0
  store i32 24, i32* %m_state1244, align 8, !tbaa !81
  br label %common_exit

sw.bb1245:                                        ; preds = %if.end
  br label %do.cond1246

do.cond1246:                                      ; preds = %sw.bb1245
  br label %do.end1247

do.end1247:                                       ; preds = %do.cond1246
  br label %while.cond1239

while.end1248:                                    ; preds = %while.cond1239
  %625 = load i32, i32* %counter, align 4, !tbaa !10
  %conv1249 = trunc i32 %625 to i8
  %626 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %incdec.ptr1250 = getelementptr inbounds i8, i8* %626, i32 1
  store i8* %incdec.ptr1250, i8** %pOut_buf_cur, align 8, !tbaa !8
  store i8 %conv1249, i8* %626, align 1, !tbaa !12
  br label %if.end1345

if.else1251:                                      ; preds = %lor.lhs.false1088
  %627 = bitcast i32* %sym2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %627) #10
  %628 = bitcast i32* %code_len1252 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %628) #10
  %629 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1253 = icmp ult i32 %629, 30
  br i1 %cmp1253, label %if.then1255, label %if.end1262

if.then1255:                                      ; preds = %if.else1251
  %630 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %631 = bitcast i8* %630 to i32*
  %632 = load i32, i32* %631, align 4, !tbaa !10
  %conv1256 = zext i32 %632 to i64
  %633 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1257 = zext i32 %633 to i64
  %shl1258 = shl i64 %conv1256, %sh_prom1257
  %634 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1259 = or i64 %634, %shl1258
  store i64 %or1259, i64* %bit_buf, align 8, !tbaa !76
  %635 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %add.ptr1260 = getelementptr inbounds i8, i8* %635, i64 4
  store i8* %add.ptr1260, i8** %pIn_buf_cur, align 8, !tbaa !8
  %636 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1261 = add i32 %636, 32
  store i32 %add1261, i32* %num_bits, align 4, !tbaa !10
  br label %if.end1262

if.end1262:                                       ; preds = %if.then1255, %if.else1251
  %637 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1263 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %637, i32 0, i32 14
  %arrayidx1264 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1263, i64 0, i64 0
  %m_look_up1265 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1264, i32 0, i32 1
  %638 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and1266 = and i64 %638, 1023
  %arrayidx1267 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1265, i64 0, i64 %and1266
  %639 = load i16, i16* %arrayidx1267, align 2, !tbaa !88
  %conv1268 = sext i16 %639 to i32
  store i32 %conv1268, i32* %sym2, align 4, !tbaa !10
  %cmp1269 = icmp sge i32 %conv1268, 0
  br i1 %cmp1269, label %if.then1271, label %if.else1273

if.then1271:                                      ; preds = %if.end1262
  %640 = load i32, i32* %sym2, align 4, !tbaa !10
  %shr1272 = ashr i32 %640, 9
  store i32 %shr1272, i32* %code_len1252, align 4, !tbaa !10
  br label %if.end1291

if.else1273:                                      ; preds = %if.end1262
  store i32 10, i32* %code_len1252, align 4, !tbaa !10
  br label %do.body1274

do.body1274:                                      ; preds = %do.cond1287, %if.else1273
  %641 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1275 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %641, i32 0, i32 14
  %arrayidx1276 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1275, i64 0, i64 0
  %m_tree1277 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1276, i32 0, i32 2
  %642 = load i32, i32* %sym2, align 4, !tbaa !10
  %neg1278 = xor i32 %642, -1
  %conv1279 = sext i32 %neg1278 to i64
  %643 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %644 = load i32, i32* %code_len1252, align 4, !tbaa !10
  %inc1280 = add i32 %644, 1
  store i32 %inc1280, i32* %code_len1252, align 4, !tbaa !10
  %sh_prom1281 = zext i32 %644 to i64
  %shr1282 = lshr i64 %643, %sh_prom1281
  %and1283 = and i64 %shr1282, 1
  %add1284 = add i64 %conv1279, %and1283
  %arrayidx1285 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1277, i64 0, i64 %add1284
  %645 = load i16, i16* %arrayidx1285, align 2, !tbaa !88
  %conv1286 = sext i16 %645 to i32
  store i32 %conv1286, i32* %sym2, align 4, !tbaa !10
  br label %do.cond1287

do.cond1287:                                      ; preds = %do.body1274
  %646 = load i32, i32* %sym2, align 4, !tbaa !10
  %cmp1288 = icmp slt i32 %646, 0
  br i1 %cmp1288, label %do.body1274, label %do.end1290

do.end1290:                                       ; preds = %do.cond1287
  br label %if.end1291

if.end1291:                                       ; preds = %do.end1290, %if.then1271
  %647 = load i32, i32* %sym2, align 4, !tbaa !10
  store i32 %647, i32* %counter, align 4, !tbaa !10
  %648 = load i32, i32* %code_len1252, align 4, !tbaa !10
  %649 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom1292 = zext i32 %648 to i64
  %shr1293 = lshr i64 %649, %sh_prom1292
  store i64 %shr1293, i64* %bit_buf, align 8, !tbaa !76
  %650 = load i32, i32* %code_len1252, align 4, !tbaa !10
  %651 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1294 = sub i32 %651, %650
  store i32 %sub1294, i32* %num_bits, align 4, !tbaa !10
  %652 = load i32, i32* %counter, align 4, !tbaa !10
  %and1295 = and i32 %652, 256
  %tobool1296 = icmp ne i32 %and1295, 0
  br i1 %tobool1296, label %if.then1297, label %if.end1298

if.then1297:                                      ; preds = %if.end1291
  store i32 205, i32* %cleanup.dest.slot, align 4
  br label %cleanup1341

if.end1298:                                       ; preds = %if.end1291
  %653 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1299 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %653, i32 0, i32 14
  %arrayidx1300 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1299, i64 0, i64 0
  %m_look_up1301 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1300, i32 0, i32 1
  %654 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and1302 = and i64 %654, 1023
  %arrayidx1303 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1301, i64 0, i64 %and1302
  %655 = load i16, i16* %arrayidx1303, align 2, !tbaa !88
  %conv1304 = sext i16 %655 to i32
  store i32 %conv1304, i32* %sym2, align 4, !tbaa !10
  %cmp1305 = icmp sge i32 %conv1304, 0
  br i1 %cmp1305, label %if.then1307, label %if.else1309

if.then1307:                                      ; preds = %if.end1298
  %656 = load i32, i32* %sym2, align 4, !tbaa !10
  %shr1308 = ashr i32 %656, 9
  store i32 %shr1308, i32* %code_len1252, align 4, !tbaa !10
  br label %if.end1327

if.else1309:                                      ; preds = %if.end1298
  store i32 10, i32* %code_len1252, align 4, !tbaa !10
  br label %do.body1310

do.body1310:                                      ; preds = %do.cond1323, %if.else1309
  %657 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1311 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %657, i32 0, i32 14
  %arrayidx1312 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1311, i64 0, i64 0
  %m_tree1313 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1312, i32 0, i32 2
  %658 = load i32, i32* %sym2, align 4, !tbaa !10
  %neg1314 = xor i32 %658, -1
  %conv1315 = sext i32 %neg1314 to i64
  %659 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %660 = load i32, i32* %code_len1252, align 4, !tbaa !10
  %inc1316 = add i32 %660, 1
  store i32 %inc1316, i32* %code_len1252, align 4, !tbaa !10
  %sh_prom1317 = zext i32 %660 to i64
  %shr1318 = lshr i64 %659, %sh_prom1317
  %and1319 = and i64 %shr1318, 1
  %add1320 = add i64 %conv1315, %and1319
  %arrayidx1321 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1313, i64 0, i64 %add1320
  %661 = load i16, i16* %arrayidx1321, align 2, !tbaa !88
  %conv1322 = sext i16 %661 to i32
  store i32 %conv1322, i32* %sym2, align 4, !tbaa !10
  br label %do.cond1323

do.cond1323:                                      ; preds = %do.body1310
  %662 = load i32, i32* %sym2, align 4, !tbaa !10
  %cmp1324 = icmp slt i32 %662, 0
  br i1 %cmp1324, label %do.body1310, label %do.end1326

do.end1326:                                       ; preds = %do.cond1323
  br label %if.end1327

if.end1327:                                       ; preds = %do.end1326, %if.then1307
  %663 = load i32, i32* %code_len1252, align 4, !tbaa !10
  %664 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom1328 = zext i32 %663 to i64
  %shr1329 = lshr i64 %664, %sh_prom1328
  store i64 %shr1329, i64* %bit_buf, align 8, !tbaa !76
  %665 = load i32, i32* %code_len1252, align 4, !tbaa !10
  %666 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1330 = sub i32 %666, %665
  store i32 %sub1330, i32* %num_bits, align 4, !tbaa !10
  %667 = load i32, i32* %counter, align 4, !tbaa !10
  %conv1331 = trunc i32 %667 to i8
  %668 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1332 = getelementptr inbounds i8, i8* %668, i64 0
  store i8 %conv1331, i8* %arrayidx1332, align 1, !tbaa !12
  %669 = load i32, i32* %sym2, align 4, !tbaa !10
  %and1333 = and i32 %669, 256
  %tobool1334 = icmp ne i32 %and1333, 0
  br i1 %tobool1334, label %if.then1335, label %if.end1337

if.then1335:                                      ; preds = %if.end1327
  %670 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %incdec.ptr1336 = getelementptr inbounds i8, i8* %670, i32 1
  store i8* %incdec.ptr1336, i8** %pOut_buf_cur, align 8, !tbaa !8
  %671 = load i32, i32* %sym2, align 4, !tbaa !10
  store i32 %671, i32* %counter, align 4, !tbaa !10
  store i32 205, i32* %cleanup.dest.slot, align 4
  br label %cleanup1341

if.end1337:                                       ; preds = %if.end1327
  %672 = load i32, i32* %sym2, align 4, !tbaa !10
  %conv1338 = trunc i32 %672 to i8
  %673 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1339 = getelementptr inbounds i8, i8* %673, i64 1
  store i8 %conv1338, i8* %arrayidx1339, align 1, !tbaa !12
  %674 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %add.ptr1340 = getelementptr inbounds i8, i8* %674, i64 2
  store i8* %add.ptr1340, i8** %pOut_buf_cur, align 8, !tbaa !8
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup1341

cleanup1341:                                      ; preds = %if.end1337, %if.then1335, %if.then1297
  %675 = bitcast i32* %code_len1252 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %675) #10
  %676 = bitcast i32* %sym2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %676) #10
  %cleanup.dest1343 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest1343, label %unreachable [
    i32 0, label %cleanup.cont1344
    i32 205, label %for.end1346
  ]

cleanup.cont1344:                                 ; preds = %cleanup1341
  br label %if.end1345

if.end1345:                                       ; preds = %cleanup.cont1344, %while.end1248
  br label %for.cond1082

for.end1346:                                      ; preds = %cleanup1341, %if.then1237
  %677 = load i32, i32* %counter, align 4, !tbaa !10
  %and1347 = and i32 %677, 511
  store i32 %and1347, i32* %counter, align 4, !tbaa !10
  %cmp1348 = icmp eq i32 %and1347, 256
  br i1 %cmp1348, label %if.then1350, label %if.end1351

if.then1350:                                      ; preds = %for.end1346
  br label %for.end1724

if.end1351:                                       ; preds = %for.end1346
  %678 = load i32, i32* %counter, align 4, !tbaa !10
  %sub1352 = sub i32 %678, 257
  %idxprom1353 = zext i32 %sub1352 to i64
  %arrayidx1354 = getelementptr inbounds [31 x i32], [31 x i32]* @tinfl_decompress.s_length_extra, i64 0, i64 %idxprom1353
  %679 = load i32, i32* %arrayidx1354, align 4, !tbaa !10
  store i32 %679, i32* %num_extra, align 4, !tbaa !10
  %680 = load i32, i32* %counter, align 4, !tbaa !10
  %sub1355 = sub i32 %680, 257
  %idxprom1356 = zext i32 %sub1355 to i64
  %arrayidx1357 = getelementptr inbounds [31 x i32], [31 x i32]* @tinfl_decompress.s_length_base, i64 0, i64 %idxprom1356
  %681 = load i32, i32* %arrayidx1357, align 4, !tbaa !10
  store i32 %681, i32* %counter, align 4, !tbaa !10
  %682 = load i32, i32* %num_extra, align 4, !tbaa !10
  %tobool1358 = icmp ne i32 %682, 0
  br i1 %tobool1358, label %if.then1359, label %if.end1405

if.then1359:                                      ; preds = %if.end1351
  br label %do.body1360

do.body1360:                                      ; preds = %if.then1359
  %683 = load i32, i32* %num_bits, align 4, !tbaa !10
  %684 = load i32, i32* %num_extra, align 4, !tbaa !10
  %cmp1361 = icmp ult i32 %683, %684
  br i1 %cmp1361, label %if.then1363, label %if.end1393

if.then1363:                                      ; preds = %do.body1360
  br label %do.body1364

do.body1364:                                      ; preds = %do.cond1389, %if.then1363
  br label %do.body1366

do.body1366:                                      ; preds = %do.body1364
  br label %while.cond1367

while.cond1367:                                   ; preds = %do.end1378, %do.body1366
  %685 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %686 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp1368 = icmp uge i8* %685, %686
  br i1 %cmp1368, label %while.body1370, label %while.end1379

while.body1370:                                   ; preds = %while.cond1367
  br label %do.body1371

do.body1371:                                      ; preds = %while.body1370
  %687 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1372 = and i32 %687, 2
  %tobool1373 = icmp ne i32 %and1372, 0
  %688 = zext i1 %tobool1373 to i64
  %cond1374 = select i1 %tobool1373, i32 1, i32 -4
  store i32 %cond1374, i32* %status, align 4, !tbaa !12
  %689 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1375 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %689, i32 0, i32 0
  store i32 25, i32* %m_state1375, align 8, !tbaa !81
  br label %common_exit

sw.bb1376:                                        ; preds = %if.end
  br label %do.cond1377

do.cond1377:                                      ; preds = %sw.bb1376
  br label %do.end1378

do.end1378:                                       ; preds = %do.cond1377
  br label %while.cond1367

while.end1379:                                    ; preds = %while.cond1367
  %690 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1380 = getelementptr inbounds i8, i8* %690, i32 1
  store i8* %incdec.ptr1380, i8** %pIn_buf_cur, align 8, !tbaa !8
  %691 = load i8, i8* %690, align 1, !tbaa !12
  %conv1381 = zext i8 %691 to i32
  store i32 %conv1381, i32* %c1365, align 4, !tbaa !10
  br label %do.cond1382

do.cond1382:                                      ; preds = %while.end1379
  br label %do.end1383

do.end1383:                                       ; preds = %do.cond1382
  %692 = load i32, i32* %c1365, align 4, !tbaa !10
  %conv1384 = zext i32 %692 to i64
  %693 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1385 = zext i32 %693 to i64
  %shl1386 = shl i64 %conv1384, %sh_prom1385
  %694 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1387 = or i64 %694, %shl1386
  store i64 %or1387, i64* %bit_buf, align 8, !tbaa !76
  %695 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1388 = add i32 %695, 8
  store i32 %add1388, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1389

do.cond1389:                                      ; preds = %do.end1383
  %696 = load i32, i32* %num_bits, align 4, !tbaa !10
  %697 = load i32, i32* %num_extra, align 4, !tbaa !10
  %cmp1390 = icmp ult i32 %696, %697
  br i1 %cmp1390, label %do.body1364, label %do.end1392

do.end1392:                                       ; preds = %do.cond1389
  br label %if.end1393

if.end1393:                                       ; preds = %do.end1392, %do.body1360
  %698 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %699 = load i32, i32* %num_extra, align 4, !tbaa !10
  %shl1394 = shl i32 1, %699
  %sub1395 = sub nsw i32 %shl1394, 1
  %conv1396 = sext i32 %sub1395 to i64
  %and1397 = and i64 %698, %conv1396
  %conv1398 = trunc i64 %and1397 to i32
  store i32 %conv1398, i32* %extra_bits, align 4, !tbaa !10
  %700 = load i32, i32* %num_extra, align 4, !tbaa !10
  %701 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom1399 = zext i32 %700 to i64
  %shr1400 = lshr i64 %701, %sh_prom1399
  store i64 %shr1400, i64* %bit_buf, align 8, !tbaa !76
  %702 = load i32, i32* %num_extra, align 4, !tbaa !10
  %703 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1401 = sub i32 %703, %702
  store i32 %sub1401, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1402

do.cond1402:                                      ; preds = %if.end1393
  br label %do.end1403

do.end1403:                                       ; preds = %do.cond1402
  %704 = load i32, i32* %extra_bits, align 4, !tbaa !10
  %705 = load i32, i32* %counter, align 4, !tbaa !10
  %add1404 = add i32 %705, %704
  store i32 %add1404, i32* %counter, align 4, !tbaa !10
  br label %if.end1405

if.end1405:                                       ; preds = %do.end1403, %if.end1351
  br label %do.body1406

do.body1406:                                      ; preds = %if.end1405
  %706 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1410 = icmp ult i32 %706, 15
  br i1 %cmp1410, label %if.then1412, label %if.end1510

if.then1412:                                      ; preds = %do.body1406
  %707 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %708 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %sub.ptr.lhs.cast1413 = ptrtoint i8* %707 to i64
  %sub.ptr.rhs.cast1414 = ptrtoint i8* %708 to i64
  %sub.ptr.sub1415 = sub i64 %sub.ptr.lhs.cast1413, %sub.ptr.rhs.cast1414
  %cmp1416 = icmp slt i64 %sub.ptr.sub1415, 2
  br i1 %cmp1416, label %if.then1418, label %if.else1495

if.then1418:                                      ; preds = %if.then1412
  br label %do.body1419

do.body1419:                                      ; preds = %do.cond1491, %if.then1418
  %709 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1420 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %709, i32 0, i32 14
  %arrayidx1421 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1420, i64 0, i64 1
  %m_look_up1422 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1421, i32 0, i32 1
  %710 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and1423 = and i64 %710, 1023
  %arrayidx1424 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1422, i64 0, i64 %and1423
  %711 = load i16, i16* %arrayidx1424, align 2, !tbaa !88
  %conv1425 = sext i16 %711 to i32
  store i32 %conv1425, i32* %temp1407, align 4, !tbaa !10
  %712 = load i32, i32* %temp1407, align 4, !tbaa !10
  %cmp1426 = icmp sge i32 %712, 0
  br i1 %cmp1426, label %if.then1428, label %if.else1436

if.then1428:                                      ; preds = %do.body1419
  %713 = load i32, i32* %temp1407, align 4, !tbaa !10
  %shr1429 = ashr i32 %713, 9
  store i32 %shr1429, i32* %code_len1408, align 4, !tbaa !10
  %714 = load i32, i32* %code_len1408, align 4, !tbaa !10
  %tobool1430 = icmp ne i32 %714, 0
  br i1 %tobool1430, label %land.lhs.true1431, label %if.end1435

land.lhs.true1431:                                ; preds = %if.then1428
  %715 = load i32, i32* %num_bits, align 4, !tbaa !10
  %716 = load i32, i32* %code_len1408, align 4, !tbaa !10
  %cmp1432 = icmp uge i32 %715, %716
  br i1 %cmp1432, label %if.then1434, label %if.end1435

if.then1434:                                      ; preds = %land.lhs.true1431
  br label %do.end1494

if.end1435:                                       ; preds = %land.lhs.true1431, %if.then1428
  br label %if.end1467

if.else1436:                                      ; preds = %do.body1419
  %717 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1437 = icmp ugt i32 %717, 10
  br i1 %cmp1437, label %if.then1439, label %if.end1466

if.then1439:                                      ; preds = %if.else1436
  store i32 10, i32* %code_len1408, align 4, !tbaa !10
  br label %do.body1440

do.body1440:                                      ; preds = %land.end1460, %if.then1439
  %718 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1441 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %718, i32 0, i32 14
  %arrayidx1442 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1441, i64 0, i64 1
  %m_tree1443 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1442, i32 0, i32 2
  %719 = load i32, i32* %temp1407, align 4, !tbaa !10
  %neg1444 = xor i32 %719, -1
  %conv1445 = sext i32 %neg1444 to i64
  %720 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %721 = load i32, i32* %code_len1408, align 4, !tbaa !10
  %inc1446 = add i32 %721, 1
  store i32 %inc1446, i32* %code_len1408, align 4, !tbaa !10
  %sh_prom1447 = zext i32 %721 to i64
  %shr1448 = lshr i64 %720, %sh_prom1447
  %and1449 = and i64 %shr1448, 1
  %add1450 = add i64 %conv1445, %and1449
  %arrayidx1451 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1443, i64 0, i64 %add1450
  %722 = load i16, i16* %arrayidx1451, align 2, !tbaa !88
  %conv1452 = sext i16 %722 to i32
  store i32 %conv1452, i32* %temp1407, align 4, !tbaa !10
  br label %do.cond1453

do.cond1453:                                      ; preds = %do.body1440
  %723 = load i32, i32* %temp1407, align 4, !tbaa !10
  %cmp1454 = icmp slt i32 %723, 0
  br i1 %cmp1454, label %land.rhs1456, label %land.end1460

land.rhs1456:                                     ; preds = %do.cond1453
  %724 = load i32, i32* %num_bits, align 4, !tbaa !10
  %725 = load i32, i32* %code_len1408, align 4, !tbaa !10
  %add1457 = add i32 %725, 1
  %cmp1458 = icmp uge i32 %724, %add1457
  br label %land.end1460

land.end1460:                                     ; preds = %land.rhs1456, %do.cond1453
  %726 = phi i1 [ false, %do.cond1453 ], [ %cmp1458, %land.rhs1456 ]
  br i1 %726, label %do.body1440, label %do.end1461

do.end1461:                                       ; preds = %land.end1460
  %727 = load i32, i32* %temp1407, align 4, !tbaa !10
  %cmp1462 = icmp sge i32 %727, 0
  br i1 %cmp1462, label %if.then1464, label %if.end1465

if.then1464:                                      ; preds = %do.end1461
  br label %do.end1494

if.end1465:                                       ; preds = %do.end1461
  br label %if.end1466

if.end1466:                                       ; preds = %if.end1465, %if.else1436
  br label %if.end1467

if.end1467:                                       ; preds = %if.end1466, %if.end1435
  br label %do.body1468

do.body1468:                                      ; preds = %if.end1467
  br label %while.cond1469

while.cond1469:                                   ; preds = %do.end1480, %do.body1468
  %728 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %729 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp1470 = icmp uge i8* %728, %729
  br i1 %cmp1470, label %while.body1472, label %while.end1481

while.body1472:                                   ; preds = %while.cond1469
  br label %do.body1473

do.body1473:                                      ; preds = %while.body1472
  %730 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1474 = and i32 %730, 2
  %tobool1475 = icmp ne i32 %and1474, 0
  %731 = zext i1 %tobool1475 to i64
  %cond1476 = select i1 %tobool1475, i32 1, i32 -4
  store i32 %cond1476, i32* %status, align 4, !tbaa !12
  %732 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1477 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %732, i32 0, i32 0
  store i32 26, i32* %m_state1477, align 8, !tbaa !81
  br label %common_exit

sw.bb1478:                                        ; preds = %if.end
  br label %do.cond1479

do.cond1479:                                      ; preds = %sw.bb1478
  br label %do.end1480

do.end1480:                                       ; preds = %do.cond1479
  br label %while.cond1469

while.end1481:                                    ; preds = %while.cond1469
  %733 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1482 = getelementptr inbounds i8, i8* %733, i32 1
  store i8* %incdec.ptr1482, i8** %pIn_buf_cur, align 8, !tbaa !8
  %734 = load i8, i8* %733, align 1, !tbaa !12
  %conv1483 = zext i8 %734 to i32
  store i32 %conv1483, i32* %c1409, align 4, !tbaa !10
  br label %do.cond1484

do.cond1484:                                      ; preds = %while.end1481
  br label %do.end1485

do.end1485:                                       ; preds = %do.cond1484
  %735 = load i32, i32* %c1409, align 4, !tbaa !10
  %conv1486 = zext i32 %735 to i64
  %736 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1487 = zext i32 %736 to i64
  %shl1488 = shl i64 %conv1486, %sh_prom1487
  %737 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1489 = or i64 %737, %shl1488
  store i64 %or1489, i64* %bit_buf, align 8, !tbaa !76
  %738 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1490 = add i32 %738, 8
  store i32 %add1490, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1491

do.cond1491:                                      ; preds = %do.end1485
  %739 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1492 = icmp ult i32 %739, 15
  br i1 %cmp1492, label %do.body1419, label %do.end1494

do.end1494:                                       ; preds = %do.cond1491, %if.then1464, %if.then1434
  br label %if.end1509

if.else1495:                                      ; preds = %if.then1412
  %740 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %arrayidx1496 = getelementptr inbounds i8, i8* %740, i64 0
  %741 = load i8, i8* %arrayidx1496, align 1, !tbaa !12
  %conv1497 = zext i8 %741 to i64
  %742 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1498 = zext i32 %742 to i64
  %shl1499 = shl i64 %conv1497, %sh_prom1498
  %743 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %arrayidx1500 = getelementptr inbounds i8, i8* %743, i64 1
  %744 = load i8, i8* %arrayidx1500, align 1, !tbaa !12
  %conv1501 = zext i8 %744 to i64
  %745 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1502 = add i32 %745, 8
  %sh_prom1503 = zext i32 %add1502 to i64
  %shl1504 = shl i64 %conv1501, %sh_prom1503
  %or1505 = or i64 %shl1499, %shl1504
  %746 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1506 = or i64 %746, %or1505
  store i64 %or1506, i64* %bit_buf, align 8, !tbaa !76
  %747 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %add.ptr1507 = getelementptr inbounds i8, i8* %747, i64 2
  store i8* %add.ptr1507, i8** %pIn_buf_cur, align 8, !tbaa !8
  %748 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1508 = add i32 %748, 16
  store i32 %add1508, i32* %num_bits, align 4, !tbaa !10
  br label %if.end1509

if.end1509:                                       ; preds = %if.else1495, %do.end1494
  br label %if.end1510

if.end1510:                                       ; preds = %if.end1509, %do.body1406
  %749 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1511 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %749, i32 0, i32 14
  %arrayidx1512 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1511, i64 0, i64 1
  %m_look_up1513 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1512, i32 0, i32 1
  %750 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and1514 = and i64 %750, 1023
  %arrayidx1515 = getelementptr inbounds [1024 x i16], [1024 x i16]* %m_look_up1513, i64 0, i64 %and1514
  %751 = load i16, i16* %arrayidx1515, align 2, !tbaa !88
  %conv1516 = sext i16 %751 to i32
  store i32 %conv1516, i32* %temp1407, align 4, !tbaa !10
  %cmp1517 = icmp sge i32 %conv1516, 0
  br i1 %cmp1517, label %if.then1519, label %if.else1522

if.then1519:                                      ; preds = %if.end1510
  %752 = load i32, i32* %temp1407, align 4, !tbaa !10
  %shr1520 = ashr i32 %752, 9
  store i32 %shr1520, i32* %code_len1408, align 4, !tbaa !10
  %753 = load i32, i32* %temp1407, align 4, !tbaa !10
  %and1521 = and i32 %753, 511
  store i32 %and1521, i32* %temp1407, align 4, !tbaa !10
  br label %if.end1540

if.else1522:                                      ; preds = %if.end1510
  store i32 10, i32* %code_len1408, align 4, !tbaa !10
  br label %do.body1523

do.body1523:                                      ; preds = %do.cond1536, %if.else1522
  %754 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_tables1524 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %754, i32 0, i32 14
  %arrayidx1525 = getelementptr inbounds [3 x %struct.tinfl_huff_table], [3 x %struct.tinfl_huff_table]* %m_tables1524, i64 0, i64 1
  %m_tree1526 = getelementptr inbounds %struct.tinfl_huff_table, %struct.tinfl_huff_table* %arrayidx1525, i32 0, i32 2
  %755 = load i32, i32* %temp1407, align 4, !tbaa !10
  %neg1527 = xor i32 %755, -1
  %conv1528 = sext i32 %neg1527 to i64
  %756 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %757 = load i32, i32* %code_len1408, align 4, !tbaa !10
  %inc1529 = add i32 %757, 1
  store i32 %inc1529, i32* %code_len1408, align 4, !tbaa !10
  %sh_prom1530 = zext i32 %757 to i64
  %shr1531 = lshr i64 %756, %sh_prom1530
  %and1532 = and i64 %shr1531, 1
  %add1533 = add i64 %conv1528, %and1532
  %arrayidx1534 = getelementptr inbounds [576 x i16], [576 x i16]* %m_tree1526, i64 0, i64 %add1533
  %758 = load i16, i16* %arrayidx1534, align 2, !tbaa !88
  %conv1535 = sext i16 %758 to i32
  store i32 %conv1535, i32* %temp1407, align 4, !tbaa !10
  br label %do.cond1536

do.cond1536:                                      ; preds = %do.body1523
  %759 = load i32, i32* %temp1407, align 4, !tbaa !10
  %cmp1537 = icmp slt i32 %759, 0
  br i1 %cmp1537, label %do.body1523, label %do.end1539

do.end1539:                                       ; preds = %do.cond1536
  br label %if.end1540

if.end1540:                                       ; preds = %do.end1539, %if.then1519
  %760 = load i32, i32* %temp1407, align 4, !tbaa !10
  store i32 %760, i32* %dist, align 4, !tbaa !10
  %761 = load i32, i32* %code_len1408, align 4, !tbaa !10
  %762 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom1541 = zext i32 %761 to i64
  %shr1542 = lshr i64 %762, %sh_prom1541
  store i64 %shr1542, i64* %bit_buf, align 8, !tbaa !76
  %763 = load i32, i32* %code_len1408, align 4, !tbaa !10
  %764 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1543 = sub i32 %764, %763
  store i32 %sub1543, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1544

do.cond1544:                                      ; preds = %if.end1540
  br label %do.end1545

do.end1545:                                       ; preds = %do.cond1544
  %765 = load i32, i32* %dist, align 4, !tbaa !10
  %idxprom1546 = zext i32 %765 to i64
  %arrayidx1547 = getelementptr inbounds [32 x i32], [32 x i32]* @tinfl_decompress.s_dist_extra, i64 0, i64 %idxprom1546
  %766 = load i32, i32* %arrayidx1547, align 4, !tbaa !10
  store i32 %766, i32* %num_extra, align 4, !tbaa !10
  %767 = load i32, i32* %dist, align 4, !tbaa !10
  %idxprom1548 = zext i32 %767 to i64
  %arrayidx1549 = getelementptr inbounds [32 x i32], [32 x i32]* @tinfl_decompress.s_dist_base, i64 0, i64 %idxprom1548
  %768 = load i32, i32* %arrayidx1549, align 4, !tbaa !10
  store i32 %768, i32* %dist, align 4, !tbaa !10
  %769 = load i32, i32* %num_extra, align 4, !tbaa !10
  %tobool1550 = icmp ne i32 %769, 0
  br i1 %tobool1550, label %if.then1551, label %if.end1598

if.then1551:                                      ; preds = %do.end1545
  br label %do.body1553

do.body1553:                                      ; preds = %if.then1551
  %770 = load i32, i32* %num_bits, align 4, !tbaa !10
  %771 = load i32, i32* %num_extra, align 4, !tbaa !10
  %cmp1554 = icmp ult i32 %770, %771
  br i1 %cmp1554, label %if.then1556, label %if.end1586

if.then1556:                                      ; preds = %do.body1553
  br label %do.body1557

do.body1557:                                      ; preds = %do.cond1582, %if.then1556
  br label %do.body1559

do.body1559:                                      ; preds = %do.body1557
  br label %while.cond1560

while.cond1560:                                   ; preds = %do.end1571, %do.body1559
  %772 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %773 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp1561 = icmp uge i8* %772, %773
  br i1 %cmp1561, label %while.body1563, label %while.end1572

while.body1563:                                   ; preds = %while.cond1560
  br label %do.body1564

do.body1564:                                      ; preds = %while.body1563
  %774 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1565 = and i32 %774, 2
  %tobool1566 = icmp ne i32 %and1565, 0
  %775 = zext i1 %tobool1566 to i64
  %cond1567 = select i1 %tobool1566, i32 1, i32 -4
  store i32 %cond1567, i32* %status, align 4, !tbaa !12
  %776 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1568 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %776, i32 0, i32 0
  store i32 27, i32* %m_state1568, align 8, !tbaa !81
  br label %common_exit

sw.bb1569:                                        ; preds = %if.end
  br label %do.cond1570

do.cond1570:                                      ; preds = %sw.bb1569
  br label %do.end1571

do.end1571:                                       ; preds = %do.cond1570
  br label %while.cond1560

while.end1572:                                    ; preds = %while.cond1560
  %777 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1573 = getelementptr inbounds i8, i8* %777, i32 1
  store i8* %incdec.ptr1573, i8** %pIn_buf_cur, align 8, !tbaa !8
  %778 = load i8, i8* %777, align 1, !tbaa !12
  %conv1574 = zext i8 %778 to i32
  store i32 %conv1574, i32* %c1558, align 4, !tbaa !10
  br label %do.cond1575

do.cond1575:                                      ; preds = %while.end1572
  br label %do.end1576

do.end1576:                                       ; preds = %do.cond1575
  %779 = load i32, i32* %c1558, align 4, !tbaa !10
  %conv1577 = zext i32 %779 to i64
  %780 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1578 = zext i32 %780 to i64
  %shl1579 = shl i64 %conv1577, %sh_prom1578
  %781 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1580 = or i64 %781, %shl1579
  store i64 %or1580, i64* %bit_buf, align 8, !tbaa !76
  %782 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1581 = add i32 %782, 8
  store i32 %add1581, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1582

do.cond1582:                                      ; preds = %do.end1576
  %783 = load i32, i32* %num_bits, align 4, !tbaa !10
  %784 = load i32, i32* %num_extra, align 4, !tbaa !10
  %cmp1583 = icmp ult i32 %783, %784
  br i1 %cmp1583, label %do.body1557, label %do.end1585

do.end1585:                                       ; preds = %do.cond1582
  br label %if.end1586

if.end1586:                                       ; preds = %do.end1585, %do.body1553
  %785 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %786 = load i32, i32* %num_extra, align 4, !tbaa !10
  %shl1587 = shl i32 1, %786
  %sub1588 = sub nsw i32 %shl1587, 1
  %conv1589 = sext i32 %sub1588 to i64
  %and1590 = and i64 %785, %conv1589
  %conv1591 = trunc i64 %and1590 to i32
  store i32 %conv1591, i32* %extra_bits1552, align 4, !tbaa !10
  %787 = load i32, i32* %num_extra, align 4, !tbaa !10
  %788 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom1592 = zext i32 %787 to i64
  %shr1593 = lshr i64 %788, %sh_prom1592
  store i64 %shr1593, i64* %bit_buf, align 8, !tbaa !76
  %789 = load i32, i32* %num_extra, align 4, !tbaa !10
  %790 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1594 = sub i32 %790, %789
  store i32 %sub1594, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1595

do.cond1595:                                      ; preds = %if.end1586
  br label %do.end1596

do.end1596:                                       ; preds = %do.cond1595
  %791 = load i32, i32* %extra_bits1552, align 4, !tbaa !10
  %792 = load i32, i32* %dist, align 4, !tbaa !10
  %add1597 = add i32 %792, %791
  store i32 %add1597, i32* %dist, align 4, !tbaa !10
  br label %if.end1598

if.end1598:                                       ; preds = %do.end1596, %do.end1545
  %793 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %794 = load i8*, i8** %pOut_buf_start.addr, align 8, !tbaa !8
  %sub.ptr.lhs.cast1599 = ptrtoint i8* %793 to i64
  %sub.ptr.rhs.cast1600 = ptrtoint i8* %794 to i64
  %sub.ptr.sub1601 = sub i64 %sub.ptr.lhs.cast1599, %sub.ptr.rhs.cast1600
  store i64 %sub.ptr.sub1601, i64* %dist_from_out_buf_start, align 8, !tbaa !4
  %795 = load i32, i32* %dist, align 4, !tbaa !10
  %conv1602 = zext i32 %795 to i64
  %796 = load i64, i64* %dist_from_out_buf_start, align 8, !tbaa !4
  %cmp1603 = icmp ugt i64 %conv1602, %796
  br i1 %cmp1603, label %land.lhs.true1605, label %if.end1618

land.lhs.true1605:                                ; preds = %if.end1598
  %797 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1606 = and i32 %797, 4
  %tobool1607 = icmp ne i32 %and1606, 0
  br i1 %tobool1607, label %if.then1608, label %if.end1618

if.then1608:                                      ; preds = %land.lhs.true1605
  br label %do.body1609

do.body1609:                                      ; preds = %if.then1608
  br label %for.cond1610

for.cond1610:                                     ; preds = %do.end1615, %do.body1609
  br label %do.body1611

do.body1611:                                      ; preds = %for.cond1610
  store i32 -1, i32* %status, align 4, !tbaa !12
  %798 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1612 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %798, i32 0, i32 0
  store i32 37, i32* %m_state1612, align 8, !tbaa !81
  br label %common_exit

sw.bb1613:                                        ; preds = %if.end
  br label %do.cond1614

do.cond1614:                                      ; preds = %sw.bb1613
  br label %do.end1615

do.end1615:                                       ; preds = %do.cond1614
  br label %for.cond1610

do.cond1616:                                      ; No predecessors!
  br label %do.end1617

do.end1617:                                       ; preds = %do.cond1616
  br label %if.end1618

if.end1618:                                       ; preds = %do.end1617, %land.lhs.true1605, %if.end1598
  %799 = load i8*, i8** %pOut_buf_start.addr, align 8, !tbaa !8
  %800 = load i64, i64* %dist_from_out_buf_start, align 8, !tbaa !4
  %801 = load i32, i32* %dist, align 4, !tbaa !10
  %conv1619 = zext i32 %801 to i64
  %sub1620 = sub i64 %800, %conv1619
  %802 = load i64, i64* %out_buf_size_mask, align 8, !tbaa !4
  %and1621 = and i64 %sub1620, %802
  %add.ptr1622 = getelementptr inbounds i8, i8* %799, i64 %and1621
  store i8* %add.ptr1622, i8** %pSrc, align 8, !tbaa !8
  %803 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %804 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %cmp1623 = icmp ugt i8* %803, %804
  br i1 %cmp1623, label %cond.true1625, label %cond.false1626

cond.true1625:                                    ; preds = %if.end1618
  %805 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  br label %cond.end1627

cond.false1626:                                   ; preds = %if.end1618
  %806 = load i8*, i8** %pSrc, align 8, !tbaa !8
  br label %cond.end1627

cond.end1627:                                     ; preds = %cond.false1626, %cond.true1625
  %cond1628 = phi i8* [ %805, %cond.true1625 ], [ %806, %cond.false1626 ]
  %807 = load i32, i32* %counter, align 4, !tbaa !10
  %idx.ext1629 = zext i32 %807 to i64
  %add.ptr1630 = getelementptr inbounds i8, i8* %cond1628, i64 %idx.ext1629
  %808 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %cmp1631 = icmp ugt i8* %add.ptr1630, %808
  br i1 %cmp1631, label %if.then1633, label %if.else1655

if.then1633:                                      ; preds = %cond.end1627
  br label %while.cond1634

while.cond1634:                                   ; preds = %while.end1647, %if.then1633
  %809 = load i32, i32* %counter, align 4, !tbaa !10
  %dec1635 = add i32 %809, -1
  store i32 %dec1635, i32* %counter, align 4, !tbaa !10
  %tobool1636 = icmp ne i32 %809, 0
  br i1 %tobool1636, label %while.body1637, label %while.end1654

while.body1637:                                   ; preds = %while.cond1634
  br label %while.cond1638

while.cond1638:                                   ; preds = %do.end1646, %while.body1637
  %810 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %811 = load i8*, i8** %pOut_buf_end, align 8, !tbaa !8
  %cmp1639 = icmp uge i8* %810, %811
  br i1 %cmp1639, label %while.body1641, label %while.end1647

while.body1641:                                   ; preds = %while.cond1638
  br label %do.body1642

do.body1642:                                      ; preds = %while.body1641
  store i32 2, i32* %status, align 4, !tbaa !12
  %812 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1643 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %812, i32 0, i32 0
  store i32 53, i32* %m_state1643, align 8, !tbaa !81
  br label %common_exit

sw.bb1644:                                        ; preds = %if.end
  br label %do.cond1645

do.cond1645:                                      ; preds = %sw.bb1644
  br label %do.end1646

do.end1646:                                       ; preds = %do.cond1645
  br label %while.cond1638

while.end1647:                                    ; preds = %while.cond1638
  %813 = load i8*, i8** %pOut_buf_start.addr, align 8, !tbaa !8
  %814 = load i64, i64* %dist_from_out_buf_start, align 8, !tbaa !4
  %inc1648 = add i64 %814, 1
  store i64 %inc1648, i64* %dist_from_out_buf_start, align 8, !tbaa !4
  %815 = load i32, i32* %dist, align 4, !tbaa !10
  %conv1649 = zext i32 %815 to i64
  %sub1650 = sub i64 %814, %conv1649
  %816 = load i64, i64* %out_buf_size_mask, align 8, !tbaa !4
  %and1651 = and i64 %sub1650, %816
  %arrayidx1652 = getelementptr inbounds i8, i8* %813, i64 %and1651
  %817 = load i8, i8* %arrayidx1652, align 1, !tbaa !12
  %818 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %incdec.ptr1653 = getelementptr inbounds i8, i8* %818, i32 1
  store i8* %incdec.ptr1653, i8** %pOut_buf_cur, align 8, !tbaa !8
  store i8 %817, i8* %818, align 1, !tbaa !12
  br label %while.cond1634

while.end1654:                                    ; preds = %while.cond1634
  br label %for.cond1081

if.else1655:                                      ; preds = %cond.end1627
  %819 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp1656 = icmp uge i32 %819, 9
  br i1 %cmp1656, label %land.lhs.true1658, label %if.end1694

land.lhs.true1658:                                ; preds = %if.else1655
  %820 = load i32, i32* %counter, align 4, !tbaa !10
  %821 = load i32, i32* %dist, align 4, !tbaa !10
  %cmp1659 = icmp ule i32 %820, %821
  br i1 %cmp1659, label %if.then1661, label %if.end1694

if.then1661:                                      ; preds = %land.lhs.true1658
  %822 = bitcast i8** %pSrc_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %822) #10
  %823 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %824 = load i32, i32* %counter, align 4, !tbaa !10
  %and1662 = and i32 %824, -8
  %idx.ext1663 = zext i32 %and1662 to i64
  %add.ptr1664 = getelementptr inbounds i8, i8* %823, i64 %idx.ext1663
  store i8* %add.ptr1664, i8** %pSrc_end, align 8, !tbaa !8
  br label %do.body1665

do.body1665:                                      ; preds = %do.cond1668, %if.then1661
  %825 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %826 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %827 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %828 = call i64 @llvm.objectsize.i64.p0i8(i8* %827, i1 false, i1 true, i1 false)
  %call1666 = call i8* @__memcpy_chk(i8* %825, i8* %826, i64 8, i64 %828) #10
  %829 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %add.ptr1667 = getelementptr inbounds i8, i8* %829, i64 8
  store i8* %add.ptr1667, i8** %pOut_buf_cur, align 8, !tbaa !8
  br label %do.cond1668

do.cond1668:                                      ; preds = %do.body1665
  %830 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %add.ptr1669 = getelementptr inbounds i8, i8* %830, i64 8
  store i8* %add.ptr1669, i8** %pSrc, align 8, !tbaa !8
  %831 = load i8*, i8** %pSrc_end, align 8, !tbaa !8
  %cmp1670 = icmp ult i8* %add.ptr1669, %831
  br i1 %cmp1670, label %do.body1665, label %do.end1672

do.end1672:                                       ; preds = %do.cond1668
  %832 = load i32, i32* %counter, align 4, !tbaa !10
  %and1673 = and i32 %832, 7
  store i32 %and1673, i32* %counter, align 4, !tbaa !10
  %cmp1674 = icmp ult i32 %and1673, 3
  br i1 %cmp1674, label %if.then1676, label %if.end1690

if.then1676:                                      ; preds = %do.end1672
  %833 = load i32, i32* %counter, align 4, !tbaa !10
  %tobool1677 = icmp ne i32 %833, 0
  br i1 %tobool1677, label %if.then1678, label %if.end1689

if.then1678:                                      ; preds = %if.then1676
  %834 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %arrayidx1679 = getelementptr inbounds i8, i8* %834, i64 0
  %835 = load i8, i8* %arrayidx1679, align 1, !tbaa !12
  %836 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1680 = getelementptr inbounds i8, i8* %836, i64 0
  store i8 %835, i8* %arrayidx1680, align 1, !tbaa !12
  %837 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp1681 = icmp ugt i32 %837, 1
  br i1 %cmp1681, label %if.then1683, label %if.end1686

if.then1683:                                      ; preds = %if.then1678
  %838 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %arrayidx1684 = getelementptr inbounds i8, i8* %838, i64 1
  %839 = load i8, i8* %arrayidx1684, align 1, !tbaa !12
  %840 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1685 = getelementptr inbounds i8, i8* %840, i64 1
  store i8 %839, i8* %arrayidx1685, align 1, !tbaa !12
  br label %if.end1686

if.end1686:                                       ; preds = %if.then1683, %if.then1678
  %841 = load i32, i32* %counter, align 4, !tbaa !10
  %842 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %idx.ext1687 = zext i32 %841 to i64
  %add.ptr1688 = getelementptr inbounds i8, i8* %842, i64 %idx.ext1687
  store i8* %add.ptr1688, i8** %pOut_buf_cur, align 8, !tbaa !8
  br label %if.end1689

if.end1689:                                       ; preds = %if.end1686, %if.then1676
  store i32 204, i32* %cleanup.dest.slot, align 4
  br label %cleanup1691

if.end1690:                                       ; preds = %do.end1672
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup1691

cleanup1691:                                      ; preds = %if.end1690, %if.end1689
  %843 = bitcast i8** %pSrc_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %843) #10
  %cleanup.dest1692 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest1692, label %unreachable [
    i32 0, label %cleanup.cont1693
    i32 204, label %for.cond1081
  ]

cleanup.cont1693:                                 ; preds = %cleanup1691
  br label %if.end1694

if.end1694:                                       ; preds = %cleanup.cont1693, %land.lhs.true1658, %if.else1655
  br label %if.end1695

if.end1695:                                       ; preds = %if.end1694
  br label %while.cond1696

while.cond1696:                                   ; preds = %while.body1699, %if.end1695
  %844 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp1697 = icmp ugt i32 %844, 2
  br i1 %cmp1697, label %while.body1699, label %while.end1709

while.body1699:                                   ; preds = %while.cond1696
  %845 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %arrayidx1700 = getelementptr inbounds i8, i8* %845, i64 0
  %846 = load i8, i8* %arrayidx1700, align 1, !tbaa !12
  %847 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1701 = getelementptr inbounds i8, i8* %847, i64 0
  store i8 %846, i8* %arrayidx1701, align 1, !tbaa !12
  %848 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %arrayidx1702 = getelementptr inbounds i8, i8* %848, i64 1
  %849 = load i8, i8* %arrayidx1702, align 1, !tbaa !12
  %850 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1703 = getelementptr inbounds i8, i8* %850, i64 1
  store i8 %849, i8* %arrayidx1703, align 1, !tbaa !12
  %851 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %arrayidx1704 = getelementptr inbounds i8, i8* %851, i64 2
  %852 = load i8, i8* %arrayidx1704, align 1, !tbaa !12
  %853 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1705 = getelementptr inbounds i8, i8* %853, i64 2
  store i8 %852, i8* %arrayidx1705, align 1, !tbaa !12
  %854 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %add.ptr1706 = getelementptr inbounds i8, i8* %854, i64 3
  store i8* %add.ptr1706, i8** %pOut_buf_cur, align 8, !tbaa !8
  %855 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %add.ptr1707 = getelementptr inbounds i8, i8* %855, i64 3
  store i8* %add.ptr1707, i8** %pSrc, align 8, !tbaa !8
  %856 = load i32, i32* %counter, align 4, !tbaa !10
  %sub1708 = sub i32 %856, 3
  store i32 %sub1708, i32* %counter, align 4, !tbaa !10
  br label %while.cond1696

while.end1709:                                    ; preds = %while.cond1696
  %857 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp1710 = icmp ugt i32 %857, 0
  br i1 %cmp1710, label %if.then1712, label %if.end1723

if.then1712:                                      ; preds = %while.end1709
  %858 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %arrayidx1713 = getelementptr inbounds i8, i8* %858, i64 0
  %859 = load i8, i8* %arrayidx1713, align 1, !tbaa !12
  %860 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1714 = getelementptr inbounds i8, i8* %860, i64 0
  store i8 %859, i8* %arrayidx1714, align 1, !tbaa !12
  %861 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp1715 = icmp ugt i32 %861, 1
  br i1 %cmp1715, label %if.then1717, label %if.end1720

if.then1717:                                      ; preds = %if.then1712
  %862 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %arrayidx1718 = getelementptr inbounds i8, i8* %862, i64 1
  %863 = load i8, i8* %arrayidx1718, align 1, !tbaa !12
  %864 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %arrayidx1719 = getelementptr inbounds i8, i8* %864, i64 1
  store i8 %863, i8* %arrayidx1719, align 1, !tbaa !12
  br label %if.end1720

if.end1720:                                       ; preds = %if.then1717, %if.then1712
  %865 = load i32, i32* %counter, align 4, !tbaa !10
  %866 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %idx.ext1721 = zext i32 %865 to i64
  %add.ptr1722 = getelementptr inbounds i8, i8* %866, i64 %idx.ext1721
  store i8* %add.ptr1722, i8** %pOut_buf_cur, align 8, !tbaa !8
  br label %if.end1723

if.end1723:                                       ; preds = %if.end1720, %while.end1709
  br label %for.cond1081

for.end1724:                                      ; preds = %if.then1350
  br label %if.end1725

if.end1725:                                       ; preds = %for.end1724, %do.end409
  br label %if.end1726

if.end1726:                                       ; preds = %if.end1725, %while.end395
  br label %do.cond1727

do.cond1727:                                      ; preds = %if.end1726
  %867 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_final1728 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %867, i32 0, i32 5
  %868 = load i32, i32* %m_final1728, align 4, !tbaa !86
  %and1729 = and i32 %868, 1
  %tobool1730 = icmp ne i32 %and1729, 0
  %lnot = xor i1 %tobool1730, true
  br i1 %lnot, label %do.body81, label %do.end1731

do.end1731:                                       ; preds = %do.cond1727
  br label %do.body1732

do.body1732:                                      ; preds = %do.end1731
  %869 = load i32, i32* %num_bits, align 4, !tbaa !10
  %870 = load i32, i32* %num_bits, align 4, !tbaa !10
  %and1733 = and i32 %870, 7
  %cmp1734 = icmp ult i32 %869, %and1733
  br i1 %cmp1734, label %if.then1736, label %if.end1767

if.then1736:                                      ; preds = %do.body1732
  br label %do.body1737

do.body1737:                                      ; preds = %do.cond1762, %if.then1736
  br label %do.body1739

do.body1739:                                      ; preds = %do.body1737
  br label %while.cond1740

while.cond1740:                                   ; preds = %do.end1751, %do.body1739
  %871 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %872 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp1741 = icmp uge i8* %871, %872
  br i1 %cmp1741, label %while.body1743, label %while.end1752

while.body1743:                                   ; preds = %while.cond1740
  br label %do.body1744

do.body1744:                                      ; preds = %while.body1743
  %873 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1745 = and i32 %873, 2
  %tobool1746 = icmp ne i32 %and1745, 0
  %874 = zext i1 %tobool1746 to i64
  %cond1747 = select i1 %tobool1746, i32 1, i32 -4
  store i32 %cond1747, i32* %status, align 4, !tbaa !12
  %875 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1748 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %875, i32 0, i32 0
  store i32 32, i32* %m_state1748, align 8, !tbaa !81
  br label %common_exit

sw.bb1749:                                        ; preds = %if.end
  br label %do.cond1750

do.cond1750:                                      ; preds = %sw.bb1749
  br label %do.end1751

do.end1751:                                       ; preds = %do.cond1750
  br label %while.cond1740

while.end1752:                                    ; preds = %while.cond1740
  %876 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1753 = getelementptr inbounds i8, i8* %876, i32 1
  store i8* %incdec.ptr1753, i8** %pIn_buf_cur, align 8, !tbaa !8
  %877 = load i8, i8* %876, align 1, !tbaa !12
  %conv1754 = zext i8 %877 to i32
  store i32 %conv1754, i32* %c1738, align 4, !tbaa !10
  br label %do.cond1755

do.cond1755:                                      ; preds = %while.end1752
  br label %do.end1756

do.end1756:                                       ; preds = %do.cond1755
  %878 = load i32, i32* %c1738, align 4, !tbaa !10
  %conv1757 = zext i32 %878 to i64
  %879 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1758 = zext i32 %879 to i64
  %shl1759 = shl i64 %conv1757, %sh_prom1758
  %880 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1760 = or i64 %880, %shl1759
  store i64 %or1760, i64* %bit_buf, align 8, !tbaa !76
  %881 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1761 = add i32 %881, 8
  store i32 %add1761, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1762

do.cond1762:                                      ; preds = %do.end1756
  %882 = load i32, i32* %num_bits, align 4, !tbaa !10
  %883 = load i32, i32* %num_bits, align 4, !tbaa !10
  %and1763 = and i32 %883, 7
  %cmp1764 = icmp ult i32 %882, %and1763
  br i1 %cmp1764, label %do.body1737, label %do.end1766

do.end1766:                                       ; preds = %do.cond1762
  br label %if.end1767

if.end1767:                                       ; preds = %do.end1766, %do.body1732
  %884 = load i32, i32* %num_bits, align 4, !tbaa !10
  %and1768 = and i32 %884, 7
  %885 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %sh_prom1769 = zext i32 %and1768 to i64
  %shr1770 = lshr i64 %885, %sh_prom1769
  store i64 %shr1770, i64* %bit_buf, align 8, !tbaa !76
  %886 = load i32, i32* %num_bits, align 4, !tbaa !10
  %and1771 = and i32 %886, 7
  %887 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1772 = sub i32 %887, %and1771
  store i32 %sub1772, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1773

do.cond1773:                                      ; preds = %if.end1767
  br label %do.end1774

do.end1774:                                       ; preds = %do.cond1773
  br label %while.cond1775

while.cond1775:                                   ; preds = %while.body1782, %do.end1774
  %888 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %889 = load i8*, i8** %pIn_buf_next.addr, align 8, !tbaa !8
  %cmp1776 = icmp ugt i8* %888, %889
  br i1 %cmp1776, label %land.rhs1778, label %land.end1781

land.rhs1778:                                     ; preds = %while.cond1775
  %890 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1779 = icmp uge i32 %890, 8
  br label %land.end1781

land.end1781:                                     ; preds = %land.rhs1778, %while.cond1775
  %891 = phi i1 [ false, %while.cond1775 ], [ %cmp1779, %land.rhs1778 ]
  br i1 %891, label %while.body1782, label %while.end1785

while.body1782:                                   ; preds = %land.end1781
  %892 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1783 = getelementptr inbounds i8, i8* %892, i32 -1
  store i8* %incdec.ptr1783, i8** %pIn_buf_cur, align 8, !tbaa !8
  %893 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1784 = sub i32 %893, 8
  store i32 %sub1784, i32* %num_bits, align 4, !tbaa !10
  br label %while.cond1775

while.end1785:                                    ; preds = %land.end1781
  %894 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1786 = zext i32 %894 to i64
  %shl1787 = shl i64 1, %sh_prom1786
  %sub1788 = sub i64 %shl1787, 1
  %895 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and1789 = and i64 %895, %sub1788
  store i64 %and1789, i64* %bit_buf, align 8, !tbaa !76
  %896 = load i32, i32* %num_bits, align 4, !tbaa !10
  %tobool1790 = icmp ne i32 %896, 0
  %lnot1791 = xor i1 %tobool1790, true
  %lnot1792 = xor i1 %lnot1791, true
  %lnot.ext = zext i1 %lnot1792 to i32
  %conv1793 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv1793, i64 0)
  %tobool1794 = icmp ne i64 %expval, 0
  br i1 %tobool1794, label %cond.true1795, label %cond.false1796

cond.true1795:                                    ; preds = %while.end1785
  call void @__assert_rtn(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.tinfl_decompress, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 2783, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i64 0, i64 0)) #13
  unreachable

897:                                              ; No predecessors!
  br label %cond.end1797

cond.false1796:                                   ; preds = %while.end1785
  br label %cond.end1797

cond.end1797:                                     ; preds = %cond.false1796, %897
  %898 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1798 = and i32 %898, 1
  %tobool1799 = icmp ne i32 %and1798, 0
  br i1 %tobool1799, label %if.then1800, label %if.end1875

if.then1800:                                      ; preds = %cond.end1797
  store i32 0, i32* %counter, align 4, !tbaa !10
  br label %for.cond1801

for.cond1801:                                     ; preds = %for.inc1872, %if.then1800
  %899 = load i32, i32* %counter, align 4, !tbaa !10
  %cmp1802 = icmp ult i32 %899, 4
  br i1 %cmp1802, label %for.body1804, label %for.end1874

for.body1804:                                     ; preds = %for.cond1801
  %900 = load i32, i32* %num_bits, align 4, !tbaa !10
  %tobool1806 = icmp ne i32 %900, 0
  br i1 %tobool1806, label %if.then1807, label %if.else1848

if.then1807:                                      ; preds = %for.body1804
  br label %do.body1808

do.body1808:                                      ; preds = %if.then1807
  %901 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1809 = icmp ult i32 %901, 8
  br i1 %cmp1809, label %if.then1811, label %if.end1841

if.then1811:                                      ; preds = %do.body1808
  br label %do.body1812

do.body1812:                                      ; preds = %do.cond1837, %if.then1811
  br label %do.body1814

do.body1814:                                      ; preds = %do.body1812
  br label %while.cond1815

while.cond1815:                                   ; preds = %do.end1826, %do.body1814
  %902 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %903 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp1816 = icmp uge i8* %902, %903
  br i1 %cmp1816, label %while.body1818, label %while.end1827

while.body1818:                                   ; preds = %while.cond1815
  br label %do.body1819

do.body1819:                                      ; preds = %while.body1818
  %904 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1820 = and i32 %904, 2
  %tobool1821 = icmp ne i32 %and1820, 0
  %905 = zext i1 %tobool1821 to i64
  %cond1822 = select i1 %tobool1821, i32 1, i32 -4
  store i32 %cond1822, i32* %status, align 4, !tbaa !12
  %906 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1823 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %906, i32 0, i32 0
  store i32 41, i32* %m_state1823, align 8, !tbaa !81
  br label %common_exit

sw.bb1824:                                        ; preds = %if.end
  br label %do.cond1825

do.cond1825:                                      ; preds = %sw.bb1824
  br label %do.end1826

do.end1826:                                       ; preds = %do.cond1825
  br label %while.cond1815

while.end1827:                                    ; preds = %while.cond1815
  %907 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1828 = getelementptr inbounds i8, i8* %907, i32 1
  store i8* %incdec.ptr1828, i8** %pIn_buf_cur, align 8, !tbaa !8
  %908 = load i8, i8* %907, align 1, !tbaa !12
  %conv1829 = zext i8 %908 to i32
  store i32 %conv1829, i32* %c1813, align 4, !tbaa !10
  br label %do.cond1830

do.cond1830:                                      ; preds = %while.end1827
  br label %do.end1831

do.end1831:                                       ; preds = %do.cond1830
  %909 = load i32, i32* %c1813, align 4, !tbaa !10
  %conv1832 = zext i32 %909 to i64
  %910 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1833 = zext i32 %910 to i64
  %shl1834 = shl i64 %conv1832, %sh_prom1833
  %911 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %or1835 = or i64 %911, %shl1834
  store i64 %or1835, i64* %bit_buf, align 8, !tbaa !76
  %912 = load i32, i32* %num_bits, align 4, !tbaa !10
  %add1836 = add i32 %912, 8
  store i32 %add1836, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1837

do.cond1837:                                      ; preds = %do.end1831
  %913 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1838 = icmp ult i32 %913, 8
  br i1 %cmp1838, label %do.body1812, label %do.end1840

do.end1840:                                       ; preds = %do.cond1837
  br label %if.end1841

if.end1841:                                       ; preds = %do.end1840, %do.body1808
  %914 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %and1842 = and i64 %914, 255
  %conv1843 = trunc i64 %and1842 to i32
  store i32 %conv1843, i32* %s1805, align 4, !tbaa !10
  %915 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %shr1844 = lshr i64 %915, 8
  store i64 %shr1844, i64* %bit_buf, align 8, !tbaa !76
  %916 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1845 = sub i32 %916, 8
  store i32 %sub1845, i32* %num_bits, align 4, !tbaa !10
  br label %do.cond1846

do.cond1846:                                      ; preds = %if.end1841
  br label %do.end1847

do.end1847:                                       ; preds = %do.cond1846
  br label %if.end1867

if.else1848:                                      ; preds = %for.body1804
  br label %do.body1849

do.body1849:                                      ; preds = %if.else1848
  br label %while.cond1850

while.cond1850:                                   ; preds = %do.end1861, %do.body1849
  %917 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %918 = load i8*, i8** %pIn_buf_end, align 8, !tbaa !8
  %cmp1851 = icmp uge i8* %917, %918
  br i1 %cmp1851, label %while.body1853, label %while.end1862

while.body1853:                                   ; preds = %while.cond1850
  br label %do.body1854

do.body1854:                                      ; preds = %while.body1853
  %919 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1855 = and i32 %919, 2
  %tobool1856 = icmp ne i32 %and1855, 0
  %920 = zext i1 %tobool1856 to i64
  %cond1857 = select i1 %tobool1856, i32 1, i32 -4
  store i32 %cond1857, i32* %status, align 4, !tbaa !12
  %921 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1858 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %921, i32 0, i32 0
  store i32 42, i32* %m_state1858, align 8, !tbaa !81
  br label %common_exit

sw.bb1859:                                        ; preds = %if.end
  br label %do.cond1860

do.cond1860:                                      ; preds = %sw.bb1859
  br label %do.end1861

do.end1861:                                       ; preds = %do.cond1860
  br label %while.cond1850

while.end1862:                                    ; preds = %while.cond1850
  %922 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1863 = getelementptr inbounds i8, i8* %922, i32 1
  store i8* %incdec.ptr1863, i8** %pIn_buf_cur, align 8, !tbaa !8
  %923 = load i8, i8* %922, align 1, !tbaa !12
  %conv1864 = zext i8 %923 to i32
  store i32 %conv1864, i32* %s1805, align 4, !tbaa !10
  br label %do.cond1865

do.cond1865:                                      ; preds = %while.end1862
  br label %do.end1866

do.end1866:                                       ; preds = %do.cond1865
  br label %if.end1867

if.end1867:                                       ; preds = %do.end1866, %do.end1847
  %924 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_z_adler321868 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %924, i32 0, i32 4
  %925 = load i32, i32* %m_z_adler321868, align 8, !tbaa !85
  %shl1869 = shl i32 %925, 8
  %926 = load i32, i32* %s1805, align 4, !tbaa !10
  %or1870 = or i32 %shl1869, %926
  %927 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_z_adler321871 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %927, i32 0, i32 4
  store i32 %or1870, i32* %m_z_adler321871, align 8, !tbaa !85
  br label %for.inc1872

for.inc1872:                                      ; preds = %if.end1867
  %928 = load i32, i32* %counter, align 4, !tbaa !10
  %inc1873 = add i32 %928, 1
  store i32 %inc1873, i32* %counter, align 4, !tbaa !10
  br label %for.cond1801

for.end1874:                                      ; preds = %for.cond1801
  br label %if.end1875

if.end1875:                                       ; preds = %for.end1874, %cond.end1797
  br label %do.body1876

do.body1876:                                      ; preds = %if.end1875
  br label %for.cond1877

for.cond1877:                                     ; preds = %do.end1882, %do.body1876
  br label %do.body1878

do.body1878:                                      ; preds = %for.cond1877
  store i32 0, i32* %status, align 4, !tbaa !12
  %929 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_state1879 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %929, i32 0, i32 0
  store i32 34, i32* %m_state1879, align 8, !tbaa !81
  br label %common_exit

sw.bb1880:                                        ; preds = %if.end
  br label %do.cond1881

do.cond1881:                                      ; preds = %sw.bb1880
  br label %do.end1882

do.end1882:                                       ; preds = %do.cond1881
  br label %for.cond1877

do.cond1883:                                      ; No predecessors!
  br label %do.end1884

do.end1884:                                       ; preds = %do.cond1883
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end1884, %if.end
  br label %common_exit

common_exit:                                      ; preds = %sw.epilog, %do.body1878, %do.body1854, %do.body1819, %do.body1744, %do.body1642, %do.body1611, %do.body1564, %do.body1473, %do.body1371, %do.body1243, %do.body1162, %do.body1036, %do.body966, %do.body943, %do.body855, %do.body660, %do.body560, %do.body479, %do.body403, %do.body338, %do.body328, %do.body312, %do.body279, %do.body256, %do.body219, %do.body185, %do.body138, %do.body92, %do.body72, %do.body23, %do.body9
  %930 = load i32, i32* %status, align 4, !tbaa !12
  %cmp1885 = icmp ne i32 %930, 1
  br i1 %cmp1885, label %land.lhs.true1887, label %if.end1902

land.lhs.true1887:                                ; preds = %common_exit
  %931 = load i32, i32* %status, align 4, !tbaa !12
  %cmp1888 = icmp ne i32 %931, -4
  br i1 %cmp1888, label %if.then1890, label %if.end1902

if.then1890:                                      ; preds = %land.lhs.true1887
  br label %while.cond1891

while.cond1891:                                   ; preds = %while.body1898, %if.then1890
  %932 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %933 = load i8*, i8** %pIn_buf_next.addr, align 8, !tbaa !8
  %cmp1892 = icmp ugt i8* %932, %933
  br i1 %cmp1892, label %land.rhs1894, label %land.end1897

land.rhs1894:                                     ; preds = %while.cond1891
  %934 = load i32, i32* %num_bits, align 4, !tbaa !10
  %cmp1895 = icmp uge i32 %934, 8
  br label %land.end1897

land.end1897:                                     ; preds = %land.rhs1894, %while.cond1891
  %935 = phi i1 [ false, %while.cond1891 ], [ %cmp1895, %land.rhs1894 ]
  br i1 %935, label %while.body1898, label %while.end1901

while.body1898:                                   ; preds = %land.end1897
  %936 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %incdec.ptr1899 = getelementptr inbounds i8, i8* %936, i32 -1
  store i8* %incdec.ptr1899, i8** %pIn_buf_cur, align 8, !tbaa !8
  %937 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sub1900 = sub i32 %937, 8
  store i32 %sub1900, i32* %num_bits, align 4, !tbaa !10
  br label %while.cond1891

while.end1901:                                    ; preds = %land.end1897
  br label %if.end1902

if.end1902:                                       ; preds = %while.end1901, %land.lhs.true1887, %common_exit
  %938 = load i32, i32* %num_bits, align 4, !tbaa !10
  %939 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_num_bits1903 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %939, i32 0, i32 1
  store i32 %938, i32* %m_num_bits1903, align 4, !tbaa !74
  %940 = load i64, i64* %bit_buf, align 8, !tbaa !76
  %941 = load i32, i32* %num_bits, align 4, !tbaa !10
  %sh_prom1904 = zext i32 %941 to i64
  %shl1905 = shl i64 1, %sh_prom1904
  %sub1906 = sub i64 %shl1905, 1
  %and1907 = and i64 %940, %sub1906
  %942 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_bit_buf1908 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %942, i32 0, i32 12
  store i64 %and1907, i64* %m_bit_buf1908, align 8, !tbaa !75
  %943 = load i32, i32* %dist, align 4, !tbaa !10
  %944 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_dist1909 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %944, i32 0, i32 8
  store i32 %943, i32* %m_dist1909, align 8, !tbaa !77
  %945 = load i32, i32* %counter, align 4, !tbaa !10
  %946 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_counter1910 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %946, i32 0, i32 9
  store i32 %945, i32* %m_counter1910, align 4, !tbaa !78
  %947 = load i32, i32* %num_extra, align 4, !tbaa !10
  %948 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_num_extra1911 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %948, i32 0, i32 10
  store i32 %947, i32* %m_num_extra1911, align 8, !tbaa !79
  %949 = load i64, i64* %dist_from_out_buf_start, align 8, !tbaa !4
  %950 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_dist_from_out_buf_start1912 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %950, i32 0, i32 13
  store i64 %949, i64* %m_dist_from_out_buf_start1912, align 8, !tbaa !80
  %951 = load i8*, i8** %pIn_buf_cur, align 8, !tbaa !8
  %952 = load i8*, i8** %pIn_buf_next.addr, align 8, !tbaa !8
  %sub.ptr.lhs.cast1913 = ptrtoint i8* %951 to i64
  %sub.ptr.rhs.cast1914 = ptrtoint i8* %952 to i64
  %sub.ptr.sub1915 = sub i64 %sub.ptr.lhs.cast1913, %sub.ptr.rhs.cast1914
  %953 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  store i64 %sub.ptr.sub1915, i64* %953, align 8, !tbaa !4
  %954 = load i8*, i8** %pOut_buf_cur, align 8, !tbaa !8
  %955 = load i8*, i8** %pOut_buf_next.addr, align 8, !tbaa !8
  %sub.ptr.lhs.cast1916 = ptrtoint i8* %954 to i64
  %sub.ptr.rhs.cast1917 = ptrtoint i8* %955 to i64
  %sub.ptr.sub1918 = sub i64 %sub.ptr.lhs.cast1916, %sub.ptr.rhs.cast1917
  %956 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  store i64 %sub.ptr.sub1918, i64* %956, align 8, !tbaa !4
  %957 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1919 = and i32 %957, 9
  %tobool1920 = icmp ne i32 %and1919, 0
  br i1 %tobool1920, label %land.lhs.true1921, label %if.end2007

land.lhs.true1921:                                ; preds = %if.end1902
  %958 = load i32, i32* %status, align 4, !tbaa !12
  %cmp1922 = icmp sge i32 %958, 0
  br i1 %cmp1922, label %if.then1924, label %if.end2007

if.then1924:                                      ; preds = %land.lhs.true1921
  %959 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %959) #10
  %960 = load i8*, i8** %pOut_buf_next.addr, align 8, !tbaa !8
  store i8* %960, i8** %ptr, align 8, !tbaa !8
  %961 = bitcast i64* %buf_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %961) #10
  %962 = load i64*, i64** %pOut_buf_size.addr, align 8, !tbaa !8
  %963 = load i64, i64* %962, align 8, !tbaa !4
  store i64 %963, i64* %buf_len, align 8, !tbaa !4
  %964 = bitcast i32* %i1925 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %964) #10
  %965 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %965) #10
  %966 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_check_adler321926 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %966, i32 0, i32 7
  %967 = load i32, i32* %m_check_adler321926, align 4, !tbaa !84
  %and1927 = and i32 %967, 65535
  store i32 %and1927, i32* %s1, align 4, !tbaa !10
  %968 = bitcast i32* %s2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %968) #10
  %969 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_check_adler321928 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %969, i32 0, i32 7
  %970 = load i32, i32* %m_check_adler321928, align 4, !tbaa !84
  %shr1929 = lshr i32 %970, 16
  store i32 %shr1929, i32* %s2, align 4, !tbaa !10
  %971 = bitcast i64* %block_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %971) #10
  %972 = load i64, i64* %buf_len, align 8, !tbaa !4
  %rem1930 = urem i64 %972, 5552
  store i64 %rem1930, i64* %block_len, align 8, !tbaa !4
  br label %while.cond1931

while.cond1931:                                   ; preds = %for.end1987, %if.then1924
  %973 = load i64, i64* %buf_len, align 8, !tbaa !4
  %tobool1932 = icmp ne i64 %973, 0
  br i1 %tobool1932, label %while.body1933, label %while.end1991

while.body1933:                                   ; preds = %while.cond1931
  store i32 0, i32* %i1925, align 4, !tbaa !10
  br label %for.cond1934

for.cond1934:                                     ; preds = %for.inc1972, %while.body1933
  %974 = load i32, i32* %i1925, align 4, !tbaa !10
  %add1935 = add i32 %974, 7
  %conv1936 = zext i32 %add1935 to i64
  %975 = load i64, i64* %block_len, align 8, !tbaa !4
  %cmp1937 = icmp ult i64 %conv1936, %975
  br i1 %cmp1937, label %for.body1939, label %for.end1975

for.body1939:                                     ; preds = %for.cond1934
  %976 = load i8*, i8** %ptr, align 8, !tbaa !8
  %arrayidx1940 = getelementptr inbounds i8, i8* %976, i64 0
  %977 = load i8, i8* %arrayidx1940, align 1, !tbaa !12
  %conv1941 = zext i8 %977 to i32
  %978 = load i32, i32* %s1, align 4, !tbaa !10
  %add1942 = add i32 %978, %conv1941
  store i32 %add1942, i32* %s1, align 4, !tbaa !10
  %979 = load i32, i32* %s1, align 4, !tbaa !10
  %980 = load i32, i32* %s2, align 4, !tbaa !10
  %add1943 = add i32 %980, %979
  store i32 %add1943, i32* %s2, align 4, !tbaa !10
  %981 = load i8*, i8** %ptr, align 8, !tbaa !8
  %arrayidx1944 = getelementptr inbounds i8, i8* %981, i64 1
  %982 = load i8, i8* %arrayidx1944, align 1, !tbaa !12
  %conv1945 = zext i8 %982 to i32
  %983 = load i32, i32* %s1, align 4, !tbaa !10
  %add1946 = add i32 %983, %conv1945
  store i32 %add1946, i32* %s1, align 4, !tbaa !10
  %984 = load i32, i32* %s1, align 4, !tbaa !10
  %985 = load i32, i32* %s2, align 4, !tbaa !10
  %add1947 = add i32 %985, %984
  store i32 %add1947, i32* %s2, align 4, !tbaa !10
  %986 = load i8*, i8** %ptr, align 8, !tbaa !8
  %arrayidx1948 = getelementptr inbounds i8, i8* %986, i64 2
  %987 = load i8, i8* %arrayidx1948, align 1, !tbaa !12
  %conv1949 = zext i8 %987 to i32
  %988 = load i32, i32* %s1, align 4, !tbaa !10
  %add1950 = add i32 %988, %conv1949
  store i32 %add1950, i32* %s1, align 4, !tbaa !10
  %989 = load i32, i32* %s1, align 4, !tbaa !10
  %990 = load i32, i32* %s2, align 4, !tbaa !10
  %add1951 = add i32 %990, %989
  store i32 %add1951, i32* %s2, align 4, !tbaa !10
  %991 = load i8*, i8** %ptr, align 8, !tbaa !8
  %arrayidx1952 = getelementptr inbounds i8, i8* %991, i64 3
  %992 = load i8, i8* %arrayidx1952, align 1, !tbaa !12
  %conv1953 = zext i8 %992 to i32
  %993 = load i32, i32* %s1, align 4, !tbaa !10
  %add1954 = add i32 %993, %conv1953
  store i32 %add1954, i32* %s1, align 4, !tbaa !10
  %994 = load i32, i32* %s1, align 4, !tbaa !10
  %995 = load i32, i32* %s2, align 4, !tbaa !10
  %add1955 = add i32 %995, %994
  store i32 %add1955, i32* %s2, align 4, !tbaa !10
  %996 = load i8*, i8** %ptr, align 8, !tbaa !8
  %arrayidx1956 = getelementptr inbounds i8, i8* %996, i64 4
  %997 = load i8, i8* %arrayidx1956, align 1, !tbaa !12
  %conv1957 = zext i8 %997 to i32
  %998 = load i32, i32* %s1, align 4, !tbaa !10
  %add1958 = add i32 %998, %conv1957
  store i32 %add1958, i32* %s1, align 4, !tbaa !10
  %999 = load i32, i32* %s1, align 4, !tbaa !10
  %1000 = load i32, i32* %s2, align 4, !tbaa !10
  %add1959 = add i32 %1000, %999
  store i32 %add1959, i32* %s2, align 4, !tbaa !10
  %1001 = load i8*, i8** %ptr, align 8, !tbaa !8
  %arrayidx1960 = getelementptr inbounds i8, i8* %1001, i64 5
  %1002 = load i8, i8* %arrayidx1960, align 1, !tbaa !12
  %conv1961 = zext i8 %1002 to i32
  %1003 = load i32, i32* %s1, align 4, !tbaa !10
  %add1962 = add i32 %1003, %conv1961
  store i32 %add1962, i32* %s1, align 4, !tbaa !10
  %1004 = load i32, i32* %s1, align 4, !tbaa !10
  %1005 = load i32, i32* %s2, align 4, !tbaa !10
  %add1963 = add i32 %1005, %1004
  store i32 %add1963, i32* %s2, align 4, !tbaa !10
  %1006 = load i8*, i8** %ptr, align 8, !tbaa !8
  %arrayidx1964 = getelementptr inbounds i8, i8* %1006, i64 6
  %1007 = load i8, i8* %arrayidx1964, align 1, !tbaa !12
  %conv1965 = zext i8 %1007 to i32
  %1008 = load i32, i32* %s1, align 4, !tbaa !10
  %add1966 = add i32 %1008, %conv1965
  store i32 %add1966, i32* %s1, align 4, !tbaa !10
  %1009 = load i32, i32* %s1, align 4, !tbaa !10
  %1010 = load i32, i32* %s2, align 4, !tbaa !10
  %add1967 = add i32 %1010, %1009
  store i32 %add1967, i32* %s2, align 4, !tbaa !10
  %1011 = load i8*, i8** %ptr, align 8, !tbaa !8
  %arrayidx1968 = getelementptr inbounds i8, i8* %1011, i64 7
  %1012 = load i8, i8* %arrayidx1968, align 1, !tbaa !12
  %conv1969 = zext i8 %1012 to i32
  %1013 = load i32, i32* %s1, align 4, !tbaa !10
  %add1970 = add i32 %1013, %conv1969
  store i32 %add1970, i32* %s1, align 4, !tbaa !10
  %1014 = load i32, i32* %s1, align 4, !tbaa !10
  %1015 = load i32, i32* %s2, align 4, !tbaa !10
  %add1971 = add i32 %1015, %1014
  store i32 %add1971, i32* %s2, align 4, !tbaa !10
  br label %for.inc1972

for.inc1972:                                      ; preds = %for.body1939
  %1016 = load i32, i32* %i1925, align 4, !tbaa !10
  %add1973 = add i32 %1016, 8
  store i32 %add1973, i32* %i1925, align 4, !tbaa !10
  %1017 = load i8*, i8** %ptr, align 8, !tbaa !8
  %add.ptr1974 = getelementptr inbounds i8, i8* %1017, i64 8
  store i8* %add.ptr1974, i8** %ptr, align 8, !tbaa !8
  br label %for.cond1934

for.end1975:                                      ; preds = %for.cond1934
  br label %for.cond1976

for.cond1976:                                     ; preds = %for.inc1985, %for.end1975
  %1018 = load i32, i32* %i1925, align 4, !tbaa !10
  %conv1977 = zext i32 %1018 to i64
  %1019 = load i64, i64* %block_len, align 8, !tbaa !4
  %cmp1978 = icmp ult i64 %conv1977, %1019
  br i1 %cmp1978, label %for.body1980, label %for.end1987

for.body1980:                                     ; preds = %for.cond1976
  %1020 = load i8*, i8** %ptr, align 8, !tbaa !8
  %incdec.ptr1981 = getelementptr inbounds i8, i8* %1020, i32 1
  store i8* %incdec.ptr1981, i8** %ptr, align 8, !tbaa !8
  %1021 = load i8, i8* %1020, align 1, !tbaa !12
  %conv1982 = zext i8 %1021 to i32
  %1022 = load i32, i32* %s1, align 4, !tbaa !10
  %add1983 = add i32 %1022, %conv1982
  store i32 %add1983, i32* %s1, align 4, !tbaa !10
  %1023 = load i32, i32* %s1, align 4, !tbaa !10
  %1024 = load i32, i32* %s2, align 4, !tbaa !10
  %add1984 = add i32 %1024, %1023
  store i32 %add1984, i32* %s2, align 4, !tbaa !10
  br label %for.inc1985

for.inc1985:                                      ; preds = %for.body1980
  %1025 = load i32, i32* %i1925, align 4, !tbaa !10
  %inc1986 = add i32 %1025, 1
  store i32 %inc1986, i32* %i1925, align 4, !tbaa !10
  br label %for.cond1976

for.end1987:                                      ; preds = %for.cond1976
  %1026 = load i32, i32* %s1, align 4, !tbaa !10
  %rem1988 = urem i32 %1026, 65521
  store i32 %rem1988, i32* %s1, align 4, !tbaa !10
  %1027 = load i32, i32* %s2, align 4, !tbaa !10
  %rem1989 = urem i32 %1027, 65521
  store i32 %rem1989, i32* %s2, align 4, !tbaa !10
  %1028 = load i64, i64* %block_len, align 8, !tbaa !4
  %1029 = load i64, i64* %buf_len, align 8, !tbaa !4
  %sub1990 = sub i64 %1029, %1028
  store i64 %sub1990, i64* %buf_len, align 8, !tbaa !4
  store i64 5552, i64* %block_len, align 8, !tbaa !4
  br label %while.cond1931

while.end1991:                                    ; preds = %while.cond1931
  %1030 = load i32, i32* %s2, align 4, !tbaa !10
  %shl1992 = shl i32 %1030, 16
  %1031 = load i32, i32* %s1, align 4, !tbaa !10
  %add1993 = add i32 %shl1992, %1031
  %1032 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_check_adler321994 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %1032, i32 0, i32 7
  store i32 %add1993, i32* %m_check_adler321994, align 4, !tbaa !84
  %1033 = load i32, i32* %status, align 4, !tbaa !12
  %cmp1995 = icmp eq i32 %1033, 0
  br i1 %cmp1995, label %land.lhs.true1997, label %if.end2006

land.lhs.true1997:                                ; preds = %while.end1991
  %1034 = load i32, i32* %decomp_flags.addr, align 4, !tbaa !10
  %and1998 = and i32 %1034, 1
  %tobool1999 = icmp ne i32 %and1998, 0
  br i1 %tobool1999, label %land.lhs.true2000, label %if.end2006

land.lhs.true2000:                                ; preds = %land.lhs.true1997
  %1035 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_check_adler322001 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %1035, i32 0, i32 7
  %1036 = load i32, i32* %m_check_adler322001, align 4, !tbaa !84
  %1037 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %r.addr, align 8, !tbaa !8
  %m_z_adler322002 = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %1037, i32 0, i32 4
  %1038 = load i32, i32* %m_z_adler322002, align 8, !tbaa !85
  %cmp2003 = icmp ne i32 %1036, %1038
  br i1 %cmp2003, label %if.then2005, label %if.end2006

if.then2005:                                      ; preds = %land.lhs.true2000
  store i32 -2, i32* %status, align 4, !tbaa !12
  br label %if.end2006

if.end2006:                                       ; preds = %if.then2005, %land.lhs.true2000, %land.lhs.true1997, %while.end1991
  %1039 = bitcast i64* %block_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1039) #10
  %1040 = bitcast i32* %s2 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1040) #10
  %1041 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1041) #10
  %1042 = bitcast i32* %i1925 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1042) #10
  %1043 = bitcast i64* %buf_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1043) #10
  %1044 = bitcast i8** %ptr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1044) #10
  br label %if.end2007

if.end2007:                                       ; preds = %if.end2006, %land.lhs.true1921, %if.end1902
  %1045 = load i32, i32* %status, align 4, !tbaa !12
  store i32 %1045, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup2008

cleanup2008:                                      ; preds = %if.end2007, %if.then
  %1046 = bitcast i64* %dist_from_out_buf_start to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1046) #10
  %1047 = bitcast i64* %out_buf_size_mask to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1047) #10
  %1048 = bitcast i8** %pOut_buf_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1048) #10
  %1049 = bitcast i8** %pOut_buf_cur to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1049) #10
  %1050 = bitcast i8** %pIn_buf_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1050) #10
  %1051 = bitcast i8** %pIn_buf_cur to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1051) #10
  %1052 = bitcast i64* %bit_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %1052) #10
  %1053 = bitcast i32* %num_extra to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1053) #10
  %1054 = bitcast i32* %counter to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1054) #10
  %1055 = bitcast i32* %dist to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1055) #10
  %1056 = bitcast i32* %num_bits to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1056) #10
  %1057 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %1057) #10
  %1058 = load i32, i32* %retval, align 4
  ret i32 %1058

unreachable:                                      ; preds = %cleanup1691, %cleanup1341, %cleanup
  unreachable
}

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable
define i32 @mz_inflateEnd(%struct.mz_stream_s* %pStream) #0 {
entry:
  %retval = alloca i32, align 4
  %pStream.addr = alloca %struct.mz_stream_s*, align 8
  store %struct.mz_stream_s* %pStream, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %0 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_stream_s* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -2, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %1, i32 0, i32 7
  %2 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state, align 8, !tbaa !23
  %tobool1 = icmp ne %struct.mz_internal_state* %2, null
  br i1 %tobool1, label %if.then2, label %if.end5

if.then2:                                         ; preds = %if.end
  %3 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %zfree = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %3, i32 0, i32 9
  %4 = load void (i8*, i8*)*, void (i8*, i8*)** %zfree, align 8, !tbaa !21
  %5 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %opaque = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %5, i32 0, i32 10
  %6 = load i8*, i8** %opaque, align 8, !tbaa !22
  %7 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state3 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %7, i32 0, i32 7
  %8 = load %struct.mz_internal_state*, %struct.mz_internal_state** %state3, align 8, !tbaa !23
  %9 = bitcast %struct.mz_internal_state* %8 to i8*
  call void %4(i8* %6, i8* %9)
  %10 = load %struct.mz_stream_s*, %struct.mz_stream_s** %pStream.addr, align 8, !tbaa !8
  %state4 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %10, i32 0, i32 7
  store %struct.mz_internal_state* null, %struct.mz_internal_state** %state4, align 8, !tbaa !23
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end5, %if.then
  %11 = load i32, i32* %retval, align 4
  ret i32 %11
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_uncompress(i8* %pDest, i64* %pDest_len, i8* %pSource, i64 %source_len) #0 {
entry:
  %retval = alloca i32, align 4
  %pDest.addr = alloca i8*, align 8
  %pDest_len.addr = alloca i64*, align 8
  %pSource.addr = alloca i8*, align 8
  %source_len.addr = alloca i64, align 8
  %stream = alloca %struct.mz_stream_s, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pDest, i8** %pDest.addr, align 8, !tbaa !8
  store i64* %pDest_len, i64** %pDest_len.addr, align 8, !tbaa !8
  store i8* %pSource, i8** %pSource.addr, align 8, !tbaa !8
  store i64 %source_len, i64* %source_len.addr, align 8, !tbaa !4
  %0 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %0) #10
  %1 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 112, i1 false)
  %3 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %4 = load i64*, i64** %pDest_len.addr, align 8, !tbaa !8
  %5 = load i64, i64* %4, align 8, !tbaa !4
  %or = or i64 %3, %5
  %cmp = icmp ugt i64 %or, 4294967295
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -10000, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %pSource.addr, align 8, !tbaa !8
  %next_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 0
  store i8* %6, i8** %next_in, align 8, !tbaa !62
  %7 = load i64, i64* %source_len.addr, align 8, !tbaa !4
  %conv = trunc i64 %7 to i32
  %avail_in = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 1
  store i32 %conv, i32* %avail_in, align 8, !tbaa !61
  %8 = load i8*, i8** %pDest.addr, align 8, !tbaa !8
  %next_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 3
  store i8* %8, i8** %next_out, align 8, !tbaa !59
  %9 = load i64*, i64** %pDest_len.addr, align 8, !tbaa !8
  %10 = load i64, i64* %9, align 8, !tbaa !4
  %conv1 = trunc i64 %10 to i32
  %avail_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 4
  store i32 %conv1, i32* %avail_out, align 8, !tbaa !60
  %call = call i32 @mz_inflateInit(%struct.mz_stream_s* %stream)
  store i32 %call, i32* %status, align 4, !tbaa !10
  %11 = load i32, i32* %status, align 4, !tbaa !10
  %cmp2 = icmp ne i32 %11, 0
  br i1 %cmp2, label %if.then4, label %if.end5

if.then4:                                         ; preds = %if.end
  %12 = load i32, i32* %status, align 4, !tbaa !10
  store i32 %12, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %call6 = call i32 @mz_inflate(%struct.mz_stream_s* %stream, i32 4)
  store i32 %call6, i32* %status, align 4, !tbaa !10
  %13 = load i32, i32* %status, align 4, !tbaa !10
  %cmp7 = icmp ne i32 %13, 1
  br i1 %cmp7, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end5
  %call10 = call i32 @mz_inflateEnd(%struct.mz_stream_s* %stream)
  %14 = load i32, i32* %status, align 4, !tbaa !10
  %cmp11 = icmp eq i32 %14, -5
  br i1 %cmp11, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then9
  %avail_in13 = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 1
  %15 = load i32, i32* %avail_in13, align 8, !tbaa !61
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then9
  %16 = load i32, i32* %status, align 4, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -3, %cond.true ], [ %16, %cond.false ]
  store i32 %cond, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end14:                                         ; preds = %if.end5
  %total_out = getelementptr inbounds %struct.mz_stream_s, %struct.mz_stream_s* %stream, i32 0, i32 5
  %17 = load i64, i64* %total_out, align 8, !tbaa !19
  %18 = load i64*, i64** %pDest_len.addr, align 8, !tbaa !8
  store i64 %17, i64* %18, align 8, !tbaa !4
  %call15 = call i32 @mz_inflateEnd(%struct.mz_stream_s* %stream)
  store i32 %call15, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end14, %cond.end, %if.then4, %if.then
  %19 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #10
  %20 = bitcast %struct.mz_stream_s* %stream to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %20) #10
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define i8* @mz_error(i32 %err) #0 {
entry:
  %retval = alloca i8*, align 8
  %err.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i32 %err, i32* %err.addr, align 4, !tbaa !10
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !tbaa !10
  %conv = zext i32 %1 to i64
  %cmp = icmp ult i64 %conv, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom = zext i32 %2 to i64
  %arrayidx = getelementptr inbounds [10 x %struct.anon], [10 x %struct.anon]* @mz_error.s_error_descs, i64 0, i64 %idxprom
  %m_err = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0
  %3 = load i32, i32* %m_err, align 16, !tbaa !90
  %4 = load i32, i32* %err.addr, align 4, !tbaa !10
  %cmp2 = icmp eq i32 %3, %4
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom4 = zext i32 %5 to i64
  %arrayidx5 = getelementptr inbounds [10 x %struct.anon], [10 x %struct.anon]* @mz_error.s_error_descs, i64 0, i64 %idxprom4
  %m_pDesc = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx5, i32 0, i32 1
  %6 = load i8*, i8** %m_pDesc, align 8, !tbaa !92
  store i8* %6, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !tbaa !10
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %8 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #10
  %9 = load i8*, i8** %retval, align 8
  ret i8* %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @tdefl_flush_output_buffer(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %n = alloca i64, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 29
  %1 = load i64*, i64** %m_pIn_buf_size, align 8, !tbaa !53
  %tobool = icmp ne i64* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %2, i32 0, i32 32
  %3 = load i8*, i8** %m_pSrc, align 8, !tbaa !56
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 27
  %5 = load i8*, i8** %m_pIn_buf, align 8, !tbaa !51
  %sub.ptr.lhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf_size1 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 29
  %7 = load i64*, i64** %m_pIn_buf_size1, align 8, !tbaa !53
  store i64 %sub.ptr.sub, i64* %7, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 30
  %9 = load i64*, i64** %m_pOut_buf_size, align 8, !tbaa !54
  %tobool2 = icmp ne i64* %9, null
  br i1 %tobool2, label %if.then3, label %if.end25

if.then3:                                         ; preds = %if.end
  %10 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #10
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size4 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %11, i32 0, i32 30
  %12 = load i64*, i64** %m_pOut_buf_size4, align 8, !tbaa !54
  %13 = load i64, i64* %12, align 8, !tbaa !4
  %14 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 34
  %15 = load i64, i64* %m_out_buf_ofs, align 8, !tbaa !58
  %sub = sub i64 %13, %15
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %16, i32 0, i32 22
  %17 = load i32, i32* %m_output_flush_remaining, align 4, !tbaa !39
  %conv = zext i32 %17 to i64
  %cmp = icmp ult i64 %sub, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 30
  %19 = load i64*, i64** %m_pOut_buf_size6, align 8, !tbaa !54
  %20 = load i64, i64* %19, align 8, !tbaa !4
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 34
  %22 = load i64, i64* %m_out_buf_ofs7, align 8, !tbaa !58
  %sub8 = sub i64 %20, %22
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  %23 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining9 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %23, i32 0, i32 22
  %24 = load i32, i32* %m_output_flush_remaining9, align 4, !tbaa !39
  %conv10 = zext i32 %24 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub8, %cond.true ], [ %conv10, %cond.false ]
  store i64 %cond, i64* %n, align 8, !tbaa !4
  %25 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %25, i32 0, i32 28
  %26 = load i8*, i8** %m_pOut_buf, align 8, !tbaa !52
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs11 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 34
  %28 = load i64, i64* %m_out_buf_ofs11, align 8, !tbaa !58
  %add.ptr = getelementptr inbounds i8, i8* %26, i64 %28
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 42
  %arraydecay = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf, i64 0, i64 0
  %30 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %30, i32 0, i32 21
  %31 = load i32, i32* %m_output_flush_ofs, align 8, !tbaa !40
  %idx.ext = zext i32 %31 to i64
  %add.ptr12 = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  %32 = load i64, i64* %n, align 8, !tbaa !4
  %33 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf13 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %33, i32 0, i32 28
  %34 = load i8*, i8** %m_pOut_buf13, align 8, !tbaa !52
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs14 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %35, i32 0, i32 34
  %36 = load i64, i64* %m_out_buf_ofs14, align 8, !tbaa !58
  %add.ptr15 = getelementptr inbounds i8, i8* %34, i64 %36
  %37 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr15, i1 false, i1 true, i1 false)
  %call = call i8* @__memcpy_chk(i8* %add.ptr, i8* %add.ptr12, i64 %32, i64 %37) #10
  %38 = load i64, i64* %n, align 8, !tbaa !4
  %conv16 = trunc i64 %38 to i32
  %39 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_ofs17 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %39, i32 0, i32 21
  %40 = load i32, i32* %m_output_flush_ofs17, align 8, !tbaa !40
  %add = add i32 %40, %conv16
  store i32 %add, i32* %m_output_flush_ofs17, align 8, !tbaa !40
  %41 = load i64, i64* %n, align 8, !tbaa !4
  %conv18 = trunc i64 %41 to i32
  %42 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining19 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %42, i32 0, i32 22
  %43 = load i32, i32* %m_output_flush_remaining19, align 4, !tbaa !39
  %sub20 = sub i32 %43, %conv18
  store i32 %sub20, i32* %m_output_flush_remaining19, align 4, !tbaa !39
  %44 = load i64, i64* %n, align 8, !tbaa !4
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs21 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 34
  %46 = load i64, i64* %m_out_buf_ofs21, align 8, !tbaa !58
  %add22 = add i64 %46, %44
  store i64 %add22, i64* %m_out_buf_ofs21, align 8, !tbaa !58
  %47 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs23 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %47, i32 0, i32 34
  %48 = load i64, i64* %m_out_buf_ofs23, align 8, !tbaa !58
  %49 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size24 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %49, i32 0, i32 30
  %50 = load i64*, i64** %m_pOut_buf_size24, align 8, !tbaa !54
  store i64 %48, i64* %50, align 8, !tbaa !4
  %51 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %51) #10
  br label %if.end25

if.end25:                                         ; preds = %cond.end, %if.end
  %52 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_finished = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %52, i32 0, i32 23
  %53 = load i32, i32* %m_finished, align 8, !tbaa !38
  %tobool26 = icmp ne i32 %53, 0
  br i1 %tobool26, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end25
  %54 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining27 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %54, i32 0, i32 22
  %55 = load i32, i32* %m_output_flush_remaining27, align 4, !tbaa !39
  %tobool28 = icmp ne i32 %55, 0
  %lnot = xor i1 %tobool28, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end25
  %56 = phi i1 [ false, %if.end25 ], [ %lnot, %land.rhs ]
  %57 = zext i1 %56 to i64
  %cond29 = select i1 %56, i32 1, i32 0
  ret i32 %cond29
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @tdefl_compress_fast(%struct.tdefl_compressor* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %lookahead_pos = alloca i32, align 4
  %lookahead_size = alloca i32, align 4
  %dict_size = alloca i32, align 4
  %total_lz_bytes = alloca i32, align 4
  %num_flags_left = alloca i32, align 4
  %pLZ_code_buf = alloca i8*, align 8
  %pLZ_flags = alloca i8*, align 8
  %cur_pos = alloca i32, align 4
  %TDEFL_COMP_FAST_LOOKAHEAD_SIZE = alloca i32, align 4
  %dst_pos = alloca i32, align 4
  %num_bytes_to_process = alloca i32, align 4
  %n = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %cur_match_dist = alloca i32, align 4
  %cur_match_len = alloca i32, align 4
  %pCur_dict = alloca i8*, align 8
  %first_trigram = alloca i32, align 4
  %hash = alloca i32, align 4
  %probe_pos = alloca i32, align 4
  %p = alloca i16*, align 8
  %q = alloca i16*, align 8
  %probe_len = alloca i32, align 4
  %s0 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %n280 = alloca i32, align 4
  %lit = alloca i8, align 1
  %n349 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %0 = bitcast i32* %lookahead_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %1, i32 0, i32 6
  %2 = load i32, i32* %m_lookahead_pos, align 4, !tbaa !34
  store i32 %2, i32* %lookahead_pos, align 4, !tbaa !10
  %3 = bitcast i32* %lookahead_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 7
  %5 = load i32, i32* %m_lookahead_size, align 8, !tbaa !33
  store i32 %5, i32* %lookahead_size, align 4, !tbaa !10
  %6 = bitcast i32* %dict_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #10
  %7 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %7, i32 0, i32 8
  %8 = load i32, i32* %m_dict_size, align 4, !tbaa !32
  store i32 %8, i32* %dict_size, align 4, !tbaa !10
  %9 = bitcast i32* %total_lz_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #10
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %10, i32 0, i32 14
  %11 = load i32, i32* %m_total_lz_bytes, align 4, !tbaa !31
  store i32 %11, i32* %total_lz_bytes, align 4, !tbaa !10
  %12 = bitcast i32* %num_flags_left to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #10
  %13 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %13, i32 0, i32 13
  %14 = load i32, i32* %m_num_flags_left, align 8, !tbaa !43
  store i32 %14, i32* %num_flags_left, align 4, !tbaa !10
  %15 = bitcast i8** %pLZ_code_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #10
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %16, i32 0, i32 9
  %17 = load i8*, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  store i8* %17, i8** %pLZ_code_buf, align 8, !tbaa !8
  %18 = bitcast i8** %pLZ_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #10
  %19 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %19, i32 0, i32 10
  %20 = load i8*, i8** %m_pLZ_flags, align 8, !tbaa !42
  store i8* %20, i8** %pLZ_flags, align 8, !tbaa !8
  %21 = bitcast i32* %cur_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #10
  %22 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %and = and i32 %22, 32767
  store i32 %and, i32* %cur_pos, align 4, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont381, %entry
  %23 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %23, i32 0, i32 33
  %24 = load i64, i64* %m_src_buf_left, align 8, !tbaa !57
  %tobool = icmp ne i64 %24, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %25 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %25, i32 0, i32 31
  %26 = load i32, i32* %m_flush, align 8, !tbaa !55
  %tobool1 = icmp ne i32 %26, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %27 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %tobool2 = icmp ne i32 %27, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %28 = phi i1 [ false, %lor.rhs ], [ %tobool2, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %while.cond
  %29 = phi i1 [ true, %while.cond ], [ %28, %land.end ]
  br i1 %29, label %while.body, label %while.end382

while.body:                                       ; preds = %lor.end
  %30 = bitcast i32* %TDEFL_COMP_FAST_LOOKAHEAD_SIZE to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #10
  store i32 4096, i32* %TDEFL_COMP_FAST_LOOKAHEAD_SIZE, align 4, !tbaa !10
  %31 = bitcast i32* %dst_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %31) #10
  %32 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %33 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %add = add i32 %32, %33
  %and3 = and i32 %add, 32767
  store i32 %and3, i32* %dst_pos, align 4, !tbaa !10
  %34 = bitcast i32* %num_bytes_to_process to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %34) #10
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left4 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %35, i32 0, i32 33
  %36 = load i64, i64* %m_src_buf_left4, align 8, !tbaa !57
  %37 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %sub = sub i32 4096, %37
  %conv = zext i32 %sub to i64
  %cmp = icmp ult i64 %36, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %38 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %38, i32 0, i32 33
  %39 = load i64, i64* %m_src_buf_left6, align 8, !tbaa !57
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %40 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %sub7 = sub i32 4096, %40
  %conv8 = zext i32 %sub7 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %39, %cond.true ], [ %conv8, %cond.false ]
  %conv9 = trunc i64 %cond to i32
  store i32 %conv9, i32* %num_bytes_to_process, align 4, !tbaa !10
  %41 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  %conv10 = zext i32 %41 to i64
  %42 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left11 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %42, i32 0, i32 33
  %43 = load i64, i64* %m_src_buf_left11, align 8, !tbaa !57
  %sub12 = sub i64 %43, %conv10
  store i64 %sub12, i64* %m_src_buf_left11, align 8, !tbaa !57
  %44 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  %45 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %add13 = add i32 %45, %44
  store i32 %add13, i32* %lookahead_size, align 4, !tbaa !10
  br label %while.cond14

while.cond14:                                     ; preds = %if.end, %cond.end
  %46 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  %tobool15 = icmp ne i32 %46, 0
  br i1 %tobool15, label %while.body16, label %while.end

while.body16:                                     ; preds = %while.cond14
  %47 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %47) #10
  %48 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %sub17 = sub i32 32768, %48
  %49 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  %cmp18 = icmp ult i32 %sub17, %49
  br i1 %cmp18, label %cond.true20, label %cond.false22

cond.true20:                                      ; preds = %while.body16
  %50 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %sub21 = sub i32 32768, %50
  br label %cond.end23

cond.false22:                                     ; preds = %while.body16
  %51 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  br label %cond.end23

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi i32 [ %sub21, %cond.true20 ], [ %51, %cond.false22 ]
  store i32 %cond24, i32* %n, align 4, !tbaa !10
  %52 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %52, i32 0, i32 35
  %arraydecay = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict, i64 0, i64 0
  %53 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %idx.ext = zext i32 %53 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  %54 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %54, i32 0, i32 32
  %55 = load i8*, i8** %m_pSrc, align 8, !tbaa !56
  %56 = load i32, i32* %n, align 4, !tbaa !10
  %conv25 = zext i32 %56 to i64
  %57 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict26 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %57, i32 0, i32 35
  %arraydecay27 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict26, i64 0, i64 0
  %58 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %idx.ext28 = zext i32 %58 to i64
  %add.ptr29 = getelementptr inbounds i8, i8* %arraydecay27, i64 %idx.ext28
  %59 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr29, i1 false, i1 true, i1 false)
  %call = call i8* @__memcpy_chk(i8* %add.ptr, i8* %55, i64 %conv25, i64 %59) #10
  %60 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %cmp30 = icmp ult i32 %60, 257
  br i1 %cmp30, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end23
  %61 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %61, i32 0, i32 35
  %arraydecay33 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict32, i64 0, i64 0
  %add.ptr34 = getelementptr inbounds i8, i8* %arraydecay33, i64 32768
  %62 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %idx.ext35 = zext i32 %62 to i64
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr34, i64 %idx.ext35
  %63 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc37 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %63, i32 0, i32 32
  %64 = load i8*, i8** %m_pSrc37, align 8, !tbaa !56
  %65 = load i32, i32* %n, align 4, !tbaa !10
  %66 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %sub38 = sub i32 257, %66
  %cmp39 = icmp ult i32 %65, %sub38
  br i1 %cmp39, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %if.then
  %67 = load i32, i32* %n, align 4, !tbaa !10
  br label %cond.end44

cond.false42:                                     ; preds = %if.then
  %68 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %sub43 = sub i32 257, %68
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false42, %cond.true41
  %cond45 = phi i32 [ %67, %cond.true41 ], [ %sub43, %cond.false42 ]
  %conv46 = zext i32 %cond45 to i64
  %69 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict47 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %69, i32 0, i32 35
  %arraydecay48 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict47, i64 0, i64 0
  %add.ptr49 = getelementptr inbounds i8, i8* %arraydecay48, i64 32768
  %70 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %idx.ext50 = zext i32 %70 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %add.ptr49, i64 %idx.ext50
  %71 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr51, i1 false, i1 true, i1 false)
  %call52 = call i8* @__memcpy_chk(i8* %add.ptr36, i8* %64, i64 %conv46, i64 %71) #10
  br label %if.end

if.end:                                           ; preds = %cond.end44, %cond.end23
  %72 = load i32, i32* %n, align 4, !tbaa !10
  %73 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc53 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %73, i32 0, i32 32
  %74 = load i8*, i8** %m_pSrc53, align 8, !tbaa !56
  %idx.ext54 = zext i32 %72 to i64
  %add.ptr55 = getelementptr inbounds i8, i8* %74, i64 %idx.ext54
  store i8* %add.ptr55, i8** %m_pSrc53, align 8, !tbaa !56
  %75 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %76 = load i32, i32* %n, align 4, !tbaa !10
  %add56 = add i32 %75, %76
  %and57 = and i32 %add56, 32767
  store i32 %and57, i32* %dst_pos, align 4, !tbaa !10
  %77 = load i32, i32* %n, align 4, !tbaa !10
  %78 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  %sub58 = sub i32 %78, %77
  store i32 %sub58, i32* %num_bytes_to_process, align 4, !tbaa !10
  %79 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %79) #10
  br label %while.cond14

while.end:                                        ; preds = %while.cond14
  %80 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %sub59 = sub i32 32768, %80
  %81 = load i32, i32* %dict_size, align 4, !tbaa !10
  %cmp60 = icmp ult i32 %sub59, %81
  br i1 %cmp60, label %cond.true62, label %cond.false64

cond.true62:                                      ; preds = %while.end
  %82 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %sub63 = sub i32 32768, %82
  br label %cond.end65

cond.false64:                                     ; preds = %while.end
  %83 = load i32, i32* %dict_size, align 4, !tbaa !10
  br label %cond.end65

cond.end65:                                       ; preds = %cond.false64, %cond.true62
  %cond66 = phi i32 [ %sub63, %cond.true62 ], [ %83, %cond.false64 ]
  store i32 %cond66, i32* %dict_size, align 4, !tbaa !10
  %84 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flush67 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %84, i32 0, i32 31
  %85 = load i32, i32* %m_flush67, align 8, !tbaa !55
  %tobool68 = icmp ne i32 %85, 0
  br i1 %tobool68, label %if.end72, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end65
  %86 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %cmp69 = icmp ult i32 %86, 4096
  br i1 %cmp69, label %if.then71, label %if.end72

if.then71:                                        ; preds = %land.lhs.true
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup377

if.end72:                                         ; preds = %land.lhs.true, %cond.end65
  br label %while.cond73

while.cond73:                                     ; preds = %cleanup.cont308, %if.end72
  %87 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %cmp74 = icmp uge i32 %87, 4
  br i1 %cmp74, label %while.body76, label %while.end309

while.body76:                                     ; preds = %while.cond73
  %88 = bitcast i32* %cur_match_dist to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %88) #10
  %89 = bitcast i32* %cur_match_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %89) #10
  store i32 1, i32* %cur_match_len, align 4, !tbaa !10
  %90 = bitcast i8** %pCur_dict to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %90) #10
  %91 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict77 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %91, i32 0, i32 35
  %arraydecay78 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict77, i64 0, i64 0
  %92 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %idx.ext79 = zext i32 %92 to i64
  %add.ptr80 = getelementptr inbounds i8, i8* %arraydecay78, i64 %idx.ext79
  store i8* %add.ptr80, i8** %pCur_dict, align 8, !tbaa !8
  %93 = bitcast i32* %first_trigram to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %93) #10
  %94 = load i8*, i8** %pCur_dict, align 8, !tbaa !8
  %call81 = call i32 @TDEFL_READ_UNALIGNED_WORD32(i8* %94)
  %and82 = and i32 %call81, 16777215
  store i32 %and82, i32* %first_trigram, align 4, !tbaa !10
  %95 = bitcast i32* %hash to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %95) #10
  %96 = load i32, i32* %first_trigram, align 4, !tbaa !10
  %97 = load i32, i32* %first_trigram, align 4, !tbaa !10
  %shr = lshr i32 %97, 17
  %xor = xor i32 %96, %shr
  %and83 = and i32 %xor, 4095
  store i32 %and83, i32* %hash, align 4, !tbaa !10
  %98 = bitcast i32* %probe_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %98) #10
  %99 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %99, i32 0, i32 41
  %100 = load i32, i32* %hash, align 4, !tbaa !10
  %idxprom = zext i32 %100 to i64
  %arrayidx = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash, i64 0, i64 %idxprom
  %101 = load i16, i16* %arrayidx, align 2, !tbaa !88
  %conv84 = zext i16 %101 to i32
  store i32 %conv84, i32* %probe_pos, align 4, !tbaa !10
  %102 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %conv85 = trunc i32 %102 to i16
  %103 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash86 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %103, i32 0, i32 41
  %104 = load i32, i32* %hash, align 4, !tbaa !10
  %idxprom87 = zext i32 %104 to i64
  %arrayidx88 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash86, i64 0, i64 %idxprom87
  store i16 %conv85, i16* %arrayidx88, align 2, !tbaa !88
  %105 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %106 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %sub89 = sub i32 %105, %106
  %conv90 = trunc i32 %sub89 to i16
  %conv91 = zext i16 %conv90 to i32
  store i32 %conv91, i32* %cur_match_dist, align 4, !tbaa !10
  %107 = load i32, i32* %dict_size, align 4, !tbaa !10
  %cmp92 = icmp ule i32 %conv91, %107
  br i1 %cmp92, label %land.lhs.true94, label %if.else234

land.lhs.true94:                                  ; preds = %while.body76
  %108 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict95 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %108, i32 0, i32 35
  %arraydecay96 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict95, i64 0, i64 0
  %109 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %and97 = and i32 %109, 32767
  store i32 %and97, i32* %probe_pos, align 4, !tbaa !10
  %idx.ext98 = zext i32 %and97 to i64
  %add.ptr99 = getelementptr inbounds i8, i8* %arraydecay96, i64 %idx.ext98
  %call100 = call i32 @TDEFL_READ_UNALIGNED_WORD32(i8* %add.ptr99)
  %and101 = and i32 %call100, 16777215
  %110 = load i32, i32* %first_trigram, align 4, !tbaa !10
  %cmp102 = icmp eq i32 %and101, %110
  br i1 %cmp102, label %if.then104, label %if.else234

if.then104:                                       ; preds = %land.lhs.true94
  %111 = bitcast i16** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %111) #10
  %112 = load i8*, i8** %pCur_dict, align 8, !tbaa !8
  %113 = bitcast i8* %112 to i16*
  store i16* %113, i16** %p, align 8, !tbaa !8
  %114 = bitcast i16** %q to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %114) #10
  %115 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict105 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %115, i32 0, i32 35
  %arraydecay106 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict105, i64 0, i64 0
  %116 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %idx.ext107 = zext i32 %116 to i64
  %add.ptr108 = getelementptr inbounds i8, i8* %arraydecay106, i64 %idx.ext107
  %117 = bitcast i8* %add.ptr108 to i16*
  store i16* %117, i16** %q, align 8, !tbaa !8
  %118 = bitcast i32* %probe_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %118) #10
  store i32 32, i32* %probe_len, align 4, !tbaa !10
  br label %do.body

do.body:                                          ; preds = %land.end146, %if.then104
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %119 = load i16*, i16** %p, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i16, i16* %119, i32 1
  store i16* %incdec.ptr, i16** %p, align 8, !tbaa !8
  %call109 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr)
  %conv110 = zext i16 %call109 to i32
  %120 = load i16*, i16** %q, align 8, !tbaa !8
  %incdec.ptr111 = getelementptr inbounds i16, i16* %120, i32 1
  store i16* %incdec.ptr111, i16** %q, align 8, !tbaa !8
  %call112 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr111)
  %conv113 = zext i16 %call112 to i32
  %cmp114 = icmp eq i32 %conv110, %conv113
  br i1 %cmp114, label %land.lhs.true116, label %land.end146

land.lhs.true116:                                 ; preds = %do.cond
  %121 = load i16*, i16** %p, align 8, !tbaa !8
  %incdec.ptr117 = getelementptr inbounds i16, i16* %121, i32 1
  store i16* %incdec.ptr117, i16** %p, align 8, !tbaa !8
  %call118 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr117)
  %conv119 = zext i16 %call118 to i32
  %122 = load i16*, i16** %q, align 8, !tbaa !8
  %incdec.ptr120 = getelementptr inbounds i16, i16* %122, i32 1
  store i16* %incdec.ptr120, i16** %q, align 8, !tbaa !8
  %call121 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr120)
  %conv122 = zext i16 %call121 to i32
  %cmp123 = icmp eq i32 %conv119, %conv122
  br i1 %cmp123, label %land.lhs.true125, label %land.end146

land.lhs.true125:                                 ; preds = %land.lhs.true116
  %123 = load i16*, i16** %p, align 8, !tbaa !8
  %incdec.ptr126 = getelementptr inbounds i16, i16* %123, i32 1
  store i16* %incdec.ptr126, i16** %p, align 8, !tbaa !8
  %call127 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr126)
  %conv128 = zext i16 %call127 to i32
  %124 = load i16*, i16** %q, align 8, !tbaa !8
  %incdec.ptr129 = getelementptr inbounds i16, i16* %124, i32 1
  store i16* %incdec.ptr129, i16** %q, align 8, !tbaa !8
  %call130 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr129)
  %conv131 = zext i16 %call130 to i32
  %cmp132 = icmp eq i32 %conv128, %conv131
  br i1 %cmp132, label %land.lhs.true134, label %land.end146

land.lhs.true134:                                 ; preds = %land.lhs.true125
  %125 = load i16*, i16** %p, align 8, !tbaa !8
  %incdec.ptr135 = getelementptr inbounds i16, i16* %125, i32 1
  store i16* %incdec.ptr135, i16** %p, align 8, !tbaa !8
  %call136 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr135)
  %conv137 = zext i16 %call136 to i32
  %126 = load i16*, i16** %q, align 8, !tbaa !8
  %incdec.ptr138 = getelementptr inbounds i16, i16* %126, i32 1
  store i16* %incdec.ptr138, i16** %q, align 8, !tbaa !8
  %call139 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr138)
  %conv140 = zext i16 %call139 to i32
  %cmp141 = icmp eq i32 %conv137, %conv140
  br i1 %cmp141, label %land.rhs143, label %land.end146

land.rhs143:                                      ; preds = %land.lhs.true134
  %127 = load i32, i32* %probe_len, align 4, !tbaa !10
  %dec = add i32 %127, -1
  store i32 %dec, i32* %probe_len, align 4, !tbaa !10
  %cmp144 = icmp ugt i32 %dec, 0
  br label %land.end146

land.end146:                                      ; preds = %land.rhs143, %land.lhs.true134, %land.lhs.true125, %land.lhs.true116, %do.cond
  %128 = phi i1 [ false, %land.lhs.true134 ], [ false, %land.lhs.true125 ], [ false, %land.lhs.true116 ], [ false, %do.cond ], [ %cmp144, %land.rhs143 ]
  br i1 %128, label %do.body, label %do.end

do.end:                                           ; preds = %land.end146
  %129 = load i16*, i16** %p, align 8, !tbaa !8
  %130 = load i8*, i8** %pCur_dict, align 8, !tbaa !8
  %131 = bitcast i8* %130 to i16*
  %sub.ptr.lhs.cast = ptrtoint i16* %129 to i64
  %sub.ptr.rhs.cast = ptrtoint i16* %131 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 2
  %conv147 = trunc i64 %sub.ptr.div to i32
  %mul = mul i32 %conv147, 2
  %132 = load i16*, i16** %p, align 8, !tbaa !8
  %133 = bitcast i16* %132 to i8*
  %134 = load i8, i8* %133, align 1, !tbaa !12
  %conv148 = zext i8 %134 to i32
  %135 = load i16*, i16** %q, align 8, !tbaa !8
  %136 = bitcast i16* %135 to i8*
  %137 = load i8, i8* %136, align 1, !tbaa !12
  %conv149 = zext i8 %137 to i32
  %cmp150 = icmp eq i32 %conv148, %conv149
  %conv151 = zext i1 %cmp150 to i32
  %add152 = add i32 %mul, %conv151
  store i32 %add152, i32* %cur_match_len, align 4, !tbaa !10
  %138 = load i32, i32* %probe_len, align 4, !tbaa !10
  %tobool153 = icmp ne i32 %138, 0
  br i1 %tobool153, label %if.end157, label %if.then154

if.then154:                                       ; preds = %do.end
  %139 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %tobool155 = icmp ne i32 %139, 0
  %140 = zext i1 %tobool155 to i64
  %cond156 = select i1 %tobool155, i32 258, i32 0
  store i32 %cond156, i32* %cur_match_len, align 4, !tbaa !10
  br label %if.end157

if.end157:                                        ; preds = %if.then154, %do.end
  %141 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp158 = icmp ult i32 %141, 3
  br i1 %cmp158, label %if.then165, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end157
  %142 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp160 = icmp eq i32 %142, 3
  br i1 %cmp160, label %land.lhs.true162, label %if.else

land.lhs.true162:                                 ; preds = %lor.lhs.false
  %143 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %cmp163 = icmp uge i32 %143, 8192
  br i1 %cmp163, label %if.then165, label %if.else

if.then165:                                       ; preds = %land.lhs.true162, %if.end157
  store i32 1, i32* %cur_match_len, align 4, !tbaa !10
  %144 = load i32, i32* %first_trigram, align 4, !tbaa !10
  %conv166 = trunc i32 %144 to i8
  %145 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr167, i8** %pLZ_code_buf, align 8, !tbaa !8
  store i8 %conv166, i8* %145, align 1, !tbaa !12
  %146 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  %147 = load i8, i8* %146, align 1, !tbaa !12
  %conv168 = zext i8 %147 to i32
  %shr169 = ashr i32 %conv168, 1
  %conv170 = trunc i32 %shr169 to i8
  %148 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  store i8 %conv170, i8* %148, align 1, !tbaa !12
  %149 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %149, i32 0, i32 36
  %arrayidx171 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %150 = load i32, i32* %first_trigram, align 4, !tbaa !10
  %conv172 = trunc i32 %150 to i8
  %idxprom173 = zext i8 %conv172 to i64
  %arrayidx174 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx171, i64 0, i64 %idxprom173
  %151 = load i16, i16* %arrayidx174, align 2, !tbaa !88
  %inc = add i16 %151, 1
  store i16 %inc, i16* %arrayidx174, align 2, !tbaa !88
  br label %if.end233

if.else:                                          ; preds = %land.lhs.true162, %lor.lhs.false
  %152 = bitcast i32* %s0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %152) #10
  %153 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %153) #10
  %154 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %155 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %cmp175 = icmp ult i32 %154, %155
  br i1 %cmp175, label %cond.true177, label %cond.false178

cond.true177:                                     ; preds = %if.else
  %156 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  br label %cond.end179

cond.false178:                                    ; preds = %if.else
  %157 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  br label %cond.end179

cond.end179:                                      ; preds = %cond.false178, %cond.true177
  %cond180 = phi i32 [ %156, %cond.true177 ], [ %157, %cond.false178 ]
  store i32 %cond180, i32* %cur_match_len, align 4, !tbaa !10
  %158 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp181 = icmp uge i32 %158, 3
  br i1 %cmp181, label %land.lhs.true183, label %land.end189

land.lhs.true183:                                 ; preds = %cond.end179
  %159 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %cmp184 = icmp uge i32 %159, 1
  br i1 %cmp184, label %land.rhs186, label %land.end189

land.rhs186:                                      ; preds = %land.lhs.true183
  %160 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %cmp187 = icmp ule i32 %160, 32768
  br label %land.end189

land.end189:                                      ; preds = %land.rhs186, %land.lhs.true183, %cond.end179
  %161 = phi i1 [ false, %land.lhs.true183 ], [ false, %cond.end179 ], [ %cmp187, %land.rhs186 ]
  %lnot = xor i1 %161, true
  %lnot.ext = zext i1 %lnot to i32
  %conv190 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv190, i64 0)
  %tobool191 = icmp ne i64 %expval, 0
  br i1 %tobool191, label %cond.true192, label %cond.false193

cond.true192:                                     ; preds = %land.end189
  call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.tdefl_compress_fast, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1558, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str.58, i64 0, i64 0)) #13
  unreachable

162:                                              ; No predecessors!
  br label %cond.end194

cond.false193:                                    ; preds = %land.end189
  br label %cond.end194

cond.end194:                                      ; preds = %cond.false193, %162
  %163 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %dec195 = add i32 %163, -1
  store i32 %dec195, i32* %cur_match_dist, align 4, !tbaa !10
  %164 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %sub196 = sub i32 %164, 3
  %conv197 = trunc i32 %sub196 to i8
  %165 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %arrayidx198 = getelementptr inbounds i8, i8* %165, i64 0
  store i8 %conv197, i8* %arrayidx198, align 1, !tbaa !12
  %166 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %arrayidx199 = getelementptr inbounds i8, i8* %166, i64 1
  %167 = bitcast i32* %cur_match_dist to i8*
  %168 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %arrayidx200 = getelementptr inbounds i8, i8* %168, i64 1
  %169 = call i64 @llvm.objectsize.i64.p0i8(i8* %arrayidx200, i1 false, i1 true, i1 false)
  %call201 = call i8* @__memcpy_chk(i8* %arrayidx199, i8* %167, i64 4, i64 %169) #10
  %170 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %add.ptr202 = getelementptr inbounds i8, i8* %170, i64 3
  store i8* %add.ptr202, i8** %pLZ_code_buf, align 8, !tbaa !8
  %171 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  %172 = load i8, i8* %171, align 1, !tbaa !12
  %conv203 = zext i8 %172 to i32
  %shr204 = ashr i32 %conv203, 1
  %or = or i32 %shr204, 128
  %conv205 = trunc i32 %or to i8
  %173 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  store i8 %conv205, i8* %173, align 1, !tbaa !12
  %174 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %and206 = and i32 %174, 511
  %idxprom207 = zext i32 %and206 to i64
  %arrayidx208 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_sym, i64 0, i64 %idxprom207
  %175 = load i8, i8* %arrayidx208, align 1, !tbaa !12
  %conv209 = zext i8 %175 to i32
  store i32 %conv209, i32* %s0, align 4, !tbaa !10
  %176 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %shr210 = lshr i32 %176, 8
  %idxprom211 = zext i32 %shr210 to i64
  %arrayidx212 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_sym, i64 0, i64 %idxprom211
  %177 = load i8, i8* %arrayidx212, align 1, !tbaa !12
  %conv213 = zext i8 %177 to i32
  store i32 %conv213, i32* %s1, align 4, !tbaa !10
  %178 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count214 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %178, i32 0, i32 36
  %arrayidx215 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count214, i64 0, i64 1
  %179 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %cmp216 = icmp ult i32 %179, 512
  br i1 %cmp216, label %cond.true218, label %cond.false219

cond.true218:                                     ; preds = %cond.end194
  %180 = load i32, i32* %s0, align 4, !tbaa !10
  br label %cond.end220

cond.false219:                                    ; preds = %cond.end194
  %181 = load i32, i32* %s1, align 4, !tbaa !10
  br label %cond.end220

cond.end220:                                      ; preds = %cond.false219, %cond.true218
  %cond221 = phi i32 [ %180, %cond.true218 ], [ %181, %cond.false219 ]
  %idxprom222 = zext i32 %cond221 to i64
  %arrayidx223 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx215, i64 0, i64 %idxprom222
  %182 = load i16, i16* %arrayidx223, align 2, !tbaa !88
  %inc224 = add i16 %182, 1
  store i16 %inc224, i16* %arrayidx223, align 2, !tbaa !88
  %183 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count225 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %183, i32 0, i32 36
  %arrayidx226 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count225, i64 0, i64 0
  %184 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %sub227 = sub i32 %184, 3
  %idxprom228 = zext i32 %sub227 to i64
  %arrayidx229 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom228
  %185 = load i16, i16* %arrayidx229, align 2, !tbaa !88
  %idxprom230 = zext i16 %185 to i64
  %arrayidx231 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx226, i64 0, i64 %idxprom230
  %186 = load i16, i16* %arrayidx231, align 2, !tbaa !88
  %inc232 = add i16 %186, 1
  store i16 %inc232, i16* %arrayidx231, align 2, !tbaa !88
  %187 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %187) #10
  %188 = bitcast i32* %s0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %188) #10
  br label %if.end233

if.end233:                                        ; preds = %cond.end220, %if.then165
  %189 = bitcast i32* %probe_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %189) #10
  %190 = bitcast i16** %q to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %190) #10
  %191 = bitcast i16** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %191) #10
  br label %if.end246

if.else234:                                       ; preds = %land.lhs.true94, %while.body76
  %192 = load i32, i32* %first_trigram, align 4, !tbaa !10
  %conv235 = trunc i32 %192 to i8
  %193 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %incdec.ptr236 = getelementptr inbounds i8, i8* %193, i32 1
  store i8* %incdec.ptr236, i8** %pLZ_code_buf, align 8, !tbaa !8
  store i8 %conv235, i8* %193, align 1, !tbaa !12
  %194 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  %195 = load i8, i8* %194, align 1, !tbaa !12
  %conv237 = zext i8 %195 to i32
  %shr238 = ashr i32 %conv237, 1
  %conv239 = trunc i32 %shr238 to i8
  %196 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  store i8 %conv239, i8* %196, align 1, !tbaa !12
  %197 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count240 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %197, i32 0, i32 36
  %arrayidx241 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count240, i64 0, i64 0
  %198 = load i32, i32* %first_trigram, align 4, !tbaa !10
  %conv242 = trunc i32 %198 to i8
  %idxprom243 = zext i8 %conv242 to i64
  %arrayidx244 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx241, i64 0, i64 %idxprom243
  %199 = load i16, i16* %arrayidx244, align 2, !tbaa !88
  %inc245 = add i16 %199, 1
  store i16 %inc245, i16* %arrayidx244, align 2, !tbaa !88
  br label %if.end246

if.end246:                                        ; preds = %if.else234, %if.end233
  %200 = load i32, i32* %num_flags_left, align 4, !tbaa !10
  %dec247 = add i32 %200, -1
  store i32 %dec247, i32* %num_flags_left, align 4, !tbaa !10
  %cmp248 = icmp eq i32 %dec247, 0
  br i1 %cmp248, label %if.then250, label %if.end252

if.then250:                                       ; preds = %if.end246
  store i32 8, i32* %num_flags_left, align 4, !tbaa !10
  %201 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %incdec.ptr251 = getelementptr inbounds i8, i8* %201, i32 1
  store i8* %incdec.ptr251, i8** %pLZ_code_buf, align 8, !tbaa !8
  store i8* %201, i8** %pLZ_flags, align 8, !tbaa !8
  br label %if.end252

if.end252:                                        ; preds = %if.then250, %if.end246
  %202 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %203 = load i32, i32* %total_lz_bytes, align 4, !tbaa !10
  %add253 = add i32 %203, %202
  store i32 %add253, i32* %total_lz_bytes, align 4, !tbaa !10
  %204 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %205 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %add254 = add i32 %205, %204
  store i32 %add254, i32* %lookahead_pos, align 4, !tbaa !10
  %206 = load i32, i32* %dict_size, align 4, !tbaa !10
  %207 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %add255 = add i32 %206, %207
  %cmp256 = icmp ult i32 %add255, 32768
  br i1 %cmp256, label %cond.true258, label %cond.false260

cond.true258:                                     ; preds = %if.end252
  %208 = load i32, i32* %dict_size, align 4, !tbaa !10
  %209 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %add259 = add i32 %208, %209
  br label %cond.end261

cond.false260:                                    ; preds = %if.end252
  br label %cond.end261

cond.end261:                                      ; preds = %cond.false260, %cond.true258
  %cond262 = phi i32 [ %add259, %cond.true258 ], [ 32768, %cond.false260 ]
  store i32 %cond262, i32* %dict_size, align 4, !tbaa !10
  %210 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %211 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %add263 = add i32 %210, %211
  %and264 = and i32 %add263, 32767
  store i32 %and264, i32* %cur_pos, align 4, !tbaa !10
  %212 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %213 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp265 = icmp uge i32 %212, %213
  %lnot267 = xor i1 %cmp265, true
  %lnot.ext268 = zext i1 %lnot267 to i32
  %conv269 = sext i32 %lnot.ext268 to i64
  %expval270 = call i64 @llvm.expect.i64(i64 %conv269, i64 0)
  %tobool271 = icmp ne i64 %expval270, 0
  br i1 %tobool271, label %cond.true272, label %cond.false273

cond.true272:                                     ; preds = %cond.end261
  call void @__assert_rtn(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @__func__.tdefl_compress_fast, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1595, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.59, i64 0, i64 0)) #13
  unreachable

214:                                              ; No predecessors!
  br label %cond.end274

cond.false273:                                    ; preds = %cond.end261
  br label %cond.end274

cond.end274:                                      ; preds = %cond.false273, %214
  %215 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %216 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %sub275 = sub i32 %216, %215
  store i32 %sub275, i32* %lookahead_size, align 4, !tbaa !10
  %217 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %218 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %218, i32 0, i32 39
  %arrayidx276 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i64 0, i64 65528
  %cmp277 = icmp ugt i8* %217, %arrayidx276
  br i1 %cmp277, label %if.then279, label %if.end300

if.then279:                                       ; preds = %cond.end274
  %219 = bitcast i32* %n280 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %219) #10
  %220 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %221 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos281 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %221, i32 0, i32 6
  store i32 %220, i32* %m_lookahead_pos281, align 4, !tbaa !34
  %222 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %223 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size282 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %223, i32 0, i32 7
  store i32 %222, i32* %m_lookahead_size282, align 8, !tbaa !33
  %224 = load i32, i32* %dict_size, align 4, !tbaa !10
  %225 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size283 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %225, i32 0, i32 8
  store i32 %224, i32* %m_dict_size283, align 4, !tbaa !32
  %226 = load i32, i32* %total_lz_bytes, align 4, !tbaa !10
  %227 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes284 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %227, i32 0, i32 14
  store i32 %226, i32* %m_total_lz_bytes284, align 4, !tbaa !31
  %228 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %229 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf285 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %229, i32 0, i32 9
  store i8* %228, i8** %m_pLZ_code_buf285, align 8, !tbaa !41
  %230 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  %231 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags286 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %231, i32 0, i32 10
  store i8* %230, i8** %m_pLZ_flags286, align 8, !tbaa !42
  %232 = load i32, i32* %num_flags_left, align 4, !tbaa !10
  %233 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left287 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %233, i32 0, i32 13
  store i32 %232, i32* %m_num_flags_left287, align 8, !tbaa !43
  %234 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call288 = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %234, i32 0)
  store i32 %call288, i32* %n280, align 4, !tbaa !10
  %cmp289 = icmp ne i32 %call288, 0
  br i1 %cmp289, label %if.then291, label %if.end295

if.then291:                                       ; preds = %if.then279
  %235 = load i32, i32* %n280, align 4, !tbaa !10
  %cmp292 = icmp slt i32 %235, 0
  %236 = zext i1 %cmp292 to i64
  %cond294 = select i1 %cmp292, i32 0, i32 1
  store i32 %cond294, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end295:                                        ; preds = %if.then279
  %237 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes296 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %237, i32 0, i32 14
  %238 = load i32, i32* %m_total_lz_bytes296, align 4, !tbaa !31
  store i32 %238, i32* %total_lz_bytes, align 4, !tbaa !10
  %239 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf297 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %239, i32 0, i32 9
  %240 = load i8*, i8** %m_pLZ_code_buf297, align 8, !tbaa !41
  store i8* %240, i8** %pLZ_code_buf, align 8, !tbaa !8
  %241 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags298 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %241, i32 0, i32 10
  %242 = load i8*, i8** %m_pLZ_flags298, align 8, !tbaa !42
  store i8* %242, i8** %pLZ_flags, align 8, !tbaa !8
  %243 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left299 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %243, i32 0, i32 13
  %244 = load i32, i32* %m_num_flags_left299, align 8, !tbaa !43
  store i32 %244, i32* %num_flags_left, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end295, %if.then291
  %245 = bitcast i32* %n280 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %245) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup301 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end300

if.end300:                                        ; preds = %cleanup.cont, %cond.end274
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup301

cleanup301:                                       ; preds = %if.end300, %cleanup
  %246 = bitcast i32* %probe_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %246) #10
  %247 = bitcast i32* %hash to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %247) #10
  %248 = bitcast i32* %first_trigram to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %248) #10
  %249 = bitcast i8** %pCur_dict to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %249) #10
  %250 = bitcast i32* %cur_match_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %250) #10
  %251 = bitcast i32* %cur_match_dist to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %251) #10
  %cleanup.dest307 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest307, label %cleanup377 [
    i32 0, label %cleanup.cont308
  ]

cleanup.cont308:                                  ; preds = %cleanup301
  br label %while.cond73

while.end309:                                     ; preds = %while.cond73
  br label %while.cond310

while.cond310:                                    ; preds = %cleanup.cont375, %while.end309
  %252 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %tobool311 = icmp ne i32 %252, 0
  br i1 %tobool311, label %while.body312, label %while.end376

while.body312:                                    ; preds = %while.cond310
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %lit) #10
  %253 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict313 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %253, i32 0, i32 35
  %254 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %idxprom314 = zext i32 %254 to i64
  %arrayidx315 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict313, i64 0, i64 %idxprom314
  %255 = load i8, i8* %arrayidx315, align 1, !tbaa !12
  store i8 %255, i8* %lit, align 1, !tbaa !12
  %256 = load i32, i32* %total_lz_bytes, align 4, !tbaa !10
  %inc316 = add i32 %256, 1
  store i32 %inc316, i32* %total_lz_bytes, align 4, !tbaa !10
  %257 = load i8, i8* %lit, align 1, !tbaa !12
  %258 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %incdec.ptr317 = getelementptr inbounds i8, i8* %258, i32 1
  store i8* %incdec.ptr317, i8** %pLZ_code_buf, align 8, !tbaa !8
  store i8 %257, i8* %258, align 1, !tbaa !12
  %259 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  %260 = load i8, i8* %259, align 1, !tbaa !12
  %conv318 = zext i8 %260 to i32
  %shr319 = ashr i32 %conv318, 1
  %conv320 = trunc i32 %shr319 to i8
  %261 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  store i8 %conv320, i8* %261, align 1, !tbaa !12
  %262 = load i32, i32* %num_flags_left, align 4, !tbaa !10
  %dec321 = add i32 %262, -1
  store i32 %dec321, i32* %num_flags_left, align 4, !tbaa !10
  %cmp322 = icmp eq i32 %dec321, 0
  br i1 %cmp322, label %if.then324, label %if.end326

if.then324:                                       ; preds = %while.body312
  store i32 8, i32* %num_flags_left, align 4, !tbaa !10
  %263 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %incdec.ptr325 = getelementptr inbounds i8, i8* %263, i32 1
  store i8* %incdec.ptr325, i8** %pLZ_code_buf, align 8, !tbaa !8
  store i8* %263, i8** %pLZ_flags, align 8, !tbaa !8
  br label %if.end326

if.end326:                                        ; preds = %if.then324, %while.body312
  %264 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count327 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %264, i32 0, i32 36
  %arrayidx328 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count327, i64 0, i64 0
  %265 = load i8, i8* %lit, align 1, !tbaa !12
  %idxprom329 = zext i8 %265 to i64
  %arrayidx330 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx328, i64 0, i64 %idxprom329
  %266 = load i16, i16* %arrayidx330, align 2, !tbaa !88
  %inc331 = add i16 %266, 1
  store i16 %inc331, i16* %arrayidx330, align 2, !tbaa !88
  %267 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %inc332 = add i32 %267, 1
  store i32 %inc332, i32* %lookahead_pos, align 4, !tbaa !10
  %268 = load i32, i32* %dict_size, align 4, !tbaa !10
  %add333 = add i32 %268, 1
  %cmp334 = icmp ult i32 %add333, 32768
  br i1 %cmp334, label %cond.true336, label %cond.false338

cond.true336:                                     ; preds = %if.end326
  %269 = load i32, i32* %dict_size, align 4, !tbaa !10
  %add337 = add i32 %269, 1
  br label %cond.end339

cond.false338:                                    ; preds = %if.end326
  br label %cond.end339

cond.end339:                                      ; preds = %cond.false338, %cond.true336
  %cond340 = phi i32 [ %add337, %cond.true336 ], [ 32768, %cond.false338 ]
  store i32 %cond340, i32* %dict_size, align 4, !tbaa !10
  %270 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %add341 = add i32 %270, 1
  %and342 = and i32 %add341, 32767
  store i32 %and342, i32* %cur_pos, align 4, !tbaa !10
  %271 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %dec343 = add i32 %271, -1
  store i32 %dec343, i32* %lookahead_size, align 4, !tbaa !10
  %272 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %273 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf344 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %273, i32 0, i32 39
  %arrayidx345 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf344, i64 0, i64 65528
  %cmp346 = icmp ugt i8* %272, %arrayidx345
  br i1 %cmp346, label %if.then348, label %if.end372

if.then348:                                       ; preds = %cond.end339
  %274 = bitcast i32* %n349 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %274) #10
  %275 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %276 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos350 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %276, i32 0, i32 6
  store i32 %275, i32* %m_lookahead_pos350, align 4, !tbaa !34
  %277 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %278 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size351 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %278, i32 0, i32 7
  store i32 %277, i32* %m_lookahead_size351, align 8, !tbaa !33
  %279 = load i32, i32* %dict_size, align 4, !tbaa !10
  %280 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size352 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %280, i32 0, i32 8
  store i32 %279, i32* %m_dict_size352, align 4, !tbaa !32
  %281 = load i32, i32* %total_lz_bytes, align 4, !tbaa !10
  %282 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes353 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %282, i32 0, i32 14
  store i32 %281, i32* %m_total_lz_bytes353, align 4, !tbaa !31
  %283 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %284 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf354 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %284, i32 0, i32 9
  store i8* %283, i8** %m_pLZ_code_buf354, align 8, !tbaa !41
  %285 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  %286 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags355 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %286, i32 0, i32 10
  store i8* %285, i8** %m_pLZ_flags355, align 8, !tbaa !42
  %287 = load i32, i32* %num_flags_left, align 4, !tbaa !10
  %288 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left356 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %288, i32 0, i32 13
  store i32 %287, i32* %m_num_flags_left356, align 8, !tbaa !43
  %289 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call357 = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %289, i32 0)
  store i32 %call357, i32* %n349, align 4, !tbaa !10
  %cmp358 = icmp ne i32 %call357, 0
  br i1 %cmp358, label %if.then360, label %if.end364

if.then360:                                       ; preds = %if.then348
  %290 = load i32, i32* %n349, align 4, !tbaa !10
  %cmp361 = icmp slt i32 %290, 0
  %291 = zext i1 %cmp361 to i64
  %cond363 = select i1 %cmp361, i32 0, i32 1
  store i32 %cond363, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup369

if.end364:                                        ; preds = %if.then348
  %292 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes365 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %292, i32 0, i32 14
  %293 = load i32, i32* %m_total_lz_bytes365, align 4, !tbaa !31
  store i32 %293, i32* %total_lz_bytes, align 4, !tbaa !10
  %294 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf366 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %294, i32 0, i32 9
  %295 = load i8*, i8** %m_pLZ_code_buf366, align 8, !tbaa !41
  store i8* %295, i8** %pLZ_code_buf, align 8, !tbaa !8
  %296 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags367 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %296, i32 0, i32 10
  %297 = load i8*, i8** %m_pLZ_flags367, align 8, !tbaa !42
  store i8* %297, i8** %pLZ_flags, align 8, !tbaa !8
  %298 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left368 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %298, i32 0, i32 13
  %299 = load i32, i32* %m_num_flags_left368, align 8, !tbaa !43
  store i32 %299, i32* %num_flags_left, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup369

cleanup369:                                       ; preds = %if.end364, %if.then360
  %300 = bitcast i32* %n349 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %300) #10
  %cleanup.dest370 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest370, label %cleanup373 [
    i32 0, label %cleanup.cont371
  ]

cleanup.cont371:                                  ; preds = %cleanup369
  br label %if.end372

if.end372:                                        ; preds = %cleanup.cont371, %cond.end339
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup373

cleanup373:                                       ; preds = %if.end372, %cleanup369
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %lit) #10
  %cleanup.dest374 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest374, label %cleanup377 [
    i32 0, label %cleanup.cont375
  ]

cleanup.cont375:                                  ; preds = %cleanup373
  br label %while.cond310

while.end376:                                     ; preds = %while.cond310
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup377

cleanup377:                                       ; preds = %while.end376, %cleanup373, %cleanup301, %if.then71
  %301 = bitcast i32* %num_bytes_to_process to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %301) #10
  %302 = bitcast i32* %dst_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %302) #10
  %303 = bitcast i32* %TDEFL_COMP_FAST_LOOKAHEAD_SIZE to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %303) #10
  %cleanup.dest380 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest380, label %cleanup390 [
    i32 0, label %cleanup.cont381
    i32 3, label %while.end382
  ]

cleanup.cont381:                                  ; preds = %cleanup377
  br label %while.cond

while.end382:                                     ; preds = %cleanup377, %lor.end
  %304 = load i32, i32* %lookahead_pos, align 4, !tbaa !10
  %305 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos383 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %305, i32 0, i32 6
  store i32 %304, i32* %m_lookahead_pos383, align 4, !tbaa !34
  %306 = load i32, i32* %lookahead_size, align 4, !tbaa !10
  %307 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size384 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %307, i32 0, i32 7
  store i32 %306, i32* %m_lookahead_size384, align 8, !tbaa !33
  %308 = load i32, i32* %dict_size, align 4, !tbaa !10
  %309 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size385 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %309, i32 0, i32 8
  store i32 %308, i32* %m_dict_size385, align 4, !tbaa !32
  %310 = load i32, i32* %total_lz_bytes, align 4, !tbaa !10
  %311 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes386 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %311, i32 0, i32 14
  store i32 %310, i32* %m_total_lz_bytes386, align 4, !tbaa !31
  %312 = load i8*, i8** %pLZ_code_buf, align 8, !tbaa !8
  %313 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf387 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %313, i32 0, i32 9
  store i8* %312, i8** %m_pLZ_code_buf387, align 8, !tbaa !41
  %314 = load i8*, i8** %pLZ_flags, align 8, !tbaa !8
  %315 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags388 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %315, i32 0, i32 10
  store i8* %314, i8** %m_pLZ_flags388, align 8, !tbaa !42
  %316 = load i32, i32* %num_flags_left, align 4, !tbaa !10
  %317 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left389 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %317, i32 0, i32 13
  store i32 %316, i32* %m_num_flags_left389, align 8, !tbaa !43
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup390

cleanup390:                                       ; preds = %while.end382, %cleanup377
  %318 = bitcast i32* %cur_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %318) #10
  %319 = bitcast i8** %pLZ_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %319) #10
  %320 = bitcast i8** %pLZ_code_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %320) #10
  %321 = bitcast i32* %num_flags_left to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %321) #10
  %322 = bitcast i32* %total_lz_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %322) #10
  %323 = bitcast i32* %dict_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %323) #10
  %324 = bitcast i32* %lookahead_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %324) #10
  %325 = bitcast i32* %lookahead_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %325) #10
  %326 = load i32, i32* %retval, align 4
  ret i32 %326
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @tdefl_compress_normal(%struct.tdefl_compressor* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pSrc = alloca i8*, align 8
  %src_buf_left = alloca i64, align 8
  %flush = alloca i32, align 4
  %len_to_move = alloca i32, align 4
  %cur_match_dist = alloca i32, align 4
  %cur_match_len = alloca i32, align 4
  %cur_pos = alloca i32, align 4
  %dst_pos = alloca i32, align 4
  %ins_pos = alloca i32, align 4
  %hash = alloca i32, align 4
  %num_bytes_to_process = alloca i32, align 4
  %pSrc_end = alloca i8*, align 8
  %c = alloca i8, align 1
  %c66 = alloca i8, align 1
  %dst_pos68 = alloca i32, align 4
  %ins_pos91 = alloca i32, align 4
  %hash97 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %c166 = alloca i8, align 1
  %n = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %0 = bitcast i8** %pSrc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %1, i32 0, i32 32
  %2 = load i8*, i8** %m_pSrc, align 8, !tbaa !56
  store i8* %2, i8** %pSrc, align 8, !tbaa !8
  %3 = bitcast i64* %src_buf_left to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %4, i32 0, i32 33
  %5 = load i64, i64* %m_src_buf_left, align 8, !tbaa !57
  store i64 %5, i64* %src_buf_left, align 8, !tbaa !4
  %6 = bitcast i32* %flush to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #10
  %7 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flush = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %7, i32 0, i32 31
  %8 = load i32, i32* %m_flush, align 8, !tbaa !55
  store i32 %8, i32* %flush, align 4, !tbaa !12
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont340, %entry
  %9 = load i64, i64* %src_buf_left, align 8, !tbaa !4
  %tobool = icmp ne i64 %9, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.cond
  %10 = load i32, i32* %flush, align 4, !tbaa !12
  %tobool1 = icmp ne i32 %10, 0
  br i1 %tobool1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %11, i32 0, i32 7
  %12 = load i32, i32* %m_lookahead_size, align 8, !tbaa !33
  %tobool2 = icmp ne i32 %12, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %13 = phi i1 [ false, %lor.rhs ], [ %tobool2, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %while.cond
  %14 = phi i1 [ true, %while.cond ], [ %13, %land.end ]
  br i1 %14, label %while.body, label %while.end341

while.body:                                       ; preds = %lor.end
  %15 = bitcast i32* %len_to_move to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #10
  %16 = bitcast i32* %cur_match_dist to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #10
  %17 = bitcast i32* %cur_match_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #10
  %18 = bitcast i32* %cur_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #10
  %19 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size3 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %19, i32 0, i32 7
  %20 = load i32, i32* %m_lookahead_size3, align 8, !tbaa !33
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 8
  %22 = load i32, i32* %m_dict_size, align 4, !tbaa !32
  %add = add i32 %20, %22
  %cmp = icmp uge i32 %add, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %23 = bitcast i32* %dst_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #10
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 6
  %25 = load i32, i32* %m_lookahead_pos, align 4, !tbaa !34
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size4 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %26, i32 0, i32 7
  %27 = load i32, i32* %m_lookahead_size4, align 8, !tbaa !33
  %add5 = add i32 %25, %27
  %and = and i32 %add5, 32767
  store i32 %and, i32* %dst_pos, align 4, !tbaa !10
  %28 = bitcast i32* %ins_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #10
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 6
  %30 = load i32, i32* %m_lookahead_pos6, align 4, !tbaa !34
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 7
  %32 = load i32, i32* %m_lookahead_size7, align 8, !tbaa !33
  %add8 = add i32 %30, %32
  %sub = sub i32 %add8, 2
  store i32 %sub, i32* %ins_pos, align 4, !tbaa !10
  %33 = bitcast i32* %hash to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #10
  %34 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %34, i32 0, i32 35
  %35 = load i32, i32* %ins_pos, align 4, !tbaa !10
  %and9 = and i32 %35, 32767
  %idxprom = zext i32 %and9 to i64
  %arrayidx = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict, i64 0, i64 %idxprom
  %36 = load i8, i8* %arrayidx, align 1, !tbaa !12
  %conv = zext i8 %36 to i32
  %shl = shl i32 %conv, 5
  %37 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict10 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %37, i32 0, i32 35
  %38 = load i32, i32* %ins_pos, align 4, !tbaa !10
  %add11 = add i32 %38, 1
  %and12 = and i32 %add11, 32767
  %idxprom13 = zext i32 %and12 to i64
  %arrayidx14 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict10, i64 0, i64 %idxprom13
  %39 = load i8, i8* %arrayidx14, align 1, !tbaa !12
  %conv15 = zext i8 %39 to i32
  %xor = xor i32 %shl, %conv15
  store i32 %xor, i32* %hash, align 4, !tbaa !10
  %40 = bitcast i32* %num_bytes_to_process to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %40) #10
  %41 = load i64, i64* %src_buf_left, align 8, !tbaa !4
  %42 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size16 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %42, i32 0, i32 7
  %43 = load i32, i32* %m_lookahead_size16, align 8, !tbaa !33
  %sub17 = sub i32 258, %43
  %conv18 = zext i32 %sub17 to i64
  %cmp19 = icmp ult i64 %41, %conv18
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %44 = load i64, i64* %src_buf_left, align 8, !tbaa !4
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size21 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 7
  %46 = load i32, i32* %m_lookahead_size21, align 8, !tbaa !33
  %sub22 = sub i32 258, %46
  %conv23 = zext i32 %sub22 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %44, %cond.true ], [ %conv23, %cond.false ]
  %conv24 = trunc i64 %cond to i32
  store i32 %conv24, i32* %num_bytes_to_process, align 4, !tbaa !10
  %47 = bitcast i8** %pSrc_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %47) #10
  %48 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %49 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  %idx.ext = zext i32 %49 to i64
  %add.ptr = getelementptr inbounds i8, i8* %48, i64 %idx.ext
  store i8* %add.ptr, i8** %pSrc_end, align 8, !tbaa !8
  %50 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  %conv25 = zext i32 %50 to i64
  %51 = load i64, i64* %src_buf_left, align 8, !tbaa !4
  %sub26 = sub i64 %51, %conv25
  store i64 %sub26, i64* %src_buf_left, align 8, !tbaa !4
  %52 = load i32, i32* %num_bytes_to_process, align 4, !tbaa !10
  %53 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size27 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %53, i32 0, i32 7
  %54 = load i32, i32* %m_lookahead_size27, align 8, !tbaa !33
  %add28 = add i32 %54, %52
  store i32 %add28, i32* %m_lookahead_size27, align 8, !tbaa !33
  br label %while.cond29

while.cond29:                                     ; preds = %if.end, %cond.end
  %55 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %56 = load i8*, i8** %pSrc_end, align 8, !tbaa !8
  %cmp30 = icmp ne i8* %55, %56
  br i1 %cmp30, label %while.body32, label %while.end

while.body32:                                     ; preds = %while.cond29
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c) #10
  %57 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %incdec.ptr, i8** %pSrc, align 8, !tbaa !8
  %58 = load i8, i8* %57, align 1, !tbaa !12
  store i8 %58, i8* %c, align 1, !tbaa !12
  %59 = load i8, i8* %c, align 1, !tbaa !12
  %60 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict33 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %60, i32 0, i32 35
  %61 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %idxprom34 = zext i32 %61 to i64
  %arrayidx35 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict33, i64 0, i64 %idxprom34
  store i8 %59, i8* %arrayidx35, align 1, !tbaa !12
  %62 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %cmp36 = icmp ult i32 %62, 257
  br i1 %cmp36, label %if.then38, label %if.end

if.then38:                                        ; preds = %while.body32
  %63 = load i8, i8* %c, align 1, !tbaa !12
  %64 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict39 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %64, i32 0, i32 35
  %65 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %add40 = add i32 32768, %65
  %idxprom41 = zext i32 %add40 to i64
  %arrayidx42 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict39, i64 0, i64 %idxprom41
  store i8 %63, i8* %arrayidx42, align 1, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then38, %while.body32
  %66 = load i32, i32* %hash, align 4, !tbaa !10
  %shl43 = shl i32 %66, 5
  %67 = load i8, i8* %c, align 1, !tbaa !12
  %conv44 = zext i8 %67 to i32
  %xor45 = xor i32 %shl43, %conv44
  %and46 = and i32 %xor45, 32767
  store i32 %and46, i32* %hash, align 4, !tbaa !10
  %68 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %68, i32 0, i32 41
  %69 = load i32, i32* %hash, align 4, !tbaa !10
  %idxprom47 = zext i32 %69 to i64
  %arrayidx48 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash, i64 0, i64 %idxprom47
  %70 = load i16, i16* %arrayidx48, align 2, !tbaa !88
  %71 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_next = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %71, i32 0, i32 40
  %72 = load i32, i32* %ins_pos, align 4, !tbaa !10
  %and49 = and i32 %72, 32767
  %idxprom50 = zext i32 %and49 to i64
  %arrayidx51 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next, i64 0, i64 %idxprom50
  store i16 %70, i16* %arrayidx51, align 2, !tbaa !88
  %73 = load i32, i32* %ins_pos, align 4, !tbaa !10
  %conv52 = trunc i32 %73 to i16
  %74 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash53 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %74, i32 0, i32 41
  %75 = load i32, i32* %hash, align 4, !tbaa !10
  %idxprom54 = zext i32 %75 to i64
  %arrayidx55 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash53, i64 0, i64 %idxprom54
  store i16 %conv52, i16* %arrayidx55, align 2, !tbaa !88
  %76 = load i32, i32* %dst_pos, align 4, !tbaa !10
  %add56 = add i32 %76, 1
  %and57 = and i32 %add56, 32767
  store i32 %and57, i32* %dst_pos, align 4, !tbaa !10
  %77 = load i32, i32* %ins_pos, align 4, !tbaa !10
  %inc = add i32 %77, 1
  store i32 %inc, i32* %ins_pos, align 4, !tbaa !10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c) #10
  br label %while.cond29

while.end:                                        ; preds = %while.cond29
  %78 = bitcast i8** %pSrc_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %78) #10
  %79 = bitcast i32* %num_bytes_to_process to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %79) #10
  %80 = bitcast i32* %hash to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %80) #10
  %81 = bitcast i32* %ins_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %81) #10
  %82 = bitcast i32* %dst_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %82) #10
  br label %if.end128

if.else:                                          ; preds = %while.body
  br label %while.cond58

while.cond58:                                     ; preds = %if.end126, %if.else
  %83 = load i64, i64* %src_buf_left, align 8, !tbaa !4
  %tobool59 = icmp ne i64 %83, 0
  br i1 %tobool59, label %land.rhs60, label %land.end64

land.rhs60:                                       ; preds = %while.cond58
  %84 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size61 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %84, i32 0, i32 7
  %85 = load i32, i32* %m_lookahead_size61, align 8, !tbaa !33
  %cmp62 = icmp ult i32 %85, 258
  br label %land.end64

land.end64:                                       ; preds = %land.rhs60, %while.cond58
  %86 = phi i1 [ false, %while.cond58 ], [ %cmp62, %land.rhs60 ]
  br i1 %86, label %while.body65, label %while.end127

while.body65:                                     ; preds = %land.end64
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c66) #10
  %87 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %incdec.ptr67 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %incdec.ptr67, i8** %pSrc, align 8, !tbaa !8
  %88 = load i8, i8* %87, align 1, !tbaa !12
  store i8 %88, i8* %c66, align 1, !tbaa !12
  %89 = bitcast i32* %dst_pos68 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %89) #10
  %90 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos69 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %90, i32 0, i32 6
  %91 = load i32, i32* %m_lookahead_pos69, align 4, !tbaa !34
  %92 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size70 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %92, i32 0, i32 7
  %93 = load i32, i32* %m_lookahead_size70, align 8, !tbaa !33
  %add71 = add i32 %91, %93
  %and72 = and i32 %add71, 32767
  store i32 %and72, i32* %dst_pos68, align 4, !tbaa !10
  %94 = load i64, i64* %src_buf_left, align 8, !tbaa !4
  %dec = add i64 %94, -1
  store i64 %dec, i64* %src_buf_left, align 8, !tbaa !4
  %95 = load i8, i8* %c66, align 1, !tbaa !12
  %96 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict73 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %96, i32 0, i32 35
  %97 = load i32, i32* %dst_pos68, align 4, !tbaa !10
  %idxprom74 = zext i32 %97 to i64
  %arrayidx75 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict73, i64 0, i64 %idxprom74
  store i8 %95, i8* %arrayidx75, align 1, !tbaa !12
  %98 = load i32, i32* %dst_pos68, align 4, !tbaa !10
  %cmp76 = icmp ult i32 %98, 257
  br i1 %cmp76, label %if.then78, label %if.end83

if.then78:                                        ; preds = %while.body65
  %99 = load i8, i8* %c66, align 1, !tbaa !12
  %100 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict79 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %100, i32 0, i32 35
  %101 = load i32, i32* %dst_pos68, align 4, !tbaa !10
  %add80 = add i32 32768, %101
  %idxprom81 = zext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict79, i64 0, i64 %idxprom81
  store i8 %99, i8* %arrayidx82, align 1, !tbaa !12
  br label %if.end83

if.end83:                                         ; preds = %if.then78, %while.body65
  %102 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size84 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %102, i32 0, i32 7
  %103 = load i32, i32* %m_lookahead_size84, align 8, !tbaa !33
  %inc85 = add i32 %103, 1
  store i32 %inc85, i32* %m_lookahead_size84, align 8, !tbaa !33
  %104 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size86 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %104, i32 0, i32 8
  %105 = load i32, i32* %m_dict_size86, align 4, !tbaa !32
  %add87 = add i32 %inc85, %105
  %cmp88 = icmp uge i32 %add87, 3
  br i1 %cmp88, label %if.then90, label %if.end126

if.then90:                                        ; preds = %if.end83
  %106 = bitcast i32* %ins_pos91 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %106) #10
  %107 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos92 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %107, i32 0, i32 6
  %108 = load i32, i32* %m_lookahead_pos92, align 4, !tbaa !34
  %109 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size93 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %109, i32 0, i32 7
  %110 = load i32, i32* %m_lookahead_size93, align 8, !tbaa !33
  %sub94 = sub i32 %110, 1
  %add95 = add i32 %108, %sub94
  %sub96 = sub i32 %add95, 2
  store i32 %sub96, i32* %ins_pos91, align 4, !tbaa !10
  %111 = bitcast i32* %hash97 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %111) #10
  %112 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict98 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %112, i32 0, i32 35
  %113 = load i32, i32* %ins_pos91, align 4, !tbaa !10
  %and99 = and i32 %113, 32767
  %idxprom100 = zext i32 %and99 to i64
  %arrayidx101 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict98, i64 0, i64 %idxprom100
  %114 = load i8, i8* %arrayidx101, align 1, !tbaa !12
  %conv102 = zext i8 %114 to i32
  %shl103 = shl i32 %conv102, 10
  %115 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict104 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %115, i32 0, i32 35
  %116 = load i32, i32* %ins_pos91, align 4, !tbaa !10
  %add105 = add i32 %116, 1
  %and106 = and i32 %add105, 32767
  %idxprom107 = zext i32 %and106 to i64
  %arrayidx108 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict104, i64 0, i64 %idxprom107
  %117 = load i8, i8* %arrayidx108, align 1, !tbaa !12
  %conv109 = zext i8 %117 to i32
  %shl110 = shl i32 %conv109, 5
  %xor111 = xor i32 %shl103, %shl110
  %118 = load i8, i8* %c66, align 1, !tbaa !12
  %conv112 = zext i8 %118 to i32
  %xor113 = xor i32 %xor111, %conv112
  %and114 = and i32 %xor113, 32767
  store i32 %and114, i32* %hash97, align 4, !tbaa !10
  %119 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash115 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %119, i32 0, i32 41
  %120 = load i32, i32* %hash97, align 4, !tbaa !10
  %idxprom116 = zext i32 %120 to i64
  %arrayidx117 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash115, i64 0, i64 %idxprom116
  %121 = load i16, i16* %arrayidx117, align 2, !tbaa !88
  %122 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_next118 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %122, i32 0, i32 40
  %123 = load i32, i32* %ins_pos91, align 4, !tbaa !10
  %and119 = and i32 %123, 32767
  %idxprom120 = zext i32 %and119 to i64
  %arrayidx121 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next118, i64 0, i64 %idxprom120
  store i16 %121, i16* %arrayidx121, align 2, !tbaa !88
  %124 = load i32, i32* %ins_pos91, align 4, !tbaa !10
  %conv122 = trunc i32 %124 to i16
  %125 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_hash123 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %125, i32 0, i32 41
  %126 = load i32, i32* %hash97, align 4, !tbaa !10
  %idxprom124 = zext i32 %126 to i64
  %arrayidx125 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_hash123, i64 0, i64 %idxprom124
  store i16 %conv122, i16* %arrayidx125, align 2, !tbaa !88
  %127 = bitcast i32* %hash97 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %127) #10
  %128 = bitcast i32* %ins_pos91 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %128) #10
  br label %if.end126

if.end126:                                        ; preds = %if.then90, %if.end83
  %129 = bitcast i32* %dst_pos68 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %129) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c66) #10
  br label %while.cond58

while.end127:                                     ; preds = %land.end64
  br label %if.end128

if.end128:                                        ; preds = %while.end127, %while.end
  %130 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size129 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %130, i32 0, i32 7
  %131 = load i32, i32* %m_lookahead_size129, align 8, !tbaa !33
  %sub130 = sub i32 32768, %131
  %132 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size131 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %132, i32 0, i32 8
  %133 = load i32, i32* %m_dict_size131, align 4, !tbaa !32
  %cmp132 = icmp ult i32 %sub130, %133
  br i1 %cmp132, label %cond.true134, label %cond.false137

cond.true134:                                     ; preds = %if.end128
  %134 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size135 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %134, i32 0, i32 7
  %135 = load i32, i32* %m_lookahead_size135, align 8, !tbaa !33
  %sub136 = sub i32 32768, %135
  br label %cond.end139

cond.false137:                                    ; preds = %if.end128
  %136 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size138 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %136, i32 0, i32 8
  %137 = load i32, i32* %m_dict_size138, align 4, !tbaa !32
  br label %cond.end139

cond.end139:                                      ; preds = %cond.false137, %cond.true134
  %cond140 = phi i32 [ %sub136, %cond.true134 ], [ %137, %cond.false137 ]
  %138 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size141 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %138, i32 0, i32 8
  store i32 %cond140, i32* %m_dict_size141, align 4, !tbaa !32
  %139 = load i32, i32* %flush, align 4, !tbaa !12
  %tobool142 = icmp ne i32 %139, 0
  br i1 %tobool142, label %if.end147, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end139
  %140 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size143 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %140, i32 0, i32 7
  %141 = load i32, i32* %m_lookahead_size143, align 8, !tbaa !33
  %cmp144 = icmp ult i32 %141, 258
  br i1 %cmp144, label %if.then146, label %if.end147

if.then146:                                       ; preds = %land.lhs.true
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup335

if.end147:                                        ; preds = %land.lhs.true, %cond.end139
  store i32 1, i32* %len_to_move, align 4, !tbaa !10
  store i32 0, i32* %cur_match_dist, align 4, !tbaa !10
  %142 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %142, i32 0, i32 19
  %143 = load i32, i32* %m_saved_match_len, align 8, !tbaa !48
  %tobool148 = icmp ne i32 %143, 0
  br i1 %tobool148, label %cond.true149, label %cond.false151

cond.true149:                                     ; preds = %if.end147
  %144 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len150 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %144, i32 0, i32 19
  %145 = load i32, i32* %m_saved_match_len150, align 8, !tbaa !48
  br label %cond.end152

cond.false151:                                    ; preds = %if.end147
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false151, %cond.true149
  %cond153 = phi i32 [ %145, %cond.true149 ], [ 2, %cond.false151 ]
  store i32 %cond153, i32* %cur_match_len, align 4, !tbaa !10
  %146 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos154 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %146, i32 0, i32 6
  %147 = load i32, i32* %m_lookahead_pos154, align 4, !tbaa !34
  %and155 = and i32 %147, 32767
  store i32 %and155, i32* %cur_pos, align 4, !tbaa !10
  %148 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %148, i32 0, i32 2
  %149 = load i32, i32* %m_flags, align 8, !tbaa !27
  %and156 = and i32 %149, 589824
  %tobool157 = icmp ne i32 %and156, 0
  br i1 %tobool157, label %if.then158, label %if.else195

if.then158:                                       ; preds = %cond.end152
  %150 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size159 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %150, i32 0, i32 8
  %151 = load i32, i32* %m_dict_size159, align 4, !tbaa !32
  %tobool160 = icmp ne i32 %151, 0
  br i1 %tobool160, label %land.lhs.true161, label %if.end194

land.lhs.true161:                                 ; preds = %if.then158
  %152 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags162 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %152, i32 0, i32 2
  %153 = load i32, i32* %m_flags162, align 8, !tbaa !27
  %and163 = and i32 %153, 524288
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %if.end194, label %if.then165

if.then165:                                       ; preds = %land.lhs.true161
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %c166) #10
  %154 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict167 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %154, i32 0, i32 35
  %155 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %sub168 = sub i32 %155, 1
  %and169 = and i32 %sub168, 32767
  %idxprom170 = zext i32 %and169 to i64
  %arrayidx171 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict167, i64 0, i64 %idxprom170
  %156 = load i8, i8* %arrayidx171, align 1, !tbaa !12
  store i8 %156, i8* %c166, align 1, !tbaa !12
  store i32 0, i32* %cur_match_len, align 4, !tbaa !10
  br label %while.cond172

while.cond172:                                    ; preds = %if.end186, %if.then165
  %157 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %158 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size173 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %158, i32 0, i32 7
  %159 = load i32, i32* %m_lookahead_size173, align 8, !tbaa !33
  %cmp174 = icmp ult i32 %157, %159
  br i1 %cmp174, label %while.body176, label %while.end188

while.body176:                                    ; preds = %while.cond172
  %160 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict177 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %160, i32 0, i32 35
  %161 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %162 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %add178 = add i32 %161, %162
  %idxprom179 = zext i32 %add178 to i64
  %arrayidx180 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict177, i64 0, i64 %idxprom179
  %163 = load i8, i8* %arrayidx180, align 1, !tbaa !12
  %conv181 = zext i8 %163 to i32
  %164 = load i8, i8* %c166, align 1, !tbaa !12
  %conv182 = zext i8 %164 to i32
  %cmp183 = icmp ne i32 %conv181, %conv182
  br i1 %cmp183, label %if.then185, label %if.end186

if.then185:                                       ; preds = %while.body176
  br label %while.end188

if.end186:                                        ; preds = %while.body176
  %165 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %inc187 = add i32 %165, 1
  store i32 %inc187, i32* %cur_match_len, align 4, !tbaa !10
  br label %while.cond172

while.end188:                                     ; preds = %if.then185, %while.cond172
  %166 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp189 = icmp ult i32 %166, 3
  br i1 %cmp189, label %if.then191, label %if.else192

if.then191:                                       ; preds = %while.end188
  store i32 0, i32* %cur_match_len, align 4, !tbaa !10
  br label %if.end193

if.else192:                                       ; preds = %while.end188
  store i32 1, i32* %cur_match_dist, align 4, !tbaa !10
  br label %if.end193

if.end193:                                        ; preds = %if.else192, %if.then191
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %c166) #10
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %land.lhs.true161, %if.then158
  br label %if.end199

if.else195:                                       ; preds = %cond.end152
  %167 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %168 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos196 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %168, i32 0, i32 6
  %169 = load i32, i32* %m_lookahead_pos196, align 4, !tbaa !34
  %170 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size197 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %170, i32 0, i32 8
  %171 = load i32, i32* %m_dict_size197, align 4, !tbaa !32
  %172 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size198 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %172, i32 0, i32 7
  %173 = load i32, i32* %m_lookahead_size198, align 8, !tbaa !33
  call void @tdefl_find_match(%struct.tdefl_compressor* %167, i32 %169, i32 %171, i32 %173, i32* %cur_match_dist, i32* %cur_match_len)
  br label %if.end199

if.end199:                                        ; preds = %if.else195, %if.end194
  %174 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp200 = icmp eq i32 %174, 3
  br i1 %cmp200, label %land.lhs.true202, label %lor.lhs.false

land.lhs.true202:                                 ; preds = %if.end199
  %175 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %cmp203 = icmp uge i32 %175, 8192
  br i1 %cmp203, label %if.then214, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true202, %if.end199
  %176 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %177 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %cmp205 = icmp eq i32 %176, %177
  br i1 %cmp205, label %if.then214, label %lor.lhs.false207

lor.lhs.false207:                                 ; preds = %lor.lhs.false
  %178 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags208 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %178, i32 0, i32 2
  %179 = load i32, i32* %m_flags208, align 8, !tbaa !27
  %and209 = and i32 %179, 131072
  %tobool210 = icmp ne i32 %and209, 0
  br i1 %tobool210, label %land.lhs.true211, label %if.end215

land.lhs.true211:                                 ; preds = %lor.lhs.false207
  %180 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp212 = icmp ule i32 %180, 5
  br i1 %cmp212, label %if.then214, label %if.end215

if.then214:                                       ; preds = %land.lhs.true211, %lor.lhs.false, %land.lhs.true202
  store i32 0, i32* %cur_match_len, align 4, !tbaa !10
  store i32 0, i32* %cur_match_dist, align 4, !tbaa !10
  br label %if.end215

if.end215:                                        ; preds = %if.then214, %land.lhs.true211, %lor.lhs.false207
  %181 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len216 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %181, i32 0, i32 19
  %182 = load i32, i32* %m_saved_match_len216, align 8, !tbaa !48
  %tobool217 = icmp ne i32 %182, 0
  br i1 %tobool217, label %if.then218, label %if.else243

if.then218:                                       ; preds = %if.end215
  %183 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %184 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len219 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %184, i32 0, i32 19
  %185 = load i32, i32* %m_saved_match_len219, align 8, !tbaa !48
  %cmp220 = icmp ugt i32 %183, %185
  br i1 %cmp220, label %if.then222, label %if.else236

if.then222:                                       ; preds = %if.then218
  %186 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %187 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_lit = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %187, i32 0, i32 20
  %188 = load i32, i32* %m_saved_lit, align 4, !tbaa !47
  %conv223 = trunc i32 %188 to i8
  call void @tdefl_record_literal(%struct.tdefl_compressor* %186, i8 zeroext %conv223)
  %189 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp224 = icmp uge i32 %189, 128
  br i1 %cmp224, label %if.then226, label %if.else228

if.then226:                                       ; preds = %if.then222
  %190 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %191 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %192 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  call void @tdefl_record_match(%struct.tdefl_compressor* %190, i32 %191, i32 %192)
  %193 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len227 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %193, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len227, align 8, !tbaa !48
  %194 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  store i32 %194, i32* %len_to_move, align 4, !tbaa !10
  br label %if.end235

if.else228:                                       ; preds = %if.then222
  %195 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict229 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %195, i32 0, i32 35
  %196 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %idxprom230 = zext i32 %196 to i64
  %arrayidx231 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict229, i64 0, i64 %idxprom230
  %197 = load i8, i8* %arrayidx231, align 1, !tbaa !12
  %conv232 = zext i8 %197 to i32
  %198 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_lit233 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %198, i32 0, i32 20
  store i32 %conv232, i32* %m_saved_lit233, align 4, !tbaa !47
  %199 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %200 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_dist = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %200, i32 0, i32 18
  store i32 %199, i32* %m_saved_match_dist, align 4, !tbaa !49
  %201 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %202 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len234 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %202, i32 0, i32 19
  store i32 %201, i32* %m_saved_match_len234, align 8, !tbaa !48
  br label %if.end235

if.end235:                                        ; preds = %if.else228, %if.then226
  br label %if.end242

if.else236:                                       ; preds = %if.then218
  %203 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %204 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len237 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %204, i32 0, i32 19
  %205 = load i32, i32* %m_saved_match_len237, align 8, !tbaa !48
  %206 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_dist238 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %206, i32 0, i32 18
  %207 = load i32, i32* %m_saved_match_dist238, align 4, !tbaa !49
  call void @tdefl_record_match(%struct.tdefl_compressor* %203, i32 %205, i32 %207)
  %208 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len239 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %208, i32 0, i32 19
  %209 = load i32, i32* %m_saved_match_len239, align 8, !tbaa !48
  %sub240 = sub i32 %209, 1
  store i32 %sub240, i32* %len_to_move, align 4, !tbaa !10
  %210 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len241 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %210, i32 0, i32 19
  store i32 0, i32* %m_saved_match_len241, align 8, !tbaa !48
  br label %if.end242

if.end242:                                        ; preds = %if.else236, %if.end235
  br label %if.end283

if.else243:                                       ; preds = %if.end215
  %211 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %tobool244 = icmp ne i32 %211, 0
  br i1 %tobool244, label %if.else256, label %if.then245

if.then245:                                       ; preds = %if.else243
  %212 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %213 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict246 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %213, i32 0, i32 35
  %214 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %conv247 = zext i32 %214 to i64
  %cmp248 = icmp ult i64 %conv247, 33024
  br i1 %cmp248, label %cond.true250, label %cond.false252

cond.true250:                                     ; preds = %if.then245
  %215 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %conv251 = zext i32 %215 to i64
  br label %cond.end253

cond.false252:                                    ; preds = %if.then245
  br label %cond.end253

cond.end253:                                      ; preds = %cond.false252, %cond.true250
  %cond254 = phi i64 [ %conv251, %cond.true250 ], [ 33024, %cond.false252 ]
  %arrayidx255 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict246, i64 0, i64 %cond254
  %216 = load i8, i8* %arrayidx255, align 1, !tbaa !12
  call void @tdefl_record_literal(%struct.tdefl_compressor* %212, i8 zeroext %216)
  br label %if.end282

if.else256:                                       ; preds = %if.else243
  %217 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_greedy_parsing = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %217, i32 0, i32 4
  %218 = load i32, i32* %m_greedy_parsing, align 4, !tbaa !28
  %tobool257 = icmp ne i32 %218, 0
  br i1 %tobool257, label %if.then265, label %lor.lhs.false258

lor.lhs.false258:                                 ; preds = %if.else256
  %219 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags259 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %219, i32 0, i32 2
  %220 = load i32, i32* %m_flags259, align 8, !tbaa !27
  %and260 = and i32 %220, 65536
  %tobool261 = icmp ne i32 %and260, 0
  br i1 %tobool261, label %if.then265, label %lor.lhs.false262

lor.lhs.false262:                                 ; preds = %lor.lhs.false258
  %221 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %cmp263 = icmp uge i32 %221, 128
  br i1 %cmp263, label %if.then265, label %if.else266

if.then265:                                       ; preds = %lor.lhs.false262, %lor.lhs.false258, %if.else256
  %222 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %223 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %224 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  call void @tdefl_record_match(%struct.tdefl_compressor* %222, i32 %223, i32 %224)
  %225 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  store i32 %225, i32* %len_to_move, align 4, !tbaa !10
  br label %if.end281

if.else266:                                       ; preds = %lor.lhs.false262
  %226 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict267 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %226, i32 0, i32 35
  %227 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %conv268 = zext i32 %227 to i64
  %cmp269 = icmp ult i64 %conv268, 33024
  br i1 %cmp269, label %cond.true271, label %cond.false273

cond.true271:                                     ; preds = %if.else266
  %228 = load i32, i32* %cur_pos, align 4, !tbaa !10
  %conv272 = zext i32 %228 to i64
  br label %cond.end274

cond.false273:                                    ; preds = %if.else266
  br label %cond.end274

cond.end274:                                      ; preds = %cond.false273, %cond.true271
  %cond275 = phi i64 [ %conv272, %cond.true271 ], [ 33024, %cond.false273 ]
  %arrayidx276 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict267, i64 0, i64 %cond275
  %229 = load i8, i8* %arrayidx276, align 1, !tbaa !12
  %conv277 = zext i8 %229 to i32
  %230 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_lit278 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %230, i32 0, i32 20
  store i32 %conv277, i32* %m_saved_lit278, align 4, !tbaa !47
  %231 = load i32, i32* %cur_match_dist, align 4, !tbaa !10
  %232 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_dist279 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %232, i32 0, i32 18
  store i32 %231, i32* %m_saved_match_dist279, align 4, !tbaa !49
  %233 = load i32, i32* %cur_match_len, align 4, !tbaa !10
  %234 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_saved_match_len280 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %234, i32 0, i32 19
  store i32 %233, i32* %m_saved_match_len280, align 8, !tbaa !48
  br label %if.end281

if.end281:                                        ; preds = %cond.end274, %if.then265
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %cond.end253
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %if.end242
  %235 = load i32, i32* %len_to_move, align 4, !tbaa !10
  %236 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos284 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %236, i32 0, i32 6
  %237 = load i32, i32* %m_lookahead_pos284, align 4, !tbaa !34
  %add285 = add i32 %237, %235
  store i32 %add285, i32* %m_lookahead_pos284, align 4, !tbaa !34
  %238 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size286 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %238, i32 0, i32 7
  %239 = load i32, i32* %m_lookahead_size286, align 8, !tbaa !33
  %240 = load i32, i32* %len_to_move, align 4, !tbaa !10
  %cmp287 = icmp uge i32 %239, %240
  %lnot = xor i1 %cmp287, true
  %lnot.ext = zext i1 %lnot to i32
  %conv289 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv289, i64 0)
  %tobool290 = icmp ne i64 %expval, 0
  br i1 %tobool290, label %cond.true291, label %cond.false292

cond.true291:                                     ; preds = %if.end283
  call void @__assert_rtn(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__func__.tdefl_compress_normal, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1836, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.60, i64 0, i64 0)) #13
  unreachable

241:                                              ; No predecessors!
  br label %cond.end293

cond.false292:                                    ; preds = %if.end283
  br label %cond.end293

cond.end293:                                      ; preds = %cond.false292, %241
  %242 = load i32, i32* %len_to_move, align 4, !tbaa !10
  %243 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_size294 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %243, i32 0, i32 7
  %244 = load i32, i32* %m_lookahead_size294, align 8, !tbaa !33
  %sub295 = sub i32 %244, %242
  store i32 %sub295, i32* %m_lookahead_size294, align 8, !tbaa !33
  %245 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size296 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %245, i32 0, i32 8
  %246 = load i32, i32* %m_dict_size296, align 4, !tbaa !32
  %247 = load i32, i32* %len_to_move, align 4, !tbaa !10
  %add297 = add i32 %246, %247
  %cmp298 = icmp ult i32 %add297, 32768
  br i1 %cmp298, label %cond.true300, label %cond.false303

cond.true300:                                     ; preds = %cond.end293
  %248 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size301 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %248, i32 0, i32 8
  %249 = load i32, i32* %m_dict_size301, align 4, !tbaa !32
  %250 = load i32, i32* %len_to_move, align 4, !tbaa !10
  %add302 = add i32 %249, %250
  br label %cond.end304

cond.false303:                                    ; preds = %cond.end293
  br label %cond.end304

cond.end304:                                      ; preds = %cond.false303, %cond.true300
  %cond305 = phi i32 [ %add302, %cond.true300 ], [ 32768, %cond.false303 ]
  %251 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size306 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %251, i32 0, i32 8
  store i32 %cond305, i32* %m_dict_size306, align 4, !tbaa !32
  %252 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %252, i32 0, i32 9
  %253 = load i8*, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  %254 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %254, i32 0, i32 39
  %arrayidx307 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i64 0, i64 65528
  %cmp308 = icmp ugt i8* %253, %arrayidx307
  br i1 %cmp308, label %if.then324, label %lor.lhs.false310

lor.lhs.false310:                                 ; preds = %cond.end304
  %255 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %255, i32 0, i32 14
  %256 = load i32, i32* %m_total_lz_bytes, align 4, !tbaa !31
  %cmp311 = icmp ugt i32 %256, 31744
  br i1 %cmp311, label %land.lhs.true313, label %if.end334

land.lhs.true313:                                 ; preds = %lor.lhs.false310
  %257 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf314 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %257, i32 0, i32 9
  %258 = load i8*, i8** %m_pLZ_code_buf314, align 8, !tbaa !41
  %259 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf315 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %259, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf315, i64 0, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %258 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv316 = trunc i64 %sub.ptr.sub to i32
  %mul = mul i32 %conv316, 115
  %shr = lshr i32 %mul, 7
  %260 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes317 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %260, i32 0, i32 14
  %261 = load i32, i32* %m_total_lz_bytes317, align 4, !tbaa !31
  %cmp318 = icmp uge i32 %shr, %261
  br i1 %cmp318, label %if.then324, label %lor.lhs.false320

lor.lhs.false320:                                 ; preds = %land.lhs.true313
  %262 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags321 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %262, i32 0, i32 2
  %263 = load i32, i32* %m_flags321, align 8, !tbaa !27
  %and322 = and i32 %263, 524288
  %tobool323 = icmp ne i32 %and322, 0
  br i1 %tobool323, label %if.then324, label %if.end334

if.then324:                                       ; preds = %lor.lhs.false320, %land.lhs.true313, %cond.end304
  %264 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %264) #10
  %265 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %266 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc325 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %266, i32 0, i32 32
  store i8* %265, i8** %m_pSrc325, align 8, !tbaa !56
  %267 = load i64, i64* %src_buf_left, align 8, !tbaa !4
  %268 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left326 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %268, i32 0, i32 33
  store i64 %267, i64* %m_src_buf_left326, align 8, !tbaa !57
  %269 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call = call i32 @tdefl_flush_block(%struct.tdefl_compressor* %269, i32 0)
  store i32 %call, i32* %n, align 4, !tbaa !10
  %cmp327 = icmp ne i32 %call, 0
  br i1 %cmp327, label %if.then329, label %if.end333

if.then329:                                       ; preds = %if.then324
  %270 = load i32, i32* %n, align 4, !tbaa !10
  %cmp330 = icmp slt i32 %270, 0
  %271 = zext i1 %cmp330 to i64
  %cond332 = select i1 %cmp330, i32 0, i32 1
  store i32 %cond332, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end333:                                        ; preds = %if.then324
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end333, %if.then329
  %272 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %272) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup335 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end334

if.end334:                                        ; preds = %cleanup.cont, %lor.lhs.false320, %lor.lhs.false310
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup335

cleanup335:                                       ; preds = %if.end334, %cleanup, %if.then146
  %273 = bitcast i32* %cur_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %273) #10
  %274 = bitcast i32* %cur_match_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %274) #10
  %275 = bitcast i32* %cur_match_dist to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %275) #10
  %276 = bitcast i32* %len_to_move to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %276) #10
  %cleanup.dest339 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest339, label %cleanup344 [
    i32 0, label %cleanup.cont340
    i32 3, label %while.end341
  ]

cleanup.cont340:                                  ; preds = %cleanup335
  br label %while.cond

while.end341:                                     ; preds = %cleanup335, %lor.end
  %277 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %278 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc342 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %278, i32 0, i32 32
  store i8* %277, i8** %m_pSrc342, align 8, !tbaa !56
  %279 = load i64, i64* %src_buf_left, align 8, !tbaa !4
  %280 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_src_buf_left343 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %280, i32 0, i32 33
  store i64 %279, i64* %m_src_buf_left343, align 8, !tbaa !57
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup344

cleanup344:                                       ; preds = %while.end341, %cleanup335
  %281 = bitcast i32* %flush to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %281) #10
  %282 = bitcast i64* %src_buf_left to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %282) #10
  %283 = bitcast i8** %pSrc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %283) #10
  %284 = load i32, i32* %retval, align 4
  ret i32 %284
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @tdefl_flush_block(%struct.tdefl_compressor* %d, i32 %flush) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %flush.addr = alloca i32, align 4
  %saved_bit_buf = alloca i32, align 4
  %saved_bits_in = alloca i32, align 4
  %pSaved_output_buf = alloca i8*, align 8
  %comp_block_succeeded = alloca i32, align 4
  %n = alloca i32, align 4
  %use_raw_block = alloca i32, align 4
  %pOutput_buf_start = alloca i8*, align 8
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits56 = alloca i32, align 4
  %len57 = alloca i32, align 4
  %bits100 = alloca i32, align 4
  %len103 = alloca i32, align 4
  %i = alloca i32, align 4
  %bits177 = alloca i32, align 4
  %len178 = alloca i32, align 4
  %bits223 = alloca i32, align 4
  %len224 = alloca i32, align 4
  %bits270 = alloca i32, align 4
  %len273 = alloca i32, align 4
  %bits321 = alloca i32, align 4
  %len326 = alloca i32, align 4
  %bits386 = alloca i32, align 4
  %len387 = alloca i32, align 4
  %i435 = alloca i32, align 4
  %a = alloca i32, align 4
  %bits441 = alloca i32, align 4
  %len444 = alloca i32, align 4
  %i491 = alloca i32, align 4
  %z = alloca i32, align 4
  %bits493 = alloca i32, align 4
  %len494 = alloca i32, align 4
  %bits539 = alloca i32, align 4
  %len540 = alloca i32, align 4
  %bits588 = alloca i32, align 4
  %len590 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %bytes_to_copy = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i32 %flush, i32* %flush.addr, align 4, !tbaa !10
  %0 = bitcast i32* %saved_bit_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %saved_bits_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i8** %pSaved_output_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast i32* %comp_block_succeeded to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  store i32 0, i32* %comp_block_succeeded, align 4, !tbaa !10
  %4 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  %5 = bitcast i32* %use_raw_block to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #10
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 2
  %7 = load i32, i32* %m_flags, align 8, !tbaa !27
  %and = and i32 %7, 524288
  %cmp = icmp ne i32 %and, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 6
  %9 = load i32, i32* %m_lookahead_pos, align 4, !tbaa !34
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf_dict_pos = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %10, i32 0, i32 15
  %11 = load i32, i32* %m_lz_code_buf_dict_pos, align 8, !tbaa !30
  %sub = sub i32 %9, %11
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %12, i32 0, i32 8
  %13 = load i32, i32* %m_dict_size, align 4, !tbaa !32
  %cmp1 = icmp ule i32 %sub, %13
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %14 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ]
  %land.ext = zext i1 %14 to i32
  store i32 %land.ext, i32* %use_raw_block, align 4, !tbaa !10
  %15 = bitcast i8** %pOutput_buf_start to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #10
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %16, i32 0, i32 0
  %17 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8, !tbaa !24
  %cmp2 = icmp eq i32 (i8*, i32, i8*)* %17, null
  br i1 %cmp2, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %land.end
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 30
  %19 = load i64*, i64** %m_pOut_buf_size, align 8, !tbaa !54
  %20 = load i64, i64* %19, align 8, !tbaa !4
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 34
  %22 = load i64, i64* %m_out_buf_ofs, align 8, !tbaa !58
  %sub3 = sub i64 %20, %22
  %cmp4 = icmp uge i64 %sub3, 85196
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %23 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %23, i32 0, i32 28
  %24 = load i8*, i8** %m_pOut_buf, align 8, !tbaa !52
  %25 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs5 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %25, i32 0, i32 34
  %26 = load i64, i64* %m_out_buf_ofs5, align 8, !tbaa !58
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 %26
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %land.end
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 42
  %arraydecay = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf, i64 0, i64 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %arraydecay, %cond.false ]
  store i8* %cond, i8** %pOutput_buf_start, align 8, !tbaa !8
  %28 = load i8*, i8** %pOutput_buf_start, align 8, !tbaa !8
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 11
  store i8* %28, i8** %m_pOutput_buf, align 8, !tbaa !44
  %30 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %30, i32 0, i32 11
  %31 = load i8*, i8** %m_pOutput_buf6, align 8, !tbaa !44
  %add.ptr7 = getelementptr inbounds i8, i8* %31, i64 85196
  %add.ptr8 = getelementptr inbounds i8, i8* %add.ptr7, i64 -16
  %32 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %32, i32 0, i32 12
  store i8* %add.ptr8, i8** %m_pOutput_buf_end, align 8, !tbaa !45
  %33 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %33, i32 0, i32 22
  %34 = load i32, i32* %m_output_flush_remaining, align 4, !tbaa !39
  %tobool = icmp ne i32 %34, 0
  %lnot = xor i1 %tobool, true
  %lnot9 = xor i1 %lnot, true
  %lnot.ext = zext i1 %lnot9 to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool10 = icmp ne i64 %expval, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %cond.end
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1243, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.63, i64 0, i64 0)) #13
  unreachable

35:                                               ; No predecessors!
  br label %cond.end13

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false12, %35
  %36 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_ofs = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %36, i32 0, i32 21
  store i32 0, i32* %m_output_flush_ofs, align 8, !tbaa !40
  %37 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining14 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %37, i32 0, i32 22
  store i32 0, i32* %m_output_flush_remaining14, align 4, !tbaa !39
  %38 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %38, i32 0, i32 10
  %39 = load i8*, i8** %m_pLZ_flags, align 8, !tbaa !42
  %40 = load i8, i8* %39, align 1, !tbaa !12
  %conv15 = zext i8 %40 to i32
  %41 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %41, i32 0, i32 13
  %42 = load i32, i32* %m_num_flags_left, align 8, !tbaa !43
  %shr = ashr i32 %conv15, %42
  %conv16 = trunc i32 %shr to i8
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags17 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %43, i32 0, i32 10
  %44 = load i8*, i8** %m_pLZ_flags17, align 8, !tbaa !42
  store i8 %conv16, i8* %44, align 1, !tbaa !12
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left18 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 13
  %46 = load i32, i32* %m_num_flags_left18, align 8, !tbaa !43
  %cmp19 = icmp eq i32 %46, 8
  %conv20 = zext i1 %cmp19 to i32
  %47 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %47, i32 0, i32 9
  %48 = load i8*, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  %idx.ext = sext i32 %conv20 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr21 = getelementptr inbounds i8, i8* %48, i64 %idx.neg
  store i8* %add.ptr21, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  %49 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags22 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %49, i32 0, i32 2
  %50 = load i32, i32* %m_flags22, align 8, !tbaa !27
  %and23 = and i32 %50, 4096
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true25, label %if.end98

land.lhs.true25:                                  ; preds = %cond.end13
  %51 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_block_index = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %51, i32 0, i32 24
  %52 = load i32, i32* %m_block_index, align 4, !tbaa !37
  %tobool26 = icmp ne i32 %52, 0
  br i1 %tobool26, label %if.end98, label %if.then

if.then:                                          ; preds = %land.lhs.true25
  br label %do.body

do.body:                                          ; preds = %if.then
  %53 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %53) #10
  store i32 120, i32* %bits, align 4, !tbaa !10
  %54 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %54) #10
  store i32 8, i32* %len, align 4, !tbaa !10
  %55 = load i32, i32* %bits, align 4, !tbaa !10
  %56 = load i32, i32* %len, align 4, !tbaa !10
  %shl = shl i32 1, %56
  %sub27 = sub i32 %shl, 1
  %cmp28 = icmp ule i32 %55, %sub27
  %lnot30 = xor i1 %cmp28, true
  %lnot.ext31 = zext i1 %lnot30 to i32
  %conv32 = sext i32 %lnot.ext31 to i64
  %expval33 = call i64 @llvm.expect.i64(i64 %conv32, i64 0)
  %tobool34 = icmp ne i64 %expval33, 0
  br i1 %tobool34, label %cond.true35, label %cond.false36

cond.true35:                                      ; preds = %do.body
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1252, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

57:                                               ; No predecessors!
  br label %cond.end37

cond.false36:                                     ; preds = %do.body
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false36, %57
  %58 = load i32, i32* %bits, align 4, !tbaa !10
  %59 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %59, i32 0, i32 16
  %60 = load i32, i32* %m_bits_in, align 4, !tbaa !29
  %shl38 = shl i32 %58, %60
  %61 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %61, i32 0, i32 17
  %62 = load i32, i32* %m_bit_buffer, align 8, !tbaa !36
  %or = or i32 %62, %shl38
  store i32 %or, i32* %m_bit_buffer, align 8, !tbaa !36
  %63 = load i32, i32* %len, align 4, !tbaa !10
  %64 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in39 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %64, i32 0, i32 16
  %65 = load i32, i32* %m_bits_in39, align 4, !tbaa !29
  %add = add i32 %65, %63
  store i32 %add, i32* %m_bits_in39, align 4, !tbaa !29
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end37
  %66 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in40 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %66, i32 0, i32 16
  %67 = load i32, i32* %m_bits_in40, align 4, !tbaa !29
  %cmp41 = icmp uge i32 %67, 8
  br i1 %cmp41, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %68 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf43 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %68, i32 0, i32 11
  %69 = load i8*, i8** %m_pOutput_buf43, align 8, !tbaa !44
  %70 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end44 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %70, i32 0, i32 12
  %71 = load i8*, i8** %m_pOutput_buf_end44, align 8, !tbaa !45
  %cmp45 = icmp ult i8* %69, %71
  br i1 %cmp45, label %if.then47, label %if.end

if.then47:                                        ; preds = %while.body
  %72 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer48 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %72, i32 0, i32 17
  %73 = load i32, i32* %m_bit_buffer48, align 8, !tbaa !36
  %conv49 = trunc i32 %73 to i8
  %74 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf50 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %74, i32 0, i32 11
  %75 = load i8*, i8** %m_pOutput_buf50, align 8, !tbaa !44
  %incdec.ptr = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %incdec.ptr, i8** %m_pOutput_buf50, align 8, !tbaa !44
  store i8 %conv49, i8* %75, align 1, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then47, %while.body
  %76 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer51 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %76, i32 0, i32 17
  %77 = load i32, i32* %m_bit_buffer51, align 8, !tbaa !36
  %shr52 = lshr i32 %77, 8
  store i32 %shr52, i32* %m_bit_buffer51, align 8, !tbaa !36
  %78 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in53 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %78, i32 0, i32 16
  %79 = load i32, i32* %m_bits_in53, align 4, !tbaa !29
  %sub54 = sub i32 %79, 8
  store i32 %sub54, i32* %m_bits_in53, align 4, !tbaa !29
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %80 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %80) #10
  %81 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %81) #10
  br label %do.cond

do.cond:                                          ; preds = %while.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body55

do.body55:                                        ; preds = %do.end
  %82 = bitcast i32* %bits56 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %82) #10
  store i32 1, i32* %bits56, align 4, !tbaa !10
  %83 = bitcast i32* %len57 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %83) #10
  store i32 8, i32* %len57, align 4, !tbaa !10
  %84 = load i32, i32* %bits56, align 4, !tbaa !10
  %85 = load i32, i32* %len57, align 4, !tbaa !10
  %shl58 = shl i32 1, %85
  %sub59 = sub i32 %shl58, 1
  %cmp60 = icmp ule i32 %84, %sub59
  %lnot62 = xor i1 %cmp60, true
  %lnot.ext63 = zext i1 %lnot62 to i32
  %conv64 = sext i32 %lnot.ext63 to i64
  %expval65 = call i64 @llvm.expect.i64(i64 %conv64, i64 0)
  %tobool66 = icmp ne i64 %expval65, 0
  br i1 %tobool66, label %cond.true67, label %cond.false68

cond.true67:                                      ; preds = %do.body55
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1253, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

86:                                               ; No predecessors!
  br label %cond.end69

cond.false68:                                     ; preds = %do.body55
  br label %cond.end69

cond.end69:                                       ; preds = %cond.false68, %86
  %87 = load i32, i32* %bits56, align 4, !tbaa !10
  %88 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in70 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %88, i32 0, i32 16
  %89 = load i32, i32* %m_bits_in70, align 4, !tbaa !29
  %shl71 = shl i32 %87, %89
  %90 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer72 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %90, i32 0, i32 17
  %91 = load i32, i32* %m_bit_buffer72, align 8, !tbaa !36
  %or73 = or i32 %91, %shl71
  store i32 %or73, i32* %m_bit_buffer72, align 8, !tbaa !36
  %92 = load i32, i32* %len57, align 4, !tbaa !10
  %93 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in74 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %93, i32 0, i32 16
  %94 = load i32, i32* %m_bits_in74, align 4, !tbaa !29
  %add75 = add i32 %94, %92
  store i32 %add75, i32* %m_bits_in74, align 4, !tbaa !29
  br label %while.cond76

while.cond76:                                     ; preds = %if.end90, %cond.end69
  %95 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in77 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %95, i32 0, i32 16
  %96 = load i32, i32* %m_bits_in77, align 4, !tbaa !29
  %cmp78 = icmp uge i32 %96, 8
  br i1 %cmp78, label %while.body80, label %while.end95

while.body80:                                     ; preds = %while.cond76
  %97 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf81 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %97, i32 0, i32 11
  %98 = load i8*, i8** %m_pOutput_buf81, align 8, !tbaa !44
  %99 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end82 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %99, i32 0, i32 12
  %100 = load i8*, i8** %m_pOutput_buf_end82, align 8, !tbaa !45
  %cmp83 = icmp ult i8* %98, %100
  br i1 %cmp83, label %if.then85, label %if.end90

if.then85:                                        ; preds = %while.body80
  %101 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer86 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %101, i32 0, i32 17
  %102 = load i32, i32* %m_bit_buffer86, align 8, !tbaa !36
  %conv87 = trunc i32 %102 to i8
  %103 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf88 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %103, i32 0, i32 11
  %104 = load i8*, i8** %m_pOutput_buf88, align 8, !tbaa !44
  %incdec.ptr89 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %incdec.ptr89, i8** %m_pOutput_buf88, align 8, !tbaa !44
  store i8 %conv87, i8* %104, align 1, !tbaa !12
  br label %if.end90

if.end90:                                         ; preds = %if.then85, %while.body80
  %105 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer91 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %105, i32 0, i32 17
  %106 = load i32, i32* %m_bit_buffer91, align 8, !tbaa !36
  %shr92 = lshr i32 %106, 8
  store i32 %shr92, i32* %m_bit_buffer91, align 8, !tbaa !36
  %107 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in93 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %107, i32 0, i32 16
  %108 = load i32, i32* %m_bits_in93, align 4, !tbaa !29
  %sub94 = sub i32 %108, 8
  store i32 %sub94, i32* %m_bits_in93, align 4, !tbaa !29
  br label %while.cond76

while.end95:                                      ; preds = %while.cond76
  %109 = bitcast i32* %len57 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %109) #10
  %110 = bitcast i32* %bits56 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %110) #10
  br label %do.cond96

do.cond96:                                        ; preds = %while.end95
  br label %do.end97

do.end97:                                         ; preds = %do.cond96
  br label %if.end98

if.end98:                                         ; preds = %do.end97, %land.lhs.true25, %cond.end13
  br label %do.body99

do.body99:                                        ; preds = %if.end98
  %111 = bitcast i32* %bits100 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %111) #10
  %112 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp101 = icmp eq i32 %112, 4
  %conv102 = zext i1 %cmp101 to i32
  store i32 %conv102, i32* %bits100, align 4, !tbaa !10
  %113 = bitcast i32* %len103 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %113) #10
  store i32 1, i32* %len103, align 4, !tbaa !10
  %114 = load i32, i32* %bits100, align 4, !tbaa !10
  %115 = load i32, i32* %len103, align 4, !tbaa !10
  %shl104 = shl i32 1, %115
  %sub105 = sub i32 %shl104, 1
  %cmp106 = icmp ule i32 %114, %sub105
  %lnot108 = xor i1 %cmp106, true
  %lnot.ext109 = zext i1 %lnot108 to i32
  %conv110 = sext i32 %lnot.ext109 to i64
  %expval111 = call i64 @llvm.expect.i64(i64 %conv110, i64 0)
  %tobool112 = icmp ne i64 %expval111, 0
  br i1 %tobool112, label %cond.true113, label %cond.false114

cond.true113:                                     ; preds = %do.body99
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1256, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

116:                                              ; No predecessors!
  br label %cond.end115

cond.false114:                                    ; preds = %do.body99
  br label %cond.end115

cond.end115:                                      ; preds = %cond.false114, %116
  %117 = load i32, i32* %bits100, align 4, !tbaa !10
  %118 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in116 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %118, i32 0, i32 16
  %119 = load i32, i32* %m_bits_in116, align 4, !tbaa !29
  %shl117 = shl i32 %117, %119
  %120 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer118 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %120, i32 0, i32 17
  %121 = load i32, i32* %m_bit_buffer118, align 8, !tbaa !36
  %or119 = or i32 %121, %shl117
  store i32 %or119, i32* %m_bit_buffer118, align 8, !tbaa !36
  %122 = load i32, i32* %len103, align 4, !tbaa !10
  %123 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in120 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %123, i32 0, i32 16
  %124 = load i32, i32* %m_bits_in120, align 4, !tbaa !29
  %add121 = add i32 %124, %122
  store i32 %add121, i32* %m_bits_in120, align 4, !tbaa !29
  br label %while.cond122

while.cond122:                                    ; preds = %if.end136, %cond.end115
  %125 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in123 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %125, i32 0, i32 16
  %126 = load i32, i32* %m_bits_in123, align 4, !tbaa !29
  %cmp124 = icmp uge i32 %126, 8
  br i1 %cmp124, label %while.body126, label %while.end141

while.body126:                                    ; preds = %while.cond122
  %127 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf127 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %127, i32 0, i32 11
  %128 = load i8*, i8** %m_pOutput_buf127, align 8, !tbaa !44
  %129 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end128 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %129, i32 0, i32 12
  %130 = load i8*, i8** %m_pOutput_buf_end128, align 8, !tbaa !45
  %cmp129 = icmp ult i8* %128, %130
  br i1 %cmp129, label %if.then131, label %if.end136

if.then131:                                       ; preds = %while.body126
  %131 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer132 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %131, i32 0, i32 17
  %132 = load i32, i32* %m_bit_buffer132, align 8, !tbaa !36
  %conv133 = trunc i32 %132 to i8
  %133 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf134 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %133, i32 0, i32 11
  %134 = load i8*, i8** %m_pOutput_buf134, align 8, !tbaa !44
  %incdec.ptr135 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr135, i8** %m_pOutput_buf134, align 8, !tbaa !44
  store i8 %conv133, i8* %134, align 1, !tbaa !12
  br label %if.end136

if.end136:                                        ; preds = %if.then131, %while.body126
  %135 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer137 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %135, i32 0, i32 17
  %136 = load i32, i32* %m_bit_buffer137, align 8, !tbaa !36
  %shr138 = lshr i32 %136, 8
  store i32 %shr138, i32* %m_bit_buffer137, align 8, !tbaa !36
  %137 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in139 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %137, i32 0, i32 16
  %138 = load i32, i32* %m_bits_in139, align 4, !tbaa !29
  %sub140 = sub i32 %138, 8
  store i32 %sub140, i32* %m_bits_in139, align 4, !tbaa !29
  br label %while.cond122

while.end141:                                     ; preds = %while.cond122
  %139 = bitcast i32* %len103 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %139) #10
  %140 = bitcast i32* %bits100 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %140) #10
  br label %do.cond142

do.cond142:                                       ; preds = %while.end141
  br label %do.end143

do.end143:                                        ; preds = %do.cond142
  %141 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf144 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %141, i32 0, i32 11
  %142 = load i8*, i8** %m_pOutput_buf144, align 8, !tbaa !44
  store i8* %142, i8** %pSaved_output_buf, align 8, !tbaa !8
  %143 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer145 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %143, i32 0, i32 17
  %144 = load i32, i32* %m_bit_buffer145, align 8, !tbaa !36
  store i32 %144, i32* %saved_bit_buf, align 4, !tbaa !10
  %145 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in146 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %145, i32 0, i32 16
  %146 = load i32, i32* %m_bits_in146, align 4, !tbaa !29
  store i32 %146, i32* %saved_bits_in, align 4, !tbaa !10
  %147 = load i32, i32* %use_raw_block, align 4, !tbaa !10
  %tobool147 = icmp ne i32 %147, 0
  br i1 %tobool147, label %if.end154, label %if.then148

if.then148:                                       ; preds = %do.end143
  %148 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %149 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags149 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %149, i32 0, i32 2
  %150 = load i32, i32* %m_flags149, align 8, !tbaa !27
  %and150 = and i32 %150, 262144
  %tobool151 = icmp ne i32 %and150, 0
  br i1 %tobool151, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then148
  %151 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %151, i32 0, i32 14
  %152 = load i32, i32* %m_total_lz_bytes, align 4, !tbaa !31
  %cmp152 = icmp ult i32 %152, 48
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then148
  %153 = phi i1 [ true, %if.then148 ], [ %cmp152, %lor.rhs ]
  %lor.ext = zext i1 %153 to i32
  %call = call i32 @tdefl_compress_block(%struct.tdefl_compressor* %148, i32 %lor.ext)
  store i32 %call, i32* %comp_block_succeeded, align 4, !tbaa !10
  br label %if.end154

if.end154:                                        ; preds = %lor.end, %do.end143
  %154 = load i32, i32* %use_raw_block, align 4, !tbaa !10
  %tobool155 = icmp ne i32 %154, 0
  br i1 %tobool155, label %land.lhs.true165, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end154
  %155 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes156 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %155, i32 0, i32 14
  %156 = load i32, i32* %m_total_lz_bytes156, align 4, !tbaa !31
  %tobool157 = icmp ne i32 %156, 0
  br i1 %tobool157, label %land.lhs.true158, label %if.else

land.lhs.true158:                                 ; preds = %lor.lhs.false
  %157 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf159 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %157, i32 0, i32 11
  %158 = load i8*, i8** %m_pOutput_buf159, align 8, !tbaa !44
  %159 = load i8*, i8** %pSaved_output_buf, align 8, !tbaa !8
  %sub.ptr.lhs.cast = ptrtoint i8* %158 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %159 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add160 = add nsw i64 %sub.ptr.sub, 1
  %160 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes161 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %160, i32 0, i32 14
  %161 = load i32, i32* %m_total_lz_bytes161, align 4, !tbaa !31
  %conv162 = zext i32 %161 to i64
  %cmp163 = icmp sge i64 %add160, %conv162
  br i1 %cmp163, label %land.lhs.true165, label %if.else

land.lhs.true165:                                 ; preds = %land.lhs.true158, %if.end154
  %162 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lookahead_pos166 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %162, i32 0, i32 6
  %163 = load i32, i32* %m_lookahead_pos166, align 4, !tbaa !34
  %164 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf_dict_pos167 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %164, i32 0, i32 15
  %165 = load i32, i32* %m_lz_code_buf_dict_pos167, align 8, !tbaa !30
  %sub168 = sub i32 %163, %165
  %166 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict_size169 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %166, i32 0, i32 8
  %167 = load i32, i32* %m_dict_size169, align 4, !tbaa !32
  %cmp170 = icmp ule i32 %sub168, %167
  br i1 %cmp170, label %if.then172, label %if.else

if.then172:                                       ; preds = %land.lhs.true165
  %168 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %168) #10
  %169 = load i8*, i8** %pSaved_output_buf, align 8, !tbaa !8
  %170 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf173 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %170, i32 0, i32 11
  store i8* %169, i8** %m_pOutput_buf173, align 8, !tbaa !44
  %171 = load i32, i32* %saved_bit_buf, align 4, !tbaa !10
  %172 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer174 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %172, i32 0, i32 17
  store i32 %171, i32* %m_bit_buffer174, align 8, !tbaa !36
  %173 = load i32, i32* %saved_bits_in, align 4, !tbaa !10
  %174 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in175 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %174, i32 0, i32 16
  store i32 %173, i32* %m_bits_in175, align 4, !tbaa !29
  br label %do.body176

do.body176:                                       ; preds = %if.then172
  %175 = bitcast i32* %bits177 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %175) #10
  store i32 0, i32* %bits177, align 4, !tbaa !10
  %176 = bitcast i32* %len178 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %176) #10
  store i32 2, i32* %len178, align 4, !tbaa !10
  %177 = load i32, i32* %bits177, align 4, !tbaa !10
  %178 = load i32, i32* %len178, align 4, !tbaa !10
  %shl179 = shl i32 1, %178
  %sub180 = sub i32 %shl179, 1
  %cmp181 = icmp ule i32 %177, %sub180
  %lnot183 = xor i1 %cmp181, true
  %lnot.ext184 = zext i1 %lnot183 to i32
  %conv185 = sext i32 %lnot.ext184 to i64
  %expval186 = call i64 @llvm.expect.i64(i64 %conv185, i64 0)
  %tobool187 = icmp ne i64 %expval186, 0
  br i1 %tobool187, label %cond.true188, label %cond.false189

cond.true188:                                     ; preds = %do.body176
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1272, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

179:                                              ; No predecessors!
  br label %cond.end190

cond.false189:                                    ; preds = %do.body176
  br label %cond.end190

cond.end190:                                      ; preds = %cond.false189, %179
  %180 = load i32, i32* %bits177, align 4, !tbaa !10
  %181 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in191 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %181, i32 0, i32 16
  %182 = load i32, i32* %m_bits_in191, align 4, !tbaa !29
  %shl192 = shl i32 %180, %182
  %183 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer193 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %183, i32 0, i32 17
  %184 = load i32, i32* %m_bit_buffer193, align 8, !tbaa !36
  %or194 = or i32 %184, %shl192
  store i32 %or194, i32* %m_bit_buffer193, align 8, !tbaa !36
  %185 = load i32, i32* %len178, align 4, !tbaa !10
  %186 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in195 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %186, i32 0, i32 16
  %187 = load i32, i32* %m_bits_in195, align 4, !tbaa !29
  %add196 = add i32 %187, %185
  store i32 %add196, i32* %m_bits_in195, align 4, !tbaa !29
  br label %while.cond197

while.cond197:                                    ; preds = %if.end211, %cond.end190
  %188 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in198 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %188, i32 0, i32 16
  %189 = load i32, i32* %m_bits_in198, align 4, !tbaa !29
  %cmp199 = icmp uge i32 %189, 8
  br i1 %cmp199, label %while.body201, label %while.end216

while.body201:                                    ; preds = %while.cond197
  %190 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf202 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %190, i32 0, i32 11
  %191 = load i8*, i8** %m_pOutput_buf202, align 8, !tbaa !44
  %192 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end203 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %192, i32 0, i32 12
  %193 = load i8*, i8** %m_pOutput_buf_end203, align 8, !tbaa !45
  %cmp204 = icmp ult i8* %191, %193
  br i1 %cmp204, label %if.then206, label %if.end211

if.then206:                                       ; preds = %while.body201
  %194 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer207 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %194, i32 0, i32 17
  %195 = load i32, i32* %m_bit_buffer207, align 8, !tbaa !36
  %conv208 = trunc i32 %195 to i8
  %196 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf209 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %196, i32 0, i32 11
  %197 = load i8*, i8** %m_pOutput_buf209, align 8, !tbaa !44
  %incdec.ptr210 = getelementptr inbounds i8, i8* %197, i32 1
  store i8* %incdec.ptr210, i8** %m_pOutput_buf209, align 8, !tbaa !44
  store i8 %conv208, i8* %197, align 1, !tbaa !12
  br label %if.end211

if.end211:                                        ; preds = %if.then206, %while.body201
  %198 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer212 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %198, i32 0, i32 17
  %199 = load i32, i32* %m_bit_buffer212, align 8, !tbaa !36
  %shr213 = lshr i32 %199, 8
  store i32 %shr213, i32* %m_bit_buffer212, align 8, !tbaa !36
  %200 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in214 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %200, i32 0, i32 16
  %201 = load i32, i32* %m_bits_in214, align 4, !tbaa !29
  %sub215 = sub i32 %201, 8
  store i32 %sub215, i32* %m_bits_in214, align 4, !tbaa !29
  br label %while.cond197

while.end216:                                     ; preds = %while.cond197
  %202 = bitcast i32* %len178 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %202) #10
  %203 = bitcast i32* %bits177 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %203) #10
  br label %do.cond217

do.cond217:                                       ; preds = %while.end216
  br label %do.end218

do.end218:                                        ; preds = %do.cond217
  %204 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in219 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %204, i32 0, i32 16
  %205 = load i32, i32* %m_bits_in219, align 4, !tbaa !29
  %tobool220 = icmp ne i32 %205, 0
  br i1 %tobool220, label %if.then221, label %if.end267

if.then221:                                       ; preds = %do.end218
  br label %do.body222

do.body222:                                       ; preds = %if.then221
  %206 = bitcast i32* %bits223 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %206) #10
  store i32 0, i32* %bits223, align 4, !tbaa !10
  %207 = bitcast i32* %len224 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %207) #10
  %208 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in225 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %208, i32 0, i32 16
  %209 = load i32, i32* %m_bits_in225, align 4, !tbaa !29
  %sub226 = sub i32 8, %209
  store i32 %sub226, i32* %len224, align 4, !tbaa !10
  %210 = load i32, i32* %bits223, align 4, !tbaa !10
  %211 = load i32, i32* %len224, align 4, !tbaa !10
  %shl227 = shl i32 1, %211
  %sub228 = sub i32 %shl227, 1
  %cmp229 = icmp ule i32 %210, %sub228
  %lnot231 = xor i1 %cmp229, true
  %lnot.ext232 = zext i1 %lnot231 to i32
  %conv233 = sext i32 %lnot.ext232 to i64
  %expval234 = call i64 @llvm.expect.i64(i64 %conv233, i64 0)
  %tobool235 = icmp ne i64 %expval234, 0
  br i1 %tobool235, label %cond.true236, label %cond.false237

cond.true236:                                     ; preds = %do.body222
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1275, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

212:                                              ; No predecessors!
  br label %cond.end238

cond.false237:                                    ; preds = %do.body222
  br label %cond.end238

cond.end238:                                      ; preds = %cond.false237, %212
  %213 = load i32, i32* %bits223, align 4, !tbaa !10
  %214 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in239 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %214, i32 0, i32 16
  %215 = load i32, i32* %m_bits_in239, align 4, !tbaa !29
  %shl240 = shl i32 %213, %215
  %216 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer241 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %216, i32 0, i32 17
  %217 = load i32, i32* %m_bit_buffer241, align 8, !tbaa !36
  %or242 = or i32 %217, %shl240
  store i32 %or242, i32* %m_bit_buffer241, align 8, !tbaa !36
  %218 = load i32, i32* %len224, align 4, !tbaa !10
  %219 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in243 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %219, i32 0, i32 16
  %220 = load i32, i32* %m_bits_in243, align 4, !tbaa !29
  %add244 = add i32 %220, %218
  store i32 %add244, i32* %m_bits_in243, align 4, !tbaa !29
  br label %while.cond245

while.cond245:                                    ; preds = %if.end259, %cond.end238
  %221 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in246 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %221, i32 0, i32 16
  %222 = load i32, i32* %m_bits_in246, align 4, !tbaa !29
  %cmp247 = icmp uge i32 %222, 8
  br i1 %cmp247, label %while.body249, label %while.end264

while.body249:                                    ; preds = %while.cond245
  %223 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf250 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %223, i32 0, i32 11
  %224 = load i8*, i8** %m_pOutput_buf250, align 8, !tbaa !44
  %225 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end251 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %225, i32 0, i32 12
  %226 = load i8*, i8** %m_pOutput_buf_end251, align 8, !tbaa !45
  %cmp252 = icmp ult i8* %224, %226
  br i1 %cmp252, label %if.then254, label %if.end259

if.then254:                                       ; preds = %while.body249
  %227 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer255 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %227, i32 0, i32 17
  %228 = load i32, i32* %m_bit_buffer255, align 8, !tbaa !36
  %conv256 = trunc i32 %228 to i8
  %229 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf257 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %229, i32 0, i32 11
  %230 = load i8*, i8** %m_pOutput_buf257, align 8, !tbaa !44
  %incdec.ptr258 = getelementptr inbounds i8, i8* %230, i32 1
  store i8* %incdec.ptr258, i8** %m_pOutput_buf257, align 8, !tbaa !44
  store i8 %conv256, i8* %230, align 1, !tbaa !12
  br label %if.end259

if.end259:                                        ; preds = %if.then254, %while.body249
  %231 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer260 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %231, i32 0, i32 17
  %232 = load i32, i32* %m_bit_buffer260, align 8, !tbaa !36
  %shr261 = lshr i32 %232, 8
  store i32 %shr261, i32* %m_bit_buffer260, align 8, !tbaa !36
  %233 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in262 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %233, i32 0, i32 16
  %234 = load i32, i32* %m_bits_in262, align 4, !tbaa !29
  %sub263 = sub i32 %234, 8
  store i32 %sub263, i32* %m_bits_in262, align 4, !tbaa !29
  br label %while.cond245

while.end264:                                     ; preds = %while.cond245
  %235 = bitcast i32* %len224 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %235) #10
  %236 = bitcast i32* %bits223 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %236) #10
  br label %do.cond265

do.cond265:                                       ; preds = %while.end264
  br label %do.end266

do.end266:                                        ; preds = %do.cond265
  br label %if.end267

if.end267:                                        ; preds = %do.end266, %do.end218
  store i32 2, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end267
  %237 = load i32, i32* %i, align 4, !tbaa !10
  %tobool268 = icmp ne i32 %237, 0
  br i1 %tobool268, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %do.body269

do.body269:                                       ; preds = %for.body
  %238 = bitcast i32* %bits270 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %238) #10
  %239 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes271 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %239, i32 0, i32 14
  %240 = load i32, i32* %m_total_lz_bytes271, align 4, !tbaa !31
  %and272 = and i32 %240, 65535
  store i32 %and272, i32* %bits270, align 4, !tbaa !10
  %241 = bitcast i32* %len273 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %241) #10
  store i32 16, i32* %len273, align 4, !tbaa !10
  %242 = load i32, i32* %bits270, align 4, !tbaa !10
  %243 = load i32, i32* %len273, align 4, !tbaa !10
  %shl274 = shl i32 1, %243
  %sub275 = sub i32 %shl274, 1
  %cmp276 = icmp ule i32 %242, %sub275
  %lnot278 = xor i1 %cmp276, true
  %lnot.ext279 = zext i1 %lnot278 to i32
  %conv280 = sext i32 %lnot.ext279 to i64
  %expval281 = call i64 @llvm.expect.i64(i64 %conv280, i64 0)
  %tobool282 = icmp ne i64 %expval281, 0
  br i1 %tobool282, label %cond.true283, label %cond.false284

cond.true283:                                     ; preds = %do.body269
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1279, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

244:                                              ; No predecessors!
  br label %cond.end285

cond.false284:                                    ; preds = %do.body269
  br label %cond.end285

cond.end285:                                      ; preds = %cond.false284, %244
  %245 = load i32, i32* %bits270, align 4, !tbaa !10
  %246 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in286 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %246, i32 0, i32 16
  %247 = load i32, i32* %m_bits_in286, align 4, !tbaa !29
  %shl287 = shl i32 %245, %247
  %248 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer288 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %248, i32 0, i32 17
  %249 = load i32, i32* %m_bit_buffer288, align 8, !tbaa !36
  %or289 = or i32 %249, %shl287
  store i32 %or289, i32* %m_bit_buffer288, align 8, !tbaa !36
  %250 = load i32, i32* %len273, align 4, !tbaa !10
  %251 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in290 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %251, i32 0, i32 16
  %252 = load i32, i32* %m_bits_in290, align 4, !tbaa !29
  %add291 = add i32 %252, %250
  store i32 %add291, i32* %m_bits_in290, align 4, !tbaa !29
  br label %while.cond292

while.cond292:                                    ; preds = %if.end306, %cond.end285
  %253 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in293 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %253, i32 0, i32 16
  %254 = load i32, i32* %m_bits_in293, align 4, !tbaa !29
  %cmp294 = icmp uge i32 %254, 8
  br i1 %cmp294, label %while.body296, label %while.end311

while.body296:                                    ; preds = %while.cond292
  %255 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf297 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %255, i32 0, i32 11
  %256 = load i8*, i8** %m_pOutput_buf297, align 8, !tbaa !44
  %257 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end298 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %257, i32 0, i32 12
  %258 = load i8*, i8** %m_pOutput_buf_end298, align 8, !tbaa !45
  %cmp299 = icmp ult i8* %256, %258
  br i1 %cmp299, label %if.then301, label %if.end306

if.then301:                                       ; preds = %while.body296
  %259 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer302 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %259, i32 0, i32 17
  %260 = load i32, i32* %m_bit_buffer302, align 8, !tbaa !36
  %conv303 = trunc i32 %260 to i8
  %261 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf304 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %261, i32 0, i32 11
  %262 = load i8*, i8** %m_pOutput_buf304, align 8, !tbaa !44
  %incdec.ptr305 = getelementptr inbounds i8, i8* %262, i32 1
  store i8* %incdec.ptr305, i8** %m_pOutput_buf304, align 8, !tbaa !44
  store i8 %conv303, i8* %262, align 1, !tbaa !12
  br label %if.end306

if.end306:                                        ; preds = %if.then301, %while.body296
  %263 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer307 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %263, i32 0, i32 17
  %264 = load i32, i32* %m_bit_buffer307, align 8, !tbaa !36
  %shr308 = lshr i32 %264, 8
  store i32 %shr308, i32* %m_bit_buffer307, align 8, !tbaa !36
  %265 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in309 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %265, i32 0, i32 16
  %266 = load i32, i32* %m_bits_in309, align 4, !tbaa !29
  %sub310 = sub i32 %266, 8
  store i32 %sub310, i32* %m_bits_in309, align 4, !tbaa !29
  br label %while.cond292

while.end311:                                     ; preds = %while.cond292
  %267 = bitcast i32* %len273 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %267) #10
  %268 = bitcast i32* %bits270 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %268) #10
  br label %do.cond312

do.cond312:                                       ; preds = %while.end311
  br label %do.end313

do.end313:                                        ; preds = %do.cond312
  br label %for.inc

for.inc:                                          ; preds = %do.end313
  %269 = load i32, i32* %i, align 4, !tbaa !10
  %dec = add i32 %269, -1
  store i32 %dec, i32* %i, align 4, !tbaa !10
  %270 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes314 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %270, i32 0, i32 14
  %271 = load i32, i32* %m_total_lz_bytes314, align 4, !tbaa !31
  %xor = xor i32 %271, 65535
  store i32 %xor, i32* %m_total_lz_bytes314, align 4, !tbaa !31
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond315

for.cond315:                                      ; preds = %for.inc367, %for.end
  %272 = load i32, i32* %i, align 4, !tbaa !10
  %273 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes316 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %273, i32 0, i32 14
  %274 = load i32, i32* %m_total_lz_bytes316, align 4, !tbaa !31
  %cmp317 = icmp ult i32 %272, %274
  br i1 %cmp317, label %for.body319, label %for.end368

for.body319:                                      ; preds = %for.cond315
  br label %do.body320

do.body320:                                       ; preds = %for.body319
  %275 = bitcast i32* %bits321 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %275) #10
  %276 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %276, i32 0, i32 35
  %277 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf_dict_pos322 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %277, i32 0, i32 15
  %278 = load i32, i32* %m_lz_code_buf_dict_pos322, align 8, !tbaa !30
  %279 = load i32, i32* %i, align 4, !tbaa !10
  %add323 = add i32 %278, %279
  %and324 = and i32 %add323, 32767
  %idxprom = zext i32 %and324 to i64
  %arrayidx = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict, i64 0, i64 %idxprom
  %280 = load i8, i8* %arrayidx, align 1, !tbaa !12
  %conv325 = zext i8 %280 to i32
  store i32 %conv325, i32* %bits321, align 4, !tbaa !10
  %281 = bitcast i32* %len326 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %281) #10
  store i32 8, i32* %len326, align 4, !tbaa !10
  %282 = load i32, i32* %bits321, align 4, !tbaa !10
  %283 = load i32, i32* %len326, align 4, !tbaa !10
  %shl327 = shl i32 1, %283
  %sub328 = sub i32 %shl327, 1
  %cmp329 = icmp ule i32 %282, %sub328
  %lnot331 = xor i1 %cmp329, true
  %lnot.ext332 = zext i1 %lnot331 to i32
  %conv333 = sext i32 %lnot.ext332 to i64
  %expval334 = call i64 @llvm.expect.i64(i64 %conv333, i64 0)
  %tobool335 = icmp ne i64 %expval334, 0
  br i1 %tobool335, label %cond.true336, label %cond.false337

cond.true336:                                     ; preds = %do.body320
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1283, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

284:                                              ; No predecessors!
  br label %cond.end338

cond.false337:                                    ; preds = %do.body320
  br label %cond.end338

cond.end338:                                      ; preds = %cond.false337, %284
  %285 = load i32, i32* %bits321, align 4, !tbaa !10
  %286 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in339 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %286, i32 0, i32 16
  %287 = load i32, i32* %m_bits_in339, align 4, !tbaa !29
  %shl340 = shl i32 %285, %287
  %288 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer341 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %288, i32 0, i32 17
  %289 = load i32, i32* %m_bit_buffer341, align 8, !tbaa !36
  %or342 = or i32 %289, %shl340
  store i32 %or342, i32* %m_bit_buffer341, align 8, !tbaa !36
  %290 = load i32, i32* %len326, align 4, !tbaa !10
  %291 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in343 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %291, i32 0, i32 16
  %292 = load i32, i32* %m_bits_in343, align 4, !tbaa !29
  %add344 = add i32 %292, %290
  store i32 %add344, i32* %m_bits_in343, align 4, !tbaa !29
  br label %while.cond345

while.cond345:                                    ; preds = %if.end359, %cond.end338
  %293 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in346 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %293, i32 0, i32 16
  %294 = load i32, i32* %m_bits_in346, align 4, !tbaa !29
  %cmp347 = icmp uge i32 %294, 8
  br i1 %cmp347, label %while.body349, label %while.end364

while.body349:                                    ; preds = %while.cond345
  %295 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf350 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %295, i32 0, i32 11
  %296 = load i8*, i8** %m_pOutput_buf350, align 8, !tbaa !44
  %297 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end351 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %297, i32 0, i32 12
  %298 = load i8*, i8** %m_pOutput_buf_end351, align 8, !tbaa !45
  %cmp352 = icmp ult i8* %296, %298
  br i1 %cmp352, label %if.then354, label %if.end359

if.then354:                                       ; preds = %while.body349
  %299 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer355 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %299, i32 0, i32 17
  %300 = load i32, i32* %m_bit_buffer355, align 8, !tbaa !36
  %conv356 = trunc i32 %300 to i8
  %301 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf357 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %301, i32 0, i32 11
  %302 = load i8*, i8** %m_pOutput_buf357, align 8, !tbaa !44
  %incdec.ptr358 = getelementptr inbounds i8, i8* %302, i32 1
  store i8* %incdec.ptr358, i8** %m_pOutput_buf357, align 8, !tbaa !44
  store i8 %conv356, i8* %302, align 1, !tbaa !12
  br label %if.end359

if.end359:                                        ; preds = %if.then354, %while.body349
  %303 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer360 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %303, i32 0, i32 17
  %304 = load i32, i32* %m_bit_buffer360, align 8, !tbaa !36
  %shr361 = lshr i32 %304, 8
  store i32 %shr361, i32* %m_bit_buffer360, align 8, !tbaa !36
  %305 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in362 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %305, i32 0, i32 16
  %306 = load i32, i32* %m_bits_in362, align 4, !tbaa !29
  %sub363 = sub i32 %306, 8
  store i32 %sub363, i32* %m_bits_in362, align 4, !tbaa !29
  br label %while.cond345

while.end364:                                     ; preds = %while.cond345
  %307 = bitcast i32* %len326 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %307) #10
  %308 = bitcast i32* %bits321 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %308) #10
  br label %do.cond365

do.cond365:                                       ; preds = %while.end364
  br label %do.end366

do.end366:                                        ; preds = %do.cond365
  br label %for.inc367

for.inc367:                                       ; preds = %do.end366
  %309 = load i32, i32* %i, align 4, !tbaa !10
  %inc = add i32 %309, 1
  store i32 %inc, i32* %i, align 4, !tbaa !10
  br label %for.cond315

for.end368:                                       ; preds = %for.cond315
  %310 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %310) #10
  br label %if.end376

if.else:                                          ; preds = %land.lhs.true165, %land.lhs.true158, %lor.lhs.false
  %311 = load i32, i32* %comp_block_succeeded, align 4, !tbaa !10
  %tobool369 = icmp ne i32 %311, 0
  br i1 %tobool369, label %if.end375, label %if.then370

if.then370:                                       ; preds = %if.else
  %312 = load i8*, i8** %pSaved_output_buf, align 8, !tbaa !8
  %313 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf371 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %313, i32 0, i32 11
  store i8* %312, i8** %m_pOutput_buf371, align 8, !tbaa !44
  %314 = load i32, i32* %saved_bit_buf, align 4, !tbaa !10
  %315 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer372 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %315, i32 0, i32 17
  store i32 %314, i32* %m_bit_buffer372, align 8, !tbaa !36
  %316 = load i32, i32* %saved_bits_in, align 4, !tbaa !10
  %317 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in373 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %317, i32 0, i32 16
  store i32 %316, i32* %m_bits_in373, align 4, !tbaa !29
  %318 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call374 = call i32 @tdefl_compress_block(%struct.tdefl_compressor* %318, i32 1)
  br label %if.end375

if.end375:                                        ; preds = %if.then370, %if.else
  br label %if.end376

if.end376:                                        ; preds = %if.end375, %for.end368
  %319 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %tobool377 = icmp ne i32 %319, 0
  br i1 %tobool377, label %if.then378, label %if.end636

if.then378:                                       ; preds = %if.end376
  %320 = load i32, i32* %flush.addr, align 4, !tbaa !10
  %cmp379 = icmp eq i32 %320, 4
  br i1 %cmp379, label %if.then381, label %if.else490

if.then381:                                       ; preds = %if.then378
  %321 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in382 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %321, i32 0, i32 16
  %322 = load i32, i32* %m_bits_in382, align 4, !tbaa !29
  %tobool383 = icmp ne i32 %322, 0
  br i1 %tobool383, label %if.then384, label %if.end430

if.then384:                                       ; preds = %if.then381
  br label %do.body385

do.body385:                                       ; preds = %if.then384
  %323 = bitcast i32* %bits386 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %323) #10
  store i32 0, i32* %bits386, align 4, !tbaa !10
  %324 = bitcast i32* %len387 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %324) #10
  %325 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in388 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %325, i32 0, i32 16
  %326 = load i32, i32* %m_bits_in388, align 4, !tbaa !29
  %sub389 = sub i32 8, %326
  store i32 %sub389, i32* %len387, align 4, !tbaa !10
  %327 = load i32, i32* %bits386, align 4, !tbaa !10
  %328 = load i32, i32* %len387, align 4, !tbaa !10
  %shl390 = shl i32 1, %328
  %sub391 = sub i32 %shl390, 1
  %cmp392 = icmp ule i32 %327, %sub391
  %lnot394 = xor i1 %cmp392, true
  %lnot.ext395 = zext i1 %lnot394 to i32
  %conv396 = sext i32 %lnot.ext395 to i64
  %expval397 = call i64 @llvm.expect.i64(i64 %conv396, i64 0)
  %tobool398 = icmp ne i64 %expval397, 0
  br i1 %tobool398, label %cond.true399, label %cond.false400

cond.true399:                                     ; preds = %do.body385
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1300, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

329:                                              ; No predecessors!
  br label %cond.end401

cond.false400:                                    ; preds = %do.body385
  br label %cond.end401

cond.end401:                                      ; preds = %cond.false400, %329
  %330 = load i32, i32* %bits386, align 4, !tbaa !10
  %331 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in402 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %331, i32 0, i32 16
  %332 = load i32, i32* %m_bits_in402, align 4, !tbaa !29
  %shl403 = shl i32 %330, %332
  %333 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer404 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %333, i32 0, i32 17
  %334 = load i32, i32* %m_bit_buffer404, align 8, !tbaa !36
  %or405 = or i32 %334, %shl403
  store i32 %or405, i32* %m_bit_buffer404, align 8, !tbaa !36
  %335 = load i32, i32* %len387, align 4, !tbaa !10
  %336 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in406 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %336, i32 0, i32 16
  %337 = load i32, i32* %m_bits_in406, align 4, !tbaa !29
  %add407 = add i32 %337, %335
  store i32 %add407, i32* %m_bits_in406, align 4, !tbaa !29
  br label %while.cond408

while.cond408:                                    ; preds = %if.end422, %cond.end401
  %338 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in409 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %338, i32 0, i32 16
  %339 = load i32, i32* %m_bits_in409, align 4, !tbaa !29
  %cmp410 = icmp uge i32 %339, 8
  br i1 %cmp410, label %while.body412, label %while.end427

while.body412:                                    ; preds = %while.cond408
  %340 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf413 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %340, i32 0, i32 11
  %341 = load i8*, i8** %m_pOutput_buf413, align 8, !tbaa !44
  %342 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end414 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %342, i32 0, i32 12
  %343 = load i8*, i8** %m_pOutput_buf_end414, align 8, !tbaa !45
  %cmp415 = icmp ult i8* %341, %343
  br i1 %cmp415, label %if.then417, label %if.end422

if.then417:                                       ; preds = %while.body412
  %344 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer418 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %344, i32 0, i32 17
  %345 = load i32, i32* %m_bit_buffer418, align 8, !tbaa !36
  %conv419 = trunc i32 %345 to i8
  %346 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf420 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %346, i32 0, i32 11
  %347 = load i8*, i8** %m_pOutput_buf420, align 8, !tbaa !44
  %incdec.ptr421 = getelementptr inbounds i8, i8* %347, i32 1
  store i8* %incdec.ptr421, i8** %m_pOutput_buf420, align 8, !tbaa !44
  store i8 %conv419, i8* %347, align 1, !tbaa !12
  br label %if.end422

if.end422:                                        ; preds = %if.then417, %while.body412
  %348 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer423 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %348, i32 0, i32 17
  %349 = load i32, i32* %m_bit_buffer423, align 8, !tbaa !36
  %shr424 = lshr i32 %349, 8
  store i32 %shr424, i32* %m_bit_buffer423, align 8, !tbaa !36
  %350 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in425 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %350, i32 0, i32 16
  %351 = load i32, i32* %m_bits_in425, align 4, !tbaa !29
  %sub426 = sub i32 %351, 8
  store i32 %sub426, i32* %m_bits_in425, align 4, !tbaa !29
  br label %while.cond408

while.end427:                                     ; preds = %while.cond408
  %352 = bitcast i32* %len387 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %352) #10
  %353 = bitcast i32* %bits386 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %353) #10
  br label %do.cond428

do.cond428:                                       ; preds = %while.end427
  br label %do.end429

do.end429:                                        ; preds = %do.cond428
  br label %if.end430

if.end430:                                        ; preds = %do.end429, %if.then381
  %354 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_flags431 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %354, i32 0, i32 2
  %355 = load i32, i32* %m_flags431, align 8, !tbaa !27
  %and432 = and i32 %355, 4096
  %tobool433 = icmp ne i32 %and432, 0
  br i1 %tobool433, label %if.then434, label %if.end489

if.then434:                                       ; preds = %if.end430
  %356 = bitcast i32* %i435 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %356) #10
  %357 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %357) #10
  %358 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_adler32 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %358, i32 0, i32 5
  %359 = load i32, i32* %m_adler32, align 8, !tbaa !50
  store i32 %359, i32* %a, align 4, !tbaa !10
  store i32 0, i32* %i435, align 4, !tbaa !10
  br label %for.cond436

for.cond436:                                      ; preds = %for.inc486, %if.then434
  %360 = load i32, i32* %i435, align 4, !tbaa !10
  %cmp437 = icmp ult i32 %360, 4
  br i1 %cmp437, label %for.body439, label %for.end488

for.body439:                                      ; preds = %for.cond436
  br label %do.body440

do.body440:                                       ; preds = %for.body439
  %361 = bitcast i32* %bits441 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %361) #10
  %362 = load i32, i32* %a, align 4, !tbaa !10
  %shr442 = lshr i32 %362, 24
  %and443 = and i32 %shr442, 255
  store i32 %and443, i32* %bits441, align 4, !tbaa !10
  %363 = bitcast i32* %len444 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %363) #10
  store i32 8, i32* %len444, align 4, !tbaa !10
  %364 = load i32, i32* %bits441, align 4, !tbaa !10
  %365 = load i32, i32* %len444, align 4, !tbaa !10
  %shl445 = shl i32 1, %365
  %sub446 = sub i32 %shl445, 1
  %cmp447 = icmp ule i32 %364, %sub446
  %lnot449 = xor i1 %cmp447, true
  %lnot.ext450 = zext i1 %lnot449 to i32
  %conv451 = sext i32 %lnot.ext450 to i64
  %expval452 = call i64 @llvm.expect.i64(i64 %conv451, i64 0)
  %tobool453 = icmp ne i64 %expval452, 0
  br i1 %tobool453, label %cond.true454, label %cond.false455

cond.true454:                                     ; preds = %do.body440
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1307, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

366:                                              ; No predecessors!
  br label %cond.end456

cond.false455:                                    ; preds = %do.body440
  br label %cond.end456

cond.end456:                                      ; preds = %cond.false455, %366
  %367 = load i32, i32* %bits441, align 4, !tbaa !10
  %368 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in457 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %368, i32 0, i32 16
  %369 = load i32, i32* %m_bits_in457, align 4, !tbaa !29
  %shl458 = shl i32 %367, %369
  %370 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer459 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %370, i32 0, i32 17
  %371 = load i32, i32* %m_bit_buffer459, align 8, !tbaa !36
  %or460 = or i32 %371, %shl458
  store i32 %or460, i32* %m_bit_buffer459, align 8, !tbaa !36
  %372 = load i32, i32* %len444, align 4, !tbaa !10
  %373 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in461 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %373, i32 0, i32 16
  %374 = load i32, i32* %m_bits_in461, align 4, !tbaa !29
  %add462 = add i32 %374, %372
  store i32 %add462, i32* %m_bits_in461, align 4, !tbaa !29
  br label %while.cond463

while.cond463:                                    ; preds = %if.end477, %cond.end456
  %375 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in464 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %375, i32 0, i32 16
  %376 = load i32, i32* %m_bits_in464, align 4, !tbaa !29
  %cmp465 = icmp uge i32 %376, 8
  br i1 %cmp465, label %while.body467, label %while.end482

while.body467:                                    ; preds = %while.cond463
  %377 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf468 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %377, i32 0, i32 11
  %378 = load i8*, i8** %m_pOutput_buf468, align 8, !tbaa !44
  %379 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end469 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %379, i32 0, i32 12
  %380 = load i8*, i8** %m_pOutput_buf_end469, align 8, !tbaa !45
  %cmp470 = icmp ult i8* %378, %380
  br i1 %cmp470, label %if.then472, label %if.end477

if.then472:                                       ; preds = %while.body467
  %381 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer473 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %381, i32 0, i32 17
  %382 = load i32, i32* %m_bit_buffer473, align 8, !tbaa !36
  %conv474 = trunc i32 %382 to i8
  %383 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf475 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %383, i32 0, i32 11
  %384 = load i8*, i8** %m_pOutput_buf475, align 8, !tbaa !44
  %incdec.ptr476 = getelementptr inbounds i8, i8* %384, i32 1
  store i8* %incdec.ptr476, i8** %m_pOutput_buf475, align 8, !tbaa !44
  store i8 %conv474, i8* %384, align 1, !tbaa !12
  br label %if.end477

if.end477:                                        ; preds = %if.then472, %while.body467
  %385 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer478 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %385, i32 0, i32 17
  %386 = load i32, i32* %m_bit_buffer478, align 8, !tbaa !36
  %shr479 = lshr i32 %386, 8
  store i32 %shr479, i32* %m_bit_buffer478, align 8, !tbaa !36
  %387 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in480 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %387, i32 0, i32 16
  %388 = load i32, i32* %m_bits_in480, align 4, !tbaa !29
  %sub481 = sub i32 %388, 8
  store i32 %sub481, i32* %m_bits_in480, align 4, !tbaa !29
  br label %while.cond463

while.end482:                                     ; preds = %while.cond463
  %389 = bitcast i32* %len444 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %389) #10
  %390 = bitcast i32* %bits441 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %390) #10
  br label %do.cond483

do.cond483:                                       ; preds = %while.end482
  br label %do.end484

do.end484:                                        ; preds = %do.cond483
  %391 = load i32, i32* %a, align 4, !tbaa !10
  %shl485 = shl i32 %391, 8
  store i32 %shl485, i32* %a, align 4, !tbaa !10
  br label %for.inc486

for.inc486:                                       ; preds = %do.end484
  %392 = load i32, i32* %i435, align 4, !tbaa !10
  %inc487 = add i32 %392, 1
  store i32 %inc487, i32* %i435, align 4, !tbaa !10
  br label %for.cond436

for.end488:                                       ; preds = %for.cond436
  %393 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %393) #10
  %394 = bitcast i32* %i435 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %394) #10
  br label %if.end489

if.end489:                                        ; preds = %for.end488, %if.end430
  br label %if.end635

if.else490:                                       ; preds = %if.then378
  %395 = bitcast i32* %i491 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %395) #10
  %396 = bitcast i32* %z to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %396) #10
  store i32 0, i32* %z, align 4, !tbaa !10
  br label %do.body492

do.body492:                                       ; preds = %if.else490
  %397 = bitcast i32* %bits493 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %397) #10
  store i32 0, i32* %bits493, align 4, !tbaa !10
  %398 = bitcast i32* %len494 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %398) #10
  store i32 3, i32* %len494, align 4, !tbaa !10
  %399 = load i32, i32* %bits493, align 4, !tbaa !10
  %400 = load i32, i32* %len494, align 4, !tbaa !10
  %shl495 = shl i32 1, %400
  %sub496 = sub i32 %shl495, 1
  %cmp497 = icmp ule i32 %399, %sub496
  %lnot499 = xor i1 %cmp497, true
  %lnot.ext500 = zext i1 %lnot499 to i32
  %conv501 = sext i32 %lnot.ext500 to i64
  %expval502 = call i64 @llvm.expect.i64(i64 %conv501, i64 0)
  %tobool503 = icmp ne i64 %expval502, 0
  br i1 %tobool503, label %cond.true504, label %cond.false505

cond.true504:                                     ; preds = %do.body492
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1315, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

401:                                              ; No predecessors!
  br label %cond.end506

cond.false505:                                    ; preds = %do.body492
  br label %cond.end506

cond.end506:                                      ; preds = %cond.false505, %401
  %402 = load i32, i32* %bits493, align 4, !tbaa !10
  %403 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in507 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %403, i32 0, i32 16
  %404 = load i32, i32* %m_bits_in507, align 4, !tbaa !29
  %shl508 = shl i32 %402, %404
  %405 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer509 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %405, i32 0, i32 17
  %406 = load i32, i32* %m_bit_buffer509, align 8, !tbaa !36
  %or510 = or i32 %406, %shl508
  store i32 %or510, i32* %m_bit_buffer509, align 8, !tbaa !36
  %407 = load i32, i32* %len494, align 4, !tbaa !10
  %408 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in511 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %408, i32 0, i32 16
  %409 = load i32, i32* %m_bits_in511, align 4, !tbaa !29
  %add512 = add i32 %409, %407
  store i32 %add512, i32* %m_bits_in511, align 4, !tbaa !29
  br label %while.cond513

while.cond513:                                    ; preds = %if.end527, %cond.end506
  %410 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in514 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %410, i32 0, i32 16
  %411 = load i32, i32* %m_bits_in514, align 4, !tbaa !29
  %cmp515 = icmp uge i32 %411, 8
  br i1 %cmp515, label %while.body517, label %while.end532

while.body517:                                    ; preds = %while.cond513
  %412 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf518 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %412, i32 0, i32 11
  %413 = load i8*, i8** %m_pOutput_buf518, align 8, !tbaa !44
  %414 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end519 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %414, i32 0, i32 12
  %415 = load i8*, i8** %m_pOutput_buf_end519, align 8, !tbaa !45
  %cmp520 = icmp ult i8* %413, %415
  br i1 %cmp520, label %if.then522, label %if.end527

if.then522:                                       ; preds = %while.body517
  %416 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer523 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %416, i32 0, i32 17
  %417 = load i32, i32* %m_bit_buffer523, align 8, !tbaa !36
  %conv524 = trunc i32 %417 to i8
  %418 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf525 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %418, i32 0, i32 11
  %419 = load i8*, i8** %m_pOutput_buf525, align 8, !tbaa !44
  %incdec.ptr526 = getelementptr inbounds i8, i8* %419, i32 1
  store i8* %incdec.ptr526, i8** %m_pOutput_buf525, align 8, !tbaa !44
  store i8 %conv524, i8* %419, align 1, !tbaa !12
  br label %if.end527

if.end527:                                        ; preds = %if.then522, %while.body517
  %420 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer528 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %420, i32 0, i32 17
  %421 = load i32, i32* %m_bit_buffer528, align 8, !tbaa !36
  %shr529 = lshr i32 %421, 8
  store i32 %shr529, i32* %m_bit_buffer528, align 8, !tbaa !36
  %422 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in530 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %422, i32 0, i32 16
  %423 = load i32, i32* %m_bits_in530, align 4, !tbaa !29
  %sub531 = sub i32 %423, 8
  store i32 %sub531, i32* %m_bits_in530, align 4, !tbaa !29
  br label %while.cond513

while.end532:                                     ; preds = %while.cond513
  %424 = bitcast i32* %len494 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %424) #10
  %425 = bitcast i32* %bits493 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %425) #10
  br label %do.cond533

do.cond533:                                       ; preds = %while.end532
  br label %do.end534

do.end534:                                        ; preds = %do.cond533
  %426 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in535 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %426, i32 0, i32 16
  %427 = load i32, i32* %m_bits_in535, align 4, !tbaa !29
  %tobool536 = icmp ne i32 %427, 0
  br i1 %tobool536, label %if.then537, label %if.end583

if.then537:                                       ; preds = %do.end534
  br label %do.body538

do.body538:                                       ; preds = %if.then537
  %428 = bitcast i32* %bits539 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %428) #10
  store i32 0, i32* %bits539, align 4, !tbaa !10
  %429 = bitcast i32* %len540 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %429) #10
  %430 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in541 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %430, i32 0, i32 16
  %431 = load i32, i32* %m_bits_in541, align 4, !tbaa !29
  %sub542 = sub i32 8, %431
  store i32 %sub542, i32* %len540, align 4, !tbaa !10
  %432 = load i32, i32* %bits539, align 4, !tbaa !10
  %433 = load i32, i32* %len540, align 4, !tbaa !10
  %shl543 = shl i32 1, %433
  %sub544 = sub i32 %shl543, 1
  %cmp545 = icmp ule i32 %432, %sub544
  %lnot547 = xor i1 %cmp545, true
  %lnot.ext548 = zext i1 %lnot547 to i32
  %conv549 = sext i32 %lnot.ext548 to i64
  %expval550 = call i64 @llvm.expect.i64(i64 %conv549, i64 0)
  %tobool551 = icmp ne i64 %expval550, 0
  br i1 %tobool551, label %cond.true552, label %cond.false553

cond.true552:                                     ; preds = %do.body538
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1318, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

434:                                              ; No predecessors!
  br label %cond.end554

cond.false553:                                    ; preds = %do.body538
  br label %cond.end554

cond.end554:                                      ; preds = %cond.false553, %434
  %435 = load i32, i32* %bits539, align 4, !tbaa !10
  %436 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in555 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %436, i32 0, i32 16
  %437 = load i32, i32* %m_bits_in555, align 4, !tbaa !29
  %shl556 = shl i32 %435, %437
  %438 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer557 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %438, i32 0, i32 17
  %439 = load i32, i32* %m_bit_buffer557, align 8, !tbaa !36
  %or558 = or i32 %439, %shl556
  store i32 %or558, i32* %m_bit_buffer557, align 8, !tbaa !36
  %440 = load i32, i32* %len540, align 4, !tbaa !10
  %441 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in559 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %441, i32 0, i32 16
  %442 = load i32, i32* %m_bits_in559, align 4, !tbaa !29
  %add560 = add i32 %442, %440
  store i32 %add560, i32* %m_bits_in559, align 4, !tbaa !29
  br label %while.cond561

while.cond561:                                    ; preds = %if.end575, %cond.end554
  %443 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in562 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %443, i32 0, i32 16
  %444 = load i32, i32* %m_bits_in562, align 4, !tbaa !29
  %cmp563 = icmp uge i32 %444, 8
  br i1 %cmp563, label %while.body565, label %while.end580

while.body565:                                    ; preds = %while.cond561
  %445 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf566 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %445, i32 0, i32 11
  %446 = load i8*, i8** %m_pOutput_buf566, align 8, !tbaa !44
  %447 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end567 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %447, i32 0, i32 12
  %448 = load i8*, i8** %m_pOutput_buf_end567, align 8, !tbaa !45
  %cmp568 = icmp ult i8* %446, %448
  br i1 %cmp568, label %if.then570, label %if.end575

if.then570:                                       ; preds = %while.body565
  %449 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer571 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %449, i32 0, i32 17
  %450 = load i32, i32* %m_bit_buffer571, align 8, !tbaa !36
  %conv572 = trunc i32 %450 to i8
  %451 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf573 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %451, i32 0, i32 11
  %452 = load i8*, i8** %m_pOutput_buf573, align 8, !tbaa !44
  %incdec.ptr574 = getelementptr inbounds i8, i8* %452, i32 1
  store i8* %incdec.ptr574, i8** %m_pOutput_buf573, align 8, !tbaa !44
  store i8 %conv572, i8* %452, align 1, !tbaa !12
  br label %if.end575

if.end575:                                        ; preds = %if.then570, %while.body565
  %453 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer576 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %453, i32 0, i32 17
  %454 = load i32, i32* %m_bit_buffer576, align 8, !tbaa !36
  %shr577 = lshr i32 %454, 8
  store i32 %shr577, i32* %m_bit_buffer576, align 8, !tbaa !36
  %455 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in578 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %455, i32 0, i32 16
  %456 = load i32, i32* %m_bits_in578, align 4, !tbaa !29
  %sub579 = sub i32 %456, 8
  store i32 %sub579, i32* %m_bits_in578, align 4, !tbaa !29
  br label %while.cond561

while.end580:                                     ; preds = %while.cond561
  %457 = bitcast i32* %len540 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %457) #10
  %458 = bitcast i32* %bits539 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %458) #10
  br label %do.cond581

do.cond581:                                       ; preds = %while.end580
  br label %do.end582

do.end582:                                        ; preds = %do.cond581
  br label %if.end583

if.end583:                                        ; preds = %do.end582, %do.end534
  store i32 2, i32* %i491, align 4, !tbaa !10
  br label %for.cond584

for.cond584:                                      ; preds = %for.inc631, %if.end583
  %459 = load i32, i32* %i491, align 4, !tbaa !10
  %tobool585 = icmp ne i32 %459, 0
  br i1 %tobool585, label %for.body586, label %for.end634

for.body586:                                      ; preds = %for.cond584
  br label %do.body587

do.body587:                                       ; preds = %for.body586
  %460 = bitcast i32* %bits588 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %460) #10
  %461 = load i32, i32* %z, align 4, !tbaa !10
  %and589 = and i32 %461, 65535
  store i32 %and589, i32* %bits588, align 4, !tbaa !10
  %462 = bitcast i32* %len590 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %462) #10
  store i32 16, i32* %len590, align 4, !tbaa !10
  %463 = load i32, i32* %bits588, align 4, !tbaa !10
  %464 = load i32, i32* %len590, align 4, !tbaa !10
  %shl591 = shl i32 1, %464
  %sub592 = sub i32 %shl591, 1
  %cmp593 = icmp ule i32 %463, %sub592
  %lnot595 = xor i1 %cmp593, true
  %lnot.ext596 = zext i1 %lnot595 to i32
  %conv597 = sext i32 %lnot.ext596 to i64
  %expval598 = call i64 @llvm.expect.i64(i64 %conv597, i64 0)
  %tobool599 = icmp ne i64 %expval598, 0
  br i1 %tobool599, label %cond.true600, label %cond.false601

cond.true600:                                     ; preds = %do.body587
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1322, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

465:                                              ; No predecessors!
  br label %cond.end602

cond.false601:                                    ; preds = %do.body587
  br label %cond.end602

cond.end602:                                      ; preds = %cond.false601, %465
  %466 = load i32, i32* %bits588, align 4, !tbaa !10
  %467 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in603 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %467, i32 0, i32 16
  %468 = load i32, i32* %m_bits_in603, align 4, !tbaa !29
  %shl604 = shl i32 %466, %468
  %469 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer605 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %469, i32 0, i32 17
  %470 = load i32, i32* %m_bit_buffer605, align 8, !tbaa !36
  %or606 = or i32 %470, %shl604
  store i32 %or606, i32* %m_bit_buffer605, align 8, !tbaa !36
  %471 = load i32, i32* %len590, align 4, !tbaa !10
  %472 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in607 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %472, i32 0, i32 16
  %473 = load i32, i32* %m_bits_in607, align 4, !tbaa !29
  %add608 = add i32 %473, %471
  store i32 %add608, i32* %m_bits_in607, align 4, !tbaa !29
  br label %while.cond609

while.cond609:                                    ; preds = %if.end623, %cond.end602
  %474 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in610 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %474, i32 0, i32 16
  %475 = load i32, i32* %m_bits_in610, align 4, !tbaa !29
  %cmp611 = icmp uge i32 %475, 8
  br i1 %cmp611, label %while.body613, label %while.end628

while.body613:                                    ; preds = %while.cond609
  %476 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf614 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %476, i32 0, i32 11
  %477 = load i8*, i8** %m_pOutput_buf614, align 8, !tbaa !44
  %478 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end615 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %478, i32 0, i32 12
  %479 = load i8*, i8** %m_pOutput_buf_end615, align 8, !tbaa !45
  %cmp616 = icmp ult i8* %477, %479
  br i1 %cmp616, label %if.then618, label %if.end623

if.then618:                                       ; preds = %while.body613
  %480 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer619 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %480, i32 0, i32 17
  %481 = load i32, i32* %m_bit_buffer619, align 8, !tbaa !36
  %conv620 = trunc i32 %481 to i8
  %482 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf621 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %482, i32 0, i32 11
  %483 = load i8*, i8** %m_pOutput_buf621, align 8, !tbaa !44
  %incdec.ptr622 = getelementptr inbounds i8, i8* %483, i32 1
  store i8* %incdec.ptr622, i8** %m_pOutput_buf621, align 8, !tbaa !44
  store i8 %conv620, i8* %483, align 1, !tbaa !12
  br label %if.end623

if.end623:                                        ; preds = %if.then618, %while.body613
  %484 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer624 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %484, i32 0, i32 17
  %485 = load i32, i32* %m_bit_buffer624, align 8, !tbaa !36
  %shr625 = lshr i32 %485, 8
  store i32 %shr625, i32* %m_bit_buffer624, align 8, !tbaa !36
  %486 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in626 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %486, i32 0, i32 16
  %487 = load i32, i32* %m_bits_in626, align 4, !tbaa !29
  %sub627 = sub i32 %487, 8
  store i32 %sub627, i32* %m_bits_in626, align 4, !tbaa !29
  br label %while.cond609

while.end628:                                     ; preds = %while.cond609
  %488 = bitcast i32* %len590 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %488) #10
  %489 = bitcast i32* %bits588 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %489) #10
  br label %do.cond629

do.cond629:                                       ; preds = %while.end628
  br label %do.end630

do.end630:                                        ; preds = %do.cond629
  br label %for.inc631

for.inc631:                                       ; preds = %do.end630
  %490 = load i32, i32* %i491, align 4, !tbaa !10
  %dec632 = add i32 %490, -1
  store i32 %dec632, i32* %i491, align 4, !tbaa !10
  %491 = load i32, i32* %z, align 4, !tbaa !10
  %xor633 = xor i32 %491, 65535
  store i32 %xor633, i32* %z, align 4, !tbaa !10
  br label %for.cond584

for.end634:                                       ; preds = %for.cond584
  %492 = bitcast i32* %z to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %492) #10
  %493 = bitcast i32* %i491 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %493) #10
  br label %if.end635

if.end635:                                        ; preds = %for.end634, %if.end489
  br label %if.end636

if.end636:                                        ; preds = %if.end635, %if.end376
  %494 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf637 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %494, i32 0, i32 11
  %495 = load i8*, i8** %m_pOutput_buf637, align 8, !tbaa !44
  %496 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end638 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %496, i32 0, i32 12
  %497 = load i8*, i8** %m_pOutput_buf_end638, align 8, !tbaa !45
  %cmp639 = icmp ult i8* %495, %497
  %lnot641 = xor i1 %cmp639, true
  %lnot.ext642 = zext i1 %lnot641 to i32
  %conv643 = sext i32 %lnot.ext642 to i64
  %expval644 = call i64 @llvm.expect.i64(i64 %conv643, i64 0)
  %tobool645 = icmp ne i64 %expval644, 0
  br i1 %tobool645, label %cond.true646, label %cond.false647

cond.true646:                                     ; preds = %if.end636
  call void @__assert_rtn(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.tdefl_flush_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1327, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.65, i64 0, i64 0)) #13
  unreachable

498:                                              ; No predecessors!
  br label %cond.end648

cond.false647:                                    ; preds = %if.end636
  br label %cond.end648

cond.end648:                                      ; preds = %cond.false647, %498
  %499 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %499, i32 0, i32 36
  %arrayidx649 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %arrayidx650 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx649, i64 0, i64 0
  %500 = bitcast i16* %arrayidx650 to i8*
  %501 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count651 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %501, i32 0, i32 36
  %arrayidx652 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count651, i64 0, i64 0
  %arrayidx653 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx652, i64 0, i64 0
  %502 = bitcast i16* %arrayidx653 to i8*
  %503 = call i64 @llvm.objectsize.i64.p0i8(i8* %502, i1 false, i1 true, i1 false)
  %call654 = call i8* @__memset_chk(i8* %500, i32 0, i64 576, i64 %503) #10
  %504 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count655 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %504, i32 0, i32 36
  %arrayidx656 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count655, i64 0, i64 1
  %arrayidx657 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx656, i64 0, i64 0
  %505 = bitcast i16* %arrayidx657 to i8*
  %506 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count658 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %506, i32 0, i32 36
  %arrayidx659 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count658, i64 0, i64 1
  %arrayidx660 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx659, i64 0, i64 0
  %507 = bitcast i16* %arrayidx660 to i8*
  %508 = call i64 @llvm.objectsize.i64.p0i8(i8* %507, i1 false, i1 true, i1 false)
  %call661 = call i8* @__memset_chk(i8* %505, i32 0, i64 64, i64 %508) #10
  %509 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %509, i32 0, i32 39
  %arraydecay662 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i64 0, i64 0
  %add.ptr663 = getelementptr inbounds i8, i8* %arraydecay662, i64 1
  %510 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf664 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %510, i32 0, i32 9
  store i8* %add.ptr663, i8** %m_pLZ_code_buf664, align 8, !tbaa !41
  %511 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf665 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %511, i32 0, i32 39
  %arraydecay666 = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf665, i64 0, i64 0
  %512 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags667 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %512, i32 0, i32 10
  store i8* %arraydecay666, i8** %m_pLZ_flags667, align 8, !tbaa !42
  %513 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left668 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %513, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left668, align 8, !tbaa !43
  %514 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes669 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %514, i32 0, i32 14
  %515 = load i32, i32* %m_total_lz_bytes669, align 4, !tbaa !31
  %516 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf_dict_pos670 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %516, i32 0, i32 15
  %517 = load i32, i32* %m_lz_code_buf_dict_pos670, align 8, !tbaa !30
  %add671 = add i32 %517, %515
  store i32 %add671, i32* %m_lz_code_buf_dict_pos670, align 8, !tbaa !30
  %518 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes672 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %518, i32 0, i32 14
  store i32 0, i32* %m_total_lz_bytes672, align 4, !tbaa !31
  %519 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_block_index673 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %519, i32 0, i32 24
  %520 = load i32, i32* %m_block_index673, align 4, !tbaa !37
  %inc674 = add i32 %520, 1
  store i32 %inc674, i32* %m_block_index673, align 4, !tbaa !37
  %521 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf675 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %521, i32 0, i32 11
  %522 = load i8*, i8** %m_pOutput_buf675, align 8, !tbaa !44
  %523 = load i8*, i8** %pOutput_buf_start, align 8, !tbaa !8
  %sub.ptr.lhs.cast676 = ptrtoint i8* %522 to i64
  %sub.ptr.rhs.cast677 = ptrtoint i8* %523 to i64
  %sub.ptr.sub678 = sub i64 %sub.ptr.lhs.cast676, %sub.ptr.rhs.cast677
  %conv679 = trunc i64 %sub.ptr.sub678 to i32
  store i32 %conv679, i32* %n, align 4, !tbaa !10
  %cmp680 = icmp ne i32 %conv679, 0
  br i1 %cmp680, label %if.then682, label %if.end743

if.then682:                                       ; preds = %cond.end648
  %524 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pPut_buf_func683 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %524, i32 0, i32 0
  %525 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func683, align 8, !tbaa !24
  %tobool684 = icmp ne i32 (i8*, i32, i8*)* %525, null
  br i1 %tobool684, label %if.then685, label %if.else696

if.then685:                                       ; preds = %if.then682
  %526 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pSrc = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %526, i32 0, i32 32
  %527 = load i8*, i8** %m_pSrc, align 8, !tbaa !56
  %528 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %528, i32 0, i32 27
  %529 = load i8*, i8** %m_pIn_buf, align 8, !tbaa !51
  %sub.ptr.lhs.cast686 = ptrtoint i8* %527 to i64
  %sub.ptr.rhs.cast687 = ptrtoint i8* %529 to i64
  %sub.ptr.sub688 = sub i64 %sub.ptr.lhs.cast686, %sub.ptr.rhs.cast687
  %530 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pIn_buf_size = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %530, i32 0, i32 29
  %531 = load i64*, i64** %m_pIn_buf_size, align 8, !tbaa !53
  store i64 %sub.ptr.sub688, i64* %531, align 8, !tbaa !4
  %532 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pPut_buf_func689 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %532, i32 0, i32 0
  %533 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func689, align 8, !tbaa !24
  %534 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_buf690 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %534, i32 0, i32 42
  %arraydecay691 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf690, i64 0, i64 0
  %535 = load i32, i32* %n, align 4, !tbaa !10
  %536 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pPut_buf_user = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %536, i32 0, i32 1
  %537 = load i8*, i8** %m_pPut_buf_user, align 8, !tbaa !26
  %call692 = call i32 %533(i8* %arraydecay691, i32 %535, i8* %537)
  %tobool693 = icmp ne i32 %call692, 0
  br i1 %tobool693, label %if.end695, label %if.then694

if.then694:                                       ; preds = %if.then685
  %538 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %538, i32 0, i32 26
  store i32 -1, i32* %m_prev_return_status, align 4, !tbaa !46
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end695:                                        ; preds = %if.then685
  br label %if.end742

if.else696:                                       ; preds = %if.then682
  %539 = load i8*, i8** %pOutput_buf_start, align 8, !tbaa !8
  %540 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_buf697 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %540, i32 0, i32 42
  %arraydecay698 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf697, i64 0, i64 0
  %cmp699 = icmp eq i8* %539, %arraydecay698
  br i1 %cmp699, label %if.then701, label %if.else737

if.then701:                                       ; preds = %if.else696
  %541 = bitcast i32* %bytes_to_copy to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %541) #10
  %542 = load i32, i32* %n, align 4, !tbaa !10
  %conv702 = sext i32 %542 to i64
  %543 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size703 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %543, i32 0, i32 30
  %544 = load i64*, i64** %m_pOut_buf_size703, align 8, !tbaa !54
  %545 = load i64, i64* %544, align 8, !tbaa !4
  %546 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs704 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %546, i32 0, i32 34
  %547 = load i64, i64* %m_out_buf_ofs704, align 8, !tbaa !58
  %sub705 = sub i64 %545, %547
  %cmp706 = icmp ult i64 %conv702, %sub705
  br i1 %cmp706, label %cond.true708, label %cond.false710

cond.true708:                                     ; preds = %if.then701
  %548 = load i32, i32* %n, align 4, !tbaa !10
  %conv709 = sext i32 %548 to i64
  br label %cond.end714

cond.false710:                                    ; preds = %if.then701
  %549 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf_size711 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %549, i32 0, i32 30
  %550 = load i64*, i64** %m_pOut_buf_size711, align 8, !tbaa !54
  %551 = load i64, i64* %550, align 8, !tbaa !4
  %552 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs712 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %552, i32 0, i32 34
  %553 = load i64, i64* %m_out_buf_ofs712, align 8, !tbaa !58
  %sub713 = sub i64 %551, %553
  br label %cond.end714

cond.end714:                                      ; preds = %cond.false710, %cond.true708
  %cond715 = phi i64 [ %conv709, %cond.true708 ], [ %sub713, %cond.false710 ]
  %conv716 = trunc i64 %cond715 to i32
  store i32 %conv716, i32* %bytes_to_copy, align 4, !tbaa !10
  %554 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf717 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %554, i32 0, i32 28
  %555 = load i8*, i8** %m_pOut_buf717, align 8, !tbaa !52
  %556 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs718 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %556, i32 0, i32 34
  %557 = load i64, i64* %m_out_buf_ofs718, align 8, !tbaa !58
  %add.ptr719 = getelementptr inbounds i8, i8* %555, i64 %557
  %558 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_buf720 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %558, i32 0, i32 42
  %arraydecay721 = getelementptr inbounds [85196 x i8], [85196 x i8]* %m_output_buf720, i64 0, i64 0
  %559 = load i32, i32* %bytes_to_copy, align 4, !tbaa !10
  %conv722 = sext i32 %559 to i64
  %560 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOut_buf723 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %560, i32 0, i32 28
  %561 = load i8*, i8** %m_pOut_buf723, align 8, !tbaa !52
  %562 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs724 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %562, i32 0, i32 34
  %563 = load i64, i64* %m_out_buf_ofs724, align 8, !tbaa !58
  %add.ptr725 = getelementptr inbounds i8, i8* %561, i64 %563
  %564 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr725, i1 false, i1 true, i1 false)
  %call726 = call i8* @__memcpy_chk(i8* %add.ptr719, i8* %arraydecay721, i64 %conv722, i64 %564) #10
  %565 = load i32, i32* %bytes_to_copy, align 4, !tbaa !10
  %conv727 = sext i32 %565 to i64
  %566 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs728 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %566, i32 0, i32 34
  %567 = load i64, i64* %m_out_buf_ofs728, align 8, !tbaa !58
  %add729 = add i64 %567, %conv727
  store i64 %add729, i64* %m_out_buf_ofs728, align 8, !tbaa !58
  %568 = load i32, i32* %bytes_to_copy, align 4, !tbaa !10
  %569 = load i32, i32* %n, align 4, !tbaa !10
  %sub730 = sub nsw i32 %569, %568
  store i32 %sub730, i32* %n, align 4, !tbaa !10
  %cmp731 = icmp ne i32 %sub730, 0
  br i1 %cmp731, label %if.then733, label %if.end736

if.then733:                                       ; preds = %cond.end714
  %570 = load i32, i32* %bytes_to_copy, align 4, !tbaa !10
  %571 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_ofs734 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %571, i32 0, i32 21
  store i32 %570, i32* %m_output_flush_ofs734, align 8, !tbaa !40
  %572 = load i32, i32* %n, align 4, !tbaa !10
  %573 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining735 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %573, i32 0, i32 22
  store i32 %572, i32* %m_output_flush_remaining735, align 4, !tbaa !39
  br label %if.end736

if.end736:                                        ; preds = %if.then733, %cond.end714
  %574 = bitcast i32* %bytes_to_copy to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %574) #10
  br label %if.end741

if.else737:                                       ; preds = %if.else696
  %575 = load i32, i32* %n, align 4, !tbaa !10
  %conv738 = sext i32 %575 to i64
  %576 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_out_buf_ofs739 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %576, i32 0, i32 34
  %577 = load i64, i64* %m_out_buf_ofs739, align 8, !tbaa !58
  %add740 = add i64 %577, %conv738
  store i64 %add740, i64* %m_out_buf_ofs739, align 8, !tbaa !58
  br label %if.end741

if.end741:                                        ; preds = %if.else737, %if.end736
  br label %if.end742

if.end742:                                        ; preds = %if.end741, %if.end695
  br label %if.end743

if.end743:                                        ; preds = %if.end742, %cond.end648
  %578 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_output_flush_remaining744 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %578, i32 0, i32 22
  %579 = load i32, i32* %m_output_flush_remaining744, align 4, !tbaa !39
  store i32 %579, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end743, %if.then694
  %580 = bitcast i8** %pOutput_buf_start to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %580) #10
  %581 = bitcast i32* %use_raw_block to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %581) #10
  %582 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %582) #10
  %583 = bitcast i32* %comp_block_succeeded to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %583) #10
  %584 = bitcast i8** %pSaved_output_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %584) #10
  %585 = bitcast i32* %saved_bits_in to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %585) #10
  %586 = bitcast i32* %saved_bit_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %586) #10
  %587 = load i32, i32* %retval, align 4
  ret i32 %587
}

; Function Attrs: nounwind
declare i8* @__memset_chk(i8*, i32, i64, i64) #5

; Function Attrs: nounwind ssp uwtable
define i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %d, i8* %pIn_buf, i64 %in_buf_size, i32 %flush) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %pIn_buf.addr = alloca i8*, align 8
  %in_buf_size.addr = alloca i64, align 8
  %flush.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8, !tbaa !8
  store i64 %in_buf_size, i64* %in_buf_size.addr, align 8, !tbaa !4
  store i32 %flush, i32* %flush.addr, align 4, !tbaa !12
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pPut_buf_func = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 0
  %1 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %m_pPut_buf_func, align 8, !tbaa !24
  %tobool = icmp ne i32 (i8*, i32, i8*)* %1, null
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool1 = icmp ne i64 %expval, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__func__.tdefl_compress_buffer, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1947, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0)) #13
  unreachable

2:                                                ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %2
  %3 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %4 = load i8*, i8** %pIn_buf.addr, align 8, !tbaa !8
  %5 = load i32, i32* %flush.addr, align 4, !tbaa !12
  %call = call i32 @tdefl_compress(%struct.tdefl_compressor* %3, i8* %4, i64* %in_buf_size.addr, i8* null, i64* null, i32 %5)
  ret i32 %call
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #7

; Function Attrs: cold noreturn
declare void @__assert_rtn(i8*, i8*, i32, i8*) #8

; Function Attrs: nounwind ssp uwtable
define i32 @tdefl_get_prev_return_status(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_prev_return_status = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 26
  %1 = load i32, i32* %m_prev_return_status, align 4, !tbaa !46
  ret i32 %1
}

; Function Attrs: nounwind ssp uwtable
define i32 @tdefl_compress_mem_to_output(i8* %pBuf, i64 %buf_len, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_len.addr = alloca i64, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %succeeded = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_len, i64* %buf_len.addr, align 8, !tbaa !4
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8, !tbaa !8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i32* %succeeded to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %3 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %4 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8, !tbaa !8
  %tobool2 = icmp ne i32 (i8*, i32, i8*)* %4, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %call = call i8* @malloc(i64 319352) #11
  %5 = bitcast i8* %call to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %5, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %tobool3 = icmp ne %struct.tdefl_compressor* %6, null
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %7 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %8 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8, !tbaa !8
  %9 = load i8*, i8** %pPut_buf_user.addr, align 8, !tbaa !8
  %10 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call6 = call i32 @tdefl_init(%struct.tdefl_compressor* %7, i32 (i8*, i32, i8*)* %8, i8* %9, i32 %10)
  %cmp = icmp eq i32 %call6, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %succeeded, align 4, !tbaa !10
  %11 = load i32, i32* %succeeded, align 4, !tbaa !10
  %tobool7 = icmp ne i32 %11, 0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end5
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %13 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %14 = load i64, i64* %buf_len.addr, align 8, !tbaa !4
  %call8 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %12, i8* %13, i64 %14, i32 4)
  %cmp9 = icmp eq i32 %call8, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end5
  %15 = phi i1 [ false, %if.end5 ], [ %cmp9, %land.rhs ]
  %land.ext = zext i1 %15 to i32
  store i32 %land.ext, i32* %succeeded, align 4, !tbaa !10
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %17 = bitcast %struct.tdefl_compressor* %16 to i8*
  call void @free(i8* %17)
  %18 = load i32, i32* %succeeded, align 4, !tbaa !10
  store i32 %18, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %land.end, %if.then4, %if.then
  %19 = bitcast i32* %succeeded to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #10
  %20 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #10
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define i8* @tdefl_compress_mem_to_heap(i8* %pSrc_buf, i64 %src_buf_len, i64* %pOut_len, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %pOut_len.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8, !tbaa !8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8, !tbaa !4
  store i64* %pOut_len, i64** %pOut_len.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #10
  %1 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false)
  %2 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  %tobool = icmp ne i64* %2, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %3 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  store i64 0, i64* %3, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.else
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 3
  store i32 1, i32* %m_expandable, align 8, !tbaa !93
  %4 = load i8*, i8** %pSrc_buf.addr, align 8, !tbaa !8
  %5 = load i64, i64* %src_buf_len.addr, align 8, !tbaa !4
  %6 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %7 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @tdefl_compress_mem_to_output(i8* %4, i64 %5, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %6, i32 %7)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %if.end
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %8 = load i64, i64* %m_size, align 8, !tbaa !95
  %9 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  store i64 %8, i64* %9, align 8, !tbaa !4
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %10 = load i8*, i8** %m_pBuf, align 8, !tbaa !96
  store i8* %10, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.then2, %if.then
  %11 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %11) #10
  %12 = load i8*, i8** %retval, align 8
  ret i8* %12
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @tdefl_output_buffer_putter(i8* %pBuf, i32 %len, i8* %pUser) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %pUser.addr = alloca i8*, align 8
  %p = alloca %struct.tdefl_output_buffer*, align 8
  %new_size = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %pNew_buf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i32 %len, i32* %len.addr, align 4, !tbaa !10
  store i8* %pUser, i8** %pUser.addr, align 8, !tbaa !8
  %0 = bitcast %struct.tdefl_output_buffer** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pUser.addr, align 8, !tbaa !8
  %2 = bitcast i8* %1 to %struct.tdefl_output_buffer*
  store %struct.tdefl_output_buffer* %2, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %3 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %4, i32 0, i32 0
  %5 = load i64, i64* %m_size, align 8, !tbaa !95
  %6 = load i32, i32* %len.addr, align 4, !tbaa !10
  %conv = sext i32 %6 to i64
  %add = add i64 %5, %conv
  store i64 %add, i64* %new_size, align 8, !tbaa !4
  %7 = load i64, i64* %new_size, align 8, !tbaa !4
  %8 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %8, i32 0, i32 1
  %9 = load i64, i64* %m_capacity, align 8, !tbaa !97
  %cmp = icmp ugt i64 %7, %9
  br i1 %cmp, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %10 = bitcast i64* %new_capacity to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #10
  %11 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_capacity2 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %11, i32 0, i32 1
  %12 = load i64, i64* %m_capacity2, align 8, !tbaa !97
  store i64 %12, i64* %new_capacity, align 8, !tbaa !4
  %13 = bitcast i8** %pNew_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  %14 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %14, i32 0, i32 3
  %15 = load i32, i32* %m_expandable, align 8, !tbaa !93
  %tobool = icmp ne i32 %15, 0
  br i1 %tobool, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end
  %16 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %shl = shl i64 %16, 1
  %cmp4 = icmp ugt i64 128, %shl
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %17 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %shl6 = shl i64 %17, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 128, %cond.true ], [ %shl6, %cond.false ]
  store i64 %cond, i64* %new_capacity, align 8, !tbaa !4
  br label %do.cond

do.cond:                                          ; preds = %cond.end
  %18 = load i64, i64* %new_size, align 8, !tbaa !4
  %19 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %cmp7 = icmp ugt i64 %18, %19
  br i1 %cmp7, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %20 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %20, i32 0, i32 2
  %21 = load i8*, i8** %m_pBuf, align 8, !tbaa !96
  %22 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %call = call i8* @realloc(i8* %21, i64 %22) #12
  store i8* %call, i8** %pNew_buf, align 8, !tbaa !8
  %23 = load i8*, i8** %pNew_buf, align 8, !tbaa !8
  %tobool9 = icmp ne i8* %23, null
  br i1 %tobool9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %do.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end11:                                         ; preds = %do.end
  %24 = load i8*, i8** %pNew_buf, align 8, !tbaa !8
  %25 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_pBuf12 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %25, i32 0, i32 2
  store i8* %24, i8** %m_pBuf12, align 8, !tbaa !96
  %26 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %27 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_capacity13 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %27, i32 0, i32 1
  store i64 %26, i64* %m_capacity13, align 8, !tbaa !97
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end11, %if.then10, %if.then3
  %28 = bitcast i8** %pNew_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #10
  %29 = bitcast i64* %new_capacity to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup24 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end15

if.end15:                                         ; preds = %cleanup.cont, %entry
  %30 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_pBuf16 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %30, i32 0, i32 2
  %31 = load i8*, i8** %m_pBuf16, align 8, !tbaa !96
  %32 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_size17 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %32, i32 0, i32 0
  %33 = load i64, i64* %m_size17, align 8, !tbaa !95
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %33
  %34 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %35 = load i32, i32* %len.addr, align 4, !tbaa !10
  %conv18 = sext i32 %35 to i64
  %36 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_pBuf19 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %36, i32 0, i32 2
  %37 = load i8*, i8** %m_pBuf19, align 8, !tbaa !96
  %38 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_size20 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %38, i32 0, i32 0
  %39 = load i64, i64* %m_size20, align 8, !tbaa !95
  %add.ptr21 = getelementptr inbounds i8, i8* %37, i64 %39
  %40 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr21, i1 false, i1 true, i1 false)
  %call22 = call i8* @__memcpy_chk(i8* %add.ptr, i8* %34, i64 %conv18, i64 %40) #10
  %41 = load i64, i64* %new_size, align 8, !tbaa !4
  %42 = load %struct.tdefl_output_buffer*, %struct.tdefl_output_buffer** %p, align 8, !tbaa !8
  %m_size23 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %42, i32 0, i32 0
  store i64 %41, i64* %m_size23, align 8, !tbaa !95
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup24

cleanup24:                                        ; preds = %if.end15, %cleanup
  %43 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #10
  %44 = bitcast %struct.tdefl_output_buffer** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #10
  %45 = load i32, i32* %retval, align 4
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define i64 @tdefl_compress_mem_to_mem(i8* %pOut_buf, i64 %out_buf_len, i8* %pSrc_buf, i64 %src_buf_len, i32 %flags) #0 {
entry:
  %retval = alloca i64, align 8
  %pOut_buf.addr = alloca i8*, align 8
  %out_buf_len.addr = alloca i64, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8, !tbaa !8
  store i64 %out_buf_len, i64* %out_buf_len.addr, align 8, !tbaa !4
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8, !tbaa !8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %0) #10
  %1 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 32, i1 false)
  %2 = load i8*, i8** %pOut_buf.addr, align 8, !tbaa !8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %pOut_buf.addr, align 8, !tbaa !8
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  store i8* %3, i8** %m_pBuf, align 8, !tbaa !96
  %4 = load i64, i64* %out_buf_len.addr, align 8, !tbaa !4
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  store i64 %4, i64* %m_capacity, align 8, !tbaa !97
  %5 = load i8*, i8** %pSrc_buf.addr, align 8, !tbaa !8
  %6 = load i64, i64* %src_buf_len.addr, align 8, !tbaa !4
  %7 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %8 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @tdefl_compress_mem_to_output(i8* %5, i64 %6, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %7, i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %if.end
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %9 = load i64, i64* %m_size, align 8, !tbaa !95
  store i64 %9, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.then2, %if.then
  %10 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %10) #10
  %11 = load i64, i64* %retval, align 8
  ret i64 %11
}

; Function Attrs: nounwind ssp uwtable
define i8* @tdefl_write_image_to_png_file_in_memory_ex(i8* %pImage, i32 %w, i32 %h, i32 %num_chans, i64* %pLen_out, i32 %level, i32 %flip) #0 {
entry:
  %retval = alloca i8*, align 8
  %pImage.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %num_chans.addr = alloca i32, align 4
  %pLen_out.addr = alloca i64*, align 8
  %level.addr = alloca i32, align 4
  %flip.addr = alloca i32, align 4
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %out_buf = alloca %struct.tdefl_output_buffer, align 8
  %i = alloca i32, align 4
  %bpl = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  %c = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %pnghdr = alloca [41 x i8], align 16
  store i8* %pImage, i8** %pImage.addr, align 8, !tbaa !8
  store i32 %w, i32* %w.addr, align 4, !tbaa !10
  store i32 %h, i32* %h.addr, align 4, !tbaa !10
  store i32 %num_chans, i32* %num_chans.addr, align 4, !tbaa !10
  store i64* %pLen_out, i64** %pLen_out.addr, align 8, !tbaa !8
  store i32 %level, i32* %level.addr, align 4, !tbaa !10
  store i32 %flip, i32* %flip.addr, align 4, !tbaa !10
  %0 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %call = call i8* @malloc(i64 319352) #11
  %1 = bitcast i8* %call to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %1, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %2 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %2) #10
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = bitcast i32* %bpl to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  %5 = load i32, i32* %w.addr, align 4, !tbaa !10
  %6 = load i32, i32* %num_chans.addr, align 4, !tbaa !10
  %mul = mul nsw i32 %5, %6
  store i32 %mul, i32* %bpl, align 4, !tbaa !10
  %7 = bitcast i32* %y to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #10
  %8 = bitcast i32* %z to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #10
  %9 = bitcast i32* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #10
  %10 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  store i64 0, i64* %10, align 8, !tbaa !4
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %tobool = icmp ne %struct.tdefl_compressor* %11, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %12 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false)
  %m_expandable = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 3
  store i32 1, i32* %m_expandable, align 8, !tbaa !93
  %13 = load i32, i32* %bpl, align 4, !tbaa !10
  %add = add nsw i32 1, %13
  %14 = load i32, i32* %h.addr, align 4, !tbaa !10
  %mul1 = mul nsw i32 %add, %14
  %cmp = icmp sgt i32 64, %mul1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %15 = load i32, i32* %bpl, align 4, !tbaa !10
  %add2 = add nsw i32 1, %15
  %16 = load i32, i32* %h.addr, align 4, !tbaa !10
  %mul3 = mul nsw i32 %add2, %16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 64, %cond.true ], [ %mul3, %cond.false ]
  %add4 = add nsw i32 57, %cond
  %conv = sext i32 %add4 to i64
  %m_capacity = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  store i64 %conv, i64* %m_capacity, align 8, !tbaa !97
  %m_capacity5 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 1
  %17 = load i64, i64* %m_capacity5, align 8, !tbaa !97
  %call6 = call i8* @malloc(i64 %17) #11
  %m_pBuf = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  store i8* %call6, i8** %m_pBuf, align 8, !tbaa !96
  %cmp7 = icmp eq i8* null, %call6
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %cond.end
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %19 = bitcast %struct.tdefl_compressor* %18 to i8*
  call void @free(i8* %19)
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %cond.end
  store i32 41, i32* %z, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end10
  %20 = load i32, i32* %z, align 4, !tbaa !10
  %tobool11 = icmp ne i32 %20, 0
  br i1 %tobool11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = bitcast i32* %z to i8*
  %22 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %call12 = call i32 @tdefl_output_buffer_putter(i8* %21, i32 1, i8* %22)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %z, align 4, !tbaa !10
  %dec = add nsw i32 %23, -1
  store i32 %dec, i32* %z, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %25 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %26 = load i32, i32* %level.addr, align 4, !tbaa !10
  %cmp13 = icmp ult i32 10, %26
  br i1 %cmp13, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %for.end
  br label %cond.end17

cond.false16:                                     ; preds = %for.end
  %27 = load i32, i32* %level.addr, align 4, !tbaa !10
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 10, %cond.true15 ], [ %27, %cond.false16 ]
  %idxprom = zext i32 %cond18 to i64
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* @tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes, i64 0, i64 %idxprom
  %28 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %or = or i32 %28, 4096
  %call19 = call i32 @tdefl_init(%struct.tdefl_compressor* %24, i32 (i8*, i32, i8*)* @tdefl_output_buffer_putter, i8* %25, i32 %or)
  store i32 0, i32* %y, align 4, !tbaa !10
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc34, %cond.end17
  %29 = load i32, i32* %y, align 4, !tbaa !10
  %30 = load i32, i32* %h.addr, align 4, !tbaa !10
  %cmp21 = icmp slt i32 %29, %30
  br i1 %cmp21, label %for.body23, label %for.end35

for.body23:                                       ; preds = %for.cond20
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %32 = bitcast i32* %z to i8*
  %call24 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %31, i8* %32, i64 1, i32 0)
  %33 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %34 = load i8*, i8** %pImage.addr, align 8, !tbaa !8
  %35 = load i32, i32* %flip.addr, align 4, !tbaa !10
  %tobool25 = icmp ne i32 %35, 0
  br i1 %tobool25, label %cond.true26, label %cond.false28

cond.true26:                                      ; preds = %for.body23
  %36 = load i32, i32* %h.addr, align 4, !tbaa !10
  %sub = sub nsw i32 %36, 1
  %37 = load i32, i32* %y, align 4, !tbaa !10
  %sub27 = sub nsw i32 %sub, %37
  br label %cond.end29

cond.false28:                                     ; preds = %for.body23
  %38 = load i32, i32* %y, align 4, !tbaa !10
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi i32 [ %sub27, %cond.true26 ], [ %38, %cond.false28 ]
  %39 = load i32, i32* %bpl, align 4, !tbaa !10
  %mul31 = mul nsw i32 %cond30, %39
  %idx.ext = sext i32 %mul31 to i64
  %add.ptr = getelementptr inbounds i8, i8* %34, i64 %idx.ext
  %40 = load i32, i32* %bpl, align 4, !tbaa !10
  %conv32 = sext i32 %40 to i64
  %call33 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %33, i8* %add.ptr, i64 %conv32, i32 0)
  br label %for.inc34

for.inc34:                                        ; preds = %cond.end29
  %41 = load i32, i32* %y, align 4, !tbaa !10
  %inc = add nsw i32 %41, 1
  store i32 %inc, i32* %y, align 4, !tbaa !10
  br label %for.cond20

for.end35:                                        ; preds = %for.cond20
  %42 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %call36 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %42, i8* null, i64 0, i32 4)
  %cmp37 = icmp ne i32 %call36, 1
  br i1 %cmp37, label %if.then39, label %if.end41

if.then39:                                        ; preds = %for.end35
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %44 = bitcast %struct.tdefl_compressor* %43 to i8*
  call void @free(i8* %44)
  %m_pBuf40 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %45 = load i8*, i8** %m_pBuf40, align 8, !tbaa !96
  call void @free(i8* %45)
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end41:                                         ; preds = %for.end35
  %m_size = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %46 = load i64, i64* %m_size, align 8, !tbaa !95
  %sub42 = sub i64 %46, 41
  %47 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  store i64 %sub42, i64* %47, align 8, !tbaa !4
  %48 = bitcast [41 x i8]* %pnghdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 41, i8* %48) #10
  %49 = bitcast [41 x i8]* %pnghdr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %49, i8* align 16 getelementptr inbounds ([41 x i8], [41 x i8]* @__const.tdefl_write_image_to_png_file_in_memory_ex.pnghdr, i32 0, i32 0), i64 41, i1 false)
  %50 = load i32, i32* %w.addr, align 4, !tbaa !10
  %shr = ashr i32 %50, 8
  %conv43 = trunc i32 %shr to i8
  %arrayidx44 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 18
  store i8 %conv43, i8* %arrayidx44, align 2, !tbaa !12
  %51 = load i32, i32* %w.addr, align 4, !tbaa !10
  %conv45 = trunc i32 %51 to i8
  %arrayidx46 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 19
  store i8 %conv45, i8* %arrayidx46, align 1, !tbaa !12
  %52 = load i32, i32* %h.addr, align 4, !tbaa !10
  %shr47 = ashr i32 %52, 8
  %conv48 = trunc i32 %shr47 to i8
  %arrayidx49 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 22
  store i8 %conv48, i8* %arrayidx49, align 2, !tbaa !12
  %53 = load i32, i32* %h.addr, align 4, !tbaa !10
  %conv50 = trunc i32 %53 to i8
  %arrayidx51 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 23
  store i8 %conv50, i8* %arrayidx51, align 1, !tbaa !12
  %54 = load i32, i32* %num_chans.addr, align 4, !tbaa !10
  %idxprom52 = sext i32 %54 to i64
  %arrayidx53 = getelementptr inbounds [5 x i8], [5 x i8]* @tdefl_write_image_to_png_file_in_memory_ex.chans, i64 0, i64 %idxprom52
  %55 = load i8, i8* %arrayidx53, align 1, !tbaa !12
  %arrayidx54 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 25
  store i8 %55, i8* %arrayidx54, align 1, !tbaa !12
  %56 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  %57 = load i64, i64* %56, align 8, !tbaa !4
  %shr55 = lshr i64 %57, 24
  %conv56 = trunc i64 %shr55 to i8
  %arrayidx57 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 33
  store i8 %conv56, i8* %arrayidx57, align 1, !tbaa !12
  %58 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  %59 = load i64, i64* %58, align 8, !tbaa !4
  %shr58 = lshr i64 %59, 16
  %conv59 = trunc i64 %shr58 to i8
  %arrayidx60 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 34
  store i8 %conv59, i8* %arrayidx60, align 2, !tbaa !12
  %60 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  %61 = load i64, i64* %60, align 8, !tbaa !4
  %shr61 = lshr i64 %61, 8
  %conv62 = trunc i64 %shr61 to i8
  %arrayidx63 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 35
  store i8 %conv62, i8* %arrayidx63, align 1, !tbaa !12
  %62 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  %63 = load i64, i64* %62, align 8, !tbaa !4
  %conv64 = trunc i64 %63 to i8
  %arrayidx65 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 36
  store i8 %conv64, i8* %arrayidx65, align 4, !tbaa !12
  %arraydecay = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 0
  %add.ptr66 = getelementptr inbounds i8, i8* %arraydecay, i64 12
  %call67 = call i64 @mz_crc32(i64 0, i8* %add.ptr66, i64 17)
  %conv68 = trunc i64 %call67 to i32
  store i32 %conv68, i32* %c, align 4, !tbaa !10
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond69

for.cond69:                                       ; preds = %for.inc79, %if.end41
  %64 = load i32, i32* %i, align 4, !tbaa !10
  %cmp70 = icmp slt i32 %64, 4
  br i1 %cmp70, label %for.body72, label %for.end81

for.body72:                                       ; preds = %for.cond69
  %65 = load i32, i32* %c, align 4, !tbaa !10
  %shr73 = lshr i32 %65, 24
  %conv74 = trunc i32 %shr73 to i8
  %arraydecay75 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 0
  %add.ptr76 = getelementptr inbounds i8, i8* %arraydecay75, i64 29
  %66 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom77 = sext i32 %66 to i64
  %arrayidx78 = getelementptr inbounds i8, i8* %add.ptr76, i64 %idxprom77
  store i8 %conv74, i8* %arrayidx78, align 1, !tbaa !12
  br label %for.inc79

for.inc79:                                        ; preds = %for.body72
  %67 = load i32, i32* %i, align 4, !tbaa !10
  %inc80 = add nsw i32 %67, 1
  store i32 %inc80, i32* %i, align 4, !tbaa !10
  %68 = load i32, i32* %c, align 4, !tbaa !10
  %shl = shl i32 %68, 8
  store i32 %shl, i32* %c, align 4, !tbaa !10
  br label %for.cond69

for.end81:                                        ; preds = %for.cond69
  %m_pBuf82 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %69 = load i8*, i8** %m_pBuf82, align 8, !tbaa !96
  %arraydecay83 = getelementptr inbounds [41 x i8], [41 x i8]* %pnghdr, i64 0, i64 0
  %m_pBuf84 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %70 = load i8*, i8** %m_pBuf84, align 8, !tbaa !96
  %71 = call i64 @llvm.objectsize.i64.p0i8(i8* %70, i1 false, i1 true, i1 false)
  %call85 = call i8* @__memcpy_chk(i8* %69, i8* %arraydecay83, i64 41, i64 %71) #10
  %72 = bitcast [41 x i8]* %pnghdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 41, i8* %72) #10
  %73 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  %call86 = call i32 @tdefl_output_buffer_putter(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13, i64 0, i64 0), i32 16, i8* %73)
  %tobool87 = icmp ne i32 %call86, 0
  br i1 %tobool87, label %if.end90, label %if.then88

if.then88:                                        ; preds = %for.end81
  %74 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  store i64 0, i64* %74, align 8, !tbaa !4
  %75 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %76 = bitcast %struct.tdefl_compressor* %75 to i8*
  call void @free(i8* %76)
  %m_pBuf89 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %77 = load i8*, i8** %m_pBuf89, align 8, !tbaa !96
  call void @free(i8* %77)
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end90:                                         ; preds = %for.end81
  %m_pBuf91 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %78 = load i8*, i8** %m_pBuf91, align 8, !tbaa !96
  %add.ptr92 = getelementptr inbounds i8, i8* %78, i64 41
  %add.ptr93 = getelementptr inbounds i8, i8* %add.ptr92, i64 -4
  %79 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  %80 = load i64, i64* %79, align 8, !tbaa !4
  %add94 = add i64 %80, 4
  %call95 = call i64 @mz_crc32(i64 0, i8* %add.ptr93, i64 %add94)
  %conv96 = trunc i64 %call95 to i32
  store i32 %conv96, i32* %c, align 4, !tbaa !10
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond97

for.cond97:                                       ; preds = %for.inc109, %if.end90
  %81 = load i32, i32* %i, align 4, !tbaa !10
  %cmp98 = icmp slt i32 %81, 4
  br i1 %cmp98, label %for.body100, label %for.end112

for.body100:                                      ; preds = %for.cond97
  %82 = load i32, i32* %c, align 4, !tbaa !10
  %shr101 = lshr i32 %82, 24
  %conv102 = trunc i32 %shr101 to i8
  %m_pBuf103 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %83 = load i8*, i8** %m_pBuf103, align 8, !tbaa !96
  %m_size104 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 0
  %84 = load i64, i64* %m_size104, align 8, !tbaa !95
  %add.ptr105 = getelementptr inbounds i8, i8* %83, i64 %84
  %add.ptr106 = getelementptr inbounds i8, i8* %add.ptr105, i64 -16
  %85 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom107 = sext i32 %85 to i64
  %arrayidx108 = getelementptr inbounds i8, i8* %add.ptr106, i64 %idxprom107
  store i8 %conv102, i8* %arrayidx108, align 1, !tbaa !12
  br label %for.inc109

for.inc109:                                       ; preds = %for.body100
  %86 = load i32, i32* %i, align 4, !tbaa !10
  %inc110 = add nsw i32 %86, 1
  store i32 %inc110, i32* %i, align 4, !tbaa !10
  %87 = load i32, i32* %c, align 4, !tbaa !10
  %shl111 = shl i32 %87, 8
  store i32 %shl111, i32* %c, align 4, !tbaa !10
  br label %for.cond97

for.end112:                                       ; preds = %for.cond97
  %88 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  %89 = load i64, i64* %88, align 8, !tbaa !4
  %add113 = add i64 %89, 57
  store i64 %add113, i64* %88, align 8, !tbaa !4
  %90 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %91 = bitcast %struct.tdefl_compressor* %90 to i8*
  call void @free(i8* %91)
  %m_pBuf114 = getelementptr inbounds %struct.tdefl_output_buffer, %struct.tdefl_output_buffer* %out_buf, i32 0, i32 2
  %92 = load i8*, i8** %m_pBuf114, align 8, !tbaa !96
  store i8* %92, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end112, %if.then88, %if.then39, %if.then9, %if.then
  %93 = bitcast i32* %c to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %93) #10
  %94 = bitcast i32* %z to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %94) #10
  %95 = bitcast i32* %y to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %95) #10
  %96 = bitcast i32* %bpl to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %96) #10
  %97 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %97) #10
  %98 = bitcast %struct.tdefl_output_buffer* %out_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %98) #10
  %99 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %99) #10
  %100 = load i8*, i8** %retval, align 8
  ret i8* %100
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define i8* @tdefl_write_image_to_png_file_in_memory(i8* %pImage, i32 %w, i32 %h, i32 %num_chans, i64* %pLen_out) #0 {
entry:
  %pImage.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %num_chans.addr = alloca i32, align 4
  %pLen_out.addr = alloca i64*, align 8
  store i8* %pImage, i8** %pImage.addr, align 8, !tbaa !8
  store i32 %w, i32* %w.addr, align 4, !tbaa !10
  store i32 %h, i32* %h.addr, align 4, !tbaa !10
  store i32 %num_chans, i32* %num_chans.addr, align 4, !tbaa !10
  store i64* %pLen_out, i64** %pLen_out.addr, align 8, !tbaa !8
  %0 = load i8*, i8** %pImage.addr, align 8, !tbaa !8
  %1 = load i32, i32* %w.addr, align 4, !tbaa !10
  %2 = load i32, i32* %h.addr, align 4, !tbaa !10
  %3 = load i32, i32* %num_chans.addr, align 4, !tbaa !10
  %4 = load i64*, i64** %pLen_out.addr, align 8, !tbaa !8
  %call = call i8* @tdefl_write_image_to_png_file_in_memory_ex(i8* %0, i32 %1, i32 %2, i32 %3, i64* %4, i32 6, i32 0)
  ret i8* %call
}

; Function Attrs: nounwind ssp uwtable
define %struct.tdefl_compressor* @tdefl_compressor_alloc() #0 {
entry:
  %call = call i8* @malloc(i64 319352) #11
  %0 = bitcast i8* %call to %struct.tdefl_compressor*
  ret %struct.tdefl_compressor* %0
}

; Function Attrs: nounwind ssp uwtable
define void @tdefl_compressor_free(%struct.tdefl_compressor* %pComp) #0 {
entry:
  %pComp.addr = alloca %struct.tdefl_compressor*, align 8
  store %struct.tdefl_compressor* %pComp, %struct.tdefl_compressor** %pComp.addr, align 8, !tbaa !8
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp.addr, align 8, !tbaa !8
  %1 = bitcast %struct.tdefl_compressor* %0 to i8*
  call void @free(i8* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i8* @tinfl_decompress_mem_to_heap(i8* %pSrc_buf, i64 %src_buf_len, i64* %pOut_len, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %pOut_len.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %pBuf = alloca i8*, align 8
  %pNew_buf = alloca i8*, align 8
  %src_buf_ofs = alloca i64, align 8
  %out_buf_capacity = alloca i64, align 8
  %src_buf_size = alloca i64, align 8
  %dst_buf_size = alloca i64, align 8
  %new_out_buf_capacity = alloca i64, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8, !tbaa !8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8, !tbaa !4
  store i64* %pOut_len, i64** %pOut_len.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.tinfl_decompressor_tag* %decomp to i8*
  call void @llvm.lifetime.start.p0i8(i64 11000, i8* %0) #10
  %1 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  store i8* null, i8** %pBuf, align 8, !tbaa !8
  %2 = bitcast i8** %pNew_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast i64* %src_buf_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  store i64 0, i64* %src_buf_ofs, align 8, !tbaa !4
  %4 = bitcast i64* %out_buf_capacity to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #10
  store i64 0, i64* %out_buf_capacity, align 8, !tbaa !4
  %5 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  store i64 0, i64* %5, align 8, !tbaa !4
  br label %do.body

do.body:                                          ; preds = %entry
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !81
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont, %do.end
  %6 = bitcast i64* %src_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = load i64, i64* %src_buf_len.addr, align 8, !tbaa !4
  %8 = load i64, i64* %src_buf_ofs, align 8, !tbaa !4
  %sub = sub i64 %7, %8
  store i64 %sub, i64* %src_buf_size, align 8, !tbaa !4
  %9 = bitcast i64* %dst_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #10
  %10 = load i64, i64* %out_buf_capacity, align 8, !tbaa !4
  %11 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  %12 = load i64, i64* %11, align 8, !tbaa !4
  %sub1 = sub i64 %10, %12
  store i64 %sub1, i64* %dst_buf_size, align 8, !tbaa !4
  %13 = bitcast i64* %new_out_buf_capacity to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  %14 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #10
  %15 = load i8*, i8** %pSrc_buf.addr, align 8, !tbaa !8
  %16 = load i64, i64* %src_buf_ofs, align 8, !tbaa !4
  %add.ptr = getelementptr inbounds i8, i8* %15, i64 %16
  %17 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %18 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %tobool = icmp ne i8* %18, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %19 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %20 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  %21 = load i64, i64* %20, align 8, !tbaa !4
  %add.ptr2 = getelementptr inbounds i8, i8* %19, i64 %21
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr2, %cond.true ], [ null, %cond.false ]
  %22 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %22, -3
  %or = or i32 %and, 4
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %add.ptr, i64* %src_buf_size, i8* %17, i8* %cond, i64* %dst_buf_size, i32 %or)
  store i32 %call, i32* %status, align 4, !tbaa !12
  %23 = load i32, i32* %status, align 4, !tbaa !12
  %cmp = icmp slt i32 %23, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %24 = load i32, i32* %status, align 4, !tbaa !12
  %cmp3 = icmp eq i32 %24, 1
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  %25 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void @free(i8* %25)
  %26 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  store i64 0, i64* %26, align 8, !tbaa !4
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %27 = load i64, i64* %src_buf_size, align 8, !tbaa !4
  %28 = load i64, i64* %src_buf_ofs, align 8, !tbaa !4
  %add = add i64 %28, %27
  store i64 %add, i64* %src_buf_ofs, align 8, !tbaa !4
  %29 = load i64, i64* %dst_buf_size, align 8, !tbaa !4
  %30 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  %31 = load i64, i64* %30, align 8, !tbaa !4
  %add4 = add i64 %31, %29
  store i64 %add4, i64* %30, align 8, !tbaa !4
  %32 = load i32, i32* %status, align 4, !tbaa !12
  %cmp5 = icmp eq i32 %32, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end7:                                          ; preds = %if.end
  %33 = load i64, i64* %out_buf_capacity, align 8, !tbaa !4
  %mul = mul i64 %33, 2
  store i64 %mul, i64* %new_out_buf_capacity, align 8, !tbaa !4
  %34 = load i64, i64* %new_out_buf_capacity, align 8, !tbaa !4
  %cmp8 = icmp ult i64 %34, 128
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  store i64 128, i64* %new_out_buf_capacity, align 8, !tbaa !4
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  %35 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %36 = load i64, i64* %new_out_buf_capacity, align 8, !tbaa !4
  %call11 = call i8* @realloc(i8* %35, i64 %36) #12
  store i8* %call11, i8** %pNew_buf, align 8, !tbaa !8
  %37 = load i8*, i8** %pNew_buf, align 8, !tbaa !8
  %tobool12 = icmp ne i8* %37, null
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end10
  %38 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void @free(i8* %38)
  %39 = load i64*, i64** %pOut_len.addr, align 8, !tbaa !8
  store i64 0, i64* %39, align 8, !tbaa !4
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end14:                                         ; preds = %if.end10
  %40 = load i8*, i8** %pNew_buf, align 8, !tbaa !8
  store i8* %40, i8** %pBuf, align 8, !tbaa !8
  %41 = load i64, i64* %new_out_buf_capacity, align 8, !tbaa !4
  store i64 %41, i64* %out_buf_capacity, align 8, !tbaa !4
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end14, %if.then13, %if.then6, %if.then
  %42 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #10
  %43 = bitcast i64* %new_out_buf_capacity to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #10
  %44 = bitcast i64* %dst_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #10
  %45 = bitcast i64* %src_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %45) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup18 [
    i32 0, label %cleanup.cont
    i32 4, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.cond

for.end:                                          ; preds = %cleanup
  %46 = load i8*, i8** %pBuf, align 8, !tbaa !8
  store i8* %46, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup18

cleanup18:                                        ; preds = %for.end, %cleanup
  %47 = bitcast i64* %out_buf_capacity to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #10
  %48 = bitcast i64* %src_buf_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48) #10
  %49 = bitcast i8** %pNew_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #10
  %50 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %50) #10
  %51 = bitcast %struct.tinfl_decompressor_tag* %decomp to i8*
  call void @llvm.lifetime.end.p0i8(i64 11000, i8* %51) #10
  %52 = load i8*, i8** %retval, align 8
  ret i8* %52
}

; Function Attrs: nounwind ssp uwtable
define i64 @tinfl_decompress_mem_to_mem(i8* %pOut_buf, i64 %out_buf_len, i8* %pSrc_buf, i64 %src_buf_len, i32 %flags) #0 {
entry:
  %pOut_buf.addr = alloca i8*, align 8
  %out_buf_len.addr = alloca i64, align 8
  %pSrc_buf.addr = alloca i8*, align 8
  %src_buf_len.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %status = alloca i32, align 4
  store i8* %pOut_buf, i8** %pOut_buf.addr, align 8, !tbaa !8
  store i64 %out_buf_len, i64* %out_buf_len.addr, align 8, !tbaa !4
  store i8* %pSrc_buf, i8** %pSrc_buf.addr, align 8, !tbaa !8
  store i64 %src_buf_len, i64* %src_buf_len.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.tinfl_decompressor_tag* %decomp to i8*
  call void @llvm.lifetime.start.p0i8(i64 11000, i8* %0) #10
  %1 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  br label %do.body

do.body:                                          ; preds = %entry
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !81
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %2 = load i8*, i8** %pSrc_buf.addr, align 8, !tbaa !8
  %3 = load i8*, i8** %pOut_buf.addr, align 8, !tbaa !8
  %4 = load i8*, i8** %pOut_buf.addr, align 8, !tbaa !8
  %5 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %5, -3
  %or = or i32 %and, 4
  %call = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %2, i64* %src_buf_len.addr, i8* %3, i8* %4, i64* %out_buf_len.addr, i32 %or)
  store i32 %call, i32* %status, align 4, !tbaa !12
  %6 = load i32, i32* %status, align 4, !tbaa !12
  %cmp = icmp ne i32 %6, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end
  br label %cond.end

cond.false:                                       ; preds = %do.end
  %7 = load i64, i64* %out_buf_len.addr, align 8, !tbaa !4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ -1, %cond.true ], [ %7, %cond.false ]
  %8 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #10
  %9 = bitcast %struct.tinfl_decompressor_tag* %decomp to i8*
  call void @llvm.lifetime.end.p0i8(i64 11000, i8* %9) #10
  ret i64 %cond
}

; Function Attrs: nounwind ssp uwtable
define i32 @tinfl_decompress_mem_to_callback(i8* %pIn_buf, i64* %pIn_buf_size, i32 (i8*, i32, i8*)* %pPut_buf_func, i8* %pPut_buf_user, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pIn_buf.addr = alloca i8*, align 8
  %pIn_buf_size.addr = alloca i64*, align 8
  %pPut_buf_func.addr = alloca i32 (i8*, i32, i8*)*, align 8
  %pPut_buf_user.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %result = alloca i32, align 4
  %decomp = alloca %struct.tinfl_decompressor_tag, align 8
  %pDict = alloca i8*, align 8
  %in_buf_ofs = alloca i64, align 8
  %dict_ofs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %in_buf_size = alloca i64, align 8
  %dst_buf_size = alloca i64, align 8
  %status = alloca i32, align 4
  store i8* %pIn_buf, i8** %pIn_buf.addr, align 8, !tbaa !8
  store i64* %pIn_buf_size, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  store i32 (i8*, i32, i8*)* %pPut_buf_func, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8, !tbaa !8
  store i8* %pPut_buf_user, i8** %pPut_buf_user.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 0, i32* %result, align 4, !tbaa !10
  %1 = bitcast %struct.tinfl_decompressor_tag* %decomp to i8*
  call void @llvm.lifetime.start.p0i8(i64 11000, i8* %1) #10
  %2 = bitcast i8** %pDict to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %call = call i8* @malloc(i64 32768) #11
  store i8* %call, i8** %pDict, align 8, !tbaa !8
  %3 = bitcast i64* %in_buf_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  store i64 0, i64* %in_buf_ofs, align 8, !tbaa !4
  %4 = bitcast i64* %dict_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #10
  store i64 0, i64* %dict_ofs, align 8, !tbaa !4
  %5 = load i8*, i8** %pDict, align 8, !tbaa !8
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup19

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %decomp, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !81
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont, %do.end
  %6 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  %8 = load i64, i64* %7, align 8, !tbaa !4
  %9 = load i64, i64* %in_buf_ofs, align 8, !tbaa !4
  %sub = sub i64 %8, %9
  store i64 %sub, i64* %in_buf_size, align 8, !tbaa !4
  %10 = bitcast i64* %dst_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #10
  %11 = load i64, i64* %dict_ofs, align 8, !tbaa !4
  %sub1 = sub i64 32768, %11
  store i64 %sub1, i64* %dst_buf_size, align 8, !tbaa !4
  %12 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #10
  %13 = load i8*, i8** %pIn_buf.addr, align 8, !tbaa !8
  %14 = load i64, i64* %in_buf_ofs, align 8, !tbaa !4
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 %14
  %15 = load i8*, i8** %pDict, align 8, !tbaa !8
  %16 = load i8*, i8** %pDict, align 8, !tbaa !8
  %17 = load i64, i64* %dict_ofs, align 8, !tbaa !4
  %add.ptr2 = getelementptr inbounds i8, i8* %16, i64 %17
  %18 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %18, -7
  %call3 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %decomp, i8* %add.ptr, i64* %in_buf_size, i8* %15, i8* %add.ptr2, i64* %dst_buf_size, i32 %and)
  store i32 %call3, i32* %status, align 4, !tbaa !12
  %19 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %20 = load i64, i64* %in_buf_ofs, align 8, !tbaa !4
  %add = add i64 %20, %19
  store i64 %add, i64* %in_buf_ofs, align 8, !tbaa !4
  %21 = load i64, i64* %dst_buf_size, align 8, !tbaa !4
  %tobool4 = icmp ne i64 %21, 0
  br i1 %tobool4, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %for.cond
  %22 = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %pPut_buf_func.addr, align 8, !tbaa !8
  %23 = load i8*, i8** %pDict, align 8, !tbaa !8
  %24 = load i64, i64* %dict_ofs, align 8, !tbaa !4
  %add.ptr5 = getelementptr inbounds i8, i8* %23, i64 %24
  %25 = load i64, i64* %dst_buf_size, align 8, !tbaa !4
  %conv = trunc i64 %25 to i32
  %26 = load i8*, i8** %pPut_buf_user.addr, align 8, !tbaa !8
  %call6 = call i32 %22(i8* %add.ptr5, i32 %conv, i8* %26)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %land.lhs.true
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %land.lhs.true, %for.cond
  %27 = load i32, i32* %status, align 4, !tbaa !12
  %cmp = icmp ne i32 %27, 2
  br i1 %cmp, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.end9
  %28 = load i32, i32* %status, align 4, !tbaa !12
  %cmp12 = icmp eq i32 %28, 0
  %conv13 = zext i1 %cmp12 to i32
  store i32 %conv13, i32* %result, align 4, !tbaa !10
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end14:                                         ; preds = %if.end9
  %29 = load i64, i64* %dict_ofs, align 8, !tbaa !4
  %30 = load i64, i64* %dst_buf_size, align 8, !tbaa !4
  %add15 = add i64 %29, %30
  %and16 = and i64 %add15, 32767
  store i64 %and16, i64* %dict_ofs, align 8, !tbaa !4
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end14, %if.then11, %if.then8
  %31 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %31) #10
  %32 = bitcast i64* %dst_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %32) #10
  %33 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %33) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 4, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.cond

for.end:                                          ; preds = %cleanup
  %34 = load i8*, i8** %pDict, align 8, !tbaa !8
  call void @free(i8* %34)
  %35 = load i64, i64* %in_buf_ofs, align 8, !tbaa !4
  %36 = load i64*, i64** %pIn_buf_size.addr, align 8, !tbaa !8
  store i64 %35, i64* %36, align 8, !tbaa !4
  %37 = load i32, i32* %result, align 4, !tbaa !10
  store i32 %37, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup19

cleanup19:                                        ; preds = %for.end, %if.then
  %38 = bitcast i64* %dict_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %38) #10
  %39 = bitcast i64* %in_buf_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #10
  %40 = bitcast i8** %pDict to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #10
  %41 = bitcast %struct.tinfl_decompressor_tag* %decomp to i8*
  call void @llvm.lifetime.end.p0i8(i64 11000, i8* %41) #10
  %42 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #10
  %43 = load i32, i32* %retval, align 4
  ret i32 %43

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define %struct.tinfl_decompressor_tag* @tinfl_decompressor_alloc() #0 {
entry:
  %pDecomp = alloca %struct.tinfl_decompressor_tag*, align 8
  %0 = bitcast %struct.tinfl_decompressor_tag** %pDecomp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %call = call i8* @malloc(i64 11000) #11
  %1 = bitcast i8* %call to %struct.tinfl_decompressor_tag*
  store %struct.tinfl_decompressor_tag* %1, %struct.tinfl_decompressor_tag** %pDecomp, align 8, !tbaa !8
  %2 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %pDecomp, align 8, !tbaa !8
  %tobool = icmp ne %struct.tinfl_decompressor_tag* %2, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %pDecomp, align 8, !tbaa !8
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %3, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !81
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end

if.end:                                           ; preds = %do.end, %entry
  %4 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %pDecomp, align 8, !tbaa !8
  %5 = bitcast %struct.tinfl_decompressor_tag** %pDecomp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %5) #10
  ret %struct.tinfl_decompressor_tag* %4
}

; Function Attrs: nounwind ssp uwtable
define void @tinfl_decompressor_free(%struct.tinfl_decompressor_tag* %pDecomp) #0 {
entry:
  %pDecomp.addr = alloca %struct.tinfl_decompressor_tag*, align 8
  store %struct.tinfl_decompressor_tag* %pDecomp, %struct.tinfl_decompressor_tag** %pDecomp.addr, align 8, !tbaa !8
  %0 = load %struct.tinfl_decompressor_tag*, %struct.tinfl_decompressor_tag** %pDecomp.addr, align 8, !tbaa !8
  %1 = bitcast %struct.tinfl_decompressor_tag* %0 to i8*
  call void @free(i8* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define void @mz_zip_zero_struct(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = bitcast %struct.mz_zip_archive* %1 to i8*
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %4 = bitcast %struct.mz_zip_archive* %3 to i8*
  %5 = call i64 @llvm.objectsize.i64.p0i8(i8* %4, i1 false, i1 true, i1 false)
  %call = call i8* @__memset_chk(i8* %2, i32 0, i64 112, i64 %5) #10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_end(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %0, i32 1)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %pZip, i32 %set_last_error) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %set_last_error.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %set_last_error, i32* %set_last_error.addr, align 4, !tbaa !10
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 1, i32* %status, align 4, !tbaa !10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then6

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 7
  %5 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %tobool2 = icmp ne i8* (i8*, i64, i64)* %5, null
  br i1 %tobool2, label %lor.lhs.false3, label %if.then6

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 8
  %7 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %tobool4 = icmp ne void (i8*, i8*)* %7, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then6

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 3
  %9 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp = icmp ne i32 %9, 1
  br i1 %cmp, label %if.then6, label %if.end10

if.then6:                                         ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %if.end
  %10 = load i32, i32* %set_last_error.addr, align 4, !tbaa !10
  %tobool7 = icmp ne i32 %10, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.then6
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 5
  store i32 24, i32* %m_last_error, align 4, !tbaa !103
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then6
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %lor.lhs.false5
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState11 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 15
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState11, align 8, !tbaa !98
  %tobool12 = icmp ne %struct.mz_zip_internal_state_tag* %13, null
  br i1 %tobool12, label %if.then13, label %if.end32

if.then13:                                        ; preds = %if.end10
  %14 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #10
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState14 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 15
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState14, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %16, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 15
  store %struct.mz_zip_internal_state_tag* null, %struct.mz_zip_internal_state_tag** %m_pState15, align 8, !tbaa !98
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %19 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %19, i32 0, i32 0
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %18, %struct.mz_zip_array* %m_central_dir)
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %21 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %21, i32 0, i32 1
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %20, %struct.mz_zip_array* %m_central_dir_offsets)
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %23 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %23, i32 0, i32 2
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %22, %struct.mz_zip_array* %m_sorted_central_dir_offsets)
  %24 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %24, i32 0, i32 6
  %25 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %tobool16 = icmp ne %struct.__sFILE* %25, null
  br i1 %tobool16, label %if.then17, label %if.end30

if.then17:                                        ; preds = %if.then13
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 4
  %27 = load i32, i32* %m_zip_type, align 8, !tbaa !107
  %cmp18 = icmp eq i32 %27, 4
  br i1 %cmp18, label %if.then19, label %if.end28

if.then19:                                        ; preds = %if.then17
  %28 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile20 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %28, i32 0, i32 6
  %29 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile20, align 8, !tbaa !104
  %call = call i32 @fclose(%struct.__sFILE* %29)
  %cmp21 = icmp eq i32 %call, -1
  br i1 %cmp21, label %if.then22, label %if.end27

if.then22:                                        ; preds = %if.then19
  %30 = load i32, i32* %set_last_error.addr, align 4, !tbaa !10
  %tobool23 = icmp ne i32 %30, 0
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.then22
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error25 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 5
  store i32 21, i32* %m_last_error25, align 4, !tbaa !103
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.then22
  store i32 0, i32* %status, align 4, !tbaa !10
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then19
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then17
  %32 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile29 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %32, i32 0, i32 6
  store %struct.__sFILE* null, %struct.__sFILE** %m_pFile29, align 8, !tbaa !104
  br label %if.end30

if.end30:                                         ; preds = %if.end28, %if.then13
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 8
  %34 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree31, align 8, !tbaa !101
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 10
  %36 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %37 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %38 = bitcast %struct.mz_zip_internal_state_tag* %37 to i8*
  call void %34(i8* %36, i8* %38)
  %39 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #10
  br label %if.end32

if.end32:                                         ; preds = %if.end30, %if.end10
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 3
  store i32 0, i32* %m_zip_mode33, align 4, !tbaa !102
  %41 = load i32, i32* %status, align 4, !tbaa !10
  store i32 %41, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end32, %if.end9, %if.then
  %42 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %42) #10
  %43 = load i32, i32* %retval, align 4
  ret i32 %43
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_init(%struct.mz_zip_archive* %pZip, i64 %size, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i64 %size, i64* %size.addr, align 8, !tbaa !76
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 11
  %2 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %tobool1 = icmp ne i64 (i8*, i64, i8*, i64)* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %3, i32 24)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call2 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %4, i32 %5)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end5:                                          ; preds = %if.end
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 4
  store i32 1, i32* %m_zip_type, align 8, !tbaa !107
  %7 = load i64, i64* %size.addr, align 8, !tbaa !76
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 0
  store i64 %7, i64* %m_archive_size, align 8, !tbaa !110
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %10 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call6 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %9, i32 %10)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end5
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call9 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %11, i32 0)
  store i32 0, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end5
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end10, %if.then8, %if.then4, %if.then
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i32 @mz_zip_set_error(%struct.mz_zip_archive* %pZip, i32 %err_num) #9 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %err_num, i32* %err_num.addr, align 4, !tbaa !12
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %err_num.addr, align 4, !tbaa !12
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 5
  store i32 %1, i32* %m_last_error, align 4, !tbaa !103
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %pZip, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 3
  %5 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp = icmp ne i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %6, i32 24)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 7
  %8 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %8, null
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 7
  store i8* (i8*, i64, i64)* @miniz_def_alloc_func, i8* (i8*, i64, i64)** %m_pAlloc5, align 8, !tbaa !100
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 8
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %tobool7 = icmp ne void (i8*, i8*)* %11, null
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end6
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree9 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 8
  store void (i8*, i8*)* @miniz_def_free_func, void (i8*, i8*)** %m_pFree9, align 8, !tbaa !101
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.end6
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 9
  %14 = load i8* (i8*, i8*, i64, i64)*, i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8, !tbaa !111
  %tobool11 = icmp ne i8* (i8*, i8*, i64, i64)* %14, null
  br i1 %tobool11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.end10
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRealloc13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 9
  store i8* (i8*, i8*, i64, i64)* @miniz_def_realloc_func, i8* (i8*, i8*, i64, i64)** %m_pRealloc13, align 8, !tbaa !111
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end10
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 0
  store i64 0, i64* %m_archive_size, align 8, !tbaa !110
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs, align 8, !tbaa !112
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 2
  store i32 0, i32* %m_total_files, align 8, !tbaa !113
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 5
  store i32 0, i32* %m_last_error, align 4, !tbaa !103
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 7
  %21 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc15, align 8, !tbaa !100
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 10
  %23 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %call16 = call i8* %21(i8* %23, i64 1, i64 152)
  %24 = bitcast i8* %call16 to %struct.mz_zip_internal_state_tag*
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState17 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 15
  store %struct.mz_zip_internal_state_tag* %24, %struct.mz_zip_internal_state_tag** %m_pState17, align 8, !tbaa !98
  %cmp18 = icmp eq %struct.mz_zip_internal_state_tag* null, %24
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end14
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call20 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %26, i32 16)
  store i32 %call20, i32* %retval, align 4
  br label %return

if.end21:                                         ; preds = %if.end14
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState22 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %27, i32 0, i32 15
  %28 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState22, align 8, !tbaa !98
  %29 = bitcast %struct.mz_zip_internal_state_tag* %28 to i8*
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState23 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 15
  %31 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState23, align 8, !tbaa !98
  %32 = bitcast %struct.mz_zip_internal_state_tag* %31 to i8*
  %33 = call i64 @llvm.objectsize.i64.p0i8(i8* %32, i1 false, i1 true, i1 false)
  %call24 = call i8* @__memset_chk(i8* %29, i32 0, i64 152, i64 %33) #10
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState25 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 15
  %35 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState25, align 8, !tbaa !98
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %35, i32 0, i32 0
  %m_element_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 3
  store i32 1, i32* %m_element_size, align 8, !tbaa !114
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState26 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 15
  %37 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState26, align 8, !tbaa !98
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %37, i32 0, i32 1
  %m_element_size27 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size27, align 8, !tbaa !115
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState28 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 15
  %39 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState28, align 8, !tbaa !98
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %39, i32 0, i32 2
  %m_element_size29 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size29, align 8, !tbaa !116
  %40 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState30 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %41, i32 0, i32 15
  %42 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState30, align 8, !tbaa !98
  %m_init_flags = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %42, i32 0, i32 3
  store i32 %40, i32* %m_init_flags, align 8, !tbaa !117
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %43, i32 0, i32 15
  %44 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState31, align 8, !tbaa !98
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %44, i32 0, i32 4
  store i32 0, i32* %m_zip64, align 4, !tbaa !118
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState32 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %45, i32 0, i32 15
  %46 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState32, align 8, !tbaa !98
  %m_zip64_has_extended_info_fields = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %46, i32 0, i32 5
  store i32 0, i32* %m_zip64_has_extended_info_fields, align 8, !tbaa !119
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %47, i32 0, i32 3
  store i32 1, i32* %m_zip_mode33, align 4, !tbaa !102
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end21, %if.then19, %if.then
  %48 = load i32, i32* %retval, align 4
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %pZip, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %flags.addr = alloca i32, align 4
  %cdir_size = alloca i32, align 4
  %cdir_entries_on_this_disk = alloca i32, align 4
  %num_this_disk = alloca i32, align 4
  %cdir_disk_index = alloca i32, align 4
  %cdir_ofs = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %p = alloca i8*, align 8
  %buf_u32 = alloca [1024 x i32], align 16
  %pBuf = alloca i8*, align 8
  %sort_central_dir = alloca i32, align 4
  %zip64_end_of_central_dir_locator_u32 = alloca [5 x i32], align 16
  %pZip64_locator = alloca i8*, align 8
  %zip64_end_of_central_dir_header_u32 = alloca [14 x i32], align 16
  %pZip64_end_of_central_dir = alloca i8*, align 8
  %zip64_end_of_central_dir_ofs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %zip64_total_num_of_disks = alloca i32, align 4
  %zip64_cdir_total_entries = alloca i64, align 8
  %zip64_cdir_total_entries_on_this_disk = alloca i64, align 8
  %zip64_size_of_end_of_central_dir_record = alloca i64, align 8
  %zip64_size_of_central_directory = alloca i64, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %total_header_size = alloca i32, align 4
  %disk_index = alloca i32, align 4
  %bit_flags = alloca i32, align 4
  %filename_size = alloca i32, align 4
  %ext_data_size = alloca i32, align 4
  %comp_size = alloca i64, align 8
  %decomp_size = alloca i64, align 8
  %local_header_ofs = alloca i64, align 8
  %extra_size_remaining = alloca i32, align 4
  %pExtra_data = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %cdir_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 0, i32* %cdir_size, align 4, !tbaa !10
  %1 = bitcast i32* %cdir_entries_on_this_disk to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  store i32 0, i32* %cdir_entries_on_this_disk, align 4, !tbaa !10
  %2 = bitcast i32* %num_this_disk to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  store i32 0, i32* %num_this_disk, align 4, !tbaa !10
  %3 = bitcast i32* %cdir_disk_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  store i32 0, i32* %cdir_disk_index, align 4, !tbaa !10
  %4 = bitcast i64* %cdir_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #10
  store i64 0, i64* %cdir_ofs, align 8, !tbaa !76
  %5 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  store i64 0, i64* %cur_file_ofs, align 8, !tbaa !76
  %6 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = bitcast [1024 x i32]* %buf_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* %7) #10
  %8 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #10
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %buf_u32, i64 0, i64 0
  %9 = bitcast i32* %arraydecay to i8*
  store i8* %9, i8** %pBuf, align 8, !tbaa !8
  %10 = bitcast i32* %sort_central_dir to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #10
  %11 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %11, 2048
  %cmp = icmp eq i32 %and, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %sort_central_dir, align 4, !tbaa !10
  %12 = bitcast [5 x i32]* %zip64_end_of_central_dir_locator_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* %12) #10
  %13 = bitcast i8** %pZip64_locator to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  %arraydecay1 = getelementptr inbounds [5 x i32], [5 x i32]* %zip64_end_of_central_dir_locator_u32, i64 0, i64 0
  %14 = bitcast i32* %arraydecay1 to i8*
  store i8* %14, i8** %pZip64_locator, align 8, !tbaa !8
  %15 = bitcast [14 x i32]* %zip64_end_of_central_dir_header_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %15) #10
  %16 = bitcast i8** %pZip64_end_of_central_dir to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %16) #10
  %arraydecay2 = getelementptr inbounds [14 x i32], [14 x i32]* %zip64_end_of_central_dir_header_u32, i64 0, i64 0
  %17 = bitcast i32* %arraydecay2 to i8*
  store i8* %17, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %18 = bitcast i64* %zip64_end_of_central_dir_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #10
  store i64 0, i64* %zip64_end_of_central_dir_ofs, align 8, !tbaa !76
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 0
  %20 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %cmp3 = icmp ult i64 %20, 22
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %21, i32 8)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end:                                           ; preds = %entry
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call5 = call i32 @mz_zip_reader_locate_header_sig(%struct.mz_zip_archive* %22, i32 101010256, i32 22, i64* %cur_file_ofs)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.end
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call7 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %23, i32 7)
  store i32 %call7, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end8:                                          ; preds = %if.end
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %24, i32 0, i32 11
  %25 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 14
  %27 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %28 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %29 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %call9 = call i64 %25(i8* %27, i64 %28, i8* %29, i64 22)
  %cmp10 = icmp ne i64 %call9, 22
  br i1 %cmp10, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end8
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call13 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %30, i32 20)
  store i32 %call13, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end14:                                         ; preds = %if.end8
  %31 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 0
  %32 = bitcast i8* %add.ptr to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !10
  %cmp15 = icmp ne i32 %33, 101010256
  br i1 %cmp15, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end14
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call18 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %34, i32 8)
  store i32 %call18, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end19:                                         ; preds = %if.end14
  %35 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %cmp20 = icmp sge i64 %35, 76
  br i1 %cmp20, label %if.then22, label %if.end59

if.then22:                                        ; preds = %if.end19
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead23 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 11
  %37 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead23, align 8, !tbaa !109
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque24 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 14
  %39 = load i8*, i8** %m_pIO_opaque24, align 8, !tbaa !120
  %40 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %sub = sub nsw i64 %40, 20
  %41 = load i8*, i8** %pZip64_locator, align 8, !tbaa !8
  %call25 = call i64 %37(i8* %39, i64 %sub, i8* %41, i64 20)
  %cmp26 = icmp eq i64 %call25, 20
  br i1 %cmp26, label %if.then28, label %if.end58

if.then28:                                        ; preds = %if.then22
  %42 = load i8*, i8** %pZip64_locator, align 8, !tbaa !8
  %add.ptr29 = getelementptr inbounds i8, i8* %42, i64 0
  %43 = bitcast i8* %add.ptr29 to i32*
  %44 = load i32, i32* %43, align 4, !tbaa !10
  %cmp30 = icmp eq i32 %44, 117853008
  br i1 %cmp30, label %if.then32, label %if.end57

if.then32:                                        ; preds = %if.then28
  %45 = load i8*, i8** %pZip64_locator, align 8, !tbaa !8
  %add.ptr33 = getelementptr inbounds i8, i8* %45, i64 8
  %46 = bitcast i8* %add.ptr33 to i32*
  %47 = load i32, i32* %46, align 4, !tbaa !10
  %conv34 = zext i32 %47 to i64
  %48 = load i8*, i8** %pZip64_locator, align 8, !tbaa !8
  %add.ptr35 = getelementptr inbounds i8, i8* %48, i64 8
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr35, i64 4
  %49 = bitcast i8* %add.ptr36 to i32*
  %50 = load i32, i32* %49, align 4, !tbaa !10
  %conv37 = zext i32 %50 to i64
  %shl = shl i64 %conv37, 32
  %or = or i64 %conv34, %shl
  store i64 %or, i64* %zip64_end_of_central_dir_ofs, align 8, !tbaa !76
  %51 = load i64, i64* %zip64_end_of_central_dir_ofs, align 8, !tbaa !76
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size38 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %52, i32 0, i32 0
  %53 = load i64, i64* %m_archive_size38, align 8, !tbaa !110
  %sub39 = sub i64 %53, 56
  %cmp40 = icmp ugt i64 %51, %sub39
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.then32
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call43 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %54, i32 8)
  store i32 %call43, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end44:                                         ; preds = %if.then32
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead45 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %55, i32 0, i32 11
  %56 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead45, align 8, !tbaa !109
  %57 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque46 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %57, i32 0, i32 14
  %58 = load i8*, i8** %m_pIO_opaque46, align 8, !tbaa !120
  %59 = load i64, i64* %zip64_end_of_central_dir_ofs, align 8, !tbaa !76
  %60 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %call47 = call i64 %56(i8* %58, i64 %59, i8* %60, i64 56)
  %cmp48 = icmp eq i64 %call47, 56
  br i1 %cmp48, label %if.then50, label %if.end56

if.then50:                                        ; preds = %if.end44
  %61 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr51 = getelementptr inbounds i8, i8* %61, i64 0
  %62 = bitcast i8* %add.ptr51 to i32*
  %63 = load i32, i32* %62, align 4, !tbaa !10
  %cmp52 = icmp eq i32 %63, 101075792
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.then50
  %64 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %64, i32 0, i32 15
  %65 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %65, i32 0, i32 4
  store i32 1, i32* %m_zip64, align 4, !tbaa !118
  br label %if.end55

if.end55:                                         ; preds = %if.then54, %if.then50
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end44
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then28
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then22
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end19
  %66 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr60 = getelementptr inbounds i8, i8* %66, i64 10
  %67 = bitcast i8* %add.ptr60 to i16*
  %68 = load i16, i16* %67, align 2, !tbaa !88
  %conv61 = zext i16 %68 to i32
  %69 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %69, i32 0, i32 2
  store i32 %conv61, i32* %m_total_files, align 8, !tbaa !113
  %70 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr62 = getelementptr inbounds i8, i8* %70, i64 8
  %71 = bitcast i8* %add.ptr62 to i16*
  %72 = load i16, i16* %71, align 2, !tbaa !88
  %conv63 = zext i16 %72 to i32
  store i32 %conv63, i32* %cdir_entries_on_this_disk, align 4, !tbaa !10
  %73 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr64 = getelementptr inbounds i8, i8* %73, i64 4
  %74 = bitcast i8* %add.ptr64 to i16*
  %75 = load i16, i16* %74, align 2, !tbaa !88
  %conv65 = zext i16 %75 to i32
  store i32 %conv65, i32* %num_this_disk, align 4, !tbaa !10
  %76 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr66 = getelementptr inbounds i8, i8* %76, i64 6
  %77 = bitcast i8* %add.ptr66 to i16*
  %78 = load i16, i16* %77, align 2, !tbaa !88
  %conv67 = zext i16 %78 to i32
  store i32 %conv67, i32* %cdir_disk_index, align 4, !tbaa !10
  %79 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr68 = getelementptr inbounds i8, i8* %79, i64 12
  %80 = bitcast i8* %add.ptr68 to i32*
  %81 = load i32, i32* %80, align 4, !tbaa !10
  store i32 %81, i32* %cdir_size, align 4, !tbaa !10
  %82 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr69 = getelementptr inbounds i8, i8* %82, i64 16
  %83 = bitcast i8* %add.ptr69 to i32*
  %84 = load i32, i32* %83, align 4, !tbaa !10
  %conv70 = zext i32 %84 to i64
  store i64 %conv70, i64* %cdir_ofs, align 8, !tbaa !76
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState71 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %85, i32 0, i32 15
  %86 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState71, align 8, !tbaa !98
  %m_zip6472 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %86, i32 0, i32 4
  %87 = load i32, i32* %m_zip6472, align 4, !tbaa !118
  %tobool73 = icmp ne i32 %87, 0
  br i1 %tobool73, label %if.then74, label %if.end146

if.then74:                                        ; preds = %if.end59
  %88 = bitcast i32* %zip64_total_num_of_disks to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %88) #10
  %89 = load i8*, i8** %pZip64_locator, align 8, !tbaa !8
  %add.ptr75 = getelementptr inbounds i8, i8* %89, i64 16
  %90 = bitcast i8* %add.ptr75 to i32*
  %91 = load i32, i32* %90, align 4, !tbaa !10
  store i32 %91, i32* %zip64_total_num_of_disks, align 4, !tbaa !10
  %92 = bitcast i64* %zip64_cdir_total_entries to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %92) #10
  %93 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr76 = getelementptr inbounds i8, i8* %93, i64 32
  %94 = bitcast i8* %add.ptr76 to i32*
  %95 = load i32, i32* %94, align 4, !tbaa !10
  %conv77 = zext i32 %95 to i64
  %96 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr78 = getelementptr inbounds i8, i8* %96, i64 32
  %add.ptr79 = getelementptr inbounds i8, i8* %add.ptr78, i64 4
  %97 = bitcast i8* %add.ptr79 to i32*
  %98 = load i32, i32* %97, align 4, !tbaa !10
  %conv80 = zext i32 %98 to i64
  %shl81 = shl i64 %conv80, 32
  %or82 = or i64 %conv77, %shl81
  store i64 %or82, i64* %zip64_cdir_total_entries, align 8, !tbaa !76
  %99 = bitcast i64* %zip64_cdir_total_entries_on_this_disk to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %99) #10
  %100 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr83 = getelementptr inbounds i8, i8* %100, i64 24
  %101 = bitcast i8* %add.ptr83 to i32*
  %102 = load i32, i32* %101, align 4, !tbaa !10
  %conv84 = zext i32 %102 to i64
  %103 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr85 = getelementptr inbounds i8, i8* %103, i64 24
  %add.ptr86 = getelementptr inbounds i8, i8* %add.ptr85, i64 4
  %104 = bitcast i8* %add.ptr86 to i32*
  %105 = load i32, i32* %104, align 4, !tbaa !10
  %conv87 = zext i32 %105 to i64
  %shl88 = shl i64 %conv87, 32
  %or89 = or i64 %conv84, %shl88
  store i64 %or89, i64* %zip64_cdir_total_entries_on_this_disk, align 8, !tbaa !76
  %106 = bitcast i64* %zip64_size_of_end_of_central_dir_record to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %106) #10
  %107 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr90 = getelementptr inbounds i8, i8* %107, i64 4
  %108 = bitcast i8* %add.ptr90 to i32*
  %109 = load i32, i32* %108, align 4, !tbaa !10
  %conv91 = zext i32 %109 to i64
  %110 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr92 = getelementptr inbounds i8, i8* %110, i64 4
  %add.ptr93 = getelementptr inbounds i8, i8* %add.ptr92, i64 4
  %111 = bitcast i8* %add.ptr93 to i32*
  %112 = load i32, i32* %111, align 4, !tbaa !10
  %conv94 = zext i32 %112 to i64
  %shl95 = shl i64 %conv94, 32
  %or96 = or i64 %conv91, %shl95
  store i64 %or96, i64* %zip64_size_of_end_of_central_dir_record, align 8, !tbaa !76
  %113 = bitcast i64* %zip64_size_of_central_directory to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %113) #10
  %114 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr97 = getelementptr inbounds i8, i8* %114, i64 40
  %115 = bitcast i8* %add.ptr97 to i32*
  %116 = load i32, i32* %115, align 4, !tbaa !10
  %conv98 = zext i32 %116 to i64
  %117 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr99 = getelementptr inbounds i8, i8* %117, i64 40
  %add.ptr100 = getelementptr inbounds i8, i8* %add.ptr99, i64 4
  %118 = bitcast i8* %add.ptr100 to i32*
  %119 = load i32, i32* %118, align 4, !tbaa !10
  %conv101 = zext i32 %119 to i64
  %shl102 = shl i64 %conv101, 32
  %or103 = or i64 %conv98, %shl102
  store i64 %or103, i64* %zip64_size_of_central_directory, align 8, !tbaa !76
  %120 = load i64, i64* %zip64_size_of_end_of_central_dir_record, align 8, !tbaa !76
  %cmp104 = icmp ult i64 %120, 44
  br i1 %cmp104, label %if.then106, label %if.end108

if.then106:                                       ; preds = %if.then74
  %121 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call107 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %121, i32 9)
  store i32 %call107, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end108:                                        ; preds = %if.then74
  %122 = load i32, i32* %zip64_total_num_of_disks, align 4, !tbaa !10
  %cmp109 = icmp ne i32 %122, 1
  br i1 %cmp109, label %if.then111, label %if.end113

if.then111:                                       ; preds = %if.end108
  %123 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call112 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %123, i32 10)
  store i32 %call112, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end113:                                        ; preds = %if.end108
  %124 = load i64, i64* %zip64_cdir_total_entries, align 8, !tbaa !76
  %cmp114 = icmp ugt i64 %124, 4294967295
  br i1 %cmp114, label %if.then116, label %if.end118

if.then116:                                       ; preds = %if.end113
  %125 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call117 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %125, i32 2)
  store i32 %call117, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end118:                                        ; preds = %if.end113
  %126 = load i64, i64* %zip64_cdir_total_entries, align 8, !tbaa !76
  %conv119 = trunc i64 %126 to i32
  %127 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files120 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %127, i32 0, i32 2
  store i32 %conv119, i32* %m_total_files120, align 8, !tbaa !113
  %128 = load i64, i64* %zip64_cdir_total_entries_on_this_disk, align 8, !tbaa !76
  %cmp121 = icmp ugt i64 %128, 4294967295
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %if.end118
  %129 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call124 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %129, i32 2)
  store i32 %call124, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end125:                                        ; preds = %if.end118
  %130 = load i64, i64* %zip64_cdir_total_entries_on_this_disk, align 8, !tbaa !76
  %conv126 = trunc i64 %130 to i32
  store i32 %conv126, i32* %cdir_entries_on_this_disk, align 4, !tbaa !10
  %131 = load i64, i64* %zip64_size_of_central_directory, align 8, !tbaa !76
  %cmp127 = icmp ugt i64 %131, 4294967295
  br i1 %cmp127, label %if.then129, label %if.end131

if.then129:                                       ; preds = %if.end125
  %132 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call130 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %132, i32 15)
  store i32 %call130, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end131:                                        ; preds = %if.end125
  %133 = load i64, i64* %zip64_size_of_central_directory, align 8, !tbaa !76
  %conv132 = trunc i64 %133 to i32
  store i32 %conv132, i32* %cdir_size, align 4, !tbaa !10
  %134 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr133 = getelementptr inbounds i8, i8* %134, i64 16
  %135 = bitcast i8* %add.ptr133 to i32*
  %136 = load i32, i32* %135, align 4, !tbaa !10
  store i32 %136, i32* %num_this_disk, align 4, !tbaa !10
  %137 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr134 = getelementptr inbounds i8, i8* %137, i64 20
  %138 = bitcast i8* %add.ptr134 to i32*
  %139 = load i32, i32* %138, align 4, !tbaa !10
  store i32 %139, i32* %cdir_disk_index, align 4, !tbaa !10
  %140 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr135 = getelementptr inbounds i8, i8* %140, i64 48
  %141 = bitcast i8* %add.ptr135 to i32*
  %142 = load i32, i32* %141, align 4, !tbaa !10
  %conv136 = zext i32 %142 to i64
  %143 = load i8*, i8** %pZip64_end_of_central_dir, align 8, !tbaa !8
  %add.ptr137 = getelementptr inbounds i8, i8* %143, i64 48
  %add.ptr138 = getelementptr inbounds i8, i8* %add.ptr137, i64 4
  %144 = bitcast i8* %add.ptr138 to i32*
  %145 = load i32, i32* %144, align 4, !tbaa !10
  %conv139 = zext i32 %145 to i64
  %shl140 = shl i64 %conv139, 32
  %or141 = or i64 %conv136, %shl140
  store i64 %or141, i64* %cdir_ofs, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end131, %if.then129, %if.then123, %if.then116, %if.then111, %if.then106
  %146 = bitcast i64* %zip64_size_of_central_directory to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %146) #10
  %147 = bitcast i64* %zip64_size_of_end_of_central_dir_record to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %147) #10
  %148 = bitcast i64* %zip64_cdir_total_entries_on_this_disk to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %148) #10
  %149 = bitcast i64* %zip64_cdir_total_entries to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %149) #10
  %150 = bitcast i32* %zip64_total_num_of_disks to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %150) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup441 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end146

if.end146:                                        ; preds = %cleanup.cont, %if.end59
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files147 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %151, i32 0, i32 2
  %152 = load i32, i32* %m_total_files147, align 8, !tbaa !113
  %153 = load i32, i32* %cdir_entries_on_this_disk, align 4, !tbaa !10
  %cmp148 = icmp ne i32 %152, %153
  br i1 %cmp148, label %if.then150, label %if.end152

if.then150:                                       ; preds = %if.end146
  %154 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call151 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %154, i32 10)
  store i32 %call151, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end152:                                        ; preds = %if.end146
  %155 = load i32, i32* %num_this_disk, align 4, !tbaa !10
  %156 = load i32, i32* %cdir_disk_index, align 4, !tbaa !10
  %or153 = or i32 %155, %156
  %cmp154 = icmp ne i32 %or153, 0
  br i1 %cmp154, label %land.lhs.true, label %if.end162

land.lhs.true:                                    ; preds = %if.end152
  %157 = load i32, i32* %num_this_disk, align 4, !tbaa !10
  %cmp156 = icmp ne i32 %157, 1
  br i1 %cmp156, label %if.then160, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %158 = load i32, i32* %cdir_disk_index, align 4, !tbaa !10
  %cmp158 = icmp ne i32 %158, 1
  br i1 %cmp158, label %if.then160, label %if.end162

if.then160:                                       ; preds = %lor.lhs.false, %land.lhs.true
  %159 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call161 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %159, i32 10)
  store i32 %call161, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end162:                                        ; preds = %lor.lhs.false, %if.end152
  %160 = load i32, i32* %cdir_size, align 4, !tbaa !10
  %161 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files163 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %161, i32 0, i32 2
  %162 = load i32, i32* %m_total_files163, align 8, !tbaa !113
  %mul = mul i32 %162, 46
  %cmp164 = icmp ult i32 %160, %mul
  br i1 %cmp164, label %if.then166, label %if.end168

if.then166:                                       ; preds = %if.end162
  %163 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call167 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %163, i32 9)
  store i32 %call167, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end168:                                        ; preds = %if.end162
  %164 = load i64, i64* %cdir_ofs, align 8, !tbaa !76
  %165 = load i32, i32* %cdir_size, align 4, !tbaa !10
  %conv169 = zext i32 %165 to i64
  %add = add i64 %164, %conv169
  %166 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size170 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %166, i32 0, i32 0
  %167 = load i64, i64* %m_archive_size170, align 8, !tbaa !110
  %cmp171 = icmp ugt i64 %add, %167
  br i1 %cmp171, label %if.then173, label %if.end175

if.then173:                                       ; preds = %if.end168
  %168 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call174 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %168, i32 9)
  store i32 %call174, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

if.end175:                                        ; preds = %if.end168
  %169 = load i64, i64* %cdir_ofs, align 8, !tbaa !76
  %170 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %170, i32 0, i32 1
  store i64 %169, i64* %m_central_directory_file_ofs, align 8, !tbaa !112
  %171 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files176 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %171, i32 0, i32 2
  %172 = load i32, i32* %m_total_files176, align 8, !tbaa !113
  %tobool177 = icmp ne i32 %172, 0
  br i1 %tobool177, label %if.then178, label %if.end437

if.then178:                                       ; preds = %if.end175
  %173 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %173) #10
  %174 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %174) #10
  %175 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %176 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState179 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %176, i32 0, i32 15
  %177 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState179, align 8, !tbaa !98
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %177, i32 0, i32 0
  %178 = load i32, i32* %cdir_size, align 4, !tbaa !10
  %conv180 = zext i32 %178 to i64
  %call181 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %175, %struct.mz_zip_array* %m_central_dir, i64 %conv180, i32 0)
  %tobool182 = icmp ne i32 %call181, 0
  br i1 %tobool182, label %lor.lhs.false183, label %if.then189

lor.lhs.false183:                                 ; preds = %if.then178
  %179 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %180 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState184 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %180, i32 0, i32 15
  %181 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState184, align 8, !tbaa !98
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %181, i32 0, i32 1
  %182 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files185 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %182, i32 0, i32 2
  %183 = load i32, i32* %m_total_files185, align 8, !tbaa !113
  %conv186 = zext i32 %183 to i64
  %call187 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %179, %struct.mz_zip_array* %m_central_dir_offsets, i64 %conv186, i32 0)
  %tobool188 = icmp ne i32 %call187, 0
  br i1 %tobool188, label %if.end191, label %if.then189

if.then189:                                       ; preds = %lor.lhs.false183, %if.then178
  %184 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call190 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %184, i32 16)
  store i32 %call190, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup433

if.end191:                                        ; preds = %lor.lhs.false183
  %185 = load i32, i32* %sort_central_dir, align 4, !tbaa !10
  %tobool192 = icmp ne i32 %185, 0
  br i1 %tobool192, label %if.then193, label %if.end202

if.then193:                                       ; preds = %if.end191
  %186 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %187 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState194 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %187, i32 0, i32 15
  %188 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState194, align 8, !tbaa !98
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %188, i32 0, i32 2
  %189 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files195 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %189, i32 0, i32 2
  %190 = load i32, i32* %m_total_files195, align 8, !tbaa !113
  %conv196 = zext i32 %190 to i64
  %call197 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %186, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i64 %conv196, i32 0)
  %tobool198 = icmp ne i32 %call197, 0
  br i1 %tobool198, label %if.end201, label %if.then199

if.then199:                                       ; preds = %if.then193
  %191 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call200 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %191, i32 16)
  store i32 %call200, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup433

if.end201:                                        ; preds = %if.then193
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %if.end191
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead203 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %192, i32 0, i32 11
  %193 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead203, align 8, !tbaa !109
  %194 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque204 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %194, i32 0, i32 14
  %195 = load i8*, i8** %m_pIO_opaque204, align 8, !tbaa !120
  %196 = load i64, i64* %cdir_ofs, align 8, !tbaa !76
  %197 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState205 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %197, i32 0, i32 15
  %198 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState205, align 8, !tbaa !98
  %m_central_dir206 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %198, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir206, i32 0, i32 0
  %199 = load i8*, i8** %m_p, align 8, !tbaa !121
  %200 = load i32, i32* %cdir_size, align 4, !tbaa !10
  %conv207 = zext i32 %200 to i64
  %call208 = call i64 %193(i8* %195, i64 %196, i8* %199, i64 %conv207)
  %201 = load i32, i32* %cdir_size, align 4, !tbaa !10
  %conv209 = zext i32 %201 to i64
  %cmp210 = icmp ne i64 %call208, %conv209
  br i1 %cmp210, label %if.then212, label %if.end214

if.then212:                                       ; preds = %if.end202
  %202 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call213 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %202, i32 20)
  store i32 %call213, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup433

if.end214:                                        ; preds = %if.end202
  %203 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState215 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %203, i32 0, i32 15
  %204 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState215, align 8, !tbaa !98
  %m_central_dir216 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %204, i32 0, i32 0
  %m_p217 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir216, i32 0, i32 0
  %205 = load i8*, i8** %m_p217, align 8, !tbaa !121
  store i8* %205, i8** %p, align 8, !tbaa !8
  %206 = load i32, i32* %cdir_size, align 4, !tbaa !10
  store i32 %206, i32* %n, align 4, !tbaa !10
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end214
  %207 = load i32, i32* %i, align 4, !tbaa !10
  %208 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files218 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %208, i32 0, i32 2
  %209 = load i32, i32* %m_total_files218, align 8, !tbaa !113
  %cmp219 = icmp ult i32 %207, %209
  br i1 %cmp219, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %210 = bitcast i32* %total_header_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %210) #10
  %211 = bitcast i32* %disk_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %211) #10
  %212 = bitcast i32* %bit_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %212) #10
  %213 = bitcast i32* %filename_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %213) #10
  %214 = bitcast i32* %ext_data_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %214) #10
  %215 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %215) #10
  %216 = bitcast i64* %decomp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %216) #10
  %217 = bitcast i64* %local_header_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %217) #10
  %218 = load i32, i32* %n, align 4, !tbaa !10
  %cmp221 = icmp ult i32 %218, 46
  br i1 %cmp221, label %if.then226, label %lor.lhs.false223

lor.lhs.false223:                                 ; preds = %for.body
  %219 = load i8*, i8** %p, align 8, !tbaa !8
  %220 = bitcast i8* %219 to i32*
  %221 = load i32, i32* %220, align 4, !tbaa !10
  %cmp224 = icmp ne i32 %221, 33639248
  br i1 %cmp224, label %if.then226, label %if.end228

if.then226:                                       ; preds = %lor.lhs.false223, %for.body
  %222 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call227 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %222, i32 9)
  store i32 %call227, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup423

if.end228:                                        ; preds = %lor.lhs.false223
  %223 = load i8*, i8** %p, align 8, !tbaa !8
  %224 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState229 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %224, i32 0, i32 15
  %225 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState229, align 8, !tbaa !98
  %m_central_dir230 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %225, i32 0, i32 0
  %m_p231 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir230, i32 0, i32 0
  %226 = load i8*, i8** %m_p231, align 8, !tbaa !121
  %sub.ptr.lhs.cast = ptrtoint i8* %223 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %226 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv232 = trunc i64 %sub.ptr.sub to i32
  %227 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState233 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %227, i32 0, i32 15
  %228 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState233, align 8, !tbaa !98
  %m_central_dir_offsets234 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %228, i32 0, i32 1
  %m_p235 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets234, i32 0, i32 0
  %229 = load i8*, i8** %m_p235, align 8, !tbaa !122
  %230 = bitcast i8* %229 to i32*
  %231 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom = zext i32 %231 to i64
  %arrayidx = getelementptr inbounds i32, i32* %230, i64 %idxprom
  store i32 %conv232, i32* %arrayidx, align 4, !tbaa !10
  %232 = load i32, i32* %sort_central_dir, align 4, !tbaa !10
  %tobool236 = icmp ne i32 %232, 0
  br i1 %tobool236, label %if.then237, label %if.end243

if.then237:                                       ; preds = %if.end228
  %233 = load i32, i32* %i, align 4, !tbaa !10
  %234 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState238 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %234, i32 0, i32 15
  %235 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState238, align 8, !tbaa !98
  %m_sorted_central_dir_offsets239 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %235, i32 0, i32 2
  %m_p240 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets239, i32 0, i32 0
  %236 = load i8*, i8** %m_p240, align 8, !tbaa !123
  %237 = bitcast i8* %236 to i32*
  %238 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom241 = zext i32 %238 to i64
  %arrayidx242 = getelementptr inbounds i32, i32* %237, i64 %idxprom241
  store i32 %233, i32* %arrayidx242, align 4, !tbaa !10
  br label %if.end243

if.end243:                                        ; preds = %if.then237, %if.end228
  %239 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr244 = getelementptr inbounds i8, i8* %239, i64 20
  %240 = bitcast i8* %add.ptr244 to i32*
  %241 = load i32, i32* %240, align 4, !tbaa !10
  %conv245 = zext i32 %241 to i64
  store i64 %conv245, i64* %comp_size, align 8, !tbaa !76
  %242 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr246 = getelementptr inbounds i8, i8* %242, i64 24
  %243 = bitcast i8* %add.ptr246 to i32*
  %244 = load i32, i32* %243, align 4, !tbaa !10
  %conv247 = zext i32 %244 to i64
  store i64 %conv247, i64* %decomp_size, align 8, !tbaa !76
  %245 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr248 = getelementptr inbounds i8, i8* %245, i64 42
  %246 = bitcast i8* %add.ptr248 to i32*
  %247 = load i32, i32* %246, align 4, !tbaa !10
  %conv249 = zext i32 %247 to i64
  store i64 %conv249, i64* %local_header_ofs, align 8, !tbaa !76
  %248 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr250 = getelementptr inbounds i8, i8* %248, i64 28
  %249 = bitcast i8* %add.ptr250 to i16*
  %250 = load i16, i16* %249, align 2, !tbaa !88
  %conv251 = zext i16 %250 to i32
  store i32 %conv251, i32* %filename_size, align 4, !tbaa !10
  %251 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr252 = getelementptr inbounds i8, i8* %251, i64 30
  %252 = bitcast i8* %add.ptr252 to i16*
  %253 = load i16, i16* %252, align 2, !tbaa !88
  %conv253 = zext i16 %253 to i32
  store i32 %conv253, i32* %ext_data_size, align 4, !tbaa !10
  %254 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState254 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %254, i32 0, i32 15
  %255 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState254, align 8, !tbaa !98
  %m_zip64_has_extended_info_fields = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %255, i32 0, i32 5
  %256 = load i32, i32* %m_zip64_has_extended_info_fields, align 8, !tbaa !119
  %tobool255 = icmp ne i32 %256, 0
  br i1 %tobool255, label %if.end352, label %land.lhs.true256

land.lhs.true256:                                 ; preds = %if.end243
  %257 = load i32, i32* %ext_data_size, align 4, !tbaa !10
  %tobool257 = icmp ne i32 %257, 0
  br i1 %tobool257, label %land.lhs.true258, label %if.end352

land.lhs.true258:                                 ; preds = %land.lhs.true256
  %258 = load i64, i64* %comp_size, align 8, !tbaa !76
  %259 = load i64, i64* %decomp_size, align 8, !tbaa !76
  %cmp259 = icmp ugt i64 %258, %259
  br i1 %cmp259, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true258
  %260 = load i64, i64* %comp_size, align 8, !tbaa !76
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true258
  %261 = load i64, i64* %decomp_size, align 8, !tbaa !76
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %260, %cond.true ], [ %261, %cond.false ]
  %262 = load i64, i64* %local_header_ofs, align 8, !tbaa !76
  %cmp261 = icmp ugt i64 %cond, %262
  br i1 %cmp261, label %cond.true263, label %cond.false270

cond.true263:                                     ; preds = %cond.end
  %263 = load i64, i64* %comp_size, align 8, !tbaa !76
  %264 = load i64, i64* %decomp_size, align 8, !tbaa !76
  %cmp264 = icmp ugt i64 %263, %264
  br i1 %cmp264, label %cond.true266, label %cond.false267

cond.true266:                                     ; preds = %cond.true263
  %265 = load i64, i64* %comp_size, align 8, !tbaa !76
  br label %cond.end268

cond.false267:                                    ; preds = %cond.true263
  %266 = load i64, i64* %decomp_size, align 8, !tbaa !76
  br label %cond.end268

cond.end268:                                      ; preds = %cond.false267, %cond.true266
  %cond269 = phi i64 [ %265, %cond.true266 ], [ %266, %cond.false267 ]
  br label %cond.end271

cond.false270:                                    ; preds = %cond.end
  %267 = load i64, i64* %local_header_ofs, align 8, !tbaa !76
  br label %cond.end271

cond.end271:                                      ; preds = %cond.false270, %cond.end268
  %cond272 = phi i64 [ %cond269, %cond.end268 ], [ %267, %cond.false270 ]
  %cmp273 = icmp eq i64 %cond272, 4294967295
  br i1 %cmp273, label %if.then275, label %if.end352

if.then275:                                       ; preds = %cond.end271
  %268 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %268) #10
  %269 = load i32, i32* %ext_data_size, align 4, !tbaa !10
  store i32 %269, i32* %extra_size_remaining, align 4, !tbaa !10
  %270 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %tobool276 = icmp ne i32 %270, 0
  br i1 %tobool276, label %if.then277, label %if.end348

if.then277:                                       ; preds = %if.then275
  %271 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %271) #10
  %272 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %272) #10
  store i8* null, i8** %buf, align 8, !tbaa !8
  %273 = load i32, i32* %filename_size, align 4, !tbaa !10
  %add278 = add i32 46, %273
  %274 = load i32, i32* %ext_data_size, align 4, !tbaa !10
  %add279 = add i32 %add278, %274
  %275 = load i32, i32* %n, align 4, !tbaa !10
  %cmp280 = icmp ugt i32 %add279, %275
  br i1 %cmp280, label %if.then282, label %if.else

if.then282:                                       ; preds = %if.then277
  %276 = load i32, i32* %ext_data_size, align 4, !tbaa !10
  %conv283 = zext i32 %276 to i64
  %call284 = call i8* @malloc(i64 %conv283) #11
  store i8* %call284, i8** %buf, align 8, !tbaa !8
  %277 = load i8*, i8** %buf, align 8, !tbaa !8
  %cmp285 = icmp eq i8* %277, null
  br i1 %cmp285, label %if.then287, label %if.end289

if.then287:                                       ; preds = %if.then282
  %278 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call288 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %278, i32 16)
  store i32 %call288, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup344

if.end289:                                        ; preds = %if.then282
  %279 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead290 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %279, i32 0, i32 11
  %280 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead290, align 8, !tbaa !109
  %281 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque291 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %281, i32 0, i32 14
  %282 = load i8*, i8** %m_pIO_opaque291, align 8, !tbaa !120
  %283 = load i64, i64* %cdir_ofs, align 8, !tbaa !76
  %add292 = add i64 %283, 46
  %284 = load i32, i32* %filename_size, align 4, !tbaa !10
  %conv293 = zext i32 %284 to i64
  %add294 = add i64 %add292, %conv293
  %285 = load i8*, i8** %buf, align 8, !tbaa !8
  %286 = load i32, i32* %ext_data_size, align 4, !tbaa !10
  %conv295 = zext i32 %286 to i64
  %call296 = call i64 %280(i8* %282, i64 %add294, i8* %285, i64 %conv295)
  %287 = load i32, i32* %ext_data_size, align 4, !tbaa !10
  %conv297 = zext i32 %287 to i64
  %cmp298 = icmp ne i64 %call296, %conv297
  br i1 %cmp298, label %if.then300, label %if.end302

if.then300:                                       ; preds = %if.end289
  %288 = load i8*, i8** %buf, align 8, !tbaa !8
  call void @free(i8* %288)
  %289 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call301 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %289, i32 20)
  store i32 %call301, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup344

if.end302:                                        ; preds = %if.end289
  %290 = load i8*, i8** %buf, align 8, !tbaa !8
  store i8* %290, i8** %pExtra_data, align 8, !tbaa !8
  br label %if.end305

if.else:                                          ; preds = %if.then277
  %291 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr303 = getelementptr inbounds i8, i8* %291, i64 46
  %292 = load i32, i32* %filename_size, align 4, !tbaa !10
  %idx.ext = zext i32 %292 to i64
  %add.ptr304 = getelementptr inbounds i8, i8* %add.ptr303, i64 %idx.ext
  store i8* %add.ptr304, i8** %pExtra_data, align 8, !tbaa !8
  br label %if.end305

if.end305:                                        ; preds = %if.else, %if.end302
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end305
  %293 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %293) #10
  %294 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %294) #10
  %295 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv306 = zext i32 %295 to i64
  %cmp307 = icmp ult i64 %conv306, 4
  br i1 %cmp307, label %if.then309, label %if.end311

if.then309:                                       ; preds = %do.body
  %296 = load i8*, i8** %buf, align 8, !tbaa !8
  call void @free(i8* %296)
  %297 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call310 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %297, i32 9)
  store i32 %call310, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup339

if.end311:                                        ; preds = %do.body
  %298 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %299 = bitcast i8* %298 to i16*
  %300 = load i16, i16* %299, align 2, !tbaa !88
  %conv312 = zext i16 %300 to i32
  store i32 %conv312, i32* %field_id, align 4, !tbaa !10
  %301 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr313 = getelementptr inbounds i8, i8* %301, i64 2
  %302 = bitcast i8* %add.ptr313 to i16*
  %303 = load i16, i16* %302, align 2, !tbaa !88
  %conv314 = zext i16 %303 to i32
  store i32 %conv314, i32* %field_data_size, align 4, !tbaa !10
  %304 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv315 = zext i32 %304 to i64
  %add316 = add i64 %conv315, 4
  %305 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv317 = zext i32 %305 to i64
  %cmp318 = icmp ugt i64 %add316, %conv317
  br i1 %cmp318, label %if.then320, label %if.end322

if.then320:                                       ; preds = %if.end311
  %306 = load i8*, i8** %buf, align 8, !tbaa !8
  call void @free(i8* %306)
  %307 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call321 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %307, i32 9)
  store i32 %call321, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup339

if.end322:                                        ; preds = %if.end311
  %308 = load i32, i32* %field_id, align 4, !tbaa !10
  %cmp323 = icmp eq i32 %308, 1
  br i1 %cmp323, label %if.then325, label %if.end330

if.then325:                                       ; preds = %if.end322
  %309 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState326 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %309, i32 0, i32 15
  %310 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState326, align 8, !tbaa !98
  %m_zip64327 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %310, i32 0, i32 4
  store i32 1, i32* %m_zip64327, align 4, !tbaa !118
  %311 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState328 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %311, i32 0, i32 15
  %312 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState328, align 8, !tbaa !98
  %m_zip64_has_extended_info_fields329 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %312, i32 0, i32 5
  store i32 1, i32* %m_zip64_has_extended_info_fields329, align 8, !tbaa !119
  store i32 5, i32* %cleanup.dest.slot, align 4
  br label %cleanup339

if.end330:                                        ; preds = %if.end322
  %313 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv331 = zext i32 %313 to i64
  %add332 = add i64 4, %conv331
  %314 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr333 = getelementptr inbounds i8, i8* %314, i64 %add332
  store i8* %add.ptr333, i8** %pExtra_data, align 8, !tbaa !8
  %315 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv334 = zext i32 %315 to i64
  %sub335 = sub i64 %conv334, 4
  %316 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv336 = zext i32 %316 to i64
  %sub337 = sub i64 %sub335, %conv336
  %conv338 = trunc i64 %sub337 to i32
  store i32 %conv338, i32* %extra_size_remaining, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup339

cleanup339:                                       ; preds = %if.end330, %if.then325, %if.then320, %if.then309
  %317 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %317) #10
  %318 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %318) #10
  %cleanup.dest341 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest341, label %cleanup344 [
    i32 0, label %cleanup.cont342
    i32 5, label %do.end
  ]

cleanup.cont342:                                  ; preds = %cleanup339
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont342
  %319 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %tobool343 = icmp ne i32 %319, 0
  br i1 %tobool343, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %cleanup339
  %320 = load i8*, i8** %buf, align 8, !tbaa !8
  call void @free(i8* %320)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup344

cleanup344:                                       ; preds = %do.end, %cleanup339, %if.then300, %if.then287
  %321 = bitcast i8** %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %321) #10
  %322 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %322) #10
  %cleanup.dest346 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest346, label %cleanup349 [
    i32 0, label %cleanup.cont347
  ]

cleanup.cont347:                                  ; preds = %cleanup344
  br label %if.end348

if.end348:                                        ; preds = %cleanup.cont347, %if.then275
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup349

cleanup349:                                       ; preds = %if.end348, %cleanup344
  %323 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %323) #10
  %cleanup.dest350 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest350, label %cleanup423 [
    i32 0, label %cleanup.cont351
  ]

cleanup.cont351:                                  ; preds = %cleanup349
  br label %if.end352

if.end352:                                        ; preds = %cleanup.cont351, %cond.end271, %land.lhs.true256, %if.end243
  %324 = load i64, i64* %comp_size, align 8, !tbaa !76
  %cmp353 = icmp ne i64 %324, 4294967295
  br i1 %cmp353, label %land.lhs.true355, label %if.end371

land.lhs.true355:                                 ; preds = %if.end352
  %325 = load i64, i64* %decomp_size, align 8, !tbaa !76
  %cmp356 = icmp ne i64 %325, 4294967295
  br i1 %cmp356, label %if.then358, label %if.end371

if.then358:                                       ; preds = %land.lhs.true355
  %326 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr359 = getelementptr inbounds i8, i8* %326, i64 10
  %327 = bitcast i8* %add.ptr359 to i32*
  %328 = load i32, i32* %327, align 4, !tbaa !10
  %tobool360 = icmp ne i32 %328, 0
  br i1 %tobool360, label %lor.lhs.false364, label %land.lhs.true361

land.lhs.true361:                                 ; preds = %if.then358
  %329 = load i64, i64* %decomp_size, align 8, !tbaa !76
  %330 = load i64, i64* %comp_size, align 8, !tbaa !76
  %cmp362 = icmp ne i64 %329, %330
  br i1 %cmp362, label %if.then368, label %lor.lhs.false364

lor.lhs.false364:                                 ; preds = %land.lhs.true361, %if.then358
  %331 = load i64, i64* %decomp_size, align 8, !tbaa !76
  %tobool365 = icmp ne i64 %331, 0
  br i1 %tobool365, label %land.lhs.true366, label %if.end370

land.lhs.true366:                                 ; preds = %lor.lhs.false364
  %332 = load i64, i64* %comp_size, align 8, !tbaa !76
  %tobool367 = icmp ne i64 %332, 0
  br i1 %tobool367, label %if.end370, label %if.then368

if.then368:                                       ; preds = %land.lhs.true366, %land.lhs.true361
  %333 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call369 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %333, i32 9)
  store i32 %call369, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup423

if.end370:                                        ; preds = %land.lhs.true366, %lor.lhs.false364
  br label %if.end371

if.end371:                                        ; preds = %if.end370, %land.lhs.true355, %if.end352
  %334 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr372 = getelementptr inbounds i8, i8* %334, i64 34
  %335 = bitcast i8* %add.ptr372 to i16*
  %336 = load i16, i16* %335, align 2, !tbaa !88
  %conv373 = zext i16 %336 to i32
  store i32 %conv373, i32* %disk_index, align 4, !tbaa !10
  %337 = load i32, i32* %disk_index, align 4, !tbaa !10
  %cmp374 = icmp eq i32 %337, 65535
  br i1 %cmp374, label %if.then382, label %lor.lhs.false376

lor.lhs.false376:                                 ; preds = %if.end371
  %338 = load i32, i32* %disk_index, align 4, !tbaa !10
  %339 = load i32, i32* %num_this_disk, align 4, !tbaa !10
  %cmp377 = icmp ne i32 %338, %339
  br i1 %cmp377, label %land.lhs.true379, label %if.end384

land.lhs.true379:                                 ; preds = %lor.lhs.false376
  %340 = load i32, i32* %disk_index, align 4, !tbaa !10
  %cmp380 = icmp ne i32 %340, 1
  br i1 %cmp380, label %if.then382, label %if.end384

if.then382:                                       ; preds = %land.lhs.true379, %if.end371
  %341 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call383 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %341, i32 10)
  store i32 %call383, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup423

if.end384:                                        ; preds = %land.lhs.true379, %lor.lhs.false376
  %342 = load i64, i64* %comp_size, align 8, !tbaa !76
  %cmp385 = icmp ne i64 %342, 4294967295
  br i1 %cmp385, label %if.then387, label %if.end398

if.then387:                                       ; preds = %if.end384
  %343 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr388 = getelementptr inbounds i8, i8* %343, i64 42
  %344 = bitcast i8* %add.ptr388 to i32*
  %345 = load i32, i32* %344, align 4, !tbaa !10
  %conv389 = zext i32 %345 to i64
  %add390 = add i64 %conv389, 30
  %346 = load i64, i64* %comp_size, align 8, !tbaa !76
  %add391 = add i64 %add390, %346
  %347 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size392 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %347, i32 0, i32 0
  %348 = load i64, i64* %m_archive_size392, align 8, !tbaa !110
  %cmp393 = icmp ugt i64 %add391, %348
  br i1 %cmp393, label %if.then395, label %if.end397

if.then395:                                       ; preds = %if.then387
  %349 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call396 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %349, i32 9)
  store i32 %call396, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup423

if.end397:                                        ; preds = %if.then387
  br label %if.end398

if.end398:                                        ; preds = %if.end397, %if.end384
  %350 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr399 = getelementptr inbounds i8, i8* %350, i64 8
  %351 = bitcast i8* %add.ptr399 to i16*
  %352 = load i16, i16* %351, align 2, !tbaa !88
  %conv400 = zext i16 %352 to i32
  store i32 %conv400, i32* %bit_flags, align 4, !tbaa !10
  %353 = load i32, i32* %bit_flags, align 4, !tbaa !10
  %and401 = and i32 %353, 8192
  %tobool402 = icmp ne i32 %and401, 0
  br i1 %tobool402, label %if.then403, label %if.end405

if.then403:                                       ; preds = %if.end398
  %354 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call404 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %354, i32 5)
  store i32 %call404, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup423

if.end405:                                        ; preds = %if.end398
  %355 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr406 = getelementptr inbounds i8, i8* %355, i64 28
  %356 = bitcast i8* %add.ptr406 to i16*
  %357 = load i16, i16* %356, align 2, !tbaa !88
  %conv407 = zext i16 %357 to i32
  %add408 = add nsw i32 46, %conv407
  %358 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr409 = getelementptr inbounds i8, i8* %358, i64 30
  %359 = bitcast i8* %add.ptr409 to i16*
  %360 = load i16, i16* %359, align 2, !tbaa !88
  %conv410 = zext i16 %360 to i32
  %add411 = add nsw i32 %add408, %conv410
  %361 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr412 = getelementptr inbounds i8, i8* %361, i64 32
  %362 = bitcast i8* %add.ptr412 to i16*
  %363 = load i16, i16* %362, align 2, !tbaa !88
  %conv413 = zext i16 %363 to i32
  %add414 = add nsw i32 %add411, %conv413
  store i32 %add414, i32* %total_header_size, align 4, !tbaa !10
  %364 = load i32, i32* %n, align 4, !tbaa !10
  %cmp415 = icmp ugt i32 %add414, %364
  br i1 %cmp415, label %if.then417, label %if.end419

if.then417:                                       ; preds = %if.end405
  %365 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call418 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %365, i32 9)
  store i32 %call418, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup423

if.end419:                                        ; preds = %if.end405
  %366 = load i32, i32* %total_header_size, align 4, !tbaa !10
  %367 = load i32, i32* %n, align 4, !tbaa !10
  %sub420 = sub i32 %367, %366
  store i32 %sub420, i32* %n, align 4, !tbaa !10
  %368 = load i32, i32* %total_header_size, align 4, !tbaa !10
  %369 = load i8*, i8** %p, align 8, !tbaa !8
  %idx.ext421 = zext i32 %368 to i64
  %add.ptr422 = getelementptr inbounds i8, i8* %369, i64 %idx.ext421
  store i8* %add.ptr422, i8** %p, align 8, !tbaa !8
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup423

cleanup423:                                       ; preds = %if.end419, %if.then417, %if.then403, %if.then395, %if.then382, %if.then368, %cleanup349, %if.then226
  %370 = bitcast i64* %local_header_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %370) #10
  %371 = bitcast i64* %decomp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %371) #10
  %372 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %372) #10
  %373 = bitcast i32* %ext_data_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %373) #10
  %374 = bitcast i32* %filename_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %374) #10
  %375 = bitcast i32* %bit_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %375) #10
  %376 = bitcast i32* %disk_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %376) #10
  %377 = bitcast i32* %total_header_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %377) #10
  %cleanup.dest431 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest431, label %cleanup433 [
    i32 0, label %cleanup.cont432
  ]

cleanup.cont432:                                  ; preds = %cleanup423
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont432
  %378 = load i32, i32* %i, align 4, !tbaa !10
  %inc = add i32 %378, 1
  store i32 %inc, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup433

cleanup433:                                       ; preds = %for.end, %cleanup423, %if.then212, %if.then199, %if.then189
  %379 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %379) #10
  %380 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %380) #10
  %cleanup.dest435 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest435, label %cleanup441 [
    i32 0, label %cleanup.cont436
  ]

cleanup.cont436:                                  ; preds = %cleanup433
  br label %if.end437

if.end437:                                        ; preds = %cleanup.cont436, %if.end175
  %381 = load i32, i32* %sort_central_dir, align 4, !tbaa !10
  %tobool438 = icmp ne i32 %381, 0
  br i1 %tobool438, label %if.then439, label %if.end440

if.then439:                                       ; preds = %if.end437
  %382 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_reader_sort_central_dir_offsets_by_filename(%struct.mz_zip_archive* %382)
  br label %if.end440

if.end440:                                        ; preds = %if.then439, %if.end437
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup441

cleanup441:                                       ; preds = %if.end440, %cleanup433, %if.then173, %if.then166, %if.then160, %if.then150, %cleanup, %if.then42, %if.then17, %if.then12, %if.then6, %if.then
  %383 = bitcast i64* %zip64_end_of_central_dir_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %383) #10
  %384 = bitcast i8** %pZip64_end_of_central_dir to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %384) #10
  %385 = bitcast [14 x i32]* %zip64_end_of_central_dir_header_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %385) #10
  %386 = bitcast i8** %pZip64_locator to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %386) #10
  %387 = bitcast [5 x i32]* %zip64_end_of_central_dir_locator_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 20, i8* %387) #10
  %388 = bitcast i32* %sort_central_dir to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %388) #10
  %389 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %389) #10
  %390 = bitcast [1024 x i32]* %buf_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* %390) #10
  %391 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %391) #10
  %392 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %392) #10
  %393 = bitcast i64* %cdir_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %393) #10
  %394 = bitcast i32* %cdir_disk_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %394) #10
  %395 = bitcast i32* %num_this_disk to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %395) #10
  %396 = bitcast i32* %cdir_entries_on_this_disk to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %396) #10
  %397 = bitcast i32* %cdir_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %397) #10
  %398 = load i32, i32* %retval, align 4
  ret i32 %398
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_init_mem(%struct.mz_zip_archive* %pZip, i8* %pMem, i64 %size, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pMem.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pMem, i8** %pMem.addr, align 8, !tbaa !8
  store i64 %size, i64* %size.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load i8*, i8** %pMem.addr, align 8, !tbaa !8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %1, i32 24)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %size.addr, align 8, !tbaa !4
  %cmp = icmp ult i64 %2, 22
  br i1 %cmp, label %if.then1, label %if.end3

if.then1:                                         ; preds = %if.end
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call2 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %3, i32 8)
  store i32 %call2, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call4 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %4, i32 %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end3
  store i32 0, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %if.end3
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 4
  store i32 2, i32* %m_zip_type, align 8, !tbaa !107
  %7 = load i64, i64* %size.addr, align 8, !tbaa !4
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 0
  store i64 %7, i64* %m_archive_size, align 8, !tbaa !110
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_mem_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %11 = bitcast %struct.mz_zip_archive* %10 to i8*
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 14
  store i8* %11, i8** %m_pIO_opaque, align 8, !tbaa !120
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8, !tbaa !124
  %14 = load i8*, i8** %pMem.addr, align 8, !tbaa !8
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 15
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %16, i32 0, i32 8
  store i8* %14, i8** %m_pMem, align 8, !tbaa !125
  %17 = load i64, i64* %size.addr, align 8, !tbaa !4
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState8 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 15
  %19 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState8, align 8, !tbaa !98
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %19, i32 0, i32 9
  store i64 %17, i64* %m_mem_size, align 8, !tbaa !126
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %21 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call9 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %20, i32 %21)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.end7
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call12 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %22, i32 0)
  store i32 0, i32* %retval, align 4
  br label %return

if.end13:                                         ; preds = %if.end7
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end13, %if.then11, %if.then6, %if.then1, %if.then
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mz_zip_mem_read_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive*, align 8
  %s = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8, !tbaa !76
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = bitcast %struct.mz_zip_archive** %pZip to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %2 = bitcast i8* %1 to %struct.mz_zip_archive*
  store %struct.mz_zip_archive* %2, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %3 = bitcast i64* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 0
  %6 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %cmp = icmp uge i64 %4, %6
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end7

cond.false:                                       ; preds = %entry
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_archive_size1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 0
  %8 = load i64, i64* %m_archive_size1, align 8, !tbaa !110
  %9 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %sub = sub i64 %8, %9
  %10 = load i64, i64* %n.addr, align 8, !tbaa !4
  %cmp2 = icmp ult i64 %sub, %10
  br i1 %cmp2, label %cond.true3, label %cond.false6

cond.true3:                                       ; preds = %cond.false
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_archive_size4 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 0
  %12 = load i64, i64* %m_archive_size4, align 8, !tbaa !110
  %13 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %sub5 = sub i64 %12, %13
  br label %cond.end

cond.false6:                                      ; preds = %cond.false
  %14 = load i64, i64* %n.addr, align 8, !tbaa !4
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true3
  %cond = phi i64 [ %sub5, %cond.true3 ], [ %14, %cond.false6 ]
  br label %cond.end7

cond.end7:                                        ; preds = %cond.end, %cond.true
  %cond8 = phi i64 [ 0, %cond.true ], [ %cond, %cond.end ]
  store i64 %cond8, i64* %s, align 8, !tbaa !4
  %15 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 15
  %17 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %17, i32 0, i32 8
  %18 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %19 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %19
  %20 = load i64, i64* %s, align 8, !tbaa !4
  %21 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %22 = call i64 @llvm.objectsize.i64.p0i8(i8* %21, i1 false, i1 true, i1 false)
  %call = call i8* @__memcpy_chk(i8* %15, i8* %add.ptr, i64 %20, i64 %22) #10
  %23 = load i64, i64* %s, align 8, !tbaa !4
  %24 = bitcast i64* %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #10
  %25 = bitcast %struct.mz_zip_archive** %pZip to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #10
  ret i64 %23
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_init_file(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32 %flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %2 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %0, i8* %1, i32 %2, i64 0, i64 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32 %flags, i64 %file_start_ofs, i64 %archive_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_start_ofs.addr = alloca i64, align 8
  %archive_size.addr = alloca i64, align 8
  %file_size = alloca i64, align 8
  %pFile = alloca %struct.__sFILE*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  store i64 %file_start_ofs, i64* %file_start_ofs.addr, align 8, !tbaa !76
  store i64 %archive_size, i64* %archive_size.addr, align 8, !tbaa !76
  %0 = bitcast i64* %file_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast %struct.__sFILE** %pFile to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %3 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %tobool1 = icmp ne i8* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load i64, i64* %archive_size.addr, align 8, !tbaa !76
  %tobool3 = icmp ne i64 %4, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %5 = load i64, i64* %archive_size.addr, align 8, !tbaa !76
  %cmp = icmp ult i64 %5, 22
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %6, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false2
  %7 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %call4 = call %struct.__sFILE* @"\01_fopen"(i8* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0))
  store %struct.__sFILE* %call4, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %8 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %tobool5 = icmp ne %struct.__sFILE* %8, null
  br i1 %tobool5, label %if.end8, label %if.then6

if.then6:                                         ; preds = %if.end
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call7 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %9, i32 17)
  store i32 %call7, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %10 = load i64, i64* %archive_size.addr, align 8, !tbaa !76
  store i64 %10, i64* %file_size, align 8, !tbaa !76
  %11 = load i64, i64* %file_size, align 8, !tbaa !76
  %tobool9 = icmp ne i64 %11, 0
  br i1 %tobool9, label %if.end18, label %if.then10

if.then10:                                        ; preds = %if.end8
  %12 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %call11 = call i32 @fseeko(%struct.__sFILE* %12, i64 0, i32 2)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then13, label %if.end16

if.then13:                                        ; preds = %if.then10
  %13 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %call14 = call i32 @fclose(%struct.__sFILE* %13)
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call15 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %14, i32 22)
  store i32 %call15, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end16:                                         ; preds = %if.then10
  %15 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %call17 = call i64 @ftello(%struct.__sFILE* %15)
  store i64 %call17, i64* %file_size, align 8, !tbaa !76
  br label %if.end18

if.end18:                                         ; preds = %if.end16, %if.end8
  %16 = load i64, i64* %file_size, align 8, !tbaa !76
  %cmp19 = icmp ult i64 %16, 22
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end18
  %17 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %call21 = call i32 @fclose(%struct.__sFILE* %17)
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call22 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %18, i32 8)
  store i32 %call22, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end23:                                         ; preds = %if.end18
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %20 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call24 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %19, i32 %20)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end23
  %21 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %call27 = call i32 @fclose(%struct.__sFILE* %21)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end28:                                         ; preds = %if.end23
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 4
  store i32 4, i32* %m_zip_type, align 8, !tbaa !107
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %25 = bitcast %struct.mz_zip_archive* %24 to i8*
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 14
  store i8* %25, i8** %m_pIO_opaque, align 8, !tbaa !120
  %27 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 15
  %29 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %29, i32 0, i32 6
  store %struct.__sFILE* %27, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %30 = load i64, i64* %file_size, align 8, !tbaa !76
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 0
  store i64 %30, i64* %m_archive_size, align 8, !tbaa !110
  %32 = load i64, i64* %file_start_ofs.addr, align 8, !tbaa !76
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState29 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 15
  %34 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState29, align 8, !tbaa !98
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %34, i32 0, i32 7
  store i64 %32, i64* %m_file_archive_start_ofs, align 8, !tbaa !127
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %36 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call30 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %35, i32 %36)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end34, label %if.then32

if.then32:                                        ; preds = %if.end28
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call33 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %37, i32 0)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end34:                                         ; preds = %if.end28
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end34, %if.then32, %if.then26, %if.then20, %if.then13, %if.then6, %if.then
  %38 = bitcast %struct.__sFILE** %pFile to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %38) #10
  %39 = bitcast i64* %file_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %39) #10
  %40 = load i32, i32* %retval, align 4
  ret i32 %40
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #2

declare i32 @fseeko(%struct.__sFILE*, i64, i32) #2

declare i32 @fclose(%struct.__sFILE*) #2

declare i64 @ftello(%struct.__sFILE*) #2

; Function Attrs: nounwind ssp uwtable
define internal i64 @mz_zip_file_read_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive*, align 8
  %cur_ofs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8, !tbaa !76
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = bitcast %struct.mz_zip_archive** %pZip to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %2 = bitcast i8* %1 to %struct.mz_zip_archive*
  store %struct.mz_zip_archive* %2, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %3 = bitcast i64* %cur_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 15
  %5 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %5, i32 0, i32 6
  %6 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %call = call i64 @ftello(%struct.__sFILE* %6)
  store i64 %call, i64* %cur_ofs, align 8, !tbaa !76
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 15
  %8 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState1, align 8, !tbaa !98
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %8, i32 0, i32 7
  %9 = load i64, i64* %m_file_archive_start_ofs, align 8, !tbaa !127
  %10 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %add = add i64 %10, %9
  store i64 %add, i64* %file_ofs.addr, align 8, !tbaa !76
  %11 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %cmp = icmp slt i64 %11, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %12 = load i64, i64* %cur_ofs, align 8, !tbaa !76
  %13 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %cmp2 = icmp ne i64 %12, %13
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 15
  %15 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8, !tbaa !98
  %m_pFile4 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %15, i32 0, i32 6
  %16 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile4, align 8, !tbaa !104
  %17 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %call5 = call i32 @fseeko(%struct.__sFILE* %16, i64 %17, i32 0)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %18 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %19 = load i64, i64* %n.addr, align 8, !tbaa !4
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState6 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 15
  %21 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState6, align 8, !tbaa !98
  %m_pFile7 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %21, i32 0, i32 6
  %22 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile7, align 8, !tbaa !104
  %call8 = call i64 @fread(i8* %18, i64 1, i64 %19, %struct.__sFILE* %22)
  store i64 %call8, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %23 = bitcast i64* %cur_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #10
  %24 = bitcast %struct.mz_zip_archive** %pZip to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #10
  %25 = load i64, i64* %retval, align 8
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_init_cfile(%struct.mz_zip_archive* %pZip, %struct.__sFILE* %pFile, i64 %archive_size, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFile.addr = alloca %struct.__sFILE*, align 8
  %archive_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %cur_file_ofs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.__sFILE* %pFile, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  store i64 %archive_size, i64* %archive_size.addr, align 8, !tbaa !76
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  %tobool1 = icmp ne %struct.__sFILE* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %3, i32 17)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  %call2 = call i64 @ftello(%struct.__sFILE* %4)
  store i64 %call2, i64* %cur_file_ofs, align 8, !tbaa !76
  %5 = load i64, i64* %archive_size.addr, align 8, !tbaa !76
  %tobool3 = icmp ne i64 %5, 0
  br i1 %tobool3, label %if.end14, label %if.then4

if.then4:                                         ; preds = %if.end
  %6 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  %call5 = call i32 @fseeko(%struct.__sFILE* %6, i64 0, i32 2)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.then4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call8 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %7, i32 22)
  store i32 %call8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.then4
  %8 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  %call10 = call i64 @ftello(%struct.__sFILE* %8)
  %9 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %sub = sub i64 %call10, %9
  store i64 %sub, i64* %archive_size.addr, align 8, !tbaa !76
  %10 = load i64, i64* %archive_size.addr, align 8, !tbaa !76
  %cmp = icmp ult i64 %10, 22
  br i1 %cmp, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end9
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call12 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %11, i32 8)
  store i32 %call12, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %if.end9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %13 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call15 = call i32 @mz_zip_reader_init_internal(%struct.mz_zip_archive* %12, i32 %13)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end18, label %if.then17

if.then17:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end18:                                         ; preds = %if.end14
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 4
  store i32 5, i32* %m_zip_type, align 8, !tbaa !107
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %17 = bitcast %struct.mz_zip_archive* %16 to i8*
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 14
  store i8* %17, i8** %m_pIO_opaque, align 8, !tbaa !120
  %19 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 15
  %21 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %21, i32 0, i32 6
  store %struct.__sFILE* %19, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %22 = load i64, i64* %archive_size.addr, align 8, !tbaa !76
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 0
  store i64 %22, i64* %m_archive_size, align 8, !tbaa !110
  %24 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState19 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 15
  %26 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState19, align 8, !tbaa !98
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %26, i32 0, i32 7
  store i64 %24, i64* %m_file_archive_start_ofs, align 8, !tbaa !127
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %28 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call20 = call i32 @mz_zip_reader_read_central_dir(%struct.mz_zip_archive* %27, i32 %28)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end24, label %if.then22

if.then22:                                        ; preds = %if.end18
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call23 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %29, i32 0)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end24:                                         ; preds = %if.end18
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end24, %if.then22, %if.then17, %if.then11, %if.then7, %if.then
  %30 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #10
  %31 = load i32, i32* %retval, align 4
  ret i32 %31
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_is_file_encrypted(%struct.mz_zip_archive* %pZip, i32 %file_index) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %m_bit_flag = alloca i32, align 4
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  %0 = bitcast i32* %m_bit_flag to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %3 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call = call i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %2, i32 %3)
  store i8* %call, i8** %p, align 8, !tbaa !8
  %4 = load i8*, i8** %p, align 8, !tbaa !8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call1 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %5, i32 24)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 8
  %7 = bitcast i8* %add.ptr to i16*
  %8 = load i16, i16* %7, align 2, !tbaa !88
  %conv = zext i16 %8 to i32
  store i32 %conv, i32* %m_bit_flag, align 4, !tbaa !10
  %9 = load i32, i32* %m_bit_flag, align 4, !tbaa !10
  %and = and i32 %9, 65
  %cmp = icmp ne i32 %and, 0
  %conv2 = zext i1 %cmp to i32
  store i32 %conv2, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %10 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #10
  %11 = bitcast i32* %m_bit_flag to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #10
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %pZip, i32 %file_index) #9 {
entry:
  %retval = alloca i8*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 2
  %5 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp = icmp uge i32 %3, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i8* null, i8** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false2
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 15
  %7 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8, !tbaa !98
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %7, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 0
  %8 = load i8*, i8** %m_p, align 8, !tbaa !121
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState4 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 15
  %10 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4, align 8, !tbaa !98
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %10, i32 0, i32 1
  %m_p5 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 0
  %11 = load i8*, i8** %m_p5, align 8, !tbaa !122
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %idxprom = zext i32 %13 to i64
  %arrayidx = getelementptr inbounds i32, i32* %12, i64 %idxprom
  %14 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %idxprom6 = zext i32 %14 to i64
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 %idxprom6
  store i8* %arrayidx7, i8** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load i8*, i8** %retval, align 8
  ret i8* %15
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_is_file_supported(%struct.mz_zip_archive* %pZip, i32 %file_index) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %bit_flag = alloca i32, align 4
  %method = alloca i32, align 4
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  %0 = bitcast i32* %bit_flag to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %method to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %4 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call = call i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %3, i32 %4)
  store i8* %call, i8** %p, align 8, !tbaa !8
  %5 = load i8*, i8** %p, align 8, !tbaa !8
  %tobool = icmp ne i8* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call1 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %6, i32 24)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 10
  %8 = bitcast i8* %add.ptr to i16*
  %9 = load i16, i16* %8, align 2, !tbaa !88
  %conv = zext i16 %9 to i32
  store i32 %conv, i32* %method, align 4, !tbaa !10
  %10 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 8
  %11 = bitcast i8* %add.ptr2 to i16*
  %12 = load i16, i16* %11, align 2, !tbaa !88
  %conv3 = zext i16 %12 to i32
  store i32 %conv3, i32* %bit_flag, align 4, !tbaa !10
  %13 = load i32, i32* %method, align 4, !tbaa !10
  %cmp = icmp ne i32 %13, 0
  br i1 %cmp, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %if.end
  %14 = load i32, i32* %method, align 4, !tbaa !10
  %cmp5 = icmp ne i32 %14, 8
  br i1 %cmp5, label %if.then7, label %if.end9

if.then7:                                         ; preds = %land.lhs.true
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call8 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %15, i32 4)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %land.lhs.true, %if.end
  %16 = load i32, i32* %bit_flag, align 4, !tbaa !10
  %and = and i32 %16, 65
  %tobool10 = icmp ne i32 %and, 0
  br i1 %tobool10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end9
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call12 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %17, i32 5)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %if.end9
  %18 = load i32, i32* %bit_flag, align 4, !tbaa !10
  %and14 = and i32 %18, 32
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end13
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call17 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %19, i32 6)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end18:                                         ; preds = %if.end13
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end18, %if.then16, %if.then11, %if.then7, %if.then
  %20 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #10
  %21 = bitcast i32* %method to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %21) #10
  %22 = bitcast i32* %bit_flag to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #10
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_is_file_a_directory(%struct.mz_zip_archive* %pZip, i32 %file_index) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %filename_len = alloca i32, align 4
  %attribute_mapping_id = alloca i32, align 4
  %external_attr = alloca i32, align 4
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  %0 = bitcast i32* %filename_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %attribute_mapping_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i32* %external_attr to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call = call i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %4, i32 %5)
  store i8* %call, i8** %p, align 8, !tbaa !8
  %6 = load i8*, i8** %p, align 8, !tbaa !8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call1 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %7, i32 24)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 28
  %9 = bitcast i8* %add.ptr to i16*
  %10 = load i16, i16* %9, align 2, !tbaa !88
  %conv = zext i16 %10 to i32
  store i32 %conv, i32* %filename_len, align 4, !tbaa !10
  %11 = load i32, i32* %filename_len, align 4, !tbaa !10
  %tobool2 = icmp ne i32 %11, 0
  br i1 %tobool2, label %if.then3, label %if.end11

if.then3:                                         ; preds = %if.end
  %12 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr4 = getelementptr inbounds i8, i8* %12, i64 46
  %13 = load i32, i32* %filename_len, align 4, !tbaa !10
  %idx.ext = zext i32 %13 to i64
  %add.ptr5 = getelementptr inbounds i8, i8* %add.ptr4, i64 %idx.ext
  %add.ptr6 = getelementptr inbounds i8, i8* %add.ptr5, i64 -1
  %14 = load i8, i8* %add.ptr6, align 1, !tbaa !12
  %conv7 = zext i8 %14 to i32
  %cmp = icmp eq i32 %conv7, 47
  br i1 %cmp, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.then3
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.then3
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.end
  %15 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr12 = getelementptr inbounds i8, i8* %15, i64 4
  %16 = bitcast i8* %add.ptr12 to i16*
  %17 = load i16, i16* %16, align 2, !tbaa !88
  %conv13 = zext i16 %17 to i32
  %shr = ashr i32 %conv13, 8
  store i32 %shr, i32* %attribute_mapping_id, align 4, !tbaa !10
  %18 = load i32, i32* %attribute_mapping_id, align 4, !tbaa !10
  %19 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr14 = getelementptr inbounds i8, i8* %19, i64 38
  %20 = bitcast i8* %add.ptr14 to i32*
  %21 = load i32, i32* %20, align 4, !tbaa !10
  store i32 %21, i32* %external_attr, align 4, !tbaa !10
  %22 = load i32, i32* %external_attr, align 4, !tbaa !10
  %and = and i32 %22, 16
  %cmp15 = icmp ne i32 %and, 0
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end11
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end18:                                         ; preds = %if.end11
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end18, %if.then17, %if.then9, %if.then
  %23 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #10
  %24 = bitcast i32* %external_attr to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #10
  %25 = bitcast i32* %attribute_mapping_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #10
  %26 = bitcast i32* %filename_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #10
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_locate_file(%struct.mz_zip_archive* %pZip, i8* %pName, i8* %pComment, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pName.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pName, i8** %pName.addr, align 8, !tbaa !8
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pName.addr, align 8, !tbaa !8
  %3 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %4 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %1, i8* %2, i8* %3, i32 %4, i32* %index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %index, align 4, !tbaa !10
  store i32 %5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.else, %if.then
  %6 = bitcast i32* %index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %6) #10
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %pZip, i8* %pName, i8* %pComment, i32 %flags, i32* %pIndex) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pName.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pIndex.addr = alloca i32*, align 8
  %file_index = alloca i32, align 4
  %name_len = alloca i64, align 8
  %comment_len = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %pHeader = alloca i8*, align 8
  %filename_len = alloca i32, align 4
  %pFilename = alloca i8*, align 8
  %file_extra_len = alloca i32, align 4
  %file_comment_len = alloca i32, align 4
  %pFile_comment = alloca i8*, align 8
  %ofs = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pName, i8** %pName.addr, align 8, !tbaa !8
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  store i32* %pIndex, i32** %pIndex.addr, align 8, !tbaa !8
  %0 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i64* %name_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = bitcast i64* %comment_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  %tobool = icmp ne i32* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  store i32 0, i32* %4, align 4, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool1 = icmp ne %struct.mz_zip_archive* %5, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then5

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 15
  %7 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool2 = icmp ne %struct.mz_zip_internal_state_tag* %7, null
  br i1 %tobool2, label %lor.lhs.false3, label %if.then5

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %8 = load i8*, i8** %pName.addr, align 8, !tbaa !8
  %tobool4 = icmp ne i8* %8, null
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %lor.lhs.false3, %lor.lhs.false, %if.end
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %9, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup111

if.end6:                                          ; preds = %lor.lhs.false3
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState7, align 8, !tbaa !98
  %m_init_flags = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 3
  %12 = load i32, i32* %m_init_flags, align 8, !tbaa !117
  %and = and i32 %12, 2048
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %if.end6
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 3
  %14 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp8 = icmp eq i32 %14, 1
  br i1 %cmp8, label %land.lhs.true9, label %if.end19

land.lhs.true9:                                   ; preds = %land.lhs.true
  %15 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and10 = and i32 %15, 768
  %cmp11 = icmp eq i32 %and10, 0
  br i1 %cmp11, label %land.lhs.true12, label %if.end19

land.lhs.true12:                                  ; preds = %land.lhs.true9
  %16 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %tobool13 = icmp ne i8* %16, null
  br i1 %tobool13, label %if.end19, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 15
  %18 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState15, align 8, !tbaa !98
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %18, i32 0, i32 2
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 1
  %19 = load i64, i64* %m_size, align 8, !tbaa !128
  %tobool16 = icmp ne i64 %19, 0
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %land.lhs.true14
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %21 = load i8*, i8** %pName.addr, align 8, !tbaa !8
  %22 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  %call18 = call i32 @mz_zip_locate_file_binary_search(%struct.mz_zip_archive* %20, i8* %21, i32* %22)
  store i32 %call18, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup111

if.end19:                                         ; preds = %land.lhs.true14, %land.lhs.true12, %land.lhs.true9, %land.lhs.true, %if.end6
  %23 = load i8*, i8** %pName.addr, align 8, !tbaa !8
  %call20 = call i64 @strlen(i8* %23)
  store i64 %call20, i64* %name_len, align 8, !tbaa !4
  %24 = load i64, i64* %name_len, align 8, !tbaa !4
  %cmp21 = icmp ugt i64 %24, 65535
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call23 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %25, i32 24)
  store i32 %call23, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup111

if.end24:                                         ; preds = %if.end19
  %26 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %tobool25 = icmp ne i8* %26, null
  br i1 %tobool25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end24
  %27 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %call26 = call i64 @strlen(i8* %27)
  br label %cond.end

cond.false:                                       ; preds = %if.end24
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %call26, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %comment_len, align 8, !tbaa !4
  %28 = load i64, i64* %comment_len, align 8, !tbaa !4
  %cmp27 = icmp ugt i64 %28, 65535
  br i1 %cmp27, label %if.then28, label %if.end30

if.then28:                                        ; preds = %cond.end
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call29 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %29, i32 24)
  store i32 %call29, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup111

if.end30:                                         ; preds = %cond.end
  store i32 0, i32* %file_index, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end30
  %30 = load i32, i32* %file_index, align 4, !tbaa !10
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 2
  %32 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp31 = icmp ult i32 %30, %32
  br i1 %cmp31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %33 = bitcast i8** %pHeader to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %33) #10
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState32 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 15
  %35 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState32, align 8, !tbaa !98
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %35, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 0
  %36 = load i8*, i8** %m_p, align 8, !tbaa !121
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %37, i32 0, i32 15
  %38 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState33, align 8, !tbaa !98
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %38, i32 0, i32 1
  %m_p34 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 0
  %39 = load i8*, i8** %m_p34, align 8, !tbaa !122
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %file_index, align 4, !tbaa !10
  %idxprom = zext i32 %41 to i64
  %arrayidx = getelementptr inbounds i32, i32* %40, i64 %idxprom
  %42 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %idxprom35 = zext i32 %42 to i64
  %arrayidx36 = getelementptr inbounds i8, i8* %36, i64 %idxprom35
  store i8* %arrayidx36, i8** %pHeader, align 8, !tbaa !8
  %43 = bitcast i32* %filename_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #10
  %44 = load i8*, i8** %pHeader, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %44, i64 28
  %45 = bitcast i8* %add.ptr to i16*
  %46 = load i16, i16* %45, align 2, !tbaa !88
  %conv = zext i16 %46 to i32
  store i32 %conv, i32* %filename_len, align 4, !tbaa !10
  %47 = bitcast i8** %pFilename to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %47) #10
  %48 = load i8*, i8** %pHeader, align 8, !tbaa !8
  %add.ptr37 = getelementptr inbounds i8, i8* %48, i64 46
  store i8* %add.ptr37, i8** %pFilename, align 8, !tbaa !8
  %49 = load i32, i32* %filename_len, align 4, !tbaa !10
  %conv38 = zext i32 %49 to i64
  %50 = load i64, i64* %name_len, align 8, !tbaa !4
  %cmp39 = icmp ult i64 %conv38, %50
  br i1 %cmp39, label %if.then41, label %if.end42

if.then41:                                        ; preds = %for.body
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup104

if.end42:                                         ; preds = %for.body
  %51 = load i64, i64* %comment_len, align 8, !tbaa !4
  %tobool43 = icmp ne i64 %51, 0
  br i1 %tobool43, label %if.then44, label %if.end62

if.then44:                                        ; preds = %if.end42
  %52 = bitcast i32* %file_extra_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %52) #10
  %53 = load i8*, i8** %pHeader, align 8, !tbaa !8
  %add.ptr45 = getelementptr inbounds i8, i8* %53, i64 30
  %54 = bitcast i8* %add.ptr45 to i16*
  %55 = load i16, i16* %54, align 2, !tbaa !88
  %conv46 = zext i16 %55 to i32
  store i32 %conv46, i32* %file_extra_len, align 4, !tbaa !10
  %56 = bitcast i32* %file_comment_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %56) #10
  %57 = load i8*, i8** %pHeader, align 8, !tbaa !8
  %add.ptr47 = getelementptr inbounds i8, i8* %57, i64 32
  %58 = bitcast i8* %add.ptr47 to i16*
  %59 = load i16, i16* %58, align 2, !tbaa !88
  %conv48 = zext i16 %59 to i32
  store i32 %conv48, i32* %file_comment_len, align 4, !tbaa !10
  %60 = bitcast i8** %pFile_comment to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %60) #10
  %61 = load i8*, i8** %pFilename, align 8, !tbaa !8
  %62 = load i32, i32* %filename_len, align 4, !tbaa !10
  %idx.ext = zext i32 %62 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %61, i64 %idx.ext
  %63 = load i32, i32* %file_extra_len, align 4, !tbaa !10
  %idx.ext50 = zext i32 %63 to i64
  %add.ptr51 = getelementptr inbounds i8, i8* %add.ptr49, i64 %idx.ext50
  store i8* %add.ptr51, i8** %pFile_comment, align 8, !tbaa !8
  %64 = load i32, i32* %file_comment_len, align 4, !tbaa !10
  %conv52 = zext i32 %64 to i64
  %65 = load i64, i64* %comment_len, align 8, !tbaa !4
  %cmp53 = icmp ne i64 %conv52, %65
  br i1 %cmp53, label %if.then58, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %if.then44
  %66 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %67 = load i8*, i8** %pFile_comment, align 8, !tbaa !8
  %68 = load i32, i32* %file_comment_len, align 4, !tbaa !10
  %69 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call56 = call i32 @mz_zip_string_equal(i8* %66, i8* %67, i32 %68, i32 %69)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.end59, label %if.then58

if.then58:                                        ; preds = %lor.lhs.false55, %if.then44
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end59:                                         ; preds = %lor.lhs.false55
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end59, %if.then58
  %70 = bitcast i8** %pFile_comment to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %70) #10
  %71 = bitcast i32* %file_comment_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %71) #10
  %72 = bitcast i32* %file_extra_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %72) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup104 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end62

if.end62:                                         ; preds = %cleanup.cont, %if.end42
  %73 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and63 = and i32 %73, 512
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %land.lhs.true65, label %if.end92

land.lhs.true65:                                  ; preds = %if.end62
  %74 = load i32, i32* %filename_len, align 4, !tbaa !10
  %tobool66 = icmp ne i32 %74, 0
  br i1 %tobool66, label %if.then67, label %if.end92

if.then67:                                        ; preds = %land.lhs.true65
  %75 = bitcast i32* %ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %75) #10
  %76 = load i32, i32* %filename_len, align 4, !tbaa !10
  %sub = sub i32 %76, 1
  store i32 %sub, i32* %ofs, align 4, !tbaa !10
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then67
  %77 = load i8*, i8** %pFilename, align 8, !tbaa !8
  %78 = load i32, i32* %ofs, align 4, !tbaa !10
  %idxprom68 = sext i32 %78 to i64
  %arrayidx69 = getelementptr inbounds i8, i8* %77, i64 %idxprom68
  %79 = load i8, i8* %arrayidx69, align 1, !tbaa !12
  %conv70 = sext i8 %79 to i32
  %cmp71 = icmp eq i32 %conv70, 47
  br i1 %cmp71, label %if.then85, label %lor.lhs.false73

lor.lhs.false73:                                  ; preds = %do.body
  %80 = load i8*, i8** %pFilename, align 8, !tbaa !8
  %81 = load i32, i32* %ofs, align 4, !tbaa !10
  %idxprom74 = sext i32 %81 to i64
  %arrayidx75 = getelementptr inbounds i8, i8* %80, i64 %idxprom74
  %82 = load i8, i8* %arrayidx75, align 1, !tbaa !12
  %conv76 = sext i8 %82 to i32
  %cmp77 = icmp eq i32 %conv76, 92
  br i1 %cmp77, label %if.then85, label %lor.lhs.false79

lor.lhs.false79:                                  ; preds = %lor.lhs.false73
  %83 = load i8*, i8** %pFilename, align 8, !tbaa !8
  %84 = load i32, i32* %ofs, align 4, !tbaa !10
  %idxprom80 = sext i32 %84 to i64
  %arrayidx81 = getelementptr inbounds i8, i8* %83, i64 %idxprom80
  %85 = load i8, i8* %arrayidx81, align 1, !tbaa !12
  %conv82 = sext i8 %85 to i32
  %cmp83 = icmp eq i32 %conv82, 58
  br i1 %cmp83, label %if.then85, label %if.end86

if.then85:                                        ; preds = %lor.lhs.false79, %lor.lhs.false73, %do.body
  br label %do.end

if.end86:                                         ; preds = %lor.lhs.false79
  br label %do.cond

do.cond:                                          ; preds = %if.end86
  %86 = load i32, i32* %ofs, align 4, !tbaa !10
  %dec = add nsw i32 %86, -1
  store i32 %dec, i32* %ofs, align 4, !tbaa !10
  %cmp87 = icmp sge i32 %dec, 0
  br i1 %cmp87, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.then85
  %87 = load i32, i32* %ofs, align 4, !tbaa !10
  %inc = add nsw i32 %87, 1
  store i32 %inc, i32* %ofs, align 4, !tbaa !10
  %88 = load i32, i32* %ofs, align 4, !tbaa !10
  %89 = load i8*, i8** %pFilename, align 8, !tbaa !8
  %idx.ext89 = sext i32 %88 to i64
  %add.ptr90 = getelementptr inbounds i8, i8* %89, i64 %idx.ext89
  store i8* %add.ptr90, i8** %pFilename, align 8, !tbaa !8
  %90 = load i32, i32* %ofs, align 4, !tbaa !10
  %91 = load i32, i32* %filename_len, align 4, !tbaa !10
  %sub91 = sub i32 %91, %90
  store i32 %sub91, i32* %filename_len, align 4, !tbaa !10
  %92 = bitcast i32* %ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %92) #10
  br label %if.end92

if.end92:                                         ; preds = %do.end, %land.lhs.true65, %if.end62
  %93 = load i32, i32* %filename_len, align 4, !tbaa !10
  %conv93 = zext i32 %93 to i64
  %94 = load i64, i64* %name_len, align 8, !tbaa !4
  %cmp94 = icmp eq i64 %conv93, %94
  br i1 %cmp94, label %land.lhs.true96, label %if.end103

land.lhs.true96:                                  ; preds = %if.end92
  %95 = load i8*, i8** %pName.addr, align 8, !tbaa !8
  %96 = load i8*, i8** %pFilename, align 8, !tbaa !8
  %97 = load i32, i32* %filename_len, align 4, !tbaa !10
  %98 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call97 = call i32 @mz_zip_string_equal(i8* %95, i8* %96, i32 %97, i32 %98)
  %tobool98 = icmp ne i32 %call97, 0
  br i1 %tobool98, label %if.then99, label %if.end103

if.then99:                                        ; preds = %land.lhs.true96
  %99 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  %tobool100 = icmp ne i32* %99, null
  br i1 %tobool100, label %if.then101, label %if.end102

if.then101:                                       ; preds = %if.then99
  %100 = load i32, i32* %file_index, align 4, !tbaa !10
  %101 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  store i32 %100, i32* %101, align 4, !tbaa !10
  br label %if.end102

if.end102:                                        ; preds = %if.then101, %if.then99
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup104

if.end103:                                        ; preds = %land.lhs.true96, %if.end92
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup104

cleanup104:                                       ; preds = %if.end103, %if.end102, %cleanup, %if.then41
  %102 = bitcast i8** %pFilename to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %102) #10
  %103 = bitcast i32* %filename_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %103) #10
  %104 = bitcast i8** %pHeader to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %104) #10
  %cleanup.dest107 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest107, label %cleanup111 [
    i32 0, label %cleanup.cont108
    i32 4, label %for.inc
  ]

cleanup.cont108:                                  ; preds = %cleanup104
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont108, %cleanup104
  %105 = load i32, i32* %file_index, align 4, !tbaa !10
  %inc109 = add i32 %105, 1
  store i32 %inc109, i32* %file_index, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %106 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call110 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %106, i32 28)
  store i32 %call110, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup111

cleanup111:                                       ; preds = %for.end, %cleanup104, %if.then28, %if.then22, %if.then17, %if.then5
  %107 = bitcast i64* %comment_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %107) #10
  %108 = bitcast i64* %name_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %108) #10
  %109 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %109) #10
  %110 = load i32, i32* %retval, align 4
  ret i32 %110
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_locate_file_binary_search(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32* %pIndex) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pIndex.addr = alloca i32*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pCentral_dir_offsets = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir = alloca %struct.mz_zip_array*, align 8
  %pIndices = alloca i32*, align 8
  %size = alloca i32, align 4
  %filename_len = alloca i32, align 4
  %l = alloca i64, align 8
  %h = alloca i64, align 8
  %m = alloca i64, align 8
  %file_index = alloca i32, align 4
  %comp = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i32* %pIndex, i32** %pIndex.addr, align 8, !tbaa !8
  %0 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %2, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %3 = bitcast %struct.mz_zip_array** %pCentral_dir_offsets to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 1
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pCentral_dir_offsets, align 8, !tbaa !8
  %5 = bitcast %struct.mz_zip_array** %pCentral_dir to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %6, i32 0, i32 0
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pCentral_dir, align 8, !tbaa !8
  %7 = bitcast i32** %pIndices to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #10
  %8 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %8, i32 0, i32 2
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 0
  %9 = load i8*, i8** %m_p, align 8, !tbaa !123
  %10 = bitcast i8* %9 to i32*
  %arrayidx = getelementptr inbounds i32, i32* %10, i64 0
  store i32* %arrayidx, i32** %pIndices, align 8, !tbaa !8
  %11 = bitcast i32* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #10
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 2
  %13 = load i32, i32* %m_total_files, align 8, !tbaa !113
  store i32 %13, i32* %size, align 4, !tbaa !10
  %14 = bitcast i32* %filename_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #10
  %15 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %call = call i64 @strlen(i8* %15)
  %conv = trunc i64 %call to i32
  store i32 %conv, i32* %filename_len, align 4, !tbaa !10
  %16 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  %tobool = icmp ne i32* %16, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %17 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  store i32 0, i32* %17, align 4, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %18 = load i32, i32* %size, align 4, !tbaa !10
  %tobool1 = icmp ne i32 %18, 0
  br i1 %tobool1, label %if.then2, label %if.end28

if.then2:                                         ; preds = %if.end
  %19 = bitcast i64* %l to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #10
  store i64 0, i64* %l, align 8, !tbaa !76
  %20 = bitcast i64* %h to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20) #10
  %21 = load i32, i32* %size, align 4, !tbaa !10
  %conv3 = zext i32 %21 to i64
  %sub = sub nsw i64 %conv3, 1
  store i64 %sub, i64* %h, align 8, !tbaa !76
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %if.then2
  %22 = load i64, i64* %l, align 8, !tbaa !76
  %23 = load i64, i64* %h, align 8, !tbaa !76
  %cmp = icmp sle i64 %22, %23
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %24 = bitcast i64* %m to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #10
  %25 = load i64, i64* %l, align 8, !tbaa !76
  %26 = load i64, i64* %h, align 8, !tbaa !76
  %27 = load i64, i64* %l, align 8, !tbaa !76
  %sub5 = sub nsw i64 %26, %27
  %shr = ashr i64 %sub5, 1
  %add = add nsw i64 %25, %shr
  store i64 %add, i64* %m, align 8, !tbaa !76
  %28 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %28) #10
  %29 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %30 = load i64, i64* %m, align 8, !tbaa !76
  %conv6 = trunc i64 %30 to i32
  %idxprom = zext i32 %conv6 to i64
  %arrayidx7 = getelementptr inbounds i32, i32* %29, i64 %idxprom
  %31 = load i32, i32* %arrayidx7, align 4, !tbaa !10
  store i32 %31, i32* %file_index, align 4, !tbaa !10
  %32 = bitcast i32* %comp to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #10
  %33 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8, !tbaa !8
  %34 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8, !tbaa !8
  %35 = load i32, i32* %file_index, align 4, !tbaa !10
  %36 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %37 = load i32, i32* %filename_len, align 4, !tbaa !10
  %call8 = call i32 @mz_zip_filename_compare(%struct.mz_zip_array* %33, %struct.mz_zip_array* %34, i32 %35, i8* %36, i32 %37)
  store i32 %call8, i32* %comp, align 4, !tbaa !10
  %38 = load i32, i32* %comp, align 4, !tbaa !10
  %tobool9 = icmp ne i32 %38, 0
  br i1 %tobool9, label %if.else, label %if.then10

if.then10:                                        ; preds = %while.body
  %39 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  %tobool11 = icmp ne i32* %39, null
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then10
  %40 = load i32, i32* %file_index, align 4, !tbaa !10
  %41 = load i32*, i32** %pIndex.addr, align 8, !tbaa !8
  store i32 %40, i32* %41, align 4, !tbaa !10
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then10
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %while.body
  %42 = load i32, i32* %comp, align 4, !tbaa !10
  %cmp14 = icmp slt i32 %42, 0
  br i1 %cmp14, label %if.then16, label %if.else18

if.then16:                                        ; preds = %if.else
  %43 = load i64, i64* %m, align 8, !tbaa !76
  %add17 = add nsw i64 %43, 1
  store i64 %add17, i64* %l, align 8, !tbaa !76
  br label %if.end20

if.else18:                                        ; preds = %if.else
  %44 = load i64, i64* %m, align 8, !tbaa !76
  %sub19 = sub nsw i64 %44, 1
  store i64 %sub19, i64* %h, align 8, !tbaa !76
  br label %if.end20

if.end20:                                         ; preds = %if.else18, %if.then16
  br label %if.end21

if.end21:                                         ; preds = %if.end20
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end21, %if.end13
  %45 = bitcast i32* %comp to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %45) #10
  %46 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %46) #10
  %47 = bitcast i64* %m to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup24 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup24

cleanup24:                                        ; preds = %while.end, %cleanup
  %48 = bitcast i64* %h to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %48) #10
  %49 = bitcast i64* %l to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #10
  %cleanup.dest26 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest26, label %cleanup30 [
    i32 0, label %cleanup.cont27
  ]

cleanup.cont27:                                   ; preds = %cleanup24
  br label %if.end28

if.end28:                                         ; preds = %cleanup.cont27, %if.end
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call29 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %50, i32 28)
  store i32 %call29, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup30

cleanup30:                                        ; preds = %if.end28, %cleanup24
  %51 = bitcast i32* %filename_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51) #10
  %52 = bitcast i32* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #10
  %53 = bitcast i32** %pIndices to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #10
  %54 = bitcast %struct.mz_zip_array** %pCentral_dir to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54) #10
  %55 = bitcast %struct.mz_zip_array** %pCentral_dir_offsets to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55) #10
  %56 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %56) #10
  %57 = load i32, i32* %retval, align 4
  ret i32 %57
}

declare i64 @strlen(i8*) #2

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i32 @mz_zip_string_equal(i8* %pA, i8* %pB, i32 %len, i32 %flags) #9 {
entry:
  %retval = alloca i32, align 4
  %pA.addr = alloca i8*, align 8
  %pB.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pA, i8** %pA.addr, align 8, !tbaa !8
  store i8* %pB, i8** %pB.addr, align 8, !tbaa !8
  store i32 %len, i32* %len.addr, align 4, !tbaa !10
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %1, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %pA.addr, align 8, !tbaa !8
  %3 = load i8*, i8** %pB.addr, align 8, !tbaa !8
  %4 = load i32, i32* %len.addr, align 4, !tbaa !10
  %conv = zext i32 %4 to i64
  %call = call i32 @memcmp(i8* %2, i8* %3, i64 %conv)
  %cmp = icmp eq i32 0, %call
  %conv1 = zext i1 %cmp to i32
  store i32 %conv1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !tbaa !10
  %6 = load i32, i32* %len.addr, align 4, !tbaa !10
  %cmp2 = icmp ult i32 %5, %6
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i8*, i8** %pA.addr, align 8, !tbaa !8
  %8 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom = zext i32 %8 to i64
  %arrayidx = getelementptr inbounds i8, i8* %7, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !12
  %conv4 = sext i8 %9 to i32
  %cmp5 = icmp sge i32 %conv4, 65
  br i1 %cmp5, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %for.body
  %10 = load i8*, i8** %pA.addr, align 8, !tbaa !8
  %11 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom7 = zext i32 %11 to i64
  %arrayidx8 = getelementptr inbounds i8, i8* %10, i64 %idxprom7
  %12 = load i8, i8* %arrayidx8, align 1, !tbaa !12
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp sle i32 %conv9, 90
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %13 = load i8*, i8** %pA.addr, align 8, !tbaa !8
  %14 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom12 = zext i32 %14 to i64
  %arrayidx13 = getelementptr inbounds i8, i8* %13, i64 %idxprom12
  %15 = load i8, i8* %arrayidx13, align 1, !tbaa !12
  %conv14 = sext i8 %15 to i32
  %sub = sub nsw i32 %conv14, 65
  %add = add nsw i32 %sub, 97
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %for.body
  %16 = load i8*, i8** %pA.addr, align 8, !tbaa !8
  %17 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom15 = zext i32 %17 to i64
  %arrayidx16 = getelementptr inbounds i8, i8* %16, i64 %idxprom15
  %18 = load i8, i8* %arrayidx16, align 1, !tbaa !12
  %conv17 = sext i8 %18 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add, %cond.true ], [ %conv17, %cond.false ]
  %19 = load i8*, i8** %pB.addr, align 8, !tbaa !8
  %20 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom18 = zext i32 %20 to i64
  %arrayidx19 = getelementptr inbounds i8, i8* %19, i64 %idxprom18
  %21 = load i8, i8* %arrayidx19, align 1, !tbaa !12
  %conv20 = sext i8 %21 to i32
  %cmp21 = icmp sge i32 %conv20, 65
  br i1 %cmp21, label %land.lhs.true23, label %cond.false35

land.lhs.true23:                                  ; preds = %cond.end
  %22 = load i8*, i8** %pB.addr, align 8, !tbaa !8
  %23 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom24 = zext i32 %23 to i64
  %arrayidx25 = getelementptr inbounds i8, i8* %22, i64 %idxprom24
  %24 = load i8, i8* %arrayidx25, align 1, !tbaa !12
  %conv26 = sext i8 %24 to i32
  %cmp27 = icmp sle i32 %conv26, 90
  br i1 %cmp27, label %cond.true29, label %cond.false35

cond.true29:                                      ; preds = %land.lhs.true23
  %25 = load i8*, i8** %pB.addr, align 8, !tbaa !8
  %26 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom30 = zext i32 %26 to i64
  %arrayidx31 = getelementptr inbounds i8, i8* %25, i64 %idxprom30
  %27 = load i8, i8* %arrayidx31, align 1, !tbaa !12
  %conv32 = sext i8 %27 to i32
  %sub33 = sub nsw i32 %conv32, 65
  %add34 = add nsw i32 %sub33, 97
  br label %cond.end39

cond.false35:                                     ; preds = %land.lhs.true23, %cond.end
  %28 = load i8*, i8** %pB.addr, align 8, !tbaa !8
  %29 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom36 = zext i32 %29 to i64
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i64 %idxprom36
  %30 = load i8, i8* %arrayidx37, align 1, !tbaa !12
  %conv38 = sext i8 %30 to i32
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false35, %cond.true29
  %cond40 = phi i32 [ %add34, %cond.true29 ], [ %conv38, %cond.false35 ]
  %cmp41 = icmp ne i32 %cond, %cond40
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %cond.end39
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end44:                                         ; preds = %cond.end39
  br label %for.inc

for.inc:                                          ; preds = %if.end44
  %31 = load i32, i32* %i, align 4, !tbaa !10
  %inc = add i32 %31, 1
  store i32 %inc, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then43, %if.then
  %32 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %32) #10
  %33 = load i32, i32* %retval, align 4
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pBuf, i64 %buf_size, i32 %flags, i8* %pUser_read_buf, i64 %user_read_buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pUser_read_buf.addr = alloca i8*, align 8
  %user_read_buf_size.addr = alloca i64, align 8
  %status = alloca i32, align 4
  %needed_size = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %comp_remaining = alloca i64, align 8
  %out_buf_ofs = alloca i64, align 8
  %read_buf_size = alloca i64, align 8
  %read_buf_ofs = alloca i64, align 8
  %read_buf_avail = alloca i64, align 8
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pRead_buf = alloca i8*, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %inflator = alloca %struct.tinfl_decompressor_tag, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %in_buf_size = alloca i64, align 8
  %out_buf_size = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  store i8* %pUser_read_buf, i8** %pUser_read_buf.addr, align 8, !tbaa !8
  store i64 %user_read_buf_size, i64* %user_read_buf_size.addr, align 8, !tbaa !4
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 0, i32* %status, align 4, !tbaa !10
  %1 = bitcast i64* %needed_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast i64* %comp_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = bitcast i64* %out_buf_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #10
  store i64 0, i64* %out_buf_ofs, align 8, !tbaa !76
  %5 = bitcast i64* %read_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = bitcast i64* %read_buf_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  store i64 0, i64* %read_buf_ofs, align 8, !tbaa !76
  %7 = bitcast i64* %read_buf_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #10
  %8 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 1112, i8* %8) #10
  %9 = bitcast i8** %pRead_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #10
  %10 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %10) #10
  %11 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #10
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i64 0, i64 0
  %12 = bitcast i32* %arraydecay to i8*
  store i8* %12, i8** %pLocal_header, align 8, !tbaa !8
  %13 = bitcast %struct.tinfl_decompressor_tag* %inflator to i8*
  call void @llvm.lifetime.start.p0i8(i64 11000, i8* %13) #10
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %14, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 15
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %16, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %17 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %tobool3 = icmp ne i64 %17, 0
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false5

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %18 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %tobool4 = icmp ne i8* %18, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then

lor.lhs.false5:                                   ; preds = %land.lhs.true, %lor.lhs.false2
  %19 = load i64, i64* %user_read_buf_size.addr, align 8, !tbaa !4
  %tobool6 = icmp ne i64 %19, 0
  br i1 %tobool6, label %land.lhs.true7, label %lor.lhs.false9

land.lhs.true7:                                   ; preds = %lor.lhs.false5
  %20 = load i8*, i8** %pUser_read_buf.addr, align 8, !tbaa !8
  %tobool8 = icmp ne i8* %20, null
  br i1 %tobool8, label %lor.lhs.false9, label %if.then

lor.lhs.false9:                                   ; preds = %land.lhs.true7, %lor.lhs.false5
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 11
  %22 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %tobool10 = icmp ne i64 (i8*, i64, i8*, i64)* %22, null
  br i1 %tobool10, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false9, %land.lhs.true7, %land.lhs.true, %lor.lhs.false, %entry
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %23, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end:                                           ; preds = %lor.lhs.false9
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %25 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call11 = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %24, i32 %25, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end14:                                         ; preds = %if.end
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %26 = load i32, i32* %m_is_directory, align 4, !tbaa !129
  %tobool15 = icmp ne i32 %26, 0
  br i1 %tobool15, label %if.then18, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %if.end14
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %27 = load i64, i64* %m_comp_size, align 8, !tbaa !131
  %tobool17 = icmp ne i64 %27, 0
  br i1 %tobool17, label %if.end19, label %if.then18

if.then18:                                        ; preds = %lor.lhs.false16, %if.end14
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end19:                                         ; preds = %lor.lhs.false16
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 4
  %28 = load i16, i16* %m_bit_flag, align 4, !tbaa !132
  %conv = zext i16 %28 to i32
  %and = and i32 %conv, 97
  %tobool20 = icmp ne i32 %and, 0
  br i1 %tobool20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end19
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call22 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %29, i32 5)
  store i32 %call22, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end23:                                         ; preds = %if.end19
  %30 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and24 = and i32 %30, 1024
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %if.end36, label %land.lhs.true26

land.lhs.true26:                                  ; preds = %if.end23
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %31 = load i16, i16* %m_method, align 2, !tbaa !133
  %conv27 = zext i16 %31 to i32
  %cmp = icmp ne i32 %conv27, 0
  br i1 %cmp, label %land.lhs.true29, label %if.end36

land.lhs.true29:                                  ; preds = %land.lhs.true26
  %m_method30 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %32 = load i16, i16* %m_method30, align 2, !tbaa !133
  %conv31 = zext i16 %32 to i32
  %cmp32 = icmp ne i32 %conv31, 8
  br i1 %cmp32, label %if.then34, label %if.end36

if.then34:                                        ; preds = %land.lhs.true29
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call35 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %33, i32 4)
  store i32 %call35, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end36:                                         ; preds = %land.lhs.true29, %land.lhs.true26, %if.end23
  %34 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and37 = and i32 %34, 1024
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end36
  %m_comp_size39 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %35 = load i64, i64* %m_comp_size39, align 8, !tbaa !131
  br label %cond.end

cond.false:                                       ; preds = %if.end36
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %36 = load i64, i64* %m_uncomp_size, align 8, !tbaa !134
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %35, %cond.true ], [ %36, %cond.false ]
  store i64 %cond, i64* %needed_size, align 8, !tbaa !76
  %37 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %38 = load i64, i64* %needed_size, align 8, !tbaa !76
  %cmp40 = icmp ult i64 %37, %38
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %cond.end
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call43 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %39, i32 26)
  store i32 %call43, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end44:                                         ; preds = %cond.end
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 12
  %40 = load i64, i64* %m_local_header_ofs, align 8, !tbaa !135
  store i64 %40, i64* %cur_file_ofs, align 8, !tbaa !76
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead45 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %41, i32 0, i32 11
  %42 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead45, align 8, !tbaa !109
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %43, i32 0, i32 14
  %44 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %45 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %46 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %call46 = call i64 %42(i8* %44, i64 %45, i8* %46, i64 30)
  %cmp47 = icmp ne i64 %call46, 30
  br i1 %cmp47, label %if.then49, label %if.end51

if.then49:                                        ; preds = %if.end44
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call50 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %47, i32 20)
  store i32 %call50, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end51:                                         ; preds = %if.end44
  %48 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %49, align 4, !tbaa !10
  %cmp52 = icmp ne i32 %50, 67324752
  br i1 %cmp52, label %if.then54, label %if.end56

if.then54:                                        ; preds = %if.end51
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call55 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %51, i32 9)
  store i32 %call55, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end56:                                         ; preds = %if.end51
  %52 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 26
  %53 = bitcast i8* %add.ptr to i16*
  %54 = load i16, i16* %53, align 2, !tbaa !88
  %conv57 = zext i16 %54 to i32
  %add = add nsw i32 30, %conv57
  %55 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr58 = getelementptr inbounds i8, i8* %55, i64 28
  %56 = bitcast i8* %add.ptr58 to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !88
  %conv59 = zext i16 %57 to i32
  %add60 = add nsw i32 %add, %conv59
  %conv61 = sext i32 %add60 to i64
  %58 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add62 = add i64 %58, %conv61
  store i64 %add62, i64* %cur_file_ofs, align 8, !tbaa !76
  %59 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %m_comp_size63 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %60 = load i64, i64* %m_comp_size63, align 8, !tbaa !131
  %add64 = add i64 %59, %60
  %61 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %61, i32 0, i32 0
  %62 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %cmp65 = icmp ugt i64 %add64, %62
  br i1 %cmp65, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.end56
  %63 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call68 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %63, i32 9)
  store i32 %call68, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end69:                                         ; preds = %if.end56
  %64 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and70 = and i32 %64, 1024
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.then75, label %lor.lhs.false72

lor.lhs.false72:                                  ; preds = %if.end69
  %m_method73 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %65 = load i16, i16* %m_method73, align 2, !tbaa !133
  %tobool74 = icmp ne i16 %65, 0
  br i1 %tobool74, label %if.end97, label %if.then75

if.then75:                                        ; preds = %lor.lhs.false72, %if.end69
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead76 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %66, i32 0, i32 11
  %67 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead76, align 8, !tbaa !109
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque77 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %68, i32 0, i32 14
  %69 = load i8*, i8** %m_pIO_opaque77, align 8, !tbaa !120
  %70 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %71 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %72 = load i64, i64* %needed_size, align 8, !tbaa !76
  %call78 = call i64 %67(i8* %69, i64 %70, i8* %71, i64 %72)
  %73 = load i64, i64* %needed_size, align 8, !tbaa !76
  %cmp79 = icmp ne i64 %call78, %73
  br i1 %cmp79, label %if.then81, label %if.end83

if.then81:                                        ; preds = %if.then75
  %74 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call82 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %74, i32 20)
  store i32 %call82, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end83:                                         ; preds = %if.then75
  %75 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and84 = and i32 %75, 1024
  %cmp85 = icmp eq i32 %and84, 0
  br i1 %cmp85, label %if.then87, label %if.end96

if.then87:                                        ; preds = %if.end83
  %76 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %m_uncomp_size88 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %77 = load i64, i64* %m_uncomp_size88, align 8, !tbaa !134
  %call89 = call i64 @mz_crc32(i64 0, i8* %76, i64 %77)
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %78 = load i32, i32* %m_crc32, align 8, !tbaa !136
  %conv90 = zext i32 %78 to i64
  %cmp91 = icmp ne i64 %call89, %conv90
  br i1 %cmp91, label %if.then93, label %if.end95

if.then93:                                        ; preds = %if.then87
  %79 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call94 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %79, i32 14)
  store i32 %call94, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end95:                                         ; preds = %if.then87
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.end83
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end97:                                         ; preds = %lor.lhs.false72
  br label %do.body

do.body:                                          ; preds = %if.end97
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %inflator, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !81
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %80 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState98 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %80, i32 0, i32 15
  %81 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState98, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %81, i32 0, i32 8
  %82 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %tobool99 = icmp ne i8* %82, null
  br i1 %tobool99, label %if.then100, label %if.else

if.then100:                                       ; preds = %do.end
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState101 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %83, i32 0, i32 15
  %84 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState101, align 8, !tbaa !98
  %m_pMem102 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %84, i32 0, i32 8
  %85 = load i8*, i8** %m_pMem102, align 8, !tbaa !125
  %86 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add.ptr103 = getelementptr inbounds i8, i8* %85, i64 %86
  store i8* %add.ptr103, i8** %pRead_buf, align 8, !tbaa !8
  %m_comp_size104 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %87 = load i64, i64* %m_comp_size104, align 8, !tbaa !131
  store i64 %87, i64* %read_buf_avail, align 8, !tbaa !76
  store i64 %87, i64* %read_buf_size, align 8, !tbaa !76
  store i64 0, i64* %comp_remaining, align 8, !tbaa !76
  br label %if.end128

if.else:                                          ; preds = %do.end
  %88 = load i8*, i8** %pUser_read_buf.addr, align 8, !tbaa !8
  %tobool105 = icmp ne i8* %88, null
  br i1 %tobool105, label %if.then106, label %if.else111

if.then106:                                       ; preds = %if.else
  %89 = load i64, i64* %user_read_buf_size.addr, align 8, !tbaa !4
  %tobool107 = icmp ne i64 %89, 0
  br i1 %tobool107, label %if.end109, label %if.then108

if.then108:                                       ; preds = %if.then106
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end109:                                        ; preds = %if.then106
  %90 = load i8*, i8** %pUser_read_buf.addr, align 8, !tbaa !8
  store i8* %90, i8** %pRead_buf, align 8, !tbaa !8
  %91 = load i64, i64* %user_read_buf_size.addr, align 8, !tbaa !4
  store i64 %91, i64* %read_buf_size, align 8, !tbaa !76
  store i64 0, i64* %read_buf_avail, align 8, !tbaa !76
  %m_comp_size110 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %92 = load i64, i64* %m_comp_size110, align 8, !tbaa !131
  store i64 %92, i64* %comp_remaining, align 8, !tbaa !76
  br label %if.end127

if.else111:                                       ; preds = %if.else
  %m_comp_size112 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %93 = load i64, i64* %m_comp_size112, align 8, !tbaa !131
  %cmp113 = icmp ult i64 %93, 65536
  br i1 %cmp113, label %cond.true115, label %cond.false117

cond.true115:                                     ; preds = %if.else111
  %m_comp_size116 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %94 = load i64, i64* %m_comp_size116, align 8, !tbaa !131
  br label %cond.end118

cond.false117:                                    ; preds = %if.else111
  br label %cond.end118

cond.end118:                                      ; preds = %cond.false117, %cond.true115
  %cond119 = phi i64 [ %94, %cond.true115 ], [ 65536, %cond.false117 ]
  store i64 %cond119, i64* %read_buf_size, align 8, !tbaa !76
  %95 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %95, i32 0, i32 7
  %96 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %97 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %97, i32 0, i32 10
  %98 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %99 = load i64, i64* %read_buf_size, align 8, !tbaa !76
  %call120 = call i8* %96(i8* %98, i64 1, i64 %99)
  store i8* %call120, i8** %pRead_buf, align 8, !tbaa !8
  %cmp121 = icmp eq i8* null, %call120
  br i1 %cmp121, label %if.then123, label %if.end125

if.then123:                                       ; preds = %cond.end118
  %100 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call124 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %100, i32 16)
  store i32 %call124, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

if.end125:                                        ; preds = %cond.end118
  store i64 0, i64* %read_buf_avail, align 8, !tbaa !76
  %m_comp_size126 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %101 = load i64, i64* %m_comp_size126, align 8, !tbaa !131
  store i64 %101, i64* %comp_remaining, align 8, !tbaa !76
  br label %if.end127

if.end127:                                        ; preds = %if.end125, %if.end109
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.then100
  br label %do.body129

do.body129:                                       ; preds = %do.cond163, %if.end128
  %102 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %102) #10
  %103 = bitcast i64* %out_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %103) #10
  %m_uncomp_size130 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %104 = load i64, i64* %m_uncomp_size130, align 8, !tbaa !134
  %105 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %sub = sub i64 %104, %105
  store i64 %sub, i64* %out_buf_size, align 8, !tbaa !4
  %106 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %tobool131 = icmp ne i64 %106, 0
  br i1 %tobool131, label %if.end153, label %land.lhs.true132

land.lhs.true132:                                 ; preds = %do.body129
  %107 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState133 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %107, i32 0, i32 15
  %108 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState133, align 8, !tbaa !98
  %m_pMem134 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %108, i32 0, i32 8
  %109 = load i8*, i8** %m_pMem134, align 8, !tbaa !125
  %tobool135 = icmp ne i8* %109, null
  br i1 %tobool135, label %if.end153, label %if.then136

if.then136:                                       ; preds = %land.lhs.true132
  %110 = load i64, i64* %read_buf_size, align 8, !tbaa !76
  %111 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %cmp137 = icmp ult i64 %110, %111
  br i1 %cmp137, label %cond.true139, label %cond.false140

cond.true139:                                     ; preds = %if.then136
  %112 = load i64, i64* %read_buf_size, align 8, !tbaa !76
  br label %cond.end141

cond.false140:                                    ; preds = %if.then136
  %113 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  br label %cond.end141

cond.end141:                                      ; preds = %cond.false140, %cond.true139
  %cond142 = phi i64 [ %112, %cond.true139 ], [ %113, %cond.false140 ]
  store i64 %cond142, i64* %read_buf_avail, align 8, !tbaa !76
  %114 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead143 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %114, i32 0, i32 11
  %115 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead143, align 8, !tbaa !109
  %116 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque144 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %116, i32 0, i32 14
  %117 = load i8*, i8** %m_pIO_opaque144, align 8, !tbaa !120
  %118 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %119 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %120 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %call145 = call i64 %115(i8* %117, i64 %118, i8* %119, i64 %120)
  %121 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %cmp146 = icmp ne i64 %call145, %121
  br i1 %cmp146, label %if.then148, label %if.end150

if.then148:                                       ; preds = %cond.end141
  store i32 -1, i32* %status, align 4, !tbaa !10
  %122 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call149 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %122, i32 11)
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end150:                                        ; preds = %cond.end141
  %123 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %124 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add151 = add i64 %124, %123
  store i64 %add151, i64* %cur_file_ofs, align 8, !tbaa !76
  %125 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %126 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %sub152 = sub i64 %126, %125
  store i64 %sub152, i64* %comp_remaining, align 8, !tbaa !76
  store i64 0, i64* %read_buf_ofs, align 8, !tbaa !76
  br label %if.end153

if.end153:                                        ; preds = %if.end150, %land.lhs.true132, %do.body129
  %127 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  store i64 %127, i64* %in_buf_size, align 8, !tbaa !4
  %128 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %129 = load i64, i64* %read_buf_ofs, align 8, !tbaa !76
  %add.ptr154 = getelementptr inbounds i8, i8* %128, i64 %129
  %130 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %131 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %132 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %add.ptr155 = getelementptr inbounds i8, i8* %131, i64 %132
  %133 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %tobool156 = icmp ne i64 %133, 0
  %134 = zext i1 %tobool156 to i64
  %cond157 = select i1 %tobool156, i32 2, i32 0
  %or = or i32 4, %cond157
  %call158 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %inflator, i8* %add.ptr154, i64* %in_buf_size, i8* %130, i8* %add.ptr155, i64* %out_buf_size, i32 %or)
  store i32 %call158, i32* %status, align 4, !tbaa !10
  %135 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %136 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %sub159 = sub i64 %136, %135
  store i64 %sub159, i64* %read_buf_avail, align 8, !tbaa !76
  %137 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %138 = load i64, i64* %read_buf_ofs, align 8, !tbaa !76
  %add160 = add i64 %138, %137
  store i64 %add160, i64* %read_buf_ofs, align 8, !tbaa !76
  %139 = load i64, i64* %out_buf_size, align 8, !tbaa !4
  %140 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %add161 = add i64 %140, %139
  store i64 %add161, i64* %out_buf_ofs, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end153, %if.then148
  %141 = bitcast i64* %out_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %141) #10
  %142 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %142) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 4, label %do.end166
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %do.cond163

do.cond163:                                       ; preds = %cleanup.cont
  %143 = load i32, i32* %status, align 4, !tbaa !10
  %cmp164 = icmp eq i32 %143, 1
  br i1 %cmp164, label %do.body129, label %do.end166

do.end166:                                        ; preds = %do.cond163, %cleanup
  %144 = load i32, i32* %status, align 4, !tbaa !10
  %cmp167 = icmp eq i32 %144, 0
  br i1 %cmp167, label %if.then169, label %if.end186

if.then169:                                       ; preds = %do.end166
  %145 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %m_uncomp_size170 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %146 = load i64, i64* %m_uncomp_size170, align 8, !tbaa !134
  %cmp171 = icmp ne i64 %145, %146
  br i1 %cmp171, label %if.then173, label %if.else175

if.then173:                                       ; preds = %if.then169
  %147 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call174 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %147, i32 13)
  store i32 -1, i32* %status, align 4, !tbaa !10
  br label %if.end185

if.else175:                                       ; preds = %if.then169
  %148 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %m_uncomp_size176 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %149 = load i64, i64* %m_uncomp_size176, align 8, !tbaa !134
  %call177 = call i64 @mz_crc32(i64 0, i8* %148, i64 %149)
  %m_crc32178 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %150 = load i32, i32* %m_crc32178, align 8, !tbaa !136
  %conv179 = zext i32 %150 to i64
  %cmp180 = icmp ne i64 %call177, %conv179
  br i1 %cmp180, label %if.then182, label %if.end184

if.then182:                                       ; preds = %if.else175
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call183 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %151, i32 14)
  store i32 -1, i32* %status, align 4, !tbaa !10
  br label %if.end184

if.end184:                                        ; preds = %if.then182, %if.else175
  br label %if.end185

if.end185:                                        ; preds = %if.end184, %if.then173
  br label %if.end186

if.end186:                                        ; preds = %if.end185, %do.end166
  %152 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState187 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %152, i32 0, i32 15
  %153 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState187, align 8, !tbaa !98
  %m_pMem188 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %153, i32 0, i32 8
  %154 = load i8*, i8** %m_pMem188, align 8, !tbaa !125
  %tobool189 = icmp ne i8* %154, null
  br i1 %tobool189, label %if.end194, label %land.lhs.true190

land.lhs.true190:                                 ; preds = %if.end186
  %155 = load i8*, i8** %pUser_read_buf.addr, align 8, !tbaa !8
  %tobool191 = icmp ne i8* %155, null
  br i1 %tobool191, label %if.end194, label %if.then192

if.then192:                                       ; preds = %land.lhs.true190
  %156 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %156, i32 0, i32 8
  %157 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %158 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque193 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %158, i32 0, i32 10
  %159 = load i8*, i8** %m_pAlloc_opaque193, align 8, !tbaa !108
  %160 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  call void %157(i8* %159, i8* %160)
  br label %if.end194

if.end194:                                        ; preds = %if.then192, %land.lhs.true190, %if.end186
  %161 = load i32, i32* %status, align 4, !tbaa !10
  %cmp195 = icmp eq i32 %161, 0
  %conv196 = zext i1 %cmp195 to i32
  store i32 %conv196, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup197

cleanup197:                                       ; preds = %if.end194, %if.then123, %if.then108, %if.end96, %if.then93, %if.then81, %if.then67, %if.then54, %if.then49, %if.then42, %if.then34, %if.then21, %if.then18, %if.then13, %if.then
  %162 = bitcast %struct.tinfl_decompressor_tag* %inflator to i8*
  call void @llvm.lifetime.end.p0i8(i64 11000, i8* %162) #10
  %163 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %163) #10
  %164 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %164) #10
  %165 = bitcast i8** %pRead_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %165) #10
  %166 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 1112, i8* %166) #10
  %167 = bitcast i64* %read_buf_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %167) #10
  %168 = bitcast i64* %read_buf_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %168) #10
  %169 = bitcast i64* %read_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %169) #10
  %170 = bitcast i64* %out_buf_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %170) #10
  %171 = bitcast i64* %comp_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %171) #10
  %172 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %172) #10
  %173 = bitcast i64* %needed_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %173) #10
  %174 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %174) #10
  %175 = load i32, i32* %retval, align 4
  ret i32 %175

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %pZip, i32 %file_index, %struct.mz_zip_archive_file_stat* %pStat) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pStat.addr = alloca %struct.mz_zip_archive_file_stat*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store %struct.mz_zip_archive_file_stat* %pStat, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %3 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call = call i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %2, i32 %3)
  %4 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %call1 = call i32 @mz_zip_file_stat_internal(%struct.mz_zip_archive* %0, i32 %1, i8* %call, %struct.mz_zip_archive_file_stat* %4, i32* null)
  ret i32 %call1
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_mem_no_alloc(%struct.mz_zip_archive* %pZip, i8* %pFilename, i8* %pBuf, i64 %buf_size, i32 %flags, i8* %pUser_read_buf, i64 %user_read_buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pUser_read_buf.addr = alloca i8*, align 8
  %user_read_buf_size.addr = alloca i64, align 8
  %file_index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  store i8* %pUser_read_buf, i8** %pUser_read_buf.addr, align 8, !tbaa !8
  store i64 %user_read_buf_size, i64* %user_read_buf_size.addr, align 8, !tbaa !4
  %0 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %1, i8* %2, i8* null, i32 %3, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %file_index, align 4, !tbaa !10
  %6 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %7 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %8 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %9 = load i8*, i8** %pUser_read_buf.addr, align 8, !tbaa !8
  %10 = load i64, i64* %user_read_buf_size.addr, align 8, !tbaa !4
  %call1 = call i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive* %4, i32 %5, i8* %6, i64 %7, i32 %8, i8* %9, i64 %10)
  store i32 %call1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %11 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #10
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_mem(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pBuf, i64 %buf_size, i32 %flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %2 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %3 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %4 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_extract_to_mem_no_alloc(%struct.mz_zip_archive* %0, i32 %1, i8* %2, i64 %3, i32 %4, i8* null, i64 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_mem(%struct.mz_zip_archive* %pZip, i8* %pFilename, i8* %pBuf, i64 %buf_size, i32 %flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %3 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %4 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_extract_file_to_mem_no_alloc(%struct.mz_zip_archive* %0, i8* %1, i8* %2, i64 %3, i32 %4, i8* null, i64 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive* %pZip, i32 %file_index, i64* %pSize, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %comp_size = alloca i64, align 8
  %uncomp_size = alloca i64, align 8
  %alloc_size = alloca i64, align 8
  %p = alloca i8*, align 8
  %pBuf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i64* %pSize, i64** %pSize.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i64* %uncomp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = bitcast i64* %alloc_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call = call i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %4, i32 %5)
  store i8* %call, i8** %p, align 8, !tbaa !8
  %6 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  %tobool = icmp ne i64* %7, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  store i64 0, i64* %8, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load i8*, i8** %p, align 8, !tbaa !8
  %tobool1 = icmp ne i8* %9, null
  br i1 %tobool1, label %if.end4, label %if.then2

if.then2:                                         ; preds = %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call3 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %10, i32 24)
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %11 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 20
  %12 = bitcast i8* %add.ptr to i32*
  %13 = load i32, i32* %12, align 4, !tbaa !10
  %conv = zext i32 %13 to i64
  store i64 %conv, i64* %comp_size, align 8, !tbaa !76
  %14 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr5 = getelementptr inbounds i8, i8* %14, i64 24
  %15 = bitcast i8* %add.ptr5 to i32*
  %16 = load i32, i32* %15, align 4, !tbaa !10
  %conv6 = zext i32 %16 to i64
  store i64 %conv6, i64* %uncomp_size, align 8, !tbaa !76
  %17 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %17, 1024
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %18 = load i64, i64* %comp_size, align 8, !tbaa !76
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  %19 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %18, %cond.true ], [ %19, %cond.false ]
  store i64 %cond, i64* %alloc_size, align 8, !tbaa !76
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 7
  %21 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 10
  %23 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %24 = load i64, i64* %alloc_size, align 8, !tbaa !76
  %call8 = call i8* %21(i8* %23, i64 1, i64 %24)
  store i8* %call8, i8** %pBuf, align 8, !tbaa !8
  %cmp = icmp eq i8* null, %call8
  br i1 %cmp, label %if.then10, label %if.end12

if.then10:                                        ; preds = %cond.end
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call11 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %25, i32 16)
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end12:                                         ; preds = %cond.end
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %27 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %28 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %29 = load i64, i64* %alloc_size, align 8, !tbaa !76
  %30 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call13 = call i32 @mz_zip_reader_extract_to_mem(%struct.mz_zip_archive* %26, i32 %27, i8* %28, i64 %29, i32 %30)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end17, label %if.then15

if.then15:                                        ; preds = %if.end12
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 8
  %32 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque16 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 10
  %34 = load i8*, i8** %m_pAlloc_opaque16, align 8, !tbaa !108
  %35 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void %32(i8* %34, i8* %35)
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end17:                                         ; preds = %if.end12
  %36 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  %tobool18 = icmp ne i64* %36, null
  br i1 %tobool18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  %37 = load i64, i64* %alloc_size, align 8, !tbaa !76
  %38 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  store i64 %37, i64* %38, align 8, !tbaa !4
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %if.end17
  %39 = load i8*, i8** %pBuf, align 8, !tbaa !8
  store i8* %39, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end20, %if.then15, %if.then10, %if.then2
  %40 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #10
  %41 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #10
  %42 = bitcast i64* %alloc_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %42) #10
  %43 = bitcast i64* %uncomp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #10
  %44 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #10
  %45 = load i8*, i8** %retval, align 8
  ret i8* %45
}

; Function Attrs: nounwind ssp uwtable
define i8* @mz_zip_reader_extract_file_to_heap(%struct.mz_zip_archive* %pZip, i8* %pFilename, i64* %pSize, i32 %flags) #0 {
entry:
  %retval = alloca i8*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i64* %pSize, i64** %pSize.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %1, i8* %2, i8* null, i32 %3, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end3, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  %tobool1 = icmp ne i64* %4, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  store i64 0, i64* %5, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %7 = load i32, i32* %file_index, align 4, !tbaa !10
  %8 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  %9 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call4 = call i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive* %6, i32 %7, i64* %8, i32 %9)
  store i8* %call4, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end
  %10 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #10
  %11 = load i8*, i8** %retval, align 8
  ret i8* %11
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %pZip, i32 %file_index, i64 (i8*, i64, i8*, i64)* %pCallback, i8* %pOpaque, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pCallback.addr = alloca i64 (i8*, i64, i8*, i64)*, align 8
  %pOpaque.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %file_crc32 = alloca i32, align 4
  %read_buf_size = alloca i64, align 8
  %read_buf_ofs = alloca i64, align 8
  %read_buf_avail = alloca i64, align 8
  %comp_remaining = alloca i64, align 8
  %out_buf_ofs = alloca i64, align 8
  %cur_file_ofs = alloca i64, align 8
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pRead_buf = alloca i8*, align 8
  %pWrite_buf = alloca i8*, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %inflator = alloca %struct.tinfl_decompressor_tag, align 8
  %pWrite_buf_cur = alloca i8*, align 8
  %in_buf_size = alloca i64, align 8
  %out_buf_size = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i64 (i8*, i64, i8*, i64)* %pCallback, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8, !tbaa !8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 0, i32* %status, align 4, !tbaa !10
  %1 = bitcast i32* %file_crc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  store i32 0, i32* %file_crc32, align 4, !tbaa !10
  %2 = bitcast i64* %read_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast i64* %read_buf_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  store i64 0, i64* %read_buf_ofs, align 8, !tbaa !76
  %4 = bitcast i64* %read_buf_avail to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #10
  %5 = bitcast i64* %comp_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = bitcast i64* %out_buf_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  store i64 0, i64* %out_buf_ofs, align 8, !tbaa !76
  %7 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #10
  %8 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 1112, i8* %8) #10
  %9 = bitcast i8** %pRead_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #10
  store i8* null, i8** %pRead_buf, align 8, !tbaa !8
  %10 = bitcast i8** %pWrite_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %10) #10
  store i8* null, i8** %pWrite_buf, align 8, !tbaa !8
  %11 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %11) #10
  %12 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #10
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i64 0, i64 0
  %13 = bitcast i32* %arraydecay to i8*
  store i8* %13, i8** %pLocal_header, align 8, !tbaa !8
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %14, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 15
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %16, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %17 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8, !tbaa !8
  %tobool3 = icmp ne i64 (i8*, i64, i8*, i64)* %17, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 11
  %19 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %tobool5 = icmp ne i64 (i8*, i64, i8*, i64)* %19, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %20, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end:                                           ; preds = %lor.lhs.false4
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %22 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call6 = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %21, i32 %22, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end9:                                          ; preds = %if.end
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %23 = load i32, i32* %m_is_directory, align 4, !tbaa !129
  %tobool10 = icmp ne i32 %23, 0
  br i1 %tobool10, label %if.then13, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %if.end9
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %24 = load i64, i64* %m_comp_size, align 8, !tbaa !131
  %tobool12 = icmp ne i64 %24, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %lor.lhs.false11, %if.end9
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end14:                                         ; preds = %lor.lhs.false11
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 4
  %25 = load i16, i16* %m_bit_flag, align 4, !tbaa !132
  %conv = zext i16 %25 to i32
  %and = and i32 %conv, 97
  %tobool15 = icmp ne i32 %and, 0
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call17 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %26, i32 5)
  store i32 %call17, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end18:                                         ; preds = %if.end14
  %27 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and19 = and i32 %27, 1024
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.end30, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end18
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %28 = load i16, i16* %m_method, align 2, !tbaa !133
  %conv21 = zext i16 %28 to i32
  %cmp = icmp ne i32 %conv21, 0
  br i1 %cmp, label %land.lhs.true23, label %if.end30

land.lhs.true23:                                  ; preds = %land.lhs.true
  %m_method24 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %29 = load i16, i16* %m_method24, align 2, !tbaa !133
  %conv25 = zext i16 %29 to i32
  %cmp26 = icmp ne i32 %conv25, 8
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %land.lhs.true23
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call29 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %30, i32 4)
  store i32 %call29, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end30:                                         ; preds = %land.lhs.true23, %land.lhs.true, %if.end18
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 12
  %31 = load i64, i64* %m_local_header_ofs, align 8, !tbaa !135
  store i64 %31, i64* %cur_file_ofs, align 8, !tbaa !76
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 11
  %33 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead31, align 8, !tbaa !109
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 14
  %35 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %36 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %37 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %call32 = call i64 %33(i8* %35, i64 %36, i8* %37, i64 30)
  %cmp33 = icmp ne i64 %call32, 30
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end30
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call36 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %38, i32 20)
  store i32 %call36, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end37:                                         ; preds = %if.end30
  %39 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 4, !tbaa !10
  %cmp38 = icmp ne i32 %41, 67324752
  br i1 %cmp38, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.end37
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call41 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %42, i32 9)
  store i32 %call41, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end42:                                         ; preds = %if.end37
  %43 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %43, i64 26
  %44 = bitcast i8* %add.ptr to i16*
  %45 = load i16, i16* %44, align 2, !tbaa !88
  %conv43 = zext i16 %45 to i32
  %add = add nsw i32 30, %conv43
  %46 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr44 = getelementptr inbounds i8, i8* %46, i64 28
  %47 = bitcast i8* %add.ptr44 to i16*
  %48 = load i16, i16* %47, align 2, !tbaa !88
  %conv45 = zext i16 %48 to i32
  %add46 = add nsw i32 %add, %conv45
  %conv47 = sext i32 %add46 to i64
  %49 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add48 = add i64 %49, %conv47
  store i64 %add48, i64* %cur_file_ofs, align 8, !tbaa !76
  %50 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %m_comp_size49 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %51 = load i64, i64* %m_comp_size49, align 8, !tbaa !131
  %add50 = add i64 %50, %51
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %52, i32 0, i32 0
  %53 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %cmp51 = icmp ugt i64 %add50, %53
  br i1 %cmp51, label %if.then53, label %if.end55

if.then53:                                        ; preds = %if.end42
  %54 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call54 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %54, i32 9)
  store i32 %call54, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end55:                                         ; preds = %if.end42
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState56 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %55, i32 0, i32 15
  %56 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState56, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %56, i32 0, i32 8
  %57 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %tobool57 = icmp ne i8* %57, null
  br i1 %tobool57, label %if.then58, label %if.else

if.then58:                                        ; preds = %if.end55
  %58 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState59 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %58, i32 0, i32 15
  %59 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState59, align 8, !tbaa !98
  %m_pMem60 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %59, i32 0, i32 8
  %60 = load i8*, i8** %m_pMem60, align 8, !tbaa !125
  %61 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add.ptr61 = getelementptr inbounds i8, i8* %60, i64 %61
  store i8* %add.ptr61, i8** %pRead_buf, align 8, !tbaa !8
  %m_comp_size62 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %62 = load i64, i64* %m_comp_size62, align 8, !tbaa !131
  store i64 %62, i64* %read_buf_avail, align 8, !tbaa !76
  store i64 %62, i64* %read_buf_size, align 8, !tbaa !76
  store i64 0, i64* %comp_remaining, align 8, !tbaa !76
  br label %if.end74

if.else:                                          ; preds = %if.end55
  %m_comp_size63 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %63 = load i64, i64* %m_comp_size63, align 8, !tbaa !131
  %cmp64 = icmp ult i64 %63, 65536
  br i1 %cmp64, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %m_comp_size66 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %64 = load i64, i64* %m_comp_size66, align 8, !tbaa !131
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %64, %cond.true ], [ 65536, %cond.false ]
  store i64 %cond, i64* %read_buf_size, align 8, !tbaa !76
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %65, i32 0, i32 7
  %66 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %67 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %67, i32 0, i32 10
  %68 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %69 = load i64, i64* %read_buf_size, align 8, !tbaa !76
  %call67 = call i8* %66(i8* %68, i64 1, i64 %69)
  store i8* %call67, i8** %pRead_buf, align 8, !tbaa !8
  %cmp68 = icmp eq i8* null, %call67
  br i1 %cmp68, label %if.then70, label %if.end72

if.then70:                                        ; preds = %cond.end
  %70 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call71 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %70, i32 16)
  store i32 %call71, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

if.end72:                                         ; preds = %cond.end
  store i64 0, i64* %read_buf_avail, align 8, !tbaa !76
  %m_comp_size73 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %71 = load i64, i64* %m_comp_size73, align 8, !tbaa !131
  store i64 %71, i64* %comp_remaining, align 8, !tbaa !76
  br label %if.end74

if.end74:                                         ; preds = %if.end72, %if.then58
  %72 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and75 = and i32 %72, 1024
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %if.then80, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %if.end74
  %m_method78 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %73 = load i16, i16* %m_method78, align 2, !tbaa !133
  %tobool79 = icmp ne i16 %73, 0
  br i1 %tobool79, label %if.else138, label %if.then80

if.then80:                                        ; preds = %lor.lhs.false77, %if.end74
  %74 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState81 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %74, i32 0, i32 15
  %75 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState81, align 8, !tbaa !98
  %m_pMem82 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %75, i32 0, i32 8
  %76 = load i8*, i8** %m_pMem82, align 8, !tbaa !125
  %tobool83 = icmp ne i8* %76, null
  br i1 %tobool83, label %if.then84, label %if.else106

if.then84:                                        ; preds = %if.then80
  %77 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8, !tbaa !8
  %78 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %79 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %80 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %m_comp_size85 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %81 = load i64, i64* %m_comp_size85, align 8, !tbaa !131
  %call86 = call i64 %77(i8* %78, i64 %79, i8* %80, i64 %81)
  %m_comp_size87 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %82 = load i64, i64* %m_comp_size87, align 8, !tbaa !131
  %cmp88 = icmp ne i64 %call86, %82
  br i1 %cmp88, label %if.then90, label %if.else92

if.then90:                                        ; preds = %if.then84
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call91 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %83, i32 31)
  store i32 -1, i32* %status, align 4, !tbaa !10
  br label %if.end101

if.else92:                                        ; preds = %if.then84
  %84 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and93 = and i32 %84, 1024
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %if.end100, label %if.then95

if.then95:                                        ; preds = %if.else92
  %85 = load i32, i32* %file_crc32, align 4, !tbaa !10
  %conv96 = zext i32 %85 to i64
  %86 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %m_comp_size97 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %87 = load i64, i64* %m_comp_size97, align 8, !tbaa !131
  %call98 = call i64 @mz_crc32(i64 %conv96, i8* %86, i64 %87)
  %conv99 = trunc i64 %call98 to i32
  store i32 %conv99, i32* %file_crc32, align 4, !tbaa !10
  br label %if.end100

if.end100:                                        ; preds = %if.then95, %if.else92
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.then90
  %m_comp_size102 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %88 = load i64, i64* %m_comp_size102, align 8, !tbaa !131
  %89 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add103 = add i64 %89, %88
  store i64 %add103, i64* %cur_file_ofs, align 8, !tbaa !76
  %m_comp_size104 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %90 = load i64, i64* %m_comp_size104, align 8, !tbaa !131
  %91 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %add105 = add i64 %91, %90
  store i64 %add105, i64* %out_buf_ofs, align 8, !tbaa !76
  store i64 0, i64* %comp_remaining, align 8, !tbaa !76
  br label %if.end137

if.else106:                                       ; preds = %if.then80
  br label %while.cond

while.cond:                                       ; preds = %if.end134, %if.else106
  %92 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %tobool107 = icmp ne i64 %92, 0
  br i1 %tobool107, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %93 = load i64, i64* %read_buf_size, align 8, !tbaa !76
  %94 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %cmp108 = icmp ult i64 %93, %94
  br i1 %cmp108, label %cond.true110, label %cond.false111

cond.true110:                                     ; preds = %while.body
  %95 = load i64, i64* %read_buf_size, align 8, !tbaa !76
  br label %cond.end112

cond.false111:                                    ; preds = %while.body
  %96 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  br label %cond.end112

cond.end112:                                      ; preds = %cond.false111, %cond.true110
  %cond113 = phi i64 [ %95, %cond.true110 ], [ %96, %cond.false111 ]
  store i64 %cond113, i64* %read_buf_avail, align 8, !tbaa !76
  %97 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead114 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %97, i32 0, i32 11
  %98 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead114, align 8, !tbaa !109
  %99 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque115 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %99, i32 0, i32 14
  %100 = load i8*, i8** %m_pIO_opaque115, align 8, !tbaa !120
  %101 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %102 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %103 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %call116 = call i64 %98(i8* %100, i64 %101, i8* %102, i64 %103)
  %104 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %cmp117 = icmp ne i64 %call116, %104
  br i1 %cmp117, label %if.then119, label %if.end121

if.then119:                                       ; preds = %cond.end112
  %105 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call120 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %105, i32 20)
  store i32 -1, i32* %status, align 4, !tbaa !10
  br label %while.end

if.end121:                                        ; preds = %cond.end112
  %106 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and122 = and i32 %106, 1024
  %tobool123 = icmp ne i32 %and122, 0
  br i1 %tobool123, label %if.end128, label %if.then124

if.then124:                                       ; preds = %if.end121
  %107 = load i32, i32* %file_crc32, align 4, !tbaa !10
  %conv125 = zext i32 %107 to i64
  %108 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %109 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %call126 = call i64 @mz_crc32(i64 %conv125, i8* %108, i64 %109)
  %conv127 = trunc i64 %call126 to i32
  store i32 %conv127, i32* %file_crc32, align 4, !tbaa !10
  br label %if.end128

if.end128:                                        ; preds = %if.then124, %if.end121
  %110 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8, !tbaa !8
  %111 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %112 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %113 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %114 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %call129 = call i64 %110(i8* %111, i64 %112, i8* %113, i64 %114)
  %115 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %cmp130 = icmp ne i64 %call129, %115
  br i1 %cmp130, label %if.then132, label %if.end134

if.then132:                                       ; preds = %if.end128
  %116 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call133 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %116, i32 31)
  store i32 -1, i32* %status, align 4, !tbaa !10
  br label %while.end

if.end134:                                        ; preds = %if.end128
  %117 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %118 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add135 = add i64 %118, %117
  store i64 %add135, i64* %cur_file_ofs, align 8, !tbaa !76
  %119 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %120 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %add136 = add i64 %120, %119
  store i64 %add136, i64* %out_buf_ofs, align 8, !tbaa !76
  %121 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %122 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %sub = sub i64 %122, %121
  store i64 %sub, i64* %comp_remaining, align 8, !tbaa !76
  br label %while.cond

while.end:                                        ; preds = %if.then132, %if.then119, %while.cond
  br label %if.end137

if.end137:                                        ; preds = %while.end, %if.end101
  br label %if.end208

if.else138:                                       ; preds = %lor.lhs.false77
  %123 = bitcast %struct.tinfl_decompressor_tag* %inflator to i8*
  call void @llvm.lifetime.start.p0i8(i64 11000, i8* %123) #10
  br label %do.body

do.body:                                          ; preds = %if.else138
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %inflator, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !81
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %124 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc139 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %124, i32 0, i32 7
  %125 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc139, align 8, !tbaa !100
  %126 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque140 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %126, i32 0, i32 10
  %127 = load i8*, i8** %m_pAlloc_opaque140, align 8, !tbaa !108
  %call141 = call i8* %125(i8* %127, i64 1, i64 32768)
  store i8* %call141, i8** %pWrite_buf, align 8, !tbaa !8
  %cmp142 = icmp eq i8* null, %call141
  br i1 %cmp142, label %if.then144, label %if.else146

if.then144:                                       ; preds = %do.end
  %128 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call145 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %128, i32 16)
  store i32 -1, i32* %status, align 4, !tbaa !10
  br label %if.end207

if.else146:                                       ; preds = %do.end
  br label %do.body147

do.body147:                                       ; preds = %lor.end, %if.else146
  %129 = bitcast i8** %pWrite_buf_cur to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %129) #10
  %130 = load i8*, i8** %pWrite_buf, align 8, !tbaa !8
  %131 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %and148 = and i64 %131, 32767
  %add.ptr149 = getelementptr inbounds i8, i8* %130, i64 %and148
  store i8* %add.ptr149, i8** %pWrite_buf_cur, align 8, !tbaa !8
  %132 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %132) #10
  %133 = bitcast i64* %out_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %133) #10
  %134 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %and150 = and i64 %134, 32767
  %sub151 = sub i64 32768, %and150
  store i64 %sub151, i64* %out_buf_size, align 8, !tbaa !4
  %135 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %tobool152 = icmp ne i64 %135, 0
  br i1 %tobool152, label %if.end174, label %land.lhs.true153

land.lhs.true153:                                 ; preds = %do.body147
  %136 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState154 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %136, i32 0, i32 15
  %137 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState154, align 8, !tbaa !98
  %m_pMem155 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %137, i32 0, i32 8
  %138 = load i8*, i8** %m_pMem155, align 8, !tbaa !125
  %tobool156 = icmp ne i8* %138, null
  br i1 %tobool156, label %if.end174, label %if.then157

if.then157:                                       ; preds = %land.lhs.true153
  %139 = load i64, i64* %read_buf_size, align 8, !tbaa !76
  %140 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %cmp158 = icmp ult i64 %139, %140
  br i1 %cmp158, label %cond.true160, label %cond.false161

cond.true160:                                     ; preds = %if.then157
  %141 = load i64, i64* %read_buf_size, align 8, !tbaa !76
  br label %cond.end162

cond.false161:                                    ; preds = %if.then157
  %142 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  br label %cond.end162

cond.end162:                                      ; preds = %cond.false161, %cond.true160
  %cond163 = phi i64 [ %141, %cond.true160 ], [ %142, %cond.false161 ]
  store i64 %cond163, i64* %read_buf_avail, align 8, !tbaa !76
  %143 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead164 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %143, i32 0, i32 11
  %144 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead164, align 8, !tbaa !109
  %145 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque165 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %145, i32 0, i32 14
  %146 = load i8*, i8** %m_pIO_opaque165, align 8, !tbaa !120
  %147 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %148 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %149 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %call166 = call i64 %144(i8* %146, i64 %147, i8* %148, i64 %149)
  %150 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %cmp167 = icmp ne i64 %call166, %150
  br i1 %cmp167, label %if.then169, label %if.end171

if.then169:                                       ; preds = %cond.end162
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call170 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %151, i32 20)
  store i32 -1, i32* %status, align 4, !tbaa !10
  store i32 6, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end171:                                        ; preds = %cond.end162
  %152 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %153 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add172 = add i64 %153, %152
  store i64 %add172, i64* %cur_file_ofs, align 8, !tbaa !76
  %154 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %155 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %sub173 = sub i64 %155, %154
  store i64 %sub173, i64* %comp_remaining, align 8, !tbaa !76
  store i64 0, i64* %read_buf_ofs, align 8, !tbaa !76
  br label %if.end174

if.end174:                                        ; preds = %if.end171, %land.lhs.true153, %do.body147
  %156 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  store i64 %156, i64* %in_buf_size, align 8, !tbaa !4
  %157 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %158 = load i64, i64* %read_buf_ofs, align 8, !tbaa !76
  %add.ptr175 = getelementptr inbounds i8, i8* %157, i64 %158
  %159 = load i8*, i8** %pWrite_buf, align 8, !tbaa !8
  %160 = load i8*, i8** %pWrite_buf_cur, align 8, !tbaa !8
  %161 = load i64, i64* %comp_remaining, align 8, !tbaa !76
  %tobool176 = icmp ne i64 %161, 0
  %162 = zext i1 %tobool176 to i64
  %cond177 = select i1 %tobool176, i32 2, i32 0
  %call178 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %inflator, i8* %add.ptr175, i64* %in_buf_size, i8* %159, i8* %160, i64* %out_buf_size, i32 %cond177)
  store i32 %call178, i32* %status, align 4, !tbaa !10
  %163 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %164 = load i64, i64* %read_buf_avail, align 8, !tbaa !76
  %sub179 = sub i64 %164, %163
  store i64 %sub179, i64* %read_buf_avail, align 8, !tbaa !76
  %165 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %166 = load i64, i64* %read_buf_ofs, align 8, !tbaa !76
  %add180 = add i64 %166, %165
  store i64 %add180, i64* %read_buf_ofs, align 8, !tbaa !76
  %167 = load i64, i64* %out_buf_size, align 8, !tbaa !4
  %tobool181 = icmp ne i64 %167, 0
  br i1 %tobool181, label %if.then182, label %if.end198

if.then182:                                       ; preds = %if.end174
  %168 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8, !tbaa !8
  %169 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %170 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %171 = load i8*, i8** %pWrite_buf_cur, align 8, !tbaa !8
  %172 = load i64, i64* %out_buf_size, align 8, !tbaa !4
  %call183 = call i64 %168(i8* %169, i64 %170, i8* %171, i64 %172)
  %173 = load i64, i64* %out_buf_size, align 8, !tbaa !4
  %cmp184 = icmp ne i64 %call183, %173
  br i1 %cmp184, label %if.then186, label %if.end188

if.then186:                                       ; preds = %if.then182
  %174 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call187 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %174, i32 31)
  store i32 -1, i32* %status, align 4, !tbaa !10
  store i32 6, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end188:                                        ; preds = %if.then182
  %175 = load i32, i32* %file_crc32, align 4, !tbaa !10
  %conv189 = zext i32 %175 to i64
  %176 = load i8*, i8** %pWrite_buf_cur, align 8, !tbaa !8
  %177 = load i64, i64* %out_buf_size, align 8, !tbaa !4
  %call190 = call i64 @mz_crc32(i64 %conv189, i8* %176, i64 %177)
  %conv191 = trunc i64 %call190 to i32
  store i32 %conv191, i32* %file_crc32, align 4, !tbaa !10
  %178 = load i64, i64* %out_buf_size, align 8, !tbaa !4
  %179 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %add192 = add i64 %179, %178
  store i64 %add192, i64* %out_buf_ofs, align 8, !tbaa !76
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %180 = load i64, i64* %m_uncomp_size, align 8, !tbaa !134
  %cmp193 = icmp ugt i64 %add192, %180
  br i1 %cmp193, label %if.then195, label %if.end197

if.then195:                                       ; preds = %if.end188
  %181 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call196 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %181, i32 11)
  store i32 -1, i32* %status, align 4, !tbaa !10
  store i32 6, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end197:                                        ; preds = %if.end188
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %if.end174
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end198, %if.then195, %if.then186, %if.then169
  %182 = bitcast i64* %out_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %182) #10
  %183 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %183) #10
  %184 = bitcast i8** %pWrite_buf_cur to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %184) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 6, label %do.end206
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %do.cond201

do.cond201:                                       ; preds = %cleanup.cont
  %185 = load i32, i32* %status, align 4, !tbaa !10
  %cmp202 = icmp eq i32 %185, 1
  br i1 %cmp202, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.cond201
  %186 = load i32, i32* %status, align 4, !tbaa !10
  %cmp204 = icmp eq i32 %186, 2
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.cond201
  %187 = phi i1 [ true, %do.cond201 ], [ %cmp204, %lor.rhs ]
  br i1 %187, label %do.body147, label %do.end206

do.end206:                                        ; preds = %lor.end, %cleanup
  br label %if.end207

if.end207:                                        ; preds = %do.end206, %if.then144
  %188 = bitcast %struct.tinfl_decompressor_tag* %inflator to i8*
  call void @llvm.lifetime.end.p0i8(i64 11000, i8* %188) #10
  br label %if.end208

if.end208:                                        ; preds = %if.end207, %if.end137
  %189 = load i32, i32* %status, align 4, !tbaa !10
  %cmp209 = icmp eq i32 %189, 0
  br i1 %cmp209, label %land.lhs.true211, label %if.end227

land.lhs.true211:                                 ; preds = %if.end208
  %190 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and212 = and i32 %190, 1024
  %tobool213 = icmp ne i32 %and212, 0
  br i1 %tobool213, label %if.end227, label %if.then214

if.then214:                                       ; preds = %land.lhs.true211
  %191 = load i64, i64* %out_buf_ofs, align 8, !tbaa !76
  %m_uncomp_size215 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %192 = load i64, i64* %m_uncomp_size215, align 8, !tbaa !134
  %cmp216 = icmp ne i64 %191, %192
  br i1 %cmp216, label %if.then218, label %if.else220

if.then218:                                       ; preds = %if.then214
  %193 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call219 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %193, i32 13)
  store i32 -1, i32* %status, align 4, !tbaa !10
  br label %if.end226

if.else220:                                       ; preds = %if.then214
  %194 = load i32, i32* %file_crc32, align 4, !tbaa !10
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %195 = load i32, i32* %m_crc32, align 8, !tbaa !136
  %cmp221 = icmp ne i32 %194, %195
  br i1 %cmp221, label %if.then223, label %if.end225

if.then223:                                       ; preds = %if.else220
  %196 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call224 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %196, i32 11)
  store i32 -1, i32* %status, align 4, !tbaa !10
  br label %if.end225

if.end225:                                        ; preds = %if.then223, %if.else220
  br label %if.end226

if.end226:                                        ; preds = %if.end225, %if.then218
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %land.lhs.true211, %if.end208
  %197 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState228 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %197, i32 0, i32 15
  %198 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState228, align 8, !tbaa !98
  %m_pMem229 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %198, i32 0, i32 8
  %199 = load i8*, i8** %m_pMem229, align 8, !tbaa !125
  %tobool230 = icmp ne i8* %199, null
  br i1 %tobool230, label %if.end233, label %if.then231

if.then231:                                       ; preds = %if.end227
  %200 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %200, i32 0, i32 8
  %201 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %202 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque232 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %202, i32 0, i32 10
  %203 = load i8*, i8** %m_pAlloc_opaque232, align 8, !tbaa !108
  %204 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  call void %201(i8* %203, i8* %204)
  br label %if.end233

if.end233:                                        ; preds = %if.then231, %if.end227
  %205 = load i8*, i8** %pWrite_buf, align 8, !tbaa !8
  %tobool234 = icmp ne i8* %205, null
  br i1 %tobool234, label %if.then235, label %if.end238

if.then235:                                       ; preds = %if.end233
  %206 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree236 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %206, i32 0, i32 8
  %207 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree236, align 8, !tbaa !101
  %208 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque237 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %208, i32 0, i32 10
  %209 = load i8*, i8** %m_pAlloc_opaque237, align 8, !tbaa !108
  %210 = load i8*, i8** %pWrite_buf, align 8, !tbaa !8
  call void %207(i8* %209, i8* %210)
  br label %if.end238

if.end238:                                        ; preds = %if.then235, %if.end233
  %211 = load i32, i32* %status, align 4, !tbaa !10
  %cmp239 = icmp eq i32 %211, 0
  %conv240 = zext i1 %cmp239 to i32
  store i32 %conv240, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup241

cleanup241:                                       ; preds = %if.end238, %if.then70, %if.then53, %if.then40, %if.then35, %if.then28, %if.then16, %if.then13, %if.then8, %if.then
  %212 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %212) #10
  %213 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %213) #10
  %214 = bitcast i8** %pWrite_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %214) #10
  %215 = bitcast i8** %pRead_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %215) #10
  %216 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 1112, i8* %216) #10
  %217 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %217) #10
  %218 = bitcast i64* %out_buf_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %218) #10
  %219 = bitcast i64* %comp_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %219) #10
  %220 = bitcast i64* %read_buf_avail to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %220) #10
  %221 = bitcast i64* %read_buf_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %221) #10
  %222 = bitcast i64* %read_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %222) #10
  %223 = bitcast i32* %file_crc32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %223) #10
  %224 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %224) #10
  %225 = load i32, i32* %retval, align 4
  ret i32 %225

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_callback(%struct.mz_zip_archive* %pZip, i8* %pFilename, i64 (i8*, i64, i8*, i64)* %pCallback, i8* %pOpaque, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %pCallback.addr = alloca i64 (i8*, i64, i8*, i64)*, align 8
  %pOpaque.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i64 (i8*, i64, i8*, i64)* %pCallback, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8, !tbaa !8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %1, i8* %2, i8* null, i32 %3, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %file_index, align 4, !tbaa !10
  %6 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %pCallback.addr, align 8, !tbaa !8
  %7 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %8 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call1 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %4, i32 %5, i64 (i8*, i64, i8*, i64)* %6, i8* %7, i32 %8)
  store i32 %call1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %9 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %9) #10
  %10 = load i32, i32* %retval, align 4
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define %struct.mz_zip_reader_extract_iter_state* @mz_zip_reader_extract_iter_new(%struct.mz_zip_archive* %pZip, i32 %file_index, i32 %flags) #0 {
entry:
  %retval = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.mz_zip_reader_extract_iter_state** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %1) #10
  %2 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i64 0, i64 0
  %3 = bitcast i32* %arraydecay to i8*
  store i8* %3, i8** %pLocal_header, align 8, !tbaa !8
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %4, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 15
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %6, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 7
  %8 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 10
  %10 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %call = call i8* %8(i8* %10, i64 1, i64 12208)
  %11 = bitcast i8* %call to %struct.mz_zip_reader_extract_iter_state*
  store %struct.mz_zip_reader_extract_iter_state* %11, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %12 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %tobool2 = icmp ne %struct.mz_zip_reader_extract_iter_state* %12, null
  br i1 %tobool2, label %if.end5, label %if.then3

if.then3:                                         ; preds = %if.end
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call4 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %13, i32 16)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %if.end
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %15 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %16 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %16, i32 0, i32 10
  %call6 = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %14, i32 %15, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end5
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 8
  %18 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque9 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 10
  %20 = load i8*, i8** %m_pAlloc_opaque9, align 8, !tbaa !108
  %21 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %22 = bitcast %struct.mz_zip_reader_extract_iter_state* %21 to i8*
  call void %18(i8* %20, i8* %22)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.end5
  %23 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat11 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %23, i32 0, i32 10
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat11, i32 0, i32 4
  %24 = load i16, i16* %m_bit_flag, align 4, !tbaa !137
  %conv = zext i16 %24 to i32
  %and = and i32 %conv, 97
  %tobool12 = icmp ne i32 %and, 0
  br i1 %tobool12, label %if.then13, label %if.end17

if.then13:                                        ; preds = %if.end10
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call14 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %25, i32 5)
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 8
  %27 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree15, align 8, !tbaa !101
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque16 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 10
  %29 = load i8*, i8** %m_pAlloc_opaque16, align 8, !tbaa !108
  %30 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %31 = bitcast %struct.mz_zip_reader_extract_iter_state* %30 to i8*
  call void %27(i8* %29, i8* %31)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end17:                                         ; preds = %if.end10
  %32 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and18 = and i32 %32, 1024
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.end33, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end17
  %33 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat20 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %33, i32 0, i32 10
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat20, i32 0, i32 5
  %34 = load i16, i16* %m_method, align 2, !tbaa !139
  %conv21 = zext i16 %34 to i32
  %cmp = icmp ne i32 %conv21, 0
  br i1 %cmp, label %land.lhs.true23, label %if.end33

land.lhs.true23:                                  ; preds = %land.lhs.true
  %35 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat24 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %35, i32 0, i32 10
  %m_method25 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat24, i32 0, i32 5
  %36 = load i16, i16* %m_method25, align 2, !tbaa !139
  %conv26 = zext i16 %36 to i32
  %cmp27 = icmp ne i32 %conv26, 8
  br i1 %cmp27, label %if.then29, label %if.end33

if.then29:                                        ; preds = %land.lhs.true23
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call30 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %37, i32 4)
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 8
  %39 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree31, align 8, !tbaa !101
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque32 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 10
  %41 = load i8*, i8** %m_pAlloc_opaque32, align 8, !tbaa !108
  %42 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %43 = bitcast %struct.mz_zip_reader_extract_iter_state* %42 to i8*
  call void %39(i8* %41, i8* %43)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end33:                                         ; preds = %land.lhs.true23, %land.lhs.true, %if.end17
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %45 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %pZip34 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %45, i32 0, i32 0
  store %struct.mz_zip_archive* %44, %struct.mz_zip_archive** %pZip34, align 8, !tbaa !140
  %46 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %47 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %flags35 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %47, i32 0, i32 1
  store i32 %46, i32* %flags35, align 8, !tbaa !141
  %48 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %status = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %48, i32 0, i32 2
  store i32 0, i32* %status, align 4, !tbaa !142
  %49 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_crc32 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %49, i32 0, i32 3
  store i32 0, i32* %file_crc32, align 8, !tbaa !143
  %50 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %read_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %50, i32 0, i32 5
  store i64 0, i64* %read_buf_ofs, align 8, !tbaa !144
  %51 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %out_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %51, i32 0, i32 8
  store i64 0, i64* %out_buf_ofs, align 8, !tbaa !145
  %52 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %pRead_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %52, i32 0, i32 11
  store i8* null, i8** %pRead_buf, align 8, !tbaa !146
  %53 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %pWrite_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %53, i32 0, i32 12
  store i8* null, i8** %pWrite_buf, align 8, !tbaa !147
  %54 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %out_blk_remain = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %54, i32 0, i32 13
  store i64 0, i64* %out_blk_remain, align 8, !tbaa !148
  %55 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat36 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %55, i32 0, i32 10
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat36, i32 0, i32 12
  %56 = load i64, i64* %m_local_header_ofs, align 8, !tbaa !149
  %57 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %cur_file_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %57, i32 0, i32 9
  store i64 %56, i64* %cur_file_ofs, align 8, !tbaa !150
  %58 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %58, i32 0, i32 11
  %59 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %60 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %60, i32 0, i32 14
  %61 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %62 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %cur_file_ofs37 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %62, i32 0, i32 9
  %63 = load i64, i64* %cur_file_ofs37, align 8, !tbaa !150
  %64 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %call38 = call i64 %59(i8* %61, i64 %63, i8* %64, i64 30)
  %cmp39 = icmp ne i64 %call38, 30
  br i1 %cmp39, label %if.then41, label %if.end45

if.then41:                                        ; preds = %if.end33
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call42 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %65, i32 20)
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree43 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %66, i32 0, i32 8
  %67 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree43, align 8, !tbaa !101
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque44 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %68, i32 0, i32 10
  %69 = load i8*, i8** %m_pAlloc_opaque44, align 8, !tbaa !108
  %70 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %71 = bitcast %struct.mz_zip_reader_extract_iter_state* %70 to i8*
  call void %67(i8* %69, i8* %71)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end45:                                         ; preds = %if.end33
  %72 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 4, !tbaa !10
  %cmp46 = icmp ne i32 %74, 67324752
  br i1 %cmp46, label %if.then48, label %if.end52

if.then48:                                        ; preds = %if.end45
  %75 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call49 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %75, i32 9)
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree50 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %76, i32 0, i32 8
  %77 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree50, align 8, !tbaa !101
  %78 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque51 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %78, i32 0, i32 10
  %79 = load i8*, i8** %m_pAlloc_opaque51, align 8, !tbaa !108
  %80 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %81 = bitcast %struct.mz_zip_reader_extract_iter_state* %80 to i8*
  call void %77(i8* %79, i8* %81)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end52:                                         ; preds = %if.end45
  %82 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %82, i64 26
  %83 = bitcast i8* %add.ptr to i16*
  %84 = load i16, i16* %83, align 2, !tbaa !88
  %conv53 = zext i16 %84 to i32
  %add = add nsw i32 30, %conv53
  %85 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr54 = getelementptr inbounds i8, i8* %85, i64 28
  %86 = bitcast i8* %add.ptr54 to i16*
  %87 = load i16, i16* %86, align 2, !tbaa !88
  %conv55 = zext i16 %87 to i32
  %add56 = add nsw i32 %add, %conv55
  %conv57 = sext i32 %add56 to i64
  %88 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %cur_file_ofs58 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %88, i32 0, i32 9
  %89 = load i64, i64* %cur_file_ofs58, align 8, !tbaa !150
  %add59 = add i64 %89, %conv57
  store i64 %add59, i64* %cur_file_ofs58, align 8, !tbaa !150
  %90 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %cur_file_ofs60 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %90, i32 0, i32 9
  %91 = load i64, i64* %cur_file_ofs60, align 8, !tbaa !150
  %92 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat61 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %92, i32 0, i32 10
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat61, i32 0, i32 8
  %93 = load i64, i64* %m_comp_size, align 8, !tbaa !151
  %add62 = add i64 %91, %93
  %94 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %94, i32 0, i32 0
  %95 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %cmp63 = icmp ugt i64 %add62, %95
  br i1 %cmp63, label %if.then65, label %if.end69

if.then65:                                        ; preds = %if.end52
  %96 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call66 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %96, i32 9)
  %97 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree67 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %97, i32 0, i32 8
  %98 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree67, align 8, !tbaa !101
  %99 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque68 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %99, i32 0, i32 10
  %100 = load i8*, i8** %m_pAlloc_opaque68, align 8, !tbaa !108
  %101 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %102 = bitcast %struct.mz_zip_reader_extract_iter_state* %101 to i8*
  call void %98(i8* %100, i8* %102)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end69:                                         ; preds = %if.end52
  %103 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState70 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %103, i32 0, i32 15
  %104 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState70, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %104, i32 0, i32 8
  %105 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %tobool71 = icmp ne i8* %105, null
  br i1 %tobool71, label %if.then72, label %if.else

if.then72:                                        ; preds = %if.end69
  %106 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState73 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %106, i32 0, i32 15
  %107 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState73, align 8, !tbaa !98
  %m_pMem74 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %107, i32 0, i32 8
  %108 = load i8*, i8** %m_pMem74, align 8, !tbaa !125
  %109 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %cur_file_ofs75 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %109, i32 0, i32 9
  %110 = load i64, i64* %cur_file_ofs75, align 8, !tbaa !150
  %add.ptr76 = getelementptr inbounds i8, i8* %108, i64 %110
  %111 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %pRead_buf77 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %111, i32 0, i32 11
  store i8* %add.ptr76, i8** %pRead_buf77, align 8, !tbaa !146
  %112 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat78 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %112, i32 0, i32 10
  %m_comp_size79 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat78, i32 0, i32 8
  %113 = load i64, i64* %m_comp_size79, align 8, !tbaa !151
  %114 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %read_buf_avail = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %114, i32 0, i32 6
  store i64 %113, i64* %read_buf_avail, align 8, !tbaa !152
  %115 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %read_buf_size = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %115, i32 0, i32 4
  store i64 %113, i64* %read_buf_size, align 8, !tbaa !153
  %116 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat80 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %116, i32 0, i32 10
  %m_comp_size81 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat80, i32 0, i32 8
  %117 = load i64, i64* %m_comp_size81, align 8, !tbaa !151
  %118 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %comp_remaining = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %118, i32 0, i32 7
  store i64 %117, i64* %comp_remaining, align 8, !tbaa !154
  br label %if.end115

if.else:                                          ; preds = %if.end69
  %119 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and82 = and i32 %119, 1024
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.else108, label %lor.lhs.false84

lor.lhs.false84:                                  ; preds = %if.else
  %120 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat85 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %120, i32 0, i32 10
  %m_method86 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat85, i32 0, i32 5
  %121 = load i16, i16* %m_method86, align 2, !tbaa !139
  %tobool87 = icmp ne i16 %121, 0
  br i1 %tobool87, label %if.then88, label %if.else108

if.then88:                                        ; preds = %lor.lhs.false84
  %122 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat89 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %122, i32 0, i32 10
  %m_comp_size90 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat89, i32 0, i32 8
  %123 = load i64, i64* %m_comp_size90, align 8, !tbaa !151
  %cmp91 = icmp ult i64 %123, 65536
  br i1 %cmp91, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then88
  %124 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat93 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %124, i32 0, i32 10
  %m_comp_size94 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat93, i32 0, i32 8
  %125 = load i64, i64* %m_comp_size94, align 8, !tbaa !151
  br label %cond.end

cond.false:                                       ; preds = %if.then88
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %125, %cond.true ], [ 65536, %cond.false ]
  %126 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %read_buf_size95 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %126, i32 0, i32 4
  store i64 %cond, i64* %read_buf_size95, align 8, !tbaa !153
  %127 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc96 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %127, i32 0, i32 7
  %128 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc96, align 8, !tbaa !100
  %129 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque97 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %129, i32 0, i32 10
  %130 = load i8*, i8** %m_pAlloc_opaque97, align 8, !tbaa !108
  %131 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %read_buf_size98 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %131, i32 0, i32 4
  %132 = load i64, i64* %read_buf_size98, align 8, !tbaa !153
  %call99 = call i8* %128(i8* %130, i64 1, i64 %132)
  %133 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %pRead_buf100 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %133, i32 0, i32 11
  store i8* %call99, i8** %pRead_buf100, align 8, !tbaa !146
  %cmp101 = icmp eq i8* null, %call99
  br i1 %cmp101, label %if.then103, label %if.end107

if.then103:                                       ; preds = %cond.end
  %134 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call104 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %134, i32 16)
  %135 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree105 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %135, i32 0, i32 8
  %136 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree105, align 8, !tbaa !101
  %137 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque106 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %137, i32 0, i32 10
  %138 = load i8*, i8** %m_pAlloc_opaque106, align 8, !tbaa !108
  %139 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %140 = bitcast %struct.mz_zip_reader_extract_iter_state* %139 to i8*
  call void %136(i8* %138, i8* %140)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end107:                                        ; preds = %cond.end
  br label %if.end110

if.else108:                                       ; preds = %lor.lhs.false84, %if.else
  %141 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %read_buf_size109 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %141, i32 0, i32 4
  store i64 0, i64* %read_buf_size109, align 8, !tbaa !153
  br label %if.end110

if.end110:                                        ; preds = %if.else108, %if.end107
  %142 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %read_buf_avail111 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %142, i32 0, i32 6
  store i64 0, i64* %read_buf_avail111, align 8, !tbaa !152
  %143 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat112 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %143, i32 0, i32 10
  %m_comp_size113 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat112, i32 0, i32 8
  %144 = load i64, i64* %m_comp_size113, align 8, !tbaa !151
  %145 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %comp_remaining114 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %145, i32 0, i32 7
  store i64 %144, i64* %comp_remaining114, align 8, !tbaa !154
  br label %if.end115

if.end115:                                        ; preds = %if.end110, %if.then72
  %146 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and116 = and i32 %146, 1024
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %if.end141, label %lor.lhs.false118

lor.lhs.false118:                                 ; preds = %if.end115
  %147 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %file_stat119 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %147, i32 0, i32 10
  %m_method120 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat119, i32 0, i32 5
  %148 = load i16, i16* %m_method120, align 2, !tbaa !139
  %tobool121 = icmp ne i16 %148, 0
  br i1 %tobool121, label %if.then122, label %if.end141

if.then122:                                       ; preds = %lor.lhs.false118
  br label %do.body

do.body:                                          ; preds = %if.then122
  %149 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %inflator = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %149, i32 0, i32 14
  %m_state = getelementptr inbounds %struct.tinfl_decompressor_tag, %struct.tinfl_decompressor_tag* %inflator, i32 0, i32 0
  store i32 0, i32* %m_state, align 8, !tbaa !155
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %150 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc123 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %150, i32 0, i32 7
  %151 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc123, align 8, !tbaa !100
  %152 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque124 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %152, i32 0, i32 10
  %153 = load i8*, i8** %m_pAlloc_opaque124, align 8, !tbaa !108
  %call125 = call i8* %151(i8* %153, i64 1, i64 32768)
  %154 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %pWrite_buf126 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %154, i32 0, i32 12
  store i8* %call125, i8** %pWrite_buf126, align 8, !tbaa !147
  %cmp127 = icmp eq i8* null, %call125
  br i1 %cmp127, label %if.then129, label %if.end140

if.then129:                                       ; preds = %do.end
  %155 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call130 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %155, i32 16)
  %156 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %pRead_buf131 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %156, i32 0, i32 11
  %157 = load i8*, i8** %pRead_buf131, align 8, !tbaa !146
  %tobool132 = icmp ne i8* %157, null
  br i1 %tobool132, label %if.then133, label %if.end137

if.then133:                                       ; preds = %if.then129
  %158 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree134 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %158, i32 0, i32 8
  %159 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree134, align 8, !tbaa !101
  %160 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque135 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %160, i32 0, i32 10
  %161 = load i8*, i8** %m_pAlloc_opaque135, align 8, !tbaa !108
  %162 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %pRead_buf136 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %162, i32 0, i32 11
  %163 = load i8*, i8** %pRead_buf136, align 8, !tbaa !146
  call void %159(i8* %161, i8* %163)
  br label %if.end137

if.end137:                                        ; preds = %if.then133, %if.then129
  %164 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree138 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %164, i32 0, i32 8
  %165 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree138, align 8, !tbaa !101
  %166 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque139 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %166, i32 0, i32 10
  %167 = load i8*, i8** %m_pAlloc_opaque139, align 8, !tbaa !108
  %168 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  %169 = bitcast %struct.mz_zip_reader_extract_iter_state* %168 to i8*
  call void %165(i8* %167, i8* %169)
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end140:                                        ; preds = %do.end
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %lor.lhs.false118, %if.end115
  %170 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState, align 8, !tbaa !8
  store %struct.mz_zip_reader_extract_iter_state* %170, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end141, %if.end137, %if.then103, %if.then65, %if.then48, %if.then41, %if.then29, %if.then13, %if.then8, %if.then3, %if.then
  %171 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %171) #10
  %172 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %172) #10
  %173 = bitcast %struct.mz_zip_reader_extract_iter_state** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %173) #10
  %174 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  ret %struct.mz_zip_reader_extract_iter_state* %174
}

; Function Attrs: nounwind ssp uwtable
define %struct.mz_zip_reader_extract_iter_state* @mz_zip_reader_extract_file_iter_new(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32 %flags) #0 {
entry:
  %retval = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %1, i8* %2, i8* null, i32 %3, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.mz_zip_reader_extract_iter_state* null, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %file_index, align 4, !tbaa !10
  %6 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call1 = call %struct.mz_zip_reader_extract_iter_state* @mz_zip_reader_extract_iter_new(%struct.mz_zip_archive* %4, i32 %5, i32 %6)
  store %struct.mz_zip_reader_extract_iter_state* %call1, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %7 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #10
  %8 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %retval, align 8
  ret %struct.mz_zip_reader_extract_iter_state* %8
}

; Function Attrs: nounwind ssp uwtable
define i64 @mz_zip_reader_extract_iter_read(%struct.mz_zip_reader_extract_iter_state* %pState, i8* %pvBuf, i64 %buf_size) #0 {
entry:
  %retval = alloca i64, align 8
  %pState.addr = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %pvBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %copied_to_caller = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %pWrite_buf_cur = alloca i8*, align 8
  %in_buf_size = alloca i64, align 8
  %out_buf_size = alloca i64, align 8
  %to_copy = alloca i64, align 8
  store %struct.mz_zip_reader_extract_iter_state* %pState, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  store i8* %pvBuf, i8** %pvBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  %0 = bitcast i64* %copied_to_caller to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  store i64 0, i64* %copied_to_caller, align 8, !tbaa !4
  %1 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_reader_extract_iter_state* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %2, i32 0, i32 0
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !140
  %tobool1 = icmp ne %struct.mz_zip_archive* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip3 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %4, i32 0, i32 0
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip3, align 8, !tbaa !140
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 15
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool4 = icmp ne %struct.mz_zip_internal_state_tag* %6, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then

lor.lhs.false5:                                   ; preds = %lor.lhs.false2
  %7 = load i8*, i8** %pvBuf.addr, align 8, !tbaa !8
  %tobool6 = icmp ne i8* %7, null
  br i1 %tobool6, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false2, %lor.lhs.false, %entry
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup151

if.end:                                           ; preds = %lor.lhs.false5
  %8 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %flags = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %8, i32 0, i32 1
  %9 = load i32, i32* %flags, align 8, !tbaa !141
  %and = and i32 %9, 1024
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %if.then10, label %lor.lhs.false8

lor.lhs.false8:                                   ; preds = %if.end
  %10 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_stat = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %10, i32 0, i32 10
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %11 = load i16, i16* %m_method, align 2, !tbaa !139
  %tobool9 = icmp ne i16 %11, 0
  br i1 %tobool9, label %if.else38, label %if.then10

if.then10:                                        ; preds = %lor.lhs.false8, %if.end
  %12 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %13 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %comp_remaining = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %13, i32 0, i32 7
  %14 = load i64, i64* %comp_remaining, align 8, !tbaa !154
  %cmp = icmp ult i64 %12, %14
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then10
  %15 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  br label %cond.end

cond.false:                                       ; preds = %if.then10
  %16 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %comp_remaining11 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %16, i32 0, i32 7
  %17 = load i64, i64* %comp_remaining11, align 8, !tbaa !154
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %15, %cond.true ], [ %17, %cond.false ]
  store i64 %cond, i64* %copied_to_caller, align 8, !tbaa !4
  %18 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip12 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %18, i32 0, i32 0
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip12, align 8, !tbaa !140
  %m_pState13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 15
  %20 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState13, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %20, i32 0, i32 8
  %21 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %tobool14 = icmp ne i8* %21, null
  br i1 %tobool14, label %if.then15, label %if.else

if.then15:                                        ; preds = %cond.end
  %22 = load i8*, i8** %pvBuf.addr, align 8, !tbaa !8
  %23 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pRead_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %23, i32 0, i32 11
  %24 = load i8*, i8** %pRead_buf, align 8, !tbaa !146
  %25 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %26 = load i8*, i8** %pvBuf.addr, align 8, !tbaa !8
  %27 = call i64 @llvm.objectsize.i64.p0i8(i8* %26, i1 false, i1 true, i1 false)
  %call = call i8* @__memcpy_chk(i8* %22, i8* %24, i64 %25, i64 %27) #10
  %28 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pRead_buf16 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %28, i32 0, i32 11
  %29 = load i8*, i8** %pRead_buf16, align 8, !tbaa !146
  %30 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %add.ptr = getelementptr inbounds i8, i8* %29, i64 %30
  %31 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pRead_buf17 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %31, i32 0, i32 11
  store i8* %add.ptr, i8** %pRead_buf17, align 8, !tbaa !146
  br label %if.end26

if.else:                                          ; preds = %cond.end
  %32 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip18 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %32, i32 0, i32 0
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip18, align 8, !tbaa !140
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 11
  %34 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %35 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip19 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %35, i32 0, i32 0
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip19, align 8, !tbaa !140
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 14
  %37 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %38 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %cur_file_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %38, i32 0, i32 9
  %39 = load i64, i64* %cur_file_ofs, align 8, !tbaa !150
  %40 = load i8*, i8** %pvBuf.addr, align 8, !tbaa !8
  %41 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %call20 = call i64 %34(i8* %37, i64 %39, i8* %40, i64 %41)
  %42 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %cmp21 = icmp ne i64 %call20, %42
  br i1 %cmp21, label %if.then22, label %if.end25

if.then22:                                        ; preds = %if.else
  %43 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip23 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %43, i32 0, i32 0
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip23, align 8, !tbaa !140
  %call24 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %44, i32 20)
  %45 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %45, i32 0, i32 2
  store i32 -1, i32* %status, align 4, !tbaa !142
  store i64 0, i64* %copied_to_caller, align 8, !tbaa !4
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then15
  %46 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %flags27 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %46, i32 0, i32 1
  %47 = load i32, i32* %flags27, align 8, !tbaa !141
  %and28 = and i32 %47, 1024
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.end34, label %if.then30

if.then30:                                        ; preds = %if.end26
  %48 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_crc32 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %48, i32 0, i32 3
  %49 = load i32, i32* %file_crc32, align 8, !tbaa !143
  %conv = zext i32 %49 to i64
  %50 = load i8*, i8** %pvBuf.addr, align 8, !tbaa !8
  %51 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %call31 = call i64 @mz_crc32(i64 %conv, i8* %50, i64 %51)
  %conv32 = trunc i64 %call31 to i32
  %52 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_crc3233 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %52, i32 0, i32 3
  store i32 %conv32, i32* %file_crc3233, align 8, !tbaa !143
  br label %if.end34

if.end34:                                         ; preds = %if.then30, %if.end26
  %53 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %54 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %cur_file_ofs35 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %54, i32 0, i32 9
  %55 = load i64, i64* %cur_file_ofs35, align 8, !tbaa !150
  %add = add i64 %55, %53
  store i64 %add, i64* %cur_file_ofs35, align 8, !tbaa !150
  %56 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %57 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %57, i32 0, i32 8
  %58 = load i64, i64* %out_buf_ofs, align 8, !tbaa !145
  %add36 = add i64 %58, %56
  store i64 %add36, i64* %out_buf_ofs, align 8, !tbaa !145
  %59 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %60 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %comp_remaining37 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %60, i32 0, i32 7
  %61 = load i64, i64* %comp_remaining37, align 8, !tbaa !154
  %sub = sub i64 %61, %59
  store i64 %sub, i64* %comp_remaining37, align 8, !tbaa !154
  br label %if.end150

if.else38:                                        ; preds = %lor.lhs.false8
  br label %do.body

do.body:                                          ; preds = %land.end, %if.else38
  %62 = bitcast i8** %pWrite_buf_cur to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %62) #10
  %63 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pWrite_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %63, i32 0, i32 12
  %64 = load i8*, i8** %pWrite_buf, align 8, !tbaa !147
  %65 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_buf_ofs39 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %65, i32 0, i32 8
  %66 = load i64, i64* %out_buf_ofs39, align 8, !tbaa !145
  %and40 = and i64 %66, 32767
  %add.ptr41 = getelementptr inbounds i8, i8* %64, i64 %and40
  store i8* %add.ptr41, i8** %pWrite_buf_cur, align 8, !tbaa !8
  %67 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %67) #10
  %68 = bitcast i64* %out_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %68) #10
  %69 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_buf_ofs42 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %69, i32 0, i32 8
  %70 = load i64, i64* %out_buf_ofs42, align 8, !tbaa !145
  %and43 = and i64 %70, 32767
  %sub44 = sub i64 32768, %and43
  store i64 %sub44, i64* %out_buf_size, align 8, !tbaa !4
  %71 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_blk_remain = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %71, i32 0, i32 13
  %72 = load i64, i64* %out_blk_remain, align 8, !tbaa !148
  %tobool45 = icmp ne i64 %72, 0
  br i1 %tobool45, label %if.end101, label %if.then46

if.then46:                                        ; preds = %do.body
  %73 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_avail = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %73, i32 0, i32 6
  %74 = load i64, i64* %read_buf_avail, align 8, !tbaa !152
  %tobool47 = icmp ne i64 %74, 0
  br i1 %tobool47, label %if.end85, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then46
  %75 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip48 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %75, i32 0, i32 0
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip48, align 8, !tbaa !140
  %m_pState49 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %76, i32 0, i32 15
  %77 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState49, align 8, !tbaa !98
  %m_pMem50 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %77, i32 0, i32 8
  %78 = load i8*, i8** %m_pMem50, align 8, !tbaa !125
  %tobool51 = icmp ne i8* %78, null
  br i1 %tobool51, label %if.end85, label %if.then52

if.then52:                                        ; preds = %land.lhs.true
  %79 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_size = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %79, i32 0, i32 4
  %80 = load i64, i64* %read_buf_size, align 8, !tbaa !153
  %81 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %comp_remaining53 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %81, i32 0, i32 7
  %82 = load i64, i64* %comp_remaining53, align 8, !tbaa !154
  %cmp54 = icmp ult i64 %80, %82
  br i1 %cmp54, label %cond.true56, label %cond.false58

cond.true56:                                      ; preds = %if.then52
  %83 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_size57 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %83, i32 0, i32 4
  %84 = load i64, i64* %read_buf_size57, align 8, !tbaa !153
  br label %cond.end60

cond.false58:                                     ; preds = %if.then52
  %85 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %comp_remaining59 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %85, i32 0, i32 7
  %86 = load i64, i64* %comp_remaining59, align 8, !tbaa !154
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false58, %cond.true56
  %cond61 = phi i64 [ %84, %cond.true56 ], [ %86, %cond.false58 ]
  %87 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_avail62 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %87, i32 0, i32 6
  store i64 %cond61, i64* %read_buf_avail62, align 8, !tbaa !152
  %88 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip63 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %88, i32 0, i32 0
  %89 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip63, align 8, !tbaa !140
  %m_pRead64 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %89, i32 0, i32 11
  %90 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead64, align 8, !tbaa !109
  %91 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip65 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %91, i32 0, i32 0
  %92 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip65, align 8, !tbaa !140
  %m_pIO_opaque66 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %92, i32 0, i32 14
  %93 = load i8*, i8** %m_pIO_opaque66, align 8, !tbaa !120
  %94 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %cur_file_ofs67 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %94, i32 0, i32 9
  %95 = load i64, i64* %cur_file_ofs67, align 8, !tbaa !150
  %96 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pRead_buf68 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %96, i32 0, i32 11
  %97 = load i8*, i8** %pRead_buf68, align 8, !tbaa !146
  %98 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_avail69 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %98, i32 0, i32 6
  %99 = load i64, i64* %read_buf_avail69, align 8, !tbaa !152
  %call70 = call i64 %90(i8* %93, i64 %95, i8* %97, i64 %99)
  %100 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_avail71 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %100, i32 0, i32 6
  %101 = load i64, i64* %read_buf_avail71, align 8, !tbaa !152
  %cmp72 = icmp ne i64 %call70, %101
  br i1 %cmp72, label %if.then74, label %if.end78

if.then74:                                        ; preds = %cond.end60
  %102 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip75 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %102, i32 0, i32 0
  %103 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip75, align 8, !tbaa !140
  %call76 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %103, i32 20)
  %104 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status77 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %104, i32 0, i32 2
  store i32 -1, i32* %status77, align 4, !tbaa !142
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup137

if.end78:                                         ; preds = %cond.end60
  %105 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_avail79 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %105, i32 0, i32 6
  %106 = load i64, i64* %read_buf_avail79, align 8, !tbaa !152
  %107 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %cur_file_ofs80 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %107, i32 0, i32 9
  %108 = load i64, i64* %cur_file_ofs80, align 8, !tbaa !150
  %add81 = add i64 %108, %106
  store i64 %add81, i64* %cur_file_ofs80, align 8, !tbaa !150
  %109 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_avail82 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %109, i32 0, i32 6
  %110 = load i64, i64* %read_buf_avail82, align 8, !tbaa !152
  %111 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %comp_remaining83 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %111, i32 0, i32 7
  %112 = load i64, i64* %comp_remaining83, align 8, !tbaa !154
  %sub84 = sub i64 %112, %110
  store i64 %sub84, i64* %comp_remaining83, align 8, !tbaa !154
  %113 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %113, i32 0, i32 5
  store i64 0, i64* %read_buf_ofs, align 8, !tbaa !144
  br label %if.end85

if.end85:                                         ; preds = %if.end78, %land.lhs.true, %if.then46
  %114 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_avail86 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %114, i32 0, i32 6
  %115 = load i64, i64* %read_buf_avail86, align 8, !tbaa !152
  store i64 %115, i64* %in_buf_size, align 8, !tbaa !4
  %116 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %inflator = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %116, i32 0, i32 14
  %117 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pRead_buf87 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %117, i32 0, i32 11
  %118 = load i8*, i8** %pRead_buf87, align 8, !tbaa !146
  %119 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_ofs88 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %119, i32 0, i32 5
  %120 = load i64, i64* %read_buf_ofs88, align 8, !tbaa !144
  %add.ptr89 = getelementptr inbounds i8, i8* %118, i64 %120
  %121 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pWrite_buf90 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %121, i32 0, i32 12
  %122 = load i8*, i8** %pWrite_buf90, align 8, !tbaa !147
  %123 = load i8*, i8** %pWrite_buf_cur, align 8, !tbaa !8
  %124 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %comp_remaining91 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %124, i32 0, i32 7
  %125 = load i64, i64* %comp_remaining91, align 8, !tbaa !154
  %tobool92 = icmp ne i64 %125, 0
  %126 = zext i1 %tobool92 to i64
  %cond93 = select i1 %tobool92, i32 2, i32 0
  %call94 = call i32 @tinfl_decompress(%struct.tinfl_decompressor_tag* %inflator, i8* %add.ptr89, i64* %in_buf_size, i8* %122, i8* %123, i64* %out_buf_size, i32 %cond93)
  %127 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status95 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %127, i32 0, i32 2
  store i32 %call94, i32* %status95, align 4, !tbaa !142
  %128 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %129 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_avail96 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %129, i32 0, i32 6
  %130 = load i64, i64* %read_buf_avail96, align 8, !tbaa !152
  %sub97 = sub i64 %130, %128
  store i64 %sub97, i64* %read_buf_avail96, align 8, !tbaa !152
  %131 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %132 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %read_buf_ofs98 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %132, i32 0, i32 5
  %133 = load i64, i64* %read_buf_ofs98, align 8, !tbaa !144
  %add99 = add i64 %133, %131
  store i64 %add99, i64* %read_buf_ofs98, align 8, !tbaa !144
  %134 = load i64, i64* %out_buf_size, align 8, !tbaa !4
  %135 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_blk_remain100 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %135, i32 0, i32 13
  store i64 %134, i64* %out_blk_remain100, align 8, !tbaa !148
  br label %if.end101

if.end101:                                        ; preds = %if.end85, %do.body
  %136 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_blk_remain102 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %136, i32 0, i32 13
  %137 = load i64, i64* %out_blk_remain102, align 8, !tbaa !148
  %tobool103 = icmp ne i64 %137, 0
  br i1 %tobool103, label %if.then104, label %if.end136

if.then104:                                       ; preds = %if.end101
  %138 = bitcast i64* %to_copy to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %138) #10
  %139 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %140 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %sub105 = sub i64 %139, %140
  %141 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_blk_remain106 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %141, i32 0, i32 13
  %142 = load i64, i64* %out_blk_remain106, align 8, !tbaa !148
  %cmp107 = icmp ult i64 %sub105, %142
  br i1 %cmp107, label %cond.true109, label %cond.false111

cond.true109:                                     ; preds = %if.then104
  %143 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %144 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %sub110 = sub i64 %143, %144
  br label %cond.end113

cond.false111:                                    ; preds = %if.then104
  %145 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_blk_remain112 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %145, i32 0, i32 13
  %146 = load i64, i64* %out_blk_remain112, align 8, !tbaa !148
  br label %cond.end113

cond.end113:                                      ; preds = %cond.false111, %cond.true109
  %cond114 = phi i64 [ %sub110, %cond.true109 ], [ %146, %cond.false111 ]
  store i64 %cond114, i64* %to_copy, align 8, !tbaa !4
  %147 = load i8*, i8** %pvBuf.addr, align 8, !tbaa !8
  %148 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %add.ptr115 = getelementptr inbounds i8, i8* %147, i64 %148
  %149 = load i8*, i8** %pWrite_buf_cur, align 8, !tbaa !8
  %150 = load i64, i64* %to_copy, align 8, !tbaa !4
  %151 = load i8*, i8** %pvBuf.addr, align 8, !tbaa !8
  %152 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %add.ptr116 = getelementptr inbounds i8, i8* %151, i64 %152
  %153 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr116, i1 false, i1 true, i1 false)
  %call117 = call i8* @__memcpy_chk(i8* %add.ptr115, i8* %149, i64 %150, i64 %153) #10
  %154 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_crc32118 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %154, i32 0, i32 3
  %155 = load i32, i32* %file_crc32118, align 8, !tbaa !143
  %conv119 = zext i32 %155 to i64
  %156 = load i8*, i8** %pWrite_buf_cur, align 8, !tbaa !8
  %157 = load i64, i64* %to_copy, align 8, !tbaa !4
  %call120 = call i64 @mz_crc32(i64 %conv119, i8* %156, i64 %157)
  %conv121 = trunc i64 %call120 to i32
  %158 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_crc32122 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %158, i32 0, i32 3
  store i32 %conv121, i32* %file_crc32122, align 8, !tbaa !143
  %159 = load i64, i64* %to_copy, align 8, !tbaa !4
  %160 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_blk_remain123 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %160, i32 0, i32 13
  %161 = load i64, i64* %out_blk_remain123, align 8, !tbaa !148
  %sub124 = sub i64 %161, %159
  store i64 %sub124, i64* %out_blk_remain123, align 8, !tbaa !148
  %162 = load i64, i64* %to_copy, align 8, !tbaa !4
  %163 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_buf_ofs125 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %163, i32 0, i32 8
  %164 = load i64, i64* %out_buf_ofs125, align 8, !tbaa !145
  %add126 = add i64 %164, %162
  store i64 %add126, i64* %out_buf_ofs125, align 8, !tbaa !145
  %165 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_stat127 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %165, i32 0, i32 10
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat127, i32 0, i32 9
  %166 = load i64, i64* %m_uncomp_size, align 8, !tbaa !156
  %cmp128 = icmp ugt i64 %add126, %166
  br i1 %cmp128, label %if.then130, label %if.end134

if.then130:                                       ; preds = %cond.end113
  %167 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip131 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %167, i32 0, i32 0
  %168 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip131, align 8, !tbaa !140
  %call132 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %168, i32 11)
  %169 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status133 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %169, i32 0, i32 2
  store i32 -1, i32* %status133, align 4, !tbaa !142
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end134:                                        ; preds = %cond.end113
  %170 = load i64, i64* %to_copy, align 8, !tbaa !4
  %171 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %add135 = add i64 %171, %170
  store i64 %add135, i64* %copied_to_caller, align 8, !tbaa !4
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end134, %if.then130
  %172 = bitcast i64* %to_copy to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %172) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup137 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end136

if.end136:                                        ; preds = %cleanup.cont, %if.end101
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup137

cleanup137:                                       ; preds = %if.end136, %cleanup, %if.then74
  %173 = bitcast i64* %out_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %173) #10
  %174 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %174) #10
  %175 = bitcast i8** %pWrite_buf_cur to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %175) #10
  %cleanup.dest140 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest140, label %unreachable [
    i32 0, label %cleanup.cont141
    i32 2, label %do.end
  ]

cleanup.cont141:                                  ; preds = %cleanup137
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont141
  %176 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  %177 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %cmp142 = icmp ult i64 %176, %177
  br i1 %cmp142, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %do.cond
  %178 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status144 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %178, i32 0, i32 2
  %179 = load i32, i32* %status144, align 4, !tbaa !142
  %cmp145 = icmp eq i32 %179, 1
  br i1 %cmp145, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %180 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status147 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %180, i32 0, i32 2
  %181 = load i32, i32* %status147, align 4, !tbaa !142
  %cmp148 = icmp eq i32 %181, 2
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %182 = phi i1 [ true, %land.rhs ], [ %cmp148, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %do.cond
  %183 = phi i1 [ false, %do.cond ], [ %182, %lor.end ]
  br i1 %183, label %do.body, label %do.end

do.end:                                           ; preds = %land.end, %cleanup137
  br label %if.end150

if.end150:                                        ; preds = %do.end, %if.end34
  %184 = load i64, i64* %copied_to_caller, align 8, !tbaa !4
  store i64 %184, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup151

cleanup151:                                       ; preds = %if.end150, %if.then
  %185 = bitcast i64* %copied_to_caller to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %185) #10
  %186 = load i64, i64* %retval, align 8
  ret i64 %186

unreachable:                                      ; preds = %cleanup137
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_iter_free(%struct.mz_zip_reader_extract_iter_state* %pState) #0 {
entry:
  %retval = alloca i32, align 4
  %pState.addr = alloca %struct.mz_zip_reader_extract_iter_state*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_reader_extract_iter_state* %pState, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_reader_extract_iter_state* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %2, i32 0, i32 0
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !140
  %tobool1 = icmp ne %struct.mz_zip_archive* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip3 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %4, i32 0, i32 0
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip3, align 8, !tbaa !140
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 15
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool4 = icmp ne %struct.mz_zip_internal_state_tag* %6, null
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false2
  %7 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status5 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %7, i32 0, i32 2
  %8 = load i32, i32* %status5, align 4, !tbaa !142
  %cmp = icmp eq i32 %8, 0
  br i1 %cmp, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %flags = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %9, i32 0, i32 1
  %10 = load i32, i32* %flags, align 8, !tbaa !141
  %and = and i32 %10, 1024
  %tobool6 = icmp ne i32 %and, 0
  br i1 %tobool6, label %if.end20, label %if.then7

if.then7:                                         ; preds = %land.lhs.true
  %11 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %out_buf_ofs = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %11, i32 0, i32 8
  %12 = load i64, i64* %out_buf_ofs, align 8, !tbaa !145
  %13 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_stat = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %13, i32 0, i32 10
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %14 = load i64, i64* %m_uncomp_size, align 8, !tbaa !156
  %cmp8 = icmp ne i64 %12, %14
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then7
  %15 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip10 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %15, i32 0, i32 0
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip10, align 8, !tbaa !140
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %16, i32 13)
  %17 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status11 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %17, i32 0, i32 2
  store i32 -1, i32* %status11, align 4, !tbaa !142
  br label %if.end19

if.else:                                          ; preds = %if.then7
  %18 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_crc32 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %18, i32 0, i32 3
  %19 = load i32, i32* %file_crc32, align 8, !tbaa !143
  %20 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %file_stat12 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %20, i32 0, i32 10
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat12, i32 0, i32 7
  %21 = load i32, i32* %m_crc32, align 8, !tbaa !157
  %cmp13 = icmp ne i32 %19, %21
  br i1 %cmp13, label %if.then14, label %if.end18

if.then14:                                        ; preds = %if.else
  %22 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip15 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %22, i32 0, i32 0
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip15, align 8, !tbaa !140
  %call16 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %23, i32 11)
  %24 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status17 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %24, i32 0, i32 2
  store i32 -1, i32* %status17, align 4, !tbaa !142
  br label %if.end18

if.end18:                                         ; preds = %if.then14, %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then9
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %land.lhs.true, %if.end
  %25 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip21 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %25, i32 0, i32 0
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip21, align 8, !tbaa !140
  %m_pState22 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 15
  %27 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState22, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %27, i32 0, i32 8
  %28 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %tobool23 = icmp ne i8* %28, null
  br i1 %tobool23, label %if.end27, label %if.then24

if.then24:                                        ; preds = %if.end20
  %29 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip25 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %29, i32 0, i32 0
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip25, align 8, !tbaa !140
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 8
  %31 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %32 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip26 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %32, i32 0, i32 0
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip26, align 8, !tbaa !140
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 10
  %34 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %35 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pRead_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %35, i32 0, i32 11
  %36 = load i8*, i8** %pRead_buf, align 8, !tbaa !146
  call void %31(i8* %34, i8* %36)
  br label %if.end27

if.end27:                                         ; preds = %if.then24, %if.end20
  %37 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pWrite_buf = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %37, i32 0, i32 12
  %38 = load i8*, i8** %pWrite_buf, align 8, !tbaa !147
  %tobool28 = icmp ne i8* %38, null
  br i1 %tobool28, label %if.then29, label %if.end35

if.then29:                                        ; preds = %if.end27
  %39 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip30 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %39, i32 0, i32 0
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip30, align 8, !tbaa !140
  %m_pFree31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %40, i32 0, i32 8
  %41 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree31, align 8, !tbaa !101
  %42 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip32 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %42, i32 0, i32 0
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip32, align 8, !tbaa !140
  %m_pAlloc_opaque33 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %43, i32 0, i32 10
  %44 = load i8*, i8** %m_pAlloc_opaque33, align 8, !tbaa !108
  %45 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pWrite_buf34 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %45, i32 0, i32 12
  %46 = load i8*, i8** %pWrite_buf34, align 8, !tbaa !147
  call void %41(i8* %44, i8* %46)
  br label %if.end35

if.end35:                                         ; preds = %if.then29, %if.end27
  %47 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %status36 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %47, i32 0, i32 2
  %48 = load i32, i32* %status36, align 4, !tbaa !142
  store i32 %48, i32* %status, align 4, !tbaa !10
  %49 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip37 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %49, i32 0, i32 0
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip37, align 8, !tbaa !140
  %m_pFree38 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %50, i32 0, i32 8
  %51 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree38, align 8, !tbaa !101
  %52 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %pZip39 = getelementptr inbounds %struct.mz_zip_reader_extract_iter_state, %struct.mz_zip_reader_extract_iter_state* %52, i32 0, i32 0
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip39, align 8, !tbaa !140
  %m_pAlloc_opaque40 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %53, i32 0, i32 10
  %54 = load i8*, i8** %m_pAlloc_opaque40, align 8, !tbaa !108
  %55 = load %struct.mz_zip_reader_extract_iter_state*, %struct.mz_zip_reader_extract_iter_state** %pState.addr, align 8, !tbaa !8
  %56 = bitcast %struct.mz_zip_reader_extract_iter_state* %55 to i8*
  call void %51(i8* %54, i8* %56)
  %57 = load i32, i32* %status, align 4, !tbaa !10
  %cmp41 = icmp eq i32 %57, 0
  %conv = zext i1 %cmp41 to i32
  store i32 %conv, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end35, %if.then
  %58 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %58) #10
  %59 = load i32, i32* %retval, align 4
  ret i32 %59
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_file(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pDst_filename, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pDst_filename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %status = alloca i32, align 4
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pFile = alloca %struct.__sFILE*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i8* %pDst_filename, i8** %pDst_filename.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 1112, i8* %1) #10
  %2 = bitcast %struct.__sFILE** %pFile to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %4 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %3, i32 %4, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %5 = load i32, i32* %m_is_directory, align 4, !tbaa !129
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %m_is_supported = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 16
  %6 = load i32, i32* %m_is_supported, align 4, !tbaa !158
  %tobool2 = icmp ne i32 %6, 0
  br i1 %tobool2, label %if.end5, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call4 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %7, i32 6)
  store i32 %call4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %lor.lhs.false
  %8 = load i8*, i8** %pDst_filename.addr, align 8, !tbaa !8
  %call6 = call %struct.__sFILE* @"\01_fopen"(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0))
  store %struct.__sFILE* %call6, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %9 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %tobool7 = icmp ne %struct.__sFILE* %9, null
  br i1 %tobool7, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end5
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call9 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %10, i32 17)
  store i32 %call9, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.end5
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %12 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %13 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %14 = bitcast %struct.__sFILE* %13 to i8*
  %15 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call11 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %11, i32 %12, i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_callback, i8* %14, i32 %15)
  store i32 %call11, i32* %status, align 4, !tbaa !10
  %16 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %call12 = call i32 @fclose(%struct.__sFILE* %16)
  %cmp = icmp eq i32 %call12, -1
  br i1 %cmp, label %if.then13, label %if.end18

if.then13:                                        ; preds = %if.end10
  %17 = load i32, i32* %status, align 4, !tbaa !10
  %tobool14 = icmp ne i32 %17, 0
  br i1 %tobool14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.then13
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call16 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %18, i32 21)
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %if.then13
  store i32 0, i32* %status, align 4, !tbaa !10
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end10
  %19 = load i32, i32* %status, align 4, !tbaa !10
  %tobool19 = icmp ne i32 %19, 0
  br i1 %tobool19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end18
  %20 = load i8*, i8** %pDst_filename.addr, align 8, !tbaa !8
  %m_time = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 6
  %21 = load i64, i64* %m_time, align 8, !tbaa !159
  %m_time21 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 6
  %22 = load i64, i64* %m_time21, align 8, !tbaa !159
  %call22 = call i32 @mz_zip_set_file_times(i8* %20, i64 %21, i64 %22)
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end18
  %23 = load i32, i32* %status, align 4, !tbaa !10
  store i32 %23, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end23, %if.then8, %if.then3, %if.then
  %24 = bitcast %struct.__sFILE** %pFile to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #10
  %25 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 1112, i8* %25) #10
  %26 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #10
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mz_zip_file_write_callback(i8* %pOpaque, i64 %ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pOpaque.addr = alloca i8*, align 8
  %ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i64 %ofs, i64* %ofs.addr, align 8, !tbaa !76
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = load i64, i64* %ofs.addr, align 8, !tbaa !76
  %1 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %2 = load i64, i64* %n.addr, align 8, !tbaa !4
  %3 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %4 = bitcast i8* %3 to %struct.__sFILE*
  %call = call i64 @"\01_fwrite"(i8* %1, i64 1, i64 %2, %struct.__sFILE* %4)
  ret i64 %call
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_set_file_times(i8* %pFilename, i64 %access_time, i64 %modified_time) #0 {
entry:
  %pFilename.addr = alloca i8*, align 8
  %access_time.addr = alloca i64, align 8
  %modified_time.addr = alloca i64, align 8
  %t = alloca %struct.utimbuf, align 8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i64 %access_time, i64* %access_time.addr, align 8, !tbaa !4
  store i64 %modified_time, i64* %modified_time.addr, align 8, !tbaa !4
  %0 = bitcast %struct.utimbuf* %t to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* %0) #10
  %1 = bitcast %struct.utimbuf* %t to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 16, i1 false)
  %2 = load i64, i64* %access_time.addr, align 8, !tbaa !4
  %actime = getelementptr inbounds %struct.utimbuf, %struct.utimbuf* %t, i32 0, i32 0
  store i64 %2, i64* %actime, align 8, !tbaa !160
  %3 = load i64, i64* %modified_time.addr, align 8, !tbaa !4
  %modtime = getelementptr inbounds %struct.utimbuf, %struct.utimbuf* %t, i32 0, i32 1
  store i64 %3, i64* %modtime, align 8, !tbaa !162
  %4 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %call = call i32 @utime(i8* %4, %struct.utimbuf* %t)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %5 = bitcast %struct.utimbuf* %t to i8*
  call void @llvm.lifetime.end.p0i8(i64 16, i8* %5) #10
  ret i32 %lnot.ext
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_file(%struct.mz_zip_archive* %pZip, i8* %pArchive_filename, i8* %pDst_filename, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_filename.addr = alloca i8*, align 8
  %pDst_filename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pArchive_filename, i8** %pArchive_filename.addr, align 8, !tbaa !8
  store i8* %pDst_filename, i8** %pDst_filename.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pArchive_filename.addr, align 8, !tbaa !8
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %1, i8* %2, i8* null, i32 %3, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %file_index, align 4, !tbaa !10
  %6 = load i8*, i8** %pDst_filename.addr, align 8, !tbaa !8
  %7 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call1 = call i32 @mz_zip_reader_extract_to_file(%struct.mz_zip_archive* %4, i32 %5, i8* %6, i32 %7)
  store i32 %call1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %8 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #10
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_to_cfile(%struct.mz_zip_archive* %pZip, i32 %file_index, %struct.__sFILE* %pFile, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pFile.addr = alloca %struct.__sFILE*, align 8
  %flags.addr = alloca i32, align 4
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store %struct.__sFILE* %pFile, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 1112, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %1, i32 %2, %struct.mz_zip_archive_file_stat* %file_stat)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %3 = load i32, i32* %m_is_directory, align 4, !tbaa !129
  %tobool1 = icmp ne i32 %3, 0
  br i1 %tobool1, label %if.then3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %m_is_supported = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 16
  %4 = load i32, i32* %m_is_supported, align 4, !tbaa !158
  %tobool2 = icmp ne i32 %4, 0
  br i1 %tobool2, label %if.end5, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call4 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %5, i32 6)
  store i32 %call4, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end5:                                          ; preds = %lor.lhs.false
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %7 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %8 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  %9 = bitcast %struct.__sFILE* %8 to i8*
  %10 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call6 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %6, i32 %7, i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_callback, i8* %9, i32 %10)
  store i32 %call6, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %if.then3, %if.then
  %11 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 1112, i8* %11) #10
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_extract_file_to_cfile(%struct.mz_zip_archive* %pZip, i8* %pArchive_filename, %struct.__sFILE* %pFile, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_filename.addr = alloca i8*, align 8
  %pFile.addr = alloca %struct.__sFILE*, align 8
  %flags.addr = alloca i32, align 4
  %file_index = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pArchive_filename, i8** %pArchive_filename.addr, align 8, !tbaa !8
  store %struct.__sFILE* %pFile, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pArchive_filename.addr, align 8, !tbaa !8
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %1, i8* %2, i8* null, i32 %3, i32* %file_index)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load i32, i32* %file_index, align 4, !tbaa !10
  %6 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  %7 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call1 = call i32 @mz_zip_reader_extract_to_cfile(%struct.mz_zip_archive* %4, i32 %5, %struct.__sFILE* %6, i32 %7)
  store i32 %call1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %8 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %8) #10
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_validate_file(%struct.mz_zip_archive* %pZip, i32 %file_index, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %flags.addr = alloca i32, align 4
  %file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pCentral_dir_header = alloca i8*, align 8
  %found_zip64_ext_data_in_cdir = alloca i32, align 4
  %found_zip64_ext_data_in_ldir = alloca i32, align 4
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %local_header_ofs = alloca i64, align 8
  %local_header_filename_len = alloca i32, align 4
  %local_header_extra_len = alloca i32, align 4
  %local_header_crc32 = alloca i32, align 4
  %local_header_comp_size = alloca i64, align 8
  %local_header_uncomp_size = alloca i64, align 8
  %uncomp_crc32 = alloca i32, align 4
  %has_data_descriptor = alloca i32, align 4
  %local_header_bit_flags = alloca i32, align 4
  %file_data_array = alloca %struct.mz_zip_array, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %extra_size_remaining = alloca i32, align 4
  %pExtra_data = alloca i8*, align 8
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  %field_total_size = alloca i32, align 4
  %pSrc_field_data = alloca i8*, align 8
  %descriptor_buf = alloca [32 x i8], align 16
  %has_id = alloca i32, align 4
  %pSrc = alloca i8*, align 8
  %file_crc32 = alloca i32, align 4
  %comp_size = alloca i64, align 8
  %uncomp_size = alloca i64, align 8
  %num_descriptor_uint32s = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 1112, i8* %0) #10
  %1 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = bitcast i8** %pCentral_dir_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast i32* %found_zip64_ext_data_in_cdir to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  store i32 0, i32* %found_zip64_ext_data_in_cdir, align 4, !tbaa !10
  %4 = bitcast i32* %found_zip64_ext_data_in_ldir to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  store i32 0, i32* %found_zip64_ext_data_in_ldir, align 4, !tbaa !10
  %5 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %5) #10
  %6 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i64 0, i64 0
  %7 = bitcast i32* %arraydecay to i8*
  store i8* %7, i8** %pLocal_header, align 8, !tbaa !8
  %8 = bitcast i64* %local_header_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #10
  store i64 0, i64* %local_header_ofs, align 8, !tbaa !76
  %9 = bitcast i32* %local_header_filename_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #10
  %10 = bitcast i32* %local_header_extra_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #10
  %11 = bitcast i32* %local_header_crc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #10
  %12 = bitcast i64* %local_header_comp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #10
  %13 = bitcast i64* %local_header_uncomp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  %14 = bitcast i32* %uncomp_crc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %14) #10
  store i32 0, i32* %uncomp_crc32, align 4, !tbaa !10
  %15 = bitcast i32* %has_data_descriptor to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %15) #10
  %16 = bitcast i32* %local_header_bit_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #10
  %17 = bitcast %struct.mz_zip_array* %file_data_array to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %17) #10
  call void @mz_zip_array_init(%struct.mz_zip_array* %file_data_array, i32 1)
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %18, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 15
  %20 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %20, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 7
  %22 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %22, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 8
  %24 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %tobool5 = icmp ne void (i8*, i8*)* %24, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 11
  %26 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %tobool7 = icmp ne i64 (i8*, i64, i8*, i64)* %26, null
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %27, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end:                                           ; preds = %lor.lhs.false6
  %28 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 2
  %30 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp = icmp ugt i32 %28, %30
  br i1 %cmp, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call9 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %31, i32 24)
  store i32 %call9, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end10:                                         ; preds = %if.end
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState11 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 15
  %33 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState11, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %33, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %35 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call12 = call i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %34, i32 %35)
  store i8* %call12, i8** %pCentral_dir_header, align 8, !tbaa !8
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %37 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %38 = load i8*, i8** %pCentral_dir_header, align 8, !tbaa !8
  %call13 = call i32 @mz_zip_file_stat_internal(%struct.mz_zip_archive* %36, i32 %37, i8* %38, %struct.mz_zip_archive_file_stat* %file_stat, i32* %found_zip64_ext_data_in_cdir)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end16, label %if.then15

if.then15:                                        ; preds = %if.end10
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end16:                                         ; preds = %if.end10
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 14
  %39 = load i32, i32* %m_is_directory, align 4, !tbaa !129
  %tobool17 = icmp ne i32 %39, 0
  br i1 %tobool17, label %if.then20, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %if.end16
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %40 = load i64, i64* %m_uncomp_size, align 8, !tbaa !134
  %tobool19 = icmp ne i64 %40, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %lor.lhs.false18, %if.end16
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end21:                                         ; preds = %lor.lhs.false18
  %m_is_encrypted = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 15
  %41 = load i32, i32* %m_is_encrypted, align 8, !tbaa !163
  %tobool22 = icmp ne i32 %41, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end21
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call24 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %42, i32 5)
  store i32 %call24, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end25:                                         ; preds = %if.end21
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %43 = load i16, i16* %m_method, align 2, !tbaa !133
  %conv = zext i16 %43 to i32
  %cmp26 = icmp ne i32 %conv, 0
  br i1 %cmp26, label %land.lhs.true, label %if.end34

land.lhs.true:                                    ; preds = %if.end25
  %m_method28 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 5
  %44 = load i16, i16* %m_method28, align 2, !tbaa !133
  %conv29 = zext i16 %44 to i32
  %cmp30 = icmp ne i32 %conv29, 8
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %land.lhs.true
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call33 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %45, i32 4)
  store i32 %call33, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end34:                                         ; preds = %land.lhs.true, %if.end25
  %m_is_supported = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 16
  %46 = load i32, i32* %m_is_supported, align 4, !tbaa !158
  %tobool35 = icmp ne i32 %46, 0
  br i1 %tobool35, label %if.end38, label %if.then36

if.then36:                                        ; preds = %if.end34
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call37 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %47, i32 6)
  store i32 %call37, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end38:                                         ; preds = %if.end34
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 12
  %48 = load i64, i64* %m_local_header_ofs, align 8, !tbaa !135
  store i64 %48, i64* %local_header_ofs, align 8, !tbaa !76
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead39 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %49, i32 0, i32 11
  %50 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead39, align 8, !tbaa !109
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %51, i32 0, i32 14
  %52 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %53 = load i64, i64* %local_header_ofs, align 8, !tbaa !76
  %54 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %call40 = call i64 %50(i8* %52, i64 %53, i8* %54, i64 30)
  %cmp41 = icmp ne i64 %call40, 30
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %if.end38
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call44 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %55, i32 20)
  store i32 %call44, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end45:                                         ; preds = %if.end38
  %56 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %57 = bitcast i8* %56 to i32*
  %58 = load i32, i32* %57, align 4, !tbaa !10
  %cmp46 = icmp ne i32 %58, 67324752
  br i1 %cmp46, label %if.then48, label %if.end50

if.then48:                                        ; preds = %if.end45
  %59 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call49 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %59, i32 9)
  store i32 %call49, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end50:                                         ; preds = %if.end45
  %60 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %60, i64 26
  %61 = bitcast i8* %add.ptr to i16*
  %62 = load i16, i16* %61, align 2, !tbaa !88
  %conv51 = zext i16 %62 to i32
  store i32 %conv51, i32* %local_header_filename_len, align 4, !tbaa !10
  %63 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr52 = getelementptr inbounds i8, i8* %63, i64 28
  %64 = bitcast i8* %add.ptr52 to i16*
  %65 = load i16, i16* %64, align 2, !tbaa !88
  %conv53 = zext i16 %65 to i32
  store i32 %conv53, i32* %local_header_extra_len, align 4, !tbaa !10
  %66 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr54 = getelementptr inbounds i8, i8* %66, i64 18
  %67 = bitcast i8* %add.ptr54 to i32*
  %68 = load i32, i32* %67, align 4, !tbaa !10
  %conv55 = zext i32 %68 to i64
  store i64 %conv55, i64* %local_header_comp_size, align 8, !tbaa !76
  %69 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr56 = getelementptr inbounds i8, i8* %69, i64 22
  %70 = bitcast i8* %add.ptr56 to i32*
  %71 = load i32, i32* %70, align 4, !tbaa !10
  %conv57 = zext i32 %71 to i64
  store i64 %conv57, i64* %local_header_uncomp_size, align 8, !tbaa !76
  %72 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr58 = getelementptr inbounds i8, i8* %72, i64 14
  %73 = bitcast i8* %add.ptr58 to i32*
  %74 = load i32, i32* %73, align 4, !tbaa !10
  store i32 %74, i32* %local_header_crc32, align 4, !tbaa !10
  %75 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr59 = getelementptr inbounds i8, i8* %75, i64 6
  %76 = bitcast i8* %add.ptr59 to i16*
  %77 = load i16, i16* %76, align 2, !tbaa !88
  %conv60 = zext i16 %77 to i32
  store i32 %conv60, i32* %local_header_bit_flags, align 4, !tbaa !10
  %78 = load i32, i32* %local_header_bit_flags, align 4, !tbaa !10
  %and = and i32 %78, 8
  %cmp61 = icmp ne i32 %and, 0
  %conv62 = zext i1 %cmp61 to i32
  store i32 %conv62, i32* %has_data_descriptor, align 4, !tbaa !10
  %79 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %conv63 = zext i32 %79 to i64
  %m_filename = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 17
  %arraydecay64 = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename, i64 0, i64 0
  %call65 = call i64 @strlen(i8* %arraydecay64)
  %cmp66 = icmp ne i64 %conv63, %call65
  br i1 %cmp66, label %if.then68, label %if.end70

if.then68:                                        ; preds = %if.end50
  %80 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call69 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %80, i32 9)
  store i32 %call69, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end70:                                         ; preds = %if.end50
  %81 = load i64, i64* %local_header_ofs, align 8, !tbaa !76
  %add = add i64 %81, 30
  %82 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %conv71 = zext i32 %82 to i64
  %add72 = add i64 %add, %conv71
  %83 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %conv73 = zext i32 %83 to i64
  %add74 = add i64 %add72, %conv73
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %84 = load i64, i64* %m_comp_size, align 8, !tbaa !131
  %add75 = add i64 %add74, %84
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %85, i32 0, i32 0
  %86 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %cmp76 = icmp ugt i64 %add75, %86
  br i1 %cmp76, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.end70
  %87 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call79 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %87, i32 9)
  store i32 %call79, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end80:                                         ; preds = %if.end70
  %88 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %89 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %90 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %cmp81 = icmp ugt i32 %89, %90
  br i1 %cmp81, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end80
  %91 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  br label %cond.end

cond.false:                                       ; preds = %if.end80
  %92 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %91, %cond.true ], [ %92, %cond.false ]
  %conv83 = zext i32 %cond to i64
  %call84 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %88, %struct.mz_zip_array* %file_data_array, i64 %conv83, i32 0)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.end88, label %if.then86

if.then86:                                        ; preds = %cond.end
  %93 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call87 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %93, i32 16)
  store i32 %call87, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end88:                                         ; preds = %cond.end
  %94 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %tobool89 = icmp ne i32 %94, 0
  br i1 %tobool89, label %if.then90, label %if.end112

if.then90:                                        ; preds = %if.end88
  %95 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead91 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %95, i32 0, i32 11
  %96 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead91, align 8, !tbaa !109
  %97 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque92 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %97, i32 0, i32 14
  %98 = load i8*, i8** %m_pIO_opaque92, align 8, !tbaa !120
  %99 = load i64, i64* %local_header_ofs, align 8, !tbaa !76
  %add93 = add i64 %99, 30
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %100 = load i8*, i8** %m_p, align 8, !tbaa !164
  %101 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %conv94 = zext i32 %101 to i64
  %call95 = call i64 %96(i8* %98, i64 %add93, i8* %100, i64 %conv94)
  %102 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %conv96 = zext i32 %102 to i64
  %cmp97 = icmp ne i64 %call95, %conv96
  br i1 %cmp97, label %if.then99, label %if.end101

if.then99:                                        ; preds = %if.then90
  %103 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call100 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %103, i32 20)
  br label %handle_failure

if.end101:                                        ; preds = %if.then90
  %m_filename102 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 17
  %arraydecay103 = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename102, i64 0, i64 0
  %m_p104 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %104 = load i8*, i8** %m_p104, align 8, !tbaa !164
  %105 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %conv105 = zext i32 %105 to i64
  %call106 = call i32 @memcmp(i8* %arraydecay103, i8* %104, i64 %conv105)
  %cmp107 = icmp ne i32 %call106, 0
  br i1 %cmp107, label %if.then109, label %if.end111

if.then109:                                       ; preds = %if.end101
  %106 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call110 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %106, i32 30)
  br label %handle_failure

if.end111:                                        ; preds = %if.end101
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %if.end88
  %107 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %tobool113 = icmp ne i32 %107, 0
  br i1 %tobool113, label %land.lhs.true114, label %if.end183

land.lhs.true114:                                 ; preds = %if.end112
  %108 = load i64, i64* %local_header_comp_size, align 8, !tbaa !76
  %cmp115 = icmp eq i64 %108, 4294967295
  br i1 %cmp115, label %if.then120, label %lor.lhs.false117

lor.lhs.false117:                                 ; preds = %land.lhs.true114
  %109 = load i64, i64* %local_header_uncomp_size, align 8, !tbaa !76
  %cmp118 = icmp eq i64 %109, 4294967295
  br i1 %cmp118, label %if.then120, label %if.end183

if.then120:                                       ; preds = %lor.lhs.false117, %land.lhs.true114
  %110 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %110) #10
  %111 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  store i32 %111, i32* %extra_size_remaining, align 4, !tbaa !10
  %112 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %112) #10
  %m_p121 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %113 = load i8*, i8** %m_p121, align 8, !tbaa !164
  store i8* %113, i8** %pExtra_data, align 8, !tbaa !8
  %114 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead122 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %114, i32 0, i32 11
  %115 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead122, align 8, !tbaa !109
  %116 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque123 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %116, i32 0, i32 14
  %117 = load i8*, i8** %m_pIO_opaque123, align 8, !tbaa !120
  %118 = load i64, i64* %local_header_ofs, align 8, !tbaa !76
  %add124 = add i64 %118, 30
  %119 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %conv125 = zext i32 %119 to i64
  %add126 = add i64 %add124, %conv125
  %m_p127 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %120 = load i8*, i8** %m_p127, align 8, !tbaa !164
  %121 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %conv128 = zext i32 %121 to i64
  %call129 = call i64 %115(i8* %117, i64 %add126, i8* %120, i64 %conv128)
  %122 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %conv130 = zext i32 %122 to i64
  %cmp131 = icmp ne i64 %call129, %conv130
  br i1 %cmp131, label %if.then133, label %if.end135

if.then133:                                       ; preds = %if.then120
  %123 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call134 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %123, i32 20)
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup179

if.end135:                                        ; preds = %if.then120
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end135
  %124 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %124) #10
  %125 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %125) #10
  %126 = bitcast i32* %field_total_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %126) #10
  %127 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv136 = zext i32 %127 to i64
  %cmp137 = icmp ult i64 %conv136, 4
  br i1 %cmp137, label %if.then139, label %if.end141

if.then139:                                       ; preds = %do.body
  %128 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call140 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %128, i32 9)
  store i32 %call140, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup175

if.end141:                                        ; preds = %do.body
  %129 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %130 = bitcast i8* %129 to i16*
  %131 = load i16, i16* %130, align 2, !tbaa !88
  %conv142 = zext i16 %131 to i32
  store i32 %conv142, i32* %field_id, align 4, !tbaa !10
  %132 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr143 = getelementptr inbounds i8, i8* %132, i64 2
  %133 = bitcast i8* %add.ptr143 to i16*
  %134 = load i16, i16* %133, align 2, !tbaa !88
  %conv144 = zext i16 %134 to i32
  store i32 %conv144, i32* %field_data_size, align 4, !tbaa !10
  %135 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv145 = zext i32 %135 to i64
  %add146 = add i64 %conv145, 4
  %conv147 = trunc i64 %add146 to i32
  store i32 %conv147, i32* %field_total_size, align 4, !tbaa !10
  %136 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %137 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %cmp148 = icmp ugt i32 %136, %137
  br i1 %cmp148, label %if.then150, label %if.end152

if.then150:                                       ; preds = %if.end141
  %138 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call151 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %138, i32 9)
  store i32 %call151, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup175

if.end152:                                        ; preds = %if.end141
  %139 = load i32, i32* %field_id, align 4, !tbaa !10
  %cmp153 = icmp eq i32 %139, 1
  br i1 %cmp153, label %if.then155, label %if.end173

if.then155:                                       ; preds = %if.end152
  %140 = bitcast i8** %pSrc_field_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %140) #10
  %141 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr156 = getelementptr inbounds i8, i8* %141, i64 4
  store i8* %add.ptr156, i8** %pSrc_field_data, align 8, !tbaa !8
  %142 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv157 = zext i32 %142 to i64
  %cmp158 = icmp ult i64 %conv157, 16
  br i1 %cmp158, label %if.then160, label %if.end162

if.then160:                                       ; preds = %if.then155
  %143 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call161 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %143, i32 9)
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end162:                                        ; preds = %if.then155
  %144 = load i8*, i8** %pSrc_field_data, align 8, !tbaa !8
  %145 = bitcast i8* %144 to i32*
  %146 = load i32, i32* %145, align 4, !tbaa !10
  %conv163 = zext i32 %146 to i64
  %147 = load i8*, i8** %pSrc_field_data, align 8, !tbaa !8
  %add.ptr164 = getelementptr inbounds i8, i8* %147, i64 4
  %148 = bitcast i8* %add.ptr164 to i32*
  %149 = load i32, i32* %148, align 4, !tbaa !10
  %conv165 = zext i32 %149 to i64
  %shl = shl i64 %conv165, 32
  %or = or i64 %conv163, %shl
  store i64 %or, i64* %local_header_uncomp_size, align 8, !tbaa !76
  %150 = load i8*, i8** %pSrc_field_data, align 8, !tbaa !8
  %add.ptr166 = getelementptr inbounds i8, i8* %150, i64 8
  %151 = bitcast i8* %add.ptr166 to i32*
  %152 = load i32, i32* %151, align 4, !tbaa !10
  %conv167 = zext i32 %152 to i64
  %153 = load i8*, i8** %pSrc_field_data, align 8, !tbaa !8
  %add.ptr168 = getelementptr inbounds i8, i8* %153, i64 8
  %add.ptr169 = getelementptr inbounds i8, i8* %add.ptr168, i64 4
  %154 = bitcast i8* %add.ptr169 to i32*
  %155 = load i32, i32* %154, align 4, !tbaa !10
  %conv170 = zext i32 %155 to i64
  %shl171 = shl i64 %conv170, 32
  %or172 = or i64 %conv167, %shl171
  store i64 %or172, i64* %local_header_comp_size, align 8, !tbaa !76
  store i32 1, i32* %found_zip64_ext_data_in_ldir, align 4, !tbaa !10
  store i32 3, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.then160, %if.end162
  %156 = bitcast i8** %pSrc_field_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %156) #10
  br label %cleanup175

if.end173:                                        ; preds = %if.end152
  %157 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %158 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %idx.ext = zext i32 %157 to i64
  %add.ptr174 = getelementptr inbounds i8, i8* %158, i64 %idx.ext
  store i8* %add.ptr174, i8** %pExtra_data, align 8, !tbaa !8
  %159 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %160 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %sub = sub i32 %160, %159
  store i32 %sub, i32* %extra_size_remaining, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup175

cleanup175:                                       ; preds = %if.end173, %cleanup, %if.then150, %if.then139
  %161 = bitcast i32* %field_total_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %161) #10
  %162 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %162) #10
  %163 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %163) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup179 [
    i32 0, label %cleanup.cont
    i32 3, label %do.end
  ]

cleanup.cont:                                     ; preds = %cleanup175
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont
  %164 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %tobool178 = icmp ne i32 %164, 0
  br i1 %tobool178, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %cleanup175
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup179

cleanup179:                                       ; preds = %if.then133, %do.end, %cleanup175
  %165 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %165) #10
  %166 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %166) #10
  %cleanup.dest181 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest181, label %cleanup303 [
    i32 0, label %cleanup.cont182
    i32 2, label %handle_failure
  ]

cleanup.cont182:                                  ; preds = %cleanup179
  br label %if.end183

if.end183:                                        ; preds = %cleanup.cont182, %lor.lhs.false117, %if.end112
  %167 = load i32, i32* %has_data_descriptor, align 4, !tbaa !10
  %tobool184 = icmp ne i32 %167, 0
  br i1 %tobool184, label %land.lhs.true185, label %if.else272

land.lhs.true185:                                 ; preds = %if.end183
  %168 = load i64, i64* %local_header_comp_size, align 8, !tbaa !76
  %tobool186 = icmp ne i64 %168, 0
  br i1 %tobool186, label %if.else272, label %land.lhs.true187

land.lhs.true187:                                 ; preds = %land.lhs.true185
  %169 = load i32, i32* %local_header_crc32, align 4, !tbaa !10
  %tobool188 = icmp ne i32 %169, 0
  br i1 %tobool188, label %if.else272, label %if.then189

if.then189:                                       ; preds = %land.lhs.true187
  %170 = bitcast [32 x i8]* %descriptor_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %170) #10
  %171 = bitcast i32* %has_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %171) #10
  %172 = bitcast i8** %pSrc to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %172) #10
  %173 = bitcast i32* %file_crc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %173) #10
  %174 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %174) #10
  store i64 0, i64* %comp_size, align 8, !tbaa !76
  %175 = bitcast i64* %uncomp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %175) #10
  store i64 0, i64* %uncomp_size, align 8, !tbaa !76
  %176 = bitcast i32* %num_descriptor_uint32s to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %176) #10
  %177 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %177, i32 0, i32 4
  %178 = load i32, i32* %m_zip64, align 4, !tbaa !118
  %tobool190 = icmp ne i32 %178, 0
  br i1 %tobool190, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then189
  %179 = load i32, i32* %found_zip64_ext_data_in_ldir, align 4, !tbaa !10
  %tobool191 = icmp ne i32 %179, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then189
  %180 = phi i1 [ true, %if.then189 ], [ %tobool191, %lor.rhs ]
  %181 = zext i1 %180 to i64
  %cond192 = select i1 %180, i32 6, i32 4
  store i32 %cond192, i32* %num_descriptor_uint32s, align 4, !tbaa !10
  %182 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead193 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %182, i32 0, i32 11
  %183 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead193, align 8, !tbaa !109
  %184 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque194 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %184, i32 0, i32 14
  %185 = load i8*, i8** %m_pIO_opaque194, align 8, !tbaa !120
  %186 = load i64, i64* %local_header_ofs, align 8, !tbaa !76
  %add195 = add i64 %186, 30
  %187 = load i32, i32* %local_header_filename_len, align 4, !tbaa !10
  %conv196 = zext i32 %187 to i64
  %add197 = add i64 %add195, %conv196
  %188 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %conv198 = zext i32 %188 to i64
  %add199 = add i64 %add197, %conv198
  %m_comp_size200 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %189 = load i64, i64* %m_comp_size200, align 8, !tbaa !131
  %add201 = add i64 %add199, %189
  %arraydecay202 = getelementptr inbounds [32 x i8], [32 x i8]* %descriptor_buf, i64 0, i64 0
  %190 = load i32, i32* %num_descriptor_uint32s, align 4, !tbaa !10
  %conv203 = zext i32 %190 to i64
  %mul = mul i64 4, %conv203
  %call204 = call i64 %183(i8* %185, i64 %add201, i8* %arraydecay202, i64 %mul)
  %191 = load i32, i32* %num_descriptor_uint32s, align 4, !tbaa !10
  %conv205 = zext i32 %191 to i64
  %mul206 = mul i64 4, %conv205
  %cmp207 = icmp ne i64 %call204, %mul206
  br i1 %cmp207, label %if.then209, label %if.end211

if.then209:                                       ; preds = %lor.end
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call210 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %192, i32 20)
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup263

if.end211:                                        ; preds = %lor.end
  %arraydecay212 = getelementptr inbounds [32 x i8], [32 x i8]* %descriptor_buf, i64 0, i64 0
  %193 = bitcast i8* %arraydecay212 to i32*
  %194 = load i32, i32* %193, align 16, !tbaa !10
  %cmp213 = icmp eq i32 %194, 134695760
  %conv214 = zext i1 %cmp213 to i32
  store i32 %conv214, i32* %has_id, align 4, !tbaa !10
  %195 = load i32, i32* %has_id, align 4, !tbaa !10
  %tobool215 = icmp ne i32 %195, 0
  br i1 %tobool215, label %cond.true216, label %cond.false219

cond.true216:                                     ; preds = %if.end211
  %arraydecay217 = getelementptr inbounds [32 x i8], [32 x i8]* %descriptor_buf, i64 0, i64 0
  %add.ptr218 = getelementptr inbounds i8, i8* %arraydecay217, i64 4
  br label %cond.end221

cond.false219:                                    ; preds = %if.end211
  %arraydecay220 = getelementptr inbounds [32 x i8], [32 x i8]* %descriptor_buf, i64 0, i64 0
  br label %cond.end221

cond.end221:                                      ; preds = %cond.false219, %cond.true216
  %cond222 = phi i8* [ %add.ptr218, %cond.true216 ], [ %arraydecay220, %cond.false219 ]
  store i8* %cond222, i8** %pSrc, align 8, !tbaa !8
  %196 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %197 = bitcast i8* %196 to i32*
  %198 = load i32, i32* %197, align 4, !tbaa !10
  store i32 %198, i32* %file_crc32, align 4, !tbaa !10
  %199 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64223 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %199, i32 0, i32 4
  %200 = load i32, i32* %m_zip64223, align 4, !tbaa !118
  %tobool224 = icmp ne i32 %200, 0
  br i1 %tobool224, label %if.then227, label %lor.lhs.false225

lor.lhs.false225:                                 ; preds = %cond.end221
  %201 = load i32, i32* %found_zip64_ext_data_in_ldir, align 4, !tbaa !10
  %tobool226 = icmp ne i32 %201, 0
  br i1 %tobool226, label %if.then227, label %if.else

if.then227:                                       ; preds = %lor.lhs.false225, %cond.end221
  %202 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %add.ptr228 = getelementptr inbounds i8, i8* %202, i64 4
  %203 = bitcast i8* %add.ptr228 to i32*
  %204 = load i32, i32* %203, align 4, !tbaa !10
  %conv229 = zext i32 %204 to i64
  %205 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %add.ptr230 = getelementptr inbounds i8, i8* %205, i64 4
  %add.ptr231 = getelementptr inbounds i8, i8* %add.ptr230, i64 4
  %206 = bitcast i8* %add.ptr231 to i32*
  %207 = load i32, i32* %206, align 4, !tbaa !10
  %conv232 = zext i32 %207 to i64
  %shl233 = shl i64 %conv232, 32
  %or234 = or i64 %conv229, %shl233
  store i64 %or234, i64* %comp_size, align 8, !tbaa !76
  %208 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %add.ptr235 = getelementptr inbounds i8, i8* %208, i64 4
  %add.ptr236 = getelementptr inbounds i8, i8* %add.ptr235, i64 8
  %209 = bitcast i8* %add.ptr236 to i32*
  %210 = load i32, i32* %209, align 4, !tbaa !10
  %conv237 = zext i32 %210 to i64
  %211 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %add.ptr238 = getelementptr inbounds i8, i8* %211, i64 4
  %add.ptr239 = getelementptr inbounds i8, i8* %add.ptr238, i64 8
  %add.ptr240 = getelementptr inbounds i8, i8* %add.ptr239, i64 4
  %212 = bitcast i8* %add.ptr240 to i32*
  %213 = load i32, i32* %212, align 4, !tbaa !10
  %conv241 = zext i32 %213 to i64
  %shl242 = shl i64 %conv241, 32
  %or243 = or i64 %conv237, %shl242
  store i64 %or243, i64* %uncomp_size, align 8, !tbaa !76
  br label %if.end249

if.else:                                          ; preds = %lor.lhs.false225
  %214 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %add.ptr244 = getelementptr inbounds i8, i8* %214, i64 4
  %215 = bitcast i8* %add.ptr244 to i32*
  %216 = load i32, i32* %215, align 4, !tbaa !10
  %conv245 = zext i32 %216 to i64
  store i64 %conv245, i64* %comp_size, align 8, !tbaa !76
  %217 = load i8*, i8** %pSrc, align 8, !tbaa !8
  %add.ptr246 = getelementptr inbounds i8, i8* %217, i64 4
  %add.ptr247 = getelementptr inbounds i8, i8* %add.ptr246, i64 4
  %218 = bitcast i8* %add.ptr247 to i32*
  %219 = load i32, i32* %218, align 4, !tbaa !10
  %conv248 = zext i32 %219 to i64
  store i64 %conv248, i64* %uncomp_size, align 8, !tbaa !76
  br label %if.end249

if.end249:                                        ; preds = %if.else, %if.then227
  %220 = load i32, i32* %file_crc32, align 4, !tbaa !10
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %221 = load i32, i32* %m_crc32, align 8, !tbaa !136
  %cmp250 = icmp ne i32 %220, %221
  br i1 %cmp250, label %if.then260, label %lor.lhs.false252

lor.lhs.false252:                                 ; preds = %if.end249
  %222 = load i64, i64* %comp_size, align 8, !tbaa !76
  %m_comp_size253 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %223 = load i64, i64* %m_comp_size253, align 8, !tbaa !131
  %cmp254 = icmp ne i64 %222, %223
  br i1 %cmp254, label %if.then260, label %lor.lhs.false256

lor.lhs.false256:                                 ; preds = %lor.lhs.false252
  %224 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %m_uncomp_size257 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %225 = load i64, i64* %m_uncomp_size257, align 8, !tbaa !134
  %cmp258 = icmp ne i64 %224, %225
  br i1 %cmp258, label %if.then260, label %if.end262

if.then260:                                       ; preds = %lor.lhs.false256, %lor.lhs.false252, %if.end249
  %226 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call261 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %226, i32 30)
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup263

if.end262:                                        ; preds = %lor.lhs.false256
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup263

cleanup263:                                       ; preds = %if.then260, %if.then209, %if.end262
  %227 = bitcast i32* %num_descriptor_uint32s to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %227) #10
  %228 = bitcast i64* %uncomp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %228) #10
  %229 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %229) #10
  %230 = bitcast i32* %file_crc32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %230) #10
  %231 = bitcast i8** %pSrc to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %231) #10
  %232 = bitcast i32* %has_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %232) #10
  %233 = bitcast [32 x i8]* %descriptor_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %233) #10
  %cleanup.dest270 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest270, label %cleanup303 [
    i32 0, label %cleanup.cont271
    i32 2, label %handle_failure
  ]

cleanup.cont271:                                  ; preds = %cleanup263
  br label %if.end287

if.else272:                                       ; preds = %land.lhs.true187, %land.lhs.true185, %if.end183
  %234 = load i32, i32* %local_header_crc32, align 4, !tbaa !10
  %m_crc32273 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %235 = load i32, i32* %m_crc32273, align 8, !tbaa !136
  %cmp274 = icmp ne i32 %234, %235
  br i1 %cmp274, label %if.then284, label %lor.lhs.false276

lor.lhs.false276:                                 ; preds = %if.else272
  %236 = load i64, i64* %local_header_comp_size, align 8, !tbaa !76
  %m_comp_size277 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 8
  %237 = load i64, i64* %m_comp_size277, align 8, !tbaa !131
  %cmp278 = icmp ne i64 %236, %237
  br i1 %cmp278, label %if.then284, label %lor.lhs.false280

lor.lhs.false280:                                 ; preds = %lor.lhs.false276
  %238 = load i64, i64* %local_header_uncomp_size, align 8, !tbaa !76
  %m_uncomp_size281 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 9
  %239 = load i64, i64* %m_uncomp_size281, align 8, !tbaa !134
  %cmp282 = icmp ne i64 %238, %239
  br i1 %cmp282, label %if.then284, label %if.end286

if.then284:                                       ; preds = %lor.lhs.false280, %lor.lhs.false276, %if.else272
  %240 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call285 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %240, i32 30)
  br label %handle_failure

if.end286:                                        ; preds = %lor.lhs.false280
  br label %if.end287

if.end287:                                        ; preds = %if.end286, %cleanup.cont271
  %241 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %241, %struct.mz_zip_array* %file_data_array)
  %242 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and288 = and i32 %242, 8192
  %cmp289 = icmp eq i32 %and288, 0
  br i1 %cmp289, label %if.then291, label %if.end302

if.then291:                                       ; preds = %if.end287
  %243 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %244 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %245 = bitcast i32* %uncomp_crc32 to i8*
  %call292 = call i32 @mz_zip_reader_extract_to_callback(%struct.mz_zip_archive* %243, i32 %244, i64 (i8*, i64, i8*, i64)* @mz_zip_compute_crc32_callback, i8* %245, i32 0)
  %tobool293 = icmp ne i32 %call292, 0
  br i1 %tobool293, label %if.end295, label %if.then294

if.then294:                                       ; preds = %if.then291
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end295:                                        ; preds = %if.then291
  %246 = load i32, i32* %uncomp_crc32, align 4, !tbaa !10
  %m_crc32296 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %file_stat, i32 0, i32 7
  %247 = load i32, i32* %m_crc32296, align 8, !tbaa !136
  %cmp297 = icmp ne i32 %246, %247
  br i1 %cmp297, label %if.then299, label %if.end301

if.then299:                                       ; preds = %if.end295
  %248 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call300 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %248, i32 30)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

if.end301:                                        ; preds = %if.end295
  br label %if.end302

if.end302:                                        ; preds = %if.end301, %if.end287
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

handle_failure:                                   ; preds = %cleanup263, %cleanup179, %if.then284, %if.then109, %if.then99
  %249 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %249, %struct.mz_zip_array* %file_data_array)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup303

cleanup303:                                       ; preds = %handle_failure, %if.end302, %if.then299, %if.then294, %cleanup263, %cleanup179, %if.then86, %if.then78, %if.then68, %if.then48, %if.then43, %if.then36, %if.then32, %if.then23, %if.then20, %if.then15, %if.then8, %if.then
  %250 = bitcast %struct.mz_zip_array* %file_data_array to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %250) #10
  %251 = bitcast i32* %local_header_bit_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %251) #10
  %252 = bitcast i32* %has_data_descriptor to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %252) #10
  %253 = bitcast i32* %uncomp_crc32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %253) #10
  %254 = bitcast i64* %local_header_uncomp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %254) #10
  %255 = bitcast i64* %local_header_comp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %255) #10
  %256 = bitcast i32* %local_header_crc32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %256) #10
  %257 = bitcast i32* %local_header_extra_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %257) #10
  %258 = bitcast i32* %local_header_filename_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %258) #10
  %259 = bitcast i64* %local_header_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %259) #10
  %260 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %260) #10
  %261 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %261) #10
  %262 = bitcast i32* %found_zip64_ext_data_in_ldir to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %262) #10
  %263 = bitcast i32* %found_zip64_ext_data_in_cdir to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %263) #10
  %264 = bitcast i8** %pCentral_dir_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %264) #10
  %265 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %265) #10
  %266 = bitcast %struct.mz_zip_archive_file_stat* %file_stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 1112, i8* %266) #10
  %267 = load i32, i32* %retval, align 4
  ret i32 %267
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal void @mz_zip_array_init(%struct.mz_zip_array* %pArray, i32 %element_size) #9 {
entry:
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  %element_size.addr = alloca i32, align 4
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  store i32 %element_size, i32* %element_size.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %1 = bitcast %struct.mz_zip_array* %0 to i8*
  %2 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %3 = bitcast %struct.mz_zip_array* %2 to i8*
  %4 = call i64 @llvm.objectsize.i64.p0i8(i8* %3, i1 false, i1 true, i1 false)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 32, i64 %4) #10
  %5 = load i32, i32* %element_size.addr, align 4, !tbaa !10
  %6 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_element_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %6, i32 0, i32 3
  store i32 %5, i32* %m_element_size, align 8, !tbaa !165
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_file_stat_internal(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pCentral_dir_header, %struct.mz_zip_archive_file_stat* %pStat, i32* %pFound_zip64_extra_data) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pCentral_dir_header.addr = alloca i8*, align 8
  %pStat.addr = alloca %struct.mz_zip_archive_file_stat*, align 8
  %pFound_zip64_extra_data.addr = alloca i32*, align 8
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %extra_size_remaining = alloca i32, align 4
  %pExtra_data = alloca i8*, align 8
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  %pField_data = alloca i8*, align 8
  %field_data_remaining = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i8* %pCentral_dir_header, i8** %pCentral_dir_header.addr, align 8, !tbaa !8
  store %struct.mz_zip_archive_file_stat* %pStat, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  store i32* %pFound_zip64_extra_data, i32** %pFound_zip64_extra_data.addr, align 8, !tbaa !8
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = load i8*, i8** %pCentral_dir_header.addr, align 8, !tbaa !8
  store i8* %2, i8** %p, align 8, !tbaa !8
  %3 = load i32*, i32** %pFound_zip64_extra_data.addr, align 8, !tbaa !8
  %tobool = icmp ne i32* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i32*, i32** %pFound_zip64_extra_data.addr, align 8, !tbaa !8
  store i32 0, i32* %4, align 4, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8*, i8** %p, align 8, !tbaa !8
  %tobool1 = icmp ne i8* %5, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %tobool2 = icmp ne %struct.mz_zip_archive_file_stat* %6, null
  br i1 %tobool2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %7, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup204

if.end4:                                          ; preds = %lor.lhs.false
  %8 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %9 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_file_index = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %9, i32 0, i32 0
  store i32 %8, i32* %m_file_index, align 8, !tbaa !166
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 1
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 0
  %12 = load i8*, i8** %m_p, align 8, !tbaa !122
  %13 = bitcast i8* %12 to i32*
  %14 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %idxprom = zext i32 %14 to i64
  %arrayidx = getelementptr inbounds i32, i32* %13, i64 %idxprom
  %15 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %conv = zext i32 %15 to i64
  %16 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_central_dir_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %16, i32 0, i32 1
  store i64 %conv, i64* %m_central_dir_ofs, align 8, !tbaa !167
  %17 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 4
  %18 = bitcast i8* %add.ptr to i16*
  %19 = load i16, i16* %18, align 2, !tbaa !88
  %20 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_version_made_by = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %20, i32 0, i32 2
  store i16 %19, i16* %m_version_made_by, align 8, !tbaa !168
  %21 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr5 = getelementptr inbounds i8, i8* %21, i64 6
  %22 = bitcast i8* %add.ptr5 to i16*
  %23 = load i16, i16* %22, align 2, !tbaa !88
  %24 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_version_needed = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %24, i32 0, i32 3
  store i16 %23, i16* %m_version_needed, align 2, !tbaa !169
  %25 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr6 = getelementptr inbounds i8, i8* %25, i64 8
  %26 = bitcast i8* %add.ptr6 to i16*
  %27 = load i16, i16* %26, align 2, !tbaa !88
  %28 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_bit_flag = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %28, i32 0, i32 4
  store i16 %27, i16* %m_bit_flag, align 4, !tbaa !132
  %29 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr7 = getelementptr inbounds i8, i8* %29, i64 10
  %30 = bitcast i8* %add.ptr7 to i16*
  %31 = load i16, i16* %30, align 2, !tbaa !88
  %32 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_method = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %32, i32 0, i32 5
  store i16 %31, i16* %m_method, align 2, !tbaa !133
  %33 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr8 = getelementptr inbounds i8, i8* %33, i64 12
  %34 = bitcast i8* %add.ptr8 to i16*
  %35 = load i16, i16* %34, align 2, !tbaa !88
  %conv9 = zext i16 %35 to i32
  %36 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr10 = getelementptr inbounds i8, i8* %36, i64 14
  %37 = bitcast i8* %add.ptr10 to i16*
  %38 = load i16, i16* %37, align 2, !tbaa !88
  %conv11 = zext i16 %38 to i32
  %call12 = call i64 @mz_zip_dos_to_time_t(i32 %conv9, i32 %conv11)
  %39 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_time = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %39, i32 0, i32 6
  store i64 %call12, i64* %m_time, align 8, !tbaa !159
  %40 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr13 = getelementptr inbounds i8, i8* %40, i64 16
  %41 = bitcast i8* %add.ptr13 to i32*
  %42 = load i32, i32* %41, align 4, !tbaa !10
  %43 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_crc32 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %43, i32 0, i32 7
  store i32 %42, i32* %m_crc32, align 8, !tbaa !136
  %44 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr14 = getelementptr inbounds i8, i8* %44, i64 20
  %45 = bitcast i8* %add.ptr14 to i32*
  %46 = load i32, i32* %45, align 4, !tbaa !10
  %conv15 = zext i32 %46 to i64
  %47 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %47, i32 0, i32 8
  store i64 %conv15, i64* %m_comp_size, align 8, !tbaa !131
  %48 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr16 = getelementptr inbounds i8, i8* %48, i64 24
  %49 = bitcast i8* %add.ptr16 to i32*
  %50 = load i32, i32* %49, align 4, !tbaa !10
  %conv17 = zext i32 %50 to i64
  %51 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %51, i32 0, i32 9
  store i64 %conv17, i64* %m_uncomp_size, align 8, !tbaa !134
  %52 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr18 = getelementptr inbounds i8, i8* %52, i64 36
  %53 = bitcast i8* %add.ptr18 to i16*
  %54 = load i16, i16* %53, align 2, !tbaa !88
  %55 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_internal_attr = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %55, i32 0, i32 10
  store i16 %54, i16* %m_internal_attr, align 8, !tbaa !170
  %56 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr19 = getelementptr inbounds i8, i8* %56, i64 38
  %57 = bitcast i8* %add.ptr19 to i32*
  %58 = load i32, i32* %57, align 4, !tbaa !10
  %59 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_external_attr = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %59, i32 0, i32 11
  store i32 %58, i32* %m_external_attr, align 4, !tbaa !171
  %60 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr20 = getelementptr inbounds i8, i8* %60, i64 42
  %61 = bitcast i8* %add.ptr20 to i32*
  %62 = load i32, i32* %61, align 4, !tbaa !10
  %conv21 = zext i32 %62 to i64
  %63 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %63, i32 0, i32 12
  store i64 %conv21, i64* %m_local_header_ofs, align 8, !tbaa !135
  %64 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr22 = getelementptr inbounds i8, i8* %64, i64 28
  %65 = bitcast i8* %add.ptr22 to i16*
  %66 = load i16, i16* %65, align 2, !tbaa !88
  %conv23 = zext i16 %66 to i32
  store i32 %conv23, i32* %n, align 4, !tbaa !10
  %67 = load i32, i32* %n, align 4, !tbaa !10
  %cmp = icmp ult i32 %67, 511
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end4
  %68 = load i32, i32* %n, align 4, !tbaa !10
  br label %cond.end

cond.false:                                       ; preds = %if.end4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %68, %cond.true ], [ 511, %cond.false ]
  store i32 %cond, i32* %n, align 4, !tbaa !10
  %69 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_filename = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %69, i32 0, i32 17
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename, i64 0, i64 0
  %70 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr25 = getelementptr inbounds i8, i8* %70, i64 46
  %71 = load i32, i32* %n, align 4, !tbaa !10
  %conv26 = zext i32 %71 to i64
  %72 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_filename27 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %72, i32 0, i32 17
  %arraydecay28 = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename27, i64 0, i64 0
  %73 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay28, i1 false, i1 true, i1 false)
  %call29 = call i8* @__memcpy_chk(i8* %arraydecay, i8* %add.ptr25, i64 %conv26, i64 %73) #10
  %74 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_filename30 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %74, i32 0, i32 17
  %75 = load i32, i32* %n, align 4, !tbaa !10
  %idxprom31 = zext i32 %75 to i64
  %arrayidx32 = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename30, i64 0, i64 %idxprom31
  store i8 0, i8* %arrayidx32, align 1, !tbaa !12
  %76 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr33 = getelementptr inbounds i8, i8* %76, i64 32
  %77 = bitcast i8* %add.ptr33 to i16*
  %78 = load i16, i16* %77, align 2, !tbaa !88
  %conv34 = zext i16 %78 to i32
  store i32 %conv34, i32* %n, align 4, !tbaa !10
  %79 = load i32, i32* %n, align 4, !tbaa !10
  %cmp35 = icmp ult i32 %79, 511
  br i1 %cmp35, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %cond.end
  %80 = load i32, i32* %n, align 4, !tbaa !10
  br label %cond.end39

cond.false38:                                     ; preds = %cond.end
  br label %cond.end39

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond40 = phi i32 [ %80, %cond.true37 ], [ 511, %cond.false38 ]
  store i32 %cond40, i32* %n, align 4, !tbaa !10
  %81 = load i32, i32* %n, align 4, !tbaa !10
  %82 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comment_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %82, i32 0, i32 13
  store i32 %81, i32* %m_comment_size, align 8, !tbaa !172
  %83 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comment = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %83, i32 0, i32 18
  %arraydecay41 = getelementptr inbounds [512 x i8], [512 x i8]* %m_comment, i64 0, i64 0
  %84 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr42 = getelementptr inbounds i8, i8* %84, i64 46
  %85 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr43 = getelementptr inbounds i8, i8* %85, i64 28
  %86 = bitcast i8* %add.ptr43 to i16*
  %87 = load i16, i16* %86, align 2, !tbaa !88
  %conv44 = zext i16 %87 to i32
  %idx.ext = sext i32 %conv44 to i64
  %add.ptr45 = getelementptr inbounds i8, i8* %add.ptr42, i64 %idx.ext
  %88 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr46 = getelementptr inbounds i8, i8* %88, i64 30
  %89 = bitcast i8* %add.ptr46 to i16*
  %90 = load i16, i16* %89, align 2, !tbaa !88
  %conv47 = zext i16 %90 to i32
  %idx.ext48 = sext i32 %conv47 to i64
  %add.ptr49 = getelementptr inbounds i8, i8* %add.ptr45, i64 %idx.ext48
  %91 = load i32, i32* %n, align 4, !tbaa !10
  %conv50 = zext i32 %91 to i64
  %92 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comment51 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %92, i32 0, i32 18
  %arraydecay52 = getelementptr inbounds [512 x i8], [512 x i8]* %m_comment51, i64 0, i64 0
  %93 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay52, i1 false, i1 true, i1 false)
  %call53 = call i8* @__memcpy_chk(i8* %arraydecay41, i8* %add.ptr49, i64 %conv50, i64 %93) #10
  %94 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comment54 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %94, i32 0, i32 18
  %95 = load i32, i32* %n, align 4, !tbaa !10
  %idxprom55 = zext i32 %95 to i64
  %arrayidx56 = getelementptr inbounds [512 x i8], [512 x i8]* %m_comment54, i64 0, i64 %idxprom55
  store i8 0, i8* %arrayidx56, align 1, !tbaa !12
  %96 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %97 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call57 = call i32 @mz_zip_reader_is_file_a_directory(%struct.mz_zip_archive* %96, i32 %97)
  %98 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_is_directory = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %98, i32 0, i32 14
  store i32 %call57, i32* %m_is_directory, align 4, !tbaa !129
  %99 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %100 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call58 = call i32 @mz_zip_reader_is_file_encrypted(%struct.mz_zip_archive* %99, i32 %100)
  %101 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_is_encrypted = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %101, i32 0, i32 15
  store i32 %call58, i32* %m_is_encrypted, align 8, !tbaa !163
  %102 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %103 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call59 = call i32 @mz_zip_reader_is_file_supported(%struct.mz_zip_archive* %102, i32 %103)
  %104 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_is_supported = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %104, i32 0, i32 16
  store i32 %call59, i32* %m_is_supported, align 4, !tbaa !158
  %105 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comp_size60 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %105, i32 0, i32 8
  %106 = load i64, i64* %m_comp_size60, align 8, !tbaa !131
  %107 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_uncomp_size61 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %107, i32 0, i32 9
  %108 = load i64, i64* %m_uncomp_size61, align 8, !tbaa !134
  %cmp62 = icmp ugt i64 %106, %108
  br i1 %cmp62, label %cond.true64, label %cond.false66

cond.true64:                                      ; preds = %cond.end39
  %109 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comp_size65 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %109, i32 0, i32 8
  %110 = load i64, i64* %m_comp_size65, align 8, !tbaa !131
  br label %cond.end68

cond.false66:                                     ; preds = %cond.end39
  %111 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_uncomp_size67 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %111, i32 0, i32 9
  %112 = load i64, i64* %m_uncomp_size67, align 8, !tbaa !134
  br label %cond.end68

cond.end68:                                       ; preds = %cond.false66, %cond.true64
  %cond69 = phi i64 [ %110, %cond.true64 ], [ %112, %cond.false66 ]
  %113 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_local_header_ofs70 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %113, i32 0, i32 12
  %114 = load i64, i64* %m_local_header_ofs70, align 8, !tbaa !135
  %cmp71 = icmp ugt i64 %cond69, %114
  br i1 %cmp71, label %cond.true73, label %cond.false84

cond.true73:                                      ; preds = %cond.end68
  %115 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comp_size74 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %115, i32 0, i32 8
  %116 = load i64, i64* %m_comp_size74, align 8, !tbaa !131
  %117 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_uncomp_size75 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %117, i32 0, i32 9
  %118 = load i64, i64* %m_uncomp_size75, align 8, !tbaa !134
  %cmp76 = icmp ugt i64 %116, %118
  br i1 %cmp76, label %cond.true78, label %cond.false80

cond.true78:                                      ; preds = %cond.true73
  %119 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comp_size79 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %119, i32 0, i32 8
  %120 = load i64, i64* %m_comp_size79, align 8, !tbaa !131
  br label %cond.end82

cond.false80:                                     ; preds = %cond.true73
  %121 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_uncomp_size81 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %121, i32 0, i32 9
  %122 = load i64, i64* %m_uncomp_size81, align 8, !tbaa !134
  br label %cond.end82

cond.end82:                                       ; preds = %cond.false80, %cond.true78
  %cond83 = phi i64 [ %120, %cond.true78 ], [ %122, %cond.false80 ]
  br label %cond.end86

cond.false84:                                     ; preds = %cond.end68
  %123 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_local_header_ofs85 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %123, i32 0, i32 12
  %124 = load i64, i64* %m_local_header_ofs85, align 8, !tbaa !135
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false84, %cond.end82
  %cond87 = phi i64 [ %cond83, %cond.end82 ], [ %124, %cond.false84 ]
  %cmp88 = icmp eq i64 %cond87, 4294967295
  br i1 %cmp88, label %if.then90, label %if.end203

if.then90:                                        ; preds = %cond.end86
  %125 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %125) #10
  %126 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr91 = getelementptr inbounds i8, i8* %126, i64 30
  %127 = bitcast i8* %add.ptr91 to i16*
  %128 = load i16, i16* %127, align 2, !tbaa !88
  %conv92 = zext i16 %128 to i32
  store i32 %conv92, i32* %extra_size_remaining, align 4, !tbaa !10
  %129 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %tobool93 = icmp ne i32 %129, 0
  br i1 %tobool93, label %if.then94, label %if.end199

if.then94:                                        ; preds = %if.then90
  %130 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %130) #10
  %131 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr95 = getelementptr inbounds i8, i8* %131, i64 46
  %132 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr96 = getelementptr inbounds i8, i8* %132, i64 28
  %133 = bitcast i8* %add.ptr96 to i16*
  %134 = load i16, i16* %133, align 2, !tbaa !88
  %conv97 = zext i16 %134 to i32
  %idx.ext98 = sext i32 %conv97 to i64
  %add.ptr99 = getelementptr inbounds i8, i8* %add.ptr95, i64 %idx.ext98
  store i8* %add.ptr99, i8** %pExtra_data, align 8, !tbaa !8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then94
  %135 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %135) #10
  %136 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %136) #10
  %137 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv100 = zext i32 %137 to i64
  %cmp101 = icmp ult i64 %conv100, 4
  br i1 %cmp101, label %if.then103, label %if.end105

if.then103:                                       ; preds = %do.body
  %138 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call104 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %138, i32 9)
  store i32 %call104, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup193

if.end105:                                        ; preds = %do.body
  %139 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %140 = bitcast i8* %139 to i16*
  %141 = load i16, i16* %140, align 2, !tbaa !88
  %conv106 = zext i16 %141 to i32
  store i32 %conv106, i32* %field_id, align 4, !tbaa !10
  %142 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr107 = getelementptr inbounds i8, i8* %142, i64 2
  %143 = bitcast i8* %add.ptr107 to i16*
  %144 = load i16, i16* %143, align 2, !tbaa !88
  %conv108 = zext i16 %144 to i32
  store i32 %conv108, i32* %field_data_size, align 4, !tbaa !10
  %145 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv109 = zext i32 %145 to i64
  %add = add i64 %conv109, 4
  %146 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv110 = zext i32 %146 to i64
  %cmp111 = icmp ugt i64 %add, %conv110
  br i1 %cmp111, label %if.then113, label %if.end115

if.then113:                                       ; preds = %if.end105
  %147 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call114 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %147, i32 9)
  store i32 %call114, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup193

if.end115:                                        ; preds = %if.end105
  %148 = load i32, i32* %field_id, align 4, !tbaa !10
  %cmp116 = icmp eq i32 %148, 1
  br i1 %cmp116, label %if.then118, label %if.end184

if.then118:                                       ; preds = %if.end115
  %149 = bitcast i8** %pField_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %149) #10
  %150 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr119 = getelementptr inbounds i8, i8* %150, i64 4
  store i8* %add.ptr119, i8** %pField_data, align 8, !tbaa !8
  %151 = bitcast i32* %field_data_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %151) #10
  %152 = load i32, i32* %field_data_size, align 4, !tbaa !10
  store i32 %152, i32* %field_data_remaining, align 4, !tbaa !10
  %153 = load i32*, i32** %pFound_zip64_extra_data.addr, align 8, !tbaa !8
  %tobool120 = icmp ne i32* %153, null
  br i1 %tobool120, label %if.then121, label %if.end122

if.then121:                                       ; preds = %if.then118
  %154 = load i32*, i32** %pFound_zip64_extra_data.addr, align 8, !tbaa !8
  store i32 1, i32* %154, align 4, !tbaa !10
  br label %if.end122

if.end122:                                        ; preds = %if.then121, %if.then118
  %155 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_uncomp_size123 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %155, i32 0, i32 9
  %156 = load i64, i64* %m_uncomp_size123, align 8, !tbaa !134
  %cmp124 = icmp eq i64 %156, 4294967295
  br i1 %cmp124, label %if.then126, label %if.end140

if.then126:                                       ; preds = %if.end122
  %157 = load i32, i32* %field_data_remaining, align 4, !tbaa !10
  %conv127 = zext i32 %157 to i64
  %cmp128 = icmp ult i64 %conv127, 8
  br i1 %cmp128, label %if.then130, label %if.end132

if.then130:                                       ; preds = %if.then126
  %158 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call131 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %158, i32 9)
  store i32 %call131, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end132:                                        ; preds = %if.then126
  %159 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %160 = bitcast i8* %159 to i32*
  %161 = load i32, i32* %160, align 4, !tbaa !10
  %conv133 = zext i32 %161 to i64
  %162 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %add.ptr134 = getelementptr inbounds i8, i8* %162, i64 4
  %163 = bitcast i8* %add.ptr134 to i32*
  %164 = load i32, i32* %163, align 4, !tbaa !10
  %conv135 = zext i32 %164 to i64
  %shl = shl i64 %conv135, 32
  %or = or i64 %conv133, %shl
  %165 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_uncomp_size136 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %165, i32 0, i32 9
  store i64 %or, i64* %m_uncomp_size136, align 8, !tbaa !134
  %166 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %add.ptr137 = getelementptr inbounds i8, i8* %166, i64 8
  store i8* %add.ptr137, i8** %pField_data, align 8, !tbaa !8
  %167 = load i32, i32* %field_data_remaining, align 4, !tbaa !10
  %conv138 = zext i32 %167 to i64
  %sub = sub i64 %conv138, 8
  %conv139 = trunc i64 %sub to i32
  store i32 %conv139, i32* %field_data_remaining, align 4, !tbaa !10
  br label %if.end140

if.end140:                                        ; preds = %if.end132, %if.end122
  %168 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comp_size141 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %168, i32 0, i32 8
  %169 = load i64, i64* %m_comp_size141, align 8, !tbaa !131
  %cmp142 = icmp eq i64 %169, 4294967295
  br i1 %cmp142, label %if.then144, label %if.end161

if.then144:                                       ; preds = %if.end140
  %170 = load i32, i32* %field_data_remaining, align 4, !tbaa !10
  %conv145 = zext i32 %170 to i64
  %cmp146 = icmp ult i64 %conv145, 8
  br i1 %cmp146, label %if.then148, label %if.end150

if.then148:                                       ; preds = %if.then144
  %171 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call149 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %171, i32 9)
  store i32 %call149, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end150:                                        ; preds = %if.then144
  %172 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %173 = bitcast i8* %172 to i32*
  %174 = load i32, i32* %173, align 4, !tbaa !10
  %conv151 = zext i32 %174 to i64
  %175 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %add.ptr152 = getelementptr inbounds i8, i8* %175, i64 4
  %176 = bitcast i8* %add.ptr152 to i32*
  %177 = load i32, i32* %176, align 4, !tbaa !10
  %conv153 = zext i32 %177 to i64
  %shl154 = shl i64 %conv153, 32
  %or155 = or i64 %conv151, %shl154
  %178 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_comp_size156 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %178, i32 0, i32 8
  store i64 %or155, i64* %m_comp_size156, align 8, !tbaa !131
  %179 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %add.ptr157 = getelementptr inbounds i8, i8* %179, i64 8
  store i8* %add.ptr157, i8** %pField_data, align 8, !tbaa !8
  %180 = load i32, i32* %field_data_remaining, align 4, !tbaa !10
  %conv158 = zext i32 %180 to i64
  %sub159 = sub i64 %conv158, 8
  %conv160 = trunc i64 %sub159 to i32
  store i32 %conv160, i32* %field_data_remaining, align 4, !tbaa !10
  br label %if.end161

if.end161:                                        ; preds = %if.end150, %if.end140
  %181 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_local_header_ofs162 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %181, i32 0, i32 12
  %182 = load i64, i64* %m_local_header_ofs162, align 8, !tbaa !135
  %cmp163 = icmp eq i64 %182, 4294967295
  br i1 %cmp163, label %if.then165, label %if.end182

if.then165:                                       ; preds = %if.end161
  %183 = load i32, i32* %field_data_remaining, align 4, !tbaa !10
  %conv166 = zext i32 %183 to i64
  %cmp167 = icmp ult i64 %conv166, 8
  br i1 %cmp167, label %if.then169, label %if.end171

if.then169:                                       ; preds = %if.then165
  %184 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call170 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %184, i32 9)
  store i32 %call170, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end171:                                        ; preds = %if.then165
  %185 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %186 = bitcast i8* %185 to i32*
  %187 = load i32, i32* %186, align 4, !tbaa !10
  %conv172 = zext i32 %187 to i64
  %188 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %add.ptr173 = getelementptr inbounds i8, i8* %188, i64 4
  %189 = bitcast i8* %add.ptr173 to i32*
  %190 = load i32, i32* %189, align 4, !tbaa !10
  %conv174 = zext i32 %190 to i64
  %shl175 = shl i64 %conv174, 32
  %or176 = or i64 %conv172, %shl175
  %191 = load %struct.mz_zip_archive_file_stat*, %struct.mz_zip_archive_file_stat** %pStat.addr, align 8, !tbaa !8
  %m_local_header_ofs177 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %191, i32 0, i32 12
  store i64 %or176, i64* %m_local_header_ofs177, align 8, !tbaa !135
  %192 = load i8*, i8** %pField_data, align 8, !tbaa !8
  %add.ptr178 = getelementptr inbounds i8, i8* %192, i64 8
  store i8* %add.ptr178, i8** %pField_data, align 8, !tbaa !8
  %193 = load i32, i32* %field_data_remaining, align 4, !tbaa !10
  %conv179 = zext i32 %193 to i64
  %sub180 = sub i64 %conv179, 8
  %conv181 = trunc i64 %sub180 to i32
  store i32 %conv181, i32* %field_data_remaining, align 4, !tbaa !10
  br label %if.end182

if.end182:                                        ; preds = %if.end171, %if.end161
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end182, %if.then169, %if.then148, %if.then130
  %194 = bitcast i32* %field_data_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %194) #10
  %195 = bitcast i8** %pField_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %195) #10
  br label %cleanup193

if.end184:                                        ; preds = %if.end115
  %196 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv185 = zext i32 %196 to i64
  %add186 = add i64 4, %conv185
  %197 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr187 = getelementptr inbounds i8, i8* %197, i64 %add186
  store i8* %add.ptr187, i8** %pExtra_data, align 8, !tbaa !8
  %198 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv188 = zext i32 %198 to i64
  %sub189 = sub i64 %conv188, 4
  %199 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv190 = zext i32 %199 to i64
  %sub191 = sub i64 %sub189, %conv190
  %conv192 = trunc i64 %sub191 to i32
  store i32 %conv192, i32* %extra_size_remaining, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup193

cleanup193:                                       ; preds = %if.end184, %cleanup, %if.then113, %if.then103
  %200 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %200) #10
  %201 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %201) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup196 [
    i32 0, label %cleanup.cont
    i32 2, label %do.end
  ]

cleanup.cont:                                     ; preds = %cleanup193
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont
  %202 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %tobool195 = icmp ne i32 %202, 0
  br i1 %tobool195, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %cleanup193
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup196

cleanup196:                                       ; preds = %do.end, %cleanup193
  %203 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %203) #10
  %cleanup.dest197 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest197, label %cleanup200 [
    i32 0, label %cleanup.cont198
  ]

cleanup.cont198:                                  ; preds = %cleanup196
  br label %if.end199

if.end199:                                        ; preds = %cleanup.cont198, %if.then90
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup200

cleanup200:                                       ; preds = %if.end199, %cleanup196
  %204 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %204) #10
  %cleanup.dest201 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest201, label %cleanup204 [
    i32 0, label %cleanup.cont202
  ]

cleanup.cont202:                                  ; preds = %cleanup200
  br label %if.end203

if.end203:                                        ; preds = %cleanup.cont202, %cond.end86
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup204

cleanup204:                                       ; preds = %if.end203, %cleanup200, %if.then3
  %205 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %205) #10
  %206 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %206) #10
  %207 = load i32, i32* %retval, align 4
  ret i32 %207
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i32 @mz_zip_array_resize(%struct.mz_zip_archive* %pZip, %struct.mz_zip_array* %pArray, i64 %new_size, i32 %growing) #9 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  %new_size.addr = alloca i64, align 8
  %growing.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  store i64 %new_size, i64* %new_size.addr, align 8, !tbaa !4
  store i32 %growing, i32* %growing.addr, align 4, !tbaa !10
  %0 = load i64, i64* %new_size.addr, align 8, !tbaa !4
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_capacity = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %1, i32 0, i32 2
  %2 = load i64, i64* %m_capacity, align 8, !tbaa !173
  %cmp = icmp ugt i64 %0, %2
  br i1 %cmp, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %4 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %5 = load i64, i64* %new_size.addr, align 8, !tbaa !4
  %6 = load i32, i32* %growing.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %3, %struct.mz_zip_array* %4, i64 %5, i32 %6)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then1

if.then1:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end2

if.end2:                                          ; preds = %if.end, %entry
  %7 = load i64, i64* %new_size.addr, align 8, !tbaa !4
  %8 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %8, i32 0, i32 1
  store i64 %7, i64* %m_size, align 8, !tbaa !174
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end2, %if.then1
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

declare i32 @memcmp(i8*, i8*, i64) #2

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal void @mz_zip_array_clear(%struct.mz_zip_archive* %pZip, %struct.mz_zip_array* %pArray) #9 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 8
  %1 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 10
  %3 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %4 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %4, i32 0, i32 0
  %5 = load i8*, i8** %m_p, align 8, !tbaa !164
  call void %1(i8* %3, i8* %5)
  %6 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %7 = bitcast %struct.mz_zip_array* %6 to i8*
  %8 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %9 = bitcast %struct.mz_zip_array* %8 to i8*
  %10 = call i64 @llvm.objectsize.i64.p0i8(i8* %9, i1 false, i1 true, i1 false)
  %call = call i8* @__memset_chk(i8* %7, i32 0, i64 32, i64 %10) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mz_zip_compute_crc32_callback(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %p = alloca i32*, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8, !tbaa !76
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = bitcast i32** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %2 = bitcast i8* %1 to i32*
  store i32* %2, i32** %p, align 8, !tbaa !8
  %3 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %4 = load i32*, i32** %p, align 8, !tbaa !8
  %5 = load i32, i32* %4, align 4, !tbaa !10
  %conv = zext i32 %5 to i64
  %6 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %7 = load i64, i64* %n.addr, align 8, !tbaa !4
  %call = call i64 @mz_crc32(i64 %conv, i8* %6, i64 %7)
  %conv1 = trunc i64 %call to i32
  %8 = load i32*, i32** %p, align 8, !tbaa !8
  store i32 %conv1, i32* %8, align 4, !tbaa !10
  %9 = load i64, i64* %n.addr, align 8, !tbaa !4
  %10 = bitcast i32** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %10) #10
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_validate_archive(%struct.mz_zip_archive* %pZip, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %flags.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %i = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %found_index = alloca i32, align 4
  %stat = alloca %struct.mz_zip_archive_file_stat, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 7
  %6 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %6, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 8
  %8 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %tobool5 = icmp ne void (i8*, i8*)* %8, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 11
  %10 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %tobool7 = icmp ne i64 (i8*, i64, i8*, i64)* %10, null
  br i1 %tobool7, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %11, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

if.end:                                           ; preds = %lor.lhs.false6
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState8 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 15
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState8, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %13, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %14 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %14, i32 0, i32 4
  %15 = load i32, i32* %m_zip64, align 4, !tbaa !118
  %tobool9 = icmp ne i32 %15, 0
  br i1 %tobool9, label %if.else, label %if.then10

if.then10:                                        ; preds = %if.end
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 2
  %17 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp = icmp ugt i32 %17, 65535
  br i1 %cmp, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.then10
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call12 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %18, i32 29)
  store i32 %call12, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

if.end13:                                         ; preds = %if.then10
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 0
  %20 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %cmp14 = icmp ugt i64 %20, 4294967295
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end13
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call16 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %21, i32 29)
  store i32 %call16, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

if.end17:                                         ; preds = %if.end13
  br label %if.end27

if.else:                                          ; preds = %if.end
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files18 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %22, i32 0, i32 2
  %23 = load i32, i32* %m_total_files18, align 8, !tbaa !113
  %cmp19 = icmp uge i32 %23, -1
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.else
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call21 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %24, i32 29)
  store i32 %call21, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

if.end22:                                         ; preds = %if.else
  %25 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %25, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %26 = load i64, i64* %m_size, align 8, !tbaa !175
  %cmp23 = icmp uge i64 %26, 4294967295
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end22
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call25 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %27, i32 29)
  store i32 %call25, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

if.end26:                                         ; preds = %if.end22
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end17
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end27
  %28 = load i32, i32* %i, align 4, !tbaa !10
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files28 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 2
  %30 = load i32, i32* %m_total_files28, align 8, !tbaa !113
  %cmp29 = icmp ult i32 %28, %30
  br i1 %cmp29, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %31 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 4096, %31
  %tobool30 = icmp ne i32 %and, 0
  br i1 %tobool30, label %if.then31, label %if.end45

if.then31:                                        ; preds = %for.body
  %32 = bitcast i32* %found_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %32) #10
  %33 = bitcast %struct.mz_zip_archive_file_stat* %stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 1112, i8* %33) #10
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %35 = load i32, i32* %i, align 4, !tbaa !10
  %call32 = call i32 @mz_zip_reader_file_stat(%struct.mz_zip_archive* %34, i32 %35, %struct.mz_zip_archive_file_stat* %stat)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.end35, label %if.then34

if.then34:                                        ; preds = %if.then31
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end35:                                         ; preds = %if.then31
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_filename = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %stat, i32 0, i32 17
  %arraydecay = getelementptr inbounds [512 x i8], [512 x i8]* %m_filename, i64 0, i64 0
  %call36 = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %36, i8* %arraydecay, i8* null, i32 0, i32* %found_index)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end39, label %if.then38

if.then38:                                        ; preds = %if.end35
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end39:                                         ; preds = %if.end35
  %37 = load i32, i32* %found_index, align 4, !tbaa !10
  %38 = load i32, i32* %i, align 4, !tbaa !10
  %cmp40 = icmp ne i32 %37, %38
  br i1 %cmp40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end39
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call42 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %39, i32 30)
  store i32 %call42, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end43:                                         ; preds = %if.end39
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end43, %if.then41, %if.then38, %if.then34
  %40 = bitcast %struct.mz_zip_archive_file_stat* %stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 1112, i8* %40) #10
  %41 = bitcast i32* %found_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup50 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end45

if.end45:                                         ; preds = %cleanup.cont, %for.body
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %43 = load i32, i32* %i, align 4, !tbaa !10
  %44 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call46 = call i32 @mz_zip_validate_file(%struct.mz_zip_archive* %42, i32 %43, i32 %44)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.end49, label %if.then48

if.then48:                                        ; preds = %if.end45
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

if.end49:                                         ; preds = %if.end45
  br label %for.inc

for.inc:                                          ; preds = %if.end49
  %45 = load i32, i32* %i, align 4, !tbaa !10
  %inc = add i32 %45, 1
  store i32 %inc, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup50

cleanup50:                                        ; preds = %for.end, %if.then48, %cleanup, %if.then24, %if.then20, %if.then15, %if.then11, %if.then
  %46 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %46) #10
  %47 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #10
  %48 = load i32, i32* %retval, align 4
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_validate_mem_archive(i8* %pMem, i64 %size, i32 %flags, i32* %pErr) #0 {
entry:
  %retval = alloca i32, align 4
  %pMem.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pErr.addr = alloca i32*, align 8
  %success = alloca i32, align 4
  %zip = alloca %struct.mz_zip_archive, align 8
  %actual_err = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pMem, i8** %pMem.addr, align 8, !tbaa !8
  store i64 %size, i64* %size.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  store i32* %pErr, i32** %pErr.addr, align 8, !tbaa !8
  %0 = bitcast i32* %success to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 1, i32* %success, align 4, !tbaa !10
  %1 = bitcast %struct.mz_zip_archive* %zip to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %1) #10
  %2 = bitcast i32* %actual_err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  store i32 0, i32* %actual_err, align 4, !tbaa !12
  %3 = load i8*, i8** %pMem.addr, align 8, !tbaa !8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %4 = load i64, i64* %size.addr, align 8, !tbaa !4
  %tobool1 = icmp ne i64 %4, 0
  br i1 %tobool1, label %if.end4, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool2 = icmp ne i32* %5, null
  br i1 %tobool2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %6 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 24, i32* %6, align 4, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %lor.lhs.false
  call void @mz_zip_zero_struct(%struct.mz_zip_archive* %zip)
  %7 = load i8*, i8** %pMem.addr, align 8, !tbaa !8
  %8 = load i64, i64* %size.addr, align 8, !tbaa !4
  %9 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_init_mem(%struct.mz_zip_archive* %zip, i8* %7, i64 %8, i32 %9)
  %tobool5 = icmp ne i32 %call, 0
  br i1 %tobool5, label %if.end10, label %if.then6

if.then6:                                         ; preds = %if.end4
  %10 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool7 = icmp ne i32* %10, null
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.then6
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %11 = load i32, i32* %m_last_error, align 4, !tbaa !103
  %12 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %11, i32* %12, align 4, !tbaa !12
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.then6
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end10:                                         ; preds = %if.end4
  %13 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call11 = call i32 @mz_zip_validate_archive(%struct.mz_zip_archive* %zip, i32 %13)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end15, label %if.then13

if.then13:                                        ; preds = %if.end10
  %m_last_error14 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %14 = load i32, i32* %m_last_error14, align 4, !tbaa !103
  store i32 %14, i32* %actual_err, align 4, !tbaa !12
  store i32 0, i32* %success, align 4, !tbaa !10
  br label %if.end15

if.end15:                                         ; preds = %if.then13, %if.end10
  %15 = load i32, i32* %success, align 4, !tbaa !10
  %call16 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %zip, i32 %15)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end23, label %if.then18

if.then18:                                        ; preds = %if.end15
  %16 = load i32, i32* %actual_err, align 4, !tbaa !12
  %tobool19 = icmp ne i32 %16, 0
  br i1 %tobool19, label %if.end22, label %if.then20

if.then20:                                        ; preds = %if.then18
  %m_last_error21 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %17 = load i32, i32* %m_last_error21, align 4, !tbaa !103
  store i32 %17, i32* %actual_err, align 4, !tbaa !12
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.then18
  store i32 0, i32* %success, align 4, !tbaa !10
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.end15
  %18 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool24 = icmp ne i32* %18, null
  br i1 %tobool24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end23
  %19 = load i32, i32* %actual_err, align 4, !tbaa !12
  %20 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %19, i32* %20, align 4, !tbaa !12
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %if.end23
  %21 = load i32, i32* %success, align 4, !tbaa !10
  store i32 %21, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end26, %if.end9, %if.end
  %22 = bitcast i32* %actual_err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #10
  %23 = bitcast %struct.mz_zip_archive* %zip to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %23) #10
  %24 = bitcast i32* %success to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #10
  %25 = load i32, i32* %retval, align 4
  ret i32 %25
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_validate_file_archive(i8* %pFilename, i32 %flags, i32* %pErr) #0 {
entry:
  %retval = alloca i32, align 4
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pErr.addr = alloca i32*, align 8
  %success = alloca i32, align 4
  %zip = alloca %struct.mz_zip_archive, align 8
  %actual_err = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  store i32* %pErr, i32** %pErr.addr, align 8, !tbaa !8
  %0 = bitcast i32* %success to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 1, i32* %success, align 4, !tbaa !10
  %1 = bitcast %struct.mz_zip_archive* %zip to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %1) #10
  %2 = bitcast i32* %actual_err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  store i32 0, i32* %actual_err, align 4, !tbaa !12
  %3 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %if.end3, label %if.then

if.then:                                          ; preds = %entry
  %4 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool1 = icmp ne i32* %4, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 24, i32* %5, align 4, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end3:                                          ; preds = %entry
  call void @mz_zip_zero_struct(%struct.mz_zip_archive* %zip)
  %6 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %7 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %zip, i8* %6, i32 %7, i64 0, i64 0)
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.end9, label %if.then5

if.then5:                                         ; preds = %if.end3
  %8 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool6 = icmp ne i32* %8, null
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.then5
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %9 = load i32, i32* %m_last_error, align 4, !tbaa !103
  %10 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %9, i32* %10, align 4, !tbaa !12
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.then5
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.end3
  %11 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call10 = call i32 @mz_zip_validate_archive(%struct.mz_zip_archive* %zip, i32 %11)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.end9
  %m_last_error13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %12 = load i32, i32* %m_last_error13, align 4, !tbaa !103
  store i32 %12, i32* %actual_err, align 4, !tbaa !12
  store i32 0, i32* %success, align 4, !tbaa !10
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.end9
  %13 = load i32, i32* %success, align 4, !tbaa !10
  %call15 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %zip, i32 %13)
  %tobool16 = icmp ne i32 %call15, 0
  br i1 %tobool16, label %if.end22, label %if.then17

if.then17:                                        ; preds = %if.end14
  %14 = load i32, i32* %actual_err, align 4, !tbaa !12
  %tobool18 = icmp ne i32 %14, 0
  br i1 %tobool18, label %if.end21, label %if.then19

if.then19:                                        ; preds = %if.then17
  %m_last_error20 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip, i32 0, i32 5
  %15 = load i32, i32* %m_last_error20, align 4, !tbaa !103
  store i32 %15, i32* %actual_err, align 4, !tbaa !12
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.then17
  store i32 0, i32* %success, align 4, !tbaa !10
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end14
  %16 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool23 = icmp ne i32* %16, null
  br i1 %tobool23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end22
  %17 = load i32, i32* %actual_err, align 4, !tbaa !12
  %18 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %17, i32* %18, align 4, !tbaa !12
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.end22
  %19 = load i32, i32* %success, align 4, !tbaa !10
  store i32 %19, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end25, %if.end8, %if.end
  %20 = bitcast i32* %actual_err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %20) #10
  %21 = bitcast %struct.mz_zip_archive* %zip to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %21) #10
  %22 = bitcast i32* %success to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %22) #10
  %23 = load i32, i32* %retval, align 4
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %pZip, i64 %existing_size, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %existing_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %zip64 = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i64 %existing_size, i64* %existing_size.addr, align 8, !tbaa !76
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast i32* %zip64 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %1, 16384
  %cmp = icmp ne i32 %and, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %zip64, align 4, !tbaa !10
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 12
  %6 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %tobool3 = icmp ne i64 (i8*, i64, i8*, i64)* %6, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 3
  %8 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp5 = icmp ne i32 %8, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %9, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false4
  %10 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and7 = and i32 %10, 32768
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 11
  %12 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %tobool10 = icmp ne i64 (i8*, i64, i8*, i64)* %12, null
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.then9
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call12 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %13, i32 24)
  store i32 %call12, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %if.then9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 6
  %15 = load i64, i64* %m_file_offset_alignment, align 8, !tbaa !177
  %tobool15 = icmp ne i64 %15, 0
  br i1 %tobool15, label %if.then16, label %if.end24

if.then16:                                        ; preds = %if.end14
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment17 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 6
  %17 = load i64, i64* %m_file_offset_alignment17, align 8, !tbaa !177
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment18 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 6
  %19 = load i64, i64* %m_file_offset_alignment18, align 8, !tbaa !177
  %sub = sub i64 %19, 1
  %and19 = and i64 %17, %sub
  %tobool20 = icmp ne i64 %and19, 0
  br i1 %tobool20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.then16
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call22 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %20, i32 24)
  store i32 %call22, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end23:                                         ; preds = %if.then16
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end14
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 7
  %22 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %tobool25 = icmp ne i8* (i8*, i64, i64)* %22, null
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc27 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 7
  store i8* (i8*, i64, i64)* @miniz_def_alloc_func, i8* (i8*, i64, i64)** %m_pAlloc27, align 8, !tbaa !100
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %24, i32 0, i32 8
  %25 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %tobool29 = icmp ne void (i8*, i8*)* %25, null
  br i1 %tobool29, label %if.end32, label %if.then30

if.then30:                                        ; preds = %if.end28
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 8
  store void (i8*, i8*)* @miniz_def_free_func, void (i8*, i8*)** %m_pFree31, align 8, !tbaa !101
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %27, i32 0, i32 9
  %28 = load i8* (i8*, i8*, i64, i64)*, i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8, !tbaa !111
  %tobool33 = icmp ne i8* (i8*, i8*, i64, i64)* %28, null
  br i1 %tobool33, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRealloc35 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 9
  store i8* (i8*, i8*, i64, i64)* @miniz_def_realloc_func, i8* (i8*, i8*, i64, i64)** %m_pRealloc35, align 8, !tbaa !111
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %30 = load i64, i64* %existing_size.addr, align 8, !tbaa !76
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %31, i32 0, i32 0
  store i64 %30, i64* %m_archive_size, align 8, !tbaa !110
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %32, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs, align 8, !tbaa !112
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 2
  store i32 0, i32* %m_total_files, align 8, !tbaa !113
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc37 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 7
  %35 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc37, align 8, !tbaa !100
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 10
  %37 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %call38 = call i8* %35(i8* %37, i64 1, i64 152)
  %38 = bitcast i8* %call38 to %struct.mz_zip_internal_state_tag*
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState39 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %39, i32 0, i32 15
  store %struct.mz_zip_internal_state_tag* %38, %struct.mz_zip_internal_state_tag** %m_pState39, align 8, !tbaa !98
  %cmp40 = icmp eq %struct.mz_zip_internal_state_tag* null, %38
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.end36
  %40 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call43 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %40, i32 16)
  store i32 %call43, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end44:                                         ; preds = %if.end36
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState45 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %41, i32 0, i32 15
  %42 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState45, align 8, !tbaa !98
  %43 = bitcast %struct.mz_zip_internal_state_tag* %42 to i8*
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState46 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 15
  %45 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState46, align 8, !tbaa !98
  %46 = bitcast %struct.mz_zip_internal_state_tag* %45 to i8*
  %47 = call i64 @llvm.objectsize.i64.p0i8(i8* %46, i1 false, i1 true, i1 false)
  %call47 = call i8* @__memset_chk(i8* %43, i32 0, i64 152, i64 %47) #10
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState48 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %48, i32 0, i32 15
  %49 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState48, align 8, !tbaa !98
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %49, i32 0, i32 0
  %m_element_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 3
  store i32 1, i32* %m_element_size, align 8, !tbaa !114
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState49 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %50, i32 0, i32 15
  %51 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState49, align 8, !tbaa !98
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %51, i32 0, i32 1
  %m_element_size50 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size50, align 8, !tbaa !115
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState51 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %52, i32 0, i32 15
  %53 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState51, align 8, !tbaa !98
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %53, i32 0, i32 2
  %m_element_size52 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 3
  store i32 4, i32* %m_element_size52, align 8, !tbaa !116
  %54 = load i32, i32* %zip64, align 4, !tbaa !10
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState53 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %55, i32 0, i32 15
  %56 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState53, align 8, !tbaa !98
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %56, i32 0, i32 4
  store i32 %54, i32* %m_zip64, align 4, !tbaa !118
  %57 = load i32, i32* %zip64, align 4, !tbaa !10
  %58 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState54 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %58, i32 0, i32 15
  %59 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState54, align 8, !tbaa !98
  %m_zip64_has_extended_info_fields = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %59, i32 0, i32 5
  store i32 %57, i32* %m_zip64_has_extended_info_fields, align 8, !tbaa !119
  %60 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %60, i32 0, i32 4
  store i32 1, i32* %m_zip_type, align 8, !tbaa !107
  %61 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode55 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %61, i32 0, i32 3
  store i32 2, i32* %m_zip_mode55, align 4, !tbaa !102
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end44, %if.then42, %if.then21, %if.then11, %if.then
  %62 = bitcast i32* %zip64 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %62) #10
  %63 = load i32, i32* %retval, align 4
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init(%struct.mz_zip_archive* %pZip, i64 %existing_size) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %existing_size.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i64 %existing_size, i64* %existing_size.addr, align 8, !tbaa !76
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i64, i64* %existing_size.addr, align 8, !tbaa !76
  %call = call i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %0, i64 %1, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init_heap_v2(%struct.mz_zip_archive* %pZip, i64 %size_to_reserve_at_beginning, i64 %initial_allocation_size, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  %initial_allocation_size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !4
  store i64 %initial_allocation_size, i64* %initial_allocation_size.addr, align 8, !tbaa !4
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_heap_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8, !tbaa !124
  %2 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %2, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_mem_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = bitcast %struct.mz_zip_archive* %4 to i8*
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 14
  store i8* %5, i8** %m_pIO_opaque, align 8, !tbaa !120
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %8 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !4
  %9 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %7, i64 %8, i32 %9)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 4
  store i32 3, i32* %m_zip_type, align 8, !tbaa !107
  %11 = load i64, i64* %initial_allocation_size.addr, align 8, !tbaa !4
  %12 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !4
  %cmp = icmp ugt i64 %11, %12
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end3
  %13 = load i64, i64* %initial_allocation_size.addr, align 8, !tbaa !4
  br label %cond.end

cond.false:                                       ; preds = %if.end3
  %14 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %13, %cond.true ], [ %14, %cond.false ]
  store i64 %cond, i64* %initial_allocation_size.addr, align 8, !tbaa !4
  %cmp4 = icmp ne i64 0, %cond
  br i1 %cmp4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %cond.end
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 7
  %16 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 10
  %18 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %19 = load i64, i64* %initial_allocation_size.addr, align 8, !tbaa !4
  %call6 = call i8* %16(i8* %18, i64 1, i64 %19)
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %20, i32 0, i32 15
  %21 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %21, i32 0, i32 8
  store i8* %call6, i8** %m_pMem, align 8, !tbaa !125
  %cmp7 = icmp eq i8* null, %call6
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.then5
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call9 = call i32 @mz_zip_writer_end_internal(%struct.mz_zip_archive* %22, i32 0)
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call10 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %23, i32 16)
  store i32 %call10, i32* %retval, align 4
  br label %return

if.end11:                                         ; preds = %if.then5
  %24 = load i64, i64* %initial_allocation_size.addr, align 8, !tbaa !4
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState12 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 15
  %26 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState12, align 8, !tbaa !98
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %26, i32 0, i32 10
  store i64 %24, i64* %m_mem_capacity, align 8, !tbaa !178
  br label %if.end13

if.end13:                                         ; preds = %if.end11, %cond.end
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end13, %if.then8, %if.then2
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mz_zip_heap_write_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %new_size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %pNew_block = alloca i8*, align 8
  %new_capacity = alloca i64, align 8
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8, !tbaa !76
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = bitcast %struct.mz_zip_archive** %pZip to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %2 = bitcast i8* %1 to %struct.mz_zip_archive*
  store %struct.mz_zip_archive* %2, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %3 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 15
  %5 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %5, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %6 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %8 = load i64, i64* %n.addr, align 8, !tbaa !4
  %add = add i64 %7, %8
  %9 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %9, i32 0, i32 9
  %10 = load i64, i64* %m_mem_size, align 8, !tbaa !126
  %cmp = icmp ugt i64 %add, %10
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %12 = load i64, i64* %n.addr, align 8, !tbaa !4
  %add1 = add i64 %11, %12
  br label %cond.end

cond.false:                                       ; preds = %entry
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_size2 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %13, i32 0, i32 9
  %14 = load i64, i64* %m_mem_size2, align 8, !tbaa !126
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add1, %cond.true ], [ %14, %cond.false ]
  store i64 %cond, i64* %new_size, align 8, !tbaa !76
  %15 = load i64, i64* %n.addr, align 8, !tbaa !4
  %tobool = icmp ne i64 %15, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup26

if.end:                                           ; preds = %cond.end
  %16 = load i64, i64* %new_size, align 8, !tbaa !76
  %17 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %17, i32 0, i32 10
  %18 = load i64, i64* %m_mem_capacity, align 8, !tbaa !178
  %cmp3 = icmp ugt i64 %16, %18
  br i1 %cmp3, label %if.then4, label %if.end20

if.then4:                                         ; preds = %if.end
  %19 = bitcast i8** %pNew_block to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #10
  %20 = bitcast i64* %new_capacity to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20) #10
  %21 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_capacity5 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %21, i32 0, i32 10
  %22 = load i64, i64* %m_mem_capacity5, align 8, !tbaa !178
  %cmp6 = icmp ugt i64 64, %22
  br i1 %cmp6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.then4
  br label %cond.end10

cond.false8:                                      ; preds = %if.then4
  %23 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_capacity9 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %23, i32 0, i32 10
  %24 = load i64, i64* %m_mem_capacity9, align 8, !tbaa !178
  br label %cond.end10

cond.end10:                                       ; preds = %cond.false8, %cond.true7
  %cond11 = phi i64 [ 64, %cond.true7 ], [ %24, %cond.false8 ]
  store i64 %cond11, i64* %new_capacity, align 8, !tbaa !4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end10
  %25 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %26 = load i64, i64* %new_size, align 8, !tbaa !76
  %cmp12 = icmp ult i64 %25, %26
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %27 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %mul = mul i64 %27, 2
  store i64 %mul, i64* %new_capacity, align 8, !tbaa !4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 9
  %29 = load i8* (i8*, i8*, i64, i64)*, i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8, !tbaa !111
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 10
  %31 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %32 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %32, i32 0, i32 8
  %33 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %34 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %call = call i8* %29(i8* %31, i8* %33, i64 1, i64 %34)
  store i8* %call, i8** %pNew_block, align 8, !tbaa !8
  %cmp13 = icmp eq i8* null, %call
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %while.end
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %call15 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %35, i32 16)
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end16:                                         ; preds = %while.end
  %36 = load i8*, i8** %pNew_block, align 8, !tbaa !8
  %37 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pMem17 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %37, i32 0, i32 8
  store i8* %36, i8** %m_pMem17, align 8, !tbaa !125
  %38 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %39 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_capacity18 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %39, i32 0, i32 10
  store i64 %38, i64* %m_mem_capacity18, align 8, !tbaa !178
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end16, %if.then14
  %40 = bitcast i64* %new_capacity to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #10
  %41 = bitcast i8** %pNew_block to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %41) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup26 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end20

if.end20:                                         ; preds = %cleanup.cont, %if.end
  %42 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pMem21 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %42, i32 0, i32 8
  %43 = load i8*, i8** %m_pMem21, align 8, !tbaa !125
  %44 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %add.ptr = getelementptr inbounds i8, i8* %43, i64 %44
  %45 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %46 = load i64, i64* %n.addr, align 8, !tbaa !4
  %47 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pMem22 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %47, i32 0, i32 8
  %48 = load i8*, i8** %m_pMem22, align 8, !tbaa !125
  %49 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %add.ptr23 = getelementptr inbounds i8, i8* %48, i64 %49
  %50 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr23, i1 false, i1 true, i1 false)
  %call24 = call i8* @__memcpy_chk(i8* %add.ptr, i8* %45, i64 %46, i64 %50) #10
  %51 = load i64, i64* %new_size, align 8, !tbaa !76
  %52 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_size25 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %52, i32 0, i32 9
  store i64 %51, i64* %m_mem_size25, align 8, !tbaa !126
  %53 = load i64, i64* %n.addr, align 8, !tbaa !4
  store i64 %53, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup26

cleanup26:                                        ; preds = %if.end20, %cleanup, %if.then
  %54 = bitcast i64* %new_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %54) #10
  %55 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %55) #10
  %56 = bitcast %struct.mz_zip_archive** %pZip to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %56) #10
  %57 = load i64, i64* %retval, align 8
  ret i64 %57
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_end_internal(%struct.mz_zip_archive* %pZip, i32 %set_last_error) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %set_last_error.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %set_last_error, i32* %set_last_error.addr, align 4, !tbaa !10
  %0 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  store i32 1, i32* %status, align 4, !tbaa !10
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %2, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %4, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 7
  %6 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %tobool3 = icmp ne i8* (i8*, i64, i64)* %6, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 8
  %8 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %tobool5 = icmp ne void (i8*, i8*)* %8, null
  br i1 %tobool5, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false4
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 3
  %10 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp = icmp ne i32 %10, 2
  br i1 %cmp, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %lor.lhs.false6
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 3
  %12 = load i32, i32* %m_zip_mode7, align 4, !tbaa !102
  %cmp8 = icmp ne i32 %12, 3
  br i1 %cmp8, label %if.then, label %if.end11

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %13 = load i32, i32* %set_last_error.addr, align 4, !tbaa !10
  %tobool9 = icmp ne i32 %13, 0
  br i1 %tobool9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %14, i32 24)
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end11:                                         ; preds = %land.lhs.true, %lor.lhs.false6
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState12 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 15
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState12, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %16, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 15
  store %struct.mz_zip_internal_state_tag* null, %struct.mz_zip_internal_state_tag** %m_pState13, align 8, !tbaa !98
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %19 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %19, i32 0, i32 0
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %18, %struct.mz_zip_array* %m_central_dir)
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %21 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %21, i32 0, i32 1
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %20, %struct.mz_zip_array* %m_central_dir_offsets)
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %23 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %23, i32 0, i32 2
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %22, %struct.mz_zip_array* %m_sorted_central_dir_offsets)
  %24 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %24, i32 0, i32 6
  %25 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %tobool14 = icmp ne %struct.__sFILE* %25, null
  br i1 %tobool14, label %if.then15, label %if.end29

if.then15:                                        ; preds = %if.end11
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 4
  %27 = load i32, i32* %m_zip_type, align 8, !tbaa !107
  %cmp16 = icmp eq i32 %27, 4
  br i1 %cmp16, label %if.then17, label %if.end27

if.then17:                                        ; preds = %if.then15
  %28 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile18 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %28, i32 0, i32 6
  %29 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile18, align 8, !tbaa !104
  %call19 = call i32 @fclose(%struct.__sFILE* %29)
  %cmp20 = icmp eq i32 %call19, -1
  br i1 %cmp20, label %if.then21, label %if.end26

if.then21:                                        ; preds = %if.then17
  %30 = load i32, i32* %set_last_error.addr, align 4, !tbaa !10
  %tobool22 = icmp ne i32 %30, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.then21
  %31 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call24 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %31, i32 21)
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.then21
  store i32 0, i32* %status, align 4, !tbaa !10
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then17
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then15
  %32 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile28 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %32, i32 0, i32 6
  store %struct.__sFILE* null, %struct.__sFILE** %m_pFile28, align 8, !tbaa !104
  br label %if.end29

if.end29:                                         ; preds = %if.end27, %if.end11
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 12
  %34 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %cmp30 = icmp eq i64 (i8*, i64, i8*, i64)* %34, @mz_zip_heap_write_func
  br i1 %cmp30, label %land.lhs.true31, label %if.end37

land.lhs.true31:                                  ; preds = %if.end29
  %35 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %35, i32 0, i32 8
  %36 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %tobool32 = icmp ne i8* %36, null
  br i1 %tobool32, label %if.then33, label %if.end37

if.then33:                                        ; preds = %land.lhs.true31
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree34 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %37, i32 0, i32 8
  %38 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree34, align 8, !tbaa !101
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %39, i32 0, i32 10
  %40 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %41 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pMem35 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %41, i32 0, i32 8
  %42 = load i8*, i8** %m_pMem35, align 8, !tbaa !125
  call void %38(i8* %40, i8* %42)
  %43 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pMem36 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %43, i32 0, i32 8
  store i8* null, i8** %m_pMem36, align 8, !tbaa !125
  br label %if.end37

if.end37:                                         ; preds = %if.then33, %land.lhs.true31, %if.end29
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree38 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 8
  %45 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree38, align 8, !tbaa !101
  %46 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque39 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %46, i32 0, i32 10
  %47 = load i8*, i8** %m_pAlloc_opaque39, align 8, !tbaa !108
  %48 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %49 = bitcast %struct.mz_zip_internal_state_tag* %48 to i8*
  call void %45(i8* %47, i8* %49)
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode40 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %50, i32 0, i32 3
  store i32 0, i32* %m_zip_mode40, align 4, !tbaa !102
  %51 = load i32, i32* %status, align 4, !tbaa !10
  store i32 %51, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end37, %if.end
  %52 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %52) #10
  %53 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %53) #10
  %54 = load i32, i32* %retval, align 4
  ret i32 %54
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init_heap(%struct.mz_zip_archive* %pZip, i64 %size_to_reserve_at_beginning, i64 %initial_allocation_size) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  %initial_allocation_size.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !4
  store i64 %initial_allocation_size, i64* %initial_allocation_size.addr, align 8, !tbaa !4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !4
  %2 = load i64, i64* %initial_allocation_size.addr, align 8, !tbaa !4
  %call = call i32 @mz_zip_writer_init_heap_v2(%struct.mz_zip_archive* %0, i64 %1, i64 %2, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init_file(%struct.mz_zip_archive* %pZip, i8* %pFilename, i64 %size_to_reserve_at_beginning) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %2 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  %call = call i32 @mz_zip_writer_init_file_v2(%struct.mz_zip_archive* %0, i8* %1, i64 %2, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init_file_v2(%struct.mz_zip_archive* %pZip, i8* %pFilename, i64 %size_to_reserve_at_beginning, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %size_to_reserve_at_beginning.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %pFile = alloca %struct.__sFILE*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %cur_ofs = alloca i64, align 8
  %buf = alloca [4096 x i8], align 16
  %n = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i64 %size_to_reserve_at_beginning, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.__sFILE** %pFile to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8, !tbaa !124
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %3, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %6 = bitcast %struct.mz_zip_archive* %5 to i8*
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 14
  store i8* %6, i8** %m_pIO_opaque, align 8, !tbaa !120
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %9 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  %10 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %8, i64 %9, i32 %10)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup29

if.end3:                                          ; preds = %if.end
  %11 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %12 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and4 = and i32 %12, 32768
  %tobool5 = icmp ne i32 %and4, 0
  %13 = zext i1 %tobool5 to i64
  %cond = select i1 %tobool5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0)
  %call6 = call %struct.__sFILE* @"\01_fopen"(i8* %11, i8* %cond)
  store %struct.__sFILE* %call6, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %cmp = icmp eq %struct.__sFILE* null, %call6
  br i1 %cmp, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.end3
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call8 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive* %14)
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call9 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %15, i32 17)
  store i32 %call9, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup29

if.end10:                                         ; preds = %if.end3
  %16 = load %struct.__sFILE*, %struct.__sFILE** %pFile, align 8, !tbaa !8
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 15
  %18 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %18, i32 0, i32 6
  store %struct.__sFILE* %16, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 4
  store i32 4, i32* %m_zip_type, align 8, !tbaa !107
  %20 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  %tobool11 = icmp ne i64 %20, 0
  br i1 %tobool11, label %if.then12, label %if.end28

if.then12:                                        ; preds = %if.end10
  %21 = bitcast i64* %cur_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21) #10
  store i64 0, i64* %cur_ofs, align 8, !tbaa !76
  %22 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* %22) #10
  %23 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %23, i8 0, i64 4096, i1 false)
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then12
  %24 = bitcast i64* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %24) #10
  %25 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  %cmp13 = icmp ult i64 4096, %25
  br i1 %cmp13, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br label %cond.end

cond.false:                                       ; preds = %do.body
  %26 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond14 = phi i64 [ 4096, %cond.true ], [ %26, %cond.false ]
  store i64 %cond14, i64* %n, align 8, !tbaa !4
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %27, i32 0, i32 12
  %28 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite15, align 8, !tbaa !176
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque16 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 14
  %30 = load i8*, i8** %m_pIO_opaque16, align 8, !tbaa !120
  %31 = load i64, i64* %cur_ofs, align 8, !tbaa !76
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  %32 = load i64, i64* %n, align 8, !tbaa !4
  %call17 = call i64 %28(i8* %30, i64 %31, i8* %arraydecay, i64 %32)
  %33 = load i64, i64* %n, align 8, !tbaa !4
  %cmp18 = icmp ne i64 %call17, %33
  br i1 %cmp18, label %if.then19, label %if.end22

if.then19:                                        ; preds = %cond.end
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call20 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive* %34)
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call21 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %35, i32 19)
  store i32 %call21, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end22:                                         ; preds = %cond.end
  %36 = load i64, i64* %n, align 8, !tbaa !4
  %37 = load i64, i64* %cur_ofs, align 8, !tbaa !76
  %add = add i64 %37, %36
  store i64 %add, i64* %cur_ofs, align 8, !tbaa !76
  %38 = load i64, i64* %n, align 8, !tbaa !4
  %39 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  %sub = sub i64 %39, %38
  store i64 %sub, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end22, %if.then19
  %40 = bitcast i64* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup24 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont
  %41 = load i64, i64* %size_to_reserve_at_beginning.addr, align 8, !tbaa !76
  %tobool23 = icmp ne i64 %41, 0
  br i1 %tobool23, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup24

cleanup24:                                        ; preds = %do.end, %cleanup
  %42 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* %42) #10
  %43 = bitcast i64* %cur_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %43) #10
  %cleanup.dest26 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest26, label %cleanup29 [
    i32 0, label %cleanup.cont27
  ]

cleanup.cont27:                                   ; preds = %cleanup24
  br label %if.end28

if.end28:                                         ; preds = %cleanup.cont27, %if.end10
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup29

cleanup29:                                        ; preds = %if.end28, %cleanup24, %if.then7, %if.then2
  %44 = bitcast %struct.__sFILE** %pFile to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %44) #10
  %45 = load i32, i32* %retval, align 4
  ret i32 %45
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mz_zip_file_write_func(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pZip = alloca %struct.mz_zip_archive*, align 8
  %cur_ofs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8, !tbaa !76
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = bitcast %struct.mz_zip_archive** %pZip to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %2 = bitcast i8* %1 to %struct.mz_zip_archive*
  store %struct.mz_zip_archive* %2, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %3 = bitcast i64* %cur_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 15
  %5 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %5, i32 0, i32 6
  %6 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %call = call i64 @ftello(%struct.__sFILE* %6)
  store i64 %call, i64* %cur_ofs, align 8, !tbaa !76
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 15
  %8 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState1, align 8, !tbaa !98
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %8, i32 0, i32 7
  %9 = load i64, i64* %m_file_archive_start_ofs, align 8, !tbaa !127
  %10 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %add = add i64 %10, %9
  store i64 %add, i64* %file_ofs.addr, align 8, !tbaa !76
  %11 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %cmp = icmp slt i64 %11, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %12 = load i64, i64* %cur_ofs, align 8, !tbaa !76
  %13 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %cmp2 = icmp ne i64 %12, %13
  br i1 %cmp2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 15
  %15 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8, !tbaa !98
  %m_pFile4 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %15, i32 0, i32 6
  %16 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile4, align 8, !tbaa !104
  %17 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %call5 = call i32 @fseeko(%struct.__sFILE* %16, i64 %17, i32 0)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %call6 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %18, i32 22)
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %19 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %20 = load i64, i64* %n.addr, align 8, !tbaa !4
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip, align 8, !tbaa !8
  %m_pState7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 15
  %22 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState7, align 8, !tbaa !98
  %m_pFile8 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %22, i32 0, i32 6
  %23 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile8, align 8, !tbaa !104
  %call9 = call i64 @"\01_fwrite"(i8* %19, i64 1, i64 %20, %struct.__sFILE* %23)
  store i64 %call9, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %24 = bitcast i64* %cur_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #10
  %25 = bitcast %struct.mz_zip_archive** %pZip to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #10
  %26 = load i64, i64* %retval, align 8
  ret i64 %26
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_end(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_writer_end_internal(%struct.mz_zip_archive* %0, i32 1)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init_cfile(%struct.mz_zip_archive* %pZip, %struct.__sFILE* %pFile, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFile.addr = alloca %struct.__sFILE*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.__sFILE* %pFile, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %0, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8, !tbaa !124
  %2 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %2, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 11
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_read_func, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = bitcast %struct.mz_zip_archive* %4 to i8*
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 14
  store i8* %5, i8** %m_pIO_opaque, align 8, !tbaa !120
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %8 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_writer_init_v2(%struct.mz_zip_archive* %7, i64 0, i32 %8)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4
  br label %return

if.end3:                                          ; preds = %if.end
  %9 = load %struct.__sFILE*, %struct.__sFILE** %pFile.addr, align 8, !tbaa !8
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 6
  store %struct.__sFILE* %9, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState4 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 15
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState4, align 8, !tbaa !98
  %m_pFile5 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %13, i32 0, i32 6
  %14 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile5, align 8, !tbaa !104
  %call6 = call i64 @ftello(%struct.__sFILE* %14)
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 15
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState7, align 8, !tbaa !98
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %16, i32 0, i32 7
  store i64 %call6, i64* %m_file_archive_start_ofs, align 8, !tbaa !127
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 4
  store i32 5, i32* %m_zip_type, align 8, !tbaa !107
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end3, %if.then2
  %18 = load i32, i32* %retval, align 4
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init_from_reader_v2(%struct.mz_zip_archive* %pZip, i8* %pFilename, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %flags.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 15
  %3 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %3, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 3
  %5 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp = icmp ne i32 %5, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %6, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false2
  %7 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %and = and i32 %7, 16384
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.then4, label %if.end10

if.then4:                                         ; preds = %if.end
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %8, i32 0, i32 15
  %9 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState5, align 8, !tbaa !98
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %9, i32 0, i32 4
  %10 = load i32, i32* %m_zip64, align 4, !tbaa !118
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.end9, label %if.then7

if.then7:                                         ; preds = %if.then4
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call8 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %11, i32 24)
  store i32 %call8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end9:                                          ; preds = %if.then4
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.end
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState11 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %12, i32 0, i32 15
  %13 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState11, align 8, !tbaa !98
  %m_zip6412 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %13, i32 0, i32 4
  %14 = load i32, i32* %m_zip6412, align 4, !tbaa !118
  %tobool13 = icmp ne i32 %14, 0
  br i1 %tobool13, label %if.then14, label %if.else

if.then14:                                        ; preds = %if.end10
  %15 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %15, i32 0, i32 2
  %16 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp15 = icmp eq i32 %16, -1
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.then14
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call17 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %17, i32 2)
  store i32 %call17, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end18:                                         ; preds = %if.then14
  br label %if.end29

if.else:                                          ; preds = %if.end10
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files19 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %18, i32 0, i32 2
  %19 = load i32, i32* %m_total_files19, align 8, !tbaa !113
  %cmp20 = icmp eq i32 %19, 65535
  br i1 %cmp20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.else
  %20 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call22 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %20, i32 2)
  store i32 %call22, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end23:                                         ; preds = %if.else
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 0
  %22 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %add = add i64 %22, 46
  %add24 = add i64 %add, 30
  %cmp25 = icmp ugt i64 %add24, 4294967295
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end23
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call27 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %23, i32 3)
  store i32 %call27, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end28:                                         ; preds = %if.end23
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end18
  %24 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState30 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %24, i32 0, i32 15
  %25 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState30, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %25, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %26 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %26, i32 0, i32 6
  %27 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %tobool31 = icmp ne %struct.__sFILE* %27, null
  br i1 %tobool31, label %if.then32, label %if.else52

if.then32:                                        ; preds = %if.end29
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 14
  %29 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %31 = bitcast %struct.mz_zip_archive* %30 to i8*
  %cmp33 = icmp ne i8* %29, %31
  br i1 %cmp33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %if.then32
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call35 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %32, i32 24)
  store i32 %call35, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end36:                                         ; preds = %if.then32
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 4
  %34 = load i32, i32* %m_zip_type, align 8, !tbaa !107
  %cmp37 = icmp eq i32 %34, 4
  br i1 %cmp37, label %if.then38, label %if.end51

if.then38:                                        ; preds = %if.end36
  %35 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %tobool39 = icmp ne i8* %35, null
  br i1 %tobool39, label %if.end42, label %if.then40

if.then40:                                        ; preds = %if.then38
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call41 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %36, i32 24)
  store i32 %call41, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end42:                                         ; preds = %if.then38
  %37 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %38 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile43 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %38, i32 0, i32 6
  %39 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile43, align 8, !tbaa !104
  %call44 = call %struct.__sFILE* @"\01_freopen"(i8* %37, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.21, i64 0, i64 0), %struct.__sFILE* %39)
  %40 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile45 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %40, i32 0, i32 6
  store %struct.__sFILE* %call44, %struct.__sFILE** %m_pFile45, align 8, !tbaa !104
  %cmp46 = icmp eq %struct.__sFILE* null, %call44
  br i1 %cmp46, label %if.then47, label %if.end50

if.then47:                                        ; preds = %if.end42
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call48 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %41, i32 0)
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call49 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %42, i32 17)
  store i32 %call49, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end50:                                         ; preds = %if.end42
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end36
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %43, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_file_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %44, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive, align 8, !tbaa !124
  br label %if.end69

if.else52:                                        ; preds = %if.end29
  %45 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %45, i32 0, i32 8
  %46 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %tobool53 = icmp ne i8* %46, null
  br i1 %tobool53, label %if.then54, label %if.else62

if.then54:                                        ; preds = %if.else52
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque55 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %47, i32 0, i32 14
  %48 = load i8*, i8** %m_pIO_opaque55, align 8, !tbaa !120
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %50 = bitcast %struct.mz_zip_archive* %49 to i8*
  %cmp56 = icmp ne i8* %48, %50
  br i1 %cmp56, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.then54
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call58 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %51, i32 24)
  store i32 %call58, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end59:                                         ; preds = %if.then54
  %52 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %52, i32 0, i32 9
  %53 = load i64, i64* %m_mem_size, align 8, !tbaa !126
  %54 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %54, i32 0, i32 10
  store i64 %53, i64* %m_mem_capacity, align 8, !tbaa !178
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite60 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %55, i32 0, i32 12
  store i64 (i8*, i64, i8*, i64)* @mz_zip_heap_write_func, i64 (i8*, i64, i8*, i64)** %m_pWrite60, align 8, !tbaa !176
  %56 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pNeeds_keepalive61 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %56, i32 0, i32 13
  store i32 (i8*)* null, i32 (i8*)** %m_pNeeds_keepalive61, align 8, !tbaa !124
  br label %if.end68

if.else62:                                        ; preds = %if.else52
  %57 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite63 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %57, i32 0, i32 12
  %58 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite63, align 8, !tbaa !176
  %tobool64 = icmp ne i64 (i8*, i64, i8*, i64)* %58, null
  br i1 %tobool64, label %if.end67, label %if.then65

if.then65:                                        ; preds = %if.else62
  %59 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call66 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %59, i32 24)
  store i32 %call66, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end67:                                         ; preds = %if.else62
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end59
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end51
  %60 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %60, i32 0, i32 1
  %61 = load i64, i64* %m_central_directory_file_ofs, align 8, !tbaa !112
  %62 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size70 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %62, i32 0, i32 0
  store i64 %61, i64* %m_archive_size70, align 8, !tbaa !110
  %63 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_central_directory_file_ofs71 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %63, i32 0, i32 1
  store i64 0, i64* %m_central_directory_file_ofs71, align 8, !tbaa !112
  %64 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState72 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %65, i32 0, i32 15
  %66 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState72, align 8, !tbaa !98
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %66, i32 0, i32 2
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %64, %struct.mz_zip_array* %m_sorted_central_dir_offsets)
  %67 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode73 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %67, i32 0, i32 3
  store i32 2, i32* %m_zip_mode73, align 4, !tbaa !102
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end69, %if.then65, %if.then57, %if.then47, %if.then40, %if.then34, %if.then26, %if.then21, %if.then16, %if.then7, %if.then
  %68 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #10
  %69 = load i32, i32* %retval, align 4
  ret i32 %69
}

declare %struct.__sFILE* @"\01_freopen"(i8*, i8*, %struct.__sFILE*) #2

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_init_from_reader(%struct.mz_zip_archive* %pZip, i8* %pFilename) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_writer_init_from_reader_v2(%struct.mz_zip_archive* %0, i8* %1, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_add_mem(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i32 %level_and_flags) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %level_and_flags.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %3 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %4 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive* %0, i8* %1, i8* %2, i64 %3, i8* null, i16 zeroext 0, i32 %4, i64 0, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i64 %uncomp_size, i32 %uncomp_crc32) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %uncomp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4, !tbaa !10
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8, !tbaa !76
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %3 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %4 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %5 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %6 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %7 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %8 = load i32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_writer_add_mem_ex_v2(%struct.mz_zip_archive* %0, i8* %1, i8* %2, i64 %3, i8* %4, i16 zeroext %5, i32 %6, i64 %7, i32 %8, i64* null, i8* null, i32 0, i8* null, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_add_mem_ex_v2(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i64 %uncomp_size, i32 %uncomp_crc32, i64* %last_modified, i8* %user_extra_data, i32 %user_extra_data_len, i8* %user_extra_data_central, i32 %user_extra_data_central_len) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %uncomp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %last_modified.addr = alloca i64*, align 8
  %user_extra_data.addr = alloca i8*, align 8
  %user_extra_data_len.addr = alloca i32, align 4
  %user_extra_data_central.addr = alloca i8*, align 8
  %user_extra_data_central_len.addr = alloca i32, align 4
  %method = alloca i16, align 2
  %dos_time = alloca i16, align 2
  %dos_date = alloca i16, align 2
  %level = alloca i32, align 4
  %ext_attributes = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %local_dir_header_ofs = alloca i64, align 8
  %cur_archive_file_ofs = alloca i64, align 8
  %comp_size = alloca i64, align 8
  %archive_name_size = alloca i64, align 8
  %local_dir_header = alloca [30 x i8], align 16
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %store_data_uncompressed = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pExtra_data = alloca i8*, align 8
  %extra_size = alloca i32, align 4
  %extra_data = alloca [28 x i8], align 16
  %bit_flags = alloca i16, align 2
  %cleanup.dest.slot = alloca i32, align 4
  %cur_time = alloca i64, align 8
  %state = alloca %struct.mz_zip_writer_add_state, align 8
  %local_dir_footer = alloca [24 x i8], align 16
  %local_dir_footer_size = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4, !tbaa !10
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8, !tbaa !76
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  store i64* %last_modified, i64** %last_modified.addr, align 8, !tbaa !8
  store i8* %user_extra_data, i8** %user_extra_data.addr, align 8, !tbaa !8
  store i32 %user_extra_data_len, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  store i8* %user_extra_data_central, i8** %user_extra_data_central.addr, align 8, !tbaa !8
  store i32 %user_extra_data_central_len, i32* %user_extra_data_central_len.addr, align 4, !tbaa !10
  %0 = bitcast i16* %method to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #10
  store i16 0, i16* %method, align 2, !tbaa !88
  %1 = bitcast i16* %dos_time to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %1) #10
  store i16 0, i16* %dos_time, align 2, !tbaa !88
  %2 = bitcast i16* %dos_date to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %2) #10
  store i16 0, i16* %dos_date, align 2, !tbaa !88
  %3 = bitcast i32* %level to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = bitcast i32* %ext_attributes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  store i32 0, i32* %ext_attributes, align 4, !tbaa !10
  %5 = bitcast i32* %num_alignment_padding_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #10
  %6 = bitcast i64* %local_dir_header_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 0
  %8 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  store i64 %8, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %9 = bitcast i64* %cur_archive_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #10
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 0
  %11 = load i64, i64* %m_archive_size1, align 8, !tbaa !110
  store i64 %11, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %12 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #10
  store i64 0, i64* %comp_size, align 8, !tbaa !76
  %13 = bitcast i64* %archive_name_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  %14 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 30, i8* %14) #10
  %15 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #10
  store %struct.tdefl_compressor* null, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %16 = bitcast i32* %store_data_uncompressed to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #10
  %17 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #10
  %18 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #10
  store i8* null, i8** %pExtra_data, align 8, !tbaa !8
  %19 = bitcast i32* %extra_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #10
  store i32 0, i32* %extra_size, align 4, !tbaa !10
  %20 = bitcast [28 x i8]* %extra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* %20) #10
  %21 = bitcast i16* %bit_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %21) #10
  store i16 0, i16* %bit_flags, align 2, !tbaa !88
  %22 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %cmp = icmp slt i32 %22, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 6, i32* %level_and_flags.addr, align 4, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %23 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %tobool = icmp ne i64 %23, 0
  br i1 %tobool, label %if.then4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %24 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %tobool2 = icmp ne i64 %24, 0
  br i1 %tobool2, label %land.lhs.true, label %if.end6

land.lhs.true:                                    ; preds = %lor.lhs.false
  %25 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and = and i32 %25, 1024
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %land.lhs.true, %if.end
  %26 = load i16, i16* %bit_flags, align 2, !tbaa !88
  %conv = zext i16 %26 to i32
  %or = or i32 %conv, 8
  %conv5 = trunc i32 %or to i16
  store i16 %conv5, i16* %bit_flags, align 2, !tbaa !88
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %land.lhs.true, %lor.lhs.false
  %27 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and7 = and i32 %27, 65536
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %if.end13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %28 = load i16, i16* %bit_flags, align 2, !tbaa !88
  %conv10 = zext i16 %28 to i32
  %or11 = or i32 %conv10, 2048
  %conv12 = trunc i32 %or11 to i16
  store i16 %conv12, i16* %bit_flags, align 2, !tbaa !88
  br label %if.end13

if.end13:                                         ; preds = %if.then9, %if.end6
  %29 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and14 = and i32 %29, 15
  store i32 %and14, i32* %level, align 4, !tbaa !10
  %30 = load i32, i32* %level, align 4, !tbaa !10
  %tobool15 = icmp ne i32 %30, 0
  br i1 %tobool15, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end13
  %31 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and16 = and i32 %31, 1024
  %tobool17 = icmp ne i32 %and16, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end13
  %32 = phi i1 [ true, %if.end13 ], [ %tobool17, %lor.rhs ]
  %lor.ext = zext i1 %32 to i32
  store i32 %lor.ext, i32* %store_data_uncompressed, align 4, !tbaa !10
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool18 = icmp ne %struct.mz_zip_archive* %33, null
  br i1 %tobool18, label %lor.lhs.false19, label %if.then38

lor.lhs.false19:                                  ; preds = %lor.end
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 15
  %35 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool20 = icmp ne %struct.mz_zip_internal_state_tag* %35, null
  br i1 %tobool20, label %lor.lhs.false21, label %if.then38

lor.lhs.false21:                                  ; preds = %lor.lhs.false19
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 3
  %37 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp22 = icmp ne i32 %37, 2
  br i1 %cmp22, label %if.then38, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false21
  %38 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %tobool25 = icmp ne i64 %38, 0
  br i1 %tobool25, label %land.lhs.true26, label %lor.lhs.false28

land.lhs.true26:                                  ; preds = %lor.lhs.false24
  %39 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %tobool27 = icmp ne i8* %39, null
  br i1 %tobool27, label %lor.lhs.false28, label %if.then38

lor.lhs.false28:                                  ; preds = %land.lhs.true26, %lor.lhs.false24
  %40 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %tobool29 = icmp ne i8* %40, null
  br i1 %tobool29, label %lor.lhs.false30, label %if.then38

lor.lhs.false30:                                  ; preds = %lor.lhs.false28
  %41 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv31 = zext i16 %41 to i32
  %tobool32 = icmp ne i32 %conv31, 0
  br i1 %tobool32, label %land.lhs.true33, label %lor.lhs.false35

land.lhs.true33:                                  ; preds = %lor.lhs.false30
  %42 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %tobool34 = icmp ne i8* %42, null
  br i1 %tobool34, label %lor.lhs.false35, label %if.then38

lor.lhs.false35:                                  ; preds = %land.lhs.true33, %lor.lhs.false30
  %43 = load i32, i32* %level, align 4, !tbaa !10
  %cmp36 = icmp ugt i32 %43, 10
  br i1 %cmp36, label %if.then38, label %if.end39

if.then38:                                        ; preds = %lor.lhs.false35, %land.lhs.true33, %lor.lhs.false28, %land.lhs.true26, %lor.lhs.false21, %lor.lhs.false19, %lor.end
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %44, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end39:                                         ; preds = %lor.lhs.false35
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState40 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %45, i32 0, i32 15
  %46 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState40, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %46, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %47 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %47, i32 0, i32 4
  %48 = load i32, i32* %m_zip64, align 4, !tbaa !118
  %tobool41 = icmp ne i32 %48, 0
  br i1 %tobool41, label %if.then42, label %if.else

if.then42:                                        ; preds = %if.end39
  %49 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %49, i32 0, i32 2
  %50 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp43 = icmp eq i32 %50, -1
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.then42
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call46 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %51, i32 2)
  store i32 %call46, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end47:                                         ; preds = %if.then42
  br label %if.end62

if.else:                                          ; preds = %if.end39
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files48 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %52, i32 0, i32 2
  %53 = load i32, i32* %m_total_files48, align 8, !tbaa !113
  %cmp49 = icmp eq i32 %53, 65535
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.else
  %54 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6452 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %54, i32 0, i32 4
  store i32 1, i32* %m_zip6452, align 4, !tbaa !118
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.else
  %55 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %cmp54 = icmp ugt i64 %55, 4294967295
  br i1 %cmp54, label %if.then59, label %lor.lhs.false56

lor.lhs.false56:                                  ; preds = %if.end53
  %56 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp57 = icmp ugt i64 %56, 4294967295
  br i1 %cmp57, label %if.then59, label %if.end61

if.then59:                                        ; preds = %lor.lhs.false56, %if.end53
  %57 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6460 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %57, i32 0, i32 4
  store i32 1, i32* %m_zip6460, align 4, !tbaa !118
  br label %if.end61

if.end61:                                         ; preds = %if.then59, %lor.lhs.false56
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end47
  %58 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and63 = and i32 %58, 1024
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.end69, label %land.lhs.true65

land.lhs.true65:                                  ; preds = %if.end62
  %59 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %tobool66 = icmp ne i64 %59, 0
  br i1 %tobool66, label %if.then67, label %if.end69

if.then67:                                        ; preds = %land.lhs.true65
  %60 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call68 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %60, i32 24)
  store i32 %call68, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end69:                                         ; preds = %land.lhs.true65, %if.end62
  %61 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %call70 = call i32 @mz_zip_writer_validate_archive_name(i8* %61)
  %tobool71 = icmp ne i32 %call70, 0
  br i1 %tobool71, label %if.end74, label %if.then72

if.then72:                                        ; preds = %if.end69
  %62 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call73 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %62, i32 25)
  store i32 %call73, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end74:                                         ; preds = %if.end69
  %63 = load i64*, i64** %last_modified.addr, align 8, !tbaa !8
  %cmp75 = icmp ne i64* %63, null
  br i1 %cmp75, label %if.then77, label %if.else78

if.then77:                                        ; preds = %if.end74
  %64 = load i64*, i64** %last_modified.addr, align 8, !tbaa !8
  %65 = load i64, i64* %64, align 8, !tbaa !4
  call void @mz_zip_time_t_to_dos_time(i64 %65, i16* %dos_time, i16* %dos_date)
  br label %if.end80

if.else78:                                        ; preds = %if.end74
  %66 = bitcast i64* %cur_time to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %66) #10
  %call79 = call i64 @time(i64* %cur_time)
  %67 = load i64, i64* %cur_time, align 8, !tbaa !4
  call void @mz_zip_time_t_to_dos_time(i64 %67, i16* %dos_time, i16* %dos_date)
  %68 = bitcast i64* %cur_time to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %68) #10
  br label %if.end80

if.end80:                                         ; preds = %if.else78, %if.then77
  %69 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and81 = and i32 %69, 1024
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %if.end90, label %if.then83

if.then83:                                        ; preds = %if.end80
  %70 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %71 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %call84 = call i64 @mz_crc32(i64 0, i8* %70, i64 %71)
  %conv85 = trunc i64 %call84 to i32
  store i32 %conv85, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  %72 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  store i64 %72, i64* %uncomp_size.addr, align 8, !tbaa !76
  %73 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp86 = icmp ule i64 %73, 3
  br i1 %cmp86, label %if.then88, label %if.end89

if.then88:                                        ; preds = %if.then83
  store i32 0, i32* %level, align 4, !tbaa !10
  store i32 1, i32* %store_data_uncompressed, align 4, !tbaa !10
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %if.then83
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.end80
  %74 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %call91 = call i64 @strlen(i8* %74)
  store i64 %call91, i64* %archive_name_size, align 8, !tbaa !4
  %75 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %cmp92 = icmp ugt i64 %75, 65535
  br i1 %cmp92, label %if.then94, label %if.end96

if.then94:                                        ; preds = %if.end90
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call95 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %76, i32 25)
  store i32 %call95, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end96:                                         ; preds = %if.end90
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call97 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive* %77)
  store i32 %call97, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %78 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %78, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %79 = load i64, i64* %m_size, align 8, !tbaa !175
  %add = add i64 %79, 46
  %80 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %add98 = add i64 %add, %80
  %add99 = add i64 %add98, 28
  %81 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv100 = zext i16 %81 to i64
  %add101 = add i64 %add99, %conv100
  %cmp102 = icmp uge i64 %add101, 4294967295
  br i1 %cmp102, label %if.then104, label %if.end106

if.then104:                                       ; preds = %if.end96
  %82 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call105 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %82, i32 15)
  store i32 %call105, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end106:                                        ; preds = %if.end96
  %83 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64107 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %83, i32 0, i32 4
  %84 = load i32, i32* %m_zip64107, align 4, !tbaa !118
  %tobool108 = icmp ne i32 %84, 0
  br i1 %tobool108, label %if.end133, label %if.then109

if.then109:                                       ; preds = %if.end106
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size110 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %85, i32 0, i32 0
  %86 = load i64, i64* %m_archive_size110, align 8, !tbaa !110
  %87 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %conv111 = zext i32 %87 to i64
  %add112 = add i64 %86, %conv111
  %add113 = add i64 %add112, 30
  %88 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %add114 = add i64 %add113, %88
  %add115 = add i64 %add114, 46
  %89 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %add116 = add i64 %add115, %89
  %90 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv117 = zext i16 %90 to i64
  %add118 = add i64 %add116, %conv117
  %91 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv119 = zext i32 %91 to i64
  %add120 = add i64 %add118, %conv119
  %92 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir121 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %92, i32 0, i32 0
  %m_size122 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir121, i32 0, i32 1
  %93 = load i64, i64* %m_size122, align 8, !tbaa !175
  %add123 = add i64 %add120, %93
  %add124 = add i64 %add123, 22
  %94 = load i32, i32* %user_extra_data_central_len.addr, align 4, !tbaa !10
  %conv125 = zext i32 %94 to i64
  %add126 = add i64 %add124, %conv125
  %add127 = add i64 %add126, 16
  %cmp128 = icmp ugt i64 %add127, 4294967295
  br i1 %cmp128, label %if.then130, label %if.end132

if.then130:                                       ; preds = %if.then109
  %95 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64131 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %95, i32 0, i32 4
  store i32 1, i32* %m_zip64131, align 4, !tbaa !118
  br label %if.end132

if.end132:                                        ; preds = %if.then130, %if.then109
  br label %if.end133

if.end133:                                        ; preds = %if.end132, %if.end106
  %96 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %tobool134 = icmp ne i64 %96, 0
  br i1 %tobool134, label %land.lhs.true135, label %if.end147

land.lhs.true135:                                 ; preds = %if.end133
  %97 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %98 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %sub = sub i64 %98, 1
  %arrayidx = getelementptr inbounds i8, i8* %97, i64 %sub
  %99 = load i8, i8* %arrayidx, align 1, !tbaa !12
  %conv136 = sext i8 %99 to i32
  %cmp137 = icmp eq i32 %conv136, 47
  br i1 %cmp137, label %if.then139, label %if.end147

if.then139:                                       ; preds = %land.lhs.true135
  %100 = load i32, i32* %ext_attributes, align 4, !tbaa !10
  %or140 = or i32 %100, 16
  store i32 %or140, i32* %ext_attributes, align 4, !tbaa !10
  %101 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %tobool141 = icmp ne i64 %101, 0
  br i1 %tobool141, label %if.then144, label %lor.lhs.false142

lor.lhs.false142:                                 ; preds = %if.then139
  %102 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %tobool143 = icmp ne i64 %102, 0
  br i1 %tobool143, label %if.then144, label %if.end146

if.then144:                                       ; preds = %lor.lhs.false142, %if.then139
  %103 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call145 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %103, i32 24)
  store i32 %call145, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end146:                                        ; preds = %lor.lhs.false142
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %land.lhs.true135, %if.end133
  %104 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %105 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir148 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %105, i32 0, i32 0
  %106 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %add149 = add i64 46, %106
  %107 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv150 = zext i16 %107 to i64
  %add151 = add i64 %add149, %conv150
  %108 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64152 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %108, i32 0, i32 4
  %109 = load i32, i32* %m_zip64152, align 4, !tbaa !118
  %tobool153 = icmp ne i32 %109, 0
  %110 = zext i1 %tobool153 to i64
  %cond = select i1 %tobool153, i64 28, i64 0
  %add154 = add i64 %add151, %cond
  %call155 = call i32 @mz_zip_array_ensure_room(%struct.mz_zip_archive* %104, %struct.mz_zip_array* %m_central_dir148, i64 %add154)
  %tobool156 = icmp ne i32 %call155, 0
  br i1 %tobool156, label %lor.lhs.false157, label %if.then160

lor.lhs.false157:                                 ; preds = %if.end147
  %111 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %112 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %112, i32 0, i32 1
  %call158 = call i32 @mz_zip_array_ensure_room(%struct.mz_zip_archive* %111, %struct.mz_zip_array* %m_central_dir_offsets, i64 1)
  %tobool159 = icmp ne i32 %call158, 0
  br i1 %tobool159, label %if.end162, label %if.then160

if.then160:                                       ; preds = %lor.lhs.false157, %if.end147
  %113 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call161 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %113, i32 16)
  store i32 %call161, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end162:                                        ; preds = %lor.lhs.false157
  %114 = load i32, i32* %store_data_uncompressed, align 4, !tbaa !10
  %tobool163 = icmp ne i32 %114, 0
  br i1 %tobool163, label %if.end173, label %land.lhs.true164

land.lhs.true164:                                 ; preds = %if.end162
  %115 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %tobool165 = icmp ne i64 %115, 0
  br i1 %tobool165, label %if.then166, label %if.end173

if.then166:                                       ; preds = %land.lhs.true164
  %116 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %116, i32 0, i32 7
  %117 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %118 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %118, i32 0, i32 10
  %119 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %call167 = call i8* %117(i8* %119, i64 1, i64 319352)
  %120 = bitcast i8* %call167 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %120, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %cmp168 = icmp eq %struct.tdefl_compressor* null, %120
  br i1 %cmp168, label %if.then170, label %if.end172

if.then170:                                       ; preds = %if.then166
  %121 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call171 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %121, i32 16)
  store i32 %call171, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end172:                                        ; preds = %if.then166
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %land.lhs.true164, %if.end162
  %122 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %123 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %124 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %call174 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive* %122, i64 %123, i32 %124)
  %tobool175 = icmp ne i32 %call174, 0
  br i1 %tobool175, label %if.end178, label %if.then176

if.then176:                                       ; preds = %if.end173
  %125 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %125, i32 0, i32 8
  %126 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %127 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque177 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %127, i32 0, i32 10
  %128 = load i8*, i8** %m_pAlloc_opaque177, align 8, !tbaa !108
  %129 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %130 = bitcast %struct.tdefl_compressor* %129 to i8*
  call void %126(i8* %128, i8* %130)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end178:                                        ; preds = %if.end173
  %131 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %conv179 = zext i32 %131 to i64
  %132 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %add180 = add i64 %132, %conv179
  store i64 %add180, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %133 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %133, i32 0, i32 6
  %134 = load i64, i64* %m_file_offset_alignment, align 8, !tbaa !177
  %tobool181 = icmp ne i64 %134, 0
  br i1 %tobool181, label %if.then182, label %if.end190

if.then182:                                       ; preds = %if.end178
  %135 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %136 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment183 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %136, i32 0, i32 6
  %137 = load i64, i64* %m_file_offset_alignment183, align 8, !tbaa !177
  %sub184 = sub i64 %137, 1
  %and185 = and i64 %135, %sub184
  %cmp186 = icmp eq i64 %and185, 0
  %lnot = xor i1 %cmp186, true
  %lnot.ext = zext i1 %lnot to i32
  %conv188 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv188, i64 0)
  %tobool189 = icmp ne i64 %expval, 0
  br i1 %tobool189, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then182
  call void @__assert_rtn(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__func__.mz_zip_writer_add_mem_ex_v2, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 6222, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.22, i64 0, i64 0)) #13
  unreachable

138:                                              ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then182
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %138
  br label %if.end190

if.end190:                                        ; preds = %cond.end, %if.end178
  %139 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %conv191 = zext i32 %139 to i64
  %140 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add192 = add i64 %140, %conv191
  store i64 %add192, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %141 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %141, i8 0, i64 30, i1 false)
  %142 = load i32, i32* %store_data_uncompressed, align 4, !tbaa !10
  %tobool193 = icmp ne i32 %142, 0
  br i1 %tobool193, label %lor.lhs.false194, label %if.then197

lor.lhs.false194:                                 ; preds = %if.end190
  %143 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and195 = and i32 %143, 1024
  %tobool196 = icmp ne i32 %and195, 0
  br i1 %tobool196, label %if.then197, label %if.end198

if.then197:                                       ; preds = %lor.lhs.false194, %if.end190
  store i16 8, i16* %method, align 2, !tbaa !88
  br label %if.end198

if.end198:                                        ; preds = %if.then197, %lor.lhs.false194
  %144 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64199 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %144, i32 0, i32 4
  %145 = load i32, i32* %m_zip64199, align 4, !tbaa !118
  %tobool200 = icmp ne i32 %145, 0
  br i1 %tobool200, label %if.then201, label %if.else274

if.then201:                                       ; preds = %if.end198
  %146 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp202 = icmp uge i64 %146, 4294967295
  br i1 %cmp202, label %if.then207, label %lor.lhs.false204

lor.lhs.false204:                                 ; preds = %if.then201
  %147 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %cmp205 = icmp uge i64 %147, 4294967295
  br i1 %cmp205, label %if.then207, label %if.end228

if.then207:                                       ; preds = %lor.lhs.false204, %if.then201
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i64 0, i64 0
  store i8* %arraydecay, i8** %pExtra_data, align 8, !tbaa !8
  %arraydecay208 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i64 0, i64 0
  %148 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp209 = icmp uge i64 %148, 4294967295
  br i1 %cmp209, label %cond.true211, label %cond.false212

cond.true211:                                     ; preds = %if.then207
  br label %cond.end213

cond.false212:                                    ; preds = %if.then207
  br label %cond.end213

cond.end213:                                      ; preds = %cond.false212, %cond.true211
  %cond214 = phi i64* [ %uncomp_size.addr, %cond.true211 ], [ null, %cond.false212 ]
  %149 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp215 = icmp uge i64 %149, 4294967295
  br i1 %cmp215, label %cond.true217, label %cond.false218

cond.true217:                                     ; preds = %cond.end213
  br label %cond.end219

cond.false218:                                    ; preds = %cond.end213
  br label %cond.end219

cond.end219:                                      ; preds = %cond.false218, %cond.true217
  %cond220 = phi i64* [ %comp_size, %cond.true217 ], [ null, %cond.false218 ]
  %150 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %cmp221 = icmp uge i64 %150, 4294967295
  br i1 %cmp221, label %cond.true223, label %cond.false224

cond.true223:                                     ; preds = %cond.end219
  br label %cond.end225

cond.false224:                                    ; preds = %cond.end219
  br label %cond.end225

cond.end225:                                      ; preds = %cond.false224, %cond.true223
  %cond226 = phi i64* [ %local_dir_header_ofs, %cond.true223 ], [ null, %cond.false224 ]
  %call227 = call i32 @mz_zip_writer_create_zip64_extra_data(i8* %arraydecay208, i64* %cond214, i64* %cond220, i64* %cond226)
  store i32 %call227, i32* %extra_size, align 4, !tbaa !10
  br label %if.end228

if.end228:                                        ; preds = %cond.end225, %lor.lhs.false204
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %arraydecay229 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i64 0, i64 0
  %152 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %conv230 = trunc i64 %152 to i16
  %153 = load i32, i32* %extra_size, align 4, !tbaa !10
  %154 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %add231 = add i32 %153, %154
  %conv232 = trunc i32 %add231 to i16
  %155 = load i16, i16* %method, align 2, !tbaa !88
  %156 = load i16, i16* %bit_flags, align 2, !tbaa !88
  %157 = load i16, i16* %dos_time, align 2, !tbaa !88
  %158 = load i16, i16* %dos_date, align 2, !tbaa !88
  %call233 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %151, i8* %arraydecay229, i16 zeroext %conv230, i16 zeroext %conv232, i64 0, i64 0, i32 0, i16 zeroext %155, i16 zeroext %156, i16 zeroext %157, i16 zeroext %158)
  %tobool234 = icmp ne i32 %call233, 0
  br i1 %tobool234, label %if.end237, label %if.then235

if.then235:                                       ; preds = %if.end228
  %159 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call236 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %159, i32 27)
  store i32 %call236, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end237:                                        ; preds = %if.end228
  %160 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %160, i32 0, i32 12
  %161 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %162 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %162, i32 0, i32 14
  %163 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %164 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %arraydecay238 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i64 0, i64 0
  %call239 = call i64 %161(i8* %163, i64 %164, i8* %arraydecay238, i64 30)
  %cmp240 = icmp ne i64 %call239, 30
  br i1 %cmp240, label %if.then242, label %if.end244

if.then242:                                       ; preds = %if.end237
  %165 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call243 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %165, i32 19)
  store i32 %call243, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end244:                                        ; preds = %if.end237
  %166 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add245 = add i64 %166, 30
  store i64 %add245, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %167 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite246 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %167, i32 0, i32 12
  %168 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite246, align 8, !tbaa !176
  %169 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque247 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %169, i32 0, i32 14
  %170 = load i8*, i8** %m_pIO_opaque247, align 8, !tbaa !120
  %171 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %172 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %173 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %call248 = call i64 %168(i8* %170, i64 %171, i8* %172, i64 %173)
  %174 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %cmp249 = icmp ne i64 %call248, %174
  br i1 %cmp249, label %if.then251, label %if.end255

if.then251:                                       ; preds = %if.end244
  %175 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree252 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %175, i32 0, i32 8
  %176 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree252, align 8, !tbaa !101
  %177 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque253 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %177, i32 0, i32 10
  %178 = load i8*, i8** %m_pAlloc_opaque253, align 8, !tbaa !108
  %179 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %180 = bitcast %struct.tdefl_compressor* %179 to i8*
  call void %176(i8* %178, i8* %180)
  %181 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call254 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %181, i32 19)
  store i32 %call254, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end255:                                        ; preds = %if.end244
  %182 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %183 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add256 = add i64 %183, %182
  store i64 %add256, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %184 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %cmp257 = icmp ne i8* %184, null
  br i1 %cmp257, label %if.then259, label %if.end273

if.then259:                                       ; preds = %if.end255
  %185 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite260 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %185, i32 0, i32 12
  %186 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite260, align 8, !tbaa !176
  %187 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque261 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %187, i32 0, i32 14
  %188 = load i8*, i8** %m_pIO_opaque261, align 8, !tbaa !120
  %189 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %arraydecay262 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i64 0, i64 0
  %190 = load i32, i32* %extra_size, align 4, !tbaa !10
  %conv263 = zext i32 %190 to i64
  %call264 = call i64 %186(i8* %188, i64 %189, i8* %arraydecay262, i64 %conv263)
  %191 = load i32, i32* %extra_size, align 4, !tbaa !10
  %conv265 = zext i32 %191 to i64
  %cmp266 = icmp ne i64 %call264, %conv265
  br i1 %cmp266, label %if.then268, label %if.end270

if.then268:                                       ; preds = %if.then259
  %192 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call269 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %192, i32 19)
  store i32 %call269, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end270:                                        ; preds = %if.then259
  %193 = load i32, i32* %extra_size, align 4, !tbaa !10
  %conv271 = zext i32 %193 to i64
  %194 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add272 = add i64 %194, %conv271
  store i64 %add272, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  br label %if.end273

if.end273:                                        ; preds = %if.end270, %if.end255
  br label %if.end312

if.else274:                                       ; preds = %if.end198
  %195 = load i64, i64* %comp_size, align 8, !tbaa !76
  %cmp275 = icmp ugt i64 %195, 4294967295
  br i1 %cmp275, label %if.then280, label %lor.lhs.false277

lor.lhs.false277:                                 ; preds = %if.else274
  %196 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %cmp278 = icmp ugt i64 %196, 4294967295
  br i1 %cmp278, label %if.then280, label %if.end282

if.then280:                                       ; preds = %lor.lhs.false277, %if.else274
  %197 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call281 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %197, i32 29)
  store i32 %call281, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end282:                                        ; preds = %lor.lhs.false277
  %198 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %arraydecay283 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i64 0, i64 0
  %199 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %conv284 = trunc i64 %199 to i16
  %200 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv285 = trunc i32 %200 to i16
  %201 = load i16, i16* %method, align 2, !tbaa !88
  %202 = load i16, i16* %bit_flags, align 2, !tbaa !88
  %203 = load i16, i16* %dos_time, align 2, !tbaa !88
  %204 = load i16, i16* %dos_date, align 2, !tbaa !88
  %call286 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %198, i8* %arraydecay283, i16 zeroext %conv284, i16 zeroext %conv285, i64 0, i64 0, i32 0, i16 zeroext %201, i16 zeroext %202, i16 zeroext %203, i16 zeroext %204)
  %tobool287 = icmp ne i32 %call286, 0
  br i1 %tobool287, label %if.end290, label %if.then288

if.then288:                                       ; preds = %if.end282
  %205 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call289 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %205, i32 27)
  store i32 %call289, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end290:                                        ; preds = %if.end282
  %206 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite291 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %206, i32 0, i32 12
  %207 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite291, align 8, !tbaa !176
  %208 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque292 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %208, i32 0, i32 14
  %209 = load i8*, i8** %m_pIO_opaque292, align 8, !tbaa !120
  %210 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %arraydecay293 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i64 0, i64 0
  %call294 = call i64 %207(i8* %209, i64 %210, i8* %arraydecay293, i64 30)
  %cmp295 = icmp ne i64 %call294, 30
  br i1 %cmp295, label %if.then297, label %if.end299

if.then297:                                       ; preds = %if.end290
  %211 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call298 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %211, i32 19)
  store i32 %call298, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end299:                                        ; preds = %if.end290
  %212 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add300 = add i64 %212, 30
  store i64 %add300, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %213 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite301 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %213, i32 0, i32 12
  %214 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite301, align 8, !tbaa !176
  %215 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque302 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %215, i32 0, i32 14
  %216 = load i8*, i8** %m_pIO_opaque302, align 8, !tbaa !120
  %217 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %218 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %219 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %call303 = call i64 %214(i8* %216, i64 %217, i8* %218, i64 %219)
  %220 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %cmp304 = icmp ne i64 %call303, %220
  br i1 %cmp304, label %if.then306, label %if.end310

if.then306:                                       ; preds = %if.end299
  %221 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree307 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %221, i32 0, i32 8
  %222 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree307, align 8, !tbaa !101
  %223 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque308 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %223, i32 0, i32 10
  %224 = load i8*, i8** %m_pAlloc_opaque308, align 8, !tbaa !108
  %225 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %226 = bitcast %struct.tdefl_compressor* %225 to i8*
  call void %222(i8* %224, i8* %226)
  %227 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call309 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %227, i32 19)
  store i32 %call309, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end310:                                        ; preds = %if.end299
  %228 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %229 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add311 = add i64 %229, %228
  store i64 %add311, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  br label %if.end312

if.end312:                                        ; preds = %if.end310, %if.end273
  %230 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %cmp313 = icmp ugt i32 %230, 0
  br i1 %cmp313, label %if.then315, label %if.end328

if.then315:                                       ; preds = %if.end312
  %231 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite316 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %231, i32 0, i32 12
  %232 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite316, align 8, !tbaa !176
  %233 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque317 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %233, i32 0, i32 14
  %234 = load i8*, i8** %m_pIO_opaque317, align 8, !tbaa !120
  %235 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %236 = load i8*, i8** %user_extra_data.addr, align 8, !tbaa !8
  %237 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv318 = zext i32 %237 to i64
  %call319 = call i64 %232(i8* %234, i64 %235, i8* %236, i64 %conv318)
  %238 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv320 = zext i32 %238 to i64
  %cmp321 = icmp ne i64 %call319, %conv320
  br i1 %cmp321, label %if.then323, label %if.end325

if.then323:                                       ; preds = %if.then315
  %239 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call324 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %239, i32 19)
  store i32 %call324, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end325:                                        ; preds = %if.then315
  %240 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv326 = zext i32 %240 to i64
  %241 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add327 = add i64 %241, %conv326
  store i64 %add327, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  br label %if.end328

if.end328:                                        ; preds = %if.end325, %if.end312
  %242 = load i32, i32* %store_data_uncompressed, align 4, !tbaa !10
  %tobool329 = icmp ne i32 %242, 0
  br i1 %tobool329, label %if.then330, label %if.else342

if.then330:                                       ; preds = %if.end328
  %243 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite331 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %243, i32 0, i32 12
  %244 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite331, align 8, !tbaa !176
  %245 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque332 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %245, i32 0, i32 14
  %246 = load i8*, i8** %m_pIO_opaque332, align 8, !tbaa !120
  %247 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %248 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %249 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %call333 = call i64 %244(i8* %246, i64 %247, i8* %248, i64 %249)
  %250 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %cmp334 = icmp ne i64 %call333, %250
  br i1 %cmp334, label %if.then336, label %if.end340

if.then336:                                       ; preds = %if.then330
  %251 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree337 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %251, i32 0, i32 8
  %252 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree337, align 8, !tbaa !101
  %253 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque338 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %253, i32 0, i32 10
  %254 = load i8*, i8** %m_pAlloc_opaque338, align 8, !tbaa !108
  %255 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %256 = bitcast %struct.tdefl_compressor* %255 to i8*
  call void %252(i8* %254, i8* %256)
  %257 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call339 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %257, i32 19)
  store i32 %call339, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end340:                                        ; preds = %if.then330
  %258 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %259 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add341 = add i64 %259, %258
  store i64 %add341, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %260 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  store i64 %260, i64* %comp_size, align 8, !tbaa !76
  br label %if.end361

if.else342:                                       ; preds = %if.end328
  %261 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %tobool343 = icmp ne i64 %261, 0
  br i1 %tobool343, label %if.then344, label %if.end360

if.then344:                                       ; preds = %if.else342
  %262 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %262) #10
  %263 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 0
  store %struct.mz_zip_archive* %263, %struct.mz_zip_archive** %m_pZip, align 8, !tbaa !179
  %264 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  store i64 %264, i64* %m_cur_archive_file_ofs, align 8, !tbaa !181
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  store i64 0, i64* %m_comp_size, align 8, !tbaa !182
  %265 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %266 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  %267 = load i32, i32* %level, align 4, !tbaa !10
  %call345 = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %267, i32 -15, i32 0)
  %call346 = call i32 @tdefl_init(%struct.tdefl_compressor* %265, i32 (i8*, i32, i8*)* @mz_zip_writer_add_put_buf_callback, i8* %266, i32 %call345)
  %cmp347 = icmp ne i32 %call346, 0
  br i1 %cmp347, label %if.then353, label %lor.lhs.false349

lor.lhs.false349:                                 ; preds = %if.then344
  %268 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %269 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %270 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %call350 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %268, i8* %269, i64 %270, i32 4)
  %cmp351 = icmp ne i32 %call350, 1
  br i1 %cmp351, label %if.then353, label %if.end357

if.then353:                                       ; preds = %lor.lhs.false349, %if.then344
  %271 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree354 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %271, i32 0, i32 8
  %272 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree354, align 8, !tbaa !101
  %273 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque355 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %273, i32 0, i32 10
  %274 = load i8*, i8** %m_pAlloc_opaque355, align 8, !tbaa !108
  %275 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %276 = bitcast %struct.tdefl_compressor* %275 to i8*
  call void %272(i8* %274, i8* %276)
  %277 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call356 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %277, i32 12)
  store i32 %call356, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end357:                                        ; preds = %lor.lhs.false349
  %m_comp_size358 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  %278 = load i64, i64* %m_comp_size358, align 8, !tbaa !182
  store i64 %278, i64* %comp_size, align 8, !tbaa !76
  %m_cur_archive_file_ofs359 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  %279 = load i64, i64* %m_cur_archive_file_ofs359, align 8, !tbaa !181
  store i64 %279, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end357, %if.then353
  %280 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %280) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup449 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end360

if.end360:                                        ; preds = %cleanup.cont, %if.else342
  br label %if.end361

if.end361:                                        ; preds = %if.end360, %if.end340
  %281 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree362 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %281, i32 0, i32 8
  %282 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree362, align 8, !tbaa !101
  %283 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque363 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %283, i32 0, i32 10
  %284 = load i8*, i8** %m_pAlloc_opaque363, align 8, !tbaa !108
  %285 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %286 = bitcast %struct.tdefl_compressor* %285 to i8*
  call void %282(i8* %284, i8* %286)
  store %struct.tdefl_compressor* null, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %287 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %tobool364 = icmp ne i64 %287, 0
  br i1 %tobool364, label %if.then365, label %if.end416

if.then365:                                       ; preds = %if.end361
  %288 = bitcast [24 x i8]* %local_dir_footer to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %288) #10
  %289 = bitcast i32* %local_dir_footer_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %289) #10
  store i32 16, i32* %local_dir_footer_size, align 4, !tbaa !10
  %290 = load i16, i16* %bit_flags, align 2, !tbaa !88
  %conv366 = zext i16 %290 to i32
  %and367 = and i32 %conv366, 8
  %tobool368 = icmp ne i32 %and367, 0
  %lnot369 = xor i1 %tobool368, true
  %lnot.ext370 = zext i1 %lnot369 to i32
  %conv371 = sext i32 %lnot.ext370 to i64
  %expval372 = call i64 @llvm.expect.i64(i64 %conv371, i64 0)
  %tobool373 = icmp ne i64 %expval372, 0
  br i1 %tobool373, label %cond.true374, label %cond.false375

cond.true374:                                     ; preds = %if.then365
  call void @__assert_rtn(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @__func__.mz_zip_writer_add_mem_ex_v2, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 6331, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i64 0, i64 0)) #13
  unreachable

291:                                              ; No predecessors!
  br label %cond.end376

cond.false375:                                    ; preds = %if.then365
  br label %cond.end376

cond.end376:                                      ; preds = %cond.false375, %291
  %arraydecay377 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay377, i64 0
  call void @mz_write_le32(i8* %add.ptr, i32 134695760)
  %arraydecay378 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr379 = getelementptr inbounds i8, i8* %arraydecay378, i64 4
  %292 = load i32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  call void @mz_write_le32(i8* %add.ptr379, i32 %292)
  %293 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %cmp380 = icmp eq i8* %293, null
  br i1 %cmp380, label %if.then382, label %if.else394

if.then382:                                       ; preds = %cond.end376
  %294 = load i64, i64* %comp_size, align 8, !tbaa !76
  %cmp383 = icmp ugt i64 %294, 4294967295
  br i1 %cmp383, label %if.then385, label %if.end387

if.then385:                                       ; preds = %if.then382
  %295 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call386 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %295, i32 29)
  store i32 %call386, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup412

if.end387:                                        ; preds = %if.then382
  %arraydecay388 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr389 = getelementptr inbounds i8, i8* %arraydecay388, i64 8
  %296 = load i64, i64* %comp_size, align 8, !tbaa !76
  %conv390 = trunc i64 %296 to i32
  call void @mz_write_le32(i8* %add.ptr389, i32 %conv390)
  %arraydecay391 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr392 = getelementptr inbounds i8, i8* %arraydecay391, i64 12
  %297 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %conv393 = trunc i64 %297 to i32
  call void @mz_write_le32(i8* %add.ptr392, i32 %conv393)
  br label %if.end399

if.else394:                                       ; preds = %cond.end376
  %arraydecay395 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr396 = getelementptr inbounds i8, i8* %arraydecay395, i64 8
  %298 = load i64, i64* %comp_size, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr396, i64 %298)
  %arraydecay397 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr398 = getelementptr inbounds i8, i8* %arraydecay397, i64 16
  %299 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr398, i64 %299)
  store i32 24, i32* %local_dir_footer_size, align 4, !tbaa !10
  br label %if.end399

if.end399:                                        ; preds = %if.else394, %if.end387
  %300 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite400 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %300, i32 0, i32 12
  %301 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite400, align 8, !tbaa !176
  %302 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque401 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %302, i32 0, i32 14
  %303 = load i8*, i8** %m_pIO_opaque401, align 8, !tbaa !120
  %304 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %arraydecay402 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %305 = load i32, i32* %local_dir_footer_size, align 4, !tbaa !10
  %conv403 = zext i32 %305 to i64
  %call404 = call i64 %301(i8* %303, i64 %304, i8* %arraydecay402, i64 %conv403)
  %306 = load i32, i32* %local_dir_footer_size, align 4, !tbaa !10
  %conv405 = zext i32 %306 to i64
  %cmp406 = icmp ne i64 %call404, %conv405
  br i1 %cmp406, label %if.then408, label %if.end409

if.then408:                                       ; preds = %if.end399
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup412

if.end409:                                        ; preds = %if.end399
  %307 = load i32, i32* %local_dir_footer_size, align 4, !tbaa !10
  %conv410 = zext i32 %307 to i64
  %308 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add411 = add i64 %308, %conv410
  store i64 %add411, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup412

cleanup412:                                       ; preds = %if.end409, %if.then408, %if.then385
  %309 = bitcast i32* %local_dir_footer_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %309) #10
  %310 = bitcast [24 x i8]* %local_dir_footer to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %310) #10
  %cleanup.dest414 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest414, label %cleanup449 [
    i32 0, label %cleanup.cont415
  ]

cleanup.cont415:                                  ; preds = %cleanup412
  br label %if.end416

if.end416:                                        ; preds = %cleanup.cont415, %if.end361
  %311 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %cmp417 = icmp ne i8* %311, null
  br i1 %cmp417, label %if.then419, label %if.end440

if.then419:                                       ; preds = %if.end416
  %arraydecay420 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i64 0, i64 0
  %312 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp421 = icmp uge i64 %312, 4294967295
  br i1 %cmp421, label %cond.true423, label %cond.false424

cond.true423:                                     ; preds = %if.then419
  br label %cond.end425

cond.false424:                                    ; preds = %if.then419
  br label %cond.end425

cond.end425:                                      ; preds = %cond.false424, %cond.true423
  %cond426 = phi i64* [ %uncomp_size.addr, %cond.true423 ], [ null, %cond.false424 ]
  %313 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp427 = icmp uge i64 %313, 4294967295
  br i1 %cmp427, label %cond.true429, label %cond.false430

cond.true429:                                     ; preds = %cond.end425
  br label %cond.end431

cond.false430:                                    ; preds = %cond.end425
  br label %cond.end431

cond.end431:                                      ; preds = %cond.false430, %cond.true429
  %cond432 = phi i64* [ %comp_size, %cond.true429 ], [ null, %cond.false430 ]
  %314 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %cmp433 = icmp uge i64 %314, 4294967295
  br i1 %cmp433, label %cond.true435, label %cond.false436

cond.true435:                                     ; preds = %cond.end431
  br label %cond.end437

cond.false436:                                    ; preds = %cond.end431
  br label %cond.end437

cond.end437:                                      ; preds = %cond.false436, %cond.true435
  %cond438 = phi i64* [ %local_dir_header_ofs, %cond.true435 ], [ null, %cond.false436 ]
  %call439 = call i32 @mz_zip_writer_create_zip64_extra_data(i8* %arraydecay420, i64* %cond426, i64* %cond432, i64* %cond438)
  store i32 %call439, i32* %extra_size, align 4, !tbaa !10
  br label %if.end440

if.end440:                                        ; preds = %cond.end437, %if.end416
  %315 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %316 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %317 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %conv441 = trunc i64 %317 to i16
  %318 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %319 = load i32, i32* %extra_size, align 4, !tbaa !10
  %conv442 = trunc i32 %319 to i16
  %320 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %321 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %322 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %323 = load i64, i64* %comp_size, align 8, !tbaa !76
  %324 = load i32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  %325 = load i16, i16* %method, align 2, !tbaa !88
  %326 = load i16, i16* %bit_flags, align 2, !tbaa !88
  %327 = load i16, i16* %dos_time, align 2, !tbaa !88
  %328 = load i16, i16* %dos_date, align 2, !tbaa !88
  %329 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %330 = load i32, i32* %ext_attributes, align 4, !tbaa !10
  %331 = load i8*, i8** %user_extra_data_central.addr, align 8, !tbaa !8
  %332 = load i32, i32* %user_extra_data_central_len.addr, align 4, !tbaa !10
  %call443 = call i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive* %315, i8* %316, i16 zeroext %conv441, i8* %318, i16 zeroext %conv442, i8* %320, i16 zeroext %321, i64 %322, i64 %323, i32 %324, i16 zeroext %325, i16 zeroext %326, i16 zeroext %327, i16 zeroext %328, i64 %329, i32 %330, i8* %331, i32 %332)
  %tobool444 = icmp ne i32 %call443, 0
  br i1 %tobool444, label %if.end446, label %if.then445

if.then445:                                       ; preds = %if.end440
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

if.end446:                                        ; preds = %if.end440
  %333 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files447 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %333, i32 0, i32 2
  %334 = load i32, i32* %m_total_files447, align 8, !tbaa !113
  %inc = add i32 %334, 1
  store i32 %inc, i32* %m_total_files447, align 8, !tbaa !113
  %335 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %336 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size448 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %336, i32 0, i32 0
  store i64 %335, i64* %m_archive_size448, align 8, !tbaa !110
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup449

cleanup449:                                       ; preds = %if.end446, %if.then445, %cleanup412, %cleanup, %if.then336, %if.then323, %if.then306, %if.then297, %if.then288, %if.then280, %if.then268, %if.then251, %if.then242, %if.then235, %if.then176, %if.then170, %if.then160, %if.then144, %if.then104, %if.then94, %if.then72, %if.then67, %if.then45, %if.then38
  %337 = bitcast i16* %bit_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %337) #10
  %338 = bitcast [28 x i8]* %extra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 28, i8* %338) #10
  %339 = bitcast i32* %extra_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %339) #10
  %340 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %340) #10
  %341 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %341) #10
  %342 = bitcast i32* %store_data_uncompressed to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %342) #10
  %343 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %343) #10
  %344 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 30, i8* %344) #10
  %345 = bitcast i64* %archive_name_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %345) #10
  %346 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %346) #10
  %347 = bitcast i64* %cur_archive_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %347) #10
  %348 = bitcast i64* %local_dir_header_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %348) #10
  %349 = bitcast i32* %num_alignment_padding_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %349) #10
  %350 = bitcast i32* %ext_attributes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %350) #10
  %351 = bitcast i32* %level to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %351) #10
  %352 = bitcast i16* %dos_date to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %352) #10
  %353 = bitcast i16* %dos_time to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %353) #10
  %354 = bitcast i16* %method to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %354) #10
  %355 = load i32, i32* %retval, align 4
  ret i32 %355
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_validate_archive_name(i8* %pArchive_name) #0 {
entry:
  %retval = alloca i32, align 4
  %pArchive_name.addr = alloca i8*, align 8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  %0 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %1 = load i8, i8* %0, align 1, !tbaa !12
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 47
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4
  ret i32 %2
}

; Function Attrs: nounwind ssp uwtable
define internal void @mz_zip_time_t_to_dos_time(i64 %time, i16* %pDOS_time, i16* %pDOS_date) #0 {
entry:
  %time.addr = alloca i64, align 8
  %pDOS_time.addr = alloca i16*, align 8
  %pDOS_date.addr = alloca i16*, align 8
  %tm = alloca %struct.tm*, align 8
  store i64 %time, i64* %time.addr, align 8, !tbaa !4
  store i16* %pDOS_time, i16** %pDOS_time.addr, align 8, !tbaa !8
  store i16* %pDOS_date, i16** %pDOS_date.addr, align 8, !tbaa !8
  %0 = bitcast %struct.tm** %tm to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %call = call %struct.tm* @localtime(i64* %time.addr)
  store %struct.tm* %call, %struct.tm** %tm, align 8, !tbaa !8
  %1 = load %struct.tm*, %struct.tm** %tm, align 8, !tbaa !8
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %1, i32 0, i32 2
  %2 = load i32, i32* %tm_hour, align 8, !tbaa !183
  %shl = shl i32 %2, 11
  %3 = load %struct.tm*, %struct.tm** %tm, align 8, !tbaa !8
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %3, i32 0, i32 1
  %4 = load i32, i32* %tm_min, align 4, !tbaa !185
  %shl1 = shl i32 %4, 5
  %add = add nsw i32 %shl, %shl1
  %5 = load %struct.tm*, %struct.tm** %tm, align 8, !tbaa !8
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 0
  %6 = load i32, i32* %tm_sec, align 8, !tbaa !186
  %shr = ashr i32 %6, 1
  %add2 = add nsw i32 %add, %shr
  %conv = trunc i32 %add2 to i16
  %7 = load i16*, i16** %pDOS_time.addr, align 8, !tbaa !8
  store i16 %conv, i16* %7, align 2, !tbaa !88
  %8 = load %struct.tm*, %struct.tm** %tm, align 8, !tbaa !8
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %8, i32 0, i32 5
  %9 = load i32, i32* %tm_year, align 4, !tbaa !187
  %add3 = add nsw i32 %9, 1900
  %sub = sub nsw i32 %add3, 1980
  %shl4 = shl i32 %sub, 9
  %10 = load %struct.tm*, %struct.tm** %tm, align 8, !tbaa !8
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %10, i32 0, i32 4
  %11 = load i32, i32* %tm_mon, align 8, !tbaa !188
  %add5 = add nsw i32 %11, 1
  %shl6 = shl i32 %add5, 5
  %add7 = add nsw i32 %shl4, %shl6
  %12 = load %struct.tm*, %struct.tm** %tm, align 8, !tbaa !8
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %12, i32 0, i32 3
  %13 = load i32, i32* %tm_mday, align 4, !tbaa !189
  %add8 = add nsw i32 %add7, %13
  %conv9 = trunc i32 %add8 to i16
  %14 = load i16*, i16** %pDOS_date.addr, align 8, !tbaa !8
  store i16 %conv9, i16* %14, align 2, !tbaa !88
  %15 = bitcast %struct.tm** %tm to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %15) #10
  ret void
}

declare i64 @time(i64*) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %n = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 6
  %2 = load i64, i64* %m_file_offset_alignment, align 8, !tbaa !177
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 0
  %4 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 6
  %6 = load i64, i64* %m_file_offset_alignment1, align 8, !tbaa !177
  %sub = sub i64 %6, 1
  %and = and i64 %4, %sub
  %conv = trunc i64 %and to i32
  store i32 %conv, i32* %n, align 4, !tbaa !10
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 6
  %8 = load i64, i64* %m_file_offset_alignment2, align 8, !tbaa !177
  %9 = load i32, i32* %n, align 4, !tbaa !10
  %conv3 = zext i32 %9 to i64
  %sub4 = sub i64 %8, %conv3
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 6
  %11 = load i64, i64* %m_file_offset_alignment5, align 8, !tbaa !177
  %sub6 = sub i64 %11, 1
  %and7 = and i64 %sub4, %sub6
  %conv8 = trunc i64 %and7 to i32
  store i32 %conv8, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %12 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #10
  %13 = load i32, i32* %retval, align 4
  ret i32 %13
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i32 @mz_zip_array_ensure_room(%struct.mz_zip_archive* %pZip, %struct.mz_zip_array* %pArray, i64 %n) #9 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  %n.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %2 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %2, i32 0, i32 1
  %3 = load i64, i64* %m_size, align 8, !tbaa !174
  %4 = load i64, i64* %n.addr, align 8, !tbaa !4
  %add = add i64 %3, %4
  %call = call i32 @mz_zip_array_reserve(%struct.mz_zip_archive* %0, %struct.mz_zip_array* %1, i64 %add, i32 1)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive* %pZip, i64 %cur_file_ofs, i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %cur_file_ofs.addr = alloca i64, align 8
  %n.addr = alloca i32, align 4
  %buf = alloca [4096 x i8], align 16
  %s = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i64 %cur_file_ofs, i64* %cur_file_ofs.addr, align 8, !tbaa !76
  store i32 %n, i32* %n.addr, align 4, !tbaa !10
  %0 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* %0) #10
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  %1 = load i32, i32* %n.addr, align 4, !tbaa !10
  %conv = zext i32 %1 to i64
  %cmp = icmp ult i64 4096, %conv
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load i32, i32* %n.addr, align 4, !tbaa !10
  %conv2 = zext i32 %2 to i64
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 4096, %cond.true ], [ %conv2, %cond.false ]
  %call = call i8* @__memset_chk(i8* %arraydecay, i32 0, i64 %cond, i64 4096) #10
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %cond.end
  %3 = load i32, i32* %n.addr, align 4, !tbaa !10
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = bitcast i32* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  %5 = load i32, i32* %n.addr, align 4, !tbaa !10
  %conv3 = zext i32 %5 to i64
  %cmp4 = icmp ult i64 4096, %conv3
  br i1 %cmp4, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %while.body
  br label %cond.end9

cond.false7:                                      ; preds = %while.body
  %6 = load i32, i32* %n.addr, align 4, !tbaa !10
  %conv8 = zext i32 %6 to i64
  br label %cond.end9

cond.end9:                                        ; preds = %cond.false7, %cond.true6
  %cond10 = phi i64 [ 4096, %cond.true6 ], [ %conv8, %cond.false7 ]
  %conv11 = trunc i64 %cond10 to i32
  store i32 %conv11, i32* %s, align 4, !tbaa !10
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 12
  %8 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 14
  %10 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %11 = load i64, i64* %cur_file_ofs.addr, align 8, !tbaa !76
  %arraydecay12 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  %12 = load i32, i32* %s, align 4, !tbaa !10
  %conv13 = zext i32 %12 to i64
  %call14 = call i64 %8(i8* %10, i64 %11, i8* %arraydecay12, i64 %conv13)
  %13 = load i32, i32* %s, align 4, !tbaa !10
  %conv15 = zext i32 %13 to i64
  %cmp16 = icmp ne i64 %call14, %conv15
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end9
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call18 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %14, i32 19)
  store i32 %call18, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end9
  %15 = load i32, i32* %s, align 4, !tbaa !10
  %conv19 = zext i32 %15 to i64
  %16 = load i64, i64* %cur_file_ofs.addr, align 8, !tbaa !76
  %add = add i64 %16, %conv19
  store i64 %add, i64* %cur_file_ofs.addr, align 8, !tbaa !76
  %17 = load i32, i32* %s, align 4, !tbaa !10
  %18 = load i32, i32* %n.addr, align 4, !tbaa !10
  %sub = sub i32 %18, %17
  store i32 %sub, i32* %n.addr, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %19 = bitcast i32* %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %19) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup20 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup20

cleanup20:                                        ; preds = %while.end, %cleanup
  %20 = bitcast [4096 x i8]* %buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* %20) #10
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_create_zip64_extra_data(i8* %pBuf, i64* %pUncomp_size, i64* %pComp_size, i64* %pLocal_header_ofs) #0 {
entry:
  %pBuf.addr = alloca i8*, align 8
  %pUncomp_size.addr = alloca i64*, align 8
  %pComp_size.addr = alloca i64*, align 8
  %pLocal_header_ofs.addr = alloca i64*, align 8
  %pDst = alloca i8*, align 8
  %field_size = alloca i32, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64* %pUncomp_size, i64** %pUncomp_size.addr, align 8, !tbaa !8
  store i64* %pComp_size, i64** %pComp_size.addr, align 8, !tbaa !8
  store i64* %pLocal_header_ofs, i64** %pLocal_header_ofs.addr, align 8, !tbaa !8
  %0 = bitcast i8** %pDst to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  store i8* %1, i8** %pDst, align 8, !tbaa !8
  %2 = bitcast i32* %field_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  store i32 0, i32* %field_size, align 4, !tbaa !10
  %3 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 0
  call void @mz_write_le16(i8* %add.ptr, i16 zeroext 1)
  %4 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr1 = getelementptr inbounds i8, i8* %4, i64 2
  call void @mz_write_le16(i8* %add.ptr1, i16 zeroext 0)
  %5 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 4
  store i8* %add.ptr2, i8** %pDst, align 8, !tbaa !8
  %6 = load i64*, i64** %pUncomp_size.addr, align 8, !tbaa !8
  %tobool = icmp ne i64* %6, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i8*, i8** %pDst, align 8, !tbaa !8
  %8 = load i64*, i64** %pUncomp_size.addr, align 8, !tbaa !8
  %9 = load i64, i64* %8, align 8, !tbaa !76
  call void @mz_write_le64(i8* %7, i64 %9)
  %10 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr3 = getelementptr inbounds i8, i8* %10, i64 8
  store i8* %add.ptr3, i8** %pDst, align 8, !tbaa !8
  %11 = load i32, i32* %field_size, align 4, !tbaa !10
  %conv = zext i32 %11 to i64
  %add = add i64 %conv, 8
  %conv4 = trunc i64 %add to i32
  store i32 %conv4, i32* %field_size, align 4, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i64*, i64** %pComp_size.addr, align 8, !tbaa !8
  %tobool5 = icmp ne i64* %12, null
  br i1 %tobool5, label %if.then6, label %if.end11

if.then6:                                         ; preds = %if.end
  %13 = load i8*, i8** %pDst, align 8, !tbaa !8
  %14 = load i64*, i64** %pComp_size.addr, align 8, !tbaa !8
  %15 = load i64, i64* %14, align 8, !tbaa !76
  call void @mz_write_le64(i8* %13, i64 %15)
  %16 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr7 = getelementptr inbounds i8, i8* %16, i64 8
  store i8* %add.ptr7, i8** %pDst, align 8, !tbaa !8
  %17 = load i32, i32* %field_size, align 4, !tbaa !10
  %conv8 = zext i32 %17 to i64
  %add9 = add i64 %conv8, 8
  %conv10 = trunc i64 %add9 to i32
  store i32 %conv10, i32* %field_size, align 4, !tbaa !10
  br label %if.end11

if.end11:                                         ; preds = %if.then6, %if.end
  %18 = load i64*, i64** %pLocal_header_ofs.addr, align 8, !tbaa !8
  %tobool12 = icmp ne i64* %18, null
  br i1 %tobool12, label %if.then13, label %if.end18

if.then13:                                        ; preds = %if.end11
  %19 = load i8*, i8** %pDst, align 8, !tbaa !8
  %20 = load i64*, i64** %pLocal_header_ofs.addr, align 8, !tbaa !8
  %21 = load i64, i64* %20, align 8, !tbaa !76
  call void @mz_write_le64(i8* %19, i64 %21)
  %22 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr14 = getelementptr inbounds i8, i8* %22, i64 8
  store i8* %add.ptr14, i8** %pDst, align 8, !tbaa !8
  %23 = load i32, i32* %field_size, align 4, !tbaa !10
  %conv15 = zext i32 %23 to i64
  %add16 = add i64 %conv15, 8
  %conv17 = trunc i64 %add16 to i32
  store i32 %conv17, i32* %field_size, align 4, !tbaa !10
  br label %if.end18

if.end18:                                         ; preds = %if.then13, %if.end11
  %24 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %add.ptr19 = getelementptr inbounds i8, i8* %24, i64 2
  %25 = load i32, i32* %field_size, align 4, !tbaa !10
  %conv20 = trunc i32 %25 to i16
  call void @mz_write_le16(i8* %add.ptr19, i16 zeroext %conv20)
  %26 = load i8*, i8** %pDst, align 8, !tbaa !8
  %27 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %sub.ptr.lhs.cast = ptrtoint i8* %26 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %27 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv21 = trunc i64 %sub.ptr.sub to i32
  %28 = bitcast i32* %field_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %28) #10
  %29 = bitcast i8** %pDst to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %29) #10
  ret i32 %conv21
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %pZip, i8* %pDst, i16 zeroext %filename_size, i16 zeroext %extra_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pDst.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %extra_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pDst, i8** %pDst.addr, align 8, !tbaa !8
  store i16 %filename_size, i16* %filename_size.addr, align 2, !tbaa !88
  store i16 %extra_size, i16* %extra_size.addr, align 2, !tbaa !88
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8, !tbaa !76
  store i64 %comp_size, i64* %comp_size.addr, align 8, !tbaa !76
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  store i16 %method, i16* %method.addr, align 2, !tbaa !88
  store i16 %bit_flags, i16* %bit_flags.addr, align 2, !tbaa !88
  store i16 %dos_time, i16* %dos_time.addr, align 2, !tbaa !88
  store i16 %dos_date, i16* %dos_date.addr, align 2, !tbaa !88
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %3 = call i64 @llvm.objectsize.i64.p0i8(i8* %2, i1 false, i1 true, i1 false)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 30, i64 %3) #10
  %4 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 0
  call void @mz_write_le32(i8* %add.ptr, i32 67324752)
  %5 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 4
  %6 = load i16, i16* %method.addr, align 2, !tbaa !88
  %conv = zext i16 %6 to i32
  %tobool = icmp ne i32 %conv, 0
  %7 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 20, i32 0
  %conv2 = trunc i32 %cond to i16
  call void @mz_write_le16(i8* %add.ptr1, i16 zeroext %conv2)
  %8 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr3 = getelementptr inbounds i8, i8* %8, i64 6
  %9 = load i16, i16* %bit_flags.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr3, i16 zeroext %9)
  %10 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr4 = getelementptr inbounds i8, i8* %10, i64 8
  %11 = load i16, i16* %method.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr4, i16 zeroext %11)
  %12 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr5 = getelementptr inbounds i8, i8* %12, i64 10
  %13 = load i16, i16* %dos_time.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr5, i16 zeroext %13)
  %14 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr6 = getelementptr inbounds i8, i8* %14, i64 12
  %15 = load i16, i16* %dos_date.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr6, i16 zeroext %15)
  %16 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr7 = getelementptr inbounds i8, i8* %16, i64 14
  %17 = load i32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  call void @mz_write_le32(i8* %add.ptr7, i32 %17)
  %18 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr8 = getelementptr inbounds i8, i8* %18, i64 18
  %19 = load i64, i64* %comp_size.addr, align 8, !tbaa !76
  %cmp = icmp ult i64 %19, 4294967295
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %20 = load i64, i64* %comp_size.addr, align 8, !tbaa !76
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond10 = phi i64 [ %20, %cond.true ], [ 4294967295, %cond.false ]
  %conv11 = trunc i64 %cond10 to i32
  call void @mz_write_le32(i8* %add.ptr8, i32 %conv11)
  %21 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr12 = getelementptr inbounds i8, i8* %21, i64 22
  %22 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp13 = icmp ult i64 %22, 4294967295
  br i1 %cmp13, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %cond.end
  %23 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  br label %cond.end17

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i64 [ %23, %cond.true15 ], [ 4294967295, %cond.false16 ]
  %conv19 = trunc i64 %cond18 to i32
  call void @mz_write_le32(i8* %add.ptr12, i32 %conv19)
  %24 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr20 = getelementptr inbounds i8, i8* %24, i64 26
  %25 = load i16, i16* %filename_size.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr20, i16 zeroext %25)
  %26 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr21 = getelementptr inbounds i8, i8* %26, i64 28
  %27 = load i16, i16* %extra_size.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr21, i16 zeroext %27)
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_add_put_buf_callback(i8* %pBuf, i32 %len, i8* %pUser) #0 {
entry:
  %retval = alloca i32, align 4
  %pBuf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %pUser.addr = alloca i8*, align 8
  %pState = alloca %struct.mz_zip_writer_add_state*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i32 %len, i32* %len.addr, align 4, !tbaa !10
  store i8* %pUser, i8** %pUser.addr, align 8, !tbaa !8
  %0 = bitcast %struct.mz_zip_writer_add_state** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pUser.addr, align 8, !tbaa !8
  %2 = bitcast i8* %1 to %struct.mz_zip_writer_add_state*
  store %struct.mz_zip_writer_add_state* %2, %struct.mz_zip_writer_add_state** %pState, align 8, !tbaa !8
  %3 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8, !tbaa !8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %3, i32 0, i32 0
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %m_pZip, align 8, !tbaa !179
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 12
  %5 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %6 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8, !tbaa !8
  %m_pZip1 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %6, i32 0, i32 0
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %m_pZip1, align 8, !tbaa !179
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 14
  %8 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %9 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8, !tbaa !8
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %9, i32 0, i32 1
  %10 = load i64, i64* %m_cur_archive_file_ofs, align 8, !tbaa !181
  %11 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %12 = load i32, i32* %len.addr, align 4, !tbaa !10
  %conv = sext i32 %12 to i64
  %call = call i64 %5(i8* %8, i64 %10, i8* %11, i64 %conv)
  %conv2 = trunc i64 %call to i32
  %13 = load i32, i32* %len.addr, align 4, !tbaa !10
  %cmp = icmp ne i32 %conv2, %13
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %14 = load i32, i32* %len.addr, align 4, !tbaa !10
  %conv4 = sext i32 %14 to i64
  %15 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8, !tbaa !8
  %m_cur_archive_file_ofs5 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %15, i32 0, i32 1
  %16 = load i64, i64* %m_cur_archive_file_ofs5, align 8, !tbaa !181
  %add = add i64 %16, %conv4
  store i64 %add, i64* %m_cur_archive_file_ofs5, align 8, !tbaa !181
  %17 = load i32, i32* %len.addr, align 4, !tbaa !10
  %conv6 = sext i32 %17 to i64
  %18 = load %struct.mz_zip_writer_add_state*, %struct.mz_zip_writer_add_state** %pState, align 8, !tbaa !8
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %18, i32 0, i32 2
  %19 = load i64, i64* %m_comp_size, align 8, !tbaa !182
  %add7 = add i64 %19, %conv6
  store i64 %add7, i64* %m_comp_size, align 8, !tbaa !182
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %20 = bitcast %struct.mz_zip_writer_add_state** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %20) #10
  %21 = load i32, i32* %retval, align 4
  ret i32 %21
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal void @mz_write_le32(i8* %p, i32 %v) #9 {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8, !tbaa !8
  store i32 %v, i32* %v.addr, align 4, !tbaa !10
  %0 = load i32, i32* %v.addr, align 4, !tbaa !10
  %conv = trunc i32 %0 to i8
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !12
  %2 = load i32, i32* %v.addr, align 4, !tbaa !10
  %shr = lshr i32 %2, 8
  %conv1 = trunc i32 %shr to i8
  %3 = load i8*, i8** %p.addr, align 8, !tbaa !8
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %conv1, i8* %arrayidx2, align 1, !tbaa !12
  %4 = load i32, i32* %v.addr, align 4, !tbaa !10
  %shr3 = lshr i32 %4, 16
  %conv4 = trunc i32 %shr3 to i8
  %5 = load i8*, i8** %p.addr, align 8, !tbaa !8
  %arrayidx5 = getelementptr inbounds i8, i8* %5, i64 2
  store i8 %conv4, i8* %arrayidx5, align 1, !tbaa !12
  %6 = load i32, i32* %v.addr, align 4, !tbaa !10
  %shr6 = lshr i32 %6, 24
  %conv7 = trunc i32 %shr6 to i8
  %7 = load i8*, i8** %p.addr, align 8, !tbaa !8
  %arrayidx8 = getelementptr inbounds i8, i8* %7, i64 3
  store i8 %conv7, i8* %arrayidx8, align 1, !tbaa !12
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal void @mz_write_le64(i8* %p, i64 %v) #9 {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i64, align 8
  store i8* %p, i8** %p.addr, align 8, !tbaa !8
  store i64 %v, i64* %v.addr, align 8, !tbaa !76
  %0 = load i8*, i8** %p.addr, align 8, !tbaa !8
  %1 = load i64, i64* %v.addr, align 8, !tbaa !76
  %conv = trunc i64 %1 to i32
  call void @mz_write_le32(i8* %0, i32 %conv)
  %2 = load i8*, i8** %p.addr, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 4
  %3 = load i64, i64* %v.addr, align 8, !tbaa !76
  %shr = lshr i64 %3, 32
  %conv1 = trunc i64 %shr to i32
  call void @mz_write_le32(i8* %add.ptr, i32 %conv1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive* %pZip, i8* %pFilename, i16 zeroext %filename_size, i8* %pExtra, i16 zeroext %extra_size, i8* %pComment, i16 zeroext %comment_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date, i64 %local_header_ofs, i32 %ext_attributes, i8* %user_extra_data, i32 %user_extra_data_len) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pFilename.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %pExtra.addr = alloca i8*, align 8
  %extra_size.addr = alloca i16, align 2
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  %local_header_ofs.addr = alloca i64, align 8
  %ext_attributes.addr = alloca i32, align 4
  %user_extra_data.addr = alloca i8*, align 8
  %user_extra_data_len.addr = alloca i32, align 4
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %central_dir_ofs = alloca i32, align 4
  %orig_central_dir_size = alloca i64, align 8
  %central_dir_header = alloca [46 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i16 %filename_size, i16* %filename_size.addr, align 2, !tbaa !88
  store i8* %pExtra, i8** %pExtra.addr, align 8, !tbaa !8
  store i16 %extra_size, i16* %extra_size.addr, align 2, !tbaa !88
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8, !tbaa !76
  store i64 %comp_size, i64* %comp_size.addr, align 8, !tbaa !76
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  store i16 %method, i16* %method.addr, align 2, !tbaa !88
  store i16 %bit_flags, i16* %bit_flags.addr, align 2, !tbaa !88
  store i16 %dos_time, i16* %dos_time.addr, align 2, !tbaa !88
  store i16 %dos_date, i16* %dos_date.addr, align 2, !tbaa !88
  store i64 %local_header_ofs, i64* %local_header_ofs.addr, align 8, !tbaa !76
  store i32 %ext_attributes, i32* %ext_attributes.addr, align 4, !tbaa !10
  store i8* %user_extra_data, i8** %user_extra_data.addr, align 8, !tbaa !8
  store i32 %user_extra_data_len, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %0 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %2, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %3 = bitcast i32* %central_dir_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %5 = load i64, i64* %m_size, align 8, !tbaa !175
  %conv = trunc i64 %5 to i32
  store i32 %conv, i32* %central_dir_ofs, align 4, !tbaa !10
  %6 = bitcast i64* %orig_central_dir_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir1 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %7, i32 0, i32 0
  %m_size2 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir1, i32 0, i32 1
  %8 = load i64, i64* %m_size2, align 8, !tbaa !175
  store i64 %8, i64* %orig_central_dir_size, align 8, !tbaa !4
  %9 = bitcast [46 x i8]* %central_dir_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 46, i8* %9) #10
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8, !tbaa !98
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %11, i32 0, i32 4
  %12 = load i32, i32* %m_zip64, align 4, !tbaa !118
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  %13 = load i64, i64* %local_header_ofs.addr, align 8, !tbaa !76
  %cmp = icmp ugt i64 %13, 4294967295
  br i1 %cmp, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %14, i32 3)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.then
  br label %if.end6

if.end6:                                          ; preds = %if.end, %entry
  %15 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir7 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %15, i32 0, i32 0
  %m_size8 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir7, i32 0, i32 1
  %16 = load i64, i64* %m_size8, align 8, !tbaa !175
  %add = add i64 %16, 46
  %17 = load i16, i16* %filename_size.addr, align 2, !tbaa !88
  %conv9 = zext i16 %17 to i64
  %add10 = add i64 %add, %conv9
  %18 = load i16, i16* %extra_size.addr, align 2, !tbaa !88
  %conv11 = zext i16 %18 to i64
  %add12 = add i64 %add10, %conv11
  %19 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv13 = zext i32 %19 to i64
  %add14 = add i64 %add12, %conv13
  %20 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv15 = zext i16 %20 to i64
  %add16 = add i64 %add14, %conv15
  %cmp17 = icmp uge i64 %add16, 4294967295
  br i1 %cmp17, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end6
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call20 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %21, i32 15)
  store i32 %call20, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end21:                                         ; preds = %if.end6
  %22 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %arraydecay = getelementptr inbounds [46 x i8], [46 x i8]* %central_dir_header, i64 0, i64 0
  %23 = load i16, i16* %filename_size.addr, align 2, !tbaa !88
  %24 = load i16, i16* %extra_size.addr, align 2, !tbaa !88
  %conv22 = zext i16 %24 to i32
  %25 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %add23 = add i32 %conv22, %25
  %conv24 = trunc i32 %add23 to i16
  %26 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %27 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %28 = load i64, i64* %comp_size.addr, align 8, !tbaa !76
  %29 = load i32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  %30 = load i16, i16* %method.addr, align 2, !tbaa !88
  %31 = load i16, i16* %bit_flags.addr, align 2, !tbaa !88
  %32 = load i16, i16* %dos_time.addr, align 2, !tbaa !88
  %33 = load i16, i16* %dos_date.addr, align 2, !tbaa !88
  %34 = load i64, i64* %local_header_ofs.addr, align 8, !tbaa !76
  %35 = load i32, i32* %ext_attributes.addr, align 4, !tbaa !10
  %call25 = call i32 @mz_zip_writer_create_central_dir_header(%struct.mz_zip_archive* %22, i8* %arraydecay, i16 zeroext %23, i16 zeroext %conv24, i16 zeroext %26, i64 %27, i64 %28, i32 %29, i16 zeroext %30, i16 zeroext %31, i16 zeroext %32, i16 zeroext %33, i64 %34, i32 %35)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end29, label %if.then27

if.then27:                                        ; preds = %if.end21
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call28 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %36, i32 27)
  store i32 %call28, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end29:                                         ; preds = %if.end21
  %37 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %38 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir30 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %38, i32 0, i32 0
  %arraydecay31 = getelementptr inbounds [46 x i8], [46 x i8]* %central_dir_header, i64 0, i64 0
  %call32 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %37, %struct.mz_zip_array* %m_central_dir30, i8* %arraydecay31, i64 46)
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %lor.lhs.false, label %if.then56

lor.lhs.false:                                    ; preds = %if.end29
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %40 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir34 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %40, i32 0, i32 0
  %41 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %42 = load i16, i16* %filename_size.addr, align 2, !tbaa !88
  %conv35 = zext i16 %42 to i64
  %call36 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %39, %struct.mz_zip_array* %m_central_dir34, i8* %41, i64 %conv35)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %lor.lhs.false38, label %if.then56

lor.lhs.false38:                                  ; preds = %lor.lhs.false
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %44 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir39 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %44, i32 0, i32 0
  %45 = load i8*, i8** %pExtra.addr, align 8, !tbaa !8
  %46 = load i16, i16* %extra_size.addr, align 2, !tbaa !88
  %conv40 = zext i16 %46 to i64
  %call41 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %43, %struct.mz_zip_array* %m_central_dir39, i8* %45, i64 %conv40)
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %lor.lhs.false43, label %if.then56

lor.lhs.false43:                                  ; preds = %lor.lhs.false38
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %48 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir44 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %48, i32 0, i32 0
  %49 = load i8*, i8** %user_extra_data.addr, align 8, !tbaa !8
  %50 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv45 = zext i32 %50 to i64
  %call46 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %47, %struct.mz_zip_array* %m_central_dir44, i8* %49, i64 %conv45)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %lor.lhs.false48, label %if.then56

lor.lhs.false48:                                  ; preds = %lor.lhs.false43
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %52 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir49 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %52, i32 0, i32 0
  %53 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %54 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv50 = zext i16 %54 to i64
  %call51 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %51, %struct.mz_zip_array* %m_central_dir49, i8* %53, i64 %conv50)
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %lor.lhs.false53, label %if.then56

lor.lhs.false53:                                  ; preds = %lor.lhs.false48
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %56 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %56, i32 0, i32 1
  %57 = bitcast i32* %central_dir_ofs to i8*
  %call54 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %55, %struct.mz_zip_array* %m_central_dir_offsets, i8* %57, i64 1)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end60, label %if.then56

if.then56:                                        ; preds = %lor.lhs.false53, %lor.lhs.false48, %lor.lhs.false43, %lor.lhs.false38, %lor.lhs.false, %if.end29
  %58 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %59 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir57 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %59, i32 0, i32 0
  %60 = load i64, i64* %orig_central_dir_size, align 8, !tbaa !4
  %call58 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %58, %struct.mz_zip_array* %m_central_dir57, i64 %60, i32 0)
  %61 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call59 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %61, i32 16)
  store i32 %call59, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end60:                                         ; preds = %lor.lhs.false53
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end60, %if.then56, %if.then27, %if.then19, %if.then5
  %62 = bitcast [46 x i8]* %central_dir_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 46, i8* %62) #10
  %63 = bitcast i64* %orig_central_dir_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %63) #10
  %64 = bitcast i32* %central_dir_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %64) #10
  %65 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %65) #10
  %66 = load i32, i32* %retval, align 4
  ret i32 %66
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_add_read_buf_callback(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i64 (i8*, i64, i8*, i64)* %read_callback, i8* %callback_opaque, i64 %size_to_add, i64* %pFile_time, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i8* %user_extra_data, i32 %user_extra_data_len, i8* %user_extra_data_central, i32 %user_extra_data_central_len) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %read_callback.addr = alloca i64 (i8*, i64, i8*, i64)*, align 8
  %callback_opaque.addr = alloca i8*, align 8
  %size_to_add.addr = alloca i64, align 8
  %pFile_time.addr = alloca i64*, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %user_extra_data.addr = alloca i8*, align 8
  %user_extra_data_len.addr = alloca i32, align 4
  %user_extra_data_central.addr = alloca i8*, align 8
  %user_extra_data_central_len.addr = alloca i32, align 4
  %gen_flags = alloca i16, align 2
  %uncomp_crc32 = alloca i32, align 4
  %level = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %method = alloca i16, align 2
  %dos_time = alloca i16, align 2
  %dos_date = alloca i16, align 2
  %ext_attributes = alloca i16, align 2
  %local_dir_header_ofs = alloca i64, align 8
  %cur_archive_file_ofs = alloca i64, align 8
  %uncomp_size = alloca i64, align 8
  %comp_size = alloca i64, align 8
  %archive_name_size = alloca i64, align 8
  %local_dir_header = alloca [30 x i8], align 16
  %pExtra_data = alloca i8*, align 8
  %extra_size = alloca i32, align 4
  %extra_data = alloca [28 x i8], align 16
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %file_ofs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %uncomp_remaining = alloca i64, align 8
  %pRead_buf = alloca i8*, align 8
  %n = alloca i32, align 4
  %result = alloca i32, align 4
  %state = alloca %struct.mz_zip_writer_add_state, align 8
  %pComp = alloca %struct.tdefl_compressor*, align 8
  %in_buf_size = alloca i64, align 8
  %status = alloca i32, align 4
  %flush = alloca i32, align 4
  %local_dir_footer = alloca [24 x i8], align 16
  %local_dir_footer_size = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i64 (i8*, i64, i8*, i64)* %read_callback, i64 (i8*, i64, i8*, i64)** %read_callback.addr, align 8, !tbaa !8
  store i8* %callback_opaque, i8** %callback_opaque.addr, align 8, !tbaa !8
  store i64 %size_to_add, i64* %size_to_add.addr, align 8, !tbaa !76
  store i64* %pFile_time, i64** %pFile_time.addr, align 8, !tbaa !8
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4, !tbaa !10
  store i8* %user_extra_data, i8** %user_extra_data.addr, align 8, !tbaa !8
  store i32 %user_extra_data_len, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  store i8* %user_extra_data_central, i8** %user_extra_data_central.addr, align 8, !tbaa !8
  store i32 %user_extra_data_central_len, i32* %user_extra_data_central_len.addr, align 4, !tbaa !10
  %0 = bitcast i16* %gen_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #10
  store i16 8, i16* %gen_flags, align 2, !tbaa !88
  %1 = bitcast i32* %uncomp_crc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  store i32 0, i32* %uncomp_crc32, align 4, !tbaa !10
  %2 = bitcast i32* %level to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast i32* %num_alignment_padding_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = bitcast i16* %method to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %4) #10
  store i16 0, i16* %method, align 2, !tbaa !88
  %5 = bitcast i16* %dos_time to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %5) #10
  store i16 0, i16* %dos_time, align 2, !tbaa !88
  %6 = bitcast i16* %dos_date to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %6) #10
  store i16 0, i16* %dos_date, align 2, !tbaa !88
  %7 = bitcast i16* %ext_attributes to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %7) #10
  store i16 0, i16* %ext_attributes, align 2, !tbaa !88
  %8 = bitcast i64* %local_dir_header_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #10
  %9 = bitcast i64* %cur_archive_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #10
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 0
  %11 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  store i64 %11, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %12 = bitcast i64* %uncomp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #10
  %13 = load i64, i64* %size_to_add.addr, align 8, !tbaa !76
  store i64 %13, i64* %uncomp_size, align 8, !tbaa !76
  %14 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #10
  store i64 0, i64* %comp_size, align 8, !tbaa !76
  %15 = bitcast i64* %archive_name_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #10
  %16 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 30, i8* %16) #10
  %17 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #10
  store i8* null, i8** %pExtra_data, align 8, !tbaa !8
  %18 = bitcast i32* %extra_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #10
  store i32 0, i32* %extra_size, align 4, !tbaa !10
  %19 = bitcast [28 x i8]* %extra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 28, i8* %19) #10
  %20 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %20) #10
  %21 = bitcast i64* %file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %21) #10
  store i64 0, i64* %file_ofs, align 8, !tbaa !76
  %22 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and = and i32 %22, 65536
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %23 = load i16, i16* %gen_flags, align 2, !tbaa !88
  %conv = zext i16 %23 to i32
  %or = or i32 %conv, 2048
  %conv1 = trunc i32 %or to i16
  store i16 %conv1, i16* %gen_flags, align 2, !tbaa !88
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %24 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %cmp = icmp slt i32 %24, 0
  br i1 %cmp, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store i32 6, i32* %level_and_flags.addr, align 4, !tbaa !10
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %25 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and5 = and i32 %25, 15
  store i32 %and5, i32* %level, align 4, !tbaa !10
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool6 = icmp ne %struct.mz_zip_archive* %26, null
  br i1 %tobool6, label %lor.lhs.false, label %if.then20

lor.lhs.false:                                    ; preds = %if.end4
  %27 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %27, i32 0, i32 15
  %28 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool7 = icmp ne %struct.mz_zip_internal_state_tag* %28, null
  br i1 %tobool7, label %lor.lhs.false8, label %if.then20

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %29 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %29, i32 0, i32 3
  %30 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp9 = icmp ne i32 %30, 2
  br i1 %cmp9, label %if.then20, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false8
  %31 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %tobool12 = icmp ne i8* %31, null
  br i1 %tobool12, label %lor.lhs.false13, label %if.then20

lor.lhs.false13:                                  ; preds = %lor.lhs.false11
  %32 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv14 = zext i16 %32 to i32
  %tobool15 = icmp ne i32 %conv14, 0
  br i1 %tobool15, label %land.lhs.true, label %lor.lhs.false17

land.lhs.true:                                    ; preds = %lor.lhs.false13
  %33 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %tobool16 = icmp ne i8* %33, null
  br i1 %tobool16, label %lor.lhs.false17, label %if.then20

lor.lhs.false17:                                  ; preds = %land.lhs.true, %lor.lhs.false13
  %34 = load i32, i32* %level, align 4, !tbaa !10
  %cmp18 = icmp ugt i32 %34, 10
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %lor.lhs.false17, %land.lhs.true, %lor.lhs.false11, %lor.lhs.false8, %lor.lhs.false, %if.end4
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %35, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end21:                                         ; preds = %lor.lhs.false17
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState22 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 15
  %37 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState22, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %37, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %38 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %38, i32 0, i32 4
  %39 = load i32, i32* %m_zip64, align 4, !tbaa !118
  %tobool23 = icmp ne i32 %39, 0
  br i1 %tobool23, label %if.end29, label %land.lhs.true24

land.lhs.true24:                                  ; preds = %if.end21
  %40 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %cmp25 = icmp ugt i64 %40, 4294967295
  br i1 %cmp25, label %if.then27, label %if.end29

if.then27:                                        ; preds = %land.lhs.true24
  %41 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6428 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %41, i32 0, i32 4
  store i32 1, i32* %m_zip6428, align 4, !tbaa !118
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %land.lhs.true24, %if.end21
  %42 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and30 = and i32 %42, 1024
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end29
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call33 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %43, i32 24)
  store i32 %call33, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end34:                                         ; preds = %if.end29
  %44 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %call35 = call i32 @mz_zip_writer_validate_archive_name(i8* %44)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.end39, label %if.then37

if.then37:                                        ; preds = %if.end34
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call38 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %45, i32 25)
  store i32 %call38, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end39:                                         ; preds = %if.end34
  %46 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6440 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %46, i32 0, i32 4
  %47 = load i32, i32* %m_zip6440, align 4, !tbaa !118
  %tobool41 = icmp ne i32 %47, 0
  br i1 %tobool41, label %if.then42, label %if.else

if.then42:                                        ; preds = %if.end39
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %48, i32 0, i32 2
  %49 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp43 = icmp eq i32 %49, -1
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.then42
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call46 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %50, i32 2)
  store i32 %call46, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end47:                                         ; preds = %if.then42
  br label %if.end54

if.else:                                          ; preds = %if.end39
  %51 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files48 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %51, i32 0, i32 2
  %52 = load i32, i32* %m_total_files48, align 8, !tbaa !113
  %cmp49 = icmp eq i32 %52, 65535
  br i1 %cmp49, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.else
  %53 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6452 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %53, i32 0, i32 4
  store i32 1, i32* %m_zip6452, align 4, !tbaa !118
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.else
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end47
  %54 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %call55 = call i64 @strlen(i8* %54)
  store i64 %call55, i64* %archive_name_size, align 8, !tbaa !4
  %55 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %cmp56 = icmp ugt i64 %55, 65535
  br i1 %cmp56, label %if.then58, label %if.end60

if.then58:                                        ; preds = %if.end54
  %56 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call59 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %56, i32 25)
  store i32 %call59, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end60:                                         ; preds = %if.end54
  %57 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call61 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive* %57)
  store i32 %call61, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %58 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %58, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %59 = load i64, i64* %m_size, align 8, !tbaa !175
  %add = add i64 %59, 46
  %60 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %add62 = add i64 %add, %60
  %add63 = add i64 %add62, 28
  %61 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv64 = zext i16 %61 to i64
  %add65 = add i64 %add63, %conv64
  %cmp66 = icmp uge i64 %add65, 4294967295
  br i1 %cmp66, label %if.then68, label %if.end70

if.then68:                                        ; preds = %if.end60
  %62 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call69 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %62, i32 15)
  store i32 %call69, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end70:                                         ; preds = %if.end60
  %63 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6471 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %63, i32 0, i32 4
  %64 = load i32, i32* %m_zip6471, align 4, !tbaa !118
  %tobool72 = icmp ne i32 %64, 0
  br i1 %tobool72, label %if.end98, label %if.then73

if.then73:                                        ; preds = %if.end70
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size74 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %65, i32 0, i32 0
  %66 = load i64, i64* %m_archive_size74, align 8, !tbaa !110
  %67 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %conv75 = zext i32 %67 to i64
  %add76 = add i64 %66, %conv75
  %add77 = add i64 %add76, 30
  %68 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %add78 = add i64 %add77, %68
  %add79 = add i64 %add78, 46
  %69 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %add80 = add i64 %add79, %69
  %70 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv81 = zext i16 %70 to i64
  %add82 = add i64 %add80, %conv81
  %71 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv83 = zext i32 %71 to i64
  %add84 = add i64 %add82, %conv83
  %72 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir85 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %72, i32 0, i32 0
  %m_size86 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir85, i32 0, i32 1
  %73 = load i64, i64* %m_size86, align 8, !tbaa !175
  %add87 = add i64 %add84, %73
  %add88 = add i64 %add87, 22
  %add89 = add i64 %add88, 1024
  %add90 = add i64 %add89, 16
  %74 = load i32, i32* %user_extra_data_central_len.addr, align 4, !tbaa !10
  %conv91 = zext i32 %74 to i64
  %add92 = add i64 %add90, %conv91
  %cmp93 = icmp ugt i64 %add92, 4294967295
  br i1 %cmp93, label %if.then95, label %if.end97

if.then95:                                        ; preds = %if.then73
  %75 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6496 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %75, i32 0, i32 4
  store i32 1, i32* %m_zip6496, align 4, !tbaa !118
  br label %if.end97

if.end97:                                         ; preds = %if.then95, %if.then73
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end70
  %76 = load i64*, i64** %pFile_time.addr, align 8, !tbaa !8
  %tobool99 = icmp ne i64* %76, null
  br i1 %tobool99, label %if.then100, label %if.end101

if.then100:                                       ; preds = %if.end98
  %77 = load i64*, i64** %pFile_time.addr, align 8, !tbaa !8
  %78 = load i64, i64* %77, align 8, !tbaa !4
  call void @mz_zip_time_t_to_dos_time(i64 %78, i16* %dos_time, i16* %dos_date)
  br label %if.end101

if.end101:                                        ; preds = %if.then100, %if.end98
  %79 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %cmp102 = icmp ule i64 %79, 3
  br i1 %cmp102, label %if.then104, label %if.end105

if.then104:                                       ; preds = %if.end101
  store i32 0, i32* %level, align 4, !tbaa !10
  br label %if.end105

if.end105:                                        ; preds = %if.then104, %if.end101
  %80 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %81 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %82 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %call106 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive* %80, i64 %81, i32 %82)
  %tobool107 = icmp ne i32 %call106, 0
  br i1 %tobool107, label %if.end110, label %if.then108

if.then108:                                       ; preds = %if.end105
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call109 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %83, i32 19)
  store i32 %call109, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end110:                                        ; preds = %if.end105
  %84 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %conv111 = zext i32 %84 to i64
  %85 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add112 = add i64 %85, %conv111
  store i64 %add112, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %86 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  store i64 %86, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %87 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %87, i32 0, i32 6
  %88 = load i64, i64* %m_file_offset_alignment, align 8, !tbaa !177
  %tobool113 = icmp ne i64 %88, 0
  br i1 %tobool113, label %if.then114, label %if.end121

if.then114:                                       ; preds = %if.end110
  %89 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %90 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment115 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %90, i32 0, i32 6
  %91 = load i64, i64* %m_file_offset_alignment115, align 8, !tbaa !177
  %sub = sub i64 %91, 1
  %and116 = and i64 %89, %sub
  %cmp117 = icmp eq i64 %and116, 0
  %lnot = xor i1 %cmp117, true
  %lnot.ext = zext i1 %lnot to i32
  %conv119 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv119, i64 0)
  %tobool120 = icmp ne i64 %expval, 0
  br i1 %tobool120, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then114
  call void @__assert_rtn(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @__func__.mz_zip_writer_add_read_buf_callback, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 6471, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.24, i64 0, i64 0)) #13
  unreachable

92:                                               ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then114
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %92
  br label %if.end121

if.end121:                                        ; preds = %cond.end, %if.end110
  %93 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %tobool122 = icmp ne i64 %93, 0
  br i1 %tobool122, label %land.lhs.true123, label %if.end126

land.lhs.true123:                                 ; preds = %if.end121
  %94 = load i32, i32* %level, align 4, !tbaa !10
  %tobool124 = icmp ne i32 %94, 0
  br i1 %tobool124, label %if.then125, label %if.end126

if.then125:                                       ; preds = %land.lhs.true123
  store i16 8, i16* %method, align 2, !tbaa !88
  br label %if.end126

if.end126:                                        ; preds = %if.then125, %land.lhs.true123, %if.end121
  %95 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %95, i8 0, i64 30, i1 false)
  %96 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64127 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %96, i32 0, i32 4
  %97 = load i32, i32* %m_zip64127, align 4, !tbaa !118
  %tobool128 = icmp ne i32 %97, 0
  br i1 %tobool128, label %if.then129, label %if.else195

if.then129:                                       ; preds = %if.end126
  %98 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %cmp130 = icmp uge i64 %98, 4294967295
  br i1 %cmp130, label %if.then135, label %lor.lhs.false132

lor.lhs.false132:                                 ; preds = %if.then129
  %99 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %cmp133 = icmp uge i64 %99, 4294967295
  br i1 %cmp133, label %if.then135, label %if.end155

if.then135:                                       ; preds = %lor.lhs.false132, %if.then129
  %arraydecay = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i64 0, i64 0
  store i8* %arraydecay, i8** %pExtra_data, align 8, !tbaa !8
  %arraydecay136 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i64 0, i64 0
  %100 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %cmp137 = icmp uge i64 %100, 4294967295
  br i1 %cmp137, label %cond.true139, label %cond.false140

cond.true139:                                     ; preds = %if.then135
  br label %cond.end141

cond.false140:                                    ; preds = %if.then135
  br label %cond.end141

cond.end141:                                      ; preds = %cond.false140, %cond.true139
  %cond = phi i64* [ %uncomp_size, %cond.true139 ], [ null, %cond.false140 ]
  %101 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %cmp142 = icmp uge i64 %101, 4294967295
  br i1 %cmp142, label %cond.true144, label %cond.false145

cond.true144:                                     ; preds = %cond.end141
  br label %cond.end146

cond.false145:                                    ; preds = %cond.end141
  br label %cond.end146

cond.end146:                                      ; preds = %cond.false145, %cond.true144
  %cond147 = phi i64* [ %comp_size, %cond.true144 ], [ null, %cond.false145 ]
  %102 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %cmp148 = icmp uge i64 %102, 4294967295
  br i1 %cmp148, label %cond.true150, label %cond.false151

cond.true150:                                     ; preds = %cond.end146
  br label %cond.end152

cond.false151:                                    ; preds = %cond.end146
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false151, %cond.true150
  %cond153 = phi i64* [ %local_dir_header_ofs, %cond.true150 ], [ null, %cond.false151 ]
  %call154 = call i32 @mz_zip_writer_create_zip64_extra_data(i8* %arraydecay136, i64* %cond, i64* %cond147, i64* %cond153)
  store i32 %call154, i32* %extra_size, align 4, !tbaa !10
  br label %if.end155

if.end155:                                        ; preds = %cond.end152, %lor.lhs.false132
  %103 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %arraydecay156 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i64 0, i64 0
  %104 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %conv157 = trunc i64 %104 to i16
  %105 = load i32, i32* %extra_size, align 4, !tbaa !10
  %106 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %add158 = add i32 %105, %106
  %conv159 = trunc i32 %add158 to i16
  %107 = load i16, i16* %method, align 2, !tbaa !88
  %108 = load i16, i16* %gen_flags, align 2, !tbaa !88
  %109 = load i16, i16* %dos_time, align 2, !tbaa !88
  %110 = load i16, i16* %dos_date, align 2, !tbaa !88
  %call160 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %103, i8* %arraydecay156, i16 zeroext %conv157, i16 zeroext %conv159, i64 0, i64 0, i32 0, i16 zeroext %107, i16 zeroext %108, i16 zeroext %109, i16 zeroext %110)
  %tobool161 = icmp ne i32 %call160, 0
  br i1 %tobool161, label %if.end164, label %if.then162

if.then162:                                       ; preds = %if.end155
  %111 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call163 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %111, i32 27)
  store i32 %call163, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end164:                                        ; preds = %if.end155
  %112 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %112, i32 0, i32 12
  %113 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %114 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %114, i32 0, i32 14
  %115 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %116 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %arraydecay165 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i64 0, i64 0
  %call166 = call i64 %113(i8* %115, i64 %116, i8* %arraydecay165, i64 30)
  %cmp167 = icmp ne i64 %call166, 30
  br i1 %cmp167, label %if.then169, label %if.end171

if.then169:                                       ; preds = %if.end164
  %117 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call170 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %117, i32 19)
  store i32 %call170, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end171:                                        ; preds = %if.end164
  %118 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add172 = add i64 %118, 30
  store i64 %add172, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %119 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite173 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %119, i32 0, i32 12
  %120 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite173, align 8, !tbaa !176
  %121 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque174 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %121, i32 0, i32 14
  %122 = load i8*, i8** %m_pIO_opaque174, align 8, !tbaa !120
  %123 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %124 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %125 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %call175 = call i64 %120(i8* %122, i64 %123, i8* %124, i64 %125)
  %126 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %cmp176 = icmp ne i64 %call175, %126
  br i1 %cmp176, label %if.then178, label %if.end180

if.then178:                                       ; preds = %if.end171
  %127 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call179 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %127, i32 19)
  store i32 %call179, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end180:                                        ; preds = %if.end171
  %128 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %129 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add181 = add i64 %129, %128
  store i64 %add181, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %130 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite182 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %130, i32 0, i32 12
  %131 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite182, align 8, !tbaa !176
  %132 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque183 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %132, i32 0, i32 14
  %133 = load i8*, i8** %m_pIO_opaque183, align 8, !tbaa !120
  %134 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %arraydecay184 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i64 0, i64 0
  %135 = load i32, i32* %extra_size, align 4, !tbaa !10
  %conv185 = zext i32 %135 to i64
  %call186 = call i64 %131(i8* %133, i64 %134, i8* %arraydecay184, i64 %conv185)
  %136 = load i32, i32* %extra_size, align 4, !tbaa !10
  %conv187 = zext i32 %136 to i64
  %cmp188 = icmp ne i64 %call186, %conv187
  br i1 %cmp188, label %if.then190, label %if.end192

if.then190:                                       ; preds = %if.end180
  %137 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call191 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %137, i32 19)
  store i32 %call191, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end192:                                        ; preds = %if.end180
  %138 = load i32, i32* %extra_size, align 4, !tbaa !10
  %conv193 = zext i32 %138 to i64
  %139 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add194 = add i64 %139, %conv193
  store i64 %add194, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  br label %if.end231

if.else195:                                       ; preds = %if.end126
  %140 = load i64, i64* %comp_size, align 8, !tbaa !76
  %cmp196 = icmp ugt i64 %140, 4294967295
  br i1 %cmp196, label %if.then201, label %lor.lhs.false198

lor.lhs.false198:                                 ; preds = %if.else195
  %141 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %cmp199 = icmp ugt i64 %141, 4294967295
  br i1 %cmp199, label %if.then201, label %if.end203

if.then201:                                       ; preds = %lor.lhs.false198, %if.else195
  %142 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call202 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %142, i32 29)
  store i32 %call202, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end203:                                        ; preds = %lor.lhs.false198
  %143 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %arraydecay204 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i64 0, i64 0
  %144 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %conv205 = trunc i64 %144 to i16
  %145 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv206 = trunc i32 %145 to i16
  %146 = load i16, i16* %method, align 2, !tbaa !88
  %147 = load i16, i16* %gen_flags, align 2, !tbaa !88
  %148 = load i16, i16* %dos_time, align 2, !tbaa !88
  %149 = load i16, i16* %dos_date, align 2, !tbaa !88
  %call207 = call i32 @mz_zip_writer_create_local_dir_header(%struct.mz_zip_archive* %143, i8* %arraydecay204, i16 zeroext %conv205, i16 zeroext %conv206, i64 0, i64 0, i32 0, i16 zeroext %146, i16 zeroext %147, i16 zeroext %148, i16 zeroext %149)
  %tobool208 = icmp ne i32 %call207, 0
  br i1 %tobool208, label %if.end211, label %if.then209

if.then209:                                       ; preds = %if.end203
  %150 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call210 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %150, i32 27)
  store i32 %call210, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end211:                                        ; preds = %if.end203
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite212 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %151, i32 0, i32 12
  %152 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite212, align 8, !tbaa !176
  %153 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque213 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %153, i32 0, i32 14
  %154 = load i8*, i8** %m_pIO_opaque213, align 8, !tbaa !120
  %155 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %arraydecay214 = getelementptr inbounds [30 x i8], [30 x i8]* %local_dir_header, i64 0, i64 0
  %call215 = call i64 %152(i8* %154, i64 %155, i8* %arraydecay214, i64 30)
  %cmp216 = icmp ne i64 %call215, 30
  br i1 %cmp216, label %if.then218, label %if.end220

if.then218:                                       ; preds = %if.end211
  %156 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call219 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %156, i32 19)
  store i32 %call219, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end220:                                        ; preds = %if.end211
  %157 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add221 = add i64 %157, 30
  store i64 %add221, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %158 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite222 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %158, i32 0, i32 12
  %159 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite222, align 8, !tbaa !176
  %160 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque223 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %160, i32 0, i32 14
  %161 = load i8*, i8** %m_pIO_opaque223, align 8, !tbaa !120
  %162 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %163 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %164 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %call224 = call i64 %159(i8* %161, i64 %162, i8* %163, i64 %164)
  %165 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %cmp225 = icmp ne i64 %call224, %165
  br i1 %cmp225, label %if.then227, label %if.end229

if.then227:                                       ; preds = %if.end220
  %166 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call228 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %166, i32 19)
  store i32 %call228, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end229:                                        ; preds = %if.end220
  %167 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %168 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add230 = add i64 %168, %167
  store i64 %add230, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  br label %if.end231

if.end231:                                        ; preds = %if.end229, %if.end192
  %169 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %cmp232 = icmp ugt i32 %169, 0
  br i1 %cmp232, label %if.then234, label %if.end247

if.then234:                                       ; preds = %if.end231
  %170 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite235 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %170, i32 0, i32 12
  %171 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite235, align 8, !tbaa !176
  %172 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque236 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %172, i32 0, i32 14
  %173 = load i8*, i8** %m_pIO_opaque236, align 8, !tbaa !120
  %174 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %175 = load i8*, i8** %user_extra_data.addr, align 8, !tbaa !8
  %176 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv237 = zext i32 %176 to i64
  %call238 = call i64 %171(i8* %173, i64 %174, i8* %175, i64 %conv237)
  %177 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv239 = zext i32 %177 to i64
  %cmp240 = icmp ne i64 %call238, %conv239
  br i1 %cmp240, label %if.then242, label %if.end244

if.then242:                                       ; preds = %if.then234
  %178 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call243 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %178, i32 19)
  store i32 %call243, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end244:                                        ; preds = %if.then234
  %179 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %conv245 = zext i32 %179 to i64
  %180 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add246 = add i64 %180, %conv245
  store i64 %add246, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  br label %if.end247

if.end247:                                        ; preds = %if.end244, %if.end231
  %181 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %tobool248 = icmp ne i64 %181, 0
  br i1 %tobool248, label %if.then249, label %if.end383

if.then249:                                       ; preds = %if.end247
  %182 = bitcast i64* %uncomp_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %182) #10
  %183 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  store i64 %183, i64* %uncomp_remaining, align 8, !tbaa !76
  %184 = bitcast i8** %pRead_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %184) #10
  %185 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %185, i32 0, i32 7
  %186 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %187 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %187, i32 0, i32 10
  %188 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %call250 = call i8* %186(i8* %188, i64 1, i64 65536)
  store i8* %call250, i8** %pRead_buf, align 8, !tbaa !8
  %189 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %tobool251 = icmp ne i8* %189, null
  br i1 %tobool251, label %if.end254, label %if.then252

if.then252:                                       ; preds = %if.then249
  %190 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call253 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %190, i32 16)
  store i32 %call253, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup379

if.end254:                                        ; preds = %if.then249
  %191 = load i32, i32* %level, align 4, !tbaa !10
  %tobool255 = icmp ne i32 %191, 0
  br i1 %tobool255, label %if.else292, label %if.then256

if.then256:                                       ; preds = %if.end254
  br label %while.cond

while.cond:                                       ; preds = %cleanup.cont, %if.then256
  %192 = load i64, i64* %uncomp_remaining, align 8, !tbaa !76
  %tobool257 = icmp ne i64 %192, 0
  br i1 %tobool257, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %193 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %193) #10
  %194 = load i64, i64* %uncomp_remaining, align 8, !tbaa !76
  %cmp258 = icmp ult i64 65536, %194
  br i1 %cmp258, label %cond.true260, label %cond.false261

cond.true260:                                     ; preds = %while.body
  br label %cond.end262

cond.false261:                                    ; preds = %while.body
  %195 = load i64, i64* %uncomp_remaining, align 8, !tbaa !76
  br label %cond.end262

cond.end262:                                      ; preds = %cond.false261, %cond.true260
  %cond263 = phi i64 [ 65536, %cond.true260 ], [ %195, %cond.false261 ]
  %conv264 = trunc i64 %cond263 to i32
  store i32 %conv264, i32* %n, align 4, !tbaa !10
  %196 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %read_callback.addr, align 8, !tbaa !8
  %197 = load i8*, i8** %callback_opaque.addr, align 8, !tbaa !8
  %198 = load i64, i64* %file_ofs, align 8, !tbaa !76
  %199 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %200 = load i32, i32* %n, align 4, !tbaa !10
  %conv265 = zext i32 %200 to i64
  %call266 = call i64 %196(i8* %197, i64 %198, i8* %199, i64 %conv265)
  %201 = load i32, i32* %n, align 4, !tbaa !10
  %conv267 = zext i32 %201 to i64
  %cmp268 = icmp ne i64 %call266, %conv267
  br i1 %cmp268, label %if.then278, label %lor.lhs.false270

lor.lhs.false270:                                 ; preds = %cond.end262
  %202 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite271 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %202, i32 0, i32 12
  %203 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite271, align 8, !tbaa !176
  %204 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque272 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %204, i32 0, i32 14
  %205 = load i8*, i8** %m_pIO_opaque272, align 8, !tbaa !120
  %206 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %207 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %208 = load i32, i32* %n, align 4, !tbaa !10
  %conv273 = zext i32 %208 to i64
  %call274 = call i64 %203(i8* %205, i64 %206, i8* %207, i64 %conv273)
  %209 = load i32, i32* %n, align 4, !tbaa !10
  %conv275 = zext i32 %209 to i64
  %cmp276 = icmp ne i64 %call274, %conv275
  br i1 %cmp276, label %if.then278, label %if.end281

if.then278:                                       ; preds = %lor.lhs.false270, %cond.end262
  %210 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %210, i32 0, i32 8
  %211 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %212 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque279 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %212, i32 0, i32 10
  %213 = load i8*, i8** %m_pAlloc_opaque279, align 8, !tbaa !108
  %214 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  call void %211(i8* %213, i8* %214)
  %215 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call280 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %215, i32 20)
  store i32 %call280, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end281:                                        ; preds = %lor.lhs.false270
  %216 = load i32, i32* %n, align 4, !tbaa !10
  %conv282 = zext i32 %216 to i64
  %217 = load i64, i64* %file_ofs, align 8, !tbaa !76
  %add283 = add i64 %217, %conv282
  store i64 %add283, i64* %file_ofs, align 8, !tbaa !76
  %218 = load i32, i32* %uncomp_crc32, align 4, !tbaa !10
  %conv284 = zext i32 %218 to i64
  %219 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %220 = load i32, i32* %n, align 4, !tbaa !10
  %conv285 = zext i32 %220 to i64
  %call286 = call i64 @mz_crc32(i64 %conv284, i8* %219, i64 %conv285)
  %conv287 = trunc i64 %call286 to i32
  store i32 %conv287, i32* %uncomp_crc32, align 4, !tbaa !10
  %221 = load i32, i32* %n, align 4, !tbaa !10
  %conv288 = zext i32 %221 to i64
  %222 = load i64, i64* %uncomp_remaining, align 8, !tbaa !76
  %sub289 = sub i64 %222, %conv288
  store i64 %sub289, i64* %uncomp_remaining, align 8, !tbaa !76
  %223 = load i32, i32* %n, align 4, !tbaa !10
  %conv290 = zext i32 %223 to i64
  %224 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add291 = add i64 %224, %conv290
  store i64 %add291, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end281, %if.then278
  %225 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %225) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup379 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %226 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  store i64 %226, i64* %comp_size, align 8, !tbaa !76
  br label %if.end376

if.else292:                                       ; preds = %if.end254
  %227 = bitcast i32* %result to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %227) #10
  store i32 0, i32* %result, align 4, !tbaa !10
  %228 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %228) #10
  %229 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %229) #10
  %230 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc293 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %230, i32 0, i32 7
  %231 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc293, align 8, !tbaa !100
  %232 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque294 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %232, i32 0, i32 10
  %233 = load i8*, i8** %m_pAlloc_opaque294, align 8, !tbaa !108
  %call295 = call i8* %231(i8* %233, i64 1, i64 319352)
  %234 = bitcast i8* %call295 to %struct.tdefl_compressor*
  store %struct.tdefl_compressor* %234, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %235 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %tobool296 = icmp ne %struct.tdefl_compressor* %235, null
  br i1 %tobool296, label %if.end301, label %if.then297

if.then297:                                       ; preds = %if.else292
  %236 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree298 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %236, i32 0, i32 8
  %237 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree298, align 8, !tbaa !101
  %238 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque299 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %238, i32 0, i32 10
  %239 = load i8*, i8** %m_pAlloc_opaque299, align 8, !tbaa !108
  %240 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  call void %237(i8* %239, i8* %240)
  %241 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call300 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %241, i32 16)
  store i32 %call300, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup371

if.end301:                                        ; preds = %if.else292
  %242 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pZip = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 0
  store %struct.mz_zip_archive* %242, %struct.mz_zip_archive** %m_pZip, align 8, !tbaa !179
  %243 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %m_cur_archive_file_ofs = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  store i64 %243, i64* %m_cur_archive_file_ofs, align 8, !tbaa !181
  %m_comp_size = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  store i64 0, i64* %m_comp_size, align 8, !tbaa !182
  %244 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %245 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  %246 = load i32, i32* %level, align 4, !tbaa !10
  %call302 = call i32 @tdefl_create_comp_flags_from_zip_params(i32 %246, i32 -15, i32 0)
  %call303 = call i32 @tdefl_init(%struct.tdefl_compressor* %244, i32 (i8*, i32, i8*)* @mz_zip_writer_add_put_buf_callback, i8* %245, i32 %call302)
  %cmp304 = icmp ne i32 %call303, 0
  br i1 %cmp304, label %if.then306, label %if.end312

if.then306:                                       ; preds = %if.end301
  %247 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree307 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %247, i32 0, i32 8
  %248 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree307, align 8, !tbaa !101
  %249 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque308 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %249, i32 0, i32 10
  %250 = load i8*, i8** %m_pAlloc_opaque308, align 8, !tbaa !108
  %251 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %252 = bitcast %struct.tdefl_compressor* %251 to i8*
  call void %248(i8* %250, i8* %252)
  %253 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree309 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %253, i32 0, i32 8
  %254 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree309, align 8, !tbaa !101
  %255 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque310 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %255, i32 0, i32 10
  %256 = load i8*, i8** %m_pAlloc_opaque310, align 8, !tbaa !108
  %257 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  call void %254(i8* %256, i8* %257)
  %258 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call311 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %258, i32 27)
  store i32 %call311, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup371

if.end312:                                        ; preds = %if.end301
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont361, %if.end312
  %259 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %259) #10
  %260 = load i64, i64* %uncomp_remaining, align 8, !tbaa !76
  %cmp313 = icmp ult i64 %260, 65536
  br i1 %cmp313, label %cond.true315, label %cond.false316

cond.true315:                                     ; preds = %for.cond
  %261 = load i64, i64* %uncomp_remaining, align 8, !tbaa !76
  br label %cond.end317

cond.false316:                                    ; preds = %for.cond
  br label %cond.end317

cond.end317:                                      ; preds = %cond.false316, %cond.true315
  %cond318 = phi i64 [ %261, %cond.true315 ], [ 65536, %cond.false316 ]
  %conv319 = trunc i64 %cond318 to i32
  %conv320 = zext i32 %conv319 to i64
  store i64 %conv320, i64* %in_buf_size, align 8, !tbaa !4
  %262 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %262) #10
  %263 = bitcast i32* %flush to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %263) #10
  store i32 0, i32* %flush, align 4, !tbaa !12
  %264 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %read_callback.addr, align 8, !tbaa !8
  %265 = load i8*, i8** %callback_opaque.addr, align 8, !tbaa !8
  %266 = load i64, i64* %file_ofs, align 8, !tbaa !76
  %267 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %268 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %call321 = call i64 %264(i8* %265, i64 %266, i8* %267, i64 %268)
  %269 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %cmp322 = icmp ne i64 %call321, %269
  br i1 %cmp322, label %if.then324, label %if.end326

if.then324:                                       ; preds = %cond.end317
  %270 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call325 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %270, i32 20)
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup357

if.end326:                                        ; preds = %cond.end317
  %271 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %272 = load i64, i64* %file_ofs, align 8, !tbaa !76
  %add327 = add i64 %272, %271
  store i64 %add327, i64* %file_ofs, align 8, !tbaa !76
  %273 = load i32, i32* %uncomp_crc32, align 4, !tbaa !10
  %conv328 = zext i32 %273 to i64
  %274 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %275 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %call329 = call i64 @mz_crc32(i64 %conv328, i8* %274, i64 %275)
  %conv330 = trunc i64 %call329 to i32
  store i32 %conv330, i32* %uncomp_crc32, align 4, !tbaa !10
  %276 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %277 = load i64, i64* %uncomp_remaining, align 8, !tbaa !76
  %sub331 = sub i64 %277, %276
  store i64 %sub331, i64* %uncomp_remaining, align 8, !tbaa !76
  %278 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pNeeds_keepalive = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %278, i32 0, i32 13
  %279 = load i32 (i8*)*, i32 (i8*)** %m_pNeeds_keepalive, align 8, !tbaa !124
  %cmp332 = icmp ne i32 (i8*)* %279, null
  br i1 %cmp332, label %land.lhs.true334, label %if.end340

land.lhs.true334:                                 ; preds = %if.end326
  %280 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pNeeds_keepalive335 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %280, i32 0, i32 13
  %281 = load i32 (i8*)*, i32 (i8*)** %m_pNeeds_keepalive335, align 8, !tbaa !124
  %282 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque336 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %282, i32 0, i32 14
  %283 = load i8*, i8** %m_pIO_opaque336, align 8, !tbaa !120
  %call337 = call i32 %281(i8* %283)
  %tobool338 = icmp ne i32 %call337, 0
  br i1 %tobool338, label %if.then339, label %if.end340

if.then339:                                       ; preds = %land.lhs.true334
  store i32 3, i32* %flush, align 4, !tbaa !12
  br label %if.end340

if.end340:                                        ; preds = %if.then339, %land.lhs.true334, %if.end326
  %284 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %285 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  %286 = load i64, i64* %in_buf_size, align 8, !tbaa !4
  %287 = load i64, i64* %uncomp_remaining, align 8, !tbaa !76
  %tobool341 = icmp ne i64 %287, 0
  br i1 %tobool341, label %cond.true342, label %cond.false343

cond.true342:                                     ; preds = %if.end340
  %288 = load i32, i32* %flush, align 4, !tbaa !12
  br label %cond.end344

cond.false343:                                    ; preds = %if.end340
  br label %cond.end344

cond.end344:                                      ; preds = %cond.false343, %cond.true342
  %cond345 = phi i32 [ %288, %cond.true342 ], [ 4, %cond.false343 ]
  %call346 = call i32 @tdefl_compress_buffer(%struct.tdefl_compressor* %284, i8* %285, i64 %286, i32 %cond345)
  store i32 %call346, i32* %status, align 4, !tbaa !12
  %289 = load i32, i32* %status, align 4, !tbaa !12
  %cmp347 = icmp eq i32 %289, 1
  br i1 %cmp347, label %if.then349, label %if.else350

if.then349:                                       ; preds = %cond.end344
  store i32 1, i32* %result, align 4, !tbaa !10
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup357

if.else350:                                       ; preds = %cond.end344
  %290 = load i32, i32* %status, align 4, !tbaa !12
  %cmp351 = icmp ne i32 %290, 0
  br i1 %cmp351, label %if.then353, label %if.end355

if.then353:                                       ; preds = %if.else350
  %291 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call354 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %291, i32 12)
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup357

if.end355:                                        ; preds = %if.else350
  br label %if.end356

if.end356:                                        ; preds = %if.end355
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup357

cleanup357:                                       ; preds = %if.end356, %if.then353, %if.then349, %if.then324
  %292 = bitcast i32* %flush to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %292) #10
  %293 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %293) #10
  %294 = bitcast i64* %in_buf_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %294) #10
  %cleanup.dest360 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest360, label %unreachable [
    i32 0, label %cleanup.cont361
    i32 4, label %for.end
  ]

cleanup.cont361:                                  ; preds = %cleanup357
  br label %for.cond

for.end:                                          ; preds = %cleanup357
  %295 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree362 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %295, i32 0, i32 8
  %296 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree362, align 8, !tbaa !101
  %297 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque363 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %297, i32 0, i32 10
  %298 = load i8*, i8** %m_pAlloc_opaque363, align 8, !tbaa !108
  %299 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %pComp, align 8, !tbaa !8
  %300 = bitcast %struct.tdefl_compressor* %299 to i8*
  call void %296(i8* %298, i8* %300)
  %301 = load i32, i32* %result, align 4, !tbaa !10
  %tobool364 = icmp ne i32 %301, 0
  br i1 %tobool364, label %if.end368, label %if.then365

if.then365:                                       ; preds = %for.end
  %302 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree366 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %302, i32 0, i32 8
  %303 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree366, align 8, !tbaa !101
  %304 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque367 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %304, i32 0, i32 10
  %305 = load i8*, i8** %m_pAlloc_opaque367, align 8, !tbaa !108
  %306 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  call void %303(i8* %305, i8* %306)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup371

if.end368:                                        ; preds = %for.end
  %m_comp_size369 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 2
  %307 = load i64, i64* %m_comp_size369, align 8, !tbaa !182
  store i64 %307, i64* %comp_size, align 8, !tbaa !76
  %m_cur_archive_file_ofs370 = getelementptr inbounds %struct.mz_zip_writer_add_state, %struct.mz_zip_writer_add_state* %state, i32 0, i32 1
  %308 = load i64, i64* %m_cur_archive_file_ofs370, align 8, !tbaa !181
  store i64 %308, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup371

cleanup371:                                       ; preds = %if.end368, %if.then365, %if.then306, %if.then297
  %309 = bitcast %struct.tdefl_compressor** %pComp to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %309) #10
  %310 = bitcast %struct.mz_zip_writer_add_state* %state to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %310) #10
  %311 = bitcast i32* %result to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %311) #10
  %cleanup.dest374 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest374, label %cleanup379 [
    i32 0, label %cleanup.cont375
  ]

cleanup.cont375:                                  ; preds = %cleanup371
  br label %if.end376

if.end376:                                        ; preds = %cleanup.cont375, %while.end
  %312 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree377 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %312, i32 0, i32 8
  %313 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree377, align 8, !tbaa !101
  %314 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque378 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %314, i32 0, i32 10
  %315 = load i8*, i8** %m_pAlloc_opaque378, align 8, !tbaa !108
  %316 = load i8*, i8** %pRead_buf, align 8, !tbaa !8
  call void %313(i8* %315, i8* %316)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup379

cleanup379:                                       ; preds = %if.end376, %cleanup371, %cleanup, %if.then252
  %317 = bitcast i8** %pRead_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %317) #10
  %318 = bitcast i64* %uncomp_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %318) #10
  %cleanup.dest381 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest381, label %cleanup456 [
    i32 0, label %cleanup.cont382
  ]

cleanup.cont382:                                  ; preds = %cleanup379
  br label %if.end383

if.end383:                                        ; preds = %cleanup.cont382, %if.end247
  %319 = bitcast [24 x i8]* %local_dir_footer to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %319) #10
  %320 = bitcast i32* %local_dir_footer_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %320) #10
  store i32 16, i32* %local_dir_footer_size, align 4, !tbaa !10
  %arraydecay384 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay384, i64 0
  call void @mz_write_le32(i8* %add.ptr, i32 134695760)
  %arraydecay385 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr386 = getelementptr inbounds i8, i8* %arraydecay385, i64 4
  %321 = load i32, i32* %uncomp_crc32, align 4, !tbaa !10
  call void @mz_write_le32(i8* %add.ptr386, i32 %321)
  %322 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %cmp387 = icmp eq i8* %322, null
  br i1 %cmp387, label %if.then389, label %if.else401

if.then389:                                       ; preds = %if.end383
  %323 = load i64, i64* %comp_size, align 8, !tbaa !76
  %cmp390 = icmp ugt i64 %323, 4294967295
  br i1 %cmp390, label %if.then392, label %if.end394

if.then392:                                       ; preds = %if.then389
  %324 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call393 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %324, i32 29)
  store i32 %call393, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup419

if.end394:                                        ; preds = %if.then389
  %arraydecay395 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr396 = getelementptr inbounds i8, i8* %arraydecay395, i64 8
  %325 = load i64, i64* %comp_size, align 8, !tbaa !76
  %conv397 = trunc i64 %325 to i32
  call void @mz_write_le32(i8* %add.ptr396, i32 %conv397)
  %arraydecay398 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr399 = getelementptr inbounds i8, i8* %arraydecay398, i64 12
  %326 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %conv400 = trunc i64 %326 to i32
  call void @mz_write_le32(i8* %add.ptr399, i32 %conv400)
  br label %if.end406

if.else401:                                       ; preds = %if.end383
  %arraydecay402 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr403 = getelementptr inbounds i8, i8* %arraydecay402, i64 8
  %327 = load i64, i64* %comp_size, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr403, i64 %327)
  %arraydecay404 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %add.ptr405 = getelementptr inbounds i8, i8* %arraydecay404, i64 16
  %328 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr405, i64 %328)
  store i32 24, i32* %local_dir_footer_size, align 4, !tbaa !10
  br label %if.end406

if.end406:                                        ; preds = %if.else401, %if.end394
  %329 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite407 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %329, i32 0, i32 12
  %330 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite407, align 8, !tbaa !176
  %331 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque408 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %331, i32 0, i32 14
  %332 = load i8*, i8** %m_pIO_opaque408, align 8, !tbaa !120
  %333 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %arraydecay409 = getelementptr inbounds [24 x i8], [24 x i8]* %local_dir_footer, i64 0, i64 0
  %334 = load i32, i32* %local_dir_footer_size, align 4, !tbaa !10
  %conv410 = zext i32 %334 to i64
  %call411 = call i64 %330(i8* %332, i64 %333, i8* %arraydecay409, i64 %conv410)
  %335 = load i32, i32* %local_dir_footer_size, align 4, !tbaa !10
  %conv412 = zext i32 %335 to i64
  %cmp413 = icmp ne i64 %call411, %conv412
  br i1 %cmp413, label %if.then415, label %if.end416

if.then415:                                       ; preds = %if.end406
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup419

if.end416:                                        ; preds = %if.end406
  %336 = load i32, i32* %local_dir_footer_size, align 4, !tbaa !10
  %conv417 = zext i32 %336 to i64
  %337 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %add418 = add i64 %337, %conv417
  store i64 %add418, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup419

cleanup419:                                       ; preds = %if.end416, %if.then415, %if.then392
  %338 = bitcast i32* %local_dir_footer_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %338) #10
  %339 = bitcast [24 x i8]* %local_dir_footer to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %339) #10
  %cleanup.dest421 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest421, label %cleanup456 [
    i32 0, label %cleanup.cont422
  ]

cleanup.cont422:                                  ; preds = %cleanup419
  %340 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %cmp423 = icmp ne i8* %340, null
  br i1 %cmp423, label %if.then425, label %if.end446

if.then425:                                       ; preds = %cleanup.cont422
  %arraydecay426 = getelementptr inbounds [28 x i8], [28 x i8]* %extra_data, i64 0, i64 0
  %341 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %cmp427 = icmp uge i64 %341, 4294967295
  br i1 %cmp427, label %cond.true429, label %cond.false430

cond.true429:                                     ; preds = %if.then425
  br label %cond.end431

cond.false430:                                    ; preds = %if.then425
  br label %cond.end431

cond.end431:                                      ; preds = %cond.false430, %cond.true429
  %cond432 = phi i64* [ %uncomp_size, %cond.true429 ], [ null, %cond.false430 ]
  %342 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %cmp433 = icmp uge i64 %342, 4294967295
  br i1 %cmp433, label %cond.true435, label %cond.false436

cond.true435:                                     ; preds = %cond.end431
  br label %cond.end437

cond.false436:                                    ; preds = %cond.end431
  br label %cond.end437

cond.end437:                                      ; preds = %cond.false436, %cond.true435
  %cond438 = phi i64* [ %comp_size, %cond.true435 ], [ null, %cond.false436 ]
  %343 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %cmp439 = icmp uge i64 %343, 4294967295
  br i1 %cmp439, label %cond.true441, label %cond.false442

cond.true441:                                     ; preds = %cond.end437
  br label %cond.end443

cond.false442:                                    ; preds = %cond.end437
  br label %cond.end443

cond.end443:                                      ; preds = %cond.false442, %cond.true441
  %cond444 = phi i64* [ %local_dir_header_ofs, %cond.true441 ], [ null, %cond.false442 ]
  %call445 = call i32 @mz_zip_writer_create_zip64_extra_data(i8* %arraydecay426, i64* %cond432, i64* %cond438, i64* %cond444)
  store i32 %call445, i32* %extra_size, align 4, !tbaa !10
  br label %if.end446

if.end446:                                        ; preds = %cond.end443, %cleanup.cont422
  %344 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %345 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %346 = load i64, i64* %archive_name_size, align 8, !tbaa !4
  %conv447 = trunc i64 %346 to i16
  %347 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %348 = load i32, i32* %extra_size, align 4, !tbaa !10
  %conv448 = trunc i32 %348 to i16
  %349 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %350 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %351 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %352 = load i64, i64* %comp_size, align 8, !tbaa !76
  %353 = load i32, i32* %uncomp_crc32, align 4, !tbaa !10
  %354 = load i16, i16* %method, align 2, !tbaa !88
  %355 = load i16, i16* %gen_flags, align 2, !tbaa !88
  %356 = load i16, i16* %dos_time, align 2, !tbaa !88
  %357 = load i16, i16* %dos_date, align 2, !tbaa !88
  %358 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %359 = load i16, i16* %ext_attributes, align 2, !tbaa !88
  %conv449 = zext i16 %359 to i32
  %360 = load i8*, i8** %user_extra_data_central.addr, align 8, !tbaa !8
  %361 = load i32, i32* %user_extra_data_central_len.addr, align 4, !tbaa !10
  %call450 = call i32 @mz_zip_writer_add_to_central_dir(%struct.mz_zip_archive* %344, i8* %345, i16 zeroext %conv447, i8* %347, i16 zeroext %conv448, i8* %349, i16 zeroext %350, i64 %351, i64 %352, i32 %353, i16 zeroext %354, i16 zeroext %355, i16 zeroext %356, i16 zeroext %357, i64 %358, i32 %conv449, i8* %360, i32 %361)
  %tobool451 = icmp ne i32 %call450, 0
  br i1 %tobool451, label %if.end453, label %if.then452

if.then452:                                       ; preds = %if.end446
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

if.end453:                                        ; preds = %if.end446
  %362 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files454 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %362, i32 0, i32 2
  %363 = load i32, i32* %m_total_files454, align 8, !tbaa !113
  %inc = add i32 %363, 1
  store i32 %inc, i32* %m_total_files454, align 8, !tbaa !113
  %364 = load i64, i64* %cur_archive_file_ofs, align 8, !tbaa !76
  %365 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size455 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %365, i32 0, i32 0
  store i64 %364, i64* %m_archive_size455, align 8, !tbaa !110
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup456

cleanup456:                                       ; preds = %if.end453, %if.then452, %cleanup419, %cleanup379, %if.then242, %if.then227, %if.then218, %if.then209, %if.then201, %if.then190, %if.then178, %if.then169, %if.then162, %if.then108, %if.then68, %if.then58, %if.then45, %if.then37, %if.then32, %if.then20
  %366 = bitcast i64* %file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %366) #10
  %367 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %367) #10
  %368 = bitcast [28 x i8]* %extra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 28, i8* %368) #10
  %369 = bitcast i32* %extra_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %369) #10
  %370 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %370) #10
  %371 = bitcast [30 x i8]* %local_dir_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 30, i8* %371) #10
  %372 = bitcast i64* %archive_name_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %372) #10
  %373 = bitcast i64* %comp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %373) #10
  %374 = bitcast i64* %uncomp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %374) #10
  %375 = bitcast i64* %cur_archive_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %375) #10
  %376 = bitcast i64* %local_dir_header_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %376) #10
  %377 = bitcast i16* %ext_attributes to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %377) #10
  %378 = bitcast i16* %dos_date to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %378) #10
  %379 = bitcast i16* %dos_time to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %379) #10
  %380 = bitcast i16* %method to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %380) #10
  %381 = bitcast i32* %num_alignment_padding_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %381) #10
  %382 = bitcast i32* %level to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %382) #10
  %383 = bitcast i32* %uncomp_crc32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %383) #10
  %384 = bitcast i16* %gen_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %384) #10
  %385 = load i32, i32* %retval, align 4
  ret i32 %385

unreachable:                                      ; preds = %cleanup357
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_add_cfile(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, %struct.__sFILE* %pSrc_file, i64 %size_to_add, i64* %pFile_time, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i8* %user_extra_data, i32 %user_extra_data_len, i8* %user_extra_data_central, i32 %user_extra_data_central_len) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pSrc_file.addr = alloca %struct.__sFILE*, align 8
  %size_to_add.addr = alloca i64, align 8
  %pFile_time.addr = alloca i64*, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %user_extra_data.addr = alloca i8*, align 8
  %user_extra_data_len.addr = alloca i32, align 4
  %user_extra_data_central.addr = alloca i8*, align 8
  %user_extra_data_central_len.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store %struct.__sFILE* %pSrc_file, %struct.__sFILE** %pSrc_file.addr, align 8, !tbaa !8
  store i64 %size_to_add, i64* %size_to_add.addr, align 8, !tbaa !76
  store i64* %pFile_time, i64** %pFile_time.addr, align 8, !tbaa !8
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4, !tbaa !10
  store i8* %user_extra_data, i8** %user_extra_data.addr, align 8, !tbaa !8
  store i32 %user_extra_data_len, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  store i8* %user_extra_data_central, i8** %user_extra_data_central.addr, align 8, !tbaa !8
  store i32 %user_extra_data_central_len, i32* %user_extra_data_central_len.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %2 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file.addr, align 8, !tbaa !8
  %3 = bitcast %struct.__sFILE* %2 to i8*
  %4 = load i64, i64* %size_to_add.addr, align 8, !tbaa !76
  %5 = load i64*, i64** %pFile_time.addr, align 8, !tbaa !8
  %6 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %7 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %8 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %9 = load i8*, i8** %user_extra_data.addr, align 8, !tbaa !8
  %10 = load i32, i32* %user_extra_data_len.addr, align 4, !tbaa !10
  %11 = load i8*, i8** %user_extra_data_central.addr, align 8, !tbaa !8
  %12 = load i32, i32* %user_extra_data_central_len.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_writer_add_read_buf_callback(%struct.mz_zip_archive* %0, i8* %1, i64 (i8*, i64, i8*, i64)* @mz_file_read_func_stdio, i8* %3, i64 %4, i64* %5, i8* %6, i16 zeroext %7, i32 %8, i8* %9, i32 %10, i8* %11, i32 %12)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @mz_file_read_func_stdio(i8* %pOpaque, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pOpaque.addr = alloca i8*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %pSrc_file = alloca %struct.__sFILE*, align 8
  %cur_ofs = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pOpaque, i8** %pOpaque.addr, align 8, !tbaa !8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8, !tbaa !76
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = bitcast %struct.__sFILE** %pSrc_file to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load i8*, i8** %pOpaque.addr, align 8, !tbaa !8
  %2 = bitcast i8* %1 to %struct.__sFILE*
  store %struct.__sFILE* %2, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %3 = bitcast i64* %cur_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %call = call i64 @ftello(%struct.__sFILE* %4)
  store i64 %call, i64* %cur_ofs, align 8, !tbaa !76
  %5 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %cmp = icmp slt i64 %5, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i64, i64* %cur_ofs, align 8, !tbaa !76
  %7 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %cmp1 = icmp ne i64 %6, %7
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %9 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %call2 = call i32 @fseeko(%struct.__sFILE* %8, i64 %9, i32 0)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %entry
  store i64 0, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %10 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %11 = load i64, i64* %n.addr, align 8, !tbaa !4
  %12 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %call3 = call i64 @fread(i8* %10, i64 1, i64 %11, %struct.__sFILE* %12)
  store i64 %call3, i64* %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %13 = bitcast i64* %cur_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %13) #10
  %14 = bitcast %struct.__sFILE** %pSrc_file to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %14) #10
  %15 = load i64, i64* %retval, align 8
  ret i64 %15
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_add_file(%struct.mz_zip_archive* %pZip, i8* %pArchive_name, i8* %pSrc_filename, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pSrc_filename.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %pSrc_file = alloca %struct.__sFILE*, align 8
  %uncomp_size = alloca i64, align 8
  %file_modified_time = alloca i64, align 8
  %pFile_time = alloca i64*, align 8
  %status = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i8* %pSrc_filename, i8** %pSrc_filename.addr, align 8, !tbaa !8
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4, !tbaa !10
  %0 = bitcast %struct.__sFILE** %pSrc_file to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  store %struct.__sFILE* null, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %1 = bitcast i64* %uncomp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  store i64 0, i64* %uncomp_size, align 8, !tbaa !76
  %2 = bitcast i64* %file_modified_time to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast i64** %pFile_time to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  store i64* null, i64** %pFile_time, align 8, !tbaa !8
  %4 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  %5 = bitcast i64* %file_modified_time to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 8, i1 false)
  store i64* %file_modified_time, i64** %pFile_time, align 8, !tbaa !8
  %6 = load i8*, i8** %pSrc_filename.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_get_file_modified_time(i8* %6, i64* %file_modified_time)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call1 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %7, i32 23)
  store i32 %call1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %8 = load i8*, i8** %pSrc_filename.addr, align 8, !tbaa !8
  %call2 = call %struct.__sFILE* @"\01_fopen"(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0))
  store %struct.__sFILE* %call2, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %9 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %tobool3 = icmp ne %struct.__sFILE* %9, null
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call5 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %10, i32 17)
  store i32 %call5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %11 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %call7 = call i32 @fseeko(%struct.__sFILE* %11, i64 0, i32 2)
  %12 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %call8 = call i64 @ftello(%struct.__sFILE* %12)
  store i64 %call8, i64* %uncomp_size, align 8, !tbaa !76
  %13 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %call9 = call i32 @fseeko(%struct.__sFILE* %13, i64 0, i32 0)
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %15 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %16 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %17 = load i64, i64* %uncomp_size, align 8, !tbaa !76
  %18 = load i64*, i64** %pFile_time, align 8, !tbaa !8
  %19 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %20 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %21 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %call10 = call i32 @mz_zip_writer_add_cfile(%struct.mz_zip_archive* %14, i8* %15, %struct.__sFILE* %16, i64 %17, i64* %18, i8* %19, i16 zeroext %20, i32 %21, i8* null, i32 0, i8* null, i32 0)
  store i32 %call10, i32* %status, align 4, !tbaa !10
  %22 = load %struct.__sFILE*, %struct.__sFILE** %pSrc_file, align 8, !tbaa !8
  %call11 = call i32 @fclose(%struct.__sFILE* %22)
  %23 = load i32, i32* %status, align 4, !tbaa !10
  store i32 %23, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then4, %if.then
  %24 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %24) #10
  %25 = bitcast i64** %pFile_time to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #10
  %26 = bitcast i64* %file_modified_time to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %26) #10
  %27 = bitcast i64* %uncomp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %27) #10
  %28 = bitcast %struct.__sFILE** %pSrc_file to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #10
  %29 = load i32, i32* %retval, align 4
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_get_file_modified_time(i8* %pFilename, i64* %pTime) #0 {
entry:
  %retval = alloca i32, align 4
  %pFilename.addr = alloca i8*, align 8
  %pTime.addr = alloca i64*, align 8
  %file_stat = alloca %struct.stat, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i64* %pTime, i64** %pTime.addr, align 8, !tbaa !8
  %0 = bitcast %struct.stat* %file_stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %0) #10
  %1 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %call = call i32 @"\01_stat$INODE64"(i8* %1, %struct.stat* %file_stat)
  %cmp = icmp ne i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %st_mtimespec = getelementptr inbounds %struct.stat, %struct.stat* %file_stat, i32 0, i32 8
  %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %st_mtimespec, i32 0, i32 0
  %2 = load i64, i64* %tv_sec, align 8, !tbaa !190
  %3 = load i64*, i64** %pTime.addr, align 8, !tbaa !8
  store i64 %2, i64* %3, align 8, !tbaa !4
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %4 = bitcast %struct.stat* %file_stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %4) #10
  %5 = load i32, i32* %retval, align 4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_add_from_zip_reader(%struct.mz_zip_archive* %pZip, %struct.mz_zip_archive* %pSource_zip, i32 %src_file_index) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pSource_zip.addr = alloca %struct.mz_zip_archive*, align 8
  %src_file_index.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %bit_flags = alloca i32, align 4
  %num_alignment_padding_bytes = alloca i32, align 4
  %src_central_dir_following_data_size = alloca i32, align 4
  %src_archive_bytes_remaining = alloca i64, align 8
  %local_dir_header_ofs = alloca i64, align 8
  %cur_src_file_ofs = alloca i64, align 8
  %cur_dst_file_ofs = alloca i64, align 8
  %local_header_u32 = alloca [8 x i32], align 16
  %pLocal_header = alloca i8*, align 8
  %new_central_header = alloca [46 x i8], align 16
  %orig_central_dir_size = alloca i64, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pBuf = alloca i8*, align 8
  %pSrc_central_header = alloca i8*, align 8
  %src_file_stat = alloca %struct.mz_zip_archive_file_stat, align 8
  %src_filename_len = alloca i32, align 4
  %src_comment_len = alloca i32, align 4
  %src_ext_len = alloca i32, align 4
  %local_header_filename_size = alloca i32, align 4
  %local_header_extra_len = alloca i32, align 4
  %local_header_comp_size = alloca i64, align 8
  %local_header_uncomp_size = alloca i64, align 8
  %found_zip64_ext_data_in_ldir = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %file_data_array = alloca %struct.mz_zip_array, align 8
  %pExtra_data = alloca i8*, align 8
  %extra_size_remaining = alloca i32, align 4
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  %field_total_size = alloca i32, align 4
  %pSrc_field_data = alloca i8*, align 8
  %approx_new_archive_size = alloca i64, align 8
  %has_id = alloca i32, align 4
  %pSrc_descriptor = alloca i32*, align 8
  %src_crc32 = alloca i32, align 4
  %src_comp_size = alloca i64, align 8
  %src_uncomp_size = alloca i64, align 8
  %pSrc_ext = alloca i8*, align 8
  %new_ext_block = alloca %struct.mz_zip_array, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.mz_zip_archive* %pSource_zip, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  store i32 %src_file_index, i32* %src_file_index.addr, align 4, !tbaa !10
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %bit_flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i32* %num_alignment_padding_bytes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast i32* %src_central_dir_following_data_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = bitcast i64* %src_archive_bytes_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %4) #10
  %5 = bitcast i64* %local_dir_header_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = bitcast i64* %cur_src_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %6) #10
  %7 = bitcast i64* %cur_dst_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #10
  %8 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %8) #10
  %9 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #10
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %local_header_u32, i64 0, i64 0
  %10 = bitcast i32* %arraydecay to i8*
  store i8* %10, i8** %pLocal_header, align 8, !tbaa !8
  %11 = bitcast [46 x i8]* %new_central_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 46, i8* %11) #10
  %12 = bitcast i64* %orig_central_dir_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %12) #10
  %13 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %13) #10
  %14 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #10
  %15 = bitcast i8** %pSrc_central_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %15) #10
  %16 = bitcast %struct.mz_zip_archive_file_stat* %src_file_stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 1112, i8* %16) #10
  %17 = bitcast i32* %src_filename_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #10
  %18 = bitcast i32* %src_comment_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #10
  %19 = bitcast i32* %src_ext_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %19) #10
  %20 = bitcast i32* %local_header_filename_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #10
  %21 = bitcast i32* %local_header_extra_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #10
  %22 = bitcast i64* %local_header_comp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %22) #10
  %23 = bitcast i64* %local_header_uncomp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %23) #10
  %24 = bitcast i32* %found_zip64_ext_data_in_ldir to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #10
  store i32 0, i32* %found_zip64_ext_data_in_ldir, align 4, !tbaa !10
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %25, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 15
  %27 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %27, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 3
  %29 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp = icmp ne i32 %29, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false2
  %30 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %30, i32 0, i32 11
  %31 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %tobool4 = icmp ne i64 (i8*, i64, i8*, i64)* %31, null
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false2, %lor.lhs.false, %entry
  %32 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %32, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end:                                           ; preds = %lor.lhs.false3
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 15
  %34 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState5, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %34, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %35 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pState6 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %35, i32 0, i32 15
  %36 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState6, align 8, !tbaa !98
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %36, i32 0, i32 4
  %37 = load i32, i32* %m_zip64, align 4, !tbaa !118
  %tobool7 = icmp ne i32 %37, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end13

land.lhs.true:                                    ; preds = %if.end
  %38 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState8 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %38, i32 0, i32 15
  %39 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState8, align 8, !tbaa !98
  %m_zip649 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %39, i32 0, i32 4
  %40 = load i32, i32* %m_zip649, align 4, !tbaa !118
  %tobool10 = icmp ne i32 %40, 0
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %land.lhs.true
  %41 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call12 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %41, i32 24)
  store i32 %call12, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end13:                                         ; preds = %land.lhs.true, %if.end
  %42 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %43 = load i32, i32* %src_file_index.addr, align 4, !tbaa !10
  %call14 = call i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %42, i32 %43)
  store i8* %call14, i8** %pSrc_central_header, align 8, !tbaa !8
  %cmp15 = icmp eq i8* null, %call14
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end13
  %44 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call17 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %44, i32 24)
  store i32 %call17, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end18:                                         ; preds = %if.end13
  %45 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %45, i64 0
  %46 = bitcast i8* %add.ptr to i32*
  %47 = load i32, i32* %46, align 4, !tbaa !10
  %cmp19 = icmp ne i32 %47, 33639248
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end18
  %48 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call21 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %48, i32 9)
  store i32 %call21, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end22:                                         ; preds = %if.end18
  %49 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %add.ptr23 = getelementptr inbounds i8, i8* %49, i64 28
  %50 = bitcast i8* %add.ptr23 to i16*
  %51 = load i16, i16* %50, align 2, !tbaa !88
  %conv = zext i16 %51 to i32
  store i32 %conv, i32* %src_filename_len, align 4, !tbaa !10
  %52 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %add.ptr24 = getelementptr inbounds i8, i8* %52, i64 32
  %53 = bitcast i8* %add.ptr24 to i16*
  %54 = load i16, i16* %53, align 2, !tbaa !88
  %conv25 = zext i16 %54 to i32
  store i32 %conv25, i32* %src_comment_len, align 4, !tbaa !10
  %55 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %add.ptr26 = getelementptr inbounds i8, i8* %55, i64 30
  %56 = bitcast i8* %add.ptr26 to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !88
  %conv27 = zext i16 %57 to i32
  store i32 %conv27, i32* %src_ext_len, align 4, !tbaa !10
  %58 = load i32, i32* %src_filename_len, align 4, !tbaa !10
  %59 = load i32, i32* %src_ext_len, align 4, !tbaa !10
  %add = add i32 %58, %59
  %60 = load i32, i32* %src_comment_len, align 4, !tbaa !10
  %add28 = add i32 %add, %60
  store i32 %add28, i32* %src_central_dir_following_data_size, align 4, !tbaa !10
  %61 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %61, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %62 = load i64, i64* %m_size, align 8, !tbaa !175
  %add29 = add i64 %62, 46
  %63 = load i32, i32* %src_central_dir_following_data_size, align 4, !tbaa !10
  %conv30 = zext i32 %63 to i64
  %add31 = add i64 %add29, %conv30
  %add32 = add i64 %add31, 32
  %cmp33 = icmp uge i64 %add32, 4294967295
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end22
  %64 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call36 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %64, i32 15)
  store i32 %call36, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end37:                                         ; preds = %if.end22
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call38 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment(%struct.mz_zip_archive* %65)
  store i32 %call38, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %66 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6439 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %66, i32 0, i32 4
  %67 = load i32, i32* %m_zip6439, align 4, !tbaa !118
  %tobool40 = icmp ne i32 %67, 0
  br i1 %tobool40, label %if.else, label %if.then41

if.then41:                                        ; preds = %if.end37
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %68, i32 0, i32 2
  %69 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp42 = icmp eq i32 %69, 65535
  br i1 %cmp42, label %if.then44, label %if.end46

if.then44:                                        ; preds = %if.then41
  %70 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call45 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %70, i32 2)
  store i32 %call45, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end46:                                         ; preds = %if.then41
  br label %if.end53

if.else:                                          ; preds = %if.end37
  %71 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files47 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %71, i32 0, i32 2
  %72 = load i32, i32* %m_total_files47, align 8, !tbaa !113
  %cmp48 = icmp eq i32 %72, -1
  br i1 %cmp48, label %if.then50, label %if.end52

if.then50:                                        ; preds = %if.else
  %73 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call51 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %73, i32 2)
  store i32 %call51, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end52:                                         ; preds = %if.else
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.end46
  %74 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %75 = load i32, i32* %src_file_index.addr, align 4, !tbaa !10
  %76 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %call54 = call i32 @mz_zip_file_stat_internal(%struct.mz_zip_archive* %74, i32 %75, i8* %76, %struct.mz_zip_archive_file_stat* %src_file_stat, i32* null)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end57, label %if.then56

if.then56:                                        ; preds = %if.end53
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end57:                                         ; preds = %if.end53
  %m_local_header_ofs = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 12
  %77 = load i64, i64* %m_local_header_ofs, align 8, !tbaa !135
  store i64 %77, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %78 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %78, i32 0, i32 0
  %79 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  store i64 %79, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %80 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pRead58 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %80, i32 0, i32 11
  %81 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead58, align 8, !tbaa !109
  %82 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %82, i32 0, i32 14
  %83 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %84 = load i64, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %85 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %call59 = call i64 %81(i8* %83, i64 %84, i8* %85, i64 30)
  %cmp60 = icmp ne i64 %call59, 30
  br i1 %cmp60, label %if.then62, label %if.end64

if.then62:                                        ; preds = %if.end57
  %86 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call63 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %86, i32 20)
  store i32 %call63, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end64:                                         ; preds = %if.end57
  %87 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %88 = bitcast i8* %87 to i32*
  %89 = load i32, i32* %88, align 4, !tbaa !10
  %cmp65 = icmp ne i32 %89, 67324752
  br i1 %cmp65, label %if.then67, label %if.end69

if.then67:                                        ; preds = %if.end64
  %90 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call68 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %90, i32 9)
  store i32 %call68, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end69:                                         ; preds = %if.end64
  %91 = load i64, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %add70 = add i64 %91, 30
  store i64 %add70, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %92 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr71 = getelementptr inbounds i8, i8* %92, i64 26
  %93 = bitcast i8* %add.ptr71 to i16*
  %94 = load i16, i16* %93, align 2, !tbaa !88
  %conv72 = zext i16 %94 to i32
  store i32 %conv72, i32* %local_header_filename_size, align 4, !tbaa !10
  %95 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr73 = getelementptr inbounds i8, i8* %95, i64 28
  %96 = bitcast i8* %add.ptr73 to i16*
  %97 = load i16, i16* %96, align 2, !tbaa !88
  %conv74 = zext i16 %97 to i32
  store i32 %conv74, i32* %local_header_extra_len, align 4, !tbaa !10
  %98 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr75 = getelementptr inbounds i8, i8* %98, i64 18
  %99 = bitcast i8* %add.ptr75 to i32*
  %100 = load i32, i32* %99, align 4, !tbaa !10
  %conv76 = zext i32 %100 to i64
  store i64 %conv76, i64* %local_header_comp_size, align 8, !tbaa !76
  %101 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr77 = getelementptr inbounds i8, i8* %101, i64 22
  %102 = bitcast i8* %add.ptr77 to i32*
  %103 = load i32, i32* %102, align 4, !tbaa !10
  %conv78 = zext i32 %103 to i64
  store i64 %conv78, i64* %local_header_uncomp_size, align 8, !tbaa !76
  %104 = load i32, i32* %local_header_filename_size, align 4, !tbaa !10
  %105 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %add79 = add i32 %104, %105
  %conv80 = zext i32 %add79 to i64
  %m_comp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 8
  %106 = load i64, i64* %m_comp_size, align 8, !tbaa !131
  %add81 = add i64 %conv80, %106
  store i64 %add81, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  %107 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %tobool82 = icmp ne i32 %107, 0
  br i1 %tobool82, label %land.lhs.true83, label %if.end159

land.lhs.true83:                                  ; preds = %if.end69
  %108 = load i64, i64* %local_header_comp_size, align 8, !tbaa !76
  %cmp84 = icmp eq i64 %108, 4294967295
  br i1 %cmp84, label %if.then89, label %lor.lhs.false86

lor.lhs.false86:                                  ; preds = %land.lhs.true83
  %109 = load i64, i64* %local_header_uncomp_size, align 8, !tbaa !76
  %cmp87 = icmp eq i64 %109, 4294967295
  br i1 %cmp87, label %if.then89, label %if.end159

if.then89:                                        ; preds = %lor.lhs.false86, %land.lhs.true83
  %110 = bitcast %struct.mz_zip_array* %file_data_array to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %110) #10
  %111 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %111) #10
  %112 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %112) #10
  %113 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  store i32 %113, i32* %extra_size_remaining, align 4, !tbaa !10
  call void @mz_zip_array_init(%struct.mz_zip_array* %file_data_array, i32 1)
  %114 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %115 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %conv90 = zext i32 %115 to i64
  %call91 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %114, %struct.mz_zip_array* %file_data_array, i64 %conv90, i32 0)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.end95, label %if.then93

if.then93:                                        ; preds = %if.then89
  %116 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call94 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %116, i32 16)
  store i32 %call94, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup154

if.end95:                                         ; preds = %if.then89
  %117 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pRead96 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %117, i32 0, i32 11
  %118 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead96, align 8, !tbaa !109
  %119 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pIO_opaque97 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %119, i32 0, i32 14
  %120 = load i8*, i8** %m_pIO_opaque97, align 8, !tbaa !120
  %m_local_header_ofs98 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 12
  %121 = load i64, i64* %m_local_header_ofs98, align 8, !tbaa !135
  %add99 = add i64 %121, 30
  %122 = load i32, i32* %local_header_filename_size, align 4, !tbaa !10
  %conv100 = zext i32 %122 to i64
  %add101 = add i64 %add99, %conv100
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %123 = load i8*, i8** %m_p, align 8, !tbaa !164
  %124 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %conv102 = zext i32 %124 to i64
  %call103 = call i64 %118(i8* %120, i64 %add101, i8* %123, i64 %conv102)
  %125 = load i32, i32* %local_header_extra_len, align 4, !tbaa !10
  %conv104 = zext i32 %125 to i64
  %cmp105 = icmp ne i64 %call103, %conv104
  br i1 %cmp105, label %if.then107, label %if.end109

if.then107:                                       ; preds = %if.end95
  %126 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %126, %struct.mz_zip_array* %file_data_array)
  %127 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call108 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %127, i32 20)
  store i32 %call108, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup154

if.end109:                                        ; preds = %if.end95
  %m_p110 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %file_data_array, i32 0, i32 0
  %128 = load i8*, i8** %m_p110, align 8, !tbaa !164
  store i8* %128, i8** %pExtra_data, align 8, !tbaa !8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end109
  %129 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %129) #10
  %130 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %130) #10
  %131 = bitcast i32* %field_total_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %131) #10
  %132 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv111 = zext i32 %132 to i64
  %cmp112 = icmp ult i64 %conv111, 4
  br i1 %cmp112, label %if.then114, label %if.end116

if.then114:                                       ; preds = %do.body
  %133 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %133, %struct.mz_zip_array* %file_data_array)
  %134 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call115 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %134, i32 9)
  store i32 %call115, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup150

if.end116:                                        ; preds = %do.body
  %135 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %136 = bitcast i8* %135 to i16*
  %137 = load i16, i16* %136, align 2, !tbaa !88
  %conv117 = zext i16 %137 to i32
  store i32 %conv117, i32* %field_id, align 4, !tbaa !10
  %138 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr118 = getelementptr inbounds i8, i8* %138, i64 2
  %139 = bitcast i8* %add.ptr118 to i16*
  %140 = load i16, i16* %139, align 2, !tbaa !88
  %conv119 = zext i16 %140 to i32
  store i32 %conv119, i32* %field_data_size, align 4, !tbaa !10
  %141 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv120 = zext i32 %141 to i64
  %add121 = add i64 %conv120, 4
  %conv122 = trunc i64 %add121 to i32
  store i32 %conv122, i32* %field_total_size, align 4, !tbaa !10
  %142 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %143 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %cmp123 = icmp ugt i32 %142, %143
  br i1 %cmp123, label %if.then125, label %if.end127

if.then125:                                       ; preds = %if.end116
  %144 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %144, %struct.mz_zip_array* %file_data_array)
  %145 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call126 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %145, i32 9)
  store i32 %call126, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup150

if.end127:                                        ; preds = %if.end116
  %146 = load i32, i32* %field_id, align 4, !tbaa !10
  %cmp128 = icmp eq i32 %146, 1
  br i1 %cmp128, label %if.then130, label %if.end148

if.then130:                                       ; preds = %if.end127
  %147 = bitcast i8** %pSrc_field_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %147) #10
  %148 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr131 = getelementptr inbounds i8, i8* %148, i64 4
  store i8* %add.ptr131, i8** %pSrc_field_data, align 8, !tbaa !8
  %149 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv132 = zext i32 %149 to i64
  %cmp133 = icmp ult i64 %conv132, 16
  br i1 %cmp133, label %if.then135, label %if.end137

if.then135:                                       ; preds = %if.then130
  %150 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %150, %struct.mz_zip_array* %file_data_array)
  %151 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call136 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %151, i32 9)
  store i32 %call136, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end137:                                        ; preds = %if.then130
  %152 = load i8*, i8** %pSrc_field_data, align 8, !tbaa !8
  %153 = bitcast i8* %152 to i32*
  %154 = load i32, i32* %153, align 4, !tbaa !10
  %conv138 = zext i32 %154 to i64
  %155 = load i8*, i8** %pSrc_field_data, align 8, !tbaa !8
  %add.ptr139 = getelementptr inbounds i8, i8* %155, i64 4
  %156 = bitcast i8* %add.ptr139 to i32*
  %157 = load i32, i32* %156, align 4, !tbaa !10
  %conv140 = zext i32 %157 to i64
  %shl = shl i64 %conv140, 32
  %or = or i64 %conv138, %shl
  store i64 %or, i64* %local_header_uncomp_size, align 8, !tbaa !76
  %158 = load i8*, i8** %pSrc_field_data, align 8, !tbaa !8
  %add.ptr141 = getelementptr inbounds i8, i8* %158, i64 8
  %159 = bitcast i8* %add.ptr141 to i32*
  %160 = load i32, i32* %159, align 4, !tbaa !10
  %conv142 = zext i32 %160 to i64
  %161 = load i8*, i8** %pSrc_field_data, align 8, !tbaa !8
  %add.ptr143 = getelementptr inbounds i8, i8* %161, i64 8
  %add.ptr144 = getelementptr inbounds i8, i8* %add.ptr143, i64 4
  %162 = bitcast i8* %add.ptr144 to i32*
  %163 = load i32, i32* %162, align 4, !tbaa !10
  %conv145 = zext i32 %163 to i64
  %shl146 = shl i64 %conv145, 32
  %or147 = or i64 %conv142, %shl146
  store i64 %or147, i64* %local_header_comp_size, align 8, !tbaa !76
  store i32 1, i32* %found_zip64_ext_data_in_ldir, align 4, !tbaa !10
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end137, %if.then135
  %164 = bitcast i8** %pSrc_field_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %164) #10
  br label %cleanup150

if.end148:                                        ; preds = %if.end127
  %165 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %166 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %idx.ext = zext i32 %165 to i64
  %add.ptr149 = getelementptr inbounds i8, i8* %166, i64 %idx.ext
  store i8* %add.ptr149, i8** %pExtra_data, align 8, !tbaa !8
  %167 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %168 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %sub = sub i32 %168, %167
  store i32 %sub, i32* %extra_size_remaining, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup150

cleanup150:                                       ; preds = %if.end148, %cleanup, %if.then125, %if.then114
  %169 = bitcast i32* %field_total_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %169) #10
  %170 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %170) #10
  %171 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %171) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup154 [
    i32 0, label %cleanup.cont
    i32 2, label %do.end
  ]

cleanup.cont:                                     ; preds = %cleanup150
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont
  %172 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %tobool153 = icmp ne i32 %172, 0
  br i1 %tobool153, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %cleanup150
  %173 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %173, %struct.mz_zip_array* %file_data_array)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup154

cleanup154:                                       ; preds = %do.end, %cleanup150, %if.then107, %if.then93
  %174 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %174) #10
  %175 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %175) #10
  %176 = bitcast %struct.mz_zip_array* %file_data_array to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %176) #10
  %cleanup.dest157 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest157, label %cleanup471 [
    i32 0, label %cleanup.cont158
  ]

cleanup.cont158:                                  ; preds = %cleanup154
  br label %if.end159

if.end159:                                        ; preds = %cleanup.cont158, %lor.lhs.false86, %if.end69
  %177 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64160 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %177, i32 0, i32 4
  %178 = load i32, i32* %m_zip64160, align 4, !tbaa !118
  %tobool161 = icmp ne i32 %178, 0
  br i1 %tobool161, label %if.end184, label %if.then162

if.then162:                                       ; preds = %if.end159
  %179 = bitcast i64* %approx_new_archive_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %179) #10
  %180 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %181 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %conv163 = zext i32 %181 to i64
  %add164 = add i64 %180, %conv163
  %add165 = add i64 %add164, 30
  %182 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  %add166 = add i64 %add165, %182
  %add167 = add i64 %add166, 16
  %183 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir168 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %183, i32 0, i32 0
  %m_size169 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir168, i32 0, i32 1
  %184 = load i64, i64* %m_size169, align 8, !tbaa !175
  %add170 = add i64 %add167, %184
  %add171 = add i64 %add170, 46
  %185 = load i32, i32* %src_central_dir_following_data_size, align 4, !tbaa !10
  %conv172 = zext i32 %185 to i64
  %add173 = add i64 %add171, %conv172
  %add174 = add i64 %add173, 22
  %add175 = add i64 %add174, 64
  store i64 %add175, i64* %approx_new_archive_size, align 8, !tbaa !76
  %186 = load i64, i64* %approx_new_archive_size, align 8, !tbaa !76
  %cmp176 = icmp uge i64 %186, 4294967295
  br i1 %cmp176, label %if.then178, label %if.end180

if.then178:                                       ; preds = %if.then162
  %187 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call179 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %187, i32 29)
  store i32 %call179, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup181

if.end180:                                        ; preds = %if.then162
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup181

cleanup181:                                       ; preds = %if.end180, %if.then178
  %188 = bitcast i64* %approx_new_archive_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %188) #10
  %cleanup.dest182 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest182, label %cleanup471 [
    i32 0, label %cleanup.cont183
  ]

cleanup.cont183:                                  ; preds = %cleanup181
  br label %if.end184

if.end184:                                        ; preds = %cleanup.cont183, %if.end159
  %189 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %190 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %191 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %call185 = call i32 @mz_zip_writer_write_zeros(%struct.mz_zip_archive* %189, i64 %190, i32 %191)
  %tobool186 = icmp ne i32 %call185, 0
  br i1 %tobool186, label %if.end188, label %if.then187

if.then187:                                       ; preds = %if.end184
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end188:                                        ; preds = %if.end184
  %192 = load i32, i32* %num_alignment_padding_bytes, align 4, !tbaa !10
  %conv189 = zext i32 %192 to i64
  %193 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %add190 = add i64 %193, %conv189
  store i64 %add190, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %194 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  store i64 %194, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %195 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %195, i32 0, i32 6
  %196 = load i64, i64* %m_file_offset_alignment, align 8, !tbaa !177
  %tobool191 = icmp ne i64 %196, 0
  br i1 %tobool191, label %if.then192, label %if.end199

if.then192:                                       ; preds = %if.end188
  %197 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %198 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_file_offset_alignment193 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %198, i32 0, i32 6
  %199 = load i64, i64* %m_file_offset_alignment193, align 8, !tbaa !177
  %sub194 = sub i64 %199, 1
  %and = and i64 %197, %sub194
  %cmp195 = icmp eq i64 %and, 0
  %lnot = xor i1 %cmp195, true
  %lnot.ext = zext i1 %lnot to i32
  %conv197 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv197, i64 0)
  %tobool198 = icmp ne i64 %expval, 0
  br i1 %tobool198, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then192
  call void @__assert_rtn(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @__func__.mz_zip_writer_add_from_zip_reader, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 6973, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.22, i64 0, i64 0)) #13
  unreachable

200:                                              ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then192
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %200
  br label %if.end199

if.end199:                                        ; preds = %cond.end, %if.end188
  %201 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %201, i32 0, i32 12
  %202 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %203 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque200 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %203, i32 0, i32 14
  %204 = load i8*, i8** %m_pIO_opaque200, align 8, !tbaa !120
  %205 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %206 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %call201 = call i64 %202(i8* %204, i64 %205, i8* %206, i64 30)
  %cmp202 = icmp ne i64 %call201, 30
  br i1 %cmp202, label %if.then204, label %if.end206

if.then204:                                       ; preds = %if.end199
  %207 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call205 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %207, i32 19)
  store i32 %call205, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end206:                                        ; preds = %if.end199
  %208 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %add207 = add i64 %208, 30
  store i64 %add207, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %209 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %209, i32 0, i32 7
  %210 = load i8* (i8*, i64, i64)*, i8* (i8*, i64, i64)** %m_pAlloc, align 8, !tbaa !100
  %211 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %211, i32 0, i32 10
  %212 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %213 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  %cmp208 = icmp ult i64 65536, %213
  br i1 %cmp208, label %cond.true210, label %cond.false211

cond.true210:                                     ; preds = %if.end206
  br label %cond.end212

cond.false211:                                    ; preds = %if.end206
  %214 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  br label %cond.end212

cond.end212:                                      ; preds = %cond.false211, %cond.true210
  %cond = phi i64 [ 65536, %cond.true210 ], [ %214, %cond.false211 ]
  %cmp213 = icmp ugt i64 32, %cond
  br i1 %cmp213, label %cond.true215, label %cond.false216

cond.true215:                                     ; preds = %cond.end212
  br label %cond.end223

cond.false216:                                    ; preds = %cond.end212
  %215 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  %cmp217 = icmp ult i64 65536, %215
  br i1 %cmp217, label %cond.true219, label %cond.false220

cond.true219:                                     ; preds = %cond.false216
  br label %cond.end221

cond.false220:                                    ; preds = %cond.false216
  %216 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  br label %cond.end221

cond.end221:                                      ; preds = %cond.false220, %cond.true219
  %cond222 = phi i64 [ 65536, %cond.true219 ], [ %216, %cond.false220 ]
  br label %cond.end223

cond.end223:                                      ; preds = %cond.end221, %cond.true215
  %cond224 = phi i64 [ 32, %cond.true215 ], [ %cond222, %cond.end221 ]
  %call225 = call i8* %210(i8* %212, i64 1, i64 %cond224)
  store i8* %call225, i8** %pBuf, align 8, !tbaa !8
  %cmp226 = icmp eq i8* null, %call225
  br i1 %cmp226, label %if.then228, label %if.end230

if.then228:                                       ; preds = %cond.end223
  %217 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call229 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %217, i32 16)
  store i32 %call229, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end230:                                        ; preds = %cond.end223
  br label %while.cond

while.cond:                                       ; preds = %if.end263, %if.end230
  %218 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  %tobool231 = icmp ne i64 %218, 0
  br i1 %tobool231, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %219 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  %cmp232 = icmp ult i64 65536, %219
  br i1 %cmp232, label %cond.true234, label %cond.false235

cond.true234:                                     ; preds = %while.body
  br label %cond.end236

cond.false235:                                    ; preds = %while.body
  %220 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  br label %cond.end236

cond.end236:                                      ; preds = %cond.false235, %cond.true234
  %cond237 = phi i64 [ 65536, %cond.true234 ], [ %220, %cond.false235 ]
  %conv238 = trunc i64 %cond237 to i32
  store i32 %conv238, i32* %n, align 4, !tbaa !10
  %221 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pRead239 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %221, i32 0, i32 11
  %222 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead239, align 8, !tbaa !109
  %223 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pIO_opaque240 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %223, i32 0, i32 14
  %224 = load i8*, i8** %m_pIO_opaque240, align 8, !tbaa !120
  %225 = load i64, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %226 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %227 = load i32, i32* %n, align 4, !tbaa !10
  %conv241 = zext i32 %227 to i64
  %call242 = call i64 %222(i8* %224, i64 %225, i8* %226, i64 %conv241)
  %228 = load i32, i32* %n, align 4, !tbaa !10
  %conv243 = zext i32 %228 to i64
  %cmp244 = icmp ne i64 %call242, %conv243
  br i1 %cmp244, label %if.then246, label %if.end249

if.then246:                                       ; preds = %cond.end236
  %229 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %229, i32 0, i32 8
  %230 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree, align 8, !tbaa !101
  %231 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque247 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %231, i32 0, i32 10
  %232 = load i8*, i8** %m_pAlloc_opaque247, align 8, !tbaa !108
  %233 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void %230(i8* %232, i8* %233)
  %234 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call248 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %234, i32 20)
  store i32 %call248, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end249:                                        ; preds = %cond.end236
  %235 = load i32, i32* %n, align 4, !tbaa !10
  %conv250 = zext i32 %235 to i64
  %236 = load i64, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %add251 = add i64 %236, %conv250
  store i64 %add251, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %237 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite252 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %237, i32 0, i32 12
  %238 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite252, align 8, !tbaa !176
  %239 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque253 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %239, i32 0, i32 14
  %240 = load i8*, i8** %m_pIO_opaque253, align 8, !tbaa !120
  %241 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %242 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %243 = load i32, i32* %n, align 4, !tbaa !10
  %conv254 = zext i32 %243 to i64
  %call255 = call i64 %238(i8* %240, i64 %241, i8* %242, i64 %conv254)
  %244 = load i32, i32* %n, align 4, !tbaa !10
  %conv256 = zext i32 %244 to i64
  %cmp257 = icmp ne i64 %call255, %conv256
  br i1 %cmp257, label %if.then259, label %if.end263

if.then259:                                       ; preds = %if.end249
  %245 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree260 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %245, i32 0, i32 8
  %246 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree260, align 8, !tbaa !101
  %247 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque261 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %247, i32 0, i32 10
  %248 = load i8*, i8** %m_pAlloc_opaque261, align 8, !tbaa !108
  %249 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void %246(i8* %248, i8* %249)
  %250 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call262 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %250, i32 19)
  store i32 %call262, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end263:                                        ; preds = %if.end249
  %251 = load i32, i32* %n, align 4, !tbaa !10
  %conv264 = zext i32 %251 to i64
  %252 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %add265 = add i64 %252, %conv264
  store i64 %add265, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %253 = load i32, i32* %n, align 4, !tbaa !10
  %conv266 = zext i32 %253 to i64
  %254 = load i64, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  %sub267 = sub i64 %254, %conv266
  store i64 %sub267, i64* %src_archive_bytes_remaining, align 8, !tbaa !76
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %255 = load i8*, i8** %pLocal_header, align 8, !tbaa !8
  %add.ptr268 = getelementptr inbounds i8, i8* %255, i64 6
  %256 = bitcast i8* %add.ptr268 to i16*
  %257 = load i16, i16* %256, align 2, !tbaa !88
  %conv269 = zext i16 %257 to i32
  store i32 %conv269, i32* %bit_flags, align 4, !tbaa !10
  %258 = load i32, i32* %bit_flags, align 4, !tbaa !10
  %and270 = and i32 %258, 8
  %tobool271 = icmp ne i32 %and270, 0
  br i1 %tobool271, label %if.then272, label %if.end348

if.then272:                                       ; preds = %while.end
  %259 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pState273 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %259, i32 0, i32 15
  %260 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState273, align 8, !tbaa !98
  %m_zip64274 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %260, i32 0, i32 4
  %261 = load i32, i32* %m_zip64274, align 4, !tbaa !118
  %tobool275 = icmp ne i32 %261, 0
  br i1 %tobool275, label %if.then278, label %lor.lhs.false276

lor.lhs.false276:                                 ; preds = %if.then272
  %262 = load i32, i32* %found_zip64_ext_data_in_ldir, align 4, !tbaa !10
  %tobool277 = icmp ne i32 %262, 0
  br i1 %tobool277, label %if.then278, label %if.else294

if.then278:                                       ; preds = %lor.lhs.false276, %if.then272
  %263 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pRead279 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %263, i32 0, i32 11
  %264 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead279, align 8, !tbaa !109
  %265 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pIO_opaque280 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %265, i32 0, i32 14
  %266 = load i8*, i8** %m_pIO_opaque280, align 8, !tbaa !120
  %267 = load i64, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %268 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %call281 = call i64 %264(i8* %266, i64 %267, i8* %268, i64 24)
  %cmp282 = icmp ne i64 %call281, 24
  br i1 %cmp282, label %if.then284, label %if.end288

if.then284:                                       ; preds = %if.then278
  %269 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree285 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %269, i32 0, i32 8
  %270 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree285, align 8, !tbaa !101
  %271 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque286 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %271, i32 0, i32 10
  %272 = load i8*, i8** %m_pAlloc_opaque286, align 8, !tbaa !108
  %273 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void %270(i8* %272, i8* %273)
  %274 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call287 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %274, i32 20)
  store i32 %call287, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end288:                                        ; preds = %if.then278
  %275 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %276 = bitcast i8* %275 to i32*
  %277 = load i32, i32* %276, align 4, !tbaa !10
  %cmp289 = icmp eq i32 %277, 134695760
  %278 = zext i1 %cmp289 to i64
  %cond291 = select i1 %cmp289, i32 6, i32 5
  %conv292 = sext i32 %cond291 to i64
  %mul = mul i64 4, %conv292
  %conv293 = trunc i64 %mul to i32
  store i32 %conv293, i32* %n, align 4, !tbaa !10
  br label %if.end331

if.else294:                                       ; preds = %lor.lhs.false276
  %279 = bitcast i32* %has_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %279) #10
  %280 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pRead295 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %280, i32 0, i32 11
  %281 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead295, align 8, !tbaa !109
  %282 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pSource_zip.addr, align 8, !tbaa !8
  %m_pIO_opaque296 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %282, i32 0, i32 14
  %283 = load i8*, i8** %m_pIO_opaque296, align 8, !tbaa !120
  %284 = load i64, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %285 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %call297 = call i64 %281(i8* %283, i64 %284, i8* %285, i64 16)
  %cmp298 = icmp ne i64 %call297, 16
  br i1 %cmp298, label %if.then300, label %if.end304

if.then300:                                       ; preds = %if.else294
  %286 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree301 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %286, i32 0, i32 8
  %287 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree301, align 8, !tbaa !101
  %288 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque302 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %288, i32 0, i32 10
  %289 = load i8*, i8** %m_pAlloc_opaque302, align 8, !tbaa !108
  %290 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void %287(i8* %289, i8* %290)
  %291 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call303 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %291, i32 20)
  store i32 %call303, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup328

if.end304:                                        ; preds = %if.else294
  %292 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %293 = bitcast i8* %292 to i32*
  %294 = load i32, i32* %293, align 4, !tbaa !10
  %cmp305 = icmp eq i32 %294, 134695760
  %conv306 = zext i1 %cmp305 to i32
  store i32 %conv306, i32* %has_id, align 4, !tbaa !10
  %295 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState307 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %295, i32 0, i32 15
  %296 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState307, align 8, !tbaa !98
  %m_zip64308 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %296, i32 0, i32 4
  %297 = load i32, i32* %m_zip64308, align 4, !tbaa !118
  %tobool309 = icmp ne i32 %297, 0
  br i1 %tobool309, label %if.then310, label %if.else321

if.then310:                                       ; preds = %if.end304
  %298 = bitcast i32** %pSrc_descriptor to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %298) #10
  %299 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %300 = load i32, i32* %has_id, align 4, !tbaa !10
  %tobool311 = icmp ne i32 %300, 0
  %301 = zext i1 %tobool311 to i64
  %cond312 = select i1 %tobool311, i64 4, i64 0
  %add.ptr313 = getelementptr inbounds i8, i8* %299, i64 %cond312
  %302 = bitcast i8* %add.ptr313 to i32*
  store i32* %302, i32** %pSrc_descriptor, align 8, !tbaa !8
  %303 = bitcast i32* %src_crc32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %303) #10
  %304 = load i32*, i32** %pSrc_descriptor, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds i32, i32* %304, i64 0
  %305 = load i32, i32* %arrayidx, align 4, !tbaa !10
  store i32 %305, i32* %src_crc32, align 4, !tbaa !10
  %306 = bitcast i64* %src_comp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %306) #10
  %307 = load i32*, i32** %pSrc_descriptor, align 8, !tbaa !8
  %arrayidx314 = getelementptr inbounds i32, i32* %307, i64 1
  %308 = load i32, i32* %arrayidx314, align 4, !tbaa !10
  %conv315 = zext i32 %308 to i64
  store i64 %conv315, i64* %src_comp_size, align 8, !tbaa !76
  %309 = bitcast i64* %src_uncomp_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %309) #10
  %310 = load i32*, i32** %pSrc_descriptor, align 8, !tbaa !8
  %arrayidx316 = getelementptr inbounds i32, i32* %310, i64 2
  %311 = load i32, i32* %arrayidx316, align 4, !tbaa !10
  %conv317 = zext i32 %311 to i64
  store i64 %conv317, i64* %src_uncomp_size, align 8, !tbaa !76
  %312 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void @mz_write_le32(i8* %312, i32 134695760)
  %313 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr318 = getelementptr inbounds i8, i8* %313, i64 4
  %314 = load i32, i32* %src_crc32, align 4, !tbaa !10
  call void @mz_write_le32(i8* %add.ptr318, i32 %314)
  %315 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr319 = getelementptr inbounds i8, i8* %315, i64 8
  %316 = load i64, i64* %src_comp_size, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr319, i64 %316)
  %317 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %add.ptr320 = getelementptr inbounds i8, i8* %317, i64 16
  %318 = load i64, i64* %src_uncomp_size, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr320, i64 %318)
  store i32 24, i32* %n, align 4, !tbaa !10
  %319 = bitcast i64* %src_uncomp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %319) #10
  %320 = bitcast i64* %src_comp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %320) #10
  %321 = bitcast i32* %src_crc32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %321) #10
  %322 = bitcast i32** %pSrc_descriptor to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %322) #10
  br label %if.end327

if.else321:                                       ; preds = %if.end304
  %323 = load i32, i32* %has_id, align 4, !tbaa !10
  %tobool322 = icmp ne i32 %323, 0
  %324 = zext i1 %tobool322 to i64
  %cond323 = select i1 %tobool322, i32 4, i32 3
  %conv324 = sext i32 %cond323 to i64
  %mul325 = mul i64 4, %conv324
  %conv326 = trunc i64 %mul325 to i32
  store i32 %conv326, i32* %n, align 4, !tbaa !10
  br label %if.end327

if.end327:                                        ; preds = %if.else321, %if.then310
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup328

cleanup328:                                       ; preds = %if.end327, %if.then300
  %325 = bitcast i32* %has_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %325) #10
  %cleanup.dest329 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest329, label %cleanup471 [
    i32 0, label %cleanup.cont330
  ]

cleanup.cont330:                                  ; preds = %cleanup328
  br label %if.end331

if.end331:                                        ; preds = %cleanup.cont330, %if.end288
  %326 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite332 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %326, i32 0, i32 12
  %327 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite332, align 8, !tbaa !176
  %328 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque333 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %328, i32 0, i32 14
  %329 = load i8*, i8** %m_pIO_opaque333, align 8, !tbaa !120
  %330 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %331 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %332 = load i32, i32* %n, align 4, !tbaa !10
  %conv334 = zext i32 %332 to i64
  %call335 = call i64 %327(i8* %329, i64 %330, i8* %331, i64 %conv334)
  %333 = load i32, i32* %n, align 4, !tbaa !10
  %conv336 = zext i32 %333 to i64
  %cmp337 = icmp ne i64 %call335, %conv336
  br i1 %cmp337, label %if.then339, label %if.end343

if.then339:                                       ; preds = %if.end331
  %334 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree340 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %334, i32 0, i32 8
  %335 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree340, align 8, !tbaa !101
  %336 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque341 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %336, i32 0, i32 10
  %337 = load i8*, i8** %m_pAlloc_opaque341, align 8, !tbaa !108
  %338 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void %335(i8* %337, i8* %338)
  %339 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call342 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %339, i32 19)
  store i32 %call342, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end343:                                        ; preds = %if.end331
  %340 = load i32, i32* %n, align 4, !tbaa !10
  %conv344 = zext i32 %340 to i64
  %341 = load i64, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %add345 = add i64 %341, %conv344
  store i64 %add345, i64* %cur_src_file_ofs, align 8, !tbaa !76
  %342 = load i32, i32* %n, align 4, !tbaa !10
  %conv346 = zext i32 %342 to i64
  %343 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %add347 = add i64 %343, %conv346
  store i64 %add347, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  br label %if.end348

if.end348:                                        ; preds = %if.end343, %while.end
  %344 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pFree349 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %344, i32 0, i32 8
  %345 = load void (i8*, i8*)*, void (i8*, i8*)** %m_pFree349, align 8, !tbaa !101
  %346 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque350 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %346, i32 0, i32 10
  %347 = load i8*, i8** %m_pAlloc_opaque350, align 8, !tbaa !108
  %348 = load i8*, i8** %pBuf, align 8, !tbaa !8
  call void %345(i8* %347, i8* %348)
  %349 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir351 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %349, i32 0, i32 0
  %m_size352 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir351, i32 0, i32 1
  %350 = load i64, i64* %m_size352, align 8, !tbaa !175
  store i64 %350, i64* %orig_central_dir_size, align 8, !tbaa !4
  %arraydecay353 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i64 0, i64 0
  %351 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %arraydecay353, i8* align 1 %351, i64 46, i1 false)
  %352 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64354 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %352, i32 0, i32 4
  %353 = load i32, i32* %m_zip64354, align 4, !tbaa !118
  %tobool355 = icmp ne i32 %353, 0
  br i1 %tobool355, label %if.then356, label %if.else420

if.then356:                                       ; preds = %if.end348
  %354 = bitcast i8** %pSrc_ext to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %354) #10
  %355 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %add.ptr357 = getelementptr inbounds i8, i8* %355, i64 46
  %356 = load i32, i32* %src_filename_len, align 4, !tbaa !10
  %idx.ext358 = zext i32 %356 to i64
  %add.ptr359 = getelementptr inbounds i8, i8* %add.ptr357, i64 %idx.ext358
  store i8* %add.ptr359, i8** %pSrc_ext, align 8, !tbaa !8
  %357 = bitcast %struct.mz_zip_array* %new_ext_block to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* %357) #10
  call void @mz_zip_array_init(%struct.mz_zip_array* %new_ext_block, i32 1)
  %arraydecay360 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i64 0, i64 0
  %add.ptr361 = getelementptr inbounds i8, i8* %arraydecay360, i64 20
  call void @mz_write_le32(i8* %add.ptr361, i32 -1)
  %arraydecay362 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i64 0, i64 0
  %add.ptr363 = getelementptr inbounds i8, i8* %arraydecay362, i64 24
  call void @mz_write_le32(i8* %add.ptr363, i32 -1)
  %arraydecay364 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i64 0, i64 0
  %add.ptr365 = getelementptr inbounds i8, i8* %arraydecay364, i64 42
  call void @mz_write_le32(i8* %add.ptr365, i32 -1)
  %358 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %359 = load i8*, i8** %pSrc_ext, align 8, !tbaa !8
  %360 = load i32, i32* %src_ext_len, align 4, !tbaa !10
  %m_comp_size366 = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 8
  %m_uncomp_size = getelementptr inbounds %struct.mz_zip_archive_file_stat, %struct.mz_zip_archive_file_stat* %src_file_stat, i32 0, i32 9
  %call367 = call i32 @mz_zip_writer_update_zip64_extension_block(%struct.mz_zip_array* %new_ext_block, %struct.mz_zip_archive* %358, i8* %359, i32 %360, i64* %m_comp_size366, i64* %m_uncomp_size, i64* %local_dir_header_ofs, i32* null)
  %tobool368 = icmp ne i32 %call367, 0
  br i1 %tobool368, label %if.end370, label %if.then369

if.then369:                                       ; preds = %if.then356
  %361 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %361, %struct.mz_zip_array* %new_ext_block)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup416

if.end370:                                        ; preds = %if.then356
  %arraydecay371 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i64 0, i64 0
  %add.ptr372 = getelementptr inbounds i8, i8* %arraydecay371, i64 30
  %m_size373 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %new_ext_block, i32 0, i32 1
  %362 = load i64, i64* %m_size373, align 8, !tbaa !174
  %conv374 = trunc i64 %362 to i16
  call void @mz_write_le16(i8* %add.ptr372, i16 zeroext %conv374)
  %363 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %364 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir375 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %364, i32 0, i32 0
  %arraydecay376 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i64 0, i64 0
  %call377 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %363, %struct.mz_zip_array* %m_central_dir375, i8* %arraydecay376, i64 46)
  %tobool378 = icmp ne i32 %call377, 0
  br i1 %tobool378, label %if.end381, label %if.then379

if.then379:                                       ; preds = %if.end370
  %365 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %365, %struct.mz_zip_array* %new_ext_block)
  %366 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call380 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %366, i32 16)
  store i32 %call380, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup416

if.end381:                                        ; preds = %if.end370
  %367 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %368 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir382 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %368, i32 0, i32 0
  %369 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %add.ptr383 = getelementptr inbounds i8, i8* %369, i64 46
  %370 = load i32, i32* %src_filename_len, align 4, !tbaa !10
  %conv384 = zext i32 %370 to i64
  %call385 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %367, %struct.mz_zip_array* %m_central_dir382, i8* %add.ptr383, i64 %conv384)
  %tobool386 = icmp ne i32 %call385, 0
  br i1 %tobool386, label %if.end391, label %if.then387

if.then387:                                       ; preds = %if.end381
  %371 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %371, %struct.mz_zip_array* %new_ext_block)
  %372 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %373 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir388 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %373, i32 0, i32 0
  %374 = load i64, i64* %orig_central_dir_size, align 8, !tbaa !4
  %call389 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %372, %struct.mz_zip_array* %m_central_dir388, i64 %374, i32 0)
  %375 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call390 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %375, i32 16)
  store i32 %call390, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup416

if.end391:                                        ; preds = %if.end381
  %376 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %377 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir392 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %377, i32 0, i32 0
  %m_p393 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %new_ext_block, i32 0, i32 0
  %378 = load i8*, i8** %m_p393, align 8, !tbaa !164
  %m_size394 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %new_ext_block, i32 0, i32 1
  %379 = load i64, i64* %m_size394, align 8, !tbaa !174
  %call395 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %376, %struct.mz_zip_array* %m_central_dir392, i8* %378, i64 %379)
  %tobool396 = icmp ne i32 %call395, 0
  br i1 %tobool396, label %if.end401, label %if.then397

if.then397:                                       ; preds = %if.end391
  %380 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %380, %struct.mz_zip_array* %new_ext_block)
  %381 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %382 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir398 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %382, i32 0, i32 0
  %383 = load i64, i64* %orig_central_dir_size, align 8, !tbaa !4
  %call399 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %381, %struct.mz_zip_array* %m_central_dir398, i64 %383, i32 0)
  %384 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call400 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %384, i32 16)
  store i32 %call400, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup416

if.end401:                                        ; preds = %if.end391
  %385 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %386 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir402 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %386, i32 0, i32 0
  %387 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %add.ptr403 = getelementptr inbounds i8, i8* %387, i64 46
  %388 = load i32, i32* %src_filename_len, align 4, !tbaa !10
  %idx.ext404 = zext i32 %388 to i64
  %add.ptr405 = getelementptr inbounds i8, i8* %add.ptr403, i64 %idx.ext404
  %389 = load i32, i32* %src_ext_len, align 4, !tbaa !10
  %idx.ext406 = zext i32 %389 to i64
  %add.ptr407 = getelementptr inbounds i8, i8* %add.ptr405, i64 %idx.ext406
  %390 = load i32, i32* %src_comment_len, align 4, !tbaa !10
  %conv408 = zext i32 %390 to i64
  %call409 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %385, %struct.mz_zip_array* %m_central_dir402, i8* %add.ptr407, i64 %conv408)
  %tobool410 = icmp ne i32 %call409, 0
  br i1 %tobool410, label %if.end415, label %if.then411

if.then411:                                       ; preds = %if.end401
  %391 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %391, %struct.mz_zip_array* %new_ext_block)
  %392 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %393 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir412 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %393, i32 0, i32 0
  %394 = load i64, i64* %orig_central_dir_size, align 8, !tbaa !4
  %call413 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %392, %struct.mz_zip_array* %m_central_dir412, i64 %394, i32 0)
  %395 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call414 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %395, i32 16)
  store i32 %call414, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup416

if.end415:                                        ; preds = %if.end401
  %396 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  call void @mz_zip_array_clear(%struct.mz_zip_archive* %396, %struct.mz_zip_array* %new_ext_block)
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup416

cleanup416:                                       ; preds = %if.end415, %if.then411, %if.then397, %if.then387, %if.then379, %if.then369
  %397 = bitcast %struct.mz_zip_array* %new_ext_block to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %397) #10
  %398 = bitcast i8** %pSrc_ext to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %398) #10
  %cleanup.dest418 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest418, label %cleanup471 [
    i32 0, label %cleanup.cont419
  ]

cleanup.cont419:                                  ; preds = %cleanup416
  br label %if.end451

if.else420:                                       ; preds = %if.end348
  %399 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %cmp421 = icmp ugt i64 %399, 4294967295
  br i1 %cmp421, label %if.then423, label %if.end425

if.then423:                                       ; preds = %if.else420
  %400 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call424 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %400, i32 29)
  store i32 %call424, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end425:                                        ; preds = %if.else420
  %401 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %cmp426 = icmp uge i64 %401, 4294967295
  br i1 %cmp426, label %if.then428, label %if.end430

if.then428:                                       ; preds = %if.end425
  %402 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call429 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %402, i32 29)
  store i32 %call429, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end430:                                        ; preds = %if.end425
  %arraydecay431 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i64 0, i64 0
  %add.ptr432 = getelementptr inbounds i8, i8* %arraydecay431, i64 42
  %403 = load i64, i64* %local_dir_header_ofs, align 8, !tbaa !76
  %conv433 = trunc i64 %403 to i32
  call void @mz_write_le32(i8* %add.ptr432, i32 %conv433)
  %404 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %405 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir434 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %405, i32 0, i32 0
  %arraydecay435 = getelementptr inbounds [46 x i8], [46 x i8]* %new_central_header, i64 0, i64 0
  %call436 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %404, %struct.mz_zip_array* %m_central_dir434, i8* %arraydecay435, i64 46)
  %tobool437 = icmp ne i32 %call436, 0
  br i1 %tobool437, label %if.end440, label %if.then438

if.then438:                                       ; preds = %if.end430
  %406 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call439 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %406, i32 16)
  store i32 %call439, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end440:                                        ; preds = %if.end430
  %407 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %408 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir441 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %408, i32 0, i32 0
  %409 = load i8*, i8** %pSrc_central_header, align 8, !tbaa !8
  %add.ptr442 = getelementptr inbounds i8, i8* %409, i64 46
  %410 = load i32, i32* %src_central_dir_following_data_size, align 4, !tbaa !10
  %conv443 = zext i32 %410 to i64
  %call444 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %407, %struct.mz_zip_array* %m_central_dir441, i8* %add.ptr442, i64 %conv443)
  %tobool445 = icmp ne i32 %call444, 0
  br i1 %tobool445, label %if.end450, label %if.then446

if.then446:                                       ; preds = %if.end440
  %411 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %412 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir447 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %412, i32 0, i32 0
  %413 = load i64, i64* %orig_central_dir_size, align 8, !tbaa !4
  %call448 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %411, %struct.mz_zip_array* %m_central_dir447, i64 %413, i32 0)
  %414 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call449 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %414, i32 16)
  store i32 %call449, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end450:                                        ; preds = %if.end440
  br label %if.end451

if.end451:                                        ; preds = %if.end450, %cleanup.cont419
  %415 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir452 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %415, i32 0, i32 0
  %m_size453 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir452, i32 0, i32 1
  %416 = load i64, i64* %m_size453, align 8, !tbaa !175
  %cmp454 = icmp uge i64 %416, 4294967295
  br i1 %cmp454, label %if.then456, label %if.end460

if.then456:                                       ; preds = %if.end451
  %417 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %418 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir457 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %418, i32 0, i32 0
  %419 = load i64, i64* %orig_central_dir_size, align 8, !tbaa !4
  %call458 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %417, %struct.mz_zip_array* %m_central_dir457, i64 %419, i32 0)
  %420 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call459 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %420, i32 15)
  store i32 %call459, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end460:                                        ; preds = %if.end451
  %421 = load i64, i64* %orig_central_dir_size, align 8, !tbaa !4
  %conv461 = trunc i64 %421 to i32
  store i32 %conv461, i32* %n, align 4, !tbaa !10
  %422 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %423 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %423, i32 0, i32 1
  %424 = bitcast i32* %n to i8*
  %call462 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %422, %struct.mz_zip_array* %m_central_dir_offsets, i8* %424, i64 1)
  %tobool463 = icmp ne i32 %call462, 0
  br i1 %tobool463, label %if.end468, label %if.then464

if.then464:                                       ; preds = %if.end460
  %425 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %426 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir465 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %426, i32 0, i32 0
  %427 = load i64, i64* %orig_central_dir_size, align 8, !tbaa !4
  %call466 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %425, %struct.mz_zip_array* %m_central_dir465, i64 %427, i32 0)
  %428 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call467 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %428, i32 16)
  store i32 %call467, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

if.end468:                                        ; preds = %if.end460
  %429 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files469 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %429, i32 0, i32 2
  %430 = load i32, i32* %m_total_files469, align 8, !tbaa !113
  %inc = add i32 %430, 1
  store i32 %inc, i32* %m_total_files469, align 8, !tbaa !113
  %431 = load i64, i64* %cur_dst_file_ofs, align 8, !tbaa !76
  %432 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size470 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %432, i32 0, i32 0
  store i64 %431, i64* %m_archive_size470, align 8, !tbaa !110
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup471

cleanup471:                                       ; preds = %if.end468, %if.then464, %if.then456, %if.then446, %if.then438, %if.then428, %if.then423, %cleanup416, %if.then339, %cleanup328, %if.then284, %if.then259, %if.then246, %if.then228, %if.then204, %if.then187, %cleanup181, %cleanup154, %if.then67, %if.then62, %if.then56, %if.then50, %if.then44, %if.then35, %if.then20, %if.then16, %if.then11, %if.then
  %433 = bitcast i32* %found_zip64_ext_data_in_ldir to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %433) #10
  %434 = bitcast i64* %local_header_uncomp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %434) #10
  %435 = bitcast i64* %local_header_comp_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %435) #10
  %436 = bitcast i32* %local_header_extra_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %436) #10
  %437 = bitcast i32* %local_header_filename_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %437) #10
  %438 = bitcast i32* %src_ext_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %438) #10
  %439 = bitcast i32* %src_comment_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %439) #10
  %440 = bitcast i32* %src_filename_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %440) #10
  %441 = bitcast %struct.mz_zip_archive_file_stat* %src_file_stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 1112, i8* %441) #10
  %442 = bitcast i8** %pSrc_central_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %442) #10
  %443 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %443) #10
  %444 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %444) #10
  %445 = bitcast i64* %orig_central_dir_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %445) #10
  %446 = bitcast [46 x i8]* %new_central_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 46, i8* %446) #10
  %447 = bitcast i8** %pLocal_header to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %447) #10
  %448 = bitcast [8 x i32]* %local_header_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 32, i8* %448) #10
  %449 = bitcast i64* %cur_dst_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %449) #10
  %450 = bitcast i64* %cur_src_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %450) #10
  %451 = bitcast i64* %local_dir_header_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %451) #10
  %452 = bitcast i64* %src_archive_bytes_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %452) #10
  %453 = bitcast i32* %src_central_dir_following_data_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %453) #10
  %454 = bitcast i32* %num_alignment_padding_bytes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %454) #10
  %455 = bitcast i32* %bit_flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %455) #10
  %456 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %456) #10
  %457 = load i32, i32* %retval, align 4
  ret i32 %457
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_update_zip64_extension_block(%struct.mz_zip_array* %pNew_ext, %struct.mz_zip_archive* %pZip, i8* %pExt, i32 %ext_len, i64* %pComp_size, i64* %pUncomp_size, i64* %pLocal_header_ofs, i32* %pDisk_start) #0 {
entry:
  %retval = alloca i32, align 4
  %pNew_ext.addr = alloca %struct.mz_zip_array*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pExt.addr = alloca i8*, align 8
  %ext_len.addr = alloca i32, align 4
  %pComp_size.addr = alloca i64*, align 8
  %pUncomp_size.addr = alloca i64*, align 8
  %pLocal_header_ofs.addr = alloca i64*, align 8
  %pDisk_start.addr = alloca i32*, align 8
  %new_ext_block = alloca [64 x i8], align 16
  %pDst = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %extra_size_remaining = alloca i32, align 4
  %pExtra_data = alloca i8*, align 8
  %field_id = alloca i32, align 4
  %field_data_size = alloca i32, align 4
  %field_total_size = alloca i32, align 4
  store %struct.mz_zip_array* %pNew_ext, %struct.mz_zip_array** %pNew_ext.addr, align 8, !tbaa !8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pExt, i8** %pExt.addr, align 8, !tbaa !8
  store i32 %ext_len, i32* %ext_len.addr, align 4, !tbaa !10
  store i64* %pComp_size, i64** %pComp_size.addr, align 8, !tbaa !8
  store i64* %pUncomp_size, i64** %pUncomp_size.addr, align 8, !tbaa !8
  store i64* %pLocal_header_ofs, i64** %pLocal_header_ofs.addr, align 8, !tbaa !8
  store i32* %pDisk_start, i32** %pDisk_start.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pNew_ext.addr, align 8, !tbaa !8
  %2 = load i32, i32* %ext_len.addr, align 4, !tbaa !10
  %add = add i32 %2, 64
  %conv = zext i32 %add to i64
  %call = call i32 @mz_zip_array_reserve(%struct.mz_zip_archive* %0, %struct.mz_zip_array* %1, i64 %conv, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call1 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %3, i32 16)
  store i32 %call1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %5 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pNew_ext.addr, align 8, !tbaa !8
  %call2 = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %4, %struct.mz_zip_array* %5, i64 0, i32 0)
  %6 = load i64*, i64** %pUncomp_size.addr, align 8, !tbaa !8
  %tobool3 = icmp ne i64* %6, null
  br i1 %tobool3, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i64*, i64** %pComp_size.addr, align 8, !tbaa !8
  %tobool4 = icmp ne i64* %7, null
  br i1 %tobool4, label %if.then9, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %8 = load i64*, i64** %pLocal_header_ofs.addr, align 8, !tbaa !8
  %tobool6 = icmp ne i64* %8, null
  br i1 %tobool6, label %if.then9, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %lor.lhs.false5
  %9 = load i32*, i32** %pDisk_start.addr, align 8, !tbaa !8
  %tobool8 = icmp ne i32* %9, null
  br i1 %tobool8, label %if.then9, label %if.end42

if.then9:                                         ; preds = %lor.lhs.false7, %lor.lhs.false5, %lor.lhs.false, %if.end
  %10 = bitcast [64 x i8]* %new_ext_block to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* %10) #10
  %11 = bitcast i8** %pDst to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %11) #10
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i64 0, i64 0
  store i8* %arraydecay, i8** %pDst, align 8, !tbaa !8
  %12 = load i8*, i8** %pDst, align 8, !tbaa !8
  call void @mz_write_le16(i8* %12, i16 zeroext 1)
  %13 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %13, i64 2
  call void @mz_write_le16(i8* %add.ptr, i16 zeroext 0)
  %14 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr10 = getelementptr inbounds i8, i8* %14, i64 4
  store i8* %add.ptr10, i8** %pDst, align 8, !tbaa !8
  %15 = load i64*, i64** %pUncomp_size.addr, align 8, !tbaa !8
  %tobool11 = icmp ne i64* %15, null
  br i1 %tobool11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.then9
  %16 = load i8*, i8** %pDst, align 8, !tbaa !8
  %17 = load i64*, i64** %pUncomp_size.addr, align 8, !tbaa !8
  %18 = load i64, i64* %17, align 8, !tbaa !76
  call void @mz_write_le64(i8* %16, i64 %18)
  %19 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr13 = getelementptr inbounds i8, i8* %19, i64 8
  store i8* %add.ptr13, i8** %pDst, align 8, !tbaa !8
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %if.then9
  %20 = load i64*, i64** %pComp_size.addr, align 8, !tbaa !8
  %tobool15 = icmp ne i64* %20, null
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %21 = load i8*, i8** %pDst, align 8, !tbaa !8
  %22 = load i64*, i64** %pComp_size.addr, align 8, !tbaa !8
  %23 = load i64, i64* %22, align 8, !tbaa !76
  call void @mz_write_le64(i8* %21, i64 %23)
  %24 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr17 = getelementptr inbounds i8, i8* %24, i64 8
  store i8* %add.ptr17, i8** %pDst, align 8, !tbaa !8
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end14
  %25 = load i64*, i64** %pLocal_header_ofs.addr, align 8, !tbaa !8
  %tobool19 = icmp ne i64* %25, null
  br i1 %tobool19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end18
  %26 = load i8*, i8** %pDst, align 8, !tbaa !8
  %27 = load i64*, i64** %pLocal_header_ofs.addr, align 8, !tbaa !8
  %28 = load i64, i64* %27, align 8, !tbaa !76
  call void @mz_write_le64(i8* %26, i64 %28)
  %29 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr21 = getelementptr inbounds i8, i8* %29, i64 8
  store i8* %add.ptr21, i8** %pDst, align 8, !tbaa !8
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.end18
  %30 = load i32*, i32** %pDisk_start.addr, align 8, !tbaa !8
  %tobool23 = icmp ne i32* %30, null
  br i1 %tobool23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end22
  %31 = load i8*, i8** %pDst, align 8, !tbaa !8
  %32 = load i32*, i32** %pDisk_start.addr, align 8, !tbaa !8
  %33 = load i32, i32* %32, align 4, !tbaa !10
  call void @mz_write_le32(i8* %31, i32 %33)
  %34 = load i8*, i8** %pDst, align 8, !tbaa !8
  %add.ptr25 = getelementptr inbounds i8, i8* %34, i64 4
  store i8* %add.ptr25, i8** %pDst, align 8, !tbaa !8
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.end22
  %arraydecay27 = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i64 0, i64 0
  %add.ptr28 = getelementptr inbounds i8, i8* %arraydecay27, i64 2
  %35 = load i8*, i8** %pDst, align 8, !tbaa !8
  %arraydecay29 = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i64 0, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %35 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay29 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub i64 %sub.ptr.sub, 4
  %conv30 = trunc i64 %sub to i16
  call void @mz_write_le16(i8* %add.ptr28, i16 zeroext %conv30)
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %37 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pNew_ext.addr, align 8, !tbaa !8
  %arraydecay31 = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i64 0, i64 0
  %38 = load i8*, i8** %pDst, align 8, !tbaa !8
  %arraydecay32 = getelementptr inbounds [64 x i8], [64 x i8]* %new_ext_block, i64 0, i64 0
  %sub.ptr.lhs.cast33 = ptrtoint i8* %38 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i8* %arraydecay32 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %call36 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %36, %struct.mz_zip_array* %37, i8* %arraydecay31, i64 %sub.ptr.sub35)
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end40, label %if.then38

if.then38:                                        ; preds = %if.end26
  %39 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call39 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %39, i32 16)
  store i32 %call39, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end40:                                         ; preds = %if.end26
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end40, %if.then38
  %40 = bitcast i8** %pDst to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %40) #10
  %41 = bitcast [64 x i8]* %new_ext_block to i8*
  call void @llvm.lifetime.end.p0i8(i64 64, i8* %41) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %return
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end42

if.end42:                                         ; preds = %cleanup.cont, %lor.lhs.false7
  %42 = load i8*, i8** %pExt.addr, align 8, !tbaa !8
  %tobool43 = icmp ne i8* %42, null
  br i1 %tobool43, label %land.lhs.true, label %if.end84

land.lhs.true:                                    ; preds = %if.end42
  %43 = load i32, i32* %ext_len.addr, align 4, !tbaa !10
  %tobool44 = icmp ne i32 %43, 0
  br i1 %tobool44, label %if.then45, label %if.end84

if.then45:                                        ; preds = %land.lhs.true
  %44 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %44) #10
  %45 = load i32, i32* %ext_len.addr, align 4, !tbaa !10
  store i32 %45, i32* %extra_size_remaining, align 4, !tbaa !10
  %46 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %46) #10
  %47 = load i8*, i8** %pExt.addr, align 8, !tbaa !8
  store i8* %47, i8** %pExtra_data, align 8, !tbaa !8
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then45
  %48 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %48) #10
  %49 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %49) #10
  %50 = bitcast i32* %field_total_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %50) #10
  %51 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %conv46 = zext i32 %51 to i64
  %cmp = icmp ult i64 %conv46, 4
  br i1 %cmp, label %if.then48, label %if.end50

if.then48:                                        ; preds = %do.body
  %52 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call49 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %52, i32 9)
  store i32 %call49, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup74

if.end50:                                         ; preds = %do.body
  %53 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %54 = bitcast i8* %53 to i16*
  %55 = load i16, i16* %54, align 2, !tbaa !88
  %conv51 = zext i16 %55 to i32
  store i32 %conv51, i32* %field_id, align 4, !tbaa !10
  %56 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %add.ptr52 = getelementptr inbounds i8, i8* %56, i64 2
  %57 = bitcast i8* %add.ptr52 to i16*
  %58 = load i16, i16* %57, align 2, !tbaa !88
  %conv53 = zext i16 %58 to i32
  store i32 %conv53, i32* %field_data_size, align 4, !tbaa !10
  %59 = load i32, i32* %field_data_size, align 4, !tbaa !10
  %conv54 = zext i32 %59 to i64
  %add55 = add i64 %conv54, 4
  %conv56 = trunc i64 %add55 to i32
  store i32 %conv56, i32* %field_total_size, align 4, !tbaa !10
  %60 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %61 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %cmp57 = icmp ugt i32 %60, %61
  br i1 %cmp57, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.end50
  %62 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call60 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %62, i32 9)
  store i32 %call60, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup74

if.end61:                                         ; preds = %if.end50
  %63 = load i32, i32* %field_id, align 4, !tbaa !10
  %cmp62 = icmp ne i32 %63, 1
  br i1 %cmp62, label %if.then64, label %if.end71

if.then64:                                        ; preds = %if.end61
  %64 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %65 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pNew_ext.addr, align 8, !tbaa !8
  %66 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %67 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %conv65 = zext i32 %67 to i64
  %call66 = call i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %64, %struct.mz_zip_array* %65, i8* %66, i64 %conv65)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.end70, label %if.then68

if.then68:                                        ; preds = %if.then64
  %68 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call69 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %68, i32 16)
  store i32 %call69, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup74

if.end70:                                         ; preds = %if.then64
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.end61
  %69 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %70 = load i8*, i8** %pExtra_data, align 8, !tbaa !8
  %idx.ext = zext i32 %69 to i64
  %add.ptr72 = getelementptr inbounds i8, i8* %70, i64 %idx.ext
  store i8* %add.ptr72, i8** %pExtra_data, align 8, !tbaa !8
  %71 = load i32, i32* %field_total_size, align 4, !tbaa !10
  %72 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %sub73 = sub i32 %72, %71
  store i32 %sub73, i32* %extra_size_remaining, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup74

cleanup74:                                        ; preds = %if.end71, %if.then68, %if.then59, %if.then48
  %73 = bitcast i32* %field_total_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %73) #10
  %74 = bitcast i32* %field_data_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %74) #10
  %75 = bitcast i32* %field_id to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %75) #10
  %cleanup.dest77 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest77, label %cleanup80 [
    i32 0, label %cleanup.cont78
  ]

cleanup.cont78:                                   ; preds = %cleanup74
  br label %do.cond

do.cond:                                          ; preds = %cleanup.cont78
  %76 = load i32, i32* %extra_size_remaining, align 4, !tbaa !10
  %tobool79 = icmp ne i32 %76, 0
  br i1 %tobool79, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup80

cleanup80:                                        ; preds = %do.end, %cleanup74
  %77 = bitcast i8** %pExtra_data to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %77) #10
  %78 = bitcast i32* %extra_size_remaining to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %78) #10
  %cleanup.dest82 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest82, label %unreachable [
    i32 0, label %cleanup.cont83
    i32 1, label %return
  ]

cleanup.cont83:                                   ; preds = %cleanup80
  br label %if.end84

if.end84:                                         ; preds = %cleanup.cont83, %land.lhs.true, %if.end42
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end84, %cleanup80, %cleanup, %if.then
  %79 = load i32, i32* %retval, align 4
  ret i32 %79

unreachable:                                      ; preds = %cleanup80, %cleanup
  unreachable
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal void @mz_write_le16(i8* %p, i16 zeroext %v) #9 {
entry:
  %p.addr = alloca i8*, align 8
  %v.addr = alloca i16, align 2
  store i8* %p, i8** %p.addr, align 8, !tbaa !8
  store i16 %v, i16* %v.addr, align 2, !tbaa !88
  %0 = load i16, i16* %v.addr, align 2, !tbaa !88
  %conv = trunc i16 %0 to i8
  %1 = load i8*, i8** %p.addr, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 0
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !12
  %2 = load i16, i16* %v.addr, align 2, !tbaa !88
  %conv1 = zext i16 %2 to i32
  %shr = ashr i32 %conv1, 8
  %conv2 = trunc i32 %shr to i8
  %3 = load i8*, i8** %p.addr, align 8, !tbaa !8
  %arrayidx3 = getelementptr inbounds i8, i8* %3, i64 1
  store i8 %conv2, i8* %arrayidx3, align 1, !tbaa !12
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i32 @mz_zip_array_push_back(%struct.mz_zip_archive* %pZip, %struct.mz_zip_array* %pArray, i8* %pElements, i64 %n) #9 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  %pElements.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %orig_size = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  store i8* %pElements, i8** %pElements.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = bitcast i64* %orig_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %1, i32 0, i32 1
  %2 = load i64, i64* %m_size, align 8, !tbaa !174
  store i64 %2, i64* %orig_size, align 8, !tbaa !4
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %4 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %5 = load i64, i64* %orig_size, align 8, !tbaa !4
  %6 = load i64, i64* %n.addr, align 8, !tbaa !4
  %add = add i64 %5, %6
  %call = call i32 @mz_zip_array_resize(%struct.mz_zip_archive* %3, %struct.mz_zip_array* %4, i64 %add, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %7 = load i64, i64* %n.addr, align 8, !tbaa !4
  %cmp = icmp ugt i64 %7, 0
  br i1 %cmp, label %if.then1, label %if.end11

if.then1:                                         ; preds = %if.end
  %8 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %8, i32 0, i32 0
  %9 = load i8*, i8** %m_p, align 8, !tbaa !164
  %10 = load i64, i64* %orig_size, align 8, !tbaa !4
  %11 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_element_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %11, i32 0, i32 3
  %12 = load i32, i32* %m_element_size, align 8, !tbaa !165
  %conv = zext i32 %12 to i64
  %mul = mul i64 %10, %conv
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %mul
  %13 = load i8*, i8** %pElements.addr, align 8, !tbaa !8
  %14 = load i64, i64* %n.addr, align 8, !tbaa !4
  %15 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_element_size2 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %15, i32 0, i32 3
  %16 = load i32, i32* %m_element_size2, align 8, !tbaa !165
  %conv3 = zext i32 %16 to i64
  %mul4 = mul i64 %14, %conv3
  %17 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_p5 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %17, i32 0, i32 0
  %18 = load i8*, i8** %m_p5, align 8, !tbaa !164
  %19 = load i64, i64* %orig_size, align 8, !tbaa !4
  %20 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_element_size6 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %20, i32 0, i32 3
  %21 = load i32, i32* %m_element_size6, align 8, !tbaa !165
  %conv7 = zext i32 %21 to i64
  %mul8 = mul i64 %19, %conv7
  %add.ptr9 = getelementptr inbounds i8, i8* %18, i64 %mul8
  %22 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr9, i1 false, i1 true, i1 false)
  %call10 = call i8* @__memcpy_chk(i8* %add.ptr, i8* %13, i64 %mul4, i64 %22) #10
  br label %if.end11

if.end11:                                         ; preds = %if.then1, %if.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end11, %if.then
  %23 = bitcast i64* %orig_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %23) #10
  %24 = load i32, i32* %retval, align 4
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %central_dir_ofs = alloca i64, align 8
  %central_dir_size = alloca i64, align 8
  %hdr = alloca [256 x i8], align 16
  %cleanup.dest.slot = alloca i32, align 4
  %rel_ofs_to_zip64_ecdr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i64* %central_dir_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = bitcast i64* %central_dir_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = bitcast [256 x i8]* %hdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* %3) #10
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %4, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 15
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %6, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 3
  %8 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp = icmp ne i32 %8, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %9, i32 24)
  store i32 %call, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup149

if.end:                                           ; preds = %lor.lhs.false2
  %10 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState3 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %10, i32 0, i32 15
  %11 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState3, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %11, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %12 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %12, i32 0, i32 4
  %13 = load i32, i32* %m_zip64, align 4, !tbaa !118
  %tobool4 = icmp ne i32 %13, 0
  br i1 %tobool4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %14 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %14, i32 0, i32 2
  %15 = load i32, i32* %m_total_files, align 8, !tbaa !113
  %cmp6 = icmp ugt i32 %15, -1
  br i1 %cmp6, label %if.then9, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %if.then5
  %16 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %16, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %17 = load i64, i64* %m_size, align 8, !tbaa !175
  %cmp8 = icmp uge i64 %17, 4294967295
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %lor.lhs.false7, %if.then5
  %18 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call10 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %18, i32 2)
  store i32 %call10, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup149

if.end11:                                         ; preds = %lor.lhs.false7
  br label %if.end22

if.else:                                          ; preds = %if.end
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files12 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 2
  %20 = load i32, i32* %m_total_files12, align 8, !tbaa !113
  %cmp13 = icmp ugt i32 %20, 65535
  br i1 %cmp13, label %if.then19, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %if.else
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 0
  %22 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %23 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir15 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %23, i32 0, i32 0
  %m_size16 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir15, i32 0, i32 1
  %24 = load i64, i64* %m_size16, align 8, !tbaa !175
  %add = add i64 %22, %24
  %add17 = add i64 %add, 22
  %cmp18 = icmp ugt i64 %add17, 4294967295
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %lor.lhs.false14, %if.else
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call20 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %25, i32 2)
  store i32 %call20, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup149

if.end21:                                         ; preds = %lor.lhs.false14
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.end11
  store i64 0, i64* %central_dir_ofs, align 8, !tbaa !76
  store i64 0, i64* %central_dir_size, align 8, !tbaa !76
  %26 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files23 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %26, i32 0, i32 2
  %27 = load i32, i32* %m_total_files23, align 8, !tbaa !113
  %tobool24 = icmp ne i32 %27, 0
  br i1 %tobool24, label %if.then25, label %if.end37

if.then25:                                        ; preds = %if.end22
  %28 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size26 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %28, i32 0, i32 0
  %29 = load i64, i64* %m_archive_size26, align 8, !tbaa !110
  store i64 %29, i64* %central_dir_ofs, align 8, !tbaa !76
  %30 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir27 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %30, i32 0, i32 0
  %m_size28 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir27, i32 0, i32 1
  %31 = load i64, i64* %m_size28, align 8, !tbaa !175
  store i64 %31, i64* %central_dir_size, align 8, !tbaa !76
  %32 = load i64, i64* %central_dir_ofs, align 8, !tbaa !76
  %33 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_central_directory_file_ofs = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %33, i32 0, i32 1
  store i64 %32, i64* %m_central_directory_file_ofs, align 8, !tbaa !112
  %34 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %34, i32 0, i32 12
  %35 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 14
  %37 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %38 = load i64, i64* %central_dir_ofs, align 8, !tbaa !76
  %39 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir29 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %39, i32 0, i32 0
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir29, i32 0, i32 0
  %40 = load i8*, i8** %m_p, align 8, !tbaa !121
  %41 = load i64, i64* %central_dir_size, align 8, !tbaa !76
  %call30 = call i64 %35(i8* %37, i64 %38, i8* %40, i64 %41)
  %42 = load i64, i64* %central_dir_size, align 8, !tbaa !76
  %cmp31 = icmp ne i64 %call30, %42
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.then25
  %43 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call33 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %43, i32 19)
  store i32 %call33, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup149

if.end34:                                         ; preds = %if.then25
  %44 = load i64, i64* %central_dir_size, align 8, !tbaa !76
  %45 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size35 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %45, i32 0, i32 0
  %46 = load i64, i64* %m_archive_size35, align 8, !tbaa !110
  %add36 = add i64 %46, %44
  store i64 %add36, i64* %m_archive_size35, align 8, !tbaa !110
  br label %if.end37

if.end37:                                         ; preds = %if.end34, %if.end22
  %47 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_zip6438 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %47, i32 0, i32 4
  %48 = load i32, i32* %m_zip6438, align 4, !tbaa !118
  %tobool39 = icmp ne i32 %48, 0
  br i1 %tobool39, label %if.then40, label %if.end89

if.then40:                                        ; preds = %if.end37
  %49 = bitcast i64* %rel_ofs_to_zip64_ecdr to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %49) #10
  %50 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size41 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %50, i32 0, i32 0
  %51 = load i64, i64* %m_archive_size41, align 8, !tbaa !110
  store i64 %51, i64* %rel_ofs_to_zip64_ecdr, align 8, !tbaa !76
  %52 = bitcast [256 x i8]* %hdr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %52, i8 0, i64 256, i1 false)
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 0
  call void @mz_write_le32(i8* %add.ptr, i32 101075792)
  %arraydecay42 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr43 = getelementptr inbounds i8, i8* %arraydecay42, i64 4
  call void @mz_write_le64(i8* %add.ptr43, i64 44)
  %arraydecay44 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr45 = getelementptr inbounds i8, i8* %arraydecay44, i64 12
  call void @mz_write_le16(i8* %add.ptr45, i16 zeroext 798)
  %arraydecay46 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr47 = getelementptr inbounds i8, i8* %arraydecay46, i64 14
  call void @mz_write_le16(i8* %add.ptr47, i16 zeroext 45)
  %arraydecay48 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr49 = getelementptr inbounds i8, i8* %arraydecay48, i64 24
  %53 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files50 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %53, i32 0, i32 2
  %54 = load i32, i32* %m_total_files50, align 8, !tbaa !113
  %conv = zext i32 %54 to i64
  call void @mz_write_le64(i8* %add.ptr49, i64 %conv)
  %arraydecay51 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr52 = getelementptr inbounds i8, i8* %arraydecay51, i64 32
  %55 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files53 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %55, i32 0, i32 2
  %56 = load i32, i32* %m_total_files53, align 8, !tbaa !113
  %conv54 = zext i32 %56 to i64
  call void @mz_write_le64(i8* %add.ptr52, i64 %conv54)
  %arraydecay55 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr56 = getelementptr inbounds i8, i8* %arraydecay55, i64 40
  %57 = load i64, i64* %central_dir_size, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr56, i64 %57)
  %arraydecay57 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr58 = getelementptr inbounds i8, i8* %arraydecay57, i64 48
  %58 = load i64, i64* %central_dir_ofs, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr58, i64 %58)
  %59 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite59 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %59, i32 0, i32 12
  %60 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite59, align 8, !tbaa !176
  %61 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque60 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %61, i32 0, i32 14
  %62 = load i8*, i8** %m_pIO_opaque60, align 8, !tbaa !120
  %63 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size61 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %63, i32 0, i32 0
  %64 = load i64, i64* %m_archive_size61, align 8, !tbaa !110
  %arraydecay62 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %call63 = call i64 %60(i8* %62, i64 %64, i8* %arraydecay62, i64 56)
  %cmp64 = icmp ne i64 %call63, 56
  br i1 %cmp64, label %if.then66, label %if.end68

if.then66:                                        ; preds = %if.then40
  %65 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call67 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %65, i32 19)
  store i32 %call67, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end68:                                         ; preds = %if.then40
  %66 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size69 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %66, i32 0, i32 0
  %67 = load i64, i64* %m_archive_size69, align 8, !tbaa !110
  %add70 = add i64 %67, 56
  store i64 %add70, i64* %m_archive_size69, align 8, !tbaa !110
  %68 = bitcast [256 x i8]* %hdr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %68, i8 0, i64 256, i1 false)
  %arraydecay71 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr72 = getelementptr inbounds i8, i8* %arraydecay71, i64 0
  call void @mz_write_le32(i8* %add.ptr72, i32 117853008)
  %arraydecay73 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr74 = getelementptr inbounds i8, i8* %arraydecay73, i64 8
  %69 = load i64, i64* %rel_ofs_to_zip64_ecdr, align 8, !tbaa !76
  call void @mz_write_le64(i8* %add.ptr74, i64 %69)
  %arraydecay75 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr76 = getelementptr inbounds i8, i8* %arraydecay75, i64 16
  call void @mz_write_le32(i8* %add.ptr76, i32 1)
  %70 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite77 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %70, i32 0, i32 12
  %71 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite77, align 8, !tbaa !176
  %72 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque78 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %72, i32 0, i32 14
  %73 = load i8*, i8** %m_pIO_opaque78, align 8, !tbaa !120
  %74 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size79 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %74, i32 0, i32 0
  %75 = load i64, i64* %m_archive_size79, align 8, !tbaa !110
  %arraydecay80 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %call81 = call i64 %71(i8* %73, i64 %75, i8* %arraydecay80, i64 20)
  %cmp82 = icmp ne i64 %call81, 20
  br i1 %cmp82, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.end68
  %76 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call85 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %76, i32 19)
  store i32 %call85, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end86:                                         ; preds = %if.end68
  %77 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size87 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %77, i32 0, i32 0
  %78 = load i64, i64* %m_archive_size87, align 8, !tbaa !110
  %add88 = add i64 %78, 20
  store i64 %add88, i64* %m_archive_size87, align 8, !tbaa !110
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end86, %if.then84, %if.then66
  %79 = bitcast i64* %rel_ofs_to_zip64_ecdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %79) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %cleanup149 [
    i32 0, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %if.end89

if.end89:                                         ; preds = %cleanup.cont, %if.end37
  %80 = bitcast [256 x i8]* %hdr to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %80, i8 0, i64 256, i1 false)
  %arraydecay90 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr91 = getelementptr inbounds i8, i8* %arraydecay90, i64 0
  call void @mz_write_le32(i8* %add.ptr91, i32 101010256)
  %arraydecay92 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr93 = getelementptr inbounds i8, i8* %arraydecay92, i64 8
  %81 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files94 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %81, i32 0, i32 2
  %82 = load i32, i32* %m_total_files94, align 8, !tbaa !113
  %cmp95 = icmp ult i32 65535, %82
  br i1 %cmp95, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end89
  br label %cond.end

cond.false:                                       ; preds = %if.end89
  %83 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files97 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %83, i32 0, i32 2
  %84 = load i32, i32* %m_total_files97, align 8, !tbaa !113
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 65535, %cond.true ], [ %84, %cond.false ]
  %conv98 = trunc i32 %cond to i16
  call void @mz_write_le16(i8* %add.ptr93, i16 zeroext %conv98)
  %arraydecay99 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr100 = getelementptr inbounds i8, i8* %arraydecay99, i64 10
  %85 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files101 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %85, i32 0, i32 2
  %86 = load i32, i32* %m_total_files101, align 8, !tbaa !113
  %cmp102 = icmp ult i32 65535, %86
  br i1 %cmp102, label %cond.true104, label %cond.false105

cond.true104:                                     ; preds = %cond.end
  br label %cond.end107

cond.false105:                                    ; preds = %cond.end
  %87 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files106 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %87, i32 0, i32 2
  %88 = load i32, i32* %m_total_files106, align 8, !tbaa !113
  br label %cond.end107

cond.end107:                                      ; preds = %cond.false105, %cond.true104
  %cond108 = phi i32 [ 65535, %cond.true104 ], [ %88, %cond.false105 ]
  %conv109 = trunc i32 %cond108 to i16
  call void @mz_write_le16(i8* %add.ptr100, i16 zeroext %conv109)
  %arraydecay110 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr111 = getelementptr inbounds i8, i8* %arraydecay110, i64 12
  %89 = load i64, i64* %central_dir_size, align 8, !tbaa !76
  %cmp112 = icmp ult i64 4294967295, %89
  br i1 %cmp112, label %cond.true114, label %cond.false115

cond.true114:                                     ; preds = %cond.end107
  br label %cond.end116

cond.false115:                                    ; preds = %cond.end107
  %90 = load i64, i64* %central_dir_size, align 8, !tbaa !76
  br label %cond.end116

cond.end116:                                      ; preds = %cond.false115, %cond.true114
  %cond117 = phi i64 [ 4294967295, %cond.true114 ], [ %90, %cond.false115 ]
  %conv118 = trunc i64 %cond117 to i32
  call void @mz_write_le32(i8* %add.ptr111, i32 %conv118)
  %arraydecay119 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %add.ptr120 = getelementptr inbounds i8, i8* %arraydecay119, i64 16
  %91 = load i64, i64* %central_dir_ofs, align 8, !tbaa !76
  %cmp121 = icmp ult i64 4294967295, %91
  br i1 %cmp121, label %cond.true123, label %cond.false124

cond.true123:                                     ; preds = %cond.end116
  br label %cond.end125

cond.false124:                                    ; preds = %cond.end116
  %92 = load i64, i64* %central_dir_ofs, align 8, !tbaa !76
  br label %cond.end125

cond.end125:                                      ; preds = %cond.false124, %cond.true123
  %cond126 = phi i64 [ 4294967295, %cond.true123 ], [ %92, %cond.false124 ]
  %conv127 = trunc i64 %cond126 to i32
  call void @mz_write_le32(i8* %add.ptr120, i32 %conv127)
  %93 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite128 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %93, i32 0, i32 12
  %94 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite128, align 8, !tbaa !176
  %95 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque129 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %95, i32 0, i32 14
  %96 = load i8*, i8** %m_pIO_opaque129, align 8, !tbaa !120
  %97 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size130 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %97, i32 0, i32 0
  %98 = load i64, i64* %m_archive_size130, align 8, !tbaa !110
  %arraydecay131 = getelementptr inbounds [256 x i8], [256 x i8]* %hdr, i64 0, i64 0
  %call132 = call i64 %94(i8* %96, i64 %98, i8* %arraydecay131, i64 22)
  %cmp133 = icmp ne i64 %call132, 22
  br i1 %cmp133, label %if.then135, label %if.end137

if.then135:                                       ; preds = %cond.end125
  %99 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call136 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %99, i32 19)
  store i32 %call136, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup149

if.end137:                                        ; preds = %cond.end125
  %100 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %100, i32 0, i32 6
  %101 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  %tobool138 = icmp ne %struct.__sFILE* %101, null
  br i1 %tobool138, label %land.lhs.true, label %if.end145

land.lhs.true:                                    ; preds = %if.end137
  %102 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_pFile139 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %102, i32 0, i32 6
  %103 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile139, align 8, !tbaa !104
  %call140 = call i32 @fflush(%struct.__sFILE* %103)
  %cmp141 = icmp eq i32 %call140, -1
  br i1 %cmp141, label %if.then143, label %if.end145

if.then143:                                       ; preds = %land.lhs.true
  %104 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call144 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %104, i32 21)
  store i32 %call144, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup149

if.end145:                                        ; preds = %land.lhs.true, %if.end137
  %105 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size146 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %105, i32 0, i32 0
  %106 = load i64, i64* %m_archive_size146, align 8, !tbaa !110
  %add147 = add i64 %106, 22
  store i64 %add147, i64* %m_archive_size146, align 8, !tbaa !110
  %107 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode148 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %107, i32 0, i32 3
  store i32 3, i32* %m_zip_mode148, align 4, !tbaa !102
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup149

cleanup149:                                       ; preds = %if.end145, %if.then143, %if.then135, %cleanup, %if.then32, %if.then19, %if.then9, %if.then
  %108 = bitcast [256 x i8]* %hdr to i8*
  call void @llvm.lifetime.end.p0i8(i64 256, i8* %108) #10
  %109 = bitcast i64* %central_dir_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %109) #10
  %110 = bitcast i64* %central_dir_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %110) #10
  %111 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %111) #10
  %112 = load i32, i32* %retval, align 4
  ret i32 %112
}

declare i32 @fflush(%struct.__sFILE*) #2

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_writer_finalize_heap_archive(%struct.mz_zip_archive* %pZip, i8** %ppBuf, i64* %pSize) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %ppBuf.addr = alloca i8**, align 8
  %pSize.addr = alloca i64*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8** %ppBuf, i8*** %ppBuf.addr, align 8, !tbaa !8
  store i64* %pSize, i64** %pSize.addr, align 8, !tbaa !8
  %0 = load i8**, i8*** %ppBuf.addr, align 8, !tbaa !8
  %tobool = icmp ne i8** %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  %tobool1 = icmp ne i64* %1, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %2, i32 24)
  store i32 %call, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8**, i8*** %ppBuf.addr, align 8, !tbaa !8
  store i8* null, i8** %3, align 8, !tbaa !8
  %4 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  store i64 0, i64* %4, align 8, !tbaa !4
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool2 = icmp ne %struct.mz_zip_archive* %5, null
  br i1 %tobool2, label %lor.lhs.false3, label %if.then5

lor.lhs.false3:                                   ; preds = %if.end
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 15
  %7 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool4 = icmp ne %struct.mz_zip_internal_state_tag* %7, null
  br i1 %tobool4, label %if.end7, label %if.then5

if.then5:                                         ; preds = %lor.lhs.false3, %if.end
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call6 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %8, i32 24)
  store i32 %call6, i32* %retval, align 4
  br label %return

if.end7:                                          ; preds = %lor.lhs.false3
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pWrite = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 12
  %10 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pWrite, align 8, !tbaa !176
  %cmp = icmp ne i64 (i8*, i64, i8*, i64)* %10, @mz_zip_heap_write_func
  br i1 %cmp, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end7
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call9 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %11, i32 24)
  store i32 %call9, i32* %retval, align 4
  br label %return

if.end10:                                         ; preds = %if.end7
  %12 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call11 = call i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive* %12)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end10
  store i32 0, i32* %retval, align 4
  br label %return

if.end14:                                         ; preds = %if.end10
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState15 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 15
  %14 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState15, align 8, !tbaa !98
  %m_pMem = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %14, i32 0, i32 8
  %15 = load i8*, i8** %m_pMem, align 8, !tbaa !125
  %16 = load i8**, i8*** %ppBuf.addr, align 8, !tbaa !8
  store i8* %15, i8** %16, align 8, !tbaa !8
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState16 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 15
  %18 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState16, align 8, !tbaa !98
  %m_mem_size = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %18, i32 0, i32 9
  %19 = load i64, i64* %m_mem_size, align 8, !tbaa !126
  %20 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  store i64 %19, i64* %20, align 8, !tbaa !4
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState17 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 15
  %22 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState17, align 8, !tbaa !98
  %m_pMem18 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %22, i32 0, i32 8
  store i8* null, i8** %m_pMem18, align 8, !tbaa !125
  %23 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState19 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %23, i32 0, i32 15
  %24 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState19, align 8, !tbaa !98
  %m_mem_capacity = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %24, i32 0, i32 10
  store i64 0, i64* %m_mem_capacity, align 8, !tbaa !178
  %25 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState20 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %25, i32 0, i32 15
  %26 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState20, align 8, !tbaa !98
  %m_mem_size21 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %26, i32 0, i32 9
  store i64 0, i64* %m_mem_size21, align 8, !tbaa !126
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end14, %if.then13, %if.then8, %if.then5, %if.then
  %27 = load i32, i32* %retval, align 4
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_add_mem_to_archive_file_in_place(i8* %pZip_filename, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags) #0 {
entry:
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4, !tbaa !10
  %0 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %3 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %4 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %5 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %6 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_add_mem_to_archive_file_in_place_v2(i8* %0, i8* %1, i8* %2, i64 %3, i8* %4, i16 zeroext %5, i32 %6, i32* null)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_add_mem_to_archive_file_in_place_v2(i8* %pZip_filename, i8* %pArchive_name, i8* %pBuf, i64 %buf_size, i8* %pComment, i16 zeroext %comment_size, i32 %level_and_flags, i32* %pErr) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pBuf.addr = alloca i8*, align 8
  %buf_size.addr = alloca i64, align 8
  %pComment.addr = alloca i8*, align 8
  %comment_size.addr = alloca i16, align 2
  %level_and_flags.addr = alloca i32, align 4
  %pErr.addr = alloca i32*, align 8
  %status = alloca i32, align 4
  %created_new_archive = alloca i32, align 4
  %zip_archive = alloca %struct.mz_zip_archive, align 8
  %file_stat = alloca %struct.stat, align 8
  %actual_err = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %ignoredStatus = alloca i32, align 4
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %buf_size, i64* %buf_size.addr, align 8, !tbaa !4
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i32 %level_and_flags, i32* %level_and_flags.addr, align 4, !tbaa !10
  store i32* %pErr, i32** %pErr.addr, align 8, !tbaa !8
  %0 = bitcast i32* %status to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %created_new_archive to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  store i32 0, i32* %created_new_archive, align 4, !tbaa !10
  %2 = bitcast %struct.mz_zip_archive* %zip_archive to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %2) #10
  %3 = bitcast %struct.stat* %file_stat to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* %3) #10
  %4 = bitcast i32* %actual_err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  store i32 0, i32* %actual_err, align 4, !tbaa !12
  call void @mz_zip_zero_struct(%struct.mz_zip_archive* %zip_archive)
  %5 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 6, i32* %level_and_flags.addr, align 4, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %tobool = icmp ne i8* %6, null
  br i1 %tobool, label %lor.lhs.false, label %if.then12

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %tobool1 = icmp ne i8* %7, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then12

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %8 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %tobool3 = icmp ne i64 %8, 0
  br i1 %tobool3, label %land.lhs.true, label %lor.lhs.false5

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %9 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %tobool4 = icmp ne i8* %9, null
  br i1 %tobool4, label %lor.lhs.false5, label %if.then12

lor.lhs.false5:                                   ; preds = %land.lhs.true, %lor.lhs.false2
  %10 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %conv = zext i16 %10 to i32
  %tobool6 = icmp ne i32 %conv, 0
  br i1 %tobool6, label %land.lhs.true7, label %lor.lhs.false9

land.lhs.true7:                                   ; preds = %lor.lhs.false5
  %11 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %tobool8 = icmp ne i8* %11, null
  br i1 %tobool8, label %lor.lhs.false9, label %if.then12

lor.lhs.false9:                                   ; preds = %land.lhs.true7, %lor.lhs.false5
  %12 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %and = and i32 %12, 15
  %cmp10 = icmp ugt i32 %and, 10
  br i1 %cmp10, label %if.then12, label %if.end16

if.then12:                                        ; preds = %lor.lhs.false9, %land.lhs.true7, %land.lhs.true, %lor.lhs.false, %if.end
  %13 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool13 = icmp ne i32* %13, null
  br i1 %tobool13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then12
  %14 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 24, i32* %14, align 4, !tbaa !12
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.then12
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end16:                                         ; preds = %lor.lhs.false9
  %15 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_writer_validate_archive_name(i8* %15)
  %tobool17 = icmp ne i32 %call, 0
  br i1 %tobool17, label %if.end22, label %if.then18

if.then18:                                        ; preds = %if.end16
  %16 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool19 = icmp ne i32* %16, null
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.then18
  %17 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 25, i32* %17, align 4, !tbaa !12
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.then18
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end22:                                         ; preds = %if.end16
  %18 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %call23 = call i32 @"\01_stat$INODE64"(i8* %18, %struct.stat* %file_stat)
  %cmp24 = icmp ne i32 %call23, 0
  br i1 %cmp24, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.end22
  %19 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %20 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %call27 = call i32 @mz_zip_writer_init_file_v2(%struct.mz_zip_archive* %zip_archive, i8* %19, i64 0, i32 %20)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.end33, label %if.then29

if.then29:                                        ; preds = %if.then26
  %21 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool30 = icmp ne i32* %21, null
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.then29
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %22 = load i32, i32* %m_last_error, align 4, !tbaa !103
  %23 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %22, i32* %23, align 4, !tbaa !12
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.then29
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end33:                                         ; preds = %if.then26
  store i32 1, i32* %created_new_archive, align 4, !tbaa !10
  br label %if.end51

if.else:                                          ; preds = %if.end22
  %24 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %25 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %or = or i32 %25, 2048
  %call34 = call i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %zip_archive, i8* %24, i32 %or, i64 0, i64 0)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end41, label %if.then36

if.then36:                                        ; preds = %if.else
  %26 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool37 = icmp ne i32* %26, null
  br i1 %tobool37, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.then36
  %m_last_error39 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %27 = load i32, i32* %m_last_error39, align 4, !tbaa !103
  %28 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %27, i32* %28, align 4, !tbaa !12
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.then36
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end41:                                         ; preds = %if.else
  %29 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %30 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %call42 = call i32 @mz_zip_writer_init_from_reader_v2(%struct.mz_zip_archive* %zip_archive, i8* %29, i32 %30)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.end50, label %if.then44

if.then44:                                        ; preds = %if.end41
  %31 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool45 = icmp ne i32* %31, null
  br i1 %tobool45, label %if.then46, label %if.end48

if.then46:                                        ; preds = %if.then44
  %m_last_error47 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %32 = load i32, i32* %m_last_error47, align 4, !tbaa !103
  %33 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %32, i32* %33, align 4, !tbaa !12
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %if.then44
  %call49 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %zip_archive, i32 0)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end50:                                         ; preds = %if.end41
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end33
  %34 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %35 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %36 = load i64, i64* %buf_size.addr, align 8, !tbaa !4
  %37 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %38 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  %39 = load i32, i32* %level_and_flags.addr, align 4, !tbaa !10
  %call52 = call i32 @mz_zip_writer_add_mem_ex(%struct.mz_zip_archive* %zip_archive, i8* %34, i8* %35, i64 %36, i8* %37, i16 zeroext %38, i32 %39, i64 0, i32 0)
  store i32 %call52, i32* %status, align 4, !tbaa !10
  %m_last_error53 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %40 = load i32, i32* %m_last_error53, align 4, !tbaa !103
  store i32 %40, i32* %actual_err, align 4, !tbaa !12
  %call54 = call i32 @mz_zip_writer_finalize_archive(%struct.mz_zip_archive* %zip_archive)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end61, label %if.then56

if.then56:                                        ; preds = %if.end51
  %41 = load i32, i32* %actual_err, align 4, !tbaa !12
  %tobool57 = icmp ne i32 %41, 0
  br i1 %tobool57, label %if.end60, label %if.then58

if.then58:                                        ; preds = %if.then56
  %m_last_error59 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %42 = load i32, i32* %m_last_error59, align 4, !tbaa !103
  store i32 %42, i32* %actual_err, align 4, !tbaa !12
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %if.then56
  store i32 0, i32* %status, align 4, !tbaa !10
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.end51
  %43 = load i32, i32* %status, align 4, !tbaa !10
  %call62 = call i32 @mz_zip_writer_end_internal(%struct.mz_zip_archive* %zip_archive, i32 %43)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.end69, label %if.then64

if.then64:                                        ; preds = %if.end61
  %44 = load i32, i32* %actual_err, align 4, !tbaa !12
  %tobool65 = icmp ne i32 %44, 0
  br i1 %tobool65, label %if.end68, label %if.then66

if.then66:                                        ; preds = %if.then64
  %m_last_error67 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %45 = load i32, i32* %m_last_error67, align 4, !tbaa !103
  store i32 %45, i32* %actual_err, align 4, !tbaa !12
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %if.then64
  store i32 0, i32* %status, align 4, !tbaa !10
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end61
  %46 = load i32, i32* %status, align 4, !tbaa !10
  %tobool70 = icmp ne i32 %46, 0
  br i1 %tobool70, label %if.end75, label %land.lhs.true71

land.lhs.true71:                                  ; preds = %if.end69
  %47 = load i32, i32* %created_new_archive, align 4, !tbaa !10
  %tobool72 = icmp ne i32 %47, 0
  br i1 %tobool72, label %if.then73, label %if.end75

if.then73:                                        ; preds = %land.lhs.true71
  %48 = bitcast i32* %ignoredStatus to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %48) #10
  %49 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %call74 = call i32 @remove(i8* %49)
  store i32 %call74, i32* %ignoredStatus, align 4, !tbaa !10
  %50 = load i32, i32* %ignoredStatus, align 4, !tbaa !10
  %51 = bitcast i32* %ignoredStatus to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %51) #10
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %land.lhs.true71, %if.end69
  %52 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool76 = icmp ne i32* %52, null
  br i1 %tobool76, label %if.then77, label %if.end78

if.then77:                                        ; preds = %if.end75
  %53 = load i32, i32* %actual_err, align 4, !tbaa !12
  %54 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %53, i32* %54, align 4, !tbaa !12
  br label %if.end78

if.end78:                                         ; preds = %if.then77, %if.end75
  %55 = load i32, i32* %status, align 4, !tbaa !10
  store i32 %55, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end78, %if.end48, %if.end40, %if.end32, %if.end21, %if.end15
  %56 = bitcast i32* %actual_err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %56) #10
  %57 = bitcast %struct.stat* %file_stat to i8*
  call void @llvm.lifetime.end.p0i8(i64 144, i8* %57) #10
  %58 = bitcast %struct.mz_zip_archive* %zip_archive to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %58) #10
  %59 = bitcast i32* %created_new_archive to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %59) #10
  %60 = bitcast i32* %status to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %60) #10
  %61 = load i32, i32* %retval, align 4
  ret i32 %61
}

declare i32 @"\01_stat$INODE64"(i8*, %struct.stat*) #2

declare i32 @remove(i8*) #2

; Function Attrs: nounwind ssp uwtable
define i8* @mz_zip_extract_archive_file_to_heap_v2(i8* %pZip_filename, i8* %pArchive_name, i8* %pComment, i64* %pSize, i32 %flags, i32* %pErr) #0 {
entry:
  %retval = alloca i8*, align 8
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pComment.addr = alloca i8*, align 8
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  %pErr.addr = alloca i32*, align 8
  %file_index = alloca i32, align 4
  %zip_archive = alloca %struct.mz_zip_archive, align 8
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i8* %pComment, i8** %pComment.addr, align 8, !tbaa !8
  store i64* %pSize, i64** %pSize.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  store i32* %pErr, i32** %pErr.addr, align 8, !tbaa !8
  %0 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast %struct.mz_zip_archive* %zip_archive to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* %1) #10
  %2 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  store i8* null, i8** %p, align 8, !tbaa !8
  %3 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  %tobool = icmp ne i64* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  store i64 0, i64* %4, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %tobool1 = icmp ne i8* %5, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then3

lor.lhs.false:                                    ; preds = %if.end
  %6 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %tobool2 = icmp ne i8* %6, null
  br i1 %tobool2, label %if.end7, label %if.then3

if.then3:                                         ; preds = %lor.lhs.false, %if.end
  %7 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool4 = icmp ne i32* %7, null
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %8 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 24, i32* %8, align 4, !tbaa !12
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %if.then3
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end7:                                          ; preds = %lor.lhs.false
  call void @mz_zip_zero_struct(%struct.mz_zip_archive* %zip_archive)
  %9 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %10 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %or = or i32 %10, 2048
  %call = call i32 @mz_zip_reader_init_file_v2(%struct.mz_zip_archive* %zip_archive, i8* %9, i32 %or, i64 0, i64 0)
  %tobool8 = icmp ne i32 %call, 0
  br i1 %tobool8, label %if.end13, label %if.then9

if.then9:                                         ; preds = %if.end7
  %11 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool10 = icmp ne i32* %11, null
  br i1 %tobool10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then9
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %12 = load i32, i32* %m_last_error, align 4, !tbaa !103
  %13 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %12, i32* %13, align 4, !tbaa !12
  br label %if.end12

if.end12:                                         ; preds = %if.then11, %if.then9
  store i8* null, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end13:                                         ; preds = %if.end7
  %14 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %15 = load i8*, i8** %pComment.addr, align 8, !tbaa !8
  %16 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call14 = call i32 @mz_zip_reader_locate_file_v2(%struct.mz_zip_archive* %zip_archive, i8* %14, i8* %15, i32 %16, i32* %file_index)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end13
  %17 = load i32, i32* %file_index, align 4, !tbaa !10
  %18 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  %19 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call17 = call i8* @mz_zip_reader_extract_to_heap(%struct.mz_zip_archive* %zip_archive, i32 %17, i64* %18, i32 %19)
  store i8* %call17, i8** %p, align 8, !tbaa !8
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end13
  %20 = load i8*, i8** %p, align 8, !tbaa !8
  %cmp = icmp ne i8* %20, null
  %conv = zext i1 %cmp to i32
  %call19 = call i32 @mz_zip_reader_end_internal(%struct.mz_zip_archive* %zip_archive, i32 %conv)
  %21 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  %tobool20 = icmp ne i32* %21, null
  br i1 %tobool20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end18
  %m_last_error22 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %zip_archive, i32 0, i32 5
  %22 = load i32, i32* %m_last_error22, align 4, !tbaa !103
  %23 = load i32*, i32** %pErr.addr, align 8, !tbaa !8
  store i32 %22, i32* %23, align 4, !tbaa !12
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.end18
  %24 = load i8*, i8** %p, align 8, !tbaa !8
  store i8* %24, i8** %retval, align 8
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end23, %if.end12, %if.end6
  %25 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %25) #10
  %26 = bitcast %struct.mz_zip_archive* %zip_archive to i8*
  call void @llvm.lifetime.end.p0i8(i64 112, i8* %26) #10
  %27 = bitcast i32* %file_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %27) #10
  %28 = load i8*, i8** %retval, align 8
  ret i8* %28
}

; Function Attrs: nounwind ssp uwtable
define i8* @mz_zip_extract_archive_file_to_heap(i8* %pZip_filename, i8* %pArchive_name, i64* %pSize, i32 %flags) #0 {
entry:
  %pZip_filename.addr = alloca i8*, align 8
  %pArchive_name.addr = alloca i8*, align 8
  %pSize.addr = alloca i64*, align 8
  %flags.addr = alloca i32, align 4
  store i8* %pZip_filename, i8** %pZip_filename.addr, align 8, !tbaa !8
  store i8* %pArchive_name, i8** %pArchive_name.addr, align 8, !tbaa !8
  store i64* %pSize, i64** %pSize.addr, align 8, !tbaa !8
  store i32 %flags, i32* %flags.addr, align 4, !tbaa !10
  %0 = load i8*, i8** %pZip_filename.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pArchive_name.addr, align 8, !tbaa !8
  %2 = load i64*, i64** %pSize.addr, align 8, !tbaa !8
  %3 = load i32, i32* %flags.addr, align 4, !tbaa !10
  %call = call i8* @mz_zip_extract_archive_file_to_heap_v2(i8* %0, i8* %1, i8* null, i64* %2, i32 %3, i32* null)
  ret i8* %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_get_mode(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 3
  %2 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_get_type(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_type = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 4
  %2 = load i32, i32* %m_zip_type, align 8, !tbaa !107
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_set_last_error(%struct.mz_zip_archive* %pZip, i32 %err_num) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %err_num.addr = alloca i32, align 4
  %prev_err = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %err_num, i32* %err_num.addr, align 4, !tbaa !12
  %0 = bitcast i32* %prev_err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 24, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 5
  %3 = load i32, i32* %m_last_error, align 4, !tbaa !103
  store i32 %3, i32* %prev_err, align 4, !tbaa !12
  %4 = load i32, i32* %err_num.addr, align 4, !tbaa !12
  %5 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %5, i32 0, i32 5
  store i32 %4, i32* %m_last_error1, align 4, !tbaa !103
  %6 = load i32, i32* %prev_err, align 4, !tbaa !12
  store i32 %6, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %7 = bitcast i32* %prev_err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %7) #10
  %8 = load i32, i32* %retval, align 4
  ret i32 %8
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_peek_last_error(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 24, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 5
  %2 = load i32, i32* %m_last_error, align 4, !tbaa !103
  store i32 %2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_clear_last_error(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_last_error(%struct.mz_zip_archive* %0, i32 0)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_get_last_error(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %prev_err = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = bitcast i32* %prev_err to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 24, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %2, i32 0, i32 5
  %3 = load i32, i32* %m_last_error, align 4, !tbaa !103
  store i32 %3, i32* %prev_err, align 4, !tbaa !12
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_last_error1 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 5
  store i32 0, i32* %m_last_error1, align 4, !tbaa !103
  %5 = load i32, i32* %prev_err, align 4, !tbaa !12
  store i32 %5, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %6 = bitcast i32* %prev_err to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %6) #10
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define i8* @mz_zip_get_error_string(i32 %mz_err) #0 {
entry:
  %retval = alloca i8*, align 8
  %mz_err.addr = alloca i32, align 4
  store i32 %mz_err, i32* %mz_err.addr, align 4, !tbaa !12
  %0 = load i32, i32* %mz_err.addr, align 4, !tbaa !12
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
    i32 4, label %sw.bb4
    i32 5, label %sw.bb5
    i32 6, label %sw.bb6
    i32 7, label %sw.bb7
    i32 8, label %sw.bb8
    i32 9, label %sw.bb9
    i32 10, label %sw.bb10
    i32 11, label %sw.bb11
    i32 12, label %sw.bb12
    i32 13, label %sw.bb13
    i32 14, label %sw.bb14
    i32 15, label %sw.bb15
    i32 16, label %sw.bb16
    i32 17, label %sw.bb17
    i32 18, label %sw.bb18
    i32 19, label %sw.bb19
    i32 20, label %sw.bb20
    i32 21, label %sw.bb21
    i32 22, label %sw.bb22
    i32 23, label %sw.bb23
    i32 24, label %sw.bb24
    i32 25, label %sw.bb25
    i32 26, label %sw.bb26
    i32 27, label %sw.bb27
    i32 28, label %sw.bb28
    i32 29, label %sw.bb29
    i32 30, label %sw.bb30
    i32 31, label %sw.bb31
  ]

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb4:                                           ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb5:                                           ; preds = %entry
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.30, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb6:                                           ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb7:                                           ; preds = %entry
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.32, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb8:                                           ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.33, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb9:                                           ; preds = %entry
  store i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.34, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb10:                                          ; preds = %entry
  store i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.35, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb11:                                          ; preds = %entry
  store i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.36, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb12:                                          ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.37, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb13:                                          ; preds = %entry
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.38, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb14:                                          ; preds = %entry
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.39, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb15:                                          ; preds = %entry
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.40, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb16:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb17:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.42, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb18:                                          ; preds = %entry
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.43, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb19:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.44, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb20:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb21:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.46, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb22:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.47, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb23:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.48, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb24:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.49, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb25:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.50, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb26:                                          ; preds = %entry
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.51, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb27:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.52, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb28:                                          ; preds = %entry
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.53, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb29:                                          ; preds = %entry
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.54, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb30:                                          ; preds = %entry
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.55, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.bb31:                                          ; preds = %entry
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.56, i64 0, i64 0), i8** %retval, align 8
  br label %return

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.57, i64 0, i64 0), i8** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb31, %sw.bb30, %sw.bb29, %sw.bb28, %sw.bb27, %sw.bb26, %sw.bb25, %sw.bb24, %sw.bb23, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %sw.bb18, %sw.bb17, %sw.bb16, %sw.bb15, %sw.bb14, %sw.bb13, %sw.bb12, %sw.bb11, %sw.bb10, %sw.bb9, %sw.bb8, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8*, i8** %retval, align 8
  ret i8* %1
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_is_zip64(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState2, align 8, !tbaa !98
  %m_zip64 = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 4
  %5 = load i32, i32* %m_zip64, align 4, !tbaa !118
  store i32 %5, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define i64 @mz_zip_get_central_dir_size(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i64, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState2, align 8, !tbaa !98
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 0
  %m_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_central_dir, i32 0, i32 1
  %5 = load i64, i64* %m_size, align 8, !tbaa !175
  store i64 %5, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval, align 8
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_get_num_files(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 2
  %2 = load i32, i32* %m_total_files, align 8, !tbaa !113
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind ssp uwtable
define i64 @mz_zip_get_archive_size(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i64, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 0
  %2 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  store i64 %2, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load i64, i64* %retval, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define i64 @mz_zip_get_archive_file_start_offset(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i64, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState2, align 8, !tbaa !98
  %m_file_archive_start_ofs = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 7
  %5 = load i64, i64* %m_file_archive_start_ofs, align 8, !tbaa !127
  store i64 %5, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i64, i64* %retval, align 8
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define %struct.__sFILE* @mz_zip_get_cfile(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca %struct.__sFILE*, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct.__sFILE* null, %struct.__sFILE** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %3, i32 0, i32 15
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState2, align 8, !tbaa !98
  %m_pFile = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 6
  %5 = load %struct.__sFILE*, %struct.__sFILE** %m_pFile, align 8, !tbaa !104
  store %struct.__sFILE* %5, %struct.__sFILE** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.__sFILE*, %struct.__sFILE** %retval, align 8
  ret %struct.__sFILE* %6
}

; Function Attrs: nounwind ssp uwtable
define i64 @mz_zip_read_archive_data(%struct.mz_zip_archive* %pZip, i64 %file_ofs, i8* %pBuf, i64 %n) #0 {
entry:
  %retval = alloca i64, align 8
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_ofs.addr = alloca i64, align 8
  %pBuf.addr = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i64 %file_ofs, i64* %file_ofs.addr, align 8, !tbaa !76
  store i8* %pBuf, i8** %pBuf.addr, align 8, !tbaa !8
  store i64 %n, i64* %n.addr, align 8, !tbaa !4
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  %tobool1 = icmp ne %struct.mz_zip_internal_state_tag* %2, null
  br i1 %tobool1, label %lor.lhs.false2, label %if.then

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %tobool3 = icmp ne i8* %3, null
  br i1 %tobool3, label %lor.lhs.false4, label %if.then

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 11
  %5 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %tobool5 = icmp ne i64 (i8*, i64, i8*, i64)* %5, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false2, %lor.lhs.false, %entry
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %6, i32 24)
  %conv = sext i32 %call to i64
  store i64 %conv, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.lhs.false4
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead6 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 11
  %8 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead6, align 8, !tbaa !109
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 14
  %10 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %11 = load i64, i64* %file_ofs.addr, align 8, !tbaa !76
  %12 = load i8*, i8** %pBuf.addr, align 8, !tbaa !8
  %13 = load i64, i64* %n.addr, align 8, !tbaa !4
  %call7 = call i64 %8(i8* %10, i64 %11, i8* %12, i64 %13)
  store i64 %call7, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %14 = load i64, i64* %retval, align 8
  ret i64 %14
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_reader_get_filename(%struct.mz_zip_archive* %pZip, i32 %file_index, i8* %pFilename, i32 %filename_buf_size) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %file_index.addr = alloca i32, align 4
  %pFilename.addr = alloca i8*, align 8
  %filename_buf_size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %p = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %file_index, i32* %file_index.addr, align 4, !tbaa !10
  store i8* %pFilename, i8** %pFilename.addr, align 8, !tbaa !8
  store i32 %filename_buf_size, i32* %filename_buf_size.addr, align 4, !tbaa !10
  %0 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %3 = load i32, i32* %file_index.addr, align 4, !tbaa !10
  %call = call i8* @mz_zip_get_cdh(%struct.mz_zip_archive* %2, i32 %3)
  store i8* %call, i8** %p, align 8, !tbaa !8
  %4 = load i8*, i8** %p, align 8, !tbaa !8
  %tobool = icmp ne i8* %4, null
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %filename_buf_size.addr, align 4, !tbaa !10
  %tobool1 = icmp ne i32 %5, 0
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %6 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 0
  store i8 0, i8* %arrayidx, align 1, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call3 = call i32 @mz_zip_set_error(%struct.mz_zip_archive* %7, i32 24)
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end4:                                          ; preds = %entry
  %8 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %8, i64 28
  %9 = bitcast i8* %add.ptr to i16*
  %10 = load i16, i16* %9, align 2, !tbaa !88
  %conv = zext i16 %10 to i32
  store i32 %conv, i32* %n, align 4, !tbaa !10
  %11 = load i32, i32* %filename_buf_size.addr, align 4, !tbaa !10
  %tobool5 = icmp ne i32 %11, 0
  br i1 %tobool5, label %if.then6, label %if.end13

if.then6:                                         ; preds = %if.end4
  %12 = load i32, i32* %n, align 4, !tbaa !10
  %13 = load i32, i32* %filename_buf_size.addr, align 4, !tbaa !10
  %sub = sub i32 %13, 1
  %cmp = icmp ult i32 %12, %sub
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then6
  %14 = load i32, i32* %n, align 4, !tbaa !10
  br label %cond.end

cond.false:                                       ; preds = %if.then6
  %15 = load i32, i32* %filename_buf_size.addr, align 4, !tbaa !10
  %sub8 = sub i32 %15, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ %sub8, %cond.false ]
  store i32 %cond, i32* %n, align 4, !tbaa !10
  %16 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %17 = load i8*, i8** %p, align 8, !tbaa !8
  %add.ptr9 = getelementptr inbounds i8, i8* %17, i64 46
  %18 = load i32, i32* %n, align 4, !tbaa !10
  %conv10 = zext i32 %18 to i64
  %19 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %20 = call i64 @llvm.objectsize.i64.p0i8(i8* %19, i1 false, i1 true, i1 false)
  %call11 = call i8* @__memcpy_chk(i8* %16, i8* %add.ptr9, i64 %conv10, i64 %20) #10
  %21 = load i8*, i8** %pFilename.addr, align 8, !tbaa !8
  %22 = load i32, i32* %n, align 4, !tbaa !10
  %idxprom = zext i32 %22 to i64
  %arrayidx12 = getelementptr inbounds i8, i8* %21, i64 %idxprom
  store i8 0, i8* %arrayidx12, align 1, !tbaa !12
  br label %if.end13

if.end13:                                         ; preds = %cond.end, %if.end4
  %23 = load i32, i32* %n, align 4, !tbaa !10
  %add = add i32 %23, 1
  store i32 %add, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end13, %if.end
  %24 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %24) #10
  %25 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %25) #10
  %26 = load i32, i32* %retval, align 4
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define i32 @mz_zip_end(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %tobool = icmp ne %struct.mz_zip_archive* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 3
  %2 = load i32, i32* %m_zip_mode, align 4, !tbaa !102
  %cmp = icmp eq i32 %2, 1
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call = call i32 @mz_zip_reader_end(%struct.mz_zip_archive* %3)
  store i32 %call, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.end
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 3
  %5 = load i32, i32* %m_zip_mode2, align 4, !tbaa !102
  %cmp3 = icmp eq i32 %5, 2
  br i1 %cmp3, label %if.then6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_zip_mode4 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %6, i32 0, i32 3
  %7 = load i32, i32* %m_zip_mode4, align 4, !tbaa !102
  %cmp5 = icmp eq i32 %7, 3
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %lor.lhs.false, %if.else
  %8 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %call7 = call i32 @mz_zip_writer_end(%struct.mz_zip_archive* %8)
  store i32 %call7, i32* %retval, align 4
  br label %return

if.end8:                                          ; preds = %lor.lhs.false
  br label %if.end9

if.end9:                                          ; preds = %if.end8
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end9, %if.then6, %if.then1, %if.then
  %9 = load i32, i32* %retval, align 4
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @TDEFL_READ_UNALIGNED_WORD32(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8, !tbaa !8
  %0 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %ret to i8*
  %2 = load i8*, i8** %p.addr, align 8, !tbaa !8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 1 %2, i64 4, i1 false)
  %3 = load i32, i32* %ret, align 4, !tbaa !10
  %4 = bitcast i32* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %4) #10
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %p) #0 {
entry:
  %p.addr = alloca i16*, align 8
  %ret = alloca i16, align 2
  store i16* %p, i16** %p.addr, align 8, !tbaa !8
  %0 = bitcast i16* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #10
  %1 = bitcast i16* %ret to i8*
  %2 = load i16*, i16** %p.addr, align 8, !tbaa !8
  %3 = bitcast i16* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1, i8* align 2 %3, i64 2, i1 false)
  %4 = load i16, i16* %ret, align 2, !tbaa !88
  %5 = bitcast i16* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %5) #10
  ret i16 %4
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal void @tdefl_find_match(%struct.tdefl_compressor* %d, i32 %lookahead_pos, i32 %max_dist, i32 %max_match_len, i32* %pMatch_dist, i32* %pMatch_len) #9 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %lookahead_pos.addr = alloca i32, align 4
  %max_dist.addr = alloca i32, align 4
  %max_match_len.addr = alloca i32, align 4
  %pMatch_dist.addr = alloca i32*, align 8
  %pMatch_len.addr = alloca i32*, align 8
  %dist = alloca i32, align 4
  %pos = alloca i32, align 4
  %match_len = alloca i32, align 4
  %probe_pos = alloca i32, align 4
  %next_probe_pos = alloca i32, align 4
  %probe_len = alloca i32, align 4
  %num_probes_left = alloca i32, align 4
  %s = alloca i16*, align 8
  %p = alloca i16*, align 8
  %q = alloca i16*, align 8
  %c01 = alloca i16, align 2
  %s01 = alloca i16, align 2
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i32 %lookahead_pos, i32* %lookahead_pos.addr, align 4, !tbaa !10
  store i32 %max_dist, i32* %max_dist.addr, align 4, !tbaa !10
  store i32 %max_match_len, i32* %max_match_len.addr, align 4, !tbaa !10
  store i32* %pMatch_dist, i32** %pMatch_dist.addr, align 8, !tbaa !8
  store i32* %pMatch_len, i32** %pMatch_len.addr, align 8, !tbaa !8
  %0 = bitcast i32* %dist to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = load i32, i32* %lookahead_pos.addr, align 4, !tbaa !10
  %and = and i32 %2, 32767
  store i32 %and, i32* %pos, align 4, !tbaa !10
  %3 = bitcast i32* %match_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = load i32*, i32** %pMatch_len.addr, align 8, !tbaa !8
  %5 = load i32, i32* %4, align 4, !tbaa !10
  store i32 %5, i32* %match_len, align 4, !tbaa !10
  %6 = bitcast i32* %probe_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #10
  %7 = load i32, i32* %pos, align 4, !tbaa !10
  store i32 %7, i32* %probe_pos, align 4, !tbaa !10
  %8 = bitcast i32* %next_probe_pos to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #10
  %9 = bitcast i32* %probe_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #10
  %10 = bitcast i32* %num_probes_left to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #10
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_max_probes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %11, i32 0, i32 3
  %12 = load i32, i32* %match_len, align 4, !tbaa !10
  %cmp = icmp uge i32 %12, 32
  %conv = zext i1 %cmp to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %m_max_probes, i64 0, i64 %idxprom
  %13 = load i32, i32* %arrayidx, align 4, !tbaa !10
  store i32 %13, i32* %num_probes_left, align 4, !tbaa !10
  %14 = bitcast i16** %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %14) #10
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 35
  %arraydecay = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict, i64 0, i64 0
  %16 = load i32, i32* %pos, align 4, !tbaa !10
  %idx.ext = zext i32 %16 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay, i64 %idx.ext
  %17 = bitcast i8* %add.ptr to i16*
  store i16* %17, i16** %s, align 8, !tbaa !8
  %18 = bitcast i16** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #10
  %19 = bitcast i16** %q to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #10
  %20 = bitcast i16* %c01 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %20) #10
  %21 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict1 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %21, i32 0, i32 35
  %22 = load i32, i32* %pos, align 4, !tbaa !10
  %23 = load i32, i32* %match_len, align 4, !tbaa !10
  %add = add i32 %22, %23
  %sub = sub i32 %add, 1
  %idxprom2 = zext i32 %sub to i64
  %arrayidx3 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict1, i64 0, i64 %idxprom2
  %call = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx3)
  store i16 %call, i16* %c01, align 2, !tbaa !88
  %24 = bitcast i16* %s01 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %24) #10
  %25 = load i16*, i16** %s, align 8, !tbaa !8
  %call4 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %25)
  store i16 %call4, i16* %s01, align 2, !tbaa !88
  %26 = load i32, i32* %max_match_len.addr, align 4, !tbaa !10
  %cmp5 = icmp ule i32 %26, 258
  %lnot = xor i1 %cmp5, true
  %lnot.ext = zext i1 %lnot to i32
  %conv7 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv7, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__func__.tdefl_find_match, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1391, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.61, i64 0, i64 0)) #13
  unreachable

27:                                               ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %27
  %28 = load i32, i32* %max_match_len.addr, align 4, !tbaa !10
  %29 = load i32, i32* %match_len, align 4, !tbaa !10
  %cmp8 = icmp ule i32 %28, %29
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end
  br label %for.cond

for.cond:                                         ; preds = %if.end174, %if.then103, %if.end
  br label %for.cond10

for.cond10:                                       ; preds = %if.end90, %for.cond
  %30 = load i32, i32* %num_probes_left, align 4, !tbaa !10
  %dec = add i32 %30, -1
  store i32 %dec, i32* %num_probes_left, align 4, !tbaa !10
  %cmp11 = icmp eq i32 %dec, 0
  br i1 %cmp11, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.cond10
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end14:                                         ; preds = %for.cond10
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_next = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 40
  %32 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %idxprom15 = zext i32 %32 to i64
  %arrayidx16 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next, i64 0, i64 %idxprom15
  %33 = load i16, i16* %arrayidx16, align 2, !tbaa !88
  %conv17 = zext i16 %33 to i32
  store i32 %conv17, i32* %next_probe_pos, align 4, !tbaa !10
  %34 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %tobool18 = icmp ne i32 %34, 0
  br i1 %tobool18, label %lor.lhs.false, label %if.then24

lor.lhs.false:                                    ; preds = %if.end14
  %35 = load i32, i32* %lookahead_pos.addr, align 4, !tbaa !10
  %36 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %sub19 = sub i32 %35, %36
  %conv20 = trunc i32 %sub19 to i16
  %conv21 = zext i16 %conv20 to i32
  store i32 %conv21, i32* %dist, align 4, !tbaa !10
  %37 = load i32, i32* %max_dist.addr, align 4, !tbaa !10
  %cmp22 = icmp ugt i32 %conv21, %37
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %lor.lhs.false, %if.end14
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end25:                                         ; preds = %lor.lhs.false
  %38 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %and26 = and i32 %38, 32767
  store i32 %and26, i32* %probe_pos, align 4, !tbaa !10
  %39 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict27 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %39, i32 0, i32 35
  %40 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %41 = load i32, i32* %match_len, align 4, !tbaa !10
  %add28 = add i32 %40, %41
  %sub29 = sub i32 %add28, 1
  %idxprom30 = zext i32 %sub29 to i64
  %arrayidx31 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict27, i64 0, i64 %idxprom30
  %call32 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx31)
  %conv33 = zext i16 %call32 to i32
  %42 = load i16, i16* %c01, align 2, !tbaa !88
  %conv34 = zext i16 %42 to i32
  %cmp35 = icmp eq i32 %conv33, %conv34
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.end25
  br label %for.end

if.end38:                                         ; preds = %if.end25
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_next39 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %43, i32 0, i32 40
  %44 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %idxprom40 = zext i32 %44 to i64
  %arrayidx41 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next39, i64 0, i64 %idxprom40
  %45 = load i16, i16* %arrayidx41, align 2, !tbaa !88
  %conv42 = zext i16 %45 to i32
  store i32 %conv42, i32* %next_probe_pos, align 4, !tbaa !10
  %46 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %tobool43 = icmp ne i32 %46, 0
  br i1 %tobool43, label %lor.lhs.false44, label %if.then50

lor.lhs.false44:                                  ; preds = %if.end38
  %47 = load i32, i32* %lookahead_pos.addr, align 4, !tbaa !10
  %48 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %sub45 = sub i32 %47, %48
  %conv46 = trunc i32 %sub45 to i16
  %conv47 = zext i16 %conv46 to i32
  store i32 %conv47, i32* %dist, align 4, !tbaa !10
  %49 = load i32, i32* %max_dist.addr, align 4, !tbaa !10
  %cmp48 = icmp ugt i32 %conv47, %49
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %lor.lhs.false44, %if.end38
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end51:                                         ; preds = %lor.lhs.false44
  %50 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %and52 = and i32 %50, 32767
  store i32 %and52, i32* %probe_pos, align 4, !tbaa !10
  %51 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict53 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %51, i32 0, i32 35
  %52 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %53 = load i32, i32* %match_len, align 4, !tbaa !10
  %add54 = add i32 %52, %53
  %sub55 = sub i32 %add54, 1
  %idxprom56 = zext i32 %sub55 to i64
  %arrayidx57 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict53, i64 0, i64 %idxprom56
  %call58 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx57)
  %conv59 = zext i16 %call58 to i32
  %54 = load i16, i16* %c01, align 2, !tbaa !88
  %conv60 = zext i16 %54 to i32
  %cmp61 = icmp eq i32 %conv59, %conv60
  br i1 %cmp61, label %if.then63, label %if.end64

if.then63:                                        ; preds = %if.end51
  br label %for.end

if.end64:                                         ; preds = %if.end51
  %55 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_next65 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %55, i32 0, i32 40
  %56 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %idxprom66 = zext i32 %56 to i64
  %arrayidx67 = getelementptr inbounds [32768 x i16], [32768 x i16]* %m_next65, i64 0, i64 %idxprom66
  %57 = load i16, i16* %arrayidx67, align 2, !tbaa !88
  %conv68 = zext i16 %57 to i32
  store i32 %conv68, i32* %next_probe_pos, align 4, !tbaa !10
  %58 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %tobool69 = icmp ne i32 %58, 0
  br i1 %tobool69, label %lor.lhs.false70, label %if.then76

lor.lhs.false70:                                  ; preds = %if.end64
  %59 = load i32, i32* %lookahead_pos.addr, align 4, !tbaa !10
  %60 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %sub71 = sub i32 %59, %60
  %conv72 = trunc i32 %sub71 to i16
  %conv73 = zext i16 %conv72 to i32
  store i32 %conv73, i32* %dist, align 4, !tbaa !10
  %61 = load i32, i32* %max_dist.addr, align 4, !tbaa !10
  %cmp74 = icmp ugt i32 %conv73, %61
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %lor.lhs.false70, %if.end64
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end77:                                         ; preds = %lor.lhs.false70
  %62 = load i32, i32* %next_probe_pos, align 4, !tbaa !10
  %and78 = and i32 %62, 32767
  store i32 %and78, i32* %probe_pos, align 4, !tbaa !10
  %63 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict79 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %63, i32 0, i32 35
  %64 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %65 = load i32, i32* %match_len, align 4, !tbaa !10
  %add80 = add i32 %64, %65
  %sub81 = sub i32 %add80, 1
  %idxprom82 = zext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict79, i64 0, i64 %idxprom82
  %call84 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx83)
  %conv85 = zext i16 %call84 to i32
  %66 = load i16, i16* %c01, align 2, !tbaa !88
  %conv86 = zext i16 %66 to i32
  %cmp87 = icmp eq i32 %conv85, %conv86
  br i1 %cmp87, label %if.then89, label %if.end90

if.then89:                                        ; preds = %if.end77
  br label %for.end

if.end90:                                         ; preds = %if.end77
  br label %for.cond10

for.end:                                          ; preds = %if.then89, %if.then63, %if.then37
  %67 = load i32, i32* %dist, align 4, !tbaa !10
  %tobool91 = icmp ne i32 %67, 0
  br i1 %tobool91, label %if.end93, label %if.then92

if.then92:                                        ; preds = %for.end
  br label %for.end175

if.end93:                                         ; preds = %for.end
  %68 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict94 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %68, i32 0, i32 35
  %arraydecay95 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict94, i64 0, i64 0
  %69 = load i32, i32* %probe_pos, align 4, !tbaa !10
  %idx.ext96 = zext i32 %69 to i64
  %add.ptr97 = getelementptr inbounds i8, i8* %arraydecay95, i64 %idx.ext96
  %70 = bitcast i8* %add.ptr97 to i16*
  store i16* %70, i16** %q, align 8, !tbaa !8
  %71 = load i16*, i16** %q, align 8, !tbaa !8
  %call98 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %71)
  %conv99 = zext i16 %call98 to i32
  %72 = load i16, i16* %s01, align 2, !tbaa !88
  %conv100 = zext i16 %72 to i32
  %cmp101 = icmp ne i32 %conv99, %conv100
  br i1 %cmp101, label %if.then103, label %if.end104

if.then103:                                       ; preds = %if.end93
  br label %for.cond

if.end104:                                        ; preds = %if.end93
  %73 = load i16*, i16** %s, align 8, !tbaa !8
  store i16* %73, i16** %p, align 8, !tbaa !8
  store i32 32, i32* %probe_len, align 4, !tbaa !10
  br label %do.body

do.body:                                          ; preds = %land.end, %if.end104
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %74 = load i16*, i16** %p, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i16, i16* %74, i32 1
  store i16* %incdec.ptr, i16** %p, align 8, !tbaa !8
  %call105 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr)
  %conv106 = zext i16 %call105 to i32
  %75 = load i16*, i16** %q, align 8, !tbaa !8
  %incdec.ptr107 = getelementptr inbounds i16, i16* %75, i32 1
  store i16* %incdec.ptr107, i16** %q, align 8, !tbaa !8
  %call108 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr107)
  %conv109 = zext i16 %call108 to i32
  %cmp110 = icmp eq i32 %conv106, %conv109
  br i1 %cmp110, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %do.cond
  %76 = load i16*, i16** %p, align 8, !tbaa !8
  %incdec.ptr112 = getelementptr inbounds i16, i16* %76, i32 1
  store i16* %incdec.ptr112, i16** %p, align 8, !tbaa !8
  %call113 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr112)
  %conv114 = zext i16 %call113 to i32
  %77 = load i16*, i16** %q, align 8, !tbaa !8
  %incdec.ptr115 = getelementptr inbounds i16, i16* %77, i32 1
  store i16* %incdec.ptr115, i16** %q, align 8, !tbaa !8
  %call116 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr115)
  %conv117 = zext i16 %call116 to i32
  %cmp118 = icmp eq i32 %conv114, %conv117
  br i1 %cmp118, label %land.lhs.true120, label %land.end

land.lhs.true120:                                 ; preds = %land.lhs.true
  %78 = load i16*, i16** %p, align 8, !tbaa !8
  %incdec.ptr121 = getelementptr inbounds i16, i16* %78, i32 1
  store i16* %incdec.ptr121, i16** %p, align 8, !tbaa !8
  %call122 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr121)
  %conv123 = zext i16 %call122 to i32
  %79 = load i16*, i16** %q, align 8, !tbaa !8
  %incdec.ptr124 = getelementptr inbounds i16, i16* %79, i32 1
  store i16* %incdec.ptr124, i16** %q, align 8, !tbaa !8
  %call125 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr124)
  %conv126 = zext i16 %call125 to i32
  %cmp127 = icmp eq i32 %conv123, %conv126
  br i1 %cmp127, label %land.lhs.true129, label %land.end

land.lhs.true129:                                 ; preds = %land.lhs.true120
  %80 = load i16*, i16** %p, align 8, !tbaa !8
  %incdec.ptr130 = getelementptr inbounds i16, i16* %80, i32 1
  store i16* %incdec.ptr130, i16** %p, align 8, !tbaa !8
  %call131 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr130)
  %conv132 = zext i16 %call131 to i32
  %81 = load i16*, i16** %q, align 8, !tbaa !8
  %incdec.ptr133 = getelementptr inbounds i16, i16* %81, i32 1
  store i16* %incdec.ptr133, i16** %q, align 8, !tbaa !8
  %call134 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD2(i16* %incdec.ptr133)
  %conv135 = zext i16 %call134 to i32
  %cmp136 = icmp eq i32 %conv132, %conv135
  br i1 %cmp136, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true129
  %82 = load i32, i32* %probe_len, align 4, !tbaa !10
  %dec138 = add i32 %82, -1
  store i32 %dec138, i32* %probe_len, align 4, !tbaa !10
  %cmp139 = icmp ugt i32 %dec138, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true129, %land.lhs.true120, %land.lhs.true, %do.cond
  %83 = phi i1 [ false, %land.lhs.true129 ], [ false, %land.lhs.true120 ], [ false, %land.lhs.true ], [ false, %do.cond ], [ %cmp139, %land.rhs ]
  br i1 %83, label %do.body, label %do.end

do.end:                                           ; preds = %land.end
  %84 = load i32, i32* %probe_len, align 4, !tbaa !10
  %tobool141 = icmp ne i32 %84, 0
  br i1 %tobool141, label %if.else, label %if.then142

if.then142:                                       ; preds = %do.end
  %85 = load i32, i32* %dist, align 4, !tbaa !10
  %86 = load i32*, i32** %pMatch_dist.addr, align 8, !tbaa !8
  store i32 %85, i32* %86, align 4, !tbaa !10
  %87 = load i32, i32* %max_match_len.addr, align 4, !tbaa !10
  %cmp143 = icmp ult i32 %87, 258
  br i1 %cmp143, label %cond.true145, label %cond.false146

cond.true145:                                     ; preds = %if.then142
  %88 = load i32, i32* %max_match_len.addr, align 4, !tbaa !10
  br label %cond.end147

cond.false146:                                    ; preds = %if.then142
  br label %cond.end147

cond.end147:                                      ; preds = %cond.false146, %cond.true145
  %cond = phi i32 [ %88, %cond.true145 ], [ 258, %cond.false146 ]
  %89 = load i32*, i32** %pMatch_len.addr, align 8, !tbaa !8
  store i32 %cond, i32* %89, align 4, !tbaa !10
  br label %for.end175

if.else:                                          ; preds = %do.end
  %90 = load i16*, i16** %p, align 8, !tbaa !8
  %91 = load i16*, i16** %s, align 8, !tbaa !8
  %sub.ptr.lhs.cast = ptrtoint i16* %90 to i64
  %sub.ptr.rhs.cast = ptrtoint i16* %91 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 2
  %conv148 = trunc i64 %sub.ptr.div to i32
  %mul = mul i32 %conv148, 2
  %92 = load i16*, i16** %p, align 8, !tbaa !8
  %93 = bitcast i16* %92 to i8*
  %94 = load i8, i8* %93, align 1, !tbaa !12
  %conv149 = zext i8 %94 to i32
  %95 = load i16*, i16** %q, align 8, !tbaa !8
  %96 = bitcast i16* %95 to i8*
  %97 = load i8, i8* %96, align 1, !tbaa !12
  %conv150 = zext i8 %97 to i32
  %cmp151 = icmp eq i32 %conv149, %conv150
  %conv152 = zext i1 %cmp151 to i32
  %add153 = add i32 %mul, %conv152
  store i32 %add153, i32* %probe_len, align 4, !tbaa !10
  %98 = load i32, i32* %match_len, align 4, !tbaa !10
  %cmp154 = icmp ugt i32 %add153, %98
  br i1 %cmp154, label %if.then156, label %if.end173

if.then156:                                       ; preds = %if.else
  %99 = load i32, i32* %dist, align 4, !tbaa !10
  %100 = load i32*, i32** %pMatch_dist.addr, align 8, !tbaa !8
  store i32 %99, i32* %100, align 4, !tbaa !10
  %101 = load i32, i32* %max_match_len.addr, align 4, !tbaa !10
  %102 = load i32, i32* %probe_len, align 4, !tbaa !10
  %cmp157 = icmp ult i32 %101, %102
  br i1 %cmp157, label %cond.true159, label %cond.false160

cond.true159:                                     ; preds = %if.then156
  %103 = load i32, i32* %max_match_len.addr, align 4, !tbaa !10
  br label %cond.end161

cond.false160:                                    ; preds = %if.then156
  %104 = load i32, i32* %probe_len, align 4, !tbaa !10
  br label %cond.end161

cond.end161:                                      ; preds = %cond.false160, %cond.true159
  %cond162 = phi i32 [ %103, %cond.true159 ], [ %104, %cond.false160 ]
  store i32 %cond162, i32* %match_len, align 4, !tbaa !10
  %105 = load i32*, i32** %pMatch_len.addr, align 8, !tbaa !8
  store i32 %cond162, i32* %105, align 4, !tbaa !10
  %106 = load i32, i32* %max_match_len.addr, align 4, !tbaa !10
  %cmp163 = icmp eq i32 %cond162, %106
  br i1 %cmp163, label %if.then165, label %if.end166

if.then165:                                       ; preds = %cond.end161
  br label %for.end175

if.end166:                                        ; preds = %cond.end161
  %107 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_dict167 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %107, i32 0, i32 35
  %108 = load i32, i32* %pos, align 4, !tbaa !10
  %109 = load i32, i32* %match_len, align 4, !tbaa !10
  %add168 = add i32 %108, %109
  %sub169 = sub i32 %add168, 1
  %idxprom170 = zext i32 %sub169 to i64
  %arrayidx171 = getelementptr inbounds [33025 x i8], [33025 x i8]* %m_dict167, i64 0, i64 %idxprom170
  %call172 = call zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %arrayidx171)
  store i16 %call172, i16* %c01, align 2, !tbaa !88
  br label %if.end173

if.end173:                                        ; preds = %if.end166, %if.else
  br label %if.end174

if.end174:                                        ; preds = %if.end173
  br label %for.cond

for.end175:                                       ; preds = %if.then165, %cond.end147, %if.then92
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end175, %if.then76, %if.then50, %if.then24, %if.then13, %if.then
  %110 = bitcast i16* %s01 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %110) #10
  %111 = bitcast i16* %c01 to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %111) #10
  %112 = bitcast i16** %q to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %112) #10
  %113 = bitcast i16** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %113) #10
  %114 = bitcast i16** %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %114) #10
  %115 = bitcast i32* %num_probes_left to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %115) #10
  %116 = bitcast i32* %probe_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %116) #10
  %117 = bitcast i32* %next_probe_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %117) #10
  %118 = bitcast i32* %probe_pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %118) #10
  %119 = bitcast i32* %match_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %119) #10
  %120 = bitcast i32* %pos to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %120) #10
  %121 = bitcast i32* %dist to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %121) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal void @tdefl_record_literal(%struct.tdefl_compressor* %d, i8 zeroext %lit) #9 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %lit.addr = alloca i8, align 1
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i8 %lit, i8* %lit.addr, align 1, !tbaa !12
  %0 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %0, i32 0, i32 14
  %1 = load i32, i32* %m_total_lz_bytes, align 4, !tbaa !31
  %inc = add i32 %1, 1
  store i32 %inc, i32* %m_total_lz_bytes, align 4, !tbaa !31
  %2 = load i8, i8* %lit.addr, align 1, !tbaa !12
  %3 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %3, i32 0, i32 9
  %4 = load i8*, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  store i8 %2, i8* %4, align 1, !tbaa !12
  %5 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %5, i32 0, i32 10
  %6 = load i8*, i8** %m_pLZ_flags, align 8, !tbaa !42
  %7 = load i8, i8* %6, align 1, !tbaa !12
  %conv = zext i8 %7 to i32
  %shr = ashr i32 %conv, 1
  %conv1 = trunc i32 %shr to i8
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags2 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 10
  %9 = load i8*, i8** %m_pLZ_flags2, align 8, !tbaa !42
  store i8 %conv1, i8* %9, align 1, !tbaa !12
  %10 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %10, i32 0, i32 13
  %11 = load i32, i32* %m_num_flags_left, align 8, !tbaa !43
  %dec = add i32 %11, -1
  store i32 %dec, i32* %m_num_flags_left, align 8, !tbaa !43
  %cmp = icmp eq i32 %dec, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left4 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %12, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left4, align 8, !tbaa !43
  %13 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf5 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %13, i32 0, i32 9
  %14 = load i8*, i8** %m_pLZ_code_buf5, align 8, !tbaa !41
  %incdec.ptr6 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %incdec.ptr6, i8** %m_pLZ_code_buf5, align 8, !tbaa !41
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 10
  store i8* %14, i8** %m_pLZ_flags7, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %16, i32 0, i32 36
  %arrayidx = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %17 = load i8, i8* %lit.addr, align 1, !tbaa !12
  %idxprom = zext i8 %17 to i64
  %arrayidx8 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx, i64 0, i64 %idxprom
  %18 = load i16, i16* %arrayidx8, align 2, !tbaa !88
  %inc9 = add i16 %18, 1
  store i16 %inc9, i16* %arrayidx8, align 2, !tbaa !88
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal void @tdefl_record_match(%struct.tdefl_compressor* %d, i32 %match_len, i32 %match_dist) #9 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %match_len.addr = alloca i32, align 4
  %match_dist.addr = alloca i32, align 4
  %s0 = alloca i32, align 4
  %s1 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i32 %match_len, i32* %match_len.addr, align 4, !tbaa !10
  store i32 %match_dist, i32* %match_dist.addr, align 4, !tbaa !10
  %0 = bitcast i32* %s0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = load i32, i32* %match_len.addr, align 4, !tbaa !10
  %cmp = icmp uge i32 %2, 3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %match_dist.addr, align 4, !tbaa !10
  %cmp1 = icmp uge i32 %3, 1
  br i1 %cmp1, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load i32, i32* %match_dist.addr, align 4, !tbaa !10
  %cmp2 = icmp ule i32 %4, 32768
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp2, %land.rhs ]
  %lnot = xor i1 %5, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.end
  call void @__assert_rtn(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__func__.tdefl_record_match, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1685, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.62, i64 0, i64 0)) #13
  unreachable

6:                                                ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %land.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %6
  %7 = load i32, i32* %match_len.addr, align 4, !tbaa !10
  %8 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_total_lz_bytes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %8, i32 0, i32 14
  %9 = load i32, i32* %m_total_lz_bytes, align 4, !tbaa !31
  %add = add i32 %9, %7
  store i32 %add, i32* %m_total_lz_bytes, align 4, !tbaa !31
  %10 = load i32, i32* %match_len.addr, align 4, !tbaa !10
  %sub = sub i32 %10, 3
  %conv3 = trunc i32 %sub to i8
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %11, i32 0, i32 9
  %12 = load i8*, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  %arrayidx = getelementptr inbounds i8, i8* %12, i64 0
  store i8 %conv3, i8* %arrayidx, align 1, !tbaa !12
  %13 = load i32, i32* %match_dist.addr, align 4, !tbaa !10
  %sub4 = sub i32 %13, 1
  store i32 %sub4, i32* %match_dist.addr, align 4, !tbaa !10
  %14 = load i32, i32* %match_dist.addr, align 4, !tbaa !10
  %and = and i32 %14, 255
  %conv5 = trunc i32 %and to i8
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf6 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 9
  %16 = load i8*, i8** %m_pLZ_code_buf6, align 8, !tbaa !41
  %arrayidx7 = getelementptr inbounds i8, i8* %16, i64 1
  store i8 %conv5, i8* %arrayidx7, align 1, !tbaa !12
  %17 = load i32, i32* %match_dist.addr, align 4, !tbaa !10
  %shr = lshr i32 %17, 8
  %conv8 = trunc i32 %shr to i8
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf9 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %18, i32 0, i32 9
  %19 = load i8*, i8** %m_pLZ_code_buf9, align 8, !tbaa !41
  %arrayidx10 = getelementptr inbounds i8, i8* %19, i64 2
  store i8 %conv8, i8* %arrayidx10, align 1, !tbaa !12
  %20 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf11 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %20, i32 0, i32 9
  %21 = load i8*, i8** %m_pLZ_code_buf11, align 8, !tbaa !41
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 3
  store i8* %add.ptr, i8** %m_pLZ_code_buf11, align 8, !tbaa !41
  %22 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %22, i32 0, i32 10
  %23 = load i8*, i8** %m_pLZ_flags, align 8, !tbaa !42
  %24 = load i8, i8* %23, align 1, !tbaa !12
  %conv12 = zext i8 %24 to i32
  %shr13 = ashr i32 %conv12, 1
  %or = or i32 %shr13, 128
  %conv14 = trunc i32 %or to i8
  %25 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags15 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %25, i32 0, i32 10
  %26 = load i8*, i8** %m_pLZ_flags15, align 8, !tbaa !42
  store i8 %conv14, i8* %26, align 1, !tbaa !12
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 13
  %28 = load i32, i32* %m_num_flags_left, align 8, !tbaa !43
  %dec = add i32 %28, -1
  store i32 %dec, i32* %m_num_flags_left, align 8, !tbaa !43
  %cmp16 = icmp eq i32 %dec, 0
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %29 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_num_flags_left18 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %29, i32 0, i32 13
  store i32 8, i32* %m_num_flags_left18, align 8, !tbaa !43
  %30 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf19 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %30, i32 0, i32 9
  %31 = load i8*, i8** %m_pLZ_code_buf19, align 8, !tbaa !41
  %incdec.ptr = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %incdec.ptr, i8** %m_pLZ_code_buf19, align 8, !tbaa !41
  %32 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_flags20 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %32, i32 0, i32 10
  store i8* %31, i8** %m_pLZ_flags20, align 8, !tbaa !42
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %33 = load i32, i32* %match_dist.addr, align 4, !tbaa !10
  %and21 = and i32 %33, 511
  %idxprom = zext i32 %and21 to i64
  %arrayidx22 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_sym, i64 0, i64 %idxprom
  %34 = load i8, i8* %arrayidx22, align 1, !tbaa !12
  %conv23 = zext i8 %34 to i32
  store i32 %conv23, i32* %s0, align 4, !tbaa !10
  %35 = load i32, i32* %match_dist.addr, align 4, !tbaa !10
  %shr24 = lshr i32 %35, 8
  %and25 = and i32 %shr24, 127
  %idxprom26 = zext i32 %and25 to i64
  %arrayidx27 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_sym, i64 0, i64 %idxprom26
  %36 = load i8, i8* %arrayidx27, align 1, !tbaa !12
  %conv28 = zext i8 %36 to i32
  store i32 %conv28, i32* %s1, align 4, !tbaa !10
  %37 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %37, i32 0, i32 36
  %arrayidx29 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 1
  %38 = load i32, i32* %match_dist.addr, align 4, !tbaa !10
  %cmp30 = icmp ult i32 %38, 512
  br i1 %cmp30, label %cond.true32, label %cond.false33

cond.true32:                                      ; preds = %if.end
  %39 = load i32, i32* %s0, align 4, !tbaa !10
  br label %cond.end34

cond.false33:                                     ; preds = %if.end
  %40 = load i32, i32* %s1, align 4, !tbaa !10
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond = phi i32 [ %39, %cond.true32 ], [ %40, %cond.false33 ]
  %idxprom35 = zext i32 %cond to i64
  %arrayidx36 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx29, i64 0, i64 %idxprom35
  %41 = load i16, i16* %arrayidx36, align 2, !tbaa !88
  %inc = add i16 %41, 1
  store i16 %inc, i16* %arrayidx36, align 2, !tbaa !88
  %42 = load i32, i32* %match_len.addr, align 4, !tbaa !10
  %cmp37 = icmp uge i32 %42, 3
  br i1 %cmp37, label %if.then39, label %if.end48

if.then39:                                        ; preds = %cond.end34
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count40 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %43, i32 0, i32 36
  %arrayidx41 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count40, i64 0, i64 0
  %44 = load i32, i32* %match_len.addr, align 4, !tbaa !10
  %sub42 = sub i32 %44, 3
  %idxprom43 = zext i32 %sub42 to i64
  %arrayidx44 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom43
  %45 = load i16, i16* %arrayidx44, align 2, !tbaa !88
  %idxprom45 = zext i16 %45 to i64
  %arrayidx46 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx41, i64 0, i64 %idxprom45
  %46 = load i16, i16* %arrayidx46, align 2, !tbaa !88
  %inc47 = add i16 %46, 1
  store i16 %inc47, i16* %arrayidx46, align 2, !tbaa !88
  br label %if.end48

if.end48:                                         ; preds = %if.then39, %cond.end34
  %47 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %47) #10
  %48 = bitcast i32* %s0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i16 @TDEFL_READ_UNALIGNED_WORD(i8* %p) #0 {
entry:
  %p.addr = alloca i8*, align 8
  %ret = alloca i16, align 2
  store i8* %p, i8** %p.addr, align 8, !tbaa !8
  %0 = bitcast i16* %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* %0) #10
  %1 = bitcast i16* %ret to i8*
  %2 = load i8*, i8** %p.addr, align 8, !tbaa !8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1, i8* align 1 %2, i64 2, i1 false)
  %3 = load i16, i16* %ret, align 2, !tbaa !88
  %4 = bitcast i16* %ret to i8*
  call void @llvm.lifetime.end.p0i8(i64 2, i8* %4) #10
  ret i16 %3
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @tdefl_compress_block(%struct.tdefl_compressor* %d, i32 %static_block) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %static_block.addr = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i32 %static_block, i32* %static_block.addr, align 4, !tbaa !10
  %0 = load i32, i32* %static_block.addr, align 4, !tbaa !10
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  call void @tdefl_start_static_block(%struct.tdefl_compressor* %1)
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  call void @tdefl_start_dynamic_block(%struct.tdefl_compressor* %2)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %call = call i32 @tdefl_compress_lz_codes(%struct.tdefl_compressor* %3)
  ret i32 %call
}

; Function Attrs: nounwind ssp uwtable
define internal void @tdefl_start_static_block(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i8** %p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %2, i32 0, i32 38
  %arrayidx = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes, i64 0, i64 0
  %arrayidx1 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx, i64 0, i64 0
  store i8* %arrayidx1, i8** %p, align 8, !tbaa !8
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !tbaa !10
  %cmp = icmp ule i32 %3, 143
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %p, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i8, i8* %4, i32 1
  store i8* %incdec.ptr, i8** %p, align 8, !tbaa !8
  store i8 8, i8* %4, align 1, !tbaa !12
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !tbaa !10
  %inc = add i32 %5, 1
  store i32 %inc, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc6, %for.end
  %6 = load i32, i32* %i, align 4, !tbaa !10
  %cmp3 = icmp ule i32 %6, 255
  br i1 %cmp3, label %for.body4, label %for.end8

for.body4:                                        ; preds = %for.cond2
  %7 = load i8*, i8** %p, align 8, !tbaa !8
  %incdec.ptr5 = getelementptr inbounds i8, i8* %7, i32 1
  store i8* %incdec.ptr5, i8** %p, align 8, !tbaa !8
  store i8 9, i8* %7, align 1, !tbaa !12
  br label %for.inc6

for.inc6:                                         ; preds = %for.body4
  %8 = load i32, i32* %i, align 4, !tbaa !10
  %inc7 = add i32 %8, 1
  store i32 %inc7, i32* %i, align 4, !tbaa !10
  br label %for.cond2

for.end8:                                         ; preds = %for.cond2
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc13, %for.end8
  %9 = load i32, i32* %i, align 4, !tbaa !10
  %cmp10 = icmp ule i32 %9, 279
  br i1 %cmp10, label %for.body11, label %for.end15

for.body11:                                       ; preds = %for.cond9
  %10 = load i8*, i8** %p, align 8, !tbaa !8
  %incdec.ptr12 = getelementptr inbounds i8, i8* %10, i32 1
  store i8* %incdec.ptr12, i8** %p, align 8, !tbaa !8
  store i8 7, i8* %10, align 1, !tbaa !12
  br label %for.inc13

for.inc13:                                        ; preds = %for.body11
  %11 = load i32, i32* %i, align 4, !tbaa !10
  %inc14 = add i32 %11, 1
  store i32 %inc14, i32* %i, align 4, !tbaa !10
  br label %for.cond9

for.end15:                                        ; preds = %for.cond9
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc20, %for.end15
  %12 = load i32, i32* %i, align 4, !tbaa !10
  %cmp17 = icmp ule i32 %12, 287
  br i1 %cmp17, label %for.body18, label %for.end22

for.body18:                                       ; preds = %for.cond16
  %13 = load i8*, i8** %p, align 8, !tbaa !8
  %incdec.ptr19 = getelementptr inbounds i8, i8* %13, i32 1
  store i8* %incdec.ptr19, i8** %p, align 8, !tbaa !8
  store i8 8, i8* %13, align 1, !tbaa !12
  br label %for.inc20

for.inc20:                                        ; preds = %for.body18
  %14 = load i32, i32* %i, align 4, !tbaa !10
  %inc21 = add i32 %14, 1
  store i32 %inc21, i32* %i, align 4, !tbaa !10
  br label %for.cond16

for.end22:                                        ; preds = %for.cond16
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes23 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 38
  %arrayidx24 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes23, i64 0, i64 1
  %arraydecay = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx24, i64 0, i64 0
  %16 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes25 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %16, i32 0, i32 38
  %arrayidx26 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes25, i64 0, i64 1
  %arraydecay27 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx26, i64 0, i64 0
  %17 = call i64 @llvm.objectsize.i64.p0i8(i8* %arraydecay27, i1 false, i1 true, i1 false)
  %call = call i8* @__memset_chk(i8* %arraydecay, i32 5, i64 32, i64 %17) #10
  %18 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %18, i32 0, i32 288, i32 15, i32 1)
  %19 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %19, i32 1, i32 32, i32 15, i32 1)
  br label %do.body

do.body:                                          ; preds = %for.end22
  %20 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %20) #10
  store i32 1, i32* %bits, align 4, !tbaa !10
  %21 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #10
  store i32 2, i32* %len, align 4, !tbaa !10
  %22 = load i32, i32* %bits, align 4, !tbaa !10
  %23 = load i32, i32* %len, align 4, !tbaa !10
  %shl = shl i32 1, %23
  %sub = sub i32 %shl, 1
  %cmp28 = icmp ule i32 %22, %sub
  %lnot = xor i1 %cmp28, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool = icmp ne i64 %expval, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  call void @__assert_rtn(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @__func__.tdefl_start_static_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1075, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

24:                                               ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %do.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %24
  %25 = load i32, i32* %bits, align 4, !tbaa !10
  %26 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %26, i32 0, i32 16
  %27 = load i32, i32* %m_bits_in, align 4, !tbaa !29
  %shl29 = shl i32 %25, %27
  %28 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %28, i32 0, i32 17
  %29 = load i32, i32* %m_bit_buffer, align 8, !tbaa !36
  %or = or i32 %29, %shl29
  store i32 %or, i32* %m_bit_buffer, align 8, !tbaa !36
  %30 = load i32, i32* %len, align 4, !tbaa !10
  %31 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in30 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %31, i32 0, i32 16
  %32 = load i32, i32* %m_bits_in30, align 4, !tbaa !29
  %add = add i32 %32, %30
  store i32 %add, i32* %m_bits_in30, align 4, !tbaa !29
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %33 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in31 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %33, i32 0, i32 16
  %34 = load i32, i32* %m_bits_in31, align 4, !tbaa !29
  %cmp32 = icmp uge i32 %34, 8
  br i1 %cmp32, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %35, i32 0, i32 11
  %36 = load i8*, i8** %m_pOutput_buf, align 8, !tbaa !44
  %37 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %37, i32 0, i32 12
  %38 = load i8*, i8** %m_pOutput_buf_end, align 8, !tbaa !45
  %cmp34 = icmp ult i8* %36, %38
  br i1 %cmp34, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %39 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer36 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %39, i32 0, i32 17
  %40 = load i32, i32* %m_bit_buffer36, align 8, !tbaa !36
  %conv37 = trunc i32 %40 to i8
  %41 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf38 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %41, i32 0, i32 11
  %42 = load i8*, i8** %m_pOutput_buf38, align 8, !tbaa !44
  %incdec.ptr39 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %incdec.ptr39, i8** %m_pOutput_buf38, align 8, !tbaa !44
  store i8 %conv37, i8* %42, align 1, !tbaa !12
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %43 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer40 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %43, i32 0, i32 17
  %44 = load i32, i32* %m_bit_buffer40, align 8, !tbaa !36
  %shr = lshr i32 %44, 8
  store i32 %shr, i32* %m_bit_buffer40, align 8, !tbaa !36
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in41 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 16
  %46 = load i32, i32* %m_bits_in41, align 4, !tbaa !29
  %sub42 = sub i32 %46, 8
  store i32 %sub42, i32* %m_bits_in41, align 4, !tbaa !29
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %47 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %47) #10
  %48 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %48) #10
  br label %do.cond

do.cond:                                          ; preds = %while.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %49 = bitcast i8** %p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %49) #10
  %50 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %50) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @tdefl_start_dynamic_block(%struct.tdefl_compressor* %d) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %num_lit_codes = alloca i32, align 4
  %num_dist_codes = alloca i32, align 4
  %num_bit_lengths = alloca i32, align 4
  %i = alloca i32, align 4
  %total_code_sizes_to_pack = alloca i32, align 4
  %num_packed_code_sizes = alloca i32, align 4
  %rle_z_count = alloca i32, align 4
  %rle_repeat_count = alloca i32, align 4
  %packed_code_sizes_index = alloca i32, align 4
  %code_sizes_to_pack = alloca [320 x i8], align 16
  %packed_code_sizes = alloca [320 x i8], align 16
  %prev_code_size = alloca i8, align 1
  %code_size = alloca i8, align 1
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits473 = alloca i32, align 4
  %len475 = alloca i32, align 4
  %bits517 = alloca i32, align 4
  %len519 = alloca i32, align 4
  %bits584 = alloca i32, align 4
  %len586 = alloca i32, align 4
  %bits632 = alloca i32, align 4
  %len640 = alloca i32, align 4
  %code = alloca i32, align 4
  %bits703 = alloca i32, align 4
  %len708 = alloca i32, align 4
  %bits758 = alloca i32, align 4
  %len763 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %0 = bitcast i32* %num_lit_codes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %num_dist_codes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i32* %num_bit_lengths to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = bitcast i32* %total_code_sizes_to_pack to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  %5 = bitcast i32* %num_packed_code_sizes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #10
  %6 = bitcast i32* %rle_z_count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %6) #10
  %7 = bitcast i32* %rle_repeat_count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %7) #10
  %8 = bitcast i32* %packed_code_sizes_index to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #10
  %9 = bitcast [320 x i8]* %code_sizes_to_pack to i8*
  call void @llvm.lifetime.start.p0i8(i64 320, i8* %9) #10
  %10 = bitcast [320 x i8]* %packed_code_sizes to i8*
  call void @llvm.lifetime.start.p0i8(i64 320, i8* %10) #10
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %prev_code_size) #10
  store i8 -1, i8* %prev_code_size, align 1, !tbaa !12
  %11 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %11, i32 0, i32 36
  %arrayidx = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 0
  %arrayidx1 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx, i64 0, i64 256
  store i16 1, i16* %arrayidx1, align 2, !tbaa !88
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %12, i32 0, i32 288, i32 15, i32 0)
  %13 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %13, i32 1, i32 32, i32 15, i32 0)
  store i32 286, i32* %num_lit_codes, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %num_lit_codes, align 4, !tbaa !10
  %cmp = icmp sgt i32 %14, 257
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %15, i32 0, i32 38
  %arrayidx2 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes, i64 0, i64 0
  %16 = load i32, i32* %num_lit_codes, align 4, !tbaa !10
  %sub = sub nsw i32 %16, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx3 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx2, i64 0, i64 %idxprom
  %17 = load i8, i8* %arrayidx3, align 1, !tbaa !12
  %tobool = icmp ne i8 %17, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %num_lit_codes, align 4, !tbaa !10
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %num_lit_codes, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  store i32 30, i32* %num_dist_codes, align 4, !tbaa !10
  br label %for.cond4

for.cond4:                                        ; preds = %for.inc15, %for.end
  %19 = load i32, i32* %num_dist_codes, align 4, !tbaa !10
  %cmp5 = icmp sgt i32 %19, 1
  br i1 %cmp5, label %for.body6, label %for.end17

for.body6:                                        ; preds = %for.cond4
  %20 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes7 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %20, i32 0, i32 38
  %arrayidx8 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes7, i64 0, i64 1
  %21 = load i32, i32* %num_dist_codes, align 4, !tbaa !10
  %sub9 = sub nsw i32 %21, 1
  %idxprom10 = sext i32 %sub9 to i64
  %arrayidx11 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx8, i64 0, i64 %idxprom10
  %22 = load i8, i8* %arrayidx11, align 1, !tbaa !12
  %tobool12 = icmp ne i8 %22, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %for.body6
  br label %for.end17

if.end14:                                         ; preds = %for.body6
  br label %for.inc15

for.inc15:                                        ; preds = %if.end14
  %23 = load i32, i32* %num_dist_codes, align 4, !tbaa !10
  %dec16 = add nsw i32 %23, -1
  store i32 %dec16, i32* %num_dist_codes, align 4, !tbaa !10
  br label %for.cond4

for.end17:                                        ; preds = %if.then13, %for.cond4
  %arraydecay = getelementptr inbounds [320 x i8], [320 x i8]* %code_sizes_to_pack, i64 0, i64 0
  %24 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes18 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %24, i32 0, i32 38
  %arrayidx19 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes18, i64 0, i64 0
  %arrayidx20 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx19, i64 0, i64 0
  %25 = load i32, i32* %num_lit_codes, align 4, !tbaa !10
  %conv = sext i32 %25 to i64
  %call = call i8* @__memcpy_chk(i8* %arraydecay, i8* %arrayidx20, i64 %conv, i64 320) #10
  %arraydecay21 = getelementptr inbounds [320 x i8], [320 x i8]* %code_sizes_to_pack, i64 0, i64 0
  %26 = load i32, i32* %num_lit_codes, align 4, !tbaa !10
  %idx.ext = sext i32 %26 to i64
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay21, i64 %idx.ext
  %27 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes22 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %27, i32 0, i32 38
  %arrayidx23 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes22, i64 0, i64 1
  %arrayidx24 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx23, i64 0, i64 0
  %28 = load i32, i32* %num_dist_codes, align 4, !tbaa !10
  %conv25 = sext i32 %28 to i64
  %arraydecay26 = getelementptr inbounds [320 x i8], [320 x i8]* %code_sizes_to_pack, i64 0, i64 0
  %29 = load i32, i32* %num_lit_codes, align 4, !tbaa !10
  %idx.ext27 = sext i32 %29 to i64
  %add.ptr28 = getelementptr inbounds i8, i8* %arraydecay26, i64 %idx.ext27
  %30 = call i64 @llvm.objectsize.i64.p0i8(i8* %add.ptr28, i1 false, i1 true, i1 false)
  %call29 = call i8* @__memcpy_chk(i8* %add.ptr, i8* %arrayidx24, i64 %conv25, i64 %30) #10
  %31 = load i32, i32* %num_lit_codes, align 4, !tbaa !10
  %32 = load i32, i32* %num_dist_codes, align 4, !tbaa !10
  %add = add nsw i32 %31, %32
  store i32 %add, i32* %total_code_sizes_to_pack, align 4, !tbaa !10
  store i32 0, i32* %num_packed_code_sizes, align 4, !tbaa !10
  store i32 0, i32* %rle_z_count, align 4, !tbaa !10
  store i32 0, i32* %rle_repeat_count, align 4, !tbaa !10
  %33 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count30 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %33, i32 0, i32 36
  %arrayidx31 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count30, i64 0, i64 2
  %arrayidx32 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx31, i64 0, i64 0
  %34 = bitcast i16* %arrayidx32 to i8*
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count33 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %35, i32 0, i32 36
  %arrayidx34 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count33, i64 0, i64 2
  %arrayidx35 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx34, i64 0, i64 0
  %36 = bitcast i16* %arrayidx35 to i8*
  %37 = call i64 @llvm.objectsize.i64.p0i8(i8* %36, i1 false, i1 true, i1 false)
  %call36 = call i8* @__memset_chk(i8* %34, i32 0, i64 38, i64 %37) #10
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc333, %for.end17
  %38 = load i32, i32* %i, align 4, !tbaa !10
  %39 = load i32, i32* %total_code_sizes_to_pack, align 4, !tbaa !10
  %cmp38 = icmp ult i32 %38, %39
  br i1 %cmp38, label %for.body40, label %for.end335

for.body40:                                       ; preds = %for.cond37
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %code_size) #10
  %40 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom41 = zext i32 %40 to i64
  %arrayidx42 = getelementptr inbounds [320 x i8], [320 x i8]* %code_sizes_to_pack, i64 0, i64 %idxprom41
  %41 = load i8, i8* %arrayidx42, align 1, !tbaa !12
  store i8 %41, i8* %code_size, align 1, !tbaa !12
  %42 = load i8, i8* %code_size, align 1, !tbaa !12
  %tobool43 = icmp ne i8 %42, 0
  br i1 %tobool43, label %if.else153, label %if.then44

if.then44:                                        ; preds = %for.body40
  %43 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool45 = icmp ne i32 %43, 0
  br i1 %tobool45, label %if.then46, label %if.end83

if.then46:                                        ; preds = %if.then44
  %44 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %cmp47 = icmp ult i32 %44, 3
  br i1 %cmp47, label %if.then49, label %if.else

if.then49:                                        ; preds = %if.then46
  %45 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count50 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %45, i32 0, i32 36
  %arrayidx51 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count50, i64 0, i64 2
  %46 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %idxprom52 = zext i8 %46 to i64
  %arrayidx53 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx51, i64 0, i64 %idxprom52
  %47 = load i16, i16* %arrayidx53, align 2, !tbaa !88
  %conv54 = zext i16 %47 to i32
  %48 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %add55 = add i32 %conv54, %48
  %conv56 = trunc i32 %add55 to i16
  %49 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count57 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %49, i32 0, i32 36
  %arrayidx58 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count57, i64 0, i64 2
  %50 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %idxprom59 = zext i8 %50 to i64
  %arrayidx60 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx58, i64 0, i64 %idxprom59
  store i16 %conv56, i16* %arrayidx60, align 2, !tbaa !88
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then49
  %51 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %dec61 = add i32 %51, -1
  store i32 %dec61, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool62 = icmp ne i32 %51, 0
  br i1 %tobool62, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %52 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %53 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc = add i32 %53, 1
  store i32 %inc, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom63 = zext i32 %53 to i64
  %arrayidx64 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom63
  store i8 %52, i8* %arrayidx64, align 1, !tbaa !12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end82

if.else:                                          ; preds = %if.then46
  %54 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count65 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %54, i32 0, i32 36
  %arrayidx66 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count65, i64 0, i64 2
  %arrayidx67 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx66, i64 0, i64 16
  %55 = load i16, i16* %arrayidx67, align 2, !tbaa !88
  %conv68 = zext i16 %55 to i32
  %add69 = add nsw i32 %conv68, 1
  %conv70 = trunc i32 %add69 to i16
  %56 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count71 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %56, i32 0, i32 36
  %arrayidx72 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count71, i64 0, i64 2
  %arrayidx73 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx72, i64 0, i64 16
  store i16 %conv70, i16* %arrayidx73, align 2, !tbaa !88
  %57 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc74 = add i32 %57, 1
  store i32 %inc74, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom75 = zext i32 %57 to i64
  %arrayidx76 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom75
  store i8 16, i8* %arrayidx76, align 1, !tbaa !12
  %58 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %sub77 = sub i32 %58, 3
  %conv78 = trunc i32 %sub77 to i8
  %59 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc79 = add i32 %59, 1
  store i32 %inc79, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom80 = zext i32 %59 to i64
  %arrayidx81 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom80
  store i8 %conv78, i8* %arrayidx81, align 1, !tbaa !12
  br label %if.end82

if.end82:                                         ; preds = %if.else, %while.end
  store i32 0, i32* %rle_repeat_count, align 4, !tbaa !10
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then44
  %60 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %inc84 = add i32 %60, 1
  store i32 %inc84, i32* %rle_z_count, align 4, !tbaa !10
  %cmp85 = icmp eq i32 %inc84, 138
  br i1 %cmp85, label %if.then87, label %if.end152

if.then87:                                        ; preds = %if.end83
  %61 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %tobool88 = icmp ne i32 %61, 0
  br i1 %tobool88, label %if.then89, label %if.end151

if.then89:                                        ; preds = %if.then87
  %62 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %cmp90 = icmp ult i32 %62, 3
  br i1 %cmp90, label %if.then92, label %if.else110

if.then92:                                        ; preds = %if.then89
  %63 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count93 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %63, i32 0, i32 36
  %arrayidx94 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count93, i64 0, i64 2
  %arrayidx95 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx94, i64 0, i64 0
  %64 = load i16, i16* %arrayidx95, align 2, !tbaa !88
  %conv96 = zext i16 %64 to i32
  %65 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %add97 = add i32 %conv96, %65
  %conv98 = trunc i32 %add97 to i16
  %66 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count99 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %66, i32 0, i32 36
  %arrayidx100 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count99, i64 0, i64 2
  %arrayidx101 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx100, i64 0, i64 0
  store i16 %conv98, i16* %arrayidx101, align 2, !tbaa !88
  br label %while.cond102

while.cond102:                                    ; preds = %while.body105, %if.then92
  %67 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %dec103 = add i32 %67, -1
  store i32 %dec103, i32* %rle_z_count, align 4, !tbaa !10
  %tobool104 = icmp ne i32 %67, 0
  br i1 %tobool104, label %while.body105, label %while.end109

while.body105:                                    ; preds = %while.cond102
  %68 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc106 = add i32 %68, 1
  store i32 %inc106, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom107 = zext i32 %68 to i64
  %arrayidx108 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom107
  store i8 0, i8* %arrayidx108, align 1, !tbaa !12
  br label %while.cond102

while.end109:                                     ; preds = %while.cond102
  br label %if.end150

if.else110:                                       ; preds = %if.then89
  %69 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %cmp111 = icmp ule i32 %69, 10
  br i1 %cmp111, label %if.then113, label %if.else131

if.then113:                                       ; preds = %if.else110
  %70 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count114 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %70, i32 0, i32 36
  %arrayidx115 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count114, i64 0, i64 2
  %arrayidx116 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx115, i64 0, i64 17
  %71 = load i16, i16* %arrayidx116, align 2, !tbaa !88
  %conv117 = zext i16 %71 to i32
  %add118 = add nsw i32 %conv117, 1
  %conv119 = trunc i32 %add118 to i16
  %72 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count120 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %72, i32 0, i32 36
  %arrayidx121 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count120, i64 0, i64 2
  %arrayidx122 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx121, i64 0, i64 17
  store i16 %conv119, i16* %arrayidx122, align 2, !tbaa !88
  %73 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc123 = add i32 %73, 1
  store i32 %inc123, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom124 = zext i32 %73 to i64
  %arrayidx125 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom124
  store i8 17, i8* %arrayidx125, align 1, !tbaa !12
  %74 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %sub126 = sub i32 %74, 3
  %conv127 = trunc i32 %sub126 to i8
  %75 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc128 = add i32 %75, 1
  store i32 %inc128, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom129 = zext i32 %75 to i64
  %arrayidx130 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom129
  store i8 %conv127, i8* %arrayidx130, align 1, !tbaa !12
  br label %if.end149

if.else131:                                       ; preds = %if.else110
  %76 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count132 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %76, i32 0, i32 36
  %arrayidx133 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count132, i64 0, i64 2
  %arrayidx134 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx133, i64 0, i64 18
  %77 = load i16, i16* %arrayidx134, align 2, !tbaa !88
  %conv135 = zext i16 %77 to i32
  %add136 = add nsw i32 %conv135, 1
  %conv137 = trunc i32 %add136 to i16
  %78 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count138 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %78, i32 0, i32 36
  %arrayidx139 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count138, i64 0, i64 2
  %arrayidx140 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx139, i64 0, i64 18
  store i16 %conv137, i16* %arrayidx140, align 2, !tbaa !88
  %79 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc141 = add i32 %79, 1
  store i32 %inc141, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom142 = zext i32 %79 to i64
  %arrayidx143 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom142
  store i8 18, i8* %arrayidx143, align 1, !tbaa !12
  %80 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %sub144 = sub i32 %80, 11
  %conv145 = trunc i32 %sub144 to i8
  %81 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc146 = add i32 %81, 1
  store i32 %inc146, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom147 = zext i32 %81 to i64
  %arrayidx148 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom147
  store i8 %conv145, i8* %arrayidx148, align 1, !tbaa !12
  br label %if.end149

if.end149:                                        ; preds = %if.else131, %if.then113
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %while.end109
  store i32 0, i32* %rle_z_count, align 4, !tbaa !10
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.then87
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %if.end83
  br label %if.end332

if.else153:                                       ; preds = %for.body40
  %82 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %tobool154 = icmp ne i32 %82, 0
  br i1 %tobool154, label %if.then155, label %if.end217

if.then155:                                       ; preds = %if.else153
  %83 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %cmp156 = icmp ult i32 %83, 3
  br i1 %cmp156, label %if.then158, label %if.else176

if.then158:                                       ; preds = %if.then155
  %84 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count159 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %84, i32 0, i32 36
  %arrayidx160 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count159, i64 0, i64 2
  %arrayidx161 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx160, i64 0, i64 0
  %85 = load i16, i16* %arrayidx161, align 2, !tbaa !88
  %conv162 = zext i16 %85 to i32
  %86 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %add163 = add i32 %conv162, %86
  %conv164 = trunc i32 %add163 to i16
  %87 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count165 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %87, i32 0, i32 36
  %arrayidx166 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count165, i64 0, i64 2
  %arrayidx167 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx166, i64 0, i64 0
  store i16 %conv164, i16* %arrayidx167, align 2, !tbaa !88
  br label %while.cond168

while.cond168:                                    ; preds = %while.body171, %if.then158
  %88 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %dec169 = add i32 %88, -1
  store i32 %dec169, i32* %rle_z_count, align 4, !tbaa !10
  %tobool170 = icmp ne i32 %88, 0
  br i1 %tobool170, label %while.body171, label %while.end175

while.body171:                                    ; preds = %while.cond168
  %89 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc172 = add i32 %89, 1
  store i32 %inc172, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom173 = zext i32 %89 to i64
  %arrayidx174 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom173
  store i8 0, i8* %arrayidx174, align 1, !tbaa !12
  br label %while.cond168

while.end175:                                     ; preds = %while.cond168
  br label %if.end216

if.else176:                                       ; preds = %if.then155
  %90 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %cmp177 = icmp ule i32 %90, 10
  br i1 %cmp177, label %if.then179, label %if.else197

if.then179:                                       ; preds = %if.else176
  %91 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count180 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %91, i32 0, i32 36
  %arrayidx181 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count180, i64 0, i64 2
  %arrayidx182 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx181, i64 0, i64 17
  %92 = load i16, i16* %arrayidx182, align 2, !tbaa !88
  %conv183 = zext i16 %92 to i32
  %add184 = add nsw i32 %conv183, 1
  %conv185 = trunc i32 %add184 to i16
  %93 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count186 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %93, i32 0, i32 36
  %arrayidx187 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count186, i64 0, i64 2
  %arrayidx188 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx187, i64 0, i64 17
  store i16 %conv185, i16* %arrayidx188, align 2, !tbaa !88
  %94 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc189 = add i32 %94, 1
  store i32 %inc189, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom190 = zext i32 %94 to i64
  %arrayidx191 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom190
  store i8 17, i8* %arrayidx191, align 1, !tbaa !12
  %95 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %sub192 = sub i32 %95, 3
  %conv193 = trunc i32 %sub192 to i8
  %96 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc194 = add i32 %96, 1
  store i32 %inc194, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom195 = zext i32 %96 to i64
  %arrayidx196 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom195
  store i8 %conv193, i8* %arrayidx196, align 1, !tbaa !12
  br label %if.end215

if.else197:                                       ; preds = %if.else176
  %97 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count198 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %97, i32 0, i32 36
  %arrayidx199 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count198, i64 0, i64 2
  %arrayidx200 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx199, i64 0, i64 18
  %98 = load i16, i16* %arrayidx200, align 2, !tbaa !88
  %conv201 = zext i16 %98 to i32
  %add202 = add nsw i32 %conv201, 1
  %conv203 = trunc i32 %add202 to i16
  %99 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count204 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %99, i32 0, i32 36
  %arrayidx205 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count204, i64 0, i64 2
  %arrayidx206 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx205, i64 0, i64 18
  store i16 %conv203, i16* %arrayidx206, align 2, !tbaa !88
  %100 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc207 = add i32 %100, 1
  store i32 %inc207, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom208 = zext i32 %100 to i64
  %arrayidx209 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom208
  store i8 18, i8* %arrayidx209, align 1, !tbaa !12
  %101 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %sub210 = sub i32 %101, 11
  %conv211 = trunc i32 %sub210 to i8
  %102 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc212 = add i32 %102, 1
  store i32 %inc212, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom213 = zext i32 %102 to i64
  %arrayidx214 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom213
  store i8 %conv211, i8* %arrayidx214, align 1, !tbaa !12
  br label %if.end215

if.end215:                                        ; preds = %if.else197, %if.then179
  br label %if.end216

if.end216:                                        ; preds = %if.end215, %while.end175
  store i32 0, i32* %rle_z_count, align 4, !tbaa !10
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %if.else153
  %103 = load i8, i8* %code_size, align 1, !tbaa !12
  %conv218 = zext i8 %103 to i32
  %104 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %conv219 = zext i8 %104 to i32
  %cmp220 = icmp ne i32 %conv218, %conv219
  br i1 %cmp220, label %if.then222, label %if.else281

if.then222:                                       ; preds = %if.end217
  %105 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool223 = icmp ne i32 %105, 0
  br i1 %tobool223, label %if.then224, label %if.end266

if.then224:                                       ; preds = %if.then222
  %106 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %cmp225 = icmp ult i32 %106, 3
  br i1 %cmp225, label %if.then227, label %if.else247

if.then227:                                       ; preds = %if.then224
  %107 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count228 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %107, i32 0, i32 36
  %arrayidx229 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count228, i64 0, i64 2
  %108 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %idxprom230 = zext i8 %108 to i64
  %arrayidx231 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx229, i64 0, i64 %idxprom230
  %109 = load i16, i16* %arrayidx231, align 2, !tbaa !88
  %conv232 = zext i16 %109 to i32
  %110 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %add233 = add i32 %conv232, %110
  %conv234 = trunc i32 %add233 to i16
  %111 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count235 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %111, i32 0, i32 36
  %arrayidx236 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count235, i64 0, i64 2
  %112 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %idxprom237 = zext i8 %112 to i64
  %arrayidx238 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx236, i64 0, i64 %idxprom237
  store i16 %conv234, i16* %arrayidx238, align 2, !tbaa !88
  br label %while.cond239

while.cond239:                                    ; preds = %while.body242, %if.then227
  %113 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %dec240 = add i32 %113, -1
  store i32 %dec240, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool241 = icmp ne i32 %113, 0
  br i1 %tobool241, label %while.body242, label %while.end246

while.body242:                                    ; preds = %while.cond239
  %114 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %115 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc243 = add i32 %115, 1
  store i32 %inc243, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom244 = zext i32 %115 to i64
  %arrayidx245 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom244
  store i8 %114, i8* %arrayidx245, align 1, !tbaa !12
  br label %while.cond239

while.end246:                                     ; preds = %while.cond239
  br label %if.end265

if.else247:                                       ; preds = %if.then224
  %116 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count248 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %116, i32 0, i32 36
  %arrayidx249 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count248, i64 0, i64 2
  %arrayidx250 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx249, i64 0, i64 16
  %117 = load i16, i16* %arrayidx250, align 2, !tbaa !88
  %conv251 = zext i16 %117 to i32
  %add252 = add nsw i32 %conv251, 1
  %conv253 = trunc i32 %add252 to i16
  %118 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count254 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %118, i32 0, i32 36
  %arrayidx255 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count254, i64 0, i64 2
  %arrayidx256 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx255, i64 0, i64 16
  store i16 %conv253, i16* %arrayidx256, align 2, !tbaa !88
  %119 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc257 = add i32 %119, 1
  store i32 %inc257, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom258 = zext i32 %119 to i64
  %arrayidx259 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom258
  store i8 16, i8* %arrayidx259, align 1, !tbaa !12
  %120 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %sub260 = sub i32 %120, 3
  %conv261 = trunc i32 %sub260 to i8
  %121 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc262 = add i32 %121, 1
  store i32 %inc262, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom263 = zext i32 %121 to i64
  %arrayidx264 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom263
  store i8 %conv261, i8* %arrayidx264, align 1, !tbaa !12
  br label %if.end265

if.end265:                                        ; preds = %if.else247, %while.end246
  store i32 0, i32* %rle_repeat_count, align 4, !tbaa !10
  br label %if.end266

if.end266:                                        ; preds = %if.end265, %if.then222
  %122 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count267 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %122, i32 0, i32 36
  %arrayidx268 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count267, i64 0, i64 2
  %123 = load i8, i8* %code_size, align 1, !tbaa !12
  %idxprom269 = zext i8 %123 to i64
  %arrayidx270 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx268, i64 0, i64 %idxprom269
  %124 = load i16, i16* %arrayidx270, align 2, !tbaa !88
  %conv271 = zext i16 %124 to i32
  %add272 = add nsw i32 %conv271, 1
  %conv273 = trunc i32 %add272 to i16
  %125 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count274 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %125, i32 0, i32 36
  %arrayidx275 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count274, i64 0, i64 2
  %126 = load i8, i8* %code_size, align 1, !tbaa !12
  %idxprom276 = zext i8 %126 to i64
  %arrayidx277 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx275, i64 0, i64 %idxprom276
  store i16 %conv273, i16* %arrayidx277, align 2, !tbaa !88
  %127 = load i8, i8* %code_size, align 1, !tbaa !12
  %128 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc278 = add i32 %128, 1
  store i32 %inc278, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom279 = zext i32 %128 to i64
  %arrayidx280 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom279
  store i8 %127, i8* %arrayidx280, align 1, !tbaa !12
  br label %if.end331

if.else281:                                       ; preds = %if.end217
  %129 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %inc282 = add i32 %129, 1
  store i32 %inc282, i32* %rle_repeat_count, align 4, !tbaa !10
  %cmp283 = icmp eq i32 %inc282, 6
  br i1 %cmp283, label %if.then285, label %if.end330

if.then285:                                       ; preds = %if.else281
  %130 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool286 = icmp ne i32 %130, 0
  br i1 %tobool286, label %if.then287, label %if.end329

if.then287:                                       ; preds = %if.then285
  %131 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %cmp288 = icmp ult i32 %131, 3
  br i1 %cmp288, label %if.then290, label %if.else310

if.then290:                                       ; preds = %if.then287
  %132 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count291 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %132, i32 0, i32 36
  %arrayidx292 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count291, i64 0, i64 2
  %133 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %idxprom293 = zext i8 %133 to i64
  %arrayidx294 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx292, i64 0, i64 %idxprom293
  %134 = load i16, i16* %arrayidx294, align 2, !tbaa !88
  %conv295 = zext i16 %134 to i32
  %135 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %add296 = add i32 %conv295, %135
  %conv297 = trunc i32 %add296 to i16
  %136 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count298 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %136, i32 0, i32 36
  %arrayidx299 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count298, i64 0, i64 2
  %137 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %idxprom300 = zext i8 %137 to i64
  %arrayidx301 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx299, i64 0, i64 %idxprom300
  store i16 %conv297, i16* %arrayidx301, align 2, !tbaa !88
  br label %while.cond302

while.cond302:                                    ; preds = %while.body305, %if.then290
  %138 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %dec303 = add i32 %138, -1
  store i32 %dec303, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool304 = icmp ne i32 %138, 0
  br i1 %tobool304, label %while.body305, label %while.end309

while.body305:                                    ; preds = %while.cond302
  %139 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %140 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc306 = add i32 %140, 1
  store i32 %inc306, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom307 = zext i32 %140 to i64
  %arrayidx308 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom307
  store i8 %139, i8* %arrayidx308, align 1, !tbaa !12
  br label %while.cond302

while.end309:                                     ; preds = %while.cond302
  br label %if.end328

if.else310:                                       ; preds = %if.then287
  %141 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count311 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %141, i32 0, i32 36
  %arrayidx312 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count311, i64 0, i64 2
  %arrayidx313 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx312, i64 0, i64 16
  %142 = load i16, i16* %arrayidx313, align 2, !tbaa !88
  %conv314 = zext i16 %142 to i32
  %add315 = add nsw i32 %conv314, 1
  %conv316 = trunc i32 %add315 to i16
  %143 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count317 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %143, i32 0, i32 36
  %arrayidx318 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count317, i64 0, i64 2
  %arrayidx319 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx318, i64 0, i64 16
  store i16 %conv316, i16* %arrayidx319, align 2, !tbaa !88
  %144 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc320 = add i32 %144, 1
  store i32 %inc320, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom321 = zext i32 %144 to i64
  %arrayidx322 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom321
  store i8 16, i8* %arrayidx322, align 1, !tbaa !12
  %145 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %sub323 = sub i32 %145, 3
  %conv324 = trunc i32 %sub323 to i8
  %146 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc325 = add i32 %146, 1
  store i32 %inc325, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom326 = zext i32 %146 to i64
  %arrayidx327 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom326
  store i8 %conv324, i8* %arrayidx327, align 1, !tbaa !12
  br label %if.end328

if.end328:                                        ; preds = %if.else310, %while.end309
  store i32 0, i32* %rle_repeat_count, align 4, !tbaa !10
  br label %if.end329

if.end329:                                        ; preds = %if.end328, %if.then285
  br label %if.end330

if.end330:                                        ; preds = %if.end329, %if.else281
  br label %if.end331

if.end331:                                        ; preds = %if.end330, %if.end266
  br label %if.end332

if.end332:                                        ; preds = %if.end331, %if.end152
  %147 = load i8, i8* %code_size, align 1, !tbaa !12
  store i8 %147, i8* %prev_code_size, align 1, !tbaa !12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %code_size) #10
  br label %for.inc333

for.inc333:                                       ; preds = %if.end332
  %148 = load i32, i32* %i, align 4, !tbaa !10
  %inc334 = add i32 %148, 1
  store i32 %inc334, i32* %i, align 4, !tbaa !10
  br label %for.cond37

for.end335:                                       ; preds = %for.cond37
  %149 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool336 = icmp ne i32 %149, 0
  br i1 %tobool336, label %if.then337, label %if.else382

if.then337:                                       ; preds = %for.end335
  %150 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool338 = icmp ne i32 %150, 0
  br i1 %tobool338, label %if.then339, label %if.end381

if.then339:                                       ; preds = %if.then337
  %151 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %cmp340 = icmp ult i32 %151, 3
  br i1 %cmp340, label %if.then342, label %if.else362

if.then342:                                       ; preds = %if.then339
  %152 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count343 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %152, i32 0, i32 36
  %arrayidx344 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count343, i64 0, i64 2
  %153 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %idxprom345 = zext i8 %153 to i64
  %arrayidx346 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx344, i64 0, i64 %idxprom345
  %154 = load i16, i16* %arrayidx346, align 2, !tbaa !88
  %conv347 = zext i16 %154 to i32
  %155 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %add348 = add i32 %conv347, %155
  %conv349 = trunc i32 %add348 to i16
  %156 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count350 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %156, i32 0, i32 36
  %arrayidx351 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count350, i64 0, i64 2
  %157 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %idxprom352 = zext i8 %157 to i64
  %arrayidx353 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx351, i64 0, i64 %idxprom352
  store i16 %conv349, i16* %arrayidx353, align 2, !tbaa !88
  br label %while.cond354

while.cond354:                                    ; preds = %while.body357, %if.then342
  %158 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %dec355 = add i32 %158, -1
  store i32 %dec355, i32* %rle_repeat_count, align 4, !tbaa !10
  %tobool356 = icmp ne i32 %158, 0
  br i1 %tobool356, label %while.body357, label %while.end361

while.body357:                                    ; preds = %while.cond354
  %159 = load i8, i8* %prev_code_size, align 1, !tbaa !12
  %160 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc358 = add i32 %160, 1
  store i32 %inc358, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom359 = zext i32 %160 to i64
  %arrayidx360 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom359
  store i8 %159, i8* %arrayidx360, align 1, !tbaa !12
  br label %while.cond354

while.end361:                                     ; preds = %while.cond354
  br label %if.end380

if.else362:                                       ; preds = %if.then339
  %161 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count363 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %161, i32 0, i32 36
  %arrayidx364 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count363, i64 0, i64 2
  %arrayidx365 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx364, i64 0, i64 16
  %162 = load i16, i16* %arrayidx365, align 2, !tbaa !88
  %conv366 = zext i16 %162 to i32
  %add367 = add nsw i32 %conv366, 1
  %conv368 = trunc i32 %add367 to i16
  %163 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count369 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %163, i32 0, i32 36
  %arrayidx370 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count369, i64 0, i64 2
  %arrayidx371 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx370, i64 0, i64 16
  store i16 %conv368, i16* %arrayidx371, align 2, !tbaa !88
  %164 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc372 = add i32 %164, 1
  store i32 %inc372, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom373 = zext i32 %164 to i64
  %arrayidx374 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom373
  store i8 16, i8* %arrayidx374, align 1, !tbaa !12
  %165 = load i32, i32* %rle_repeat_count, align 4, !tbaa !10
  %sub375 = sub i32 %165, 3
  %conv376 = trunc i32 %sub375 to i8
  %166 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc377 = add i32 %166, 1
  store i32 %inc377, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom378 = zext i32 %166 to i64
  %arrayidx379 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom378
  store i8 %conv376, i8* %arrayidx379, align 1, !tbaa !12
  br label %if.end380

if.end380:                                        ; preds = %if.else362, %while.end361
  store i32 0, i32* %rle_repeat_count, align 4, !tbaa !10
  br label %if.end381

if.end381:                                        ; preds = %if.end380, %if.then337
  br label %if.end447

if.else382:                                       ; preds = %for.end335
  %167 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %tobool383 = icmp ne i32 %167, 0
  br i1 %tobool383, label %if.then384, label %if.end446

if.then384:                                       ; preds = %if.else382
  %168 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %cmp385 = icmp ult i32 %168, 3
  br i1 %cmp385, label %if.then387, label %if.else405

if.then387:                                       ; preds = %if.then384
  %169 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count388 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %169, i32 0, i32 36
  %arrayidx389 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count388, i64 0, i64 2
  %arrayidx390 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx389, i64 0, i64 0
  %170 = load i16, i16* %arrayidx390, align 2, !tbaa !88
  %conv391 = zext i16 %170 to i32
  %171 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %add392 = add i32 %conv391, %171
  %conv393 = trunc i32 %add392 to i16
  %172 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count394 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %172, i32 0, i32 36
  %arrayidx395 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count394, i64 0, i64 2
  %arrayidx396 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx395, i64 0, i64 0
  store i16 %conv393, i16* %arrayidx396, align 2, !tbaa !88
  br label %while.cond397

while.cond397:                                    ; preds = %while.body400, %if.then387
  %173 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %dec398 = add i32 %173, -1
  store i32 %dec398, i32* %rle_z_count, align 4, !tbaa !10
  %tobool399 = icmp ne i32 %173, 0
  br i1 %tobool399, label %while.body400, label %while.end404

while.body400:                                    ; preds = %while.cond397
  %174 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc401 = add i32 %174, 1
  store i32 %inc401, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom402 = zext i32 %174 to i64
  %arrayidx403 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom402
  store i8 0, i8* %arrayidx403, align 1, !tbaa !12
  br label %while.cond397

while.end404:                                     ; preds = %while.cond397
  br label %if.end445

if.else405:                                       ; preds = %if.then384
  %175 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %cmp406 = icmp ule i32 %175, 10
  br i1 %cmp406, label %if.then408, label %if.else426

if.then408:                                       ; preds = %if.else405
  %176 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count409 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %176, i32 0, i32 36
  %arrayidx410 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count409, i64 0, i64 2
  %arrayidx411 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx410, i64 0, i64 17
  %177 = load i16, i16* %arrayidx411, align 2, !tbaa !88
  %conv412 = zext i16 %177 to i32
  %add413 = add nsw i32 %conv412, 1
  %conv414 = trunc i32 %add413 to i16
  %178 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count415 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %178, i32 0, i32 36
  %arrayidx416 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count415, i64 0, i64 2
  %arrayidx417 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx416, i64 0, i64 17
  store i16 %conv414, i16* %arrayidx417, align 2, !tbaa !88
  %179 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc418 = add i32 %179, 1
  store i32 %inc418, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom419 = zext i32 %179 to i64
  %arrayidx420 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom419
  store i8 17, i8* %arrayidx420, align 1, !tbaa !12
  %180 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %sub421 = sub i32 %180, 3
  %conv422 = trunc i32 %sub421 to i8
  %181 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc423 = add i32 %181, 1
  store i32 %inc423, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom424 = zext i32 %181 to i64
  %arrayidx425 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom424
  store i8 %conv422, i8* %arrayidx425, align 1, !tbaa !12
  br label %if.end444

if.else426:                                       ; preds = %if.else405
  %182 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count427 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %182, i32 0, i32 36
  %arrayidx428 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count427, i64 0, i64 2
  %arrayidx429 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx428, i64 0, i64 18
  %183 = load i16, i16* %arrayidx429, align 2, !tbaa !88
  %conv430 = zext i16 %183 to i32
  %add431 = add nsw i32 %conv430, 1
  %conv432 = trunc i32 %add431 to i16
  %184 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count433 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %184, i32 0, i32 36
  %arrayidx434 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count433, i64 0, i64 2
  %arrayidx435 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx434, i64 0, i64 18
  store i16 %conv432, i16* %arrayidx435, align 2, !tbaa !88
  %185 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc436 = add i32 %185, 1
  store i32 %inc436, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom437 = zext i32 %185 to i64
  %arrayidx438 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom437
  store i8 18, i8* %arrayidx438, align 1, !tbaa !12
  %186 = load i32, i32* %rle_z_count, align 4, !tbaa !10
  %sub439 = sub i32 %186, 11
  %conv440 = trunc i32 %sub439 to i8
  %187 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %inc441 = add i32 %187, 1
  store i32 %inc441, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %idxprom442 = zext i32 %187 to i64
  %arrayidx443 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom442
  store i8 %conv440, i8* %arrayidx443, align 1, !tbaa !12
  br label %if.end444

if.end444:                                        ; preds = %if.else426, %if.then408
  br label %if.end445

if.end445:                                        ; preds = %if.end444, %while.end404
  store i32 0, i32* %rle_z_count, align 4, !tbaa !10
  br label %if.end446

if.end446:                                        ; preds = %if.end445, %if.else382
  br label %if.end447

if.end447:                                        ; preds = %if.end446, %if.end381
  %188 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  call void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %188, i32 2, i32 19, i32 7, i32 0)
  br label %do.body

do.body:                                          ; preds = %if.end447
  %189 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %189) #10
  store i32 2, i32* %bits, align 4, !tbaa !10
  %190 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %190) #10
  store i32 2, i32* %len, align 4, !tbaa !10
  %191 = load i32, i32* %bits, align 4, !tbaa !10
  %192 = load i32, i32* %len, align 4, !tbaa !10
  %shl = shl i32 1, %192
  %sub448 = sub i32 %shl, 1
  %cmp449 = icmp ule i32 %191, %sub448
  %lnot = xor i1 %cmp449, true
  %lnot.ext = zext i1 %lnot to i32
  %conv451 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv451, i64 0)
  %tobool452 = icmp ne i64 %expval, 0
  br i1 %tobool452, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1033, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

193:                                              ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %do.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %193
  %194 = load i32, i32* %bits, align 4, !tbaa !10
  %195 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %195, i32 0, i32 16
  %196 = load i32, i32* %m_bits_in, align 4, !tbaa !29
  %shl453 = shl i32 %194, %196
  %197 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %197, i32 0, i32 17
  %198 = load i32, i32* %m_bit_buffer, align 8, !tbaa !36
  %or = or i32 %198, %shl453
  store i32 %or, i32* %m_bit_buffer, align 8, !tbaa !36
  %199 = load i32, i32* %len, align 4, !tbaa !10
  %200 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in454 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %200, i32 0, i32 16
  %201 = load i32, i32* %m_bits_in454, align 4, !tbaa !29
  %add455 = add i32 %201, %199
  store i32 %add455, i32* %m_bits_in454, align 4, !tbaa !29
  br label %while.cond456

while.cond456:                                    ; preds = %if.end467, %cond.end
  %202 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in457 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %202, i32 0, i32 16
  %203 = load i32, i32* %m_bits_in457, align 4, !tbaa !29
  %cmp458 = icmp uge i32 %203, 8
  br i1 %cmp458, label %while.body460, label %while.end471

while.body460:                                    ; preds = %while.cond456
  %204 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %204, i32 0, i32 11
  %205 = load i8*, i8** %m_pOutput_buf, align 8, !tbaa !44
  %206 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %206, i32 0, i32 12
  %207 = load i8*, i8** %m_pOutput_buf_end, align 8, !tbaa !45
  %cmp461 = icmp ult i8* %205, %207
  br i1 %cmp461, label %if.then463, label %if.end467

if.then463:                                       ; preds = %while.body460
  %208 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer464 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %208, i32 0, i32 17
  %209 = load i32, i32* %m_bit_buffer464, align 8, !tbaa !36
  %conv465 = trunc i32 %209 to i8
  %210 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf466 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %210, i32 0, i32 11
  %211 = load i8*, i8** %m_pOutput_buf466, align 8, !tbaa !44
  %incdec.ptr = getelementptr inbounds i8, i8* %211, i32 1
  store i8* %incdec.ptr, i8** %m_pOutput_buf466, align 8, !tbaa !44
  store i8 %conv465, i8* %211, align 1, !tbaa !12
  br label %if.end467

if.end467:                                        ; preds = %if.then463, %while.body460
  %212 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer468 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %212, i32 0, i32 17
  %213 = load i32, i32* %m_bit_buffer468, align 8, !tbaa !36
  %shr = lshr i32 %213, 8
  store i32 %shr, i32* %m_bit_buffer468, align 8, !tbaa !36
  %214 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in469 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %214, i32 0, i32 16
  %215 = load i32, i32* %m_bits_in469, align 4, !tbaa !29
  %sub470 = sub i32 %215, 8
  store i32 %sub470, i32* %m_bits_in469, align 4, !tbaa !29
  br label %while.cond456

while.end471:                                     ; preds = %while.cond456
  %216 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %216) #10
  %217 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %217) #10
  br label %do.cond

do.cond:                                          ; preds = %while.end471
  br label %do.end

do.end:                                           ; preds = %do.cond
  br label %do.body472

do.body472:                                       ; preds = %do.end
  %218 = bitcast i32* %bits473 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %218) #10
  %219 = load i32, i32* %num_lit_codes, align 4, !tbaa !10
  %sub474 = sub nsw i32 %219, 257
  store i32 %sub474, i32* %bits473, align 4, !tbaa !10
  %220 = bitcast i32* %len475 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %220) #10
  store i32 5, i32* %len475, align 4, !tbaa !10
  %221 = load i32, i32* %bits473, align 4, !tbaa !10
  %222 = load i32, i32* %len475, align 4, !tbaa !10
  %shl476 = shl i32 1, %222
  %sub477 = sub i32 %shl476, 1
  %cmp478 = icmp ule i32 %221, %sub477
  %lnot480 = xor i1 %cmp478, true
  %lnot.ext481 = zext i1 %lnot480 to i32
  %conv482 = sext i32 %lnot.ext481 to i64
  %expval483 = call i64 @llvm.expect.i64(i64 %conv482, i64 0)
  %tobool484 = icmp ne i64 %expval483, 0
  br i1 %tobool484, label %cond.true485, label %cond.false486

cond.true485:                                     ; preds = %do.body472
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1035, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

223:                                              ; No predecessors!
  br label %cond.end487

cond.false486:                                    ; preds = %do.body472
  br label %cond.end487

cond.end487:                                      ; preds = %cond.false486, %223
  %224 = load i32, i32* %bits473, align 4, !tbaa !10
  %225 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in488 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %225, i32 0, i32 16
  %226 = load i32, i32* %m_bits_in488, align 4, !tbaa !29
  %shl489 = shl i32 %224, %226
  %227 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer490 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %227, i32 0, i32 17
  %228 = load i32, i32* %m_bit_buffer490, align 8, !tbaa !36
  %or491 = or i32 %228, %shl489
  store i32 %or491, i32* %m_bit_buffer490, align 8, !tbaa !36
  %229 = load i32, i32* %len475, align 4, !tbaa !10
  %230 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in492 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %230, i32 0, i32 16
  %231 = load i32, i32* %m_bits_in492, align 4, !tbaa !29
  %add493 = add i32 %231, %229
  store i32 %add493, i32* %m_bits_in492, align 4, !tbaa !29
  br label %while.cond494

while.cond494:                                    ; preds = %if.end508, %cond.end487
  %232 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in495 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %232, i32 0, i32 16
  %233 = load i32, i32* %m_bits_in495, align 4, !tbaa !29
  %cmp496 = icmp uge i32 %233, 8
  br i1 %cmp496, label %while.body498, label %while.end513

while.body498:                                    ; preds = %while.cond494
  %234 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf499 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %234, i32 0, i32 11
  %235 = load i8*, i8** %m_pOutput_buf499, align 8, !tbaa !44
  %236 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end500 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %236, i32 0, i32 12
  %237 = load i8*, i8** %m_pOutput_buf_end500, align 8, !tbaa !45
  %cmp501 = icmp ult i8* %235, %237
  br i1 %cmp501, label %if.then503, label %if.end508

if.then503:                                       ; preds = %while.body498
  %238 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer504 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %238, i32 0, i32 17
  %239 = load i32, i32* %m_bit_buffer504, align 8, !tbaa !36
  %conv505 = trunc i32 %239 to i8
  %240 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf506 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %240, i32 0, i32 11
  %241 = load i8*, i8** %m_pOutput_buf506, align 8, !tbaa !44
  %incdec.ptr507 = getelementptr inbounds i8, i8* %241, i32 1
  store i8* %incdec.ptr507, i8** %m_pOutput_buf506, align 8, !tbaa !44
  store i8 %conv505, i8* %241, align 1, !tbaa !12
  br label %if.end508

if.end508:                                        ; preds = %if.then503, %while.body498
  %242 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer509 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %242, i32 0, i32 17
  %243 = load i32, i32* %m_bit_buffer509, align 8, !tbaa !36
  %shr510 = lshr i32 %243, 8
  store i32 %shr510, i32* %m_bit_buffer509, align 8, !tbaa !36
  %244 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in511 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %244, i32 0, i32 16
  %245 = load i32, i32* %m_bits_in511, align 4, !tbaa !29
  %sub512 = sub i32 %245, 8
  store i32 %sub512, i32* %m_bits_in511, align 4, !tbaa !29
  br label %while.cond494

while.end513:                                     ; preds = %while.cond494
  %246 = bitcast i32* %len475 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %246) #10
  %247 = bitcast i32* %bits473 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %247) #10
  br label %do.cond514

do.cond514:                                       ; preds = %while.end513
  br label %do.end515

do.end515:                                        ; preds = %do.cond514
  br label %do.body516

do.body516:                                       ; preds = %do.end515
  %248 = bitcast i32* %bits517 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %248) #10
  %249 = load i32, i32* %num_dist_codes, align 4, !tbaa !10
  %sub518 = sub nsw i32 %249, 1
  store i32 %sub518, i32* %bits517, align 4, !tbaa !10
  %250 = bitcast i32* %len519 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %250) #10
  store i32 5, i32* %len519, align 4, !tbaa !10
  %251 = load i32, i32* %bits517, align 4, !tbaa !10
  %252 = load i32, i32* %len519, align 4, !tbaa !10
  %shl520 = shl i32 1, %252
  %sub521 = sub i32 %shl520, 1
  %cmp522 = icmp ule i32 %251, %sub521
  %lnot524 = xor i1 %cmp522, true
  %lnot.ext525 = zext i1 %lnot524 to i32
  %conv526 = sext i32 %lnot.ext525 to i64
  %expval527 = call i64 @llvm.expect.i64(i64 %conv526, i64 0)
  %tobool528 = icmp ne i64 %expval527, 0
  br i1 %tobool528, label %cond.true529, label %cond.false530

cond.true529:                                     ; preds = %do.body516
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1036, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

253:                                              ; No predecessors!
  br label %cond.end531

cond.false530:                                    ; preds = %do.body516
  br label %cond.end531

cond.end531:                                      ; preds = %cond.false530, %253
  %254 = load i32, i32* %bits517, align 4, !tbaa !10
  %255 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in532 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %255, i32 0, i32 16
  %256 = load i32, i32* %m_bits_in532, align 4, !tbaa !29
  %shl533 = shl i32 %254, %256
  %257 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer534 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %257, i32 0, i32 17
  %258 = load i32, i32* %m_bit_buffer534, align 8, !tbaa !36
  %or535 = or i32 %258, %shl533
  store i32 %or535, i32* %m_bit_buffer534, align 8, !tbaa !36
  %259 = load i32, i32* %len519, align 4, !tbaa !10
  %260 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in536 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %260, i32 0, i32 16
  %261 = load i32, i32* %m_bits_in536, align 4, !tbaa !29
  %add537 = add i32 %261, %259
  store i32 %add537, i32* %m_bits_in536, align 4, !tbaa !29
  br label %while.cond538

while.cond538:                                    ; preds = %if.end552, %cond.end531
  %262 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in539 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %262, i32 0, i32 16
  %263 = load i32, i32* %m_bits_in539, align 4, !tbaa !29
  %cmp540 = icmp uge i32 %263, 8
  br i1 %cmp540, label %while.body542, label %while.end557

while.body542:                                    ; preds = %while.cond538
  %264 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf543 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %264, i32 0, i32 11
  %265 = load i8*, i8** %m_pOutput_buf543, align 8, !tbaa !44
  %266 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end544 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %266, i32 0, i32 12
  %267 = load i8*, i8** %m_pOutput_buf_end544, align 8, !tbaa !45
  %cmp545 = icmp ult i8* %265, %267
  br i1 %cmp545, label %if.then547, label %if.end552

if.then547:                                       ; preds = %while.body542
  %268 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer548 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %268, i32 0, i32 17
  %269 = load i32, i32* %m_bit_buffer548, align 8, !tbaa !36
  %conv549 = trunc i32 %269 to i8
  %270 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf550 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %270, i32 0, i32 11
  %271 = load i8*, i8** %m_pOutput_buf550, align 8, !tbaa !44
  %incdec.ptr551 = getelementptr inbounds i8, i8* %271, i32 1
  store i8* %incdec.ptr551, i8** %m_pOutput_buf550, align 8, !tbaa !44
  store i8 %conv549, i8* %271, align 1, !tbaa !12
  br label %if.end552

if.end552:                                        ; preds = %if.then547, %while.body542
  %272 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer553 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %272, i32 0, i32 17
  %273 = load i32, i32* %m_bit_buffer553, align 8, !tbaa !36
  %shr554 = lshr i32 %273, 8
  store i32 %shr554, i32* %m_bit_buffer553, align 8, !tbaa !36
  %274 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in555 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %274, i32 0, i32 16
  %275 = load i32, i32* %m_bits_in555, align 4, !tbaa !29
  %sub556 = sub i32 %275, 8
  store i32 %sub556, i32* %m_bits_in555, align 4, !tbaa !29
  br label %while.cond538

while.end557:                                     ; preds = %while.cond538
  %276 = bitcast i32* %len519 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %276) #10
  %277 = bitcast i32* %bits517 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %277) #10
  br label %do.cond558

do.cond558:                                       ; preds = %while.end557
  br label %do.end559

do.end559:                                        ; preds = %do.cond558
  store i32 18, i32* %num_bit_lengths, align 4, !tbaa !10
  br label %for.cond560

for.cond560:                                      ; preds = %for.inc573, %do.end559
  %278 = load i32, i32* %num_bit_lengths, align 4, !tbaa !10
  %cmp561 = icmp sge i32 %278, 0
  br i1 %cmp561, label %for.body563, label %for.end575

for.body563:                                      ; preds = %for.cond560
  %279 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes564 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %279, i32 0, i32 38
  %arrayidx565 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes564, i64 0, i64 2
  %280 = load i32, i32* %num_bit_lengths, align 4, !tbaa !10
  %idxprom566 = sext i32 %280 to i64
  %arrayidx567 = getelementptr inbounds [19 x i8], [19 x i8]* @s_tdefl_packed_code_size_syms_swizzle, i64 0, i64 %idxprom566
  %281 = load i8, i8* %arrayidx567, align 1, !tbaa !12
  %idxprom568 = zext i8 %281 to i64
  %arrayidx569 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx565, i64 0, i64 %idxprom568
  %282 = load i8, i8* %arrayidx569, align 1, !tbaa !12
  %tobool570 = icmp ne i8 %282, 0
  br i1 %tobool570, label %if.then571, label %if.end572

if.then571:                                       ; preds = %for.body563
  br label %for.end575

if.end572:                                        ; preds = %for.body563
  br label %for.inc573

for.inc573:                                       ; preds = %if.end572
  %283 = load i32, i32* %num_bit_lengths, align 4, !tbaa !10
  %dec574 = add nsw i32 %283, -1
  store i32 %dec574, i32* %num_bit_lengths, align 4, !tbaa !10
  br label %for.cond560

for.end575:                                       ; preds = %if.then571, %for.cond560
  %284 = load i32, i32* %num_bit_lengths, align 4, !tbaa !10
  %add576 = add nsw i32 %284, 1
  %cmp577 = icmp sgt i32 4, %add576
  br i1 %cmp577, label %cond.true579, label %cond.false580

cond.true579:                                     ; preds = %for.end575
  br label %cond.end582

cond.false580:                                    ; preds = %for.end575
  %285 = load i32, i32* %num_bit_lengths, align 4, !tbaa !10
  %add581 = add nsw i32 %285, 1
  br label %cond.end582

cond.end582:                                      ; preds = %cond.false580, %cond.true579
  %cond = phi i32 [ 4, %cond.true579 ], [ %add581, %cond.false580 ]
  store i32 %cond, i32* %num_bit_lengths, align 4, !tbaa !10
  br label %do.body583

do.body583:                                       ; preds = %cond.end582
  %286 = bitcast i32* %bits584 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %286) #10
  %287 = load i32, i32* %num_bit_lengths, align 4, !tbaa !10
  %sub585 = sub nsw i32 %287, 4
  store i32 %sub585, i32* %bits584, align 4, !tbaa !10
  %288 = bitcast i32* %len586 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %288) #10
  store i32 4, i32* %len586, align 4, !tbaa !10
  %289 = load i32, i32* %bits584, align 4, !tbaa !10
  %290 = load i32, i32* %len586, align 4, !tbaa !10
  %shl587 = shl i32 1, %290
  %sub588 = sub i32 %shl587, 1
  %cmp589 = icmp ule i32 %289, %sub588
  %lnot591 = xor i1 %cmp589, true
  %lnot.ext592 = zext i1 %lnot591 to i32
  %conv593 = sext i32 %lnot.ext592 to i64
  %expval594 = call i64 @llvm.expect.i64(i64 %conv593, i64 0)
  %tobool595 = icmp ne i64 %expval594, 0
  br i1 %tobool595, label %cond.true596, label %cond.false597

cond.true596:                                     ; preds = %do.body583
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1042, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

291:                                              ; No predecessors!
  br label %cond.end598

cond.false597:                                    ; preds = %do.body583
  br label %cond.end598

cond.end598:                                      ; preds = %cond.false597, %291
  %292 = load i32, i32* %bits584, align 4, !tbaa !10
  %293 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in599 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %293, i32 0, i32 16
  %294 = load i32, i32* %m_bits_in599, align 4, !tbaa !29
  %shl600 = shl i32 %292, %294
  %295 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer601 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %295, i32 0, i32 17
  %296 = load i32, i32* %m_bit_buffer601, align 8, !tbaa !36
  %or602 = or i32 %296, %shl600
  store i32 %or602, i32* %m_bit_buffer601, align 8, !tbaa !36
  %297 = load i32, i32* %len586, align 4, !tbaa !10
  %298 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in603 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %298, i32 0, i32 16
  %299 = load i32, i32* %m_bits_in603, align 4, !tbaa !29
  %add604 = add i32 %299, %297
  store i32 %add604, i32* %m_bits_in603, align 4, !tbaa !29
  br label %while.cond605

while.cond605:                                    ; preds = %if.end619, %cond.end598
  %300 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in606 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %300, i32 0, i32 16
  %301 = load i32, i32* %m_bits_in606, align 4, !tbaa !29
  %cmp607 = icmp uge i32 %301, 8
  br i1 %cmp607, label %while.body609, label %while.end624

while.body609:                                    ; preds = %while.cond605
  %302 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf610 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %302, i32 0, i32 11
  %303 = load i8*, i8** %m_pOutput_buf610, align 8, !tbaa !44
  %304 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end611 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %304, i32 0, i32 12
  %305 = load i8*, i8** %m_pOutput_buf_end611, align 8, !tbaa !45
  %cmp612 = icmp ult i8* %303, %305
  br i1 %cmp612, label %if.then614, label %if.end619

if.then614:                                       ; preds = %while.body609
  %306 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer615 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %306, i32 0, i32 17
  %307 = load i32, i32* %m_bit_buffer615, align 8, !tbaa !36
  %conv616 = trunc i32 %307 to i8
  %308 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf617 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %308, i32 0, i32 11
  %309 = load i8*, i8** %m_pOutput_buf617, align 8, !tbaa !44
  %incdec.ptr618 = getelementptr inbounds i8, i8* %309, i32 1
  store i8* %incdec.ptr618, i8** %m_pOutput_buf617, align 8, !tbaa !44
  store i8 %conv616, i8* %309, align 1, !tbaa !12
  br label %if.end619

if.end619:                                        ; preds = %if.then614, %while.body609
  %310 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer620 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %310, i32 0, i32 17
  %311 = load i32, i32* %m_bit_buffer620, align 8, !tbaa !36
  %shr621 = lshr i32 %311, 8
  store i32 %shr621, i32* %m_bit_buffer620, align 8, !tbaa !36
  %312 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in622 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %312, i32 0, i32 16
  %313 = load i32, i32* %m_bits_in622, align 4, !tbaa !29
  %sub623 = sub i32 %313, 8
  store i32 %sub623, i32* %m_bits_in622, align 4, !tbaa !29
  br label %while.cond605

while.end624:                                     ; preds = %while.cond605
  %314 = bitcast i32* %len586 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %314) #10
  %315 = bitcast i32* %bits584 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %315) #10
  br label %do.cond625

do.cond625:                                       ; preds = %while.end624
  br label %do.end626

do.end626:                                        ; preds = %do.cond625
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond627

for.cond627:                                      ; preds = %for.inc681, %do.end626
  %316 = load i32, i32* %i, align 4, !tbaa !10
  %317 = load i32, i32* %num_bit_lengths, align 4, !tbaa !10
  %cmp628 = icmp slt i32 %316, %317
  br i1 %cmp628, label %for.body630, label %for.end683

for.body630:                                      ; preds = %for.cond627
  br label %do.body631

do.body631:                                       ; preds = %for.body630
  %318 = bitcast i32* %bits632 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %318) #10
  %319 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes633 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %319, i32 0, i32 38
  %arrayidx634 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes633, i64 0, i64 2
  %320 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom635 = zext i32 %320 to i64
  %arrayidx636 = getelementptr inbounds [19 x i8], [19 x i8]* @s_tdefl_packed_code_size_syms_swizzle, i64 0, i64 %idxprom635
  %321 = load i8, i8* %arrayidx636, align 1, !tbaa !12
  %idxprom637 = zext i8 %321 to i64
  %arrayidx638 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx634, i64 0, i64 %idxprom637
  %322 = load i8, i8* %arrayidx638, align 1, !tbaa !12
  %conv639 = zext i8 %322 to i32
  store i32 %conv639, i32* %bits632, align 4, !tbaa !10
  %323 = bitcast i32* %len640 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %323) #10
  store i32 3, i32* %len640, align 4, !tbaa !10
  %324 = load i32, i32* %bits632, align 4, !tbaa !10
  %325 = load i32, i32* %len640, align 4, !tbaa !10
  %shl641 = shl i32 1, %325
  %sub642 = sub i32 %shl641, 1
  %cmp643 = icmp ule i32 %324, %sub642
  %lnot645 = xor i1 %cmp643, true
  %lnot.ext646 = zext i1 %lnot645 to i32
  %conv647 = sext i32 %lnot.ext646 to i64
  %expval648 = call i64 @llvm.expect.i64(i64 %conv647, i64 0)
  %tobool649 = icmp ne i64 %expval648, 0
  br i1 %tobool649, label %cond.true650, label %cond.false651

cond.true650:                                     ; preds = %do.body631
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1044, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

326:                                              ; No predecessors!
  br label %cond.end652

cond.false651:                                    ; preds = %do.body631
  br label %cond.end652

cond.end652:                                      ; preds = %cond.false651, %326
  %327 = load i32, i32* %bits632, align 4, !tbaa !10
  %328 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in653 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %328, i32 0, i32 16
  %329 = load i32, i32* %m_bits_in653, align 4, !tbaa !29
  %shl654 = shl i32 %327, %329
  %330 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer655 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %330, i32 0, i32 17
  %331 = load i32, i32* %m_bit_buffer655, align 8, !tbaa !36
  %or656 = or i32 %331, %shl654
  store i32 %or656, i32* %m_bit_buffer655, align 8, !tbaa !36
  %332 = load i32, i32* %len640, align 4, !tbaa !10
  %333 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in657 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %333, i32 0, i32 16
  %334 = load i32, i32* %m_bits_in657, align 4, !tbaa !29
  %add658 = add i32 %334, %332
  store i32 %add658, i32* %m_bits_in657, align 4, !tbaa !29
  br label %while.cond659

while.cond659:                                    ; preds = %if.end673, %cond.end652
  %335 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in660 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %335, i32 0, i32 16
  %336 = load i32, i32* %m_bits_in660, align 4, !tbaa !29
  %cmp661 = icmp uge i32 %336, 8
  br i1 %cmp661, label %while.body663, label %while.end678

while.body663:                                    ; preds = %while.cond659
  %337 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf664 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %337, i32 0, i32 11
  %338 = load i8*, i8** %m_pOutput_buf664, align 8, !tbaa !44
  %339 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end665 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %339, i32 0, i32 12
  %340 = load i8*, i8** %m_pOutput_buf_end665, align 8, !tbaa !45
  %cmp666 = icmp ult i8* %338, %340
  br i1 %cmp666, label %if.then668, label %if.end673

if.then668:                                       ; preds = %while.body663
  %341 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer669 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %341, i32 0, i32 17
  %342 = load i32, i32* %m_bit_buffer669, align 8, !tbaa !36
  %conv670 = trunc i32 %342 to i8
  %343 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf671 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %343, i32 0, i32 11
  %344 = load i8*, i8** %m_pOutput_buf671, align 8, !tbaa !44
  %incdec.ptr672 = getelementptr inbounds i8, i8* %344, i32 1
  store i8* %incdec.ptr672, i8** %m_pOutput_buf671, align 8, !tbaa !44
  store i8 %conv670, i8* %344, align 1, !tbaa !12
  br label %if.end673

if.end673:                                        ; preds = %if.then668, %while.body663
  %345 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer674 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %345, i32 0, i32 17
  %346 = load i32, i32* %m_bit_buffer674, align 8, !tbaa !36
  %shr675 = lshr i32 %346, 8
  store i32 %shr675, i32* %m_bit_buffer674, align 8, !tbaa !36
  %347 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in676 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %347, i32 0, i32 16
  %348 = load i32, i32* %m_bits_in676, align 4, !tbaa !29
  %sub677 = sub i32 %348, 8
  store i32 %sub677, i32* %m_bits_in676, align 4, !tbaa !29
  br label %while.cond659

while.end678:                                     ; preds = %while.cond659
  %349 = bitcast i32* %len640 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %349) #10
  %350 = bitcast i32* %bits632 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %350) #10
  br label %do.cond679

do.cond679:                                       ; preds = %while.end678
  br label %do.end680

do.end680:                                        ; preds = %do.cond679
  br label %for.inc681

for.inc681:                                       ; preds = %do.end680
  %351 = load i32, i32* %i, align 4, !tbaa !10
  %inc682 = add i32 %351, 1
  store i32 %inc682, i32* %i, align 4, !tbaa !10
  br label %for.cond627

for.end683:                                       ; preds = %for.cond627
  store i32 0, i32* %packed_code_sizes_index, align 4, !tbaa !10
  br label %for.cond684

for.cond684:                                      ; preds = %if.end808, %for.end683
  %352 = load i32, i32* %packed_code_sizes_index, align 4, !tbaa !10
  %353 = load i32, i32* %num_packed_code_sizes, align 4, !tbaa !10
  %cmp685 = icmp ult i32 %352, %353
  br i1 %cmp685, label %for.body687, label %for.end809

for.body687:                                      ; preds = %for.cond684
  %354 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %354) #10
  %355 = load i32, i32* %packed_code_sizes_index, align 4, !tbaa !10
  %inc688 = add i32 %355, 1
  store i32 %inc688, i32* %packed_code_sizes_index, align 4, !tbaa !10
  %idxprom689 = zext i32 %355 to i64
  %arrayidx690 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom689
  %356 = load i8, i8* %arrayidx690, align 1, !tbaa !12
  %conv691 = zext i8 %356 to i32
  store i32 %conv691, i32* %code, align 4, !tbaa !10
  %357 = load i32, i32* %code, align 4, !tbaa !10
  %cmp692 = icmp ult i32 %357, 19
  %lnot694 = xor i1 %cmp692, true
  %lnot.ext695 = zext i1 %lnot694 to i32
  %conv696 = sext i32 %lnot.ext695 to i64
  %expval697 = call i64 @llvm.expect.i64(i64 %conv696, i64 0)
  %tobool698 = icmp ne i64 %expval697, 0
  br i1 %tobool698, label %cond.true699, label %cond.false700

cond.true699:                                     ; preds = %for.body687
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1049, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.66, i64 0, i64 0)) #13
  unreachable

358:                                              ; No predecessors!
  br label %cond.end701

cond.false700:                                    ; preds = %for.body687
  br label %cond.end701

cond.end701:                                      ; preds = %cond.false700, %358
  br label %do.body702

do.body702:                                       ; preds = %cond.end701
  %359 = bitcast i32* %bits703 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %359) #10
  %360 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %360, i32 0, i32 37
  %arrayidx704 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes, i64 0, i64 2
  %361 = load i32, i32* %code, align 4, !tbaa !10
  %idxprom705 = zext i32 %361 to i64
  %arrayidx706 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx704, i64 0, i64 %idxprom705
  %362 = load i16, i16* %arrayidx706, align 2, !tbaa !88
  %conv707 = zext i16 %362 to i32
  store i32 %conv707, i32* %bits703, align 4, !tbaa !10
  %363 = bitcast i32* %len708 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %363) #10
  %364 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes709 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %364, i32 0, i32 38
  %arrayidx710 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes709, i64 0, i64 2
  %365 = load i32, i32* %code, align 4, !tbaa !10
  %idxprom711 = zext i32 %365 to i64
  %arrayidx712 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx710, i64 0, i64 %idxprom711
  %366 = load i8, i8* %arrayidx712, align 1, !tbaa !12
  %conv713 = zext i8 %366 to i32
  store i32 %conv713, i32* %len708, align 4, !tbaa !10
  %367 = load i32, i32* %bits703, align 4, !tbaa !10
  %368 = load i32, i32* %len708, align 4, !tbaa !10
  %shl714 = shl i32 1, %368
  %sub715 = sub i32 %shl714, 1
  %cmp716 = icmp ule i32 %367, %sub715
  %lnot718 = xor i1 %cmp716, true
  %lnot.ext719 = zext i1 %lnot718 to i32
  %conv720 = sext i32 %lnot.ext719 to i64
  %expval721 = call i64 @llvm.expect.i64(i64 %conv720, i64 0)
  %tobool722 = icmp ne i64 %expval721, 0
  br i1 %tobool722, label %cond.true723, label %cond.false724

cond.true723:                                     ; preds = %do.body702
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1050, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

369:                                              ; No predecessors!
  br label %cond.end725

cond.false724:                                    ; preds = %do.body702
  br label %cond.end725

cond.end725:                                      ; preds = %cond.false724, %369
  %370 = load i32, i32* %bits703, align 4, !tbaa !10
  %371 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in726 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %371, i32 0, i32 16
  %372 = load i32, i32* %m_bits_in726, align 4, !tbaa !29
  %shl727 = shl i32 %370, %372
  %373 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer728 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %373, i32 0, i32 17
  %374 = load i32, i32* %m_bit_buffer728, align 8, !tbaa !36
  %or729 = or i32 %374, %shl727
  store i32 %or729, i32* %m_bit_buffer728, align 8, !tbaa !36
  %375 = load i32, i32* %len708, align 4, !tbaa !10
  %376 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in730 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %376, i32 0, i32 16
  %377 = load i32, i32* %m_bits_in730, align 4, !tbaa !29
  %add731 = add i32 %377, %375
  store i32 %add731, i32* %m_bits_in730, align 4, !tbaa !29
  br label %while.cond732

while.cond732:                                    ; preds = %if.end746, %cond.end725
  %378 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in733 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %378, i32 0, i32 16
  %379 = load i32, i32* %m_bits_in733, align 4, !tbaa !29
  %cmp734 = icmp uge i32 %379, 8
  br i1 %cmp734, label %while.body736, label %while.end751

while.body736:                                    ; preds = %while.cond732
  %380 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf737 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %380, i32 0, i32 11
  %381 = load i8*, i8** %m_pOutput_buf737, align 8, !tbaa !44
  %382 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end738 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %382, i32 0, i32 12
  %383 = load i8*, i8** %m_pOutput_buf_end738, align 8, !tbaa !45
  %cmp739 = icmp ult i8* %381, %383
  br i1 %cmp739, label %if.then741, label %if.end746

if.then741:                                       ; preds = %while.body736
  %384 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer742 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %384, i32 0, i32 17
  %385 = load i32, i32* %m_bit_buffer742, align 8, !tbaa !36
  %conv743 = trunc i32 %385 to i8
  %386 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf744 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %386, i32 0, i32 11
  %387 = load i8*, i8** %m_pOutput_buf744, align 8, !tbaa !44
  %incdec.ptr745 = getelementptr inbounds i8, i8* %387, i32 1
  store i8* %incdec.ptr745, i8** %m_pOutput_buf744, align 8, !tbaa !44
  store i8 %conv743, i8* %387, align 1, !tbaa !12
  br label %if.end746

if.end746:                                        ; preds = %if.then741, %while.body736
  %388 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer747 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %388, i32 0, i32 17
  %389 = load i32, i32* %m_bit_buffer747, align 8, !tbaa !36
  %shr748 = lshr i32 %389, 8
  store i32 %shr748, i32* %m_bit_buffer747, align 8, !tbaa !36
  %390 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in749 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %390, i32 0, i32 16
  %391 = load i32, i32* %m_bits_in749, align 4, !tbaa !29
  %sub750 = sub i32 %391, 8
  store i32 %sub750, i32* %m_bits_in749, align 4, !tbaa !29
  br label %while.cond732

while.end751:                                     ; preds = %while.cond732
  %392 = bitcast i32* %len708 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %392) #10
  %393 = bitcast i32* %bits703 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %393) #10
  br label %do.cond752

do.cond752:                                       ; preds = %while.end751
  br label %do.end753

do.end753:                                        ; preds = %do.cond752
  %394 = load i32, i32* %code, align 4, !tbaa !10
  %cmp754 = icmp uge i32 %394, 16
  br i1 %cmp754, label %if.then756, label %if.end808

if.then756:                                       ; preds = %do.end753
  br label %do.body757

do.body757:                                       ; preds = %if.then756
  %395 = bitcast i32* %bits758 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %395) #10
  %396 = load i32, i32* %packed_code_sizes_index, align 4, !tbaa !10
  %inc759 = add i32 %396, 1
  store i32 %inc759, i32* %packed_code_sizes_index, align 4, !tbaa !10
  %idxprom760 = zext i32 %396 to i64
  %arrayidx761 = getelementptr inbounds [320 x i8], [320 x i8]* %packed_code_sizes, i64 0, i64 %idxprom760
  %397 = load i8, i8* %arrayidx761, align 1, !tbaa !12
  %conv762 = zext i8 %397 to i32
  store i32 %conv762, i32* %bits758, align 4, !tbaa !10
  %398 = bitcast i32* %len763 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %398) #10
  %399 = load i32, i32* %code, align 4, !tbaa !10
  %sub764 = sub i32 %399, 16
  %idxprom765 = zext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.15, i64 0, i64 %idxprom765
  %400 = load i8, i8* %arrayidx766, align 1, !tbaa !12
  %conv767 = sext i8 %400 to i32
  store i32 %conv767, i32* %len763, align 4, !tbaa !10
  %401 = load i32, i32* %bits758, align 4, !tbaa !10
  %402 = load i32, i32* %len763, align 4, !tbaa !10
  %shl768 = shl i32 1, %402
  %sub769 = sub i32 %shl768, 1
  %cmp770 = icmp ule i32 %401, %sub769
  %lnot772 = xor i1 %cmp770, true
  %lnot.ext773 = zext i1 %lnot772 to i32
  %conv774 = sext i32 %lnot.ext773 to i64
  %expval775 = call i64 @llvm.expect.i64(i64 %conv774, i64 0)
  %tobool776 = icmp ne i64 %expval775, 0
  br i1 %tobool776, label %cond.true777, label %cond.false778

cond.true777:                                     ; preds = %do.body757
  call void @__assert_rtn(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @__func__.tdefl_start_dynamic_block, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1052, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

403:                                              ; No predecessors!
  br label %cond.end779

cond.false778:                                    ; preds = %do.body757
  br label %cond.end779

cond.end779:                                      ; preds = %cond.false778, %403
  %404 = load i32, i32* %bits758, align 4, !tbaa !10
  %405 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in780 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %405, i32 0, i32 16
  %406 = load i32, i32* %m_bits_in780, align 4, !tbaa !29
  %shl781 = shl i32 %404, %406
  %407 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer782 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %407, i32 0, i32 17
  %408 = load i32, i32* %m_bit_buffer782, align 8, !tbaa !36
  %or783 = or i32 %408, %shl781
  store i32 %or783, i32* %m_bit_buffer782, align 8, !tbaa !36
  %409 = load i32, i32* %len763, align 4, !tbaa !10
  %410 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in784 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %410, i32 0, i32 16
  %411 = load i32, i32* %m_bits_in784, align 4, !tbaa !29
  %add785 = add i32 %411, %409
  store i32 %add785, i32* %m_bits_in784, align 4, !tbaa !29
  br label %while.cond786

while.cond786:                                    ; preds = %if.end800, %cond.end779
  %412 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in787 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %412, i32 0, i32 16
  %413 = load i32, i32* %m_bits_in787, align 4, !tbaa !29
  %cmp788 = icmp uge i32 %413, 8
  br i1 %cmp788, label %while.body790, label %while.end805

while.body790:                                    ; preds = %while.cond786
  %414 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf791 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %414, i32 0, i32 11
  %415 = load i8*, i8** %m_pOutput_buf791, align 8, !tbaa !44
  %416 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end792 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %416, i32 0, i32 12
  %417 = load i8*, i8** %m_pOutput_buf_end792, align 8, !tbaa !45
  %cmp793 = icmp ult i8* %415, %417
  br i1 %cmp793, label %if.then795, label %if.end800

if.then795:                                       ; preds = %while.body790
  %418 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer796 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %418, i32 0, i32 17
  %419 = load i32, i32* %m_bit_buffer796, align 8, !tbaa !36
  %conv797 = trunc i32 %419 to i8
  %420 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf798 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %420, i32 0, i32 11
  %421 = load i8*, i8** %m_pOutput_buf798, align 8, !tbaa !44
  %incdec.ptr799 = getelementptr inbounds i8, i8* %421, i32 1
  store i8* %incdec.ptr799, i8** %m_pOutput_buf798, align 8, !tbaa !44
  store i8 %conv797, i8* %421, align 1, !tbaa !12
  br label %if.end800

if.end800:                                        ; preds = %if.then795, %while.body790
  %422 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer801 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %422, i32 0, i32 17
  %423 = load i32, i32* %m_bit_buffer801, align 8, !tbaa !36
  %shr802 = lshr i32 %423, 8
  store i32 %shr802, i32* %m_bit_buffer801, align 8, !tbaa !36
  %424 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in803 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %424, i32 0, i32 16
  %425 = load i32, i32* %m_bits_in803, align 4, !tbaa !29
  %sub804 = sub i32 %425, 8
  store i32 %sub804, i32* %m_bits_in803, align 4, !tbaa !29
  br label %while.cond786

while.end805:                                     ; preds = %while.cond786
  %426 = bitcast i32* %len763 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %426) #10
  %427 = bitcast i32* %bits758 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %427) #10
  br label %do.cond806

do.cond806:                                       ; preds = %while.end805
  br label %do.end807

do.end807:                                        ; preds = %do.cond806
  br label %if.end808

if.end808:                                        ; preds = %do.end807, %do.end753
  %428 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %428) #10
  br label %for.cond684

for.end809:                                       ; preds = %for.cond684
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %prev_code_size) #10
  %429 = bitcast [320 x i8]* %packed_code_sizes to i8*
  call void @llvm.lifetime.end.p0i8(i64 320, i8* %429) #10
  %430 = bitcast [320 x i8]* %code_sizes_to_pack to i8*
  call void @llvm.lifetime.end.p0i8(i64 320, i8* %430) #10
  %431 = bitcast i32* %packed_code_sizes_index to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %431) #10
  %432 = bitcast i32* %rle_repeat_count to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %432) #10
  %433 = bitcast i32* %rle_z_count to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %433) #10
  %434 = bitcast i32* %num_packed_code_sizes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %434) #10
  %435 = bitcast i32* %total_code_sizes_to_pack to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %435) #10
  %436 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %436) #10
  %437 = bitcast i32* %num_bit_lengths to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %437) #10
  %438 = bitcast i32* %num_dist_codes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %438) #10
  %439 = bitcast i32* %num_lit_codes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %439) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @tdefl_compress_lz_codes(%struct.tdefl_compressor* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %flags = alloca i32, align 4
  %pLZ_codes = alloca i8*, align 8
  %pOutput_buf = alloca i8*, align 8
  %pLZ_code_buf_end = alloca i8*, align 8
  %bit_buffer = alloca i64, align 8
  %bits_in = alloca i32, align 4
  %s0 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %n0 = alloca i32, align 4
  %n1 = alloca i32, align 4
  %sym = alloca i32, align 4
  %num_extra_bits = alloca i32, align 4
  %match_len = alloca i32, align 4
  %match_dist = alloca i32, align 4
  %lit = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %n = alloca i32, align 4
  %bits = alloca i32, align 4
  %len = alloca i32, align 4
  %bits275 = alloca i32, align 4
  %len280 = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %0 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i8** %pLZ_codes to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = bitcast i8** %pOutput_buf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %3 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %3, i32 0, i32 11
  %4 = load i8*, i8** %m_pOutput_buf, align 8, !tbaa !44
  store i8* %4, i8** %pOutput_buf, align 8, !tbaa !8
  %5 = bitcast i8** %pLZ_code_buf_end to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pLZ_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %6, i32 0, i32 9
  %7 = load i8*, i8** %m_pLZ_code_buf, align 8, !tbaa !41
  store i8* %7, i8** %pLZ_code_buf_end, align 8, !tbaa !8
  %8 = bitcast i64* %bit_buffer to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #10
  %9 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %9, i32 0, i32 17
  %10 = load i32, i32* %m_bit_buffer, align 8, !tbaa !36
  %conv = zext i32 %10 to i64
  store i64 %conv, i64* %bit_buffer, align 8, !tbaa !76
  %11 = bitcast i32* %bits_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #10
  %12 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %12, i32 0, i32 16
  %13 = load i32, i32* %m_bits_in, align 4, !tbaa !29
  store i32 %13, i32* %bits_in, align 4, !tbaa !10
  store i32 1, i32* %flags, align 4, !tbaa !10
  %14 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_lz_code_buf = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %14, i32 0, i32 39
  %arraydecay = getelementptr inbounds [65536 x i8], [65536 x i8]* %m_lz_code_buf, i64 0, i64 0
  store i8* %arraydecay, i8** %pLZ_codes, align 8, !tbaa !8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %15 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %16 = load i8*, i8** %pLZ_code_buf_end, align 8, !tbaa !8
  %cmp = icmp ult i8* %15, %16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32, i32* %flags, align 4, !tbaa !10
  %cmp2 = icmp eq i32 %17, 1
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %18 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %incdec.ptr, i8** %pLZ_codes, align 8, !tbaa !8
  %19 = load i8, i8* %18, align 1, !tbaa !12
  %conv4 = zext i8 %19 to i32
  %or = or i32 %conv4, 256
  store i32 %or, i32* %flags, align 4, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %20 = load i32, i32* %flags, align 4, !tbaa !10
  %and = and i32 %20, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %21 = bitcast i32* %s0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #10
  %22 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %22) #10
  %23 = bitcast i32* %n0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #10
  %24 = bitcast i32* %n1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %24) #10
  %25 = bitcast i32* %sym to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %25) #10
  %26 = bitcast i32* %num_extra_bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %26) #10
  %27 = bitcast i32* %match_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %27) #10
  %28 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds i8, i8* %28, i64 0
  %29 = load i8, i8* %arrayidx, align 1, !tbaa !12
  %conv6 = zext i8 %29 to i32
  store i32 %conv6, i32* %match_len, align 4, !tbaa !10
  %30 = bitcast i32* %match_dist to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %30) #10
  %31 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 1
  %32 = bitcast i8* %add.ptr to i16*
  %33 = load i16, i16* %32, align 2, !tbaa !88
  %conv7 = zext i16 %33 to i32
  store i32 %conv7, i32* %match_dist, align 4, !tbaa !10
  %34 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %add.ptr8 = getelementptr inbounds i8, i8* %34, i64 3
  store i8* %add.ptr8, i8** %pLZ_codes, align 8, !tbaa !8
  %35 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %35, i32 0, i32 38
  %arrayidx9 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes, i64 0, i64 0
  %36 = load i32, i32* %match_len, align 4, !tbaa !10
  %idxprom = zext i32 %36 to i64
  %arrayidx10 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom
  %37 = load i16, i16* %arrayidx10, align 2, !tbaa !88
  %idxprom11 = zext i16 %37 to i64
  %arrayidx12 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx9, i64 0, i64 %idxprom11
  %38 = load i8, i8* %arrayidx12, align 1, !tbaa !12
  %tobool13 = icmp ne i8 %38, 0
  %lnot = xor i1 %tobool13, true
  %lnot.ext = zext i1 %lnot to i32
  %conv14 = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv14, i64 0)
  %tobool15 = icmp ne i64 %expval, 0
  br i1 %tobool15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then5
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1108, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.67, i64 0, i64 0)) #13
  unreachable

39:                                               ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %if.then5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %39
  %40 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %40, i32 0, i32 37
  %arrayidx16 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes, i64 0, i64 0
  %41 = load i32, i32* %match_len, align 4, !tbaa !10
  %idxprom17 = zext i32 %41 to i64
  %arrayidx18 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom17
  %42 = load i16, i16* %arrayidx18, align 2, !tbaa !88
  %idxprom19 = zext i16 %42 to i64
  %arrayidx20 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx16, i64 0, i64 %idxprom19
  %43 = load i16, i16* %arrayidx20, align 2, !tbaa !88
  %conv21 = zext i16 %43 to i64
  %44 = load i32, i32* %bits_in, align 4, !tbaa !10
  %sh_prom = zext i32 %44 to i64
  %shl = shl i64 %conv21, %sh_prom
  %45 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %or22 = or i64 %45, %shl
  store i64 %or22, i64* %bit_buffer, align 8, !tbaa !76
  %46 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes23 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %46, i32 0, i32 38
  %arrayidx24 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes23, i64 0, i64 0
  %47 = load i32, i32* %match_len, align 4, !tbaa !10
  %idxprom25 = zext i32 %47 to i64
  %arrayidx26 = getelementptr inbounds [256 x i16], [256 x i16]* @s_tdefl_len_sym, i64 0, i64 %idxprom25
  %48 = load i16, i16* %arrayidx26, align 2, !tbaa !88
  %idxprom27 = zext i16 %48 to i64
  %arrayidx28 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx24, i64 0, i64 %idxprom27
  %49 = load i8, i8* %arrayidx28, align 1, !tbaa !12
  %conv29 = zext i8 %49 to i32
  %50 = load i32, i32* %bits_in, align 4, !tbaa !10
  %add = add i32 %50, %conv29
  store i32 %add, i32* %bits_in, align 4, !tbaa !10
  %51 = load i32, i32* %match_len, align 4, !tbaa !10
  %52 = load i32, i32* %match_len, align 4, !tbaa !10
  %idxprom30 = zext i32 %52 to i64
  %arrayidx31 = getelementptr inbounds [256 x i8], [256 x i8]* @s_tdefl_len_extra, i64 0, i64 %idxprom30
  %53 = load i8, i8* %arrayidx31, align 1, !tbaa !12
  %idxprom32 = zext i8 %53 to i64
  %arrayidx33 = getelementptr inbounds [17 x i32], [17 x i32]* @mz_bitmasks, i64 0, i64 %idxprom32
  %54 = load i32, i32* %arrayidx33, align 4, !tbaa !10
  %and34 = and i32 %51, %54
  %conv35 = zext i32 %and34 to i64
  %55 = load i32, i32* %bits_in, align 4, !tbaa !10
  %sh_prom36 = zext i32 %55 to i64
  %shl37 = shl i64 %conv35, %sh_prom36
  %56 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %or38 = or i64 %56, %shl37
  store i64 %or38, i64* %bit_buffer, align 8, !tbaa !76
  %57 = load i32, i32* %match_len, align 4, !tbaa !10
  %idxprom39 = zext i32 %57 to i64
  %arrayidx40 = getelementptr inbounds [256 x i8], [256 x i8]* @s_tdefl_len_extra, i64 0, i64 %idxprom39
  %58 = load i8, i8* %arrayidx40, align 1, !tbaa !12
  %conv41 = zext i8 %58 to i32
  %59 = load i32, i32* %bits_in, align 4, !tbaa !10
  %add42 = add i32 %59, %conv41
  store i32 %add42, i32* %bits_in, align 4, !tbaa !10
  %60 = load i32, i32* %match_dist, align 4, !tbaa !10
  %and43 = and i32 %60, 511
  %idxprom44 = zext i32 %and43 to i64
  %arrayidx45 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_sym, i64 0, i64 %idxprom44
  %61 = load i8, i8* %arrayidx45, align 1, !tbaa !12
  %conv46 = zext i8 %61 to i32
  store i32 %conv46, i32* %s0, align 4, !tbaa !10
  %62 = load i32, i32* %match_dist, align 4, !tbaa !10
  %and47 = and i32 %62, 511
  %idxprom48 = zext i32 %and47 to i64
  %arrayidx49 = getelementptr inbounds [512 x i8], [512 x i8]* @s_tdefl_small_dist_extra, i64 0, i64 %idxprom48
  %63 = load i8, i8* %arrayidx49, align 1, !tbaa !12
  %conv50 = zext i8 %63 to i32
  store i32 %conv50, i32* %n0, align 4, !tbaa !10
  %64 = load i32, i32* %match_dist, align 4, !tbaa !10
  %shr = lshr i32 %64, 8
  %idxprom51 = zext i32 %shr to i64
  %arrayidx52 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_sym, i64 0, i64 %idxprom51
  %65 = load i8, i8* %arrayidx52, align 1, !tbaa !12
  %conv53 = zext i8 %65 to i32
  store i32 %conv53, i32* %s1, align 4, !tbaa !10
  %66 = load i32, i32* %match_dist, align 4, !tbaa !10
  %shr54 = lshr i32 %66, 8
  %idxprom55 = zext i32 %shr54 to i64
  %arrayidx56 = getelementptr inbounds [128 x i8], [128 x i8]* @s_tdefl_large_dist_extra, i64 0, i64 %idxprom55
  %67 = load i8, i8* %arrayidx56, align 1, !tbaa !12
  %conv57 = zext i8 %67 to i32
  store i32 %conv57, i32* %n1, align 4, !tbaa !10
  %68 = load i32, i32* %match_dist, align 4, !tbaa !10
  %cmp58 = icmp ult i32 %68, 512
  br i1 %cmp58, label %cond.true60, label %cond.false61

cond.true60:                                      ; preds = %cond.end
  %69 = load i32, i32* %s0, align 4, !tbaa !10
  br label %cond.end62

cond.false61:                                     ; preds = %cond.end
  %70 = load i32, i32* %s1, align 4, !tbaa !10
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond = phi i32 [ %69, %cond.true60 ], [ %70, %cond.false61 ]
  store i32 %cond, i32* %sym, align 4, !tbaa !10
  %71 = load i32, i32* %match_dist, align 4, !tbaa !10
  %cmp63 = icmp ult i32 %71, 512
  br i1 %cmp63, label %cond.true65, label %cond.false66

cond.true65:                                      ; preds = %cond.end62
  %72 = load i32, i32* %n0, align 4, !tbaa !10
  br label %cond.end67

cond.false66:                                     ; preds = %cond.end62
  %73 = load i32, i32* %n1, align 4, !tbaa !10
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false66, %cond.true65
  %cond68 = phi i32 [ %72, %cond.true65 ], [ %73, %cond.false66 ]
  store i32 %cond68, i32* %num_extra_bits, align 4, !tbaa !10
  %74 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes69 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %74, i32 0, i32 38
  %arrayidx70 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes69, i64 0, i64 1
  %75 = load i32, i32* %sym, align 4, !tbaa !10
  %idxprom71 = zext i32 %75 to i64
  %arrayidx72 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx70, i64 0, i64 %idxprom71
  %76 = load i8, i8* %arrayidx72, align 1, !tbaa !12
  %tobool73 = icmp ne i8 %76, 0
  %lnot74 = xor i1 %tobool73, true
  %lnot.ext75 = zext i1 %lnot74 to i32
  %conv76 = sext i32 %lnot.ext75 to i64
  %expval77 = call i64 @llvm.expect.i64(i64 %conv76, i64 0)
  %tobool78 = icmp ne i64 %expval77, 0
  br i1 %tobool78, label %cond.true79, label %cond.false80

cond.true79:                                      ; preds = %cond.end67
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1120, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.68, i64 0, i64 0)) #13
  unreachable

77:                                               ; No predecessors!
  br label %cond.end81

cond.false80:                                     ; preds = %cond.end67
  br label %cond.end81

cond.end81:                                       ; preds = %cond.false80, %77
  %78 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes82 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %78, i32 0, i32 37
  %arrayidx83 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes82, i64 0, i64 1
  %79 = load i32, i32* %sym, align 4, !tbaa !10
  %idxprom84 = zext i32 %79 to i64
  %arrayidx85 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx83, i64 0, i64 %idxprom84
  %80 = load i16, i16* %arrayidx85, align 2, !tbaa !88
  %conv86 = zext i16 %80 to i64
  %81 = load i32, i32* %bits_in, align 4, !tbaa !10
  %sh_prom87 = zext i32 %81 to i64
  %shl88 = shl i64 %conv86, %sh_prom87
  %82 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %or89 = or i64 %82, %shl88
  store i64 %or89, i64* %bit_buffer, align 8, !tbaa !76
  %83 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes90 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %83, i32 0, i32 38
  %arrayidx91 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes90, i64 0, i64 1
  %84 = load i32, i32* %sym, align 4, !tbaa !10
  %idxprom92 = zext i32 %84 to i64
  %arrayidx93 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx91, i64 0, i64 %idxprom92
  %85 = load i8, i8* %arrayidx93, align 1, !tbaa !12
  %conv94 = zext i8 %85 to i32
  %86 = load i32, i32* %bits_in, align 4, !tbaa !10
  %add95 = add i32 %86, %conv94
  store i32 %add95, i32* %bits_in, align 4, !tbaa !10
  %87 = load i32, i32* %match_dist, align 4, !tbaa !10
  %88 = load i32, i32* %num_extra_bits, align 4, !tbaa !10
  %idxprom96 = zext i32 %88 to i64
  %arrayidx97 = getelementptr inbounds [17 x i32], [17 x i32]* @mz_bitmasks, i64 0, i64 %idxprom96
  %89 = load i32, i32* %arrayidx97, align 4, !tbaa !10
  %and98 = and i32 %87, %89
  %conv99 = zext i32 %and98 to i64
  %90 = load i32, i32* %bits_in, align 4, !tbaa !10
  %sh_prom100 = zext i32 %90 to i64
  %shl101 = shl i64 %conv99, %sh_prom100
  %91 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %or102 = or i64 %91, %shl101
  store i64 %or102, i64* %bit_buffer, align 8, !tbaa !76
  %92 = load i32, i32* %num_extra_bits, align 4, !tbaa !10
  %93 = load i32, i32* %bits_in, align 4, !tbaa !10
  %add103 = add i32 %93, %92
  store i32 %add103, i32* %bits_in, align 4, !tbaa !10
  %94 = bitcast i32* %match_dist to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %94) #10
  %95 = bitcast i32* %match_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %95) #10
  %96 = bitcast i32* %num_extra_bits to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %96) #10
  %97 = bitcast i32* %sym to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %97) #10
  %98 = bitcast i32* %n1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %98) #10
  %99 = bitcast i32* %n0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %99) #10
  %100 = bitcast i32* %s1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %100) #10
  %101 = bitcast i32* %s0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %101) #10
  br label %if.end208

if.else:                                          ; preds = %if.end
  %102 = bitcast i32* %lit to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %102) #10
  %103 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %incdec.ptr104 = getelementptr inbounds i8, i8* %103, i32 1
  store i8* %incdec.ptr104, i8** %pLZ_codes, align 8, !tbaa !8
  %104 = load i8, i8* %103, align 1, !tbaa !12
  %conv105 = zext i8 %104 to i32
  store i32 %conv105, i32* %lit, align 4, !tbaa !10
  %105 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes106 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %105, i32 0, i32 38
  %arrayidx107 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes106, i64 0, i64 0
  %106 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom108 = zext i32 %106 to i64
  %arrayidx109 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx107, i64 0, i64 %idxprom108
  %107 = load i8, i8* %arrayidx109, align 1, !tbaa !12
  %tobool110 = icmp ne i8 %107, 0
  %lnot111 = xor i1 %tobool110, true
  %lnot.ext112 = zext i1 %lnot111 to i32
  %conv113 = sext i32 %lnot.ext112 to i64
  %expval114 = call i64 @llvm.expect.i64(i64 %conv113, i64 0)
  %tobool115 = icmp ne i64 %expval114, 0
  br i1 %tobool115, label %cond.true116, label %cond.false117

cond.true116:                                     ; preds = %if.else
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1127, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69, i64 0, i64 0)) #13
  unreachable

108:                                              ; No predecessors!
  br label %cond.end118

cond.false117:                                    ; preds = %if.else
  br label %cond.end118

cond.end118:                                      ; preds = %cond.false117, %108
  %109 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes119 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %109, i32 0, i32 37
  %arrayidx120 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes119, i64 0, i64 0
  %110 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom121 = zext i32 %110 to i64
  %arrayidx122 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx120, i64 0, i64 %idxprom121
  %111 = load i16, i16* %arrayidx122, align 2, !tbaa !88
  %conv123 = zext i16 %111 to i64
  %112 = load i32, i32* %bits_in, align 4, !tbaa !10
  %sh_prom124 = zext i32 %112 to i64
  %shl125 = shl i64 %conv123, %sh_prom124
  %113 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %or126 = or i64 %113, %shl125
  store i64 %or126, i64* %bit_buffer, align 8, !tbaa !76
  %114 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes127 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %114, i32 0, i32 38
  %arrayidx128 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes127, i64 0, i64 0
  %115 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom129 = zext i32 %115 to i64
  %arrayidx130 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx128, i64 0, i64 %idxprom129
  %116 = load i8, i8* %arrayidx130, align 1, !tbaa !12
  %conv131 = zext i8 %116 to i32
  %117 = load i32, i32* %bits_in, align 4, !tbaa !10
  %add132 = add i32 %117, %conv131
  store i32 %add132, i32* %bits_in, align 4, !tbaa !10
  %118 = load i32, i32* %flags, align 4, !tbaa !10
  %and133 = and i32 %118, 2
  %cmp134 = icmp eq i32 %and133, 0
  br i1 %cmp134, label %land.lhs.true, label %if.end207

land.lhs.true:                                    ; preds = %cond.end118
  %119 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %120 = load i8*, i8** %pLZ_code_buf_end, align 8, !tbaa !8
  %cmp136 = icmp ult i8* %119, %120
  br i1 %cmp136, label %if.then138, label %if.end207

if.then138:                                       ; preds = %land.lhs.true
  %121 = load i32, i32* %flags, align 4, !tbaa !10
  %shr139 = lshr i32 %121, 1
  store i32 %shr139, i32* %flags, align 4, !tbaa !10
  %122 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %incdec.ptr140 = getelementptr inbounds i8, i8* %122, i32 1
  store i8* %incdec.ptr140, i8** %pLZ_codes, align 8, !tbaa !8
  %123 = load i8, i8* %122, align 1, !tbaa !12
  %conv141 = zext i8 %123 to i32
  store i32 %conv141, i32* %lit, align 4, !tbaa !10
  %124 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes142 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %124, i32 0, i32 38
  %arrayidx143 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes142, i64 0, i64 0
  %125 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom144 = zext i32 %125 to i64
  %arrayidx145 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx143, i64 0, i64 %idxprom144
  %126 = load i8, i8* %arrayidx145, align 1, !tbaa !12
  %tobool146 = icmp ne i8 %126, 0
  %lnot147 = xor i1 %tobool146, true
  %lnot.ext148 = zext i1 %lnot147 to i32
  %conv149 = sext i32 %lnot.ext148 to i64
  %expval150 = call i64 @llvm.expect.i64(i64 %conv149, i64 0)
  %tobool151 = icmp ne i64 %expval150, 0
  br i1 %tobool151, label %cond.true152, label %cond.false153

cond.true152:                                     ; preds = %if.then138
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1134, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69, i64 0, i64 0)) #13
  unreachable

127:                                              ; No predecessors!
  br label %cond.end154

cond.false153:                                    ; preds = %if.then138
  br label %cond.end154

cond.end154:                                      ; preds = %cond.false153, %127
  %128 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes155 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %128, i32 0, i32 37
  %arrayidx156 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes155, i64 0, i64 0
  %129 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom157 = zext i32 %129 to i64
  %arrayidx158 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx156, i64 0, i64 %idxprom157
  %130 = load i16, i16* %arrayidx158, align 2, !tbaa !88
  %conv159 = zext i16 %130 to i64
  %131 = load i32, i32* %bits_in, align 4, !tbaa !10
  %sh_prom160 = zext i32 %131 to i64
  %shl161 = shl i64 %conv159, %sh_prom160
  %132 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %or162 = or i64 %132, %shl161
  store i64 %or162, i64* %bit_buffer, align 8, !tbaa !76
  %133 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes163 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %133, i32 0, i32 38
  %arrayidx164 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes163, i64 0, i64 0
  %134 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom165 = zext i32 %134 to i64
  %arrayidx166 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx164, i64 0, i64 %idxprom165
  %135 = load i8, i8* %arrayidx166, align 1, !tbaa !12
  %conv167 = zext i8 %135 to i32
  %136 = load i32, i32* %bits_in, align 4, !tbaa !10
  %add168 = add i32 %136, %conv167
  store i32 %add168, i32* %bits_in, align 4, !tbaa !10
  %137 = load i32, i32* %flags, align 4, !tbaa !10
  %and169 = and i32 %137, 2
  %cmp170 = icmp eq i32 %and169, 0
  br i1 %cmp170, label %land.lhs.true172, label %if.end206

land.lhs.true172:                                 ; preds = %cond.end154
  %138 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %139 = load i8*, i8** %pLZ_code_buf_end, align 8, !tbaa !8
  %cmp173 = icmp ult i8* %138, %139
  br i1 %cmp173, label %if.then175, label %if.end206

if.then175:                                       ; preds = %land.lhs.true172
  %140 = load i32, i32* %flags, align 4, !tbaa !10
  %shr176 = lshr i32 %140, 1
  store i32 %shr176, i32* %flags, align 4, !tbaa !10
  %141 = load i8*, i8** %pLZ_codes, align 8, !tbaa !8
  %incdec.ptr177 = getelementptr inbounds i8, i8* %141, i32 1
  store i8* %incdec.ptr177, i8** %pLZ_codes, align 8, !tbaa !8
  %142 = load i8, i8* %141, align 1, !tbaa !12
  %conv178 = zext i8 %142 to i32
  store i32 %conv178, i32* %lit, align 4, !tbaa !10
  %143 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes179 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %143, i32 0, i32 38
  %arrayidx180 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes179, i64 0, i64 0
  %144 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom181 = zext i32 %144 to i64
  %arrayidx182 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx180, i64 0, i64 %idxprom181
  %145 = load i8, i8* %arrayidx182, align 1, !tbaa !12
  %tobool183 = icmp ne i8 %145, 0
  %lnot184 = xor i1 %tobool183, true
  %lnot.ext185 = zext i1 %lnot184 to i32
  %conv186 = sext i32 %lnot.ext185 to i64
  %expval187 = call i64 @llvm.expect.i64(i64 %conv186, i64 0)
  %tobool188 = icmp ne i64 %expval187, 0
  br i1 %tobool188, label %cond.true189, label %cond.false190

cond.true189:                                     ; preds = %if.then175
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1141, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.69, i64 0, i64 0)) #13
  unreachable

146:                                              ; No predecessors!
  br label %cond.end191

cond.false190:                                    ; preds = %if.then175
  br label %cond.end191

cond.end191:                                      ; preds = %cond.false190, %146
  %147 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes192 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %147, i32 0, i32 37
  %arrayidx193 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes192, i64 0, i64 0
  %148 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom194 = zext i32 %148 to i64
  %arrayidx195 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx193, i64 0, i64 %idxprom194
  %149 = load i16, i16* %arrayidx195, align 2, !tbaa !88
  %conv196 = zext i16 %149 to i64
  %150 = load i32, i32* %bits_in, align 4, !tbaa !10
  %sh_prom197 = zext i32 %150 to i64
  %shl198 = shl i64 %conv196, %sh_prom197
  %151 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %or199 = or i64 %151, %shl198
  store i64 %or199, i64* %bit_buffer, align 8, !tbaa !76
  %152 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes200 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %152, i32 0, i32 38
  %arrayidx201 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes200, i64 0, i64 0
  %153 = load i32, i32* %lit, align 4, !tbaa !10
  %idxprom202 = zext i32 %153 to i64
  %arrayidx203 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx201, i64 0, i64 %idxprom202
  %154 = load i8, i8* %arrayidx203, align 1, !tbaa !12
  %conv204 = zext i8 %154 to i32
  %155 = load i32, i32* %bits_in, align 4, !tbaa !10
  %add205 = add i32 %155, %conv204
  store i32 %add205, i32* %bits_in, align 4, !tbaa !10
  br label %if.end206

if.end206:                                        ; preds = %cond.end191, %land.lhs.true172, %cond.end154
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %land.lhs.true, %cond.end118
  %156 = bitcast i32* %lit to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %156) #10
  br label %if.end208

if.end208:                                        ; preds = %if.end207, %cond.end81
  %157 = load i8*, i8** %pOutput_buf, align 8, !tbaa !8
  %158 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %158, i32 0, i32 12
  %159 = load i8*, i8** %m_pOutput_buf_end, align 8, !tbaa !45
  %cmp209 = icmp uge i8* %157, %159
  br i1 %cmp209, label %if.then211, label %if.end212

if.then211:                                       ; preds = %if.end208
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end212:                                        ; preds = %if.end208
  %160 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %161 = load i8*, i8** %pOutput_buf, align 8, !tbaa !8
  %162 = bitcast i8* %161 to i64*
  store i64 %160, i64* %162, align 8, !tbaa !76
  %163 = load i32, i32* %bits_in, align 4, !tbaa !10
  %shr213 = lshr i32 %163, 3
  %164 = load i8*, i8** %pOutput_buf, align 8, !tbaa !8
  %idx.ext = zext i32 %shr213 to i64
  %add.ptr214 = getelementptr inbounds i8, i8* %164, i64 %idx.ext
  store i8* %add.ptr214, i8** %pOutput_buf, align 8, !tbaa !8
  %165 = load i32, i32* %bits_in, align 4, !tbaa !10
  %and215 = and i32 %165, -8
  %166 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %sh_prom216 = zext i32 %and215 to i64
  %shr217 = lshr i64 %166, %sh_prom216
  store i64 %shr217, i64* %bit_buffer, align 8, !tbaa !76
  %167 = load i32, i32* %bits_in, align 4, !tbaa !10
  %and218 = and i32 %167, 7
  store i32 %and218, i32* %bits_in, align 4, !tbaa !10
  br label %for.inc

for.inc:                                          ; preds = %if.end212
  %168 = load i32, i32* %flags, align 4, !tbaa !10
  %shr219 = lshr i32 %168, 1
  store i32 %shr219, i32* %flags, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %169 = load i8*, i8** %pOutput_buf, align 8, !tbaa !8
  %170 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf220 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %170, i32 0, i32 11
  store i8* %169, i8** %m_pOutput_buf220, align 8, !tbaa !44
  %171 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in221 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %171, i32 0, i32 16
  store i32 0, i32* %m_bits_in221, align 4, !tbaa !29
  %172 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer222 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %172, i32 0, i32 17
  store i32 0, i32* %m_bit_buffer222, align 8, !tbaa !36
  br label %while.cond

while.cond:                                       ; preds = %do.end, %for.end
  %173 = load i32, i32* %bits_in, align 4, !tbaa !10
  %tobool223 = icmp ne i32 %173, 0
  br i1 %tobool223, label %while.body, label %while.end273

while.body:                                       ; preds = %while.cond
  %174 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %174) #10
  %175 = load i32, i32* %bits_in, align 4, !tbaa !10
  %cmp224 = icmp ult i32 %175, 16
  br i1 %cmp224, label %cond.true226, label %cond.false227

cond.true226:                                     ; preds = %while.body
  %176 = load i32, i32* %bits_in, align 4, !tbaa !10
  br label %cond.end228

cond.false227:                                    ; preds = %while.body
  br label %cond.end228

cond.end228:                                      ; preds = %cond.false227, %cond.true226
  %cond229 = phi i32 [ %176, %cond.true226 ], [ 16, %cond.false227 ]
  store i32 %cond229, i32* %n, align 4, !tbaa !10
  br label %do.body

do.body:                                          ; preds = %cond.end228
  %177 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %177) #10
  %178 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %conv230 = trunc i64 %178 to i32
  %179 = load i32, i32* %n, align 4, !tbaa !10
  %idxprom231 = zext i32 %179 to i64
  %arrayidx232 = getelementptr inbounds [17 x i32], [17 x i32]* @mz_bitmasks, i64 0, i64 %idxprom231
  %180 = load i32, i32* %arrayidx232, align 4, !tbaa !10
  %and233 = and i32 %conv230, %180
  store i32 %and233, i32* %bits, align 4, !tbaa !10
  %181 = bitcast i32* %len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %181) #10
  %182 = load i32, i32* %n, align 4, !tbaa !10
  store i32 %182, i32* %len, align 4, !tbaa !10
  %183 = load i32, i32* %bits, align 4, !tbaa !10
  %184 = load i32, i32* %len, align 4, !tbaa !10
  %shl234 = shl i32 1, %184
  %sub = sub i32 %shl234, 1
  %cmp235 = icmp ule i32 %183, %sub
  %lnot237 = xor i1 %cmp235, true
  %lnot.ext238 = zext i1 %lnot237 to i32
  %conv239 = sext i32 %lnot.ext238 to i64
  %expval240 = call i64 @llvm.expect.i64(i64 %conv239, i64 0)
  %tobool241 = icmp ne i64 %expval240, 0
  br i1 %tobool241, label %cond.true242, label %cond.false243

cond.true242:                                     ; preds = %do.body
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1165, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

185:                                              ; No predecessors!
  br label %cond.end244

cond.false243:                                    ; preds = %do.body
  br label %cond.end244

cond.end244:                                      ; preds = %cond.false243, %185
  %186 = load i32, i32* %bits, align 4, !tbaa !10
  %187 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in245 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %187, i32 0, i32 16
  %188 = load i32, i32* %m_bits_in245, align 4, !tbaa !29
  %shl246 = shl i32 %186, %188
  %189 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer247 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %189, i32 0, i32 17
  %190 = load i32, i32* %m_bit_buffer247, align 8, !tbaa !36
  %or248 = or i32 %190, %shl246
  store i32 %or248, i32* %m_bit_buffer247, align 8, !tbaa !36
  %191 = load i32, i32* %len, align 4, !tbaa !10
  %192 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in249 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %192, i32 0, i32 16
  %193 = load i32, i32* %m_bits_in249, align 4, !tbaa !29
  %add250 = add i32 %193, %191
  store i32 %add250, i32* %m_bits_in249, align 4, !tbaa !29
  br label %while.cond251

while.cond251:                                    ; preds = %if.end265, %cond.end244
  %194 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in252 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %194, i32 0, i32 16
  %195 = load i32, i32* %m_bits_in252, align 4, !tbaa !29
  %cmp253 = icmp uge i32 %195, 8
  br i1 %cmp253, label %while.body255, label %while.end

while.body255:                                    ; preds = %while.cond251
  %196 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf256 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %196, i32 0, i32 11
  %197 = load i8*, i8** %m_pOutput_buf256, align 8, !tbaa !44
  %198 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end257 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %198, i32 0, i32 12
  %199 = load i8*, i8** %m_pOutput_buf_end257, align 8, !tbaa !45
  %cmp258 = icmp ult i8* %197, %199
  br i1 %cmp258, label %if.then260, label %if.end265

if.then260:                                       ; preds = %while.body255
  %200 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer261 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %200, i32 0, i32 17
  %201 = load i32, i32* %m_bit_buffer261, align 8, !tbaa !36
  %conv262 = trunc i32 %201 to i8
  %202 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf263 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %202, i32 0, i32 11
  %203 = load i8*, i8** %m_pOutput_buf263, align 8, !tbaa !44
  %incdec.ptr264 = getelementptr inbounds i8, i8* %203, i32 1
  store i8* %incdec.ptr264, i8** %m_pOutput_buf263, align 8, !tbaa !44
  store i8 %conv262, i8* %203, align 1, !tbaa !12
  br label %if.end265

if.end265:                                        ; preds = %if.then260, %while.body255
  %204 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer266 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %204, i32 0, i32 17
  %205 = load i32, i32* %m_bit_buffer266, align 8, !tbaa !36
  %shr267 = lshr i32 %205, 8
  store i32 %shr267, i32* %m_bit_buffer266, align 8, !tbaa !36
  %206 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in268 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %206, i32 0, i32 16
  %207 = load i32, i32* %m_bits_in268, align 4, !tbaa !29
  %sub269 = sub i32 %207, 8
  store i32 %sub269, i32* %m_bits_in268, align 4, !tbaa !29
  br label %while.cond251

while.end:                                        ; preds = %while.cond251
  %208 = bitcast i32* %len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %208) #10
  %209 = bitcast i32* %bits to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %209) #10
  br label %do.cond

do.cond:                                          ; preds = %while.end
  br label %do.end

do.end:                                           ; preds = %do.cond
  %210 = load i32, i32* %n, align 4, !tbaa !10
  %211 = load i64, i64* %bit_buffer, align 8, !tbaa !76
  %sh_prom270 = zext i32 %210 to i64
  %shr271 = lshr i64 %211, %sh_prom270
  store i64 %shr271, i64* %bit_buffer, align 8, !tbaa !76
  %212 = load i32, i32* %n, align 4, !tbaa !10
  %213 = load i32, i32* %bits_in, align 4, !tbaa !10
  %sub272 = sub i32 %213, %212
  store i32 %sub272, i32* %bits_in, align 4, !tbaa !10
  %214 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %214) #10
  br label %while.cond

while.end273:                                     ; preds = %while.cond
  br label %do.body274

do.body274:                                       ; preds = %while.end273
  %215 = bitcast i32* %bits275 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %215) #10
  %216 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes276 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %216, i32 0, i32 37
  %arrayidx277 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes276, i64 0, i64 0
  %arrayidx278 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx277, i64 0, i64 256
  %217 = load i16, i16* %arrayidx278, align 2, !tbaa !88
  %conv279 = zext i16 %217 to i32
  store i32 %conv279, i32* %bits275, align 4, !tbaa !10
  %218 = bitcast i32* %len280 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %218) #10
  %219 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes281 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %219, i32 0, i32 38
  %arrayidx282 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes281, i64 0, i64 0
  %arrayidx283 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx282, i64 0, i64 256
  %220 = load i8, i8* %arrayidx283, align 2, !tbaa !12
  %conv284 = zext i8 %220 to i32
  store i32 %conv284, i32* %len280, align 4, !tbaa !10
  %221 = load i32, i32* %bits275, align 4, !tbaa !10
  %222 = load i32, i32* %len280, align 4, !tbaa !10
  %shl285 = shl i32 1, %222
  %sub286 = sub i32 %shl285, 1
  %cmp287 = icmp ule i32 %221, %sub286
  %lnot289 = xor i1 %cmp287, true
  %lnot.ext290 = zext i1 %lnot289 to i32
  %conv291 = sext i32 %lnot.ext290 to i64
  %expval292 = call i64 @llvm.expect.i64(i64 %conv291, i64 0)
  %tobool293 = icmp ne i64 %expval292, 0
  br i1 %tobool293, label %cond.true294, label %cond.false295

cond.true294:                                     ; preds = %do.body274
  call void @__assert_rtn(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__func__.tdefl_compress_lz_codes, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 1170, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0)) #13
  unreachable

223:                                              ; No predecessors!
  br label %cond.end296

cond.false295:                                    ; preds = %do.body274
  br label %cond.end296

cond.end296:                                      ; preds = %cond.false295, %223
  %224 = load i32, i32* %bits275, align 4, !tbaa !10
  %225 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in297 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %225, i32 0, i32 16
  %226 = load i32, i32* %m_bits_in297, align 4, !tbaa !29
  %shl298 = shl i32 %224, %226
  %227 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer299 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %227, i32 0, i32 17
  %228 = load i32, i32* %m_bit_buffer299, align 8, !tbaa !36
  %or300 = or i32 %228, %shl298
  store i32 %or300, i32* %m_bit_buffer299, align 8, !tbaa !36
  %229 = load i32, i32* %len280, align 4, !tbaa !10
  %230 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in301 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %230, i32 0, i32 16
  %231 = load i32, i32* %m_bits_in301, align 4, !tbaa !29
  %add302 = add i32 %231, %229
  store i32 %add302, i32* %m_bits_in301, align 4, !tbaa !29
  br label %while.cond303

while.cond303:                                    ; preds = %if.end317, %cond.end296
  %232 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in304 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %232, i32 0, i32 16
  %233 = load i32, i32* %m_bits_in304, align 4, !tbaa !29
  %cmp305 = icmp uge i32 %233, 8
  br i1 %cmp305, label %while.body307, label %while.end322

while.body307:                                    ; preds = %while.cond303
  %234 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf308 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %234, i32 0, i32 11
  %235 = load i8*, i8** %m_pOutput_buf308, align 8, !tbaa !44
  %236 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end309 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %236, i32 0, i32 12
  %237 = load i8*, i8** %m_pOutput_buf_end309, align 8, !tbaa !45
  %cmp310 = icmp ult i8* %235, %237
  br i1 %cmp310, label %if.then312, label %if.end317

if.then312:                                       ; preds = %while.body307
  %238 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer313 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %238, i32 0, i32 17
  %239 = load i32, i32* %m_bit_buffer313, align 8, !tbaa !36
  %conv314 = trunc i32 %239 to i8
  %240 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf315 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %240, i32 0, i32 11
  %241 = load i8*, i8** %m_pOutput_buf315, align 8, !tbaa !44
  %incdec.ptr316 = getelementptr inbounds i8, i8* %241, i32 1
  store i8* %incdec.ptr316, i8** %m_pOutput_buf315, align 8, !tbaa !44
  store i8 %conv314, i8* %241, align 1, !tbaa !12
  br label %if.end317

if.end317:                                        ; preds = %if.then312, %while.body307
  %242 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bit_buffer318 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %242, i32 0, i32 17
  %243 = load i32, i32* %m_bit_buffer318, align 8, !tbaa !36
  %shr319 = lshr i32 %243, 8
  store i32 %shr319, i32* %m_bit_buffer318, align 8, !tbaa !36
  %244 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_bits_in320 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %244, i32 0, i32 16
  %245 = load i32, i32* %m_bits_in320, align 4, !tbaa !29
  %sub321 = sub i32 %245, 8
  store i32 %sub321, i32* %m_bits_in320, align 4, !tbaa !29
  br label %while.cond303

while.end322:                                     ; preds = %while.cond303
  %246 = bitcast i32* %len280 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %246) #10
  %247 = bitcast i32* %bits275 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %247) #10
  br label %do.cond323

do.cond323:                                       ; preds = %while.end322
  br label %do.end324

do.end324:                                        ; preds = %do.cond323
  %248 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf325 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %248, i32 0, i32 11
  %249 = load i8*, i8** %m_pOutput_buf325, align 8, !tbaa !44
  %250 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_pOutput_buf_end326 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %250, i32 0, i32 12
  %251 = load i8*, i8** %m_pOutput_buf_end326, align 8, !tbaa !45
  %cmp327 = icmp ult i8* %249, %251
  %conv328 = zext i1 %cmp327 to i32
  store i32 %conv328, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %do.end324, %if.then211
  %252 = bitcast i32* %bits_in to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %252) #10
  %253 = bitcast i64* %bit_buffer to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %253) #10
  %254 = bitcast i8** %pLZ_code_buf_end to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %254) #10
  %255 = bitcast i8** %pOutput_buf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %255) #10
  %256 = bitcast i8** %pLZ_codes to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %256) #10
  %257 = bitcast i32* %flags to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %257) #10
  %258 = load i32, i32* %retval, align 4
  ret i32 %258
}

; Function Attrs: nounwind ssp uwtable
define internal void @tdefl_optimize_huffman_table(%struct.tdefl_compressor* %d, i32 %table_num, i32 %table_len, i32 %code_size_limit, i32 %static_table) #0 {
entry:
  %d.addr = alloca %struct.tdefl_compressor*, align 8
  %table_num.addr = alloca i32, align 4
  %table_len.addr = alloca i32, align 4
  %code_size_limit.addr = alloca i32, align 4
  %static_table.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca i32, align 4
  %num_codes = alloca [33 x i32], align 16
  %next_code = alloca [33 x i32], align 16
  %syms0 = alloca [288 x %struct.tdefl_sym_freq], align 16
  %syms1 = alloca [288 x %struct.tdefl_sym_freq], align 16
  %pSyms = alloca %struct.tdefl_sym_freq*, align 8
  %num_used_syms = alloca i32, align 4
  %pSym_count = alloca i16*, align 8
  %rev_code = alloca i32, align 4
  %code = alloca i32, align 4
  %code_size = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.tdefl_compressor* %d, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  store i32 %table_num, i32* %table_num.addr, align 4, !tbaa !10
  store i32 %table_len, i32* %table_len.addr, align 4, !tbaa !10
  store i32 %code_size_limit, i32* %code_size_limit.addr, align 4, !tbaa !10
  store i32 %static_table, i32* %static_table.addr, align 4, !tbaa !10
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %j to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i32* %l to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast [33 x i32]* %num_codes to i8*
  call void @llvm.lifetime.start.p0i8(i64 132, i8* %3) #10
  %4 = bitcast [33 x i32]* %next_code to i8*
  call void @llvm.lifetime.start.p0i8(i64 132, i8* %4) #10
  %5 = bitcast [33 x i32]* %num_codes to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %5, i8 0, i64 132, i1 false)
  %6 = load i32, i32* %static_table.addr, align 4, !tbaa !10
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %7 = load i32, i32* %i, align 4, !tbaa !10
  %8 = load i32, i32* %table_len.addr, align 4, !tbaa !10
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %9, i32 0, i32 38
  %10 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes, i64 0, i64 %idxprom
  %11 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom1 = sext i32 %11 to i64
  %arrayidx2 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx, i64 0, i64 %idxprom1
  %12 = load i8, i8* %arrayidx2, align 1, !tbaa !12
  %idxprom3 = zext i8 %12 to i64
  %arrayidx4 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 %idxprom3
  %13 = load i32, i32* %arrayidx4, align 4, !tbaa !10
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* %arrayidx4, align 4, !tbaa !10
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !tbaa !10
  %inc5 = add nsw i32 %14, 1
  store i32 %inc5, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end79

if.else:                                          ; preds = %entry
  %15 = bitcast [288 x %struct.tdefl_sym_freq]* %syms0 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1152, i8* %15) #10
  %16 = bitcast [288 x %struct.tdefl_sym_freq]* %syms1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1152, i8* %16) #10
  %17 = bitcast %struct.tdefl_sym_freq** %pSyms to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %17) #10
  %18 = bitcast i32* %num_used_syms to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %18) #10
  store i32 0, i32* %num_used_syms, align 4, !tbaa !10
  %19 = bitcast i16** %pSym_count to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #10
  %20 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_count = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %20, i32 0, i32 36
  %21 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom6 = sext i32 %21 to i64
  %arrayidx7 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_count, i64 0, i64 %idxprom6
  %arrayidx8 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx7, i64 0, i64 0
  store i16* %arrayidx8, i16** %pSym_count, align 8, !tbaa !8
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc23, %if.else
  %22 = load i32, i32* %i, align 4, !tbaa !10
  %23 = load i32, i32* %table_len.addr, align 4, !tbaa !10
  %cmp10 = icmp slt i32 %22, %23
  br i1 %cmp10, label %for.body11, label %for.end25

for.body11:                                       ; preds = %for.cond9
  %24 = load i16*, i16** %pSym_count, align 8, !tbaa !8
  %25 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom12 = sext i32 %25 to i64
  %arrayidx13 = getelementptr inbounds i16, i16* %24, i64 %idxprom12
  %26 = load i16, i16* %arrayidx13, align 2, !tbaa !88
  %tobool14 = icmp ne i16 %26, 0
  br i1 %tobool14, label %if.then15, label %if.end

if.then15:                                        ; preds = %for.body11
  %27 = load i16*, i16** %pSym_count, align 8, !tbaa !8
  %28 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom16 = sext i32 %28 to i64
  %arrayidx17 = getelementptr inbounds i16, i16* %27, i64 %idxprom16
  %29 = load i16, i16* %arrayidx17, align 2, !tbaa !88
  %30 = load i32, i32* %num_used_syms, align 4, !tbaa !10
  %idxprom18 = sext i32 %30 to i64
  %arrayidx19 = getelementptr inbounds [288 x %struct.tdefl_sym_freq], [288 x %struct.tdefl_sym_freq]* %syms0, i64 0, i64 %idxprom18
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx19, i32 0, i32 0
  store i16 %29, i16* %m_key, align 4, !tbaa !193
  %31 = load i32, i32* %i, align 4, !tbaa !10
  %conv = trunc i32 %31 to i16
  %32 = load i32, i32* %num_used_syms, align 4, !tbaa !10
  %inc20 = add nsw i32 %32, 1
  store i32 %inc20, i32* %num_used_syms, align 4, !tbaa !10
  %idxprom21 = sext i32 %32 to i64
  %arrayidx22 = getelementptr inbounds [288 x %struct.tdefl_sym_freq], [288 x %struct.tdefl_sym_freq]* %syms0, i64 0, i64 %idxprom21
  %m_sym_index = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx22, i32 0, i32 1
  store i16 %conv, i16* %m_sym_index, align 2, !tbaa !195
  br label %if.end

if.end:                                           ; preds = %if.then15, %for.body11
  br label %for.inc23

for.inc23:                                        ; preds = %if.end
  %33 = load i32, i32* %i, align 4, !tbaa !10
  %inc24 = add nsw i32 %33, 1
  store i32 %inc24, i32* %i, align 4, !tbaa !10
  br label %for.cond9

for.end25:                                        ; preds = %for.cond9
  %34 = load i32, i32* %num_used_syms, align 4, !tbaa !10
  %arraydecay = getelementptr inbounds [288 x %struct.tdefl_sym_freq], [288 x %struct.tdefl_sym_freq]* %syms0, i64 0, i64 0
  %arraydecay26 = getelementptr inbounds [288 x %struct.tdefl_sym_freq], [288 x %struct.tdefl_sym_freq]* %syms1, i64 0, i64 0
  %call = call %struct.tdefl_sym_freq* @tdefl_radix_sort_syms(i32 %34, %struct.tdefl_sym_freq* %arraydecay, %struct.tdefl_sym_freq* %arraydecay26)
  store %struct.tdefl_sym_freq* %call, %struct.tdefl_sym_freq** %pSyms, align 8, !tbaa !8
  %35 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms, align 8, !tbaa !8
  %36 = load i32, i32* %num_used_syms, align 4, !tbaa !10
  call void @tdefl_calculate_minimum_redundancy(%struct.tdefl_sym_freq* %35, i32 %36)
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc37, %for.end25
  %37 = load i32, i32* %i, align 4, !tbaa !10
  %38 = load i32, i32* %num_used_syms, align 4, !tbaa !10
  %cmp28 = icmp slt i32 %37, %38
  br i1 %cmp28, label %for.body30, label %for.end39

for.body30:                                       ; preds = %for.cond27
  %39 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms, align 8, !tbaa !8
  %40 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom31 = sext i32 %40 to i64
  %arrayidx32 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %39, i64 %idxprom31
  %m_key33 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx32, i32 0, i32 0
  %41 = load i16, i16* %m_key33, align 2, !tbaa !193
  %idxprom34 = zext i16 %41 to i64
  %arrayidx35 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 %idxprom34
  %42 = load i32, i32* %arrayidx35, align 4, !tbaa !10
  %inc36 = add nsw i32 %42, 1
  store i32 %inc36, i32* %arrayidx35, align 4, !tbaa !10
  br label %for.inc37

for.inc37:                                        ; preds = %for.body30
  %43 = load i32, i32* %i, align 4, !tbaa !10
  %inc38 = add nsw i32 %43, 1
  store i32 %inc38, i32* %i, align 4, !tbaa !10
  br label %for.cond27

for.end39:                                        ; preds = %for.cond27
  %arraydecay40 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 0
  %44 = load i32, i32* %num_used_syms, align 4, !tbaa !10
  %45 = load i32, i32* %code_size_limit.addr, align 4, !tbaa !10
  call void @tdefl_huffman_enforce_max_code_size(i32* %arraydecay40, i32 %44, i32 %45)
  %46 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes41 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %46, i32 0, i32 38
  %47 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom42 = sext i32 %47 to i64
  %arrayidx43 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes41, i64 0, i64 %idxprom42
  %48 = bitcast [288 x i8]* %arrayidx43 to i8*
  %49 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes44 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %49, i32 0, i32 38
  %50 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom45 = sext i32 %50 to i64
  %arrayidx46 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes44, i64 0, i64 %idxprom45
  %51 = bitcast [288 x i8]* %arrayidx46 to i8*
  %52 = call i64 @llvm.objectsize.i64.p0i8(i8* %51, i1 false, i1 true, i1 false)
  %call47 = call i8* @__memset_chk(i8* %48, i32 0, i64 288, i64 %52) #10
  %53 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %53, i32 0, i32 37
  %54 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom48 = sext i32 %54 to i64
  %arrayidx49 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes, i64 0, i64 %idxprom48
  %55 = bitcast [288 x i16]* %arrayidx49 to i8*
  %56 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes50 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %56, i32 0, i32 37
  %57 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom51 = sext i32 %57 to i64
  %arrayidx52 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes50, i64 0, i64 %idxprom51
  %58 = bitcast [288 x i16]* %arrayidx52 to i8*
  %59 = call i64 @llvm.objectsize.i64.p0i8(i8* %58, i1 false, i1 true, i1 false)
  %call53 = call i8* @__memset_chk(i8* %55, i32 0, i64 576, i64 %59) #10
  store i32 1, i32* %i, align 4, !tbaa !10
  %60 = load i32, i32* %num_used_syms, align 4, !tbaa !10
  store i32 %60, i32* %j, align 4, !tbaa !10
  br label %for.cond54

for.cond54:                                       ; preds = %for.inc76, %for.end39
  %61 = load i32, i32* %i, align 4, !tbaa !10
  %62 = load i32, i32* %code_size_limit.addr, align 4, !tbaa !10
  %cmp55 = icmp sle i32 %61, %62
  br i1 %cmp55, label %for.body57, label %for.end78

for.body57:                                       ; preds = %for.cond54
  %63 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom58 = sext i32 %63 to i64
  %arrayidx59 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 %idxprom58
  %64 = load i32, i32* %arrayidx59, align 4, !tbaa !10
  store i32 %64, i32* %l, align 4, !tbaa !10
  br label %for.cond60

for.cond60:                                       ; preds = %for.inc73, %for.body57
  %65 = load i32, i32* %l, align 4, !tbaa !10
  %cmp61 = icmp sgt i32 %65, 0
  br i1 %cmp61, label %for.body63, label %for.end75

for.body63:                                       ; preds = %for.cond60
  %66 = load i32, i32* %i, align 4, !tbaa !10
  %conv64 = trunc i32 %66 to i8
  %67 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes65 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %67, i32 0, i32 38
  %68 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom66 = sext i32 %68 to i64
  %arrayidx67 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes65, i64 0, i64 %idxprom66
  %69 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms, align 8, !tbaa !8
  %70 = load i32, i32* %j, align 4, !tbaa !10
  %dec = add nsw i32 %70, -1
  store i32 %dec, i32* %j, align 4, !tbaa !10
  %idxprom68 = sext i32 %dec to i64
  %arrayidx69 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %69, i64 %idxprom68
  %m_sym_index70 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx69, i32 0, i32 1
  %71 = load i16, i16* %m_sym_index70, align 2, !tbaa !195
  %idxprom71 = zext i16 %71 to i64
  %arrayidx72 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx67, i64 0, i64 %idxprom71
  store i8 %conv64, i8* %arrayidx72, align 1, !tbaa !12
  br label %for.inc73

for.inc73:                                        ; preds = %for.body63
  %72 = load i32, i32* %l, align 4, !tbaa !10
  %dec74 = add nsw i32 %72, -1
  store i32 %dec74, i32* %l, align 4, !tbaa !10
  br label %for.cond60

for.end75:                                        ; preds = %for.cond60
  br label %for.inc76

for.inc76:                                        ; preds = %for.end75
  %73 = load i32, i32* %i, align 4, !tbaa !10
  %inc77 = add nsw i32 %73, 1
  store i32 %inc77, i32* %i, align 4, !tbaa !10
  br label %for.cond54

for.end78:                                        ; preds = %for.cond54
  %74 = bitcast i16** %pSym_count to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %74) #10
  %75 = bitcast i32* %num_used_syms to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %75) #10
  %76 = bitcast %struct.tdefl_sym_freq** %pSyms to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %76) #10
  %77 = bitcast [288 x %struct.tdefl_sym_freq]* %syms1 to i8*
  call void @llvm.lifetime.end.p0i8(i64 1152, i8* %77) #10
  %78 = bitcast [288 x %struct.tdefl_sym_freq]* %syms0 to i8*
  call void @llvm.lifetime.end.p0i8(i64 1152, i8* %78) #10
  br label %if.end79

if.end79:                                         ; preds = %for.end78, %for.end
  %arrayidx80 = getelementptr inbounds [33 x i32], [33 x i32]* %next_code, i64 0, i64 1
  store i32 0, i32* %arrayidx80, align 4, !tbaa !10
  store i32 0, i32* %j, align 4, !tbaa !10
  store i32 2, i32* %i, align 4, !tbaa !10
  br label %for.cond81

for.cond81:                                       ; preds = %for.inc89, %if.end79
  %79 = load i32, i32* %i, align 4, !tbaa !10
  %80 = load i32, i32* %code_size_limit.addr, align 4, !tbaa !10
  %cmp82 = icmp sle i32 %79, %80
  br i1 %cmp82, label %for.body84, label %for.end91

for.body84:                                       ; preds = %for.cond81
  %81 = load i32, i32* %j, align 4, !tbaa !10
  %82 = load i32, i32* %i, align 4, !tbaa !10
  %sub = sub nsw i32 %82, 1
  %idxprom85 = sext i32 %sub to i64
  %arrayidx86 = getelementptr inbounds [33 x i32], [33 x i32]* %num_codes, i64 0, i64 %idxprom85
  %83 = load i32, i32* %arrayidx86, align 4, !tbaa !10
  %add = add nsw i32 %81, %83
  %shl = shl i32 %add, 1
  store i32 %shl, i32* %j, align 4, !tbaa !10
  %84 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom87 = sext i32 %84 to i64
  %arrayidx88 = getelementptr inbounds [33 x i32], [33 x i32]* %next_code, i64 0, i64 %idxprom87
  store i32 %shl, i32* %arrayidx88, align 4, !tbaa !10
  br label %for.inc89

for.inc89:                                        ; preds = %for.body84
  %85 = load i32, i32* %i, align 4, !tbaa !10
  %inc90 = add nsw i32 %85, 1
  store i32 %inc90, i32* %i, align 4, !tbaa !10
  br label %for.cond81

for.end91:                                        ; preds = %for.cond81
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond92

for.cond92:                                       ; preds = %for.inc125, %for.end91
  %86 = load i32, i32* %i, align 4, !tbaa !10
  %87 = load i32, i32* %table_len.addr, align 4, !tbaa !10
  %cmp93 = icmp slt i32 %86, %87
  br i1 %cmp93, label %for.body95, label %for.end127

for.body95:                                       ; preds = %for.cond92
  %88 = bitcast i32* %rev_code to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %88) #10
  store i32 0, i32* %rev_code, align 4, !tbaa !10
  %89 = bitcast i32* %code to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %89) #10
  %90 = bitcast i32* %code_size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %90) #10
  %91 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_code_sizes96 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %91, i32 0, i32 38
  %92 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom97 = sext i32 %92 to i64
  %arrayidx98 = getelementptr inbounds [3 x [288 x i8]], [3 x [288 x i8]]* %m_huff_code_sizes96, i64 0, i64 %idxprom97
  %93 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom99 = sext i32 %93 to i64
  %arrayidx100 = getelementptr inbounds [288 x i8], [288 x i8]* %arrayidx98, i64 0, i64 %idxprom99
  %94 = load i8, i8* %arrayidx100, align 1, !tbaa !12
  %conv101 = zext i8 %94 to i32
  store i32 %conv101, i32* %code_size, align 4, !tbaa !10
  %cmp102 = icmp eq i32 %conv101, 0
  br i1 %cmp102, label %if.then104, label %if.end105

if.then104:                                       ; preds = %for.body95
  store i32 22, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end105:                                        ; preds = %for.body95
  %95 = load i32, i32* %code_size, align 4, !tbaa !10
  %idxprom106 = zext i32 %95 to i64
  %arrayidx107 = getelementptr inbounds [33 x i32], [33 x i32]* %next_code, i64 0, i64 %idxprom106
  %96 = load i32, i32* %arrayidx107, align 4, !tbaa !10
  %inc108 = add i32 %96, 1
  store i32 %inc108, i32* %arrayidx107, align 4, !tbaa !10
  store i32 %96, i32* %code, align 4, !tbaa !10
  %97 = load i32, i32* %code_size, align 4, !tbaa !10
  store i32 %97, i32* %l, align 4, !tbaa !10
  br label %for.cond109

for.cond109:                                      ; preds = %for.inc114, %if.end105
  %98 = load i32, i32* %l, align 4, !tbaa !10
  %cmp110 = icmp sgt i32 %98, 0
  br i1 %cmp110, label %for.body112, label %for.end116

for.body112:                                      ; preds = %for.cond109
  %99 = load i32, i32* %rev_code, align 4, !tbaa !10
  %shl113 = shl i32 %99, 1
  %100 = load i32, i32* %code, align 4, !tbaa !10
  %and = and i32 %100, 1
  %or = or i32 %shl113, %and
  store i32 %or, i32* %rev_code, align 4, !tbaa !10
  br label %for.inc114

for.inc114:                                       ; preds = %for.body112
  %101 = load i32, i32* %l, align 4, !tbaa !10
  %dec115 = add nsw i32 %101, -1
  store i32 %dec115, i32* %l, align 4, !tbaa !10
  %102 = load i32, i32* %code, align 4, !tbaa !10
  %shr = lshr i32 %102, 1
  store i32 %shr, i32* %code, align 4, !tbaa !10
  br label %for.cond109

for.end116:                                       ; preds = %for.cond109
  %103 = load i32, i32* %rev_code, align 4, !tbaa !10
  %conv117 = trunc i32 %103 to i16
  %104 = load %struct.tdefl_compressor*, %struct.tdefl_compressor** %d.addr, align 8, !tbaa !8
  %m_huff_codes118 = getelementptr inbounds %struct.tdefl_compressor, %struct.tdefl_compressor* %104, i32 0, i32 37
  %105 = load i32, i32* %table_num.addr, align 4, !tbaa !10
  %idxprom119 = sext i32 %105 to i64
  %arrayidx120 = getelementptr inbounds [3 x [288 x i16]], [3 x [288 x i16]]* %m_huff_codes118, i64 0, i64 %idxprom119
  %106 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom121 = sext i32 %106 to i64
  %arrayidx122 = getelementptr inbounds [288 x i16], [288 x i16]* %arrayidx120, i64 0, i64 %idxprom121
  store i16 %conv117, i16* %arrayidx122, align 2, !tbaa !88
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %for.end116, %if.then104
  %107 = bitcast i32* %code_size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %107) #10
  %108 = bitcast i32* %code to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %108) #10
  %109 = bitcast i32* %rev_code to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %109) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 22, label %for.inc125
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc125

for.inc125:                                       ; preds = %cleanup.cont, %cleanup
  %110 = load i32, i32* %i, align 4, !tbaa !10
  %inc126 = add nsw i32 %110, 1
  store i32 %inc126, i32* %i, align 4, !tbaa !10
  br label %for.cond92

for.end127:                                       ; preds = %for.cond92
  %111 = bitcast [33 x i32]* %next_code to i8*
  call void @llvm.lifetime.end.p0i8(i64 132, i8* %111) #10
  %112 = bitcast [33 x i32]* %num_codes to i8*
  call void @llvm.lifetime.end.p0i8(i64 132, i8* %112) #10
  %113 = bitcast i32* %l to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %113) #10
  %114 = bitcast i32* %j to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %114) #10
  %115 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %115) #10
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.tdefl_sym_freq* @tdefl_radix_sort_syms(i32 %num_syms, %struct.tdefl_sym_freq* %pSyms0, %struct.tdefl_sym_freq* %pSyms1) #0 {
entry:
  %num_syms.addr = alloca i32, align 4
  %pSyms0.addr = alloca %struct.tdefl_sym_freq*, align 8
  %pSyms1.addr = alloca %struct.tdefl_sym_freq*, align 8
  %total_passes = alloca i32, align 4
  %pass_shift = alloca i32, align 4
  %pass = alloca i32, align 4
  %i = alloca i32, align 4
  %hist = alloca [512 x i32], align 16
  %pCur_syms = alloca %struct.tdefl_sym_freq*, align 8
  %pNew_syms = alloca %struct.tdefl_sym_freq*, align 8
  %freq = alloca i32, align 4
  %pHist = alloca i32*, align 8
  %offsets = alloca [256 x i32], align 16
  %cur_ofs = alloca i32, align 4
  %t = alloca %struct.tdefl_sym_freq*, align 8
  store i32 %num_syms, i32* %num_syms.addr, align 4, !tbaa !10
  store %struct.tdefl_sym_freq* %pSyms0, %struct.tdefl_sym_freq** %pSyms0.addr, align 8, !tbaa !8
  store %struct.tdefl_sym_freq* %pSyms1, %struct.tdefl_sym_freq** %pSyms1.addr, align 8, !tbaa !8
  %0 = bitcast i32* %total_passes to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  store i32 2, i32* %total_passes, align 4, !tbaa !10
  %1 = bitcast i32* %pass_shift to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i32* %pass to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = bitcast [512 x i32]* %hist to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* %4) #10
  %5 = bitcast %struct.tdefl_sym_freq** %pCur_syms to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms0.addr, align 8, !tbaa !8
  store %struct.tdefl_sym_freq* %6, %struct.tdefl_sym_freq** %pCur_syms, align 8, !tbaa !8
  %7 = bitcast %struct.tdefl_sym_freq** %pNew_syms to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #10
  %8 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms1.addr, align 8, !tbaa !8
  store %struct.tdefl_sym_freq* %8, %struct.tdefl_sym_freq** %pNew_syms, align 8, !tbaa !8
  %9 = bitcast [512 x i32]* %hist to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %9, i8 0, i64 2048, i1 false)
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4, !tbaa !10
  %11 = load i32, i32* %num_syms.addr, align 4, !tbaa !10
  %cmp = icmp ult i32 %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = bitcast i32* %freq to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #10
  %13 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pSyms0.addr, align 8, !tbaa !8
  %14 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom = zext i32 %14 to i64
  %arrayidx = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %13, i64 %idxprom
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx, i32 0, i32 0
  %15 = load i16, i16* %m_key, align 2, !tbaa !193
  %conv = zext i16 %15 to i32
  store i32 %conv, i32* %freq, align 4, !tbaa !10
  %16 = load i32, i32* %freq, align 4, !tbaa !10
  %and = and i32 %16, 255
  %idxprom1 = zext i32 %and to i64
  %arrayidx2 = getelementptr inbounds [512 x i32], [512 x i32]* %hist, i64 0, i64 %idxprom1
  %17 = load i32, i32* %arrayidx2, align 4, !tbaa !10
  %inc = add i32 %17, 1
  store i32 %inc, i32* %arrayidx2, align 4, !tbaa !10
  %18 = load i32, i32* %freq, align 4, !tbaa !10
  %shr = lshr i32 %18, 8
  %and3 = and i32 %shr, 255
  %add = add i32 256, %and3
  %idxprom4 = zext i32 %add to i64
  %arrayidx5 = getelementptr inbounds [512 x i32], [512 x i32]* %hist, i64 0, i64 %idxprom4
  %19 = load i32, i32* %arrayidx5, align 4, !tbaa !10
  %inc6 = add i32 %19, 1
  store i32 %inc6, i32* %arrayidx5, align 4, !tbaa !10
  %20 = bitcast i32* %freq to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %20) #10
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4, !tbaa !10
  %inc7 = add i32 %21, 1
  store i32 %inc7, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %22 = load i32, i32* %total_passes, align 4, !tbaa !10
  %cmp8 = icmp ugt i32 %22, 1
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %23 = load i32, i32* %num_syms.addr, align 4, !tbaa !10
  %24 = load i32, i32* %total_passes, align 4, !tbaa !10
  %sub = sub i32 %24, 1
  %mul = mul i32 %sub, 256
  %idxprom10 = zext i32 %mul to i64
  %arrayidx11 = getelementptr inbounds [512 x i32], [512 x i32]* %hist, i64 0, i64 %idxprom10
  %25 = load i32, i32* %arrayidx11, align 4, !tbaa !10
  %cmp12 = icmp eq i32 %23, %25
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %26 = phi i1 [ false, %while.cond ], [ %cmp12, %land.rhs ]
  br i1 %26, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %27 = load i32, i32* %total_passes, align 4, !tbaa !10
  %dec = add i32 %27, -1
  store i32 %dec, i32* %total_passes, align 4, !tbaa !10
  br label %while.cond

while.end:                                        ; preds = %land.end
  store i32 0, i32* %pass_shift, align 4, !tbaa !10
  store i32 0, i32* %pass, align 4, !tbaa !10
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc52, %while.end
  %28 = load i32, i32* %pass, align 4, !tbaa !10
  %29 = load i32, i32* %total_passes, align 4, !tbaa !10
  %cmp15 = icmp ult i32 %28, %29
  br i1 %cmp15, label %for.body17, label %for.end55

for.body17:                                       ; preds = %for.cond14
  %30 = bitcast i32** %pHist to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %30) #10
  %31 = load i32, i32* %pass, align 4, !tbaa !10
  %shl = shl i32 %31, 8
  %idxprom18 = zext i32 %shl to i64
  %arrayidx19 = getelementptr inbounds [512 x i32], [512 x i32]* %hist, i64 0, i64 %idxprom18
  store i32* %arrayidx19, i32** %pHist, align 8, !tbaa !8
  %32 = bitcast [256 x i32]* %offsets to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* %32) #10
  %33 = bitcast i32* %cur_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %33) #10
  store i32 0, i32* %cur_ofs, align 4, !tbaa !10
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc29, %for.body17
  %34 = load i32, i32* %i, align 4, !tbaa !10
  %cmp21 = icmp ult i32 %34, 256
  br i1 %cmp21, label %for.body23, label %for.end31

for.body23:                                       ; preds = %for.cond20
  %35 = load i32, i32* %cur_ofs, align 4, !tbaa !10
  %36 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom24 = zext i32 %36 to i64
  %arrayidx25 = getelementptr inbounds [256 x i32], [256 x i32]* %offsets, i64 0, i64 %idxprom24
  store i32 %35, i32* %arrayidx25, align 4, !tbaa !10
  %37 = load i32*, i32** %pHist, align 8, !tbaa !8
  %38 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom26 = zext i32 %38 to i64
  %arrayidx27 = getelementptr inbounds i32, i32* %37, i64 %idxprom26
  %39 = load i32, i32* %arrayidx27, align 4, !tbaa !10
  %40 = load i32, i32* %cur_ofs, align 4, !tbaa !10
  %add28 = add i32 %40, %39
  store i32 %add28, i32* %cur_ofs, align 4, !tbaa !10
  br label %for.inc29

for.inc29:                                        ; preds = %for.body23
  %41 = load i32, i32* %i, align 4, !tbaa !10
  %inc30 = add i32 %41, 1
  store i32 %inc30, i32* %i, align 4, !tbaa !10
  br label %for.cond20

for.end31:                                        ; preds = %for.cond20
  store i32 0, i32* %i, align 4, !tbaa !10
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc49, %for.end31
  %42 = load i32, i32* %i, align 4, !tbaa !10
  %43 = load i32, i32* %num_syms.addr, align 4, !tbaa !10
  %cmp33 = icmp ult i32 %42, %43
  br i1 %cmp33, label %for.body35, label %for.end51

for.body35:                                       ; preds = %for.cond32
  %44 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pNew_syms, align 8, !tbaa !8
  %45 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pCur_syms, align 8, !tbaa !8
  %46 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom36 = zext i32 %46 to i64
  %arrayidx37 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %45, i64 %idxprom36
  %m_key38 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx37, i32 0, i32 0
  %47 = load i16, i16* %m_key38, align 2, !tbaa !193
  %conv39 = zext i16 %47 to i32
  %48 = load i32, i32* %pass_shift, align 4, !tbaa !10
  %shr40 = ashr i32 %conv39, %48
  %and41 = and i32 %shr40, 255
  %idxprom42 = sext i32 %and41 to i64
  %arrayidx43 = getelementptr inbounds [256 x i32], [256 x i32]* %offsets, i64 0, i64 %idxprom42
  %49 = load i32, i32* %arrayidx43, align 4, !tbaa !10
  %inc44 = add i32 %49, 1
  store i32 %inc44, i32* %arrayidx43, align 4, !tbaa !10
  %idxprom45 = zext i32 %49 to i64
  %arrayidx46 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %44, i64 %idxprom45
  %50 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pCur_syms, align 8, !tbaa !8
  %51 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom47 = zext i32 %51 to i64
  %arrayidx48 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %50, i64 %idxprom47
  %52 = bitcast %struct.tdefl_sym_freq* %arrayidx46 to i8*
  %53 = bitcast %struct.tdefl_sym_freq* %arrayidx48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %52, i8* align 2 %53, i64 4, i1 false), !tbaa.struct !196
  br label %for.inc49

for.inc49:                                        ; preds = %for.body35
  %54 = load i32, i32* %i, align 4, !tbaa !10
  %inc50 = add i32 %54, 1
  store i32 %inc50, i32* %i, align 4, !tbaa !10
  br label %for.cond32

for.end51:                                        ; preds = %for.cond32
  %55 = bitcast %struct.tdefl_sym_freq** %t to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %55) #10
  %56 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pCur_syms, align 8, !tbaa !8
  store %struct.tdefl_sym_freq* %56, %struct.tdefl_sym_freq** %t, align 8, !tbaa !8
  %57 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pNew_syms, align 8, !tbaa !8
  store %struct.tdefl_sym_freq* %57, %struct.tdefl_sym_freq** %pCur_syms, align 8, !tbaa !8
  %58 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %t, align 8, !tbaa !8
  store %struct.tdefl_sym_freq* %58, %struct.tdefl_sym_freq** %pNew_syms, align 8, !tbaa !8
  %59 = bitcast %struct.tdefl_sym_freq** %t to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59) #10
  %60 = bitcast i32* %cur_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %60) #10
  %61 = bitcast [256 x i32]* %offsets to i8*
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* %61) #10
  %62 = bitcast i32** %pHist to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %62) #10
  br label %for.inc52

for.inc52:                                        ; preds = %for.end51
  %63 = load i32, i32* %pass, align 4, !tbaa !10
  %inc53 = add i32 %63, 1
  store i32 %inc53, i32* %pass, align 4, !tbaa !10
  %64 = load i32, i32* %pass_shift, align 4, !tbaa !10
  %add54 = add i32 %64, 8
  store i32 %add54, i32* %pass_shift, align 4, !tbaa !10
  br label %for.cond14

for.end55:                                        ; preds = %for.cond14
  %65 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %pCur_syms, align 8, !tbaa !8
  %66 = bitcast %struct.tdefl_sym_freq** %pNew_syms to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %66) #10
  %67 = bitcast %struct.tdefl_sym_freq** %pCur_syms to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %67) #10
  %68 = bitcast [512 x i32]* %hist to i8*
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* %68) #10
  %69 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %69) #10
  %70 = bitcast i32* %pass to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %70) #10
  %71 = bitcast i32* %pass_shift to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %71) #10
  %72 = bitcast i32* %total_passes to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %72) #10
  ret %struct.tdefl_sym_freq* %65
}

; Function Attrs: nounwind ssp uwtable
define internal void @tdefl_calculate_minimum_redundancy(%struct.tdefl_sym_freq* %A, i32 %n) #0 {
entry:
  %A.addr = alloca %struct.tdefl_sym_freq*, align 8
  %n.addr = alloca i32, align 4
  %root = alloca i32, align 4
  %leaf = alloca i32, align 4
  %next = alloca i32, align 4
  %avbl = alloca i32, align 4
  %used = alloca i32, align 4
  %dpth = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.tdefl_sym_freq* %A, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  store i32 %n, i32* %n.addr, align 4, !tbaa !10
  %0 = bitcast i32* %root to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %leaf to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  %2 = bitcast i32* %next to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #10
  %3 = bitcast i32* %avbl to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #10
  %4 = bitcast i32* %used to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %4) #10
  %5 = bitcast i32* %dpth to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %5) #10
  %6 = load i32, i32* %n.addr, align 4, !tbaa !10
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.else:                                          ; preds = %entry
  %7 = load i32, i32* %n.addr, align 4, !tbaa !10
  %cmp1 = icmp eq i32 %7, 1
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.else
  %8 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %arrayidx = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %8, i64 0
  %m_key = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx, i32 0, i32 0
  store i16 1, i16* %m_key, align 2, !tbaa !193
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end
  %9 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %arrayidx4 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %9, i64 1
  %m_key5 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx4, i32 0, i32 0
  %10 = load i16, i16* %m_key5, align 2, !tbaa !193
  %conv = zext i16 %10 to i32
  %11 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %arrayidx6 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %11, i64 0
  %m_key7 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx6, i32 0, i32 0
  %12 = load i16, i16* %m_key7, align 2, !tbaa !193
  %conv8 = zext i16 %12 to i32
  %add = add nsw i32 %conv8, %conv
  %conv9 = trunc i32 %add to i16
  store i16 %conv9, i16* %m_key7, align 2, !tbaa !193
  store i32 0, i32* %root, align 4, !tbaa !10
  store i32 2, i32* %leaf, align 4, !tbaa !10
  store i32 1, i32* %next, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end3
  %13 = load i32, i32* %next, align 4, !tbaa !10
  %14 = load i32, i32* %n.addr, align 4, !tbaa !10
  %sub = sub nsw i32 %14, 1
  %cmp10 = icmp slt i32 %13, %sub
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %15 = load i32, i32* %leaf, align 4, !tbaa !10
  %16 = load i32, i32* %n.addr, align 4, !tbaa !10
  %cmp12 = icmp sge i32 %15, %16
  br i1 %cmp12, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body
  %17 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %18 = load i32, i32* %root, align 4, !tbaa !10
  %idxprom = sext i32 %18 to i64
  %arrayidx14 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %17, i64 %idxprom
  %m_key15 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx14, i32 0, i32 0
  %19 = load i16, i16* %m_key15, align 2, !tbaa !193
  %conv16 = zext i16 %19 to i32
  %20 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %21 = load i32, i32* %leaf, align 4, !tbaa !10
  %idxprom17 = sext i32 %21 to i64
  %arrayidx18 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %20, i64 %idxprom17
  %m_key19 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx18, i32 0, i32 0
  %22 = load i16, i16* %m_key19, align 2, !tbaa !193
  %conv20 = zext i16 %22 to i32
  %cmp21 = icmp slt i32 %conv16, %conv20
  br i1 %cmp21, label %if.then23, label %if.else34

if.then23:                                        ; preds = %lor.lhs.false, %for.body
  %23 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %24 = load i32, i32* %root, align 4, !tbaa !10
  %idxprom24 = sext i32 %24 to i64
  %arrayidx25 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %23, i64 %idxprom24
  %m_key26 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx25, i32 0, i32 0
  %25 = load i16, i16* %m_key26, align 2, !tbaa !193
  %26 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %27 = load i32, i32* %next, align 4, !tbaa !10
  %idxprom27 = sext i32 %27 to i64
  %arrayidx28 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %26, i64 %idxprom27
  %m_key29 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx28, i32 0, i32 0
  store i16 %25, i16* %m_key29, align 2, !tbaa !193
  %28 = load i32, i32* %next, align 4, !tbaa !10
  %conv30 = trunc i32 %28 to i16
  %29 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %30 = load i32, i32* %root, align 4, !tbaa !10
  %inc = add nsw i32 %30, 1
  store i32 %inc, i32* %root, align 4, !tbaa !10
  %idxprom31 = sext i32 %30 to i64
  %arrayidx32 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %29, i64 %idxprom31
  %m_key33 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx32, i32 0, i32 0
  store i16 %conv30, i16* %m_key33, align 2, !tbaa !193
  br label %if.end42

if.else34:                                        ; preds = %lor.lhs.false
  %31 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %32 = load i32, i32* %leaf, align 4, !tbaa !10
  %inc35 = add nsw i32 %32, 1
  store i32 %inc35, i32* %leaf, align 4, !tbaa !10
  %idxprom36 = sext i32 %32 to i64
  %arrayidx37 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %31, i64 %idxprom36
  %m_key38 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx37, i32 0, i32 0
  %33 = load i16, i16* %m_key38, align 2, !tbaa !193
  %34 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %35 = load i32, i32* %next, align 4, !tbaa !10
  %idxprom39 = sext i32 %35 to i64
  %arrayidx40 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %34, i64 %idxprom39
  %m_key41 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx40, i32 0, i32 0
  store i16 %33, i16* %m_key41, align 2, !tbaa !193
  br label %if.end42

if.end42:                                         ; preds = %if.else34, %if.then23
  %36 = load i32, i32* %leaf, align 4, !tbaa !10
  %37 = load i32, i32* %n.addr, align 4, !tbaa !10
  %cmp43 = icmp sge i32 %36, %37
  br i1 %cmp43, label %if.then58, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %if.end42
  %38 = load i32, i32* %root, align 4, !tbaa !10
  %39 = load i32, i32* %next, align 4, !tbaa !10
  %cmp46 = icmp slt i32 %38, %39
  br i1 %cmp46, label %land.lhs.true, label %if.else77

land.lhs.true:                                    ; preds = %lor.lhs.false45
  %40 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %41 = load i32, i32* %root, align 4, !tbaa !10
  %idxprom48 = sext i32 %41 to i64
  %arrayidx49 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %40, i64 %idxprom48
  %m_key50 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx49, i32 0, i32 0
  %42 = load i16, i16* %m_key50, align 2, !tbaa !193
  %conv51 = zext i16 %42 to i32
  %43 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %44 = load i32, i32* %leaf, align 4, !tbaa !10
  %idxprom52 = sext i32 %44 to i64
  %arrayidx53 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %43, i64 %idxprom52
  %m_key54 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx53, i32 0, i32 0
  %45 = load i16, i16* %m_key54, align 2, !tbaa !193
  %conv55 = zext i16 %45 to i32
  %cmp56 = icmp slt i32 %conv51, %conv55
  br i1 %cmp56, label %if.then58, label %if.else77

if.then58:                                        ; preds = %land.lhs.true, %if.end42
  %46 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %47 = load i32, i32* %next, align 4, !tbaa !10
  %idxprom59 = sext i32 %47 to i64
  %arrayidx60 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %46, i64 %idxprom59
  %m_key61 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx60, i32 0, i32 0
  %48 = load i16, i16* %m_key61, align 2, !tbaa !193
  %conv62 = zext i16 %48 to i32
  %49 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %50 = load i32, i32* %root, align 4, !tbaa !10
  %idxprom63 = sext i32 %50 to i64
  %arrayidx64 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %49, i64 %idxprom63
  %m_key65 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx64, i32 0, i32 0
  %51 = load i16, i16* %m_key65, align 2, !tbaa !193
  %conv66 = zext i16 %51 to i32
  %add67 = add nsw i32 %conv62, %conv66
  %conv68 = trunc i32 %add67 to i16
  %52 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %53 = load i32, i32* %next, align 4, !tbaa !10
  %idxprom69 = sext i32 %53 to i64
  %arrayidx70 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %52, i64 %idxprom69
  %m_key71 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx70, i32 0, i32 0
  store i16 %conv68, i16* %m_key71, align 2, !tbaa !193
  %54 = load i32, i32* %next, align 4, !tbaa !10
  %conv72 = trunc i32 %54 to i16
  %55 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %56 = load i32, i32* %root, align 4, !tbaa !10
  %inc73 = add nsw i32 %56, 1
  store i32 %inc73, i32* %root, align 4, !tbaa !10
  %idxprom74 = sext i32 %56 to i64
  %arrayidx75 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %55, i64 %idxprom74
  %m_key76 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx75, i32 0, i32 0
  store i16 %conv72, i16* %m_key76, align 2, !tbaa !193
  br label %if.end92

if.else77:                                        ; preds = %land.lhs.true, %lor.lhs.false45
  %57 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %58 = load i32, i32* %next, align 4, !tbaa !10
  %idxprom78 = sext i32 %58 to i64
  %arrayidx79 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %57, i64 %idxprom78
  %m_key80 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx79, i32 0, i32 0
  %59 = load i16, i16* %m_key80, align 2, !tbaa !193
  %conv81 = zext i16 %59 to i32
  %60 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %61 = load i32, i32* %leaf, align 4, !tbaa !10
  %inc82 = add nsw i32 %61, 1
  store i32 %inc82, i32* %leaf, align 4, !tbaa !10
  %idxprom83 = sext i32 %61 to i64
  %arrayidx84 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %60, i64 %idxprom83
  %m_key85 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx84, i32 0, i32 0
  %62 = load i16, i16* %m_key85, align 2, !tbaa !193
  %conv86 = zext i16 %62 to i32
  %add87 = add nsw i32 %conv81, %conv86
  %conv88 = trunc i32 %add87 to i16
  %63 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %64 = load i32, i32* %next, align 4, !tbaa !10
  %idxprom89 = sext i32 %64 to i64
  %arrayidx90 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %63, i64 %idxprom89
  %m_key91 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx90, i32 0, i32 0
  store i16 %conv88, i16* %m_key91, align 2, !tbaa !193
  br label %if.end92

if.end92:                                         ; preds = %if.else77, %if.then58
  br label %for.inc

for.inc:                                          ; preds = %if.end92
  %65 = load i32, i32* %next, align 4, !tbaa !10
  %inc93 = add nsw i32 %65, 1
  store i32 %inc93, i32* %next, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %66 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %67 = load i32, i32* %n.addr, align 4, !tbaa !10
  %sub94 = sub nsw i32 %67, 2
  %idxprom95 = sext i32 %sub94 to i64
  %arrayidx96 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %66, i64 %idxprom95
  %m_key97 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx96, i32 0, i32 0
  store i16 0, i16* %m_key97, align 2, !tbaa !193
  %68 = load i32, i32* %n.addr, align 4, !tbaa !10
  %sub98 = sub nsw i32 %68, 3
  store i32 %sub98, i32* %next, align 4, !tbaa !10
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc115, %for.end
  %69 = load i32, i32* %next, align 4, !tbaa !10
  %cmp100 = icmp sge i32 %69, 0
  br i1 %cmp100, label %for.body102, label %for.end116

for.body102:                                      ; preds = %for.cond99
  %70 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %71 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %72 = load i32, i32* %next, align 4, !tbaa !10
  %idxprom103 = sext i32 %72 to i64
  %arrayidx104 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %71, i64 %idxprom103
  %m_key105 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx104, i32 0, i32 0
  %73 = load i16, i16* %m_key105, align 2, !tbaa !193
  %idxprom106 = zext i16 %73 to i64
  %arrayidx107 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %70, i64 %idxprom106
  %m_key108 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx107, i32 0, i32 0
  %74 = load i16, i16* %m_key108, align 2, !tbaa !193
  %conv109 = zext i16 %74 to i32
  %add110 = add nsw i32 %conv109, 1
  %conv111 = trunc i32 %add110 to i16
  %75 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %76 = load i32, i32* %next, align 4, !tbaa !10
  %idxprom112 = sext i32 %76 to i64
  %arrayidx113 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %75, i64 %idxprom112
  %m_key114 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx113, i32 0, i32 0
  store i16 %conv111, i16* %m_key114, align 2, !tbaa !193
  br label %for.inc115

for.inc115:                                       ; preds = %for.body102
  %77 = load i32, i32* %next, align 4, !tbaa !10
  %dec = add nsw i32 %77, -1
  store i32 %dec, i32* %next, align 4, !tbaa !10
  br label %for.cond99

for.end116:                                       ; preds = %for.cond99
  store i32 1, i32* %avbl, align 4, !tbaa !10
  store i32 0, i32* %dpth, align 4, !tbaa !10
  store i32 0, i32* %used, align 4, !tbaa !10
  %78 = load i32, i32* %n.addr, align 4, !tbaa !10
  %sub117 = sub nsw i32 %78, 2
  store i32 %sub117, i32* %root, align 4, !tbaa !10
  %79 = load i32, i32* %n.addr, align 4, !tbaa !10
  %sub118 = sub nsw i32 %79, 1
  store i32 %sub118, i32* %next, align 4, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %while.end143, %for.end116
  %80 = load i32, i32* %avbl, align 4, !tbaa !10
  %cmp119 = icmp sgt i32 %80, 0
  br i1 %cmp119, label %while.body, label %while.end145

while.body:                                       ; preds = %while.cond
  br label %while.cond121

while.cond121:                                    ; preds = %while.body130, %while.body
  %81 = load i32, i32* %root, align 4, !tbaa !10
  %cmp122 = icmp sge i32 %81, 0
  br i1 %cmp122, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond121
  %82 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %83 = load i32, i32* %root, align 4, !tbaa !10
  %idxprom124 = sext i32 %83 to i64
  %arrayidx125 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %82, i64 %idxprom124
  %m_key126 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx125, i32 0, i32 0
  %84 = load i16, i16* %m_key126, align 2, !tbaa !193
  %conv127 = zext i16 %84 to i32
  %85 = load i32, i32* %dpth, align 4, !tbaa !10
  %cmp128 = icmp eq i32 %conv127, %85
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond121
  %86 = phi i1 [ false, %while.cond121 ], [ %cmp128, %land.rhs ]
  br i1 %86, label %while.body130, label %while.end

while.body130:                                    ; preds = %land.end
  %87 = load i32, i32* %used, align 4, !tbaa !10
  %inc131 = add nsw i32 %87, 1
  store i32 %inc131, i32* %used, align 4, !tbaa !10
  %88 = load i32, i32* %root, align 4, !tbaa !10
  %dec132 = add nsw i32 %88, -1
  store i32 %dec132, i32* %root, align 4, !tbaa !10
  br label %while.cond121

while.end:                                        ; preds = %land.end
  br label %while.cond133

while.cond133:                                    ; preds = %while.body136, %while.end
  %89 = load i32, i32* %avbl, align 4, !tbaa !10
  %90 = load i32, i32* %used, align 4, !tbaa !10
  %cmp134 = icmp sgt i32 %89, %90
  br i1 %cmp134, label %while.body136, label %while.end143

while.body136:                                    ; preds = %while.cond133
  %91 = load i32, i32* %dpth, align 4, !tbaa !10
  %conv137 = trunc i32 %91 to i16
  %92 = load %struct.tdefl_sym_freq*, %struct.tdefl_sym_freq** %A.addr, align 8, !tbaa !8
  %93 = load i32, i32* %next, align 4, !tbaa !10
  %dec138 = add nsw i32 %93, -1
  store i32 %dec138, i32* %next, align 4, !tbaa !10
  %idxprom139 = sext i32 %93 to i64
  %arrayidx140 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %92, i64 %idxprom139
  %m_key141 = getelementptr inbounds %struct.tdefl_sym_freq, %struct.tdefl_sym_freq* %arrayidx140, i32 0, i32 0
  store i16 %conv137, i16* %m_key141, align 2, !tbaa !193
  %94 = load i32, i32* %avbl, align 4, !tbaa !10
  %dec142 = add nsw i32 %94, -1
  store i32 %dec142, i32* %avbl, align 4, !tbaa !10
  br label %while.cond133

while.end143:                                     ; preds = %while.cond133
  %95 = load i32, i32* %used, align 4, !tbaa !10
  %mul = mul nsw i32 2, %95
  store i32 %mul, i32* %avbl, align 4, !tbaa !10
  %96 = load i32, i32* %dpth, align 4, !tbaa !10
  %inc144 = add nsw i32 %96, 1
  store i32 %inc144, i32* %dpth, align 4, !tbaa !10
  store i32 0, i32* %used, align 4, !tbaa !10
  br label %while.cond

while.end145:                                     ; preds = %while.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end145, %if.then2, %if.then
  %97 = bitcast i32* %dpth to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %97) #10
  %98 = bitcast i32* %used to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %98) #10
  %99 = bitcast i32* %avbl to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %99) #10
  %100 = bitcast i32* %next to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %100) #10
  %101 = bitcast i32* %leaf to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %101) #10
  %102 = bitcast i32* %root to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %102) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @tdefl_huffman_enforce_max_code_size(i32* %pNum_codes, i32 %code_list_len, i32 %max_code_size) #0 {
entry:
  %pNum_codes.addr = alloca i32*, align 8
  %code_list_len.addr = alloca i32, align 4
  %max_code_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %total = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  store i32* %pNum_codes, i32** %pNum_codes.addr, align 8, !tbaa !8
  store i32 %code_list_len, i32* %code_list_len.addr, align 4, !tbaa !10
  store i32 %max_code_size, i32* %max_code_size.addr, align 4, !tbaa !10
  %0 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #10
  %1 = bitcast i32* %total to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #10
  store i32 0, i32* %total, align 4, !tbaa !10
  %2 = load i32, i32* %code_list_len.addr, align 4, !tbaa !10
  %cmp = icmp sle i32 %2, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %max_code_size.addr, align 4, !tbaa !10
  %add = add nsw i32 %3, 1
  store i32 %add, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !tbaa !10
  %cmp1 = icmp sle i32 %4, 32
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %pNum_codes.addr, align 8, !tbaa !8
  %6 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom
  %7 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %8 = load i32*, i32** %pNum_codes.addr, align 8, !tbaa !8
  %9 = load i32, i32* %max_code_size.addr, align 4, !tbaa !10
  %idxprom2 = sext i32 %9 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %8, i64 %idxprom2
  %10 = load i32, i32* %arrayidx3, align 4, !tbaa !10
  %add4 = add nsw i32 %10, %7
  store i32 %add4, i32* %arrayidx3, align 4, !tbaa !10
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !tbaa !10
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* %i, align 4, !tbaa !10
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %max_code_size.addr, align 4, !tbaa !10
  store i32 %12, i32* %i, align 4, !tbaa !10
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc11, %for.end
  %13 = load i32, i32* %i, align 4, !tbaa !10
  %cmp6 = icmp sgt i32 %13, 0
  br i1 %cmp6, label %for.body7, label %for.end12

for.body7:                                        ; preds = %for.cond5
  %14 = load i32*, i32** %pNum_codes.addr, align 8, !tbaa !8
  %15 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom8 = sext i32 %15 to i64
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i64 %idxprom8
  %16 = load i32, i32* %arrayidx9, align 4, !tbaa !10
  %17 = load i32, i32* %max_code_size.addr, align 4, !tbaa !10
  %18 = load i32, i32* %i, align 4, !tbaa !10
  %sub = sub nsw i32 %17, %18
  %shl = shl i32 %16, %sub
  %19 = load i32, i32* %total, align 4, !tbaa !10
  %add10 = add i32 %19, %shl
  store i32 %add10, i32* %total, align 4, !tbaa !10
  br label %for.inc11

for.inc11:                                        ; preds = %for.body7
  %20 = load i32, i32* %i, align 4, !tbaa !10
  %dec = add nsw i32 %20, -1
  store i32 %dec, i32* %i, align 4, !tbaa !10
  br label %for.cond5

for.end12:                                        ; preds = %for.cond5
  br label %while.cond

while.cond:                                       ; preds = %for.end37, %for.end12
  %21 = load i32, i32* %total, align 4, !tbaa !10
  %conv = zext i32 %21 to i64
  %22 = load i32, i32* %max_code_size.addr, align 4, !tbaa !10
  %sh_prom = zext i32 %22 to i64
  %shl13 = shl i64 1, %sh_prom
  %cmp14 = icmp ne i64 %conv, %shl13
  br i1 %cmp14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %23 = load i32*, i32** %pNum_codes.addr, align 8, !tbaa !8
  %24 = load i32, i32* %max_code_size.addr, align 4, !tbaa !10
  %idxprom16 = sext i32 %24 to i64
  %arrayidx17 = getelementptr inbounds i32, i32* %23, i64 %idxprom16
  %25 = load i32, i32* %arrayidx17, align 4, !tbaa !10
  %dec18 = add nsw i32 %25, -1
  store i32 %dec18, i32* %arrayidx17, align 4, !tbaa !10
  %26 = load i32, i32* %max_code_size.addr, align 4, !tbaa !10
  %sub19 = sub nsw i32 %26, 1
  store i32 %sub19, i32* %i, align 4, !tbaa !10
  br label %for.cond20

for.cond20:                                       ; preds = %for.inc35, %while.body
  %27 = load i32, i32* %i, align 4, !tbaa !10
  %cmp21 = icmp sgt i32 %27, 0
  br i1 %cmp21, label %for.body23, label %for.end37

for.body23:                                       ; preds = %for.cond20
  %28 = load i32*, i32** %pNum_codes.addr, align 8, !tbaa !8
  %29 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom24 = sext i32 %29 to i64
  %arrayidx25 = getelementptr inbounds i32, i32* %28, i64 %idxprom24
  %30 = load i32, i32* %arrayidx25, align 4, !tbaa !10
  %tobool = icmp ne i32 %30, 0
  br i1 %tobool, label %if.then26, label %if.end34

if.then26:                                        ; preds = %for.body23
  %31 = load i32*, i32** %pNum_codes.addr, align 8, !tbaa !8
  %32 = load i32, i32* %i, align 4, !tbaa !10
  %idxprom27 = sext i32 %32 to i64
  %arrayidx28 = getelementptr inbounds i32, i32* %31, i64 %idxprom27
  %33 = load i32, i32* %arrayidx28, align 4, !tbaa !10
  %dec29 = add nsw i32 %33, -1
  store i32 %dec29, i32* %arrayidx28, align 4, !tbaa !10
  %34 = load i32*, i32** %pNum_codes.addr, align 8, !tbaa !8
  %35 = load i32, i32* %i, align 4, !tbaa !10
  %add30 = add nsw i32 %35, 1
  %idxprom31 = sext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds i32, i32* %34, i64 %idxprom31
  %36 = load i32, i32* %arrayidx32, align 4, !tbaa !10
  %add33 = add nsw i32 %36, 2
  store i32 %add33, i32* %arrayidx32, align 4, !tbaa !10
  br label %for.end37

if.end34:                                         ; preds = %for.body23
  br label %for.inc35

for.inc35:                                        ; preds = %if.end34
  %37 = load i32, i32* %i, align 4, !tbaa !10
  %dec36 = add nsw i32 %37, -1
  store i32 %dec36, i32* %i, align 4, !tbaa !10
  br label %for.cond20

for.end37:                                        ; preds = %if.then26, %for.cond20
  %38 = load i32, i32* %total, align 4, !tbaa !10
  %dec38 = add i32 %38, -1
  store i32 %dec38, i32* %total, align 4, !tbaa !10
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then
  %39 = bitcast i32* %total to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %39) #10
  %40 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %40) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 1, label %cleanup.cont
  ]

cleanup.cont:                                     ; preds = %cleanup, %cleanup
  ret void

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_reader_locate_header_sig(%struct.mz_zip_archive* %pZip, i32 %record_sig, i32 %record_size, i64* %pOfs) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %record_sig.addr = alloca i32, align 4
  %record_size.addr = alloca i32, align 4
  %pOfs.addr = alloca i64*, align 8
  %cur_file_ofs = alloca i64, align 8
  %buf_u32 = alloca [1024 x i32], align 16
  %pBuf = alloca i8*, align 8
  %cleanup.dest.slot = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %s = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i32 %record_sig, i32* %record_sig.addr, align 4, !tbaa !10
  store i32 %record_size, i32* %record_size.addr, align 4, !tbaa !10
  store i64* %pOfs, i64** %pOfs.addr, align 8, !tbaa !8
  %0 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast [1024 x i32]* %buf_u32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* %1) #10
  %2 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %2) #10
  %arraydecay = getelementptr inbounds [1024 x i32], [1024 x i32]* %buf_u32, i64 0, i64 0
  %3 = bitcast i32* %arraydecay to i8*
  store i8* %3, i8** %pBuf, align 8, !tbaa !8
  %4 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %4, i32 0, i32 0
  %5 = load i64, i64* %m_archive_size, align 8, !tbaa !110
  %6 = load i32, i32* %record_size.addr, align 4, !tbaa !10
  %conv = zext i32 %6 to i64
  %cmp = icmp ult i64 %5, %conv
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup67

if.end:                                           ; preds = %entry
  %7 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size2 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %7, i32 0, i32 0
  %8 = load i64, i64* %m_archive_size2, align 8, !tbaa !110
  %sub = sub nsw i64 %8, 4096
  %cmp3 = icmp sgt i64 %sub, 0
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %9 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size5 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %9, i32 0, i32 0
  %10 = load i64, i64* %m_archive_size5, align 8, !tbaa !110
  %sub6 = sub nsw i64 %10, 4096
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub6, %cond.true ], [ 0, %cond.false ]
  store i64 %cond, i64* %cur_file_ofs, align 8, !tbaa !76
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont65, %cond.end
  %11 = bitcast i32* %i to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %11) #10
  %12 = bitcast i32* %n to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %12) #10
  %13 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size7 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %13, i32 0, i32 0
  %14 = load i64, i64* %m_archive_size7, align 8, !tbaa !110
  %15 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %sub8 = sub i64 %14, %15
  %cmp9 = icmp ult i64 4096, %sub8
  br i1 %cmp9, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %for.cond
  br label %cond.end15

cond.false12:                                     ; preds = %for.cond
  %16 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size13 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %16, i32 0, i32 0
  %17 = load i64, i64* %m_archive_size13, align 8, !tbaa !110
  %18 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %sub14 = sub i64 %17, %18
  br label %cond.end15

cond.end15:                                       ; preds = %cond.false12, %cond.true11
  %cond16 = phi i64 [ 4096, %cond.true11 ], [ %sub14, %cond.false12 ]
  %conv17 = trunc i64 %cond16 to i32
  store i32 %conv17, i32* %n, align 4, !tbaa !10
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRead = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 11
  %20 = load i64 (i8*, i64, i8*, i64)*, i64 (i8*, i64, i8*, i64)** %m_pRead, align 8, !tbaa !109
  %21 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pIO_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %21, i32 0, i32 14
  %22 = load i8*, i8** %m_pIO_opaque, align 8, !tbaa !120
  %23 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %24 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %25 = load i32, i32* %n, align 4, !tbaa !10
  %conv18 = sext i32 %25 to i64
  %call = call i64 %20(i8* %22, i64 %23, i8* %24, i64 %conv18)
  %26 = load i32, i32* %n, align 4, !tbaa !10
  %conv19 = zext i32 %26 to i64
  %cmp20 = icmp ne i64 %call, %conv19
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %cond.end15
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup62

if.end23:                                         ; preds = %cond.end15
  %27 = load i32, i32* %n, align 4, !tbaa !10
  %sub24 = sub nsw i32 %27, 4
  store i32 %sub24, i32* %i, align 4, !tbaa !10
  br label %for.cond25

for.cond25:                                       ; preds = %for.inc, %if.end23
  %28 = load i32, i32* %i, align 4, !tbaa !10
  %cmp26 = icmp sge i32 %28, 0
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond25
  %29 = bitcast i32* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %29) #10
  %30 = load i8*, i8** %pBuf, align 8, !tbaa !8
  %31 = load i32, i32* %i, align 4, !tbaa !10
  %idx.ext = sext i32 %31 to i64
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 %idx.ext
  %32 = bitcast i8* %add.ptr to i32*
  %33 = load i32, i32* %32, align 4, !tbaa !10
  store i32 %33, i32* %s, align 4, !tbaa !10
  %34 = load i32, i32* %s, align 4, !tbaa !10
  %35 = load i32, i32* %record_sig.addr, align 4, !tbaa !10
  %cmp28 = icmp eq i32 %34, %35
  br i1 %cmp28, label %if.then30, label %if.end39

if.then30:                                        ; preds = %for.body
  %36 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size31 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %36, i32 0, i32 0
  %37 = load i64, i64* %m_archive_size31, align 8, !tbaa !110
  %38 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %39 = load i32, i32* %i, align 4, !tbaa !10
  %conv32 = sext i32 %39 to i64
  %add = add nsw i64 %38, %conv32
  %sub33 = sub i64 %37, %add
  %40 = load i32, i32* %record_size.addr, align 4, !tbaa !10
  %conv34 = zext i32 %40 to i64
  %cmp35 = icmp uge i64 %sub33, %conv34
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %if.then30
  store i32 4, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end38:                                         ; preds = %if.then30
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %for.body
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end39, %if.then37
  %41 = bitcast i32* %s to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %41) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 4, label %for.end
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.inc

for.inc:                                          ; preds = %cleanup.cont
  %42 = load i32, i32* %i, align 4, !tbaa !10
  %dec = add nsw i32 %42, -1
  store i32 %dec, i32* %i, align 4, !tbaa !10
  br label %for.cond25

for.end:                                          ; preds = %cleanup, %for.cond25
  %43 = load i32, i32* %i, align 4, !tbaa !10
  %cmp40 = icmp sge i32 %43, 0
  br i1 %cmp40, label %if.then42, label %if.end45

if.then42:                                        ; preds = %for.end
  %44 = load i32, i32* %i, align 4, !tbaa !10
  %conv43 = sext i32 %44 to i64
  %45 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %add44 = add nsw i64 %45, %conv43
  store i64 %add44, i64* %cur_file_ofs, align 8, !tbaa !76
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup62

if.end45:                                         ; preds = %for.end
  %46 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %tobool = icmp ne i64 %46, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then52

lor.lhs.false:                                    ; preds = %if.end45
  %47 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_archive_size46 = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %47, i32 0, i32 0
  %48 = load i64, i64* %m_archive_size46, align 8, !tbaa !110
  %49 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %sub47 = sub i64 %48, %49
  %50 = load i32, i32* %record_size.addr, align 4, !tbaa !10
  %add48 = add i32 65535, %50
  %conv49 = zext i32 %add48 to i64
  %cmp50 = icmp uge i64 %sub47, %conv49
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %lor.lhs.false, %if.end45
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup62

if.end53:                                         ; preds = %lor.lhs.false
  %51 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %sub54 = sub i64 %51, 4093
  %cmp55 = icmp ugt i64 %sub54, 0
  br i1 %cmp55, label %cond.true57, label %cond.false59

cond.true57:                                      ; preds = %if.end53
  %52 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %sub58 = sub i64 %52, 4093
  br label %cond.end60

cond.false59:                                     ; preds = %if.end53
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi i64 [ %sub58, %cond.true57 ], [ 0, %cond.false59 ]
  store i64 %cond61, i64* %cur_file_ofs, align 8, !tbaa !76
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup62

cleanup62:                                        ; preds = %cond.end60, %if.then52, %if.then42, %if.then22
  %53 = bitcast i32* %n to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %53) #10
  %54 = bitcast i32* %i to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %54) #10
  %cleanup.dest64 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest64, label %cleanup67 [
    i32 0, label %cleanup.cont65
    i32 2, label %for.end66
  ]

cleanup.cont65:                                   ; preds = %cleanup62
  br label %for.cond

for.end66:                                        ; preds = %cleanup62
  %55 = load i64, i64* %cur_file_ofs, align 8, !tbaa !76
  %56 = load i64*, i64** %pOfs.addr, align 8, !tbaa !8
  store i64 %55, i64* %56, align 8, !tbaa !76
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup67

cleanup67:                                        ; preds = %for.end66, %cleanup62, %if.then
  %57 = bitcast i8** %pBuf to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %57) #10
  %58 = bitcast [1024 x i32]* %buf_u32 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* %58) #10
  %59 = bitcast i64* %cur_file_ofs to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59) #10
  %60 = load i32, i32* %retval, align 4
  ret i32 %60

unreachable:                                      ; preds = %cleanup
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define internal void @mz_zip_reader_sort_central_dir_offsets_by_filename(%struct.mz_zip_archive* %pZip) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pState = alloca %struct.mz_zip_internal_state_tag*, align 8
  %pCentral_dir_offsets = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir = alloca %struct.mz_zip_array*, align 8
  %pIndices = alloca i32*, align 8
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %size = alloca i32, align 4
  %cleanup.dest.slot = alloca i32, align 4
  %child = alloca i64, align 8
  %root = alloca i64, align 8
  %t = alloca i32, align 4
  %child34 = alloca i64, align 8
  %root35 = alloca i64, align 8
  %t37 = alloca i32, align 4
  %t74 = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %0 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pState = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %1, i32 0, i32 15
  %2 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %m_pState, align 8, !tbaa !98
  store %struct.mz_zip_internal_state_tag* %2, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %3 = bitcast %struct.mz_zip_array** %pCentral_dir_offsets to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %3) #10
  %4 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %4, i32 0, i32 1
  store %struct.mz_zip_array* %m_central_dir_offsets, %struct.mz_zip_array** %pCentral_dir_offsets, align 8, !tbaa !8
  %5 = bitcast %struct.mz_zip_array** %pCentral_dir to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %5) #10
  %6 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_central_dir = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %6, i32 0, i32 0
  store %struct.mz_zip_array* %m_central_dir, %struct.mz_zip_array** %pCentral_dir, align 8, !tbaa !8
  %7 = bitcast i32** %pIndices to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %7) #10
  %8 = bitcast i32* %start to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %8) #10
  %9 = bitcast i32* %end to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #10
  %10 = bitcast i32* %size to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %10) #10
  %11 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_total_files = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %11, i32 0, i32 2
  %12 = load i32, i32* %m_total_files, align 8, !tbaa !113
  store i32 %12, i32* %size, align 4, !tbaa !10
  %13 = load i32, i32* %size, align 4, !tbaa !10
  %cmp = icmp ule i32 %13, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup83

if.end:                                           ; preds = %entry
  %14 = load %struct.mz_zip_internal_state_tag*, %struct.mz_zip_internal_state_tag** %pState, align 8, !tbaa !8
  %m_sorted_central_dir_offsets = getelementptr inbounds %struct.mz_zip_internal_state_tag, %struct.mz_zip_internal_state_tag* %14, i32 0, i32 2
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %m_sorted_central_dir_offsets, i32 0, i32 0
  %15 = load i8*, i8** %m_p, align 8, !tbaa !123
  %16 = bitcast i8* %15 to i32*
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 0
  store i32* %arrayidx, i32** %pIndices, align 8, !tbaa !8
  %17 = load i32, i32* %size, align 4, !tbaa !10
  %sub = sub i32 %17, 2
  %shr = lshr i32 %sub, 1
  store i32 %shr, i32* %start, align 4, !tbaa !10
  br label %for.cond

for.cond:                                         ; preds = %cleanup.cont, %if.end
  %18 = bitcast i64* %child to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %18) #10
  %19 = bitcast i64* %root to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %19) #10
  %20 = load i32, i32* %start, align 4, !tbaa !10
  %conv = zext i32 %20 to i64
  store i64 %conv, i64* %root, align 8, !tbaa !76
  br label %for.cond1

for.cond1:                                        ; preds = %do.end, %for.cond
  %21 = load i64, i64* %root, align 8, !tbaa !76
  %shl = shl i64 %21, 1
  %add = add i64 %shl, 1
  store i64 %add, i64* %child, align 8, !tbaa !76
  %22 = load i32, i32* %size, align 4, !tbaa !10
  %conv2 = zext i32 %22 to i64
  %cmp3 = icmp uge i64 %add, %conv2
  br i1 %cmp3, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.cond1
  br label %for.end

if.end6:                                          ; preds = %for.cond1
  %23 = load i64, i64* %child, align 8, !tbaa !76
  %add7 = add i64 %23, 1
  %24 = load i32, i32* %size, align 4, !tbaa !10
  %conv8 = zext i32 %24 to i64
  %cmp9 = icmp ult i64 %add7, %conv8
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end6
  %25 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8, !tbaa !8
  %26 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8, !tbaa !8
  %27 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %28 = load i64, i64* %child, align 8, !tbaa !76
  %arrayidx11 = getelementptr inbounds i32, i32* %27, i64 %28
  %29 = load i32, i32* %arrayidx11, align 4, !tbaa !10
  %30 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %31 = load i64, i64* %child, align 8, !tbaa !76
  %add12 = add i64 %31, 1
  %arrayidx13 = getelementptr inbounds i32, i32* %30, i64 %add12
  %32 = load i32, i32* %arrayidx13, align 4, !tbaa !10
  %call = call i32 @mz_zip_reader_filename_less(%struct.mz_zip_array* %25, %struct.mz_zip_array* %26, i32 %29, i32 %32)
  %tobool = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end6
  %33 = phi i1 [ false, %if.end6 ], [ %tobool, %land.rhs ]
  %land.ext = zext i1 %33 to i32
  %conv14 = sext i32 %land.ext to i64
  %34 = load i64, i64* %child, align 8, !tbaa !76
  %add15 = add i64 %34, %conv14
  store i64 %add15, i64* %child, align 8, !tbaa !76
  %35 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8, !tbaa !8
  %36 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8, !tbaa !8
  %37 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %38 = load i64, i64* %root, align 8, !tbaa !76
  %arrayidx16 = getelementptr inbounds i32, i32* %37, i64 %38
  %39 = load i32, i32* %arrayidx16, align 4, !tbaa !10
  %40 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %41 = load i64, i64* %child, align 8, !tbaa !76
  %arrayidx17 = getelementptr inbounds i32, i32* %40, i64 %41
  %42 = load i32, i32* %arrayidx17, align 4, !tbaa !10
  %call18 = call i32 @mz_zip_reader_filename_less(%struct.mz_zip_array* %35, %struct.mz_zip_array* %36, i32 %39, i32 %42)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %land.end
  br label %for.end

if.end21:                                         ; preds = %land.end
  br label %do.body

do.body:                                          ; preds = %if.end21
  %43 = bitcast i32* %t to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %43) #10
  %44 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %45 = load i64, i64* %root, align 8, !tbaa !76
  %arrayidx22 = getelementptr inbounds i32, i32* %44, i64 %45
  %46 = load i32, i32* %arrayidx22, align 4, !tbaa !10
  store i32 %46, i32* %t, align 4, !tbaa !10
  %47 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %48 = load i64, i64* %child, align 8, !tbaa !76
  %arrayidx23 = getelementptr inbounds i32, i32* %47, i64 %48
  %49 = load i32, i32* %arrayidx23, align 4, !tbaa !10
  %50 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %51 = load i64, i64* %root, align 8, !tbaa !76
  %arrayidx24 = getelementptr inbounds i32, i32* %50, i64 %51
  store i32 %49, i32* %arrayidx24, align 4, !tbaa !10
  %52 = load i32, i32* %t, align 4, !tbaa !10
  %53 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %54 = load i64, i64* %child, align 8, !tbaa !76
  %arrayidx25 = getelementptr inbounds i32, i32* %53, i64 %54
  store i32 %52, i32* %arrayidx25, align 4, !tbaa !10
  %55 = bitcast i32* %t to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %55) #10
  br label %do.cond

do.cond:                                          ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %do.cond
  %56 = load i64, i64* %child, align 8, !tbaa !76
  store i64 %56, i64* %root, align 8, !tbaa !76
  br label %for.cond1

for.end:                                          ; preds = %if.then20, %if.then5
  %57 = load i32, i32* %start, align 4, !tbaa !10
  %tobool26 = icmp ne i32 %57, 0
  br i1 %tobool26, label %if.end28, label %if.then27

if.then27:                                        ; preds = %for.end
  store i32 2, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end28:                                         ; preds = %for.end
  %58 = load i32, i32* %start, align 4, !tbaa !10
  %dec = add i32 %58, -1
  store i32 %dec, i32* %start, align 4, !tbaa !10
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end28, %if.then27
  %59 = bitcast i64* %root to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %59) #10
  %60 = bitcast i64* %child to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %60) #10
  %cleanup.dest = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest, label %unreachable [
    i32 0, label %cleanup.cont
    i32 2, label %for.end30
  ]

cleanup.cont:                                     ; preds = %cleanup
  br label %for.cond

for.end30:                                        ; preds = %cleanup
  %61 = load i32, i32* %size, align 4, !tbaa !10
  %sub31 = sub i32 %61, 1
  store i32 %sub31, i32* %end, align 4, !tbaa !10
  br label %while.cond

while.cond:                                       ; preds = %for.end81, %for.end30
  %62 = load i32, i32* %end, align 4, !tbaa !10
  %cmp32 = icmp ugt i32 %62, 0
  br i1 %cmp32, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %63 = bitcast i64* %child34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %63) #10
  %64 = bitcast i64* %root35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %64) #10
  store i64 0, i64* %root35, align 8, !tbaa !76
  br label %do.body36

do.body36:                                        ; preds = %while.body
  %65 = bitcast i32* %t37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %65) #10
  %66 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %67 = load i32, i32* %end, align 4, !tbaa !10
  %idxprom = zext i32 %67 to i64
  %arrayidx38 = getelementptr inbounds i32, i32* %66, i64 %idxprom
  %68 = load i32, i32* %arrayidx38, align 4, !tbaa !10
  store i32 %68, i32* %t37, align 4, !tbaa !10
  %69 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %arrayidx39 = getelementptr inbounds i32, i32* %69, i64 0
  %70 = load i32, i32* %arrayidx39, align 4, !tbaa !10
  %71 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %72 = load i32, i32* %end, align 4, !tbaa !10
  %idxprom40 = zext i32 %72 to i64
  %arrayidx41 = getelementptr inbounds i32, i32* %71, i64 %idxprom40
  store i32 %70, i32* %arrayidx41, align 4, !tbaa !10
  %73 = load i32, i32* %t37, align 4, !tbaa !10
  %74 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %arrayidx42 = getelementptr inbounds i32, i32* %74, i64 0
  store i32 %73, i32* %arrayidx42, align 4, !tbaa !10
  %75 = bitcast i32* %t37 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %75) #10
  br label %do.cond43

do.cond43:                                        ; preds = %do.body36
  br label %do.end44

do.end44:                                         ; preds = %do.cond43
  br label %for.cond45

for.cond45:                                       ; preds = %do.end80, %do.end44
  %76 = load i64, i64* %root35, align 8, !tbaa !76
  %shl46 = shl i64 %76, 1
  %add47 = add i64 %shl46, 1
  store i64 %add47, i64* %child34, align 8, !tbaa !76
  %77 = load i32, i32* %end, align 4, !tbaa !10
  %conv48 = zext i32 %77 to i64
  %cmp49 = icmp uge i64 %add47, %conv48
  br i1 %cmp49, label %if.then51, label %if.end52

if.then51:                                        ; preds = %for.cond45
  br label %for.end81

if.end52:                                         ; preds = %for.cond45
  %78 = load i64, i64* %child34, align 8, !tbaa !76
  %add53 = add i64 %78, 1
  %79 = load i32, i32* %end, align 4, !tbaa !10
  %conv54 = zext i32 %79 to i64
  %cmp55 = icmp ult i64 %add53, %conv54
  br i1 %cmp55, label %land.rhs57, label %land.end63

land.rhs57:                                       ; preds = %if.end52
  %80 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8, !tbaa !8
  %81 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8, !tbaa !8
  %82 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %83 = load i64, i64* %child34, align 8, !tbaa !76
  %arrayidx58 = getelementptr inbounds i32, i32* %82, i64 %83
  %84 = load i32, i32* %arrayidx58, align 4, !tbaa !10
  %85 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %86 = load i64, i64* %child34, align 8, !tbaa !76
  %add59 = add i64 %86, 1
  %arrayidx60 = getelementptr inbounds i32, i32* %85, i64 %add59
  %87 = load i32, i32* %arrayidx60, align 4, !tbaa !10
  %call61 = call i32 @mz_zip_reader_filename_less(%struct.mz_zip_array* %80, %struct.mz_zip_array* %81, i32 %84, i32 %87)
  %tobool62 = icmp ne i32 %call61, 0
  br label %land.end63

land.end63:                                       ; preds = %land.rhs57, %if.end52
  %88 = phi i1 [ false, %if.end52 ], [ %tobool62, %land.rhs57 ]
  %land.ext64 = zext i1 %88 to i32
  %conv65 = sext i32 %land.ext64 to i64
  %89 = load i64, i64* %child34, align 8, !tbaa !76
  %add66 = add i64 %89, %conv65
  store i64 %add66, i64* %child34, align 8, !tbaa !76
  %90 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir, align 8, !tbaa !8
  %91 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets, align 8, !tbaa !8
  %92 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %93 = load i64, i64* %root35, align 8, !tbaa !76
  %arrayidx67 = getelementptr inbounds i32, i32* %92, i64 %93
  %94 = load i32, i32* %arrayidx67, align 4, !tbaa !10
  %95 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %96 = load i64, i64* %child34, align 8, !tbaa !76
  %arrayidx68 = getelementptr inbounds i32, i32* %95, i64 %96
  %97 = load i32, i32* %arrayidx68, align 4, !tbaa !10
  %call69 = call i32 @mz_zip_reader_filename_less(%struct.mz_zip_array* %90, %struct.mz_zip_array* %91, i32 %94, i32 %97)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.end72, label %if.then71

if.then71:                                        ; preds = %land.end63
  br label %for.end81

if.end72:                                         ; preds = %land.end63
  br label %do.body73

do.body73:                                        ; preds = %if.end72
  %98 = bitcast i32* %t74 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %98) #10
  %99 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %100 = load i64, i64* %root35, align 8, !tbaa !76
  %arrayidx75 = getelementptr inbounds i32, i32* %99, i64 %100
  %101 = load i32, i32* %arrayidx75, align 4, !tbaa !10
  store i32 %101, i32* %t74, align 4, !tbaa !10
  %102 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %103 = load i64, i64* %child34, align 8, !tbaa !76
  %arrayidx76 = getelementptr inbounds i32, i32* %102, i64 %103
  %104 = load i32, i32* %arrayidx76, align 4, !tbaa !10
  %105 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %106 = load i64, i64* %root35, align 8, !tbaa !76
  %arrayidx77 = getelementptr inbounds i32, i32* %105, i64 %106
  store i32 %104, i32* %arrayidx77, align 4, !tbaa !10
  %107 = load i32, i32* %t74, align 4, !tbaa !10
  %108 = load i32*, i32** %pIndices, align 8, !tbaa !8
  %109 = load i64, i64* %child34, align 8, !tbaa !76
  %arrayidx78 = getelementptr inbounds i32, i32* %108, i64 %109
  store i32 %107, i32* %arrayidx78, align 4, !tbaa !10
  %110 = bitcast i32* %t74 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %110) #10
  br label %do.cond79

do.cond79:                                        ; preds = %do.body73
  br label %do.end80

do.end80:                                         ; preds = %do.cond79
  %111 = load i64, i64* %child34, align 8, !tbaa !76
  store i64 %111, i64* %root35, align 8, !tbaa !76
  br label %for.cond45

for.end81:                                        ; preds = %if.then71, %if.then51
  %112 = load i32, i32* %end, align 4, !tbaa !10
  %dec82 = add i32 %112, -1
  store i32 %dec82, i32* %end, align 4, !tbaa !10
  %113 = bitcast i64* %root35 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %113) #10
  %114 = bitcast i64* %child34 to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %114) #10
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %cleanup.dest.slot, align 4
  br label %cleanup83

cleanup83:                                        ; preds = %while.end, %if.then
  %115 = bitcast i32* %size to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %115) #10
  %116 = bitcast i32* %end to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %116) #10
  %117 = bitcast i32* %start to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %117) #10
  %118 = bitcast i32** %pIndices to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %118) #10
  %119 = bitcast %struct.mz_zip_array** %pCentral_dir to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %119) #10
  %120 = bitcast %struct.mz_zip_array** %pCentral_dir_offsets to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %120) #10
  %121 = bitcast %struct.mz_zip_internal_state_tag** %pState to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %121) #10
  %cleanup.dest90 = load i32, i32* %cleanup.dest.slot, align 4
  switch i32 %cleanup.dest90, label %unreachable [
    i32 0, label %cleanup.cont91
    i32 1, label %cleanup.cont91
  ]

cleanup.cont91:                                   ; preds = %cleanup83, %cleanup83
  ret void

unreachable:                                      ; preds = %cleanup83, %cleanup
  unreachable
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i32 @mz_zip_reader_filename_less(%struct.mz_zip_array* %pCentral_dir_array, %struct.mz_zip_array* %pCentral_dir_offsets, i32 %l_index, i32 %r_index) #9 {
entry:
  %pCentral_dir_array.addr = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr = alloca %struct.mz_zip_array*, align 8
  %l_index.addr = alloca i32, align 4
  %r_index.addr = alloca i32, align 4
  %pL = alloca i8*, align 8
  %pE = alloca i8*, align 8
  %pR = alloca i8*, align 8
  %l_len = alloca i32, align 4
  %r_len = alloca i32, align 4
  %l = alloca i8, align 1
  %r = alloca i8, align 1
  store %struct.mz_zip_array* %pCentral_dir_array, %struct.mz_zip_array** %pCentral_dir_array.addr, align 8, !tbaa !8
  store %struct.mz_zip_array* %pCentral_dir_offsets, %struct.mz_zip_array** %pCentral_dir_offsets.addr, align 8, !tbaa !8
  store i32 %l_index, i32* %l_index.addr, align 4, !tbaa !10
  store i32 %r_index, i32* %r_index.addr, align 4, !tbaa !10
  %0 = bitcast i8** %pL to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr, align 8, !tbaa !8
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %1, i32 0, i32 0
  %2 = load i8*, i8** %m_p, align 8, !tbaa !164
  %3 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr, align 8, !tbaa !8
  %m_p1 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %3, i32 0, i32 0
  %4 = load i8*, i8** %m_p1, align 8, !tbaa !164
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %l_index.addr, align 4, !tbaa !10
  %idxprom = zext i32 %6 to i64
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom
  %7 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %idxprom2 = zext i32 %7 to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %2, i64 %idxprom2
  store i8* %arrayidx3, i8** %pL, align 8, !tbaa !8
  %8 = bitcast i8** %pE to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #10
  %9 = bitcast i8** %pR to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %9) #10
  %10 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr, align 8, !tbaa !8
  %m_p4 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %10, i32 0, i32 0
  %11 = load i8*, i8** %m_p4, align 8, !tbaa !164
  %12 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr, align 8, !tbaa !8
  %m_p5 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %12, i32 0, i32 0
  %13 = load i8*, i8** %m_p5, align 8, !tbaa !164
  %14 = bitcast i8* %13 to i32*
  %15 = load i32, i32* %r_index.addr, align 4, !tbaa !10
  %idxprom6 = zext i32 %15 to i64
  %arrayidx7 = getelementptr inbounds i32, i32* %14, i64 %idxprom6
  %16 = load i32, i32* %arrayidx7, align 4, !tbaa !10
  %idxprom8 = zext i32 %16 to i64
  %arrayidx9 = getelementptr inbounds i8, i8* %11, i64 %idxprom8
  store i8* %arrayidx9, i8** %pR, align 8, !tbaa !8
  %17 = bitcast i32* %l_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %17) #10
  %18 = load i8*, i8** %pL, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 28
  %19 = bitcast i8* %add.ptr to i16*
  %20 = load i16, i16* %19, align 2, !tbaa !88
  %conv = zext i16 %20 to i32
  store i32 %conv, i32* %l_len, align 4, !tbaa !10
  %21 = bitcast i32* %r_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %21) #10
  %22 = load i8*, i8** %pR, align 8, !tbaa !8
  %add.ptr10 = getelementptr inbounds i8, i8* %22, i64 28
  %23 = bitcast i8* %add.ptr10 to i16*
  %24 = load i16, i16* %23, align 2, !tbaa !88
  %conv11 = zext i16 %24 to i32
  store i32 %conv11, i32* %r_len, align 4, !tbaa !10
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %l) #10
  store i8 0, i8* %l, align 1, !tbaa !12
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %r) #10
  store i8 0, i8* %r, align 1, !tbaa !12
  %25 = load i8*, i8** %pL, align 8, !tbaa !8
  %add.ptr12 = getelementptr inbounds i8, i8* %25, i64 46
  store i8* %add.ptr12, i8** %pL, align 8, !tbaa !8
  %26 = load i8*, i8** %pR, align 8, !tbaa !8
  %add.ptr13 = getelementptr inbounds i8, i8* %26, i64 46
  store i8* %add.ptr13, i8** %pR, align 8, !tbaa !8
  %27 = load i8*, i8** %pL, align 8, !tbaa !8
  %28 = load i32, i32* %l_len, align 4, !tbaa !10
  %29 = load i32, i32* %r_len, align 4, !tbaa !10
  %cmp = icmp ult i32 %28, %29
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %30 = load i32, i32* %l_len, align 4, !tbaa !10
  br label %cond.end

cond.false:                                       ; preds = %entry
  %31 = load i32, i32* %r_len, align 4, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %30, %cond.true ], [ %31, %cond.false ]
  %idx.ext = zext i32 %cond to i64
  %add.ptr15 = getelementptr inbounds i8, i8* %27, i64 %idx.ext
  store i8* %add.ptr15, i8** %pE, align 8, !tbaa !8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %32 = load i8*, i8** %pL, align 8, !tbaa !8
  %33 = load i8*, i8** %pE, align 8, !tbaa !8
  %cmp16 = icmp ult i8* %32, %33
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %34 = load i8*, i8** %pL, align 8, !tbaa !8
  %35 = load i8, i8* %34, align 1, !tbaa !12
  %conv18 = zext i8 %35 to i32
  %cmp19 = icmp sge i32 %conv18, 65
  br i1 %cmp19, label %land.lhs.true, label %cond.false26

land.lhs.true:                                    ; preds = %while.body
  %36 = load i8*, i8** %pL, align 8, !tbaa !8
  %37 = load i8, i8* %36, align 1, !tbaa !12
  %conv21 = zext i8 %37 to i32
  %cmp22 = icmp sle i32 %conv21, 90
  br i1 %cmp22, label %cond.true24, label %cond.false26

cond.true24:                                      ; preds = %land.lhs.true
  %38 = load i8*, i8** %pL, align 8, !tbaa !8
  %39 = load i8, i8* %38, align 1, !tbaa !12
  %conv25 = zext i8 %39 to i32
  %sub = sub nsw i32 %conv25, 65
  %add = add nsw i32 %sub, 97
  br label %cond.end28

cond.false26:                                     ; preds = %land.lhs.true, %while.body
  %40 = load i8*, i8** %pL, align 8, !tbaa !8
  %41 = load i8, i8* %40, align 1, !tbaa !12
  %conv27 = zext i8 %41 to i32
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false26, %cond.true24
  %cond29 = phi i32 [ %add, %cond.true24 ], [ %conv27, %cond.false26 ]
  %conv30 = trunc i32 %cond29 to i8
  store i8 %conv30, i8* %l, align 1, !tbaa !12
  %conv31 = zext i8 %conv30 to i32
  %42 = load i8*, i8** %pR, align 8, !tbaa !8
  %43 = load i8, i8* %42, align 1, !tbaa !12
  %conv32 = zext i8 %43 to i32
  %cmp33 = icmp sge i32 %conv32, 65
  br i1 %cmp33, label %land.lhs.true35, label %cond.false43

land.lhs.true35:                                  ; preds = %cond.end28
  %44 = load i8*, i8** %pR, align 8, !tbaa !8
  %45 = load i8, i8* %44, align 1, !tbaa !12
  %conv36 = zext i8 %45 to i32
  %cmp37 = icmp sle i32 %conv36, 90
  br i1 %cmp37, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %land.lhs.true35
  %46 = load i8*, i8** %pR, align 8, !tbaa !8
  %47 = load i8, i8* %46, align 1, !tbaa !12
  %conv40 = zext i8 %47 to i32
  %sub41 = sub nsw i32 %conv40, 65
  %add42 = add nsw i32 %sub41, 97
  br label %cond.end45

cond.false43:                                     ; preds = %land.lhs.true35, %cond.end28
  %48 = load i8*, i8** %pR, align 8, !tbaa !8
  %49 = load i8, i8* %48, align 1, !tbaa !12
  %conv44 = zext i8 %49 to i32
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false43, %cond.true39
  %cond46 = phi i32 [ %add42, %cond.true39 ], [ %conv44, %cond.false43 ]
  %conv47 = trunc i32 %cond46 to i8
  store i8 %conv47, i8* %r, align 1, !tbaa !12
  %conv48 = zext i8 %conv47 to i32
  %cmp49 = icmp ne i32 %conv31, %conv48
  br i1 %cmp49, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end45
  br label %while.end

if.end:                                           ; preds = %cond.end45
  %50 = load i8*, i8** %pL, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %incdec.ptr, i8** %pL, align 8, !tbaa !8
  %51 = load i8*, i8** %pR, align 8, !tbaa !8
  %incdec.ptr51 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %incdec.ptr51, i8** %pR, align 8, !tbaa !8
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %52 = load i8*, i8** %pL, align 8, !tbaa !8
  %53 = load i8*, i8** %pE, align 8, !tbaa !8
  %cmp52 = icmp eq i8* %52, %53
  br i1 %cmp52, label %cond.true54, label %cond.false57

cond.true54:                                      ; preds = %while.end
  %54 = load i32, i32* %l_len, align 4, !tbaa !10
  %55 = load i32, i32* %r_len, align 4, !tbaa !10
  %cmp55 = icmp ult i32 %54, %55
  %conv56 = zext i1 %cmp55 to i32
  br label %cond.end62

cond.false57:                                     ; preds = %while.end
  %56 = load i8, i8* %l, align 1, !tbaa !12
  %conv58 = zext i8 %56 to i32
  %57 = load i8, i8* %r, align 1, !tbaa !12
  %conv59 = zext i8 %57 to i32
  %cmp60 = icmp slt i32 %conv58, %conv59
  %conv61 = zext i1 %cmp60 to i32
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false57, %cond.true54
  %cond63 = phi i32 [ %conv56, %cond.true54 ], [ %conv61, %cond.false57 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %r) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %l) #10
  %58 = bitcast i32* %r_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %58) #10
  %59 = bitcast i32* %l_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %59) #10
  %60 = bitcast i8** %pR to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %60) #10
  %61 = bitcast i8** %pE to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %61) #10
  %62 = bitcast i8** %pL to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %62) #10
  ret i32 %cond63
}

declare i64 @fread(i8*, i64, i64, %struct.__sFILE*) #2

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i32 @mz_zip_filename_compare(%struct.mz_zip_array* %pCentral_dir_array, %struct.mz_zip_array* %pCentral_dir_offsets, i32 %l_index, i8* %pR, i32 %r_len) #9 {
entry:
  %pCentral_dir_array.addr = alloca %struct.mz_zip_array*, align 8
  %pCentral_dir_offsets.addr = alloca %struct.mz_zip_array*, align 8
  %l_index.addr = alloca i32, align 4
  %pR.addr = alloca i8*, align 8
  %r_len.addr = alloca i32, align 4
  %pL = alloca i8*, align 8
  %pE = alloca i8*, align 8
  %l_len = alloca i32, align 4
  %l = alloca i8, align 1
  %r = alloca i8, align 1
  store %struct.mz_zip_array* %pCentral_dir_array, %struct.mz_zip_array** %pCentral_dir_array.addr, align 8, !tbaa !8
  store %struct.mz_zip_array* %pCentral_dir_offsets, %struct.mz_zip_array** %pCentral_dir_offsets.addr, align 8, !tbaa !8
  store i32 %l_index, i32* %l_index.addr, align 4, !tbaa !10
  store i8* %pR, i8** %pR.addr, align 8, !tbaa !8
  store i32 %r_len, i32* %r_len.addr, align 4, !tbaa !10
  %0 = bitcast i8** %pL to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_array.addr, align 8, !tbaa !8
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %1, i32 0, i32 0
  %2 = load i8*, i8** %m_p, align 8, !tbaa !164
  %3 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pCentral_dir_offsets.addr, align 8, !tbaa !8
  %m_p1 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %3, i32 0, i32 0
  %4 = load i8*, i8** %m_p1, align 8, !tbaa !164
  %5 = bitcast i8* %4 to i32*
  %6 = load i32, i32* %l_index.addr, align 4, !tbaa !10
  %idxprom = zext i32 %6 to i64
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom
  %7 = load i32, i32* %arrayidx, align 4, !tbaa !10
  %idxprom2 = zext i32 %7 to i64
  %arrayidx3 = getelementptr inbounds i8, i8* %2, i64 %idxprom2
  store i8* %arrayidx3, i8** %pL, align 8, !tbaa !8
  %8 = bitcast i8** %pE to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %8) #10
  %9 = bitcast i32* %l_len to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %9) #10
  %10 = load i8*, i8** %pL, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 28
  %11 = bitcast i8* %add.ptr to i16*
  %12 = load i16, i16* %11, align 2, !tbaa !88
  %conv = zext i16 %12 to i32
  store i32 %conv, i32* %l_len, align 4, !tbaa !10
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %l) #10
  store i8 0, i8* %l, align 1, !tbaa !12
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %r) #10
  store i8 0, i8* %r, align 1, !tbaa !12
  %13 = load i8*, i8** %pL, align 8, !tbaa !8
  %add.ptr4 = getelementptr inbounds i8, i8* %13, i64 46
  store i8* %add.ptr4, i8** %pL, align 8, !tbaa !8
  %14 = load i8*, i8** %pL, align 8, !tbaa !8
  %15 = load i32, i32* %l_len, align 4, !tbaa !10
  %16 = load i32, i32* %r_len.addr, align 4, !tbaa !10
  %cmp = icmp ult i32 %15, %16
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %17 = load i32, i32* %l_len, align 4, !tbaa !10
  br label %cond.end

cond.false:                                       ; preds = %entry
  %18 = load i32, i32* %r_len.addr, align 4, !tbaa !10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %17, %cond.true ], [ %18, %cond.false ]
  %idx.ext = zext i32 %cond to i64
  %add.ptr6 = getelementptr inbounds i8, i8* %14, i64 %idx.ext
  store i8* %add.ptr6, i8** %pE, align 8, !tbaa !8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %19 = load i8*, i8** %pL, align 8, !tbaa !8
  %20 = load i8*, i8** %pE, align 8, !tbaa !8
  %cmp7 = icmp ult i8* %19, %20
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %21 = load i8*, i8** %pL, align 8, !tbaa !8
  %22 = load i8, i8* %21, align 1, !tbaa !12
  %conv9 = zext i8 %22 to i32
  %cmp10 = icmp sge i32 %conv9, 65
  br i1 %cmp10, label %land.lhs.true, label %cond.false17

land.lhs.true:                                    ; preds = %while.body
  %23 = load i8*, i8** %pL, align 8, !tbaa !8
  %24 = load i8, i8* %23, align 1, !tbaa !12
  %conv12 = zext i8 %24 to i32
  %cmp13 = icmp sle i32 %conv12, 90
  br i1 %cmp13, label %cond.true15, label %cond.false17

cond.true15:                                      ; preds = %land.lhs.true
  %25 = load i8*, i8** %pL, align 8, !tbaa !8
  %26 = load i8, i8* %25, align 1, !tbaa !12
  %conv16 = zext i8 %26 to i32
  %sub = sub nsw i32 %conv16, 65
  %add = add nsw i32 %sub, 97
  br label %cond.end19

cond.false17:                                     ; preds = %land.lhs.true, %while.body
  %27 = load i8*, i8** %pL, align 8, !tbaa !8
  %28 = load i8, i8* %27, align 1, !tbaa !12
  %conv18 = zext i8 %28 to i32
  br label %cond.end19

cond.end19:                                       ; preds = %cond.false17, %cond.true15
  %cond20 = phi i32 [ %add, %cond.true15 ], [ %conv18, %cond.false17 ]
  %conv21 = trunc i32 %cond20 to i8
  store i8 %conv21, i8* %l, align 1, !tbaa !12
  %conv22 = zext i8 %conv21 to i32
  %29 = load i8*, i8** %pR.addr, align 8, !tbaa !8
  %30 = load i8, i8* %29, align 1, !tbaa !12
  %conv23 = sext i8 %30 to i32
  %cmp24 = icmp sge i32 %conv23, 65
  br i1 %cmp24, label %land.lhs.true26, label %cond.false34

land.lhs.true26:                                  ; preds = %cond.end19
  %31 = load i8*, i8** %pR.addr, align 8, !tbaa !8
  %32 = load i8, i8* %31, align 1, !tbaa !12
  %conv27 = sext i8 %32 to i32
  %cmp28 = icmp sle i32 %conv27, 90
  br i1 %cmp28, label %cond.true30, label %cond.false34

cond.true30:                                      ; preds = %land.lhs.true26
  %33 = load i8*, i8** %pR.addr, align 8, !tbaa !8
  %34 = load i8, i8* %33, align 1, !tbaa !12
  %conv31 = sext i8 %34 to i32
  %sub32 = sub nsw i32 %conv31, 65
  %add33 = add nsw i32 %sub32, 97
  br label %cond.end36

cond.false34:                                     ; preds = %land.lhs.true26, %cond.end19
  %35 = load i8*, i8** %pR.addr, align 8, !tbaa !8
  %36 = load i8, i8* %35, align 1, !tbaa !12
  %conv35 = sext i8 %36 to i32
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false34, %cond.true30
  %cond37 = phi i32 [ %add33, %cond.true30 ], [ %conv35, %cond.false34 ]
  %conv38 = trunc i32 %cond37 to i8
  store i8 %conv38, i8* %r, align 1, !tbaa !12
  %conv39 = zext i8 %conv38 to i32
  %cmp40 = icmp ne i32 %conv22, %conv39
  br i1 %cmp40, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end36
  br label %while.end

if.end:                                           ; preds = %cond.end36
  %37 = load i8*, i8** %pL, align 8, !tbaa !8
  %incdec.ptr = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %incdec.ptr, i8** %pL, align 8, !tbaa !8
  %38 = load i8*, i8** %pR.addr, align 8, !tbaa !8
  %incdec.ptr42 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %incdec.ptr42, i8** %pR.addr, align 8, !tbaa !8
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %39 = load i8*, i8** %pL, align 8, !tbaa !8
  %40 = load i8*, i8** %pE, align 8, !tbaa !8
  %cmp43 = icmp eq i8* %39, %40
  br i1 %cmp43, label %cond.true45, label %cond.false47

cond.true45:                                      ; preds = %while.end
  %41 = load i32, i32* %l_len, align 4, !tbaa !10
  %42 = load i32, i32* %r_len.addr, align 4, !tbaa !10
  %sub46 = sub i32 %41, %42
  br label %cond.end51

cond.false47:                                     ; preds = %while.end
  %43 = load i8, i8* %l, align 1, !tbaa !12
  %conv48 = zext i8 %43 to i32
  %44 = load i8, i8* %r, align 1, !tbaa !12
  %conv49 = zext i8 %44 to i32
  %sub50 = sub nsw i32 %conv48, %conv49
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false47, %cond.true45
  %cond52 = phi i32 [ %sub46, %cond.true45 ], [ %sub50, %cond.false47 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %r) #10
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %l) #10
  %45 = bitcast i32* %l_len to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %45) #10
  %46 = bitcast i8** %pE to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %46) #10
  %47 = bitcast i8** %pL to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %47) #10
  ret i32 %cond52
}

declare i64 @"\01_fwrite"(i8*, i64, i64, %struct.__sFILE*) #2

declare i32 @utime(i8*, %struct.utimbuf*) #2

; Function Attrs: nounwind ssp uwtable
define internal i64 @mz_zip_dos_to_time_t(i32 %dos_time, i32 %dos_date) #0 {
entry:
  %dos_time.addr = alloca i32, align 4
  %dos_date.addr = alloca i32, align 4
  %tm = alloca %struct.tm, align 8
  store i32 %dos_time, i32* %dos_time.addr, align 4, !tbaa !10
  store i32 %dos_date, i32* %dos_date.addr, align 4, !tbaa !10
  %0 = bitcast %struct.tm* %tm to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* %0) #10
  %1 = bitcast %struct.tm* %tm to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 56, i1 false)
  %tm_isdst = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 8
  store i32 -1, i32* %tm_isdst, align 8, !tbaa !197
  %2 = load i32, i32* %dos_date.addr, align 4, !tbaa !10
  %shr = ashr i32 %2, 9
  %and = and i32 %shr, 127
  %add = add nsw i32 %and, 1980
  %sub = sub nsw i32 %add, 1900
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 5
  store i32 %sub, i32* %tm_year, align 4, !tbaa !187
  %3 = load i32, i32* %dos_date.addr, align 4, !tbaa !10
  %shr1 = ashr i32 %3, 5
  %and2 = and i32 %shr1, 15
  %sub3 = sub nsw i32 %and2, 1
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 4
  store i32 %sub3, i32* %tm_mon, align 8, !tbaa !188
  %4 = load i32, i32* %dos_date.addr, align 4, !tbaa !10
  %and4 = and i32 %4, 31
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 3
  store i32 %and4, i32* %tm_mday, align 4, !tbaa !189
  %5 = load i32, i32* %dos_time.addr, align 4, !tbaa !10
  %shr5 = ashr i32 %5, 11
  %and6 = and i32 %shr5, 31
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 2
  store i32 %and6, i32* %tm_hour, align 8, !tbaa !183
  %6 = load i32, i32* %dos_time.addr, align 4, !tbaa !10
  %shr7 = ashr i32 %6, 5
  %and8 = and i32 %shr7, 63
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 1
  store i32 %and8, i32* %tm_min, align 4, !tbaa !185
  %7 = load i32, i32* %dos_time.addr, align 4, !tbaa !10
  %shl = shl i32 %7, 1
  %and9 = and i32 %shl, 62
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %tm, i32 0, i32 0
  store i32 %and9, i32* %tm_sec, align 8, !tbaa !186
  %call = call i64 @"\01_mktime"(%struct.tm* %tm)
  %8 = bitcast %struct.tm* %tm to i8*
  call void @llvm.lifetime.end.p0i8(i64 56, i8* %8) #10
  ret i64 %call
}

declare i64 @"\01_mktime"(%struct.tm*) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %pZip, %struct.mz_zip_array* %pArray, i64 %min_new_capacity, i32 %growing) #0 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  %min_new_capacity.addr = alloca i64, align 8
  %growing.addr = alloca i32, align 4
  %pNew_p = alloca i8*, align 8
  %new_capacity = alloca i64, align 8
  %cleanup.dest.slot = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  store i64 %min_new_capacity, i64* %min_new_capacity.addr, align 8, !tbaa !4
  store i32 %growing, i32* %growing.addr, align 4, !tbaa !10
  %0 = bitcast i8** %pNew_p to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #10
  %1 = bitcast i64* %new_capacity to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* %1) #10
  %2 = load i64, i64* %min_new_capacity.addr, align 8, !tbaa !4
  store i64 %2, i64* %new_capacity, align 8, !tbaa !4
  %3 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_element_size = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %3, i32 0, i32 3
  %4 = load i32, i32* %m_element_size, align 8, !tbaa !165
  %tobool = icmp ne i32 %4, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %conv = sext i32 %lnot.ext to i64
  %expval = call i64 @llvm.expect.i64(i64 %conv, i64 0)
  %tobool1 = icmp ne i64 %expval, 0
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  call void @__assert_rtn(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__func__.mz_zip_array_ensure_capacity, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i32 3254, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.70, i64 0, i64 0)) #13
  unreachable

5:                                                ; No predecessors!
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %5
  %6 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_capacity = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %6, i32 0, i32 2
  %7 = load i64, i64* %m_capacity, align 8, !tbaa !173
  %8 = load i64, i64* %min_new_capacity.addr, align 8, !tbaa !4
  %cmp = icmp uge i64 %7, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end:                                           ; preds = %cond.end
  %9 = load i32, i32* %growing.addr, align 4, !tbaa !10
  %tobool3 = icmp ne i32 %9, 0
  br i1 %tobool3, label %if.then4, label %if.end14

if.then4:                                         ; preds = %if.end
  %10 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_capacity5 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %10, i32 0, i32 2
  %11 = load i64, i64* %m_capacity5, align 8, !tbaa !173
  %cmp6 = icmp ugt i64 1, %11
  br i1 %cmp6, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %if.then4
  br label %cond.end11

cond.false9:                                      ; preds = %if.then4
  %12 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_capacity10 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %12, i32 0, i32 2
  %13 = load i64, i64* %m_capacity10, align 8, !tbaa !173
  br label %cond.end11

cond.end11:                                       ; preds = %cond.false9, %cond.true8
  %cond = phi i64 [ 1, %cond.true8 ], [ %13, %cond.false9 ]
  store i64 %cond, i64* %new_capacity, align 8, !tbaa !4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %cond.end11
  %14 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %15 = load i64, i64* %min_new_capacity.addr, align 8, !tbaa !4
  %cmp12 = icmp ult i64 %14, %15
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %16 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %mul = mul i64 %16, 2
  store i64 %mul, i64* %new_capacity, align 8, !tbaa !4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end14

if.end14:                                         ; preds = %while.end, %if.end
  %17 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pRealloc = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %17, i32 0, i32 9
  %18 = load i8* (i8*, i8*, i64, i64)*, i8* (i8*, i8*, i64, i64)** %m_pRealloc, align 8, !tbaa !111
  %19 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %m_pAlloc_opaque = getelementptr inbounds %struct.mz_zip_archive, %struct.mz_zip_archive* %19, i32 0, i32 10
  %20 = load i8*, i8** %m_pAlloc_opaque, align 8, !tbaa !108
  %21 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_p = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %21, i32 0, i32 0
  %22 = load i8*, i8** %m_p, align 8, !tbaa !164
  %23 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_element_size15 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %23, i32 0, i32 3
  %24 = load i32, i32* %m_element_size15, align 8, !tbaa !165
  %conv16 = zext i32 %24 to i64
  %25 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %call = call i8* %18(i8* %20, i8* %22, i64 %conv16, i64 %25)
  store i8* %call, i8** %pNew_p, align 8, !tbaa !8
  %cmp17 = icmp eq i8* null, %call
  br i1 %cmp17, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

if.end20:                                         ; preds = %if.end14
  %26 = load i8*, i8** %pNew_p, align 8, !tbaa !8
  %27 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_p21 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %27, i32 0, i32 0
  store i8* %26, i8** %m_p21, align 8, !tbaa !164
  %28 = load i64, i64* %new_capacity, align 8, !tbaa !4
  %29 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_capacity22 = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %29, i32 0, i32 2
  store i64 %28, i64* %m_capacity22, align 8, !tbaa !173
  store i32 1, i32* %retval, align 4
  store i32 1, i32* %cleanup.dest.slot, align 4
  br label %cleanup

cleanup:                                          ; preds = %if.end20, %if.then19, %if.then
  %30 = bitcast i64* %new_capacity to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %30) #10
  %31 = bitcast i8** %pNew_p to i8*
  call void @llvm.lifetime.end.p0i8(i64 8, i8* %31) #10
  %32 = load i32, i32* %retval, align 4
  ret i32 %32
}

declare %struct.tm* @localtime(i64*) #2

; Function Attrs: alwaysinline nounwind ssp uwtable
define internal i32 @mz_zip_array_reserve(%struct.mz_zip_archive* %pZip, %struct.mz_zip_array* %pArray, i64 %new_capacity, i32 %growing) #9 {
entry:
  %retval = alloca i32, align 4
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pArray.addr = alloca %struct.mz_zip_array*, align 8
  %new_capacity.addr = alloca i64, align 8
  %growing.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store %struct.mz_zip_array* %pArray, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  store i64 %new_capacity, i64* %new_capacity.addr, align 8, !tbaa !4
  store i32 %growing, i32* %growing.addr, align 4, !tbaa !10
  %0 = load i64, i64* %new_capacity.addr, align 8, !tbaa !4
  %1 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %m_capacity = getelementptr inbounds %struct.mz_zip_array, %struct.mz_zip_array* %1, i32 0, i32 2
  %2 = load i64, i64* %m_capacity, align 8, !tbaa !173
  %cmp = icmp ugt i64 %0, %2
  br i1 %cmp, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %3 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %4 = load %struct.mz_zip_array*, %struct.mz_zip_array** %pArray.addr, align 8, !tbaa !8
  %5 = load i64, i64* %new_capacity.addr, align 8, !tbaa !4
  %6 = load i32, i32* %growing.addr, align 4, !tbaa !10
  %call = call i32 @mz_zip_array_ensure_capacity(%struct.mz_zip_archive* %3, %struct.mz_zip_array* %4, i64 %5, i32 %6)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then1

if.then1:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end2

if.end2:                                          ; preds = %if.end, %entry
  store i32 1, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end2, %if.then1
  %7 = load i32, i32* %retval, align 4
  ret i32 %7
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @mz_zip_writer_create_central_dir_header(%struct.mz_zip_archive* %pZip, i8* %pDst, i16 zeroext %filename_size, i16 zeroext %extra_size, i16 zeroext %comment_size, i64 %uncomp_size, i64 %comp_size, i32 %uncomp_crc32, i16 zeroext %method, i16 zeroext %bit_flags, i16 zeroext %dos_time, i16 zeroext %dos_date, i64 %local_header_ofs, i32 %ext_attributes) #0 {
entry:
  %pZip.addr = alloca %struct.mz_zip_archive*, align 8
  %pDst.addr = alloca i8*, align 8
  %filename_size.addr = alloca i16, align 2
  %extra_size.addr = alloca i16, align 2
  %comment_size.addr = alloca i16, align 2
  %uncomp_size.addr = alloca i64, align 8
  %comp_size.addr = alloca i64, align 8
  %uncomp_crc32.addr = alloca i32, align 4
  %method.addr = alloca i16, align 2
  %bit_flags.addr = alloca i16, align 2
  %dos_time.addr = alloca i16, align 2
  %dos_date.addr = alloca i16, align 2
  %local_header_ofs.addr = alloca i64, align 8
  %ext_attributes.addr = alloca i32, align 4
  store %struct.mz_zip_archive* %pZip, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  store i8* %pDst, i8** %pDst.addr, align 8, !tbaa !8
  store i16 %filename_size, i16* %filename_size.addr, align 2, !tbaa !88
  store i16 %extra_size, i16* %extra_size.addr, align 2, !tbaa !88
  store i16 %comment_size, i16* %comment_size.addr, align 2, !tbaa !88
  store i64 %uncomp_size, i64* %uncomp_size.addr, align 8, !tbaa !76
  store i64 %comp_size, i64* %comp_size.addr, align 8, !tbaa !76
  store i32 %uncomp_crc32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  store i16 %method, i16* %method.addr, align 2, !tbaa !88
  store i16 %bit_flags, i16* %bit_flags.addr, align 2, !tbaa !88
  store i16 %dos_time, i16* %dos_time.addr, align 2, !tbaa !88
  store i16 %dos_date, i16* %dos_date.addr, align 2, !tbaa !88
  store i64 %local_header_ofs, i64* %local_header_ofs.addr, align 8, !tbaa !76
  store i32 %ext_attributes, i32* %ext_attributes.addr, align 4, !tbaa !10
  %0 = load %struct.mz_zip_archive*, %struct.mz_zip_archive** %pZip.addr, align 8, !tbaa !8
  %1 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %2 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %3 = call i64 @llvm.objectsize.i64.p0i8(i8* %2, i1 false, i1 true, i1 false)
  %call = call i8* @__memset_chk(i8* %1, i32 0, i64 46, i64 %3) #10
  %4 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 0
  call void @mz_write_le32(i8* %add.ptr, i32 33639248)
  %5 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 6
  %6 = load i16, i16* %method.addr, align 2, !tbaa !88
  %conv = zext i16 %6 to i32
  %tobool = icmp ne i32 %conv, 0
  %7 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 20, i32 0
  %conv2 = trunc i32 %cond to i16
  call void @mz_write_le16(i8* %add.ptr1, i16 zeroext %conv2)
  %8 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr3 = getelementptr inbounds i8, i8* %8, i64 8
  %9 = load i16, i16* %bit_flags.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr3, i16 zeroext %9)
  %10 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr4 = getelementptr inbounds i8, i8* %10, i64 10
  %11 = load i16, i16* %method.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr4, i16 zeroext %11)
  %12 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr5 = getelementptr inbounds i8, i8* %12, i64 12
  %13 = load i16, i16* %dos_time.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr5, i16 zeroext %13)
  %14 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr6 = getelementptr inbounds i8, i8* %14, i64 14
  %15 = load i16, i16* %dos_date.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr6, i16 zeroext %15)
  %16 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr7 = getelementptr inbounds i8, i8* %16, i64 16
  %17 = load i32, i32* %uncomp_crc32.addr, align 4, !tbaa !10
  call void @mz_write_le32(i8* %add.ptr7, i32 %17)
  %18 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr8 = getelementptr inbounds i8, i8* %18, i64 20
  %19 = load i64, i64* %comp_size.addr, align 8, !tbaa !76
  %cmp = icmp ult i64 %19, 4294967295
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %20 = load i64, i64* %comp_size.addr, align 8, !tbaa !76
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond10 = phi i64 [ %20, %cond.true ], [ 4294967295, %cond.false ]
  %conv11 = trunc i64 %cond10 to i32
  call void @mz_write_le32(i8* %add.ptr8, i32 %conv11)
  %21 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr12 = getelementptr inbounds i8, i8* %21, i64 24
  %22 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  %cmp13 = icmp ult i64 %22, 4294967295
  br i1 %cmp13, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %cond.end
  %23 = load i64, i64* %uncomp_size.addr, align 8, !tbaa !76
  br label %cond.end17

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i64 [ %23, %cond.true15 ], [ 4294967295, %cond.false16 ]
  %conv19 = trunc i64 %cond18 to i32
  call void @mz_write_le32(i8* %add.ptr12, i32 %conv19)
  %24 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr20 = getelementptr inbounds i8, i8* %24, i64 28
  %25 = load i16, i16* %filename_size.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr20, i16 zeroext %25)
  %26 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr21 = getelementptr inbounds i8, i8* %26, i64 30
  %27 = load i16, i16* %extra_size.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr21, i16 zeroext %27)
  %28 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr22 = getelementptr inbounds i8, i8* %28, i64 32
  %29 = load i16, i16* %comment_size.addr, align 2, !tbaa !88
  call void @mz_write_le16(i8* %add.ptr22, i16 zeroext %29)
  %30 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr23 = getelementptr inbounds i8, i8* %30, i64 38
  %31 = load i32, i32* %ext_attributes.addr, align 4, !tbaa !10
  call void @mz_write_le32(i8* %add.ptr23, i32 %31)
  %32 = load i8*, i8** %pDst.addr, align 8, !tbaa !8
  %add.ptr24 = getelementptr inbounds i8, i8* %32, i64 42
  %33 = load i64, i64* %local_header_ofs.addr, align 8, !tbaa !76
  %cmp25 = icmp ult i64 %33, 4294967295
  br i1 %cmp25, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %cond.end17
  %34 = load i64, i64* %local_header_ofs.addr, align 8, !tbaa !76
  br label %cond.end29

cond.false28:                                     ; preds = %cond.end17
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i64 [ %34, %cond.true27 ], [ 4294967295, %cond.false28 ]
  %conv31 = trunc i64 %cond30 to i32
  call void @mz_write_le32(i8* %add.ptr24, i32 %conv31)
  ret i32 1
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { allocsize(1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind readnone }
attributes #8 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { allocsize(0) }
attributes #12 = { allocsize(1) }
attributes #13 = { cold noreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 2, !"SDK Version", [3 x i32] [i32 10, i32 15, i32 4]}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{!"clang version 9.0.1 (https://github.com/llvm-mirror/clang.git bed37d4b18ce6993fc2567e8de61f6b30fd0cb75) (https://github.com/llvm-mirror/llvm.git c2f5309b216cb02a0aae17353549d985b5b05635)"}
!4 = !{!5, !5, i64 0}
!5 = !{!"long", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9, !9, i64 0}
!9 = !{!"any pointer", !6, i64 0}
!10 = !{!11, !11, i64 0}
!11 = !{!"int", !6, i64 0}
!12 = !{!6, !6, i64 0}
!13 = !{!14, !11, i64 88}
!14 = !{!"mz_stream_s", !9, i64 0, !11, i64 8, !5, i64 16, !9, i64 24, !11, i64 32, !5, i64 40, !9, i64 48, !9, i64 56, !9, i64 64, !9, i64 72, !9, i64 80, !11, i64 88, !5, i64 96, !5, i64 104}
!15 = !{!14, !5, i64 96}
!16 = !{!14, !9, i64 48}
!17 = !{!14, !5, i64 104}
!18 = !{!14, !5, i64 16}
!19 = !{!14, !5, i64 40}
!20 = !{!14, !9, i64 64}
!21 = !{!14, !9, i64 72}
!22 = !{!14, !9, i64 80}
!23 = !{!14, !9, i64 56}
!24 = !{!25, !9, i64 0}
!25 = !{!"", !9, i64 0, !9, i64 8, !11, i64 16, !6, i64 20, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !11, i64 44, !9, i64 48, !9, i64 56, !9, i64 64, !9, i64 72, !11, i64 80, !11, i64 84, !11, i64 88, !11, i64 92, !11, i64 96, !11, i64 100, !11, i64 104, !11, i64 108, !11, i64 112, !11, i64 116, !11, i64 120, !11, i64 124, !11, i64 128, !6, i64 132, !9, i64 136, !9, i64 144, !9, i64 152, !9, i64 160, !6, i64 168, !9, i64 176, !5, i64 184, !5, i64 192, !6, i64 200, !6, i64 33226, !6, i64 34954, !6, i64 36682, !6, i64 37546, !6, i64 103082, !6, i64 168618, !6, i64 234154}
!26 = !{!25, !9, i64 8}
!27 = !{!25, !11, i64 16}
!28 = !{!25, !11, i64 28}
!29 = !{!25, !11, i64 92}
!30 = !{!25, !11, i64 88}
!31 = !{!25, !11, i64 84}
!32 = !{!25, !11, i64 44}
!33 = !{!25, !11, i64 40}
!34 = !{!25, !11, i64 36}
!35 = !{!25, !11, i64 128}
!36 = !{!25, !11, i64 96}
!37 = !{!25, !11, i64 124}
!38 = !{!25, !11, i64 120}
!39 = !{!25, !11, i64 116}
!40 = !{!25, !11, i64 112}
!41 = !{!25, !9, i64 48}
!42 = !{!25, !9, i64 56}
!43 = !{!25, !11, i64 80}
!44 = !{!25, !9, i64 64}
!45 = !{!25, !9, i64 72}
!46 = !{!25, !6, i64 132}
!47 = !{!25, !11, i64 108}
!48 = !{!25, !11, i64 104}
!49 = !{!25, !11, i64 100}
!50 = !{!25, !11, i64 32}
!51 = !{!25, !9, i64 136}
!52 = !{!25, !9, i64 144}
!53 = !{!25, !9, i64 152}
!54 = !{!25, !9, i64 160}
!55 = !{!25, !6, i64 168}
!56 = !{!25, !9, i64 176}
!57 = !{!25, !5, i64 184}
!58 = !{!25, !5, i64 192}
!59 = !{!14, !9, i64 24}
!60 = !{!14, !11, i64 32}
!61 = !{!14, !11, i64 8}
!62 = !{!14, !9, i64 0}
!63 = !{!64, !11, i64 0}
!64 = !{!"", !65, i64 0, !11, i64 11000, !11, i64 11004, !11, i64 11008, !11, i64 11012, !11, i64 11016, !6, i64 11020, !6, i64 43788}
!65 = !{!"tinfl_decompressor_tag", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !11, i64 36, !11, i64 40, !6, i64 44, !66, i64 56, !5, i64 64, !6, i64 72, !6, i64 10536, !6, i64 10540}
!66 = !{!"long long", !6, i64 0}
!67 = !{!64, !11, i64 11000}
!68 = !{!64, !11, i64 11004}
!69 = !{!64, !6, i64 43788}
!70 = !{!64, !11, i64 11008}
!71 = !{!64, !11, i64 11012}
!72 = !{!64, !11, i64 11016}
!73 = !{!64, !11, i64 28}
!74 = !{!65, !11, i64 4}
!75 = !{!65, !66, i64 56}
!76 = !{!66, !66, i64 0}
!77 = !{!65, !11, i64 32}
!78 = !{!65, !11, i64 36}
!79 = !{!65, !11, i64 40}
!80 = !{!65, !5, i64 64}
!81 = !{!65, !11, i64 0}
!82 = !{!65, !11, i64 12}
!83 = !{!65, !11, i64 8}
!84 = !{!65, !11, i64 28}
!85 = !{!65, !11, i64 16}
!86 = !{!65, !11, i64 20}
!87 = !{!65, !11, i64 24}
!88 = !{!89, !89, i64 0}
!89 = !{!"short", !6, i64 0}
!90 = !{!91, !11, i64 0}
!91 = !{!"", !11, i64 0, !9, i64 8}
!92 = !{!91, !9, i64 8}
!93 = !{!94, !11, i64 24}
!94 = !{!"", !5, i64 0, !5, i64 8, !9, i64 16, !11, i64 24}
!95 = !{!94, !5, i64 0}
!96 = !{!94, !9, i64 16}
!97 = !{!94, !5, i64 8}
!98 = !{!99, !9, i64 104}
!99 = !{!"", !66, i64 0, !66, i64 8, !11, i64 16, !6, i64 20, !6, i64 24, !6, i64 28, !66, i64 32, !9, i64 40, !9, i64 48, !9, i64 56, !9, i64 64, !9, i64 72, !9, i64 80, !9, i64 88, !9, i64 96, !9, i64 104}
!100 = !{!99, !9, i64 40}
!101 = !{!99, !9, i64 48}
!102 = !{!99, !6, i64 20}
!103 = !{!99, !6, i64 28}
!104 = !{!105, !9, i64 112}
!105 = !{!"mz_zip_internal_state_tag", !106, i64 0, !106, i64 32, !106, i64 64, !11, i64 96, !11, i64 100, !11, i64 104, !9, i64 112, !66, i64 120, !9, i64 128, !5, i64 136, !5, i64 144}
!106 = !{!"", !9, i64 0, !5, i64 8, !5, i64 16, !11, i64 24}
!107 = !{!99, !6, i64 24}
!108 = !{!99, !9, i64 64}
!109 = !{!99, !9, i64 72}
!110 = !{!99, !66, i64 0}
!111 = !{!99, !9, i64 56}
!112 = !{!99, !66, i64 8}
!113 = !{!99, !11, i64 16}
!114 = !{!105, !11, i64 24}
!115 = !{!105, !11, i64 56}
!116 = !{!105, !11, i64 88}
!117 = !{!105, !11, i64 96}
!118 = !{!105, !11, i64 100}
!119 = !{!105, !11, i64 104}
!120 = !{!99, !9, i64 96}
!121 = !{!105, !9, i64 0}
!122 = !{!105, !9, i64 32}
!123 = !{!105, !9, i64 64}
!124 = !{!99, !9, i64 88}
!125 = !{!105, !9, i64 128}
!126 = !{!105, !5, i64 136}
!127 = !{!105, !66, i64 120}
!128 = !{!105, !5, i64 72}
!129 = !{!130, !11, i64 76}
!130 = !{!"", !11, i64 0, !66, i64 8, !89, i64 16, !89, i64 18, !89, i64 20, !89, i64 22, !5, i64 24, !11, i64 32, !66, i64 40, !66, i64 48, !89, i64 56, !11, i64 60, !66, i64 64, !11, i64 72, !11, i64 76, !11, i64 80, !11, i64 84, !6, i64 88, !6, i64 600}
!131 = !{!130, !66, i64 40}
!132 = !{!130, !89, i64 20}
!133 = !{!130, !89, i64 22}
!134 = !{!130, !66, i64 48}
!135 = !{!130, !66, i64 64}
!136 = !{!130, !11, i64 32}
!137 = !{!138, !89, i64 92}
!138 = !{!"", !9, i64 0, !11, i64 8, !11, i64 12, !11, i64 16, !66, i64 24, !66, i64 32, !66, i64 40, !66, i64 48, !66, i64 56, !66, i64 64, !130, i64 72, !9, i64 1184, !9, i64 1192, !5, i64 1200, !65, i64 1208}
!139 = !{!138, !89, i64 94}
!140 = !{!138, !9, i64 0}
!141 = !{!138, !11, i64 8}
!142 = !{!138, !11, i64 12}
!143 = !{!138, !11, i64 16}
!144 = !{!138, !66, i64 32}
!145 = !{!138, !66, i64 56}
!146 = !{!138, !9, i64 1184}
!147 = !{!138, !9, i64 1192}
!148 = !{!138, !5, i64 1200}
!149 = !{!138, !66, i64 136}
!150 = !{!138, !66, i64 64}
!151 = !{!138, !66, i64 112}
!152 = !{!138, !66, i64 40}
!153 = !{!138, !66, i64 24}
!154 = !{!138, !66, i64 48}
!155 = !{!138, !11, i64 1208}
!156 = !{!138, !66, i64 120}
!157 = !{!138, !11, i64 104}
!158 = !{!130, !11, i64 84}
!159 = !{!130, !5, i64 24}
!160 = !{!161, !5, i64 0}
!161 = !{!"utimbuf", !5, i64 0, !5, i64 8}
!162 = !{!161, !5, i64 8}
!163 = !{!130, !11, i64 80}
!164 = !{!106, !9, i64 0}
!165 = !{!106, !11, i64 24}
!166 = !{!130, !11, i64 0}
!167 = !{!130, !66, i64 8}
!168 = !{!130, !89, i64 16}
!169 = !{!130, !89, i64 18}
!170 = !{!130, !89, i64 56}
!171 = !{!130, !11, i64 60}
!172 = !{!130, !11, i64 72}
!173 = !{!106, !5, i64 16}
!174 = !{!106, !5, i64 8}
!175 = !{!105, !5, i64 8}
!176 = !{!99, !9, i64 80}
!177 = !{!99, !66, i64 32}
!178 = !{!105, !5, i64 144}
!179 = !{!180, !9, i64 0}
!180 = !{!"", !9, i64 0, !66, i64 8, !66, i64 16}
!181 = !{!180, !66, i64 8}
!182 = !{!180, !66, i64 16}
!183 = !{!184, !11, i64 8}
!184 = !{!"tm", !11, i64 0, !11, i64 4, !11, i64 8, !11, i64 12, !11, i64 16, !11, i64 20, !11, i64 24, !11, i64 28, !11, i64 32, !5, i64 40, !9, i64 48}
!185 = !{!184, !11, i64 4}
!186 = !{!184, !11, i64 0}
!187 = !{!184, !11, i64 20}
!188 = !{!184, !11, i64 16}
!189 = !{!184, !11, i64 12}
!190 = !{!191, !5, i64 48}
!191 = !{!"stat", !11, i64 0, !89, i64 4, !89, i64 6, !66, i64 8, !11, i64 16, !11, i64 20, !11, i64 24, !192, i64 32, !192, i64 48, !192, i64 64, !192, i64 80, !66, i64 96, !66, i64 104, !11, i64 112, !11, i64 116, !11, i64 120, !11, i64 124, !6, i64 128}
!192 = !{!"timespec", !5, i64 0, !5, i64 8}
!193 = !{!194, !89, i64 0}
!194 = !{!"", !89, i64 0, !89, i64 2}
!195 = !{!194, !89, i64 2}
!196 = !{i64 0, i64 2, !88, i64 2, i64 2, !88}
!197 = !{!184, !11, i64 32}
